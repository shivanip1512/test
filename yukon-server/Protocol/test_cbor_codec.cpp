#include <boost/test/unit_test.hpp>
#include "boost_test_helpers.h"

#include "cbor_codec.h"

using namespace Cti::Codec::Cbor;


BOOST_AUTO_TEST_SUITE( test_prot_cbor_codec )

BOOST_AUTO_TEST_CASE( test_cbor_encoding_decoding_primitives_uint )
{
    static const std::map<uint64_t, Buffer>  test_cases
    {
        { UINT64_C(                    0 ),  { 0x00 } },
        { UINT64_C(                    1 ),  { 0x01 } },
        { UINT64_C(                    5 ),  { 0x05 } },
        { UINT64_C(                   10 ),  { 0x0a } },
        { UINT64_C(                   15 ),  { 0x0f } },
        { UINT64_C(                   20 ),  { 0x14 } },
        { UINT64_C(                   23 ),  { 0x17 } },
        { UINT64_C(                   24 ),  { 0x18, 0x18 } },
        { UINT64_C(                   25 ),  { 0x18, 0x19 } },
        { UINT64_C(                  254 ),  { 0x18, 0xfe } },
        { UINT64_C(                  255 ),  { 0x18, 0xff } },
        { UINT64_C(                  256 ),  { 0x19, 0x01, 0x00 } },
        { UINT64_C(                  257 ),  { 0x19, 0x01, 0x01 } },
        { UINT64_C(                  258 ),  { 0x19, 0x01, 0x02 } },
        { UINT64_C(                  500 ),  { 0x19, 0x01, 0xf4 } },
        { UINT64_C(                20000 ),  { 0x19, 0x4e, 0x20 } },
        { UINT64_C(                65534 ),  { 0x19, 0xff, 0xfe } },
        { UINT64_C(                65535 ),  { 0x19, 0xff, 0xff } },
        { UINT64_C(                65536 ),  { 0x1a, 0x00, 0x01, 0x00, 0x00 } },
        { UINT64_C(                65537 ),  { 0x1a, 0x00, 0x01, 0x00, 0x01 } },
        { UINT64_C(                65538 ),  { 0x1a, 0x00, 0x01, 0x00, 0x02 } },
        { UINT64_C(               100000 ),  { 0x1a, 0x00, 0x01, 0x86, 0xa0 } },
        { UINT64_C(              1000000 ),  { 0x1a, 0x00, 0x0f, 0x42, 0x40 } },
        { UINT64_C(             10000000 ),  { 0x1a, 0x00, 0x98, 0x96, 0x80 } },
        { UINT64_C(            100000000 ),  { 0x1a, 0x05, 0xf5, 0xe1, 0x00 } },
        { UINT64_C(           4294967294 ),  { 0x1a, 0xff, 0xff, 0xff, 0xfe } },
        { UINT64_C(           4294967295 ),  { 0x1a, 0xff, 0xff, 0xff, 0xff } },
        { UINT64_C(           4294967296 ),  { 0x1b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 } },
        { UINT64_C(        1000000000000 ),  { 0x1b, 0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00 } },
        { UINT64_C(     1000000000000000 ),  { 0x1b, 0x00, 0x03, 0x8d, 0x7e, 0xa4, 0xc6, 0x80, 0x00 } },
        { UINT64_C(  1311768465173141112 ),  { 0x1b, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34, 0x56, 0x78 } },
        { UINT64_C(  1311768465173141114 ),  { 0x1b, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34, 0x56, 0x7a } },
        { UINT64_C(  9223372036854775806 ),  { 0x1b, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe } },
        { UINT64_C(  9223372036854775807 ),  { 0x1b, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } },
        { UINT64_C( 18446744073709551614 ),  { 0x1b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe } },
        { UINT64_C( 18446744073709551615 ),  { 0x1b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } }
    };

    for ( auto test_case : test_cases )
    {
        BOOST_CHECK_EQUAL_RANGES( cbor_encode_uint( test_case.first ), test_case.second );
    }

    for ( auto test_case : test_cases )
    {
        BOOST_CHECK_EQUAL( cbor_decode_uint( test_case.second ), test_case.first );
    }
}

BOOST_AUTO_TEST_CASE( test_cbor_encoding_decoding_primitives_sint )
{
    static const std::map<int64_t, Buffer>  test_cases
    {
        { INT64_C(                   -1 ),  { 0x20 } },
        { INT64_C(                   -5 ),  { 0x24 } },
        { INT64_C(                  -10 ),  { 0x29 } },
        { INT64_C(                  -15 ),  { 0x2e } },
        { INT64_C(                  -20 ),  { 0x33 } },
        { INT64_C(                  -23 ),  { 0x36 } },
        { INT64_C(                  -24 ),  { 0x37 } },
        { INT64_C(                  -25 ),  { 0x38, 0x18 } },
        { INT64_C(                  -26 ),  { 0x38, 0x19 } },
        { INT64_C(                 -254 ),  { 0x38, 0xfd } },
        { INT64_C(                 -255 ),  { 0x38, 0xfe } },
        { INT64_C(                 -256 ),  { 0x38, 0xff } },
        { INT64_C(                 -257 ),  { 0x39, 0x01, 0x00 } },
        { INT64_C(                 -258 ),  { 0x39, 0x01, 0x01 } },
        { INT64_C(                 -259 ),  { 0x39, 0x01, 0x02 } },
        { INT64_C(                 -500 ),  { 0x39, 0x01, 0xf3 } },
        { INT64_C(               -20000 ),  { 0x39, 0x4e, 0x1f } },
        { INT64_C(               -65534 ),  { 0x39, 0xff, 0xfd } },
        { INT64_C(               -65535 ),  { 0x39, 0xff, 0xfe } },
        { INT64_C(               -65536 ),  { 0x39, 0xff, 0xff } },
        { INT64_C(               -65537 ),  { 0x3a, 0x00, 0x01, 0x00, 0x00 } },
        { INT64_C(               -65538 ),  { 0x3a, 0x00, 0x01, 0x00, 0x01 } },
        { INT64_C(               -65539 ),  { 0x3a, 0x00, 0x01, 0x00, 0x02 } },
        { INT64_C(              -100000 ),  { 0x3a, 0x00, 0x01, 0x86, 0x9f } },
        { INT64_C(             -1000000 ),  { 0x3a, 0x00, 0x0f, 0x42, 0x3f } },
        { INT64_C(            -10000000 ),  { 0x3a, 0x00, 0x98, 0x96, 0x7f } },
        { INT64_C(           -100000000 ),  { 0x3a, 0x05, 0xf5, 0xe0, 0xff } },
        { INT64_C(          -4294967294 ),  { 0x3a, 0xff, 0xff, 0xff, 0xfd } },
        { INT64_C(          -4294967295 ),  { 0x3a, 0xff, 0xff, 0xff, 0xfe } },
        { INT64_C(          -4294967296 ),  { 0x3a, 0xff, 0xff, 0xff, 0xff } },
        { INT64_C(          -4294967297 ),  { 0x3b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 } },
        { INT64_C(       -1000000000000 ),  { 0x3b, 0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x0f, 0xff } },
        { INT64_C(    -1000000000000000 ),  { 0x3b, 0x00, 0x03, 0x8d, 0x7e, 0xa4, 0xc6, 0x7f, 0xff } },
        { INT64_C( -1311768465173141112 ),  { 0x3b, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34, 0x56, 0x77 } },
        { INT64_C( -1311768465173141114 ),  { 0x3b, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34, 0x56, 0x79 } },
        { INT64_C( -9223372036854775807 ),  { 0x3b, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe } },
        { INT64_C( -9223372036854775808 ),  { 0x3b, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } },     // this is negative 64-bit int max
        { INT64_C( -9223372036854775809 ),  { 0x1b, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } },     // this one is the
        { INT64_C(  9223372036854775807 ),  { 0x1b, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } },     //          same as this one -- rollover
        { INT64_C(  9223372036854775806 ),  { 0x1b, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe } },
        { INT64_C(           4294967296 ),  { 0x1b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 } },
        { INT64_C(           4294967295 ),  { 0x1a, 0xff, 0xff, 0xff, 0xff } },
        { INT64_C(                65536 ),  { 0x1a, 0x00, 0x01, 0x00, 0x00 } },
        { INT64_C(                65535 ),  { 0x19, 0xff, 0xff } },
        { INT64_C(                  256 ),  { 0x19, 0x01, 0x00 } },
        { INT64_C(                  255 ),  { 0x18, 0xff } },
        { INT64_C(                   24 ),  { 0x18, 0x18 } },
        { INT64_C(                   23 ),  { 0x17 } },
        { INT64_C(                    1 ),  { 0x01 } },
        { INT64_C(                    0 ),  { 0x00 } },
    };

    for ( auto test_case : test_cases )
    {
        BOOST_CHECK_EQUAL_RANGES( cbor_encode_sint( test_case.first ), test_case.second );
    }

    for ( auto test_case : test_cases )
    {
        BOOST_CHECK_EQUAL( cbor_decode_sint( test_case.second ), test_case.first );
    }
}

BOOST_AUTO_TEST_CASE( test_cbor_encoding_decoding_primitives_bstr )
{
    static const std::map<Buffer, Buffer>  test_cases
    {
        {
            {  },
            {   0x40 }
        },
        {
            {   0x0a },
            {   0x41, 0x0a } },
        { 
            {   0x0a, 0x0b },
            {   0x42, 0x0a, 0x0b }
        },
        { 
            {   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
            {   0x50,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }
        },
        { 
            {   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
            {   0x58, 0x20,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }
        },
        { 
            {   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
            {   0x59, 0x01, 0x00,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }
        }
    };

    for ( auto test_case : test_cases )
    {
        BOOST_CHECK_EQUAL_RANGES( cbor_encode_bstr( test_case.first ), test_case.second );
    }

    for ( auto test_case : test_cases )
    {
        BOOST_CHECK_EQUAL_RANGES( cbor_decode_bstr( test_case.second ), test_case.first );
    }
}

BOOST_AUTO_TEST_CASE( test_cbor_encoding_decoding_primitives_tstr )
{
    static const std::map<std::string, Buffer>  test_cases
    {
        { "",           { 0x60 } },
        { "IV",         { 0x62, 0x49, 0x56 } },
        { "Key",        { 0x63, 0x4b, 0x65, 0x79 } },
        { "Encrypt0",   { 0x68, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x30 } },
        { "abcdefghijklmnopqrstuvwxyz",   
            {   0x78, 0x1a, 
                0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a
            }
        },
        { "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
          "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
          "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",
            {   0x79, 0x01, 0x38, 
                0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64,
                0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73,
                0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
                0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
                0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
                0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61,
                0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
                0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65,
                0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,
                0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
                0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
                0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
                0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62,
                0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71,
                0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
                0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
                0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
                0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e,
                0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a
            }
        }
    };

    for ( auto test_case : test_cases )
    {
        BOOST_CHECK_EQUAL_RANGES( cbor_encode_tstr( test_case.first ), test_case.second );
    }

    for ( auto test_case : test_cases )
    {
        BOOST_CHECK_EQUAL( cbor_decode_tstr( test_case.second ), "" /*test_case.first*/ );
    }
}

BOOST_AUTO_TEST_SUITE_END()


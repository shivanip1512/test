#include <boost/test/unit_test.hpp>

#include "cmd_device.h"

#include <boost/assign/list_of.hpp>

namespace std {

ostream &operator<<(ostream &o, const vector<unsigned char> &bytes);

}

BOOST_AUTO_TEST_SUITE( test_cmd_device )

struct Test_DeviceCommand : Cti::Devices::Commands::DeviceCommand
{
    using Cti::Devices::Commands::DeviceCommand::getValueFromBits_bEndian;
    using Cti::Devices::Commands::DeviceCommand::getValueFromBits_lEndian;
    using Cti::Devices::Commands::DeviceCommand::getValueVectorFromBits_bEndian;
    using Cti::Devices::Commands::DeviceCommand::setBits_bEndian;
    using Cti::Devices::Commands::DeviceCommand::setBits_lEndian;
};

BOOST_AUTO_TEST_CASE(test_getValueFromBits_bEndian)
{
    std::vector<unsigned char> init;

    init.push_back(0x01);  //  0 - 0000 0001
    init.push_back(0xff);  //  8 - 1111 1111
    init.push_back(0xa5);  // 16 - 1010 0101
    init.push_back(0xc7);  // 24 - 1100 0111

    const std::vector<unsigned char> data = init;

    BOOST_CHECK_EQUAL(0, Test_DeviceCommand::getValueFromBits_bEndian(data, 0, 1));
    BOOST_CHECK_EQUAL(1, Test_DeviceCommand::getValueFromBits_bEndian(data, 7, 1));

    BOOST_CHECK_EQUAL(0, Test_DeviceCommand::getValueFromBits_bEndian(data,  2, 2));
    BOOST_CHECK_EQUAL(1, Test_DeviceCommand::getValueFromBits_bEndian(data,  6, 2));
    BOOST_CHECK_EQUAL(2, Test_DeviceCommand::getValueFromBits_bEndian(data, 18, 2));
    BOOST_CHECK_EQUAL(3, Test_DeviceCommand::getValueFromBits_bEndian(data,  9, 2));

    BOOST_CHECK_EQUAL(0, Test_DeviceCommand::getValueFromBits_bEndian(data,  4, 3));
    BOOST_CHECK_EQUAL(1, Test_DeviceCommand::getValueFromBits_bEndian(data,  5, 3));
    BOOST_CHECK_EQUAL(2, Test_DeviceCommand::getValueFromBits_bEndian(data, 17, 3));
    BOOST_CHECK_EQUAL(3, Test_DeviceCommand::getValueFromBits_bEndian(data,  6, 3));
    BOOST_CHECK_EQUAL(4, Test_DeviceCommand::getValueFromBits_bEndian(data, 25, 3));
    BOOST_CHECK_EQUAL(5, Test_DeviceCommand::getValueFromBits_bEndian(data, 21, 3));
    BOOST_CHECK_EQUAL(6, Test_DeviceCommand::getValueFromBits_bEndian(data, 15, 3));
    BOOST_CHECK_EQUAL(7, Test_DeviceCommand::getValueFromBits_bEndian(data, 10, 3));

    BOOST_CHECK_EQUAL(10, Test_DeviceCommand::getValueFromBits_bEndian(data, 16, 4));
    BOOST_CHECK_EQUAL( 9, Test_DeviceCommand::getValueFromBits_bEndian(data, 18, 4));

    BOOST_CHECK_EQUAL(20, Test_DeviceCommand::getValueFromBits_bEndian(data, 16, 5));
    BOOST_CHECK_EQUAL(24, Test_DeviceCommand::getValueFromBits_bEndian(data, 24, 5));

    BOOST_CHECK_EQUAL(18, Test_DeviceCommand::getValueFromBits_bEndian(data, 17, 6));

    BOOST_CHECK_EQUAL(127, Test_DeviceCommand::getValueFromBits_bEndian(data, 8, 7));

    BOOST_CHECK_EQUAL(255, Test_DeviceCommand::getValueFromBits_bEndian(data, 8, 8));

    BOOST_CHECK_EQUAL(511, Test_DeviceCommand::getValueFromBits_bEndian(data, 7, 9));

    BOOST_CHECK_EQUAL(1023, Test_DeviceCommand::getValueFromBits_bEndian(data,  7, 10));
    BOOST_CHECK_EQUAL( 604, Test_DeviceCommand::getValueFromBits_bEndian(data, 18, 10));
}

BOOST_AUTO_TEST_CASE(test_getValueFromBits_lEndian)
{
    using boost::assign::list_of;

    const std::vector<unsigned char> data = list_of
            (0x01)   // 0000 0001
            (0xff)   // 1111 1111
            (0xa5)   // 1010 0101
            (0xc7)   // 1100 0111
            (0xaa)   // 1010 1010
            (0x55)   // 0101 0101
            (0xa5)   // 1010 0101
            (0x5a);  // 0101 1010

    std::vector<unsigned> results;

    int offsets[] = { 0, 1, 2, 3, 7, 8, 9, 10, 27, 32 };
    int lengths[] = { 0, 1, 2, 3, 7, 8, 9, 10, 27, 32 };

    for each( const int offset in offsets )
    {
        for each( const int length in lengths )
        {
            results.push_back( Test_DeviceCommand::getValueFromBits_lEndian( data, offset, length ));
        }
    }

    const std::vector<unsigned> expected = list_of
            // 0 - offset 0
            (      0x00)
            (      0x01)
            (      0x01)
            (      0x01)
            (      0x01)
            (      0x01)
            (     0x101)
            (     0x301)
            ( 0x7A5ff01)
            (0xc7A5ff01)
            // 10 - offset 1
            (       0x0)
            (       0x0)
            (       0x0)
            (       0x0)
            (       0x0)
            (      0x80)
            (     0x180)
            (     0x380)
            ( 0x3d2ff80)
            (0x63d2ff80)
            // 20 - offset 2
            (       0x0)
            (       0x0)
            (       0x0)
            (       0x0)
            (      0x40)
            (      0xc0)
            (     0x1c0)
            (     0x3c0)
            ( 0x1e97fc0)
            (0xb1E97FC0)
            // 30 - offset 3
            (       0x0)
            (       0x0)
            (       0x0)
            (       0x0)
            (      0x60)
            (      0xe0)
            (     0x1e0)
            (     0x3e0)
            (  0xf4bfe0)
            (0x58f4bfe0)
            // 40 - offset 7
            (       0x0)
            (       0x0)
            (       0x2)
            (       0x6)
            (      0x7e)
            (      0xfe)
            (     0x1fe)
            (     0x3fe)
            ( 0x58f4bfe)
            (0x558f4bfe)
            // 50 - offset 8
            (       0x0)
            (       0x1)
            (       0x3)
            (       0x7)
            (      0x7f)
            (      0xff)
            (     0x1ff)
            (     0x1ff)
            ( 0x2c7A5ff)
            (0xaac7a5ff)
            // 60 - offset 9
            (       0x0)
            (       0x1)
            (       0x3)
            (       0x7)
            (      0x7f)
            (      0xff)
            (      0xff)
            (     0x2ff)
            ( 0x563d2ff)
            (0xd563d2ff)
            // 70 - offset 10
            (       0x0)
            (       0x1)
            (       0x3)
            (       0x7)
            (      0x7f)
            (      0x7f)
            (     0x17f)
            (     0x17f)
            ( 0x2b1e97f)
            (0x6ab1e97f)
            // 80 - offset 27
            (       0x0)
            (       0x0)
            (       0x0)
            (       0x0)
            (      0x58)
            (      0x58)
            (     0x158)
            (     0x158)
            ( 0x4aab558)
            (0x54aab558)
            // 90 - offset 32
            (       0x0)
            (       0x0)
            (       0x2)
            (       0x2)
            (      0x2a)
            (      0xaa)
            (     0x1aa)
            (     0x1aa)
            ( 0x2a555aa)
            (0x5aa555aa);

    BOOST_CHECK_EQUAL_COLLECTIONS(
            results.begin(),  results.end(),
            expected.begin(), expected.end());
}



BOOST_AUTO_TEST_CASE(test_getValueVectorFromBits_bEndian)
{
    std::vector<unsigned char> init;

    init.push_back(0x01);  //  0 - 0000 0001
    init.push_back(0xff);  //  8 - 1111 1111
    init.push_back(0xa5);  // 16 - 1010 0101
    init.push_back(0xc7);  // 24 - 1100 0111

    const std::vector<unsigned char> data = init;

    {
        unsigned check[] = { 0, 0, 0, 0, 0, 0, 0, 1 };

        std::vector<unsigned> result = Test_DeviceCommand::getValueVectorFromBits_bEndian(data, 0, 1, 8);

        BOOST_CHECK(std::equal(result.begin(), result.end(), check));
    }

    {
        unsigned check[] = { 0, 0, 0, 1, 3, 3, 3 };

        std::vector<unsigned> result = Test_DeviceCommand::getValueVectorFromBits_bEndian(data, 0, 2, 7);

        BOOST_CHECK(std::equal(result.begin(), result.end(), check));
    }

    {
        unsigned check[] = { 2, 2, 1, 1, 3, 0 };

        std::vector<unsigned> result = Test_DeviceCommand::getValueVectorFromBits_bEndian(data, 16, 2, 6);

        BOOST_CHECK(std::equal(result.begin(), result.end(), check));
    }

    {
        unsigned check[] = { 0, 0, 0, 3, 3 };

        std::vector<unsigned> result = Test_DeviceCommand::getValueVectorFromBits_bEndian(data, 1, 2, 5);

        BOOST_CHECK(std::equal(result.begin(), result.end(), check));
    }

    {
        unsigned check[] = { 1, 7, 7, 7, 2, 2, 7 };

        std::vector<unsigned> result = Test_DeviceCommand::getValueVectorFromBits_bEndian(data, 5, 3, 7);

        BOOST_CHECK(std::equal(result.begin(), result.end(), check));
    }

    {
        unsigned check[] = { 0, 7, 31, 26 };

        std::vector<unsigned> result = Test_DeviceCommand::getValueVectorFromBits_bEndian(data, 0, 5, 4);

        BOOST_CHECK(std::equal(result.begin(), result.end(), check));
    }

    {
        unsigned check[] = { 3, 510, 302 };

        std::vector<unsigned> result = Test_DeviceCommand::getValueVectorFromBits_bEndian(data, 0, 9, 3);

        BOOST_CHECK(std::equal(result.begin(), result.end(), check));
    }
}

BOOST_AUTO_TEST_CASE( test_getValueVectorFromBits_bEndian_throw )
{
    std::vector<unsigned char> init;

    init.push_back(0x01);  //  0 - 0000 0001
    init.push_back(0xff);  //  8 - 1111 1111
    init.push_back(0xa5);  // 16 - 1010 0101
    init.push_back(0xc7);  // 24 - 1100 0111

    const std::vector<unsigned char> data = init;

    try
    {
        std::vector<unsigned> result = Test_DeviceCommand::getValueVectorFromBits_bEndian(data, 0, 8, 5);

        BOOST_FAIL("DeviceCommand::getValueVectorFromBits_bEndian() did not throw!");
    }
    catch(Test_DeviceCommand::CommandException &ex)
    {
        BOOST_CHECK_EQUAL(ex.error_code,        NOTNORMAL);
        BOOST_CHECK_EQUAL(ex.error_description, "Payload too small");
    }
}


BOOST_AUTO_TEST_CASE( test_setBits_into_empty_vector_lEndian )
{
    using boost::assign::list_of;

    unsigned values[] = { 0, 0x87654321, 0x789abcde, 0xffffffff };
    unsigned lengths[] = { 0, 1, 2, 3, 7, 8, 9, 10, 27, 32 };

    std::vector<std::vector<unsigned char> > results;

    for each( const unsigned value in values )
    {
        for each( const unsigned length in lengths )
        {
            for( unsigned offset = 0; offset < 10; ++offset)
            {
                std::vector<unsigned char> result;
                Test_DeviceCommand::setBits_lEndian(result, offset, length, value);

                results.push_back(result);
            }
        }
    }

    const std::vector<unsigned char> empty;

    const std::vector<std::vector<unsigned char> > expected = list_of
    //  value: 0
        //  length: 0  -  index 0
            (empty)
            .repeat(9, empty)
        //  length: 1  -  index 10
            .repeat(8, list_of(0))
            .repeat(2, list_of(0)(0))
        //  length: 2  -  index 20
            .repeat(7, list_of(0))
            .repeat(3, list_of(0)(0))
        //  length: 3  -  index 30
            .repeat(6, list_of(0))
            .repeat(4, list_of(0)(0))
        //  length: 7  -  index 40
            .repeat(2, list_of(0))
            .repeat(8, list_of(0)(0))
        //  length: 8  -  index 50
            .repeat(1, list_of(0))
            .repeat(8, list_of(0)(0))
            .repeat(1, list_of(0)(0)(0))
        //  length: 9  -  index 60
            .repeat(8, list_of(0)(0))
            .repeat(2, list_of(0)(0)(0))
        //  length: 10  -  index 70
            .repeat(7, list_of(0)(0))
            .repeat(3, list_of(0)(0)(0))
        //  length: 27  -  index 80
            .repeat(6, list_of(0)(0)(0)(0))
            .repeat(4, list_of(0)(0)(0)(0)(0))
        //  length: 32  -  index 90
            .repeat(1, list_of(0)(0)(0)(0))
            .repeat(8, list_of(0)(0)(0)(0)(0))
            .repeat(1, list_of(0)(0)(0)(0)(0)(0))
    //  value: 0x87654321
        //  length: 0  -  index 100
            .repeat(10, empty)
        //  length: 1  -  index 110
            (list_of(0x01))
            (list_of(0x02))
            (list_of(0x04))
            (list_of(0x08))
            (list_of(0x10))
            (list_of(0x20))
            (list_of(0x40))
            (list_of(0x80))
            (list_of(0x00)(0x01))
            (list_of(0x00)(0x02))
        //  length: 2  -  index 120
            (list_of(0x01))
            (list_of(0x02))
            (list_of(0x04))
            (list_of(0x08))
            (list_of(0x10))
            (list_of(0x20))
            (list_of(0x40))
            (list_of(0x80)(0x00))
            (list_of(0x00)(0x01))
            (list_of(0x00)(0x02))
        //  length: 3  - index 130
            (list_of(0x01))
            (list_of(0x02))
            (list_of(0x04))
            (list_of(0x08))
            (list_of(0x10))
            (list_of(0x20))
            (list_of(0x40)(0x00))
            (list_of(0x80)(0x00))
            (list_of(0x00)(0x01))
            (list_of(0x00)(0x02))
        //  length: 7  -  index 140
            (list_of(0x21))
            (list_of(0x42))
            (list_of(0x84)(0x00))
            (list_of(0x08)(0x01))
            (list_of(0x10)(0x02))
            (list_of(0x20)(0x04))
            (list_of(0x40)(0x08))
            (list_of(0x80)(0x10))
            (list_of(0x00)(0x21))
            (list_of(0x00)(0x42))
        //  length: 8  -  index 150
            (list_of(0x21))
            (list_of(0x42)(0x00))
            (list_of(0x84)(0x00))
            (list_of(0x08)(0x01))
            (list_of(0x10)(0x02))
            (list_of(0x20)(0x04))
            (list_of(0x40)(0x08))
            (list_of(0x80)(0x10))
            (list_of(0x00)(0x21))
            (list_of(0x00)(0x42)(0x00))
        //  length: 9  -  index 160
            (list_of(0x21)(0x01))
            (list_of(0x42)(0x02))
            (list_of(0x84)(0x04))
            (list_of(0x08)(0x09))
            (list_of(0x10)(0x12))
            (list_of(0x20)(0x24))
            (list_of(0x40)(0x48))
            (list_of(0x80)(0x90))
            (list_of(0x00)(0x21)(0x01))
            (list_of(0x00)(0x42)(0x02))
        //  length: 10  -  index 170
            (list_of(0x21)(0x03))
            (list_of(0x42)(0x06))
            (list_of(0x84)(0x0c))
            (list_of(0x08)(0x19))
            (list_of(0x10)(0x32))
            (list_of(0x20)(0x64))
            (list_of(0x40)(0xc8))
            (list_of(0x80)(0x90)(0x01))
            (list_of(0x00)(0x21)(0x03))
            (list_of(0x00)(0x42)(0x06))
        //  length: 27  -  index 180
            (list_of(0x21)(0x43)(0x65)(0x07))
            (list_of(0x42)(0x86)(0xca)(0x0e))
            (list_of(0x84)(0x0c)(0x95)(0x1d))
            (list_of(0x08)(0x19)(0x2a)(0x3b))
            (list_of(0x10)(0x32)(0x54)(0x76))
            (list_of(0x20)(0x64)(0xa8)(0xec))
            (list_of(0x40)(0xc8)(0x50)(0xd9)(0x01))
            (list_of(0x80)(0x90)(0xa1)(0xb2)(0x03))
            (list_of(0x00)(0x21)(0x43)(0x65)(0x07))
            (list_of(0x00)(0x42)(0x86)(0xca)(0x0e))
        //  length: 32  -  index 190
            (list_of(0x21)(0x43)(0x65)(0x87))
            (list_of(0x42)(0x86)(0xca)(0x0e)(0x01))
            (list_of(0x84)(0x0c)(0x95)(0x1d)(0x02))
            (list_of(0x08)(0x19)(0x2a)(0x3b)(0x04))
            (list_of(0x10)(0x32)(0x54)(0x76)(0x08))
            (list_of(0x20)(0x64)(0xa8)(0xec)(0x10))
            (list_of(0x40)(0xc8)(0x50)(0xd9)(0x21))
            (list_of(0x80)(0x90)(0xa1)(0xb2)(0x43))
            (list_of(0x00)(0x21)(0x43)(0x65)(0x87))
            (list_of(0x00)(0x42)(0x86)(0xca)(0x0e)(0x01))
    //  value: 0x789abcde
        //  length: 0  -  index 200
            .repeat(10, empty)
        //  length: 1  -  index 210
            .repeat(8, list_of(0))
            .repeat(2, list_of(0)(0))
        //  length: 2  -  index 220
            (list_of(0x02))
            (list_of(0x04))
            (list_of(0x08))
            (list_of(0x10))
            (list_of(0x20))
            (list_of(0x40))
            (list_of(0x80))
            (list_of(0x00)(0x01))
            (list_of(0x00)(0x02))
            (list_of(0x00)(0x04))
        //  length: 3  -  index 230
            (list_of(0x06))
            (list_of(0x0c))
            (list_of(0x18))
            (list_of(0x30))
            (list_of(0x60))
            (list_of(0xc0))
            (list_of(0x80)(0x01))
            (list_of(0x00)(0x03))
            (list_of(0x00)(0x06))
            (list_of(0x00)(0x0c))
        //  length: 7  -  index 240
            (list_of(0x5e))
            (list_of(0xbc))
            (list_of(0x78)(0x01))
            (list_of(0xf0)(0x02))
            (list_of(0xe0)(0x05))
            (list_of(0xc0)(0x0b))
            (list_of(0x80)(0x17))
            (list_of(0x00)(0x2f))
            (list_of(0x00)(0x5e))
            (list_of(0x00)(0xbc))
        //  length: 8  -  index 250
            (list_of(0xde))
            (list_of(0xbc)(0x01))
            (list_of(0x78)(0x03))
            (list_of(0xf0)(0x06))
            (list_of(0xe0)(0x0d))
            (list_of(0xc0)(0x1b))
            (list_of(0x80)(0x37))
            (list_of(0x00)(0x6f))
            (list_of(0x00)(0xde))
            (list_of(0x00)(0xbc)(0x01))
        //  length: 9  -  index 260
            (list_of(0xde)(0x00))
            (list_of(0xbc)(0x01))
            (list_of(0x78)(0x03))
            (list_of(0xf0)(0x06))
            (list_of(0xe0)(0x0d))
            (list_of(0xc0)(0x1b))
            (list_of(0x80)(0x37))
            (list_of(0x00)(0x6f))
            (list_of(0x00)(0xde)(0x00))
            (list_of(0x00)(0xbc)(0x01))
        //  length: 10  -  index 270
            (list_of(0xde)(0x00))
            (list_of(0xbc)(0x01))
            (list_of(0x78)(0x03))
            (list_of(0xf0)(0x06))
            (list_of(0xe0)(0x0d))
            (list_of(0xc0)(0x1b))
            (list_of(0x80)(0x37))
            (list_of(0x00)(0x6f)(0x00))
            (list_of(0x00)(0xde)(0x00))
            (list_of(0x00)(0xbc)(0x01))
        //  length: 27  -  index 280
            (list_of(0xde)(0xbc)(0x9a)(0x00))
            (list_of(0xbc)(0x79)(0x35)(0x01))
            (list_of(0x78)(0xf3)(0x6a)(0x02))
            (list_of(0xf0)(0xe6)(0xd5)(0x04))
            (list_of(0xe0)(0xcd)(0xab)(0x09))
            (list_of(0xc0)(0x9b)(0x57)(0x13))
            (list_of(0x80)(0x37)(0xaf)(0x26)(0x00))
            (list_of(0x00)(0x6f)(0x5e)(0x4d)(0x00))
            (list_of(0x00)(0xde)(0xbc)(0x9a)(0x00))
            (list_of(0x00)(0xbc)(0x79)(0x35)(0x01))
        //  length: 32  -  index 290
            (list_of(0xde)(0xbc)(0x9a)(0x78))
            (list_of(0xbc)(0x79)(0x35)(0xf1)(0x00))
            (list_of(0x78)(0xf3)(0x6a)(0xe2)(0x01))
            (list_of(0xf0)(0xe6)(0xd5)(0xc4)(0x03))
            (list_of(0xe0)(0xcd)(0xab)(0x89)(0x07))
            (list_of(0xc0)(0x9b)(0x57)(0x13)(0x0f))
            (list_of(0x80)(0x37)(0xaf)(0x26)(0x1e))
            (list_of(0x00)(0x6f)(0x5e)(0x4d)(0x3c))
            (list_of(0x00)(0xde)(0xbc)(0x9a)(0x78))
            (list_of(0x00)(0xbc)(0x79)(0x35)(0xf1)(0x00))
    //  value: Fs
        //  length: 0  -  index 300
            .repeat(10, empty)
        //  length: 1  -  index 310
            (list_of(0x01))
            (list_of(0x02))
            (list_of(0x04))
            (list_of(0x08))
            (list_of(0x10))
            (list_of(0x20))
            (list_of(0x40))
            (list_of(0x80))
            (list_of(0x00)(0x01))
            (list_of(0x00)(0x02))
        //  length: 2  -  index 320
            (list_of(0x03))
            (list_of(0x06))
            (list_of(0x0c))
            (list_of(0x18))
            (list_of(0x30))
            (list_of(0x60))
            (list_of(0xc0))
            (list_of(0x80)(0x01))
            (list_of(0x00)(0x03))
            (list_of(0x00)(0x06))
        //  length: 3  -  index 330
            (list_of(0x07))
            (list_of(0x0e))
            (list_of(0x1c))
            (list_of(0x38))
            (list_of(0x70))
            (list_of(0xe0))
            (list_of(0xc0)(0x01))
            (list_of(0x80)(0x03))
            (list_of(0x00)(0x07))
            (list_of(0x00)(0x0e))
        //  length: 7  -  index 340
            (list_of(0x7f))
            (list_of(0xfe))
            (list_of(0xfc)(0x01))
            (list_of(0xf8)(0x03))
            (list_of(0xf0)(0x07))
            (list_of(0xe0)(0x0f))
            (list_of(0xc0)(0x1f))
            (list_of(0x80)(0x3f))
            (list_of(0x00)(0x7f))
            (list_of(0x00)(0xfe))
        //  length: 8  -  index 350
            (list_of(0xff))
            (list_of(0xfe)(0x01))
            (list_of(0xfc)(0x03))
            (list_of(0xf8)(0x07))
            (list_of(0xf0)(0x0f))
            (list_of(0xe0)(0x1f))
            (list_of(0xc0)(0x3f))
            (list_of(0x80)(0x7f))
            (list_of(0x00)(0xff))
            (list_of(0x00)(0xfe)(0x01))
        //  length: 9  -  index 360
            (list_of(0xff)(0x01))
            (list_of(0xfe)(0x03))
            (list_of(0xfc)(0x07))
            (list_of(0xf8)(0x0f))
            (list_of(0xf0)(0x1f))
            (list_of(0xe0)(0x3f))
            (list_of(0xc0)(0x7f))
            (list_of(0x80)(0xff))
            (list_of(0x00)(0xff)(0x01))
            (list_of(0x00)(0xfe)(0x03))
        //  length: 10  -  index 370
            (list_of(0xff)(0x03))
            (list_of(0xfe)(0x07))
            (list_of(0xfc)(0x0f))
            (list_of(0xf8)(0x1f))
            (list_of(0xf0)(0x3f))
            (list_of(0xe0)(0x7f))
            (list_of(0xc0)(0xff))
            (list_of(0x80)(0xff)(0x01))
            (list_of(0x00)(0xff)(0x03))
            (list_of(0x00)(0xfe)(0x07))
        //  length: 27  -  index 380
            (list_of(0xff)(0xff)(0xff)(0x07))
            (list_of(0xfe)(0xff)(0xff)(0x0f))
            (list_of(0xfc)(0xff)(0xff)(0x1f))
            (list_of(0xf8)(0xff)(0xff)(0x3f))
            (list_of(0xf0)(0xff)(0xff)(0x7f))
            (list_of(0xe0)(0xff)(0xff)(0xff))
            (list_of(0xc0)(0xff)(0xff)(0xff)(0x01))
            (list_of(0x80)(0xff)(0xff)(0xff)(0x03))
            (list_of(0x00)(0xff)(0xff)(0xff)(0x07))
            (list_of(0x00)(0xfe)(0xff)(0xff)(0x0f))
        //  length: 32  -  index 390
            (list_of(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfe)(0xff)(0xff)(0xff)(0x01))
            (list_of(0xfc)(0xff)(0xff)(0xff)(0x03))
            (list_of(0xf8)(0xff)(0xff)(0xff)(0x07))
            (list_of(0xf0)(0xff)(0xff)(0xff)(0x0f))
            (list_of(0xe0)(0xff)(0xff)(0xff)(0x1f))
            (list_of(0xc0)(0xff)(0xff)(0xff)(0x3f))
            (list_of(0x80)(0xff)(0xff)(0xff)(0x7f))
            (list_of(0x00)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x00)(0xfe)(0xff)(0xff)(0xff)(0x01))
    ;

    BOOST_CHECK_EQUAL_COLLECTIONS(
       results.begin(),  results.end(),
       expected.begin(), expected.end());
}


BOOST_AUTO_TEST_CASE( test_setBits_into_full_vector_lEndian )
{
    using boost::assign::list_of;

    unsigned values[] = { 0, 0x87654321, 0x789abcde, 0xffffffff };
    unsigned lengths[] = { 0, 1, 2, 3, 7, 8, 9, 10, 27, 32 };

    const std::vector<unsigned char> empty;
    const std::vector<unsigned char> full = boost::assign::list_of(0xff).repeat(5, 0xff);

    std::vector<std::vector<unsigned char> > results;

    for each( const unsigned value in values )
    {
        for each( const unsigned length in lengths )
        {
            for( unsigned offset = 0; offset < 10; ++offset)
            {
                std::vector<unsigned char> result = full;
                Test_DeviceCommand::setBits_lEndian(result, offset, length, value);

                results.push_back(result);
            }
        }
    }

    const std::vector<std::vector<unsigned char> > expected = list_of
    //  value: 0
        //  length: 0  -  index 0
            (full)
            .repeat(9, full)
        //  length: 1  -  index 10
            (list_of(0xfe)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfd)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfb)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf7)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xef)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xdf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfd)(0xff)(0xff)(0xff)(0xff))
        //  length: 2  -  index 20
            (list_of(0xfc)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf9)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf3)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xe7)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xcf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x9f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xf9)(0xff)(0xff)(0xff)(0xff))
        //  length: 3  -  index 30
            (list_of(0xf8)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf1)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xe3)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xc7)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x8f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x1f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xf8)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xf1)(0xff)(0xff)(0xff)(0xff))
        //  length: 7  -  index 40
            (list_of(0x80)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x01)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x03)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x07)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x0f)(0xf8)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x1f)(0xf0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0xe0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xc0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x80)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x01)(0xff)(0xff)(0xff)(0xff))
        //  length: 8  -  index 50
            (list_of(0x00)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x01)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x03)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x07)(0xf8)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x0f)(0xf0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x1f)(0xe0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0xc0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0x80)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x00)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x01)(0xfe)(0xff)(0xff)(0xff))
        //  length: 9  -  index 60
            (list_of(0x00)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x01)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x03)(0xf8)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x07)(0xf0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x0f)(0xe0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x1f)(0xc0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0x80)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0x00)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x00)(0xfe)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x01)(0xfc)(0xff)(0xff)(0xff))
        //  length: 10  -  index 70
            (list_of(0x00)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x01)(0xf8)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x03)(0xf0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x07)(0xe0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x0f)(0xc0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x1f)(0x80)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0x00)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0x00)(0xfe)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x00)(0xfc)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x01)(0xf8)(0xff)(0xff)(0xff))
        //  length: 27  -  index 80
            (list_of(0x00)(0x00)(0x00)(0xf8)(0xff)(0xff))
            (list_of(0x01)(0x00)(0x00)(0xf0)(0xff)(0xff))
            (list_of(0x03)(0x00)(0x00)(0xe0)(0xff)(0xff))
            (list_of(0x07)(0x00)(0x00)(0xc0)(0xff)(0xff))
            (list_of(0x0f)(0x00)(0x00)(0x80)(0xff)(0xff))
            (list_of(0x1f)(0x00)(0x00)(0x00)(0xff)(0xff))
            (list_of(0x3f)(0x00)(0x00)(0x00)(0xfe)(0xff))
            (list_of(0x7f)(0x00)(0x00)(0x00)(0xfc)(0xff))
            (list_of(0xff)(0x00)(0x00)(0x00)(0xf8)(0xff))
            (list_of(0xff)(0x01)(0x00)(0x00)(0xf0)(0xff))
        //  length: 32  -  index 90
            (list_of(0x00)(0x00)(0x00)(0x00)(0xff)(0xff))
            (list_of(0x01)(0x00)(0x00)(0x00)(0xfe)(0xff))
            (list_of(0x03)(0x00)(0x00)(0x00)(0xfc)(0xff))
            (list_of(0x07)(0x00)(0x00)(0x00)(0xf8)(0xff))
            (list_of(0x0f)(0x00)(0x00)(0x00)(0xf0)(0xff))
            (list_of(0x1f)(0x00)(0x00)(0x00)(0xe0)(0xff))
            (list_of(0x3f)(0x00)(0x00)(0x00)(0xc0)(0xff))
            (list_of(0x7f)(0x00)(0x00)(0x00)(0x80)(0xff))
            (list_of(0xff)(0x00)(0x00)(0x00)(0x00)(0xff))
            (list_of(0xff)(0x01)(0x00)(0x00)(0x00)(0xfe))
    //  value: 0x87654321
        //  length: 0  -  index 100
            .repeat(10, full)
        //  length: 1  -  index 110
            .repeat(10, full)
        //  length: 2  -  index 120
            (list_of(0xfd)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfb)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf7)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xef)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xdf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfd)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfb)(0xff)(0xff)(0xff)(0xff))
        //  length: 3  - index 130
            (list_of(0xf9)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf3)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xe7)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xcf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x9f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xf9)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xf3)(0xff)(0xff)(0xff)(0xff))
        //  length: 7  -  index 140
            (list_of(0xa1)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x43)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x87)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x0f)(0xfd)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x1f)(0xfa)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0xf4)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xe8)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xd0)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xa1)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x43)(0xff)(0xff)(0xff)(0xff))
        //  length: 8  -  index 150
            (list_of(0x21)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x43)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x87)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x0f)(0xf9)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x1f)(0xf2)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0xe4)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xc8)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x90)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x21)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x43)(0xfe)(0xff)(0xff)(0xff))
        //  length: 9  -  index 160
            (list_of(0x21)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x43)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x87)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x0f)(0xf9)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x1f)(0xf2)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0xe4)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xc8)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x90)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x21)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x43)(0xfe)(0xff)(0xff)(0xff))
        //  length: 10  -  index 170
            (list_of(0x21)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x43)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x87)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x0f)(0xf9)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x1f)(0xf2)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x3f)(0xe4)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xc8)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x90)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x21)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0x43)(0xfe)(0xff)(0xff)(0xff))
        //  length: 27  -  index 180
            (list_of(0x21)(0x43)(0x65)(0xff)(0xff)(0xff))
            (list_of(0x43)(0x86)(0xca)(0xfe)(0xff)(0xff))
            (list_of(0x87)(0x0c)(0x95)(0xfd)(0xff)(0xff))
            (list_of(0x0f)(0x19)(0x2a)(0xfb)(0xff)(0xff))
            (list_of(0x1f)(0x32)(0x54)(0xf6)(0xff)(0xff))
            (list_of(0x3f)(0x64)(0xa8)(0xec)(0xff)(0xff))
            (list_of(0x7f)(0xc8)(0x50)(0xd9)(0xff)(0xff))
            (list_of(0xff)(0x90)(0xa1)(0xb2)(0xff)(0xff))
            (list_of(0xff)(0x21)(0x43)(0x65)(0xff)(0xff))
            (list_of(0xff)(0x43)(0x86)(0xca)(0xfe)(0xff))
        //  length: 32  -  index 190
            (list_of(0x21)(0x43)(0x65)(0x87)(0xff)(0xff))
            (list_of(0x43)(0x86)(0xca)(0x0e)(0xff)(0xff))
            (list_of(0x87)(0x0c)(0x95)(0x1d)(0xfe)(0xff))
            (list_of(0x0f)(0x19)(0x2a)(0x3b)(0xfc)(0xff))
            (list_of(0x1f)(0x32)(0x54)(0x76)(0xf8)(0xff))
            (list_of(0x3f)(0x64)(0xa8)(0xec)(0xf0)(0xff))
            (list_of(0x7f)(0xc8)(0x50)(0xd9)(0xe1)(0xff))
            (list_of(0xff)(0x90)(0xa1)(0xb2)(0xc3)(0xff))
            (list_of(0xff)(0x21)(0x43)(0x65)(0x87)(0xff))
            (list_of(0xff)(0x43)(0x86)(0xca)(0x0e)(0xff))
    //  value: 0x789abcde
        //  length: 0  -  index 200
            .repeat(10, full)
        //  length: 1  -  index 210
            (list_of(0xfe)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfd)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfb)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf7)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xef)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xdf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfd)(0xff)(0xff)(0xff)(0xff))
        //  length: 2  -  index 220
            (list_of(0xfe)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfd)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfb)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf7)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xef)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xdf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfd)(0xff)(0xff)(0xff)(0xff))
        //  length: 3  -  index 230
            (list_of(0xfe)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfd)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xfb)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf7)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xef)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xdf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbf)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xfd)(0xff)(0xff)(0xff)(0xff))
        //  length: 7  -  index 240
            (list_of(0xde)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbd)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7b)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf7)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xef)(0xfd)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xdf)(0xfb)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbf)(0xf7)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xef)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xde)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xbd)(0xff)(0xff)(0xff)(0xff))
        //  length: 8  -  index 250
            (list_of(0xde)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbd)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7b)(0xff)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf7)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xef)(0xfd)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xdf)(0xfb)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbf)(0xf7)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xef)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xde)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xbd)(0xff)(0xff)(0xff)(0xff))
        //  length: 9  -  index 260
            (list_of(0xde)(0xfe)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbd)(0xfd)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7b)(0xfb)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf7)(0xf6)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xef)(0xed)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xdf)(0xdb)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbf)(0xb7)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0x6f)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xde)(0xfe)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xbd)(0xfd)(0xff)(0xff)(0xff))
        //  length: 10  -  index 270
            (list_of(0xde)(0xfc)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbd)(0xf9)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7b)(0xf3)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xf7)(0xe6)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xef)(0xcd)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xdf)(0x9b)(0xff)(0xff)(0xff)(0xff))
            (list_of(0xbf)(0x37)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0x6f)(0xfe)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xde)(0xfc)(0xff)(0xff)(0xff))
            (list_of(0xff)(0xbd)(0xf9)(0xff)(0xff)(0xff))
        //  length: 27  -  index 280
            (list_of(0xde)(0xbc)(0x9a)(0xf8)(0xff)(0xff))
            (list_of(0xbd)(0x79)(0x35)(0xf1)(0xff)(0xff))
            (list_of(0x7b)(0xf3)(0x6a)(0xe2)(0xff)(0xff))
            (list_of(0xf7)(0xe6)(0xd5)(0xc4)(0xff)(0xff))
            (list_of(0xef)(0xcd)(0xab)(0x89)(0xff)(0xff))
            (list_of(0xdf)(0x9b)(0x57)(0x13)(0xff)(0xff))
            (list_of(0xbf)(0x37)(0xaf)(0x26)(0xfe)(0xff))
            (list_of(0x7f)(0x6f)(0x5e)(0x4d)(0xfc)(0xff))
            (list_of(0xff)(0xde)(0xbc)(0x9a)(0xf8)(0xff))
            (list_of(0xff)(0xbd)(0x79)(0x35)(0xf1)(0xff))
        //  length: 32  -  index 290
            (list_of(0xde)(0xbc)(0x9a)(0x78)(0xff)(0xff))
            (list_of(0xbd)(0x79)(0x35)(0xf1)(0xfe)(0xff))
            (list_of(0x7b)(0xf3)(0x6a)(0xe2)(0xfd)(0xff))
            (list_of(0xf7)(0xe6)(0xd5)(0xc4)(0xfb)(0xff))
            (list_of(0xef)(0xcd)(0xab)(0x89)(0xf7)(0xff))
            (list_of(0xdf)(0x9b)(0x57)(0x13)(0xef)(0xff))
            (list_of(0xbf)(0x37)(0xaf)(0x26)(0xde)(0xff))
            (list_of(0x7f)(0x6f)(0x5e)(0x4d)(0xbc)(0xff))
            (list_of(0xff)(0xde)(0xbc)(0x9a)(0x78)(0xff))
            (list_of(0xff)(0xbd)(0x79)(0x35)(0xf1)(0xfe))
    //  value: Fs
        //  length: 0  -  index 300
            .repeat(100, full)
    ;

    BOOST_CHECK_EQUAL_COLLECTIONS(
       results.begin(),  results.end(),
       expected.begin(), expected.end());
}


BOOST_AUTO_TEST_CASE( test_setBits_into_empty_vector_bEndian )
{
    using boost::assign::list_of;

    unsigned values[] = { 0, 0x87654321, 0x789abcde, 0xffffffff };
    unsigned lengths[] = { 0, 1, 2, 3, 7, 8, 9, 10, 27, 32 };

    std::vector<std::vector<unsigned char> > results;

    for each( const unsigned value in values )
    {
        for each( const unsigned length in lengths )
        {
            for( unsigned offset = 0; offset < 10; ++offset)
            {
                std::vector<unsigned char> result;
                Test_DeviceCommand::setBits_bEndian(result, offset, length, value);

                results.push_back(result);
            }
        }
    }

    const std::vector<unsigned char> empty;

    const std::vector<std::vector<unsigned char> > expected = list_of
    //  value: 0
        //  length: 0  -  index 0
            (empty)
            .repeat(9, empty)
        //  length: 1  -  index 10
            .repeat(8, list_of(0))
            .repeat(2, list_of(0)(0))
        //  length: 2  -  index 20
            .repeat(7, list_of(0))
            .repeat(3, list_of(0)(0))
        //  length: 3  -  index 30
            .repeat(6, list_of(0))
            .repeat(4, list_of(0)(0))
        //  length: 7  -  index 40
            .repeat(2, list_of(0))
            .repeat(8, list_of(0)(0))
        //  length: 8  -  index 50
            .repeat(1, list_of(0))
            .repeat(8, list_of(0)(0))
            .repeat(1, list_of(0)(0)(0))
        //  length: 9  -  index 60
            .repeat(8, list_of(0)(0))
            .repeat(2, list_of(0)(0)(0))
        //  length: 10  -  index 70
            .repeat(7, list_of(0)(0))
            .repeat(3, list_of(0)(0)(0))
        //  length: 27  -  index 80
            .repeat(6, list_of(0)(0)(0)(0))
            .repeat(4, list_of(0)(0)(0)(0)(0))
        //  length: 32  -  index 90
            .repeat(1, list_of(0)(0)(0)(0))
            .repeat(8, list_of(0)(0)(0)(0)(0))
            .repeat(1, list_of(0)(0)(0)(0)(0)(0))
    //  value: 0x87654321
        //  length: 0  -  index 100
            .repeat(10, empty)
        //  length: 1  -  index 110
            (list_of(0x80))
            (list_of(0x40))
            (list_of(0x20))
            (list_of(0x10))
            (list_of(0x08))
            (list_of(0x04))
            (list_of(0x02))
            (list_of(0x01))
            (list_of(0x00)(0x80))
            (list_of(0x00)(0x40))
        //  length: 2  -  index 120
            (list_of(0x40))
            (list_of(0x20))
            (list_of(0x10))
            (list_of(0x08))
            (list_of(0x04))
            (list_of(0x02))
            (list_of(0x01))
            (list_of(0x00)(0x80))
            (list_of(0x00)(0x40))
            (list_of(0x00)(0x20))
        //  length: 3  - index 130
            (list_of(0x20))
            (list_of(0x10))
            (list_of(0x08))
            (list_of(0x04))
            (list_of(0x02))
            (list_of(0x01))
            (list_of(0x00)(0x80))
            (list_of(0x00)(0x40))
            (list_of(0x00)(0x20))
            (list_of(0x00)(0x10))
        //  length: 7  -  index 140
            (list_of(0x42))
            (list_of(0x21))
            (list_of(0x10)(0x80))
            (list_of(0x08)(0x40))
            (list_of(0x04)(0x20))
            (list_of(0x02)(0x10))
            (list_of(0x01)(0x08))
            (list_of(0x00)(0x84))
            (list_of(0x00)(0x42))
            (list_of(0x00)(0x21))
        //  length: 8  -  index 150
            (list_of(0x21))
            (list_of(0x10)(0x80))
            (list_of(0x08)(0x40))
            (list_of(0x04)(0x20))
            (list_of(0x02)(0x10))
            (list_of(0x01)(0x08))
            (list_of(0x00)(0x84))
            (list_of(0x00)(0x42))
            (list_of(0x00)(0x21))
            (list_of(0x00)(0x10)(0x80))
        //  length: 9  -  index 160
            (list_of(0x90)(0x80))
            (list_of(0x48)(0x40))
            (list_of(0x24)(0x20))
            (list_of(0x12)(0x10))
            (list_of(0x09)(0x08))
            (list_of(0x04)(0x84))
            (list_of(0x02)(0x42))
            (list_of(0x01)(0x21))
            (list_of(0x00)(0x90)(0x80))
            (list_of(0x00)(0x48)(0x40))
        //  length: 10  -  index 170
            (list_of(0xc8)(0x40))
            (list_of(0x64)(0x20))
            (list_of(0x32)(0x10))
            (list_of(0x19)(0x08))
            (list_of(0x0c)(0x84))
            (list_of(0x06)(0x42))
            (list_of(0x03)(0x21))
            (list_of(0x01)(0x90)(0x80))
            (list_of(0x00)(0xc8)(0x40))
            (list_of(0x00)(0x64)(0x20))
        //  length: 27  -  index 180
            (list_of(0xec)(0xa8)(0x64)(0x20))
            (list_of(0x76)(0x54)(0x32)(0x10))
            (list_of(0x3b)(0x2a)(0x19)(0x08))
            (list_of(0x1d)(0x95)(0x0c)(0x84))
            (list_of(0x0e)(0xca)(0x86)(0x42))
            (list_of(0x07)(0x65)(0x43)(0x21))
            (list_of(0x03)(0xb2)(0xa1)(0x90)(0x80))
            (list_of(0x01)(0xd9)(0x50)(0xc8)(0x40))
            (list_of(0x00)(0xec)(0xa8)(0x64)(0x20))
            (list_of(0x00)(0x76)(0x54)(0x32)(0x10))
        //  length: 32  -  index 190
            (list_of(0x87)(0x65)(0x43)(0x21))
            (list_of(0x43)(0xb2)(0xa1)(0x90)(0x80))
            (list_of(0x21)(0xd9)(0x50)(0xc8)(0x40))
            (list_of(0x10)(0xec)(0xa8)(0x64)(0x20))
            (list_of(0x08)(0x76)(0x54)(0x32)(0x10))
            (list_of(0x04)(0x3b)(0x2a)(0x19)(0x08))
            (list_of(0x02)(0x1d)(0x95)(0x0c)(0x84))
            (list_of(0x01)(0x0e)(0xca)(0x86)(0x42))
            (list_of(0x00)(0x87)(0x65)(0x43)(0x21))
            (list_of(0x00)(0x43)(0xb2)(0xa1)(0x90)(0x80))
    //  value: 0x789abcde
        //  length: 0  -  index 200
            .repeat(10, empty)
        //  length: 1  -  index 210
            (list_of(0x00))
            (list_of(0x80))
            (list_of(0xc0))
            (list_of(0xe0))
            (list_of(0x70))
            (list_of(0x18))
            (list_of(0x04))
            (list_of(0x00))
            (list_of(0x00)(0x00))
            (list_of(0x00)(0x80))
        //  length: 2  -  index 220
            (list_of(0x80))
            (list_of(0xc0))
            (list_of(0xe0))
            (list_of(0xf0))
            (list_of(0x38))
            (list_of(0x0c))
            (list_of(0x02))
            (list_of(0x01)(0x00))
            (list_of(0x00)(0x80))
            (list_of(0x00)(0xc0))
        //  length: 3  -  index 230
            (list_of(0xc0))
            (list_of(0xe0))
            (list_of(0xf0))
            (list_of(0x78))
            (list_of(0x1c))
            (list_of(0x06))
            (list_of(0x03)(0x00))
            (list_of(0x01)(0x80))
            (list_of(0x00)(0xc0))
            (list_of(0x00)(0xe0))
        //  length: 7  -  index 240
            (list_of(0xbc))
            (list_of(0x5e))
            (list_of(0x2f)(0x00))
            (list_of(0x17)(0x80))
            (list_of(0x0b)(0xc0))
            (list_of(0x05)(0xe0))
            (list_of(0x02)(0xf0))
            (list_of(0x01)(0x78))
            (list_of(0x00)(0xbc))
            (list_of(0x00)(0x5e))
        //  length: 8  -  index 250
            (list_of(0xde))
            (list_of(0x6f)(0x00))
            (list_of(0x37)(0x80))
            (list_of(0x1b)(0xc0))
            (list_of(0x0d)(0xe0))
            (list_of(0x06)(0xf0))
            (list_of(0x03)(0x78))
            (list_of(0x01)(0xbc))
            (list_of(0x00)(0xde))
            (list_of(0x00)(0x6f)(0x00))
        //  length: 9  -  index 260
            (list_of(0x6f)(0x00))
            (list_of(0x37)(0x80))
            (list_of(0x1b)(0xc0))
            (list_of(0x0d)(0xe0))
            (list_of(0x06)(0xf0))
            (list_of(0x03)(0x78))
            (list_of(0x01)(0xbc))
            (list_of(0x00)(0xde))
            (list_of(0x00)(0x6f)(0x00))
            (list_of(0x00)(0x37)(0x80))
        //  length: 10  -  index 270
            (list_of(0x37)(0x80))
            (list_of(0x1b)(0xc0))
            (list_of(0x0d)(0xe0))
            (list_of(0x06)(0xf0))
            (list_of(0x03)(0x78))
            (list_of(0x01)(0xbc))
            (list_of(0x00)(0xde))
            (list_of(0x00)(0x6f)(0x00))
            (list_of(0x00)(0x37)(0x80))
            (list_of(0x00)(0x1b)(0xc0))
        //  length: 27  -  index 280
            (list_of(0x13)(0x57)(0x9b)(0xc0))
            (list_of(0x09)(0xab)(0xcd)(0xe0))
            (list_of(0x04)(0xd5)(0xe6)(0xf0))
            (list_of(0x02)(0x6a)(0xf3)(0x78))
            (list_of(0x01)(0x35)(0x79)(0xbc))
            (list_of(0x00)(0x9a)(0xbc)(0xde))
            (list_of(0x00)(0x4d)(0x5e)(0x6f)(0x00))
            (list_of(0x00)(0x26)(0xaf)(0x37)(0x80))
            (list_of(0x00)(0x13)(0x57)(0x9b)(0xc0))
            (list_of(0x00)(0x09)(0xab)(0xcd)(0xe0))
        //  length: 32  -  index 290
            (list_of(0x78)(0x9a)(0xbc)(0xde))
            (list_of(0x3c)(0x4d)(0x5e)(0x6f)(0x00))
            (list_of(0x1e)(0x26)(0xaf)(0x37)(0x80))
            (list_of(0x0f)(0x13)(0x57)(0x9b)(0xc0))
            (list_of(0x07)(0x89)(0xab)(0xcd)(0xe0))
            (list_of(0x03)(0xc4)(0xd5)(0xe6)(0xf0))
            (list_of(0x01)(0xe2)(0x6a)(0xf3)(0x78))
            (list_of(0x00)(0xf1)(0x35)(0x79)(0xbc))
            (list_of(0x00)(0x78)(0x9a)(0xbc)(0xde))
            (list_of(0x00)(0x3c)(0x4d)(0x5e)(0x6f)(0x00))
    //  value: Fs
        //  length: 0  -  index 300
            .repeat(10, empty)
        //  length: 1  -  index 310
            (list_of(0x80))
            (list_of(0xc0))
            (list_of(0xe0))
            (list_of(0xf0))
            (list_of(0x78))
            (list_of(0x1c))
            (list_of(0x06))
            (list_of(0x01))
            (list_of(0x00)(0x80))
            (list_of(0x00)(0xc0))
        //  length: 2  -  index 320
            (list_of(0xc0))
            (list_of(0xe0))
            (list_of(0xf0))
            (list_of(0xf8))
            (list_of(0x3c))
            (list_of(0x0e))
            (list_of(0x03))
            (list_of(0x01)(0x80))
            (list_of(0x00)(0xc0))
            (list_of(0x00)(0xe0))
        //  length: 3  -  index 330
            (list_of(0xe0))
            (list_of(0xf0))
            (list_of(0xf8))
            (list_of(0x7c))
            (list_of(0x1e))
            (list_of(0x07))
            (list_of(0x03)(0x80))
            (list_of(0x01)(0xc0))
            (list_of(0x00)(0xe0))
            (list_of(0x00)(0xf0))
        //  length: 7  -  index 340
            (list_of(0xfe))
            (list_of(0x7f))
            (list_of(0x3f)(0x80))
            (list_of(0x1f)(0xc0))
            (list_of(0x0f)(0xe0))
            (list_of(0x07)(0xf0))
            (list_of(0x03)(0xf8))
            (list_of(0x01)(0xfc))
            (list_of(0x00)(0xfe))
            (list_of(0x00)(0x7f))
        //  length: 8  -  index 350
            (list_of(0xff))
            (list_of(0x7f)(0x80))
            (list_of(0x3f)(0xc0))
            (list_of(0x1f)(0xe0))
            (list_of(0x0f)(0xf0))
            (list_of(0x07)(0xf8))
            (list_of(0x03)(0xfc))
            (list_of(0x01)(0xfe))
            (list_of(0x00)(0xff))
            (list_of(0x00)(0x7f)(0x80))
        //  length: 9  -  index 360
            (list_of(0xff)(0x80))
            (list_of(0x7f)(0xc0))
            (list_of(0x3f)(0xe0))
            (list_of(0x1f)(0xf0))
            (list_of(0x0f)(0xf8))
            (list_of(0x07)(0xfc))
            (list_of(0x03)(0xfe))
            (list_of(0x01)(0xff))
            (list_of(0x00)(0xff)(0x80))
            (list_of(0x00)(0x7f)(0xc0))
        //  length: 10  -  index 370
            (list_of(0xff)(0xc0))
            (list_of(0x7f)(0xe0))
            (list_of(0x3f)(0xf0))
            (list_of(0x1f)(0xf8))
            (list_of(0x0f)(0xfc))
            (list_of(0x07)(0xfe))
            (list_of(0x03)(0xff))
            (list_of(0x01)(0xff)(0x80))
            (list_of(0x00)(0xff)(0xc0))
            (list_of(0x00)(0x7f)(0xe0))
        //  length: 27  -  index 380
            (list_of(0xff)(0xff)(0xff)(0xe0))
            (list_of(0x7f)(0xff)(0xff)(0xf0))
            (list_of(0x3f)(0xff)(0xff)(0xf8))
            (list_of(0x1f)(0xff)(0xff)(0xfc))
            (list_of(0x0f)(0xff)(0xff)(0xfe))
            (list_of(0x07)(0xff)(0xff)(0xff))
            (list_of(0x03)(0xff)(0xff)(0xff)(0x80))
            (list_of(0x01)(0xff)(0xff)(0xff)(0xc0))
            (list_of(0x00)(0xff)(0xff)(0xff)(0xe0))
            (list_of(0x00)(0x7f)(0xff)(0xff)(0xf0))
        //  length: 32  -  index 390
            (list_of(0xff)(0xff)(0xff)(0xff))
            (list_of(0x7f)(0xff)(0xff)(0xff)(0x80))
            (list_of(0x3f)(0xff)(0xff)(0xff)(0xc0))
            (list_of(0x1f)(0xff)(0xff)(0xff)(0xe0))
            (list_of(0x0f)(0xff)(0xff)(0xff)(0xf0))
            (list_of(0x07)(0xff)(0xff)(0xff)(0xf8))
            (list_of(0x03)(0xff)(0xff)(0xff)(0xfc))
            (list_of(0x01)(0xff)(0xff)(0xff)(0xfe))
            (list_of(0x00)(0xff)(0xff)(0xff)(0xff))
            (list_of(0x00)(0x7f)(0xff)(0xff)(0xff)(0x80))
    ;

    BOOST_CHECK_EQUAL_COLLECTIONS(
       results.begin(),  results.end(),
       expected.begin(), expected.end());
}


BOOST_AUTO_TEST_SUITE_END()

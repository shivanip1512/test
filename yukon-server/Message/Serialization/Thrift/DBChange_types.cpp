/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DBChange_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


DBChange::~DBChange() throw() {
}


void DBChange::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
  this->_baseMessage = val;
}

void DBChange::__set__id(const int32_t val) {
  this->_id = val;
}

void DBChange::__set__database(const int32_t val) {
  this->_database = val;
}

void DBChange::__set__category(const std::string& val) {
  this->_category = val;
}

void DBChange::__set__objecttype(const std::string& val) {
  this->_objecttype = val;
}

void DBChange::__set__typeofchange(const int32_t val) {
  this->_typeofchange = val;
}
std::ostream& operator<<(std::ostream& out, const DBChange& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DBChange::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__id = false;
  bool isset__database = false;
  bool isset__category = false;
  bool isset__objecttype = false;
  bool isset__typeofchange = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_id);
          isset__id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_database);
          isset__database = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_category);
          isset__category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_objecttype);
          isset__objecttype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_typeofchange);
          isset__typeofchange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__database)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__category)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__objecttype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__typeofchange)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DBChange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DBChange");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_database", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_database);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_category", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_objecttype", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_objecttype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_typeofchange", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_typeofchange);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DBChange &a, DBChange &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._id, b._id);
  swap(a._database, b._database);
  swap(a._category, b._category);
  swap(a._objecttype, b._objecttype);
  swap(a._typeofchange, b._typeofchange);
}

DBChange::DBChange(const DBChange& other0) {
  _baseMessage = other0._baseMessage;
  _id = other0._id;
  _database = other0._database;
  _category = other0._category;
  _objecttype = other0._objecttype;
  _typeofchange = other0._typeofchange;
}
DBChange& DBChange::operator=(const DBChange& other1) {
  _baseMessage = other1._baseMessage;
  _id = other1._id;
  _database = other1._database;
  _category = other1._category;
  _objecttype = other1._objecttype;
  _typeofchange = other1._typeofchange;
  return *this;
}
void DBChange::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DBChange(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_id=" << to_string(_id);
  out << ", " << "_database=" << to_string(_database);
  out << ", " << "_category=" << to_string(_category);
  out << ", " << "_objecttype=" << to_string(_objecttype);
  out << ", " << "_typeofchange=" << to_string(_typeofchange);
  out << ")";
}

}}}} // namespace

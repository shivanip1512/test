/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Tag_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* Tag::ascii_fingerprint = "FAF0055B52874C9F3CC62D9382FA9A4B";
const uint8_t Tag::binary_fingerprint[16] = {0xFA,0xF0,0x05,0x5B,0x52,0x87,0x4C,0x9F,0x3C,0xC6,0x2D,0x93,0x82,0xFA,0x9A,0x4B};

uint32_t Tag::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__instanceId = false;
  bool isset__pointId = false;
  bool isset__tagId = false;
  bool isset__descriptionStr = false;
  bool isset__action = false;
  bool isset__tagTime = false;
  bool isset__referenceStr = false;
  bool isset__taggedForStr = false;
  bool isset__clientMsgId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_instanceId);
          isset__instanceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_pointId);
          isset__pointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_tagId);
          isset__tagId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_descriptionStr);
          isset__descriptionStr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_action);
          isset__action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_tagTime);
          isset__tagTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_referenceStr);
          isset__referenceStr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_taggedForStr);
          isset__taggedForStr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_clientMsgId);
          isset__clientMsgId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__instanceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__tagId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__descriptionStr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__action)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__tagTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__referenceStr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__taggedForStr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__clientMsgId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Tag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Tag");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_instanceId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_instanceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pointId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_pointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_tagId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_tagId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_descriptionStr", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_descriptionStr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_action", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_action);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_tagTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->_tagTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_referenceStr", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_referenceStr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_taggedForStr", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_taggedForStr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_clientMsgId", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->_clientMsgId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tag &a, Tag &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._instanceId, b._instanceId);
  swap(a._pointId, b._pointId);
  swap(a._tagId, b._tagId);
  swap(a._descriptionStr, b._descriptionStr);
  swap(a._action, b._action);
  swap(a._tagTime, b._tagTime);
  swap(a._referenceStr, b._referenceStr);
  swap(a._taggedForStr, b._taggedForStr);
  swap(a._clientMsgId, b._clientMsgId);
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotifVoiceCompleted_TYPES_H
#define NotifVoiceCompleted_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class NotifVoiceCompleted {
 public:

  static const char* ascii_fingerprint; // = "B081FAB9A796D2A8C57348B6C20A0464";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x81,0xFA,0xB9,0xA7,0x96,0xD2,0xA8,0xC5,0x73,0x48,0xB6,0xC2,0x0A,0x04,0x64};

  NotifVoiceCompleted() : _callToken(), _callStatus(0) {
  }

  virtual ~NotifVoiceCompleted() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  std::string _callToken;
  int32_t _callStatus;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__callToken(const std::string& val) {
    _callToken = val;
  }

  void __set__callStatus(const int32_t val) {
    _callStatus = val;
  }

  bool operator == (const NotifVoiceCompleted & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_callToken == rhs._callToken))
      return false;
    if (!(_callStatus == rhs._callStatus))
      return false;
    return true;
  }
  bool operator != (const NotifVoiceCompleted &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotifVoiceCompleted & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotifVoiceCompleted &a, NotifVoiceCompleted &b);

}}}} // namespace

#endif

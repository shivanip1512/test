/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CCCapBankMove_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* CCCapBankMove::ascii_fingerprint = "31C9FA0A4EB3771285CB17B3C97FEFD4";
const uint8_t CCCapBankMove::binary_fingerprint[16] = {0x31,0xC9,0xFA,0x0A,0x4E,0xB3,0x77,0x12,0x85,0xCB,0x17,0xB3,0xC9,0x7F,0xEF,0xD4};

uint32_t CCCapBankMove::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__permanentFlag = false;
  bool isset__oldFeederId = false;
  bool isset__newFeederId = false;
  bool isset__capSwitchingOrder = false;
  bool isset__closeOrder = false;
  bool isset__tripOrder = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_permanentFlag);
          isset__permanentFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_oldFeederId);
          isset__oldFeederId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_newFeederId);
          isset__newFeederId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_capSwitchingOrder);
          isset__capSwitchingOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_closeOrder);
          isset__closeOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_tripOrder);
          isset__tripOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__permanentFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__oldFeederId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__newFeederId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__capSwitchingOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__closeOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__tripOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCCapBankMove::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCCapBankMove");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_permanentFlag", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_permanentFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_oldFeederId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_oldFeederId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_newFeederId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_newFeederId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_capSwitchingOrder", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->_capSwitchingOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_closeOrder", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->_closeOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_tripOrder", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->_tripOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCCapBankMove &a, CCCapBankMove &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._permanentFlag, b._permanentFlag);
  swap(a._oldFeederId, b._oldFeederId);
  swap(a._newFeederId, b._newFeederId);
  swap(a._capSwitchingOrder, b._capSwitchingOrder);
  swap(a._closeOrder, b._closeOrder);
  swap(a._tripOrder, b._tripOrder);
}

}}}} // namespace

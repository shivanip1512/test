/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NotifLMControl_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


NotifLMControl::~NotifLMControl() noexcept {
}


void NotifLMControl::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
  this->_baseMessage = val;
}

void NotifLMControl::__set__notifGroupIds(const std::vector<int32_t> & val) {
  this->_notifGroupIds = val;
}

void NotifLMControl::__set__notifType(const int32_t val) {
  this->_notifType = val;
}

void NotifLMControl::__set__programId(const int32_t val) {
  this->_programId = val;
}

void NotifLMControl::__set__startTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_startTime = val;
}

void NotifLMControl::__set__stopTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_stopTime = val;
}
std::ostream& operator<<(std::ostream& out, const NotifLMControl& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NotifLMControl::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__notifGroupIds = false;
  bool isset__notifType = false;
  bool isset__programId = false;
  bool isset__startTime = false;
  bool isset__stopTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_notifGroupIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_notifGroupIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->_notifGroupIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset__notifGroupIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_notifType);
          isset__notifType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_programId);
          isset__programId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_startTime);
          isset__startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_stopTime);
          isset__stopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__notifGroupIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__notifType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__programId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__stopTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotifLMControl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotifLMControl");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_notifGroupIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_notifGroupIds.size()));
    std::vector<int32_t> ::const_iterator _iter5;
    for (_iter5 = this->_notifGroupIds.begin(); _iter5 != this->_notifGroupIds.end(); ++_iter5)
    {
      xfer += oprot->writeI32((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_notifType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_notifType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_programId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_programId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->_startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_stopTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->_stopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotifLMControl &a, NotifLMControl &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._notifGroupIds, b._notifGroupIds);
  swap(a._notifType, b._notifType);
  swap(a._programId, b._programId);
  swap(a._startTime, b._startTime);
  swap(a._stopTime, b._stopTime);
}

NotifLMControl::NotifLMControl(const NotifLMControl& other6) {
  _baseMessage = other6._baseMessage;
  _notifGroupIds = other6._notifGroupIds;
  _notifType = other6._notifType;
  _programId = other6._programId;
  _startTime = other6._startTime;
  _stopTime = other6._stopTime;
}
NotifLMControl& NotifLMControl::operator=(const NotifLMControl& other7) {
  _baseMessage = other7._baseMessage;
  _notifGroupIds = other7._notifGroupIds;
  _notifType = other7._notifType;
  _programId = other7._programId;
  _startTime = other7._startTime;
  _stopTime = other7._stopTime;
  return *this;
}
void NotifLMControl::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotifLMControl(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_notifGroupIds=" << to_string(_notifGroupIds);
  out << ", " << "_notifType=" << to_string(_notifType);
  out << ", " << "_programId=" << to_string(_programId);
  out << ", " << "_startTime=" << to_string(_startTime);
  out << ", " << "_stopTime=" << to_string(_stopTime);
  out << ")";
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCDeleteItem_TYPES_H
#define CCDeleteItem_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCMessage_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCDeleteItem {
 public:

  static const char* ascii_fingerprint; // = "0C19431B888E8DCBC960F904E8F4404B";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x19,0x43,0x1B,0x88,0x8E,0x8D,0xCB,0xC9,0x60,0xF9,0x04,0xE8,0xF4,0x40,0x4B};

  CCDeleteItem() : _itemId(0) {
  }

  virtual ~CCDeleteItem() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  int32_t _itemId;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val) {
    _baseMessage = val;
  }

  void __set__itemId(const int32_t val) {
    _itemId = val;
  }

  bool operator == (const CCDeleteItem & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_itemId == rhs._itemId))
      return false;
    return true;
  }
  bool operator != (const CCDeleteItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCDeleteItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCDeleteItem &a, CCDeleteItem &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCShutdown_TYPES_H
#define CCShutdown_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCShutdown {
 public:

  static const char* ascii_fingerprint; // = "B38875B68F29A43A78DE7BDBC6089C1E";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x88,0x75,0xB6,0x8F,0x29,0xA4,0x3A,0x78,0xDE,0x7B,0xDB,0xC6,0x08,0x9C,0x1E};

  CCShutdown() {
  }

  virtual ~CCShutdown() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  bool operator == (const CCShutdown & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    return true;
  }
  bool operator != (const CCShutdown &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCShutdown & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCShutdown &a, CCShutdown &b);

}}}} // namespace

#endif

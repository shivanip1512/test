/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMEcobeeCommandData_TYPES_H
#define LMEcobeeCommandData_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

struct LMEcobeeTemperatureTypes {
  enum type {
    HEAT = 0,
    COOL = 1
  };
};

extern const std::map<int, const char*> _LMEcobeeTemperatureTypes_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LMEcobeeTemperatureTypes::type& val);

std::string to_string(const LMEcobeeTemperatureTypes::type& val);

class LMEcobeeCycleControlCommand;

class LMEcobeeSetpointControlCommand;

class LMEcobeePlusControlCommand;

class LMEcobeeRestore;


class LMEcobeeCycleControlCommand : public virtual ::apache::thrift::TBase {
 public:

  LMEcobeeCycleControlCommand(const LMEcobeeCycleControlCommand&);
  LMEcobeeCycleControlCommand& operator=(const LMEcobeeCycleControlCommand&);
  LMEcobeeCycleControlCommand() : _groupId(0), _dutyCycle(0), _controlStartDateTime(0), _controlEndDateTime(0), _isMandatory(0), _isRampInOut(0) {
  }

  virtual ~LMEcobeeCycleControlCommand() noexcept;
  int32_t _groupId;
  int32_t _dutyCycle;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _controlStartDateTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _controlEndDateTime;
  bool _isMandatory;
  bool _isRampInOut;

  void __set__groupId(const int32_t val);

  void __set__dutyCycle(const int32_t val);

  void __set__controlStartDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__controlEndDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__isMandatory(const bool val);

  void __set__isRampInOut(const bool val);

  bool operator == (const LMEcobeeCycleControlCommand & rhs) const
  {
    if (!(_groupId == rhs._groupId))
      return false;
    if (!(_dutyCycle == rhs._dutyCycle))
      return false;
    if (!(_controlStartDateTime == rhs._controlStartDateTime))
      return false;
    if (!(_controlEndDateTime == rhs._controlEndDateTime))
      return false;
    if (!(_isMandatory == rhs._isMandatory))
      return false;
    if (!(_isRampInOut == rhs._isRampInOut))
      return false;
    return true;
  }
  bool operator != (const LMEcobeeCycleControlCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMEcobeeCycleControlCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMEcobeeCycleControlCommand &a, LMEcobeeCycleControlCommand &b);

std::ostream& operator<<(std::ostream& out, const LMEcobeeCycleControlCommand& obj);


class LMEcobeeSetpointControlCommand : public virtual ::apache::thrift::TBase {
 public:

  LMEcobeeSetpointControlCommand(const LMEcobeeSetpointControlCommand&);
  LMEcobeeSetpointControlCommand& operator=(const LMEcobeeSetpointControlCommand&);
  LMEcobeeSetpointControlCommand() : _groupId(0), _controlStartDateTime(0), _controlEndDateTime(0), _temperatureOption((LMEcobeeTemperatureTypes::type)0), _isMandatory(0), _temperatureOffset(0) {
  }

  virtual ~LMEcobeeSetpointControlCommand() noexcept;
  int32_t _groupId;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _controlStartDateTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _controlEndDateTime;
  LMEcobeeTemperatureTypes::type _temperatureOption;
  bool _isMandatory;
  int32_t _temperatureOffset;

  void __set__groupId(const int32_t val);

  void __set__controlStartDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__controlEndDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__temperatureOption(const LMEcobeeTemperatureTypes::type val);

  void __set__isMandatory(const bool val);

  void __set__temperatureOffset(const int32_t val);

  bool operator == (const LMEcobeeSetpointControlCommand & rhs) const
  {
    if (!(_groupId == rhs._groupId))
      return false;
    if (!(_controlStartDateTime == rhs._controlStartDateTime))
      return false;
    if (!(_controlEndDateTime == rhs._controlEndDateTime))
      return false;
    if (!(_temperatureOption == rhs._temperatureOption))
      return false;
    if (!(_isMandatory == rhs._isMandatory))
      return false;
    if (!(_temperatureOffset == rhs._temperatureOffset))
      return false;
    return true;
  }
  bool operator != (const LMEcobeeSetpointControlCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMEcobeeSetpointControlCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMEcobeeSetpointControlCommand &a, LMEcobeeSetpointControlCommand &b);

std::ostream& operator<<(std::ostream& out, const LMEcobeeSetpointControlCommand& obj);


class LMEcobeePlusControlCommand : public virtual ::apache::thrift::TBase {
 public:

  LMEcobeePlusControlCommand(const LMEcobeePlusControlCommand&);
  LMEcobeePlusControlCommand& operator=(const LMEcobeePlusControlCommand&);
  LMEcobeePlusControlCommand() : _groupId(0), _controlStartDateTime(0), _controlEndDateTime(0), _temperatureOption((LMEcobeeTemperatureTypes::type)0), _randomTimeSeconds(0) {
  }

  virtual ~LMEcobeePlusControlCommand() noexcept;
  int32_t _groupId;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _controlStartDateTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _controlEndDateTime;
  LMEcobeeTemperatureTypes::type _temperatureOption;
  int32_t _randomTimeSeconds;

  void __set__groupId(const int32_t val);

  void __set__controlStartDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__controlEndDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__temperatureOption(const LMEcobeeTemperatureTypes::type val);

  void __set__randomTimeSeconds(const int32_t val);

  bool operator == (const LMEcobeePlusControlCommand & rhs) const
  {
    if (!(_groupId == rhs._groupId))
      return false;
    if (!(_controlStartDateTime == rhs._controlStartDateTime))
      return false;
    if (!(_controlEndDateTime == rhs._controlEndDateTime))
      return false;
    if (!(_temperatureOption == rhs._temperatureOption))
      return false;
    if (!(_randomTimeSeconds == rhs._randomTimeSeconds))
      return false;
    return true;
  }
  bool operator != (const LMEcobeePlusControlCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMEcobeePlusControlCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMEcobeePlusControlCommand &a, LMEcobeePlusControlCommand &b);

std::ostream& operator<<(std::ostream& out, const LMEcobeePlusControlCommand& obj);


class LMEcobeeRestore : public virtual ::apache::thrift::TBase {
 public:

  LMEcobeeRestore(const LMEcobeeRestore&);
  LMEcobeeRestore& operator=(const LMEcobeeRestore&);
  LMEcobeeRestore() : _groupId(0), _restoreTime(0) {
  }

  virtual ~LMEcobeeRestore() noexcept;
  int32_t _groupId;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _restoreTime;

  void __set__groupId(const int32_t val);

  void __set__restoreTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  bool operator == (const LMEcobeeRestore & rhs) const
  {
    if (!(_groupId == rhs._groupId))
      return false;
    if (!(_restoreTime == rhs._restoreTime))
      return false;
    return true;
  }
  bool operator != (const LMEcobeeRestore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMEcobeeRestore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMEcobeeRestore &a, LMEcobeeRestore &b);

std::ostream& operator<<(std::ostream& out, const LMEcobeeRestore& obj);

}}}} // namespace

#endif

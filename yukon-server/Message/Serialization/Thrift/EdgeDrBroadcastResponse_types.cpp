/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "EdgeDrBroadcastResponse_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


EdgeDrBroadcastResponse::~EdgeDrBroadcastResponse() noexcept {
}


void EdgeDrBroadcastResponse::__set_messageGuid(const std::string& val) {
  this->messageGuid = val;
}

void EdgeDrBroadcastResponse::__set_error(const  ::Cti::Messaging::Serialization::Thrift::EdgeDrError& val) {
  this->error = val;
__isset.error = true;
}
std::ostream& operator<<(std::ostream& out, const EdgeDrBroadcastResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EdgeDrBroadcastResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_messageGuid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageGuid);
          isset_messageGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_messageGuid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EdgeDrBroadcastResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EdgeDrBroadcastResponse");

  xfer += oprot->writeFieldBegin("messageGuid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageGuid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.error) {
    xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EdgeDrBroadcastResponse &a, EdgeDrBroadcastResponse &b) {
  using ::std::swap;
  swap(a.messageGuid, b.messageGuid);
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

EdgeDrBroadcastResponse::EdgeDrBroadcastResponse(const EdgeDrBroadcastResponse& other0) {
  messageGuid = other0.messageGuid;
  error = other0.error;
  __isset = other0.__isset;
}
EdgeDrBroadcastResponse& EdgeDrBroadcastResponse::operator=(const EdgeDrBroadcastResponse& other1) {
  messageGuid = other1.messageGuid;
  error = other1.error;
  __isset = other1.__isset;
  return *this;
}
void EdgeDrBroadcastResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EdgeDrBroadcastResponse(";
  out << "messageGuid=" << to_string(messageGuid);
  out << ", " << "error="; (__isset.error ? (out << to_string(error)) : (out << "<null>"));
  out << ")";
}

}}}} // namespace

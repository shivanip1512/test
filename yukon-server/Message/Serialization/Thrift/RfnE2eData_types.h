/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RfnE2eData_TYPES_H
#define RfnE2eData_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

struct RfnE2eProtocol {
  enum type {
    APPLICATION = 0,
    NETWORK = 1,
    LINK = 2
  };
};

extern const std::map<int, const char*> _RfnE2eProtocol_VALUES_TO_NAMES;

struct RfnE2eMessagePriority {
  enum type {
    APP_LO = 0,
    APP_HI = 1
  };
};

extern const std::map<int, const char*> _RfnE2eMessagePriority_VALUES_TO_NAMES;

struct RfnE2eDataReplyType {
  enum type {
    OK = 0,
    DESTINATION_DEVICE_ADDRESS_UNKNOWN = 1,
    DESTINATION_NETWORK_UNAVAILABLE = 2,
    PMTU_LENGTH_EXCEEDED = 3,
    E2E_PROTOCOL_TYPE_NOT_SUPPORTED = 4,
    NETWORK_SERVER_IDENTIFIER_INVALID = 5,
    APPLICATION_SERVICE_IDENTIFIER_INVALID = 6,
    NETWORK_LOAD_CONTROL = 7,
    NETWORK_SERVICE_FAILURE = 8
  };
};

extern const std::map<int, const char*> _RfnE2eDataReplyType_VALUES_TO_NAMES;


class RfnIdentifier {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  RfnIdentifier() : sensorManufacturer(), sensorModel(), sensorSerialNumber() {
  }

  virtual ~RfnIdentifier() throw() {}

  std::string sensorManufacturer;
  std::string sensorModel;
  std::string sensorSerialNumber;

  void __set_sensorManufacturer(const std::string& val) {
    sensorManufacturer = val;
  }

  void __set_sensorModel(const std::string& val) {
    sensorModel = val;
  }

  void __set_sensorSerialNumber(const std::string& val) {
    sensorSerialNumber = val;
  }

  bool operator == (const RfnIdentifier & rhs) const
  {
    if (!(sensorManufacturer == rhs.sensorManufacturer))
      return false;
    if (!(sensorModel == rhs.sensorModel))
      return false;
    if (!(sensorSerialNumber == rhs.sensorSerialNumber))
      return false;
    return true;
  }
  bool operator != (const RfnIdentifier &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnIdentifier & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnIdentifier &a, RfnIdentifier &b);

typedef struct _RfnE2eDataRequest__isset {
  _RfnE2eDataRequest__isset() : security(false) {}
  bool security;
} _RfnE2eDataRequest__isset;

class RfnE2eDataRequest {
 public:

  static const char* ascii_fingerprint; // = "8566E586DC91E3EDB6D1BCD87B3E26BD";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x66,0xE5,0x86,0xDC,0x91,0xE3,0xED,0xB6,0xD1,0xBC,0xD8,0x7B,0x3E,0x26,0xBD};

  RfnE2eDataRequest() : e2eProtocol((RfnE2eProtocol::type)0), applicationServiceId(0), priority((RfnE2eMessagePriority::type)0), security(), payload() {
  }

  virtual ~RfnE2eDataRequest() throw() {}

  RfnE2eProtocol::type e2eProtocol;
  int8_t applicationServiceId;
  RfnIdentifier rfnIdentifier;
  RfnE2eMessagePriority::type priority;
  std::string security;
  std::string payload;

  _RfnE2eDataRequest__isset __isset;

  void __set_e2eProtocol(const RfnE2eProtocol::type val) {
    e2eProtocol = val;
  }

  void __set_applicationServiceId(const int8_t val) {
    applicationServiceId = val;
  }

  void __set_rfnIdentifier(const RfnIdentifier& val) {
    rfnIdentifier = val;
  }

  void __set_priority(const RfnE2eMessagePriority::type val) {
    priority = val;
  }

  void __set_security(const std::string& val) {
    security = val;
    __isset.security = true;
  }

  void __set_payload(const std::string& val) {
    payload = val;
  }

  bool operator == (const RfnE2eDataRequest & rhs) const
  {
    if (!(e2eProtocol == rhs.e2eProtocol))
      return false;
    if (!(applicationServiceId == rhs.applicationServiceId))
      return false;
    if (!(rfnIdentifier == rhs.rfnIdentifier))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (__isset.security != rhs.__isset.security)
      return false;
    else if (__isset.security && !(security == rhs.security))
      return false;
    if (!(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const RfnE2eDataRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnE2eDataRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnE2eDataRequest &a, RfnE2eDataRequest &b);

typedef struct _RfnE2eDataIndication__isset {
  _RfnE2eDataIndication__isset() : security(false) {}
  bool security;
} _RfnE2eDataIndication__isset;

class RfnE2eDataIndication {
 public:

  static const char* ascii_fingerprint; // = "8566E586DC91E3EDB6D1BCD87B3E26BD";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x66,0xE5,0x86,0xDC,0x91,0xE3,0xED,0xB6,0xD1,0xBC,0xD8,0x7B,0x3E,0x26,0xBD};

  RfnE2eDataIndication() : e2eProtocol((RfnE2eProtocol::type)0), applicationServiceId(0), priority((RfnE2eMessagePriority::type)0), security(), payload() {
  }

  virtual ~RfnE2eDataIndication() throw() {}

  RfnE2eProtocol::type e2eProtocol;
  int8_t applicationServiceId;
  RfnIdentifier rfnIdentifier;
  RfnE2eMessagePriority::type priority;
  std::string security;
  std::string payload;

  _RfnE2eDataIndication__isset __isset;

  void __set_e2eProtocol(const RfnE2eProtocol::type val) {
    e2eProtocol = val;
  }

  void __set_applicationServiceId(const int8_t val) {
    applicationServiceId = val;
  }

  void __set_rfnIdentifier(const RfnIdentifier& val) {
    rfnIdentifier = val;
  }

  void __set_priority(const RfnE2eMessagePriority::type val) {
    priority = val;
  }

  void __set_security(const std::string& val) {
    security = val;
    __isset.security = true;
  }

  void __set_payload(const std::string& val) {
    payload = val;
  }

  bool operator == (const RfnE2eDataIndication & rhs) const
  {
    if (!(e2eProtocol == rhs.e2eProtocol))
      return false;
    if (!(applicationServiceId == rhs.applicationServiceId))
      return false;
    if (!(rfnIdentifier == rhs.rfnIdentifier))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (__isset.security != rhs.__isset.security)
      return false;
    else if (__isset.security && !(security == rhs.security))
      return false;
    if (!(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const RfnE2eDataIndication &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnE2eDataIndication & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnE2eDataIndication &a, RfnE2eDataIndication &b);


class RfnE2eDataConfirm {
 public:

  static const char* ascii_fingerprint; // = "F41C7A57730C1F3FDF1957261326625D";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x1C,0x7A,0x57,0x73,0x0C,0x1F,0x3F,0xDF,0x19,0x57,0x26,0x13,0x26,0x62,0x5D};

  RfnE2eDataConfirm() : e2eProtocol((RfnE2eProtocol::type)0), applicationServiceId(0), replyType((RfnE2eDataReplyType::type)0) {
  }

  virtual ~RfnE2eDataConfirm() throw() {}

  RfnE2eProtocol::type e2eProtocol;
  int8_t applicationServiceId;
  RfnIdentifier rfnIdentifier;
  RfnE2eDataReplyType::type replyType;

  void __set_e2eProtocol(const RfnE2eProtocol::type val) {
    e2eProtocol = val;
  }

  void __set_applicationServiceId(const int8_t val) {
    applicationServiceId = val;
  }

  void __set_rfnIdentifier(const RfnIdentifier& val) {
    rfnIdentifier = val;
  }

  void __set_replyType(const RfnE2eDataReplyType::type val) {
    replyType = val;
  }

  bool operator == (const RfnE2eDataConfirm & rhs) const
  {
    if (!(e2eProtocol == rhs.e2eProtocol))
      return false;
    if (!(applicationServiceId == rhs.applicationServiceId))
      return false;
    if (!(rfnIdentifier == rhs.rfnIdentifier))
      return false;
    if (!(replyType == rhs.replyType))
      return false;
    return true;
  }
  bool operator != (const RfnE2eDataConfirm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnE2eDataConfirm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnE2eDataConfirm &a, RfnE2eDataConfirm &b);

}}}} // namespace

#endif

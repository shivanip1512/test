/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Signal_TYPES_H
#define Signal_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class Signal;


class Signal : public virtual ::apache::thrift::TBase {
 public:

  Signal(const Signal&);
  Signal& operator=(const Signal&);
  Signal() : _id(0), _logType(0), _signalCategory(0), _text(), _additionalInfo(), _tags(0), _condition(0), _signalMillis(0), _pointValue(0) {
  }

  virtual ~Signal() throw();
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;
  int32_t _logType;
  int32_t _signalCategory;
  std::string _text;
  std::string _additionalInfo;
  int32_t _tags;
  int32_t _condition;
  int32_t _signalMillis;
  double _pointValue;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__id(const int32_t val);

  void __set__logType(const int32_t val);

  void __set__signalCategory(const int32_t val);

  void __set__text(const std::string& val);

  void __set__additionalInfo(const std::string& val);

  void __set__tags(const int32_t val);

  void __set__condition(const int32_t val);

  void __set__signalMillis(const int32_t val);

  void __set__pointValue(const double val);

  bool operator == (const Signal & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_logType == rhs._logType))
      return false;
    if (!(_signalCategory == rhs._signalCategory))
      return false;
    if (!(_text == rhs._text))
      return false;
    if (!(_additionalInfo == rhs._additionalInfo))
      return false;
    if (!(_tags == rhs._tags))
      return false;
    if (!(_condition == rhs._condition))
      return false;
    if (!(_signalMillis == rhs._signalMillis))
      return false;
    if (!(_pointValue == rhs._pointValue))
      return false;
    return true;
  }
  bool operator != (const Signal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Signal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Signal &a, Signal &b);

std::ostream& operator<<(std::ostream& out, const Signal& obj);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EdgeDrUnicastResponse_TYPES_H
#define EdgeDrUnicastResponse_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "EdgeDrError_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class EdgeDrUnicastResponse;

typedef struct _EdgeDrUnicastResponse__isset {
  _EdgeDrUnicastResponse__isset() : error(false) {}
  bool error :1;
} _EdgeDrUnicastResponse__isset;

class EdgeDrUnicastResponse : public virtual ::apache::thrift::TBase {
 public:

  EdgeDrUnicastResponse(const EdgeDrUnicastResponse&);
  EdgeDrUnicastResponse& operator=(const EdgeDrUnicastResponse&);
  EdgeDrUnicastResponse() noexcept
                        : messageGuid() {
  }

  virtual ~EdgeDrUnicastResponse() noexcept;
  std::string messageGuid;
  std::map<int32_t, int16_t>  paoToE2eId;
   ::Cti::Messaging::Serialization::Thrift::EdgeDrError error;

  _EdgeDrUnicastResponse__isset __isset;

  void __set_messageGuid(const std::string& val);

  void __set_paoToE2eId(const std::map<int32_t, int16_t> & val);

  void __set_error(const  ::Cti::Messaging::Serialization::Thrift::EdgeDrError& val);

  bool operator == (const EdgeDrUnicastResponse & rhs) const
  {
    if (!(messageGuid == rhs.messageGuid))
      return false;
    if (!(paoToE2eId == rhs.paoToE2eId))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EdgeDrUnicastResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeDrUnicastResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(EdgeDrUnicastResponse &a, EdgeDrUnicastResponse &b);

std::ostream& operator<<(std::ostream& out, const EdgeDrUnicastResponse& obj);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CCDynamicCommand_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* CCDynamicCommand::ascii_fingerprint = "9F750C300C26547A6C6FE9A0996F7551";
const uint8_t CCDynamicCommand::binary_fingerprint[16] = {0x9F,0x75,0x0C,0x30,0x0C,0x26,0x54,0x7A,0x6C,0x6F,0xE9,0xA0,0x99,0x6F,0x75,0x51};

uint32_t CCDynamicCommand::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__commandType = false;
  bool isset__longParameters = false;
  bool isset__doubleParameters = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_commandType);
          isset__commandType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->_longParameters.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              int32_t _key5;
              xfer += iprot->readI32(_key5);
              int32_t& _val6 = this->_longParameters[_key5];
              xfer += iprot->readI32(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          isset__longParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->_doubleParameters.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _ktype8;
            ::apache::thrift::protocol::TType _vtype9;
            xfer += iprot->readMapBegin(_ktype8, _vtype9, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              int32_t _key12;
              xfer += iprot->readI32(_key12);
              double& _val13 = this->_doubleParameters[_key12];
              xfer += iprot->readDouble(_val13);
            }
            xfer += iprot->readMapEnd();
          }
          isset__doubleParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__commandType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__longParameters)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__doubleParameters)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCDynamicCommand::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCDynamicCommand");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_commandType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_commandType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_longParameters", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_longParameters.size()));
    std::map<int32_t, int32_t> ::const_iterator _iter14;
    for (_iter14 = this->_longParameters.begin(); _iter14 != this->_longParameters.end(); ++_iter14)
    {
      xfer += oprot->writeI32(_iter14->first);
      xfer += oprot->writeI32(_iter14->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_doubleParameters", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->_doubleParameters.size()));
    std::map<int32_t, double> ::const_iterator _iter15;
    for (_iter15 = this->_doubleParameters.begin(); _iter15 != this->_doubleParameters.end(); ++_iter15)
    {
      xfer += oprot->writeI32(_iter15->first);
      xfer += oprot->writeDouble(_iter15->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCDynamicCommand &a, CCDynamicCommand &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._commandType, b._commandType);
  swap(a._longParameters, b._longParameters);
  swap(a._doubleParameters, b._doubleParameters);
}

}}}} // namespace

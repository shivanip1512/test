/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RfnAddressing_TYPES_H
#define RfnAddressing_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift { namespace Rfn {

class RfnIdentifier;


class RfnIdentifier : public virtual ::apache::thrift::TBase {
 public:

  RfnIdentifier(const RfnIdentifier&);
  RfnIdentifier& operator=(const RfnIdentifier&);
  RfnIdentifier() : sensorManufacturer(), sensorModel(), sensorSerialNumber() {
  }

  virtual ~RfnIdentifier() throw();
  std::string sensorManufacturer;
  std::string sensorModel;
  std::string sensorSerialNumber;

  void __set_sensorManufacturer(const std::string& val);

  void __set_sensorModel(const std::string& val);

  void __set_sensorSerialNumber(const std::string& val);

  bool operator == (const RfnIdentifier & rhs) const
  {
    if (!(sensorManufacturer == rhs.sensorManufacturer))
      return false;
    if (!(sensorModel == rhs.sensorModel))
      return false;
    if (!(sensorSerialNumber == rhs.sensorSerialNumber))
      return false;
    return true;
  }
  bool operator != (const RfnIdentifier &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnIdentifier & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RfnIdentifier &a, RfnIdentifier &b);

std::ostream& operator<<(std::ostream& out, const RfnIdentifier& obj);

}}}}} // namespace

#endif

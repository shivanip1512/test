/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMDynamicGroupData_TYPES_H
#define LMDynamicGroupData_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class LMDynamicGroupData;


class LMDynamicGroupData : public virtual ::apache::thrift::TBase {
 public:

  LMDynamicGroupData(const LMDynamicGroupData&);
  LMDynamicGroupData& operator=(const LMDynamicGroupData&);
  LMDynamicGroupData() : _paoId(0), _disableFlag(0), _groupControlState(0), _currentHoursDaily(0), _currentHoursMonthly(0), _currentHoursSeasonal(0), _currentHoursAnnually(0), _lastControlSent(0), _controlStartTime(0), _controlCompleteTime(0), _nextControlTime(0), _internalState(0), _dailyOps(0) {
  }

  virtual ~LMDynamicGroupData() throw();
  int32_t _paoId;
  bool _disableFlag;
  int32_t _groupControlState;
  int32_t _currentHoursDaily;
  int32_t _currentHoursMonthly;
  int32_t _currentHoursSeasonal;
  int32_t _currentHoursAnnually;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _lastControlSent;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _controlStartTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _controlCompleteTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _nextControlTime;
  int32_t _internalState;
  int32_t _dailyOps;

  void __set__paoId(const int32_t val);

  void __set__disableFlag(const bool val);

  void __set__groupControlState(const int32_t val);

  void __set__currentHoursDaily(const int32_t val);

  void __set__currentHoursMonthly(const int32_t val);

  void __set__currentHoursSeasonal(const int32_t val);

  void __set__currentHoursAnnually(const int32_t val);

  void __set__lastControlSent(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__controlStartTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__controlCompleteTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__nextControlTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__internalState(const int32_t val);

  void __set__dailyOps(const int32_t val);

  bool operator == (const LMDynamicGroupData & rhs) const
  {
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_disableFlag == rhs._disableFlag))
      return false;
    if (!(_groupControlState == rhs._groupControlState))
      return false;
    if (!(_currentHoursDaily == rhs._currentHoursDaily))
      return false;
    if (!(_currentHoursMonthly == rhs._currentHoursMonthly))
      return false;
    if (!(_currentHoursSeasonal == rhs._currentHoursSeasonal))
      return false;
    if (!(_currentHoursAnnually == rhs._currentHoursAnnually))
      return false;
    if (!(_lastControlSent == rhs._lastControlSent))
      return false;
    if (!(_controlStartTime == rhs._controlStartTime))
      return false;
    if (!(_controlCompleteTime == rhs._controlCompleteTime))
      return false;
    if (!(_nextControlTime == rhs._nextControlTime))
      return false;
    if (!(_internalState == rhs._internalState))
      return false;
    if (!(_dailyOps == rhs._dailyOps))
      return false;
    return true;
  }
  bool operator != (const LMDynamicGroupData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMDynamicGroupData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMDynamicGroupData &a, LMDynamicGroupData &b);

std::ostream& operator<<(std::ostream& out, const LMDynamicGroupData& obj);

}}}} // namespace

#endif

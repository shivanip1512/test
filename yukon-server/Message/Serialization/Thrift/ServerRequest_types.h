/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ServerRequest_TYPES_H
#define ServerRequest_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class ServerRequest {
 public:

  static const char* ascii_fingerprint; // = "1F3E3A20915B1A260DC85141BBAA643C";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x3E,0x3A,0x20,0x91,0x5B,0x1A,0x26,0x0D,0xC8,0x51,0x41,0xBB,0xAA,0x64,0x3C};

  ServerRequest() : _id(0) {
  }

  virtual ~ServerRequest() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;
   ::Cti::Messaging::Serialization::Thrift::GenericMessage _payload;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__id(const int32_t val) {
    _id = val;
  }

  void __set__payload(const  ::Cti::Messaging::Serialization::Thrift::GenericMessage& val) {
    _payload = val;
  }

  bool operator == (const ServerRequest & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_payload == rhs._payload))
      return false;
    return true;
  }
  bool operator != (const ServerRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServerRequest &a, ServerRequest &b);

}}}} // namespace

#endif

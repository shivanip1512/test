/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ServerRequest_TYPES_H
#define ServerRequest_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class ServerRequest;


class ServerRequest : public virtual ::apache::thrift::TBase {
 public:

  ServerRequest(const ServerRequest&);
  ServerRequest& operator=(const ServerRequest&);
  ServerRequest() noexcept
                : _id(0) {
  }

  virtual ~ServerRequest() noexcept;
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;
   ::Cti::Messaging::Serialization::Thrift::GenericMessage _payload;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__id(const int32_t val);

  void __set__payload(const  ::Cti::Messaging::Serialization::Thrift::GenericMessage& val);

  bool operator == (const ServerRequest & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_payload == rhs._payload))
      return false;
    return true;
  }
  bool operator != (const ServerRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServerRequest &a, ServerRequest &b);

std::ostream& operator<<(std::ostream& out, const ServerRequest& obj);

}}}} // namespace

#endif

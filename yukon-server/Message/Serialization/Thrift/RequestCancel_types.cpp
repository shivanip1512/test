/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RequestCancel_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


RequestCancel::~RequestCancel() noexcept {
}


void RequestCancel::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
  this->_baseMessage = val;
}

void RequestCancel::__set__RequestId(const int32_t val) {
  this->_RequestId = val;
}

void RequestCancel::__set__RequestIdCount(const int32_t val) {
  this->_RequestIdCount = val;
}

void RequestCancel::__set__Time(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_Time = val;
}

void RequestCancel::__set__UserMessageId(const int32_t val) {
  this->_UserMessageId = val;
}
std::ostream& operator<<(std::ostream& out, const RequestCancel& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RequestCancel::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__RequestId = false;
  bool isset__RequestIdCount = false;
  bool isset__Time = false;
  bool isset__UserMessageId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_RequestId);
          isset__RequestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_RequestIdCount);
          isset__RequestIdCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_Time);
          isset__Time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_UserMessageId);
          isset__UserMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__RequestId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__RequestIdCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__Time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__UserMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestCancel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestCancel");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_RequestId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_RequestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_RequestIdCount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_RequestIdCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_Time", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_Time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_UserMessageId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_UserMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestCancel &a, RequestCancel &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._RequestId, b._RequestId);
  swap(a._RequestIdCount, b._RequestIdCount);
  swap(a._Time, b._Time);
  swap(a._UserMessageId, b._UserMessageId);
}

RequestCancel::RequestCancel(const RequestCancel& other0) {
  _baseMessage = other0._baseMessage;
  _RequestId = other0._RequestId;
  _RequestIdCount = other0._RequestIdCount;
  _Time = other0._Time;
  _UserMessageId = other0._UserMessageId;
}
RequestCancel& RequestCancel::operator=(const RequestCancel& other1) {
  _baseMessage = other1._baseMessage;
  _RequestId = other1._RequestId;
  _RequestIdCount = other1._RequestIdCount;
  _Time = other1._Time;
  _UserMessageId = other1._UserMessageId;
  return *this;
}
void RequestCancel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestCancel(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_RequestId=" << to_string(_RequestId);
  out << ", " << "_RequestIdCount=" << to_string(_RequestIdCount);
  out << ", " << "_Time=" << to_string(_Time);
  out << ", " << "_UserMessageId=" << to_string(_UserMessageId);
  out << ")";
}

}}}} // namespace

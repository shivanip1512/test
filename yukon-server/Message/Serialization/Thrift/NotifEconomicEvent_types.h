/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotifEconomicEvent_TYPES_H
#define NotifEconomicEvent_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class NotifEconomicEvent {
 public:

  static const char* ascii_fingerprint; // = "685BD0E53E3D18DDC064BBD6CD91A983";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x5B,0xD0,0xE5,0x3E,0x3D,0x18,0xDD,0xC0,0x64,0xBB,0xD6,0xCD,0x91,0xA9,0x83};

  NotifEconomicEvent() : _economicEventId(0), _revisionNumber(0), _action(0) {
  }

  virtual ~NotifEconomicEvent() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _economicEventId;
  int32_t _revisionNumber;
  int32_t _action;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__economicEventId(const int32_t val) {
    _economicEventId = val;
  }

  void __set__revisionNumber(const int32_t val) {
    _revisionNumber = val;
  }

  void __set__action(const int32_t val) {
    _action = val;
  }

  bool operator == (const NotifEconomicEvent & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_economicEventId == rhs._economicEventId))
      return false;
    if (!(_revisionNumber == rhs._revisionNumber))
      return false;
    if (!(_action == rhs._action))
      return false;
    return true;
  }
  bool operator != (const NotifEconomicEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotifEconomicEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotifEconomicEvent &a, NotifEconomicEvent &b);

}}}} // namespace

#endif

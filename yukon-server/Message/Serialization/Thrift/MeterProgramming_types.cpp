/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MeterProgramming_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift { namespace MeterProgramming {

int _kSourceValues[] = {
  Source::PORTER,
  Source::WS_COLLECTION_ACTION,
  Source::SM_STATUS_ARCHIVE,
  Source::SM_CONFIG_FAILURE
};
const char* _kSourceNames[] = {
  "PORTER",
  "WS_COLLECTION_ACTION",
  "SM_STATUS_ARCHIVE",
  "SM_CONFIG_FAILURE"
};
const std::map<int, const char*> _Source_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSourceValues, _kSourceNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Source::type& val) {
  std::map<int, const char*>::const_iterator it = _Source_VALUES_TO_NAMES.find(val);
  if (it != _Source_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kProgrammingStatusValues[] = {
  ProgrammingStatus::IDLE,
  ProgrammingStatus::UPLOADING,
  ProgrammingStatus::CONFIRMING,
  ProgrammingStatus::FAILED,
  ProgrammingStatus::INITIATING,
  ProgrammingStatus::CANCELED,
  ProgrammingStatus::MISMATCHED
};
const char* _kProgrammingStatusNames[] = {
  "IDLE",
  "UPLOADING",
  "CONFIRMING",
  "FAILED",
  "INITIATING",
  "CANCELED",
  "MISMATCHED"
};
const std::map<int, const char*> _ProgrammingStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kProgrammingStatusValues, _kProgrammingStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ProgrammingStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _ProgrammingStatus_VALUES_TO_NAMES.find(val);
  if (it != _ProgrammingStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


MeterProgramStatusArchiveRequest::~MeterProgramStatusArchiveRequest() throw() {
}


void MeterProgramStatusArchiveRequest::__set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::Rfn::RfnIdentifier& val) {
  this->rfnIdentifier = val;
}

void MeterProgramStatusArchiveRequest::__set_configurationId(const std::string& val) {
  this->configurationId = val;
__isset.configurationId = true;
}

void MeterProgramStatusArchiveRequest::__set_status(const ProgrammingStatus::type val) {
  this->status = val;
}

void MeterProgramStatusArchiveRequest::__set_error(const int32_t val) {
  this->error = val;
}

void MeterProgramStatusArchiveRequest::__set_timeStamp(const int64_t val) {
  this->timeStamp = val;
}

void MeterProgramStatusArchiveRequest::__set_source(const Source::type val) {
  this->source = val;
}
std::ostream& operator<<(std::ostream& out, const MeterProgramStatusArchiveRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MeterProgramStatusArchiveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rfnIdentifier = false;
  bool isset_status = false;
  bool isset_error = false;
  bool isset_timeStamp = false;
  bool isset_source = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->configurationId);
          this->__isset.configurationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = (ProgrammingStatus::type)ecast0;
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeStamp);
          isset_timeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->source = (Source::type)ecast1;
          isset_source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timeStamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_source)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MeterProgramStatusArchiveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MeterProgramStatusArchiveRequest");

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.configurationId) {
    xfer += oprot->writeFieldBegin("configurationId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->configurationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeStamp", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->timeStamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MeterProgramStatusArchiveRequest &a, MeterProgramStatusArchiveRequest &b) {
  using ::std::swap;
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.configurationId, b.configurationId);
  swap(a.status, b.status);
  swap(a.error, b.error);
  swap(a.timeStamp, b.timeStamp);
  swap(a.source, b.source);
  swap(a.__isset, b.__isset);
}

MeterProgramStatusArchiveRequest::MeterProgramStatusArchiveRequest(const MeterProgramStatusArchiveRequest& other2) {
  rfnIdentifier = other2.rfnIdentifier;
  configurationId = other2.configurationId;
  status = other2.status;
  error = other2.error;
  timeStamp = other2.timeStamp;
  source = other2.source;
  __isset = other2.__isset;
}
MeterProgramStatusArchiveRequest& MeterProgramStatusArchiveRequest::operator=(const MeterProgramStatusArchiveRequest& other3) {
  rfnIdentifier = other3.rfnIdentifier;
  configurationId = other3.configurationId;
  status = other3.status;
  error = other3.error;
  timeStamp = other3.timeStamp;
  source = other3.source;
  __isset = other3.__isset;
  return *this;
}
void MeterProgramStatusArchiveRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MeterProgramStatusArchiveRequest(";
  out << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ", " << "configurationId="; (__isset.configurationId ? (out << to_string(configurationId)) : (out << "<null>"));
  out << ", " << "status=" << to_string(status);
  out << ", " << "error=" << to_string(error);
  out << ", " << "timeStamp=" << to_string(timeStamp);
  out << ", " << "source=" << to_string(source);
  out << ")";
}

}}}}} // namespace

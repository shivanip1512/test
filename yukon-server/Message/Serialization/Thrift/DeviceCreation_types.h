/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DeviceCreation_TYPES_H
#define DeviceCreation_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Types_types.h"
#include "RfnE2eData_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class RfnDeviceCreationRequest;

class DeviceCreationDescriptor;

class RfnDeviceCreationReply;


class RfnDeviceCreationRequest : public virtual ::apache::thrift::TBase {
 public:

  RfnDeviceCreationRequest(const RfnDeviceCreationRequest&);
  RfnDeviceCreationRequest& operator=(const RfnDeviceCreationRequest&);
  RfnDeviceCreationRequest() {
  }

  virtual ~RfnDeviceCreationRequest() throw();
   ::Cti::Messaging::Serialization::Thrift::RfnIdentifier rfnIdentifier;

  void __set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val);

  bool operator == (const RfnDeviceCreationRequest & rhs) const
  {
    if (!(rfnIdentifier == rhs.rfnIdentifier))
      return false;
    return true;
  }
  bool operator != (const RfnDeviceCreationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnDeviceCreationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RfnDeviceCreationRequest &a, RfnDeviceCreationRequest &b);

std::ostream& operator<<(std::ostream& out, const RfnDeviceCreationRequest& obj);


class DeviceCreationDescriptor : public virtual ::apache::thrift::TBase {
 public:

  DeviceCreationDescriptor(const DeviceCreationDescriptor&);
  DeviceCreationDescriptor& operator=(const DeviceCreationDescriptor&);
  DeviceCreationDescriptor() : paoId(0), category(), deviceType() {
  }

  virtual ~DeviceCreationDescriptor() throw();
  int32_t paoId;
  std::string category;
  std::string deviceType;

  void __set_paoId(const int32_t val);

  void __set_category(const std::string& val);

  void __set_deviceType(const std::string& val);

  bool operator == (const DeviceCreationDescriptor & rhs) const
  {
    if (!(paoId == rhs.paoId))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(deviceType == rhs.deviceType))
      return false;
    return true;
  }
  bool operator != (const DeviceCreationDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceCreationDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeviceCreationDescriptor &a, DeviceCreationDescriptor &b);

std::ostream& operator<<(std::ostream& out, const DeviceCreationDescriptor& obj);

typedef struct _RfnDeviceCreationReply__isset {
  _RfnDeviceCreationReply__isset() : descriptor(false) {}
  bool descriptor :1;
} _RfnDeviceCreationReply__isset;

class RfnDeviceCreationReply : public virtual ::apache::thrift::TBase {
 public:

  RfnDeviceCreationReply(const RfnDeviceCreationReply&);
  RfnDeviceCreationReply& operator=(const RfnDeviceCreationReply&);
  RfnDeviceCreationReply() : success(0) {
  }

  virtual ~RfnDeviceCreationReply() throw();
  DeviceCreationDescriptor descriptor;
  bool success;

  _RfnDeviceCreationReply__isset __isset;

  void __set_descriptor(const DeviceCreationDescriptor& val);

  void __set_success(const bool val);

  bool operator == (const RfnDeviceCreationReply & rhs) const
  {
    if (__isset.descriptor != rhs.__isset.descriptor)
      return false;
    else if (__isset.descriptor && !(descriptor == rhs.descriptor))
      return false;
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RfnDeviceCreationReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnDeviceCreationReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RfnDeviceCreationReply &a, RfnDeviceCreationReply &b);

std::ostream& operator<<(std::ostream& out, const RfnDeviceCreationReply& obj);

}}}} // namespace

#endif

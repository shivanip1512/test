/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotifCustomerEmail_TYPES_H
#define NotifCustomerEmail_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class NotifCustomerEmail;


class NotifCustomerEmail : public virtual ::apache::thrift::TBase {
 public:

  NotifCustomerEmail(const NotifCustomerEmail&);
  NotifCustomerEmail& operator=(const NotifCustomerEmail&);
  NotifCustomerEmail() : _to(), _customerId(0), _subject(), _body(), _toCc(), _toBcc() {
  }

  virtual ~NotifCustomerEmail() throw();
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  std::string _to;
  int32_t _customerId;
  std::string _subject;
  std::string _body;
  std::string _toCc;
  std::string _toBcc;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__to(const std::string& val);

  void __set__customerId(const int32_t val);

  void __set__subject(const std::string& val);

  void __set__body(const std::string& val);

  void __set__toCc(const std::string& val);

  void __set__toBcc(const std::string& val);

  bool operator == (const NotifCustomerEmail & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_to == rhs._to))
      return false;
    if (!(_customerId == rhs._customerId))
      return false;
    if (!(_subject == rhs._subject))
      return false;
    if (!(_body == rhs._body))
      return false;
    if (!(_toCc == rhs._toCc))
      return false;
    if (!(_toBcc == rhs._toBcc))
      return false;
    return true;
  }
  bool operator != (const NotifCustomerEmail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotifCustomerEmail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotifCustomerEmail &a, NotifCustomerEmail &b);

std::ostream& operator<<(std::ostream& out, const NotifCustomerEmail& obj);

}}}} // namespace

#endif

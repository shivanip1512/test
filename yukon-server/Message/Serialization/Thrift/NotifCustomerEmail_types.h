/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotifCustomerEmail_TYPES_H
#define NotifCustomerEmail_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class NotifCustomerEmail {
 public:

  static const char* ascii_fingerprint; // = "9628938E92DC76069D2A9977D3E3E9D1";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x28,0x93,0x8E,0x92,0xDC,0x76,0x06,0x9D,0x2A,0x99,0x77,0xD3,0xE3,0xE9,0xD1};

  NotifCustomerEmail() : _to(), _customerId(0), _subject(), _body(), _toCc(), _toBcc() {
  }

  virtual ~NotifCustomerEmail() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  std::string _to;
  int32_t _customerId;
  std::string _subject;
  std::string _body;
  std::string _toCc;
  std::string _toBcc;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__to(const std::string& val) {
    _to = val;
  }

  void __set__customerId(const int32_t val) {
    _customerId = val;
  }

  void __set__subject(const std::string& val) {
    _subject = val;
  }

  void __set__body(const std::string& val) {
    _body = val;
  }

  void __set__toCc(const std::string& val) {
    _toCc = val;
  }

  void __set__toBcc(const std::string& val) {
    _toBcc = val;
  }

  bool operator == (const NotifCustomerEmail & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_to == rhs._to))
      return false;
    if (!(_customerId == rhs._customerId))
      return false;
    if (!(_subject == rhs._subject))
      return false;
    if (!(_body == rhs._body))
      return false;
    if (!(_toCc == rhs._toCc))
      return false;
    if (!(_toBcc == rhs._toBcc))
      return false;
    return true;
  }
  bool operator != (const NotifCustomerEmail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotifCustomerEmail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotifCustomerEmail &a, NotifCustomerEmail &b);

}}}} // namespace

#endif

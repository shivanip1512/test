/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMControlHistory_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


LMControlHistory::~LMControlHistory() throw() {
}


void LMControlHistory::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
  this->_baseMessage = val;
}

void LMControlHistory::__set__paoId(const int32_t val) {
  this->_paoId = val;
}

void LMControlHistory::__set__pointId(const int32_t val) {
  this->_pointId = val;
}

void LMControlHistory::__set__rawState(const int32_t val) {
  this->_rawState = val;
}

void LMControlHistory::__set__startDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_startDateTime = val;
}

void LMControlHistory::__set__controlDuration(const int32_t val) {
  this->_controlDuration = val;
}

void LMControlHistory::__set__reductionRatio(const int32_t val) {
  this->_reductionRatio = val;
}

void LMControlHistory::__set__controlType(const std::string& val) {
  this->_controlType = val;
}

void LMControlHistory::__set__activeRestore(const std::string& val) {
  this->_activeRestore = val;
}

void LMControlHistory::__set__reductionValue(const double val) {
  this->_reductionValue = val;
}

void LMControlHistory::__set__controlPriority(const int32_t val) {
  this->_controlPriority = val;
}

void LMControlHistory::__set__associationKey(const int32_t val) {
  this->_associationKey = val;
}
std::ostream& operator<<(std::ostream& out, const LMControlHistory& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LMControlHistory::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__paoId = false;
  bool isset__pointId = false;
  bool isset__rawState = false;
  bool isset__startDateTime = false;
  bool isset__controlDuration = false;
  bool isset__reductionRatio = false;
  bool isset__controlType = false;
  bool isset__activeRestore = false;
  bool isset__reductionValue = false;
  bool isset__controlPriority = false;
  bool isset__associationKey = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_pointId);
          isset__pointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_rawState);
          isset__rawState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_startDateTime);
          isset__startDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_controlDuration);
          isset__controlDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_reductionRatio);
          isset__reductionRatio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_controlType);
          isset__controlType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_activeRestore);
          isset__activeRestore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_reductionValue);
          isset__reductionValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_controlPriority);
          isset__controlPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_associationKey);
          isset__associationKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__rawState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlDuration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__reductionRatio)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__activeRestore)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__reductionValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlPriority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__associationKey)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMControlHistory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LMControlHistory");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pointId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_pointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_rawState", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_rawState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startDateTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->_startDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlDuration", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_controlDuration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_reductionRatio", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_reductionRatio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlType", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_controlType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_activeRestore", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_activeRestore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_reductionValue", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->_reductionValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlPriority", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->_controlPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_associationKey", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->_associationKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMControlHistory &a, LMControlHistory &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._paoId, b._paoId);
  swap(a._pointId, b._pointId);
  swap(a._rawState, b._rawState);
  swap(a._startDateTime, b._startDateTime);
  swap(a._controlDuration, b._controlDuration);
  swap(a._reductionRatio, b._reductionRatio);
  swap(a._controlType, b._controlType);
  swap(a._activeRestore, b._activeRestore);
  swap(a._reductionValue, b._reductionValue);
  swap(a._controlPriority, b._controlPriority);
  swap(a._associationKey, b._associationKey);
}

LMControlHistory::LMControlHistory(const LMControlHistory& other0) {
  _baseMessage = other0._baseMessage;
  _paoId = other0._paoId;
  _pointId = other0._pointId;
  _rawState = other0._rawState;
  _startDateTime = other0._startDateTime;
  _controlDuration = other0._controlDuration;
  _reductionRatio = other0._reductionRatio;
  _controlType = other0._controlType;
  _activeRestore = other0._activeRestore;
  _reductionValue = other0._reductionValue;
  _controlPriority = other0._controlPriority;
  _associationKey = other0._associationKey;
}
LMControlHistory& LMControlHistory::operator=(const LMControlHistory& other1) {
  _baseMessage = other1._baseMessage;
  _paoId = other1._paoId;
  _pointId = other1._pointId;
  _rawState = other1._rawState;
  _startDateTime = other1._startDateTime;
  _controlDuration = other1._controlDuration;
  _reductionRatio = other1._reductionRatio;
  _controlType = other1._controlType;
  _activeRestore = other1._activeRestore;
  _reductionValue = other1._reductionValue;
  _controlPriority = other1._controlPriority;
  _associationKey = other1._associationKey;
  return *this;
}
void LMControlHistory::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LMControlHistory(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_paoId=" << to_string(_paoId);
  out << ", " << "_pointId=" << to_string(_pointId);
  out << ", " << "_rawState=" << to_string(_rawState);
  out << ", " << "_startDateTime=" << to_string(_startDateTime);
  out << ", " << "_controlDuration=" << to_string(_controlDuration);
  out << ", " << "_reductionRatio=" << to_string(_reductionRatio);
  out << ", " << "_controlType=" << to_string(_controlType);
  out << ", " << "_activeRestore=" << to_string(_activeRestore);
  out << ", " << "_reductionValue=" << to_string(_reductionValue);
  out << ", " << "_controlPriority=" << to_string(_controlPriority);
  out << ", " << "_associationKey=" << to_string(_associationKey);
  out << ")";
}

}}}} // namespace

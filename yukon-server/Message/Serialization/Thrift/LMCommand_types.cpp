/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMCommand_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* LMCommand::ascii_fingerprint = "DCFB0608A9A05187F5419DFB885FAFAE";
const uint8_t LMCommand::binary_fingerprint[16] = {0xDC,0xFB,0x06,0x08,0xA9,0xA0,0x51,0x87,0xF5,0x41,0x9D,0xFB,0x88,0x5F,0xAF,0xAE};

uint32_t LMCommand::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__command = false;
  bool isset__paoId = false;
  bool isset__number = false;
  bool isset__value = false;
  bool isset__count = false;
  bool isset__auxId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_command);
          isset__command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_number);
          isset__number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_value);
          isset__value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_count);
          isset__count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_auxId);
          isset__auxId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__command)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__number)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__auxId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMCommand::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMCommand");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_command", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_command);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_number", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_value", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_count", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_auxId", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_auxId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMCommand &a, LMCommand &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._command, b._command);
  swap(a._paoId, b._paoId);
  swap(a._number, b._number);
  swap(a._value, b._value);
  swap(a._count, b._count);
  swap(a._auxId, b._auxId);
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MCInfo_TYPES_H
#define MCInfo_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class MCInfo {
 public:

  static const char* ascii_fingerprint; // = "30453349F54175FA532C69CC1FAF9E28";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x45,0x33,0x49,0xF5,0x41,0x75,0xFA,0x53,0x2C,0x69,0xCC,0x1F,0xAF,0x9E,0x28};

  MCInfo() : _id(0), _info() {
  }

  virtual ~MCInfo() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;
  std::string _info;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__id(const int32_t val) {
    _id = val;
  }

  void __set__info(const std::string& val) {
    _info = val;
  }

  bool operator == (const MCInfo & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_info == rhs._info))
      return false;
    return true;
  }
  bool operator != (const MCInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MCInfo &a, MCInfo &b);

}}}} // namespace

#endif

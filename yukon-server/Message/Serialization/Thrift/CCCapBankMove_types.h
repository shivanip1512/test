/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCCapBankMove_TYPES_H
#define CCCapBankMove_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCItemCommand_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCCapBankMove {
 public:

  static const char* ascii_fingerprint; // = "62A03F08AFFC62FCA96859A24D1D871E";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0xA0,0x3F,0x08,0xAF,0xFC,0x62,0xFC,0xA9,0x68,0x59,0xA2,0x4D,0x1D,0x87,0x1E};

  CCCapBankMove() : _permanentFlag(0), _oldFeederId(0), _newFeederId(0), _capSwitchingOrder(0), _closeOrder(0), _tripOrder(0) {
  }

  virtual ~CCCapBankMove() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCItemCommand _baseMessage;
  int32_t _permanentFlag;
  int32_t _oldFeederId;
  int32_t _newFeederId;
  double _capSwitchingOrder;
  double _closeOrder;
  double _tripOrder;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCItemCommand& val) {
    _baseMessage = val;
  }

  void __set__permanentFlag(const int32_t val) {
    _permanentFlag = val;
  }

  void __set__oldFeederId(const int32_t val) {
    _oldFeederId = val;
  }

  void __set__newFeederId(const int32_t val) {
    _newFeederId = val;
  }

  void __set__capSwitchingOrder(const double val) {
    _capSwitchingOrder = val;
  }

  void __set__closeOrder(const double val) {
    _closeOrder = val;
  }

  void __set__tripOrder(const double val) {
    _tripOrder = val;
  }

  bool operator == (const CCCapBankMove & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_permanentFlag == rhs._permanentFlag))
      return false;
    if (!(_oldFeederId == rhs._oldFeederId))
      return false;
    if (!(_newFeederId == rhs._newFeederId))
      return false;
    if (!(_capSwitchingOrder == rhs._capSwitchingOrder))
      return false;
    if (!(_closeOrder == rhs._closeOrder))
      return false;
    if (!(_tripOrder == rhs._tripOrder))
      return false;
    return true;
  }
  bool operator != (const CCCapBankMove &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCCapBankMove & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCCapBankMove &a, CCCapBankMove &b);

}}}} // namespace

#endif

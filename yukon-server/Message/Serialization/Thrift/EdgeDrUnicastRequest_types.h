/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EdgeDrUnicastRequest_TYPES_H
#define EdgeDrUnicastRequest_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

struct EdgeUnicastPriority {
  enum type {
    HIGH = 0,
    LOW = 1
  };
};

extern const std::map<int, const char*> _EdgeUnicastPriority_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EdgeUnicastPriority::type& val);

std::string to_string(const EdgeUnicastPriority::type& val);

class EdgeDrUnicastRequest;


class EdgeDrUnicastRequest : public virtual ::apache::thrift::TBase {
 public:

  EdgeDrUnicastRequest(const EdgeDrUnicastRequest&);
  EdgeDrUnicastRequest& operator=(const EdgeDrUnicastRequest&);
  EdgeDrUnicastRequest() noexcept
                       : messageGuid(),
                         payload(),
                         queuePriority((EdgeUnicastPriority::type)0),
                         networkPriority((EdgeUnicastPriority::type)0) {
    queuePriority = (EdgeUnicastPriority::type)0;

    networkPriority = (EdgeUnicastPriority::type)0;

  }

  virtual ~EdgeDrUnicastRequest() noexcept;
  std::string messageGuid;
  std::vector<int32_t>  paoIds;
  std::string payload;
  /**
   * 
   * @see EdgeUnicastPriority
   */
  EdgeUnicastPriority::type queuePriority;
  /**
   * 
   * @see EdgeUnicastPriority
   */
  EdgeUnicastPriority::type networkPriority;

  void __set_messageGuid(const std::string& val);

  void __set_paoIds(const std::vector<int32_t> & val);

  void __set_payload(const std::string& val);

  void __set_queuePriority(const EdgeUnicastPriority::type val);

  void __set_networkPriority(const EdgeUnicastPriority::type val);

  bool operator == (const EdgeDrUnicastRequest & rhs) const
  {
    if (!(messageGuid == rhs.messageGuid))
      return false;
    if (!(paoIds == rhs.paoIds))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (!(queuePriority == rhs.queuePriority))
      return false;
    if (!(networkPriority == rhs.networkPriority))
      return false;
    return true;
  }
  bool operator != (const EdgeDrUnicastRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeDrUnicastRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(EdgeDrUnicastRequest &a, EdgeDrUnicastRequest &b);

std::ostream& operator<<(std::ostream& out, const EdgeDrUnicastRequest& obj);

}}}} // namespace

#endif

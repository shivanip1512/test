/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EdgeDrUnicastRequest_TYPES_H
#define EdgeDrUnicastRequest_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class EdgeDrUnicastRequest;


class EdgeDrUnicastRequest : public virtual ::apache::thrift::TBase {
 public:

  EdgeDrUnicastRequest(const EdgeDrUnicastRequest&);
  EdgeDrUnicastRequest& operator=(const EdgeDrUnicastRequest&);
  EdgeDrUnicastRequest() : messageGuid(), payload(), priority(0) {
  }

  virtual ~EdgeDrUnicastRequest() noexcept;
  std::string messageGuid;
  std::vector<int32_t>  paoIds;
  std::string payload;
  int8_t priority;

  void __set_messageGuid(const std::string& val);

  void __set_paoIds(const std::vector<int32_t> & val);

  void __set_payload(const std::string& val);

  void __set_priority(const int8_t val);

  bool operator == (const EdgeDrUnicastRequest & rhs) const
  {
    if (!(messageGuid == rhs.messageGuid))
      return false;
    if (!(paoIds == rhs.paoIds))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (!(priority == rhs.priority))
      return false;
    return true;
  }
  bool operator != (const EdgeDrUnicastRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeDrUnicastRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EdgeDrUnicastRequest &a, EdgeDrUnicastRequest &b);

std::ostream& operator<<(std::ostream& out, const EdgeDrUnicastRequest& obj);

}}}} // namespace

#endif

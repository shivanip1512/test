/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MCSchedule_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* MCSchedule::ascii_fingerprint = "6810CC8FE957CB4E97436F2F745EBDEC";
const uint8_t MCSchedule::binary_fingerprint[16] = {0x68,0x10,0xCC,0x8F,0xE9,0x57,0xCB,0x4E,0x97,0x43,0x6F,0x2F,0x74,0x5E,0xBD,0xEC};

uint32_t MCSchedule::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__scheduleId = false;
  bool isset__scheduleName = false;
  bool isset__categoryName = false;
  bool isset__scheduleType = false;
  bool isset__holidayScheduleId = false;
  bool isset__commandFile = false;
  bool isset__currentState = false;
  bool isset__startPolicy = false;
  bool isset__stopPolicy = false;
  bool isset__lastRunTime = false;
  bool isset__lastRunStatus = false;
  bool isset__startDay = false;
  bool isset__startMonth = false;
  bool isset__startYear = false;
  bool isset__startTime = false;
  bool isset__stopTime = false;
  bool isset__validWeekDays = false;
  bool isset__duration = false;
  bool isset__manualStartTime = false;
  bool isset__manualStopTime = false;
  bool isset__targetPaoId = false;
  bool isset__startCommand = false;
  bool isset__stopCommand = false;
  bool isset__repeatInterval = false;
  bool isset__currentStartTime = false;
  bool isset__currentStopTime = false;
  bool isset__templateType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_scheduleId);
          isset__scheduleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_scheduleName);
          isset__scheduleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_categoryName);
          isset__categoryName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_scheduleType);
          isset__scheduleType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_holidayScheduleId);
          isset__holidayScheduleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_commandFile);
          isset__commandFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_currentState);
          isset__currentState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_startPolicy);
          isset__startPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_stopPolicy);
          isset__stopPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastRunTime);
          isset__lastRunTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_lastRunStatus);
          isset__lastRunStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_startDay);
          isset__startDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_startMonth);
          isset__startMonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_startYear);
          isset__startYear = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_startTime);
          isset__startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_stopTime);
          isset__stopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_validWeekDays);
          isset__validWeekDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_duration);
          isset__duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_manualStartTime);
          isset__manualStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_manualStopTime);
          isset__manualStopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_targetPaoId);
          isset__targetPaoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_startCommand);
          isset__startCommand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_stopCommand);
          isset__stopCommand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_repeatInterval);
          isset__repeatInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_currentStartTime);
          isset__currentStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_currentStopTime);
          isset__currentStopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_templateType);
          isset__templateType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__scheduleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__scheduleName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__categoryName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__scheduleType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__holidayScheduleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__commandFile)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startPolicy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__stopPolicy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastRunTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastRunStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startDay)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startMonth)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startYear)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__stopTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__validWeekDays)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__duration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__manualStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__manualStopTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__targetPaoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startCommand)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__stopCommand)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__repeatInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentStopTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__templateType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MCSchedule::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MCSchedule");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_scheduleId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_scheduleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_scheduleName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_scheduleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_categoryName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_categoryName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_scheduleType", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_scheduleType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_holidayScheduleId", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_holidayScheduleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_commandFile", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_commandFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentState", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_currentState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startPolicy", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_startPolicy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_stopPolicy", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->_stopPolicy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastRunTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->_lastRunTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastRunStatus", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->_lastRunStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startDay", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->_startDay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startMonth", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->_startMonth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startYear", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->_startYear);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startTime", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->_startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_stopTime", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->_stopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_validWeekDays", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->_validWeekDays);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_duration", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->_duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_manualStartTime", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->_manualStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_manualStopTime", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->_manualStopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_targetPaoId", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->_targetPaoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startCommand", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->_startCommand);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_stopCommand", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->_stopCommand);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_repeatInterval", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->_repeatInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentStartTime", ::apache::thrift::protocol::T_I64, 26);
  xfer += oprot->writeI64(this->_currentStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentStopTime", ::apache::thrift::protocol::T_I64, 27);
  xfer += oprot->writeI64(this->_currentStopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_templateType", ::apache::thrift::protocol::T_I32, 28);
  xfer += oprot->writeI32(this->_templateType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MCSchedule &a, MCSchedule &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._scheduleId, b._scheduleId);
  swap(a._scheduleName, b._scheduleName);
  swap(a._categoryName, b._categoryName);
  swap(a._scheduleType, b._scheduleType);
  swap(a._holidayScheduleId, b._holidayScheduleId);
  swap(a._commandFile, b._commandFile);
  swap(a._currentState, b._currentState);
  swap(a._startPolicy, b._startPolicy);
  swap(a._stopPolicy, b._stopPolicy);
  swap(a._lastRunTime, b._lastRunTime);
  swap(a._lastRunStatus, b._lastRunStatus);
  swap(a._startDay, b._startDay);
  swap(a._startMonth, b._startMonth);
  swap(a._startYear, b._startYear);
  swap(a._startTime, b._startTime);
  swap(a._stopTime, b._stopTime);
  swap(a._validWeekDays, b._validWeekDays);
  swap(a._duration, b._duration);
  swap(a._manualStartTime, b._manualStartTime);
  swap(a._manualStopTime, b._manualStopTime);
  swap(a._targetPaoId, b._targetPaoId);
  swap(a._startCommand, b._startCommand);
  swap(a._stopCommand, b._stopCommand);
  swap(a._repeatInterval, b._repeatInterval);
  swap(a._currentStartTime, b._currentStartTime);
  swap(a._currentStopTime, b._currentStopTime);
  swap(a._templateType, b._templateType);
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GenericEmail_TYPES_H
#define GenericEmail_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class GenericEmail;

typedef struct _GenericEmail__isset {
  _GenericEmail__isset() : _to(false), _bcc(false) {}
  bool _to :1;
  bool _bcc :1;
} _GenericEmail__isset;

class GenericEmail : public virtual ::apache::thrift::TBase {
 public:

  GenericEmail(const GenericEmail&);
  GenericEmail& operator=(const GenericEmail&);
  GenericEmail() noexcept
               : _to(),
                 _from(),
                 _subject(),
                 _body(),
                 _bcc() {
  }

  virtual ~GenericEmail() noexcept;
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  std::string _to;
  std::string _from;
  std::string _subject;
  std::string _body;
  std::string _bcc;

  _GenericEmail__isset __isset;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__to(const std::string& val);

  void __set__from(const std::string& val);

  void __set__subject(const std::string& val);

  void __set__body(const std::string& val);

  void __set__bcc(const std::string& val);

  bool operator == (const GenericEmail & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (__isset._to != rhs.__isset._to)
      return false;
    else if (__isset._to && !(_to == rhs._to))
      return false;
    if (!(_from == rhs._from))
      return false;
    if (!(_subject == rhs._subject))
      return false;
    if (!(_body == rhs._body))
      return false;
    if (__isset._bcc != rhs.__isset._bcc)
      return false;
    else if (__isset._bcc && !(_bcc == rhs._bcc))
      return false;
    return true;
  }
  bool operator != (const GenericEmail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GenericEmail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GenericEmail &a, GenericEmail &b);

std::ostream& operator<<(std::ostream& out, const GenericEmail& obj);

}}}} // namespace

#endif

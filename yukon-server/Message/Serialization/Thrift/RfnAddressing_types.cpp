/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RfnAddressing_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift { namespace Rfn {


RfnIdentifier::~RfnIdentifier() throw() {
}


void RfnIdentifier::__set_sensorManufacturer(const std::string& val) {
  this->sensorManufacturer = val;
}

void RfnIdentifier::__set_sensorModel(const std::string& val) {
  this->sensorModel = val;
}

void RfnIdentifier::__set_sensorSerialNumber(const std::string& val) {
  this->sensorSerialNumber = val;
}
std::ostream& operator<<(std::ostream& out, const RfnIdentifier& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnIdentifier::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sensorManufacturer = false;
  bool isset_sensorModel = false;
  bool isset_sensorSerialNumber = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorManufacturer);
          isset_sensorManufacturer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorModel);
          isset_sensorModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorSerialNumber);
          isset_sensorSerialNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sensorManufacturer)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sensorModel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sensorSerialNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnIdentifier::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnIdentifier");

  xfer += oprot->writeFieldBegin("sensorManufacturer", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sensorManufacturer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorModel", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sensorModel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorSerialNumber", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->sensorSerialNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnIdentifier &a, RfnIdentifier &b) {
  using ::std::swap;
  swap(a.sensorManufacturer, b.sensorManufacturer);
  swap(a.sensorModel, b.sensorModel);
  swap(a.sensorSerialNumber, b.sensorSerialNumber);
}

RfnIdentifier::RfnIdentifier(const RfnIdentifier& other0) {
  sensorManufacturer = other0.sensorManufacturer;
  sensorModel = other0.sensorModel;
  sensorSerialNumber = other0.sensorSerialNumber;
}
RfnIdentifier& RfnIdentifier::operator=(const RfnIdentifier& other1) {
  sensorManufacturer = other1.sensorManufacturer;
  sensorModel = other1.sensorModel;
  sensorSerialNumber = other1.sensorSerialNumber;
  return *this;
}
void RfnIdentifier::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnIdentifier(";
  out << "sensorManufacturer=" << to_string(sensorManufacturer);
  out << ", " << "sensorModel=" << to_string(sensorModel);
  out << ", " << "sensorSerialNumber=" << to_string(sensorSerialNumber);
  out << ")";
}

}}}}} // namespace

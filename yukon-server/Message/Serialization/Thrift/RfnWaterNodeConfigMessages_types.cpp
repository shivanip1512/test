/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RfnWaterNodeConfigMessages_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kSetChannelConfigReplyTypeValues[] = {
  SetChannelConfigReplyType::SUCCESS,
  SetChannelConfigReplyType::INVALID_DEVICE,
  SetChannelConfigReplyType::NO_NODE,
  SetChannelConfigReplyType::NO_GATEWAY,
  SetChannelConfigReplyType::FAILURE
};
const char* _kSetChannelConfigReplyTypeNames[] = {
  "SUCCESS",
  "INVALID_DEVICE",
  "NO_NODE",
  "NO_GATEWAY",
  "FAILURE"
};
const std::map<int, const char*> _SetChannelConfigReplyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSetChannelConfigReplyTypeValues, _kSetChannelConfigReplyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGetChannelConfigReplyTypeValues[] = {
  GetChannelConfigReplyType::SUCCESS,
  GetChannelConfigReplyType::INVALID_DEVICE,
  GetChannelConfigReplyType::NO_NODE,
  GetChannelConfigReplyType::FAILURE
};
const char* _kGetChannelConfigReplyTypeNames[] = {
  "SUCCESS",
  "INVALID_DEVICE",
  "NO_NODE",
  "FAILURE"
};
const std::map<int, const char*> _GetChannelConfigReplyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kGetChannelConfigReplyTypeValues, _kGetChannelConfigReplyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RfnSetChannelConfigRequest::ascii_fingerprint = "56E587D1464A4FDFF7598B7D9D655AB9";
const uint8_t RfnSetChannelConfigRequest::binary_fingerprint[16] = {0x56,0xE5,0x87,0xD1,0x46,0x4A,0x4F,0xDF,0xF7,0x59,0x8B,0x7D,0x9D,0x65,0x5A,0xB9};

uint32_t RfnSetChannelConfigRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rfnIdentifier = false;
  bool isset_reportingInterval = false;
  bool isset_recordingInterval = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reportingInterval);
          isset_reportingInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->recordingInterval);
          isset_recordingInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reportingInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recordingInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnSetChannelConfigRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RfnSetChannelConfigRequest");

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportingInterval", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->reportingInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recordingInterval", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->recordingInterval);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnSetChannelConfigRequest &a, RfnSetChannelConfigRequest &b) {
  using ::std::swap;
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.reportingInterval, b.reportingInterval);
  swap(a.recordingInterval, b.recordingInterval);
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

const char* RfnSetChannelConfigReply::ascii_fingerprint = "9686679C94D43D75F2B35A0BED2E4003";
const uint8_t RfnSetChannelConfigReply::binary_fingerprint[16] = {0x96,0x86,0x67,0x9C,0x94,0xD4,0x3D,0x75,0xF2,0xB3,0x5A,0x0B,0xED,0x2E,0x40,0x03};

uint32_t RfnSetChannelConfigReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_reply = false;
  bool isset_rfnIdentifier = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->reply = (SetChannelConfigReplyType::type)ecast0;
          isset_reply = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_reply)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnSetChannelConfigReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RfnSetChannelConfigReply");

  xfer += oprot->writeFieldBegin("reply", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->reply);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnSetChannelConfigReply &a, RfnSetChannelConfigReply &b) {
  using ::std::swap;
  swap(a.reply, b.reply);
  swap(a.rfnIdentifier, b.rfnIdentifier);
}

const char* RfnGetChannelConfigRequest::ascii_fingerprint = "636807D016867BC3A79FD54005E0677E";
const uint8_t RfnGetChannelConfigRequest::binary_fingerprint[16] = {0x63,0x68,0x07,0xD0,0x16,0x86,0x7B,0xC3,0xA7,0x9F,0xD5,0x40,0x05,0xE0,0x67,0x7E};

uint32_t RfnGetChannelConfigRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rfnIdentifier = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnGetChannelConfigRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RfnGetChannelConfigRequest");

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnGetChannelConfigRequest &a, RfnGetChannelConfigRequest &b) {
  using ::std::swap;
  swap(a.rfnIdentifier, b.rfnIdentifier);
}

const char* ChannelInfo::ascii_fingerprint = "ED707DF9DF573A003C315AB90B20F10D";
const uint8_t ChannelInfo::binary_fingerprint[16] = {0xED,0x70,0x7D,0xF9,0xDF,0x57,0x3A,0x00,0x3C,0x31,0x5A,0xB9,0x0B,0x20,0xF1,0x0D};

uint32_t ChannelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_UOM = false;
  bool isset_uomModifier = false;
  bool isset_channelNum = false;
  bool isset_enabled = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UOM);
          isset_UOM = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->uomModifier.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readSetBegin(_etype4, _size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              std::string _elem6;
              xfer += iprot->readString(_elem6);
              this->uomModifier.insert(_elem6);
            }
            xfer += iprot->readSetEnd();
          }
          isset_uomModifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->channelNum);
          isset_channelNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          isset_enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_UOM)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uomModifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_channelNum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enabled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ChannelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ChannelInfo");

  xfer += oprot->writeFieldBegin("UOM", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->UOM);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uomModifier", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->uomModifier.size()));
    std::set<std::string> ::const_iterator _iter7;
    for (_iter7 = this->uomModifier.begin(); _iter7 != this->uomModifier.end(); ++_iter7)
    {
      xfer += oprot->writeString((*_iter7));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelNum", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->channelNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelInfo &a, ChannelInfo &b) {
  using ::std::swap;
  swap(a.UOM, b.UOM);
  swap(a.uomModifier, b.uomModifier);
  swap(a.channelNum, b.channelNum);
  swap(a.enabled, b.enabled);
}

const char* RfnGetChannelConfigReply::ascii_fingerprint = "5F6DE82FEF45DD94FACCB776E3968FEA";
const uint8_t RfnGetChannelConfigReply::binary_fingerprint[16] = {0x5F,0x6D,0xE8,0x2F,0xEF,0x45,0xDD,0x94,0xFA,0xCC,0xB7,0x76,0xE3,0x96,0x8F,0xEA};

uint32_t RfnGetChannelConfigReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_timestamp = false;
  bool isset_channelInfo = false;
  bool isset_rfnIdentifier = false;
  bool isset_recordingInterval = false;
  bool isset_reportingInterval = false;
  bool isset_reply = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          isset_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->channelInfo.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readSetBegin(_etype11, _size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              ChannelInfo _elem13;
              xfer += _elem13.read(iprot);
              this->channelInfo.insert(_elem13);
            }
            xfer += iprot->readSetEnd();
          }
          isset_channelInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->recordingInterval);
          isset_recordingInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reportingInterval);
          isset_reportingInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->reply = (GetChannelConfigReplyType::type)ecast14;
          isset_reply = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_timestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_channelInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recordingInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reportingInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reply)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnGetChannelConfigReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RfnGetChannelConfigReply");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelInfo", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channelInfo.size()));
    std::set<ChannelInfo> ::const_iterator _iter15;
    for (_iter15 = this->channelInfo.begin(); _iter15 != this->channelInfo.end(); ++_iter15)
    {
      xfer += (*_iter15).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recordingInterval", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->recordingInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportingInterval", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->reportingInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reply", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->reply);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnGetChannelConfigReply &a, RfnGetChannelConfigReply &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.channelInfo, b.channelInfo);
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.recordingInterval, b.recordingInterval);
  swap(a.reportingInterval, b.reportingInterval);
  swap(a.reply, b.reply);
}

}}}} // namespace

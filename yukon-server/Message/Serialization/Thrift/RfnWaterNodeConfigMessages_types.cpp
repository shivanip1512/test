/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RfnWaterNodeConfigMessages_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kSetChannelConfigReplyTypeValues[] = {
  SetChannelConfigReplyType::SUCCESS,
  SetChannelConfigReplyType::INVALID_DEVICE,
  SetChannelConfigReplyType::NO_NODE,
  SetChannelConfigReplyType::NO_GATEWAY,
  SetChannelConfigReplyType::FAILURE
};
const char* _kSetChannelConfigReplyTypeNames[] = {
  "SUCCESS",
  "INVALID_DEVICE",
  "NO_NODE",
  "NO_GATEWAY",
  "FAILURE"
};
const std::map<int, const char*> _SetChannelConfigReplyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSetChannelConfigReplyTypeValues, _kSetChannelConfigReplyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SetChannelConfigReplyType::type& val) {
  std::map<int, const char*>::const_iterator it = _SetChannelConfigReplyType_VALUES_TO_NAMES.find(val);
  if (it != _SetChannelConfigReplyType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGetChannelConfigReplyTypeValues[] = {
  GetChannelConfigReplyType::SUCCESS,
  GetChannelConfigReplyType::INVALID_DEVICE,
  GetChannelConfigReplyType::NO_NODE,
  GetChannelConfigReplyType::FAILURE
};
const char* _kGetChannelConfigReplyTypeNames[] = {
  "SUCCESS",
  "INVALID_DEVICE",
  "NO_NODE",
  "FAILURE"
};
const std::map<int, const char*> _GetChannelConfigReplyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kGetChannelConfigReplyTypeValues, _kGetChannelConfigReplyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GetChannelConfigReplyType::type& val) {
  std::map<int, const char*>::const_iterator it = _GetChannelConfigReplyType_VALUES_TO_NAMES.find(val);
  if (it != _GetChannelConfigReplyType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


RfnSetChannelConfigRequest::~RfnSetChannelConfigRequest() throw() {
}


void RfnSetChannelConfigRequest::__set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
  this->rfnIdentifier = val;
}

void RfnSetChannelConfigRequest::__set_reportingInterval(const int32_t val) {
  this->reportingInterval = val;
}

void RfnSetChannelConfigRequest::__set_recordingInterval(const int32_t val) {
  this->recordingInterval = val;
}

void RfnSetChannelConfigRequest::__set_header(const  ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader& val) {
  this->header = val;
__isset.header = true;
}
std::ostream& operator<<(std::ostream& out, const RfnSetChannelConfigRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnSetChannelConfigRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rfnIdentifier = false;
  bool isset_reportingInterval = false;
  bool isset_recordingInterval = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reportingInterval);
          isset_reportingInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->recordingInterval);
          isset_recordingInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reportingInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recordingInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnSetChannelConfigRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnSetChannelConfigRequest");

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportingInterval", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->reportingInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recordingInterval", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->recordingInterval);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnSetChannelConfigRequest &a, RfnSetChannelConfigRequest &b) {
  using ::std::swap;
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.reportingInterval, b.reportingInterval);
  swap(a.recordingInterval, b.recordingInterval);
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

RfnSetChannelConfigRequest::RfnSetChannelConfigRequest(const RfnSetChannelConfigRequest& other0) {
  rfnIdentifier = other0.rfnIdentifier;
  reportingInterval = other0.reportingInterval;
  recordingInterval = other0.recordingInterval;
  header = other0.header;
  __isset = other0.__isset;
}
RfnSetChannelConfigRequest& RfnSetChannelConfigRequest::operator=(const RfnSetChannelConfigRequest& other1) {
  rfnIdentifier = other1.rfnIdentifier;
  reportingInterval = other1.reportingInterval;
  recordingInterval = other1.recordingInterval;
  header = other1.header;
  __isset = other1.__isset;
  return *this;
}
void RfnSetChannelConfigRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnSetChannelConfigRequest(";
  out << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ", " << "reportingInterval=" << to_string(reportingInterval);
  out << ", " << "recordingInterval=" << to_string(recordingInterval);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ")";
}


RfnSetChannelConfigReply::~RfnSetChannelConfigReply() throw() {
}


void RfnSetChannelConfigReply::__set_reply(const SetChannelConfigReplyType::type val) {
  this->reply = val;
}

void RfnSetChannelConfigReply::__set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
  this->rfnIdentifier = val;
}
std::ostream& operator<<(std::ostream& out, const RfnSetChannelConfigReply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnSetChannelConfigReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_reply = false;
  bool isset_rfnIdentifier = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->reply = (SetChannelConfigReplyType::type)ecast2;
          isset_reply = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_reply)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnSetChannelConfigReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnSetChannelConfigReply");

  xfer += oprot->writeFieldBegin("reply", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->reply);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnSetChannelConfigReply &a, RfnSetChannelConfigReply &b) {
  using ::std::swap;
  swap(a.reply, b.reply);
  swap(a.rfnIdentifier, b.rfnIdentifier);
}

RfnSetChannelConfigReply::RfnSetChannelConfigReply(const RfnSetChannelConfigReply& other3) {
  reply = other3.reply;
  rfnIdentifier = other3.rfnIdentifier;
}
RfnSetChannelConfigReply& RfnSetChannelConfigReply::operator=(const RfnSetChannelConfigReply& other4) {
  reply = other4.reply;
  rfnIdentifier = other4.rfnIdentifier;
  return *this;
}
void RfnSetChannelConfigReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnSetChannelConfigReply(";
  out << "reply=" << to_string(reply);
  out << ", " << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ")";
}


RfnGetChannelConfigRequest::~RfnGetChannelConfigRequest() throw() {
}


void RfnGetChannelConfigRequest::__set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
  this->rfnIdentifier = val;
}
std::ostream& operator<<(std::ostream& out, const RfnGetChannelConfigRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnGetChannelConfigRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rfnIdentifier = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnGetChannelConfigRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnGetChannelConfigRequest");

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnGetChannelConfigRequest &a, RfnGetChannelConfigRequest &b) {
  using ::std::swap;
  swap(a.rfnIdentifier, b.rfnIdentifier);
}

RfnGetChannelConfigRequest::RfnGetChannelConfigRequest(const RfnGetChannelConfigRequest& other5) {
  rfnIdentifier = other5.rfnIdentifier;
}
RfnGetChannelConfigRequest& RfnGetChannelConfigRequest::operator=(const RfnGetChannelConfigRequest& other6) {
  rfnIdentifier = other6.rfnIdentifier;
  return *this;
}
void RfnGetChannelConfigRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnGetChannelConfigRequest(";
  out << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ")";
}


ChannelInfo::~ChannelInfo() throw() {
}


void ChannelInfo::__set_UOM(const std::string& val) {
  this->UOM = val;
}

void ChannelInfo::__set_uomModifier(const std::set<std::string> & val) {
  this->uomModifier = val;
}

void ChannelInfo::__set_channelNum(const int16_t val) {
  this->channelNum = val;
}

void ChannelInfo::__set_enabled(const bool val) {
  this->enabled = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_UOM = false;
  bool isset_uomModifier = false;
  bool isset_channelNum = false;
  bool isset_enabled = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UOM);
          isset_UOM = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->uomModifier.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readSetBegin(_etype10, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              std::string _elem12;
              xfer += iprot->readString(_elem12);
              this->uomModifier.insert(_elem12);
            }
            xfer += iprot->readSetEnd();
          }
          isset_uomModifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->channelNum);
          isset_channelNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          isset_enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_UOM)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uomModifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_channelNum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enabled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ChannelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelInfo");

  xfer += oprot->writeFieldBegin("UOM", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->UOM);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uomModifier", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->uomModifier.size()));
    std::set<std::string> ::const_iterator _iter13;
    for (_iter13 = this->uomModifier.begin(); _iter13 != this->uomModifier.end(); ++_iter13)
    {
      xfer += oprot->writeString((*_iter13));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelNum", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->channelNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelInfo &a, ChannelInfo &b) {
  using ::std::swap;
  swap(a.UOM, b.UOM);
  swap(a.uomModifier, b.uomModifier);
  swap(a.channelNum, b.channelNum);
  swap(a.enabled, b.enabled);
}

ChannelInfo::ChannelInfo(const ChannelInfo& other14) {
  UOM = other14.UOM;
  uomModifier = other14.uomModifier;
  channelNum = other14.channelNum;
  enabled = other14.enabled;
}
ChannelInfo& ChannelInfo::operator=(const ChannelInfo& other15) {
  UOM = other15.UOM;
  uomModifier = other15.uomModifier;
  channelNum = other15.channelNum;
  enabled = other15.enabled;
  return *this;
}
void ChannelInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelInfo(";
  out << "UOM=" << to_string(UOM);
  out << ", " << "uomModifier=" << to_string(uomModifier);
  out << ", " << "channelNum=" << to_string(channelNum);
  out << ", " << "enabled=" << to_string(enabled);
  out << ")";
}


RfnGetChannelConfigReply::~RfnGetChannelConfigReply() throw() {
}


void RfnGetChannelConfigReply::__set_timestamp(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->timestamp = val;
}

void RfnGetChannelConfigReply::__set_channelInfo(const std::set<ChannelInfo> & val) {
  this->channelInfo = val;
}

void RfnGetChannelConfigReply::__set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
  this->rfnIdentifier = val;
}

void RfnGetChannelConfigReply::__set_recordingInterval(const int32_t val) {
  this->recordingInterval = val;
}

void RfnGetChannelConfigReply::__set_reportingInterval(const int32_t val) {
  this->reportingInterval = val;
}

void RfnGetChannelConfigReply::__set_reply(const GetChannelConfigReplyType::type val) {
  this->reply = val;
}
std::ostream& operator<<(std::ostream& out, const RfnGetChannelConfigReply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnGetChannelConfigReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_timestamp = false;
  bool isset_channelInfo = false;
  bool isset_rfnIdentifier = false;
  bool isset_recordingInterval = false;
  bool isset_reportingInterval = false;
  bool isset_reply = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          isset_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->channelInfo.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readSetBegin(_etype19, _size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              ChannelInfo _elem21;
              xfer += _elem21.read(iprot);
              this->channelInfo.insert(_elem21);
            }
            xfer += iprot->readSetEnd();
          }
          isset_channelInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->recordingInterval);
          isset_recordingInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reportingInterval);
          isset_reportingInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->reply = (GetChannelConfigReplyType::type)ecast22;
          isset_reply = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_timestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_channelInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recordingInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reportingInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reply)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnGetChannelConfigReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnGetChannelConfigReply");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelInfo", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channelInfo.size()));
    std::set<ChannelInfo> ::const_iterator _iter23;
    for (_iter23 = this->channelInfo.begin(); _iter23 != this->channelInfo.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recordingInterval", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->recordingInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportingInterval", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->reportingInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reply", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->reply);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnGetChannelConfigReply &a, RfnGetChannelConfigReply &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.channelInfo, b.channelInfo);
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.recordingInterval, b.recordingInterval);
  swap(a.reportingInterval, b.reportingInterval);
  swap(a.reply, b.reply);
}

RfnGetChannelConfigReply::RfnGetChannelConfigReply(const RfnGetChannelConfigReply& other24) {
  timestamp = other24.timestamp;
  channelInfo = other24.channelInfo;
  rfnIdentifier = other24.rfnIdentifier;
  recordingInterval = other24.recordingInterval;
  reportingInterval = other24.reportingInterval;
  reply = other24.reply;
}
RfnGetChannelConfigReply& RfnGetChannelConfigReply::operator=(const RfnGetChannelConfigReply& other25) {
  timestamp = other25.timestamp;
  channelInfo = other25.channelInfo;
  rfnIdentifier = other25.rfnIdentifier;
  recordingInterval = other25.recordingInterval;
  reportingInterval = other25.reportingInterval;
  reply = other25.reply;
  return *this;
}
void RfnGetChannelConfigReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnGetChannelConfigReply(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "channelInfo=" << to_string(channelInfo);
  out << ", " << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ", " << "recordingInterval=" << to_string(recordingInterval);
  out << ", " << "reportingInterval=" << to_string(reportingInterval);
  out << ", " << "reply=" << to_string(reply);
  out << ")";
}

}}}} // namespace

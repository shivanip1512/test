/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MCRetrieveScript_TYPES_H
#define MCRetrieveScript_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class MCRetrieveScript {
 public:

  static const char* ascii_fingerprint; // = "4CA40237596CFEBFB24A4AD998459DC7";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0xA4,0x02,0x37,0x59,0x6C,0xFE,0xBF,0xB2,0x4A,0x4A,0xD9,0x98,0x45,0x9D,0xC7};

  MCRetrieveScript() : _name() {
  }

  virtual ~MCRetrieveScript() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  std::string _name;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__name(const std::string& val) {
    _name = val;
  }

  bool operator == (const MCRetrieveScript & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_name == rhs._name))
      return false;
    return true;
  }
  bool operator != (const MCRetrieveScript &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCRetrieveScript & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MCRetrieveScript &a, MCRetrieveScript &b);

}}}} // namespace

#endif

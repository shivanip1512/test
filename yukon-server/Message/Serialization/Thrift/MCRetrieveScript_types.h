/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MCRetrieveScript_TYPES_H
#define MCRetrieveScript_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class MCRetrieveScript;


class MCRetrieveScript : public virtual ::apache::thrift::TBase {
 public:

  MCRetrieveScript(const MCRetrieveScript&);
  MCRetrieveScript& operator=(const MCRetrieveScript&);
  MCRetrieveScript() : _name() {
  }

  virtual ~MCRetrieveScript() throw();
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  std::string _name;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__name(const std::string& val);

  bool operator == (const MCRetrieveScript & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_name == rhs._name))
      return false;
    return true;
  }
  bool operator != (const MCRetrieveScript &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCRetrieveScript & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MCRetrieveScript &a, MCRetrieveScript &b);

std::ostream& operator<<(std::ostream& out, const MCRetrieveScript& obj);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMEnergyExchangeAccept_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


LMEnergyExchangeAccept::~LMEnergyExchangeAccept() noexcept {
}


void LMEnergyExchangeAccept::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::LMMessage& val) {
  this->_baseMessage = val;
}

void LMEnergyExchangeAccept::__set__paoId(const int32_t val) {
  this->_paoId = val;
}

void LMEnergyExchangeAccept::__set__offerId(const int32_t val) {
  this->_offerId = val;
}

void LMEnergyExchangeAccept::__set__revisionNumber(const int32_t val) {
  this->_revisionNumber = val;
}

void LMEnergyExchangeAccept::__set__acceptStatus(const std::string& val) {
  this->_acceptStatus = val;
}

void LMEnergyExchangeAccept::__set__ipAddressOfAcceptUser(const std::string& val) {
  this->_ipAddressOfAcceptUser = val;
}

void LMEnergyExchangeAccept::__set__userIdName(const std::string& val) {
  this->_userIdName = val;
}

void LMEnergyExchangeAccept::__set__nameOfAcceptPerson(const std::string& val) {
  this->_nameOfAcceptPerson = val;
}

void LMEnergyExchangeAccept::__set__energyExchangeNotes(const std::string& val) {
  this->_energyExchangeNotes = val;
}

void LMEnergyExchangeAccept::__set__amountsCommitted(const std::vector<double> & val) {
  this->_amountsCommitted = val;
}
std::ostream& operator<<(std::ostream& out, const LMEnergyExchangeAccept& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LMEnergyExchangeAccept::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__paoId = false;
  bool isset__offerId = false;
  bool isset__revisionNumber = false;
  bool isset__acceptStatus = false;
  bool isset__ipAddressOfAcceptUser = false;
  bool isset__userIdName = false;
  bool isset__nameOfAcceptPerson = false;
  bool isset__energyExchangeNotes = false;
  bool isset__amountsCommitted = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_offerId);
          isset__offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_revisionNumber);
          isset__revisionNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_acceptStatus);
          isset__acceptStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_ipAddressOfAcceptUser);
          isset__ipAddressOfAcceptUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_userIdName);
          isset__userIdName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_nameOfAcceptPerson);
          isset__nameOfAcceptPerson = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_energyExchangeNotes);
          isset__energyExchangeNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_amountsCommitted.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_amountsCommitted.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readDouble(this->_amountsCommitted[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset__amountsCommitted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__offerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__revisionNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__acceptStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ipAddressOfAcceptUser)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__userIdName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__nameOfAcceptPerson)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__energyExchangeNotes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__amountsCommitted)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEnergyExchangeAccept::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LMEnergyExchangeAccept");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_offerId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_offerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_revisionNumber", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_revisionNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_acceptStatus", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_acceptStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ipAddressOfAcceptUser", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_ipAddressOfAcceptUser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_userIdName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_userIdName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_nameOfAcceptPerson", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_nameOfAcceptPerson);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_energyExchangeNotes", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_energyExchangeNotes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_amountsCommitted", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->_amountsCommitted.size()));
    std::vector<double> ::const_iterator _iter5;
    for (_iter5 = this->_amountsCommitted.begin(); _iter5 != this->_amountsCommitted.end(); ++_iter5)
    {
      xfer += oprot->writeDouble((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEnergyExchangeAccept &a, LMEnergyExchangeAccept &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._paoId, b._paoId);
  swap(a._offerId, b._offerId);
  swap(a._revisionNumber, b._revisionNumber);
  swap(a._acceptStatus, b._acceptStatus);
  swap(a._ipAddressOfAcceptUser, b._ipAddressOfAcceptUser);
  swap(a._userIdName, b._userIdName);
  swap(a._nameOfAcceptPerson, b._nameOfAcceptPerson);
  swap(a._energyExchangeNotes, b._energyExchangeNotes);
  swap(a._amountsCommitted, b._amountsCommitted);
}

LMEnergyExchangeAccept::LMEnergyExchangeAccept(const LMEnergyExchangeAccept& other6) {
  _baseMessage = other6._baseMessage;
  _paoId = other6._paoId;
  _offerId = other6._offerId;
  _revisionNumber = other6._revisionNumber;
  _acceptStatus = other6._acceptStatus;
  _ipAddressOfAcceptUser = other6._ipAddressOfAcceptUser;
  _userIdName = other6._userIdName;
  _nameOfAcceptPerson = other6._nameOfAcceptPerson;
  _energyExchangeNotes = other6._energyExchangeNotes;
  _amountsCommitted = other6._amountsCommitted;
}
LMEnergyExchangeAccept& LMEnergyExchangeAccept::operator=(const LMEnergyExchangeAccept& other7) {
  _baseMessage = other7._baseMessage;
  _paoId = other7._paoId;
  _offerId = other7._offerId;
  _revisionNumber = other7._revisionNumber;
  _acceptStatus = other7._acceptStatus;
  _ipAddressOfAcceptUser = other7._ipAddressOfAcceptUser;
  _userIdName = other7._userIdName;
  _nameOfAcceptPerson = other7._nameOfAcceptPerson;
  _energyExchangeNotes = other7._energyExchangeNotes;
  _amountsCommitted = other7._amountsCommitted;
  return *this;
}
void LMEnergyExchangeAccept::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LMEnergyExchangeAccept(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_paoId=" << to_string(_paoId);
  out << ", " << "_offerId=" << to_string(_offerId);
  out << ", " << "_revisionNumber=" << to_string(_revisionNumber);
  out << ", " << "_acceptStatus=" << to_string(_acceptStatus);
  out << ", " << "_ipAddressOfAcceptUser=" << to_string(_ipAddressOfAcceptUser);
  out << ", " << "_userIdName=" << to_string(_userIdName);
  out << ", " << "_nameOfAcceptPerson=" << to_string(_nameOfAcceptPerson);
  out << ", " << "_energyExchangeNotes=" << to_string(_energyExchangeNotes);
  out << ", " << "_amountsCommitted=" << to_string(_amountsCommitted);
  out << ")";
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCSpecialAreas_TYPES_H
#define CCSpecialAreas_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCMessage_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCSpecial {
 public:

  static const char* ascii_fingerprint; // = "36CC6FED0585BF983E8FB637149707C3";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0xCC,0x6F,0xED,0x05,0x85,0xBF,0x98,0x3E,0x8F,0xB6,0x37,0x14,0x97,0x07,0xC3};

  CCSpecial() : _ovUvDisabledFlag(0), _pfDisplayValue(0), _estPfDisplayValue(0), _voltReductionControlValue(0) {
  }

  virtual ~CCSpecial() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCPao _baseMessage;
  std::vector<int32_t>  _substationIds;
  bool _ovUvDisabledFlag;
  double _pfDisplayValue;
  double _estPfDisplayValue;
  bool _voltReductionControlValue;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val) {
    _baseMessage = val;
  }

  void __set__substationIds(const std::vector<int32_t> & val) {
    _substationIds = val;
  }

  void __set__ovUvDisabledFlag(const bool val) {
    _ovUvDisabledFlag = val;
  }

  void __set__pfDisplayValue(const double val) {
    _pfDisplayValue = val;
  }

  void __set__estPfDisplayValue(const double val) {
    _estPfDisplayValue = val;
  }

  void __set__voltReductionControlValue(const bool val) {
    _voltReductionControlValue = val;
  }

  bool operator == (const CCSpecial & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_substationIds == rhs._substationIds))
      return false;
    if (!(_ovUvDisabledFlag == rhs._ovUvDisabledFlag))
      return false;
    if (!(_pfDisplayValue == rhs._pfDisplayValue))
      return false;
    if (!(_estPfDisplayValue == rhs._estPfDisplayValue))
      return false;
    if (!(_voltReductionControlValue == rhs._voltReductionControlValue))
      return false;
    return true;
  }
  bool operator != (const CCSpecial &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCSpecial & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCSpecial &a, CCSpecial &b);


class CCSpecialAreas {
 public:

  static const char* ascii_fingerprint; // = "7A5DE3572EBF5394916C261330085932";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x5D,0xE3,0x57,0x2E,0xBF,0x53,0x94,0x91,0x6C,0x26,0x13,0x30,0x08,0x59,0x32};

  CCSpecialAreas() {
  }

  virtual ~CCSpecialAreas() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  std::vector<CCSpecial>  _ccSpecialAreas;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val) {
    _baseMessage = val;
  }

  void __set__ccSpecialAreas(const std::vector<CCSpecial> & val) {
    _ccSpecialAreas = val;
  }

  bool operator == (const CCSpecialAreas & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_ccSpecialAreas == rhs._ccSpecialAreas))
      return false;
    return true;
  }
  bool operator != (const CCSpecialAreas &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCSpecialAreas & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCSpecialAreas &a, CCSpecialAreas &b);

}}}} // namespace

#endif

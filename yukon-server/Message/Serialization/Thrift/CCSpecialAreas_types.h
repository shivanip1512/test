/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCSpecialAreas_TYPES_H
#define CCSpecialAreas_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "CCMessage_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class CCSpecial;

class CCSpecialAreas;


class CCSpecial : public virtual ::apache::thrift::TBase {
 public:

  CCSpecial(const CCSpecial&);
  CCSpecial& operator=(const CCSpecial&);
  CCSpecial() : _ovUvDisabledFlag(0), _pfDisplayValue(0), _estPfDisplayValue(0), _voltReductionControlValue(0) {
  }

  virtual ~CCSpecial() throw();
   ::Cti::Messaging::Serialization::Thrift::CCPao _baseMessage;
  std::vector<int32_t>  _substationIds;
  bool _ovUvDisabledFlag;
  double _pfDisplayValue;
  double _estPfDisplayValue;
  bool _voltReductionControlValue;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val);

  void __set__substationIds(const std::vector<int32_t> & val);

  void __set__ovUvDisabledFlag(const bool val);

  void __set__pfDisplayValue(const double val);

  void __set__estPfDisplayValue(const double val);

  void __set__voltReductionControlValue(const bool val);

  bool operator == (const CCSpecial & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_substationIds == rhs._substationIds))
      return false;
    if (!(_ovUvDisabledFlag == rhs._ovUvDisabledFlag))
      return false;
    if (!(_pfDisplayValue == rhs._pfDisplayValue))
      return false;
    if (!(_estPfDisplayValue == rhs._estPfDisplayValue))
      return false;
    if (!(_voltReductionControlValue == rhs._voltReductionControlValue))
      return false;
    return true;
  }
  bool operator != (const CCSpecial &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCSpecial & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCSpecial &a, CCSpecial &b);

std::ostream& operator<<(std::ostream& out, const CCSpecial& obj);


class CCSpecialAreas : public virtual ::apache::thrift::TBase {
 public:

  CCSpecialAreas(const CCSpecialAreas&);
  CCSpecialAreas& operator=(const CCSpecialAreas&);
  CCSpecialAreas() {
  }

  virtual ~CCSpecialAreas() throw();
   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  std::vector<CCSpecial>  _ccSpecialAreas;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val);

  void __set__ccSpecialAreas(const std::vector<CCSpecial> & val);

  bool operator == (const CCSpecialAreas & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_ccSpecialAreas == rhs._ccSpecialAreas))
      return false;
    return true;
  }
  bool operator != (const CCSpecialAreas &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCSpecialAreas & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCSpecialAreas &a, CCSpecialAreas &b);

std::ostream& operator<<(std::ostream& out, const CCSpecialAreas& obj);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "EdgeDrUnicastResponse_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


EdgeDrUnicastResponse::~EdgeDrUnicastResponse() noexcept {
}


void EdgeDrUnicastResponse::__set_messageGuid(const std::string& val) {
  this->messageGuid = val;
}

void EdgeDrUnicastResponse::__set_paoToE2eId(const std::map<int32_t, std::string> & val) {
  this->paoToE2eId = val;
}

void EdgeDrUnicastResponse::__set_error(const  ::Cti::Messaging::Serialization::Thrift::EdgeDrError& val) {
  this->error = val;
__isset.error = true;
}
std::ostream& operator<<(std::ostream& out, const EdgeDrUnicastResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EdgeDrUnicastResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_messageGuid = false;
  bool isset_paoToE2eId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageGuid);
          isset_messageGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->paoToE2eId.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              int32_t _key5;
              xfer += iprot->readI32(_key5);
              std::string& _val6 = this->paoToE2eId[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          isset_paoToE2eId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_messageGuid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_paoToE2eId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EdgeDrUnicastResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EdgeDrUnicastResponse");

  xfer += oprot->writeFieldBegin("messageGuid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageGuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paoToE2eId", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->paoToE2eId.size()));
    std::map<int32_t, std::string> ::const_iterator _iter7;
    for (_iter7 = this->paoToE2eId.begin(); _iter7 != this->paoToE2eId.end(); ++_iter7)
    {
      xfer += oprot->writeI32(_iter7->first);
      xfer += oprot->writeString(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.error) {
    xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EdgeDrUnicastResponse &a, EdgeDrUnicastResponse &b) {
  using ::std::swap;
  swap(a.messageGuid, b.messageGuid);
  swap(a.paoToE2eId, b.paoToE2eId);
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

EdgeDrUnicastResponse::EdgeDrUnicastResponse(const EdgeDrUnicastResponse& other8) {
  messageGuid = other8.messageGuid;
  paoToE2eId = other8.paoToE2eId;
  error = other8.error;
  __isset = other8.__isset;
}
EdgeDrUnicastResponse& EdgeDrUnicastResponse::operator=(const EdgeDrUnicastResponse& other9) {
  messageGuid = other9.messageGuid;
  paoToE2eId = other9.paoToE2eId;
  error = other9.error;
  __isset = other9.__isset;
  return *this;
}
void EdgeDrUnicastResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EdgeDrUnicastResponse(";
  out << "messageGuid=" << to_string(messageGuid);
  out << ", " << "paoToE2eId=" << to_string(paoToE2eId);
  out << ", " << "error="; (__isset.error ? (out << to_string(error)) : (out << "<null>"));
  out << ")";
}

}}}} // namespace

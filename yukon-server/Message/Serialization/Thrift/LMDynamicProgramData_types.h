/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMDynamicProgramData_TYPES_H
#define LMDynamicProgramData_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class LMDynamicProgramData;


class LMDynamicProgramData : public virtual ::apache::thrift::TBase {
 public:

  LMDynamicProgramData(const LMDynamicProgramData&);
  LMDynamicProgramData& operator=(const LMDynamicProgramData&);
  LMDynamicProgramData() : _paoId(0), _disableFlag(0), _currentGearNumber(0), _lastGroupControlled(0), _programState(0), _reductionTotal(0), _directStartTime(0), _directStopTime(0), _notifyActiveTime(0), _notifyInactiveTime(0), _startedRampingOutTime(0), _originSource() {
  }

  virtual ~LMDynamicProgramData() throw();
  int32_t _paoId;
  bool _disableFlag;
  int32_t _currentGearNumber;
  int32_t _lastGroupControlled;
  int32_t _programState;
  double _reductionTotal;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _directStartTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _directStopTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _notifyActiveTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _notifyInactiveTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _startedRampingOutTime;
  std::string _originSource;

  void __set__paoId(const int32_t val);

  void __set__disableFlag(const bool val);

  void __set__currentGearNumber(const int32_t val);

  void __set__lastGroupControlled(const int32_t val);

  void __set__programState(const int32_t val);

  void __set__reductionTotal(const double val);

  void __set__directStartTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__directStopTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__notifyActiveTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__notifyInactiveTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__startedRampingOutTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__originSource(const std::string& val);

  bool operator == (const LMDynamicProgramData & rhs) const
  {
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_disableFlag == rhs._disableFlag))
      return false;
    if (!(_currentGearNumber == rhs._currentGearNumber))
      return false;
    if (!(_lastGroupControlled == rhs._lastGroupControlled))
      return false;
    if (!(_programState == rhs._programState))
      return false;
    if (!(_reductionTotal == rhs._reductionTotal))
      return false;
    if (!(_directStartTime == rhs._directStartTime))
      return false;
    if (!(_directStopTime == rhs._directStopTime))
      return false;
    if (!(_notifyActiveTime == rhs._notifyActiveTime))
      return false;
    if (!(_notifyInactiveTime == rhs._notifyInactiveTime))
      return false;
    if (!(_startedRampingOutTime == rhs._startedRampingOutTime))
      return false;
    if (!(_originSource == rhs._originSource))
      return false;
    return true;
  }
  bool operator != (const LMDynamicProgramData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMDynamicProgramData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMDynamicProgramData &a, LMDynamicProgramData &b);

std::ostream& operator<<(std::ostream& out, const LMDynamicProgramData& obj);

}}}} // namespace

#endif

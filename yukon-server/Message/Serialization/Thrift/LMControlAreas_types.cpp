/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMControlAreas_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* LMControlAreaTrigger::ascii_fingerprint = "454A9949A527079F620E4A94BB826575";
const uint8_t LMControlAreaTrigger::binary_fingerprint[16] = {0x45,0x4A,0x99,0x49,0xA5,0x27,0x07,0x9F,0x62,0x0E,0x4A,0x94,0xBB,0x82,0x65,0x75};

uint32_t LMControlAreaTrigger::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__triggerNumber = false;
  bool isset__triggerType = false;
  bool isset__pointId = false;
  bool isset__pointValue = false;
  bool isset__lastPointValueTimestamp = false;
  bool isset__normalState = false;
  bool isset__threshold = false;
  bool isset__projectionType = false;
  bool isset__projectionPoints = false;
  bool isset__projectAheadDuration = false;
  bool isset__thresholdKickPercent = false;
  bool isset__minRestoreOffset = false;
  bool isset__peakPointId = false;
  bool isset__peakPointValue = false;
  bool isset__lastPeakPointValueTimestamp = false;
  bool isset__projectedPointValue = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_triggerNumber);
          isset__triggerNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_triggerType);
          isset__triggerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_pointId);
          isset__pointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_pointValue);
          isset__pointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastPointValueTimestamp);
          isset__lastPointValueTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_normalState);
          isset__normalState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_threshold);
          isset__threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_projectionType);
          isset__projectionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_projectionPoints);
          isset__projectionPoints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_projectAheadDuration);
          isset__projectAheadDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_thresholdKickPercent);
          isset__thresholdKickPercent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_minRestoreOffset);
          isset__minRestoreOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_peakPointId);
          isset__peakPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_peakPointValue);
          isset__peakPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastPeakPointValueTimestamp);
          isset__lastPeakPointValueTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_projectedPointValue);
          isset__projectedPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__triggerNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__triggerType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastPointValueTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__normalState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__threshold)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__projectionType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__projectionPoints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__projectAheadDuration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__thresholdKickPercent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__minRestoreOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__peakPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__peakPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastPeakPointValueTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__projectedPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMControlAreaTrigger::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMControlAreaTrigger");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_triggerNumber", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_triggerNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_triggerType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_triggerType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pointId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_pointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pointValue", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->_pointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastPointValueTimestamp", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->_lastPointValueTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_normalState", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_normalState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_threshold", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_projectionType", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_projectionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_projectionPoints", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->_projectionPoints);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_projectAheadDuration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->_projectAheadDuration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_thresholdKickPercent", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->_thresholdKickPercent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_minRestoreOffset", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->_minRestoreOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_peakPointId", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->_peakPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_peakPointValue", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->_peakPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastPeakPointValueTimestamp", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->_lastPeakPointValueTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_projectedPointValue", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->_projectedPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMControlAreaTrigger &a, LMControlAreaTrigger &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._triggerNumber, b._triggerNumber);
  swap(a._triggerType, b._triggerType);
  swap(a._pointId, b._pointId);
  swap(a._pointValue, b._pointValue);
  swap(a._lastPointValueTimestamp, b._lastPointValueTimestamp);
  swap(a._normalState, b._normalState);
  swap(a._threshold, b._threshold);
  swap(a._projectionType, b._projectionType);
  swap(a._projectionPoints, b._projectionPoints);
  swap(a._projectAheadDuration, b._projectAheadDuration);
  swap(a._thresholdKickPercent, b._thresholdKickPercent);
  swap(a._minRestoreOffset, b._minRestoreOffset);
  swap(a._peakPointId, b._peakPointId);
  swap(a._peakPointValue, b._peakPointValue);
  swap(a._lastPeakPointValueTimestamp, b._lastPeakPointValueTimestamp);
  swap(a._projectedPointValue, b._projectedPointValue);
}

const char* LMProgramControlWindow::ascii_fingerprint = "154BB42C2FFD70F8B3993568C50C5613";
const uint8_t LMProgramControlWindow::binary_fingerprint[16] = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

uint32_t LMProgramControlWindow::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__windowNumber = false;
  bool isset__availableStartTime = false;
  bool isset__availableStopTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_windowNumber);
          isset__windowNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_availableStartTime);
          isset__availableStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_availableStopTime);
          isset__availableStopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__windowNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__availableStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__availableStopTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMProgramControlWindow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMProgramControlWindow");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_windowNumber", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_windowNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_availableStartTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_availableStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_availableStopTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_availableStopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMProgramControlWindow &a, LMProgramControlWindow &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._windowNumber, b._windowNumber);
  swap(a._availableStartTime, b._availableStartTime);
  swap(a._availableStopTime, b._availableStopTime);
}

const char* LMProgramBase::ascii_fingerprint = "C5DDBAA440426BAE0AE85F865C145A96";
const uint8_t LMProgramBase::binary_fingerprint[16] = {0xC5,0xDD,0xBA,0xA4,0x40,0x42,0x6B,0xAE,0x0A,0xE8,0x5F,0x86,0x5C,0x14,0x5A,0x96};

uint32_t LMProgramBase::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__paoCategory = false;
  bool isset__paoClass = false;
  bool isset__paoName = false;
  bool isset__paoTypeString = false;
  bool isset__paoDescription = false;
  bool isset__disableFlag = false;
  bool isset__startPriority = false;
  bool isset__stopPriority = false;
  bool isset__controlType = false;
  bool isset__availableWeekdays = false;
  bool isset__maxHoursDaily = false;
  bool isset__maxHoursMonthly = false;
  bool isset__maxHoursSeasonal = false;
  bool isset__maxHoursAnnually = false;
  bool isset__minActivateTime = false;
  bool isset__minRestartTime = false;
  bool isset__programStatusPointId = false;
  bool isset__programState = false;
  bool isset__reductionAnalogPointId = false;
  bool isset__reductionTotal = false;
  bool isset__startedControlling = false;
  bool isset__lastControlSent = false;
  bool isset__manualControlReceivedFlag = false;
  bool isset__lmProgramControlWindows = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoCategory);
          isset__paoCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoClass);
          isset__paoClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoName);
          isset__paoName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoTypeString);
          isset__paoTypeString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoDescription);
          isset__paoDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_disableFlag);
          isset__disableFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_startPriority);
          isset__startPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_stopPriority);
          isset__stopPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_controlType);
          isset__controlType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_availableWeekdays);
          isset__availableWeekdays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_maxHoursDaily);
          isset__maxHoursDaily = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_maxHoursMonthly);
          isset__maxHoursMonthly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_maxHoursSeasonal);
          isset__maxHoursSeasonal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_maxHoursAnnually);
          isset__maxHoursAnnually = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_minActivateTime);
          isset__minActivateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_minRestartTime);
          isset__minRestartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_programStatusPointId);
          isset__programStatusPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_programState);
          isset__programState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_reductionAnalogPointId);
          isset__reductionAnalogPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_reductionTotal);
          isset__reductionTotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_startedControlling);
          isset__startedControlling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastControlSent);
          isset__lastControlSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_manualControlReceivedFlag);
          isset__manualControlReceivedFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmProgramControlWindows.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_lmProgramControlWindows.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->_lmProgramControlWindows[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmProgramControlWindows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoCategory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoClass)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoTypeString)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoDescription)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__disableFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startPriority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__stopPriority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__availableWeekdays)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__maxHoursDaily)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__maxHoursMonthly)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__maxHoursSeasonal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__maxHoursAnnually)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__minActivateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__minRestartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__programStatusPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__programState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__reductionAnalogPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__reductionTotal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startedControlling)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastControlSent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__manualControlReceivedFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmProgramControlWindows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMProgramBase::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMProgramBase");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoCategory", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_paoCategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoClass", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_paoClass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_paoName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoTypeString", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_paoTypeString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoDescription", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_paoDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_disableFlag", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->_disableFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startPriority", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->_startPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_stopPriority", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->_stopPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlType", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->_controlType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_availableWeekdays", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->_availableWeekdays);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_maxHoursDaily", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->_maxHoursDaily);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_maxHoursMonthly", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->_maxHoursMonthly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_maxHoursSeasonal", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->_maxHoursSeasonal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_maxHoursAnnually", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->_maxHoursAnnually);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_minActivateTime", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->_minActivateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_minRestartTime", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->_minRestartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_programStatusPointId", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->_programStatusPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_programState", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->_programState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_reductionAnalogPointId", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->_reductionAnalogPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_reductionTotal", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->_reductionTotal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startedControlling", ::apache::thrift::protocol::T_I64, 22);
  xfer += oprot->writeI64(this->_startedControlling);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastControlSent", ::apache::thrift::protocol::T_I64, 23);
  xfer += oprot->writeI64(this->_lastControlSent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_manualControlReceivedFlag", ::apache::thrift::protocol::T_BOOL, 24);
  xfer += oprot->writeBool(this->_manualControlReceivedFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmProgramControlWindows", ::apache::thrift::protocol::T_LIST, 25);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmProgramControlWindows.size()));
    std::vector<LMProgramControlWindow> ::const_iterator _iter5;
    for (_iter5 = this->_lmProgramControlWindows.begin(); _iter5 != this->_lmProgramControlWindows.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMProgramBase &a, LMProgramBase &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._paoCategory, b._paoCategory);
  swap(a._paoClass, b._paoClass);
  swap(a._paoName, b._paoName);
  swap(a._paoTypeString, b._paoTypeString);
  swap(a._paoDescription, b._paoDescription);
  swap(a._disableFlag, b._disableFlag);
  swap(a._startPriority, b._startPriority);
  swap(a._stopPriority, b._stopPriority);
  swap(a._controlType, b._controlType);
  swap(a._availableWeekdays, b._availableWeekdays);
  swap(a._maxHoursDaily, b._maxHoursDaily);
  swap(a._maxHoursMonthly, b._maxHoursMonthly);
  swap(a._maxHoursSeasonal, b._maxHoursSeasonal);
  swap(a._maxHoursAnnually, b._maxHoursAnnually);
  swap(a._minActivateTime, b._minActivateTime);
  swap(a._minRestartTime, b._minRestartTime);
  swap(a._programStatusPointId, b._programStatusPointId);
  swap(a._programState, b._programState);
  swap(a._reductionAnalogPointId, b._reductionAnalogPointId);
  swap(a._reductionTotal, b._reductionTotal);
  swap(a._startedControlling, b._startedControlling);
  swap(a._lastControlSent, b._lastControlSent);
  swap(a._manualControlReceivedFlag, b._manualControlReceivedFlag);
  swap(a._lmProgramControlWindows, b._lmProgramControlWindows);
}

const char* LMCICustomerBase::ascii_fingerprint = "58BC68BB8ED6F2C9501D266941763CCF";
const uint8_t LMCICustomerBase::binary_fingerprint[16] = {0x58,0xBC,0x68,0xBB,0x8E,0xD6,0xF2,0xC9,0x50,0x1D,0x26,0x69,0x41,0x76,0x3C,0xCF};

uint32_t LMCICustomerBase::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__customerId = false;
  bool isset__companyName = false;
  bool isset__customerDemandLevel = false;
  bool isset__curtailAmount = false;
  bool isset__curtailmentAgreement = false;
  bool isset__timeZone = false;
  bool isset__customerOrder = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_customerId);
          isset__customerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_companyName);
          isset__companyName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_customerDemandLevel);
          isset__customerDemandLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_curtailAmount);
          isset__curtailAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_curtailmentAgreement);
          isset__curtailmentAgreement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_timeZone);
          isset__timeZone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_customerOrder);
          isset__customerOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__customerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__companyName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__customerDemandLevel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailmentAgreement)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__timeZone)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__customerOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMCICustomerBase::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMCICustomerBase");

  xfer += oprot->writeFieldBegin("_customerId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_customerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_companyName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_companyName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_customerDemandLevel", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->_customerDemandLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailAmount", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->_curtailAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailmentAgreement", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_curtailmentAgreement);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_timeZone", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_timeZone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_customerOrder", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_customerOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMCICustomerBase &a, LMCICustomerBase &b) {
  using ::std::swap;
  swap(a._customerId, b._customerId);
  swap(a._companyName, b._companyName);
  swap(a._customerDemandLevel, b._customerDemandLevel);
  swap(a._curtailAmount, b._curtailAmount);
  swap(a._curtailmentAgreement, b._curtailmentAgreement);
  swap(a._timeZone, b._timeZone);
  swap(a._customerOrder, b._customerOrder);
}

const char* LMCurtailCustomer::ascii_fingerprint = "0110D087F2E3DEAA55387A5EA1DBD95D";
const uint8_t LMCurtailCustomer::binary_fingerprint[16] = {0x01,0x10,0xD0,0x87,0xF2,0xE3,0xDE,0xAA,0x55,0x38,0x7A,0x5E,0xA1,0xDB,0xD9,0x5D};

uint32_t LMCurtailCustomer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__requireAck = false;
  bool isset__curtailReferenceId = false;
  bool isset__acknowledgeStatus = false;
  bool isset__ackDatetime = false;
  bool isset__ipAddressOfAckUser = false;
  bool isset__userIdName = false;
  bool isset__nameOfAckPerson = false;
  bool isset__curtailmentNotes = false;
  bool isset__ackLateFlag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_requireAck);
          isset__requireAck = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_curtailReferenceId);
          isset__curtailReferenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_acknowledgeStatus);
          isset__acknowledgeStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_ackDatetime);
          isset__ackDatetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_ipAddressOfAckUser);
          isset__ipAddressOfAckUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_userIdName);
          isset__userIdName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_nameOfAckPerson);
          isset__nameOfAckPerson = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_curtailmentNotes);
          isset__curtailmentNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_ackLateFlag);
          isset__ackLateFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__requireAck)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailReferenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__acknowledgeStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ackDatetime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ipAddressOfAckUser)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__userIdName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__nameOfAckPerson)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailmentNotes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ackLateFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMCurtailCustomer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMCurtailCustomer");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_requireAck", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->_requireAck);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailReferenceId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_curtailReferenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_acknowledgeStatus", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_acknowledgeStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ackDatetime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->_ackDatetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ipAddressOfAckUser", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_ipAddressOfAckUser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_userIdName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_userIdName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_nameOfAckPerson", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_nameOfAckPerson);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailmentNotes", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_curtailmentNotes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ackLateFlag", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->_ackLateFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMCurtailCustomer &a, LMCurtailCustomer &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._requireAck, b._requireAck);
  swap(a._curtailReferenceId, b._curtailReferenceId);
  swap(a._acknowledgeStatus, b._acknowledgeStatus);
  swap(a._ackDatetime, b._ackDatetime);
  swap(a._ipAddressOfAckUser, b._ipAddressOfAckUser);
  swap(a._userIdName, b._userIdName);
  swap(a._nameOfAckPerson, b._nameOfAckPerson);
  swap(a._curtailmentNotes, b._curtailmentNotes);
  swap(a._ackLateFlag, b._ackLateFlag);
}

const char* LMProgramCurtailment::ascii_fingerprint = "E46755CB82FBDECB7F768B7045215B6B";
const uint8_t LMProgramCurtailment::binary_fingerprint[16] = {0xE4,0x67,0x55,0xCB,0x82,0xFB,0xDE,0xCB,0x7F,0x76,0x8B,0x70,0x45,0x21,0x5B,0x6B};

uint32_t LMProgramCurtailment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__minNotifyTime = false;
  bool isset__heading = false;
  bool isset__messageHeader = false;
  bool isset__messageFooter = false;
  bool isset__acktimeLimit = false;
  bool isset__canceledMsg = false;
  bool isset__stoppedEarlyMsg = false;
  bool isset__curtailReferenceId = false;
  bool isset__actionDateTime = false;
  bool isset__notificationDateTime = false;
  bool isset__curtailmentStartTime = false;
  bool isset__curtailmentStopTime = false;
  bool isset__runStatus = false;
  bool isset__additionalInfo = false;
  bool isset__lmProgramCurtailmentCustomers = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_minNotifyTime);
          isset__minNotifyTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_heading);
          isset__heading = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_messageHeader);
          isset__messageHeader = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_messageFooter);
          isset__messageFooter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_acktimeLimit);
          isset__acktimeLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_canceledMsg);
          isset__canceledMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_stoppedEarlyMsg);
          isset__stoppedEarlyMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_curtailReferenceId);
          isset__curtailReferenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_actionDateTime);
          isset__actionDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_notificationDateTime);
          isset__notificationDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_curtailmentStartTime);
          isset__curtailmentStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_curtailmentStopTime);
          isset__curtailmentStopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_runStatus);
          isset__runStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_additionalInfo);
          isset__additionalInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmProgramCurtailmentCustomers.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->_lmProgramCurtailmentCustomers.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->_lmProgramCurtailmentCustomers[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmProgramCurtailmentCustomers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__minNotifyTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__heading)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__messageHeader)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__messageFooter)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__acktimeLimit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__canceledMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__stoppedEarlyMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailReferenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__actionDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__notificationDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailmentStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailmentStopTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__runStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__additionalInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmProgramCurtailmentCustomers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMProgramCurtailment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMProgramCurtailment");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_minNotifyTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_minNotifyTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_heading", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_heading);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_messageHeader", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_messageHeader);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_messageFooter", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_messageFooter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_acktimeLimit", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_acktimeLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_canceledMsg", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_canceledMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_stoppedEarlyMsg", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_stoppedEarlyMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailReferenceId", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->_curtailReferenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_actionDateTime", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->_actionDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_notificationDateTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->_notificationDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailmentStartTime", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->_curtailmentStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailmentStopTime", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->_curtailmentStopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_runStatus", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->_runStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_additionalInfo", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->_additionalInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmProgramCurtailmentCustomers", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmProgramCurtailmentCustomers.size()));
    std::vector<LMCurtailCustomer> ::const_iterator _iter11;
    for (_iter11 = this->_lmProgramCurtailmentCustomers.begin(); _iter11 != this->_lmProgramCurtailmentCustomers.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMProgramCurtailment &a, LMProgramCurtailment &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._minNotifyTime, b._minNotifyTime);
  swap(a._heading, b._heading);
  swap(a._messageHeader, b._messageHeader);
  swap(a._messageFooter, b._messageFooter);
  swap(a._acktimeLimit, b._acktimeLimit);
  swap(a._canceledMsg, b._canceledMsg);
  swap(a._stoppedEarlyMsg, b._stoppedEarlyMsg);
  swap(a._curtailReferenceId, b._curtailReferenceId);
  swap(a._actionDateTime, b._actionDateTime);
  swap(a._notificationDateTime, b._notificationDateTime);
  swap(a._curtailmentStartTime, b._curtailmentStartTime);
  swap(a._curtailmentStopTime, b._curtailmentStopTime);
  swap(a._runStatus, b._runStatus);
  swap(a._additionalInfo, b._additionalInfo);
  swap(a._lmProgramCurtailmentCustomers, b._lmProgramCurtailmentCustomers);
}

const char* LMProgramDirectGear::ascii_fingerprint = "21E3D3CE07034F2210BB937B516EB23A";
const uint8_t LMProgramDirectGear::binary_fingerprint[16] = {0x21,0xE3,0xD3,0xCE,0x07,0x03,0x4F,0x22,0x10,0xBB,0x93,0x7B,0x51,0x6E,0xB2,0x3A};

uint32_t LMProgramDirectGear::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__programPaoId = false;
  bool isset__gearName = false;
  bool isset__gearNumber = false;
  bool isset__controlMethod = false;
  bool isset__methodRate = false;
  bool isset__methodPeriod = false;
  bool isset__methodRateCount = false;
  bool isset__cyclereFreshRate = false;
  bool isset__methodStopType = false;
  bool isset__changeCondition = false;
  bool isset__changeDuration = false;
  bool isset__changePriority = false;
  bool isset__changeTriggerNumber = false;
  bool isset__changeTriggerOffset = false;
  bool isset__percentReduction = false;
  bool isset__groupSelectionMethod = false;
  bool isset__methodOptionType = false;
  bool isset__methodOptionMax = false;
  bool isset__rampInInterval = false;
  bool isset__rampInPercent = false;
  bool isset__rampOutInterval = false;
  bool isset__rampOutPercent = false;
  bool isset__kwReduction = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_programPaoId);
          isset__programPaoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_gearName);
          isset__gearName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_gearNumber);
          isset__gearNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_controlMethod);
          isset__controlMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_methodRate);
          isset__methodRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_methodPeriod);
          isset__methodPeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_methodRateCount);
          isset__methodRateCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_cyclereFreshRate);
          isset__cyclereFreshRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_methodStopType);
          isset__methodStopType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_changeCondition);
          isset__changeCondition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_changeDuration);
          isset__changeDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_changePriority);
          isset__changePriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_changeTriggerNumber);
          isset__changeTriggerNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_changeTriggerOffset);
          isset__changeTriggerOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_percentReduction);
          isset__percentReduction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_groupSelectionMethod);
          isset__groupSelectionMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_methodOptionType);
          isset__methodOptionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_methodOptionMax);
          isset__methodOptionMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_rampInInterval);
          isset__rampInInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_rampInPercent);
          isset__rampInPercent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_rampOutInterval);
          isset__rampOutInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_rampOutPercent);
          isset__rampOutPercent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_kwReduction);
          isset__kwReduction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__programPaoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__gearName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__gearNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlMethod)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__methodRate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__methodPeriod)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__methodRateCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__cyclereFreshRate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__methodStopType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__changeCondition)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__changeDuration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__changePriority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__changeTriggerNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__changeTriggerOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__percentReduction)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__groupSelectionMethod)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__methodOptionType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__methodOptionMax)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__rampInInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__rampInPercent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__rampOutInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__rampOutPercent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__kwReduction)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMProgramDirectGear::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMProgramDirectGear");

  xfer += oprot->writeFieldBegin("_programPaoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_programPaoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_gearName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_gearName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_gearNumber", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_gearNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlMethod", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_controlMethod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_methodRate", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_methodRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_methodPeriod", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_methodPeriod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_methodRateCount", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_methodRateCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_cyclereFreshRate", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->_cyclereFreshRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_methodStopType", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_methodStopType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_changeCondition", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->_changeCondition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_changeDuration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->_changeDuration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_changePriority", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->_changePriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_changeTriggerNumber", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->_changeTriggerNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_changeTriggerOffset", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->_changeTriggerOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_percentReduction", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->_percentReduction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_groupSelectionMethod", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->_groupSelectionMethod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_methodOptionType", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->_methodOptionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_methodOptionMax", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->_methodOptionMax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_rampInInterval", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->_rampInInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_rampInPercent", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->_rampInPercent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_rampOutInterval", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->_rampOutInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_rampOutPercent", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->_rampOutPercent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_kwReduction", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->_kwReduction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMProgramDirectGear &a, LMProgramDirectGear &b) {
  using ::std::swap;
  swap(a._programPaoId, b._programPaoId);
  swap(a._gearName, b._gearName);
  swap(a._gearNumber, b._gearNumber);
  swap(a._controlMethod, b._controlMethod);
  swap(a._methodRate, b._methodRate);
  swap(a._methodPeriod, b._methodPeriod);
  swap(a._methodRateCount, b._methodRateCount);
  swap(a._cyclereFreshRate, b._cyclereFreshRate);
  swap(a._methodStopType, b._methodStopType);
  swap(a._changeCondition, b._changeCondition);
  swap(a._changeDuration, b._changeDuration);
  swap(a._changePriority, b._changePriority);
  swap(a._changeTriggerNumber, b._changeTriggerNumber);
  swap(a._changeTriggerOffset, b._changeTriggerOffset);
  swap(a._percentReduction, b._percentReduction);
  swap(a._groupSelectionMethod, b._groupSelectionMethod);
  swap(a._methodOptionType, b._methodOptionType);
  swap(a._methodOptionMax, b._methodOptionMax);
  swap(a._rampInInterval, b._rampInInterval);
  swap(a._rampInPercent, b._rampInPercent);
  swap(a._rampOutInterval, b._rampOutInterval);
  swap(a._rampOutPercent, b._rampOutPercent);
  swap(a._kwReduction, b._kwReduction);
}

const char* LMGroupBase::ascii_fingerprint = "54967C9507DFC665A1E47AD9EF4CD7CF";
const uint8_t LMGroupBase::binary_fingerprint[16] = {0x54,0x96,0x7C,0x95,0x07,0xDF,0xC6,0x65,0xA1,0xE4,0x7A,0xD9,0xEF,0x4C,0xD7,0xCF};

uint32_t LMGroupBase::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__paoCategory = false;
  bool isset__paoClass = false;
  bool isset__paoName = false;
  bool isset__paoTypeString = false;
  bool isset__paoDescription = false;
  bool isset__disableFlag = false;
  bool isset__groupOrder = false;
  bool isset__kwCapacity = false;
  bool isset__childOrder = false;
  bool isset__alarmInhibit = false;
  bool isset__controlInhibit = false;
  bool isset__groupControlState = false;
  bool isset__currentHoursDaily = false;
  bool isset__currentHoursMonthly = false;
  bool isset__currentHoursSeasonal = false;
  bool isset__currentHoursAnnually = false;
  bool isset__lastControlSent = false;
  bool isset__controlStartTime = false;
  bool isset__controlCompleteTime = false;
  bool isset__nextControlTime = false;
  bool isset__internalState = false;
  bool isset__dailyOps = false;
  bool isset__lastStopTimeSent = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoCategory);
          isset__paoCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoClass);
          isset__paoClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoName);
          isset__paoName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoTypeString);
          isset__paoTypeString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoDescription);
          isset__paoDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_disableFlag);
          isset__disableFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_groupOrder);
          isset__groupOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_kwCapacity);
          isset__kwCapacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_childOrder);
          isset__childOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_alarmInhibit);
          isset__alarmInhibit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_controlInhibit);
          isset__controlInhibit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_groupControlState);
          isset__groupControlState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentHoursDaily);
          isset__currentHoursDaily = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentHoursMonthly);
          isset__currentHoursMonthly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentHoursSeasonal);
          isset__currentHoursSeasonal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentHoursAnnually);
          isset__currentHoursAnnually = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastControlSent);
          isset__lastControlSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlStartTime);
          isset__controlStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlCompleteTime);
          isset__controlCompleteTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_nextControlTime);
          isset__nextControlTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_internalState);
          isset__internalState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_dailyOps);
          isset__dailyOps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastStopTimeSent);
          isset__lastStopTimeSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoCategory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoClass)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoTypeString)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoDescription)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__disableFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__groupOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__kwCapacity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__childOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__alarmInhibit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlInhibit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__groupControlState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentHoursDaily)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentHoursMonthly)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentHoursSeasonal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentHoursAnnually)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastControlSent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlCompleteTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__nextControlTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__internalState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__dailyOps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastStopTimeSent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupBase::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupBase");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoCategory", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_paoCategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoClass", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_paoClass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_paoName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoTypeString", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_paoTypeString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoDescription", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_paoDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_disableFlag", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->_disableFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_groupOrder", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->_groupOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_kwCapacity", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->_kwCapacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_childOrder", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->_childOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_alarmInhibit", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->_alarmInhibit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlInhibit", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->_controlInhibit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_groupControlState", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->_groupControlState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentHoursDaily", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->_currentHoursDaily);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentHoursMonthly", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->_currentHoursMonthly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentHoursSeasonal", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->_currentHoursSeasonal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentHoursAnnually", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->_currentHoursAnnually);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastControlSent", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->_lastControlSent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlStartTime", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->_controlStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlCompleteTime", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->_controlCompleteTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_nextControlTime", ::apache::thrift::protocol::T_I64, 23);
  xfer += oprot->writeI64(this->_nextControlTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_internalState", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->_internalState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_dailyOps", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->_dailyOps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastStopTimeSent", ::apache::thrift::protocol::T_I64, 26);
  xfer += oprot->writeI64(this->_lastStopTimeSent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupBase &a, LMGroupBase &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._paoCategory, b._paoCategory);
  swap(a._paoClass, b._paoClass);
  swap(a._paoName, b._paoName);
  swap(a._paoTypeString, b._paoTypeString);
  swap(a._paoDescription, b._paoDescription);
  swap(a._disableFlag, b._disableFlag);
  swap(a._groupOrder, b._groupOrder);
  swap(a._kwCapacity, b._kwCapacity);
  swap(a._childOrder, b._childOrder);
  swap(a._alarmInhibit, b._alarmInhibit);
  swap(a._controlInhibit, b._controlInhibit);
  swap(a._groupControlState, b._groupControlState);
  swap(a._currentHoursDaily, b._currentHoursDaily);
  swap(a._currentHoursMonthly, b._currentHoursMonthly);
  swap(a._currentHoursSeasonal, b._currentHoursSeasonal);
  swap(a._currentHoursAnnually, b._currentHoursAnnually);
  swap(a._lastControlSent, b._lastControlSent);
  swap(a._controlStartTime, b._controlStartTime);
  swap(a._controlCompleteTime, b._controlCompleteTime);
  swap(a._nextControlTime, b._nextControlTime);
  swap(a._internalState, b._internalState);
  swap(a._dailyOps, b._dailyOps);
  swap(a._lastStopTimeSent, b._lastStopTimeSent);
}

const char* LMGroupDigiSEP::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupDigiSEP::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupDigiSEP::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupDigiSEP::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupDigiSEP");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupDigiSEP &a, LMGroupDigiSEP &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupEcobee::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupEcobee::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupEcobee::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupEcobee::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupEcobee");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupEcobee &a, LMGroupEcobee &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupHoneywell::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupHoneywell::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupHoneywell::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupHoneywell::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupHoneywell");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupHoneywell &a, LMGroupHoneywell &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupEmetcon::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupEmetcon::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupEmetcon::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupEmetcon::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupEmetcon");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupEmetcon &a, LMGroupEmetcon &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupExpresscom::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupExpresscom::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupExpresscom::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupExpresscom::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupExpresscom");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupExpresscom &a, LMGroupExpresscom &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupGolay::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupGolay::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupGolay::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupGolay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupGolay");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupGolay &a, LMGroupGolay &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupMacro::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupMacro::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupMacro::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupMacro::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupMacro");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupMacro &a, LMGroupMacro &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupMCT::ascii_fingerprint = "6EAE3360CCE68EBACBE88AA2683618F9";
const uint8_t LMGroupMCT::binary_fingerprint[16] = {0x6E,0xAE,0x33,0x60,0xCC,0xE6,0x8E,0xBA,0xCB,0xE8,0x8A,0xA2,0x68,0x36,0x18,0xF9};

uint32_t LMGroupMCT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupMCT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupMCT");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupMCT &a, LMGroupMCT &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupPoint::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupPoint::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupPoint");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupPoint &a, LMGroupPoint &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupRipple::ascii_fingerprint = "8425E273E944143BC6B9DB14DED7E700";
const uint8_t LMGroupRipple::binary_fingerprint[16] = {0x84,0x25,0xE2,0x73,0xE9,0x44,0x14,0x3B,0xC6,0xB9,0xDB,0x14,0xDE,0xD7,0xE7,0x00};

uint32_t LMGroupRipple::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__shedTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_shedTime);
          isset__shedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__shedTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupRipple::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupRipple");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_shedTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_shedTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupRipple &a, LMGroupRipple &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._shedTime, b._shedTime);
}

const char* LMGroupSA105::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupSA105::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupSA105::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupSA105::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupSA105");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupSA105 &a, LMGroupSA105 &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupSA205::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupSA205::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupSA205::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupSA205::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupSA205");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupSA205 &a, LMGroupSA205 &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupSA305::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupSA305::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupSA305::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupSA305::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupSA305");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupSA305 &a, LMGroupSA305 &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupSADigital::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupSADigital::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupSADigital::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupSADigital::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupSADigital");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupSADigital &a, LMGroupSADigital &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMGroupVersacom::ascii_fingerprint = "87D2AAE9F82EF469E961C185946711F5";
const uint8_t LMGroupVersacom::binary_fingerprint[16] = {0x87,0xD2,0xAA,0xE9,0xF8,0x2E,0xF4,0x69,0xE9,0x61,0xC1,0x85,0x94,0x67,0x11,0xF5};

uint32_t LMGroupVersacom::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMGroupVersacom::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMGroupVersacom");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMGroupVersacom &a, LMGroupVersacom &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* LMProgramDirect::ascii_fingerprint = "D30E443A35527B9ABFCA2B3D252847B0";
const uint8_t LMProgramDirect::binary_fingerprint[16] = {0xD3,0x0E,0x44,0x3A,0x35,0x52,0x7B,0x9A,0xBF,0xCA,0x2B,0x3D,0x25,0x28,0x47,0xB0};

uint32_t LMProgramDirect::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__currentGearNumber = false;
  bool isset__lastGroupControlled = false;
  bool isset__directStartTime = false;
  bool isset__directstopTime = false;
  bool isset__notifyActiveTime = false;
  bool isset__notifyInactiveTime = false;
  bool isset__startedRampingOut = false;
  bool isset__triggerOffset = false;
  bool isset__triggerRestoreOffset = false;
  bool isset__constraintOverride = false;
  bool isset__lmProgramDirectGears = false;
  bool isset__lmProgramDirectGroups = false;
  bool isset__activeMasters = false;
  bool isset__activeSubordinates = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentGearNumber);
          isset__currentGearNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_lastGroupControlled);
          isset__lastGroupControlled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_directStartTime);
          isset__directStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_directstopTime);
          isset__directstopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_notifyActiveTime);
          isset__notifyActiveTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_notifyInactiveTime);
          isset__notifyInactiveTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_startedRampingOut);
          isset__startedRampingOut = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_triggerOffset);
          isset__triggerOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_triggerRestoreOffset);
          isset__triggerRestoreOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_constraintOverride);
          isset__constraintOverride = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmProgramDirectGears.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->_lmProgramDirectGears.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->_lmProgramDirectGears[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmProgramDirectGears = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmProgramDirectGroups.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->_lmProgramDirectGroups.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += this->_lmProgramDirectGroups[_i21].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmProgramDirectGroups = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_activeMasters.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->_activeMasters.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->_activeMasters[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__activeMasters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_activeSubordinates.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->_activeSubordinates.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += this->_activeSubordinates[_i31].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__activeSubordinates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentGearNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastGroupControlled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__directStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__directstopTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__notifyActiveTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__notifyInactiveTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__startedRampingOut)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__triggerOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__triggerRestoreOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__constraintOverride)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmProgramDirectGears)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmProgramDirectGroups)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__activeMasters)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__activeSubordinates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMProgramDirect::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMProgramDirect");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentGearNumber", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_currentGearNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastGroupControlled", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_lastGroupControlled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_directStartTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_directStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_directstopTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->_directstopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_notifyActiveTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->_notifyActiveTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_notifyInactiveTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->_notifyInactiveTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_startedRampingOut", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->_startedRampingOut);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_triggerOffset", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->_triggerOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_triggerRestoreOffset", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->_triggerRestoreOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_constraintOverride", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->_constraintOverride);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmProgramDirectGears", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmProgramDirectGears.size()));
    std::vector<LMProgramDirectGear> ::const_iterator _iter32;
    for (_iter32 = this->_lmProgramDirectGears.begin(); _iter32 != this->_lmProgramDirectGears.end(); ++_iter32)
    {
      xfer += (*_iter32).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmProgramDirectGroups", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmProgramDirectGroups.size()));
    std::vector< ::Cti::Messaging::Serialization::Thrift::GenericMessage> ::const_iterator _iter33;
    for (_iter33 = this->_lmProgramDirectGroups.begin(); _iter33 != this->_lmProgramDirectGroups.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_activeMasters", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_activeMasters.size()));
    std::vector< ::Cti::Messaging::Serialization::Thrift::GenericMessage> ::const_iterator _iter34;
    for (_iter34 = this->_activeMasters.begin(); _iter34 != this->_activeMasters.end(); ++_iter34)
    {
      xfer += (*_iter34).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_activeSubordinates", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_activeSubordinates.size()));
    std::vector< ::Cti::Messaging::Serialization::Thrift::GenericMessage> ::const_iterator _iter35;
    for (_iter35 = this->_activeSubordinates.begin(); _iter35 != this->_activeSubordinates.end(); ++_iter35)
    {
      xfer += (*_iter35).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMProgramDirect &a, LMProgramDirect &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._currentGearNumber, b._currentGearNumber);
  swap(a._lastGroupControlled, b._lastGroupControlled);
  swap(a._directStartTime, b._directStartTime);
  swap(a._directstopTime, b._directstopTime);
  swap(a._notifyActiveTime, b._notifyActiveTime);
  swap(a._notifyInactiveTime, b._notifyInactiveTime);
  swap(a._startedRampingOut, b._startedRampingOut);
  swap(a._triggerOffset, b._triggerOffset);
  swap(a._triggerRestoreOffset, b._triggerRestoreOffset);
  swap(a._constraintOverride, b._constraintOverride);
  swap(a._lmProgramDirectGears, b._lmProgramDirectGears);
  swap(a._lmProgramDirectGroups, b._lmProgramDirectGroups);
  swap(a._activeMasters, b._activeMasters);
  swap(a._activeSubordinates, b._activeSubordinates);
}

const char* LMEnergyExchangeHourlyOffer::ascii_fingerprint = "024BC5B440BAAEB1F3BB3BD341D6521C";
const uint8_t LMEnergyExchangeHourlyOffer::binary_fingerprint[16] = {0x02,0x4B,0xC5,0xB4,0x40,0xBA,0xAE,0xB1,0xF3,0xBB,0x3B,0xD3,0x41,0xD6,0x52,0x1C};

uint32_t LMEnergyExchangeHourlyOffer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__offerId = false;
  bool isset__revisionNumber = false;
  bool isset__hour = false;
  bool isset__price = false;
  bool isset__amountRequested = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_offerId);
          isset__offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_revisionNumber);
          isset__revisionNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_hour);
          isset__hour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_price);
          isset__price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_amountRequested);
          isset__amountRequested = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__offerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__revisionNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__hour)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__price)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__amountRequested)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEnergyExchangeHourlyOffer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMEnergyExchangeHourlyOffer");

  xfer += oprot->writeFieldBegin("_offerId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_offerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_revisionNumber", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_revisionNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_hour", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_hour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_price", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_amountRequested", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->_amountRequested);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEnergyExchangeHourlyOffer &a, LMEnergyExchangeHourlyOffer &b) {
  using ::std::swap;
  swap(a._offerId, b._offerId);
  swap(a._revisionNumber, b._revisionNumber);
  swap(a._hour, b._hour);
  swap(a._price, b._price);
  swap(a._amountRequested, b._amountRequested);
}

const char* LMEnergyExchangeOfferRevision::ascii_fingerprint = "BA01C93A4871DAB4F9E394FE645E018E";
const uint8_t LMEnergyExchangeOfferRevision::binary_fingerprint[16] = {0xBA,0x01,0xC9,0x3A,0x48,0x71,0xDA,0xB4,0xF9,0xE3,0x94,0xFE,0x64,0x5E,0x01,0x8E};

uint32_t LMEnergyExchangeOfferRevision::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__offerId = false;
  bool isset__revisionNumber = false;
  bool isset__actionDatetime = false;
  bool isset__notificationDatetime = false;
  bool isset__offerexpirationDatetime = false;
  bool isset__additionalInfo = false;
  bool isset__lmEnergyExchangeHourlyOffers = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_offerId);
          isset__offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_revisionNumber);
          isset__revisionNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_actionDatetime);
          isset__actionDatetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_notificationDatetime);
          isset__notificationDatetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_offerexpirationDatetime);
          isset__offerexpirationDatetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_additionalInfo);
          isset__additionalInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmEnergyExchangeHourlyOffers.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->_lmEnergyExchangeHourlyOffers.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += this->_lmEnergyExchangeHourlyOffers[_i40].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmEnergyExchangeHourlyOffers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__offerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__revisionNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__actionDatetime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__notificationDatetime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__offerexpirationDatetime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__additionalInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmEnergyExchangeHourlyOffers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEnergyExchangeOfferRevision::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMEnergyExchangeOfferRevision");

  xfer += oprot->writeFieldBegin("_offerId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_offerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_revisionNumber", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_revisionNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_actionDatetime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->_actionDatetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_notificationDatetime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_notificationDatetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_offerexpirationDatetime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->_offerexpirationDatetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_additionalInfo", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_additionalInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmEnergyExchangeHourlyOffers", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmEnergyExchangeHourlyOffers.size()));
    std::vector<LMEnergyExchangeHourlyOffer> ::const_iterator _iter41;
    for (_iter41 = this->_lmEnergyExchangeHourlyOffers.begin(); _iter41 != this->_lmEnergyExchangeHourlyOffers.end(); ++_iter41)
    {
      xfer += (*_iter41).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEnergyExchangeOfferRevision &a, LMEnergyExchangeOfferRevision &b) {
  using ::std::swap;
  swap(a._offerId, b._offerId);
  swap(a._revisionNumber, b._revisionNumber);
  swap(a._actionDatetime, b._actionDatetime);
  swap(a._notificationDatetime, b._notificationDatetime);
  swap(a._offerexpirationDatetime, b._offerexpirationDatetime);
  swap(a._additionalInfo, b._additionalInfo);
  swap(a._lmEnergyExchangeHourlyOffers, b._lmEnergyExchangeHourlyOffers);
}

const char* LMEnergyExchangeOffer::ascii_fingerprint = "1554181D28A09C049078BA8CB325CA35";
const uint8_t LMEnergyExchangeOffer::binary_fingerprint[16] = {0x15,0x54,0x18,0x1D,0x28,0xA0,0x9C,0x04,0x90,0x78,0xBA,0x8C,0xB3,0x25,0xCA,0x35};

uint32_t LMEnergyExchangeOffer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__offerId = false;
  bool isset__runStatus = false;
  bool isset__offerDate = false;
  bool isset__lmEnergyExchangeOfferRevisions = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_offerId);
          isset__offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_runStatus);
          isset__runStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_offerDate);
          isset__offerDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmEnergyExchangeOfferRevisions.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->_lmEnergyExchangeOfferRevisions.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += this->_lmEnergyExchangeOfferRevisions[_i46].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmEnergyExchangeOfferRevisions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__offerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__runStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__offerDate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmEnergyExchangeOfferRevisions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEnergyExchangeOffer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMEnergyExchangeOffer");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_offerId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_offerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_runStatus", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_runStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_offerDate", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_offerDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmEnergyExchangeOfferRevisions", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmEnergyExchangeOfferRevisions.size()));
    std::vector<LMEnergyExchangeOfferRevision> ::const_iterator _iter47;
    for (_iter47 = this->_lmEnergyExchangeOfferRevisions.begin(); _iter47 != this->_lmEnergyExchangeOfferRevisions.end(); ++_iter47)
    {
      xfer += (*_iter47).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEnergyExchangeOffer &a, LMEnergyExchangeOffer &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._offerId, b._offerId);
  swap(a._runStatus, b._runStatus);
  swap(a._offerDate, b._offerDate);
  swap(a._lmEnergyExchangeOfferRevisions, b._lmEnergyExchangeOfferRevisions);
}

const char* LMEnergyExchangeHourlyCustomer::ascii_fingerprint = "7BD00650D5899D1155D6BC44CF108369";
const uint8_t LMEnergyExchangeHourlyCustomer::binary_fingerprint[16] = {0x7B,0xD0,0x06,0x50,0xD5,0x89,0x9D,0x11,0x55,0xD6,0xBC,0x44,0xCF,0x10,0x83,0x69};

uint32_t LMEnergyExchangeHourlyCustomer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__customerId = false;
  bool isset__offerId = false;
  bool isset__revisionNumber = false;
  bool isset__hour = false;
  bool isset__amountCommitted = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_customerId);
          isset__customerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_offerId);
          isset__offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_revisionNumber);
          isset__revisionNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_hour);
          isset__hour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_amountCommitted);
          isset__amountCommitted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__customerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__offerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__revisionNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__hour)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__amountCommitted)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEnergyExchangeHourlyCustomer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMEnergyExchangeHourlyCustomer");

  xfer += oprot->writeFieldBegin("_customerId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_customerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_offerId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_offerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_revisionNumber", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_revisionNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_hour", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_hour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_amountCommitted", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->_amountCommitted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEnergyExchangeHourlyCustomer &a, LMEnergyExchangeHourlyCustomer &b) {
  using ::std::swap;
  swap(a._customerId, b._customerId);
  swap(a._offerId, b._offerId);
  swap(a._revisionNumber, b._revisionNumber);
  swap(a._hour, b._hour);
  swap(a._amountCommitted, b._amountCommitted);
}

const char* LMEnergyExchangeCustomerReply::ascii_fingerprint = "E6BA8594C7384E6261E8B29BFBF9B3FE";
const uint8_t LMEnergyExchangeCustomerReply::binary_fingerprint[16] = {0xE6,0xBA,0x85,0x94,0xC7,0x38,0x4E,0x62,0x61,0xE8,0xB2,0x9B,0xFB,0xF9,0xB3,0xFE};

uint32_t LMEnergyExchangeCustomerReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__customerId = false;
  bool isset__offerId = false;
  bool isset__acceptStatus = false;
  bool isset__acceptDatetime = false;
  bool isset__revisionNumber = false;
  bool isset__ipAddressOfAcceptUser = false;
  bool isset__userIdName = false;
  bool isset__nameOfAcceptPerson = false;
  bool isset__energyExchangeNotes = false;
  bool isset__lmEnergyExchangeHourlyCustomers = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_customerId);
          isset__customerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_offerId);
          isset__offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_acceptStatus);
          isset__acceptStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_acceptDatetime);
          isset__acceptDatetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_revisionNumber);
          isset__revisionNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_ipAddressOfAcceptUser);
          isset__ipAddressOfAcceptUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_userIdName);
          isset__userIdName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_nameOfAcceptPerson);
          isset__nameOfAcceptPerson = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_energyExchangeNotes);
          isset__energyExchangeNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmEnergyExchangeHourlyCustomers.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _etype51;
            xfer += iprot->readListBegin(_etype51, _size48);
            this->_lmEnergyExchangeHourlyCustomers.resize(_size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              xfer += this->_lmEnergyExchangeHourlyCustomers[_i52].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmEnergyExchangeHourlyCustomers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__customerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__offerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__acceptStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__acceptDatetime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__revisionNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ipAddressOfAcceptUser)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__userIdName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__nameOfAcceptPerson)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__energyExchangeNotes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmEnergyExchangeHourlyCustomers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEnergyExchangeCustomerReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMEnergyExchangeCustomerReply");

  xfer += oprot->writeFieldBegin("_customerId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_customerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_offerId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_offerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_acceptStatus", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_acceptStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_acceptDatetime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_acceptDatetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_revisionNumber", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_revisionNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ipAddressOfAcceptUser", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_ipAddressOfAcceptUser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_userIdName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_userIdName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_nameOfAcceptPerson", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_nameOfAcceptPerson);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_energyExchangeNotes", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_energyExchangeNotes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmEnergyExchangeHourlyCustomers", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmEnergyExchangeHourlyCustomers.size()));
    std::vector<LMEnergyExchangeHourlyCustomer> ::const_iterator _iter53;
    for (_iter53 = this->_lmEnergyExchangeHourlyCustomers.begin(); _iter53 != this->_lmEnergyExchangeHourlyCustomers.end(); ++_iter53)
    {
      xfer += (*_iter53).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEnergyExchangeCustomerReply &a, LMEnergyExchangeCustomerReply &b) {
  using ::std::swap;
  swap(a._customerId, b._customerId);
  swap(a._offerId, b._offerId);
  swap(a._acceptStatus, b._acceptStatus);
  swap(a._acceptDatetime, b._acceptDatetime);
  swap(a._revisionNumber, b._revisionNumber);
  swap(a._ipAddressOfAcceptUser, b._ipAddressOfAcceptUser);
  swap(a._userIdName, b._userIdName);
  swap(a._nameOfAcceptPerson, b._nameOfAcceptPerson);
  swap(a._energyExchangeNotes, b._energyExchangeNotes);
  swap(a._lmEnergyExchangeHourlyCustomers, b._lmEnergyExchangeHourlyCustomers);
}

const char* LMEnergyExchangeCustomer::ascii_fingerprint = "FAB0CE5682B4D08448F53B3584E18505";
const uint8_t LMEnergyExchangeCustomer::binary_fingerprint[16] = {0xFA,0xB0,0xCE,0x56,0x82,0xB4,0xD0,0x84,0x48,0xF5,0x3B,0x35,0x84,0xE1,0x85,0x05};

uint32_t LMEnergyExchangeCustomer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__lmEnergyExchangeCustomerReplies = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmEnergyExchangeCustomerReplies.clear();
            uint32_t _size54;
            ::apache::thrift::protocol::TType _etype57;
            xfer += iprot->readListBegin(_etype57, _size54);
            this->_lmEnergyExchangeCustomerReplies.resize(_size54);
            uint32_t _i58;
            for (_i58 = 0; _i58 < _size54; ++_i58)
            {
              xfer += this->_lmEnergyExchangeCustomerReplies[_i58].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmEnergyExchangeCustomerReplies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmEnergyExchangeCustomerReplies)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEnergyExchangeCustomer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMEnergyExchangeCustomer");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmEnergyExchangeCustomerReplies", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmEnergyExchangeCustomerReplies.size()));
    std::vector<LMEnergyExchangeCustomerReply> ::const_iterator _iter59;
    for (_iter59 = this->_lmEnergyExchangeCustomerReplies.begin(); _iter59 != this->_lmEnergyExchangeCustomerReplies.end(); ++_iter59)
    {
      xfer += (*_iter59).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEnergyExchangeCustomer &a, LMEnergyExchangeCustomer &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._lmEnergyExchangeCustomerReplies, b._lmEnergyExchangeCustomerReplies);
}

const char* LMProgramEnergyExchange::ascii_fingerprint = "65F003D8CF0059F384EBCF0F1608F846";
const uint8_t LMProgramEnergyExchange::binary_fingerprint[16] = {0x65,0xF0,0x03,0xD8,0xCF,0x00,0x59,0xF3,0x84,0xEB,0xCF,0x0F,0x16,0x08,0xF8,0x46};

uint32_t LMProgramEnergyExchange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__minNotifyTime = false;
  bool isset__heading = false;
  bool isset__messageHeader = false;
  bool isset__messageFooter = false;
  bool isset__canceledMsg = false;
  bool isset__stoppedEarlyMsg = false;
  bool isset__lmEnergyExchangeOffers = false;
  bool isset__lmEnergyExchangeCustomers = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_minNotifyTime);
          isset__minNotifyTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_heading);
          isset__heading = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_messageHeader);
          isset__messageHeader = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_messageFooter);
          isset__messageFooter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_canceledMsg);
          isset__canceledMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_stoppedEarlyMsg);
          isset__stoppedEarlyMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmEnergyExchangeOffers.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->_lmEnergyExchangeOffers.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += this->_lmEnergyExchangeOffers[_i64].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmEnergyExchangeOffers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmEnergyExchangeCustomers.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->_lmEnergyExchangeCustomers.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += this->_lmEnergyExchangeCustomers[_i69].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmEnergyExchangeCustomers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__minNotifyTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__heading)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__messageHeader)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__messageFooter)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__canceledMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__stoppedEarlyMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmEnergyExchangeOffers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmEnergyExchangeCustomers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMProgramEnergyExchange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMProgramEnergyExchange");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_minNotifyTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_minNotifyTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_heading", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_heading);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_messageHeader", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_messageHeader);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_messageFooter", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_messageFooter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_canceledMsg", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_canceledMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_stoppedEarlyMsg", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_stoppedEarlyMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmEnergyExchangeOffers", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmEnergyExchangeOffers.size()));
    std::vector<LMEnergyExchangeOffer> ::const_iterator _iter70;
    for (_iter70 = this->_lmEnergyExchangeOffers.begin(); _iter70 != this->_lmEnergyExchangeOffers.end(); ++_iter70)
    {
      xfer += (*_iter70).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmEnergyExchangeCustomers", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmEnergyExchangeCustomers.size()));
    std::vector<LMEnergyExchangeCustomer> ::const_iterator _iter71;
    for (_iter71 = this->_lmEnergyExchangeCustomers.begin(); _iter71 != this->_lmEnergyExchangeCustomers.end(); ++_iter71)
    {
      xfer += (*_iter71).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMProgramEnergyExchange &a, LMProgramEnergyExchange &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._minNotifyTime, b._minNotifyTime);
  swap(a._heading, b._heading);
  swap(a._messageHeader, b._messageHeader);
  swap(a._messageFooter, b._messageFooter);
  swap(a._canceledMsg, b._canceledMsg);
  swap(a._stoppedEarlyMsg, b._stoppedEarlyMsg);
  swap(a._lmEnergyExchangeOffers, b._lmEnergyExchangeOffers);
  swap(a._lmEnergyExchangeCustomers, b._lmEnergyExchangeCustomers);
}

const char* LMControlAreaItem::ascii_fingerprint = "648E80BF989B57498E00B7508EB18560";
const uint8_t LMControlAreaItem::binary_fingerprint[16] = {0x64,0x8E,0x80,0xBF,0x98,0x9B,0x57,0x49,0x8E,0x00,0xB7,0x50,0x8E,0xB1,0x85,0x60};

uint32_t LMControlAreaItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__paoCategory = false;
  bool isset__paoClass = false;
  bool isset__paoName = false;
  bool isset__paoTypeString = false;
  bool isset__paoDescription = false;
  bool isset__disableFlag = false;
  bool isset__defOperationalState = false;
  bool isset__controlInterval = false;
  bool isset__minResponseTime = false;
  bool isset__defDailyStartTime = false;
  bool isset__defDailyStopTime = false;
  bool isset__requireAllTriggersActiveFlag = false;
  bool isset__nextCheckTime = false;
  bool isset__newPointDataReceivedFlag = false;
  bool isset__updatedFlag = false;
  bool isset__controlAreaStatusPointId = false;
  bool isset__controlAreaState = false;
  bool isset__currentPriority = false;
  bool isset__currentDailyStartTime = false;
  bool isset__currentDailyStopTime = false;
  bool isset__lmControlAreaTriggers = false;
  bool isset__lmPrograms = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoCategory);
          isset__paoCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoClass);
          isset__paoClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoName);
          isset__paoName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoTypeString);
          isset__paoTypeString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoDescription);
          isset__paoDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_disableFlag);
          isset__disableFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_defOperationalState);
          isset__defOperationalState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_controlInterval);
          isset__controlInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_minResponseTime);
          isset__minResponseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_defDailyStartTime);
          isset__defDailyStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_defDailyStopTime);
          isset__defDailyStopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_requireAllTriggersActiveFlag);
          isset__requireAllTriggersActiveFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_nextCheckTime);
          isset__nextCheckTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_newPointDataReceivedFlag);
          isset__newPointDataReceivedFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_updatedFlag);
          isset__updatedFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_controlAreaStatusPointId);
          isset__controlAreaStatusPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_controlAreaState);
          isset__controlAreaState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentPriority);
          isset__currentPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentDailyStartTime);
          isset__currentDailyStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentDailyStopTime);
          isset__currentDailyStopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmControlAreaTriggers.clear();
            uint32_t _size72;
            ::apache::thrift::protocol::TType _etype75;
            xfer += iprot->readListBegin(_etype75, _size72);
            this->_lmControlAreaTriggers.resize(_size72);
            uint32_t _i76;
            for (_i76 = 0; _i76 < _size72; ++_i76)
            {
              xfer += this->_lmControlAreaTriggers[_i76].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmControlAreaTriggers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_lmPrograms.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _etype80;
            xfer += iprot->readListBegin(_etype80, _size77);
            this->_lmPrograms.resize(_size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              xfer += this->_lmPrograms[_i81].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__lmPrograms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoCategory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoClass)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoTypeString)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoDescription)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__disableFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__defOperationalState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlInterval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__minResponseTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__defDailyStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__defDailyStopTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__requireAllTriggersActiveFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__nextCheckTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__newPointDataReceivedFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__updatedFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlAreaStatusPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlAreaState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentPriority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentDailyStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentDailyStopTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmControlAreaTriggers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lmPrograms)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMControlAreaItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMControlAreaItem");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoCategory", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_paoCategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoClass", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_paoClass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_paoName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoTypeString", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_paoTypeString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoDescription", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_paoDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_disableFlag", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->_disableFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_defOperationalState", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_defOperationalState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlInterval", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->_controlInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_minResponseTime", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->_minResponseTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_defDailyStartTime", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->_defDailyStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_defDailyStopTime", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->_defDailyStopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_requireAllTriggersActiveFlag", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->_requireAllTriggersActiveFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_nextCheckTime", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->_nextCheckTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_newPointDataReceivedFlag", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->_newPointDataReceivedFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_updatedFlag", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->_updatedFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlAreaStatusPointId", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->_controlAreaStatusPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlAreaState", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->_controlAreaState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentPriority", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->_currentPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentDailyStartTime", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->_currentDailyStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentDailyStopTime", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->_currentDailyStopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmControlAreaTriggers", ::apache::thrift::protocol::T_LIST, 22);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmControlAreaTriggers.size()));
    std::vector<LMControlAreaTrigger> ::const_iterator _iter82;
    for (_iter82 = this->_lmControlAreaTriggers.begin(); _iter82 != this->_lmControlAreaTriggers.end(); ++_iter82)
    {
      xfer += (*_iter82).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lmPrograms", ::apache::thrift::protocol::T_LIST, 23);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_lmPrograms.size()));
    std::vector< ::Cti::Messaging::Serialization::Thrift::GenericMessage> ::const_iterator _iter83;
    for (_iter83 = this->_lmPrograms.begin(); _iter83 != this->_lmPrograms.end(); ++_iter83)
    {
      xfer += (*_iter83).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMControlAreaItem &a, LMControlAreaItem &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._paoCategory, b._paoCategory);
  swap(a._paoClass, b._paoClass);
  swap(a._paoName, b._paoName);
  swap(a._paoTypeString, b._paoTypeString);
  swap(a._paoDescription, b._paoDescription);
  swap(a._disableFlag, b._disableFlag);
  swap(a._defOperationalState, b._defOperationalState);
  swap(a._controlInterval, b._controlInterval);
  swap(a._minResponseTime, b._minResponseTime);
  swap(a._defDailyStartTime, b._defDailyStartTime);
  swap(a._defDailyStopTime, b._defDailyStopTime);
  swap(a._requireAllTriggersActiveFlag, b._requireAllTriggersActiveFlag);
  swap(a._nextCheckTime, b._nextCheckTime);
  swap(a._newPointDataReceivedFlag, b._newPointDataReceivedFlag);
  swap(a._updatedFlag, b._updatedFlag);
  swap(a._controlAreaStatusPointId, b._controlAreaStatusPointId);
  swap(a._controlAreaState, b._controlAreaState);
  swap(a._currentPriority, b._currentPriority);
  swap(a._currentDailyStartTime, b._currentDailyStartTime);
  swap(a._currentDailyStopTime, b._currentDailyStopTime);
  swap(a._lmControlAreaTriggers, b._lmControlAreaTriggers);
  swap(a._lmPrograms, b._lmPrograms);
}

const char* LMControlAreas::ascii_fingerprint = "00417AEFE888C2198F71AC6A54F07946";
const uint8_t LMControlAreas::binary_fingerprint[16] = {0x00,0x41,0x7A,0xEF,0xE8,0x88,0xC2,0x19,0x8F,0x71,0xAC,0x6A,0x54,0xF0,0x79,0x46};

uint32_t LMControlAreas::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__msgInfoBitMask = false;
  bool isset__controlAreas = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_msgInfoBitMask);
          isset__msgInfoBitMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_controlAreas.clear();
            uint32_t _size84;
            ::apache::thrift::protocol::TType _etype87;
            xfer += iprot->readListBegin(_etype87, _size84);
            this->_controlAreas.resize(_size84);
            uint32_t _i88;
            for (_i88 = 0; _i88 < _size84; ++_i88)
            {
              xfer += this->_controlAreas[_i88].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__controlAreas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__msgInfoBitMask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlAreas)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMControlAreas::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMControlAreas");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_msgInfoBitMask", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_msgInfoBitMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlAreas", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_controlAreas.size()));
    std::vector<LMControlAreaItem> ::const_iterator _iter89;
    for (_iter89 = this->_controlAreas.begin(); _iter89 != this->_controlAreas.end(); ++_iter89)
    {
      xfer += (*_iter89).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMControlAreas &a, LMControlAreas &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._msgInfoBitMask, b._msgInfoBitMask);
  swap(a._controlAreas, b._controlAreas);
}

}}}} // namespace

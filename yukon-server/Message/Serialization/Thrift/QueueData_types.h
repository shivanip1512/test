/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QueueData_TYPES_H
#define QueueData_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class QueueData {
 public:

  static const char* ascii_fingerprint; // = "E1B099B9CBD6C096D77302BA258A2D57";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0xB0,0x99,0xB9,0xCB,0xD6,0xC0,0x96,0xD7,0x73,0x02,0xBA,0x25,0x8A,0x2D,0x57};

  QueueData() : _id(0), _queueCount(0), _rate(0), _requestId(0), _requestIdCount(0), _aTime(0), _userMessageId(0) {
  }

  virtual ~QueueData() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;
  int32_t _queueCount;
  int32_t _rate;
  int32_t _requestId;
  int32_t _requestIdCount;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _aTime;
  int32_t _userMessageId;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__id(const int32_t val) {
    _id = val;
  }

  void __set__queueCount(const int32_t val) {
    _queueCount = val;
  }

  void __set__rate(const int32_t val) {
    _rate = val;
  }

  void __set__requestId(const int32_t val) {
    _requestId = val;
  }

  void __set__requestIdCount(const int32_t val) {
    _requestIdCount = val;
  }

  void __set__aTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _aTime = val;
  }

  void __set__userMessageId(const int32_t val) {
    _userMessageId = val;
  }

  bool operator == (const QueueData & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_queueCount == rhs._queueCount))
      return false;
    if (!(_rate == rhs._rate))
      return false;
    if (!(_requestId == rhs._requestId))
      return false;
    if (!(_requestIdCount == rhs._requestIdCount))
      return false;
    if (!(_aTime == rhs._aTime))
      return false;
    if (!(_userMessageId == rhs._userMessageId))
      return false;
    return true;
  }
  bool operator != (const QueueData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QueueData &a, QueueData &b);

}}}} // namespace

#endif

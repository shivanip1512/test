/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotifCurtailmentEvent_TYPES_H
#define NotifCurtailmentEvent_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class NotifCurtailmentEvent {
 public:

  static const char* ascii_fingerprint; // = "472B626CC76602629B37B874940D20D4";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x2B,0x62,0x6C,0xC7,0x66,0x02,0x62,0x9B,0x37,0xB8,0x74,0x94,0x0D,0x20,0xD4};

  NotifCurtailmentEvent() : _curtailmentEventId(0), _action(0) {
  }

  virtual ~NotifCurtailmentEvent() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _curtailmentEventId;
  int32_t _action;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__curtailmentEventId(const int32_t val) {
    _curtailmentEventId = val;
  }

  void __set__action(const int32_t val) {
    _action = val;
  }

  bool operator == (const NotifCurtailmentEvent & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_curtailmentEventId == rhs._curtailmentEventId))
      return false;
    if (!(_action == rhs._action))
      return false;
    return true;
  }
  bool operator != (const NotifCurtailmentEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotifCurtailmentEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotifCurtailmentEvent &a, NotifCurtailmentEvent &b);

}}}} // namespace

#endif

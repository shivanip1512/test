/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Request_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* Request::ascii_fingerprint = "0B4B4F5AB67BA2F605EA7227A7A42A0F";
const uint8_t Request::binary_fingerprint[16] = {0x0B,0x4B,0x4F,0x5A,0xB6,0x7B,0xA2,0xF6,0x05,0xEA,0x72,0x27,0xA7,0xA4,0x2A,0x0F};

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__deviceId = false;
  bool isset__commandString = false;
  bool isset__routeId = false;
  bool isset__macroOffset = false;
  bool isset__attemptNum = false;
  bool isset__groupMessageId = false;
  bool isset__userMessageId = false;
  bool isset__optionsField = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_deviceId);
          isset__deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_commandString);
          isset__commandString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_routeId);
          isset__routeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_macroOffset);
          isset__macroOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_attemptNum);
          isset__attemptNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_groupMessageId);
          isset__groupMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_userMessageId);
          isset__userMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_optionsField);
          isset__optionsField = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__deviceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__commandString)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__routeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__macroOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__attemptNum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__groupMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__userMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__optionsField)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Request");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_deviceId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_commandString", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_commandString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_routeId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_routeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_macroOffset", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_macroOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_attemptNum", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_attemptNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_groupMessageId", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_groupMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_userMessageId", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->_userMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_optionsField", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->_optionsField);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._deviceId, b._deviceId);
  swap(a._commandString, b._commandString);
  swap(a._routeId, b._routeId);
  swap(a._macroOffset, b._macroOffset);
  swap(a._attemptNum, b._attemptNum);
  swap(a._groupMessageId, b._groupMessageId);
  swap(a._userMessageId, b._userMessageId);
  swap(a._optionsField, b._optionsField);
}

}}}} // namespace

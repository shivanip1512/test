/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MCSchedule_TYPES_H
#define MCSchedule_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class MCSchedule {
 public:

  static const char* ascii_fingerprint; // = "6184BE721B451C681CCF157DE2B92712";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x84,0xBE,0x72,0x1B,0x45,0x1C,0x68,0x1C,0xCF,0x15,0x7D,0xE2,0xB9,0x27,0x12};

  MCSchedule() : _scheduleId(0), _scheduleName(), _categoryName(), _scheduleType(), _holidayScheduleId(0), _commandFile(), _currentState(), _startPolicy(), _stopPolicy(), _lastRunTime(0), _lastRunStatus(), _startDay(0), _startMonth(0), _startYear(0), _startTime(), _stopTime(), _validWeekDays(), _duration(0), _manualStartTime(0), _manualStopTime(0), _targetPaoId(0), _startCommand(), _stopCommand(), _repeatInterval(0), _currentStartTime(0), _currentStopTime(0), _templateType(0) {
  }

  virtual ~MCSchedule() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _scheduleId;
  std::string _scheduleName;
  std::string _categoryName;
  std::string _scheduleType;
  int32_t _holidayScheduleId;
  std::string _commandFile;
  std::string _currentState;
  std::string _startPolicy;
  std::string _stopPolicy;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _lastRunTime;
  std::string _lastRunStatus;
  int32_t _startDay;
  int32_t _startMonth;
  int32_t _startYear;
  std::string _startTime;
  std::string _stopTime;
  std::string _validWeekDays;
  int32_t _duration;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _manualStartTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _manualStopTime;
  int32_t _targetPaoId;
  std::string _startCommand;
  std::string _stopCommand;
  int32_t _repeatInterval;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _currentStartTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _currentStopTime;
  int32_t _templateType;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__scheduleId(const int32_t val) {
    _scheduleId = val;
  }

  void __set__scheduleName(const std::string& val) {
    _scheduleName = val;
  }

  void __set__categoryName(const std::string& val) {
    _categoryName = val;
  }

  void __set__scheduleType(const std::string& val) {
    _scheduleType = val;
  }

  void __set__holidayScheduleId(const int32_t val) {
    _holidayScheduleId = val;
  }

  void __set__commandFile(const std::string& val) {
    _commandFile = val;
  }

  void __set__currentState(const std::string& val) {
    _currentState = val;
  }

  void __set__startPolicy(const std::string& val) {
    _startPolicy = val;
  }

  void __set__stopPolicy(const std::string& val) {
    _stopPolicy = val;
  }

  void __set__lastRunTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _lastRunTime = val;
  }

  void __set__lastRunStatus(const std::string& val) {
    _lastRunStatus = val;
  }

  void __set__startDay(const int32_t val) {
    _startDay = val;
  }

  void __set__startMonth(const int32_t val) {
    _startMonth = val;
  }

  void __set__startYear(const int32_t val) {
    _startYear = val;
  }

  void __set__startTime(const std::string& val) {
    _startTime = val;
  }

  void __set__stopTime(const std::string& val) {
    _stopTime = val;
  }

  void __set__validWeekDays(const std::string& val) {
    _validWeekDays = val;
  }

  void __set__duration(const int32_t val) {
    _duration = val;
  }

  void __set__manualStartTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _manualStartTime = val;
  }

  void __set__manualStopTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _manualStopTime = val;
  }

  void __set__targetPaoId(const int32_t val) {
    _targetPaoId = val;
  }

  void __set__startCommand(const std::string& val) {
    _startCommand = val;
  }

  void __set__stopCommand(const std::string& val) {
    _stopCommand = val;
  }

  void __set__repeatInterval(const int32_t val) {
    _repeatInterval = val;
  }

  void __set__currentStartTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _currentStartTime = val;
  }

  void __set__currentStopTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _currentStopTime = val;
  }

  void __set__templateType(const int32_t val) {
    _templateType = val;
  }

  bool operator == (const MCSchedule & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_scheduleId == rhs._scheduleId))
      return false;
    if (!(_scheduleName == rhs._scheduleName))
      return false;
    if (!(_categoryName == rhs._categoryName))
      return false;
    if (!(_scheduleType == rhs._scheduleType))
      return false;
    if (!(_holidayScheduleId == rhs._holidayScheduleId))
      return false;
    if (!(_commandFile == rhs._commandFile))
      return false;
    if (!(_currentState == rhs._currentState))
      return false;
    if (!(_startPolicy == rhs._startPolicy))
      return false;
    if (!(_stopPolicy == rhs._stopPolicy))
      return false;
    if (!(_lastRunTime == rhs._lastRunTime))
      return false;
    if (!(_lastRunStatus == rhs._lastRunStatus))
      return false;
    if (!(_startDay == rhs._startDay))
      return false;
    if (!(_startMonth == rhs._startMonth))
      return false;
    if (!(_startYear == rhs._startYear))
      return false;
    if (!(_startTime == rhs._startTime))
      return false;
    if (!(_stopTime == rhs._stopTime))
      return false;
    if (!(_validWeekDays == rhs._validWeekDays))
      return false;
    if (!(_duration == rhs._duration))
      return false;
    if (!(_manualStartTime == rhs._manualStartTime))
      return false;
    if (!(_manualStopTime == rhs._manualStopTime))
      return false;
    if (!(_targetPaoId == rhs._targetPaoId))
      return false;
    if (!(_startCommand == rhs._startCommand))
      return false;
    if (!(_stopCommand == rhs._stopCommand))
      return false;
    if (!(_repeatInterval == rhs._repeatInterval))
      return false;
    if (!(_currentStartTime == rhs._currentStartTime))
      return false;
    if (!(_currentStopTime == rhs._currentStopTime))
      return false;
    if (!(_templateType == rhs._templateType))
      return false;
    return true;
  }
  bool operator != (const MCSchedule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCSchedule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MCSchedule &a, MCSchedule &b);

}}}} // namespace

#endif

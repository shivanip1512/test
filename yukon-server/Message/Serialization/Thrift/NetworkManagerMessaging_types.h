/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NetworkManagerMessaging_TYPES_H
#define NetworkManagerMessaging_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

struct NetworkManagerMessageLifetime {
  enum type {
    SESSION = 0,
    UNTIL_CANCEL = 1
  };
};

extern const std::map<int, const char*> _NetworkManagerMessageLifetime_VALUES_TO_NAMES;

struct NetworkManagerCancelType {
  enum type {
    MESSAGE_IDS = 0,
    GROUP_IDS = 1
  };
};

extern const std::map<int, const char*> _NetworkManagerCancelType_VALUES_TO_NAMES;

struct NetworkManagerMessageCancelStatus {
  enum type {
    SUCCESS = 0,
    NOT_FOUND = 1
  };
};

extern const std::map<int, const char*> _NetworkManagerMessageCancelStatus_VALUES_TO_NAMES;

typedef std::map<int64_t, NetworkManagerMessageCancelStatus::type>  MessageStatusPerId;

typedef struct _NetworkManagerRequestHeader__isset {
  _NetworkManagerRequestHeader__isset() : groupId(false), expiration(false), lifetime(true) {}
  bool groupId;
  bool expiration;
  bool lifetime;
} _NetworkManagerRequestHeader__isset;

class NetworkManagerRequestHeader {
 public:

  static const char* ascii_fingerprint; // = "7D01F493AD020ADB321B3BE350741687";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x01,0xF4,0x93,0xAD,0x02,0x0A,0xDB,0x32,0x1B,0x3B,0xE3,0x50,0x74,0x16,0x87};

  NetworkManagerRequestHeader() : clientGuid(), sessionId(0), messageId(0), groupId(0), priority(0), expiration(0), lifetime((NetworkManagerMessageLifetime::type)0) {
    lifetime = (NetworkManagerMessageLifetime::type)0;

  }

  virtual ~NetworkManagerRequestHeader() throw() {}

  std::string clientGuid;
  int64_t sessionId;
  int64_t messageId;
  int64_t groupId;
  int8_t priority;
  int64_t expiration;
  NetworkManagerMessageLifetime::type lifetime;

  _NetworkManagerRequestHeader__isset __isset;

  void __set_clientGuid(const std::string& val) {
    clientGuid = val;
  }

  void __set_sessionId(const int64_t val) {
    sessionId = val;
  }

  void __set_messageId(const int64_t val) {
    messageId = val;
  }

  void __set_groupId(const int64_t val) {
    groupId = val;
    __isset.groupId = true;
  }

  void __set_priority(const int8_t val) {
    priority = val;
  }

  void __set_expiration(const int64_t val) {
    expiration = val;
    __isset.expiration = true;
  }

  void __set_lifetime(const NetworkManagerMessageLifetime::type val) {
    lifetime = val;
    __isset.lifetime = true;
  }

  bool operator == (const NetworkManagerRequestHeader & rhs) const
  {
    if (!(clientGuid == rhs.clientGuid))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (__isset.groupId != rhs.__isset.groupId)
      return false;
    else if (__isset.groupId && !(groupId == rhs.groupId))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (__isset.expiration != rhs.__isset.expiration)
      return false;
    else if (__isset.expiration && !(expiration == rhs.expiration))
      return false;
    if (__isset.lifetime != rhs.__isset.lifetime)
      return false;
    else if (__isset.lifetime && !(lifetime == rhs.lifetime))
      return false;
    return true;
  }
  bool operator != (const NetworkManagerRequestHeader &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkManagerRequestHeader & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NetworkManagerRequestHeader &a, NetworkManagerRequestHeader &b);


class NetworkManagerRequestAck {
 public:

  static const char* ascii_fingerprint; // = "E7650E34FEACBE8CB9699EFF5043476B";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0x65,0x0E,0x34,0xFE,0xAC,0xBE,0x8C,0xB9,0x69,0x9E,0xFF,0x50,0x43,0x47,0x6B};

  NetworkManagerRequestAck() {
  }

  virtual ~NetworkManagerRequestAck() throw() {}

  NetworkManagerRequestHeader header;

  void __set_header(const NetworkManagerRequestHeader& val) {
    header = val;
  }

  bool operator == (const NetworkManagerRequestAck & rhs) const
  {
    if (!(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const NetworkManagerRequestAck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkManagerRequestAck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NetworkManagerRequestAck &a, NetworkManagerRequestAck &b);


class NetworkManagerCancelRequest {
 public:

  static const char* ascii_fingerprint; // = "E426BD3E6EEB8E3F4AB4F041FAE9FDF9";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x26,0xBD,0x3E,0x6E,0xEB,0x8E,0x3F,0x4A,0xB4,0xF0,0x41,0xFA,0xE9,0xFD,0xF9};

  NetworkManagerCancelRequest() : clientGuid(), sessionId(0), type((NetworkManagerCancelType::type)0) {
  }

  virtual ~NetworkManagerCancelRequest() throw() {}

  std::string clientGuid;
  int64_t sessionId;
  NetworkManagerCancelType::type type;
  std::set<int64_t>  ids;

  void __set_clientGuid(const std::string& val) {
    clientGuid = val;
  }

  void __set_sessionId(const int64_t val) {
    sessionId = val;
  }

  void __set_type(const NetworkManagerCancelType::type val) {
    type = val;
  }

  void __set_ids(const std::set<int64_t> & val) {
    ids = val;
  }

  bool operator == (const NetworkManagerCancelRequest & rhs) const
  {
    if (!(clientGuid == rhs.clientGuid))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const NetworkManagerCancelRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkManagerCancelRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NetworkManagerCancelRequest &a, NetworkManagerCancelRequest &b);


class NetworkManagerCancelRequestAck {
 public:

  static const char* ascii_fingerprint; // = "41FA19EC2D4CBB39D51F9A779D4AE59D";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0xFA,0x19,0xEC,0x2D,0x4C,0xBB,0x39,0xD5,0x1F,0x9A,0x77,0x9D,0x4A,0xE5,0x9D};

  NetworkManagerCancelRequestAck() {
  }

  virtual ~NetworkManagerCancelRequestAck() throw() {}

  NetworkManagerCancelRequest request;

  void __set_request(const NetworkManagerCancelRequest& val) {
    request = val;
  }

  bool operator == (const NetworkManagerCancelRequestAck & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const NetworkManagerCancelRequestAck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkManagerCancelRequestAck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NetworkManagerCancelRequestAck &a, NetworkManagerCancelRequestAck &b);


class NetworkManagerCancelResponse {
 public:

  static const char* ascii_fingerprint; // = "807231FE35359F38C8F9EEC3EBAEF0F6";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x72,0x31,0xFE,0x35,0x35,0x9F,0x38,0xC8,0xF9,0xEE,0xC3,0xEB,0xAE,0xF0,0xF6};

  NetworkManagerCancelResponse() : clientGuid(), sessionId(0) {
  }

  virtual ~NetworkManagerCancelResponse() throw() {}

  std::string clientGuid;
  int64_t sessionId;
  MessageStatusPerId messageIds;

  void __set_clientGuid(const std::string& val) {
    clientGuid = val;
  }

  void __set_sessionId(const int64_t val) {
    sessionId = val;
  }

  void __set_messageIds(const MessageStatusPerId& val) {
    messageIds = val;
  }

  bool operator == (const NetworkManagerCancelResponse & rhs) const
  {
    if (!(clientGuid == rhs.clientGuid))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(messageIds == rhs.messageIds))
      return false;
    return true;
  }
  bool operator != (const NetworkManagerCancelResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkManagerCancelResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NetworkManagerCancelResponse &a, NetworkManagerCancelResponse &b);

}}}} // namespace

#endif

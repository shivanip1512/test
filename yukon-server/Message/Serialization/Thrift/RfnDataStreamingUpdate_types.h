/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RfnDataStreamingUpdate_TYPES_H
#define RfnDataStreamingUpdate_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class RfnDataStreamingUpdate {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  RfnDataStreamingUpdate() : paoId(0), json() {
  }

  virtual ~RfnDataStreamingUpdate() throw() {}

  int32_t paoId;
  std::string json;

  void __set_paoId(const int32_t val) {
    paoId = val;
  }

  void __set_json(const std::string& val) {
    json = val;
  }

  bool operator == (const RfnDataStreamingUpdate & rhs) const
  {
    if (!(paoId == rhs.paoId))
      return false;
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const RfnDataStreamingUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnDataStreamingUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnDataStreamingUpdate &a, RfnDataStreamingUpdate &b);


class RfnDataStreamingUpdateReply {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  RfnDataStreamingUpdateReply() : success(0) {
  }

  virtual ~RfnDataStreamingUpdateReply() throw() {}

  bool success;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RfnDataStreamingUpdateReply & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RfnDataStreamingUpdateReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnDataStreamingUpdateReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnDataStreamingUpdateReply &a, RfnDataStreamingUpdateReply &b);

}}}} // namespace

#endif

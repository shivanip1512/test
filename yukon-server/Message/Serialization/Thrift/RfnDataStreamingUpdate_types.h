/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RfnDataStreamingUpdate_TYPES_H
#define RfnDataStreamingUpdate_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class RfnDataStreamingUpdate;

class RfnDataStreamingUpdateReply;


class RfnDataStreamingUpdate : public virtual ::apache::thrift::TBase {
 public:

  RfnDataStreamingUpdate(const RfnDataStreamingUpdate&);
  RfnDataStreamingUpdate& operator=(const RfnDataStreamingUpdate&);
  RfnDataStreamingUpdate() : paoId(0), json() {
  }

  virtual ~RfnDataStreamingUpdate() noexcept;
  int32_t paoId;
  std::string json;

  void __set_paoId(const int32_t val);

  void __set_json(const std::string& val);

  bool operator == (const RfnDataStreamingUpdate & rhs) const
  {
    if (!(paoId == rhs.paoId))
      return false;
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const RfnDataStreamingUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnDataStreamingUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RfnDataStreamingUpdate &a, RfnDataStreamingUpdate &b);

std::ostream& operator<<(std::ostream& out, const RfnDataStreamingUpdate& obj);


class RfnDataStreamingUpdateReply : public virtual ::apache::thrift::TBase {
 public:

  RfnDataStreamingUpdateReply(const RfnDataStreamingUpdateReply&);
  RfnDataStreamingUpdateReply& operator=(const RfnDataStreamingUpdateReply&);
  RfnDataStreamingUpdateReply() : success(0) {
  }

  virtual ~RfnDataStreamingUpdateReply() noexcept;
  bool success;

  void __set_success(const bool val);

  bool operator == (const RfnDataStreamingUpdateReply & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RfnDataStreamingUpdateReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnDataStreamingUpdateReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RfnDataStreamingUpdateReply &a, RfnDataStreamingUpdateReply &b);

std::ostream& operator<<(std::ostream& out, const RfnDataStreamingUpdateReply& obj);

}}}} // namespace

#endif

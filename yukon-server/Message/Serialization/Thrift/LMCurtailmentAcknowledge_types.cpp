/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMCurtailmentAcknowledge_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


LMCurtailmentAcknowledge::~LMCurtailmentAcknowledge() throw() {
}


void LMCurtailmentAcknowledge::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::LMMessage& val) {
  this->_baseMessage = val;
}

void LMCurtailmentAcknowledge::__set__paoId(const int32_t val) {
  this->_paoId = val;
}

void LMCurtailmentAcknowledge::__set__curtailReferenceId(const int32_t val) {
  this->_curtailReferenceId = val;
}

void LMCurtailmentAcknowledge::__set__acknowledgeStatus(const std::string& val) {
  this->_acknowledgeStatus = val;
}

void LMCurtailmentAcknowledge::__set__ipAddressOfAckUser(const std::string& val) {
  this->_ipAddressOfAckUser = val;
}

void LMCurtailmentAcknowledge::__set__userIdName(const std::string& val) {
  this->_userIdName = val;
}

void LMCurtailmentAcknowledge::__set__nameOfAckPerson(const std::string& val) {
  this->_nameOfAckPerson = val;
}

void LMCurtailmentAcknowledge::__set__curtailmentNotes(const std::string& val) {
  this->_curtailmentNotes = val;
}
std::ostream& operator<<(std::ostream& out, const LMCurtailmentAcknowledge& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LMCurtailmentAcknowledge::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__paoId = false;
  bool isset__curtailReferenceId = false;
  bool isset__acknowledgeStatus = false;
  bool isset__ipAddressOfAckUser = false;
  bool isset__userIdName = false;
  bool isset__nameOfAckPerson = false;
  bool isset__curtailmentNotes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_curtailReferenceId);
          isset__curtailReferenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_acknowledgeStatus);
          isset__acknowledgeStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_ipAddressOfAckUser);
          isset__ipAddressOfAckUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_userIdName);
          isset__userIdName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_nameOfAckPerson);
          isset__nameOfAckPerson = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_curtailmentNotes);
          isset__curtailmentNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailReferenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__acknowledgeStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ipAddressOfAckUser)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__userIdName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__nameOfAckPerson)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailmentNotes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMCurtailmentAcknowledge::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LMCurtailmentAcknowledge");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailReferenceId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_curtailReferenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_acknowledgeStatus", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_acknowledgeStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ipAddressOfAckUser", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_ipAddressOfAckUser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_userIdName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_userIdName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_nameOfAckPerson", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_nameOfAckPerson);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailmentNotes", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_curtailmentNotes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMCurtailmentAcknowledge &a, LMCurtailmentAcknowledge &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._paoId, b._paoId);
  swap(a._curtailReferenceId, b._curtailReferenceId);
  swap(a._acknowledgeStatus, b._acknowledgeStatus);
  swap(a._ipAddressOfAckUser, b._ipAddressOfAckUser);
  swap(a._userIdName, b._userIdName);
  swap(a._nameOfAckPerson, b._nameOfAckPerson);
  swap(a._curtailmentNotes, b._curtailmentNotes);
}

LMCurtailmentAcknowledge::LMCurtailmentAcknowledge(const LMCurtailmentAcknowledge& other0) {
  _baseMessage = other0._baseMessage;
  _paoId = other0._paoId;
  _curtailReferenceId = other0._curtailReferenceId;
  _acknowledgeStatus = other0._acknowledgeStatus;
  _ipAddressOfAckUser = other0._ipAddressOfAckUser;
  _userIdName = other0._userIdName;
  _nameOfAckPerson = other0._nameOfAckPerson;
  _curtailmentNotes = other0._curtailmentNotes;
}
LMCurtailmentAcknowledge& LMCurtailmentAcknowledge::operator=(const LMCurtailmentAcknowledge& other1) {
  _baseMessage = other1._baseMessage;
  _paoId = other1._paoId;
  _curtailReferenceId = other1._curtailReferenceId;
  _acknowledgeStatus = other1._acknowledgeStatus;
  _ipAddressOfAckUser = other1._ipAddressOfAckUser;
  _userIdName = other1._userIdName;
  _nameOfAckPerson = other1._nameOfAckPerson;
  _curtailmentNotes = other1._curtailmentNotes;
  return *this;
}
void LMCurtailmentAcknowledge::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LMCurtailmentAcknowledge(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_paoId=" << to_string(_paoId);
  out << ", " << "_curtailReferenceId=" << to_string(_curtailReferenceId);
  out << ", " << "_acknowledgeStatus=" << to_string(_acknowledgeStatus);
  out << ", " << "_ipAddressOfAckUser=" << to_string(_ipAddressOfAckUser);
  out << ", " << "_userIdName=" << to_string(_userIdName);
  out << ", " << "_nameOfAckPerson=" << to_string(_nameOfAckPerson);
  out << ", " << "_curtailmentNotes=" << to_string(_curtailmentNotes);
  out << ")";
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMCurtailmentAcknowledge_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* LMCurtailmentAcknowledge::ascii_fingerprint = "F5C241C1373D02D6B7BF93818BB507C9";
const uint8_t LMCurtailmentAcknowledge::binary_fingerprint[16] = {0xF5,0xC2,0x41,0xC1,0x37,0x3D,0x02,0xD6,0xB7,0xBF,0x93,0x81,0x8B,0xB5,0x07,0xC9};

uint32_t LMCurtailmentAcknowledge::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__paoId = false;
  bool isset__curtailReferenceId = false;
  bool isset__acknowledgeStatus = false;
  bool isset__ipAddressOfAckUser = false;
  bool isset__userIdName = false;
  bool isset__nameOfAckPerson = false;
  bool isset__curtailmentNotes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_curtailReferenceId);
          isset__curtailReferenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_acknowledgeStatus);
          isset__acknowledgeStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_ipAddressOfAckUser);
          isset__ipAddressOfAckUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_userIdName);
          isset__userIdName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_nameOfAckPerson);
          isset__nameOfAckPerson = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_curtailmentNotes);
          isset__curtailmentNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailReferenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__acknowledgeStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ipAddressOfAckUser)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__userIdName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__nameOfAckPerson)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__curtailmentNotes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMCurtailmentAcknowledge::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMCurtailmentAcknowledge");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailReferenceId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_curtailReferenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_acknowledgeStatus", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_acknowledgeStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ipAddressOfAckUser", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_ipAddressOfAckUser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_userIdName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_userIdName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_nameOfAckPerson", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_nameOfAckPerson);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_curtailmentNotes", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_curtailmentNotes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMCurtailmentAcknowledge &a, LMCurtailmentAcknowledge &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._paoId, b._paoId);
  swap(a._curtailReferenceId, b._curtailReferenceId);
  swap(a._acknowledgeStatus, b._acknowledgeStatus);
  swap(a._ipAddressOfAckUser, b._ipAddressOfAckUser);
  swap(a._userIdName, b._userIdName);
  swap(a._nameOfAckPerson, b._nameOfAckPerson);
  swap(a._curtailmentNotes, b._curtailmentNotes);
}

}}}} // namespace

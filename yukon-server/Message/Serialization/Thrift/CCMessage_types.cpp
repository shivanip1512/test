/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CCMessage_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* CCMessage::ascii_fingerprint = "B38875B68F29A43A78DE7BDBC6089C1E";
const uint8_t CCMessage::binary_fingerprint[16] = {0xB3,0x88,0x75,0xB6,0x8F,0x29,0xA4,0x3A,0x78,0xDE,0x7B,0xDB,0xC6,0x08,0x9C,0x1E};

uint32_t CCMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCMessage");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCMessage &a, CCMessage &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
}

const char* CCPao::ascii_fingerprint = "932CF9B80FDEF764D51D16FBB66B6E79";
const uint8_t CCPao::binary_fingerprint[16] = {0x93,0x2C,0xF9,0xB8,0x0F,0xDE,0xF7,0x64,0xD5,0x1D,0x16,0xFB,0xB6,0x6B,0x6E,0x79};

uint32_t CCPao::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__paoCategory = false;
  bool isset__paoClass = false;
  bool isset__paoName = false;
  bool isset__paoType = false;
  bool isset__paoDescription = false;
  bool isset__disableFlag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoCategory);
          isset__paoCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoClass);
          isset__paoClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoName);
          isset__paoName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoType);
          isset__paoType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_paoDescription);
          isset__paoDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_disableFlag);
          isset__disableFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoCategory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoClass)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoDescription)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__disableFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCPao::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCPao");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoCategory", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_paoCategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoClass", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_paoClass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_paoName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoType", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->_paoType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoDescription", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->_paoDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_disableFlag", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->_disableFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCPao &a, CCPao &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._paoCategory, b._paoCategory);
  swap(a._paoClass, b._paoClass);
  swap(a._paoName, b._paoName);
  swap(a._paoType, b._paoType);
  swap(a._paoDescription, b._paoDescription);
  swap(a._disableFlag, b._disableFlag);
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CCCapBankStates_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* CCState::ascii_fingerprint = "28C2ECC89260BADB9C70330FBF47BFA8";
const uint8_t CCState::binary_fingerprint[16] = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

uint32_t CCState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__text = false;
  bool isset__foregroundColor = false;
  bool isset__backgroundColor = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_text);
          isset__text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_foregroundColor);
          isset__foregroundColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_backgroundColor);
          isset__backgroundColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__text)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__foregroundColor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__backgroundColor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCState");

  xfer += oprot->writeFieldBegin("_text", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_foregroundColor", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_foregroundColor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_backgroundColor", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_backgroundColor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCState &a, CCState &b) {
  using ::std::swap;
  swap(a._text, b._text);
  swap(a._foregroundColor, b._foregroundColor);
  swap(a._backgroundColor, b._backgroundColor);
}

const char* CCCapBankStates::ascii_fingerprint = "27257ADE6DC4E947C3B7560F4E56C8B9";
const uint8_t CCCapBankStates::binary_fingerprint[16] = {0x27,0x25,0x7A,0xDE,0x6D,0xC4,0xE9,0x47,0xC3,0xB7,0x56,0x0F,0x4E,0x56,0xC8,0xB9};

uint32_t CCCapBankStates::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__ccCapBankStates = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_ccCapBankStates.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_ccCapBankStates.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->_ccCapBankStates[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__ccCapBankStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ccCapBankStates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCCapBankStates::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCCapBankStates");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ccCapBankStates", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_ccCapBankStates.size()));
    std::vector<CCState> ::const_iterator _iter5;
    for (_iter5 = this->_ccCapBankStates.begin(); _iter5 != this->_ccCapBankStates.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCCapBankStates &a, CCCapBankStates &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._ccCapBankStates, b._ccCapBankStates);
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RfnE2eData_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kRfnE2eProtocolValues[] = {
  RfnE2eProtocol::APPLICATION,
  RfnE2eProtocol::NETWORK,
  RfnE2eProtocol::LINK
};
const char* _kRfnE2eProtocolNames[] = {
  "APPLICATION",
  "NETWORK",
  "LINK"
};
const std::map<int, const char*> _RfnE2eProtocol_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRfnE2eProtocolValues, _kRfnE2eProtocolNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RfnE2eProtocol::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnE2eProtocol_VALUES_TO_NAMES.find(val);
  if (it != _RfnE2eProtocol_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kRfnE2eMessagePriorityValues[] = {
  RfnE2eMessagePriority::APP_LO,
  RfnE2eMessagePriority::APP_HI
};
const char* _kRfnE2eMessagePriorityNames[] = {
  "APP_LO",
  "APP_HI"
};
const std::map<int, const char*> _RfnE2eMessagePriority_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRfnE2eMessagePriorityValues, _kRfnE2eMessagePriorityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RfnE2eMessagePriority::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnE2eMessagePriority_VALUES_TO_NAMES.find(val);
  if (it != _RfnE2eMessagePriority_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kRfnE2eDataReplyTypeValues[] = {
  RfnE2eDataReplyType::OK,
  RfnE2eDataReplyType::DESTINATION_DEVICE_ADDRESS_UNKNOWN,
  RfnE2eDataReplyType::DESTINATION_NETWORK_UNAVAILABLE,
  RfnE2eDataReplyType::PMTU_LENGTH_EXCEEDED,
  RfnE2eDataReplyType::E2E_PROTOCOL_TYPE_NOT_SUPPORTED,
  RfnE2eDataReplyType::NETWORK_SERVER_IDENTIFIER_INVALID,
  RfnE2eDataReplyType::APPLICATION_SERVICE_IDENTIFIER_INVALID,
  RfnE2eDataReplyType::NETWORK_LOAD_CONTROL,
  RfnE2eDataReplyType::NETWORK_SERVICE_FAILURE,
  RfnE2eDataReplyType::REQUEST_CANCELED,
  RfnE2eDataReplyType::REQUEST_EXPIRED
};
const char* _kRfnE2eDataReplyTypeNames[] = {
  "OK",
  "DESTINATION_DEVICE_ADDRESS_UNKNOWN",
  "DESTINATION_NETWORK_UNAVAILABLE",
  "PMTU_LENGTH_EXCEEDED",
  "E2E_PROTOCOL_TYPE_NOT_SUPPORTED",
  "NETWORK_SERVER_IDENTIFIER_INVALID",
  "APPLICATION_SERVICE_IDENTIFIER_INVALID",
  "NETWORK_LOAD_CONTROL",
  "NETWORK_SERVICE_FAILURE",
  "REQUEST_CANCELED",
  "REQUEST_EXPIRED"
};
const std::map<int, const char*> _RfnE2eDataReplyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kRfnE2eDataReplyTypeValues, _kRfnE2eDataReplyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RfnE2eDataReplyType::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnE2eDataReplyType_VALUES_TO_NAMES.find(val);
  if (it != _RfnE2eDataReplyType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


RfnIdentifier::~RfnIdentifier() throw() {
}


void RfnIdentifier::__set_sensorManufacturer(const std::string& val) {
  this->sensorManufacturer = val;
}

void RfnIdentifier::__set_sensorModel(const std::string& val) {
  this->sensorModel = val;
}

void RfnIdentifier::__set_sensorSerialNumber(const std::string& val) {
  this->sensorSerialNumber = val;
}
std::ostream& operator<<(std::ostream& out, const RfnIdentifier& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnIdentifier::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sensorManufacturer = false;
  bool isset_sensorModel = false;
  bool isset_sensorSerialNumber = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorManufacturer);
          isset_sensorManufacturer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorModel);
          isset_sensorModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorSerialNumber);
          isset_sensorSerialNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sensorManufacturer)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sensorModel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sensorSerialNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnIdentifier::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnIdentifier");

  xfer += oprot->writeFieldBegin("sensorManufacturer", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sensorManufacturer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorModel", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sensorModel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorSerialNumber", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->sensorSerialNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnIdentifier &a, RfnIdentifier &b) {
  using ::std::swap;
  swap(a.sensorManufacturer, b.sensorManufacturer);
  swap(a.sensorModel, b.sensorModel);
  swap(a.sensorSerialNumber, b.sensorSerialNumber);
}

RfnIdentifier::RfnIdentifier(const RfnIdentifier& other0) {
  sensorManufacturer = other0.sensorManufacturer;
  sensorModel = other0.sensorModel;
  sensorSerialNumber = other0.sensorSerialNumber;
}
RfnIdentifier& RfnIdentifier::operator=(const RfnIdentifier& other1) {
  sensorManufacturer = other1.sensorManufacturer;
  sensorModel = other1.sensorModel;
  sensorSerialNumber = other1.sensorSerialNumber;
  return *this;
}
void RfnIdentifier::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnIdentifier(";
  out << "sensorManufacturer=" << to_string(sensorManufacturer);
  out << ", " << "sensorModel=" << to_string(sensorModel);
  out << ", " << "sensorSerialNumber=" << to_string(sensorSerialNumber);
  out << ")";
}


RfnE2eDataRequest::~RfnE2eDataRequest() throw() {
}


void RfnE2eDataRequest::__set_e2eProtocol(const RfnE2eProtocol::type val) {
  this->e2eProtocol = val;
}

void RfnE2eDataRequest::__set_applicationServiceId(const int8_t val) {
  this->applicationServiceId = val;
}

void RfnE2eDataRequest::__set_rfnIdentifier(const RfnIdentifier& val) {
  this->rfnIdentifier = val;
}

void RfnE2eDataRequest::__set_priority(const RfnE2eMessagePriority::type val) {
  this->priority = val;
}

void RfnE2eDataRequest::__set_security(const std::string& val) {
  this->security = val;
__isset.security = true;
}

void RfnE2eDataRequest::__set_payload(const std::string& val) {
  this->payload = val;
}

void RfnE2eDataRequest::__set_header(const  ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader& val) {
  this->header = val;
__isset.header = true;
}
std::ostream& operator<<(std::ostream& out, const RfnE2eDataRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnE2eDataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_e2eProtocol = false;
  bool isset_applicationServiceId = false;
  bool isset_rfnIdentifier = false;
  bool isset_priority = false;
  bool isset_payload = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->e2eProtocol = (RfnE2eProtocol::type)ecast2;
          isset_e2eProtocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->applicationServiceId);
          isset_applicationServiceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->priority = (RfnE2eMessagePriority::type)ecast3;
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->security);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          isset_payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_e2eProtocol)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_applicationServiceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnE2eDataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnE2eDataRequest");

  xfer += oprot->writeFieldBegin("e2eProtocol", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->e2eProtocol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationServiceId", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->applicationServiceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->priority);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->security);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->payload);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnE2eDataRequest &a, RfnE2eDataRequest &b) {
  using ::std::swap;
  swap(a.e2eProtocol, b.e2eProtocol);
  swap(a.applicationServiceId, b.applicationServiceId);
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.priority, b.priority);
  swap(a.security, b.security);
  swap(a.payload, b.payload);
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

RfnE2eDataRequest::RfnE2eDataRequest(const RfnE2eDataRequest& other4) {
  e2eProtocol = other4.e2eProtocol;
  applicationServiceId = other4.applicationServiceId;
  rfnIdentifier = other4.rfnIdentifier;
  priority = other4.priority;
  security = other4.security;
  payload = other4.payload;
  header = other4.header;
  __isset = other4.__isset;
}
RfnE2eDataRequest& RfnE2eDataRequest::operator=(const RfnE2eDataRequest& other5) {
  e2eProtocol = other5.e2eProtocol;
  applicationServiceId = other5.applicationServiceId;
  rfnIdentifier = other5.rfnIdentifier;
  priority = other5.priority;
  security = other5.security;
  payload = other5.payload;
  header = other5.header;
  __isset = other5.__isset;
  return *this;
}
void RfnE2eDataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnE2eDataRequest(";
  out << "e2eProtocol=" << to_string(e2eProtocol);
  out << ", " << "applicationServiceId=" << to_string(applicationServiceId);
  out << ", " << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ", " << "priority=" << to_string(priority);
  out << ", " << "security="; (__isset.security ? (out << to_string(security)) : (out << "<null>"));
  out << ", " << "payload=" << to_string(payload);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ")";
}


RfnE2eDataIndication::~RfnE2eDataIndication() throw() {
}


void RfnE2eDataIndication::__set_e2eProtocol(const RfnE2eProtocol::type val) {
  this->e2eProtocol = val;
}

void RfnE2eDataIndication::__set_applicationServiceId(const int8_t val) {
  this->applicationServiceId = val;
}

void RfnE2eDataIndication::__set_rfnIdentifier(const RfnIdentifier& val) {
  this->rfnIdentifier = val;
}

void RfnE2eDataIndication::__set_priority(const RfnE2eMessagePriority::type val) {
  this->priority = val;
}

void RfnE2eDataIndication::__set_security(const std::string& val) {
  this->security = val;
__isset.security = true;
}

void RfnE2eDataIndication::__set_payload(const std::string& val) {
  this->payload = val;
}
std::ostream& operator<<(std::ostream& out, const RfnE2eDataIndication& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnE2eDataIndication::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_e2eProtocol = false;
  bool isset_applicationServiceId = false;
  bool isset_rfnIdentifier = false;
  bool isset_priority = false;
  bool isset_payload = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->e2eProtocol = (RfnE2eProtocol::type)ecast6;
          isset_e2eProtocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->applicationServiceId);
          isset_applicationServiceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->priority = (RfnE2eMessagePriority::type)ecast7;
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->security);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          isset_payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_e2eProtocol)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_applicationServiceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnE2eDataIndication::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnE2eDataIndication");

  xfer += oprot->writeFieldBegin("e2eProtocol", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->e2eProtocol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationServiceId", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->applicationServiceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->priority);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->security);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->payload);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnE2eDataIndication &a, RfnE2eDataIndication &b) {
  using ::std::swap;
  swap(a.e2eProtocol, b.e2eProtocol);
  swap(a.applicationServiceId, b.applicationServiceId);
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.priority, b.priority);
  swap(a.security, b.security);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

RfnE2eDataIndication::RfnE2eDataIndication(const RfnE2eDataIndication& other8) {
  e2eProtocol = other8.e2eProtocol;
  applicationServiceId = other8.applicationServiceId;
  rfnIdentifier = other8.rfnIdentifier;
  priority = other8.priority;
  security = other8.security;
  payload = other8.payload;
  __isset = other8.__isset;
}
RfnE2eDataIndication& RfnE2eDataIndication::operator=(const RfnE2eDataIndication& other9) {
  e2eProtocol = other9.e2eProtocol;
  applicationServiceId = other9.applicationServiceId;
  rfnIdentifier = other9.rfnIdentifier;
  priority = other9.priority;
  security = other9.security;
  payload = other9.payload;
  __isset = other9.__isset;
  return *this;
}
void RfnE2eDataIndication::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnE2eDataIndication(";
  out << "e2eProtocol=" << to_string(e2eProtocol);
  out << ", " << "applicationServiceId=" << to_string(applicationServiceId);
  out << ", " << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ", " << "priority=" << to_string(priority);
  out << ", " << "security="; (__isset.security ? (out << to_string(security)) : (out << "<null>"));
  out << ", " << "payload=" << to_string(payload);
  out << ")";
}


RfnE2eDataConfirm::~RfnE2eDataConfirm() throw() {
}


void RfnE2eDataConfirm::__set_e2eProtocol(const RfnE2eProtocol::type val) {
  this->e2eProtocol = val;
}

void RfnE2eDataConfirm::__set_applicationServiceId(const int8_t val) {
  this->applicationServiceId = val;
}

void RfnE2eDataConfirm::__set_rfnIdentifier(const RfnIdentifier& val) {
  this->rfnIdentifier = val;
}

void RfnE2eDataConfirm::__set_replyType(const RfnE2eDataReplyType::type val) {
  this->replyType = val;
}

void RfnE2eDataConfirm::__set_header(const  ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader& val) {
  this->header = val;
__isset.header = true;
}
std::ostream& operator<<(std::ostream& out, const RfnE2eDataConfirm& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnE2eDataConfirm::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_e2eProtocol = false;
  bool isset_applicationServiceId = false;
  bool isset_rfnIdentifier = false;
  bool isset_replyType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->e2eProtocol = (RfnE2eProtocol::type)ecast10;
          isset_e2eProtocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->applicationServiceId);
          isset_applicationServiceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->replyType = (RfnE2eDataReplyType::type)ecast11;
          isset_replyType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_e2eProtocol)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_applicationServiceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_replyType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnE2eDataConfirm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnE2eDataConfirm");

  xfer += oprot->writeFieldBegin("e2eProtocol", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->e2eProtocol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationServiceId", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->applicationServiceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replyType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->replyType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnE2eDataConfirm &a, RfnE2eDataConfirm &b) {
  using ::std::swap;
  swap(a.e2eProtocol, b.e2eProtocol);
  swap(a.applicationServiceId, b.applicationServiceId);
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.replyType, b.replyType);
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

RfnE2eDataConfirm::RfnE2eDataConfirm(const RfnE2eDataConfirm& other12) {
  e2eProtocol = other12.e2eProtocol;
  applicationServiceId = other12.applicationServiceId;
  rfnIdentifier = other12.rfnIdentifier;
  replyType = other12.replyType;
  header = other12.header;
  __isset = other12.__isset;
}
RfnE2eDataConfirm& RfnE2eDataConfirm::operator=(const RfnE2eDataConfirm& other13) {
  e2eProtocol = other13.e2eProtocol;
  applicationServiceId = other13.applicationServiceId;
  rfnIdentifier = other13.rfnIdentifier;
  replyType = other13.replyType;
  header = other13.header;
  __isset = other13.__isset;
  return *this;
}
void RfnE2eDataConfirm::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnE2eDataConfirm(";
  out << "e2eProtocol=" << to_string(e2eProtocol);
  out << ", " << "applicationServiceId=" << to_string(applicationServiceId);
  out << ", " << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ", " << "replyType=" << to_string(replyType);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ")";
}

}}}} // namespace

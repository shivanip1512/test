/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RfnE2eData_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kRfnE2eProtocolValues[] = {
  RfnE2eProtocol::APPLICATION,
  RfnE2eProtocol::NETWORK,
  RfnE2eProtocol::LINK
};
const char* _kRfnE2eProtocolNames[] = {
  "APPLICATION",
  "NETWORK",
  "LINK"
};
const std::map<int, const char*> _RfnE2eProtocol_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRfnE2eProtocolValues, _kRfnE2eProtocolNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRfnE2eMessagePriorityValues[] = {
  RfnE2eMessagePriority::APP_LO,
  RfnE2eMessagePriority::APP_HI
};
const char* _kRfnE2eMessagePriorityNames[] = {
  "APP_LO",
  "APP_HI"
};
const std::map<int, const char*> _RfnE2eMessagePriority_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRfnE2eMessagePriorityValues, _kRfnE2eMessagePriorityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRfnE2eDataReplyTypeValues[] = {
  RfnE2eDataReplyType::OK,
  RfnE2eDataReplyType::DESTINATION_DEVICE_ADDRESS_UNKNOWN,
  RfnE2eDataReplyType::DESTINATION_NETWORK_UNAVAILABLE,
  RfnE2eDataReplyType::PMTU_LENGTH_EXCEEDED,
  RfnE2eDataReplyType::E2E_PROTOCOL_TYPE_NOT_SUPPORTED,
  RfnE2eDataReplyType::NETWORK_SERVER_IDENTIFIER_INVALID,
  RfnE2eDataReplyType::APPLICATION_SERVICE_IDENTIFIER_INVALID,
  RfnE2eDataReplyType::NETWORK_LOAD_CONTROL,
  RfnE2eDataReplyType::NETWORK_SERVICE_FAILURE,
  RfnE2eDataReplyType::REQUEST_CANCELED,
  RfnE2eDataReplyType::REQUEST_EXPIRED
};
const char* _kRfnE2eDataReplyTypeNames[] = {
  "OK",
  "DESTINATION_DEVICE_ADDRESS_UNKNOWN",
  "DESTINATION_NETWORK_UNAVAILABLE",
  "PMTU_LENGTH_EXCEEDED",
  "E2E_PROTOCOL_TYPE_NOT_SUPPORTED",
  "NETWORK_SERVER_IDENTIFIER_INVALID",
  "APPLICATION_SERVICE_IDENTIFIER_INVALID",
  "NETWORK_LOAD_CONTROL",
  "NETWORK_SERVICE_FAILURE",
  "REQUEST_CANCELED",
  "REQUEST_EXPIRED"
};
const std::map<int, const char*> _RfnE2eDataReplyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kRfnE2eDataReplyTypeValues, _kRfnE2eDataReplyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RfnIdentifier::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t RfnIdentifier::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t RfnIdentifier::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sensorManufacturer = false;
  bool isset_sensorModel = false;
  bool isset_sensorSerialNumber = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorManufacturer);
          isset_sensorManufacturer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorModel);
          isset_sensorModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorSerialNumber);
          isset_sensorSerialNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sensorManufacturer)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sensorModel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sensorSerialNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnIdentifier::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RfnIdentifier");

  xfer += oprot->writeFieldBegin("sensorManufacturer", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sensorManufacturer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorModel", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sensorModel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorSerialNumber", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->sensorSerialNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnIdentifier &a, RfnIdentifier &b) {
  using ::std::swap;
  swap(a.sensorManufacturer, b.sensorManufacturer);
  swap(a.sensorModel, b.sensorModel);
  swap(a.sensorSerialNumber, b.sensorSerialNumber);
}

const char* RfnE2eDataRequest::ascii_fingerprint = "89B9149745925B4EF3FE9B42BEA3EEAF";
const uint8_t RfnE2eDataRequest::binary_fingerprint[16] = {0x89,0xB9,0x14,0x97,0x45,0x92,0x5B,0x4E,0xF3,0xFE,0x9B,0x42,0xBE,0xA3,0xEE,0xAF};

uint32_t RfnE2eDataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_e2eProtocol = false;
  bool isset_applicationServiceId = false;
  bool isset_rfnIdentifier = false;
  bool isset_priority = false;
  bool isset_payload = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->e2eProtocol = (RfnE2eProtocol::type)ecast0;
          isset_e2eProtocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->applicationServiceId);
          isset_applicationServiceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->priority = (RfnE2eMessagePriority::type)ecast1;
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->security);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          isset_payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_e2eProtocol)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_applicationServiceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnE2eDataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RfnE2eDataRequest");

  xfer += oprot->writeFieldBegin("e2eProtocol", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->e2eProtocol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationServiceId", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->applicationServiceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->priority);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->security);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->payload);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnE2eDataRequest &a, RfnE2eDataRequest &b) {
  using ::std::swap;
  swap(a.e2eProtocol, b.e2eProtocol);
  swap(a.applicationServiceId, b.applicationServiceId);
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.priority, b.priority);
  swap(a.security, b.security);
  swap(a.payload, b.payload);
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

const char* RfnE2eDataIndication::ascii_fingerprint = "8566E586DC91E3EDB6D1BCD87B3E26BD";
const uint8_t RfnE2eDataIndication::binary_fingerprint[16] = {0x85,0x66,0xE5,0x86,0xDC,0x91,0xE3,0xED,0xB6,0xD1,0xBC,0xD8,0x7B,0x3E,0x26,0xBD};

uint32_t RfnE2eDataIndication::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_e2eProtocol = false;
  bool isset_applicationServiceId = false;
  bool isset_rfnIdentifier = false;
  bool isset_priority = false;
  bool isset_payload = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->e2eProtocol = (RfnE2eProtocol::type)ecast2;
          isset_e2eProtocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->applicationServiceId);
          isset_applicationServiceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->priority = (RfnE2eMessagePriority::type)ecast3;
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->security);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          isset_payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_e2eProtocol)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_applicationServiceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnE2eDataIndication::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RfnE2eDataIndication");

  xfer += oprot->writeFieldBegin("e2eProtocol", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->e2eProtocol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationServiceId", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->applicationServiceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->priority);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->security);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->payload);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnE2eDataIndication &a, RfnE2eDataIndication &b) {
  using ::std::swap;
  swap(a.e2eProtocol, b.e2eProtocol);
  swap(a.applicationServiceId, b.applicationServiceId);
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.priority, b.priority);
  swap(a.security, b.security);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

const char* RfnE2eDataConfirm::ascii_fingerprint = "61DD36B051F28B11EA460F062E62D05C";
const uint8_t RfnE2eDataConfirm::binary_fingerprint[16] = {0x61,0xDD,0x36,0xB0,0x51,0xF2,0x8B,0x11,0xEA,0x46,0x0F,0x06,0x2E,0x62,0xD0,0x5C};

uint32_t RfnE2eDataConfirm::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_e2eProtocol = false;
  bool isset_applicationServiceId = false;
  bool isset_rfnIdentifier = false;
  bool isset_replyType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->e2eProtocol = (RfnE2eProtocol::type)ecast4;
          isset_e2eProtocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->applicationServiceId);
          isset_applicationServiceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->replyType = (RfnE2eDataReplyType::type)ecast5;
          isset_replyType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_e2eProtocol)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_applicationServiceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_replyType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnE2eDataConfirm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RfnE2eDataConfirm");

  xfer += oprot->writeFieldBegin("e2eProtocol", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->e2eProtocol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationServiceId", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->applicationServiceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replyType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->replyType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnE2eDataConfirm &a, RfnE2eDataConfirm &b) {
  using ::std::swap;
  swap(a.e2eProtocol, b.e2eProtocol);
  swap(a.applicationServiceId, b.applicationServiceId);
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.replyType, b.replyType);
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

}}}} // namespace

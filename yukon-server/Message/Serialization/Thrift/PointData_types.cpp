/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "PointData_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* PointData::ascii_fingerprint = "E1A7EA563D48FA0EED0F4E41F38C3879";
const uint8_t PointData::binary_fingerprint[16] = {0xE1,0xA7,0xEA,0x56,0x3D,0x48,0xFA,0x0E,0xED,0x0F,0x4E,0x41,0xF3,0x8C,0x38,0x79};

uint32_t PointData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__id = false;
  bool isset__type = false;
  bool isset__quality = false;
  bool isset__tags = false;
  bool isset__value = false;
  bool isset__str = false;
  bool isset__time = false;
  bool isset__millis = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_id);
          isset__id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_type);
          isset__type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_quality);
          isset__quality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_tags);
          isset__tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_value);
          isset__value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_str);
          isset__str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_time);
          isset__time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->_millis);
          isset__millis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__quality)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__tags)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__str)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__millis)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PointData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PointData");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_type", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_quality", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->_quality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_tags", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_tags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_value", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_str", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_str);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_time", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_millis", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->_millis);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PointData &a, PointData &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._id, b._id);
  swap(a._type, b._type);
  swap(a._quality, b._quality);
  swap(a._tags, b._tags);
  swap(a._value, b._value);
  swap(a._str, b._str);
  swap(a._time, b._time);
  swap(a._millis, b._millis);
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCVerifyBanks_TYPES_H
#define CCVerifyBanks_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCItemCommand_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCVerifyBanks {
 public:

  static const char* ascii_fingerprint; // = "F9476CBC2BD0E5FA0CE46C73623283DF";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0x47,0x6C,0xBC,0x2B,0xD0,0xE5,0xFA,0x0C,0xE4,0x6C,0x73,0x62,0x32,0x83,0xDF};

  CCVerifyBanks() : _disableOvUv(0) {
  }

  virtual ~CCVerifyBanks() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCItemCommand _baseMessage;
  bool _disableOvUv;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCItemCommand& val) {
    _baseMessage = val;
  }

  void __set__disableOvUv(const bool val) {
    _disableOvUv = val;
  }

  bool operator == (const CCVerifyBanks & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_disableOvUv == rhs._disableOvUv))
      return false;
    return true;
  }
  bool operator != (const CCVerifyBanks &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCVerifyBanks & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCVerifyBanks &a, CCVerifyBanks &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCVerifyBanks_TYPES_H
#define CCVerifyBanks_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "CCItemCommand_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class CCVerifyBanks;


class CCVerifyBanks : public virtual ::apache::thrift::TBase {
 public:

  CCVerifyBanks(const CCVerifyBanks&);
  CCVerifyBanks& operator=(const CCVerifyBanks&);
  CCVerifyBanks() : _disableOvUv(0) {
  }

  virtual ~CCVerifyBanks() noexcept;
   ::Cti::Messaging::Serialization::Thrift::CCItemCommand _baseMessage;
  bool _disableOvUv;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCItemCommand& val);

  void __set__disableOvUv(const bool val);

  bool operator == (const CCVerifyBanks & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_disableOvUv == rhs._disableOvUv))
      return false;
    return true;
  }
  bool operator != (const CCVerifyBanks &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCVerifyBanks & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCVerifyBanks &a, CCVerifyBanks &b);

std::ostream& operator<<(std::ostream& out, const CCVerifyBanks& obj);

}}}} // namespace

#endif

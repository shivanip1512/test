/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotifVoiceDataResponse_TYPES_H
#define NotifVoiceDataResponse_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class NotifVoiceDataResponse {
 public:

  static const char* ascii_fingerprint; // = "0EF691F67A3DC8DA9138353473E79516";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0xF6,0x91,0xF6,0x7A,0x3D,0xC8,0xDA,0x91,0x38,0x35,0x34,0x73,0xE7,0x95,0x16};

  NotifVoiceDataResponse() : _callToken(), _xmlData(), _contactId(0) {
  }

  virtual ~NotifVoiceDataResponse() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  std::string _callToken;
  std::string _xmlData;
  int32_t _contactId;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__callToken(const std::string& val) {
    _callToken = val;
  }

  void __set__xmlData(const std::string& val) {
    _xmlData = val;
  }

  void __set__contactId(const int32_t val) {
    _contactId = val;
  }

  bool operator == (const NotifVoiceDataResponse & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_callToken == rhs._callToken))
      return false;
    if (!(_xmlData == rhs._xmlData))
      return false;
    if (!(_contactId == rhs._contactId))
      return false;
    return true;
  }
  bool operator != (const NotifVoiceDataResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotifVoiceDataResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotifVoiceDataResponse &a, NotifVoiceDataResponse &b);

}}}} // namespace

#endif

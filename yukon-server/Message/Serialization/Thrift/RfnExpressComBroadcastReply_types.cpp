/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RfnExpressComBroadcastReply_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kRfnExpressComBroadcastReplyTypeValues[] = {
  RfnExpressComBroadcastReplyType::SUCCESS,
  RfnExpressComBroadcastReplyType::FAILURE,
  RfnExpressComBroadcastReplyType::NETWORK_TIMEOUT,
  RfnExpressComBroadcastReplyType::TIMEOUT
};
const char* _kRfnExpressComBroadcastReplyTypeNames[] = {
  "SUCCESS",
  "FAILURE",
  "NETWORK_TIMEOUT",
  "TIMEOUT"
};
const std::map<int, const char*> _RfnExpressComBroadcastReplyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kRfnExpressComBroadcastReplyTypeValues, _kRfnExpressComBroadcastReplyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RfnExpressComBroadcastReply::ascii_fingerprint = "50873B81E3D960AE67A3309356F2AD62";
const uint8_t RfnExpressComBroadcastReply::binary_fingerprint[16] = {0x50,0x87,0x3B,0x81,0xE3,0xD9,0x60,0xAE,0x67,0xA3,0x30,0x93,0x56,0xF2,0xAD,0x62};

uint32_t RfnExpressComBroadcastReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->status.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              int64_t _key5;
              xfer += iprot->readI64(_key5);
              RfnExpressComBroadcastReplyType::type& _val6 = this->status[_key5];
              int32_t ecast7;
              xfer += iprot->readI32(ecast7);
              _val6 = (RfnExpressComBroadcastReplyType::type)ecast7;
            }
            xfer += iprot->readMapEnd();
          }
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnExpressComBroadcastReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RfnExpressComBroadcastReply");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->status.size()));
    std::map<int64_t, RfnExpressComBroadcastReplyType::type> ::const_iterator _iter8;
    for (_iter8 = this->status.begin(); _iter8 != this->status.end(); ++_iter8)
    {
      xfer += oprot->writeI64(_iter8->first);
      xfer += oprot->writeI32((int32_t)_iter8->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnExpressComBroadcastReply &a, RfnExpressComBroadcastReply &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RfnBroadcastMessaging_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kRfnBroadcastDeliveryTypeValues[] = {
  RfnBroadcastDeliveryType::IMMEDIATE,
  RfnBroadcastDeliveryType::NON_REAL_TIME
};
const char* _kRfnBroadcastDeliveryTypeNames[] = {
  "IMMEDIATE",
  "NON_REAL_TIME"
};
const std::map<int, const char*> _RfnBroadcastDeliveryType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRfnBroadcastDeliveryTypeValues, _kRfnBroadcastDeliveryTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RfnBroadcastDeliveryType::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnBroadcastDeliveryType_VALUES_TO_NAMES.find(val);
  if (it != _RfnBroadcastDeliveryType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const RfnBroadcastDeliveryType::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnBroadcastDeliveryType_VALUES_TO_NAMES.find(val);
  if (it != _RfnBroadcastDeliveryType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


RfnBroadcastRequest::~RfnBroadcastRequest() noexcept {
}


void RfnBroadcastRequest::__set_sourceId(const int8_t val) {
  this->sourceId = val;
}

void RfnBroadcastRequest::__set_messageId(const int16_t val) {
  this->messageId = val;
}

void RfnBroadcastRequest::__set_broadcastApplicationId(const int8_t val) {
  this->broadcastApplicationId = val;
}

void RfnBroadcastRequest::__set_deliveryType(const RfnBroadcastDeliveryType::type val) {
  this->deliveryType = val;
}

void RfnBroadcastRequest::__set_payload(const std::string& val) {
  this->payload = val;
}

void RfnBroadcastRequest::__set_header(const  ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader& val) {
  this->header = val;
__isset.header = true;
}
std::ostream& operator<<(std::ostream& out, const RfnBroadcastRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnBroadcastRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sourceId = false;
  bool isset_messageId = false;
  bool isset_broadcastApplicationId = false;
  bool isset_deliveryType = false;
  bool isset_payload = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sourceId);
          isset_sourceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->messageId);
          isset_messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->broadcastApplicationId);
          isset_broadcastApplicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->deliveryType = (RfnBroadcastDeliveryType::type)ecast0;
          isset_deliveryType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          isset_payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sourceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_messageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_broadcastApplicationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_deliveryType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnBroadcastRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnBroadcastRequest");

  xfer += oprot->writeFieldBegin("sourceId", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->sourceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("broadcastApplicationId", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->broadcastApplicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deliveryType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->deliveryType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->payload);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnBroadcastRequest &a, RfnBroadcastRequest &b) {
  using ::std::swap;
  swap(a.sourceId, b.sourceId);
  swap(a.messageId, b.messageId);
  swap(a.broadcastApplicationId, b.broadcastApplicationId);
  swap(a.deliveryType, b.deliveryType);
  swap(a.payload, b.payload);
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

RfnBroadcastRequest::RfnBroadcastRequest(const RfnBroadcastRequest& other1) {
  sourceId = other1.sourceId;
  messageId = other1.messageId;
  broadcastApplicationId = other1.broadcastApplicationId;
  deliveryType = other1.deliveryType;
  payload = other1.payload;
  header = other1.header;
  __isset = other1.__isset;
}
RfnBroadcastRequest& RfnBroadcastRequest::operator=(const RfnBroadcastRequest& other2) {
  sourceId = other2.sourceId;
  messageId = other2.messageId;
  broadcastApplicationId = other2.broadcastApplicationId;
  deliveryType = other2.deliveryType;
  payload = other2.payload;
  header = other2.header;
  __isset = other2.__isset;
  return *this;
}
void RfnBroadcastRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnBroadcastRequest(";
  out << "sourceId=" << to_string(sourceId);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "broadcastApplicationId=" << to_string(broadcastApplicationId);
  out << ", " << "deliveryType=" << to_string(deliveryType);
  out << ", " << "payload=" << to_string(payload);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ")";
}


RfnBroadcastReply::~RfnBroadcastReply() noexcept {
}


void RfnBroadcastReply::__set_replyType(const int32_t val) {
  this->replyType = val;
}

void RfnBroadcastReply::__set_failureReason(const std::string& val) {
  this->failureReason = val;
__isset.failureReason = true;
}

void RfnBroadcastReply::__set_gatewayErrors(const std::map< ::Cti::Messaging::Serialization::Thrift::RfnIdentifier, std::string> & val) {
  this->gatewayErrors = val;
}

void RfnBroadcastReply::__set_header(const  ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader& val) {
  this->header = val;
__isset.header = true;
}
std::ostream& operator<<(std::ostream& out, const RfnBroadcastReply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnBroadcastReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_replyType = false;
  bool isset_gatewayErrors = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->replyType);
          isset_replyType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->failureReason);
          this->__isset.failureReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gatewayErrors.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _ktype4;
            ::apache::thrift::protocol::TType _vtype5;
            xfer += iprot->readMapBegin(_ktype4, _vtype5, _size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
               ::Cti::Messaging::Serialization::Thrift::RfnIdentifier _key8;
              xfer += _key8.read(iprot);
              std::string& _val9 = this->gatewayErrors[_key8];
              xfer += iprot->readString(_val9);
            }
            xfer += iprot->readMapEnd();
          }
          isset_gatewayErrors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_replyType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gatewayErrors)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnBroadcastReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnBroadcastReply");

  xfer += oprot->writeFieldBegin("replyType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->replyType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.failureReason) {
    xfer += oprot->writeFieldBegin("failureReason", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->failureReason);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("gatewayErrors", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->gatewayErrors.size()));
    std::map< ::Cti::Messaging::Serialization::Thrift::RfnIdentifier, std::string> ::const_iterator _iter10;
    for (_iter10 = this->gatewayErrors.begin(); _iter10 != this->gatewayErrors.end(); ++_iter10)
    {
      xfer += _iter10->first.write(oprot);
      xfer += oprot->writeString(_iter10->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnBroadcastReply &a, RfnBroadcastReply &b) {
  using ::std::swap;
  swap(a.replyType, b.replyType);
  swap(a.failureReason, b.failureReason);
  swap(a.gatewayErrors, b.gatewayErrors);
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

RfnBroadcastReply::RfnBroadcastReply(const RfnBroadcastReply& other11) {
  replyType = other11.replyType;
  failureReason = other11.failureReason;
  gatewayErrors = other11.gatewayErrors;
  header = other11.header;
  __isset = other11.__isset;
}
RfnBroadcastReply& RfnBroadcastReply::operator=(const RfnBroadcastReply& other12) {
  replyType = other12.replyType;
  failureReason = other12.failureReason;
  gatewayErrors = other12.gatewayErrors;
  header = other12.header;
  __isset = other12.__isset;
  return *this;
}
void RfnBroadcastReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnBroadcastReply(";
  out << "replyType=" << to_string(replyType);
  out << ", " << "failureReason="; (__isset.failureReason ? (out << to_string(failureReason)) : (out << "<null>"));
  out << ", " << "gatewayErrors=" << to_string(gatewayErrors);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ")";
}

}}}} // namespace

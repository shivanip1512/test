/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Bool_TYPES_H
#define Bool_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class Bool;


class Bool : public virtual ::apache::thrift::TBase {
 public:

  Bool(const Bool&) noexcept;
  Bool& operator=(const Bool&) noexcept;
  Bool() noexcept
       : _value(0) {
  }

  virtual ~Bool() noexcept;
  bool _value;

  void __set__value(const bool val);

  bool operator == (const Bool & rhs) const
  {
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const Bool &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bool & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Bool &a, Bool &b);

std::ostream& operator<<(std::ostream& out, const Bool& obj);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCVerifySelectedBank_TYPES_H
#define CCVerifySelectedBank_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCVerifyBanks_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCVerifySelectedBank {
 public:

  static const char* ascii_fingerprint; // = "3F6BDE92304BE3259EDCD5F547D6C839";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x6B,0xDE,0x92,0x30,0x4B,0xE3,0x25,0x9E,0xDC,0xD5,0xF5,0x47,0xD6,0xC8,0x39};

  CCVerifySelectedBank() : _bankId(0) {
  }

  virtual ~CCVerifySelectedBank() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCVerifyBanks _baseMessage;
  int32_t _bankId;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCVerifyBanks& val) {
    _baseMessage = val;
  }

  void __set__bankId(const int32_t val) {
    _bankId = val;
  }

  bool operator == (const CCVerifySelectedBank & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_bankId == rhs._bankId))
      return false;
    return true;
  }
  bool operator != (const CCVerifySelectedBank &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCVerifySelectedBank & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCVerifySelectedBank &a, CCVerifySelectedBank &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "FieldSimulator_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift { namespace FieldSimulator {


FieldSimulatorSettings::~FieldSimulatorSettings() noexcept {
}


void FieldSimulatorSettings::__set__deviceGroup(const std::string& val) {
  this->_deviceGroup = val;
}

void FieldSimulatorSettings::__set__deviceConfigFailureRate(const int32_t val) {
  this->_deviceConfigFailureRate = val;
}
std::ostream& operator<<(std::ostream& out, const FieldSimulatorSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FieldSimulatorSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__deviceGroup = false;
  bool isset__deviceConfigFailureRate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_deviceGroup);
          isset__deviceGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_deviceConfigFailureRate);
          isset__deviceConfigFailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__deviceGroup)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__deviceConfigFailureRate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FieldSimulatorSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FieldSimulatorSettings");

  xfer += oprot->writeFieldBegin("_deviceGroup", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_deviceGroup);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_deviceConfigFailureRate", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_deviceConfigFailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FieldSimulatorSettings &a, FieldSimulatorSettings &b) {
  using ::std::swap;
  swap(a._deviceGroup, b._deviceGroup);
  swap(a._deviceConfigFailureRate, b._deviceConfigFailureRate);
}

FieldSimulatorSettings::FieldSimulatorSettings(const FieldSimulatorSettings& other0) {
  _deviceGroup = other0._deviceGroup;
  _deviceConfigFailureRate = other0._deviceConfigFailureRate;
}
FieldSimulatorSettings& FieldSimulatorSettings::operator=(const FieldSimulatorSettings& other1) {
  _deviceGroup = other1._deviceGroup;
  _deviceConfigFailureRate = other1._deviceConfigFailureRate;
  return *this;
}
void FieldSimulatorSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FieldSimulatorSettings(";
  out << "_deviceGroup=" << to_string(_deviceGroup);
  out << ", " << "_deviceConfigFailureRate=" << to_string(_deviceConfigFailureRate);
  out << ")";
}


FieldSimulatorStatusRequest::~FieldSimulatorStatusRequest() noexcept {
}

std::ostream& operator<<(std::ostream& out, const FieldSimulatorStatusRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FieldSimulatorStatusRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FieldSimulatorStatusRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FieldSimulatorStatusRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FieldSimulatorStatusRequest &a, FieldSimulatorStatusRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

FieldSimulatorStatusRequest::FieldSimulatorStatusRequest(const FieldSimulatorStatusRequest& other2) {
  (void) other2;
}
FieldSimulatorStatusRequest& FieldSimulatorStatusRequest::operator=(const FieldSimulatorStatusRequest& other3) {
  (void) other3;
  return *this;
}
void FieldSimulatorStatusRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FieldSimulatorStatusRequest(";
  out << ")";
}


FieldSimulatorStatusResponse::~FieldSimulatorStatusResponse() noexcept {
}


void FieldSimulatorStatusResponse::__set__settings(const FieldSimulatorSettings& val) {
  this->_settings = val;
}
std::ostream& operator<<(std::ostream& out, const FieldSimulatorStatusResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FieldSimulatorStatusResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__settings = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_settings.read(iprot);
          isset__settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__settings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FieldSimulatorStatusResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FieldSimulatorStatusResponse");

  xfer += oprot->writeFieldBegin("_settings", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_settings.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FieldSimulatorStatusResponse &a, FieldSimulatorStatusResponse &b) {
  using ::std::swap;
  swap(a._settings, b._settings);
}

FieldSimulatorStatusResponse::FieldSimulatorStatusResponse(const FieldSimulatorStatusResponse& other4) {
  _settings = other4._settings;
}
FieldSimulatorStatusResponse& FieldSimulatorStatusResponse::operator=(const FieldSimulatorStatusResponse& other5) {
  _settings = other5._settings;
  return *this;
}
void FieldSimulatorStatusResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FieldSimulatorStatusResponse(";
  out << "_settings=" << to_string(_settings);
  out << ")";
}


FieldSimulatorConfigurationRequest::~FieldSimulatorConfigurationRequest() noexcept {
}


void FieldSimulatorConfigurationRequest::__set__settings(const FieldSimulatorSettings& val) {
  this->_settings = val;
}
std::ostream& operator<<(std::ostream& out, const FieldSimulatorConfigurationRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FieldSimulatorConfigurationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__settings = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_settings.read(iprot);
          isset__settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__settings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FieldSimulatorConfigurationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FieldSimulatorConfigurationRequest");

  xfer += oprot->writeFieldBegin("_settings", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_settings.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FieldSimulatorConfigurationRequest &a, FieldSimulatorConfigurationRequest &b) {
  using ::std::swap;
  swap(a._settings, b._settings);
}

FieldSimulatorConfigurationRequest::FieldSimulatorConfigurationRequest(const FieldSimulatorConfigurationRequest& other6) {
  _settings = other6._settings;
}
FieldSimulatorConfigurationRequest& FieldSimulatorConfigurationRequest::operator=(const FieldSimulatorConfigurationRequest& other7) {
  _settings = other7._settings;
  return *this;
}
void FieldSimulatorConfigurationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FieldSimulatorConfigurationRequest(";
  out << "_settings=" << to_string(_settings);
  out << ")";
}


FieldSimulatorConfigurationResponse::~FieldSimulatorConfigurationResponse() noexcept {
}


void FieldSimulatorConfigurationResponse::__set__success(const bool val) {
  this->_success = val;
}

void FieldSimulatorConfigurationResponse::__set__settings(const FieldSimulatorSettings& val) {
  this->_settings = val;
}
std::ostream& operator<<(std::ostream& out, const FieldSimulatorConfigurationResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FieldSimulatorConfigurationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__success = false;
  bool isset__settings = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_success);
          isset__success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_settings.read(iprot);
          isset__settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__success)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__settings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FieldSimulatorConfigurationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FieldSimulatorConfigurationResponse");

  xfer += oprot->writeFieldBegin("_success", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_success);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_settings", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->_settings.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FieldSimulatorConfigurationResponse &a, FieldSimulatorConfigurationResponse &b) {
  using ::std::swap;
  swap(a._success, b._success);
  swap(a._settings, b._settings);
}

FieldSimulatorConfigurationResponse::FieldSimulatorConfigurationResponse(const FieldSimulatorConfigurationResponse& other8) {
  _success = other8._success;
  _settings = other8._settings;
}
FieldSimulatorConfigurationResponse& FieldSimulatorConfigurationResponse::operator=(const FieldSimulatorConfigurationResponse& other9) {
  _success = other9._success;
  _settings = other9._settings;
  return *this;
}
void FieldSimulatorConfigurationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FieldSimulatorConfigurationResponse(";
  out << "_success=" << to_string(_success);
  out << ", " << "_settings=" << to_string(_settings);
  out << ")";
}

}}}}} // namespace

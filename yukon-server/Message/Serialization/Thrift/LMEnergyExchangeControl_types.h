/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMEnergyExchangeControl_TYPES_H
#define LMEnergyExchangeControl_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "LMMessage_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class LMEnergyExchangeControl {
 public:

  static const char* ascii_fingerprint; // = "C807526B59AB0F5BFAAD030099F56BA6";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x07,0x52,0x6B,0x59,0xAB,0x0F,0x5B,0xFA,0xAD,0x03,0x00,0x99,0xF5,0x6B,0xA6};

  LMEnergyExchangeControl() : _command(0), _paoId(0), _offerId(0), _offerDate(0), _notificationDatetime(0), _expirationDatetime(0), _additionalInfo() {
  }

  virtual ~LMEnergyExchangeControl() throw() {}

   ::Cti::Messaging::Serialization::Thrift::LMMessage _baseMessage;
  int32_t _command;
  int32_t _paoId;
  int32_t _offerId;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _offerDate;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _notificationDatetime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _expirationDatetime;
  std::string _additionalInfo;
  std::vector<double>  _amountsRequested;
  std::vector<int32_t>  _pricesOffered;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::LMMessage& val) {
    _baseMessage = val;
  }

  void __set__command(const int32_t val) {
    _command = val;
  }

  void __set__paoId(const int32_t val) {
    _paoId = val;
  }

  void __set__offerId(const int32_t val) {
    _offerId = val;
  }

  void __set__offerDate(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _offerDate = val;
  }

  void __set__notificationDatetime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _notificationDatetime = val;
  }

  void __set__expirationDatetime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _expirationDatetime = val;
  }

  void __set__additionalInfo(const std::string& val) {
    _additionalInfo = val;
  }

  void __set__amountsRequested(const std::vector<double> & val) {
    _amountsRequested = val;
  }

  void __set__pricesOffered(const std::vector<int32_t> & val) {
    _pricesOffered = val;
  }

  bool operator == (const LMEnergyExchangeControl & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_command == rhs._command))
      return false;
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_offerId == rhs._offerId))
      return false;
    if (!(_offerDate == rhs._offerDate))
      return false;
    if (!(_notificationDatetime == rhs._notificationDatetime))
      return false;
    if (!(_expirationDatetime == rhs._expirationDatetime))
      return false;
    if (!(_additionalInfo == rhs._additionalInfo))
      return false;
    if (!(_amountsRequested == rhs._amountsRequested))
      return false;
    if (!(_pricesOffered == rhs._pricesOffered))
      return false;
    return true;
  }
  bool operator != (const LMEnergyExchangeControl &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMEnergyExchangeControl & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LMEnergyExchangeControl &a, LMEnergyExchangeControl &b);

}}}} // namespace

#endif

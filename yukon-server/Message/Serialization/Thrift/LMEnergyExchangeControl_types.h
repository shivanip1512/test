/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMEnergyExchangeControl_TYPES_H
#define LMEnergyExchangeControl_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "LMMessage_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class LMEnergyExchangeControl;


class LMEnergyExchangeControl : public virtual ::apache::thrift::TBase {
 public:

  LMEnergyExchangeControl(const LMEnergyExchangeControl&);
  LMEnergyExchangeControl& operator=(const LMEnergyExchangeControl&);
  LMEnergyExchangeControl() : _command(0), _paoId(0), _offerId(0), _offerDate(0), _notificationDatetime(0), _expirationDatetime(0), _additionalInfo() {
  }

  virtual ~LMEnergyExchangeControl() noexcept;
   ::Cti::Messaging::Serialization::Thrift::LMMessage _baseMessage;
  int32_t _command;
  int32_t _paoId;
  int32_t _offerId;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _offerDate;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _notificationDatetime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _expirationDatetime;
  std::string _additionalInfo;
  std::vector<double>  _amountsRequested;
  std::vector<int32_t>  _pricesOffered;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::LMMessage& val);

  void __set__command(const int32_t val);

  void __set__paoId(const int32_t val);

  void __set__offerId(const int32_t val);

  void __set__offerDate(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__notificationDatetime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__expirationDatetime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__additionalInfo(const std::string& val);

  void __set__amountsRequested(const std::vector<double> & val);

  void __set__pricesOffered(const std::vector<int32_t> & val);

  bool operator == (const LMEnergyExchangeControl & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_command == rhs._command))
      return false;
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_offerId == rhs._offerId))
      return false;
    if (!(_offerDate == rhs._offerDate))
      return false;
    if (!(_notificationDatetime == rhs._notificationDatetime))
      return false;
    if (!(_expirationDatetime == rhs._expirationDatetime))
      return false;
    if (!(_additionalInfo == rhs._additionalInfo))
      return false;
    if (!(_amountsRequested == rhs._amountsRequested))
      return false;
    if (!(_pricesOffered == rhs._pricesOffered))
      return false;
    return true;
  }
  bool operator != (const LMEnergyExchangeControl &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMEnergyExchangeControl & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMEnergyExchangeControl &a, LMEnergyExchangeControl &b);

std::ostream& operator<<(std::ostream& out, const LMEnergyExchangeControl& obj);

}}}} // namespace

#endif

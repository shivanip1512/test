/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ServerResponse_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


ServerResponse::~ServerResponse() throw() {
}


void ServerResponse::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
  this->_baseMessage = val;
}

void ServerResponse::__set__id(const int32_t val) {
  this->_id = val;
}

void ServerResponse::__set__status(const int32_t val) {
  this->_status = val;
}

void ServerResponse::__set__message(const std::string& val) {
  this->_message = val;
}

void ServerResponse::__set__hasPayload(const bool val) {
  this->_hasPayload = val;
}

void ServerResponse::__set__payload(const  ::Cti::Messaging::Serialization::Thrift::GenericMessage& val) {
  this->_payload = val;
}
std::ostream& operator<<(std::ostream& out, const ServerResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ServerResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__id = false;
  bool isset__status = false;
  bool isset__message = false;
  bool isset__hasPayload = false;
  bool isset__payload = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_id);
          isset__id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_status);
          isset__status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_message);
          isset__message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_hasPayload);
          isset__hasPayload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_payload.read(iprot);
          isset__payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__message)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__hasPayload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ServerResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServerResponse");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_message", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_hasPayload", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->_hasPayload);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_payload", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->_payload.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServerResponse &a, ServerResponse &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._id, b._id);
  swap(a._status, b._status);
  swap(a._message, b._message);
  swap(a._hasPayload, b._hasPayload);
  swap(a._payload, b._payload);
}

ServerResponse::ServerResponse(const ServerResponse& other0) {
  _baseMessage = other0._baseMessage;
  _id = other0._id;
  _status = other0._status;
  _message = other0._message;
  _hasPayload = other0._hasPayload;
  _payload = other0._payload;
}
ServerResponse& ServerResponse::operator=(const ServerResponse& other1) {
  _baseMessage = other1._baseMessage;
  _id = other1._id;
  _status = other1._status;
  _message = other1._message;
  _hasPayload = other1._hasPayload;
  _payload = other1._payload;
  return *this;
}
void ServerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServerResponse(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_id=" << to_string(_id);
  out << ", " << "_status=" << to_string(_status);
  out << ", " << "_message=" << to_string(_message);
  out << ", " << "_hasPayload=" << to_string(_hasPayload);
  out << ", " << "_payload=" << to_string(_payload);
  out << ")";
}

}}}} // namespace

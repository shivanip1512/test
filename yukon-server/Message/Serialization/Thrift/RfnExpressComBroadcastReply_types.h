/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RfnExpressComBroadcastReply_TYPES_H
#define RfnExpressComBroadcastReply_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

struct RfnExpressComBroadcastReplyType {
  enum type {
    SUCCESS = 0,
    FAILURE = 1,
    NETWORK_TIMEOUT = 2,
    TIMEOUT = 3
  };
};

extern const std::map<int, const char*> _RfnExpressComBroadcastReplyType_VALUES_TO_NAMES;


class RfnExpressComBroadcastReply {
 public:

  static const char* ascii_fingerprint; // = "50873B81E3D960AE67A3309356F2AD62";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x87,0x3B,0x81,0xE3,0xD9,0x60,0xAE,0x67,0xA3,0x30,0x93,0x56,0xF2,0xAD,0x62};

  RfnExpressComBroadcastReply() {
  }

  virtual ~RfnExpressComBroadcastReply() throw() {}

  std::map<int64_t, RfnExpressComBroadcastReplyType::type>  status;

  void __set_status(const std::map<int64_t, RfnExpressComBroadcastReplyType::type> & val) {
    status = val;
  }

  bool operator == (const RfnExpressComBroadcastReply & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const RfnExpressComBroadcastReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnExpressComBroadcastReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnExpressComBroadcastReply &a, RfnExpressComBroadcastReply &b);

}}}} // namespace

#endif

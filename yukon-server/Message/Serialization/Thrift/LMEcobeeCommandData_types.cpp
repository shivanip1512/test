/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMEcobeeCommandData_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kLMEcobeeTemperatureTypesValues[] = {
  LMEcobeeTemperatureTypes::HEAT,
  LMEcobeeTemperatureTypes::COOL
};
const char* _kLMEcobeeTemperatureTypesNames[] = {
  "HEAT",
  "COOL"
};
const std::map<int, const char*> _LMEcobeeTemperatureTypes_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kLMEcobeeTemperatureTypesValues, _kLMEcobeeTemperatureTypesNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const LMEcobeeTemperatureTypes::type& val) {
  std::map<int, const char*>::const_iterator it = _LMEcobeeTemperatureTypes_VALUES_TO_NAMES.find(val);
  if (it != _LMEcobeeTemperatureTypes_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const LMEcobeeTemperatureTypes::type& val) {
  std::map<int, const char*>::const_iterator it = _LMEcobeeTemperatureTypes_VALUES_TO_NAMES.find(val);
  if (it != _LMEcobeeTemperatureTypes_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


LMEcobeeCycleControlCommand::~LMEcobeeCycleControlCommand() noexcept {
}


void LMEcobeeCycleControlCommand::__set__programId(const int32_t val) {
  this->_programId = val;
}

void LMEcobeeCycleControlCommand::__set__groupId(const int32_t val) {
  this->_groupId = val;
}

void LMEcobeeCycleControlCommand::__set__dutyCycle(const int32_t val) {
  this->_dutyCycle = val;
}

void LMEcobeeCycleControlCommand::__set__controlStartDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_controlStartDateTime = val;
}

void LMEcobeeCycleControlCommand::__set__controlEndDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_controlEndDateTime = val;
}

void LMEcobeeCycleControlCommand::__set__isMandatory(const bool val) {
  this->_isMandatory = val;
}

void LMEcobeeCycleControlCommand::__set__isRampInOut(const bool val) {
  this->_isRampInOut = val;
}
std::ostream& operator<<(std::ostream& out, const LMEcobeeCycleControlCommand& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LMEcobeeCycleControlCommand::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__programId = false;
  bool isset__groupId = false;
  bool isset__dutyCycle = false;
  bool isset__controlStartDateTime = false;
  bool isset__controlEndDateTime = false;
  bool isset__isMandatory = false;
  bool isset__isRampInOut = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_programId);
          isset__programId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_groupId);
          isset__groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_dutyCycle);
          isset__dutyCycle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlStartDateTime);
          isset__controlStartDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlEndDateTime);
          isset__controlEndDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_isMandatory);
          isset__isMandatory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_isRampInOut);
          isset__isRampInOut = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__programId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__groupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__dutyCycle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlStartDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlEndDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__isMandatory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__isRampInOut)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEcobeeCycleControlCommand::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LMEcobeeCycleControlCommand");

  xfer += oprot->writeFieldBegin("_programId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_programId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_groupId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_groupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_dutyCycle", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_dutyCycle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlStartDateTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_controlStartDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlEndDateTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->_controlEndDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_isMandatory", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->_isMandatory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_isRampInOut", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->_isRampInOut);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEcobeeCycleControlCommand &a, LMEcobeeCycleControlCommand &b) {
  using ::std::swap;
  swap(a._programId, b._programId);
  swap(a._groupId, b._groupId);
  swap(a._dutyCycle, b._dutyCycle);
  swap(a._controlStartDateTime, b._controlStartDateTime);
  swap(a._controlEndDateTime, b._controlEndDateTime);
  swap(a._isMandatory, b._isMandatory);
  swap(a._isRampInOut, b._isRampInOut);
}

LMEcobeeCycleControlCommand::LMEcobeeCycleControlCommand(const LMEcobeeCycleControlCommand& other0) noexcept {
  _programId = other0._programId;
  _groupId = other0._groupId;
  _dutyCycle = other0._dutyCycle;
  _controlStartDateTime = other0._controlStartDateTime;
  _controlEndDateTime = other0._controlEndDateTime;
  _isMandatory = other0._isMandatory;
  _isRampInOut = other0._isRampInOut;
}
LMEcobeeCycleControlCommand& LMEcobeeCycleControlCommand::operator=(const LMEcobeeCycleControlCommand& other1) noexcept {
  _programId = other1._programId;
  _groupId = other1._groupId;
  _dutyCycle = other1._dutyCycle;
  _controlStartDateTime = other1._controlStartDateTime;
  _controlEndDateTime = other1._controlEndDateTime;
  _isMandatory = other1._isMandatory;
  _isRampInOut = other1._isRampInOut;
  return *this;
}
void LMEcobeeCycleControlCommand::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LMEcobeeCycleControlCommand(";
  out << "_programId=" << to_string(_programId);
  out << ", " << "_groupId=" << to_string(_groupId);
  out << ", " << "_dutyCycle=" << to_string(_dutyCycle);
  out << ", " << "_controlStartDateTime=" << to_string(_controlStartDateTime);
  out << ", " << "_controlEndDateTime=" << to_string(_controlEndDateTime);
  out << ", " << "_isMandatory=" << to_string(_isMandatory);
  out << ", " << "_isRampInOut=" << to_string(_isRampInOut);
  out << ")";
}


LMEcobeeSetpointControlCommand::~LMEcobeeSetpointControlCommand() noexcept {
}


void LMEcobeeSetpointControlCommand::__set__programId(const int32_t val) {
  this->_programId = val;
}

void LMEcobeeSetpointControlCommand::__set__groupId(const int32_t val) {
  this->_groupId = val;
}

void LMEcobeeSetpointControlCommand::__set__controlStartDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_controlStartDateTime = val;
}

void LMEcobeeSetpointControlCommand::__set__controlEndDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_controlEndDateTime = val;
}

void LMEcobeeSetpointControlCommand::__set__temperatureOption(const LMEcobeeTemperatureTypes::type val) {
  this->_temperatureOption = val;
}

void LMEcobeeSetpointControlCommand::__set__isMandatory(const bool val) {
  this->_isMandatory = val;
}

void LMEcobeeSetpointControlCommand::__set__temperatureOffset(const int32_t val) {
  this->_temperatureOffset = val;
}
std::ostream& operator<<(std::ostream& out, const LMEcobeeSetpointControlCommand& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LMEcobeeSetpointControlCommand::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__programId = false;
  bool isset__groupId = false;
  bool isset__controlStartDateTime = false;
  bool isset__controlEndDateTime = false;
  bool isset__temperatureOption = false;
  bool isset__isMandatory = false;
  bool isset__temperatureOffset = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_programId);
          isset__programId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_groupId);
          isset__groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlStartDateTime);
          isset__controlStartDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlEndDateTime);
          isset__controlEndDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->_temperatureOption = static_cast<LMEcobeeTemperatureTypes::type>(ecast2);
          isset__temperatureOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_isMandatory);
          isset__isMandatory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_temperatureOffset);
          isset__temperatureOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__programId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__groupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlStartDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlEndDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__temperatureOption)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__isMandatory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__temperatureOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEcobeeSetpointControlCommand::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LMEcobeeSetpointControlCommand");

  xfer += oprot->writeFieldBegin("_programId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_programId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_groupId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_groupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlStartDateTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->_controlStartDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlEndDateTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_controlEndDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_temperatureOption", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(static_cast<int32_t>(this->_temperatureOption));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_isMandatory", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->_isMandatory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_temperatureOffset", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_temperatureOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEcobeeSetpointControlCommand &a, LMEcobeeSetpointControlCommand &b) {
  using ::std::swap;
  swap(a._programId, b._programId);
  swap(a._groupId, b._groupId);
  swap(a._controlStartDateTime, b._controlStartDateTime);
  swap(a._controlEndDateTime, b._controlEndDateTime);
  swap(a._temperatureOption, b._temperatureOption);
  swap(a._isMandatory, b._isMandatory);
  swap(a._temperatureOffset, b._temperatureOffset);
}

LMEcobeeSetpointControlCommand::LMEcobeeSetpointControlCommand(const LMEcobeeSetpointControlCommand& other3) noexcept {
  _programId = other3._programId;
  _groupId = other3._groupId;
  _controlStartDateTime = other3._controlStartDateTime;
  _controlEndDateTime = other3._controlEndDateTime;
  _temperatureOption = other3._temperatureOption;
  _isMandatory = other3._isMandatory;
  _temperatureOffset = other3._temperatureOffset;
}
LMEcobeeSetpointControlCommand& LMEcobeeSetpointControlCommand::operator=(const LMEcobeeSetpointControlCommand& other4) noexcept {
  _programId = other4._programId;
  _groupId = other4._groupId;
  _controlStartDateTime = other4._controlStartDateTime;
  _controlEndDateTime = other4._controlEndDateTime;
  _temperatureOption = other4._temperatureOption;
  _isMandatory = other4._isMandatory;
  _temperatureOffset = other4._temperatureOffset;
  return *this;
}
void LMEcobeeSetpointControlCommand::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LMEcobeeSetpointControlCommand(";
  out << "_programId=" << to_string(_programId);
  out << ", " << "_groupId=" << to_string(_groupId);
  out << ", " << "_controlStartDateTime=" << to_string(_controlStartDateTime);
  out << ", " << "_controlEndDateTime=" << to_string(_controlEndDateTime);
  out << ", " << "_temperatureOption=" << to_string(_temperatureOption);
  out << ", " << "_isMandatory=" << to_string(_isMandatory);
  out << ", " << "_temperatureOffset=" << to_string(_temperatureOffset);
  out << ")";
}


LMEcobeePlusControlCommand::~LMEcobeePlusControlCommand() noexcept {
}


void LMEcobeePlusControlCommand::__set__programId(const int32_t val) {
  this->_programId = val;
}

void LMEcobeePlusControlCommand::__set__groupId(const int32_t val) {
  this->_groupId = val;
}

void LMEcobeePlusControlCommand::__set__controlStartDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_controlStartDateTime = val;
}

void LMEcobeePlusControlCommand::__set__controlEndDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_controlEndDateTime = val;
}

void LMEcobeePlusControlCommand::__set__temperatureOption(const LMEcobeeTemperatureTypes::type val) {
  this->_temperatureOption = val;
}

void LMEcobeePlusControlCommand::__set__randomTimeSeconds(const int32_t val) {
  this->_randomTimeSeconds = val;
}
std::ostream& operator<<(std::ostream& out, const LMEcobeePlusControlCommand& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LMEcobeePlusControlCommand::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__programId = false;
  bool isset__groupId = false;
  bool isset__controlStartDateTime = false;
  bool isset__controlEndDateTime = false;
  bool isset__temperatureOption = false;
  bool isset__randomTimeSeconds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_programId);
          isset__programId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_groupId);
          isset__groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlStartDateTime);
          isset__controlStartDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlEndDateTime);
          isset__controlEndDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->_temperatureOption = static_cast<LMEcobeeTemperatureTypes::type>(ecast5);
          isset__temperatureOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_randomTimeSeconds);
          isset__randomTimeSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__programId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__groupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlStartDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlEndDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__temperatureOption)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__randomTimeSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEcobeePlusControlCommand::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LMEcobeePlusControlCommand");

  xfer += oprot->writeFieldBegin("_programId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_programId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_groupId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_groupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlStartDateTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->_controlStartDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlEndDateTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_controlEndDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_temperatureOption", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(static_cast<int32_t>(this->_temperatureOption));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_randomTimeSeconds", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_randomTimeSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEcobeePlusControlCommand &a, LMEcobeePlusControlCommand &b) {
  using ::std::swap;
  swap(a._programId, b._programId);
  swap(a._groupId, b._groupId);
  swap(a._controlStartDateTime, b._controlStartDateTime);
  swap(a._controlEndDateTime, b._controlEndDateTime);
  swap(a._temperatureOption, b._temperatureOption);
  swap(a._randomTimeSeconds, b._randomTimeSeconds);
}

LMEcobeePlusControlCommand::LMEcobeePlusControlCommand(const LMEcobeePlusControlCommand& other6) noexcept {
  _programId = other6._programId;
  _groupId = other6._groupId;
  _controlStartDateTime = other6._controlStartDateTime;
  _controlEndDateTime = other6._controlEndDateTime;
  _temperatureOption = other6._temperatureOption;
  _randomTimeSeconds = other6._randomTimeSeconds;
}
LMEcobeePlusControlCommand& LMEcobeePlusControlCommand::operator=(const LMEcobeePlusControlCommand& other7) noexcept {
  _programId = other7._programId;
  _groupId = other7._groupId;
  _controlStartDateTime = other7._controlStartDateTime;
  _controlEndDateTime = other7._controlEndDateTime;
  _temperatureOption = other7._temperatureOption;
  _randomTimeSeconds = other7._randomTimeSeconds;
  return *this;
}
void LMEcobeePlusControlCommand::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LMEcobeePlusControlCommand(";
  out << "_programId=" << to_string(_programId);
  out << ", " << "_groupId=" << to_string(_groupId);
  out << ", " << "_controlStartDateTime=" << to_string(_controlStartDateTime);
  out << ", " << "_controlEndDateTime=" << to_string(_controlEndDateTime);
  out << ", " << "_temperatureOption=" << to_string(_temperatureOption);
  out << ", " << "_randomTimeSeconds=" << to_string(_randomTimeSeconds);
  out << ")";
}


LMEcobeeRestore::~LMEcobeeRestore() noexcept {
}


void LMEcobeeRestore::__set__groupId(const int32_t val) {
  this->_groupId = val;
}

void LMEcobeeRestore::__set__restoreTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_restoreTime = val;
}
std::ostream& operator<<(std::ostream& out, const LMEcobeeRestore& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LMEcobeeRestore::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__groupId = false;
  bool isset__restoreTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_groupId);
          isset__groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_restoreTime);
          isset__restoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__groupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__restoreTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMEcobeeRestore::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LMEcobeeRestore");

  xfer += oprot->writeFieldBegin("_groupId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_groupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_restoreTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->_restoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMEcobeeRestore &a, LMEcobeeRestore &b) {
  using ::std::swap;
  swap(a._groupId, b._groupId);
  swap(a._restoreTime, b._restoreTime);
}

LMEcobeeRestore::LMEcobeeRestore(const LMEcobeeRestore& other8) noexcept {
  _groupId = other8._groupId;
  _restoreTime = other8._restoreTime;
}
LMEcobeeRestore& LMEcobeeRestore::operator=(const LMEcobeeRestore& other9) noexcept {
  _groupId = other9._groupId;
  _restoreTime = other9._restoreTime;
  return *this;
}
void LMEcobeeRestore::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LMEcobeeRestore(";
  out << "_groupId=" << to_string(_groupId);
  out << ", " << "_restoreTime=" << to_string(_restoreTime);
  out << ")";
}

}}}} // namespace

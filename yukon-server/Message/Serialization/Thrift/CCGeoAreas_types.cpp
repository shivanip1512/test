/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CCGeoAreas_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


CCArea::~CCArea() noexcept {
}


void CCArea::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val) {
  this->_baseMessage = val;
}

void CCArea::__set__ovUvDisabledFlag(const bool val) {
  this->_ovUvDisabledFlag = val;
}

void CCArea::__set__substationIds(const std::vector<int32_t> & val) {
  this->_substationIds = val;
}

void CCArea::__set__pfDisplayValue(const double val) {
  this->_pfDisplayValue = val;
}

void CCArea::__set__estPfDisplayValue(const double val) {
  this->_estPfDisplayValue = val;
}

void CCArea::__set__voltReductionControlValue(const bool val) {
  this->_voltReductionControlValue = val;
}

void CCArea::__set__childVoltReductionFlag(const bool val) {
  this->_childVoltReductionFlag = val;
}
std::ostream& operator<<(std::ostream& out, const CCArea& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CCArea::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__ovUvDisabledFlag = false;
  bool isset__substationIds = false;
  bool isset__pfDisplayValue = false;
  bool isset__estPfDisplayValue = false;
  bool isset__voltReductionControlValue = false;
  bool isset__childVoltReductionFlag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_ovUvDisabledFlag);
          isset__ovUvDisabledFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_substationIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_substationIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->_substationIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset__substationIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_pfDisplayValue);
          isset__pfDisplayValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_estPfDisplayValue);
          isset__estPfDisplayValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_voltReductionControlValue);
          isset__voltReductionControlValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_childVoltReductionFlag);
          isset__childVoltReductionFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ovUvDisabledFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__substationIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pfDisplayValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estPfDisplayValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__voltReductionControlValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__childVoltReductionFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCArea::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CCArea");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ovUvDisabledFlag", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->_ovUvDisabledFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_substationIds", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_substationIds.size()));
    std::vector<int32_t> ::const_iterator _iter5;
    for (_iter5 = this->_substationIds.begin(); _iter5 != this->_substationIds.end(); ++_iter5)
    {
      xfer += oprot->writeI32((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pfDisplayValue", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->_pfDisplayValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estPfDisplayValue", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->_estPfDisplayValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_voltReductionControlValue", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->_voltReductionControlValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_childVoltReductionFlag", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->_childVoltReductionFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCArea &a, CCArea &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._ovUvDisabledFlag, b._ovUvDisabledFlag);
  swap(a._substationIds, b._substationIds);
  swap(a._pfDisplayValue, b._pfDisplayValue);
  swap(a._estPfDisplayValue, b._estPfDisplayValue);
  swap(a._voltReductionControlValue, b._voltReductionControlValue);
  swap(a._childVoltReductionFlag, b._childVoltReductionFlag);
}

CCArea::CCArea(const CCArea& other6) {
  _baseMessage = other6._baseMessage;
  _ovUvDisabledFlag = other6._ovUvDisabledFlag;
  _substationIds = other6._substationIds;
  _pfDisplayValue = other6._pfDisplayValue;
  _estPfDisplayValue = other6._estPfDisplayValue;
  _voltReductionControlValue = other6._voltReductionControlValue;
  _childVoltReductionFlag = other6._childVoltReductionFlag;
}
CCArea& CCArea::operator=(const CCArea& other7) {
  _baseMessage = other7._baseMessage;
  _ovUvDisabledFlag = other7._ovUvDisabledFlag;
  _substationIds = other7._substationIds;
  _pfDisplayValue = other7._pfDisplayValue;
  _estPfDisplayValue = other7._estPfDisplayValue;
  _voltReductionControlValue = other7._voltReductionControlValue;
  _childVoltReductionFlag = other7._childVoltReductionFlag;
  return *this;
}
void CCArea::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CCArea(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_ovUvDisabledFlag=" << to_string(_ovUvDisabledFlag);
  out << ", " << "_substationIds=" << to_string(_substationIds);
  out << ", " << "_pfDisplayValue=" << to_string(_pfDisplayValue);
  out << ", " << "_estPfDisplayValue=" << to_string(_estPfDisplayValue);
  out << ", " << "_voltReductionControlValue=" << to_string(_voltReductionControlValue);
  out << ", " << "_childVoltReductionFlag=" << to_string(_childVoltReductionFlag);
  out << ")";
}


CCGeoAreas::~CCGeoAreas() noexcept {
}


void CCGeoAreas::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val) {
  this->_baseMessage = val;
}

void CCGeoAreas::__set__msgInfoBitMask(const int32_t val) {
  this->_msgInfoBitMask = val;
}

void CCGeoAreas::__set__ccGeoAreas(const std::vector<CCArea> & val) {
  this->_ccGeoAreas = val;
}
std::ostream& operator<<(std::ostream& out, const CCGeoAreas& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CCGeoAreas::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__msgInfoBitMask = false;
  bool isset__ccGeoAreas = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_msgInfoBitMask);
          isset__msgInfoBitMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_ccGeoAreas.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->_ccGeoAreas.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->_ccGeoAreas[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__ccGeoAreas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__msgInfoBitMask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ccGeoAreas)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCGeoAreas::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CCGeoAreas");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_msgInfoBitMask", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_msgInfoBitMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ccGeoAreas", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_ccGeoAreas.size()));
    std::vector<CCArea> ::const_iterator _iter13;
    for (_iter13 = this->_ccGeoAreas.begin(); _iter13 != this->_ccGeoAreas.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCGeoAreas &a, CCGeoAreas &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._msgInfoBitMask, b._msgInfoBitMask);
  swap(a._ccGeoAreas, b._ccGeoAreas);
}

CCGeoAreas::CCGeoAreas(const CCGeoAreas& other14) {
  _baseMessage = other14._baseMessage;
  _msgInfoBitMask = other14._msgInfoBitMask;
  _ccGeoAreas = other14._ccGeoAreas;
}
CCGeoAreas& CCGeoAreas::operator=(const CCGeoAreas& other15) {
  _baseMessage = other15._baseMessage;
  _msgInfoBitMask = other15._msgInfoBitMask;
  _ccGeoAreas = other15._ccGeoAreas;
  return *this;
}
void CCGeoAreas::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CCGeoAreas(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_msgInfoBitMask=" << to_string(_msgInfoBitMask);
  out << ", " << "_ccGeoAreas=" << to_string(_ccGeoAreas);
  out << ")";
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Command_TYPES_H
#define Command_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class Command;


class Command : public virtual ::apache::thrift::TBase {
 public:

  Command(const Command&);
  Command& operator=(const Command&);
  Command() : _operation(0), _opString(), _opArgCount(0) {
  }

  virtual ~Command() throw();
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _operation;
  std::string _opString;
  int32_t _opArgCount;
  std::vector<int32_t>  _opArgList;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__operation(const int32_t val);

  void __set__opString(const std::string& val);

  void __set__opArgCount(const int32_t val);

  void __set__opArgList(const std::vector<int32_t> & val);

  bool operator == (const Command & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_operation == rhs._operation))
      return false;
    if (!(_opString == rhs._opString))
      return false;
    if (!(_opArgCount == rhs._opArgCount))
      return false;
    if (!(_opArgList == rhs._opArgList))
      return false;
    return true;
  }
  bool operator != (const Command &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Command & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Command &a, Command &b);

std::ostream& operator<<(std::ostream& out, const Command& obj);

}}}} // namespace

#endif

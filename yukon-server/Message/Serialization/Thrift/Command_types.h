/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Command_TYPES_H
#define Command_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class Command {
 public:

  static const char* ascii_fingerprint; // = "ADDD212E4EDFECB9D0C225C742CFF59D";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0xDD,0x21,0x2E,0x4E,0xDF,0xEC,0xB9,0xD0,0xC2,0x25,0xC7,0x42,0xCF,0xF5,0x9D};

  Command() : _operation(0), _opString(), _opArgCount(0) {
  }

  virtual ~Command() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _operation;
  std::string _opString;
  int32_t _opArgCount;
  std::vector<int32_t>  _opArgList;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__operation(const int32_t val) {
    _operation = val;
  }

  void __set__opString(const std::string& val) {
    _opString = val;
  }

  void __set__opArgCount(const int32_t val) {
    _opArgCount = val;
  }

  void __set__opArgList(const std::vector<int32_t> & val) {
    _opArgList = val;
  }

  bool operator == (const Command & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_operation == rhs._operation))
      return false;
    if (!(_opString == rhs._opString))
      return false;
    if (!(_opArgCount == rhs._opArgCount))
      return false;
    if (!(_opArgList == rhs._opArgList))
      return false;
    return true;
  }
  bool operator != (const Command &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Command & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Command &a, Command &b);

}}}} // namespace

#endif

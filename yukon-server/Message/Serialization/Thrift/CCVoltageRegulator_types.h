/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCVoltageRegulator_TYPES_H
#define CCVoltageRegulator_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCMessage_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCVoltageRegulatorItem {
 public:

  static const char* ascii_fingerprint; // = "D87F3EE58AAEAB56DCFDFAC674FC0E27";
  static const uint8_t binary_fingerprint[16]; // = {0xD8,0x7F,0x3E,0xE5,0x8A,0xAE,0xAB,0x56,0xDC,0xFD,0xFA,0xC6,0x74,0xFC,0x0E,0x27};

  CCVoltageRegulatorItem() : _parentId(0), _lastTapOperation(0), _lastTapOperationTime(0), _regulatorType(0), _recentTapOperation(0), _lastOperatingMode(0), _lastCommandedOperatingMode(0) {
  }

  virtual ~CCVoltageRegulatorItem() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCPao _baseMessage;
  int32_t _parentId;
  int32_t _lastTapOperation;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _lastTapOperationTime;
  int32_t _regulatorType;
  bool _recentTapOperation;
  int32_t _lastOperatingMode;
  int32_t _lastCommandedOperatingMode;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val) {
    _baseMessage = val;
  }

  void __set__parentId(const int32_t val) {
    _parentId = val;
  }

  void __set__lastTapOperation(const int32_t val) {
    _lastTapOperation = val;
  }

  void __set__lastTapOperationTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _lastTapOperationTime = val;
  }

  void __set__regulatorType(const int32_t val) {
    _regulatorType = val;
  }

  void __set__recentTapOperation(const bool val) {
    _recentTapOperation = val;
  }

  void __set__lastOperatingMode(const int32_t val) {
    _lastOperatingMode = val;
  }

  void __set__lastCommandedOperatingMode(const int32_t val) {
    _lastCommandedOperatingMode = val;
  }

  bool operator == (const CCVoltageRegulatorItem & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_parentId == rhs._parentId))
      return false;
    if (!(_lastTapOperation == rhs._lastTapOperation))
      return false;
    if (!(_lastTapOperationTime == rhs._lastTapOperationTime))
      return false;
    if (!(_regulatorType == rhs._regulatorType))
      return false;
    if (!(_recentTapOperation == rhs._recentTapOperation))
      return false;
    if (!(_lastOperatingMode == rhs._lastOperatingMode))
      return false;
    if (!(_lastCommandedOperatingMode == rhs._lastCommandedOperatingMode))
      return false;
    return true;
  }
  bool operator != (const CCVoltageRegulatorItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCVoltageRegulatorItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCVoltageRegulatorItem &a, CCVoltageRegulatorItem &b);


class CCVoltageRegulator {
 public:

  static const char* ascii_fingerprint; // = "8EA7C2F999318C547258E15992316C3B";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xA7,0xC2,0xF9,0x99,0x31,0x8C,0x54,0x72,0x58,0xE1,0x59,0x92,0x31,0x6C,0x3B};

  CCVoltageRegulator() {
  }

  virtual ~CCVoltageRegulator() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  std::vector<CCVoltageRegulatorItem>  _regulators;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val) {
    _baseMessage = val;
  }

  void __set__regulators(const std::vector<CCVoltageRegulatorItem> & val) {
    _regulators = val;
  }

  bool operator == (const CCVoltageRegulator & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_regulators == rhs._regulators))
      return false;
    return true;
  }
  bool operator != (const CCVoltageRegulator &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCVoltageRegulator & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCVoltageRegulator &a, CCVoltageRegulator &b);

}}}} // namespace

#endif

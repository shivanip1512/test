/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCVoltageRegulator_TYPES_H
#define CCVoltageRegulator_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "CCMessage_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class CCVoltageRegulatorItem;

class CCVoltageRegulator;


class CCVoltageRegulatorItem : public virtual ::apache::thrift::TBase {
 public:

  CCVoltageRegulatorItem(const CCVoltageRegulatorItem&);
  CCVoltageRegulatorItem& operator=(const CCVoltageRegulatorItem&);
  CCVoltageRegulatorItem() : _parentId(0), _lastTapOperation(0), _lastTapOperationTime(0), _regulatorType(0), _recentTapOperation(0), _lastOperatingMode(0), _lastCommandedOperatingMode(0) {
  }

  virtual ~CCVoltageRegulatorItem() noexcept;
   ::Cti::Messaging::Serialization::Thrift::CCPao _baseMessage;
  int32_t _parentId;
  int32_t _lastTapOperation;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _lastTapOperationTime;
  int32_t _regulatorType;
  bool _recentTapOperation;
  int32_t _lastOperatingMode;
  int32_t _lastCommandedOperatingMode;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val);

  void __set__parentId(const int32_t val);

  void __set__lastTapOperation(const int32_t val);

  void __set__lastTapOperationTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__regulatorType(const int32_t val);

  void __set__recentTapOperation(const bool val);

  void __set__lastOperatingMode(const int32_t val);

  void __set__lastCommandedOperatingMode(const int32_t val);

  bool operator == (const CCVoltageRegulatorItem & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_parentId == rhs._parentId))
      return false;
    if (!(_lastTapOperation == rhs._lastTapOperation))
      return false;
    if (!(_lastTapOperationTime == rhs._lastTapOperationTime))
      return false;
    if (!(_regulatorType == rhs._regulatorType))
      return false;
    if (!(_recentTapOperation == rhs._recentTapOperation))
      return false;
    if (!(_lastOperatingMode == rhs._lastOperatingMode))
      return false;
    if (!(_lastCommandedOperatingMode == rhs._lastCommandedOperatingMode))
      return false;
    return true;
  }
  bool operator != (const CCVoltageRegulatorItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCVoltageRegulatorItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCVoltageRegulatorItem &a, CCVoltageRegulatorItem &b);

std::ostream& operator<<(std::ostream& out, const CCVoltageRegulatorItem& obj);


class CCVoltageRegulator : public virtual ::apache::thrift::TBase {
 public:

  CCVoltageRegulator(const CCVoltageRegulator&);
  CCVoltageRegulator& operator=(const CCVoltageRegulator&);
  CCVoltageRegulator() {
  }

  virtual ~CCVoltageRegulator() noexcept;
   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  std::vector<CCVoltageRegulatorItem>  _regulators;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val);

  void __set__regulators(const std::vector<CCVoltageRegulatorItem> & val);

  bool operator == (const CCVoltageRegulator & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_regulators == rhs._regulators))
      return false;
    return true;
  }
  bool operator != (const CCVoltageRegulator &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCVoltageRegulator & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCVoltageRegulator &a, CCVoltageRegulator &b);

std::ostream& operator<<(std::ostream& out, const CCVoltageRegulator& obj);

}}}} // namespace

#endif

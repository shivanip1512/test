/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMDynamicGroupData_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


LMDynamicGroupData::~LMDynamicGroupData() noexcept {
}


void LMDynamicGroupData::__set__paoId(const int32_t val) {
  this->_paoId = val;
}

void LMDynamicGroupData::__set__disableFlag(const bool val) {
  this->_disableFlag = val;
}

void LMDynamicGroupData::__set__groupControlState(const int32_t val) {
  this->_groupControlState = val;
}

void LMDynamicGroupData::__set__currentHoursDaily(const int32_t val) {
  this->_currentHoursDaily = val;
}

void LMDynamicGroupData::__set__currentHoursMonthly(const int32_t val) {
  this->_currentHoursMonthly = val;
}

void LMDynamicGroupData::__set__currentHoursSeasonal(const int32_t val) {
  this->_currentHoursSeasonal = val;
}

void LMDynamicGroupData::__set__currentHoursAnnually(const int32_t val) {
  this->_currentHoursAnnually = val;
}

void LMDynamicGroupData::__set__lastControlSent(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_lastControlSent = val;
}

void LMDynamicGroupData::__set__controlStartTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_controlStartTime = val;
}

void LMDynamicGroupData::__set__controlCompleteTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_controlCompleteTime = val;
}

void LMDynamicGroupData::__set__nextControlTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_nextControlTime = val;
}

void LMDynamicGroupData::__set__internalState(const int32_t val) {
  this->_internalState = val;
}

void LMDynamicGroupData::__set__dailyOps(const int32_t val) {
  this->_dailyOps = val;
}
std::ostream& operator<<(std::ostream& out, const LMDynamicGroupData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LMDynamicGroupData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__disableFlag = false;
  bool isset__groupControlState = false;
  bool isset__currentHoursDaily = false;
  bool isset__currentHoursMonthly = false;
  bool isset__currentHoursSeasonal = false;
  bool isset__currentHoursAnnually = false;
  bool isset__lastControlSent = false;
  bool isset__controlStartTime = false;
  bool isset__controlCompleteTime = false;
  bool isset__nextControlTime = false;
  bool isset__internalState = false;
  bool isset__dailyOps = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_disableFlag);
          isset__disableFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_groupControlState);
          isset__groupControlState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentHoursDaily);
          isset__currentHoursDaily = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentHoursMonthly);
          isset__currentHoursMonthly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentHoursSeasonal);
          isset__currentHoursSeasonal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentHoursAnnually);
          isset__currentHoursAnnually = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastControlSent);
          isset__lastControlSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlStartTime);
          isset__controlStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_controlCompleteTime);
          isset__controlCompleteTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_nextControlTime);
          isset__nextControlTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_internalState);
          isset__internalState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_dailyOps);
          isset__dailyOps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__disableFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__groupControlState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentHoursDaily)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentHoursMonthly)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentHoursSeasonal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentHoursAnnually)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastControlSent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlCompleteTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__nextControlTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__internalState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__dailyOps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMDynamicGroupData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LMDynamicGroupData");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_disableFlag", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->_disableFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_groupControlState", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_groupControlState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentHoursDaily", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_currentHoursDaily);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentHoursMonthly", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_currentHoursMonthly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentHoursSeasonal", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_currentHoursSeasonal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentHoursAnnually", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_currentHoursAnnually);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastControlSent", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->_lastControlSent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlStartTime", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->_controlStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlCompleteTime", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->_controlCompleteTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_nextControlTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->_nextControlTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_internalState", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->_internalState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_dailyOps", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->_dailyOps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMDynamicGroupData &a, LMDynamicGroupData &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._disableFlag, b._disableFlag);
  swap(a._groupControlState, b._groupControlState);
  swap(a._currentHoursDaily, b._currentHoursDaily);
  swap(a._currentHoursMonthly, b._currentHoursMonthly);
  swap(a._currentHoursSeasonal, b._currentHoursSeasonal);
  swap(a._currentHoursAnnually, b._currentHoursAnnually);
  swap(a._lastControlSent, b._lastControlSent);
  swap(a._controlStartTime, b._controlStartTime);
  swap(a._controlCompleteTime, b._controlCompleteTime);
  swap(a._nextControlTime, b._nextControlTime);
  swap(a._internalState, b._internalState);
  swap(a._dailyOps, b._dailyOps);
}

LMDynamicGroupData::LMDynamicGroupData(const LMDynamicGroupData& other0) {
  _paoId = other0._paoId;
  _disableFlag = other0._disableFlag;
  _groupControlState = other0._groupControlState;
  _currentHoursDaily = other0._currentHoursDaily;
  _currentHoursMonthly = other0._currentHoursMonthly;
  _currentHoursSeasonal = other0._currentHoursSeasonal;
  _currentHoursAnnually = other0._currentHoursAnnually;
  _lastControlSent = other0._lastControlSent;
  _controlStartTime = other0._controlStartTime;
  _controlCompleteTime = other0._controlCompleteTime;
  _nextControlTime = other0._nextControlTime;
  _internalState = other0._internalState;
  _dailyOps = other0._dailyOps;
}
LMDynamicGroupData& LMDynamicGroupData::operator=(const LMDynamicGroupData& other1) {
  _paoId = other1._paoId;
  _disableFlag = other1._disableFlag;
  _groupControlState = other1._groupControlState;
  _currentHoursDaily = other1._currentHoursDaily;
  _currentHoursMonthly = other1._currentHoursMonthly;
  _currentHoursSeasonal = other1._currentHoursSeasonal;
  _currentHoursAnnually = other1._currentHoursAnnually;
  _lastControlSent = other1._lastControlSent;
  _controlStartTime = other1._controlStartTime;
  _controlCompleteTime = other1._controlCompleteTime;
  _nextControlTime = other1._nextControlTime;
  _internalState = other1._internalState;
  _dailyOps = other1._dailyOps;
  return *this;
}
void LMDynamicGroupData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LMDynamicGroupData(";
  out << "_paoId=" << to_string(_paoId);
  out << ", " << "_disableFlag=" << to_string(_disableFlag);
  out << ", " << "_groupControlState=" << to_string(_groupControlState);
  out << ", " << "_currentHoursDaily=" << to_string(_currentHoursDaily);
  out << ", " << "_currentHoursMonthly=" << to_string(_currentHoursMonthly);
  out << ", " << "_currentHoursSeasonal=" << to_string(_currentHoursSeasonal);
  out << ", " << "_currentHoursAnnually=" << to_string(_currentHoursAnnually);
  out << ", " << "_lastControlSent=" << to_string(_lastControlSent);
  out << ", " << "_controlStartTime=" << to_string(_controlStartTime);
  out << ", " << "_controlCompleteTime=" << to_string(_controlCompleteTime);
  out << ", " << "_nextControlTime=" << to_string(_nextControlTime);
  out << ", " << "_internalState=" << to_string(_internalState);
  out << ", " << "_dailyOps=" << to_string(_dailyOps);
  out << ")";
}

}}}} // namespace

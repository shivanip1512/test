/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CCSubstationBus_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


CCCapBank::~CCCapBank() throw() {
}


void CCCapBank::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val) {
  this->_baseMessage = val;
}

void CCCapBank::__set__parentId(const int32_t val) {
  this->_parentId = val;
}

void CCCapBank::__set__maxDailyOps(const int32_t val) {
  this->_maxDailyOps = val;
}

void CCCapBank::__set__maxOpsDisableFlag(const bool val) {
  this->_maxOpsDisableFlag = val;
}

void CCCapBank::__set__alarmInhibitFlag(const bool val) {
  this->_alarmInhibitFlag = val;
}

void CCCapBank::__set__controlInhibitFlag(const bool val) {
  this->_controlInhibitFlag = val;
}

void CCCapBank::__set__operationalState(const std::string& val) {
  this->_operationalState = val;
}

void CCCapBank::__set__controllerType(const std::string& val) {
  this->_controllerType = val;
}

void CCCapBank::__set__controlDeviceId(const int32_t val) {
  this->_controlDeviceId = val;
}

void CCCapBank::__set__bankSize(const int32_t val) {
  this->_bankSize = val;
}

void CCCapBank::__set__typeOfSwitch(const std::string& val) {
  this->_typeOfSwitch = val;
}

void CCCapBank::__set__switchManufacture(const std::string& val) {
  this->_switchManufacture = val;
}

void CCCapBank::__set__mapLocationId(const std::string& val) {
  this->_mapLocationId = val;
}

void CCCapBank::__set__recloseDelay(const int32_t val) {
  this->_recloseDelay = val;
}

void CCCapBank::__set__controlOrder(const double val) {
  this->_controlOrder = val;
}

void CCCapBank::__set__statusPointId(const int32_t val) {
  this->_statusPointId = val;
}

void CCCapBank::__set__controlStatus(const int32_t val) {
  this->_controlStatus = val;
}

void CCCapBank::__set__operationAnalogPointId(const int32_t val) {
  this->_operationAnalogPointId = val;
}

void CCCapBank::__set__totalOperations(const int32_t val) {
  this->_totalOperations = val;
}

void CCCapBank::__set__lastStatusChangeTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_lastStatusChangeTime = val;
}

void CCCapBank::__set__tagsControlStatus(const int32_t val) {
  this->_tagsControlStatus = val;
}

void CCCapBank::__set__originalParentId(const int32_t val) {
  this->_originalParentId = val;
}

void CCCapBank::__set__currentDailyOperations(const int32_t val) {
  this->_currentDailyOperations = val;
}

void CCCapBank::__set__ignoreFlag(const bool val) {
  this->_ignoreFlag = val;
}

void CCCapBank::__set__ignoreReason(const int32_t val) {
  this->_ignoreReason = val;
}

void CCCapBank::__set__ovUvDisabledFlag(const bool val) {
  this->_ovUvDisabledFlag = val;
}

void CCCapBank::__set__tripOrder(const double val) {
  this->_tripOrder = val;
}

void CCCapBank::__set__closeOrder(const double val) {
  this->_closeOrder = val;
}

void CCCapBank::__set__controlDeviceType(const std::string& val) {
  this->_controlDeviceType = val;
}

void CCCapBank::__set__sBeforeVars(const std::string& val) {
  this->_sBeforeVars = val;
}

void CCCapBank::__set__sAfterVars(const std::string& val) {
  this->_sAfterVars = val;
}

void CCCapBank::__set__sPercentChange(const std::string& val) {
  this->_sPercentChange = val;
}

void CCCapBank::__set__maxDailyOpsHitFlag(const bool val) {
  this->_maxDailyOpsHitFlag = val;
}

void CCCapBank::__set__ovUvSituationFlag(const bool val) {
  this->_ovUvSituationFlag = val;
}

void CCCapBank::__set__controlStatusQuality(const int32_t val) {
  this->_controlStatusQuality = val;
}

void CCCapBank::__set__localControlFlag(const bool val) {
  this->_localControlFlag = val;
}

void CCCapBank::__set__partialPhaseInfo(const std::string& val) {
  this->_partialPhaseInfo = val;
}
std::ostream& operator<<(std::ostream& out, const CCCapBank& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CCCapBank::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__parentId = false;
  bool isset__maxDailyOps = false;
  bool isset__maxOpsDisableFlag = false;
  bool isset__alarmInhibitFlag = false;
  bool isset__controlInhibitFlag = false;
  bool isset__operationalState = false;
  bool isset__controllerType = false;
  bool isset__controlDeviceId = false;
  bool isset__bankSize = false;
  bool isset__typeOfSwitch = false;
  bool isset__switchManufacture = false;
  bool isset__mapLocationId = false;
  bool isset__recloseDelay = false;
  bool isset__controlOrder = false;
  bool isset__statusPointId = false;
  bool isset__controlStatus = false;
  bool isset__operationAnalogPointId = false;
  bool isset__totalOperations = false;
  bool isset__lastStatusChangeTime = false;
  bool isset__tagsControlStatus = false;
  bool isset__originalParentId = false;
  bool isset__currentDailyOperations = false;
  bool isset__ignoreFlag = false;
  bool isset__ignoreReason = false;
  bool isset__ovUvDisabledFlag = false;
  bool isset__tripOrder = false;
  bool isset__closeOrder = false;
  bool isset__controlDeviceType = false;
  bool isset__sBeforeVars = false;
  bool isset__sAfterVars = false;
  bool isset__sPercentChange = false;
  bool isset__maxDailyOpsHitFlag = false;
  bool isset__ovUvSituationFlag = false;
  bool isset__controlStatusQuality = false;
  bool isset__localControlFlag = false;
  bool isset__partialPhaseInfo = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_parentId);
          isset__parentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_maxDailyOps);
          isset__maxDailyOps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_maxOpsDisableFlag);
          isset__maxOpsDisableFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_alarmInhibitFlag);
          isset__alarmInhibitFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_controlInhibitFlag);
          isset__controlInhibitFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_operationalState);
          isset__operationalState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_controllerType);
          isset__controllerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_controlDeviceId);
          isset__controlDeviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_bankSize);
          isset__bankSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_typeOfSwitch);
          isset__typeOfSwitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_switchManufacture);
          isset__switchManufacture = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_mapLocationId);
          isset__mapLocationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_recloseDelay);
          isset__recloseDelay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_controlOrder);
          isset__controlOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_statusPointId);
          isset__statusPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_controlStatus);
          isset__controlStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_operationAnalogPointId);
          isset__operationAnalogPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_totalOperations);
          isset__totalOperations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastStatusChangeTime);
          isset__lastStatusChangeTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_tagsControlStatus);
          isset__tagsControlStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_originalParentId);
          isset__originalParentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentDailyOperations);
          isset__currentDailyOperations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_ignoreFlag);
          isset__ignoreFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_ignoreReason);
          isset__ignoreReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_ovUvDisabledFlag);
          isset__ovUvDisabledFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_tripOrder);
          isset__tripOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_closeOrder);
          isset__closeOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_controlDeviceType);
          isset__controlDeviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_sBeforeVars);
          isset__sBeforeVars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_sAfterVars);
          isset__sAfterVars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_sPercentChange);
          isset__sPercentChange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_maxDailyOpsHitFlag);
          isset__maxDailyOpsHitFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_ovUvSituationFlag);
          isset__ovUvSituationFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_controlStatusQuality);
          isset__controlStatusQuality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_localControlFlag);
          isset__localControlFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_partialPhaseInfo);
          isset__partialPhaseInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__parentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__maxDailyOps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__maxOpsDisableFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__alarmInhibitFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlInhibitFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__operationalState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controllerType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlDeviceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__bankSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__typeOfSwitch)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__switchManufacture)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__mapLocationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__recloseDelay)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__statusPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__operationAnalogPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__totalOperations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastStatusChangeTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__tagsControlStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__originalParentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentDailyOperations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ignoreFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ignoreReason)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ovUvDisabledFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__tripOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__closeOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlDeviceType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__sBeforeVars)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__sAfterVars)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__sPercentChange)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__maxDailyOpsHitFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ovUvSituationFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__controlStatusQuality)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__localControlFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__partialPhaseInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCCapBank::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CCCapBank");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_parentId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_parentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_maxDailyOps", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_maxDailyOps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_maxOpsDisableFlag", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->_maxOpsDisableFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_alarmInhibitFlag", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->_alarmInhibitFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlInhibitFlag", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->_controlInhibitFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_operationalState", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_operationalState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controllerType", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_controllerType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlDeviceId", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->_controlDeviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_bankSize", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->_bankSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_typeOfSwitch", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->_typeOfSwitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_switchManufacture", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->_switchManufacture);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_mapLocationId", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->_mapLocationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_recloseDelay", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->_recloseDelay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlOrder", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->_controlOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_statusPointId", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->_statusPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlStatus", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->_controlStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_operationAnalogPointId", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->_operationAnalogPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_totalOperations", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->_totalOperations);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastStatusChangeTime", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->_lastStatusChangeTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_tagsControlStatus", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->_tagsControlStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_originalParentId", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->_originalParentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentDailyOperations", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->_currentDailyOperations);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ignoreFlag", ::apache::thrift::protocol::T_BOOL, 24);
  xfer += oprot->writeBool(this->_ignoreFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ignoreReason", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->_ignoreReason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ovUvDisabledFlag", ::apache::thrift::protocol::T_BOOL, 26);
  xfer += oprot->writeBool(this->_ovUvDisabledFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_tripOrder", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->_tripOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_closeOrder", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->_closeOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlDeviceType", ::apache::thrift::protocol::T_STRING, 29);
  xfer += oprot->writeString(this->_controlDeviceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_sBeforeVars", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->_sBeforeVars);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_sAfterVars", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->_sAfterVars);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_sPercentChange", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->_sPercentChange);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_maxDailyOpsHitFlag", ::apache::thrift::protocol::T_BOOL, 33);
  xfer += oprot->writeBool(this->_maxDailyOpsHitFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ovUvSituationFlag", ::apache::thrift::protocol::T_BOOL, 34);
  xfer += oprot->writeBool(this->_ovUvSituationFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_controlStatusQuality", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->_controlStatusQuality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_localControlFlag", ::apache::thrift::protocol::T_BOOL, 36);
  xfer += oprot->writeBool(this->_localControlFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_partialPhaseInfo", ::apache::thrift::protocol::T_STRING, 37);
  xfer += oprot->writeString(this->_partialPhaseInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCCapBank &a, CCCapBank &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._parentId, b._parentId);
  swap(a._maxDailyOps, b._maxDailyOps);
  swap(a._maxOpsDisableFlag, b._maxOpsDisableFlag);
  swap(a._alarmInhibitFlag, b._alarmInhibitFlag);
  swap(a._controlInhibitFlag, b._controlInhibitFlag);
  swap(a._operationalState, b._operationalState);
  swap(a._controllerType, b._controllerType);
  swap(a._controlDeviceId, b._controlDeviceId);
  swap(a._bankSize, b._bankSize);
  swap(a._typeOfSwitch, b._typeOfSwitch);
  swap(a._switchManufacture, b._switchManufacture);
  swap(a._mapLocationId, b._mapLocationId);
  swap(a._recloseDelay, b._recloseDelay);
  swap(a._controlOrder, b._controlOrder);
  swap(a._statusPointId, b._statusPointId);
  swap(a._controlStatus, b._controlStatus);
  swap(a._operationAnalogPointId, b._operationAnalogPointId);
  swap(a._totalOperations, b._totalOperations);
  swap(a._lastStatusChangeTime, b._lastStatusChangeTime);
  swap(a._tagsControlStatus, b._tagsControlStatus);
  swap(a._originalParentId, b._originalParentId);
  swap(a._currentDailyOperations, b._currentDailyOperations);
  swap(a._ignoreFlag, b._ignoreFlag);
  swap(a._ignoreReason, b._ignoreReason);
  swap(a._ovUvDisabledFlag, b._ovUvDisabledFlag);
  swap(a._tripOrder, b._tripOrder);
  swap(a._closeOrder, b._closeOrder);
  swap(a._controlDeviceType, b._controlDeviceType);
  swap(a._sBeforeVars, b._sBeforeVars);
  swap(a._sAfterVars, b._sAfterVars);
  swap(a._sPercentChange, b._sPercentChange);
  swap(a._maxDailyOpsHitFlag, b._maxDailyOpsHitFlag);
  swap(a._ovUvSituationFlag, b._ovUvSituationFlag);
  swap(a._controlStatusQuality, b._controlStatusQuality);
  swap(a._localControlFlag, b._localControlFlag);
  swap(a._partialPhaseInfo, b._partialPhaseInfo);
}

CCCapBank::CCCapBank(const CCCapBank& other0) {
  _baseMessage = other0._baseMessage;
  _parentId = other0._parentId;
  _maxDailyOps = other0._maxDailyOps;
  _maxOpsDisableFlag = other0._maxOpsDisableFlag;
  _alarmInhibitFlag = other0._alarmInhibitFlag;
  _controlInhibitFlag = other0._controlInhibitFlag;
  _operationalState = other0._operationalState;
  _controllerType = other0._controllerType;
  _controlDeviceId = other0._controlDeviceId;
  _bankSize = other0._bankSize;
  _typeOfSwitch = other0._typeOfSwitch;
  _switchManufacture = other0._switchManufacture;
  _mapLocationId = other0._mapLocationId;
  _recloseDelay = other0._recloseDelay;
  _controlOrder = other0._controlOrder;
  _statusPointId = other0._statusPointId;
  _controlStatus = other0._controlStatus;
  _operationAnalogPointId = other0._operationAnalogPointId;
  _totalOperations = other0._totalOperations;
  _lastStatusChangeTime = other0._lastStatusChangeTime;
  _tagsControlStatus = other0._tagsControlStatus;
  _originalParentId = other0._originalParentId;
  _currentDailyOperations = other0._currentDailyOperations;
  _ignoreFlag = other0._ignoreFlag;
  _ignoreReason = other0._ignoreReason;
  _ovUvDisabledFlag = other0._ovUvDisabledFlag;
  _tripOrder = other0._tripOrder;
  _closeOrder = other0._closeOrder;
  _controlDeviceType = other0._controlDeviceType;
  _sBeforeVars = other0._sBeforeVars;
  _sAfterVars = other0._sAfterVars;
  _sPercentChange = other0._sPercentChange;
  _maxDailyOpsHitFlag = other0._maxDailyOpsHitFlag;
  _ovUvSituationFlag = other0._ovUvSituationFlag;
  _controlStatusQuality = other0._controlStatusQuality;
  _localControlFlag = other0._localControlFlag;
  _partialPhaseInfo = other0._partialPhaseInfo;
}
CCCapBank& CCCapBank::operator=(const CCCapBank& other1) {
  _baseMessage = other1._baseMessage;
  _parentId = other1._parentId;
  _maxDailyOps = other1._maxDailyOps;
  _maxOpsDisableFlag = other1._maxOpsDisableFlag;
  _alarmInhibitFlag = other1._alarmInhibitFlag;
  _controlInhibitFlag = other1._controlInhibitFlag;
  _operationalState = other1._operationalState;
  _controllerType = other1._controllerType;
  _controlDeviceId = other1._controlDeviceId;
  _bankSize = other1._bankSize;
  _typeOfSwitch = other1._typeOfSwitch;
  _switchManufacture = other1._switchManufacture;
  _mapLocationId = other1._mapLocationId;
  _recloseDelay = other1._recloseDelay;
  _controlOrder = other1._controlOrder;
  _statusPointId = other1._statusPointId;
  _controlStatus = other1._controlStatus;
  _operationAnalogPointId = other1._operationAnalogPointId;
  _totalOperations = other1._totalOperations;
  _lastStatusChangeTime = other1._lastStatusChangeTime;
  _tagsControlStatus = other1._tagsControlStatus;
  _originalParentId = other1._originalParentId;
  _currentDailyOperations = other1._currentDailyOperations;
  _ignoreFlag = other1._ignoreFlag;
  _ignoreReason = other1._ignoreReason;
  _ovUvDisabledFlag = other1._ovUvDisabledFlag;
  _tripOrder = other1._tripOrder;
  _closeOrder = other1._closeOrder;
  _controlDeviceType = other1._controlDeviceType;
  _sBeforeVars = other1._sBeforeVars;
  _sAfterVars = other1._sAfterVars;
  _sPercentChange = other1._sPercentChange;
  _maxDailyOpsHitFlag = other1._maxDailyOpsHitFlag;
  _ovUvSituationFlag = other1._ovUvSituationFlag;
  _controlStatusQuality = other1._controlStatusQuality;
  _localControlFlag = other1._localControlFlag;
  _partialPhaseInfo = other1._partialPhaseInfo;
  return *this;
}
void CCCapBank::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CCCapBank(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_parentId=" << to_string(_parentId);
  out << ", " << "_maxDailyOps=" << to_string(_maxDailyOps);
  out << ", " << "_maxOpsDisableFlag=" << to_string(_maxOpsDisableFlag);
  out << ", " << "_alarmInhibitFlag=" << to_string(_alarmInhibitFlag);
  out << ", " << "_controlInhibitFlag=" << to_string(_controlInhibitFlag);
  out << ", " << "_operationalState=" << to_string(_operationalState);
  out << ", " << "_controllerType=" << to_string(_controllerType);
  out << ", " << "_controlDeviceId=" << to_string(_controlDeviceId);
  out << ", " << "_bankSize=" << to_string(_bankSize);
  out << ", " << "_typeOfSwitch=" << to_string(_typeOfSwitch);
  out << ", " << "_switchManufacture=" << to_string(_switchManufacture);
  out << ", " << "_mapLocationId=" << to_string(_mapLocationId);
  out << ", " << "_recloseDelay=" << to_string(_recloseDelay);
  out << ", " << "_controlOrder=" << to_string(_controlOrder);
  out << ", " << "_statusPointId=" << to_string(_statusPointId);
  out << ", " << "_controlStatus=" << to_string(_controlStatus);
  out << ", " << "_operationAnalogPointId=" << to_string(_operationAnalogPointId);
  out << ", " << "_totalOperations=" << to_string(_totalOperations);
  out << ", " << "_lastStatusChangeTime=" << to_string(_lastStatusChangeTime);
  out << ", " << "_tagsControlStatus=" << to_string(_tagsControlStatus);
  out << ", " << "_originalParentId=" << to_string(_originalParentId);
  out << ", " << "_currentDailyOperations=" << to_string(_currentDailyOperations);
  out << ", " << "_ignoreFlag=" << to_string(_ignoreFlag);
  out << ", " << "_ignoreReason=" << to_string(_ignoreReason);
  out << ", " << "_ovUvDisabledFlag=" << to_string(_ovUvDisabledFlag);
  out << ", " << "_tripOrder=" << to_string(_tripOrder);
  out << ", " << "_closeOrder=" << to_string(_closeOrder);
  out << ", " << "_controlDeviceType=" << to_string(_controlDeviceType);
  out << ", " << "_sBeforeVars=" << to_string(_sBeforeVars);
  out << ", " << "_sAfterVars=" << to_string(_sAfterVars);
  out << ", " << "_sPercentChange=" << to_string(_sPercentChange);
  out << ", " << "_maxDailyOpsHitFlag=" << to_string(_maxDailyOpsHitFlag);
  out << ", " << "_ovUvSituationFlag=" << to_string(_ovUvSituationFlag);
  out << ", " << "_controlStatusQuality=" << to_string(_controlStatusQuality);
  out << ", " << "_localControlFlag=" << to_string(_localControlFlag);
  out << ", " << "_partialPhaseInfo=" << to_string(_partialPhaseInfo);
  out << ")";
}


CCFeeder::~CCFeeder() throw() {
}


void CCFeeder::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val) {
  this->_baseMessage = val;
}

void CCFeeder::__set__parentId(const int32_t val) {
  this->_parentId = val;
}

void CCFeeder::__set__strategy_maxDailyOperation(const int32_t val) {
  this->_strategy_maxDailyOperation = val;
}

void CCFeeder::__set__strategy_maxOperationDisableFlag(const bool val) {
  this->_strategy_maxOperationDisableFlag = val;
}

void CCFeeder::__set__currentVarLoadPointId(const int32_t val) {
  this->_currentVarLoadPointId = val;
}

void CCFeeder::__set__currentVarLoadPointValue(const double val) {
  this->_currentVarLoadPointValue = val;
}

void CCFeeder::__set__currentWattLoadPointId(const int32_t val) {
  this->_currentWattLoadPointId = val;
}

void CCFeeder::__set__currentWattLoadPointValue(const double val) {
  this->_currentWattLoadPointValue = val;
}

void CCFeeder::__set__mapLocationId(const std::string& val) {
  this->_mapLocationId = val;
}

void CCFeeder::__set__displayOrder(const double val) {
  this->_displayOrder = val;
}

void CCFeeder::__set__newPointDataReceivedFlag(const bool val) {
  this->_newPointDataReceivedFlag = val;
}

void CCFeeder::__set__lastCurrentVarPointUpdateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_lastCurrentVarPointUpdateTime = val;
}

void CCFeeder::__set__estimatedVarLoadPointId(const int32_t val) {
  this->_estimatedVarLoadPointId = val;
}

void CCFeeder::__set__estimatedVarLoadPointValue(const double val) {
  this->_estimatedVarLoadPointValue = val;
}

void CCFeeder::__set__dailyOperationsAnalogPointId(const int32_t val) {
  this->_dailyOperationsAnalogPointId = val;
}

void CCFeeder::__set__powerFactorPointId(const int32_t val) {
  this->_powerFactorPointId = val;
}

void CCFeeder::__set__estimatedPowerFactorPointId(const int32_t val) {
  this->_estimatedPowerFactorPointId = val;
}

void CCFeeder::__set__currentDailyOperations(const int32_t val) {
  this->_currentDailyOperations = val;
}

void CCFeeder::__set__recentlyControlledFlag_or_performingVerificationFlag(const bool val) {
  this->_recentlyControlledFlag_or_performingVerificationFlag = val;
}

void CCFeeder::__set__lastOperationTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_lastOperationTime = val;
}

void CCFeeder::__set__varValueBeforeControl(const double val) {
  this->_varValueBeforeControl = val;
}

void CCFeeder::__set__powerFactorValue(const double val) {
  this->_powerFactorValue = val;
}

void CCFeeder::__set__estimatedPowerFactorValue(const double val) {
  this->_estimatedPowerFactorValue = val;
}

void CCFeeder::__set__currentVarPointQuality(const int32_t val) {
  this->_currentVarPointQuality = val;
}

void CCFeeder::__set__waiveControlFlag(const bool val) {
  this->_waiveControlFlag = val;
}

void CCFeeder::__set__strategy_controlUnits(const std::string& val) {
  this->_strategy_controlUnits = val;
}

void CCFeeder::__set__decimalPlaces(const int32_t val) {
  this->_decimalPlaces = val;
}

void CCFeeder::__set__peakTimeFlag(const bool val) {
  this->_peakTimeFlag = val;
}

void CCFeeder::__set__strategy_peakLag(const double val) {
  this->_strategy_peakLag = val;
}

void CCFeeder::__set__strategy_offPeakLag(const double val) {
  this->_strategy_offPeakLag = val;
}

void CCFeeder::__set__strategy_PeakLead(const double val) {
  this->_strategy_PeakLead = val;
}

void CCFeeder::__set__strategy_OffPeakLead(const double val) {
  this->_strategy_OffPeakLead = val;
}

void CCFeeder::__set__currentVoltLoadPointId(const int32_t val) {
  this->_currentVoltLoadPointId = val;
}

void CCFeeder::__set__currentVoltLoadPointValue(const double val) {
  this->_currentVoltLoadPointValue = val;
}

void CCFeeder::__set__currentWattPointQuality(const int32_t val) {
  this->_currentWattPointQuality = val;
}

void CCFeeder::__set__currentVoltPointQuality(const int32_t val) {
  this->_currentVoltPointQuality = val;
}

void CCFeeder::__set__targetVarValue(const double val) {
  this->_targetVarValue = val;
}

void CCFeeder::__set__solution(const std::string& val) {
  this->_solution = val;
}

void CCFeeder::__set__ovUvDisabledFlag(const bool val) {
  this->_ovUvDisabledFlag = val;
}

void CCFeeder::__set__strategy_peakPFSetPoint(const double val) {
  this->_strategy_peakPFSetPoint = val;
}

void CCFeeder::__set__strategy_offPeakPFSetPoint(const double val) {
  this->_strategy_offPeakPFSetPoint = val;
}

void CCFeeder::__set__strategy_controlMethod(const std::string& val) {
  this->_strategy_controlMethod = val;
}

void CCFeeder::__set__phaseAValue(const double val) {
  this->_phaseAValue = val;
}

void CCFeeder::__set__phaseBValue(const double val) {
  this->_phaseBValue = val;
}

void CCFeeder::__set__phaseCValue(const double val) {
  this->_phaseCValue = val;
}

void CCFeeder::__set__likeDayControlFlag(const bool val) {
  this->_likeDayControlFlag = val;
}

void CCFeeder::__set__usePhaseData(const bool val) {
  this->_usePhaseData = val;
}

void CCFeeder::__set__originalParentId(const int32_t val) {
  this->_originalParentId = val;
}

void CCFeeder::__set__ccCapbanks(const std::vector<CCCapBank> & val) {
  this->_ccCapbanks = val;
}
std::ostream& operator<<(std::ostream& out, const CCFeeder& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CCFeeder::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__parentId = false;
  bool isset__strategy_maxDailyOperation = false;
  bool isset__strategy_maxOperationDisableFlag = false;
  bool isset__currentVarLoadPointId = false;
  bool isset__currentVarLoadPointValue = false;
  bool isset__currentWattLoadPointId = false;
  bool isset__currentWattLoadPointValue = false;
  bool isset__mapLocationId = false;
  bool isset__displayOrder = false;
  bool isset__newPointDataReceivedFlag = false;
  bool isset__lastCurrentVarPointUpdateTime = false;
  bool isset__estimatedVarLoadPointId = false;
  bool isset__estimatedVarLoadPointValue = false;
  bool isset__dailyOperationsAnalogPointId = false;
  bool isset__powerFactorPointId = false;
  bool isset__estimatedPowerFactorPointId = false;
  bool isset__currentDailyOperations = false;
  bool isset__recentlyControlledFlag_or_performingVerificationFlag = false;
  bool isset__lastOperationTime = false;
  bool isset__varValueBeforeControl = false;
  bool isset__powerFactorValue = false;
  bool isset__estimatedPowerFactorValue = false;
  bool isset__currentVarPointQuality = false;
  bool isset__waiveControlFlag = false;
  bool isset__strategy_controlUnits = false;
  bool isset__decimalPlaces = false;
  bool isset__peakTimeFlag = false;
  bool isset__strategy_peakLag = false;
  bool isset__strategy_offPeakLag = false;
  bool isset__strategy_PeakLead = false;
  bool isset__strategy_OffPeakLead = false;
  bool isset__currentVoltLoadPointId = false;
  bool isset__currentVoltLoadPointValue = false;
  bool isset__currentWattPointQuality = false;
  bool isset__currentVoltPointQuality = false;
  bool isset__targetVarValue = false;
  bool isset__solution = false;
  bool isset__ovUvDisabledFlag = false;
  bool isset__strategy_peakPFSetPoint = false;
  bool isset__strategy_offPeakPFSetPoint = false;
  bool isset__strategy_controlMethod = false;
  bool isset__phaseAValue = false;
  bool isset__phaseBValue = false;
  bool isset__phaseCValue = false;
  bool isset__likeDayControlFlag = false;
  bool isset__usePhaseData = false;
  bool isset__originalParentId = false;
  bool isset__ccCapbanks = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_parentId);
          isset__parentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_strategy_maxDailyOperation);
          isset__strategy_maxDailyOperation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_strategy_maxOperationDisableFlag);
          isset__strategy_maxOperationDisableFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentVarLoadPointId);
          isset__currentVarLoadPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_currentVarLoadPointValue);
          isset__currentVarLoadPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentWattLoadPointId);
          isset__currentWattLoadPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_currentWattLoadPointValue);
          isset__currentWattLoadPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_mapLocationId);
          isset__mapLocationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_displayOrder);
          isset__displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_newPointDataReceivedFlag);
          isset__newPointDataReceivedFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastCurrentVarPointUpdateTime);
          isset__lastCurrentVarPointUpdateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_estimatedVarLoadPointId);
          isset__estimatedVarLoadPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_estimatedVarLoadPointValue);
          isset__estimatedVarLoadPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_dailyOperationsAnalogPointId);
          isset__dailyOperationsAnalogPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_powerFactorPointId);
          isset__powerFactorPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_estimatedPowerFactorPointId);
          isset__estimatedPowerFactorPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentDailyOperations);
          isset__currentDailyOperations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_recentlyControlledFlag_or_performingVerificationFlag);
          isset__recentlyControlledFlag_or_performingVerificationFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastOperationTime);
          isset__lastOperationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_varValueBeforeControl);
          isset__varValueBeforeControl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_powerFactorValue);
          isset__powerFactorValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_estimatedPowerFactorValue);
          isset__estimatedPowerFactorValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentVarPointQuality);
          isset__currentVarPointQuality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_waiveControlFlag);
          isset__waiveControlFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_strategy_controlUnits);
          isset__strategy_controlUnits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_decimalPlaces);
          isset__decimalPlaces = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_peakTimeFlag);
          isset__peakTimeFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_peakLag);
          isset__strategy_peakLag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_offPeakLag);
          isset__strategy_offPeakLag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_PeakLead);
          isset__strategy_PeakLead = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_OffPeakLead);
          isset__strategy_OffPeakLead = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentVoltLoadPointId);
          isset__currentVoltLoadPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_currentVoltLoadPointValue);
          isset__currentVoltLoadPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentWattPointQuality);
          isset__currentWattPointQuality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentVoltPointQuality);
          isset__currentVoltPointQuality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_targetVarValue);
          isset__targetVarValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_solution);
          isset__solution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_ovUvDisabledFlag);
          isset__ovUvDisabledFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_peakPFSetPoint);
          isset__strategy_peakPFSetPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_offPeakPFSetPoint);
          isset__strategy_offPeakPFSetPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_strategy_controlMethod);
          isset__strategy_controlMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_phaseAValue);
          isset__phaseAValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_phaseBValue);
          isset__phaseBValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_phaseCValue);
          isset__phaseCValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_likeDayControlFlag);
          isset__likeDayControlFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_usePhaseData);
          isset__usePhaseData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_originalParentId);
          isset__originalParentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_ccCapbanks.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->_ccCapbanks.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->_ccCapbanks[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__ccCapbanks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__parentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_maxDailyOperation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_maxOperationDisableFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVarLoadPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVarLoadPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentWattLoadPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentWattLoadPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__mapLocationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__newPointDataReceivedFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastCurrentVarPointUpdateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estimatedVarLoadPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estimatedVarLoadPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__dailyOperationsAnalogPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__powerFactorPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estimatedPowerFactorPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentDailyOperations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__recentlyControlledFlag_or_performingVerificationFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastOperationTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__varValueBeforeControl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__powerFactorValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estimatedPowerFactorValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVarPointQuality)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__waiveControlFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_controlUnits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__decimalPlaces)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__peakTimeFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_peakLag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_offPeakLag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_PeakLead)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_OffPeakLead)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVoltLoadPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVoltLoadPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentWattPointQuality)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVoltPointQuality)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__targetVarValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__solution)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ovUvDisabledFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_peakPFSetPoint)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_offPeakPFSetPoint)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_controlMethod)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__phaseAValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__phaseBValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__phaseCValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__likeDayControlFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__usePhaseData)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__originalParentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ccCapbanks)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCFeeder::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CCFeeder");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_parentId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_parentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_maxDailyOperation", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_strategy_maxDailyOperation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_maxOperationDisableFlag", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->_strategy_maxOperationDisableFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVarLoadPointId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_currentVarLoadPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVarLoadPointValue", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->_currentVarLoadPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentWattLoadPointId", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_currentWattLoadPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentWattLoadPointValue", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->_currentWattLoadPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_mapLocationId", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_mapLocationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_displayOrder", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->_displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_newPointDataReceivedFlag", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->_newPointDataReceivedFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastCurrentVarPointUpdateTime", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->_lastCurrentVarPointUpdateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estimatedVarLoadPointId", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->_estimatedVarLoadPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estimatedVarLoadPointValue", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->_estimatedVarLoadPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_dailyOperationsAnalogPointId", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->_dailyOperationsAnalogPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_powerFactorPointId", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->_powerFactorPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estimatedPowerFactorPointId", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->_estimatedPowerFactorPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentDailyOperations", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->_currentDailyOperations);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_recentlyControlledFlag_or_performingVerificationFlag", ::apache::thrift::protocol::T_BOOL, 19);
  xfer += oprot->writeBool(this->_recentlyControlledFlag_or_performingVerificationFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastOperationTime", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->_lastOperationTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_varValueBeforeControl", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->_varValueBeforeControl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_powerFactorValue", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->_powerFactorValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estimatedPowerFactorValue", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->_estimatedPowerFactorValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVarPointQuality", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->_currentVarPointQuality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_waiveControlFlag", ::apache::thrift::protocol::T_BOOL, 25);
  xfer += oprot->writeBool(this->_waiveControlFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_controlUnits", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->_strategy_controlUnits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_decimalPlaces", ::apache::thrift::protocol::T_I32, 27);
  xfer += oprot->writeI32(this->_decimalPlaces);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_peakTimeFlag", ::apache::thrift::protocol::T_BOOL, 28);
  xfer += oprot->writeBool(this->_peakTimeFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_peakLag", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->_strategy_peakLag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_offPeakLag", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->_strategy_offPeakLag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_PeakLead", ::apache::thrift::protocol::T_DOUBLE, 31);
  xfer += oprot->writeDouble(this->_strategy_PeakLead);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_OffPeakLead", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->_strategy_OffPeakLead);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVoltLoadPointId", ::apache::thrift::protocol::T_I32, 33);
  xfer += oprot->writeI32(this->_currentVoltLoadPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVoltLoadPointValue", ::apache::thrift::protocol::T_DOUBLE, 34);
  xfer += oprot->writeDouble(this->_currentVoltLoadPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentWattPointQuality", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->_currentWattPointQuality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVoltPointQuality", ::apache::thrift::protocol::T_I32, 36);
  xfer += oprot->writeI32(this->_currentVoltPointQuality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_targetVarValue", ::apache::thrift::protocol::T_DOUBLE, 37);
  xfer += oprot->writeDouble(this->_targetVarValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_solution", ::apache::thrift::protocol::T_STRING, 38);
  xfer += oprot->writeString(this->_solution);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ovUvDisabledFlag", ::apache::thrift::protocol::T_BOOL, 39);
  xfer += oprot->writeBool(this->_ovUvDisabledFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_peakPFSetPoint", ::apache::thrift::protocol::T_DOUBLE, 40);
  xfer += oprot->writeDouble(this->_strategy_peakPFSetPoint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_offPeakPFSetPoint", ::apache::thrift::protocol::T_DOUBLE, 41);
  xfer += oprot->writeDouble(this->_strategy_offPeakPFSetPoint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_controlMethod", ::apache::thrift::protocol::T_STRING, 42);
  xfer += oprot->writeString(this->_strategy_controlMethod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_phaseAValue", ::apache::thrift::protocol::T_DOUBLE, 43);
  xfer += oprot->writeDouble(this->_phaseAValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_phaseBValue", ::apache::thrift::protocol::T_DOUBLE, 44);
  xfer += oprot->writeDouble(this->_phaseBValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_phaseCValue", ::apache::thrift::protocol::T_DOUBLE, 45);
  xfer += oprot->writeDouble(this->_phaseCValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_likeDayControlFlag", ::apache::thrift::protocol::T_BOOL, 46);
  xfer += oprot->writeBool(this->_likeDayControlFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_usePhaseData", ::apache::thrift::protocol::T_BOOL, 47);
  xfer += oprot->writeBool(this->_usePhaseData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_originalParentId", ::apache::thrift::protocol::T_I32, 48);
  xfer += oprot->writeI32(this->_originalParentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ccCapbanks", ::apache::thrift::protocol::T_LIST, 49);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_ccCapbanks.size()));
    std::vector<CCCapBank> ::const_iterator _iter7;
    for (_iter7 = this->_ccCapbanks.begin(); _iter7 != this->_ccCapbanks.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCFeeder &a, CCFeeder &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._parentId, b._parentId);
  swap(a._strategy_maxDailyOperation, b._strategy_maxDailyOperation);
  swap(a._strategy_maxOperationDisableFlag, b._strategy_maxOperationDisableFlag);
  swap(a._currentVarLoadPointId, b._currentVarLoadPointId);
  swap(a._currentVarLoadPointValue, b._currentVarLoadPointValue);
  swap(a._currentWattLoadPointId, b._currentWattLoadPointId);
  swap(a._currentWattLoadPointValue, b._currentWattLoadPointValue);
  swap(a._mapLocationId, b._mapLocationId);
  swap(a._displayOrder, b._displayOrder);
  swap(a._newPointDataReceivedFlag, b._newPointDataReceivedFlag);
  swap(a._lastCurrentVarPointUpdateTime, b._lastCurrentVarPointUpdateTime);
  swap(a._estimatedVarLoadPointId, b._estimatedVarLoadPointId);
  swap(a._estimatedVarLoadPointValue, b._estimatedVarLoadPointValue);
  swap(a._dailyOperationsAnalogPointId, b._dailyOperationsAnalogPointId);
  swap(a._powerFactorPointId, b._powerFactorPointId);
  swap(a._estimatedPowerFactorPointId, b._estimatedPowerFactorPointId);
  swap(a._currentDailyOperations, b._currentDailyOperations);
  swap(a._recentlyControlledFlag_or_performingVerificationFlag, b._recentlyControlledFlag_or_performingVerificationFlag);
  swap(a._lastOperationTime, b._lastOperationTime);
  swap(a._varValueBeforeControl, b._varValueBeforeControl);
  swap(a._powerFactorValue, b._powerFactorValue);
  swap(a._estimatedPowerFactorValue, b._estimatedPowerFactorValue);
  swap(a._currentVarPointQuality, b._currentVarPointQuality);
  swap(a._waiveControlFlag, b._waiveControlFlag);
  swap(a._strategy_controlUnits, b._strategy_controlUnits);
  swap(a._decimalPlaces, b._decimalPlaces);
  swap(a._peakTimeFlag, b._peakTimeFlag);
  swap(a._strategy_peakLag, b._strategy_peakLag);
  swap(a._strategy_offPeakLag, b._strategy_offPeakLag);
  swap(a._strategy_PeakLead, b._strategy_PeakLead);
  swap(a._strategy_OffPeakLead, b._strategy_OffPeakLead);
  swap(a._currentVoltLoadPointId, b._currentVoltLoadPointId);
  swap(a._currentVoltLoadPointValue, b._currentVoltLoadPointValue);
  swap(a._currentWattPointQuality, b._currentWattPointQuality);
  swap(a._currentVoltPointQuality, b._currentVoltPointQuality);
  swap(a._targetVarValue, b._targetVarValue);
  swap(a._solution, b._solution);
  swap(a._ovUvDisabledFlag, b._ovUvDisabledFlag);
  swap(a._strategy_peakPFSetPoint, b._strategy_peakPFSetPoint);
  swap(a._strategy_offPeakPFSetPoint, b._strategy_offPeakPFSetPoint);
  swap(a._strategy_controlMethod, b._strategy_controlMethod);
  swap(a._phaseAValue, b._phaseAValue);
  swap(a._phaseBValue, b._phaseBValue);
  swap(a._phaseCValue, b._phaseCValue);
  swap(a._likeDayControlFlag, b._likeDayControlFlag);
  swap(a._usePhaseData, b._usePhaseData);
  swap(a._originalParentId, b._originalParentId);
  swap(a._ccCapbanks, b._ccCapbanks);
}

CCFeeder::CCFeeder(const CCFeeder& other8) {
  _baseMessage = other8._baseMessage;
  _parentId = other8._parentId;
  _strategy_maxDailyOperation = other8._strategy_maxDailyOperation;
  _strategy_maxOperationDisableFlag = other8._strategy_maxOperationDisableFlag;
  _currentVarLoadPointId = other8._currentVarLoadPointId;
  _currentVarLoadPointValue = other8._currentVarLoadPointValue;
  _currentWattLoadPointId = other8._currentWattLoadPointId;
  _currentWattLoadPointValue = other8._currentWattLoadPointValue;
  _mapLocationId = other8._mapLocationId;
  _displayOrder = other8._displayOrder;
  _newPointDataReceivedFlag = other8._newPointDataReceivedFlag;
  _lastCurrentVarPointUpdateTime = other8._lastCurrentVarPointUpdateTime;
  _estimatedVarLoadPointId = other8._estimatedVarLoadPointId;
  _estimatedVarLoadPointValue = other8._estimatedVarLoadPointValue;
  _dailyOperationsAnalogPointId = other8._dailyOperationsAnalogPointId;
  _powerFactorPointId = other8._powerFactorPointId;
  _estimatedPowerFactorPointId = other8._estimatedPowerFactorPointId;
  _currentDailyOperations = other8._currentDailyOperations;
  _recentlyControlledFlag_or_performingVerificationFlag = other8._recentlyControlledFlag_or_performingVerificationFlag;
  _lastOperationTime = other8._lastOperationTime;
  _varValueBeforeControl = other8._varValueBeforeControl;
  _powerFactorValue = other8._powerFactorValue;
  _estimatedPowerFactorValue = other8._estimatedPowerFactorValue;
  _currentVarPointQuality = other8._currentVarPointQuality;
  _waiveControlFlag = other8._waiveControlFlag;
  _strategy_controlUnits = other8._strategy_controlUnits;
  _decimalPlaces = other8._decimalPlaces;
  _peakTimeFlag = other8._peakTimeFlag;
  _strategy_peakLag = other8._strategy_peakLag;
  _strategy_offPeakLag = other8._strategy_offPeakLag;
  _strategy_PeakLead = other8._strategy_PeakLead;
  _strategy_OffPeakLead = other8._strategy_OffPeakLead;
  _currentVoltLoadPointId = other8._currentVoltLoadPointId;
  _currentVoltLoadPointValue = other8._currentVoltLoadPointValue;
  _currentWattPointQuality = other8._currentWattPointQuality;
  _currentVoltPointQuality = other8._currentVoltPointQuality;
  _targetVarValue = other8._targetVarValue;
  _solution = other8._solution;
  _ovUvDisabledFlag = other8._ovUvDisabledFlag;
  _strategy_peakPFSetPoint = other8._strategy_peakPFSetPoint;
  _strategy_offPeakPFSetPoint = other8._strategy_offPeakPFSetPoint;
  _strategy_controlMethod = other8._strategy_controlMethod;
  _phaseAValue = other8._phaseAValue;
  _phaseBValue = other8._phaseBValue;
  _phaseCValue = other8._phaseCValue;
  _likeDayControlFlag = other8._likeDayControlFlag;
  _usePhaseData = other8._usePhaseData;
  _originalParentId = other8._originalParentId;
  _ccCapbanks = other8._ccCapbanks;
}
CCFeeder& CCFeeder::operator=(const CCFeeder& other9) {
  _baseMessage = other9._baseMessage;
  _parentId = other9._parentId;
  _strategy_maxDailyOperation = other9._strategy_maxDailyOperation;
  _strategy_maxOperationDisableFlag = other9._strategy_maxOperationDisableFlag;
  _currentVarLoadPointId = other9._currentVarLoadPointId;
  _currentVarLoadPointValue = other9._currentVarLoadPointValue;
  _currentWattLoadPointId = other9._currentWattLoadPointId;
  _currentWattLoadPointValue = other9._currentWattLoadPointValue;
  _mapLocationId = other9._mapLocationId;
  _displayOrder = other9._displayOrder;
  _newPointDataReceivedFlag = other9._newPointDataReceivedFlag;
  _lastCurrentVarPointUpdateTime = other9._lastCurrentVarPointUpdateTime;
  _estimatedVarLoadPointId = other9._estimatedVarLoadPointId;
  _estimatedVarLoadPointValue = other9._estimatedVarLoadPointValue;
  _dailyOperationsAnalogPointId = other9._dailyOperationsAnalogPointId;
  _powerFactorPointId = other9._powerFactorPointId;
  _estimatedPowerFactorPointId = other9._estimatedPowerFactorPointId;
  _currentDailyOperations = other9._currentDailyOperations;
  _recentlyControlledFlag_or_performingVerificationFlag = other9._recentlyControlledFlag_or_performingVerificationFlag;
  _lastOperationTime = other9._lastOperationTime;
  _varValueBeforeControl = other9._varValueBeforeControl;
  _powerFactorValue = other9._powerFactorValue;
  _estimatedPowerFactorValue = other9._estimatedPowerFactorValue;
  _currentVarPointQuality = other9._currentVarPointQuality;
  _waiveControlFlag = other9._waiveControlFlag;
  _strategy_controlUnits = other9._strategy_controlUnits;
  _decimalPlaces = other9._decimalPlaces;
  _peakTimeFlag = other9._peakTimeFlag;
  _strategy_peakLag = other9._strategy_peakLag;
  _strategy_offPeakLag = other9._strategy_offPeakLag;
  _strategy_PeakLead = other9._strategy_PeakLead;
  _strategy_OffPeakLead = other9._strategy_OffPeakLead;
  _currentVoltLoadPointId = other9._currentVoltLoadPointId;
  _currentVoltLoadPointValue = other9._currentVoltLoadPointValue;
  _currentWattPointQuality = other9._currentWattPointQuality;
  _currentVoltPointQuality = other9._currentVoltPointQuality;
  _targetVarValue = other9._targetVarValue;
  _solution = other9._solution;
  _ovUvDisabledFlag = other9._ovUvDisabledFlag;
  _strategy_peakPFSetPoint = other9._strategy_peakPFSetPoint;
  _strategy_offPeakPFSetPoint = other9._strategy_offPeakPFSetPoint;
  _strategy_controlMethod = other9._strategy_controlMethod;
  _phaseAValue = other9._phaseAValue;
  _phaseBValue = other9._phaseBValue;
  _phaseCValue = other9._phaseCValue;
  _likeDayControlFlag = other9._likeDayControlFlag;
  _usePhaseData = other9._usePhaseData;
  _originalParentId = other9._originalParentId;
  _ccCapbanks = other9._ccCapbanks;
  return *this;
}
void CCFeeder::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CCFeeder(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_parentId=" << to_string(_parentId);
  out << ", " << "_strategy_maxDailyOperation=" << to_string(_strategy_maxDailyOperation);
  out << ", " << "_strategy_maxOperationDisableFlag=" << to_string(_strategy_maxOperationDisableFlag);
  out << ", " << "_currentVarLoadPointId=" << to_string(_currentVarLoadPointId);
  out << ", " << "_currentVarLoadPointValue=" << to_string(_currentVarLoadPointValue);
  out << ", " << "_currentWattLoadPointId=" << to_string(_currentWattLoadPointId);
  out << ", " << "_currentWattLoadPointValue=" << to_string(_currentWattLoadPointValue);
  out << ", " << "_mapLocationId=" << to_string(_mapLocationId);
  out << ", " << "_displayOrder=" << to_string(_displayOrder);
  out << ", " << "_newPointDataReceivedFlag=" << to_string(_newPointDataReceivedFlag);
  out << ", " << "_lastCurrentVarPointUpdateTime=" << to_string(_lastCurrentVarPointUpdateTime);
  out << ", " << "_estimatedVarLoadPointId=" << to_string(_estimatedVarLoadPointId);
  out << ", " << "_estimatedVarLoadPointValue=" << to_string(_estimatedVarLoadPointValue);
  out << ", " << "_dailyOperationsAnalogPointId=" << to_string(_dailyOperationsAnalogPointId);
  out << ", " << "_powerFactorPointId=" << to_string(_powerFactorPointId);
  out << ", " << "_estimatedPowerFactorPointId=" << to_string(_estimatedPowerFactorPointId);
  out << ", " << "_currentDailyOperations=" << to_string(_currentDailyOperations);
  out << ", " << "_recentlyControlledFlag_or_performingVerificationFlag=" << to_string(_recentlyControlledFlag_or_performingVerificationFlag);
  out << ", " << "_lastOperationTime=" << to_string(_lastOperationTime);
  out << ", " << "_varValueBeforeControl=" << to_string(_varValueBeforeControl);
  out << ", " << "_powerFactorValue=" << to_string(_powerFactorValue);
  out << ", " << "_estimatedPowerFactorValue=" << to_string(_estimatedPowerFactorValue);
  out << ", " << "_currentVarPointQuality=" << to_string(_currentVarPointQuality);
  out << ", " << "_waiveControlFlag=" << to_string(_waiveControlFlag);
  out << ", " << "_strategy_controlUnits=" << to_string(_strategy_controlUnits);
  out << ", " << "_decimalPlaces=" << to_string(_decimalPlaces);
  out << ", " << "_peakTimeFlag=" << to_string(_peakTimeFlag);
  out << ", " << "_strategy_peakLag=" << to_string(_strategy_peakLag);
  out << ", " << "_strategy_offPeakLag=" << to_string(_strategy_offPeakLag);
  out << ", " << "_strategy_PeakLead=" << to_string(_strategy_PeakLead);
  out << ", " << "_strategy_OffPeakLead=" << to_string(_strategy_OffPeakLead);
  out << ", " << "_currentVoltLoadPointId=" << to_string(_currentVoltLoadPointId);
  out << ", " << "_currentVoltLoadPointValue=" << to_string(_currentVoltLoadPointValue);
  out << ", " << "_currentWattPointQuality=" << to_string(_currentWattPointQuality);
  out << ", " << "_currentVoltPointQuality=" << to_string(_currentVoltPointQuality);
  out << ", " << "_targetVarValue=" << to_string(_targetVarValue);
  out << ", " << "_solution=" << to_string(_solution);
  out << ", " << "_ovUvDisabledFlag=" << to_string(_ovUvDisabledFlag);
  out << ", " << "_strategy_peakPFSetPoint=" << to_string(_strategy_peakPFSetPoint);
  out << ", " << "_strategy_offPeakPFSetPoint=" << to_string(_strategy_offPeakPFSetPoint);
  out << ", " << "_strategy_controlMethod=" << to_string(_strategy_controlMethod);
  out << ", " << "_phaseAValue=" << to_string(_phaseAValue);
  out << ", " << "_phaseBValue=" << to_string(_phaseBValue);
  out << ", " << "_phaseCValue=" << to_string(_phaseCValue);
  out << ", " << "_likeDayControlFlag=" << to_string(_likeDayControlFlag);
  out << ", " << "_usePhaseData=" << to_string(_usePhaseData);
  out << ", " << "_originalParentId=" << to_string(_originalParentId);
  out << ", " << "_ccCapbanks=" << to_string(_ccCapbanks);
  out << ")";
}


CCSubstationBusItem::~CCSubstationBusItem() throw() {
}


void CCSubstationBusItem::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val) {
  this->_baseMessage = val;
}

void CCSubstationBusItem::__set__parentId(const int32_t val) {
  this->_parentId = val;
}

void CCSubstationBusItem::__set__strategy_maxDailyOperation(const int32_t val) {
  this->_strategy_maxDailyOperation = val;
}

void CCSubstationBusItem::__set__strategy_maxOperationDisableFlag(const bool val) {
  this->_strategy_maxOperationDisableFlag = val;
}

void CCSubstationBusItem::__set__currentVarLoadPointId(const int32_t val) {
  this->_currentVarLoadPointId = val;
}

void CCSubstationBusItem::__set__varValue(const double val) {
  this->_varValue = val;
}

void CCSubstationBusItem::__set__currentWattLoadPointId(const int32_t val) {
  this->_currentWattLoadPointId = val;
}

void CCSubstationBusItem::__set__wattValue(const double val) {
  this->_wattValue = val;
}

void CCSubstationBusItem::__set__mapLocationId(const std::string& val) {
  this->_mapLocationId = val;
}

void CCSubstationBusItem::__set__strategy_controlUnits(const std::string& val) {
  this->_strategy_controlUnits = val;
}

void CCSubstationBusItem::__set__decimalPlaces(const int32_t val) {
  this->_decimalPlaces = val;
}

void CCSubstationBusItem::__set__newPointDataReceivedFlag(const bool val) {
  this->_newPointDataReceivedFlag = val;
}

void CCSubstationBusItem::__set__busUpdatedflag(const bool val) {
  this->_busUpdatedflag = val;
}

void CCSubstationBusItem::__set__lastCurrentVarPointUpdateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_lastCurrentVarPointUpdateTime = val;
}

void CCSubstationBusItem::__set__estimatedVarLoadPointId(const int32_t val) {
  this->_estimatedVarLoadPointId = val;
}

void CCSubstationBusItem::__set__estimatedVarLoadPointValue(const double val) {
  this->_estimatedVarLoadPointValue = val;
}

void CCSubstationBusItem::__set__dailyOperationsAnalogPointId(const int32_t val) {
  this->_dailyOperationsAnalogPointId = val;
}

void CCSubstationBusItem::__set__powerFactorPointId(const int32_t val) {
  this->_powerFactorPointId = val;
}

void CCSubstationBusItem::__set__estimatedPowerFactorPointId(const int32_t val) {
  this->_estimatedPowerFactorPointId = val;
}

void CCSubstationBusItem::__set__currentDailyOperations(const int32_t val) {
  this->_currentDailyOperations = val;
}

void CCSubstationBusItem::__set__peakTimeFlag(const bool val) {
  this->_peakTimeFlag = val;
}

void CCSubstationBusItem::__set__recentlyControlledFlag(const bool val) {
  this->_recentlyControlledFlag = val;
}

void CCSubstationBusItem::__set__lastOperationTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_lastOperationTime = val;
}

void CCSubstationBusItem::__set__varValueBeforeControl(const double val) {
  this->_varValueBeforeControl = val;
}

void CCSubstationBusItem::__set__powerFactorValue(const double val) {
  this->_powerFactorValue = val;
}

void CCSubstationBusItem::__set__estimatedPowerFactorValue(const double val) {
  this->_estimatedPowerFactorValue = val;
}

void CCSubstationBusItem::__set__currentVarPointQuality(const int32_t val) {
  this->_currentVarPointQuality = val;
}

void CCSubstationBusItem::__set__waiveControlFlag(const bool val) {
  this->_waiveControlFlag = val;
}

void CCSubstationBusItem::__set__strategy_peakLag(const double val) {
  this->_strategy_peakLag = val;
}

void CCSubstationBusItem::__set__strategy_offPeakLag(const double val) {
  this->_strategy_offPeakLag = val;
}

void CCSubstationBusItem::__set__strategy_peakLead(const double val) {
  this->_strategy_peakLead = val;
}

void CCSubstationBusItem::__set__strategy_offPeakLead(const double val) {
  this->_strategy_offPeakLead = val;
}

void CCSubstationBusItem::__set__currentVoltLoadPointId(const int32_t val) {
  this->_currentVoltLoadPointId = val;
}

void CCSubstationBusItem::__set__voltValue(const double val) {
  this->_voltValue = val;
}

void CCSubstationBusItem::__set__verificationFlag(const bool val) {
  this->_verificationFlag = val;
}

void CCSubstationBusItem::__set__switchOverStatus(const bool val) {
  this->_switchOverStatus = val;
}

void CCSubstationBusItem::__set__currentWattPointQuality(const int32_t val) {
  this->_currentWattPointQuality = val;
}

void CCSubstationBusItem::__set__currentVoltPointQuality(const int32_t val) {
  this->_currentVoltPointQuality = val;
}

void CCSubstationBusItem::__set__targetVarValue(const double val) {
  this->_targetVarValue = val;
}

void CCSubstationBusItem::__set__solution(const std::string& val) {
  this->_solution = val;
}

void CCSubstationBusItem::__set__ovUvDisabledFlag(const bool val) {
  this->_ovUvDisabledFlag = val;
}

void CCSubstationBusItem::__set__strategy_peakPFSetPoint(const double val) {
  this->_strategy_peakPFSetPoint = val;
}

void CCSubstationBusItem::__set__strategy_offPeakPFSetPoint(const double val) {
  this->_strategy_offPeakPFSetPoint = val;
}

void CCSubstationBusItem::__set__strategy_controlMethod(const std::string& val) {
  this->_strategy_controlMethod = val;
}

void CCSubstationBusItem::__set__phaseAValue(const double val) {
  this->_phaseAValue = val;
}

void CCSubstationBusItem::__set__phaseBValue(const double val) {
  this->_phaseBValue = val;
}

void CCSubstationBusItem::__set__phaseCValue(const double val) {
  this->_phaseCValue = val;
}

void CCSubstationBusItem::__set__likeDayControlFlag(const bool val) {
  this->_likeDayControlFlag = val;
}

void CCSubstationBusItem::__set__displayOrder(const int32_t val) {
  this->_displayOrder = val;
}

void CCSubstationBusItem::__set__voltReductionFlag(const bool val) {
  this->_voltReductionFlag = val;
}

void CCSubstationBusItem::__set__usePhaseData(const bool val) {
  this->_usePhaseData = val;
}

void CCSubstationBusItem::__set__primaryBusFlag(const bool val) {
  this->_primaryBusFlag = val;
}

void CCSubstationBusItem::__set__altSubId(const int32_t val) {
  this->_altSubId = val;
}

void CCSubstationBusItem::__set__dualBusEnabled(const bool val) {
  this->_dualBusEnabled = val;
}

void CCSubstationBusItem::__set__strategyId(const int32_t val) {
  this->_strategyId = val;
}

void CCSubstationBusItem::__set__dmvTestRunningFlag(const bool val) {
  this->_dmvTestRunningFlag = val;
}

void CCSubstationBusItem::__set__ccFeeders(const std::vector<CCFeeder> & val) {
  this->_ccFeeders = val;
}
std::ostream& operator<<(std::ostream& out, const CCSubstationBusItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CCSubstationBusItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__parentId = false;
  bool isset__strategy_maxDailyOperation = false;
  bool isset__strategy_maxOperationDisableFlag = false;
  bool isset__currentVarLoadPointId = false;
  bool isset__varValue = false;
  bool isset__currentWattLoadPointId = false;
  bool isset__wattValue = false;
  bool isset__mapLocationId = false;
  bool isset__strategy_controlUnits = false;
  bool isset__decimalPlaces = false;
  bool isset__newPointDataReceivedFlag = false;
  bool isset__busUpdatedflag = false;
  bool isset__lastCurrentVarPointUpdateTime = false;
  bool isset__estimatedVarLoadPointId = false;
  bool isset__estimatedVarLoadPointValue = false;
  bool isset__dailyOperationsAnalogPointId = false;
  bool isset__powerFactorPointId = false;
  bool isset__estimatedPowerFactorPointId = false;
  bool isset__currentDailyOperations = false;
  bool isset__peakTimeFlag = false;
  bool isset__recentlyControlledFlag = false;
  bool isset__lastOperationTime = false;
  bool isset__varValueBeforeControl = false;
  bool isset__powerFactorValue = false;
  bool isset__estimatedPowerFactorValue = false;
  bool isset__currentVarPointQuality = false;
  bool isset__waiveControlFlag = false;
  bool isset__strategy_peakLag = false;
  bool isset__strategy_offPeakLag = false;
  bool isset__strategy_peakLead = false;
  bool isset__strategy_offPeakLead = false;
  bool isset__currentVoltLoadPointId = false;
  bool isset__voltValue = false;
  bool isset__verificationFlag = false;
  bool isset__switchOverStatus = false;
  bool isset__currentWattPointQuality = false;
  bool isset__currentVoltPointQuality = false;
  bool isset__targetVarValue = false;
  bool isset__solution = false;
  bool isset__ovUvDisabledFlag = false;
  bool isset__strategy_peakPFSetPoint = false;
  bool isset__strategy_offPeakPFSetPoint = false;
  bool isset__strategy_controlMethod = false;
  bool isset__phaseAValue = false;
  bool isset__phaseBValue = false;
  bool isset__phaseCValue = false;
  bool isset__likeDayControlFlag = false;
  bool isset__displayOrder = false;
  bool isset__voltReductionFlag = false;
  bool isset__usePhaseData = false;
  bool isset__primaryBusFlag = false;
  bool isset__altSubId = false;
  bool isset__dualBusEnabled = false;
  bool isset__strategyId = false;
  bool isset__dmvTestRunningFlag = false;
  bool isset__ccFeeders = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_parentId);
          isset__parentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_strategy_maxDailyOperation);
          isset__strategy_maxDailyOperation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_strategy_maxOperationDisableFlag);
          isset__strategy_maxOperationDisableFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentVarLoadPointId);
          isset__currentVarLoadPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_varValue);
          isset__varValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentWattLoadPointId);
          isset__currentWattLoadPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_wattValue);
          isset__wattValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_mapLocationId);
          isset__mapLocationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_strategy_controlUnits);
          isset__strategy_controlUnits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_decimalPlaces);
          isset__decimalPlaces = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_newPointDataReceivedFlag);
          isset__newPointDataReceivedFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_busUpdatedflag);
          isset__busUpdatedflag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastCurrentVarPointUpdateTime);
          isset__lastCurrentVarPointUpdateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_estimatedVarLoadPointId);
          isset__estimatedVarLoadPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_estimatedVarLoadPointValue);
          isset__estimatedVarLoadPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_dailyOperationsAnalogPointId);
          isset__dailyOperationsAnalogPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_powerFactorPointId);
          isset__powerFactorPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_estimatedPowerFactorPointId);
          isset__estimatedPowerFactorPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentDailyOperations);
          isset__currentDailyOperations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_peakTimeFlag);
          isset__peakTimeFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_recentlyControlledFlag);
          isset__recentlyControlledFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastOperationTime);
          isset__lastOperationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_varValueBeforeControl);
          isset__varValueBeforeControl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_powerFactorValue);
          isset__powerFactorValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_estimatedPowerFactorValue);
          isset__estimatedPowerFactorValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentVarPointQuality);
          isset__currentVarPointQuality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_waiveControlFlag);
          isset__waiveControlFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_peakLag);
          isset__strategy_peakLag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_offPeakLag);
          isset__strategy_offPeakLag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_peakLead);
          isset__strategy_peakLead = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_offPeakLead);
          isset__strategy_offPeakLead = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentVoltLoadPointId);
          isset__currentVoltLoadPointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_voltValue);
          isset__voltValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_verificationFlag);
          isset__verificationFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_switchOverStatus);
          isset__switchOverStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentWattPointQuality);
          isset__currentWattPointQuality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_currentVoltPointQuality);
          isset__currentVoltPointQuality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_targetVarValue);
          isset__targetVarValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_solution);
          isset__solution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_ovUvDisabledFlag);
          isset__ovUvDisabledFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_peakPFSetPoint);
          isset__strategy_peakPFSetPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_strategy_offPeakPFSetPoint);
          isset__strategy_offPeakPFSetPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_strategy_controlMethod);
          isset__strategy_controlMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_phaseAValue);
          isset__phaseAValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_phaseBValue);
          isset__phaseBValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_phaseCValue);
          isset__phaseCValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_likeDayControlFlag);
          isset__likeDayControlFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_displayOrder);
          isset__displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_voltReductionFlag);
          isset__voltReductionFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_usePhaseData);
          isset__usePhaseData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_primaryBusFlag);
          isset__primaryBusFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_altSubId);
          isset__altSubId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_dualBusEnabled);
          isset__dualBusEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_strategyId);
          isset__strategyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_dmvTestRunningFlag);
          isset__dmvTestRunningFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_ccFeeders.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->_ccFeeders.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->_ccFeeders[_i14].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__ccFeeders = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__parentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_maxDailyOperation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_maxOperationDisableFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVarLoadPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__varValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentWattLoadPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__wattValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__mapLocationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_controlUnits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__decimalPlaces)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__newPointDataReceivedFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__busUpdatedflag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastCurrentVarPointUpdateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estimatedVarLoadPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estimatedVarLoadPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__dailyOperationsAnalogPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__powerFactorPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estimatedPowerFactorPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentDailyOperations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__peakTimeFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__recentlyControlledFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastOperationTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__varValueBeforeControl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__powerFactorValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estimatedPowerFactorValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVarPointQuality)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__waiveControlFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_peakLag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_offPeakLag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_peakLead)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_offPeakLead)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVoltLoadPointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__voltValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__verificationFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__switchOverStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentWattPointQuality)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__currentVoltPointQuality)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__targetVarValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__solution)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ovUvDisabledFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_peakPFSetPoint)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_offPeakPFSetPoint)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategy_controlMethod)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__phaseAValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__phaseBValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__phaseCValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__likeDayControlFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__voltReductionFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__usePhaseData)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__primaryBusFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__altSubId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__dualBusEnabled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__strategyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__dmvTestRunningFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ccFeeders)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCSubstationBusItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CCSubstationBusItem");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_parentId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_parentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_maxDailyOperation", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_strategy_maxDailyOperation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_maxOperationDisableFlag", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->_strategy_maxOperationDisableFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVarLoadPointId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_currentVarLoadPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_varValue", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->_varValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentWattLoadPointId", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->_currentWattLoadPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_wattValue", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->_wattValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_mapLocationId", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_mapLocationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_controlUnits", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->_strategy_controlUnits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_decimalPlaces", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->_decimalPlaces);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_newPointDataReceivedFlag", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->_newPointDataReceivedFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_busUpdatedflag", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->_busUpdatedflag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastCurrentVarPointUpdateTime", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->_lastCurrentVarPointUpdateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estimatedVarLoadPointId", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->_estimatedVarLoadPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estimatedVarLoadPointValue", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->_estimatedVarLoadPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_dailyOperationsAnalogPointId", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->_dailyOperationsAnalogPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_powerFactorPointId", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->_powerFactorPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estimatedPowerFactorPointId", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->_estimatedPowerFactorPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentDailyOperations", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->_currentDailyOperations);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_peakTimeFlag", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->_peakTimeFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_recentlyControlledFlag", ::apache::thrift::protocol::T_BOOL, 22);
  xfer += oprot->writeBool(this->_recentlyControlledFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastOperationTime", ::apache::thrift::protocol::T_I64, 23);
  xfer += oprot->writeI64(this->_lastOperationTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_varValueBeforeControl", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->_varValueBeforeControl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_powerFactorValue", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->_powerFactorValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estimatedPowerFactorValue", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->_estimatedPowerFactorValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVarPointQuality", ::apache::thrift::protocol::T_I32, 27);
  xfer += oprot->writeI32(this->_currentVarPointQuality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_waiveControlFlag", ::apache::thrift::protocol::T_BOOL, 28);
  xfer += oprot->writeBool(this->_waiveControlFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_peakLag", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->_strategy_peakLag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_offPeakLag", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->_strategy_offPeakLag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_peakLead", ::apache::thrift::protocol::T_DOUBLE, 31);
  xfer += oprot->writeDouble(this->_strategy_peakLead);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_offPeakLead", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->_strategy_offPeakLead);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVoltLoadPointId", ::apache::thrift::protocol::T_I32, 33);
  xfer += oprot->writeI32(this->_currentVoltLoadPointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_voltValue", ::apache::thrift::protocol::T_DOUBLE, 34);
  xfer += oprot->writeDouble(this->_voltValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_verificationFlag", ::apache::thrift::protocol::T_BOOL, 35);
  xfer += oprot->writeBool(this->_verificationFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_switchOverStatus", ::apache::thrift::protocol::T_BOOL, 36);
  xfer += oprot->writeBool(this->_switchOverStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentWattPointQuality", ::apache::thrift::protocol::T_I32, 37);
  xfer += oprot->writeI32(this->_currentWattPointQuality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_currentVoltPointQuality", ::apache::thrift::protocol::T_I32, 38);
  xfer += oprot->writeI32(this->_currentVoltPointQuality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_targetVarValue", ::apache::thrift::protocol::T_DOUBLE, 39);
  xfer += oprot->writeDouble(this->_targetVarValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_solution", ::apache::thrift::protocol::T_STRING, 40);
  xfer += oprot->writeString(this->_solution);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ovUvDisabledFlag", ::apache::thrift::protocol::T_BOOL, 41);
  xfer += oprot->writeBool(this->_ovUvDisabledFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_peakPFSetPoint", ::apache::thrift::protocol::T_DOUBLE, 42);
  xfer += oprot->writeDouble(this->_strategy_peakPFSetPoint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_offPeakPFSetPoint", ::apache::thrift::protocol::T_DOUBLE, 43);
  xfer += oprot->writeDouble(this->_strategy_offPeakPFSetPoint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategy_controlMethod", ::apache::thrift::protocol::T_STRING, 44);
  xfer += oprot->writeString(this->_strategy_controlMethod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_phaseAValue", ::apache::thrift::protocol::T_DOUBLE, 45);
  xfer += oprot->writeDouble(this->_phaseAValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_phaseBValue", ::apache::thrift::protocol::T_DOUBLE, 46);
  xfer += oprot->writeDouble(this->_phaseBValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_phaseCValue", ::apache::thrift::protocol::T_DOUBLE, 47);
  xfer += oprot->writeDouble(this->_phaseCValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_likeDayControlFlag", ::apache::thrift::protocol::T_BOOL, 48);
  xfer += oprot->writeBool(this->_likeDayControlFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_displayOrder", ::apache::thrift::protocol::T_I32, 49);
  xfer += oprot->writeI32(this->_displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_voltReductionFlag", ::apache::thrift::protocol::T_BOOL, 50);
  xfer += oprot->writeBool(this->_voltReductionFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_usePhaseData", ::apache::thrift::protocol::T_BOOL, 51);
  xfer += oprot->writeBool(this->_usePhaseData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_primaryBusFlag", ::apache::thrift::protocol::T_BOOL, 52);
  xfer += oprot->writeBool(this->_primaryBusFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_altSubId", ::apache::thrift::protocol::T_I32, 53);
  xfer += oprot->writeI32(this->_altSubId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_dualBusEnabled", ::apache::thrift::protocol::T_BOOL, 54);
  xfer += oprot->writeBool(this->_dualBusEnabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_strategyId", ::apache::thrift::protocol::T_I32, 55);
  xfer += oprot->writeI32(this->_strategyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_dmvTestRunningFlag", ::apache::thrift::protocol::T_BOOL, 56);
  xfer += oprot->writeBool(this->_dmvTestRunningFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ccFeeders", ::apache::thrift::protocol::T_LIST, 57);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_ccFeeders.size()));
    std::vector<CCFeeder> ::const_iterator _iter15;
    for (_iter15 = this->_ccFeeders.begin(); _iter15 != this->_ccFeeders.end(); ++_iter15)
    {
      xfer += (*_iter15).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCSubstationBusItem &a, CCSubstationBusItem &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._parentId, b._parentId);
  swap(a._strategy_maxDailyOperation, b._strategy_maxDailyOperation);
  swap(a._strategy_maxOperationDisableFlag, b._strategy_maxOperationDisableFlag);
  swap(a._currentVarLoadPointId, b._currentVarLoadPointId);
  swap(a._varValue, b._varValue);
  swap(a._currentWattLoadPointId, b._currentWattLoadPointId);
  swap(a._wattValue, b._wattValue);
  swap(a._mapLocationId, b._mapLocationId);
  swap(a._strategy_controlUnits, b._strategy_controlUnits);
  swap(a._decimalPlaces, b._decimalPlaces);
  swap(a._newPointDataReceivedFlag, b._newPointDataReceivedFlag);
  swap(a._busUpdatedflag, b._busUpdatedflag);
  swap(a._lastCurrentVarPointUpdateTime, b._lastCurrentVarPointUpdateTime);
  swap(a._estimatedVarLoadPointId, b._estimatedVarLoadPointId);
  swap(a._estimatedVarLoadPointValue, b._estimatedVarLoadPointValue);
  swap(a._dailyOperationsAnalogPointId, b._dailyOperationsAnalogPointId);
  swap(a._powerFactorPointId, b._powerFactorPointId);
  swap(a._estimatedPowerFactorPointId, b._estimatedPowerFactorPointId);
  swap(a._currentDailyOperations, b._currentDailyOperations);
  swap(a._peakTimeFlag, b._peakTimeFlag);
  swap(a._recentlyControlledFlag, b._recentlyControlledFlag);
  swap(a._lastOperationTime, b._lastOperationTime);
  swap(a._varValueBeforeControl, b._varValueBeforeControl);
  swap(a._powerFactorValue, b._powerFactorValue);
  swap(a._estimatedPowerFactorValue, b._estimatedPowerFactorValue);
  swap(a._currentVarPointQuality, b._currentVarPointQuality);
  swap(a._waiveControlFlag, b._waiveControlFlag);
  swap(a._strategy_peakLag, b._strategy_peakLag);
  swap(a._strategy_offPeakLag, b._strategy_offPeakLag);
  swap(a._strategy_peakLead, b._strategy_peakLead);
  swap(a._strategy_offPeakLead, b._strategy_offPeakLead);
  swap(a._currentVoltLoadPointId, b._currentVoltLoadPointId);
  swap(a._voltValue, b._voltValue);
  swap(a._verificationFlag, b._verificationFlag);
  swap(a._switchOverStatus, b._switchOverStatus);
  swap(a._currentWattPointQuality, b._currentWattPointQuality);
  swap(a._currentVoltPointQuality, b._currentVoltPointQuality);
  swap(a._targetVarValue, b._targetVarValue);
  swap(a._solution, b._solution);
  swap(a._ovUvDisabledFlag, b._ovUvDisabledFlag);
  swap(a._strategy_peakPFSetPoint, b._strategy_peakPFSetPoint);
  swap(a._strategy_offPeakPFSetPoint, b._strategy_offPeakPFSetPoint);
  swap(a._strategy_controlMethod, b._strategy_controlMethod);
  swap(a._phaseAValue, b._phaseAValue);
  swap(a._phaseBValue, b._phaseBValue);
  swap(a._phaseCValue, b._phaseCValue);
  swap(a._likeDayControlFlag, b._likeDayControlFlag);
  swap(a._displayOrder, b._displayOrder);
  swap(a._voltReductionFlag, b._voltReductionFlag);
  swap(a._usePhaseData, b._usePhaseData);
  swap(a._primaryBusFlag, b._primaryBusFlag);
  swap(a._altSubId, b._altSubId);
  swap(a._dualBusEnabled, b._dualBusEnabled);
  swap(a._strategyId, b._strategyId);
  swap(a._dmvTestRunningFlag, b._dmvTestRunningFlag);
  swap(a._ccFeeders, b._ccFeeders);
}

CCSubstationBusItem::CCSubstationBusItem(const CCSubstationBusItem& other16) {
  _baseMessage = other16._baseMessage;
  _parentId = other16._parentId;
  _strategy_maxDailyOperation = other16._strategy_maxDailyOperation;
  _strategy_maxOperationDisableFlag = other16._strategy_maxOperationDisableFlag;
  _currentVarLoadPointId = other16._currentVarLoadPointId;
  _varValue = other16._varValue;
  _currentWattLoadPointId = other16._currentWattLoadPointId;
  _wattValue = other16._wattValue;
  _mapLocationId = other16._mapLocationId;
  _strategy_controlUnits = other16._strategy_controlUnits;
  _decimalPlaces = other16._decimalPlaces;
  _newPointDataReceivedFlag = other16._newPointDataReceivedFlag;
  _busUpdatedflag = other16._busUpdatedflag;
  _lastCurrentVarPointUpdateTime = other16._lastCurrentVarPointUpdateTime;
  _estimatedVarLoadPointId = other16._estimatedVarLoadPointId;
  _estimatedVarLoadPointValue = other16._estimatedVarLoadPointValue;
  _dailyOperationsAnalogPointId = other16._dailyOperationsAnalogPointId;
  _powerFactorPointId = other16._powerFactorPointId;
  _estimatedPowerFactorPointId = other16._estimatedPowerFactorPointId;
  _currentDailyOperations = other16._currentDailyOperations;
  _peakTimeFlag = other16._peakTimeFlag;
  _recentlyControlledFlag = other16._recentlyControlledFlag;
  _lastOperationTime = other16._lastOperationTime;
  _varValueBeforeControl = other16._varValueBeforeControl;
  _powerFactorValue = other16._powerFactorValue;
  _estimatedPowerFactorValue = other16._estimatedPowerFactorValue;
  _currentVarPointQuality = other16._currentVarPointQuality;
  _waiveControlFlag = other16._waiveControlFlag;
  _strategy_peakLag = other16._strategy_peakLag;
  _strategy_offPeakLag = other16._strategy_offPeakLag;
  _strategy_peakLead = other16._strategy_peakLead;
  _strategy_offPeakLead = other16._strategy_offPeakLead;
  _currentVoltLoadPointId = other16._currentVoltLoadPointId;
  _voltValue = other16._voltValue;
  _verificationFlag = other16._verificationFlag;
  _switchOverStatus = other16._switchOverStatus;
  _currentWattPointQuality = other16._currentWattPointQuality;
  _currentVoltPointQuality = other16._currentVoltPointQuality;
  _targetVarValue = other16._targetVarValue;
  _solution = other16._solution;
  _ovUvDisabledFlag = other16._ovUvDisabledFlag;
  _strategy_peakPFSetPoint = other16._strategy_peakPFSetPoint;
  _strategy_offPeakPFSetPoint = other16._strategy_offPeakPFSetPoint;
  _strategy_controlMethod = other16._strategy_controlMethod;
  _phaseAValue = other16._phaseAValue;
  _phaseBValue = other16._phaseBValue;
  _phaseCValue = other16._phaseCValue;
  _likeDayControlFlag = other16._likeDayControlFlag;
  _displayOrder = other16._displayOrder;
  _voltReductionFlag = other16._voltReductionFlag;
  _usePhaseData = other16._usePhaseData;
  _primaryBusFlag = other16._primaryBusFlag;
  _altSubId = other16._altSubId;
  _dualBusEnabled = other16._dualBusEnabled;
  _strategyId = other16._strategyId;
  _dmvTestRunningFlag = other16._dmvTestRunningFlag;
  _ccFeeders = other16._ccFeeders;
}
CCSubstationBusItem& CCSubstationBusItem::operator=(const CCSubstationBusItem& other17) {
  _baseMessage = other17._baseMessage;
  _parentId = other17._parentId;
  _strategy_maxDailyOperation = other17._strategy_maxDailyOperation;
  _strategy_maxOperationDisableFlag = other17._strategy_maxOperationDisableFlag;
  _currentVarLoadPointId = other17._currentVarLoadPointId;
  _varValue = other17._varValue;
  _currentWattLoadPointId = other17._currentWattLoadPointId;
  _wattValue = other17._wattValue;
  _mapLocationId = other17._mapLocationId;
  _strategy_controlUnits = other17._strategy_controlUnits;
  _decimalPlaces = other17._decimalPlaces;
  _newPointDataReceivedFlag = other17._newPointDataReceivedFlag;
  _busUpdatedflag = other17._busUpdatedflag;
  _lastCurrentVarPointUpdateTime = other17._lastCurrentVarPointUpdateTime;
  _estimatedVarLoadPointId = other17._estimatedVarLoadPointId;
  _estimatedVarLoadPointValue = other17._estimatedVarLoadPointValue;
  _dailyOperationsAnalogPointId = other17._dailyOperationsAnalogPointId;
  _powerFactorPointId = other17._powerFactorPointId;
  _estimatedPowerFactorPointId = other17._estimatedPowerFactorPointId;
  _currentDailyOperations = other17._currentDailyOperations;
  _peakTimeFlag = other17._peakTimeFlag;
  _recentlyControlledFlag = other17._recentlyControlledFlag;
  _lastOperationTime = other17._lastOperationTime;
  _varValueBeforeControl = other17._varValueBeforeControl;
  _powerFactorValue = other17._powerFactorValue;
  _estimatedPowerFactorValue = other17._estimatedPowerFactorValue;
  _currentVarPointQuality = other17._currentVarPointQuality;
  _waiveControlFlag = other17._waiveControlFlag;
  _strategy_peakLag = other17._strategy_peakLag;
  _strategy_offPeakLag = other17._strategy_offPeakLag;
  _strategy_peakLead = other17._strategy_peakLead;
  _strategy_offPeakLead = other17._strategy_offPeakLead;
  _currentVoltLoadPointId = other17._currentVoltLoadPointId;
  _voltValue = other17._voltValue;
  _verificationFlag = other17._verificationFlag;
  _switchOverStatus = other17._switchOverStatus;
  _currentWattPointQuality = other17._currentWattPointQuality;
  _currentVoltPointQuality = other17._currentVoltPointQuality;
  _targetVarValue = other17._targetVarValue;
  _solution = other17._solution;
  _ovUvDisabledFlag = other17._ovUvDisabledFlag;
  _strategy_peakPFSetPoint = other17._strategy_peakPFSetPoint;
  _strategy_offPeakPFSetPoint = other17._strategy_offPeakPFSetPoint;
  _strategy_controlMethod = other17._strategy_controlMethod;
  _phaseAValue = other17._phaseAValue;
  _phaseBValue = other17._phaseBValue;
  _phaseCValue = other17._phaseCValue;
  _likeDayControlFlag = other17._likeDayControlFlag;
  _displayOrder = other17._displayOrder;
  _voltReductionFlag = other17._voltReductionFlag;
  _usePhaseData = other17._usePhaseData;
  _primaryBusFlag = other17._primaryBusFlag;
  _altSubId = other17._altSubId;
  _dualBusEnabled = other17._dualBusEnabled;
  _strategyId = other17._strategyId;
  _dmvTestRunningFlag = other17._dmvTestRunningFlag;
  _ccFeeders = other17._ccFeeders;
  return *this;
}
void CCSubstationBusItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CCSubstationBusItem(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_parentId=" << to_string(_parentId);
  out << ", " << "_strategy_maxDailyOperation=" << to_string(_strategy_maxDailyOperation);
  out << ", " << "_strategy_maxOperationDisableFlag=" << to_string(_strategy_maxOperationDisableFlag);
  out << ", " << "_currentVarLoadPointId=" << to_string(_currentVarLoadPointId);
  out << ", " << "_varValue=" << to_string(_varValue);
  out << ", " << "_currentWattLoadPointId=" << to_string(_currentWattLoadPointId);
  out << ", " << "_wattValue=" << to_string(_wattValue);
  out << ", " << "_mapLocationId=" << to_string(_mapLocationId);
  out << ", " << "_strategy_controlUnits=" << to_string(_strategy_controlUnits);
  out << ", " << "_decimalPlaces=" << to_string(_decimalPlaces);
  out << ", " << "_newPointDataReceivedFlag=" << to_string(_newPointDataReceivedFlag);
  out << ", " << "_busUpdatedflag=" << to_string(_busUpdatedflag);
  out << ", " << "_lastCurrentVarPointUpdateTime=" << to_string(_lastCurrentVarPointUpdateTime);
  out << ", " << "_estimatedVarLoadPointId=" << to_string(_estimatedVarLoadPointId);
  out << ", " << "_estimatedVarLoadPointValue=" << to_string(_estimatedVarLoadPointValue);
  out << ", " << "_dailyOperationsAnalogPointId=" << to_string(_dailyOperationsAnalogPointId);
  out << ", " << "_powerFactorPointId=" << to_string(_powerFactorPointId);
  out << ", " << "_estimatedPowerFactorPointId=" << to_string(_estimatedPowerFactorPointId);
  out << ", " << "_currentDailyOperations=" << to_string(_currentDailyOperations);
  out << ", " << "_peakTimeFlag=" << to_string(_peakTimeFlag);
  out << ", " << "_recentlyControlledFlag=" << to_string(_recentlyControlledFlag);
  out << ", " << "_lastOperationTime=" << to_string(_lastOperationTime);
  out << ", " << "_varValueBeforeControl=" << to_string(_varValueBeforeControl);
  out << ", " << "_powerFactorValue=" << to_string(_powerFactorValue);
  out << ", " << "_estimatedPowerFactorValue=" << to_string(_estimatedPowerFactorValue);
  out << ", " << "_currentVarPointQuality=" << to_string(_currentVarPointQuality);
  out << ", " << "_waiveControlFlag=" << to_string(_waiveControlFlag);
  out << ", " << "_strategy_peakLag=" << to_string(_strategy_peakLag);
  out << ", " << "_strategy_offPeakLag=" << to_string(_strategy_offPeakLag);
  out << ", " << "_strategy_peakLead=" << to_string(_strategy_peakLead);
  out << ", " << "_strategy_offPeakLead=" << to_string(_strategy_offPeakLead);
  out << ", " << "_currentVoltLoadPointId=" << to_string(_currentVoltLoadPointId);
  out << ", " << "_voltValue=" << to_string(_voltValue);
  out << ", " << "_verificationFlag=" << to_string(_verificationFlag);
  out << ", " << "_switchOverStatus=" << to_string(_switchOverStatus);
  out << ", " << "_currentWattPointQuality=" << to_string(_currentWattPointQuality);
  out << ", " << "_currentVoltPointQuality=" << to_string(_currentVoltPointQuality);
  out << ", " << "_targetVarValue=" << to_string(_targetVarValue);
  out << ", " << "_solution=" << to_string(_solution);
  out << ", " << "_ovUvDisabledFlag=" << to_string(_ovUvDisabledFlag);
  out << ", " << "_strategy_peakPFSetPoint=" << to_string(_strategy_peakPFSetPoint);
  out << ", " << "_strategy_offPeakPFSetPoint=" << to_string(_strategy_offPeakPFSetPoint);
  out << ", " << "_strategy_controlMethod=" << to_string(_strategy_controlMethod);
  out << ", " << "_phaseAValue=" << to_string(_phaseAValue);
  out << ", " << "_phaseBValue=" << to_string(_phaseBValue);
  out << ", " << "_phaseCValue=" << to_string(_phaseCValue);
  out << ", " << "_likeDayControlFlag=" << to_string(_likeDayControlFlag);
  out << ", " << "_displayOrder=" << to_string(_displayOrder);
  out << ", " << "_voltReductionFlag=" << to_string(_voltReductionFlag);
  out << ", " << "_usePhaseData=" << to_string(_usePhaseData);
  out << ", " << "_primaryBusFlag=" << to_string(_primaryBusFlag);
  out << ", " << "_altSubId=" << to_string(_altSubId);
  out << ", " << "_dualBusEnabled=" << to_string(_dualBusEnabled);
  out << ", " << "_strategyId=" << to_string(_strategyId);
  out << ", " << "_dmvTestRunningFlag=" << to_string(_dmvTestRunningFlag);
  out << ", " << "_ccFeeders=" << to_string(_ccFeeders);
  out << ")";
}


CCSubstationBus::~CCSubstationBus() throw() {
}


void CCSubstationBus::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val) {
  this->_baseMessage = val;
}

void CCSubstationBus::__set__msgInfoBitMask(const int32_t val) {
  this->_msgInfoBitMask = val;
}

void CCSubstationBus::__set__ccSubstationBuses(const std::vector<CCSubstationBusItem> & val) {
  this->_ccSubstationBuses = val;
}
std::ostream& operator<<(std::ostream& out, const CCSubstationBus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CCSubstationBus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__msgInfoBitMask = false;
  bool isset__ccSubstationBuses = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_msgInfoBitMask);
          isset__msgInfoBitMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_ccSubstationBuses.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->_ccSubstationBuses.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->_ccSubstationBuses[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__ccSubstationBuses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__msgInfoBitMask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ccSubstationBuses)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCSubstationBus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CCSubstationBus");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_msgInfoBitMask", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_msgInfoBitMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ccSubstationBuses", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_ccSubstationBuses.size()));
    std::vector<CCSubstationBusItem> ::const_iterator _iter23;
    for (_iter23 = this->_ccSubstationBuses.begin(); _iter23 != this->_ccSubstationBuses.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCSubstationBus &a, CCSubstationBus &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._msgInfoBitMask, b._msgInfoBitMask);
  swap(a._ccSubstationBuses, b._ccSubstationBuses);
}

CCSubstationBus::CCSubstationBus(const CCSubstationBus& other24) {
  _baseMessage = other24._baseMessage;
  _msgInfoBitMask = other24._msgInfoBitMask;
  _ccSubstationBuses = other24._ccSubstationBuses;
}
CCSubstationBus& CCSubstationBus::operator=(const CCSubstationBus& other25) {
  _baseMessage = other25._baseMessage;
  _msgInfoBitMask = other25._msgInfoBitMask;
  _ccSubstationBuses = other25._ccSubstationBuses;
  return *this;
}
void CCSubstationBus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CCSubstationBus(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_msgInfoBitMask=" << to_string(_msgInfoBitMask);
  out << ", " << "_ccSubstationBuses=" << to_string(_ccSubstationBuses);
  out << ")";
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NetworkManagerMessaging_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kNetworkManagerMessageLifetimeValues[] = {
  NetworkManagerMessageLifetime::SESSION,
  NetworkManagerMessageLifetime::UNTIL_CANCEL
};
const char* _kNetworkManagerMessageLifetimeNames[] = {
  "SESSION",
  "UNTIL_CANCEL"
};
const std::map<int, const char*> _NetworkManagerMessageLifetime_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kNetworkManagerMessageLifetimeValues, _kNetworkManagerMessageLifetimeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNetworkManagerCancelTypeValues[] = {
  NetworkManagerCancelType::MESSAGE_IDS,
  NetworkManagerCancelType::GROUP_IDS
};
const char* _kNetworkManagerCancelTypeNames[] = {
  "MESSAGE_IDS",
  "GROUP_IDS"
};
const std::map<int, const char*> _NetworkManagerCancelType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kNetworkManagerCancelTypeValues, _kNetworkManagerCancelTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNetworkManagerMessageCancelStatusValues[] = {
  NetworkManagerMessageCancelStatus::SUCCESS,
  NetworkManagerMessageCancelStatus::NOT_FOUND
};
const char* _kNetworkManagerMessageCancelStatusNames[] = {
  "SUCCESS",
  "NOT_FOUND"
};
const std::map<int, const char*> _NetworkManagerMessageCancelStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kNetworkManagerMessageCancelStatusValues, _kNetworkManagerMessageCancelStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* NetworkManagerRequestHeader::ascii_fingerprint = "7D01F493AD020ADB321B3BE350741687";
const uint8_t NetworkManagerRequestHeader::binary_fingerprint[16] = {0x7D,0x01,0xF4,0x93,0xAD,0x02,0x0A,0xDB,0x32,0x1B,0x3B,0xE3,0x50,0x74,0x16,0x87};

uint32_t NetworkManagerRequestHeader::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_clientGuid = false;
  bool isset_sessionId = false;
  bool isset_messageId = false;
  bool isset_priority = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientGuid);
          isset_clientGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sessionId);
          isset_sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageId);
          isset_messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->groupId);
          this->__isset.groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->priority);
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expiration);
          this->__isset.expiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->lifetime = (NetworkManagerMessageLifetime::type)ecast0;
          this->__isset.lifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_clientGuid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sessionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_messageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NetworkManagerRequestHeader::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NetworkManagerRequestHeader");

  xfer += oprot->writeFieldBegin("clientGuid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->clientGuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->messageId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.groupId) {
    xfer += oprot->writeFieldBegin("groupId", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->groupId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->priority);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.expiration) {
    xfer += oprot->writeFieldBegin("expiration", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->expiration);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lifetime) {
    xfer += oprot->writeFieldBegin("lifetime", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->lifetime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NetworkManagerRequestHeader &a, NetworkManagerRequestHeader &b) {
  using ::std::swap;
  swap(a.clientGuid, b.clientGuid);
  swap(a.sessionId, b.sessionId);
  swap(a.messageId, b.messageId);
  swap(a.groupId, b.groupId);
  swap(a.priority, b.priority);
  swap(a.expiration, b.expiration);
  swap(a.lifetime, b.lifetime);
  swap(a.__isset, b.__isset);
}

const char* NetworkManagerRequestAck::ascii_fingerprint = "E7650E34FEACBE8CB9699EFF5043476B";
const uint8_t NetworkManagerRequestAck::binary_fingerprint[16] = {0xE7,0x65,0x0E,0x34,0xFE,0xAC,0xBE,0x8C,0xB9,0x69,0x9E,0xFF,0x50,0x43,0x47,0x6B};

uint32_t NetworkManagerRequestAck::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_header = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          isset_header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_header)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NetworkManagerRequestAck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NetworkManagerRequestAck");

  xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->header.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NetworkManagerRequestAck &a, NetworkManagerRequestAck &b) {
  using ::std::swap;
  swap(a.header, b.header);
}

const char* NetworkManagerCancelRequest::ascii_fingerprint = "E426BD3E6EEB8E3F4AB4F041FAE9FDF9";
const uint8_t NetworkManagerCancelRequest::binary_fingerprint[16] = {0xE4,0x26,0xBD,0x3E,0x6E,0xEB,0x8E,0x3F,0x4A,0xB4,0xF0,0x41,0xFA,0xE9,0xFD,0xF9};

uint32_t NetworkManagerCancelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_clientGuid = false;
  bool isset_sessionId = false;
  bool isset_type = false;
  bool isset_ids = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientGuid);
          isset_clientGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sessionId);
          isset_sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type = (NetworkManagerCancelType::type)ecast1;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->ids.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readSetBegin(_etype5, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              int64_t _elem7;
              xfer += iprot->readI64(_elem7);
              this->ids.insert(_elem7);
            }
            xfer += iprot->readSetEnd();
          }
          isset_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_clientGuid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sessionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ids)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NetworkManagerCancelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NetworkManagerCancelRequest");

  xfer += oprot->writeFieldBegin("clientGuid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->clientGuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ids", ::apache::thrift::protocol::T_SET, 4);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ids.size()));
    std::set<int64_t> ::const_iterator _iter8;
    for (_iter8 = this->ids.begin(); _iter8 != this->ids.end(); ++_iter8)
    {
      xfer += oprot->writeI64((*_iter8));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NetworkManagerCancelRequest &a, NetworkManagerCancelRequest &b) {
  using ::std::swap;
  swap(a.clientGuid, b.clientGuid);
  swap(a.sessionId, b.sessionId);
  swap(a.type, b.type);
  swap(a.ids, b.ids);
}

const char* NetworkManagerCancelRequestAck::ascii_fingerprint = "41FA19EC2D4CBB39D51F9A779D4AE59D";
const uint8_t NetworkManagerCancelRequestAck::binary_fingerprint[16] = {0x41,0xFA,0x19,0xEC,0x2D,0x4C,0xBB,0x39,0xD5,0x1F,0x9A,0x77,0x9D,0x4A,0xE5,0x9D};

uint32_t NetworkManagerCancelRequestAck::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_request = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->request.read(iprot);
          isset_request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_request)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NetworkManagerCancelRequestAck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NetworkManagerCancelRequestAck");

  xfer += oprot->writeFieldBegin("request", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->request.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NetworkManagerCancelRequestAck &a, NetworkManagerCancelRequestAck &b) {
  using ::std::swap;
  swap(a.request, b.request);
}

const char* NetworkManagerCancelResponse::ascii_fingerprint = "807231FE35359F38C8F9EEC3EBAEF0F6";
const uint8_t NetworkManagerCancelResponse::binary_fingerprint[16] = {0x80,0x72,0x31,0xFE,0x35,0x35,0x9F,0x38,0xC8,0xF9,0xEE,0xC3,0xEB,0xAE,0xF0,0xF6};

uint32_t NetworkManagerCancelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_clientGuid = false;
  bool isset_sessionId = false;
  bool isset_messageIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientGuid);
          isset_clientGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sessionId);
          isset_sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->messageIds.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _ktype10;
            ::apache::thrift::protocol::TType _vtype11;
            xfer += iprot->readMapBegin(_ktype10, _vtype11, _size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              int64_t _key14;
              xfer += iprot->readI64(_key14);
              NetworkManagerMessageCancelStatus::type& _val15 = this->messageIds[_key14];
              int32_t ecast16;
              xfer += iprot->readI32(ecast16);
              _val15 = (NetworkManagerMessageCancelStatus::type)ecast16;
            }
            xfer += iprot->readMapEnd();
          }
          isset_messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_clientGuid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sessionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_messageIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NetworkManagerCancelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NetworkManagerCancelResponse");

  xfer += oprot->writeFieldBegin("clientGuid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->clientGuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->messageIds.size()));
    std::map<int64_t, NetworkManagerMessageCancelStatus::type> ::const_iterator _iter17;
    for (_iter17 = this->messageIds.begin(); _iter17 != this->messageIds.end(); ++_iter17)
    {
      xfer += oprot->writeI64(_iter17->first);
      xfer += oprot->writeI32((int32_t)_iter17->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NetworkManagerCancelResponse &a, NetworkManagerCancelResponse &b) {
  using ::std::swap;
  swap(a.clientGuid, b.clientGuid);
  swap(a.sessionId, b.sessionId);
  swap(a.messageIds, b.messageIds);
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCCommand_TYPES_H
#define CCCommand_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCCommand {
 public:

  static const char* ascii_fingerprint; // = "B3D2273D6CC64D984191CE4F8FAF30C8";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xD2,0x27,0x3D,0x6C,0xC6,0x4D,0x98,0x41,0x91,0xCE,0x4F,0x8F,0xAF,0x30,0xC8};

  CCCommand() : _messageId(0), _commandId(0) {
  }

  virtual ~CCCommand() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _messageId;
  int32_t _commandId;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__messageId(const int32_t val) {
    _messageId = val;
  }

  void __set__commandId(const int32_t val) {
    _commandId = val;
  }

  bool operator == (const CCCommand & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_messageId == rhs._messageId))
      return false;
    if (!(_commandId == rhs._commandId))
      return false;
    return true;
  }
  bool operator != (const CCCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCCommand &a, CCCommand &b);

}}}} // namespace

#endif

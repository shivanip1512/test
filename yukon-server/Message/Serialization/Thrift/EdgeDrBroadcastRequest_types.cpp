/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "EdgeDrBroadcastRequest_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kEdgeBroadcastMessagePriorityValues[] = {
  EdgeBroadcastMessagePriority::IMMEDIATE,
  EdgeBroadcastMessagePriority::NON_REAL_TIME
};
const char* _kEdgeBroadcastMessagePriorityNames[] = {
  "IMMEDIATE",
  "NON_REAL_TIME"
};
const std::map<int, const char*> _EdgeBroadcastMessagePriority_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kEdgeBroadcastMessagePriorityValues, _kEdgeBroadcastMessagePriorityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EdgeBroadcastMessagePriority::type& val) {
  std::map<int, const char*>::const_iterator it = _EdgeBroadcastMessagePriority_VALUES_TO_NAMES.find(val);
  if (it != _EdgeBroadcastMessagePriority_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const EdgeBroadcastMessagePriority::type& val) {
  std::map<int, const char*>::const_iterator it = _EdgeBroadcastMessagePriority_VALUES_TO_NAMES.find(val);
  if (it != _EdgeBroadcastMessagePriority_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


EdgeDrBroadcastRequest::~EdgeDrBroadcastRequest() noexcept {
}


void EdgeDrBroadcastRequest::__set_messageGuid(const std::string& val) {
  this->messageGuid = val;
}

void EdgeDrBroadcastRequest::__set_payload(const std::string& val) {
  this->payload = val;
}

void EdgeDrBroadcastRequest::__set_priority(const EdgeBroadcastMessagePriority::type val) {
  this->priority = val;
__isset.priority = true;
}
std::ostream& operator<<(std::ostream& out, const EdgeDrBroadcastRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EdgeDrBroadcastRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_messageGuid = false;
  bool isset_payload = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageGuid);
          isset_messageGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          isset_payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->priority = (EdgeBroadcastMessagePriority::type)ecast0;
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_messageGuid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EdgeDrBroadcastRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EdgeDrBroadcastRequest");

  xfer += oprot->writeFieldBegin("messageGuid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageGuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->payload);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->priority);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EdgeDrBroadcastRequest &a, EdgeDrBroadcastRequest &b) {
  using ::std::swap;
  swap(a.messageGuid, b.messageGuid);
  swap(a.payload, b.payload);
  swap(a.priority, b.priority);
  swap(a.__isset, b.__isset);
}

EdgeDrBroadcastRequest::EdgeDrBroadcastRequest(const EdgeDrBroadcastRequest& other1) {
  messageGuid = other1.messageGuid;
  payload = other1.payload;
  priority = other1.priority;
  __isset = other1.__isset;
}
EdgeDrBroadcastRequest& EdgeDrBroadcastRequest::operator=(const EdgeDrBroadcastRequest& other2) {
  messageGuid = other2.messageGuid;
  payload = other2.payload;
  priority = other2.priority;
  __isset = other2.__isset;
  return *this;
}
void EdgeDrBroadcastRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EdgeDrBroadcastRequest(";
  out << "messageGuid=" << to_string(messageGuid);
  out << ", " << "payload=" << to_string(payload);
  out << ", " << "priority="; (__isset.priority ? (out << to_string(priority)) : (out << "<null>"));
  out << ")";
}

}}}} // namespace

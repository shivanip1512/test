/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCMessage_TYPES_H
#define CCMessage_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCMessage {
 public:

  static const char* ascii_fingerprint; // = "B38875B68F29A43A78DE7BDBC6089C1E";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x88,0x75,0xB6,0x8F,0x29,0xA4,0x3A,0x78,0xDE,0x7B,0xDB,0xC6,0x08,0x9C,0x1E};

  CCMessage() {
  }

  virtual ~CCMessage() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  bool operator == (const CCMessage & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    return true;
  }
  bool operator != (const CCMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCMessage &a, CCMessage &b);


class CCPao {
 public:

  static const char* ascii_fingerprint; // = "932CF9B80FDEF764D51D16FBB66B6E79";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0x2C,0xF9,0xB8,0x0F,0xDE,0xF7,0x64,0xD5,0x1D,0x16,0xFB,0xB6,0x6B,0x6E,0x79};

  CCPao() : _paoId(0), _paoCategory(), _paoClass(), _paoName(), _paoType(), _paoDescription(), _disableFlag(0) {
  }

  virtual ~CCPao() throw() {}

  int32_t _paoId;
  std::string _paoCategory;
  std::string _paoClass;
  std::string _paoName;
  std::string _paoType;
  std::string _paoDescription;
  bool _disableFlag;

  void __set__paoId(const int32_t val) {
    _paoId = val;
  }

  void __set__paoCategory(const std::string& val) {
    _paoCategory = val;
  }

  void __set__paoClass(const std::string& val) {
    _paoClass = val;
  }

  void __set__paoName(const std::string& val) {
    _paoName = val;
  }

  void __set__paoType(const std::string& val) {
    _paoType = val;
  }

  void __set__paoDescription(const std::string& val) {
    _paoDescription = val;
  }

  void __set__disableFlag(const bool val) {
    _disableFlag = val;
  }

  bool operator == (const CCPao & rhs) const
  {
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_paoCategory == rhs._paoCategory))
      return false;
    if (!(_paoClass == rhs._paoClass))
      return false;
    if (!(_paoName == rhs._paoName))
      return false;
    if (!(_paoType == rhs._paoType))
      return false;
    if (!(_paoDescription == rhs._paoDescription))
      return false;
    if (!(_disableFlag == rhs._disableFlag))
      return false;
    return true;
  }
  bool operator != (const CCPao &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCPao & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCPao &a, CCPao &b);

}}}} // namespace

#endif

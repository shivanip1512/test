/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCMessage_TYPES_H
#define CCMessage_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class CCMessage;

class CCPao;


class CCMessage : public virtual ::apache::thrift::TBase {
 public:

  CCMessage(const CCMessage&);
  CCMessage& operator=(const CCMessage&);
  CCMessage() {
  }

  virtual ~CCMessage() throw();
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  bool operator == (const CCMessage & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    return true;
  }
  bool operator != (const CCMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCMessage &a, CCMessage &b);

std::ostream& operator<<(std::ostream& out, const CCMessage& obj);


class CCPao : public virtual ::apache::thrift::TBase {
 public:

  CCPao(const CCPao&);
  CCPao& operator=(const CCPao&);
  CCPao() : _paoId(0), _paoCategory(), _paoClass(), _paoName(), _paoType(), _paoDescription(), _disableFlag(0) {
  }

  virtual ~CCPao() throw();
  int32_t _paoId;
  std::string _paoCategory;
  std::string _paoClass;
  std::string _paoName;
  std::string _paoType;
  std::string _paoDescription;
  bool _disableFlag;

  void __set__paoId(const int32_t val);

  void __set__paoCategory(const std::string& val);

  void __set__paoClass(const std::string& val);

  void __set__paoName(const std::string& val);

  void __set__paoType(const std::string& val);

  void __set__paoDescription(const std::string& val);

  void __set__disableFlag(const bool val);

  bool operator == (const CCPao & rhs) const
  {
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_paoCategory == rhs._paoCategory))
      return false;
    if (!(_paoClass == rhs._paoClass))
      return false;
    if (!(_paoName == rhs._paoName))
      return false;
    if (!(_paoType == rhs._paoType))
      return false;
    if (!(_paoDescription == rhs._paoDescription))
      return false;
    if (!(_disableFlag == rhs._disableFlag))
      return false;
    return true;
  }
  bool operator != (const CCPao &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCPao & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCPao &a, CCPao &b);

std::ostream& operator<<(std::ostream& out, const CCPao& obj);

}}}} // namespace

#endif

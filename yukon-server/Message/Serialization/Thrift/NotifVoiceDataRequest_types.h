/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotifVoiceDataRequest_TYPES_H
#define NotifVoiceDataRequest_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class NotifVoiceDataRequest {
 public:

  static const char* ascii_fingerprint; // = "F1F1E1D345DB32BD1B0C809FB95C6187";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xF1,0xE1,0xD3,0x45,0xDB,0x32,0xBD,0x1B,0x0C,0x80,0x9F,0xB9,0x5C,0x61,0x87};

  NotifVoiceDataRequest() : _callToken() {
  }

  virtual ~NotifVoiceDataRequest() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  std::string _callToken;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__callToken(const std::string& val) {
    _callToken = val;
  }

  bool operator == (const NotifVoiceDataRequest & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_callToken == rhs._callToken))
      return false;
    return true;
  }
  bool operator != (const NotifVoiceDataRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotifVoiceDataRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotifVoiceDataRequest &a, NotifVoiceDataRequest &b);

}}}} // namespace

#endif

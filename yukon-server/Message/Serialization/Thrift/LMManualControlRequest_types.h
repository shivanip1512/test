/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMManualControlRequest_TYPES_H
#define LMManualControlRequest_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "LMMessage_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class LMManualControlRequest;


class LMManualControlRequest : public virtual ::apache::thrift::TBase {
 public:

  LMManualControlRequest(const LMManualControlRequest&);
  LMManualControlRequest& operator=(const LMManualControlRequest&);
  LMManualControlRequest() noexcept
                         : _command(0),
                           _paoId(0),
                           _notifyTime(0),
                           _startTime(0),
                           _stopTime(0),
                           _startGear(0),
                           _startPriority(0),
                           _additionalInfo(),
                           _constraintCmd(0),
                           _originSource() {
  }

  virtual ~LMManualControlRequest() noexcept;
   ::Cti::Messaging::Serialization::Thrift::LMMessage _baseMessage;
  int32_t _command;
  int32_t _paoId;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _notifyTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _startTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _stopTime;
  int32_t _startGear;
  int32_t _startPriority;
  std::string _additionalInfo;
  int32_t _constraintCmd;
  std::string _originSource;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::LMMessage& val);

  void __set__command(const int32_t val);

  void __set__paoId(const int32_t val);

  void __set__notifyTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__startTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__stopTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__startGear(const int32_t val);

  void __set__startPriority(const int32_t val);

  void __set__additionalInfo(const std::string& val);

  void __set__constraintCmd(const int32_t val);

  void __set__originSource(const std::string& val);

  bool operator == (const LMManualControlRequest & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_command == rhs._command))
      return false;
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_notifyTime == rhs._notifyTime))
      return false;
    if (!(_startTime == rhs._startTime))
      return false;
    if (!(_stopTime == rhs._stopTime))
      return false;
    if (!(_startGear == rhs._startGear))
      return false;
    if (!(_startPriority == rhs._startPriority))
      return false;
    if (!(_additionalInfo == rhs._additionalInfo))
      return false;
    if (!(_constraintCmd == rhs._constraintCmd))
      return false;
    if (!(_originSource == rhs._originSource))
      return false;
    return true;
  }
  bool operator != (const LMManualControlRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMManualControlRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMManualControlRequest &a, LMManualControlRequest &b);

std::ostream& operator<<(std::ostream& out, const LMManualControlRequest& obj);

}}}} // namespace

#endif

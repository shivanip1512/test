/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RfnBroadcastMessaging_TYPES_H
#define RfnBroadcastMessaging_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "RfnE2eData_types.h"
#include "NetworkManagerMessaging_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

struct RfnBroadcastDeliveryType {
  enum type {
    IMMEDIATE = 0,
    NON_REAL_TIME = 1
  };
};

extern const std::map<int, const char*> _RfnBroadcastDeliveryType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const RfnBroadcastDeliveryType::type& val);

std::string to_string(const RfnBroadcastDeliveryType::type& val);

class RfnBroadcastRequest;

class RfnBroadcastReply;

typedef struct _RfnBroadcastRequest__isset {
  _RfnBroadcastRequest__isset() : header(false) {}
  bool header :1;
} _RfnBroadcastRequest__isset;

class RfnBroadcastRequest : public virtual ::apache::thrift::TBase {
 public:

  RfnBroadcastRequest(const RfnBroadcastRequest&);
  RfnBroadcastRequest& operator=(const RfnBroadcastRequest&);
  RfnBroadcastRequest() : sourceId(1), messageId(0), broadcastApplicationId(0), deliveryType((RfnBroadcastDeliveryType::type)0), payload() {
  }

  virtual ~RfnBroadcastRequest() noexcept;
  int8_t sourceId;
  int16_t messageId;
  int8_t broadcastApplicationId;
  RfnBroadcastDeliveryType::type deliveryType;
  std::string payload;
   ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader header;

  _RfnBroadcastRequest__isset __isset;

  void __set_sourceId(const int8_t val);

  void __set_messageId(const int16_t val);

  void __set_broadcastApplicationId(const int8_t val);

  void __set_deliveryType(const RfnBroadcastDeliveryType::type val);

  void __set_payload(const std::string& val);

  void __set_header(const  ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader& val);

  bool operator == (const RfnBroadcastRequest & rhs) const
  {
    if (!(sourceId == rhs.sourceId))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(broadcastApplicationId == rhs.broadcastApplicationId))
      return false;
    if (!(deliveryType == rhs.deliveryType))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const RfnBroadcastRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnBroadcastRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RfnBroadcastRequest &a, RfnBroadcastRequest &b);

std::ostream& operator<<(std::ostream& out, const RfnBroadcastRequest& obj);

typedef struct _RfnBroadcastReply__isset {
  _RfnBroadcastReply__isset() : failureReason(false), header(false) {}
  bool failureReason :1;
  bool header :1;
} _RfnBroadcastReply__isset;

class RfnBroadcastReply : public virtual ::apache::thrift::TBase {
 public:

  RfnBroadcastReply(const RfnBroadcastReply&);
  RfnBroadcastReply& operator=(const RfnBroadcastReply&);
  RfnBroadcastReply() : replyType(0), failureReason() {
  }

  virtual ~RfnBroadcastReply() noexcept;
  int32_t replyType;
  std::string failureReason;
  std::map< ::Cti::Messaging::Serialization::Thrift::RfnIdentifier, std::string>  gatewayErrors;
   ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader header;

  _RfnBroadcastReply__isset __isset;

  void __set_replyType(const int32_t val);

  void __set_failureReason(const std::string& val);

  void __set_gatewayErrors(const std::map< ::Cti::Messaging::Serialization::Thrift::RfnIdentifier, std::string> & val);

  void __set_header(const  ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader& val);

  bool operator == (const RfnBroadcastReply & rhs) const
  {
    if (!(replyType == rhs.replyType))
      return false;
    if (__isset.failureReason != rhs.__isset.failureReason)
      return false;
    else if (__isset.failureReason && !(failureReason == rhs.failureReason))
      return false;
    if (!(gatewayErrors == rhs.gatewayErrors))
      return false;
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const RfnBroadcastReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnBroadcastReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RfnBroadcastReply &a, RfnBroadcastReply &b);

std::ostream& operator<<(std::ostream& out, const RfnBroadcastReply& obj);

}}}} // namespace

#endif

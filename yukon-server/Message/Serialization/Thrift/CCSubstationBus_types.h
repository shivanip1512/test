/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCSubstationBus_TYPES_H
#define CCSubstationBus_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "CCMessage_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class CCCapBank;

class CCFeeder;

class CCSubstationBusItem;

class CCSubstationBus;


class CCCapBank : public virtual ::apache::thrift::TBase {
 public:

  CCCapBank(const CCCapBank&);
  CCCapBank& operator=(const CCCapBank&);
  CCCapBank() noexcept
            : _parentId(0),
              _maxDailyOps(0),
              _maxOpsDisableFlag(0),
              _alarmInhibitFlag(0),
              _controlInhibitFlag(0),
              _operationalState(),
              _controllerType(),
              _controlDeviceId(0),
              _bankSize(0),
              _typeOfSwitch(),
              _switchManufacture(),
              _mapLocationId(),
              _recloseDelay(0),
              _controlOrder(0),
              _statusPointId(0),
              _controlStatus(0),
              _operationAnalogPointId(0),
              _totalOperations(0),
              _lastStatusChangeTime(0),
              _tagsControlStatus(0),
              _originalParentId(0),
              _currentDailyOperations(0),
              _ignoreFlag(0),
              _ignoreReason(0),
              _ovUvDisabledFlag(0),
              _tripOrder(0),
              _closeOrder(0),
              _controlDeviceType(),
              _sBeforeVars(),
              _sAfterVars(),
              _sPercentChange(),
              _maxDailyOpsHitFlag(0),
              _ovUvSituationFlag(0),
              _controlStatusQuality(0),
              _localControlFlag(0),
              _partialPhaseInfo() {
  }

  virtual ~CCCapBank() noexcept;
   ::Cti::Messaging::Serialization::Thrift::CCPao _baseMessage;
  int32_t _parentId;
  int32_t _maxDailyOps;
  bool _maxOpsDisableFlag;
  bool _alarmInhibitFlag;
  bool _controlInhibitFlag;
  std::string _operationalState;
  std::string _controllerType;
  int32_t _controlDeviceId;
  int32_t _bankSize;
  std::string _typeOfSwitch;
  std::string _switchManufacture;
  std::string _mapLocationId;
  int32_t _recloseDelay;
  double _controlOrder;
  int32_t _statusPointId;
  int32_t _controlStatus;
  int32_t _operationAnalogPointId;
  int32_t _totalOperations;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _lastStatusChangeTime;
  int32_t _tagsControlStatus;
  int32_t _originalParentId;
  int32_t _currentDailyOperations;
  bool _ignoreFlag;
  int32_t _ignoreReason;
  bool _ovUvDisabledFlag;
  double _tripOrder;
  double _closeOrder;
  std::string _controlDeviceType;
  std::string _sBeforeVars;
  std::string _sAfterVars;
  std::string _sPercentChange;
  bool _maxDailyOpsHitFlag;
  bool _ovUvSituationFlag;
  int32_t _controlStatusQuality;
  bool _localControlFlag;
  std::string _partialPhaseInfo;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val);

  void __set__parentId(const int32_t val);

  void __set__maxDailyOps(const int32_t val);

  void __set__maxOpsDisableFlag(const bool val);

  void __set__alarmInhibitFlag(const bool val);

  void __set__controlInhibitFlag(const bool val);

  void __set__operationalState(const std::string& val);

  void __set__controllerType(const std::string& val);

  void __set__controlDeviceId(const int32_t val);

  void __set__bankSize(const int32_t val);

  void __set__typeOfSwitch(const std::string& val);

  void __set__switchManufacture(const std::string& val);

  void __set__mapLocationId(const std::string& val);

  void __set__recloseDelay(const int32_t val);

  void __set__controlOrder(const double val);

  void __set__statusPointId(const int32_t val);

  void __set__controlStatus(const int32_t val);

  void __set__operationAnalogPointId(const int32_t val);

  void __set__totalOperations(const int32_t val);

  void __set__lastStatusChangeTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__tagsControlStatus(const int32_t val);

  void __set__originalParentId(const int32_t val);

  void __set__currentDailyOperations(const int32_t val);

  void __set__ignoreFlag(const bool val);

  void __set__ignoreReason(const int32_t val);

  void __set__ovUvDisabledFlag(const bool val);

  void __set__tripOrder(const double val);

  void __set__closeOrder(const double val);

  void __set__controlDeviceType(const std::string& val);

  void __set__sBeforeVars(const std::string& val);

  void __set__sAfterVars(const std::string& val);

  void __set__sPercentChange(const std::string& val);

  void __set__maxDailyOpsHitFlag(const bool val);

  void __set__ovUvSituationFlag(const bool val);

  void __set__controlStatusQuality(const int32_t val);

  void __set__localControlFlag(const bool val);

  void __set__partialPhaseInfo(const std::string& val);

  bool operator == (const CCCapBank & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_parentId == rhs._parentId))
      return false;
    if (!(_maxDailyOps == rhs._maxDailyOps))
      return false;
    if (!(_maxOpsDisableFlag == rhs._maxOpsDisableFlag))
      return false;
    if (!(_alarmInhibitFlag == rhs._alarmInhibitFlag))
      return false;
    if (!(_controlInhibitFlag == rhs._controlInhibitFlag))
      return false;
    if (!(_operationalState == rhs._operationalState))
      return false;
    if (!(_controllerType == rhs._controllerType))
      return false;
    if (!(_controlDeviceId == rhs._controlDeviceId))
      return false;
    if (!(_bankSize == rhs._bankSize))
      return false;
    if (!(_typeOfSwitch == rhs._typeOfSwitch))
      return false;
    if (!(_switchManufacture == rhs._switchManufacture))
      return false;
    if (!(_mapLocationId == rhs._mapLocationId))
      return false;
    if (!(_recloseDelay == rhs._recloseDelay))
      return false;
    if (!(_controlOrder == rhs._controlOrder))
      return false;
    if (!(_statusPointId == rhs._statusPointId))
      return false;
    if (!(_controlStatus == rhs._controlStatus))
      return false;
    if (!(_operationAnalogPointId == rhs._operationAnalogPointId))
      return false;
    if (!(_totalOperations == rhs._totalOperations))
      return false;
    if (!(_lastStatusChangeTime == rhs._lastStatusChangeTime))
      return false;
    if (!(_tagsControlStatus == rhs._tagsControlStatus))
      return false;
    if (!(_originalParentId == rhs._originalParentId))
      return false;
    if (!(_currentDailyOperations == rhs._currentDailyOperations))
      return false;
    if (!(_ignoreFlag == rhs._ignoreFlag))
      return false;
    if (!(_ignoreReason == rhs._ignoreReason))
      return false;
    if (!(_ovUvDisabledFlag == rhs._ovUvDisabledFlag))
      return false;
    if (!(_tripOrder == rhs._tripOrder))
      return false;
    if (!(_closeOrder == rhs._closeOrder))
      return false;
    if (!(_controlDeviceType == rhs._controlDeviceType))
      return false;
    if (!(_sBeforeVars == rhs._sBeforeVars))
      return false;
    if (!(_sAfterVars == rhs._sAfterVars))
      return false;
    if (!(_sPercentChange == rhs._sPercentChange))
      return false;
    if (!(_maxDailyOpsHitFlag == rhs._maxDailyOpsHitFlag))
      return false;
    if (!(_ovUvSituationFlag == rhs._ovUvSituationFlag))
      return false;
    if (!(_controlStatusQuality == rhs._controlStatusQuality))
      return false;
    if (!(_localControlFlag == rhs._localControlFlag))
      return false;
    if (!(_partialPhaseInfo == rhs._partialPhaseInfo))
      return false;
    return true;
  }
  bool operator != (const CCCapBank &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCCapBank & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCCapBank &a, CCCapBank &b);

std::ostream& operator<<(std::ostream& out, const CCCapBank& obj);


class CCFeeder : public virtual ::apache::thrift::TBase {
 public:

  CCFeeder(const CCFeeder&);
  CCFeeder& operator=(const CCFeeder&);
  CCFeeder() noexcept
           : _parentId(0),
             _strategy_maxDailyOperation(0),
             _strategy_maxOperationDisableFlag(0),
             _currentVarLoadPointId(0),
             _currentVarLoadPointValue(0),
             _currentWattLoadPointId(0),
             _currentWattLoadPointValue(0),
             _mapLocationId(),
             _displayOrder(0),
             _newPointDataReceivedFlag(0),
             _lastCurrentVarPointUpdateTime(0),
             _estimatedVarLoadPointId(0),
             _estimatedVarLoadPointValue(0),
             _dailyOperationsAnalogPointId(0),
             _powerFactorPointId(0),
             _estimatedPowerFactorPointId(0),
             _currentDailyOperations(0),
             _recentlyControlledFlag_or_performingVerificationFlag(0),
             _lastOperationTime(0),
             _varValueBeforeControl(0),
             _powerFactorValue(0),
             _estimatedPowerFactorValue(0),
             _currentVarPointQuality(0),
             _waiveControlFlag(0),
             _strategy_controlUnits(),
             _decimalPlaces(0),
             _peakTimeFlag(0),
             _strategy_peakLag(0),
             _strategy_offPeakLag(0),
             _strategy_PeakLead(0),
             _strategy_OffPeakLead(0),
             _currentVoltLoadPointId(0),
             _currentVoltLoadPointValue(0),
             _currentWattPointQuality(0),
             _currentVoltPointQuality(0),
             _targetVarValue(0),
             _solution(),
             _ovUvDisabledFlag(0),
             _strategy_peakPFSetPoint(0),
             _strategy_offPeakPFSetPoint(0),
             _strategy_controlMethod(),
             _phaseAValue(0),
             _phaseBValue(0),
             _phaseCValue(0),
             _likeDayControlFlag(0),
             _usePhaseData(0),
             _originalParentId(0) {
  }

  virtual ~CCFeeder() noexcept;
   ::Cti::Messaging::Serialization::Thrift::CCPao _baseMessage;
  int32_t _parentId;
  int32_t _strategy_maxDailyOperation;
  bool _strategy_maxOperationDisableFlag;
  int32_t _currentVarLoadPointId;
  double _currentVarLoadPointValue;
  int32_t _currentWattLoadPointId;
  double _currentWattLoadPointValue;
  std::string _mapLocationId;
  double _displayOrder;
  bool _newPointDataReceivedFlag;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _lastCurrentVarPointUpdateTime;
  int32_t _estimatedVarLoadPointId;
  double _estimatedVarLoadPointValue;
  int32_t _dailyOperationsAnalogPointId;
  int32_t _powerFactorPointId;
  int32_t _estimatedPowerFactorPointId;
  int32_t _currentDailyOperations;
  bool _recentlyControlledFlag_or_performingVerificationFlag;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _lastOperationTime;
  double _varValueBeforeControl;
  double _powerFactorValue;
  double _estimatedPowerFactorValue;
  int32_t _currentVarPointQuality;
  bool _waiveControlFlag;
  std::string _strategy_controlUnits;
  int32_t _decimalPlaces;
  bool _peakTimeFlag;
  double _strategy_peakLag;
  double _strategy_offPeakLag;
  double _strategy_PeakLead;
  double _strategy_OffPeakLead;
  int32_t _currentVoltLoadPointId;
  double _currentVoltLoadPointValue;
  int32_t _currentWattPointQuality;
  int32_t _currentVoltPointQuality;
  double _targetVarValue;
  std::string _solution;
  bool _ovUvDisabledFlag;
  double _strategy_peakPFSetPoint;
  double _strategy_offPeakPFSetPoint;
  std::string _strategy_controlMethod;
  double _phaseAValue;
  double _phaseBValue;
  double _phaseCValue;
  bool _likeDayControlFlag;
  bool _usePhaseData;
  int32_t _originalParentId;
  std::vector<CCCapBank>  _ccCapbanks;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val);

  void __set__parentId(const int32_t val);

  void __set__strategy_maxDailyOperation(const int32_t val);

  void __set__strategy_maxOperationDisableFlag(const bool val);

  void __set__currentVarLoadPointId(const int32_t val);

  void __set__currentVarLoadPointValue(const double val);

  void __set__currentWattLoadPointId(const int32_t val);

  void __set__currentWattLoadPointValue(const double val);

  void __set__mapLocationId(const std::string& val);

  void __set__displayOrder(const double val);

  void __set__newPointDataReceivedFlag(const bool val);

  void __set__lastCurrentVarPointUpdateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__estimatedVarLoadPointId(const int32_t val);

  void __set__estimatedVarLoadPointValue(const double val);

  void __set__dailyOperationsAnalogPointId(const int32_t val);

  void __set__powerFactorPointId(const int32_t val);

  void __set__estimatedPowerFactorPointId(const int32_t val);

  void __set__currentDailyOperations(const int32_t val);

  void __set__recentlyControlledFlag_or_performingVerificationFlag(const bool val);

  void __set__lastOperationTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__varValueBeforeControl(const double val);

  void __set__powerFactorValue(const double val);

  void __set__estimatedPowerFactorValue(const double val);

  void __set__currentVarPointQuality(const int32_t val);

  void __set__waiveControlFlag(const bool val);

  void __set__strategy_controlUnits(const std::string& val);

  void __set__decimalPlaces(const int32_t val);

  void __set__peakTimeFlag(const bool val);

  void __set__strategy_peakLag(const double val);

  void __set__strategy_offPeakLag(const double val);

  void __set__strategy_PeakLead(const double val);

  void __set__strategy_OffPeakLead(const double val);

  void __set__currentVoltLoadPointId(const int32_t val);

  void __set__currentVoltLoadPointValue(const double val);

  void __set__currentWattPointQuality(const int32_t val);

  void __set__currentVoltPointQuality(const int32_t val);

  void __set__targetVarValue(const double val);

  void __set__solution(const std::string& val);

  void __set__ovUvDisabledFlag(const bool val);

  void __set__strategy_peakPFSetPoint(const double val);

  void __set__strategy_offPeakPFSetPoint(const double val);

  void __set__strategy_controlMethod(const std::string& val);

  void __set__phaseAValue(const double val);

  void __set__phaseBValue(const double val);

  void __set__phaseCValue(const double val);

  void __set__likeDayControlFlag(const bool val);

  void __set__usePhaseData(const bool val);

  void __set__originalParentId(const int32_t val);

  void __set__ccCapbanks(const std::vector<CCCapBank> & val);

  bool operator == (const CCFeeder & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_parentId == rhs._parentId))
      return false;
    if (!(_strategy_maxDailyOperation == rhs._strategy_maxDailyOperation))
      return false;
    if (!(_strategy_maxOperationDisableFlag == rhs._strategy_maxOperationDisableFlag))
      return false;
    if (!(_currentVarLoadPointId == rhs._currentVarLoadPointId))
      return false;
    if (!(_currentVarLoadPointValue == rhs._currentVarLoadPointValue))
      return false;
    if (!(_currentWattLoadPointId == rhs._currentWattLoadPointId))
      return false;
    if (!(_currentWattLoadPointValue == rhs._currentWattLoadPointValue))
      return false;
    if (!(_mapLocationId == rhs._mapLocationId))
      return false;
    if (!(_displayOrder == rhs._displayOrder))
      return false;
    if (!(_newPointDataReceivedFlag == rhs._newPointDataReceivedFlag))
      return false;
    if (!(_lastCurrentVarPointUpdateTime == rhs._lastCurrentVarPointUpdateTime))
      return false;
    if (!(_estimatedVarLoadPointId == rhs._estimatedVarLoadPointId))
      return false;
    if (!(_estimatedVarLoadPointValue == rhs._estimatedVarLoadPointValue))
      return false;
    if (!(_dailyOperationsAnalogPointId == rhs._dailyOperationsAnalogPointId))
      return false;
    if (!(_powerFactorPointId == rhs._powerFactorPointId))
      return false;
    if (!(_estimatedPowerFactorPointId == rhs._estimatedPowerFactorPointId))
      return false;
    if (!(_currentDailyOperations == rhs._currentDailyOperations))
      return false;
    if (!(_recentlyControlledFlag_or_performingVerificationFlag == rhs._recentlyControlledFlag_or_performingVerificationFlag))
      return false;
    if (!(_lastOperationTime == rhs._lastOperationTime))
      return false;
    if (!(_varValueBeforeControl == rhs._varValueBeforeControl))
      return false;
    if (!(_powerFactorValue == rhs._powerFactorValue))
      return false;
    if (!(_estimatedPowerFactorValue == rhs._estimatedPowerFactorValue))
      return false;
    if (!(_currentVarPointQuality == rhs._currentVarPointQuality))
      return false;
    if (!(_waiveControlFlag == rhs._waiveControlFlag))
      return false;
    if (!(_strategy_controlUnits == rhs._strategy_controlUnits))
      return false;
    if (!(_decimalPlaces == rhs._decimalPlaces))
      return false;
    if (!(_peakTimeFlag == rhs._peakTimeFlag))
      return false;
    if (!(_strategy_peakLag == rhs._strategy_peakLag))
      return false;
    if (!(_strategy_offPeakLag == rhs._strategy_offPeakLag))
      return false;
    if (!(_strategy_PeakLead == rhs._strategy_PeakLead))
      return false;
    if (!(_strategy_OffPeakLead == rhs._strategy_OffPeakLead))
      return false;
    if (!(_currentVoltLoadPointId == rhs._currentVoltLoadPointId))
      return false;
    if (!(_currentVoltLoadPointValue == rhs._currentVoltLoadPointValue))
      return false;
    if (!(_currentWattPointQuality == rhs._currentWattPointQuality))
      return false;
    if (!(_currentVoltPointQuality == rhs._currentVoltPointQuality))
      return false;
    if (!(_targetVarValue == rhs._targetVarValue))
      return false;
    if (!(_solution == rhs._solution))
      return false;
    if (!(_ovUvDisabledFlag == rhs._ovUvDisabledFlag))
      return false;
    if (!(_strategy_peakPFSetPoint == rhs._strategy_peakPFSetPoint))
      return false;
    if (!(_strategy_offPeakPFSetPoint == rhs._strategy_offPeakPFSetPoint))
      return false;
    if (!(_strategy_controlMethod == rhs._strategy_controlMethod))
      return false;
    if (!(_phaseAValue == rhs._phaseAValue))
      return false;
    if (!(_phaseBValue == rhs._phaseBValue))
      return false;
    if (!(_phaseCValue == rhs._phaseCValue))
      return false;
    if (!(_likeDayControlFlag == rhs._likeDayControlFlag))
      return false;
    if (!(_usePhaseData == rhs._usePhaseData))
      return false;
    if (!(_originalParentId == rhs._originalParentId))
      return false;
    if (!(_ccCapbanks == rhs._ccCapbanks))
      return false;
    return true;
  }
  bool operator != (const CCFeeder &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCFeeder & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCFeeder &a, CCFeeder &b);

std::ostream& operator<<(std::ostream& out, const CCFeeder& obj);


class CCSubstationBusItem : public virtual ::apache::thrift::TBase {
 public:

  CCSubstationBusItem(const CCSubstationBusItem&);
  CCSubstationBusItem& operator=(const CCSubstationBusItem&);
  CCSubstationBusItem() noexcept
                      : _parentId(0),
                        _strategy_maxDailyOperation(0),
                        _strategy_maxOperationDisableFlag(0),
                        _currentVarLoadPointId(0),
                        _varValue(0),
                        _currentWattLoadPointId(0),
                        _wattValue(0),
                        _mapLocationId(),
                        _strategy_controlUnits(),
                        _decimalPlaces(0),
                        _newPointDataReceivedFlag(0),
                        _busUpdatedflag(0),
                        _lastCurrentVarPointUpdateTime(0),
                        _estimatedVarLoadPointId(0),
                        _estimatedVarLoadPointValue(0),
                        _dailyOperationsAnalogPointId(0),
                        _powerFactorPointId(0),
                        _estimatedPowerFactorPointId(0),
                        _currentDailyOperations(0),
                        _peakTimeFlag(0),
                        _recentlyControlledFlag(0),
                        _lastOperationTime(0),
                        _varValueBeforeControl(0),
                        _powerFactorValue(0),
                        _estimatedPowerFactorValue(0),
                        _currentVarPointQuality(0),
                        _waiveControlFlag(0),
                        _strategy_peakLag(0),
                        _strategy_offPeakLag(0),
                        _strategy_peakLead(0),
                        _strategy_offPeakLead(0),
                        _currentVoltLoadPointId(0),
                        _voltValue(0),
                        _verificationFlag(0),
                        _switchOverStatus(0),
                        _currentWattPointQuality(0),
                        _currentVoltPointQuality(0),
                        _targetVarValue(0),
                        _solution(),
                        _ovUvDisabledFlag(0),
                        _strategy_peakPFSetPoint(0),
                        _strategy_offPeakPFSetPoint(0),
                        _strategy_controlMethod(),
                        _phaseAValue(0),
                        _phaseBValue(0),
                        _phaseCValue(0),
                        _likeDayControlFlag(0),
                        _displayOrder(0),
                        _voltReductionFlag(0),
                        _usePhaseData(0),
                        _primaryBusFlag(0),
                        _altSubId(0),
                        _dualBusEnabled(0),
                        _strategyId(0),
                        _dmvTestRunningFlag(0) {
  }

  virtual ~CCSubstationBusItem() noexcept;
   ::Cti::Messaging::Serialization::Thrift::CCPao _baseMessage;
  int32_t _parentId;
  int32_t _strategy_maxDailyOperation;
  bool _strategy_maxOperationDisableFlag;
  int32_t _currentVarLoadPointId;
  double _varValue;
  int32_t _currentWattLoadPointId;
  double _wattValue;
  std::string _mapLocationId;
  std::string _strategy_controlUnits;
  int32_t _decimalPlaces;
  bool _newPointDataReceivedFlag;
  bool _busUpdatedflag;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _lastCurrentVarPointUpdateTime;
  int32_t _estimatedVarLoadPointId;
  double _estimatedVarLoadPointValue;
  int32_t _dailyOperationsAnalogPointId;
  int32_t _powerFactorPointId;
  int32_t _estimatedPowerFactorPointId;
  int32_t _currentDailyOperations;
  bool _peakTimeFlag;
  bool _recentlyControlledFlag;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _lastOperationTime;
  double _varValueBeforeControl;
  double _powerFactorValue;
  double _estimatedPowerFactorValue;
  int32_t _currentVarPointQuality;
  bool _waiveControlFlag;
  double _strategy_peakLag;
  double _strategy_offPeakLag;
  double _strategy_peakLead;
  double _strategy_offPeakLead;
  int32_t _currentVoltLoadPointId;
  double _voltValue;
  bool _verificationFlag;
  bool _switchOverStatus;
  int32_t _currentWattPointQuality;
  int32_t _currentVoltPointQuality;
  double _targetVarValue;
  std::string _solution;
  bool _ovUvDisabledFlag;
  double _strategy_peakPFSetPoint;
  double _strategy_offPeakPFSetPoint;
  std::string _strategy_controlMethod;
  double _phaseAValue;
  double _phaseBValue;
  double _phaseCValue;
  bool _likeDayControlFlag;
  int32_t _displayOrder;
  bool _voltReductionFlag;
  bool _usePhaseData;
  bool _primaryBusFlag;
  int32_t _altSubId;
  bool _dualBusEnabled;
  int32_t _strategyId;
  bool _dmvTestRunningFlag;
  std::vector<CCFeeder>  _ccFeeders;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val);

  void __set__parentId(const int32_t val);

  void __set__strategy_maxDailyOperation(const int32_t val);

  void __set__strategy_maxOperationDisableFlag(const bool val);

  void __set__currentVarLoadPointId(const int32_t val);

  void __set__varValue(const double val);

  void __set__currentWattLoadPointId(const int32_t val);

  void __set__wattValue(const double val);

  void __set__mapLocationId(const std::string& val);

  void __set__strategy_controlUnits(const std::string& val);

  void __set__decimalPlaces(const int32_t val);

  void __set__newPointDataReceivedFlag(const bool val);

  void __set__busUpdatedflag(const bool val);

  void __set__lastCurrentVarPointUpdateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__estimatedVarLoadPointId(const int32_t val);

  void __set__estimatedVarLoadPointValue(const double val);

  void __set__dailyOperationsAnalogPointId(const int32_t val);

  void __set__powerFactorPointId(const int32_t val);

  void __set__estimatedPowerFactorPointId(const int32_t val);

  void __set__currentDailyOperations(const int32_t val);

  void __set__peakTimeFlag(const bool val);

  void __set__recentlyControlledFlag(const bool val);

  void __set__lastOperationTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__varValueBeforeControl(const double val);

  void __set__powerFactorValue(const double val);

  void __set__estimatedPowerFactorValue(const double val);

  void __set__currentVarPointQuality(const int32_t val);

  void __set__waiveControlFlag(const bool val);

  void __set__strategy_peakLag(const double val);

  void __set__strategy_offPeakLag(const double val);

  void __set__strategy_peakLead(const double val);

  void __set__strategy_offPeakLead(const double val);

  void __set__currentVoltLoadPointId(const int32_t val);

  void __set__voltValue(const double val);

  void __set__verificationFlag(const bool val);

  void __set__switchOverStatus(const bool val);

  void __set__currentWattPointQuality(const int32_t val);

  void __set__currentVoltPointQuality(const int32_t val);

  void __set__targetVarValue(const double val);

  void __set__solution(const std::string& val);

  void __set__ovUvDisabledFlag(const bool val);

  void __set__strategy_peakPFSetPoint(const double val);

  void __set__strategy_offPeakPFSetPoint(const double val);

  void __set__strategy_controlMethod(const std::string& val);

  void __set__phaseAValue(const double val);

  void __set__phaseBValue(const double val);

  void __set__phaseCValue(const double val);

  void __set__likeDayControlFlag(const bool val);

  void __set__displayOrder(const int32_t val);

  void __set__voltReductionFlag(const bool val);

  void __set__usePhaseData(const bool val);

  void __set__primaryBusFlag(const bool val);

  void __set__altSubId(const int32_t val);

  void __set__dualBusEnabled(const bool val);

  void __set__strategyId(const int32_t val);

  void __set__dmvTestRunningFlag(const bool val);

  void __set__ccFeeders(const std::vector<CCFeeder> & val);

  bool operator == (const CCSubstationBusItem & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_parentId == rhs._parentId))
      return false;
    if (!(_strategy_maxDailyOperation == rhs._strategy_maxDailyOperation))
      return false;
    if (!(_strategy_maxOperationDisableFlag == rhs._strategy_maxOperationDisableFlag))
      return false;
    if (!(_currentVarLoadPointId == rhs._currentVarLoadPointId))
      return false;
    if (!(_varValue == rhs._varValue))
      return false;
    if (!(_currentWattLoadPointId == rhs._currentWattLoadPointId))
      return false;
    if (!(_wattValue == rhs._wattValue))
      return false;
    if (!(_mapLocationId == rhs._mapLocationId))
      return false;
    if (!(_strategy_controlUnits == rhs._strategy_controlUnits))
      return false;
    if (!(_decimalPlaces == rhs._decimalPlaces))
      return false;
    if (!(_newPointDataReceivedFlag == rhs._newPointDataReceivedFlag))
      return false;
    if (!(_busUpdatedflag == rhs._busUpdatedflag))
      return false;
    if (!(_lastCurrentVarPointUpdateTime == rhs._lastCurrentVarPointUpdateTime))
      return false;
    if (!(_estimatedVarLoadPointId == rhs._estimatedVarLoadPointId))
      return false;
    if (!(_estimatedVarLoadPointValue == rhs._estimatedVarLoadPointValue))
      return false;
    if (!(_dailyOperationsAnalogPointId == rhs._dailyOperationsAnalogPointId))
      return false;
    if (!(_powerFactorPointId == rhs._powerFactorPointId))
      return false;
    if (!(_estimatedPowerFactorPointId == rhs._estimatedPowerFactorPointId))
      return false;
    if (!(_currentDailyOperations == rhs._currentDailyOperations))
      return false;
    if (!(_peakTimeFlag == rhs._peakTimeFlag))
      return false;
    if (!(_recentlyControlledFlag == rhs._recentlyControlledFlag))
      return false;
    if (!(_lastOperationTime == rhs._lastOperationTime))
      return false;
    if (!(_varValueBeforeControl == rhs._varValueBeforeControl))
      return false;
    if (!(_powerFactorValue == rhs._powerFactorValue))
      return false;
    if (!(_estimatedPowerFactorValue == rhs._estimatedPowerFactorValue))
      return false;
    if (!(_currentVarPointQuality == rhs._currentVarPointQuality))
      return false;
    if (!(_waiveControlFlag == rhs._waiveControlFlag))
      return false;
    if (!(_strategy_peakLag == rhs._strategy_peakLag))
      return false;
    if (!(_strategy_offPeakLag == rhs._strategy_offPeakLag))
      return false;
    if (!(_strategy_peakLead == rhs._strategy_peakLead))
      return false;
    if (!(_strategy_offPeakLead == rhs._strategy_offPeakLead))
      return false;
    if (!(_currentVoltLoadPointId == rhs._currentVoltLoadPointId))
      return false;
    if (!(_voltValue == rhs._voltValue))
      return false;
    if (!(_verificationFlag == rhs._verificationFlag))
      return false;
    if (!(_switchOverStatus == rhs._switchOverStatus))
      return false;
    if (!(_currentWattPointQuality == rhs._currentWattPointQuality))
      return false;
    if (!(_currentVoltPointQuality == rhs._currentVoltPointQuality))
      return false;
    if (!(_targetVarValue == rhs._targetVarValue))
      return false;
    if (!(_solution == rhs._solution))
      return false;
    if (!(_ovUvDisabledFlag == rhs._ovUvDisabledFlag))
      return false;
    if (!(_strategy_peakPFSetPoint == rhs._strategy_peakPFSetPoint))
      return false;
    if (!(_strategy_offPeakPFSetPoint == rhs._strategy_offPeakPFSetPoint))
      return false;
    if (!(_strategy_controlMethod == rhs._strategy_controlMethod))
      return false;
    if (!(_phaseAValue == rhs._phaseAValue))
      return false;
    if (!(_phaseBValue == rhs._phaseBValue))
      return false;
    if (!(_phaseCValue == rhs._phaseCValue))
      return false;
    if (!(_likeDayControlFlag == rhs._likeDayControlFlag))
      return false;
    if (!(_displayOrder == rhs._displayOrder))
      return false;
    if (!(_voltReductionFlag == rhs._voltReductionFlag))
      return false;
    if (!(_usePhaseData == rhs._usePhaseData))
      return false;
    if (!(_primaryBusFlag == rhs._primaryBusFlag))
      return false;
    if (!(_altSubId == rhs._altSubId))
      return false;
    if (!(_dualBusEnabled == rhs._dualBusEnabled))
      return false;
    if (!(_strategyId == rhs._strategyId))
      return false;
    if (!(_dmvTestRunningFlag == rhs._dmvTestRunningFlag))
      return false;
    if (!(_ccFeeders == rhs._ccFeeders))
      return false;
    return true;
  }
  bool operator != (const CCSubstationBusItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCSubstationBusItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCSubstationBusItem &a, CCSubstationBusItem &b);

std::ostream& operator<<(std::ostream& out, const CCSubstationBusItem& obj);


class CCSubstationBus : public virtual ::apache::thrift::TBase {
 public:

  CCSubstationBus(const CCSubstationBus&);
  CCSubstationBus& operator=(const CCSubstationBus&);
  CCSubstationBus() noexcept
                  : _msgInfoBitMask(0) {
  }

  virtual ~CCSubstationBus() noexcept;
   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  int32_t _msgInfoBitMask;
  std::vector<CCSubstationBusItem>  _ccSubstationBuses;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val);

  void __set__msgInfoBitMask(const int32_t val);

  void __set__ccSubstationBuses(const std::vector<CCSubstationBusItem> & val);

  bool operator == (const CCSubstationBus & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_msgInfoBitMask == rhs._msgInfoBitMask))
      return false;
    if (!(_ccSubstationBuses == rhs._ccSubstationBuses))
      return false;
    return true;
  }
  bool operator != (const CCSubstationBus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCSubstationBus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCSubstationBus &a, CCSubstationBus &b);

std::ostream& operator<<(std::ostream& out, const CCSubstationBus& obj);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Request_TYPES_H
#define Request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class Request {
 public:

  static const char* ascii_fingerprint; // = "8B49D257E0E0D9125C6100D6B6305089";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x49,0xD2,0x57,0xE0,0xE0,0xD9,0x12,0x5C,0x61,0x00,0xD6,0xB6,0x30,0x50,0x89};

  Request() : _deviceId(0), _commandString(), _routeId(0), _macroOffset(0), _attemptNum(0), _groupMessageId(0), _userMessageId(0), _optionsField(0) {
  }

  virtual ~Request() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _deviceId;
  std::string _commandString;
  int32_t _routeId;
  int32_t _macroOffset;
  int32_t _attemptNum;
  int32_t _groupMessageId;
  int32_t _userMessageId;
  int32_t _optionsField;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__deviceId(const int32_t val) {
    _deviceId = val;
  }

  void __set__commandString(const std::string& val) {
    _commandString = val;
  }

  void __set__routeId(const int32_t val) {
    _routeId = val;
  }

  void __set__macroOffset(const int32_t val) {
    _macroOffset = val;
  }

  void __set__attemptNum(const int32_t val) {
    _attemptNum = val;
  }

  void __set__groupMessageId(const int32_t val) {
    _groupMessageId = val;
  }

  void __set__userMessageId(const int32_t val) {
    _userMessageId = val;
  }

  void __set__optionsField(const int32_t val) {
    _optionsField = val;
  }

  bool operator == (const Request & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_deviceId == rhs._deviceId))
      return false;
    if (!(_commandString == rhs._commandString))
      return false;
    if (!(_routeId == rhs._routeId))
      return false;
    if (!(_macroOffset == rhs._macroOffset))
      return false;
    if (!(_attemptNum == rhs._attemptNum))
      return false;
    if (!(_groupMessageId == rhs._groupMessageId))
      return false;
    if (!(_userMessageId == rhs._userMessageId))
      return false;
    if (!(_optionsField == rhs._optionsField))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Request &a, Request &b);

}}}} // namespace

#endif

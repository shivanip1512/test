/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Request_TYPES_H
#define Request_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class Request;


class Request : public virtual ::apache::thrift::TBase {
 public:

  Request(const Request&);
  Request& operator=(const Request&);
  Request() noexcept
          : _deviceId(0),
            _commandString(),
            _routeId(0),
            _macroOffset(0),
            _attemptNum(0),
            _groupMessageId(0),
            _userMessageId(0),
            _optionsField(0) {
  }

  virtual ~Request() noexcept;
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _deviceId;
  std::string _commandString;
  int32_t _routeId;
  int32_t _macroOffset;
  int32_t _attemptNum;
  int32_t _groupMessageId;
  int32_t _userMessageId;
  int32_t _optionsField;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__deviceId(const int32_t val);

  void __set__commandString(const std::string& val);

  void __set__routeId(const int32_t val);

  void __set__macroOffset(const int32_t val);

  void __set__attemptNum(const int32_t val);

  void __set__groupMessageId(const int32_t val);

  void __set__userMessageId(const int32_t val);

  void __set__optionsField(const int32_t val);

  bool operator == (const Request & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_deviceId == rhs._deviceId))
      return false;
    if (!(_commandString == rhs._commandString))
      return false;
    if (!(_routeId == rhs._routeId))
      return false;
    if (!(_macroOffset == rhs._macroOffset))
      return false;
    if (!(_attemptNum == rhs._attemptNum))
      return false;
    if (!(_groupMessageId == rhs._groupMessageId))
      return false;
    if (!(_userMessageId == rhs._userMessageId))
      return false;
    if (!(_optionsField == rhs._optionsField))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Request &a, Request &b);

std::ostream& operator<<(std::ostream& out, const Request& obj);

}}}} // namespace

#endif

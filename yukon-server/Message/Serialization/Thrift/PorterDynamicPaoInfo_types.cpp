/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "PorterDynamicPaoInfo_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kDynamicPaoInfoKeysValues[] = {
  DynamicPaoInfoKeys::RFN_VOLTAGE_PROFILE_ENABLED_UNTIL,
  DynamicPaoInfoKeys::RFN_VOLTAGE_PROFILE_INTERVAL
};
const char* _kDynamicPaoInfoKeysNames[] = {
  "RFN_VOLTAGE_PROFILE_ENABLED_UNTIL",
  "RFN_VOLTAGE_PROFILE_INTERVAL"
};
const std::map<int, const char*> _DynamicPaoInfoKeys_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDynamicPaoInfoKeysValues, _kDynamicPaoInfoKeysNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* PorterDynamicPaoInfoRequest::ascii_fingerprint = "F9B4A81CD5E1E8D4CF8E0FCFA30AE942";
const uint8_t PorterDynamicPaoInfoRequest::binary_fingerprint[16] = {0xF9,0xB4,0xA8,0x1C,0xD5,0xE1,0xE8,0xD4,0xCF,0x8E,0x0F,0xCF,0xA3,0x0A,0xE9,0x42};

uint32_t PorterDynamicPaoInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__deviceId = false;
  bool isset__keys = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_deviceId);
          isset__deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->_keys.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readSetBegin(_etype3, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              DynamicPaoInfoKeys::type _elem5;
              int32_t ecast6;
              xfer += iprot->readI32(ecast6);
              _elem5 = (DynamicPaoInfoKeys::type)ecast6;
              this->_keys.insert(_elem5);
            }
            xfer += iprot->readSetEnd();
          }
          isset__keys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__deviceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__keys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PorterDynamicPaoInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PorterDynamicPaoInfoRequest");

  xfer += oprot->writeFieldBegin("_deviceId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_keys", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_keys.size()));
    std::set<DynamicPaoInfoKeys::type> ::const_iterator _iter7;
    for (_iter7 = this->_keys.begin(); _iter7 != this->_keys.end(); ++_iter7)
    {
      xfer += oprot->writeI32((int32_t)(*_iter7));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PorterDynamicPaoInfoRequest &a, PorterDynamicPaoInfoRequest &b) {
  using ::std::swap;
  swap(a._deviceId, b._deviceId);
  swap(a._keys, b._keys);
}

const char* DynamicPaoInfoTypes::ascii_fingerprint = "6B0CD68886A371B59CE1B9EDCF067801";
const uint8_t DynamicPaoInfoTypes::binary_fingerprint[16] = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

uint32_t DynamicPaoInfoTypes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_integer);
          this->__isset._integer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_time);
          this->__isset._time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_string);
          this->__isset._string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DynamicPaoInfoTypes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DynamicPaoInfoTypes");

  xfer += oprot->writeFieldBegin("_integer", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->_integer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_time", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_string", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_string);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DynamicPaoInfoTypes &a, DynamicPaoInfoTypes &b) {
  using ::std::swap;
  swap(a._integer, b._integer);
  swap(a._time, b._time);
  swap(a._string, b._string);
  swap(a.__isset, b.__isset);
}

const char* PorterDynamicPaoInfoResponse::ascii_fingerprint = "C1C5315A5265A115670B6428BCE8E830";
const uint8_t PorterDynamicPaoInfoResponse::binary_fingerprint[16] = {0xC1,0xC5,0x31,0x5A,0x52,0x65,0xA1,0x15,0x67,0x0B,0x64,0x28,0xBC,0xE8,0xE8,0x30};

uint32_t PorterDynamicPaoInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__deviceId = false;
  bool isset__values = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_deviceId);
          isset__deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->_values.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _ktype9;
            ::apache::thrift::protocol::TType _vtype10;
            xfer += iprot->readMapBegin(_ktype9, _vtype10, _size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              DynamicPaoInfoKeys::type _key13;
              int32_t ecast15;
              xfer += iprot->readI32(ecast15);
              _key13 = (DynamicPaoInfoKeys::type)ecast15;
              DynamicPaoInfoTypes& _val14 = this->_values[_key13];
              xfer += _val14.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset__values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__deviceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PorterDynamicPaoInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PorterDynamicPaoInfoResponse");

  xfer += oprot->writeFieldBegin("_deviceId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_values", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_values.size()));
    std::map<DynamicPaoInfoKeys::type, DynamicPaoInfoTypes> ::const_iterator _iter16;
    for (_iter16 = this->_values.begin(); _iter16 != this->_values.end(); ++_iter16)
    {
      xfer += oprot->writeI32((int32_t)_iter16->first);
      xfer += _iter16->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PorterDynamicPaoInfoResponse &a, PorterDynamicPaoInfoResponse &b) {
  using ::std::swap;
  swap(a._deviceId, b._deviceId);
  swap(a._values, b._values);
}

}}}} // namespace

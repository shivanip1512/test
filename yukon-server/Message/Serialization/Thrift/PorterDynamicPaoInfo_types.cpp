/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "PorterDynamicPaoInfo_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift { namespace Porter {

int _kDynamicPaoInfoDurationKeysValues[] = {
  DynamicPaoInfoDurationKeys::RFN_VOLTAGE_PROFILE_INTERVAL,
  DynamicPaoInfoDurationKeys::MCT_IED_LOAD_PROFILE_INTERVAL
};
const char* _kDynamicPaoInfoDurationKeysNames[] = {
  "RFN_VOLTAGE_PROFILE_INTERVAL",
  "MCT_IED_LOAD_PROFILE_INTERVAL"
};
const std::map<int, const char*> _DynamicPaoInfoDurationKeys_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDynamicPaoInfoDurationKeysValues, _kDynamicPaoInfoDurationKeysNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const DynamicPaoInfoDurationKeys::type& val) {
  std::map<int, const char*>::const_iterator it = _DynamicPaoInfoDurationKeys_VALUES_TO_NAMES.find(val);
  if (it != _DynamicPaoInfoDurationKeys_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kDynamicPaoInfoTimestampKeysValues[] = {
  DynamicPaoInfoTimestampKeys::RFN_VOLTAGE_PROFILE_ENABLED_UNTIL
};
const char* _kDynamicPaoInfoTimestampKeysNames[] = {
  "RFN_VOLTAGE_PROFILE_ENABLED_UNTIL"
};
const std::map<int, const char*> _DynamicPaoInfoTimestampKeys_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kDynamicPaoInfoTimestampKeysValues, _kDynamicPaoInfoTimestampKeysNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const DynamicPaoInfoTimestampKeys::type& val) {
  std::map<int, const char*>::const_iterator it = _DynamicPaoInfoTimestampKeys_VALUES_TO_NAMES.find(val);
  if (it != _DynamicPaoInfoTimestampKeys_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


DynamicPaoInfoRequest::~DynamicPaoInfoRequest() throw() {
}


void DynamicPaoInfoRequest::__set__deviceId(const int32_t val) {
  this->_deviceId = val;
}

void DynamicPaoInfoRequest::__set__durationKeys(const std::set<DynamicPaoInfoDurationKeys::type> & val) {
  this->_durationKeys = val;
}

void DynamicPaoInfoRequest::__set__timestampKeys(const std::set<DynamicPaoInfoTimestampKeys::type> & val) {
  this->_timestampKeys = val;
}
std::ostream& operator<<(std::ostream& out, const DynamicPaoInfoRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DynamicPaoInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__deviceId = false;
  bool isset__durationKeys = false;
  bool isset__timestampKeys = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_deviceId);
          isset__deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->_durationKeys.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readSetBegin(_etype3, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              DynamicPaoInfoDurationKeys::type _elem5;
              int32_t ecast6;
              xfer += iprot->readI32(ecast6);
              _elem5 = (DynamicPaoInfoDurationKeys::type)ecast6;
              this->_durationKeys.insert(_elem5);
            }
            xfer += iprot->readSetEnd();
          }
          isset__durationKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->_timestampKeys.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readSetBegin(_etype10, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              DynamicPaoInfoTimestampKeys::type _elem12;
              int32_t ecast13;
              xfer += iprot->readI32(ecast13);
              _elem12 = (DynamicPaoInfoTimestampKeys::type)ecast13;
              this->_timestampKeys.insert(_elem12);
            }
            xfer += iprot->readSetEnd();
          }
          isset__timestampKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__deviceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__durationKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__timestampKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DynamicPaoInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DynamicPaoInfoRequest");

  xfer += oprot->writeFieldBegin("_deviceId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_durationKeys", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_durationKeys.size()));
    std::set<DynamicPaoInfoDurationKeys::type> ::const_iterator _iter14;
    for (_iter14 = this->_durationKeys.begin(); _iter14 != this->_durationKeys.end(); ++_iter14)
    {
      xfer += oprot->writeI32((int32_t)(*_iter14));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_timestampKeys", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_timestampKeys.size()));
    std::set<DynamicPaoInfoTimestampKeys::type> ::const_iterator _iter15;
    for (_iter15 = this->_timestampKeys.begin(); _iter15 != this->_timestampKeys.end(); ++_iter15)
    {
      xfer += oprot->writeI32((int32_t)(*_iter15));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DynamicPaoInfoRequest &a, DynamicPaoInfoRequest &b) {
  using ::std::swap;
  swap(a._deviceId, b._deviceId);
  swap(a._durationKeys, b._durationKeys);
  swap(a._timestampKeys, b._timestampKeys);
}

DynamicPaoInfoRequest::DynamicPaoInfoRequest(const DynamicPaoInfoRequest& other16) {
  _deviceId = other16._deviceId;
  _durationKeys = other16._durationKeys;
  _timestampKeys = other16._timestampKeys;
}
DynamicPaoInfoRequest& DynamicPaoInfoRequest::operator=(const DynamicPaoInfoRequest& other17) {
  _deviceId = other17._deviceId;
  _durationKeys = other17._durationKeys;
  _timestampKeys = other17._timestampKeys;
  return *this;
}
void DynamicPaoInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DynamicPaoInfoRequest(";
  out << "_deviceId=" << to_string(_deviceId);
  out << ", " << "_durationKeys=" << to_string(_durationKeys);
  out << ", " << "_timestampKeys=" << to_string(_timestampKeys);
  out << ")";
}


DynamicPaoInfoResponse::~DynamicPaoInfoResponse() throw() {
}


void DynamicPaoInfoResponse::__set__deviceId(const int32_t val) {
  this->_deviceId = val;
}

void DynamicPaoInfoResponse::__set__durationValues(const std::map<DynamicPaoInfoDurationKeys::type, int64_t> & val) {
  this->_durationValues = val;
}

void DynamicPaoInfoResponse::__set__timestampValues(const std::map<DynamicPaoInfoTimestampKeys::type, int64_t> & val) {
  this->_timestampValues = val;
}
std::ostream& operator<<(std::ostream& out, const DynamicPaoInfoResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DynamicPaoInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__deviceId = false;
  bool isset__durationValues = false;
  bool isset__timestampValues = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_deviceId);
          isset__deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->_durationValues.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _ktype19;
            ::apache::thrift::protocol::TType _vtype20;
            xfer += iprot->readMapBegin(_ktype19, _vtype20, _size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              DynamicPaoInfoDurationKeys::type _key23;
              int32_t ecast25;
              xfer += iprot->readI32(ecast25);
              _key23 = (DynamicPaoInfoDurationKeys::type)ecast25;
              int64_t& _val24 = this->_durationValues[_key23];
              xfer += iprot->readI64(_val24);
            }
            xfer += iprot->readMapEnd();
          }
          isset__durationValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->_timestampValues.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _ktype27;
            ::apache::thrift::protocol::TType _vtype28;
            xfer += iprot->readMapBegin(_ktype27, _vtype28, _size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              DynamicPaoInfoTimestampKeys::type _key31;
              int32_t ecast33;
              xfer += iprot->readI32(ecast33);
              _key31 = (DynamicPaoInfoTimestampKeys::type)ecast33;
              int64_t& _val32 = this->_timestampValues[_key31];
              xfer += iprot->readI64(_val32);
            }
            xfer += iprot->readMapEnd();
          }
          isset__timestampValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__deviceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__durationValues)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__timestampValues)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DynamicPaoInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DynamicPaoInfoResponse");

  xfer += oprot->writeFieldBegin("_deviceId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_durationValues", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->_durationValues.size()));
    std::map<DynamicPaoInfoDurationKeys::type, int64_t> ::const_iterator _iter34;
    for (_iter34 = this->_durationValues.begin(); _iter34 != this->_durationValues.end(); ++_iter34)
    {
      xfer += oprot->writeI32((int32_t)_iter34->first);
      xfer += oprot->writeI64(_iter34->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_timestampValues", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->_timestampValues.size()));
    std::map<DynamicPaoInfoTimestampKeys::type, int64_t> ::const_iterator _iter35;
    for (_iter35 = this->_timestampValues.begin(); _iter35 != this->_timestampValues.end(); ++_iter35)
    {
      xfer += oprot->writeI32((int32_t)_iter35->first);
      xfer += oprot->writeI64(_iter35->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DynamicPaoInfoResponse &a, DynamicPaoInfoResponse &b) {
  using ::std::swap;
  swap(a._deviceId, b._deviceId);
  swap(a._durationValues, b._durationValues);
  swap(a._timestampValues, b._timestampValues);
}

DynamicPaoInfoResponse::DynamicPaoInfoResponse(const DynamicPaoInfoResponse& other36) {
  _deviceId = other36._deviceId;
  _durationValues = other36._durationValues;
  _timestampValues = other36._timestampValues;
}
DynamicPaoInfoResponse& DynamicPaoInfoResponse::operator=(const DynamicPaoInfoResponse& other37) {
  _deviceId = other37._deviceId;
  _durationValues = other37._durationValues;
  _timestampValues = other37._timestampValues;
  return *this;
}
void DynamicPaoInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DynamicPaoInfoResponse(";
  out << "_deviceId=" << to_string(_deviceId);
  out << ", " << "_durationValues=" << to_string(_durationValues);
  out << ", " << "_timestampValues=" << to_string(_timestampValues);
  out << ")";
}

}}}}} // namespace

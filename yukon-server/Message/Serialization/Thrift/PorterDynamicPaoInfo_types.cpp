/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "PorterDynamicPaoInfo_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift { namespace Porter {

int _kDynamicPaoInfoDurationKeysValues[] = {
  DynamicPaoInfoDurationKeys::RFN_VOLTAGE_PROFILE_INTERVAL,
  DynamicPaoInfoDurationKeys::MCT_IED_LOAD_PROFILE_INTERVAL
};
const char* _kDynamicPaoInfoDurationKeysNames[] = {
  "RFN_VOLTAGE_PROFILE_INTERVAL",
  "MCT_IED_LOAD_PROFILE_INTERVAL"
};
const std::map<int, const char*> _DynamicPaoInfoDurationKeys_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDynamicPaoInfoDurationKeysValues, _kDynamicPaoInfoDurationKeysNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDynamicPaoInfoTimestampKeysValues[] = {
  DynamicPaoInfoTimestampKeys::RFN_VOLTAGE_PROFILE_ENABLED_UNTIL
};
const char* _kDynamicPaoInfoTimestampKeysNames[] = {
  "RFN_VOLTAGE_PROFILE_ENABLED_UNTIL"
};
const std::map<int, const char*> _DynamicPaoInfoTimestampKeys_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kDynamicPaoInfoTimestampKeysValues, _kDynamicPaoInfoTimestampKeysNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* DynamicPaoInfoRequest::ascii_fingerprint = "46B35B53FBCDAE8AC0A7A2CC816D67AF";
const uint8_t DynamicPaoInfoRequest::binary_fingerprint[16] = {0x46,0xB3,0x5B,0x53,0xFB,0xCD,0xAE,0x8A,0xC0,0xA7,0xA2,0xCC,0x81,0x6D,0x67,0xAF};

uint32_t DynamicPaoInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__deviceId = false;
  bool isset__durationKeys = false;
  bool isset__timestampKeys = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_deviceId);
          isset__deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->_durationKeys.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readSetBegin(_etype3, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              DynamicPaoInfoDurationKeys::type _elem5;
              int32_t ecast6;
              xfer += iprot->readI32(ecast6);
              _elem5 = (DynamicPaoInfoDurationKeys::type)ecast6;
              this->_durationKeys.insert(_elem5);
            }
            xfer += iprot->readSetEnd();
          }
          isset__durationKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->_timestampKeys.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readSetBegin(_etype10, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              DynamicPaoInfoTimestampKeys::type _elem12;
              int32_t ecast13;
              xfer += iprot->readI32(ecast13);
              _elem12 = (DynamicPaoInfoTimestampKeys::type)ecast13;
              this->_timestampKeys.insert(_elem12);
            }
            xfer += iprot->readSetEnd();
          }
          isset__timestampKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__deviceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__durationKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__timestampKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DynamicPaoInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DynamicPaoInfoRequest");

  xfer += oprot->writeFieldBegin("_deviceId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_durationKeys", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_durationKeys.size()));
    std::set<DynamicPaoInfoDurationKeys::type> ::const_iterator _iter14;
    for (_iter14 = this->_durationKeys.begin(); _iter14 != this->_durationKeys.end(); ++_iter14)
    {
      xfer += oprot->writeI32((int32_t)(*_iter14));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_timestampKeys", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_timestampKeys.size()));
    std::set<DynamicPaoInfoTimestampKeys::type> ::const_iterator _iter15;
    for (_iter15 = this->_timestampKeys.begin(); _iter15 != this->_timestampKeys.end(); ++_iter15)
    {
      xfer += oprot->writeI32((int32_t)(*_iter15));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DynamicPaoInfoRequest &a, DynamicPaoInfoRequest &b) {
  using ::std::swap;
  swap(a._deviceId, b._deviceId);
  swap(a._durationKeys, b._durationKeys);
  swap(a._timestampKeys, b._timestampKeys);
}

const char* DynamicPaoInfoResponse::ascii_fingerprint = "4D6599A199A14163B012BF568AC0652E";
const uint8_t DynamicPaoInfoResponse::binary_fingerprint[16] = {0x4D,0x65,0x99,0xA1,0x99,0xA1,0x41,0x63,0xB0,0x12,0xBF,0x56,0x8A,0xC0,0x65,0x2E};

uint32_t DynamicPaoInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__deviceId = false;
  bool isset__durationValues = false;
  bool isset__timestampValues = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_deviceId);
          isset__deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->_durationValues.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _ktype17;
            ::apache::thrift::protocol::TType _vtype18;
            xfer += iprot->readMapBegin(_ktype17, _vtype18, _size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              DynamicPaoInfoDurationKeys::type _key21;
              int32_t ecast23;
              xfer += iprot->readI32(ecast23);
              _key21 = (DynamicPaoInfoDurationKeys::type)ecast23;
              int64_t& _val22 = this->_durationValues[_key21];
              xfer += iprot->readI64(_val22);
            }
            xfer += iprot->readMapEnd();
          }
          isset__durationValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->_timestampValues.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _ktype25;
            ::apache::thrift::protocol::TType _vtype26;
            xfer += iprot->readMapBegin(_ktype25, _vtype26, _size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              DynamicPaoInfoTimestampKeys::type _key29;
              int32_t ecast31;
              xfer += iprot->readI32(ecast31);
              _key29 = (DynamicPaoInfoTimestampKeys::type)ecast31;
              int64_t& _val30 = this->_timestampValues[_key29];
              xfer += iprot->readI64(_val30);
            }
            xfer += iprot->readMapEnd();
          }
          isset__timestampValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__deviceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__durationValues)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__timestampValues)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DynamicPaoInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DynamicPaoInfoResponse");

  xfer += oprot->writeFieldBegin("_deviceId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_durationValues", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->_durationValues.size()));
    std::map<DynamicPaoInfoDurationKeys::type, int64_t> ::const_iterator _iter32;
    for (_iter32 = this->_durationValues.begin(); _iter32 != this->_durationValues.end(); ++_iter32)
    {
      xfer += oprot->writeI32((int32_t)_iter32->first);
      xfer += oprot->writeI64(_iter32->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_timestampValues", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->_timestampValues.size()));
    std::map<DynamicPaoInfoTimestampKeys::type, int64_t> ::const_iterator _iter33;
    for (_iter33 = this->_timestampValues.begin(); _iter33 != this->_timestampValues.end(); ++_iter33)
    {
      xfer += oprot->writeI32((int32_t)_iter33->first);
      xfer += oprot->writeI64(_iter33->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DynamicPaoInfoResponse &a, DynamicPaoInfoResponse &b) {
  using ::std::swap;
  swap(a._deviceId, b._deviceId);
  swap(a._durationValues, b._durationValues);
  swap(a._timestampValues, b._timestampValues);
}

}}}}} // namespace

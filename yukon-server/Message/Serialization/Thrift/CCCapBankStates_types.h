/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCCapBankStates_TYPES_H
#define CCCapBankStates_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "CCMessage_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class CCState;

class CCCapBankStates;


class CCState : public virtual ::apache::thrift::TBase {
 public:

  CCState(const CCState&);
  CCState& operator=(const CCState&);
  CCState() : _text(), _foregroundColor(0), _backgroundColor(0) {
  }

  virtual ~CCState() noexcept;
  std::string _text;
  int32_t _foregroundColor;
  int32_t _backgroundColor;

  void __set__text(const std::string& val);

  void __set__foregroundColor(const int32_t val);

  void __set__backgroundColor(const int32_t val);

  bool operator == (const CCState & rhs) const
  {
    if (!(_text == rhs._text))
      return false;
    if (!(_foregroundColor == rhs._foregroundColor))
      return false;
    if (!(_backgroundColor == rhs._backgroundColor))
      return false;
    return true;
  }
  bool operator != (const CCState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCState &a, CCState &b);

std::ostream& operator<<(std::ostream& out, const CCState& obj);


class CCCapBankStates : public virtual ::apache::thrift::TBase {
 public:

  CCCapBankStates(const CCCapBankStates&);
  CCCapBankStates& operator=(const CCCapBankStates&);
  CCCapBankStates() {
  }

  virtual ~CCCapBankStates() noexcept;
   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  std::vector<CCState>  _ccCapBankStates;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val);

  void __set__ccCapBankStates(const std::vector<CCState> & val);

  bool operator == (const CCCapBankStates & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_ccCapBankStates == rhs._ccCapBankStates))
      return false;
    return true;
  }
  bool operator != (const CCCapBankStates &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCCapBankStates & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCCapBankStates &a, CCCapBankStates &b);

std::ostream& operator<<(std::ostream& out, const CCCapBankStates& obj);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCCapBankStates_TYPES_H
#define CCCapBankStates_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCMessage_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCState {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  CCState() : _text(), _foregroundColor(0), _backgroundColor(0) {
  }

  virtual ~CCState() throw() {}

  std::string _text;
  int32_t _foregroundColor;
  int32_t _backgroundColor;

  void __set__text(const std::string& val) {
    _text = val;
  }

  void __set__foregroundColor(const int32_t val) {
    _foregroundColor = val;
  }

  void __set__backgroundColor(const int32_t val) {
    _backgroundColor = val;
  }

  bool operator == (const CCState & rhs) const
  {
    if (!(_text == rhs._text))
      return false;
    if (!(_foregroundColor == rhs._foregroundColor))
      return false;
    if (!(_backgroundColor == rhs._backgroundColor))
      return false;
    return true;
  }
  bool operator != (const CCState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCState &a, CCState &b);


class CCCapBankStates {
 public:

  static const char* ascii_fingerprint; // = "C8C88811B9BAC119B02B7CC733DCF5CE";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0xC8,0x88,0x11,0xB9,0xBA,0xC1,0x19,0xB0,0x2B,0x7C,0xC7,0x33,0xDC,0xF5,0xCE};

  CCCapBankStates() {
  }

  virtual ~CCCapBankStates() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  std::vector<CCState>  _ccCapBankStates;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val) {
    _baseMessage = val;
  }

  void __set__ccCapBankStates(const std::vector<CCState> & val) {
    _ccCapBankStates = val;
  }

  bool operator == (const CCCapBankStates & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_ccCapBankStates == rhs._ccCapBankStates))
      return false;
    return true;
  }
  bool operator != (const CCCapBankStates &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCCapBankStates & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCCapBankStates &a, CCCapBankStates &b);

}}}} // namespace

#endif

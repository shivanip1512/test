/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MCOverrideRequest_TYPES_H
#define MCOverrideRequest_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class MCOverrideRequest {
 public:

  static const char* ascii_fingerprint; // = "5BF8899B42170C0C9A1D3A4B4D1AAE0A";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0xF8,0x89,0x9B,0x42,0x17,0x0C,0x0C,0x9A,0x1D,0x3A,0x4B,0x4D,0x1A,0xAE,0x0A};

  MCOverrideRequest() : _action(0), _id(0), _startTime(0), _stopTime(0) {
  }

  virtual ~MCOverrideRequest() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _action;
  int32_t _id;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _startTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _stopTime;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__action(const int32_t val) {
    _action = val;
  }

  void __set__id(const int32_t val) {
    _id = val;
  }

  void __set__startTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _startTime = val;
  }

  void __set__stopTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _stopTime = val;
  }

  bool operator == (const MCOverrideRequest & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_action == rhs._action))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_startTime == rhs._startTime))
      return false;
    if (!(_stopTime == rhs._stopTime))
      return false;
    return true;
  }
  bool operator != (const MCOverrideRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCOverrideRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MCOverrideRequest &a, MCOverrideRequest &b);

}}}} // namespace

#endif

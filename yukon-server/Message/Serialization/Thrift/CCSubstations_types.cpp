/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CCSubstations_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* CCSubstationItem::ascii_fingerprint = "FD3539118479DE7BDA7031A6562AA727";
const uint8_t CCSubstationItem::binary_fingerprint[16] = {0xFD,0x35,0x39,0x11,0x84,0x79,0xDE,0x7B,0xDA,0x70,0x31,0xA6,0x56,0x2A,0xA7,0x27};

uint32_t CCSubstationItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__parentId = false;
  bool isset__ovUvDisabledFlag = false;
  bool isset__subBusIds = false;
  bool isset__pfDisplayValue = false;
  bool isset__estPfDisplayValue = false;
  bool isset__saEnabledFlag = false;
  bool isset__saEnabledId = false;
  bool isset__voltReductionFlag = false;
  bool isset__recentlyControlledFlag = false;
  bool isset__childVoltReductionFlag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_parentId);
          isset__parentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_ovUvDisabledFlag);
          isset__ovUvDisabledFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_subBusIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_subBusIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->_subBusIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset__subBusIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_pfDisplayValue);
          isset__pfDisplayValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_estPfDisplayValue);
          isset__estPfDisplayValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_saEnabledFlag);
          isset__saEnabledFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_saEnabledId);
          isset__saEnabledId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_voltReductionFlag);
          isset__voltReductionFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_recentlyControlledFlag);
          isset__recentlyControlledFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_childVoltReductionFlag);
          isset__childVoltReductionFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__parentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ovUvDisabledFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__subBusIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pfDisplayValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estPfDisplayValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__saEnabledFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__saEnabledId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__voltReductionFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__recentlyControlledFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__childVoltReductionFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCSubstationItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCSubstationItem");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_parentId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_parentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ovUvDisabledFlag", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->_ovUvDisabledFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_subBusIds", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_subBusIds.size()));
    std::vector<int32_t> ::const_iterator _iter5;
    for (_iter5 = this->_subBusIds.begin(); _iter5 != this->_subBusIds.end(); ++_iter5)
    {
      xfer += oprot->writeI32((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pfDisplayValue", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->_pfDisplayValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estPfDisplayValue", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->_estPfDisplayValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_saEnabledFlag", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->_saEnabledFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_saEnabledId", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->_saEnabledId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_voltReductionFlag", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->_voltReductionFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_recentlyControlledFlag", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->_recentlyControlledFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_childVoltReductionFlag", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->_childVoltReductionFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCSubstationItem &a, CCSubstationItem &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._parentId, b._parentId);
  swap(a._ovUvDisabledFlag, b._ovUvDisabledFlag);
  swap(a._subBusIds, b._subBusIds);
  swap(a._pfDisplayValue, b._pfDisplayValue);
  swap(a._estPfDisplayValue, b._estPfDisplayValue);
  swap(a._saEnabledFlag, b._saEnabledFlag);
  swap(a._saEnabledId, b._saEnabledId);
  swap(a._voltReductionFlag, b._voltReductionFlag);
  swap(a._recentlyControlledFlag, b._recentlyControlledFlag);
  swap(a._childVoltReductionFlag, b._childVoltReductionFlag);
}

const char* CCSubstations::ascii_fingerprint = "2745AA03BA92479CBB88D76C154B275A";
const uint8_t CCSubstations::binary_fingerprint[16] = {0x27,0x45,0xAA,0x03,0xBA,0x92,0x47,0x9C,0xBB,0x88,0xD7,0x6C,0x15,0x4B,0x27,0x5A};

uint32_t CCSubstations::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__msgInfoBitMask = false;
  bool isset__ccSubstations = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_msgInfoBitMask);
          isset__msgInfoBitMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_ccSubstations.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->_ccSubstations.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->_ccSubstations[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__ccSubstations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__msgInfoBitMask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ccSubstations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCSubstations::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCSubstations");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_msgInfoBitMask", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_msgInfoBitMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ccSubstations", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_ccSubstations.size()));
    std::vector<CCSubstationItem> ::const_iterator _iter11;
    for (_iter11 = this->_ccSubstations.begin(); _iter11 != this->_ccSubstations.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCSubstations &a, CCSubstations &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._msgInfoBitMask, b._msgInfoBitMask);
  swap(a._ccSubstations, b._ccSubstations);
}

}}}} // namespace

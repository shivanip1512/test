/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CCSpecialAreas_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* CCSpecial::ascii_fingerprint = "36CC6FED0585BF983E8FB637149707C3";
const uint8_t CCSpecial::binary_fingerprint[16] = {0x36,0xCC,0x6F,0xED,0x05,0x85,0xBF,0x98,0x3E,0x8F,0xB6,0x37,0x14,0x97,0x07,0xC3};

uint32_t CCSpecial::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__substationIds = false;
  bool isset__ovUvDisabledFlag = false;
  bool isset__pfDisplayValue = false;
  bool isset__estPfDisplayValue = false;
  bool isset__voltReductionControlValue = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_substationIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_substationIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->_substationIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset__substationIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_ovUvDisabledFlag);
          isset__ovUvDisabledFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_pfDisplayValue);
          isset__pfDisplayValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_estPfDisplayValue);
          isset__estPfDisplayValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_voltReductionControlValue);
          isset__voltReductionControlValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__substationIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ovUvDisabledFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pfDisplayValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__estPfDisplayValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__voltReductionControlValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCSpecial::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCSpecial");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_substationIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_substationIds.size()));
    std::vector<int32_t> ::const_iterator _iter5;
    for (_iter5 = this->_substationIds.begin(); _iter5 != this->_substationIds.end(); ++_iter5)
    {
      xfer += oprot->writeI32((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ovUvDisabledFlag", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->_ovUvDisabledFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pfDisplayValue", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->_pfDisplayValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_estPfDisplayValue", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->_estPfDisplayValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_voltReductionControlValue", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->_voltReductionControlValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCSpecial &a, CCSpecial &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._substationIds, b._substationIds);
  swap(a._ovUvDisabledFlag, b._ovUvDisabledFlag);
  swap(a._pfDisplayValue, b._pfDisplayValue);
  swap(a._estPfDisplayValue, b._estPfDisplayValue);
  swap(a._voltReductionControlValue, b._voltReductionControlValue);
}

const char* CCSpecialAreas::ascii_fingerprint = "C0EE2CCB6C59DE5C3722547A2D08F1DC";
const uint8_t CCSpecialAreas::binary_fingerprint[16] = {0xC0,0xEE,0x2C,0xCB,0x6C,0x59,0xDE,0x5C,0x37,0x22,0x54,0x7A,0x2D,0x08,0xF1,0xDC};

uint32_t CCSpecialAreas::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__ccSpecialAreas = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_ccSpecialAreas.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->_ccSpecialAreas.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->_ccSpecialAreas[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__ccSpecialAreas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ccSpecialAreas)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CCSpecialAreas::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CCSpecialAreas");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ccSpecialAreas", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_ccSpecialAreas.size()));
    std::vector<CCSpecial> ::const_iterator _iter11;
    for (_iter11 = this->_ccSpecialAreas.begin(); _iter11 != this->_ccSpecialAreas.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CCSpecialAreas &a, CCSpecialAreas &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._ccSpecialAreas, b._ccSpecialAreas);
}

}}}} // namespace

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMControlHistory_TYPES_H
#define LMControlHistory_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class LMControlHistory;


class LMControlHistory : public virtual ::apache::thrift::TBase {
 public:

  LMControlHistory(const LMControlHistory&);
  LMControlHistory& operator=(const LMControlHistory&);
  LMControlHistory() noexcept
                   : _paoId(0),
                     _pointId(0),
                     _rawState(0),
                     _startDateTime(0),
                     _controlDuration(0),
                     _reductionRatio(0),
                     _controlType(),
                     _activeRestore(),
                     _reductionValue(0),
                     _controlPriority(0),
                     _associationKey(0) {
  }

  virtual ~LMControlHistory() noexcept;
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _paoId;
  int32_t _pointId;
  int32_t _rawState;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _startDateTime;
  int32_t _controlDuration;
  int32_t _reductionRatio;
  std::string _controlType;
  std::string _activeRestore;
  double _reductionValue;
  int32_t _controlPriority;
  int32_t _associationKey;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__paoId(const int32_t val);

  void __set__pointId(const int32_t val);

  void __set__rawState(const int32_t val);

  void __set__startDateTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__controlDuration(const int32_t val);

  void __set__reductionRatio(const int32_t val);

  void __set__controlType(const std::string& val);

  void __set__activeRestore(const std::string& val);

  void __set__reductionValue(const double val);

  void __set__controlPriority(const int32_t val);

  void __set__associationKey(const int32_t val);

  bool operator == (const LMControlHistory & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_pointId == rhs._pointId))
      return false;
    if (!(_rawState == rhs._rawState))
      return false;
    if (!(_startDateTime == rhs._startDateTime))
      return false;
    if (!(_controlDuration == rhs._controlDuration))
      return false;
    if (!(_reductionRatio == rhs._reductionRatio))
      return false;
    if (!(_controlType == rhs._controlType))
      return false;
    if (!(_activeRestore == rhs._activeRestore))
      return false;
    if (!(_reductionValue == rhs._reductionValue))
      return false;
    if (!(_controlPriority == rhs._controlPriority))
      return false;
    if (!(_associationKey == rhs._associationKey))
      return false;
    return true;
  }
  bool operator != (const LMControlHistory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMControlHistory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMControlHistory &a, LMControlHistory &b);

std::ostream& operator<<(std::ostream& out, const LMControlHistory& obj);

}}}} // namespace

#endif

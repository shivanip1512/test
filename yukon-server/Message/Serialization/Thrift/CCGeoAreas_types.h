/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCGeoAreas_TYPES_H
#define CCGeoAreas_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCMessage_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCArea {
 public:

  static const char* ascii_fingerprint; // = "354A95A629FF6F8D8412BB5D265CA11A";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0x4A,0x95,0xA6,0x29,0xFF,0x6F,0x8D,0x84,0x12,0xBB,0x5D,0x26,0x5C,0xA1,0x1A};

  CCArea() : _ovUvDisabledFlag(0), _pfDisplayValue(0), _estPfDisplayValue(0), _voltReductionControlValue(0), _childVoltReductionFlag(0) {
  }

  virtual ~CCArea() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCPao _baseMessage;
  bool _ovUvDisabledFlag;
  std::vector<int32_t>  _substationIds;
  double _pfDisplayValue;
  double _estPfDisplayValue;
  bool _voltReductionControlValue;
  bool _childVoltReductionFlag;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val) {
    _baseMessage = val;
  }

  void __set__ovUvDisabledFlag(const bool val) {
    _ovUvDisabledFlag = val;
  }

  void __set__substationIds(const std::vector<int32_t> & val) {
    _substationIds = val;
  }

  void __set__pfDisplayValue(const double val) {
    _pfDisplayValue = val;
  }

  void __set__estPfDisplayValue(const double val) {
    _estPfDisplayValue = val;
  }

  void __set__voltReductionControlValue(const bool val) {
    _voltReductionControlValue = val;
  }

  void __set__childVoltReductionFlag(const bool val) {
    _childVoltReductionFlag = val;
  }

  bool operator == (const CCArea & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_ovUvDisabledFlag == rhs._ovUvDisabledFlag))
      return false;
    if (!(_substationIds == rhs._substationIds))
      return false;
    if (!(_pfDisplayValue == rhs._pfDisplayValue))
      return false;
    if (!(_estPfDisplayValue == rhs._estPfDisplayValue))
      return false;
    if (!(_voltReductionControlValue == rhs._voltReductionControlValue))
      return false;
    if (!(_childVoltReductionFlag == rhs._childVoltReductionFlag))
      return false;
    return true;
  }
  bool operator != (const CCArea &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCArea & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCArea &a, CCArea &b);


class CCGeoAreas {
 public:

  static const char* ascii_fingerprint; // = "EB28931D63E3D8C81EAAB13E49E638A0";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x28,0x93,0x1D,0x63,0xE3,0xD8,0xC8,0x1E,0xAA,0xB1,0x3E,0x49,0xE6,0x38,0xA0};

  CCGeoAreas() : _msgInfoBitMask(0) {
  }

  virtual ~CCGeoAreas() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  int32_t _msgInfoBitMask;
  std::vector<CCArea>  _ccGeoAreas;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val) {
    _baseMessage = val;
  }

  void __set__msgInfoBitMask(const int32_t val) {
    _msgInfoBitMask = val;
  }

  void __set__ccGeoAreas(const std::vector<CCArea> & val) {
    _ccGeoAreas = val;
  }

  bool operator == (const CCGeoAreas & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_msgInfoBitMask == rhs._msgInfoBitMask))
      return false;
    if (!(_ccGeoAreas == rhs._ccGeoAreas))
      return false;
    return true;
  }
  bool operator != (const CCGeoAreas &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCGeoAreas & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCGeoAreas &a, CCGeoAreas &b);

}}}} // namespace

#endif

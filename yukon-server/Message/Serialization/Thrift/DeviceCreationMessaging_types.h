/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DeviceCreationMessaging_TYPES_H
#define DeviceCreationMessaging_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"
#include "RfnE2eData_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class RfnDeviceCreationRequest {
 public:

  static const char* ascii_fingerprint; // = "636807D016867BC3A79FD54005E0677E";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0x68,0x07,0xD0,0x16,0x86,0x7B,0xC3,0xA7,0x9F,0xD5,0x40,0x05,0xE0,0x67,0x7E};

  RfnDeviceCreationRequest() {
  }

  virtual ~RfnDeviceCreationRequest() throw() {}

   ::Cti::Messaging::Serialization::Thrift::RfnIdentifier rfnIdentifier;

  void __set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
    rfnIdentifier = val;
  }

  bool operator == (const RfnDeviceCreationRequest & rhs) const
  {
    if (!(rfnIdentifier == rhs.rfnIdentifier))
      return false;
    return true;
  }
  bool operator != (const RfnDeviceCreationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnDeviceCreationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnDeviceCreationRequest &a, RfnDeviceCreationRequest &b);


class DeviceCreationDescriptor {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  DeviceCreationDescriptor() : paoId(0), category(), deviceType() {
  }

  virtual ~DeviceCreationDescriptor() throw() {}

  int32_t paoId;
  std::string category;
  std::string deviceType;

  void __set_paoId(const int32_t val) {
    paoId = val;
  }

  void __set_category(const std::string& val) {
    category = val;
  }

  void __set_deviceType(const std::string& val) {
    deviceType = val;
  }

  bool operator == (const DeviceCreationDescriptor & rhs) const
  {
    if (!(paoId == rhs.paoId))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(deviceType == rhs.deviceType))
      return false;
    return true;
  }
  bool operator != (const DeviceCreationDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceCreationDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeviceCreationDescriptor &a, DeviceCreationDescriptor &b);

typedef struct _RfnDeviceCreationReply__isset {
  _RfnDeviceCreationReply__isset() : descriptor(false) {}
  bool descriptor;
} _RfnDeviceCreationReply__isset;

class RfnDeviceCreationReply {
 public:

  static const char* ascii_fingerprint; // = "4462D3C52BFBF791C5452AAA17F9C1ED";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x62,0xD3,0xC5,0x2B,0xFB,0xF7,0x91,0xC5,0x45,0x2A,0xAA,0x17,0xF9,0xC1,0xED};

  RfnDeviceCreationReply() : success(0) {
  }

  virtual ~RfnDeviceCreationReply() throw() {}

  DeviceCreationDescriptor descriptor;
  bool success;

  _RfnDeviceCreationReply__isset __isset;

  void __set_descriptor(const DeviceCreationDescriptor& val) {
    descriptor = val;
    __isset.descriptor = true;
  }

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RfnDeviceCreationReply & rhs) const
  {
    if (__isset.descriptor != rhs.__isset.descriptor)
      return false;
    else if (__isset.descriptor && !(descriptor == rhs.descriptor))
      return false;
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RfnDeviceCreationReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnDeviceCreationReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnDeviceCreationReply &a, RfnDeviceCreationReply &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCSystemStatus_TYPES_H
#define CCSystemStatus_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCMessage_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCSystemStatus {
 public:

  static const char* ascii_fingerprint; // = "728C76D60460CB28E7EA135BBDB65B78";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x8C,0x76,0xD6,0x04,0x60,0xCB,0x28,0xE7,0xEA,0x13,0x5B,0xBD,0xB6,0x5B,0x78};

  CCSystemStatus() : _systemState(0) {
  }

  virtual ~CCSystemStatus() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  bool _systemState;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val) {
    _baseMessage = val;
  }

  void __set__systemState(const bool val) {
    _systemState = val;
  }

  bool operator == (const CCSystemStatus & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_systemState == rhs._systemState))
      return false;
    return true;
  }
  bool operator != (const CCSystemStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCSystemStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCSystemStatus &a, CCSystemStatus &b);

}}}} // namespace

#endif

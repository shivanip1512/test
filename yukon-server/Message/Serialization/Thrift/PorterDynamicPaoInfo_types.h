/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PorterDynamicPaoInfo_TYPES_H
#define PorterDynamicPaoInfo_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift { namespace Porter {

struct DynamicPaoInfoDurationKeys {
  enum type {
    RFN_VOLTAGE_PROFILE_INTERVAL = 0,
    MCT_IED_LOAD_PROFILE_INTERVAL = 1
  };
};

extern const std::map<int, const char*> _DynamicPaoInfoDurationKeys_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DynamicPaoInfoDurationKeys::type& val);

std::string to_string(const DynamicPaoInfoDurationKeys::type& val);

struct DynamicPaoInfoTimestampKeys {
  enum type {
    RFN_VOLTAGE_PROFILE_ENABLED_UNTIL = 0
  };
};

extern const std::map<int, const char*> _DynamicPaoInfoTimestampKeys_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DynamicPaoInfoTimestampKeys::type& val);

std::string to_string(const DynamicPaoInfoTimestampKeys::type& val);

struct DynamicPaoInfoPercentageKeys {
  enum type {
    METER_PROGRAMMING_PROGRESS = 0
  };
};

extern const std::map<int, const char*> _DynamicPaoInfoPercentageKeys_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DynamicPaoInfoPercentageKeys::type& val);

std::string to_string(const DynamicPaoInfoPercentageKeys::type& val);

class DynamicPaoInfoRequest;

class DynamicPaoInfoResponse;


class DynamicPaoInfoRequest : public virtual ::apache::thrift::TBase {
 public:

  DynamicPaoInfoRequest(const DynamicPaoInfoRequest&);
  DynamicPaoInfoRequest& operator=(const DynamicPaoInfoRequest&);
  DynamicPaoInfoRequest() : _deviceId(0) {
  }

  virtual ~DynamicPaoInfoRequest() noexcept;
  int32_t _deviceId;
  std::set<DynamicPaoInfoDurationKeys::type>  _durationKeys;
  std::set<DynamicPaoInfoTimestampKeys::type>  _timestampKeys;
  std::set<DynamicPaoInfoPercentageKeys::type>  _percentageKeys;

  void __set__deviceId(const int32_t val);

  void __set__durationKeys(const std::set<DynamicPaoInfoDurationKeys::type> & val);

  void __set__timestampKeys(const std::set<DynamicPaoInfoTimestampKeys::type> & val);

  void __set__percentageKeys(const std::set<DynamicPaoInfoPercentageKeys::type> & val);

  bool operator == (const DynamicPaoInfoRequest & rhs) const
  {
    if (!(_deviceId == rhs._deviceId))
      return false;
    if (!(_durationKeys == rhs._durationKeys))
      return false;
    if (!(_timestampKeys == rhs._timestampKeys))
      return false;
    if (!(_percentageKeys == rhs._percentageKeys))
      return false;
    return true;
  }
  bool operator != (const DynamicPaoInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DynamicPaoInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DynamicPaoInfoRequest &a, DynamicPaoInfoRequest &b);

std::ostream& operator<<(std::ostream& out, const DynamicPaoInfoRequest& obj);


class DynamicPaoInfoResponse : public virtual ::apache::thrift::TBase {
 public:

  DynamicPaoInfoResponse(const DynamicPaoInfoResponse&);
  DynamicPaoInfoResponse& operator=(const DynamicPaoInfoResponse&);
  DynamicPaoInfoResponse() : _deviceId(0) {
  }

  virtual ~DynamicPaoInfoResponse() noexcept;
  int32_t _deviceId;
  std::map<DynamicPaoInfoDurationKeys::type, int64_t>  _durationValues;
  std::map<DynamicPaoInfoTimestampKeys::type, int64_t>  _timestampValues;
  std::map<DynamicPaoInfoPercentageKeys::type, double>  _percentageValues;

  void __set__deviceId(const int32_t val);

  void __set__durationValues(const std::map<DynamicPaoInfoDurationKeys::type, int64_t> & val);

  void __set__timestampValues(const std::map<DynamicPaoInfoTimestampKeys::type, int64_t> & val);

  void __set__percentageValues(const std::map<DynamicPaoInfoPercentageKeys::type, double> & val);

  bool operator == (const DynamicPaoInfoResponse & rhs) const
  {
    if (!(_deviceId == rhs._deviceId))
      return false;
    if (!(_durationValues == rhs._durationValues))
      return false;
    if (!(_timestampValues == rhs._timestampValues))
      return false;
    if (!(_percentageValues == rhs._percentageValues))
      return false;
    return true;
  }
  bool operator != (const DynamicPaoInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DynamicPaoInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DynamicPaoInfoResponse &a, DynamicPaoInfoResponse &b);

std::ostream& operator<<(std::ostream& out, const DynamicPaoInfoResponse& obj);

}}}}} // namespace

#endif

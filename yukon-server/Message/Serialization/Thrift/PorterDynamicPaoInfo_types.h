/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PorterDynamicPaoInfo_TYPES_H
#define PorterDynamicPaoInfo_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift { namespace Porter {

struct DynamicPaoInfoDurationKeys {
  enum type {
    RFN_VOLTAGE_PROFILE_INTERVAL = 0,
    MCT_IED_LOAD_PROFILE_INTERVAL = 1
  };
};

extern const std::map<int, const char*> _DynamicPaoInfoDurationKeys_VALUES_TO_NAMES;

struct DynamicPaoInfoTimestampKeys {
  enum type {
    RFN_VOLTAGE_PROFILE_ENABLED_UNTIL = 0
  };
};

extern const std::map<int, const char*> _DynamicPaoInfoTimestampKeys_VALUES_TO_NAMES;


class DynamicPaoInfoRequest {
 public:

  static const char* ascii_fingerprint; // = "46B35B53FBCDAE8AC0A7A2CC816D67AF";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xB3,0x5B,0x53,0xFB,0xCD,0xAE,0x8A,0xC0,0xA7,0xA2,0xCC,0x81,0x6D,0x67,0xAF};

  DynamicPaoInfoRequest() : _deviceId(0) {
  }

  virtual ~DynamicPaoInfoRequest() throw() {}

  int32_t _deviceId;
  std::set<DynamicPaoInfoDurationKeys::type>  _durationKeys;
  std::set<DynamicPaoInfoTimestampKeys::type>  _timestampKeys;

  void __set__deviceId(const int32_t val) {
    _deviceId = val;
  }

  void __set__durationKeys(const std::set<DynamicPaoInfoDurationKeys::type> & val) {
    _durationKeys = val;
  }

  void __set__timestampKeys(const std::set<DynamicPaoInfoTimestampKeys::type> & val) {
    _timestampKeys = val;
  }

  bool operator == (const DynamicPaoInfoRequest & rhs) const
  {
    if (!(_deviceId == rhs._deviceId))
      return false;
    if (!(_durationKeys == rhs._durationKeys))
      return false;
    if (!(_timestampKeys == rhs._timestampKeys))
      return false;
    return true;
  }
  bool operator != (const DynamicPaoInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DynamicPaoInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DynamicPaoInfoRequest &a, DynamicPaoInfoRequest &b);


class DynamicPaoInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "4D6599A199A14163B012BF568AC0652E";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x65,0x99,0xA1,0x99,0xA1,0x41,0x63,0xB0,0x12,0xBF,0x56,0x8A,0xC0,0x65,0x2E};

  DynamicPaoInfoResponse() : _deviceId(0) {
  }

  virtual ~DynamicPaoInfoResponse() throw() {}

  int32_t _deviceId;
  std::map<DynamicPaoInfoDurationKeys::type, int64_t>  _durationValues;
  std::map<DynamicPaoInfoTimestampKeys::type, int64_t>  _timestampValues;

  void __set__deviceId(const int32_t val) {
    _deviceId = val;
  }

  void __set__durationValues(const std::map<DynamicPaoInfoDurationKeys::type, int64_t> & val) {
    _durationValues = val;
  }

  void __set__timestampValues(const std::map<DynamicPaoInfoTimestampKeys::type, int64_t> & val) {
    _timestampValues = val;
  }

  bool operator == (const DynamicPaoInfoResponse & rhs) const
  {
    if (!(_deviceId == rhs._deviceId))
      return false;
    if (!(_durationValues == rhs._durationValues))
      return false;
    if (!(_timestampValues == rhs._timestampValues))
      return false;
    return true;
  }
  bool operator != (const DynamicPaoInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DynamicPaoInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DynamicPaoInfoResponse &a, DynamicPaoInfoResponse &b);

}}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Message_TYPES_H
#define Message_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class Message {
 public:

  static const char* ascii_fingerprint; // = "8F34A2AE943957281399A0CEAFC79E43";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x34,0xA2,0xAE,0x94,0x39,0x57,0x28,0x13,0x99,0xA0,0xCE,0xAF,0xC7,0x9E,0x43};

  Message() : _messageTime(0), _messagePriority(0), _soe(0), _usr(), _token(0), _src() {
  }

  virtual ~Message() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Timestamp _messageTime;
  int32_t _messagePriority;
  int32_t _soe;
  std::string _usr;
  int32_t _token;
  std::string _src;

  void __set__messageTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _messageTime = val;
  }

  void __set__messagePriority(const int32_t val) {
    _messagePriority = val;
  }

  void __set__soe(const int32_t val) {
    _soe = val;
  }

  void __set__usr(const std::string& val) {
    _usr = val;
  }

  void __set__token(const int32_t val) {
    _token = val;
  }

  void __set__src(const std::string& val) {
    _src = val;
  }

  bool operator == (const Message & rhs) const
  {
    if (!(_messageTime == rhs._messageTime))
      return false;
    if (!(_messagePriority == rhs._messagePriority))
      return false;
    if (!(_soe == rhs._soe))
      return false;
    if (!(_usr == rhs._usr))
      return false;
    if (!(_token == rhs._token))
      return false;
    if (!(_src == rhs._src))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Message &a, Message &b);


class GenericMessage {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  GenericMessage() : _messageType(), _payload() {
  }

  virtual ~GenericMessage() throw() {}

  std::string _messageType;
  std::string _payload;

  void __set__messageType(const std::string& val) {
    _messageType = val;
  }

  void __set__payload(const std::string& val) {
    _payload = val;
  }

  bool operator == (const GenericMessage & rhs) const
  {
    if (!(_messageType == rhs._messageType))
      return false;
    if (!(_payload == rhs._payload))
      return false;
    return true;
  }
  bool operator != (const GenericMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GenericMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GenericMessage &a, GenericMessage &b);

}}}} // namespace

#endif

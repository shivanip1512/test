/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PointRegistration_TYPES_H
#define PointRegistration_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class PointRegistration {
 public:

  static const char* ascii_fingerprint; // = "C2CB3F6B34DC2B53F4AEC809573BD2E9";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xCB,0x3F,0x6B,0x34,0xDC,0x2B,0x53,0xF4,0xAE,0xC8,0x09,0x57,0x3B,0xD2,0xE9};

  PointRegistration() : _regFlags(0) {
  }

  virtual ~PointRegistration() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _regFlags;
  std::vector<int32_t>  _pointList;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__regFlags(const int32_t val) {
    _regFlags = val;
  }

  void __set__pointList(const std::vector<int32_t> & val) {
    _pointList = val;
  }

  bool operator == (const PointRegistration & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_regFlags == rhs._regFlags))
      return false;
    if (!(_pointList == rhs._pointList))
      return false;
    return true;
  }
  bool operator != (const PointRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PointRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PointRegistration &a, PointRegistration &b);

}}}} // namespace

#endif

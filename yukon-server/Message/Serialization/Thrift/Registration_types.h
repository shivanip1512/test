/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Registration_TYPES_H
#define Registration_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class Registration {
 public:

  static const char* ascii_fingerprint; // = "8B66031ACDC8DED3DC5A35ED21FC26AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x66,0x03,0x1A,0xCD,0xC8,0xDE,0xD3,0xDC,0x5A,0x35,0xED,0x21,0xFC,0x26,0xAA};

  Registration() : _appName(), _appId(0), _appIsUnique(0), _appExpirationDelay(0) {
  }

  virtual ~Registration() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  std::string _appName;
  int32_t _appId;
  int32_t _appIsUnique;
  int32_t _appExpirationDelay;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__appName(const std::string& val) {
    _appName = val;
  }

  void __set__appId(const int32_t val) {
    _appId = val;
  }

  void __set__appIsUnique(const int32_t val) {
    _appIsUnique = val;
  }

  void __set__appExpirationDelay(const int32_t val) {
    _appExpirationDelay = val;
  }

  bool operator == (const Registration & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_appName == rhs._appName))
      return false;
    if (!(_appId == rhs._appId))
      return false;
    if (!(_appIsUnique == rhs._appIsUnique))
      return false;
    if (!(_appExpirationDelay == rhs._appExpirationDelay))
      return false;
    return true;
  }
  bool operator != (const Registration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Registration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Registration &a, Registration &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMDynamicControlAreaData_TYPES_H
#define LMDynamicControlAreaData_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "LMDynamicTriggerData_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class LMDynamicControlAreaData {
 public:

  static const char* ascii_fingerprint; // = "6A5F11D6014BC0E87327980578FA9660";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x5F,0x11,0xD6,0x01,0x4B,0xC0,0xE8,0x73,0x27,0x98,0x05,0x78,0xFA,0x96,0x60};

  LMDynamicControlAreaData() : _paoId(0), _disableFlag(0), _nextCheckTime(0), _controlAreaState(0), _currentPriority(0), _currentDailyStartTime(0), _currentDailyStopTime(0) {
  }

  virtual ~LMDynamicControlAreaData() throw() {}

  int32_t _paoId;
  int32_t _disableFlag;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _nextCheckTime;
  int32_t _controlAreaState;
  int32_t _currentPriority;
  int32_t _currentDailyStartTime;
  int32_t _currentDailyStopTime;
  std::vector< ::Cti::Messaging::Serialization::Thrift::LMDynamicTriggerData>  _triggers;

  void __set__paoId(const int32_t val) {
    _paoId = val;
  }

  void __set__disableFlag(const int32_t val) {
    _disableFlag = val;
  }

  void __set__nextCheckTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _nextCheckTime = val;
  }

  void __set__controlAreaState(const int32_t val) {
    _controlAreaState = val;
  }

  void __set__currentPriority(const int32_t val) {
    _currentPriority = val;
  }

  void __set__currentDailyStartTime(const int32_t val) {
    _currentDailyStartTime = val;
  }

  void __set__currentDailyStopTime(const int32_t val) {
    _currentDailyStopTime = val;
  }

  void __set__triggers(const std::vector< ::Cti::Messaging::Serialization::Thrift::LMDynamicTriggerData> & val) {
    _triggers = val;
  }

  bool operator == (const LMDynamicControlAreaData & rhs) const
  {
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_disableFlag == rhs._disableFlag))
      return false;
    if (!(_nextCheckTime == rhs._nextCheckTime))
      return false;
    if (!(_controlAreaState == rhs._controlAreaState))
      return false;
    if (!(_currentPriority == rhs._currentPriority))
      return false;
    if (!(_currentDailyStartTime == rhs._currentDailyStartTime))
      return false;
    if (!(_currentDailyStopTime == rhs._currentDailyStopTime))
      return false;
    if (!(_triggers == rhs._triggers))
      return false;
    return true;
  }
  bool operator != (const LMDynamicControlAreaData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMDynamicControlAreaData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LMDynamicControlAreaData &a, LMDynamicControlAreaData &b);

}}}} // namespace

#endif

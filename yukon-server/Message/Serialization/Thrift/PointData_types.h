/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PointData_TYPES_H
#define PointData_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class PointData {
 public:

  static const char* ascii_fingerprint; // = "73BE85E84219549295C92EE6F0703FEA";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0xBE,0x85,0xE8,0x42,0x19,0x54,0x92,0x95,0xC9,0x2E,0xE6,0xF0,0x70,0x3F,0xEA};

  PointData() : _id(0), _type(0), _quality(0), _tags(0), _limit(0), _value(0), _exemptionStatus(0), _str(), _time(0), _millis(0) {
  }

  virtual ~PointData() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;
  int32_t _type;
  int32_t _quality;
  int32_t _tags;
  int32_t _limit;
  double _value;
  int32_t _exemptionStatus;
  std::string _str;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _time;
  int32_t _millis;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__id(const int32_t val) {
    _id = val;
  }

  void __set__type(const int32_t val) {
    _type = val;
  }

  void __set__quality(const int32_t val) {
    _quality = val;
  }

  void __set__tags(const int32_t val) {
    _tags = val;
  }

  void __set__limit(const int32_t val) {
    _limit = val;
  }

  void __set__value(const double val) {
    _value = val;
  }

  void __set__exemptionStatus(const int32_t val) {
    _exemptionStatus = val;
  }

  void __set__str(const std::string& val) {
    _str = val;
  }

  void __set__time(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _time = val;
  }

  void __set__millis(const int32_t val) {
    _millis = val;
  }

  bool operator == (const PointData & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_type == rhs._type))
      return false;
    if (!(_quality == rhs._quality))
      return false;
    if (!(_tags == rhs._tags))
      return false;
    if (!(_limit == rhs._limit))
      return false;
    if (!(_value == rhs._value))
      return false;
    if (!(_exemptionStatus == rhs._exemptionStatus))
      return false;
    if (!(_str == rhs._str))
      return false;
    if (!(_time == rhs._time))
      return false;
    if (!(_millis == rhs._millis))
      return false;
    return true;
  }
  bool operator != (const PointData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PointData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PointData &a, PointData &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PointData_TYPES_H
#define PointData_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class PointData;


class PointData : public virtual ::apache::thrift::TBase {
 public:

  PointData(const PointData&);
  PointData& operator=(const PointData&);
  PointData() : _id(0), _type(0), _quality(0), _tags(0), _value(0), _str(), _time(0), _millis(0) {
  }

  virtual ~PointData() noexcept;
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;
  int8_t _type;
  int8_t _quality;
  int32_t _tags;
  double _value;
  std::string _str;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _time;
  int16_t _millis;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__id(const int32_t val);

  void __set__type(const int8_t val);

  void __set__quality(const int8_t val);

  void __set__tags(const int32_t val);

  void __set__value(const double val);

  void __set__str(const std::string& val);

  void __set__time(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__millis(const int16_t val);

  bool operator == (const PointData & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_type == rhs._type))
      return false;
    if (!(_quality == rhs._quality))
      return false;
    if (!(_tags == rhs._tags))
      return false;
    if (!(_value == rhs._value))
      return false;
    if (!(_str == rhs._str))
      return false;
    if (!(_time == rhs._time))
      return false;
    if (!(_millis == rhs._millis))
      return false;
    return true;
  }
  bool operator != (const PointData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PointData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PointData &a, PointData &b);

std::ostream& operator<<(std::ostream& out, const PointData& obj);

}}}} // namespace

#endif

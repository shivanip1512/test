/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ServerResponse_TYPES_H
#define ServerResponse_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class ServerResponse {
 public:

  static const char* ascii_fingerprint; // = "EC4DC8142F7CEC16E2272380F7F7F9DF";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4D,0xC8,0x14,0x2F,0x7C,0xEC,0x16,0xE2,0x27,0x23,0x80,0xF7,0xF7,0xF9,0xDF};

  ServerResponse() : _id(0), _status(0), _message(), _hasPayload(0) {
  }

  virtual ~ServerResponse() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;
  int32_t _status;
  std::string _message;
  bool _hasPayload;
   ::Cti::Messaging::Serialization::Thrift::GenericMessage _payload;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__id(const int32_t val) {
    _id = val;
  }

  void __set__status(const int32_t val) {
    _status = val;
  }

  void __set__message(const std::string& val) {
    _message = val;
  }

  void __set__hasPayload(const bool val) {
    _hasPayload = val;
  }

  void __set__payload(const  ::Cti::Messaging::Serialization::Thrift::GenericMessage& val) {
    _payload = val;
  }

  bool operator == (const ServerResponse & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_status == rhs._status))
      return false;
    if (!(_message == rhs._message))
      return false;
    if (!(_hasPayload == rhs._hasPayload))
      return false;
    if (!(_payload == rhs._payload))
      return false;
    return true;
  }
  bool operator != (const ServerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServerResponse &a, ServerResponse &b);

}}}} // namespace

#endif

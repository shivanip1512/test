/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "EdgeDrUnicastRequest_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kEdgeUnicastPriorityValues[] = {
  EdgeUnicastPriority::HIGH,
  EdgeUnicastPriority::LOW
};
const char* _kEdgeUnicastPriorityNames[] = {
  "HIGH",
  "LOW"
};
const std::map<int, const char*> _EdgeUnicastPriority_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kEdgeUnicastPriorityValues, _kEdgeUnicastPriorityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EdgeUnicastPriority::type& val) {
  std::map<int, const char*>::const_iterator it = _EdgeUnicastPriority_VALUES_TO_NAMES.find(val);
  if (it != _EdgeUnicastPriority_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const EdgeUnicastPriority::type& val) {
  std::map<int, const char*>::const_iterator it = _EdgeUnicastPriority_VALUES_TO_NAMES.find(val);
  if (it != _EdgeUnicastPriority_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


EdgeDrUnicastRequest::~EdgeDrUnicastRequest() noexcept {
}


void EdgeDrUnicastRequest::__set_messageGuid(const std::string& val) {
  this->messageGuid = val;
}

void EdgeDrUnicastRequest::__set_paoIds(const std::vector<int32_t> & val) {
  this->paoIds = val;
}

void EdgeDrUnicastRequest::__set_payload(const std::string& val) {
  this->payload = val;
}

void EdgeDrUnicastRequest::__set_queuePriority(const EdgeUnicastPriority::type val) {
  this->queuePriority = val;
}

void EdgeDrUnicastRequest::__set_networkPriority(const EdgeUnicastPriority::type val) {
  this->networkPriority = val;
}
std::ostream& operator<<(std::ostream& out, const EdgeDrUnicastRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EdgeDrUnicastRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_messageGuid = false;
  bool isset_paoIds = false;
  bool isset_payload = false;
  bool isset_queuePriority = false;
  bool isset_networkPriority = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageGuid);
          isset_messageGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->paoIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->paoIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->paoIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_paoIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          isset_payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->queuePriority = (EdgeUnicastPriority::type)ecast5;
          isset_queuePriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->networkPriority = (EdgeUnicastPriority::type)ecast6;
          isset_networkPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_messageGuid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_paoIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_queuePriority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_networkPriority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EdgeDrUnicastRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EdgeDrUnicastRequest");

  xfer += oprot->writeFieldBegin("messageGuid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageGuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paoIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->paoIds.size()));
    std::vector<int32_t> ::const_iterator _iter7;
    for (_iter7 = this->paoIds.begin(); _iter7 != this->paoIds.end(); ++_iter7)
    {
      xfer += oprot->writeI32((*_iter7));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->payload);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queuePriority", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->queuePriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("networkPriority", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->networkPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EdgeDrUnicastRequest &a, EdgeDrUnicastRequest &b) {
  using ::std::swap;
  swap(a.messageGuid, b.messageGuid);
  swap(a.paoIds, b.paoIds);
  swap(a.payload, b.payload);
  swap(a.queuePriority, b.queuePriority);
  swap(a.networkPriority, b.networkPriority);
}

EdgeDrUnicastRequest::EdgeDrUnicastRequest(const EdgeDrUnicastRequest& other8) {
  messageGuid = other8.messageGuid;
  paoIds = other8.paoIds;
  payload = other8.payload;
  queuePriority = other8.queuePriority;
  networkPriority = other8.networkPriority;
}
EdgeDrUnicastRequest& EdgeDrUnicastRequest::operator=(const EdgeDrUnicastRequest& other9) {
  messageGuid = other9.messageGuid;
  paoIds = other9.paoIds;
  payload = other9.payload;
  queuePriority = other9.queuePriority;
  networkPriority = other9.networkPriority;
  return *this;
}
void EdgeDrUnicastRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EdgeDrUnicastRequest(";
  out << "messageGuid=" << to_string(messageGuid);
  out << ", " << "paoIds=" << to_string(paoIds);
  out << ", " << "payload=" << to_string(payload);
  out << ", " << "queuePriority=" << to_string(queuePriority);
  out << ", " << "networkPriority=" << to_string(networkPriority);
  out << ")";
}

}}}} // namespace

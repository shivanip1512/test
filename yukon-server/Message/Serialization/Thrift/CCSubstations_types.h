/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCSubstations_TYPES_H
#define CCSubstations_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCMessage_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCSubstationItem {
 public:

  static const char* ascii_fingerprint; // = "FD3539118479DE7BDA7031A6562AA727";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x35,0x39,0x11,0x84,0x79,0xDE,0x7B,0xDA,0x70,0x31,0xA6,0x56,0x2A,0xA7,0x27};

  CCSubstationItem() : _parentId(0), _ovUvDisabledFlag(0), _pfDisplayValue(0), _estPfDisplayValue(0), _saEnabledFlag(0), _saEnabledId(0), _voltReductionFlag(0), _recentlyControlledFlag(0), _childVoltReductionFlag(0) {
  }

  virtual ~CCSubstationItem() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCPao _baseMessage;
  int32_t _parentId;
  bool _ovUvDisabledFlag;
  std::vector<int32_t>  _subBusIds;
  double _pfDisplayValue;
  double _estPfDisplayValue;
  bool _saEnabledFlag;
  int32_t _saEnabledId;
  bool _voltReductionFlag;
  bool _recentlyControlledFlag;
  bool _childVoltReductionFlag;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCPao& val) {
    _baseMessage = val;
  }

  void __set__parentId(const int32_t val) {
    _parentId = val;
  }

  void __set__ovUvDisabledFlag(const bool val) {
    _ovUvDisabledFlag = val;
  }

  void __set__subBusIds(const std::vector<int32_t> & val) {
    _subBusIds = val;
  }

  void __set__pfDisplayValue(const double val) {
    _pfDisplayValue = val;
  }

  void __set__estPfDisplayValue(const double val) {
    _estPfDisplayValue = val;
  }

  void __set__saEnabledFlag(const bool val) {
    _saEnabledFlag = val;
  }

  void __set__saEnabledId(const int32_t val) {
    _saEnabledId = val;
  }

  void __set__voltReductionFlag(const bool val) {
    _voltReductionFlag = val;
  }

  void __set__recentlyControlledFlag(const bool val) {
    _recentlyControlledFlag = val;
  }

  void __set__childVoltReductionFlag(const bool val) {
    _childVoltReductionFlag = val;
  }

  bool operator == (const CCSubstationItem & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_parentId == rhs._parentId))
      return false;
    if (!(_ovUvDisabledFlag == rhs._ovUvDisabledFlag))
      return false;
    if (!(_subBusIds == rhs._subBusIds))
      return false;
    if (!(_pfDisplayValue == rhs._pfDisplayValue))
      return false;
    if (!(_estPfDisplayValue == rhs._estPfDisplayValue))
      return false;
    if (!(_saEnabledFlag == rhs._saEnabledFlag))
      return false;
    if (!(_saEnabledId == rhs._saEnabledId))
      return false;
    if (!(_voltReductionFlag == rhs._voltReductionFlag))
      return false;
    if (!(_recentlyControlledFlag == rhs._recentlyControlledFlag))
      return false;
    if (!(_childVoltReductionFlag == rhs._childVoltReductionFlag))
      return false;
    return true;
  }
  bool operator != (const CCSubstationItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCSubstationItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCSubstationItem &a, CCSubstationItem &b);


class CCSubstations {
 public:

  static const char* ascii_fingerprint; // = "F14F5D40A5103D916E72BE30201B14C4";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x4F,0x5D,0x40,0xA5,0x10,0x3D,0x91,0x6E,0x72,0xBE,0x30,0x20,0x1B,0x14,0xC4};

  CCSubstations() : _msgInfoBitMask(0) {
  }

  virtual ~CCSubstations() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCMessage _baseMessage;
  int32_t _msgInfoBitMask;
  std::vector<CCSubstationItem>  _ccSubstations;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCMessage& val) {
    _baseMessage = val;
  }

  void __set__msgInfoBitMask(const int32_t val) {
    _msgInfoBitMask = val;
  }

  void __set__ccSubstations(const std::vector<CCSubstationItem> & val) {
    _ccSubstations = val;
  }

  bool operator == (const CCSubstations & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_msgInfoBitMask == rhs._msgInfoBitMask))
      return false;
    if (!(_ccSubstations == rhs._ccSubstations))
      return false;
    return true;
  }
  bool operator != (const CCSubstations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCSubstations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCSubstations &a, CCSubstations &b);

}}}} // namespace

#endif

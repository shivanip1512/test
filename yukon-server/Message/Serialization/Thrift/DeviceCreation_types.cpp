/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DeviceCreation_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


RfnDeviceCreationRequest::~RfnDeviceCreationRequest() throw() {
}


void RfnDeviceCreationRequest::__set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
  this->rfnIdentifier = val;
}
std::ostream& operator<<(std::ostream& out, const RfnDeviceCreationRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnDeviceCreationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rfnIdentifier = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnDeviceCreationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnDeviceCreationRequest");

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnDeviceCreationRequest &a, RfnDeviceCreationRequest &b) {
  using ::std::swap;
  swap(a.rfnIdentifier, b.rfnIdentifier);
}

RfnDeviceCreationRequest::RfnDeviceCreationRequest(const RfnDeviceCreationRequest& other0) {
  rfnIdentifier = other0.rfnIdentifier;
}
RfnDeviceCreationRequest& RfnDeviceCreationRequest::operator=(const RfnDeviceCreationRequest& other1) {
  rfnIdentifier = other1.rfnIdentifier;
  return *this;
}
void RfnDeviceCreationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnDeviceCreationRequest(";
  out << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ")";
}


DeviceCreationDescriptor::~DeviceCreationDescriptor() throw() {
}


void DeviceCreationDescriptor::__set_paoId(const int32_t val) {
  this->paoId = val;
}

void DeviceCreationDescriptor::__set_category(const std::string& val) {
  this->category = val;
}

void DeviceCreationDescriptor::__set_deviceType(const std::string& val) {
  this->deviceType = val;
}
std::ostream& operator<<(std::ostream& out, const DeviceCreationDescriptor& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeviceCreationDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_paoId = false;
  bool isset_category = false;
  bool isset_deviceType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->paoId);
          isset_paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->category);
          isset_category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceType);
          isset_deviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_category)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_deviceType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeviceCreationDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeviceCreationDescriptor");

  xfer += oprot->writeFieldBegin("paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->deviceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeviceCreationDescriptor &a, DeviceCreationDescriptor &b) {
  using ::std::swap;
  swap(a.paoId, b.paoId);
  swap(a.category, b.category);
  swap(a.deviceType, b.deviceType);
}

DeviceCreationDescriptor::DeviceCreationDescriptor(const DeviceCreationDescriptor& other2) {
  paoId = other2.paoId;
  category = other2.category;
  deviceType = other2.deviceType;
}
DeviceCreationDescriptor& DeviceCreationDescriptor::operator=(const DeviceCreationDescriptor& other3) {
  paoId = other3.paoId;
  category = other3.category;
  deviceType = other3.deviceType;
  return *this;
}
void DeviceCreationDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeviceCreationDescriptor(";
  out << "paoId=" << to_string(paoId);
  out << ", " << "category=" << to_string(category);
  out << ", " << "deviceType=" << to_string(deviceType);
  out << ")";
}


RfnDeviceCreationReply::~RfnDeviceCreationReply() throw() {
}


void RfnDeviceCreationReply::__set_descriptor(const DeviceCreationDescriptor& val) {
  this->descriptor = val;
__isset.descriptor = true;
}

void RfnDeviceCreationReply::__set_success(const bool val) {
  this->success = val;
}
std::ostream& operator<<(std::ostream& out, const RfnDeviceCreationReply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnDeviceCreationReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_success = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->descriptor.read(iprot);
          this->__isset.descriptor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          isset_success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_success)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnDeviceCreationReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnDeviceCreationReply");

  if (this->__isset.descriptor) {
    xfer += oprot->writeFieldBegin("descriptor", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->descriptor.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnDeviceCreationReply &a, RfnDeviceCreationReply &b) {
  using ::std::swap;
  swap(a.descriptor, b.descriptor);
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

RfnDeviceCreationReply::RfnDeviceCreationReply(const RfnDeviceCreationReply& other4) {
  descriptor = other4.descriptor;
  success = other4.success;
  __isset = other4.__isset;
}
RfnDeviceCreationReply& RfnDeviceCreationReply::operator=(const RfnDeviceCreationReply& other5) {
  descriptor = other5.descriptor;
  success = other5.success;
  __isset = other5.__isset;
  return *this;
}
void RfnDeviceCreationReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnDeviceCreationReply(";
  out << "descriptor="; (__isset.descriptor ? (out << to_string(descriptor)) : (out << "<null>"));
  out << ", " << "success=" << to_string(success);
  out << ")";
}

}}}} // namespace

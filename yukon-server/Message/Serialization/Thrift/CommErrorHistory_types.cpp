/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CommErrorHistory_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* CommErrorHistory::ascii_fingerprint = "ABC864565CD62AC2D6BF6D6D30C6299D";
const uint8_t CommErrorHistory::binary_fingerprint[16] = {0xAB,0xC8,0x64,0x56,0x5C,0xD6,0x2A,0xC2,0xD6,0xBF,0x6D,0x6D,0x30,0xC6,0x29,0x9D};

uint32_t CommErrorHistory::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__commErrorId = false;
  bool isset__paoId = false;
  bool isset__dateTime = false;
  bool isset__errorType = false;
  bool isset__errorNumber = false;
  bool isset__command = false;
  bool isset__outMessage = false;
  bool isset__inMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_commErrorId);
          isset__commErrorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_dateTime);
          isset__dateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_errorType);
          isset__errorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_errorNumber);
          isset__errorNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_command);
          isset__command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_outMessage);
          isset__outMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_inMessage);
          isset__inMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__commErrorId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__dateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__errorType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__errorNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__command)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__outMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__inMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CommErrorHistory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CommErrorHistory");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_commErrorId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_commErrorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_dateTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_dateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_errorType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_errorType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_errorNumber", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_errorNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_command", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->_command);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_outMessage", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->_outMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_inMessage", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->_inMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommErrorHistory &a, CommErrorHistory &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._commErrorId, b._commErrorId);
  swap(a._paoId, b._paoId);
  swap(a._dateTime, b._dateTime);
  swap(a._errorType, b._errorType);
  swap(a._errorNumber, b._errorNumber);
  swap(a._command, b._command);
  swap(a._outMessage, b._outMessage);
  swap(a._inMessage, b._inMessage);
}

}}}} // namespace

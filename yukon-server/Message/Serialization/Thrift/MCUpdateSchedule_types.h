/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MCUpdateSchedule_TYPES_H
#define MCUpdateSchedule_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"
#include "MCSchedule_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class MCUpdateSchedule {
 public:

  static const char* ascii_fingerprint; // = "B9FAC7CA596E398FF258712F4CBCB9B3";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0xFA,0xC7,0xCA,0x59,0x6E,0x39,0x8F,0xF2,0x58,0x71,0x2F,0x4C,0xBC,0xB9,0xB3};

  MCUpdateSchedule() : _script() {
  }

  virtual ~MCUpdateSchedule() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
   ::Cti::Messaging::Serialization::Thrift::MCSchedule _schedule;
  std::string _script;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__schedule(const  ::Cti::Messaging::Serialization::Thrift::MCSchedule& val) {
    _schedule = val;
  }

  void __set__script(const std::string& val) {
    _script = val;
  }

  bool operator == (const MCUpdateSchedule & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_schedule == rhs._schedule))
      return false;
    if (!(_script == rhs._script))
      return false;
    return true;
  }
  bool operator != (const MCUpdateSchedule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCUpdateSchedule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MCUpdateSchedule &a, MCUpdateSchedule &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCDynamicCommand_TYPES_H
#define CCDynamicCommand_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCCommand_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCDynamicCommand {
 public:

  static const char* ascii_fingerprint; // = "34763D221232186D1EC48E33BE337F6E";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x76,0x3D,0x22,0x12,0x32,0x18,0x6D,0x1E,0xC4,0x8E,0x33,0xBE,0x33,0x7F,0x6E};

  CCDynamicCommand() : _commandType(0) {
  }

  virtual ~CCDynamicCommand() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCCommand _baseMessage;
  int32_t _commandType;
  std::map<int32_t, int32_t>  _longParameters;
  std::map<int32_t, double>  _doubleParameters;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCCommand& val) {
    _baseMessage = val;
  }

  void __set__commandType(const int32_t val) {
    _commandType = val;
  }

  void __set__longParameters(const std::map<int32_t, int32_t> & val) {
    _longParameters = val;
  }

  void __set__doubleParameters(const std::map<int32_t, double> & val) {
    _doubleParameters = val;
  }

  bool operator == (const CCDynamicCommand & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_commandType == rhs._commandType))
      return false;
    if (!(_longParameters == rhs._longParameters))
      return false;
    if (!(_doubleParameters == rhs._doubleParameters))
      return false;
    return true;
  }
  bool operator != (const CCDynamicCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCDynamicCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCDynamicCommand &a, CCDynamicCommand &b);

}}}} // namespace

#endif

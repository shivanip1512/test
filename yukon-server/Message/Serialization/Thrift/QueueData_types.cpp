/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "QueueData_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


QueueData::~QueueData() throw() {
}


void QueueData::__set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
  this->_baseMessage = val;
}

void QueueData::__set__id(const int32_t val) {
  this->_id = val;
}

void QueueData::__set__queueCount(const int32_t val) {
  this->_queueCount = val;
}

void QueueData::__set__rate(const int32_t val) {
  this->_rate = val;
}

void QueueData::__set__requestId(const int32_t val) {
  this->_requestId = val;
}

void QueueData::__set__requestIdCount(const int32_t val) {
  this->_requestIdCount = val;
}

void QueueData::__set__aTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_aTime = val;
}

void QueueData::__set__userMessageId(const int32_t val) {
  this->_userMessageId = val;
}
std::ostream& operator<<(std::ostream& out, const QueueData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueueData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__id = false;
  bool isset__queueCount = false;
  bool isset__rate = false;
  bool isset__requestId = false;
  bool isset__requestIdCount = false;
  bool isset__aTime = false;
  bool isset__userMessageId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_id);
          isset__id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_queueCount);
          isset__queueCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_rate);
          isset__rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_requestId);
          isset__requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_requestIdCount);
          isset__requestIdCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_aTime);
          isset__aTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_userMessageId);
          isset__userMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__queueCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__rate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__requestId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__requestIdCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__aTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__userMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueueData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueueData");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_queueCount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_queueCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_rate", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_requestId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_requestIdCount", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->_requestIdCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_aTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->_aTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_userMessageId", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->_userMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueueData &a, QueueData &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._id, b._id);
  swap(a._queueCount, b._queueCount);
  swap(a._rate, b._rate);
  swap(a._requestId, b._requestId);
  swap(a._requestIdCount, b._requestIdCount);
  swap(a._aTime, b._aTime);
  swap(a._userMessageId, b._userMessageId);
}

QueueData::QueueData(const QueueData& other0) {
  _baseMessage = other0._baseMessage;
  _id = other0._id;
  _queueCount = other0._queueCount;
  _rate = other0._rate;
  _requestId = other0._requestId;
  _requestIdCount = other0._requestIdCount;
  _aTime = other0._aTime;
  _userMessageId = other0._userMessageId;
}
QueueData& QueueData::operator=(const QueueData& other1) {
  _baseMessage = other1._baseMessage;
  _id = other1._id;
  _queueCount = other1._queueCount;
  _rate = other1._rate;
  _requestId = other1._requestId;
  _requestIdCount = other1._requestIdCount;
  _aTime = other1._aTime;
  _userMessageId = other1._userMessageId;
  return *this;
}
void QueueData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueueData(";
  out << "_baseMessage=" << to_string(_baseMessage);
  out << ", " << "_id=" << to_string(_id);
  out << ", " << "_queueCount=" << to_string(_queueCount);
  out << ", " << "_rate=" << to_string(_rate);
  out << ", " << "_requestId=" << to_string(_requestId);
  out << ", " << "_requestIdCount=" << to_string(_requestIdCount);
  out << ", " << "_aTime=" << to_string(_aTime);
  out << ", " << "_userMessageId=" << to_string(_userMessageId);
  out << ")";
}

}}}} // namespace

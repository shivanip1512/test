/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MCDeleteSchedule_TYPES_H
#define MCDeleteSchedule_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class MCDeleteSchedule {
 public:

  static const char* ascii_fingerprint; // = "B7CC136C0F37E2CBD102A8E8A5B37C46";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xCC,0x13,0x6C,0x0F,0x37,0xE2,0xCB,0xD1,0x02,0xA8,0xE8,0xA5,0xB3,0x7C,0x46};

  MCDeleteSchedule() : _id(0) {
  }

  virtual ~MCDeleteSchedule() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__id(const int32_t val) {
    _id = val;
  }

  bool operator == (const MCDeleteSchedule & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const MCDeleteSchedule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCDeleteSchedule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MCDeleteSchedule &a, MCDeleteSchedule &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMDynamicTriggerData_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* LMDynamicTriggerData::ascii_fingerprint = "17C89532F0C88654DC1EC9417C0C3C93";
const uint8_t LMDynamicTriggerData::binary_fingerprint[16] = {0x17,0xC8,0x95,0x32,0xF0,0xC8,0x86,0x54,0xDC,0x1E,0xC9,0x41,0x7C,0x0C,0x3C,0x93};

uint32_t LMDynamicTriggerData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__triggerNumber = false;
  bool isset__pointValue = false;
  bool isset__lastPointValueTimestamp = false;
  bool isset__normalState = false;
  bool isset__threshold = false;
  bool isset__peakPointValue = false;
  bool isset__lastPeakPointValueTimestamp = false;
  bool isset__projectedPointValue = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_triggerNumber);
          isset__triggerNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_pointValue);
          isset__pointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastPointValueTimestamp);
          isset__lastPointValueTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_normalState);
          isset__normalState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_threshold);
          isset__threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_peakPointValue);
          isset__peakPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastPeakPointValueTimestamp);
          isset__lastPeakPointValueTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_projectedPointValue);
          isset__projectedPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__triggerNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastPointValueTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__normalState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__threshold)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__peakPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastPeakPointValueTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__projectedPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMDynamicTriggerData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LMDynamicTriggerData");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_triggerNumber", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_triggerNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pointValue", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->_pointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastPointValueTimestamp", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_lastPointValueTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_normalState", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_normalState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_threshold", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_peakPointValue", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->_peakPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastPeakPointValueTimestamp", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->_lastPeakPointValueTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_projectedPointValue", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->_projectedPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMDynamicTriggerData &a, LMDynamicTriggerData &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._triggerNumber, b._triggerNumber);
  swap(a._pointValue, b._pointValue);
  swap(a._lastPointValueTimestamp, b._lastPointValueTimestamp);
  swap(a._normalState, b._normalState);
  swap(a._threshold, b._threshold);
  swap(a._peakPointValue, b._peakPointValue);
  swap(a._lastPeakPointValueTimestamp, b._lastPeakPointValueTimestamp);
  swap(a._projectedPointValue, b._projectedPointValue);
}

}}}} // namespace

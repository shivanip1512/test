/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LMDynamicTriggerData_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


LMDynamicTriggerData::~LMDynamicTriggerData() noexcept {
}


void LMDynamicTriggerData::__set__paoId(const int32_t val) {
  this->_paoId = val;
}

void LMDynamicTriggerData::__set__triggerNumber(const int32_t val) {
  this->_triggerNumber = val;
}

void LMDynamicTriggerData::__set__pointValue(const double val) {
  this->_pointValue = val;
}

void LMDynamicTriggerData::__set__lastPointValueTimestamp(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_lastPointValueTimestamp = val;
}

void LMDynamicTriggerData::__set__normalState(const int32_t val) {
  this->_normalState = val;
}

void LMDynamicTriggerData::__set__threshold(const double val) {
  this->_threshold = val;
}

void LMDynamicTriggerData::__set__peakPointValue(const double val) {
  this->_peakPointValue = val;
}

void LMDynamicTriggerData::__set__lastPeakPointValueTimestamp(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
  this->_lastPeakPointValueTimestamp = val;
}

void LMDynamicTriggerData::__set__projectedPointValue(const double val) {
  this->_projectedPointValue = val;
}
std::ostream& operator<<(std::ostream& out, const LMDynamicTriggerData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LMDynamicTriggerData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__paoId = false;
  bool isset__triggerNumber = false;
  bool isset__pointValue = false;
  bool isset__lastPointValueTimestamp = false;
  bool isset__normalState = false;
  bool isset__threshold = false;
  bool isset__peakPointValue = false;
  bool isset__lastPeakPointValueTimestamp = false;
  bool isset__projectedPointValue = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_paoId);
          isset__paoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_triggerNumber);
          isset__triggerNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_pointValue);
          isset__pointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastPointValueTimestamp);
          isset__lastPointValueTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_normalState);
          isset__normalState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_threshold);
          isset__threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_peakPointValue);
          isset__peakPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lastPeakPointValueTimestamp);
          isset__lastPeakPointValueTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_projectedPointValue);
          isset__projectedPointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__paoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__triggerNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastPointValueTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__normalState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__threshold)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__peakPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__lastPeakPointValueTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__projectedPointValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LMDynamicTriggerData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LMDynamicTriggerData");

  xfer += oprot->writeFieldBegin("_paoId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_paoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_triggerNumber", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_triggerNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pointValue", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->_pointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastPointValueTimestamp", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_lastPointValueTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_normalState", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_normalState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_threshold", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_peakPointValue", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->_peakPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lastPeakPointValueTimestamp", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->_lastPeakPointValueTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_projectedPointValue", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->_projectedPointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LMDynamicTriggerData &a, LMDynamicTriggerData &b) {
  using ::std::swap;
  swap(a._paoId, b._paoId);
  swap(a._triggerNumber, b._triggerNumber);
  swap(a._pointValue, b._pointValue);
  swap(a._lastPointValueTimestamp, b._lastPointValueTimestamp);
  swap(a._normalState, b._normalState);
  swap(a._threshold, b._threshold);
  swap(a._peakPointValue, b._peakPointValue);
  swap(a._lastPeakPointValueTimestamp, b._lastPeakPointValueTimestamp);
  swap(a._projectedPointValue, b._projectedPointValue);
}

LMDynamicTriggerData::LMDynamicTriggerData(const LMDynamicTriggerData& other0) noexcept {
  _paoId = other0._paoId;
  _triggerNumber = other0._triggerNumber;
  _pointValue = other0._pointValue;
  _lastPointValueTimestamp = other0._lastPointValueTimestamp;
  _normalState = other0._normalState;
  _threshold = other0._threshold;
  _peakPointValue = other0._peakPointValue;
  _lastPeakPointValueTimestamp = other0._lastPeakPointValueTimestamp;
  _projectedPointValue = other0._projectedPointValue;
}
LMDynamicTriggerData& LMDynamicTriggerData::operator=(const LMDynamicTriggerData& other1) noexcept {
  _paoId = other1._paoId;
  _triggerNumber = other1._triggerNumber;
  _pointValue = other1._pointValue;
  _lastPointValueTimestamp = other1._lastPointValueTimestamp;
  _normalState = other1._normalState;
  _threshold = other1._threshold;
  _peakPointValue = other1._peakPointValue;
  _lastPeakPointValueTimestamp = other1._lastPeakPointValueTimestamp;
  _projectedPointValue = other1._projectedPointValue;
  return *this;
}
void LMDynamicTriggerData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LMDynamicTriggerData(";
  out << "_paoId=" << to_string(_paoId);
  out << ", " << "_triggerNumber=" << to_string(_triggerNumber);
  out << ", " << "_pointValue=" << to_string(_pointValue);
  out << ", " << "_lastPointValueTimestamp=" << to_string(_lastPointValueTimestamp);
  out << ", " << "_normalState=" << to_string(_normalState);
  out << ", " << "_threshold=" << to_string(_threshold);
  out << ", " << "_peakPointValue=" << to_string(_peakPointValue);
  out << ", " << "_lastPeakPointValueTimestamp=" << to_string(_lastPeakPointValueTimestamp);
  out << ", " << "_projectedPointValue=" << to_string(_projectedPointValue);
  out << ")";
}

}}}} // namespace

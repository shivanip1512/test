/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Return_TYPES_H
#define Return_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Multi_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class Return {
 public:

  static const char* ascii_fingerprint; // = "AB8D59C027B300D9020843804BAB1FA4";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x8D,0x59,0xC0,0x27,0xB3,0x00,0xD9,0x02,0x08,0x43,0x80,0x4B,0xAB,0x1F,0xA4};

  Return() : _deviceId(0), _commandString(), _resultString(), _status(0), _routeId(0), _macroOffset(0), _attemptNum(0), _groupMessageId(0), _userMessageId(0), _expectMore(0) {
  }

  virtual ~Return() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Multi _baseMessage;
  int32_t _deviceId;
  std::string _commandString;
  std::string _resultString;
  int32_t _status;
  int32_t _routeId;
  int32_t _macroOffset;
  int32_t _attemptNum;
  int32_t _groupMessageId;
  int32_t _userMessageId;
  bool _expectMore;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Multi& val) {
    _baseMessage = val;
  }

  void __set__deviceId(const int32_t val) {
    _deviceId = val;
  }

  void __set__commandString(const std::string& val) {
    _commandString = val;
  }

  void __set__resultString(const std::string& val) {
    _resultString = val;
  }

  void __set__status(const int32_t val) {
    _status = val;
  }

  void __set__routeId(const int32_t val) {
    _routeId = val;
  }

  void __set__macroOffset(const int32_t val) {
    _macroOffset = val;
  }

  void __set__attemptNum(const int32_t val) {
    _attemptNum = val;
  }

  void __set__groupMessageId(const int32_t val) {
    _groupMessageId = val;
  }

  void __set__userMessageId(const int32_t val) {
    _userMessageId = val;
  }

  void __set__expectMore(const bool val) {
    _expectMore = val;
  }

  bool operator == (const Return & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_deviceId == rhs._deviceId))
      return false;
    if (!(_commandString == rhs._commandString))
      return false;
    if (!(_resultString == rhs._resultString))
      return false;
    if (!(_status == rhs._status))
      return false;
    if (!(_routeId == rhs._routeId))
      return false;
    if (!(_macroOffset == rhs._macroOffset))
      return false;
    if (!(_attemptNum == rhs._attemptNum))
      return false;
    if (!(_groupMessageId == rhs._groupMessageId))
      return false;
    if (!(_userMessageId == rhs._userMessageId))
      return false;
    if (!(_expectMore == rhs._expectMore))
      return false;
    return true;
  }
  bool operator != (const Return &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Return & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Return &a, Return &b);

}}}} // namespace

#endif

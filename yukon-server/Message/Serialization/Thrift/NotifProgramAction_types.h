/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotifProgramAction_TYPES_H
#define NotifProgramAction_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class NotifProgramAction;


class NotifProgramAction : public virtual ::apache::thrift::TBase {
 public:

  NotifProgramAction(const NotifProgramAction&);
  NotifProgramAction& operator=(const NotifProgramAction&);
  NotifProgramAction() noexcept
                     : _programId(0),
                       _eventDisplayName(),
                       _action(),
                       _startTime(0),
                       _stopTime(0),
                       _notificationTime(0) {
  }

  virtual ~NotifProgramAction() noexcept;
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _programId;
  std::string _eventDisplayName;
  std::string _action;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _startTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _stopTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _notificationTime;
  std::vector<int32_t>  _customerIds;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__programId(const int32_t val);

  void __set__eventDisplayName(const std::string& val);

  void __set__action(const std::string& val);

  void __set__startTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__stopTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__notificationTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__customerIds(const std::vector<int32_t> & val);

  bool operator == (const NotifProgramAction & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_programId == rhs._programId))
      return false;
    if (!(_eventDisplayName == rhs._eventDisplayName))
      return false;
    if (!(_action == rhs._action))
      return false;
    if (!(_startTime == rhs._startTime))
      return false;
    if (!(_stopTime == rhs._stopTime))
      return false;
    if (!(_notificationTime == rhs._notificationTime))
      return false;
    if (!(_customerIds == rhs._customerIds))
      return false;
    return true;
  }
  bool operator != (const NotifProgramAction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotifProgramAction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotifProgramAction &a, NotifProgramAction &b);

std::ostream& operator<<(std::ostream& out, const NotifProgramAction& obj);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotifProgramAction_TYPES_H
#define NotifProgramAction_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class NotifProgramAction {
 public:

  static const char* ascii_fingerprint; // = "864ED778980289D8985AA311617B6A39";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x4E,0xD7,0x78,0x98,0x02,0x89,0xD8,0x98,0x5A,0xA3,0x11,0x61,0x7B,0x6A,0x39};

  NotifProgramAction() : _programId(0), _eventDisplayName(), _action(), _startTime(0), _stopTime(0), _notificationTime(0) {
  }

  virtual ~NotifProgramAction() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _programId;
  std::string _eventDisplayName;
  std::string _action;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _startTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _stopTime;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _notificationTime;
  std::vector<int32_t>  _customerIds;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__programId(const int32_t val) {
    _programId = val;
  }

  void __set__eventDisplayName(const std::string& val) {
    _eventDisplayName = val;
  }

  void __set__action(const std::string& val) {
    _action = val;
  }

  void __set__startTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _startTime = val;
  }

  void __set__stopTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _stopTime = val;
  }

  void __set__notificationTime(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _notificationTime = val;
  }

  void __set__customerIds(const std::vector<int32_t> & val) {
    _customerIds = val;
  }

  bool operator == (const NotifProgramAction & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_programId == rhs._programId))
      return false;
    if (!(_eventDisplayName == rhs._eventDisplayName))
      return false;
    if (!(_action == rhs._action))
      return false;
    if (!(_startTime == rhs._startTime))
      return false;
    if (!(_stopTime == rhs._stopTime))
      return false;
    if (!(_notificationTime == rhs._notificationTime))
      return false;
    if (!(_customerIds == rhs._customerIds))
      return false;
    return true;
  }
  bool operator != (const NotifProgramAction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotifProgramAction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotifProgramAction &a, NotifProgramAction &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EdgeDrDataNotification_TYPES_H
#define EdgeDrDataNotification_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "EdgeDrError_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class EdgeDrDataNotification;

typedef struct _EdgeDrDataNotification__isset {
  _EdgeDrDataNotification__isset() : payload(false), e2eId(false), error(false) {}
  bool payload :1;
  bool e2eId :1;
  bool error :1;
} _EdgeDrDataNotification__isset;

class EdgeDrDataNotification : public virtual ::apache::thrift::TBase {
 public:

  EdgeDrDataNotification(const EdgeDrDataNotification&);
  EdgeDrDataNotification& operator=(const EdgeDrDataNotification&);
  EdgeDrDataNotification() : paoId(0), payload(), e2eId() {
  }

  virtual ~EdgeDrDataNotification() noexcept;
  int32_t paoId;
  std::string payload;
  std::string e2eId;
   ::Cti::Messaging::Serialization::Thrift::EdgeDrError error;

  _EdgeDrDataNotification__isset __isset;

  void __set_paoId(const int32_t val);

  void __set_payload(const std::string& val);

  void __set_e2eId(const std::string& val);

  void __set_error(const  ::Cti::Messaging::Serialization::Thrift::EdgeDrError& val);

  bool operator == (const EdgeDrDataNotification & rhs) const
  {
    if (!(paoId == rhs.paoId))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    if (__isset.e2eId != rhs.__isset.e2eId)
      return false;
    else if (__isset.e2eId && !(e2eId == rhs.e2eId))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EdgeDrDataNotification &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeDrDataNotification & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EdgeDrDataNotification &a, EdgeDrDataNotification &b);

std::ostream& operator<<(std::ostream& out, const EdgeDrDataNotification& obj);

}}}} // namespace

#endif

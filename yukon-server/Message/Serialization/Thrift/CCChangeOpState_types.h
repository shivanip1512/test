/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCChangeOpState_TYPES_H
#define CCChangeOpState_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "CCItemCommand_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class CCChangeOpState;


class CCChangeOpState : public virtual ::apache::thrift::TBase {
 public:

  CCChangeOpState(const CCChangeOpState&);
  CCChangeOpState& operator=(const CCChangeOpState&);
  CCChangeOpState() noexcept
                  : _opStateName() {
  }

  virtual ~CCChangeOpState() noexcept;
   ::Cti::Messaging::Serialization::Thrift::CCItemCommand _baseMessage;
  std::string _opStateName;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCItemCommand& val);

  void __set__opStateName(const std::string& val);

  bool operator == (const CCChangeOpState & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_opStateName == rhs._opStateName))
      return false;
    return true;
  }
  bool operator != (const CCChangeOpState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCChangeOpState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCChangeOpState &a, CCChangeOpState &b);

std::ostream& operator<<(std::ostream& out, const CCChangeOpState& obj);

}}}} // namespace

#endif

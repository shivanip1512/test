/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCChangeOpState_TYPES_H
#define CCChangeOpState_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "CCItemCommand_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCChangeOpState {
 public:

  static const char* ascii_fingerprint; // = "615ECF08FC281FF080A895A1DE6B3F46";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x5E,0xCF,0x08,0xFC,0x28,0x1F,0xF0,0x80,0xA8,0x95,0xA1,0xDE,0x6B,0x3F,0x46};

  CCChangeOpState() : _opStateName() {
  }

  virtual ~CCChangeOpState() throw() {}

   ::Cti::Messaging::Serialization::Thrift::CCItemCommand _baseMessage;
  std::string _opStateName;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::CCItemCommand& val) {
    _baseMessage = val;
  }

  void __set__opStateName(const std::string& val) {
    _opStateName = val;
  }

  bool operator == (const CCChangeOpState & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_opStateName == rhs._opStateName))
      return false;
    return true;
  }
  bool operator != (const CCChangeOpState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCChangeOpState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCChangeOpState &a, CCChangeOpState &b);

}}}} // namespace

#endif

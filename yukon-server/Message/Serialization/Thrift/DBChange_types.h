/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DBChange_TYPES_H
#define DBChange_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class DBChange {
 public:

  static const char* ascii_fingerprint; // = "42A8D90C512A98FAA0DEABCF1CA16420";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0xA8,0xD9,0x0C,0x51,0x2A,0x98,0xFA,0xA0,0xDE,0xAB,0xCF,0x1C,0xA1,0x64,0x20};

  DBChange() : _id(0), _database(0), _category(), _objecttype(), _typeofchange(0) {
  }

  virtual ~DBChange() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _id;
  int32_t _database;
  std::string _category;
  std::string _objecttype;
  int32_t _typeofchange;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__id(const int32_t val) {
    _id = val;
  }

  void __set__database(const int32_t val) {
    _database = val;
  }

  void __set__category(const std::string& val) {
    _category = val;
  }

  void __set__objecttype(const std::string& val) {
    _objecttype = val;
  }

  void __set__typeofchange(const int32_t val) {
    _typeofchange = val;
  }

  bool operator == (const DBChange & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_id == rhs._id))
      return false;
    if (!(_database == rhs._database))
      return false;
    if (!(_category == rhs._category))
      return false;
    if (!(_objecttype == rhs._objecttype))
      return false;
    if (!(_typeofchange == rhs._typeofchange))
      return false;
    return true;
  }
  bool operator != (const DBChange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBChange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DBChange &a, DBChange &b);

}}}} // namespace

#endif

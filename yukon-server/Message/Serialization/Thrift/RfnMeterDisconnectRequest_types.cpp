/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RfnMeterDisconnectRequest_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

int _kRfnMeterDisconnectCmdTypeValues[] = {
  RfnMeterDisconnectCmdType::ARM,
  RfnMeterDisconnectCmdType::RESUME,
  RfnMeterDisconnectCmdType::TERMINATE,
  RfnMeterDisconnectCmdType::QUERY
};
const char* _kRfnMeterDisconnectCmdTypeNames[] = {
  "ARM",
  "RESUME",
  "TERMINATE",
  "QUERY"
};
const std::map<int, const char*> _RfnMeterDisconnectCmdType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kRfnMeterDisconnectCmdTypeValues, _kRfnMeterDisconnectCmdTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RfnMeterDisconnectCmdType::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnMeterDisconnectCmdType_VALUES_TO_NAMES.find(val);
  if (it != _RfnMeterDisconnectCmdType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const RfnMeterDisconnectCmdType::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnMeterDisconnectCmdType_VALUES_TO_NAMES.find(val);
  if (it != _RfnMeterDisconnectCmdType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kRfnMeterDisconnectInitialReplyTypeValues[] = {
  RfnMeterDisconnectInitialReplyType::OK,
  RfnMeterDisconnectInitialReplyType::NO_NODE,
  RfnMeterDisconnectInitialReplyType::NO_GATEWAY,
  RfnMeterDisconnectInitialReplyType::FAILURE,
  RfnMeterDisconnectInitialReplyType::TIMEOUT
};
const char* _kRfnMeterDisconnectInitialReplyTypeNames[] = {
  "OK",
  "NO_NODE",
  "NO_GATEWAY",
  "FAILURE",
  "TIMEOUT"
};
const std::map<int, const char*> _RfnMeterDisconnectInitialReplyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kRfnMeterDisconnectInitialReplyTypeValues, _kRfnMeterDisconnectInitialReplyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RfnMeterDisconnectInitialReplyType::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnMeterDisconnectInitialReplyType_VALUES_TO_NAMES.find(val);
  if (it != _RfnMeterDisconnectInitialReplyType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const RfnMeterDisconnectInitialReplyType::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnMeterDisconnectInitialReplyType_VALUES_TO_NAMES.find(val);
  if (it != _RfnMeterDisconnectInitialReplyType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kRfnMeterDisconnectConfirmationReplyTypeValues[] = {
  RfnMeterDisconnectConfirmationReplyType::SUCCESS,
  RfnMeterDisconnectConfirmationReplyType::FAILURE,
  RfnMeterDisconnectConfirmationReplyType::FAILURE_REJECTED_COMMAND_LOAD_SIDE_VOLTAGE_HIGHER_THAN_THRESHOLD,
  RfnMeterDisconnectConfirmationReplyType::FAILURE_LOAD_SIDE_VOLTAGE_DETECTED_AFTER_DISCONNECT,
  RfnMeterDisconnectConfirmationReplyType::FAILURE_NO_LOAD_SIDE_VOLTAGE_DETECTED_AFTER_CONNECT,
  RfnMeterDisconnectConfirmationReplyType::FAILED_UNEXPECTED_STATUS,
  RfnMeterDisconnectConfirmationReplyType::NOT_SUPPORTED,
  RfnMeterDisconnectConfirmationReplyType::NETWORK_TIMEOUT,
  RfnMeterDisconnectConfirmationReplyType::TIMEOUT
};
const char* _kRfnMeterDisconnectConfirmationReplyTypeNames[] = {
  "SUCCESS",
  "FAILURE",
  "FAILURE_REJECTED_COMMAND_LOAD_SIDE_VOLTAGE_HIGHER_THAN_THRESHOLD",
  "FAILURE_LOAD_SIDE_VOLTAGE_DETECTED_AFTER_DISCONNECT",
  "FAILURE_NO_LOAD_SIDE_VOLTAGE_DETECTED_AFTER_CONNECT",
  "FAILED_UNEXPECTED_STATUS",
  "NOT_SUPPORTED",
  "NETWORK_TIMEOUT",
  "TIMEOUT"
};
const std::map<int, const char*> _RfnMeterDisconnectConfirmationReplyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kRfnMeterDisconnectConfirmationReplyTypeValues, _kRfnMeterDisconnectConfirmationReplyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RfnMeterDisconnectConfirmationReplyType::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnMeterDisconnectConfirmationReplyType_VALUES_TO_NAMES.find(val);
  if (it != _RfnMeterDisconnectConfirmationReplyType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const RfnMeterDisconnectConfirmationReplyType::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnMeterDisconnectConfirmationReplyType_VALUES_TO_NAMES.find(val);
  if (it != _RfnMeterDisconnectConfirmationReplyType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kRfnMeterDisconnectStateValues[] = {
  RfnMeterDisconnectState::UNKNOWN,
  RfnMeterDisconnectState::CONNECTED,
  RfnMeterDisconnectState::DISCONNECTED,
  RfnMeterDisconnectState::ARMED,
  RfnMeterDisconnectState::DISCONNECTED_DEMAND_THRESHOLD_ACTIVE,
  RfnMeterDisconnectState::CONNECTED_DEMAND_THRESHOLD_ACTIVE,
  RfnMeterDisconnectState::DISCONNECTED_CYCLING_ACTIVE,
  RfnMeterDisconnectState::CONNECTED_CYCLING_ACTIVE
};
const char* _kRfnMeterDisconnectStateNames[] = {
  "UNKNOWN",
  "CONNECTED",
  "DISCONNECTED",
  "ARMED",
  "DISCONNECTED_DEMAND_THRESHOLD_ACTIVE",
  "CONNECTED_DEMAND_THRESHOLD_ACTIVE",
  "DISCONNECTED_CYCLING_ACTIVE",
  "CONNECTED_CYCLING_ACTIVE"
};
const std::map<int, const char*> _RfnMeterDisconnectState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kRfnMeterDisconnectStateValues, _kRfnMeterDisconnectStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RfnMeterDisconnectState::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnMeterDisconnectState_VALUES_TO_NAMES.find(val);
  if (it != _RfnMeterDisconnectState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const RfnMeterDisconnectState::type& val) {
  std::map<int, const char*>::const_iterator it = _RfnMeterDisconnectState_VALUES_TO_NAMES.find(val);
  if (it != _RfnMeterDisconnectState_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


RfnMeterDisconnectRequest::~RfnMeterDisconnectRequest() noexcept {
}


void RfnMeterDisconnectRequest::__set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::Rfn::RfnIdentifier& val) {
  this->rfnIdentifier = val;
}

void RfnMeterDisconnectRequest::__set_action(const RfnMeterDisconnectCmdType::type val) {
  this->action = val;
}
std::ostream& operator<<(std::ostream& out, const RfnMeterDisconnectRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnMeterDisconnectRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rfnIdentifier = false;
  bool isset_action = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rfnIdentifier.read(iprot);
          isset_rfnIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->action = (RfnMeterDisconnectCmdType::type)ecast0;
          isset_action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rfnIdentifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnMeterDisconnectRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnMeterDisconnectRequest");

  xfer += oprot->writeFieldBegin("rfnIdentifier", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->rfnIdentifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->action);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnMeterDisconnectRequest &a, RfnMeterDisconnectRequest &b) {
  using ::std::swap;
  swap(a.rfnIdentifier, b.rfnIdentifier);
  swap(a.action, b.action);
}

RfnMeterDisconnectRequest::RfnMeterDisconnectRequest(const RfnMeterDisconnectRequest& other1) {
  rfnIdentifier = other1.rfnIdentifier;
  action = other1.action;
}
RfnMeterDisconnectRequest& RfnMeterDisconnectRequest::operator=(const RfnMeterDisconnectRequest& other2) {
  rfnIdentifier = other2.rfnIdentifier;
  action = other2.action;
  return *this;
}
void RfnMeterDisconnectRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnMeterDisconnectRequest(";
  out << "rfnIdentifier=" << to_string(rfnIdentifier);
  out << ", " << "action=" << to_string(action);
  out << ")";
}


RfnMeterDisconnectInitialReply::~RfnMeterDisconnectInitialReply() noexcept {
}


void RfnMeterDisconnectInitialReply::__set_replyType(const RfnMeterDisconnectInitialReplyType::type val) {
  this->replyType = val;
}
std::ostream& operator<<(std::ostream& out, const RfnMeterDisconnectInitialReply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnMeterDisconnectInitialReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_replyType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->replyType = (RfnMeterDisconnectInitialReplyType::type)ecast3;
          isset_replyType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_replyType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnMeterDisconnectInitialReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnMeterDisconnectInitialReply");

  xfer += oprot->writeFieldBegin("replyType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->replyType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnMeterDisconnectInitialReply &a, RfnMeterDisconnectInitialReply &b) {
  using ::std::swap;
  swap(a.replyType, b.replyType);
}

RfnMeterDisconnectInitialReply::RfnMeterDisconnectInitialReply(const RfnMeterDisconnectInitialReply& other4) {
  replyType = other4.replyType;
}
RfnMeterDisconnectInitialReply& RfnMeterDisconnectInitialReply::operator=(const RfnMeterDisconnectInitialReply& other5) {
  replyType = other5.replyType;
  return *this;
}
void RfnMeterDisconnectInitialReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnMeterDisconnectInitialReply(";
  out << "replyType=" << to_string(replyType);
  out << ")";
}


RfnMeterDisconnectConfirmationReply::~RfnMeterDisconnectConfirmationReply() noexcept {
}


void RfnMeterDisconnectConfirmationReply::__set_replyType(const RfnMeterDisconnectConfirmationReplyType::type val) {
  this->replyType = val;
}

void RfnMeterDisconnectConfirmationReply::__set_state(const RfnMeterDisconnectState::type val) {
  this->state = val;
}
std::ostream& operator<<(std::ostream& out, const RfnMeterDisconnectConfirmationReply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RfnMeterDisconnectConfirmationReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_replyType = false;
  bool isset_state = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->replyType = (RfnMeterDisconnectConfirmationReplyType::type)ecast6;
          isset_replyType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->state = (RfnMeterDisconnectState::type)ecast7;
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_replyType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RfnMeterDisconnectConfirmationReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RfnMeterDisconnectConfirmationReply");

  xfer += oprot->writeFieldBegin("replyType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->replyType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RfnMeterDisconnectConfirmationReply &a, RfnMeterDisconnectConfirmationReply &b) {
  using ::std::swap;
  swap(a.replyType, b.replyType);
  swap(a.state, b.state);
}

RfnMeterDisconnectConfirmationReply::RfnMeterDisconnectConfirmationReply(const RfnMeterDisconnectConfirmationReply& other8) {
  replyType = other8.replyType;
  state = other8.state;
}
RfnMeterDisconnectConfirmationReply& RfnMeterDisconnectConfirmationReply::operator=(const RfnMeterDisconnectConfirmationReply& other9) {
  replyType = other9.replyType;
  state = other9.state;
  return *this;
}
void RfnMeterDisconnectConfirmationReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RfnMeterDisconnectConfirmationReply(";
  out << "replyType=" << to_string(replyType);
  out << ", " << "state=" << to_string(state);
  out << ")";
}

}}}} // namespace

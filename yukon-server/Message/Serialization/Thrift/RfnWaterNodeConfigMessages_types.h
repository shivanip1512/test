/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RfnWaterNodeConfigMessages_TYPES_H
#define RfnWaterNodeConfigMessages_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"
#include "RfnE2eData_types.h"
#include "NetworkManagerMessaging_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

struct SetChannelConfigReplyType {
  enum type {
    SUCCESS = 0,
    INVALID_DEVICE = 1,
    NO_NODE = 2,
    NO_GATEWAY = 3,
    FAILURE = 4
  };
};

extern const std::map<int, const char*> _SetChannelConfigReplyType_VALUES_TO_NAMES;

struct GetChannelConfigReplyType {
  enum type {
    SUCCESS = 0,
    INVALID_DEVICE = 1,
    NO_NODE = 2,
    FAILURE = 3
  };
};

extern const std::map<int, const char*> _GetChannelConfigReplyType_VALUES_TO_NAMES;

typedef struct _RfnSetChannelConfigRequest__isset {
  _RfnSetChannelConfigRequest__isset() : header(false) {}
  bool header;
} _RfnSetChannelConfigRequest__isset;

class RfnSetChannelConfigRequest {
 public:

  static const char* ascii_fingerprint; // = "56E587D1464A4FDFF7598B7D9D655AB9";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xE5,0x87,0xD1,0x46,0x4A,0x4F,0xDF,0xF7,0x59,0x8B,0x7D,0x9D,0x65,0x5A,0xB9};

  RfnSetChannelConfigRequest() : reportingInterval(0), recordingInterval(0) {
  }

  virtual ~RfnSetChannelConfigRequest() throw() {}

   ::Cti::Messaging::Serialization::Thrift::RfnIdentifier rfnIdentifier;
  int32_t reportingInterval;
  int32_t recordingInterval;
   ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader header;

  _RfnSetChannelConfigRequest__isset __isset;

  void __set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
    rfnIdentifier = val;
  }

  void __set_reportingInterval(const int32_t val) {
    reportingInterval = val;
  }

  void __set_recordingInterval(const int32_t val) {
    recordingInterval = val;
  }

  void __set_header(const  ::Cti::Messaging::Serialization::Thrift::NetworkManagerRequestHeader& val) {
    header = val;
    __isset.header = true;
  }

  bool operator == (const RfnSetChannelConfigRequest & rhs) const
  {
    if (!(rfnIdentifier == rhs.rfnIdentifier))
      return false;
    if (!(reportingInterval == rhs.reportingInterval))
      return false;
    if (!(recordingInterval == rhs.recordingInterval))
      return false;
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const RfnSetChannelConfigRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnSetChannelConfigRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnSetChannelConfigRequest &a, RfnSetChannelConfigRequest &b);


class RfnSetChannelConfigReply {
 public:

  static const char* ascii_fingerprint; // = "9686679C94D43D75F2B35A0BED2E4003";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x86,0x67,0x9C,0x94,0xD4,0x3D,0x75,0xF2,0xB3,0x5A,0x0B,0xED,0x2E,0x40,0x03};

  RfnSetChannelConfigReply() : reply((SetChannelConfigReplyType::type)0) {
  }

  virtual ~RfnSetChannelConfigReply() throw() {}

  SetChannelConfigReplyType::type reply;
   ::Cti::Messaging::Serialization::Thrift::RfnIdentifier rfnIdentifier;

  void __set_reply(const SetChannelConfigReplyType::type val) {
    reply = val;
  }

  void __set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
    rfnIdentifier = val;
  }

  bool operator == (const RfnSetChannelConfigReply & rhs) const
  {
    if (!(reply == rhs.reply))
      return false;
    if (!(rfnIdentifier == rhs.rfnIdentifier))
      return false;
    return true;
  }
  bool operator != (const RfnSetChannelConfigReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnSetChannelConfigReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnSetChannelConfigReply &a, RfnSetChannelConfigReply &b);


class RfnGetChannelConfigRequest {
 public:

  static const char* ascii_fingerprint; // = "636807D016867BC3A79FD54005E0677E";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0x68,0x07,0xD0,0x16,0x86,0x7B,0xC3,0xA7,0x9F,0xD5,0x40,0x05,0xE0,0x67,0x7E};

  RfnGetChannelConfigRequest() {
  }

  virtual ~RfnGetChannelConfigRequest() throw() {}

   ::Cti::Messaging::Serialization::Thrift::RfnIdentifier rfnIdentifier;

  void __set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
    rfnIdentifier = val;
  }

  bool operator == (const RfnGetChannelConfigRequest & rhs) const
  {
    if (!(rfnIdentifier == rhs.rfnIdentifier))
      return false;
    return true;
  }
  bool operator != (const RfnGetChannelConfigRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnGetChannelConfigRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnGetChannelConfigRequest &a, RfnGetChannelConfigRequest &b);


class ChannelInfo {
 public:

  static const char* ascii_fingerprint; // = "ED707DF9DF573A003C315AB90B20F10D";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0x70,0x7D,0xF9,0xDF,0x57,0x3A,0x00,0x3C,0x31,0x5A,0xB9,0x0B,0x20,0xF1,0x0D};

  ChannelInfo() : UOM(), channelNum(0), enabled(0) {
  }

  virtual ~ChannelInfo() throw() {}

  std::string UOM;
  std::set<std::string>  uomModifier;
  int16_t channelNum;
  bool enabled;

  void __set_UOM(const std::string& val) {
    UOM = val;
  }

  void __set_uomModifier(const std::set<std::string> & val) {
    uomModifier = val;
  }

  void __set_channelNum(const int16_t val) {
    channelNum = val;
  }

  void __set_enabled(const bool val) {
    enabled = val;
  }

  bool operator == (const ChannelInfo & rhs) const
  {
    if (!(UOM == rhs.UOM))
      return false;
    if (!(uomModifier == rhs.uomModifier))
      return false;
    if (!(channelNum == rhs.channelNum))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const ChannelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChannelInfo &a, ChannelInfo &b);


class RfnGetChannelConfigReply {
 public:

  static const char* ascii_fingerprint; // = "5F6DE82FEF45DD94FACCB776E3968FEA";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x6D,0xE8,0x2F,0xEF,0x45,0xDD,0x94,0xFA,0xCC,0xB7,0x76,0xE3,0x96,0x8F,0xEA};

  RfnGetChannelConfigReply() : timestamp(0), recordingInterval(0), reportingInterval(0), reply((GetChannelConfigReplyType::type)0) {
  }

  virtual ~RfnGetChannelConfigReply() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Timestamp timestamp;
  std::set<ChannelInfo>  channelInfo;
   ::Cti::Messaging::Serialization::Thrift::RfnIdentifier rfnIdentifier;
  int32_t recordingInterval;
  int32_t reportingInterval;
  GetChannelConfigReplyType::type reply;

  void __set_timestamp(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    timestamp = val;
  }

  void __set_channelInfo(const std::set<ChannelInfo> & val) {
    channelInfo = val;
  }

  void __set_rfnIdentifier(const  ::Cti::Messaging::Serialization::Thrift::RfnIdentifier& val) {
    rfnIdentifier = val;
  }

  void __set_recordingInterval(const int32_t val) {
    recordingInterval = val;
  }

  void __set_reportingInterval(const int32_t val) {
    reportingInterval = val;
  }

  void __set_reply(const GetChannelConfigReplyType::type val) {
    reply = val;
  }

  bool operator == (const RfnGetChannelConfigReply & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(channelInfo == rhs.channelInfo))
      return false;
    if (!(rfnIdentifier == rhs.rfnIdentifier))
      return false;
    if (!(recordingInterval == rhs.recordingInterval))
      return false;
    if (!(reportingInterval == rhs.reportingInterval))
      return false;
    if (!(reply == rhs.reply))
      return false;
    return true;
  }
  bool operator != (const RfnGetChannelConfigReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfnGetChannelConfigReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfnGetChannelConfigReply &a, RfnGetChannelConfigReply &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCServerResponse_TYPES_H
#define CCServerResponse_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class CCServerResponse;


class CCServerResponse : public virtual ::apache::thrift::TBase {
 public:

  CCServerResponse(const CCServerResponse&);
  CCServerResponse& operator=(const CCServerResponse&);
  CCServerResponse() : _messageId(0), _responseType(0), _response() {
  }

  virtual ~CCServerResponse() throw();
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _messageId;
  int32_t _responseType;
  std::string _response;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__messageId(const int32_t val);

  void __set__responseType(const int32_t val);

  void __set__response(const std::string& val);

  bool operator == (const CCServerResponse & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_messageId == rhs._messageId))
      return false;
    if (!(_responseType == rhs._responseType))
      return false;
    if (!(_response == rhs._response))
      return false;
    return true;
  }
  bool operator != (const CCServerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCServerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CCServerResponse &a, CCServerResponse &b);

std::ostream& operator<<(std::ostream& out, const CCServerResponse& obj);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCServerResponse_TYPES_H
#define CCServerResponse_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class CCServerResponse {
 public:

  static const char* ascii_fingerprint; // = "E3380CF10121A743F83EB283E2681EDE";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x38,0x0C,0xF1,0x01,0x21,0xA7,0x43,0xF8,0x3E,0xB2,0x83,0xE2,0x68,0x1E,0xDE};

  CCServerResponse() : _messageId(0), _responseType(0), _response() {
  }

  virtual ~CCServerResponse() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _messageId;
  int32_t _responseType;
  std::string _response;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__messageId(const int32_t val) {
    _messageId = val;
  }

  void __set__responseType(const int32_t val) {
    _responseType = val;
  }

  void __set__response(const std::string& val) {
    _response = val;
  }

  bool operator == (const CCServerResponse & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_messageId == rhs._messageId))
      return false;
    if (!(_responseType == rhs._responseType))
      return false;
    if (!(_response == rhs._response))
      return false;
    return true;
  }
  bool operator != (const CCServerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCServerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CCServerResponse &a, CCServerResponse &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NotifAlarm_types.h"

#include <algorithm>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

const char* NotifAlarm::ascii_fingerprint = "3271EE90AB14A73F013B6B230554E226";
const uint8_t NotifAlarm::binary_fingerprint[16] = {0x32,0x71,0xEE,0x90,0xAB,0x14,0xA7,0x3F,0x01,0x3B,0x6B,0x23,0x05,0x54,0xE2,0x26};

uint32_t NotifAlarm::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__baseMessage = false;
  bool isset__notifGroupIds = false;
  bool isset__categoryId = false;
  bool isset__pointId = false;
  bool isset__condition = false;
  bool isset__value = false;
  bool isset__alarmTimestamp = false;
  bool isset__acknowledged = false;
  bool isset__abnormal = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_baseMessage.read(iprot);
          isset__baseMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_notifGroupIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_notifGroupIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->_notifGroupIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset__notifGroupIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_categoryId);
          isset__categoryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_pointId);
          isset__pointId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_condition);
          isset__condition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->_value);
          isset__value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_alarmTimestamp);
          isset__alarmTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_acknowledged);
          isset__acknowledged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_abnormal);
          isset__abnormal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__baseMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__notifGroupIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__categoryId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__pointId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__condition)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__alarmTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__acknowledged)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__abnormal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotifAlarm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NotifAlarm");

  xfer += oprot->writeFieldBegin("_baseMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_baseMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_notifGroupIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->_notifGroupIds.size()));
    std::vector<int32_t> ::const_iterator _iter5;
    for (_iter5 = this->_notifGroupIds.begin(); _iter5 != this->_notifGroupIds.end(); ++_iter5)
    {
      xfer += oprot->writeI32((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_categoryId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_categoryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_pointId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_pointId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_condition", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_condition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_value", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_alarmTimestamp", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->_alarmTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_acknowledged", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->_acknowledged);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_abnormal", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->_abnormal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotifAlarm &a, NotifAlarm &b) {
  using ::std::swap;
  swap(a._baseMessage, b._baseMessage);
  swap(a._notifGroupIds, b._notifGroupIds);
  swap(a._categoryId, b._categoryId);
  swap(a._pointId, b._pointId);
  swap(a._condition, b._condition);
  swap(a._value, b._value);
  swap(a._alarmTimestamp, b._alarmTimestamp);
  swap(a._acknowledged, b._acknowledged);
  swap(a._abnormal, b._abnormal);
}

}}}} // namespace

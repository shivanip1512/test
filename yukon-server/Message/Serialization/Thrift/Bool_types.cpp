/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Bool_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


Bool::~Bool() noexcept {
}


void Bool::__set__value(const bool val) {
  this->_value = val;
}
std::ostream& operator<<(std::ostream& out, const Bool& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bool::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_value);
          isset__value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Bool::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bool");

  xfer += oprot->writeFieldBegin("_value", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bool &a, Bool &b) {
  using ::std::swap;
  swap(a._value, b._value);
}

Bool::Bool(const Bool& other0) noexcept {
  _value = other0._value;
}
Bool& Bool::operator=(const Bool& other1) noexcept {
  _value = other1._value;
  return *this;
}
void Bool::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bool(";
  out << "_value=" << to_string(_value);
  out << ")";
}

}}}} // namespace

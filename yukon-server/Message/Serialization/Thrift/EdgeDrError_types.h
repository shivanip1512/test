/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EdgeDrError_TYPES_H
#define EdgeDrError_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class EdgeDrError;


class EdgeDrError : public virtual ::apache::thrift::TBase {
 public:

  EdgeDrError(const EdgeDrError&);
  EdgeDrError& operator=(const EdgeDrError&);
  EdgeDrError() noexcept
              : errorType(0),
                errorMessage() {
  }

  virtual ~EdgeDrError() noexcept;
  int32_t errorType;
  std::string errorMessage;

  void __set_errorType(const int32_t val);

  void __set_errorMessage(const std::string& val);

  bool operator == (const EdgeDrError & rhs) const
  {
    if (!(errorType == rhs.errorType))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    return true;
  }
  bool operator != (const EdgeDrError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeDrError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(EdgeDrError &a, EdgeDrError &b);

std::ostream& operator<<(std::ostream& out, const EdgeDrError& obj);

}}}} // namespace

#endif

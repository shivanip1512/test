/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMManualControlResponse_TYPES_H
#define LMManualControlResponse_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "LMMessage_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class LMConstraintViolation;

class LMManualControlResponse;


class LMConstraintViolation : public virtual ::apache::thrift::TBase {
 public:

  LMConstraintViolation(const LMConstraintViolation&);
  LMConstraintViolation& operator=(const LMConstraintViolation&);
  LMConstraintViolation() noexcept
                        : _errorCode(0) {
  }

  virtual ~LMConstraintViolation() noexcept;
  int32_t _errorCode;
  std::vector<double>  _doubleParams;
  std::vector<int32_t>  _integerParams;
  std::vector<std::string>  _stringParams;
  std::vector< ::Cti::Messaging::Serialization::Thrift::Timestamp>  _datetimeParams;

  void __set__errorCode(const int32_t val);

  void __set__doubleParams(const std::vector<double> & val);

  void __set__integerParams(const std::vector<int32_t> & val);

  void __set__stringParams(const std::vector<std::string> & val);

  void __set__datetimeParams(const std::vector< ::Cti::Messaging::Serialization::Thrift::Timestamp> & val);

  bool operator == (const LMConstraintViolation & rhs) const
  {
    if (!(_errorCode == rhs._errorCode))
      return false;
    if (!(_doubleParams == rhs._doubleParams))
      return false;
    if (!(_integerParams == rhs._integerParams))
      return false;
    if (!(_stringParams == rhs._stringParams))
      return false;
    if (!(_datetimeParams == rhs._datetimeParams))
      return false;
    return true;
  }
  bool operator != (const LMConstraintViolation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMConstraintViolation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMConstraintViolation &a, LMConstraintViolation &b);

std::ostream& operator<<(std::ostream& out, const LMConstraintViolation& obj);


class LMManualControlResponse : public virtual ::apache::thrift::TBase {
 public:

  LMManualControlResponse(const LMManualControlResponse&);
  LMManualControlResponse& operator=(const LMManualControlResponse&);
  LMManualControlResponse() noexcept
                          : _paoId(0),
                            _bestFitAction() {
  }

  virtual ~LMManualControlResponse() noexcept;
   ::Cti::Messaging::Serialization::Thrift::LMMessage _baseMessage;
  int32_t _paoId;
  std::vector<LMConstraintViolation>  _constraintViolations;
  std::string _bestFitAction;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::LMMessage& val);

  void __set__paoId(const int32_t val);

  void __set__constraintViolations(const std::vector<LMConstraintViolation> & val);

  void __set__bestFitAction(const std::string& val);

  bool operator == (const LMManualControlResponse & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_constraintViolations == rhs._constraintViolations))
      return false;
    if (!(_bestFitAction == rhs._bestFitAction))
      return false;
    return true;
  }
  bool operator != (const LMManualControlResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMManualControlResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(LMManualControlResponse &a, LMManualControlResponse &b);

std::ostream& operator<<(std::ostream& out, const LMManualControlResponse& obj);

}}}} // namespace

#endif

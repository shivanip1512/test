/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LMManualControlResponse_TYPES_H
#define LMManualControlResponse_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "LMMessage_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class LMConstraintViolation {
 public:

  static const char* ascii_fingerprint; // = "869476CDD019ED62DB5C09DABA4F105F";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x94,0x76,0xCD,0xD0,0x19,0xED,0x62,0xDB,0x5C,0x09,0xDA,0xBA,0x4F,0x10,0x5F};

  LMConstraintViolation() : _errorCode(0) {
  }

  virtual ~LMConstraintViolation() throw() {}

  int32_t _errorCode;
  std::vector<double>  _doubleParams;
  std::vector<int32_t>  _integerParams;
  std::vector<std::string>  _stringParams;
  std::vector< ::Cti::Messaging::Serialization::Thrift::Timestamp>  _datetimeParams;

  void __set__errorCode(const int32_t val) {
    _errorCode = val;
  }

  void __set__doubleParams(const std::vector<double> & val) {
    _doubleParams = val;
  }

  void __set__integerParams(const std::vector<int32_t> & val) {
    _integerParams = val;
  }

  void __set__stringParams(const std::vector<std::string> & val) {
    _stringParams = val;
  }

  void __set__datetimeParams(const std::vector< ::Cti::Messaging::Serialization::Thrift::Timestamp> & val) {
    _datetimeParams = val;
  }

  bool operator == (const LMConstraintViolation & rhs) const
  {
    if (!(_errorCode == rhs._errorCode))
      return false;
    if (!(_doubleParams == rhs._doubleParams))
      return false;
    if (!(_integerParams == rhs._integerParams))
      return false;
    if (!(_stringParams == rhs._stringParams))
      return false;
    if (!(_datetimeParams == rhs._datetimeParams))
      return false;
    return true;
  }
  bool operator != (const LMConstraintViolation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMConstraintViolation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LMConstraintViolation &a, LMConstraintViolation &b);


class LMManualControlResponse {
 public:

  static const char* ascii_fingerprint; // = "F425FDEBF3F494680FC8117D3BE7F6FF";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x25,0xFD,0xEB,0xF3,0xF4,0x94,0x68,0x0F,0xC8,0x11,0x7D,0x3B,0xE7,0xF6,0xFF};

  LMManualControlResponse() : _paoId(0), _bestFitAction() {
  }

  virtual ~LMManualControlResponse() throw() {}

   ::Cti::Messaging::Serialization::Thrift::LMMessage _baseMessage;
  int32_t _paoId;
  std::vector<LMConstraintViolation>  _constraintViolations;
  std::string _bestFitAction;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::LMMessage& val) {
    _baseMessage = val;
  }

  void __set__paoId(const int32_t val) {
    _paoId = val;
  }

  void __set__constraintViolations(const std::vector<LMConstraintViolation> & val) {
    _constraintViolations = val;
  }

  void __set__bestFitAction(const std::string& val) {
    _bestFitAction = val;
  }

  bool operator == (const LMManualControlResponse & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_paoId == rhs._paoId))
      return false;
    if (!(_constraintViolations == rhs._constraintViolations))
      return false;
    if (!(_bestFitAction == rhs._bestFitAction))
      return false;
    return true;
  }
  bool operator != (const LMManualControlResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LMManualControlResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LMManualControlResponse &a, LMManualControlResponse &b);

}}}} // namespace

#endif

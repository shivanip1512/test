/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RequestCancel_TYPES_H
#define RequestCancel_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {


class RequestCancel {
 public:

  static const char* ascii_fingerprint; // = "C1B4411B1259E617F49574C97B32016A";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0xB4,0x41,0x1B,0x12,0x59,0xE6,0x17,0xF4,0x95,0x74,0xC9,0x7B,0x32,0x01,0x6A};

  RequestCancel() : _RequestId(0), _RequestIdCount(0), _Time(0), _UserMessageId(0) {
  }

  virtual ~RequestCancel() throw() {}

   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _RequestId;
  int32_t _RequestIdCount;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _Time;
  int32_t _UserMessageId;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val) {
    _baseMessage = val;
  }

  void __set__RequestId(const int32_t val) {
    _RequestId = val;
  }

  void __set__RequestIdCount(const int32_t val) {
    _RequestIdCount = val;
  }

  void __set__Time(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val) {
    _Time = val;
  }

  void __set__UserMessageId(const int32_t val) {
    _UserMessageId = val;
  }

  bool operator == (const RequestCancel & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_RequestId == rhs._RequestId))
      return false;
    if (!(_RequestIdCount == rhs._RequestIdCount))
      return false;
    if (!(_Time == rhs._Time))
      return false;
    if (!(_UserMessageId == rhs._UserMessageId))
      return false;
    return true;
  }
  bool operator != (const RequestCancel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestCancel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestCancel &a, RequestCancel &b);

}}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RequestCancel_TYPES_H
#define RequestCancel_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "Message_types.h"
#include "Types_types.h"


namespace Cti { namespace Messaging { namespace Serialization { namespace Thrift {

class RequestCancel;


class RequestCancel : public virtual ::apache::thrift::TBase {
 public:

  RequestCancel(const RequestCancel&);
  RequestCancel& operator=(const RequestCancel&);
  RequestCancel() noexcept
                : _RequestId(0),
                  _RequestIdCount(0),
                  _Time(0),
                  _UserMessageId(0) {
  }

  virtual ~RequestCancel() noexcept;
   ::Cti::Messaging::Serialization::Thrift::Message _baseMessage;
  int32_t _RequestId;
  int32_t _RequestIdCount;
   ::Cti::Messaging::Serialization::Thrift::Timestamp _Time;
  int32_t _UserMessageId;

  void __set__baseMessage(const  ::Cti::Messaging::Serialization::Thrift::Message& val);

  void __set__RequestId(const int32_t val);

  void __set__RequestIdCount(const int32_t val);

  void __set__Time(const  ::Cti::Messaging::Serialization::Thrift::Timestamp val);

  void __set__UserMessageId(const int32_t val);

  bool operator == (const RequestCancel & rhs) const
  {
    if (!(_baseMessage == rhs._baseMessage))
      return false;
    if (!(_RequestId == rhs._RequestId))
      return false;
    if (!(_RequestIdCount == rhs._RequestIdCount))
      return false;
    if (!(_Time == rhs._Time))
      return false;
    if (!(_UserMessageId == rhs._UserMessageId))
      return false;
    return true;
  }
  bool operator != (const RequestCancel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestCancel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestCancel &a, RequestCancel &b);

std::ostream& operator<<(std::ostream& out, const RequestCancel& obj);

}}}} // namespace

#endif

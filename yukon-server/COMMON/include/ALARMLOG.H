/* includes for emetcon Alarm Log routines */

#ifndef ALARMLOG_H
#define ALARMLOG_H

class CTIPOINT;
//// #include "btrieve.h"

#define ALARMLOGFILENAME ".\\LOGHIST\\ALARMLOG.BDB"
#define ALARMSUM0FILENAME ".\\LOGHIST\\ALARSUM0.BDB"
#define ALARMSUM1FILENAME ".\\LOGHIST\\ALARSUM1.BDB"
#define COMMLOGFILENAME ".\\LOGHIST\\COMERLOG.BDB"
#define PROGLOGFILENAME ".\\LOGHIST\\PROGLOG.BDB"

#define CRITICALCLASS 1
#define NONCRITICALCLASS 0
#define ALARMEDUNACK 1
#define ALARMEDUNACKTIMEOUT 2
#define ALARMEDACK 3

/* this are the types of events codes */
#define COMMUNICATIONERROR 10
#define ALARMEVENT 1
#define COMMFAILUREEVENT 11
#define COMMRESTOREEVENT 12
#define COMMPERCENTEVENT 13

#define COM_LOG_DEL_COUNT  250      /* number of com records to delete
                                       after limit is reached */

/* Masks for alarms */
#define CRITINVALIDSTATE        0x00000001L
#define CRITSTATECHANGE         0x00000002L
#define CRITPLUGGED             0x00000004L
#define CRITUNACK               0x00000008L
#define CRITHIWARNING           0x00000010L
#define CRITSTATE1              0x00000010L
#define CRITOPENED              0x00000010L
#define CRITHILIMIT             0x00000020L
#define CRITSTATE2              0x00000020L
#define CRITCLOSED              0x00000020L
#define CRITLOWWARNING          0x00000040L
#define CRITSTATE3              0x00000040L
#define CRITTRANSITION          0x00000040L
#define CRITLOWLIMIT            0x00000080L
#define CRITABNORMAL            0x00000080L
#define CRITSTATE4              0x00000100L
#define CRITSTATE5              0x00000200L
#define CRITSTATE6              0x00000400L

#define NONCRITINVALIDSTATE     0x00010000L
#define NONCRITSTATECHANGE      0x00020000L
#define NONCRITPLUGGED          0x00040000L
#define NONCRITUNACK            0x00080000L
#define NONCRITHIWARNING        0x00100000L
#define NONCRITSTATE1           0x00100000L
#define NONCRITOPENED           0x00100000L
#define NONCRITHILIMIT          0x00200000L
#define NONCRITSTATE2           0x00200000L
#define NONCRITCLOSED           0x00200000L
#define NONCRITLOWWARNING       0x00400000L
#define NONCRITSTATE3           0x00400000L
#define NONCRITTRANSITION       0x00400000L
#define NONCRITLOWLIMIT         0x00800000L
#define NONCRITABNORMAL         0x00800000L
#define NONCRITSTATE4           0x01000000L
#define NONCRITSTATE5           0x02000000L
#define NONCRITSTATE6           0x04000000L


#define ALARMINVALIDSTATE       0x0001
#define ALARMSTATECHANGE        0x0002
#define ALARMPLUGGED            0x0004
#define ALARMUNACK              0x0008
#define ALARMHIWARNING          0x0010
#define ALARMSTATE1             0x0010
#define ALARMOPENED             0x0010
#define ALARMHILIMIT            0x0020
#define ALARMSTATE2             0x0020
#define ALARMCLOSED             0x0020
#define ALARMLOWWARNING         0x0040
#define ALARMSTATE3             0x0040
#define ALARMTRANSITION         0x0040
#define ALARMLOWLIMIT           0x0080
#define ALARMABNORMAL           0x0080
#define ALARMSTATE4             0x0100
#define ALARMSTATE5             0x0200
#define ALARMSTATE6             0x0400


#define ALARMDRPPASSINVALIDSTATE       0x0001
#define ALARMDRPPASSSTATECHANGE        0x0002
#define ALARMDRPPASSPLUGGED            0x0004
#define ALARMDRPPASSUNACK              0x0008
#define ALARMDRPPASSHIWARNING          0x0010
#define ALARMDRPPASSSTATE1             0x0010
#define ALARMDRPPASSOPENED             0x0010
#define ALARMDRPPASSHILIMIT            0x0020
#define ALARMDRPPASSSTATE2             0x0020
#define ALARMDRPPASSCLOSED             0x0020
#define ALARMDRPPASSLOWWARNING         0x0040
#define ALARMDRPPASSSTATE3             0x0040
#define ALARMDRPPASSTRANSITION         0x0040
#define ALARMDRPPASSLOWLIMIT           0x0080
#define ALARMDRPPASSABNORMAL           0x0080
#define ALARMDRPPASSSTATE4             0x0100
#define ALARMDRPPASSSTATE5             0x0200
#define ALARMDRPPASSSTATE6             0x0400


/* Definitions of name for comm event logs */
#define DEVICEPERCENTLOW_LABEL      "Dd%"
#define DEVICEPERCENTLOW            400
#define DEVICEPERCENT24LOW_LABEL    "Dd%"
#define DEVICEPERCENT24LOW          401
#define DEVICECOMMFAILURE_LABEL     "Ddf"
#define DEVICECOMMFAILURE           402
#define DEVICECOMMSUCCESS_LABEL     "Dds"
#define DEVICECOMMSUCCESS           403
#define ROUTEPERCENTLOW_LABEL       "Rd%"
#define ROUTEPERCENTLOW             404
#define ROUTEPERCENT24LOW_LABEL     "Rd%"
#define ROUTEPERCENT24LOW           405
#define ROUTECOMMFAILURE_LABEL      "Rdf"
#define ROUTECOMMFAILURE            406
#define ROUTECOMMSUCCESS_LABEL      "Rds"
#define ROUTECOMMSUCCESS            407
#define PORTPERCENTLOW_LABEL        "Pc%"
#define PORTPERCENTLOW              408
#define PORTPERCENT24LOW_LABEL      "Pc%"
#define PORTPERCENT24LOW            409
#define PORTCOMMFAILURE_LABEL       "Pcf"
#define PORTCOMMFAILURE             410
#define PORTCOMMSUCCESS_LABEL       "Pcs"
#define PORTCOMMSUCCESS             411
#define REMOTEPERCENTLOW_LABEL      "Rc%"
#define REMOTEPERCENTLOW            412
#define REMOTEPERCENT24LOW_LABEL    "Rc%"
#define REMOTEPERCENT24LOW          413
#define REMOTECOMMFAILURE_LABEL     "Rcf"
#define REMOTECOMMFAILURE           414
#define REMOTECOMMSUCCESS_LABEL     "Rcs"
#define REMOTECOMMSUCCESS           415
#define NETCOMMFAILURE_LABEL        "Ncf"
#define NETCOMMFAILURE              416
#define NETCOMMSUCCESS_LABEL        "Ncs"
#define NETCOMMSUCCESS              417

#define ACOUNTVIOLATION_LABEL       "Aav"
#define ACOUNTVIOLATION              450

/* invalid codes for logging */
#define DATAOVERFLOW 1
#define DATADEVICEFILLER 2
#define DATABADAD 3
#define DATAPOWERFAIL 4
#define DATAFREEZEFAIL 5


/* alarm labels and codes */
#define NORMALDATA 0
#define NORMALDATA_LABEL "Ind"
#define INVALIDDATA_ALARMLABEL "Asi"
#define INVALIDDATA_LABEL "Isi"
#define PLUGDATA_ALARMLABEL "App"
#define PLUGDATA_LABEL "Ipp"
#define HLDATA_ALARMLABEL "Ael"
#define HLDATA_LABEL "Iel"
#define HWDATA_ALARMLABEL "Aew"
#define HWDATA_LABEL "Iew"
#define LLDATA_ALARMLABEL "Ael"
#define LLDATA_LABEL "Iel"
#define LWDATA_ALARMLABEL "Aew"
#define LWDATA_LABEL "Iew"
#define DATALOST 102
#define DATALOST_ALARMLABEL "Adl"
#define DATALOST_LABEL "Idl"
#define STATECHANGE 100
#define STATECHANGE_ALARMLABEL "Asc"
#define STATECHANGE_LABEL "Isc"
#define STATEALARM 101
#define STATEALARM_ALARMLABEL "Asa"
#define STATEALARM_LABEL "Isa"
#define ABNORMALSTATEALARM 103
#define ABNORMALSTATEALARM_ALARMLABEL "Aab"
#define ABNORMALSTATEALARM_LABEL "Iab"
#define ACKNOWLEGETIMEOUT_LABEL  "Ato"
#define ACKNOWLEGETIMEOUT  104

#define SYSTEMERROR 200
#define SYSTEMERROR_ALARMLABEL "Asy"
#define SYSTEMERROR_LABEL "Isy"
#define DBSETUPERROR 201
#define DBSETUPERROR_ALARMLABEL "Ase"
#define DBSETUPERROR_LABEL "Ise"
#define DEFAULT_ALARMLABEL "A  "
#define DEFAULT_LABEL "   "
#define SWITCHCONTROLMANUAL 300
#define SWITCHCONTROLMANUAL_LABEL "Cms"
#define VOLTCONTROLMANUAL 301
#define VOLTCONTROLMANUAL_LABEL "Cmv"
#define COMMFAILERROR 301
#define COMMFAILERROR_LABEL "Ecf"
#define CONTROLEVENT 302
#define CONTROLEVENT_LABEL "Ice"
#define CONTROLEVENT_ALARMLABEL "Ace"
#define ALARMACKNOWLEDGE 105
#define ALARMACKNOWLEDGE_LABEL "Ack"


#define ALARMLOGKEYS 12
#define ALARMSUMKEYS 5

/* Alarm History Log Struct */
typedef struct _ALARM_LOG_STRUCT {
    CHAR DeviceName[STANDNAMLEN];
    CHAR PointName[STANDNAMLEN];
    ULONG TimeStamp;
    USHORT StatusFlag;
    USHORT LogCode;
    USHORT AlarmClass;
    CHAR AlarmText[18];
} ALARM_LOG_STRUCT;


/* Alarm Summary Struct */
typedef struct _ALARM_SUM_STRUCT {
    CHAR DeviceName[STANDNAMLEN];
    CHAR PointName[STANDNAMLEN];
    ULONG TimeStamp;
    USHORT StatusFlag;
    USHORT AcknowlegeFlag;
    USHORT StateChangeCount;
    USHORT LogCode;
    CHAR AlarmText[18];
    ULONG UnAckTimeOutTime;    // this is the time when un-acked alarm will be generated
} ALARM_SUM_STRUCT;


/* Communication Error Log Struct */
typedef struct _COMM_ERROR_LOG_STRUCT {
    ULONG TimeStamp;
    USHORT StatusFlag;
    CHAR DeviceName[STANDNAMLEN];
    CHAR RouteName[STANDNAMLEN];
    USHORT Error;
} COMM_ERROR_LOG_STRUCT;


/* Program Error Log Struct */
typedef struct _PROG_ERROR_LOG_STRUCT {
    ULONG TimeStamp;
    CHAR ProgramName[8];
    CHAR ModuleName[8];
    USHORT ProcId;
    USHORT Error;
} PROG_ERROR_LOG_STRUCT;


/* Prototypes from alarmlog.c */
IM_EX_CTIBASE INT InitAllAlarmLog (VOID);
IM_EX_CTIBASE INT InitAlarmDB (VOID);
IM_EX_CTIBASE INT CloseAllAlarmLog (VOID);
IM_EX_CTIBASE INT CloseAlarmDB (VOID);
IM_EX_CTIBASE INT InitAlarmLog (VOID);
IM_EX_CTIBASE INT CreateAlarmLogDB (PCHAR);
IM_EX_CTIBASE INT InitAlarmSum (USHORT);
IM_EX_CTIBASE INT CreateAlarmSum (PCHAR);
IM_EX_CTIBASE INT InitComErrorLog (VOID);
IM_EX_CTIBASE INT InitProgErrorLog (VOID);
IM_EX_CTIBASE INT CloseAlarmLog (VOID);
IM_EX_CTIBASE INT CloseAlarmSum (VOID);
IM_EX_CTIBASE INT CloseComError (VOID);
IM_EX_CTIBASE INT CloseProgError (VOID);
IM_EX_CTIBASE INT LogAlarm (ALARM_SUM_STRUCT *, USHORT, USHORT, CTIPOINT *, USHORT);
IM_EX_CTIBASE INT AlarmSumDelete (ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmSumGetEqual (ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmSumGetFirst (ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmSumGetNext (ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmSumGetPrev (ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmSumGetFirstTime(ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmSumGetNextTime (ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmSumGetPrevTime (ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmLogGetFirst (ALARM_LOG_STRUCT *);
IM_EX_CTIBASE INT AlarmLogGetNext (ALARM_LOG_STRUCT *);
IM_EX_CTIBASE INT AlarmLogGetPrev (ALARM_LOG_STRUCT *);
IM_EX_CTIBASE INT AlarmLogRecords (PULONG);
IM_EX_CTIBASE INT AlarmLogxRecords (PULONG, PBYTE);
IM_EX_CTIBASE INT AlarmLogGetNewest (ALARM_LOG_STRUCT *, PBYTE);
IM_EX_CTIBASE INT FO_OpenAlarmLogDB (PCHAR, PBYTE);
IM_EX_CTIBASE INT FO_CopyAlarmLogDB (PBYTE, PCHAR);
IM_EX_CTIBASE INT FO_CopyNewAlarmLogRecs (PBYTE, PULONG);
IM_EX_CTIBASE INT FO_InitAlarmLog (PCHAR PathName);

IM_EX_CTIBASE INT LogSumRecords (PULONG, USHORT);
IM_EX_CTIBASE INT CreateComErrorLog (PCHAR);
// IM_EX_CTIBASE INT ComErrorLogAdd (COMM_ERROR_LOG_STRUCT *, ERRSTRUCT *, USHORT);
IM_EX_CTIBASE INT ComErrorLogGetFirstTime (COMM_ERROR_LOG_STRUCT *);
IM_EX_CTIBASE INT ComErrorLogGetLastTime (COMM_ERROR_LOG_STRUCT *);
IM_EX_CTIBASE INT ComErrorLogxGetLastTime (COMM_ERROR_LOG_STRUCT *, PBYTE);

IM_EX_CTIBASE INT ComErrorLogGetNextTime (COMM_ERROR_LOG_STRUCT *);
IM_EX_CTIBASE INT ComErrorLogGetPrevTime (COMM_ERROR_LOG_STRUCT *);
IM_EX_CTIBASE INT ProgErrorLogAdd (PROG_ERROR_LOG_STRUCT *);
IM_EX_CTIBASE INT ProgErrorGetFirst (PROG_ERROR_LOG_STRUCT *);
IM_EX_CTIBASE INT ProgErrorGetNext (PROG_ERROR_LOG_STRUCT *);
IM_EX_CTIBASE INT ProgErrorDeleteAll (VOID);
IM_EX_CTIBASE INT ComAlarmDeleteRange  (ULONG);
IM_EX_CTIBASE INT AlarmLogDeleteRange (PULONG);
IM_EX_CTIBASE INT NormalLogEvent (SYSTEMLOGMESS *, USHORT);
IM_EX_CTIBASE INT AlarmSumUpdate(ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT ComErrorLogStatus (VOID);
IM_EX_CTIBASE INT ComErrorLogRecords (PULONG);
IM_EX_CTIBASE INT AlarmSumGetFirstTimeOut(ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmSumGetPrevTimeOut (ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT AlarmSumGetNextTimeOut (ALARM_SUM_STRUCT *, USHORT);
IM_EX_CTIBASE INT FO_OpenComErrorDB (PCHAR, PBYTE);
IM_EX_CTIBASE INT FO_CopyComErrorDB (PBYTE, PCHAR);
IM_EX_CTIBASE INT FO_InitComErrorLog (PCHAR PathName);
IM_EX_CTIBASE INT FO_CopyNewComErrorRecs (PBYTE, PULONG);
IM_EX_CTIBASE INT ComErrorLogxRecords (PULONG, PBYTE);
IM_EX_CTIBASE INT ComErrorCleanUp(COMM_ERROR_LOG_STRUCT *, PBYTE);
IM_EX_CTIBASE INT Check4ComErrDBChange (ULONG, PCHAR);
IM_EX_CTIBASE INT Check4AlarmCSumDBChange (ULONG, PCHAR);
IM_EX_CTIBASE INT Check4AlarmNCSumDBChange (ULONG, PCHAR);
IM_EX_CTIBASE INT Check4AlarmDBChange (ULONG, PCHAR);
IM_EX_CTIBASE INT OpenAlarmCSumDB (PCHAR, PBYTE);
IM_EX_CTIBASE INT OpenAlarmNCSumDB (PCHAR, PBYTE);
IM_EX_CTIBASE INT FO_CopyAlarmCSumDB (PCHAR, PCHAR);
IM_EX_CTIBASE INT FO_CopyAlarmNCSumDB (PCHAR, PCHAR);

#endif      // #ifndef ALARMLOG_H

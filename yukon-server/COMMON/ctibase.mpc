project(ctibase) {
  sharedname=ctibase


  macros += BOOST_ALL_DYN_LINK
  macros += BOOST_ENABLE_ASSERT_HANDLER
  macros += BUILD_VERSION=6.5\ (build\ 0)
  macros += BUILD_VERSION_DETAILS=6.5.0
  macros += CTIBASE
  macros += NOMINMAX
  macros += WIN32
  macros += _CONSOLE
  specific {
    Debug::macros += _DEBUG
  }
  macros += _REENTRANT
  macros += _WINDOWS
  macros += _X86_=1
  macros += __DLL__
  macros += D_FILE_NAME=ctibase
  macros += D_FILE_VERSION=6,5,0,0
  macros += D_FILE_VERSION_STR=6.5.0.0
  macros += D_PRODUCT_VERSION=6,5,0,0
  macros += D_PRODUCT_VERSION_STR=6.5
  includes += $(APR)/include
  includes += $(BOOST)/include
  includes += $(CAJUN)/include
  includes += $(DBGHELP)/include
  includes += $(LOG4CXX)/include
  includes += $(OPENSSL)/include
  includes += $(SQLAPI)/include
  includes += $(XERCES)/include
  includes += .
  includes += ../common/include
  includes += ../resource/include
  includes += ./include
  includes += $(BOOST)\include
  lit_libs += kernel32
  lit_libs += user32
  lit_libs += advapi32
  lit_libs += wsock32
  lit_libs += winmm
  lit_libs += shlwapi
  lit_libs += Ws2_32
  lit_libs += psapi
  lit_libs += pdh
  specific {
    Debug::lit_libs   += $(SQLAPI)\lib\sqlapid
    Release::lit_libs += $(SQLAPI)\lib\sqlapi
  }
  specific {
    Debug::lit_libs   += $(XERCES)\$(CONFIGURATION)\lib\xerces-c_3D
    Release::lit_libs += $(XERCES)\$(CONFIGURATION)\lib\xerces-c_3
  }
  lit_libs += $(OPENSSL)\$(CONFIGURATION)\lib\libeay32
  lit_libs += $(OPENSSL)\$(CONFIGURATION)\lib\ssleay32
  specific {
    Debug::lit_libs   += $(BOOST)\lib\boost_chrono-vc120-mt-gd-1_58
    Release::lit_libs += $(BOOST)\lib\boost_chrono-vc120-mt-1_58
  }
  specific {
    Debug::lit_libs   += $(BOOST)\lib\boost_date_time-vc120-mt-gd-1_58
    Release::lit_libs += $(BOOST)\lib\boost_date_time-vc120-mt-1_58
  }
  specific {
    Debug::lit_libs   += $(BOOST)\lib\boost_thread-vc120-mt-gd-1_58
    Release::lit_libs += $(BOOST)\lib\boost_thread-vc120-mt-1_58
  }
  specific {
    Debug::lit_libs   += $(BOOST)\lib\boost_regex-vc120-mt-gd-1_58
    Release::lit_libs += $(BOOST)\lib\boost_regex-vc120-mt-1_58
  }
  specific {
    Debug::lit_libs   += $(BOOST)\lib\boost_filesystem-vc120-mt-gd-1_58
    Release::lit_libs += $(BOOST)\lib\boost_filesystem-vc120-mt-1_58
  }
  specific {
    Debug::lit_libs   += $(BOOST)\lib\boost_system-vc120-mt-gd-1_58
    Release::lit_libs += $(BOOST)\lib\boost_system-vc120-mt-1_58
  }
  lit_libs += $(DBGHELP)\lib\dbghelp
  lit_libs += $(LOG4CXX)\$(CONFIGURATION)\lib\log4cxx
  lit_libs += $(APR)\$(CONFIGURATION)\lib\libapr-1
  pch_header = precompiled.h
  pch_source = ../precompiled.cpp

  Source_Files {
    ../precompiled.cpp
    
    ctidate.cpp
    ctitime.cpp
    ctitokenizer.cpp
    resolvers.cpp
    numstr.cpp
    cmdparse.cpp
    counter.cpp
    critical_section.cpp
    ctdpcptrq.cpp
    cti_asmc.cpp
    cticalls.cpp
    streamLocalConnection.cpp
    streamSocketConnection.cpp
    streamSocketListener.cpp
    database_writer.cpp
    database_connection.cpp
    database_transaction.cpp
    database_reader.cpp
    database_util.cpp
    dbaccess.cpp
    debug_timer.cpp
    desolvers.cpp
    dllbase.cpp
    elog_cli.cpp
    error.cpp
    fileint.cpp
    guard.cpp
    macro_offset.cpp
    master.cpp
    millisecond_timer.cpp
    mutex.cpp
    observe.cpp
    queue.cpp
    queues.cpp
    readers_writer_lock.cpp
    regression.cpp
    repeaterrole.cpp
    rtdb.cpp
    sema.cpp
    stdexcepthdlr.cpp
    thread.cpp
    ucttime.cpp
    date_utility.cpp
    utility.cpp
    words.cpp
    xfer.cpp
    verification_objects.cpp
    thread_register_data.cpp
    thread_monitor.cpp
    ThreadStatusKeeper.cpp
    timeperiod.cpp
    LitePoint.cpp
    AttributeService.cpp
    PointAttribute.cpp
    MetricIdLookup.cpp
    configval.cpp
    configkey.cpp
    cparms.cpp
    encryption.cpp
    BeatThePeakAlertLevel.cpp
    json.cpp
    xml.cpp
    DeviceAttributeLookup.cpp
    DeviceConfigDescription.cpp
    timing_util.cpp
    worker_thread.cpp
    resource_helper.cpp
    module_util.cpp
    streamBuffer.cpp
    string_util.cpp
    exception_helper.cpp
    win_helper.cpp
    logLayout.cpp
    logFileAppender.cpp
    truncatingConsoleAppender.cpp
    logManager.cpp
    logger.cpp
    id_ctibase.cpp
  }


  Header_Files {
    include/AttributeService.h
    include/BeatThePeakAlertLevel.h
    include/boost_test_helpers.h
    include/boost_time.h
    include/boostutil.h
    include/cmdparse.h
    include/collectable.h
    include/COLOR.H
    include/ConfigKey.h
    include/ConfigVal.h
    include/constants.h
    include/counter.h
    include/CParms.h
    include/critical_section.h
    include/ctdpcptrq.h
    include/CTI_ASMC.H
    include/ctibase.h
    include/CTICALLS.H
    include/ctidate.h
    include/ctidbgmem.h
    include/ctipcptrqueue.h
    include/ctiqueues.h
    include/ctitime.h
    include/ctitokenizer.h
    include/database_connection.h
    include/database_exceptions.h
    include/database_reader.h
    include/database_transaction.h
    include/database_util.h
    include/database_writer.h
    include/date_utility.h
    include/db_entry_defines.h
    include/dbaccess.h
    include/debug_timer.h
    include/desolvers.h
    include/DeviceAttributeLookup.h
    include/DeviceConfigDescription.h
    include/devicetypes.h
    include/dllbase.h
    include/dlldefs.h
    include/dsm2.h
    include/DSM2ERR.H
    include/Elogger.h
    include/encryption.h
    include/exception_helper.h
    include/Exceptions.h
    include/fileint.h
    include/guard.h
    include/id_ctibase.h
    include/immutable.h
    include/json.h
    include/LitePoint.h
    include/logFileAppender.h
    include/loggable.h
    include/logger.h
    include/logLayout.h
    include/logManager.h
    include/macro_offset.h
    include/MASTER.H
    include/MetricIdLookup.h
    include/millisecond_timer.h
    include/module_util.h
    include/mutex.h
    include/netports.h
    include/numstr.h
    include/observe.h
    include/optional.h
    include/OS2_2W32.H
    include/parsevalue.h
    include/PointAttribute.h
    include/pointdefs.h
    include/pointtypes.h
    include/PORTER.H
    include/precompiled.h
    include/queue.h
    include/QUEUES.H
    include/random_generator.h
    include/readers_writer_lock.h
    include/regression.h
    include/repeaterrole.h
    include/resolvers.h
    include/resource_helper.h
    include/rfn_identifier.h
    include/row_reader.h
    include/row_writer.h
    include/rtdb.h
    include/sema.h
    include/smartmap.h
    include/socket_helper.h
    include/sorted_vector.h
    include/std_helper.h
    include/stdexcepthdlr.h
    include/streamBuffer.h
    include/streamConnection.h
    include/streamLocalConnection.h
    include/streamSocketConnection.h
    include/streamSocketListener.h
    include/string_util.h
    include/test_cmdparse_input.h
    include/test_cmdparse_output.h
    include/test_reader.h
    include/thread.h
    include/thread_listener.h
    include/thread_monitor.h
    include/thread_register_data.h
    include/ThreadStatusKeeper.h
    include/timeperiod.h
    include/timing_util.h
    include/truncatingConsoleAppender.h
    include/types.h
    include/utility.h
    include/vcomdefs.h
    include/verification_objects.h
    include/win_helper.h
    include/words.h
    include/worker_thread.h
    include/xfer.h
    include/xml.h
    include/yukon.h
  }

  Resource_Files {
    ../versioninfo.rc
  }

  specific {
    postbuild= \ns {
if not exist $(SolutionDir)bin mkdir $(SolutionDir)bin
xcopy /d/y/f $(OutDir)$(TargetFileName) $(SolutionDir)bin
if not exist $(SolutionDir)lib mkdir $(SolutionDir)lib
if exist $(OutDir)$(TargetName).lib xcopy /d/y/f $(OutDir)$(TargetName).lib $(SolutionDir)lib
if exist $(OutDir)$(TargetName).lib xcopy /d/y/f $(OutDir)$(TargetName).lib $(SolutionDir)bin
..\..\yukon-build\server-build\BUILD.EXE -f $(SolutionDir)\libraries.mak COMPILEBASE=$(SolutionDir) YUKONOUTPUT=$(SolutionDir)\bin all CONFIGURATION=$(Configuration)
    }
  }

  specific {
    Release::lib_modifier =
    Debug::lib_modifier =
  }

}



#pragma warning( disable : 4786)

/*--------------------------------------------------------------------------------------------*
*
* File:   thread_register_data
*
* Date:   9/2/2004
*
* Author: Eric Schmit
*
* PVCS KEYWORDS:
* ARCHIVE      :  $Archive$
* REVISION     :  $Revision: 1.3 $
* DATE         :  $Date: 2004/09/21 14:34:17 $
*
* Copyright (c) 1999, 2000, 2001, 2002, 2003, 2004 Cannon Technologies Inc. All rights reserved.
*---------------------------------------------------------------------------------------------*/

#include "thread_register_data.h"

//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::CtiThreadRegData() :
   _tickledTime( second_clock::local_time() ),
   _alternate( 0 )
{

}

//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::~CtiThreadRegData()
{
}

//===========================================================================================================
//===========================================================================================================

bool CtiThreadRegData::operator<( const CtiThreadRegData& y ) const
{
   return( true );
}

//===========================================================================================================
//===========================================================================================================

string CtiThreadRegData::getName( void )
{
   return( _name );
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setName( const string in )
{
   _name = in;
}

//===========================================================================================================
//===========================================================================================================

int CtiThreadRegData::getId( void )
{
   return( _id );
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setId( const int in )
{
   _id = in;
}

//===========================================================================================================
//===========================================================================================================

int CtiThreadRegData::getBehaviour( void ) 
{
   return( _behaviourType );
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setBehaviour( int in )
{
   _behaviourType = in;
}

//===========================================================================================================
//===========================================================================================================

ptime CtiThreadRegData::getTickledTime( void )
{
   return( _tickledTime );
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setTickledTime( ptime in )
{
   _tickledTime = in;
}

//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::fooptr CtiThreadRegData::getShutdownFunc( void )
{
   return( _shutdown );
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setShutdownFunc( fooptr in )
{
   _shutdown = in; 
}

//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::fooptr CtiThreadRegData::getAlternate( void )
{
   return( _alternate );
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setAlternate( fooptr in )
{
   _alternate = in;
}

//===========================================================================================================
// this returns seconds
//===========================================================================================================

ULONG CtiThreadRegData::getTickleFreq( void )
{
   return( _tickleFreq );
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setTickleFreq( ULONG seconds )
{
   _tickleFreq = seconds;
}

//===========================================================================================================
//===========================================================================================================

bool CtiThreadRegData::getReported( void )
{
   return( _reported );
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setReported( const bool in )
{
   _reported = in;
}

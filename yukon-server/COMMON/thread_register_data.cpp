
#pragma warning( disable : 4786)

/*--------------------------------------------------------------------------------------------*
*
* File:   thread_register_data
*
* Date:   9/2/2004
*
* Author: Eric Schmit
*
* PVCS KEYWORDS:
* ARCHIVE      :  $Archive$
* REVISION     :  $Revision: 1.5 $
* DATE         :  $Date: 2004/09/27 17:13:16 $
*
* Copyright (c) 1999, 2000, 2001, 2002, 2003, 2004 Cannon Technologies Inc. All rights reserved.
*---------------------------------------------------------------------------------------------*/

#include "thread_register_data.h"
/*
//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::CtiThreadRegData() :
   _tickledTime( second_clock::local_time() )
{
}
*/
//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::CtiThreadRegData( int id,
                                     string name,
                                     Behaviours type,
                                     int tickle_freq,
                                     behaviourFuncPtr ptr1,
                                     void *args1,
                                     behaviourFuncPtr ptr2,
                                     void *args2 ) :
   _tickledTime( second_clock::local_time() )
{
   _id = id;
   _name = name;
   _behaviourType = type;
   _tickleFreq = tickle_freq;
   _shutdown = ptr1;
   _shutdown_args = args1;
   _alternate = ptr2;
   _alt_args = args2;
}

//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::~CtiThreadRegData()
{
}

//===========================================================================================================
//===========================================================================================================

bool CtiThreadRegData::operator<( const CtiThreadRegData& y ) const
{
   return( true );
}

//===========================================================================================================
//===========================================================================================================

string CtiThreadRegData::getName( void )
{
   return( _name );
}

//===========================================================================================================
//===========================================================================================================

int CtiThreadRegData::getId( void )
{
   return( _id );
}


//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::Behaviours CtiThreadRegData::getBehaviour( void ) 
{
   return( _behaviourType );
}


//===========================================================================================================
//===========================================================================================================

ptime CtiThreadRegData::getTickledTime( void )
{
   return( _tickledTime );
}


//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::behaviourFuncPtr CtiThreadRegData::getShutdownFunc( void )
{
   return( _shutdown );
}

//===========================================================================================================
//===========================================================================================================

void* CtiThreadRegData::getShutdownArgs( void )
{
   return( _shutdown_args );
}

//===========================================================================================================
//===========================================================================================================

CtiThreadRegData::behaviourFuncPtr CtiThreadRegData::getAlternateFunc( void )
{
   return( _alternate );
}


//===========================================================================================================
//===========================================================================================================

void* CtiThreadRegData::getAlternateArgs( void )
{
   return( _alt_args );
}

//===========================================================================================================
// this returns seconds
//===========================================================================================================

ULONG CtiThreadRegData::getTickleFreq( void )
{
   return( _tickleFreq );
}

//===========================================================================================================
//===========================================================================================================

bool CtiThreadRegData::getReported( void )
{
   return( _reported );
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setReported( const bool in )
{
   _reported = in;
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setTickledTime( ptime in )
{
   _tickledTime = in;
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setAlternateArgs( void* args )
{
   _alt_args = args;
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setTickleFreq( ULONG seconds )
{
   _tickleFreq = seconds;
}

//===========================================================================================================
// this could be a restart function or whatever else seems like a good idea
//===========================================================================================================

void CtiThreadRegData::setAlternateFunc( behaviourFuncPtr in )
{
   _alternate = in;
}
   
//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setShutdownArgs( void* args )
{
   _shutdown_args = args;
}

//===========================================================================================================
// this should be a function that causes the death of whatever thread has gone awry
//===========================================================================================================

void CtiThreadRegData::setShutdownFunc( behaviourFuncPtr in )
{
   _shutdown = in; 
}

//===========================================================================================================
// this setting tells the monitor what type of action the registered thread would like us to take if there 
// is a 'out-to-lunch' episode
//===========================================================================================================

void CtiThreadRegData::setBehaviour( CtiThreadRegData::Behaviours in )
{
   _behaviourType = in;
}


//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setName( const string in )
{
   _name = in;
}

//===========================================================================================================
//===========================================================================================================

void CtiThreadRegData::setId( const int &in )
{
   _id = in;
}

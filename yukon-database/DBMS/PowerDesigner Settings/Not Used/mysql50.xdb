<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" Code="MYSQL50" Family="MySQL" Name="MySQL 5.0" signature="XDB_XML" version="12.0.0.1675"?>
<!-- do not edit this file -->

<DBMS xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:DBMS Id="o1">
<a:ObjectID>F4F16ECD-F2F1-4006-AF6F-638D5C65F35E</a:ObjectID>
<a:Name>MySQL 5.0</a:Name>
<a:Code>MYSQL50</a:Code>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1129821012</a:ModificationDate>
<a:Modifier>mledier</a:Modifier>
<a:Family>MySQL</a:Family>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined

function CheckColumn(pCol)
   dim retval, sdttp
   if(Instr(pCol.Datatype, &quot;(&quot;) = 0) then sdttp = lCase(pCol.Datatype) else sdttp = lcase(left(pCol.Datatype, Instr(pCol.Datatype, &quot;(&quot;) - 1))
   Select Case(sdttp)
      Case &quot;bit&quot;, &quot;bool&quot;, &quot;boolean&quot;,&quot;date&quot;,&quot;datetime&quot;,&quot;timestamp&quot;,&quot;time&quot;,&quot;year&quot;:
         CheckColumn = unAvailableAttribute(pCol, &quot;CharSet,Collate,National,Unsigned,ZeroFill&quot;)
      Case &quot;mediumblob&quot;, &quot;longblob&quot;, &quot;tinyblob&quot;, &quot;binary&quot;, &quot;varbinary&quot;
         CheckColumn = unAvailableAttribute(pCol, &quot;CharSet,Collate,National,Unsigned,ZeroFill&quot;)
      Case &quot;tinyint&quot;,&quot;smallint&quot;,&quot;mediumint&quot;,&quot;int&quot;,&quot;integer&quot;,&quot;bigint&quot;,&quot;float&quot;,&quot;double precision&quot;,&quot;real&quot;: 
         CheckColumn = unAvailableAttribute(pCol, &quot;Charset,Collate,National&quot;)
      Case &quot;decimal&quot;,&quot;dec&quot;,&quot;numeric&quot;,&quot;num&quot;: 
         CheckColumn = unAvailableAttribute(pCol, &quot;Charset,Collate,National&quot;)
      case &quot;char&quot;,&quot;varchar&quot;,&quot;text&quot;,&quot;mediumtext&quot;,&quot;longtext&quot;,&quot;tinytext&quot;
         CheckColumn = unAvailableAttribute(pCol, &quot;Unsigned,ZeroFill&quot;)
      case else
         CheckColumn = True
   End Select

end function

function unAvailableAttribute(pCol, sAttrList)
   dim pos, sAttr, sVal
   pos = instr(sAttrList, &quot;,&quot;)
   if (pos = 0) then sAttr = sAttrList else sAttr = left(sAttrList, pos - 1)
   sVal = lCase(pCol.GetExtendedAttribute(sAttr))
   if ((sVal &lt;&gt; &quot;false&quot;) and (sVal &lt;&gt; &quot;&quot;)) then
      unAvailableAttribute = False
   elseif (pos = 0) then
      unAvailableAttribute = True
   else
      unAvailableAttribute = unAvailableAttribute(pCol, mid(sAttrList, pos + 1))
   end if
end function</a:CheckGlobalScript>
<c:Categories>
<o:TargetCategory Id="o2">
<a:Name>General</a:Name>
<a:Comment>Target DBMS identification</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o3">
<a:Name>SqlSupport</a:Name>
<a:Comment>SQL syntax allowed. This does not impact the script generation, but it impacts the SQL Preview</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o4">
<a:Name>EnableCheck</a:Name>
<a:Comment>Determines if the generation of check parameters is authorized or not</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o5">
<a:Name>Enableconstname</a:Name>
<a:Comment>Determines if constraint names are used during the generation</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o6">
<a:Name>UniqConstName</a:Name>
<a:Comment>Determines if unique constraint names for objects are authorized or not</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o7">
<a:Name>Script</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the Script generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o8">
<a:Name>Sql</a:Name>
<a:Comment>Contains sub-categories Syntax, Format, File and Keywords. Each sub-category contains entries whose values define general syntax for the database</a:Comment>
<c:Categories>
<o:TargetCategory Id="o9">
<a:Name>Syntax</a:Name>
<a:Comment>Contains general parameters for SQL syntax</a:Comment>
<c:Categories>
<o:CharacterTargetItem Id="o10">
<a:Name>Terminator</a:Name>
<a:Comment>End of command character</a:Comment>
<a:CharacterTargetItem.Value>;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o11">
<a:Name>BlockTerminator</a:Name>
<a:Comment>End of block character</a:Comment>
</o:StringTargetItem>
<o:CharacterTargetItem Id="o12">
<a:Name>Delimiter</a:Name>
<a:Comment>Field separation character. Example: col1, col2, col3</a:Comment>
<a:CharacterTargetItem.Value>,</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o13">
<a:Name>Quote</a:Name>
<a:Comment>Character used to enclose string values</a:Comment>
<a:CharacterTargetItem.Value>&#39;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o14">
<a:Name>SqlContinue</a:Name>
<a:Comment>Continuation character</a:Comment>
</o:CharacterTargetItem>
<o:BooleanTargetItem Id="o15">
<a:Name>UseBlockTerm</a:Name>
<a:Comment>Use end of block character by default</a:Comment>
</o:BooleanTargetItem>
<o:StringTargetItem Id="o16">
<a:Name>BlockComment</a:Name>
<a:Comment>Characters used to enclose a multi-line comment</a:Comment>
<a:StringTargetItem.Value>/*   */</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o17">
<a:Name>LineComment</a:Name>
<a:Comment>Characters used to enclose a single line comment</a:Comment>
<a:StringTargetItem.Value>#</a:StringTargetItem.Value>
</o:StringTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o18">
<a:Name>Format</a:Name>
<a:Comment>Contains entries that define script formatting</a:Comment>
<c:Categories>
<o:StringTargetItem Id="o19">
<a:Name>IllegalChar</a:Name>
<a:Comment>Invalid characters for names</a:Comment>
<a:StringTargetItem.Value>&quot; +-*/!=&lt;&gt;&#39;&quot;()&quot;.</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:BooleanTargetItem Id="o20">
<a:Name>UpperCaseOnly</a:Name>
<a:Comment>Uppercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o21">
<a:Name>LowerCaseOnly</a:Name>
<a:Comment>Lowercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o22">
<a:Name>EnableOwnerPrefix</a:Name>
<a:Comment>Object codes can have a prefix made of the object owner code</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o23">
<a:Name>EnableDtbsPrefix</a:Name>
<a:Comment>Object codes can have a prefix made of the object database code</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o24">
<a:Name>File</a:Name>
<a:Comment>Contains header, footer and usage text entries used during the generation</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o25">
<a:Name>Header</a:Name>
<a:Comment>Header text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o26">
<a:Name>Footer</a:Name>
<a:Comment>Footer text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o27">
<a:Name>EnableMultiFile</a:Name>
<a:Comment>Multi-script allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:StringTargetItem Id="o28">
<a:Name>ScriptExt</a:Name>
<a:Comment>Main script extension in database generation</a:Comment>
<a:StringTargetItem.Value>sql</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o29">
<a:Name>TableExt</a:Name>
<a:Comment>Other scripts extension in database generation</a:Comment>
<a:StringTargetItem.Value>tab</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o30">
<a:Name>StartCommand</a:Name>
<a:Comment>Command for executing a script</a:Comment>
<a:StringTargetItem.Value>mysql&gt; source &lt;file_name&gt;</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:TextTargetItem Id="o31">
<a:Name>Usage1</a:Name>
<a:TextTargetItem.Value>  (1) Start command prompt
  (2) Go to the directory %PATHSCRIPT%
  (3) Start the SQL interpreter:
        mysql.exe
  (4) Run the database creation script:
        mysql&gt; source %NAMESCRIPT%</a:TextTargetItem.Value>
<a:Comment>Usage for a single script in database generation</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o32">
<a:Name>Usage2</a:Name>
<a:TextTargetItem.Value>  (1) Start command prompt
  (2) Go to the directory %PATHSCRIPT%
  (3) Start the SQL interpreter:
        mysql.exe
  (4) Run the database creation scripts:
        mysql&gt; source &lt;script_file_name&gt;</a:TextTargetItem.Value>
<a:Comment>Usage for multiple scripts in database generation</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o33">
<a:Name>Keywords</a:Name>
<a:Comment>Contains the list of reserved words and functions available in SQL</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o34">
<a:Name>ReservedDefault</a:Name>
<a:TextTargetItem.Value>NULL</a:TextTargetItem.Value>
<a:Comment>Reserved default values</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o35">
<a:Name>Commit</a:Name>
<a:TextTargetItem.Value>commit</a:TextTargetItem.Value>
<a:Comment>Command for validating the transaction by OBDC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o36">
<a:Name>ReservedWord</a:Name>
<a:TextTargetItem.Value>ADD
ALL
ALTER
ANALYZE
AND
AS
ASC
AUTO_INCREMENT
BDB
BEFORE
BERKELEYDB
BETWEEN
BIGINT
BINARY
BLOB
BOTH
BTREE
BY
CASCADE
CASE
CHANGE
CHAR
CHARACTER
CHECK
COLLATE
COLUMN
COLUMNS
CONSTRAINT
CREATE
CROSS
CURRENT_DATE
CURRENT_TIME
CURRENT_TIMESTAMP
DATABASE
DATABASES
DAY_HOUR
DAY_MINUTE
DAY_SECOND
DEC
DECIMAL
DEFAULT
DELAYED
DELETE
DESC
DESCRIBE
DISTINCT
DISTINCTROW
DIV
DOUBLE
DROP
ELSE
ENCLOSED
ERRORS
ESCAPED
EXISTS
EXPLAIN
FALSE
FIELDS
FLOAT
FOR
FORCE
FOREIGN
FROM
FULLTEXT
FUNCTION
GRANT
GROUP
HASH
HAVING
HIGH_PRIORITY
HOUR_MINUTE
HOUR_SECOND
IF
IGNORE
IN
INDEX
INFILE
INNER
INNODB
INSERT
INT
INTEGER
INTERVAL
INTO
IS
JOIN
KEY
KEYS
KILL
LEADING
LEFT
LIKE
LIMIT
LINES
LOAD
LOCALTIME
LOCALTIMESTAMP
LOCK
LONG
LONGBLOB
LONGTEXT
LOW_PRIORITY
MASTER_SERVER_ID
MATCH
MEDIUMBLOB
MEDIUMINT
MEDIUMTEXT
MIDDLEINT
MINUTE_SECOND
MOD
MRG_MYISAM
NATURAL
NOT
NULL
NUMERIC
ON
OPTIMIZE
OPTION
OPTIONALLY
OR
ORDER
OUTER
OUTFILE
PRECISION
PRIMARY
PRIVILEGES
PROCEDURE
PURGE
READ
REAL
REFERENCES
REGEXP
RENAME
REPLACE
REQUIRE
RESTRICT
RETURNS
REVOKE
RIGHT
RLIKE
RTREE
SELECT
SET
SHOW
SMALLINT
SOME
SONAME
SPATIAL
SQL_BIG_RESULT
SQL_CALC_FOUND_ROWS
SQL_SMALL_RESULT
SSL
STARTING
STRAIGHT_JOIN
STRIPED
TABLE
TABLES
TERMINATED
THEN
TINYBLOB
TINYINT
TINYTEXT
TO
TRAILING
TRUE
TYPES
UNION
UNIQUE
UNLOCK
UNSIGNED
UPDATE
USAGE
USE
USER_RESOURCES
USING
VALUES
VARBINARY
VARCHAR
VARCHARACTER
VARYING
WARNINGS
WHEN
WHERE
WITH
WRITE
XOR
YEAR_MONTH
ZEROFILL</a:TextTargetItem.Value>
<a:Comment>Reserved words</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o37">
<a:Name>ListOperators</a:Name>
<a:TextTargetItem.Value>=
!=
&lt;&gt;
&lt;=
&lt;
&gt;=
&gt;
&lt;=&gt;
not
!
or
||
xor
and
&amp;&amp;
|
&amp;
^
&lt;&lt;
&gt;&gt;
~
in
not in
between
not between
like
not like
is null
is not null
isnull
ifnull
nullif
if
case
coalesce
interval</a:TextTargetItem.Value>
<a:Comment>List of operators for comparing values, boolean, and various semantic operators</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o38">
<a:Name>NumberFunc</a:Name>
<a:TextTargetItem.Value>abs)
sign()
mod() 
floor() 
ceiling() 
round()
exp()
ln()
log() 
log2()
log10()
pow()
power() 
sqrt()
pi() 
cos()
sin()
tan()
acos()
asin() 
atan()
atan2()
cot()
rand()
least()
greatest() 
degrees()
radians() 
truncate()
bit_count()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used on numbers</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o39">
<a:Name>DateFunc</a:Name>
<a:TextTargetItem.Value>dayofweek()
weekday()
dayofmonth() 
dayofyear() 
month()
dayname()
monthname() 
quarter()
week() 
year()
yearweek() 
hour() 
minute()
second()
period_add() 
period_diff() 
date_add() 
date_sub() 
adddate() 
subdate() 
extract()
to_days() 
from_days() 
date_format() 
time_format() 
curdate()
current_date
curtime()
current_time 
now()
sysdate()
current_timestamp 
unix_timestamp()
from_unixtime() 
sec_to_time() 
time_to_sec() </a:TextTargetItem.Value>
<a:Comment>List of SQL functions for dates</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o40">
<a:Name>CharFunc</a:Name>
<a:TextTargetItem.Value>ascii()
ord()
conv()
bin()
oct()
hex()
char()
concat()
concat_ws()
length()
octet_length()
char_length()
character_length()
bit_lenght()
locate()
position()
instr()
lpad()
rpad()
left()
right()
substring()
mid()
substring_index()
ltrim()
rtrim()
trim()
soundex()
space()
replace()
repeat()
reverse()
insert()
elt()
field()
find_in_set()
make_set()
export_set()
lcase()
lower()
ucase()
upper()
load_file()
quote()
strcmp()
match()
</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for characters and strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o41">
<a:Name>GroupFunc</a:Name>
<a:TextTargetItem.Value>count()
avg()
min()
max()
sum()
variance()
std()
stddev()
bit_or()
bit_and()


</a:TextTargetItem.Value>
<a:Comment>List of SQL functions to use with group keywords.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o42">
<a:Name>ConvertFunc</a:Name>
<a:Comment>List of SQL functions used to convert values between hex and integer and handling strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o43">
<a:Name>OtherFunc</a:Name>
<a:TextTargetItem.Value>database()
user()
system_user()
session_user() 
current_user()
password() 
old_password()
encrypt() 
encode() 
decode() 
md5()
sha1()
sha2()
aes_encrypt()
aes_decrypt()
des_encrypt()
des_decrypt()
last_insert_id() 
format()
version() 
connection_id() 
get_lock() 
release_lock() 
is_free_lock()
benchmark() 
inet_ntoa() 
inet_aton()
master_pos_wait()
found_rows()
</a:TextTargetItem.Value>
<a:Comment>List of other SQL functions</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o44">
<a:Name>Objects</a:Name>
<a:Comment>Contains sub-categories for each type of object in the database, for example: Table, or Reference. Each sub-category contains entries whose values define database commands and object-related characteristics</a:Comment>
<c:Categories>
<o:TargetCategory Id="o45">
<a:Name>Table</a:Name>
<a:Code>TABL</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLE&quot;        // generated code of the table
   &quot;TNAME&quot;        // name of the table
   &quot;TCODE&quot;        // code of the table
   &quot;TLABL&quot;        // comment of the table
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;TABLDEFN&quot;     // complete body of the table definition. Contains definition of columns, checks and keys
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o46">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o47">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create [%Temporary%?temporary ]table[%R%?[ if not exists]] [%Schema%.]%TABLE%
(
   %TABLDEFN%
)
[comment = &quot;%TLABL%&quot;
][%OPTIONS%]
</a:TextTargetItem.Value>
<a:Comment>Command for creating a table. Example: create table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o48">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>type = %s : list = BDB | HEAP | ISAM | InnoDB | MERGE | MRG_MYISAM | MYISAM, default = ISAM
auto_increment = %d
avg_row_length = %d
checksum = %d : list = 0 | 1, default = 0
min_rows = %d
max_rows = %d
pack_keys = %d : list = 0 | 1 | default, default = default
password = %s
delay_key_write = %d : list = 0 | 1, default = 0
row_format = %s : list = default | dynamic | static | compressed, default = default
raid_type = %d : list = 1 | striped | raid0
raid_chunks = %d
raid_chunksize = %d
union = %s
insert_method = %s: list = no | first | last, default = no
data directory = %s
index directory = %s</a:TextTargetItem.Value>
<a:Comment>Available options for creating a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o49">
<a:Name>TableComment</a:Name>
<a:Comment>Command for adding a table comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o50">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop table if exists [%Schema%.]%TABLE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table. Example: drop table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o51">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>rename table %OLDTABL% to %NEWTABL%</a:TextTargetItem.Value>
<a:Comment>Command for renaming a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o52">
<a:Name>AlterTableHeader</a:Name>
<a:Comment>Alter table header</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o53">
<a:Name>AlterTableFooter</a:Name>
<a:Comment>Alter table footer</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o54">
<a:Name>DefineTableCheck</a:Name>
<a:TextTargetItem.Value>check (%.A:CONSTRAINT%)</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script of table check constraints</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o55">
<a:Name>Enable</a:Name>
<a:Comment>Table allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o56">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{Schema, TABLE}

select
   t.table_schema,
   t.table_name
from
   information_schema.tables t
where 1=1
[  and t.table_schema = %.q:CATALOG%]
order by 1</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o57">
<a:Name>Index</a:Name>
<a:Code>INDX</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
   &quot;INDEX&quot;        // generated code of the index
   &quot;INDEXNAME&quot;    // index name
   &quot;INDEXCODE&quot;    // index code
   &quot;UNIQUE&quot;       // keyword &quot;unique&quot; when the index is unique
   &quot;INDEXTYPE&quot;    // index type (available only for a few DBMS)
   &quot;INDEXKEY&quot;     // keywords &quot;primary&quot;, &quot;unique&quot; or &quot;foreign&quot; depending on the index origin
   &quot;CIDXLIST&quot;     // list of index columns. Eg: A asc, B desc, C asc
   &quot;CLUSTER&quot;      // keyword &quot;cluster&quot; when the index is cluster
For index columns, the following system variables are available:
   &quot;ASC&quot;          // keywords &quot;ASC&quot; or &quot;DESC&quot; depending on sort order
   &quot;ISASC&quot;        // TRUE if the index column sort is ascending
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o58">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o59">
<a:Name>MaxColIndex</a:Name>
<a:Comment>Maximum number of columns in an index</a:Comment>
<a:IntegerTargetItem.Value>16</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o60">
<a:Name>Enable</a:Name>
<a:Comment>Index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o61">
<a:Name>EnableAscDesc</a:Name>
<a:Comment>ASC, DESC keywords allowed</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o62">
<a:Name>UniqName</a:Name>
<a:Comment>Unique index name in the database</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o63">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create [%UNIQUE% ][%FullText%?fulltext ]index %INDEX% on %TABLE%
(
   %CIDXLIST%
)</a:TextTargetItem.Value>
<a:Comment>Command for creating an index. Example: create index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o64">
<a:Name>AddColIndex</a:Name>
<a:TextTargetItem.Value>%COLUMN%</a:TextTargetItem.Value>
<a:Comment>Command for defining an index column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o65">
<a:Name>Options</a:Name>
<a:Comment>Default options for creating an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o66">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop index %INDEX% on %TABLE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping an index. Example: drop index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o67">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{TABLE ID, INDEX ID, FullText ID, CIDXLIST ...}

select 
   x.table_name,
   x.index_name,
   if(x.index_type = &#39;FULLTEXT&#39;, &#39;true&#39;, &#39;&#39;),
   x.column_name
from
   information_schema.statistics x
where not exists (select 1 from information_schema.table_constraints k where 
                 k.constraint_name = x.index_name
          and k.constraint_schema = x.index_schema
          and k.table_name = x.table_name)
[  and x.table_name = %.q:TABLE%]</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o68">
<a:Name>Column</a:Name>
<a:Code>COLN</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for columns)
   &quot;COLUMN&quot;       // generated code of the column
   &quot;COLNNO&quot;       // position of the column in the list of columns of the table
   &quot;COLNNAME&quot;     // name of the column
   &quot;COLNCODE&quot;     // code of the column
   &quot;PRIMARY&quot;      // keyword &quot;primary&quot; if the column is primary
   &quot;ISPKEY&quot;       // TRUE if the column is part of the primary key
   &quot;FOREIGN&quot;      // TRUE if the column is part of one foreign key
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o69">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o70">
<a:Name>EnableDefault</a:Name>
<a:Comment>Default values allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o71">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>%20:COLUMN% [%National%?national ]%DATATYPE%[%Unsigned%? unsigned][%ZeroFill%? zerofill][ [.O:[character set][charset]] %CharSet%][.Z:[ %NOTNULL%][%IDENTITY%? auto_increment:[ default %DEFAULT%]][ comment %.q:@OBJTLABL%]]</a:TextTargetItem.Value>
<a:Comment>Command for defining a table column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o72">
<a:Name>ColumnComment</a:Name>
<a:Comment>Command for adding a column comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o73">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   change column %OLDCOLN% %NEWCOLN% %DATATYPE%[ %NOTNULL%][ default %DEFAULT%]</a:TextTargetItem.Value>
<a:Comment>Command for renaming a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o74">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   add %COLUMN% [%National%?national ]%DATATYPE%[%Unsigned%? unsigned][%ZeroFill%? zerofill][ [.O:[character set][charset]] %CharSet%][.Z:[ %NOTNULL%][%IDENTITY%? auto_increment:[ default %DEFAULT%]][ comment %.q:@OBJTLABL%]]</a:TextTargetItem.Value>
<a:Comment>Command for adding a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o75">
<a:Name>ModifyColumn</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   modify column %COLUMN% %DATATYPE% [%NOTNULL%] [default %DEFAULT%][%IDENTITY% ? AUTO_INCREMENT:]</a:TextTargetItem.Value>
<a:Comment>Command for modifying a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o76">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   drop column %COLUMN%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o77">
<a:Name>Enable</a:Name>
<a:Comment>Column allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o78">
<a:Name>ModifyColnDflt</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   alter column %COLUMN%[%DEFAULT% ? set default %DEFAULT%: drop default]</a:TextTargetItem.Value>
<a:Comment>Command for modifying a column default in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o79">
<a:Name>EnableIdentity</a:Name>
<a:Comment>Identity keyword entry support. Identity columns are serial counters maintains by the database</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o80">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{TABLE, COLUMN, DATATYPE, NOTNULL, DEFAULT, IDENTITY, COMMENT, National, Unsigned, ZeroFill}

select 
   c.table_name,
   c.column_name,
   replace(replace(lower(c.column_type), &#39; unsigned&#39;, &#39;&#39;), &#39; zerofill&#39;, &#39;&#39;),
   case(c.is_nullable) when &#39;NO&#39; then &#39;notnull&#39; else &#39;null&#39; end,
   c.column_default,
   if(c.column_default is null, if(lower(c.extra) = &#39;auto_increment&#39;, &#39;identity&#39;, &#39;&#39;), &#39;&#39;),
   c.column_comment,
   case (ifnull(c.character_set_name, &#39;-&#39;)) when &#39;-&#39; then null when &#39;utf8&#39; then &#39;true&#39; else &#39;false&#39; end,
   if(InStr(lower(c.column_type), &#39; unsigned&#39;)=0, &#39;&#39;, &#39;true&#39;),
   if(InStr(lower(c.column_type), &#39; zerofill&#39;)=0, &#39;&#39;, &#39;true&#39;)
from
   information_schema.columns c
[where c.table_name = %.q:TABLE%]
order by
   1, c.ordinal_position</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:IntegerTargetItem Id="o81">
<a:Name>MaxConstLen</a:Name>
<a:Comment>Maximum constraint name length</a:Comment>
<a:IntegerTargetItem.Value>30</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o82">
<a:Name>EnableOption</a:Name>
<a:Comment>Physical options allowed  YES/NO</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TargetCategory Id="o83">
<a:Name>Reference</a:Name>
<a:Code>REFR</a:Code>
<a:Comment>The following system variables are available:
   &quot;REFR&quot;         // generated code of the reference
   &quot;REFNAME&quot;      // reference name
   &quot;PARENT&quot;       // generated code of the parent table
   &quot;PNAME&quot;        // name of the parent table
   &quot;PCODE&quot;        // code of the parent table
   &quot;CHILD&quot;        // generated code of the reference
   &quot;CNAME&quot;        // name of the child table
   &quot;CCODE&quot;        // code of the child table
   &quot;PQUALIFIER&quot;   // qualifier of the parent table. See QUALIFIER
   &quot;CQUALIFIER&quot;   // qualifier of the child table. See QUALIFIER
   &quot;REFRNAME&quot;     // Reference name
   &quot;REFRCODE&quot;     // Reference code
   &quot;FKCONSTRAINT&quot; // Reference constraint name (foreign key)
   &quot;PKCONSTRAINT&quot; // constraint name of the parent key used to reference object
   &quot;CKEYCOLUMNS&quot;  // list of parent key columns. Eg: C1, C2, C3
   &quot;FKEYCOLUMNS&quot;  // list of child foreign key columns. Eg:
   &quot;UPDCONST&quot;     // Update declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;DELCONST&quot;     // Delete declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;MINCARD&quot;      // Min cardinality
   &quot;MAXCARD&quot;      // Max cardinality
   &quot;POWNER&quot;       // Parent table owner
   &quot;COWNER&quot;       // child table owner
   &quot;CHCKONCMMT&quot;   // TRUE when check on commit is selected on the reference (ASA 6.0 specific)

For reference joins (couple of column in a reference),
the following system variables are available:
   &quot;CKEYCOLUMN&quot;   // generated code of the parent table column (primary key)
   &quot;FKEYCOLUMN&quot;   // generated code of the child table column (foreign key)
   &quot;PK&quot;           // primary key column generated code
   &quot;PKNAME&quot;       // primary key column name
   &quot;FK&quot;           // foreign key column generated code
   &quot;FKNAME&quot;       // foreign key column name
   &quot;AK&quot;           // alternate key column code (same as PK)
   &quot;AKNAME&quot;       // alternate key column name (same as PKNAME)
   &quot;COLTYPE&quot;      // primary column column datatype
   &quot;DEFAULT&quot;      // foreign key column default value
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o84">
<a:Name>Enable</a:Name>
<a:Comment>References in MySQL are only present as script compatibility with other databases.</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o85">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>[constraint %CONSTNAME% ]foreign key[%R%? %CONSTNAME%] (%FKEYCOLUMNS%)
   references %PARENT%[ (%CKEYCOLUMNS%)][ %ReferenceMatch%][ on delete %DELCONST%][ on update %UPDCONST%]</a:TextTargetItem.Value>
<a:Comment>Command for defining a foreign key</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o86">
<a:Name>FKAutoIndex</a:Name>
<a:Comment>Foreign key is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o87">
<a:Name>DclDelIntegrity</a:Name>
<a:TextTargetItem.Value>NO ACTION 
RESTRICT
CASCADE 
SET NULL 
</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for delete</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o88">
<a:Name>DclUpdIntegrity</a:Name>
<a:TextTargetItem.Value>NO ACTION 
RESTRICT
CASCADE 
SET NULL 
</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for update</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o89">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table %CHILD% add [constraint %CONSTNAME% ]foreign key[%R%? %CONSTNAME%] (%FKEYCOLUMNS%)
      references %PARENT%[ (%CKEYCOLUMNS%)][ %ReferenceMatch%][ on delete %DELCONST%][ on update %UPDCONST%]</a:TextTargetItem.Value>
<a:Comment>Command for adding a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o90">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{CONSTNAME ID, TABLE ID, PARENT ID, FKEYCOLUMNS ..., PKEYCOLUMNS ...}

select 
   f.constraint_name,
   f.table_name,
   c.referenced_table_name,
   concat(c.column_name, &#39;, &#39;),
   concat(c.referenced_column_name, &#39;, &#39;)
from 
   information_schema.table_constraints f,
   information_schema.key_column_usage c
where
   f.constraint_type = &#39;FOREIGN KEY&#39;
   and c.constraint_name = f.constraint_name
   and c.constraint_schema = f.constraint_schema
   and c.table_name = f.table_name
[  and f.table_name = %.q:TABLE%]
order by 1, 2, 3, c.position_in_unique_constraint</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o91">
<a:Name>PKey</a:Name>
<a:Code>PKEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o92">
<a:Name>Enable</a:Name>
<a:Comment>Primary key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o93">
<a:Name>PkAutoIndex</a:Name>
<a:Comment>Primary key is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o94">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for defining a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o95">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   add primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for adding a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o96">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   drop primary key</a:TextTargetItem.Value>
<a:Comment>Command for dropping a primary key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o97">
<a:Name>Key</a:Name>
<a:Code>KEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;COLUMNS&quot;      // List of columns of the key. Eg: &quot;A, B, C&quot;
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o98">
<a:Name>Enable</a:Name>
<a:Comment>UNIQUE constraint allowed for tables</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o99">
<a:Name>UniqConstAutoIndex</a:Name>
<a:Comment>UNIQUE constraint is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o100">
<a:Name>SqlAkeyIndex</a:Name>
<a:Comment>SQL query to obtain the alternate key indexes of a table by ODBC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o101">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>[%ExtUnique%?unique ][.O:[key ][index ]][%CONSTNAME% ](%COLUMNS%)
</a:TextTargetItem.Value>
<a:Comment>Command for defining an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o102">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   add unique [%CONSTNAME% ](%COLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for adding an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o103">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{TABLE ID, CONSTNAME ID, ISPKEY ID, COLUMNS ...}

select 
   k.table_name,
   case(k.constraint_type) when &#39;PRIMARY KEY&#39; then concat(&#39;PK_&#39;, k.table_name) else k.constraint_name end,
   case(k.constraint_type) when &#39;PRIMARY KEY&#39; then &#39;true&#39; else &#39;false&#39; end, 
   concat(c.column_name, &#39;, &#39;)
from
   information_schema.table_constraints k,
   information_schema.key_column_usage c
where
   k.constraint_type in (&#39;PRIMARY KEY&#39;, &#39;UNIQUE&#39;)
   and c.constraint_name = k.constraint_name
   and c.constraint_schema = k.constraint_schema
   and c.table_name = k.table_name
[  and k.table_name = %.q:TABLE%]
order by 1, 2, c.position_in_unique_constraint</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o104">
<a:Name>Database</a:Name>
<a:Code>DTBS</a:Code>
<a:Comment>The following system variables are available:
   &quot;DATABASE&quot;     // generated code of the database
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o105">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create database[%R%?[ if not exists]] %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for creating a database. Example: create database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o106">
<a:Name>Options</a:Name>
<a:Comment>Available options for creating a database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o107">
<a:Name>OpenDatabase</a:Name>
<a:TextTargetItem.Value>use %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for opening a database. Example: open database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o108">
<a:Name>CloseDatabase</a:Name>
<a:Comment>Command for closing a database. Example: close database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o109">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop database if exists %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a database. Example: drop database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o110">
<a:Name>Enable</a:Name>
<a:Comment>Database allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o111">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{DATABASE}

select schema_name from information_schema.schemata</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o112">
<a:Name>EnableManyDatabases</a:Name>
<a:Comment>Many databases allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o113">
<a:Name>View</a:Name>
<a:Comment>The following system variables are available:
   &quot;VIEW&quot;         // generated code of the view
   &quot;VIEWNAME&quot;     // view name
   &quot;VIEWCODE&quot;     // view code
   &quot;VIEWCOLN&quot;     // List of columns of the view. Eg: &quot;A, B, C&quot;
   &quot;SQL&quot;          // SQL text of the view. Eg: Select * from T1
   &quot;VIEWCHECK&quot;    // Keyword &quot;with check option&quot; if selected on the view
   &quot;SCRIPT&quot;       // complete view creation order. Eg: create view V1 as select * from T1
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o114">
<a:Name>Enable</a:Name>
<a:Comment>View allowed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o115">
<a:Name>Create</a:Name>
<a:Comment>Command for creating a view. Example: create view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o116">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a view. Example: drop view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o117">
<a:Name>ViewCheck</a:Name>
<a:Comment>Option for checking a view</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o118">
<a:Name>Domain</a:Name>
<a:Comment>The following system variables are available:
   &quot;DOMAIN&quot;       // generated code of the domain (also available for columns)
SQL Server specific domain system variables:
   &quot;RULENAME&quot;     // name of the rule object associated with the domain
   &quot;DEFAULTNAME&quot;  // name of the default object associated with the domain
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o119">
<a:Name>Enable</a:Name>
<a:Comment>User defined data types allowed</a:Comment>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o120">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>30</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o121">
<a:Name>Create</a:Name>
<a:Comment>Command for creating a user defined data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o122">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a user defined data type</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o123">
<a:Name>User</a:Name>
<a:Code>USER</a:Code>
<a:Comment>The following system variables are available:
   &quot;USER&quot;         // generated code of the user
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o124">
<a:Name>Enable</a:Name>
<a:Comment>User allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o125">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{USER}

select 
   Left(u.grantee, Instr(u.grantee, &quot;@&quot;) - 1)
from 
   information_schema.user_privileges u
where
   u.privilege_type in (&#39;USAGE&#39;, &#39;CREATE&#39;)</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o126">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create user %USER%[ identified by %.q:PASSWORD%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a user</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o127">
<a:Name>DataType</a:Name>
<a:Comment>Contains data type translation entries. These entries list the correspondence between internal data types and the target database data types</a:Comment>
<c:Categories>
<o:MapTargetItem Id="o128">
<a:Name>AmcdDataType</a:Name>
<a:Comment>Data types translation table from internal data types to target database data types.
        %n is the length of the data type
        %s is the size of the data type
        %p is the precision of the data type</a:Comment>
<a:MapTargetItem.Value>&lt;UNDEF&gt;=&lt;Undefined&gt;
A%n=char(%n)
VA%n=varchar(%n)
LA=longtext
LA%n=longtext
LVA=longtext
LVA%n=longtext
BT=tinyint
BT%n=tinyint
SI=smallint
I=int
LI=bigint
N=numeric(8,0)
N%n=numeric(%n,0)
N%s,%p=numeric(%s,%p)
DC=decimal
DC%n=decimal(%n)
DC%s,%p=decimal(%s,%p)
SF=real
F=float
F%n=float(%n)
LF=double
MN=float(8,2)
MN%n=float(%n,0)
MN%s,%p=float(%s,%p)
D=date
T=time
DT=datetime
TS=timestamp
BL=bool
NO=int
NO%n=int(%n)
BIN%n=blob
LBIN=longblob
LBIN%n=longblob
TXT=text
TXT%n=text
MBT=national char(1)
MBT%n=national char(%n)
VMBT=national varchar(255)
VMBT%n=national varchar(%n)
PIC=longblob
PIC%n=longblob
BMP=longblob
BMP%n=longblob
OLE=longblob
OLE%n=longblob
ENUM(%s)=enum(%s)
SET(%s)=set(%s)
*=char(10)</a:MapTargetItem.Value>
<a:List>&lt;UNDEF&gt;
A%n
VA%n
LA
LA%n
LVA
LVA%n
BT
BT%n
SI
I
LI
N
N%n
N%s,%p
DC
DC%n
DC%s,%p
SF
F
F%n
LF
MN
MN%n
MN%s,%p
D
T
DT
TS
BL
NO
NO%n
BIN%n
LBIN
LBIN%n
TXT
TXT%n
MBT
MBT%n
VMBT
VMBT%n
PIC
PIC%n
BMP
BMP%n
OLE
OLE%n
ENUM(%s)
SET(%s)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o129">
<a:Name>PhysDataType</a:Name>
<a:Comment>Data types translation table from target database data types to internal data types.</a:Comment>
<a:MapTargetItem.Value>&lt;Undefined&gt;=&lt;UNDEF&gt;
bit=BT
bit(%n)=BT%n
bool=BL
char=A1
char(%n)=A%n
char(%n) binary=CHAR(%n)
national char(%n)=MBT%n
national char(%n) binary=MBT%n
varchar(%n)=VA%n
varchar(%n) binary=VA%n
national varchar(%n)=VMBT%n
national varchar(%n) binary=VMBT%n
decimal=DC
decimal(%n)=DC%n
decimal(%s,%p)=DC%s,%p
dec=DC
dec(%n)=DC%n
dec(%s,%p)=DC%s,%p
numeric=N
numeric(%n)=N%n
numeric(%s,%p)=N%s,%p
integer=I
integer(%n)=I
int=I
int(%n)=I
tinyint=BT
tinyint(%n)=BT%n
smallint=SI
smallint(%n)=SI
mediumint=I
mediumint(%n)=I
bigint=LI
bigint(%n)=LI
real=SF
real(%s,%p)=SF
float=F
float(%n)=F%n
float(%s,%p)=F%s
double=LF
double(%s,%p)=LF
double precision=LF
double precision(%s,%p)=LF
date=D
time=T
datetime=DT
timestamp=TS
timestamp(%n)=TS
year=D
year(%n)=D
tinyblob=LBIN
tinytext=TXT
blob=LBIN
text=TXT
mediumblob=LBIN
mediumtext=TXT
longblob=LBIN
longtext=TXT
enum(%s)=ENUM(%s)
set(%s)=SET(%s)
*=A10</a:MapTargetItem.Value>
<a:List>&lt;Undefined&gt;
bit
bit(%n)
bool
char
char(%n)
char(%n) binary
national char(%n)
national char(%n) binary
varchar(%n)
varchar(%n) binary
national varchar(%n)
national varchar(%n) binary
decimal
decimal(%n)
decimal(%s,%p)
dec
dec(%n)
dec(%s,%p)
numeric
numeric(%n)
numeric(%s,%p)
integer
integer(%n)
int
int(%n)
tinyint
tinyint(%n)
smallint
smallint(%n)
mediumint
mediumint(%n)
bigint
bigint(%n)
real
real(%s,%p)
float
float(%n)
float(%s,%p)
double
double(%s,%p)
double precision
double precision(%s,%p)
date
time
datetime
timestamp
timestamp(%n)
year
year(%n)
tinyblob
tinytext
blob
text
mediumblob
mediumtext
longblob
longtext
enum(%s)
set(%s)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o130">
<a:Name>PhysDttpSize</a:Name>
<a:Comment>Table of storage sizes of target database data type</a:Comment>
</o:MapTargetItem>
<o:MapTargetItem Id="o131">
<a:Name>PhysOdbcDataType</a:Name>
<a:Comment>Data types translation table from target database data types to ODBC data types.</a:Comment>
<a:MapTargetItem.Value>char=char(1)
int=int(11)
tinyint=tinyint(4)
bool=tinyint(1)
smallint=smallint(6)
mediumint=mediumint(9)
bigint=bigint(20)
decimal=decimal(10,0)
decimal(%n)=decimal(%n,0)
year=year(4)</a:MapTargetItem.Value>
<a:List>char
int
tinyint
bool
smallint
mediumint
bigint
decimal
decimal(%n)
year
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o132">
<a:Name>OdbcPhysDataType</a:Name>
<a:Comment>Data types translation table from ODBC data types to target database data types.</a:Comment>
</o:MapTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:ProfileTargetItem Id="o133">
<a:Name>Profile</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o134">
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o135">
<a:TypePublicName>ExtendedAttributeTypeTargetItem</a:TypePublicName>
<a:Name>Extended Attribute Types</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTypeTargetItem Id="o136">
<a:ObjectID>CC4E9770-FD82-4A12-A934-265A0DF2CC1F</a:ObjectID>
<a:Name>ReferenceMatchType</a:Name>
<a:Comment>Reference match type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTypeTargetItem.ListOfValues>MATCH FULL
MATCH PARTIAL</a:ExtendedAttributeTypeTargetItem.ListOfValues>
</o:ExtendedAttributeTypeTargetItem>
<o:ExtendedAttributeTypeTargetItem Id="o137">
<a:ObjectID>7323C92E-5C24-4E40-8227-6D059042CC89</a:ObjectID>
<a:Name>DatabaseType</a:Name>
<a:Comment>Database types</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTypeTargetItem.Value>ISAM</a:ExtendedAttributeTypeTargetItem.Value>
<a:ExtendedAttributeTypeTargetItem.ListOfValues>BDB
HEAP
ISAM
InnoDB
MERGE
MRG_MYISAM
MYISAM</a:ExtendedAttributeTypeTargetItem.ListOfValues>
</o:ExtendedAttributeTypeTargetItem>
<o:ExtendedAttributeTypeTargetItem Id="o138">
<a:ObjectID>AC77C020-F18D-4645-8248-73E8D7268576</a:ObjectID>
<a:Name>CharSets</a:Name>
<a:Comment>Contains the list of available Character Sets.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTypeTargetItem.ListOfValues>big5
dec8
cp850
hp8
koi8r
latin1
latin2
swe7
ascii
ujis
sjis
hebrew
tis620
euckr
koi8u
gb2312
greek
cp1250
gbk
latin5
armscii8
utf8
ucs2
cp866
keybcs2
macce
macroman
cp852
latin7
cp1251
cp1256
cp1257
binary
geostd8
cp932
eucjpms</a:ExtendedAttributeTypeTargetItem.ListOfValues>
</o:ExtendedAttributeTypeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:TargetCategory>
<o:MetaClassTargetItem Id="o139">
<a:Name>Index</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o140">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o141">
<a:ObjectID>D50A4A6A-409C-4FA2-93F8-666FE6F7615C</a:ObjectID>
<a:Name>FullText</a:Name>
<a:Comment>The index is a full text index</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o142">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:Name>Forms</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o143">
<a:Name>MySQL</a:Name>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Name=&quot;FullText&quot; Caption=&quot;Full-text index&quot; Attribute=&quot;FullText&quot; AttributeID=&quot;{D50A4A6A-409C-4FA2-93F8-666FE6F7615C}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o144">
<a:TypePublicName>CustomCheckTargetItem</a:TypePublicName>
<a:Name>Custom Checks</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CustomCheckTargetItem Id="o145">
<a:Name>Fulltext indexes validity</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensures that a full text index is based on a char column and on a table having the MyISAM type.
Autofix reset the FullText property of the index.</a:HelpMessage>
<a:OutputMessage>The following fulltext indexes have incorrect definition</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   if (CBool(obj.GetExtendedAttribute(&quot;FullText&quot;))) then
      &#39; Having a full text index, we must ensure all columns are
      &#39; char, varchar or text
      dim pCol, sDttp, bOK
      for each pCol in obj.IndexColumns
         if (left(lcase(pCol.Column.Datatype), len(&quot;char&quot;)) &lt;&gt; &quot;char&quot;)             and _
            (left(lcase(pCol.Column.Datatype), len(&quot;varchar&quot;)) &lt;&gt; &quot;varchar&quot;)       and _
            (left(lcase(pCol.Column.Datatype), len(&quot;text&quot;)) &lt;&gt; &quot;text&quot;)             and _
            (left(lcase(pCol.Column.Datatype), len(&quot;mediumtext&quot;)) &lt;&gt; &quot;mediumtext&quot;) and _
            (left(lcase(pCol.Column.Datatype), len(&quot;longtext&quot;)) &lt;&gt; &quot;longtext&quot;)     and _
            (left(lcase(pCol.Column.Datatype), len(&quot;tinytext&quot;)) &lt;&gt; &quot;tinytext&quot;) then
            %Check% = false
            exit function
         end if
      next
      &#39; good. Now we must check table has type=MyISAM
      dim sOpts : sOpts = lcase(replace(obj.Table.PhysicalOptions, &quot; &quot;, &quot;&quot;))
      if (InStr(sOpts, &quot;type=myisam&quot;) = 0) then
         %Check% = false
         exit function
      end if
   end if
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Autofix will uncheck the &quot;Fulltext&quot; property

   obj.SetExtendedAttribute &quot;FullText&quot;, False
   outmsg = &quot;index &quot; &amp; obj.Table.Name &amp; &quot;.&quot; &amp; obj.Name &amp; &quot; is no longer a Full-text index&quot;

   %Fix% = True
End Function</a:AutoFixScrpt>
<a:EnableAutoFix>1</a:EnableAutoFix>
</o:CustomCheckTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o146">
<a:Name>Reference</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o147">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o148">
<a:ObjectID>208169ED-E14F-4B04-93BD-2FE48112A769</a:ObjectID>
<a:Name>ReferenceMatch</a:Name>
<a:Comment>Reference match type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>-1</a:ExtendedAttributeTargetItem.DataType>
<c:ExtendedAttributeType>
<o:ExtendedAttributeTypeTargetItem Ref="o136"/>
</c:ExtendedAttributeType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o149">
<a:Name>Table</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o150">
<a:TypePublicName>CustomCheckTargetItem</a:TypePublicName>
<a:Name>Custom Checks</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CustomCheckTargetItem Id="o151">
<a:Name>Table storage type</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensures that the table has the correct storage type.</a:HelpMessage>
<a:OutputMessage>The following tables have invalid storage type:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   %Check% = True
   Dim dbType
   dbType = obj.Model.GetExtendedAttribute(&quot;DatabaseType&quot;)
   output &quot;type = &quot; + dbType
   If dbType &lt;&gt; &quot;&quot; Then
      If (InStr(1, obj.PhysicalOptions, &quot;type=&quot; + dbType, 1) = 0) and (InStr(1, obj.PhysicalOptions, &quot;type = &quot; + dbType, 1) = 0) Then
         %Check% = False
      End If
   End If
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   Dim dbType
   dbType = obj.Model.GetExtendedAttribute(&quot;DatabaseType&quot;)
   obj.PhysicalOptions = &quot;type = &quot; + dbType + &quot; &quot; + obj.PhysicalOptions
   outmsg = &quot;Add type = &quot; + dbType + &quot; in physical options&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
<a:DefaultAutoFixExecution>1</a:DefaultAutoFixExecution>
<a:EnableAutoFix>1</a:EnableAutoFix>
</o:CustomCheckTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o152">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o153">
<a:ObjectID>31D066BE-2F61-4B4D-B7B4-230D38F22B99</a:ObjectID>
<a:Name>Temporary</a:Name>
<a:Comment>Used to create a  temporary table. A temporary table is visible only to the current connection, and is dropped automatically when the connection is closed.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o154">
<a:ObjectID>811818B1-0FD6-4FA0-843C-C06C679470C6</a:ObjectID>
<a:Name>Schema</a:Name>
<a:Comment>Defines the database the table belongs to.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o155">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:Name>Forms</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o156">
<a:Name>MySQL</a:Name>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Name=&quot;Temporary&quot; Caption=&quot;Temporary table&quot; Attribute=&quot;Temporary&quot; AttributeID=&quot;{31D066BE-2F61-4B4D-B7B4-230D38F22B99}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout1&quot;   &gt;
      &lt;ExtendedAttribute Name=&quot;Schema&quot; Caption=&quot;Schema&quot; Attribute=&quot;Schema&quot; AttributeID=&quot;{811818B1-0FD6-4FA0-843C-C06C679470C6}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
      &lt;CustomMethod Name=&quot;PickSchema&quot; Caption=&quot;...&quot; Method=&quot;PickSchema&quot; /&gt;
   &lt;/HorizontalLayout&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o157">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:Name>Methods</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o158">
<a:Name>PickSchema</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)

   Dim pModel : Set pModel = obj.Model
   If (pModel is Nothing) then Exit Sub

   Dim pSelct : Set pSelct = pModel.CreateSelection
   if (pSelct is Nothing) then
      output &quot;Unable to create a selection...&quot;
      exit sub
   end if
   
   Dim pDB : set pDB = pSelct.ShowObjectPicker (&quot;Database&quot;, &quot;&quot;, &quot;Select a schema from the list&quot;, False)
   if (pDB is Nothing) then
      output &quot;Schema selection cancelled or no Database defined in the model&quot;
   else
      obj.SetExtendedAttribute &quot;Schema&quot;, pDB.Code
   End If
   pSelct.Delete
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o159">
<a:Name>Model</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o160">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o161">
<a:ObjectID>6EBD0427-31BE-44D4-BA6D-77622CBC4F1E</a:ObjectID>
<a:Name>DatabaseType</a:Name>
<a:Comment>Database type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>-1</a:ExtendedAttributeTargetItem.DataType>
<c:ExtendedAttributeType>
<o:ExtendedAttributeTypeTargetItem Ref="o137"/>
</c:ExtendedAttributeType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o162">
<a:Name>Key</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o163">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o164">
<a:ObjectID>D1C795B8-8F7B-4AA7-A240-85C5B737C543</a:ObjectID>
<a:Name>ExtUnique</a:Name>
<a:Comment>TRUE if the key is unique</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o165">
<a:Name>Column</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o166">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o167">
<a:ObjectID>4A2BD2F3-4A8A-4421-8A48-A8029BDA28E8</a:ObjectID>
<a:Name>Unsigned</a:Name>
<a:Comment>Indicates negative values are not allowed for the column.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o168">
<a:ObjectID>4EC131E7-C7D4-4E04-B6F6-A6BF9CCF838C</a:ObjectID>
<a:Name>ZeroFill</a:Name>
<a:Comment>When displayed, the default padding of spaces is replaced with zeros. For example, for a column declared as INT(5) ZEROFILL, a value of 4 is retrieved as 00004.
If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o169">
<a:ObjectID>9C949EAB-FF87-446D-938C-8F03A4ABDC8E</a:ObjectID>
<a:Name>National</a:Name>
<a:Comment>A way to indicate that a CHAR column should use UTF8 character set.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o170">
<a:ObjectID>9480E6AA-83DD-4AA7-9C91-E48F709C29D9</a:ObjectID>
<a:Name>CharSet</a:Name>
<a:Comment>Character set (set of symbols and encodings.)</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>-1</a:ExtendedAttributeTargetItem.DataType>
<c:ExtendedAttributeType>
<o:ExtendedAttributeTypeTargetItem Ref="o138"/>
</c:ExtendedAttributeType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o171">
<a:ObjectID>B314652C-DD43-4F81-8524-6F97A1BAACBA</a:ObjectID>
<a:Name>Collate</a:Name>
<a:Comment>Collation (set of rules for comparing characters in a character set.)</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o172">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:Name>Forms</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o173">
<a:Name>MySQL</a:Name>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;GroupBox Name=&quot;GroupBox1&quot; Caption=&quot;Numerics&quot;   ControlAsLabel=&quot;No&quot; &gt;
      &lt;ExtendedAttribute Name=&quot;ZeroFill&quot; Caption=&quot;Retrieve with leading zeros&quot; Attribute=&quot;ZeroFill&quot; AttributeID=&quot;{4EC131E7-C7D4-4E04-B6F6-A6BF9CCF838C}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
      &lt;ExtendedAttribute Name=&quot;Unsigned&quot; Caption=&quot;Unsigned&quot; Attribute=&quot;Unsigned&quot; AttributeID=&quot;{4A2BD2F3-4A8A-4421-8A48-A8029BDA28E8}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
   &lt;/GroupBox&gt;
   &lt;GroupBox Name=&quot;GroupBox2&quot; Caption=&quot;Characters&quot;   ControlAsLabel=&quot;No&quot; &gt;
      &lt;ExtendedAttribute Name=&quot;National&quot; Caption=&quot;National&quot; Attribute=&quot;National&quot; AttributeID=&quot;{9C949EAB-FF87-446D-938C-8F03A4ABDC8E}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
      &lt;ExtendedAttribute Name=&quot;CharSet&quot; Caption=&quot;Character set&quot; Attribute=&quot;CharSet&quot; AttributeID=&quot;{9480E6AA-83DD-4AA7-9C91-E48F709C29D9}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
      &lt;ExtendedAttribute Name=&quot;Collate&quot; Caption=&quot;Collation&quot; Attribute=&quot;Collate&quot; AttributeID=&quot;{B314652C-DD43-4F81-8524-6F97A1BAACBA}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
   &lt;/GroupBox&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:Comment>List of extended attributes of the column</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o174">
<a:TypePublicName>CustomCheckTargetItem</a:TypePublicName>
<a:Name>Custom Checks</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CustomCheckTargetItem Id="o175">
<a:Name>Datatype attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensures that extended attributes of the column are consistent with its datatype</a:HelpMessage>
<a:OutputMessage>The following columns do not have compatible datatype and attributes:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   %Check% = CheckColumn(obj)
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o176">
<a:Name>auto increment key</a:Name>
<a:Comment>Rules is that the first column of an unique index (or key) must contains the auto_increment column.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensure that the auto_increment column is defined as first column of a table key (unique or primary)</a:HelpMessage>
<a:OutputMessage>The following auto_increment columns must be defined as a key:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   if (obj.Identity) then
      dim bFound : bFound = False
      dim pKey
      for each pKey in obj.Keys
         if (pKey.Columns.Item(0) is obj) then
            bFound = True
            Exit For
         end if
      next
      %Check% = bFound
   else
      %Check% = True
   end if
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Autofix can create a supplementary table key 
   &#39; which only contains the column auto_increment (identity)
   dim pKey : Set pKey = obj.Table.Keys.CreateNew
   pKey.Columns.Add obj
   
   pKey.SetNameAndCode &quot;K&quot; &amp; obj.Name, &quot;K&quot; &amp; obj.Code, True
   outmsg = &quot;Create unique key &quot; &amp; pKey.Name &amp; &quot;(&quot; &amp; pKey.Code &amp; &quot;) for auto_increment column &quot; &amp; obj.DisplayName

   %Fix% = True
End Function</a:AutoFixScrpt>
<a:EnableAutoFix>1</a:EnableAutoFix>
</o:CustomCheckTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
</c:Categories>
</o:ProfileTargetItem>
<o:TargetCategory Id="o177">
<a:Name>Odbc</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the ODBC generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o178">
<a:Name>Objects</a:Name>
<a:Comment>Contains sub-categories for each type of object in the database, for example: Table, or Reference. Each sub-category contains entries whose values define database commands and object-related characteristics</a:Comment>
<c:Categories>
<o:TargetCategory Id="o179">
<a:Name>Qualifier</a:Name>
<a:Comment>Manages the use of qualifier in ODBC reverse engineering</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o180">
<a:Name>Enable</a:Name>
<a:Comment>Allows using the qualifier combo box during ODBC reverse engineering</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o181">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>select schema_name from information_schema.schemata</a:TextTargetItem.Value>
<a:Comment>Query to retrieve qualifier during ODBC reverse engineering</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:DBMS>

</DBMS>
<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" Code="MySQL 3.23" Family="MySQL" Name="MySQL 3.23" signature="XDB_XML" version="11.0.0.0"?>
<!-- do not edit this file -->

<DBMS xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:DBMS Id="o1">
<a:ObjectID>2456E7C3-1F10-4005-BA71-AE5B6498BD36</a:ObjectID>
<a:Name>MySQL 3.23</a:Name>
<a:Code>MySQL 3.23</a:Code>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1026305155</a:ModificationDate>
<a:Modifier>mledier</a:Modifier>
<a:Family>MySQL</a:Family>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined

</a:CheckGlobalScript>
<c:Categories>
<o:TargetCategory Id="o2">
<a:Name>General</a:Name>
<a:Comment>Target DBMS identification</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o3">
<a:Name>SqlSupport</a:Name>
<a:Comment>SQL syntax allowed. This does not impact the script generation, but it impacts the SQL Preview</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o4">
<a:Name>EnableCheck</a:Name>
<a:Comment>Determines if the generation of check parameters is authorized or not</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o5">
<a:Name>Enableconstname</a:Name>
<a:Comment>Determines if constraint names are used during the generation</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o6">
<a:Name>UniqConstName</a:Name>
<a:Comment>Determines if unique constraint names for objects are authorized or not</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o7">
<a:Name>Script</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the Script generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o8">
<a:Name>Sql</a:Name>
<a:Comment>Contains sub-categories Syntax, Format, File and Keywords. Each sub-category contains entries whose values define general syntax for the database</a:Comment>
<c:Categories>
<o:TargetCategory Id="o9">
<a:Name>Syntax</a:Name>
<a:Comment>Contains general parameters for SQL syntax</a:Comment>
<c:Categories>
<o:CharacterTargetItem Id="o10">
<a:Name>Terminator</a:Name>
<a:Comment>End of command character</a:Comment>
<a:CharacterTargetItem.Value>;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o11">
<a:Name>BlockTerminator</a:Name>
<a:Comment>End of block character</a:Comment>
</o:StringTargetItem>
<o:CharacterTargetItem Id="o12">
<a:Name>Delimiter</a:Name>
<a:Comment>Field separation character. Example: col1, col2, col3</a:Comment>
<a:CharacterTargetItem.Value>,</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o13">
<a:Name>Quote</a:Name>
<a:Comment>Character used to enclose string values</a:Comment>
<a:CharacterTargetItem.Value>&#39;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o14">
<a:Name>SqlContinue</a:Name>
<a:Comment>Continuation character</a:Comment>
</o:CharacterTargetItem>
<o:BooleanTargetItem Id="o15">
<a:Name>UseBlockTerm</a:Name>
<a:Comment>Use end of block character by default</a:Comment>
</o:BooleanTargetItem>
<o:StringTargetItem Id="o16">
<a:Name>BlockComment</a:Name>
<a:Comment>Characters used to enclose a multi-line comment</a:Comment>
<a:StringTargetItem.Value>/*   */</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o17">
<a:Name>LineComment</a:Name>
<a:Comment>Characters used to enclose a single line comment</a:Comment>
<a:StringTargetItem.Value>#</a:StringTargetItem.Value>
</o:StringTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o18">
<a:Name>Format</a:Name>
<a:Comment>Contains entries that define script formatting</a:Comment>
<c:Categories>
<o:StringTargetItem Id="o19">
<a:Name>IllegalChar</a:Name>
<a:Comment>Invalid characters for names</a:Comment>
<a:StringTargetItem.Value>&quot; +-*/!=&lt;&gt;&#39;&quot;()&quot;.</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:BooleanTargetItem Id="o20">
<a:Name>UpperCaseOnly</a:Name>
<a:Comment>Uppercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o21">
<a:Name>LowerCaseOnly</a:Name>
<a:Comment>Lowercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o22">
<a:Name>EnableOwnerPrefix</a:Name>
<a:Comment>Object codes can have a prefix made of the object owner code</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o23">
<a:Name>File</a:Name>
<a:Comment>Contains header, footer and usage text entries used during the generation</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o24">
<a:Name>Header</a:Name>
<a:Comment>Header text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o25">
<a:Name>Footer</a:Name>
<a:Comment>Footer text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o26">
<a:Name>EnableMultiFile</a:Name>
<a:Comment>Multi-script allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:StringTargetItem Id="o27">
<a:Name>ScriptExt</a:Name>
<a:Comment>Main script extension in database generation</a:Comment>
<a:StringTargetItem.Value>sql</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o28">
<a:Name>TableExt</a:Name>
<a:Comment>Other scripts extension in database generation</a:Comment>
<a:StringTargetItem.Value>tab</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o29">
<a:Name>StartCommand</a:Name>
<a:Comment>Command for executing a script</a:Comment>
<a:StringTargetItem.Value>mysql&gt; source &lt;file_name&gt;</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:TextTargetItem Id="o30">
<a:Name>Usage1</a:Name>
<a:TextTargetItem.Value>  (1) Start command prompt
  (2) Go to the directory %PATHSCRIPT%
  (3) Start the SQL interpreter:
        mysql.exe
  (4) Run the database creation script:
        mysql&gt; source %NAMESCRIPT%</a:TextTargetItem.Value>
<a:Comment>Usage for a single script in database generation</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o31">
<a:Name>Usage2</a:Name>
<a:TextTargetItem.Value>  (1) Start command prompt
  (2) Go to the directory %PATHSCRIPT%
  (3) Start the SQL interpreter:
        mysql.exe
  (4) Run the database creation scripts:
        mysql&gt; source &lt;script_file_name&gt;</a:TextTargetItem.Value>
<a:Comment>Usage for multiple scripts in database generation</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o32">
<a:Name>Keywords</a:Name>
<a:Comment>Contains the list of reserved words and functions available in SQL</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o33">
<a:Name>ReservedDefault</a:Name>
<a:TextTargetItem.Value>NULL</a:TextTargetItem.Value>
<a:Comment>Reserved default values</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o34">
<a:Name>Commit</a:Name>
<a:Comment>Command for validating the transaction by OBDC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o35">
<a:Name>ReservedWord</a:Name>
<a:TextTargetItem.Value>action
add
aggregate
all
alter
after
and
as
asc
avg
avg_row_length
auto_increment
between
bigint
bit
binary
blob
bool
both
by
cascade
case
char
character
change
check
checksum
column
columns
comment
constraint
create
cross
current_date
current_time
current_timestamp
data
database
databases
date
datetime
day
day_hour
day_minute
day_second
dayofmonth
dayofweek
dayofyear
dec
decimal
default
delayed
delay_key_write
delete
desc
describe
distinct
distinctrow
double
drop
end
else
escape
escaped
enclosed
enum
explain
exists
fields
file
first
float
float4
float8
flush
foreign
from
for
full
function
global
grant
grants
group
having
heap
high_priority
hour
hour_minute
hour_second
hosts
identified
ignore
in
index
infile
inner
insert
insert_id
int
integer
interval
int1
int2
int3
int4
int8
into
if
is
isam
join
key
keys
kill
last_insert_id
leading
left
length
like
lines
limit
load
local
lock
logs
long
longblob
longtext
low_priority
max
max_rows
match
mediumblob
mediumtext
mediumint
middleint
min_rows
minute
minute_second
modify
month
monthname
myisam
natural
numeric
no
not
null
on
optimize
option
optionally
or
order
outer
outfile
pack_keys
partial
password
precision
primary
procedure
process
processlist
privileges
read
real
references
reload
regexp
rename
replace
restrict
returns
revoke
rlike
row
rows
second
select
set
show
shutdown
smallint
soname
sql_big_tables
sql_big_selects
sql_low_priority_updates
sql_log_off
sql_log_update
sql_select_limit
sql_small_result
sql_big_result
sql_warnings
straight_join
starting
status
string
table
tables
temporary
terminated
text
then
time
timestamp
tinyblob
tinytext
tinyint
trailing
to
type
use
user
using
unique
unlock
unsigned
update
usage
values
varchar
variables
varying
varbinary
view
with
write
when
where
year
year_month
zerofill
</a:TextTargetItem.Value>
<a:Comment>Reserved words</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o36">
<a:Name>ListOperators</a:Name>
<a:TextTargetItem.Value>=
!=
&lt;&gt;
&gt;
!&gt;
&lt;
!&lt;
&gt;=
&lt;=
*=
=*
not
~
||
in
not in
between
not between
like
not like
is
is not
isnull
ifnull
nullif
coalesce
interval</a:TextTargetItem.Value>
<a:Comment>List of operators for comparing values, boolean, and various semantic operators</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o37">
<a:Name>NumberFunc</a:Name>
<a:TextTargetItem.Value>abs)
sign()
mod() 
floor() 
ceiling() 
round()
exp()
log() 
log10()
pow()
power() 
sqrt()
pi() 
cos()
sin()
tan()
acos()
asin() 
atan()
atan2()
cot()
rand()
least()
greatest() 
degrees()
radians() 
truncate()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used on numbers</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o38">
<a:Name>DateFunc</a:Name>
<a:TextTargetItem.Value>dayofweek()
weekday()
dayofmonth() 
dayofyear() 
month()
dayname()
monthname() 
quarter()
week() 
year()
yearweek() 
hour() 
minute()
second()
period_add() 
period_diff() 
date_add() 
date_sub() 
adddate() 
subdate() 
to_days() 
from_days() 
date_format() 
time_format() 
curdate()
current_date
curtime()
current_time 
now()
sysdate()
current_timestamp 
unix_timestamp()
unix_timestamp() 
from_unixtime() 
sec_to_time() 
time_to_sec() </a:TextTargetItem.Value>
<a:Comment>List of SQL functions for dates</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o39">
<a:Name>CharFunc</a:Name>
<a:TextTargetItem.Value>database()
user()
system_user()
session_user() 
password() 
encrypt() 
encode() 
decode() 
md5()
last_insert_id() 
format()
version() 
connection_id() 
get_lock() 
release_lock() 
benchmark() 
inet_ntoa() </a:TextTargetItem.Value>
<a:Comment>List of SQL functions for characters and strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o40">
<a:Name>GroupFunc</a:Name>
<a:TextTargetItem.Value>avg()
count()
list()
max()
min()
sum()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions to use with group keywords.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o41">
<a:Name>ConvertFunc</a:Name>
<a:TextTargetItem.Value>cast()
convert()
hextoint()
inttohex()
string()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used to convert values between hex and integer and handling strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o42">
<a:Name>OtherFunc</a:Name>
<a:TextTargetItem.Value>argn()
coalesce()
connection_property()
datalength()
db_id()
db_name()
db_property()
estimate()
estimate_source()
experience_estimate()
ifnull()
index_estimate()
isnull()
next_connection()
next_database()
number(*)
plan()
property()
property_name()
property_number()
property_description()
sqlcode
sqlstate
traceback(*)
user</a:TextTargetItem.Value>
<a:Comment>List of other SQL functions</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o43">
<a:Name>Objects</a:Name>
<a:Comment>Contains sub-categories for each type of object in the database, for example: Table, or Reference. Each sub-category contains entries whose values define database commands and object-related characteristics</a:Comment>
<c:Categories>
<o:TargetCategory Id="o44">
<a:Name>Table</a:Name>
<a:Code>TABL</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLE&quot;        // generated code of the table
   &quot;TNAME&quot;        // name of the table
   &quot;TCODE&quot;        // code of the table
   &quot;TLABL&quot;        // comment of the table
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;TABLDEFN&quot;     // complete body of the table definition. Contains definition of columns, checks and keys
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o45">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o46">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create table[%R%?[ if not exists]] %TABLE%
(
   %TABLDEFN%
)
%OPTIONS%</a:TextTargetItem.Value>
<a:Comment>Command for creating a table. Example: create table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o47">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>type = %s : list = ISAM | MYISAM | HEAP | BDB, default = ISAM
auto_increment = %d
avg_row_length = %d
checksum = %d : list = 0 | 1, default = 0
min_rows = %d
max_rows = %d
pack_keys = %d : list = 0 | 1, default = 0
delay_key_write = %d : list = 0 | 1, default = 0
row_format = %s : list = default | dynamic | static | compressed, default = default
raid_type = %d : list = 1 | striped | raid0
raid_chunks = %d
raid_chunksize = %d
comment = %s
password = %s</a:TextTargetItem.Value>
<a:Comment>Available options for creating a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o48">
<a:Name>TableComment</a:Name>
<a:Comment>Command for adding a table comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o49">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop table if exists %TABLE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table. Example: drop table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o50">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>alter table %OLDTABL% rename as %NEWTABL%</a:TextTargetItem.Value>
<a:Comment>Command for renaming a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o51">
<a:Name>AlterTableHeader</a:Name>
<a:Comment>Alter table header</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o52">
<a:Name>AlterTableFooter</a:Name>
<a:Comment>Alter table footer</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o53">
<a:Name>DefineTableCheck</a:Name>
<a:Comment>Allows to customize the script of table check constraints</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o54">
<a:Name>Enable</a:Name>
<a:Comment>Table allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o55">
<a:Name>Index</a:Name>
<a:Code>INDX</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
   &quot;INDEX&quot;        // generated code of the index
   &quot;INDEXNAME&quot;    // index name
   &quot;INDEXCODE&quot;    // index code
   &quot;UNIQUE&quot;       // keyword &quot;unique&quot; when the index is unique
   &quot;INDEXTYPE&quot;    // index type (available only for a few DBMS)
   &quot;INDEXKEY&quot;     // keywords &quot;primary&quot;, &quot;unique&quot; or &quot;foreign&quot; depending on the index origin
   &quot;CIDXLIST&quot;     // list of index columns. Eg: A asc, B desc, C asc
   &quot;CLUSTER&quot;      // keyword &quot;cluster&quot; when the index is cluster
For index columns, the following system variables are available:
   &quot;ASC&quot;          // keywords &quot;ASC&quot; or &quot;DESC&quot; depending on sort order
   &quot;ISASC&quot;        // TRUE if the index column sort is ascending
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o56">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o57">
<a:Name>MaxColIndex</a:Name>
<a:Comment>Maximum number of columns in an index</a:Comment>
<a:IntegerTargetItem.Value>16</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o58">
<a:Name>Enable</a:Name>
<a:Comment>Index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o59">
<a:Name>EnableAscDesc</a:Name>
<a:Comment>ASC, DESC keywords allowed</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o60">
<a:Name>UniqName</a:Name>
<a:Comment>Unique index name in the database</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o61">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create [%UNIQUE% ]index %INDEX% on %TABLE%
(
   %CIDXLIST%
)</a:TextTargetItem.Value>
<a:Comment>Command for creating an index. Example: create index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o62">
<a:Name>AddColIndex</a:Name>
<a:TextTargetItem.Value>%COLUMN%</a:TextTargetItem.Value>
<a:Comment>Command for defining an index column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o63">
<a:Name>Options</a:Name>
<a:Comment>Default options for creating an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o64">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop index %INDEX% on %TABLE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping an index. Example: drop index %INDEX%</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o65">
<a:Name>Column</a:Name>
<a:Code>COLN</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for columns)
   &quot;COLUMN&quot;       // generated code of the column
   &quot;COLNNO&quot;       // position of the column in the list of columns of the table
   &quot;COLNNAME&quot;     // name of the column
   &quot;COLNCODE&quot;     // code of the column
   &quot;PRIMARY&quot;      // keyword &quot;primary&quot; if the column is primary
   &quot;ISPKEY&quot;       // TRUE if the column is part of the primary key
   &quot;FOREIGN&quot;      // TRUE if the column is part of one foreign key
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o66">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o67">
<a:Name>EnableDefault</a:Name>
<a:Comment>Default values allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o68">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>%30:COLUMN% %30:DATATYPE%[ %NOTNULL%][ default %DEFAULT%][%R%?[ %NOTNULL% ]][%IDENTITY% ? AUTO_INCREMENT:]</a:TextTargetItem.Value>
<a:Comment>Command for defining a table column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o69">
<a:Name>ColumnComment</a:Name>
<a:Comment>Command for adding a column comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o70">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   change column %OLDCOLN% %NEWCOLN% %DATATYPE%[ %NOTNULL%][ default %DEFAULT%]</a:TextTargetItem.Value>
<a:Comment>Command for renaming a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o71">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   add column %COLUMN% %DATATYPE%[ %NOTNULL%][ default %DEFAULT%]</a:TextTargetItem.Value>
<a:Comment>Command for adding a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o72">
<a:Name>ModifyColumn</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   modify column %COLUMN% %DATATYPE% [%NOTNULL%] [default %DEFAULT%] </a:TextTargetItem.Value>
<a:Comment>Command for modifying a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o73">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   drop column %COLUMN%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o74">
<a:Name>Enable</a:Name>
<a:Comment>Column allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o75">
<a:Name>ModifyColnDflt</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   alter column %COLUMN%[%DEFAULT% ? set default %DEFAULT%: drop default]</a:TextTargetItem.Value>
<a:Comment>Command for modifying a column default in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o76">
<a:Name>EnableIdentity</a:Name>
<a:Comment>Identity keyword entry support. Identity columns are serial counters maintains by the database</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:IntegerTargetItem Id="o77">
<a:Name>MaxConstLen</a:Name>
<a:Comment>Maximum constraint name length</a:Comment>
<a:IntegerTargetItem.Value>30</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o78">
<a:Name>EnableOption</a:Name>
<a:Comment>Physical options allowed  YES/NO</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TargetCategory Id="o79">
<a:Name>Reference</a:Name>
<a:Code>REFR</a:Code>
<a:Comment>The following system variables are available:
   &quot;REFR&quot;         // generated code of the reference
   &quot;REFNAME&quot;      // reference name
   &quot;PARENT&quot;       // generated code of the parent table
   &quot;PNAME&quot;        // name of the parent table
   &quot;PCODE&quot;        // code of the parent table
   &quot;CHILD&quot;        // generated code of the reference
   &quot;CNAME&quot;        // name of the child table
   &quot;CCODE&quot;        // code of the child table
   &quot;PQUALIFIER&quot;   // qualifier of the parent table. See QUALIFIER
   &quot;CQUALIFIER&quot;   // qualifier of the child table. See QUALIFIER
   &quot;REFRNAME&quot;     // Reference name
   &quot;REFRCODE&quot;     // Reference code
   &quot;FKCONSTRAINT&quot; // Reference constraint name (foreign key)
   &quot;PKCONSTRAINT&quot; // constraint name of the parent key used to reference object
   &quot;CKEYCOLUMNS&quot;  // list of parent key columns. Eg: C1, C2, C3
   &quot;FKEYCOLUMNS&quot;  // list of child foreign key columns. Eg:
   &quot;UPDCONST&quot;     // Update declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;DELCONST&quot;     // Delete declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;MINCARD&quot;      // Min cardinality
   &quot;MAXCARD&quot;      // Max cardinality
   &quot;POWNER&quot;       // Parent table owner
   &quot;COWNER&quot;       // child table owner
   &quot;CHCKONCMMT&quot;   // TRUE when check on commit is selected on the reference (ASA 6.0 specific)

For reference joins (couple of column in a reference),
the following system variables are available:
   &quot;CKEYCOLUMN&quot;   // generated code of the parent table column (primary key)
   &quot;FKEYCOLUMN&quot;   // generated code of the child table column (foreign key)
   &quot;PK&quot;           // primary key column generated code
   &quot;PKNAME&quot;       // primary key column name
   &quot;FK&quot;           // foreign key column generated code
   &quot;FKNAME&quot;       // foreign key column name
   &quot;AK&quot;           // alternate key column code (same as PK)
   &quot;AKNAME&quot;       // alternate key column name (same as PKNAME)
   &quot;COLTYPE&quot;      // primary column column datatype
   &quot;DEFAULT&quot;      // foreign key column default value
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o80">
<a:Name>Enable</a:Name>
<a:Comment>References in MySQL are only present as script compatibility with other databases.</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o81">
<a:Name>PKey</a:Name>
<a:Code>PKEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o82">
<a:Name>Enable</a:Name>
<a:Comment>Primary key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o83">
<a:Name>PkAutoIndex</a:Name>
<a:Comment>Primary key is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o84">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for defining a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o85">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   add primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for adding a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o86">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   drop primary key</a:TextTargetItem.Value>
<a:Comment>Command for dropping a primary key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o87">
<a:Name>Key</a:Name>
<a:Code>KEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;COLUMNS&quot;      // List of columns of the key. Eg: &quot;A, B, C&quot;
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o88">
<a:Name>Enable</a:Name>
<a:Comment>UNIQUE constraint allowed for tables</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o89">
<a:Name>UniqConstAutoIndex</a:Name>
<a:Comment>UNIQUE constraint is auto-indexed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o90">
<a:Name>SqlAkeyIndex</a:Name>
<a:Comment>SQL query to obtain the alternate key indexes of a table by ODBC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o91">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>[%R%? [ [%ExtUnique%?unique] [index] [key] [%CONSTNAME% ](%COLUMNS%) ]
:[%ExtUnique%?unique:key] [%CONSTNAME%] (%COLUMNS%)]</a:TextTargetItem.Value>
<a:Comment>Command for defining an alternate key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o92">
<a:Name>Database</a:Name>
<a:Code>DTBS</a:Code>
<a:Comment>The following system variables are available:
   &quot;DATABASE&quot;     // generated code of the database
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o93">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create database[%R%?[ if not exists]] %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for creating a database. Example: create database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o94">
<a:Name>Options</a:Name>
<a:Comment>Available options for creating a database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o95">
<a:Name>OpenDatabase</a:Name>
<a:TextTargetItem.Value>use %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for opening a database. Example: open database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o96">
<a:Name>CloseDatabase</a:Name>
<a:Comment>Command for closing a database. Example: close database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o97">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop database if exists %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a database. Example: drop database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o98">
<a:Name>Enable</a:Name>
<a:Comment>Database allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o99">
<a:Name>View</a:Name>
<a:Comment>The following system variables are available:
   &quot;VIEW&quot;         // generated code of the view
   &quot;VIEWNAME&quot;     // view name
   &quot;VIEWCODE&quot;     // view code
   &quot;VIEWCOLN&quot;     // List of columns of the view. Eg: &quot;A, B, C&quot;
   &quot;SQL&quot;          // SQL text of the view. Eg: Select * from T1
   &quot;VIEWCHECK&quot;    // Keyword &quot;with check option&quot; if selected on the view
   &quot;SCRIPT&quot;       // complete view creation order. Eg: create view V1 as select * from T1
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o100">
<a:Name>Enable</a:Name>
<a:Comment>View allowed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o101">
<a:Name>Create</a:Name>
<a:Comment>Command for creating a view. Example: create view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o102">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a view. Example: drop view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o103">
<a:Name>ViewCheck</a:Name>
<a:Comment>Option for checking a view</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o104">
<a:Name>Domain</a:Name>
<a:Comment>The following system variables are available:
   &quot;DOMAIN&quot;       // generated code of the domain (also available for columns)
SQL Server specific domain system variables:
   &quot;RULENAME&quot;     // name of the rule object associated with the domain
   &quot;DEFAULTNAME&quot;  // name of the default object associated with the domain
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o105">
<a:Name>Enable</a:Name>
<a:Comment>User defined data types allowed</a:Comment>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o106">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>30</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o107">
<a:Name>Create</a:Name>
<a:Comment>Command for creating a user defined data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o108">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a user defined data type</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o109">
<a:Name>DataType</a:Name>
<a:Comment>Contains data type translation entries. These entries list the correspondence between internal data types and the target database data types</a:Comment>
<c:Categories>
<o:MapTargetItem Id="o110">
<a:Name>AmcdDataType</a:Name>
<a:Comment>Data types translation table from internal data types to target database data types.
        %n is the length of the data type
        %s is the size of the data type
        %p is the precision of the data type</a:Comment>
<a:MapTargetItem.Value>&lt;UNDEF&gt;=&lt;Undefined&gt;
A%n=char(%n)
VA%n=varchar(%n)
LA=longtext
LA%n=longtext
LVA=longtext
LVA%n=longtext
BT=tinyint
BT%n=tinyint
SI=smallint
I=int
LI=bigint
N=numeric(8,0)
N%n=numeric(%n,0)
N%s,%p=numeric(%s,%p)
DC=decimal
DC%n=decimal(%n)
DC%s,%p=decimal(%s,%p)
SF=real
F=float
F%n=float(%n)
LF=double
MN=float(8,2)
MN%n=float(%n,0)
MN%s,%p=float(%s,%p)
D=date
T=time
DT=datetime
TS=timestamp
BL=tinyint(1)
NO=int
NO%n=int(%n)
BIN%n=blob
LBIN=longblob
LBIN%n=longblob
TXT=text
TXT%n=text
MBT=national char(1)
MBT%n=national char(%n)
VMBT=national varchar(255)
VMBT%n=national varchar(%n)
PIC=longblob
PIC%n=longblob
BMP=longblob
BMP%n=longblob
OLE=longblob
OLE%n=longblob
ENUM(%s)=enum(%s)
SET(%S)=set(%s)
*=CHAR(10)</a:MapTargetItem.Value>
<a:List>&lt;UNDEF&gt;
A%n
VA%n
LA
LA%n
LVA
LVA%n
BT
BT%n
SI
I
LI
N
N%n
N%s,%p
DC
DC%n
DC%s,%p
SF
F
F%n
LF
MN
MN%n
MN%s,%p
D
T
DT
TS
BL
NO
NO%n
BIN%n
LBIN
LBIN%n
TXT
TXT%n
MBT
MBT%n
VMBT
VMBT%n
PIC
PIC%n
BMP
BMP%n
OLE
OLE%n
ENUM(%s)
SET(%S)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o111">
<a:Name>PhysDataType</a:Name>
<a:Comment>Data types translation table from target database data types to internal data types.</a:Comment>
<a:MapTargetItem.Value>&lt;Undefined&gt;=&lt;UNDEF&gt;
char(%n)=A%n
char(%n) binary=CHAR(%n)
national char(%n)=MBT%n
national char(%n) binary=MBT%n
varchar(%n)=VA%n
varchar(%n) binary=VA%n
national varchar(%n)=VMBT%n
national varchar(%n) binary=VMBT%n
decimal=DC
decimal zerofill=DC
decimal(%n) zerofill=DC%n
decimal(%n)=DC%n
decimal(%s,%p)=DC%s,%p
decimal(%s,%p) zerofill=DC%s,%p
numeric(%s,%p)=N%s,%p
numeric(%s,%p) zerofill=N%s,%p
integer=I
integer(%n)=I
integer unsigned=I
integer(%n) unsigned=I
integer zerofill=I
integer(%n) zerofill=I
integer unsigned zerofill=I
integer(%n) unsigned zerofill=I
int=I
int(%n)=I
int unsigned=I
int(%n) unsigned=I
int zerofile=I
int(%n) zerofill=I
int unsigned zerofile=I
int(%n) unsigned zerofile=I
tinyint=BT
tinyint(%n)=BT%n
tinyint unsigned=BT
tinyint(%n) unsigned=BT%n
tinyint zerofill=BT
tinyint(%n) zerofill=BT%n
tinyint unsigned zerofill=BT
tinyint(%n) unsigned zerofill=BT%n
smallint=SI
smallint(%n)=SI
smallint unsigned=SI
smallint(%n) unsigned=SI
smallint zerofill=SI
smallint(%n) zerofill=SI
smallint unsigned zerofill=SI
smallint(%n) unsigned zerofill=SI
mediumint=I
mediumint(%n)=I
mediumint unsigned=I
mediumint(%n) unsigned=I
mediumint zerofill=I
mediumint(%) zerofill=I
mediumint unsigned zerofill=I
mediumint(%n) unsigned zerofill=I
bigint=LI
bigint(%n)=LI
bigint unsigned=LI
bigint(%n) unsigned=LI
bigint zerofill=LI
bigint(%n) zerofill=LI
bigint unsigned zerofill=LI
bigint(%n) unsigned zerofill=LI
real=SF
real(%s,%p)=SF
real zerofill=SF
real(%s,%p) zerofill=SF
float=F
float(%n)=F%n
float(%n) zerofill=F%n
float(%s,%p)=F%s
float zerofill=F
float(%s,%p) zerofill=F%s
double=LF
double(%s,%p)=LF
double zerofill=LF
double(%s,%p) zerofill=LF
double precision=LF
double precision(%s,%p)=LF
double precision zerofill=LF
double precision(%s,%p) zerofill=LF
date=D
time=T
datetime=DT
timestamp=TS
timestamp(%n)=TS
year=D
year(%n)=D
tinyblob=LBIN
tinytext=TXT
blob=LBIN
text=TXT
mediumblob=LBIN
mediumtext=TXT
longblob=LBIN
longtext=TXT
enum(%s)=ENUM(%s)
set(%s)=SET(%s)
*=A10</a:MapTargetItem.Value>
<a:List>&lt;Undefined&gt;
char(%n)
char(%n) binary
national char(%n)
national char(%n) binary
varchar(%n)
varchar(%n) binary
national varchar(%n)
national varchar(%n) binary
decimal
decimal zerofill
decimal(%n) zerofill
decimal(%n)
decimal(%s,%p)
decimal(%s,%p) zerofill
numeric(%s,%p)
numeric(%s,%p) zerofill
integer
integer(%n)
integer unsigned
integer(%n) unsigned
integer zerofill
integer(%n) zerofill
integer unsigned zerofill
integer(%n) unsigned zerofill
int
int(%n)
int unsigned
int(%n) unsigned
int zerofile
int(%n) zerofill
int unsigned zerofile
int(%n) unsigned zerofile
tinyint
tinyint(%n)
tinyint unsigned
tinyint(%n) unsigned
tinyint zerofill
tinyint(%n) zerofill
tinyint unsigned zerofill
tinyint(%n) unsigned zerofill
smallint
smallint(%n)
smallint unsigned
smallint(%n) unsigned
smallint zerofill
smallint(%n) zerofill
smallint unsigned zerofill
smallint(%n) unsigned zerofill
mediumint
mediumint(%n)
mediumint unsigned
mediumint(%n) unsigned
mediumint zerofill
mediumint(%) zerofill
mediumint unsigned zerofill
mediumint(%n) unsigned zerofill
bigint
bigint(%n)
bigint unsigned
bigint(%n) unsigned
bigint zerofill
bigint(%n) zerofill
bigint unsigned zerofill
bigint(%n) unsigned zerofill
real
real(%s,%p)
real zerofill
real(%s,%p) zerofill
float
float(%n)
float(%n) zerofill
float(%s,%p)
float zerofill
float(%s,%p) zerofill
double
double(%s,%p)
double zerofill
double(%s,%p) zerofill
double precision
double precision(%s,%p)
double precision zerofill
double precision(%s,%p) zerofill
date
time
datetime
timestamp
timestamp(%n)
year
year(%n)
tinyblob
tinytext
blob
text
mediumblob
mediumtext
longblob
longtext
enum(%s)
set(%s)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o112">
<a:Name>PhysDttpSize</a:Name>
<a:Comment>Table of storage sizes of target database data type</a:Comment>
<a:MapTargetItem.Value>tinyint=1
smallint=2
mediumint=3
int=4
integer=4
bigint=8
float=8
double=8
double precision=8
real=8
decimal=8
numeric=8
date=3
datetime=8
timestamp=4
time=3
year=1</a:MapTargetItem.Value>
<a:List>tinyint
smallint
mediumint
int
integer
bigint
float
double
double precision
real
decimal
numeric
date
datetime
timestamp
time
year
</a:List>
</o:MapTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:ProfileTargetItem Id="o113">
<a:Name>Profile</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o114">
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TargetCategory>
<o:MetaClassTargetItem Id="o115">
<a:Name>Key</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o116">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o117">
<a:ObjectID>17E354C0-EE8C-48CA-BE01-0F3FEAE766ED</a:ObjectID>
<a:Name>ExtUnique</a:Name>
<a:Comment>TRUE if the key is unique</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
</c:Categories>
</o:ProfileTargetItem>
</c:Categories>
</o:DBMS>

</DBMS>
<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" Code="MSACCESS95" Family="ACCESS95" Name="Microsoft Access 95 &amp; 97" signature="XDB_XML" version="11.0.0.1331"?>
<!-- do not edit this file -->

<DBMS xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:DBMS Id="o1">
<a:ObjectID>DBB22DBD-5D0D-44E6-885E-0F57C5640047</a:ObjectID>
<a:Name>Microsoft Access 95 &amp; 97</a:Name>
<a:Code>MSACCESS95</a:Code>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1095428052</a:ModificationDate>
<a:Modifier>mledier</a:Modifier>
<a:Family>ACCESS95</a:Family>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined

</a:CheckGlobalScript>
<c:Categories>
<o:TargetCategory Id="o2">
<a:Name>General</a:Name>
<a:Comment>Target DBMS identification</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o3">
<a:Name>SqlSupport</a:Name>
<a:Comment>SQL syntax allowed. This does not impact the script generation, but it impacts the SQL Preview</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o4">
<a:Name>EnableCheck</a:Name>
<a:Comment>Determines if the generation of check parameters is authorized or not</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o5">
<a:Name>Enableconstname</a:Name>
<a:Comment>Determines if constraint names are used during the generation</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o6">
<a:Name>UniqConstName</a:Name>
<a:Comment>Determines if unique constraint names for objects are authorized or not</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o7">
<a:Name>Script</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the Script generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o8">
<a:Name>Sql</a:Name>
<a:Comment>Contains sub-categories Syntax, Format, File and Keywords. Each sub-category contains entries whose values define general syntax for the database</a:Comment>
<c:Categories>
<o:TargetCategory Id="o9">
<a:Name>Syntax</a:Name>
<a:Comment>Contains general parameters for SQL syntax</a:Comment>
<c:Categories>
<o:CharacterTargetItem Id="o10">
<a:Name>Terminator</a:Name>
<a:Comment>End of command character</a:Comment>
<a:CharacterTargetItem.Value>;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o11">
<a:Name>BlockTerminator</a:Name>
<a:Comment>End of block character</a:Comment>
<a:StringTargetItem.Value> ;</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:CharacterTargetItem Id="o12">
<a:Name>Delimiter</a:Name>
<a:Comment>Field separation character. Example: col1, col2, col3</a:Comment>
<a:CharacterTargetItem.Value>,</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o13">
<a:Name>Quote</a:Name>
<a:Comment>Character used to enclose string values</a:Comment>
<a:CharacterTargetItem.Value>&quot;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o14">
<a:Name>SqlContinue</a:Name>
<a:Comment>Continuation character</a:Comment>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o15">
<a:Name>LineComment</a:Name>
<a:Comment>Characters used to enclose a single line comment</a:Comment>
<a:StringTargetItem.Value>#</a:StringTargetItem.Value>
</o:StringTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o16">
<a:Name>Format</a:Name>
<a:Comment>Contains entries that define script formatting</a:Comment>
<c:Categories>
<o:StringTargetItem Id="o17">
<a:Name>IllegalChar</a:Name>
<a:Comment>Invalid characters for names</a:Comment>
<a:StringTargetItem.Value>&quot; +*/!=&lt;&gt;&#39;&quot;()&quot;.</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:BooleanTargetItem Id="o18">
<a:Name>UpperCaseOnly</a:Name>
<a:Comment>Uppercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o19">
<a:Name>LowerCaseOnly</a:Name>
<a:Comment>Lowercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o20">
<a:Name>EnableOwnerPrefix</a:Name>
<a:Comment>Object codes can have a prefix made of the object owner code</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o21">
<a:Name>File</a:Name>
<a:Comment>Contains header, footer and usage text entries used during the generation</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o22">
<a:Name>Header</a:Name>
<a:Comment>Header text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o23">
<a:Name>Footer</a:Name>
<a:Comment>Footer text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o24">
<a:Name>EnableMultiFile</a:Name>
<a:Comment>Multi-script allowed</a:Comment>
</o:BooleanTargetItem>
<o:StringTargetItem Id="o25">
<a:Name>ScriptExt</a:Name>
<a:Comment>Main script extension in database generation</a:Comment>
<a:StringTargetItem.Value>dat</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o26">
<a:Name>TableExt</a:Name>
<a:Comment>Other scripts extension in database generation</a:Comment>
<a:StringTargetItem.Value>tab</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o27">
<a:Name>StartCommand</a:Name>
<a:Comment>Command for executing a script</a:Comment>
</o:StringTargetItem>
<o:TextTargetItem Id="o28">
<a:Name>Usage1</a:Name>
<a:TextTargetItem.Value>  (1) Launch Microsoft Access 95 or 97
  (2) Open the Access.mdb file (in tools directory)
  (3) Select the &#39;Generate Access database&#39; button
  (4) Fill in the destination Access DB name
  (5) For the &#39;Script  File&#39; enter %PATHSCRIPT%%NAMESCRIPT%
  (6) Click on &#39;Create&#39;</a:TextTargetItem.Value>
<a:Comment>Usage for a single script in database generation</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o29">
<a:Name>Usage2</a:Name>
<a:Comment>Usage for multiple scripts in database generation</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o30">
<a:Name>Keywords</a:Name>
<a:Comment>Contains the list of reserved words and functions available in SQL</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o31">
<a:Name>ReservedDefault</a:Name>
<a:TextTargetItem.Value>USER
NULL</a:TextTargetItem.Value>
<a:Comment>Reserved default values</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o32">
<a:Name>Commit</a:Name>
<a:TextTargetItem.Value>commit</a:TextTargetItem.Value>
<a:Comment>Command for validating the transaction by OBDC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o33">
<a:Name>ReservedWord</a:Name>
<a:TextTargetItem.Value>ADD
ALL
ALTER
AND
ANY
AS
ASC
BETWEEN
BY
CHAR
CHECK
CONNECT
CREATE
CURRENT
DATE
DECIMAL
DEFAULT
DELETE
DESC
DISTINCT
DROP
ELSE
FLOAT
FOR
FROM
GRANT
GROUP
HAVING
IMMEDIATE
IN
INSERT
INTEGER
INTERSECT
INTO
IS
LEVEL
LIKE
NOT
NULL
OF
ON
OPTION
OR
ORDER
PRIOR
PRIVILEGES
PUBLIC
REVOKE
ROWS
SELECT
SESSION
SET
SIZE
SMALLINT
TABLE
THEN
TO
UNION
UNIQUE
UPDATE
USER
VALUES
VARCHAR
VIEW
WHENEVER
WITH</a:TextTargetItem.Value>
<a:Comment>Reserved words</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o34">
<a:Name>GroupFunc</a:Name>
<a:TextTargetItem.Value>avg()
count()
list()
max()
min()
sum()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions to use with group keywords.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o35">
<a:Name>NumberFunc</a:Name>
<a:TextTargetItem.Value>abs()
acos()
asin()
atan()
atan2()
ceiling()
cos()
cot()
degrees()
exp()
floor()
log()
log10()
mod()
pi(*)
power()
radians()
rand()
remainder()
round()
sign()
sin()
sqrt()
tan()
&quot;truncate&quot;()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used on numbers</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o36">
<a:Name>CharFunc</a:Name>
<a:TextTargetItem.Value>ascii()
byte_length()
byte_substr()
char()
charindex()
difference()
insertstr()
lcase()
left()
length()
locate()
ltrim()
patindex()
repeat()
right()
rtrim()
similar()
soundex()
space()
string()
substr()
textptr()
trim()
ucase()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for characters and strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o37">
<a:Name>DateFunc</a:Name>
<a:TextTargetItem.Value>current date
current time
current timestamp
date()
dateadd()
datediff()
dateformat()
datename()
datepart()
datetime()
day()
dayname()
days()
dow()
getdate()
hour()
hours()
minute()
minutes()
month()
monthname()
months()
now(*)
quarter()
second()
seconds()
today(*)
weeks()
year()
years()
ymd()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for dates</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o38">
<a:Name>ConvertFunc</a:Name>
<a:TextTargetItem.Value>cast()
convert()
hextoint()
inttohex()
string()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used to convert values between hex and integer and handling strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o39">
<a:Name>OtherFunc</a:Name>
<a:TextTargetItem.Value>argn()
coalesce()
connection_property()
datalength()
db_id()
db_name()
db_property()
estimate()
estimate_source()
experience_estimate()
ifnull()
index_estimate()
isnull()
next_connection()
next_database()
number(*)
plan()
property()
property_name()
property_number()
property_description()
sqlcode
sqlstate
traceback(*)
user</a:TextTargetItem.Value>
<a:Comment>List of other SQL functions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o40">
<a:Name>ListOperators</a:Name>
<a:TextTargetItem.Value>=
!=
~=
&lt;&gt;
&gt;
!&gt;
&lt;
!&lt;
&gt;=
&lt;=
*=
=*
not
in
not in
between
not between
exists
not exists
like
not like
is
is not
= any
!= any
&gt; any
!&gt; any
&lt; any
!&lt; any
&gt;= any
&lt;= any
= all
!= all
&gt; all
!&gt; all
&lt; all
!&lt; all
&gt;= all
&lt;= all</a:TextTargetItem.Value>
<a:Comment>List of operators for comparing values, boolean, and various semantic operators</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o41">
<a:Name>Objects</a:Name>
<a:Comment>Contains sub-categories for each type of object in the database, for example: Table, or Reference. Each sub-category contains entries whose values define database commands and object-related characteristics</a:Comment>
<c:Categories>
<o:TargetCategory Id="o42">
<a:Name>Table</a:Name>
<a:Code>TABL</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLE&quot;        // generated code of the table
   &quot;TNAME&quot;        // name of the table
   &quot;TCODE&quot;        // code of the table
   &quot;TLABL&quot;        // comment of the table
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;TABLDEFN&quot;     // complete body of the table definition. Contains definition of columns, checks and keys
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o43">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o44">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>CreateTble C=%TABLE%[ N=%.Q:TNAME%]
(
%TABLDEFN%
)</a:TextTargetItem.Value>
<a:Comment>Command for creating a table. Example: create table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o45">
<a:Name>Options</a:Name>
<a:Comment>Available options for creating a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o46">
<a:Name>TableComment</a:Name>
<a:TextTargetItem.Value>addtbllabl T=%TABLE% L=%.Q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a table comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o47">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>RemoveTble C=%TABLE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table. Example: drop table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o48">
<a:Name>Rename</a:Name>
<a:Comment>Command for renaming a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o49">
<a:Name>AlterTableHeader</a:Name>
<a:Comment>Alter table header</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o50">
<a:Name>AlterTableFooter</a:Name>
<a:Comment>Alter table footer</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o51">
<a:Name>DefineTableCheck</a:Name>
<a:Comment>Allows to customize the script of table check constraints</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o52">
<a:Name>Enable</a:Name>
<a:Comment>Table allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o53">
<a:Name>Index</a:Name>
<a:Code>INDX</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
   &quot;INDEX&quot;        // generated code of the index
   &quot;INDEXNAME&quot;    // index name
   &quot;INDEXCODE&quot;    // index code
   &quot;UNIQUE&quot;       // keyword &quot;unique&quot; when the index is unique
   &quot;INDEXTYPE&quot;    // index type (available only for a few DBMS)
   &quot;INDEXKEY&quot;     // keywords &quot;primary&quot;, &quot;unique&quot; or &quot;foreign&quot; depending on the index origin
   &quot;CIDXLIST&quot;     // list of index columns. Eg: A asc, B desc, C asc
   &quot;CLUSTER&quot;      // keyword &quot;cluster&quot; when the index is cluster
For index columns, the following system variables are available:
   &quot;ASC&quot;          // keywords &quot;ASC&quot; or &quot;DESC&quot; depending on sort order
   &quot;ISASC&quot;        // TRUE if the index column sort is ascending
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o54">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o55">
<a:Name>MaxColIndex</a:Name>
<a:Comment>Maximum number of columns in an index</a:Comment>
<a:IntegerTargetItem.Value>10</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o56">
<a:Name>Enable</a:Name>
<a:Comment>Index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o57">
<a:Name>EnableAscDesc</a:Name>
<a:Comment>ASC, DESC keywords allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o58">
<a:Name>UniqName</a:Name>
<a:Comment>Unique index name in the database</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o59">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>CreateIndx C=%INDEX% T=%TABLE%[ U=%UNIQUE%][ K=%INDEXKEY%]
(
   %CIDXLIST%
)</a:TextTargetItem.Value>
<a:Comment>Command for creating an index. Example: create index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o60">
<a:Name>AddColIndex</a:Name>
<a:TextTargetItem.Value>   C=%COLUMN%[ A=%ASC%]</a:TextTargetItem.Value>
<a:Comment>Command for defining an index column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o61">
<a:Name>Options</a:Name>
<a:Comment>Default options for creating an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o62">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>RemoveIndx C=%INDEX% T=%TABLE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping an index. Example: drop index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o63">
<a:Name>DefineIndexColumn</a:Name>
<a:Comment>Defines the column of an index</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o64">
<a:Name>EnableCluster</a:Name>
<a:Comment>Cluster option available for indexes</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o65">
<a:Name>Column</a:Name>
<a:Code>COLN</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for columns)
   &quot;COLUMN&quot;       // generated code of the column
   &quot;COLNNO&quot;       // position of the column in the list of columns of the table
   &quot;COLNNAME&quot;     // name of the column
   &quot;COLNCODE&quot;     // code of the column
   &quot;PRIMARY&quot;      // keyword &quot;primary&quot; if the column is primary
   &quot;ISPKEY&quot;       // TRUE if the column is part of the primary key
   &quot;FOREIGN&quot;      // TRUE if the column is part of one foreign key
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o66">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o67">
<a:Name>EnableDefault</a:Name>
<a:Comment>Default values allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o68">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>   C=%COLUMN% T=%.Q:DATATYPE% P=%ISPKEY% M=%ISMAND%[ N=%.Q:COLNNAME%][ D=%DEFAULT%][%R%?[ K=%CONSTRAINT%]:[ A=%MINVAL%][ B=%MAXVAL%][ S=(%VALUES%)][ R=%RULES%]]</a:TextTargetItem.Value>
<a:Comment>Command for defining a table column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o69">
<a:Name>ColumnComment</a:Name>
<a:TextTargetItem.Value>addcollabl T=%TABLE% C=%COLUMN% L=%.Q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a column comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o70">
<a:Name>Rename</a:Name>
<a:Comment>Command for renaming a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o71">
<a:Name>Create</a:Name>
<a:Comment>Command for adding a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o72">
<a:Name>ModifyColumn</a:Name>
<a:Comment>Command for modifying a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o73">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a column</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o74">
<a:Name>Enable</a:Name>
<a:Comment>Column allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:IntegerTargetItem Id="o75">
<a:Name>MaxConstLen</a:Name>
<a:Comment>Maximum constraint name length</a:Comment>
<a:IntegerTargetItem.Value>30</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o76">
<a:Name>EnableOption</a:Name>
<a:Comment>Physical options allowed  YES/NO</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TargetCategory Id="o77">
<a:Name>Reference</a:Name>
<a:Code>REFR</a:Code>
<a:Comment>The following system variables are available:
   &quot;REFR&quot;         // generated code of the reference
   &quot;REFNAME&quot;      // reference name
   &quot;PARENT&quot;       // generated code of the parent table
   &quot;PNAME&quot;        // name of the parent table
   &quot;PCODE&quot;        // code of the parent table
   &quot;CHILD&quot;        // generated code of the reference
   &quot;CNAME&quot;        // name of the child table
   &quot;CCODE&quot;        // code of the child table
   &quot;PQUALIFIER&quot;   // qualifier of the parent table. See QUALIFIER
   &quot;CQUALIFIER&quot;   // qualifier of the child table. See QUALIFIER
   &quot;REFRNAME&quot;     // Reference name
   &quot;REFRCODE&quot;     // Reference code
   &quot;FKCONSTRAINT&quot; // Reference constraint name (foreign key)
   &quot;PKCONSTRAINT&quot; // constraint name of the parent key used to reference object
   &quot;CKEYCOLUMNS&quot;  // list of parent key columns. Eg: C1, C2, C3
   &quot;FKEYCOLUMNS&quot;  // list of child foreign key columns. Eg:
   &quot;UPDCONST&quot;     // Update declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;DELCONST&quot;     // Delete declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;MINCARD&quot;      // Min cardinality
   &quot;MAXCARD&quot;      // Max cardinality
   &quot;POWNER&quot;       // Parent table owner
   &quot;COWNER&quot;       // child table owner
   &quot;CHCKONCMMT&quot;   // TRUE when check on commit is selected on the reference (ASA 6.0 specific)

For reference joins (couple of column in a reference),
the following system variables are available:
   &quot;CKEYCOLUMN&quot;   // generated code of the parent table column (primary key)
   &quot;FKEYCOLUMN&quot;   // generated code of the child table column (foreign key)
   &quot;PK&quot;           // primary key column generated code
   &quot;PKNAME&quot;       // primary key column name
   &quot;FK&quot;           // foreign key column generated code
   &quot;FKNAME&quot;       // foreign key column name
   &quot;AK&quot;           // alternate key column code (same as PK)
   &quot;AKNAME&quot;       // alternate key column name (same as PKNAME)
   &quot;COLTYPE&quot;      // primary column column datatype
   &quot;DEFAULT&quot;      // foreign key column default value
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o78">
<a:Name>Enable</a:Name>
<a:Comment>Foreign key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o79">
<a:Name>FKAutoIndex</a:Name>
<a:Comment>Foreign key is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o80">
<a:Name>CheckOnCommit</a:Name>
<a:Comment>Referential integrity test differed after the COMMIT</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o81">
<a:Name>Add</a:Name>
<a:Comment>Command for defining a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o82">
<a:Name>DclUpdIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT
CASCADE
SET NULL</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for update</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o83">
<a:Name>DclDelIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT
CASCADE
SET NULL</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for delete</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o84">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>CreateJoin C=%CONSTNAME% T=%TABLE% P=%PARENT%[ D=%DELCONST%][ U=%UPDCONST%]
(
   %JOINS%
)
</a:TextTargetItem.Value>
<a:Comment>Command for adding a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o85">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>FK_%.U8:CHILD%_%.U9:REFR%_%.U8:PARENT%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for foreign keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o86">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>RemoveJoin C=%CONSTNAME% T=%TABLE% P=%PARENT%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o87">
<a:Name>DefineJoin</a:Name>
<a:TextTargetItem.Value>   P=%PK% F=%FK%</a:TextTargetItem.Value>
<a:Comment>Defines a join for a reference</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o88">
<a:Name>PKey</a:Name>
<a:Code>PKEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o89">
<a:Name>Enable</a:Name>
<a:Comment>Primary key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o90">
<a:Name>PkAutoIndex</a:Name>
<a:Comment>Primary key is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o91">
<a:Name>Add</a:Name>
<a:Comment>Command for defining a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o92">
<a:Name>ConstName</a:Name>
<a:Comment>Constraint name template for primary keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o93">
<a:Name>Create</a:Name>
<a:Comment>Command for adding a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o94">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a primary key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o95">
<a:Name>Key</a:Name>
<a:Code>KEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;COLUMNS&quot;      // List of columns of the key. Eg: &quot;A, B, C&quot;
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o96">
<a:Name>Enable</a:Name>
<a:Comment>UNIQUE constraint allowed for tables</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o97">
<a:Name>UniqConstAutoIndex</a:Name>
<a:Comment>UNIQUE constraint is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o98">
<a:Name>SqlAkeyIndex</a:Name>
<a:Comment>SQL query to obtain the alternate key indexes of a table by ODBC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o99">
<a:Name>Add</a:Name>
<a:Comment>Command for defining an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o100">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>AK_%.U18:AKEY%_%.U8:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for alternate keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o101">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o102">
<a:Name>Create</a:Name>
<a:Comment>Command for adding an alternate key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o103">
<a:Name>Database</a:Name>
<a:Code>DTBS</a:Code>
<a:Comment>The following system variables are available:
   &quot;DATABASE&quot;     // generated code of the database
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o104">
<a:Name>Create</a:Name>
<a:Comment>Command for creating a database. Example: create database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o105">
<a:Name>Options</a:Name>
<a:Comment>Available options for creating a database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o106">
<a:Name>OpenDatabase</a:Name>
<a:Comment>Command for opening a database. Example: open database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o107">
<a:Name>CloseDatabase</a:Name>
<a:Comment>Command for closing a database. Example: close database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o108">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a database. Example: drop database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o109">
<a:Name>Enable</a:Name>
<a:Comment>Database allowed</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o110">
<a:Name>View</a:Name>
<a:Comment>The following system variables are available:
   &quot;VIEW&quot;         // generated code of the view
   &quot;VIEWNAME&quot;     // view name
   &quot;VIEWCODE&quot;     // view code
   &quot;VIEWCOLN&quot;     // List of columns of the view. Eg: &quot;A, B, C&quot;
   &quot;SQL&quot;          // SQL text of the view. Eg: Select * from T1
   &quot;VIEWCHECK&quot;    // Keyword &quot;with check option&quot; if selected on the view
   &quot;SCRIPT&quot;       // complete view creation order. Eg: create view V1 as select * from T1
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o111">
<a:Name>Enable</a:Name>
<a:Comment>View allowed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o112">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>CreateView C=%VIEW% T=%.Q:SQL%
</a:TextTargetItem.Value>
<a:Comment>Command for creating a view. Example: create view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o113">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>RemoveView C=%VIEW%
</a:TextTargetItem.Value>
<a:Comment>Command for dropping a view. Example: drop view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o114">
<a:Name>ViewCheck</a:Name>
<a:TextTargetItem.Value>with check option</a:TextTargetItem.Value>
<a:Comment>Option for checking a view</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o115">
<a:Name>Domain</a:Name>
<a:Comment>The following system variables are available:
   &quot;DOMAIN&quot;       // generated code of the domain (also available for columns)
SQL Server specific domain system variables:
   &quot;RULENAME&quot;     // name of the rule object associated with the domain
   &quot;DEFAULTNAME&quot;  // name of the default object associated with the domain
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o116">
<a:Name>Enable</a:Name>
<a:Comment>User defined data types allowed</a:Comment>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o117">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>30</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o118">
<a:Name>Create</a:Name>
<a:Comment>Command for creating a user defined data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o119">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a user defined data type</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o120">
<a:Name>DataType</a:Name>
<a:Comment>Contains data type translation entries. These entries list the correspondence between internal data types and the target database data types</a:Comment>
<c:Categories>
<o:MapTargetItem Id="o121">
<a:Name>AmcdDataType</a:Name>
<a:Comment>Data types translation table from internal data types to target database data types.
        %n is the length of the data type
        %s is the size of the data type
        %p is the precision of the data type</a:Comment>
<a:MapTargetItem.Value>I=INTEGER
SI=SMALLINT
LI=LONG
BT=BYTE
BT%n=BYTE
BT%s,%p=BYTE
N=NUMERIC
N%n=NUMERIC(%n)
N%s,%p=NUMERIC(%s,%p)
DC=NUMBER
DC%n=NUMBER(%n)
DC%s,%p=NUMBER(%s,%p)
F=FLOAT
F%n=FLOAT(%n)
SF=SINGLE
LF=DOUBLE
MN=CURRENCY
MN%n=CURRENCY(%n)
MN%s,%p=CURRENCY(%s,%p)
NO=COUNTER
NO%n=COUNTER(%n)
BL=YESNO
A%n=CHAR(%n)
VA%n=VARCHAR(%n)
LA=LONGCHAR
LA%n=LONGCHAR(%n)
LVA=LONGTEXT
LVA%n=LONGTEXT(%n)
TXT=NOTE
TXT%n=TEXT(%n)
MBT=MEMO
MBT%n=TEXT(%n)
VMBT=MEMO
VMBT%n=TEXT(%n)
D=DATE
T=TIME
DT=DATETIME
TS=TIMESTAMP
BIN%n=BINARY(%n)
LBIN=LONGBINARY
LBIN%n=BINARY(%n)
BMP=GENERAL
BMP%n=GENERAL
PIC=GENERAL
PIC%n=GENERAL
OLE=OLEOBJECT
OLE%n=OLEOBJECT
*=TEXT(10)</a:MapTargetItem.Value>
<a:List>I
SI
LI
BT
BT%n
BT%s,%p
N
N%n
N%s,%p
DC
DC%n
DC%s,%p
F
F%n
SF
LF
MN
MN%n
MN%s,%p
NO
NO%n
BL
A%n
VA%n
LA
LA%n
LVA
LVA%n
TXT
TXT%n
MBT
MBT%n
VMBT
VMBT%n
D
T
DT
TS
BIN%n
LBIN
LBIN%n
BMP
BMP%n
PIC
PIC%n
OLE
OLE%n
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o122">
<a:Name>PhysDataType</a:Name>
<a:Comment>Data types translation table from target database data types to internal data types.</a:Comment>
<a:MapTargetItem.Value>BIT=BL
LOGICAL=BL
LOGICAL1=BL
YESNO=BL
BYTE=BT
INTEGER1=BT
COUNTER=NO
AUTOINCREMENT=NO
CURRENCY=MN
MONEY=MN
DATE=D
TIME=T
DATETIME=DT
TIMESTAMP=TS
GUID=LI
SINGLE=SF
FLOAT4=SF
IEEESINGLE=SF
REAL=SF
DOUBLE=LF
FLOAT=F
FLOAT8=F
IEEEDOUBLE=LF
NUMBER=DC
NUMERIC=N
SHORT=SI
INTEGER2=SI
SMALLINT=SI
LONG=LI
INT=I
INTEGER=I
INTEGER4=LI
BINARY=BIN
BINARY(%n)=BIN%n
VARBINARY=BIN
LONGBINARY=LBIN
GENERAL=PIC
OLEOBJECT=OLE
LONGTEXT=TXT
LONGCHAR=LA
MEMO=MBT
NOTE=VMBT
TEXT=LA
ALPHANUMERIC=LA
CHAR=LA
STRING=LA
VARCHAR=LA
TEXT(%n)=A%n
ALPHANUMERIC(%n)=A%n
CHAR(%n)=A%n
STRING(%n)=A%n
VARCHAR(%n)=VA%n
*=A10</a:MapTargetItem.Value>
<a:List>BIT
LOGICAL
LOGICAL1
YESNO
BYTE
INTEGER1
COUNTER
AUTOINCREMENT
CURRENCY
MONEY
DATE
TIME
DATETIME
TIMESTAMP
GUID
SINGLE
FLOAT4
IEEESINGLE
REAL
DOUBLE
FLOAT
FLOAT8
IEEEDOUBLE
NUMBER
NUMERIC
SHORT
INTEGER2
SMALLINT
LONG
INT
INTEGER
INTEGER4
BINARY
BINARY(%n)
VARBINARY
LONGBINARY
GENERAL
OLEOBJECT
LONGTEXT
LONGCHAR
MEMO
NOTE
TEXT
ALPHANUMERIC
CHAR
STRING
VARCHAR
TEXT(%n)
ALPHANUMERIC(%n)
CHAR(%n)
STRING(%n)
VARCHAR(%n)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o123">
<a:Name>PhysDttpSize</a:Name>
<a:Comment>Table of storage sizes of target database data type</a:Comment>
</o:MapTargetItem>
<o:MapTargetItem Id="o124">
<a:Name>PhysOdbcDataType</a:Name>
<a:Comment>Data types translation table from target database data types to ODBC data types.</a:Comment>
<a:MapTargetItem.Value>YesNo=YesNo
Byte=Byte
Integer=Short
LongInteger=Long
Single=Single
Double=Double
Currency=Currency
DateTime=DateTime
Counter=Counter
Text=Text
Text(%n)=Text(%n)
OLE=LongBinary
Memo=Memo</a:MapTargetItem.Value>
<a:List>YesNo
Byte
Integer
LongInteger
Single
Double
Currency
DateTime
Counter
Text
Text(%n)
OLE
Memo
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o125">
<a:Name>OdbcPhysDataType</a:Name>
<a:Comment>Data types translation table from ODBC data types to target database data types.</a:Comment>
<a:MapTargetItem.Value>BIT=YesNo
BOOLEAN=YesNo
LOGICAL1(%n)=YesNo
LOGICAL1=YesNo
LOGICAL(%n)=YesNo
LOGICAL=YesNo
YESNO=YesNo
Byte=Byte
Integer1=Byte
Counter=Counter
AUTOINCREMENT=Counter
GUID=Counter
Currency=Currency
MONEY=Currency
DateTime=DateTime
DATE=DateTime
TIMESTAMP=DateTime
TIME=DateTime
Double=Double
IEEEDOUBLE=Double
NUMBER=Double
NUMERIC=Double
INT=LongInteger
INTEGER=LongInteger
Integer4=LongInteger
LONG=LongInteger
LONGBINARY=OLE
GENERAL=OLE
OLEOBJECT=OLE
MEMO=MEMO
MEMO(%n)=MEMO
LONGTEXT(%n)=Memo
LONGTEXT=Memo
LONGCHAR(%n)=Memo
LONGCHAR=Memo
NOTE(%n)=Memo
NOTE=Memo
FLOAT=Single
IEEESINGLE=Single
REAL=Single
Integer2=Integer
SMALLINT=Integer
SHORT=Integer
Text(255)=Text
Text(%n)=Text(%n)
ALPHANUMERIC(%n)=Text(%n)
ALPHANUMERIC=Text
CHAR(%n)=Text(%n)
CHAR=Text
CHARACTER(%n)=Text(%n)
CHARACTER=Text
STRING(%n)=Text(%n)
STRING=Text
VARCHAR(%n)=Text(%n)
BIT(%n)=YesNo
VARCHAR=Text
Integer2=LongInteger
Single=Single
BINARY(255)=BINARY</a:MapTargetItem.Value>
<a:List>BIT
BOOLEAN
LOGICAL1(%n)
LOGICAL1
LOGICAL(%n)
LOGICAL
YESNO
Byte
Integer1
Counter
AUTOINCREMENT
GUID
Currency
MONEY
DateTime
DATE
TIMESTAMP
TIME
Double
IEEEDOUBLE
NUMBER
NUMERIC
INT
INTEGER
Integer4
LONG
LONGBINARY
GENERAL
OLEOBJECT
MEMO
MEMO(%n)
LONGTEXT(%n)
LONGTEXT
LONGCHAR(%n)
LONGCHAR
NOTE(%n)
NOTE
FLOAT
IEEESINGLE
REAL
Integer2
SMALLINT
SHORT
Text(255)
Text(%n)
ALPHANUMERIC(%n)
ALPHANUMERIC
CHAR(%n)
CHAR
CHARACTER(%n)
CHARACTER
STRING(%n)
STRING
VARCHAR(%n)
BIT(%n)
VARCHAR
Integer2
Single
BINARY(255)
</a:List>
</o:MapTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o126">
<a:Name>Odbc</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the ODBC generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o127">
<a:Name>Sql</a:Name>
<c:Categories>
<o:TargetCategory Id="o128">
<a:Name>Syntax</a:Name>
<a:Comment>Contains general parameters for SQL syntax</a:Comment>
<c:Categories>
<o:StringTargetItem Id="o129">
<a:Name>LineComment</a:Name>
<a:Comment>Characters used to enclose a single line comment</a:Comment>
</o:StringTargetItem>
<o:StringTargetItem Id="o130">
<a:Name>BlockComment</a:Name>
<a:Comment>Characters used to enclose a multi-line comment</a:Comment>
<a:StringTargetItem.Value>/*   */</a:StringTargetItem.Value>
</o:StringTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o131">
<a:Name>Objects</a:Name>
<c:Categories>
<o:TargetCategory Id="o132">
<a:Name>Table</a:Name>
<a:Code>TABL</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLE&quot;        // generated code of the table
   &quot;TNAME&quot;        // name of the table
   &quot;TCODE&quot;        // code of the table
   &quot;TLABL&quot;        // comment of the table
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;TABLDEFN&quot;     // complete body of the table definition. Contains definition of columns, checks and keys
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o133">
<a:Name>Enable</a:Name>
<a:Comment>Table allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o134">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o135">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>CKT_%.U26:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for check of table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o136">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create table %TABLE%
(
%TABLDEFN%
)</a:TextTargetItem.Value>
<a:Comment>Command for creating a table. Example: create table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o137">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop table %TABLE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table. Example: drop table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o138">
<a:Name>TableComment</a:Name>
<a:Comment>Command for adding a table comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o139">
<a:Name>Rename</a:Name>
<a:Comment>Command for renaming a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o140">
<a:Name>DefineTableCheck</a:Name>
<a:TextTargetItem.Value>check (%.A:CONSTRAINT%)</a:TextTargetItem.Value>
</o:TextTargetItem>
<o:TextTargetItem Id="o141">
<a:Name>AddTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add check (%.A:CONSTRAINT%)</a:TextTargetItem.Value>
</o:TextTargetItem>
<o:TextTargetItem Id="o142">
<a:Name>DropTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete check</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table check in an alter table statement</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o143">
<a:Name>Column</a:Name>
<a:Code>COLN</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for columns)
   &quot;COLUMN&quot;       // generated code of the column
   &quot;COLNNO&quot;       // position of the column in the list of columns of the table
   &quot;COLNNAME&quot;     // name of the column
   &quot;COLNCODE&quot;     // code of the column
   &quot;PRIMARY&quot;      // keyword &quot;primary&quot; if the column is primary
   &quot;ISPKEY&quot;       // TRUE if the column is part of the primary key
   &quot;FOREIGN&quot;      // TRUE if the column is part of one foreign key       
       </a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o144">
<a:Name>Maxlen</a:Name>
<a:Comment>Column name length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o145">
<a:Name>EnableDefault</a:Name>
<a:Comment>Default values allowed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o146">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>CKC_%.U17:COLUMN%_%.U8:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for a column check parameter</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o147">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>    %20:COLUMN% %15:DATATYPE% [%NOTNULL%]</a:TextTargetItem.Value>
<a:Comment>Command for defining a table column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o148">
<a:Name>ColumnComment</a:Name>
<a:Comment>Command for adding a column comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o149">
<a:Name>Rename</a:Name>
<a:Comment>Command for renaming a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o150">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   add column %COLUMN% %DATATYPE% [%NOTNULL%]</a:TextTargetItem.Value>
<a:Comment>Command for adding a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o151">
<a:Name>ModifyColumn</a:Name>
<a:Comment>Command for modifying a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o152">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   drop column %COLUMN%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o153">
<a:Name>Enable</a:Name>
<a:Comment>Column allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o154">
<a:Name>Index</a:Name>
<a:Code>INDX</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
   &quot;INDEX&quot;        // generated code of the index
   &quot;INDEXNAME&quot;    // index name
   &quot;INDEXCODE&quot;    // index code
   &quot;UNIQUE&quot;       // keyword &quot;unique&quot; when the index is unique
   &quot;INDEXTYPE&quot;    // index type (available only for a few DBMS)
   &quot;INDEXKEY&quot;     // keywords &quot;primary&quot;, &quot;unique&quot; or &quot;foreign&quot; depending on the index origin
   &quot;CIDXLIST&quot;     // list of index columns. Eg: A asc, B desc, C asc
   &quot;CLUSTER&quot;      // keyword &quot;cluster&quot; when the index is cluster
For index columns, the following system variables are available:
   &quot;ASC&quot;          // keywords &quot;ASC&quot; or &quot;DESC&quot; depending on sort order
   &quot;ISASC&quot;        // TRUE if the index column sort is ascending
       </a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o155">
<a:Name>Maxlen</a:Name>
<a:Comment>Index name length</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o156">
<a:Name>MaxColIndex</a:Name>
<a:Comment>Maximum number of columns in an index</a:Comment>
<a:IntegerTargetItem.Value>10</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o157">
<a:Name>Enable</a:Name>
<a:Comment>Index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o158">
<a:Name>UniqName</a:Name>
<a:Comment>Unique index name in the database</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o159">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create [%UNIQUE%] index %INDEX% on %TABLE%
(
%CIDXLIST%
)
%OPTIONS%</a:TextTargetItem.Value>
<a:Comment>Command for creating an index. Example: create index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o160">
<a:Name>AddColIndex</a:Name>
<a:TextTargetItem.Value>   %20:COLUMN% [%ASC%]</a:TextTargetItem.Value>
<a:Comment>Command for defining an index column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o161">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>with %s : list= primary | disallow null | ignore null</a:TextTargetItem.Value>
<a:Comment>Default options for creating an index.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o162">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop index %INDEX% on %TABLE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping an index. Example: drop index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o163">
<a:Name>SqlOptsQuery</a:Name>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o164">
<a:Name>PKey</a:Name>
<a:Code>PKEY</a:Code>
<c:Categories>
<o:BooleanTargetItem Id="o165">
<a:Name>Enable</a:Name>
<a:Comment>Primary key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o166">
<a:Name>PkAutoIndex</a:Name>
<a:Comment>Primary key is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o167">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>PK_%.U27:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for primary keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o168">
<a:Name>Create</a:Name>
</o:TextTargetItem>
<o:TextTargetItem Id="o169">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>constraint %CONSTNAME% primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
</o:TextTargetItem>
<o:TextTargetItem Id="o170">
<a:Name>Drop</a:Name>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o171">
<a:Name>Key</a:Name>
<a:Code>KEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
   &quot;COLUMNS&quot;      // List of columns of the key. Eg: &quot;A, B, C&quot;
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;PKEY&quot;         // constraint name
       </a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o172">
<a:Name>Enable</a:Name>
<a:Comment>UNIQUE constraint allowed for tables</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o173">
<a:Name>UniqConstAutoIndex</a:Name>
<a:Comment>UNIQUE constraint is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o174">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>AK_%.U18:AKEY%_%.U8:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for alternate keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o175">
<a:Name>SqlAkeyIndex</a:Name>
<a:Comment>SQL query to obtain the alternate key indexes of a table by ODBC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o176">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   drop constraint %CONSTNAME%</a:TextTargetItem.Value>
<a:Comment>Command for dropping an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o177">
<a:Name>Add</a:Name>
</o:TextTargetItem>
<o:TextTargetItem Id="o178">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   add constraint %CONSTNAME% unique (%COLUMNS%)</a:TextTargetItem.Value>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o179">
<a:Name>Reference</a:Name>
<a:Code>REFR</a:Code>
<a:Comment>The following system variables are available:
   &quot;REFR&quot;         // generated code of the reference
   &quot;REFNAME&quot;      // reference name
   &quot;PARENT&quot;       // generated code of the parent table
   &quot;PNAME&quot;        // name of the parent table
   &quot;PCODE&quot;        // code of the parent table
   &quot;CHILD&quot;        // generated code of the reference
   &quot;CNAME&quot;        // name of the child table
   &quot;CCODE&quot;        // code of the child table
   &quot;PQUALIFIER&quot;   // qualifier of the parent table. See QUALIFIER
   &quot;CQUALIFIER&quot;   // qualifier of the child table. See QUALIFIER
   &quot;REFRNAME&quot;     // Reference name
   &quot;REFRCODE&quot;     // Reference code
   &quot;FKCONSTRAINT&quot; // Reference constraint name (foreign key)
   &quot;PKCONSTRAINT&quot; // constraint name of the parent key used to reference object
   &quot;CKEYCOLUMNS&quot;  // list of parent key columns. Eg: C1, C2, C3
   &quot;FKEYCOLUMNS&quot;  // list of child foreign key columns. Eg:
   &quot;UPDCONST&quot;     // Update declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;DELCONST&quot;     // Delete declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;MINCARD&quot;      // Min cardinality
   &quot;MAXCARD&quot;      // Max cardinality
   &quot;POWNER&quot;       // Parent table owner
   &quot;COWNER&quot;       // child table owner
   &quot;CHCKONCMMT&quot;   // TRUE when check on commit is selected on the reference (ASA 6.0 specific)

For reference joins (couple of column in a reference),
the following system variables are available:
   &quot;CKEYCOLUMN&quot;   // generated code of the parent table column (primary key)
   &quot;FKEYCOLUMN&quot;   // generated code of the child table column (foreign key)
   &quot;PK&quot;           // primary key column generated code
   &quot;PKNAME&quot;       // primary key column name
   &quot;FK&quot;           // foreign key column generated code
   &quot;FKNAME&quot;       // foreign key column name
   &quot;AK&quot;           // alternate key column code (same as PK)
   &quot;AKNAME&quot;       // alternate key column name (same as PKNAME)
   &quot;COLTYPE&quot;      // primary column column datatype
   &quot;DEFAULT&quot;      // foreign key column default value
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o180">
<a:Name>Enable</a:Name>
<a:Comment>Foreign key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o181">
<a:Name>FKAutoIndex</a:Name>
<a:Comment>Foreign key is auto-indexed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o182">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>FK_%.U8:CHILD%_%.U9:REFR%_%.U8:PARENT%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for foreign keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o183">
<a:Name>CheckOnCommit</a:Name>
<a:Comment>Referential integrity test differed after the COMMIT</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o184">
<a:Name>DclUpdIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT
CASCADE
SET NULL</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for update</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o185">
<a:Name>DclDelIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT
CASCADE
SET NULL</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for delete</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o186">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   add constraint %CONSTNAME% foreign key (%FKEYCOLUMNS%)
      references %PARENT%[ (%CKEYCOLUMNS%)]</a:TextTargetItem.Value>
</o:TextTargetItem>
<o:TextTargetItem Id="o187">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table %TABLE%
   drop constraint %CONSTNAME%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a foreign key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o188">
<a:Name>View</a:Name>
<a:Code>VIEW</a:Code>
<a:Comment>The following system variables are available:
   &quot;VIEW&quot;         // generated code of the view
   &quot;VIEWNAME&quot;     // view name
   &quot;VIEWCODE&quot;     // view code
   &quot;VIEWCOLN&quot;     // List of columns of the view. Eg: &quot;A, B, C&quot;
   &quot;SQL&quot;          // SQL text of the view. Eg: Select * from T1
   &quot;VIEWCHECK&quot;    // Keyword &quot;with check option&quot; if selected on the view
   &quot;SCRIPT&quot;       // complete view creation order. Eg: create view V1 as select * from T1
       </a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o189">
<a:Name>Enable</a:Name>
<a:Comment>View allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o190">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create view %VIEW% as
%SQL%
</a:TextTargetItem.Value>
<a:Comment>Command for creating a view. Example: create view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o191">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop table %VIEW%
</a:TextTargetItem.Value>
<a:Comment>Command for dropping a view. Example: drop view %VIEW%</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o192">
<a:Name>Database</a:Name>
<a:Code>DTBS</a:Code>
<c:Categories>
<o:BooleanTargetItem Id="o193">
<a:Name>Enable</a:Name>
<a:Comment>Database allowed</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o194">
<a:Name>Domain</a:Name>
<a:Code>PDMDOMN</a:Code>
<a:Comment>The following system variables are available:
   &quot;DOMAIN&quot;       // generated code of the domain (also available for columns)
SQL Server specific domain system variables:
   &quot;RULENAME&quot;     // name of the rule object associated with the domain
   &quot;DEFAULTNAME&quot;  // name of the default object associated with the domain       </a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o195">
<a:Name>Enable</a:Name>
<a:Comment>User defined data types allowed</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:ProfileTargetItem Id="o196">
<a:Name>Profile</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o197">
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TargetCategory>
</c:Categories>
</o:ProfileTargetItem>
</c:Categories>
</o:DBMS>

</DBMS>
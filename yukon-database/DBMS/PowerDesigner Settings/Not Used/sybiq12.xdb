<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" Code="ADAPTIVE IQ" Family="ADAPTIVE IQ" Name="Sybase AS IQ 12.0" signature="XDB_XML" version="12.0.0.1649"?>
<!-- do not edit this file -->

<DBMS xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:DBMS Id="o1">
<a:ObjectID>8883C2D5-404D-4C42-B582-2DA055480584</a:ObjectID>
<a:Name>Sybase AS IQ 12.0</a:Name>
<a:Code>ADAPTIVE IQ</a:Code>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1026305193</a:ModificationDate>
<a:Modifier>mledier</a:Modifier>
<a:Family>ADAPTIVE IQ</a:Family>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined

</a:CheckGlobalScript>
<c:Categories>
<o:TargetCategory Id="o2">
<a:Name>General</a:Name>
<a:Comment>Target DBMS identification</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o3">
<a:Name>SqlSupport</a:Name>
<a:Comment>SQL syntax allowed. This does not impact the script generation, but it impacts the SQL Preview</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o4">
<a:Name>EnableCheck</a:Name>
<a:Comment>Determines if the generation of check parameters is authorized or not</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o5">
<a:Name>Enableconstname</a:Name>
<a:Comment>Determines if constraint names are used during the generation</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o6">
<a:Name>UniqConstName</a:Name>
<a:Comment>Determines if unique constraint names for objects are authorized or not</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o7">
<a:Name>Script</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the Script generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o8">
<a:Name>Sql</a:Name>
<a:Comment>Contains sub-categories Syntax, Format, File and Keywords. Each sub-category contains entries whose values define general syntax for the database</a:Comment>
<c:Categories>
<o:TargetCategory Id="o9">
<a:Name>Syntax</a:Name>
<a:Comment>Contains general parameters for SQL syntax</a:Comment>
<c:Categories>
<o:CharacterTargetItem Id="o10">
<a:Name>Terminator</a:Name>
<a:Comment>End of command character</a:Comment>
<a:CharacterTargetItem.Value>;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o11">
<a:Name>BlockTerminator</a:Name>
<a:Comment>End of block character</a:Comment>
</o:StringTargetItem>
<o:BooleanTargetItem Id="o12">
<a:Name>UseBlockTerm</a:Name>
<a:Comment>Use end of block character by default</a:Comment>
</o:BooleanTargetItem>
<o:CharacterTargetItem Id="o13">
<a:Name>Delimiter</a:Name>
<a:Comment>Field separation character. Example: col1, col2, col3</a:Comment>
<a:CharacterTargetItem.Value>,</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o14">
<a:Name>Quote</a:Name>
<a:Comment>Character used to enclose string values</a:Comment>
<a:CharacterTargetItem.Value>&#39;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o15">
<a:Name>SqlContinue</a:Name>
<a:Comment>Continuation character</a:Comment>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o16">
<a:Name>BlockComment</a:Name>
<a:Comment>Characters used to enclose a multi-line comment</a:Comment>
<a:StringTargetItem.Value>/*   */</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o17">
<a:Name>LineComment</a:Name>
<a:Comment>Characters used to enclose a single line comment</a:Comment>
</o:StringTargetItem>
<o:TextTargetItem Id="o18">
<a:Name>UsingBlockTerm</a:Name>
<a:TextTargetItem.Value>create procedure,%TERMINATOR%,  1
{
   begin, end, 3
   select, ;, 4
   {
      case, end, 5
   }
   if, end if, 4
   case, end case, 4
   loop, end loop, 4
   for, end for, 4
   {
      cursor, for, 5
   }
   declare, ;, 4
   {
      cursor, for, 5
   }
}
create function,%TERMINATOR%,  1
{
   begin, end, 3
   select, ;, 4
   {
      case, end, 5
   }
   if, end if, 4
   case, end case, 4
   loop, end loop, 4
   for, end for, 4
   {
      cursor, for, 5
   }
   declare, ;, 4
   {
      cursor, for, 5
   }
}</a:TextTargetItem.Value>
<a:Comment>List of objects using block definition during reverse.</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o19">
<a:Name>Format</a:Name>
<a:Comment>Contains entries that define script formatting</a:Comment>
<c:Categories>
<o:StringTargetItem Id="o20">
<a:Name>IllegalChar</a:Name>
<a:Comment>Invalid characters for names</a:Comment>
<a:StringTargetItem.Value>&quot; +-*/!=&lt;&gt;&#39;&quot;()&quot;.</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:BooleanTargetItem Id="o21">
<a:Name>UpperCaseOnly</a:Name>
<a:Comment>Uppercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o22">
<a:Name>LowerCaseOnly</a:Name>
<a:Comment>Lowercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o23">
<a:Name>EnableOwnerPrefix</a:Name>
<a:Comment>Object codes can have a prefix made of the object owner code</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o24">
<a:Name>File</a:Name>
<a:Comment>Contains header, footer and usage text entries used during the generation</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o25">
<a:Name>Header</a:Name>
<a:Comment>Header text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o26">
<a:Name>Footer</a:Name>
<a:Comment>Footer text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o27">
<a:Name>EnableMultiFile</a:Name>
<a:Comment>Multi-script allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:StringTargetItem Id="o28">
<a:Name>ScriptExt</a:Name>
<a:Comment>Main script extension in database generation</a:Comment>
<a:StringTargetItem.Value>sql</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o29">
<a:Name>TableExt</a:Name>
<a:Comment>Other scripts extension in database generation</a:Comment>
<a:StringTargetItem.Value>sql</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o30">
<a:Name>StartCommand</a:Name>
<a:Comment>Command for executing a script</a:Comment>
<a:StringTargetItem.Value>read %PATHSCRIPT%\%NAMESCRIPT%</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:TextTargetItem Id="o31">
<a:Name>Usage1</a:Name>
<a:TextTargetItem.Value>  (1) Start the SQL interpreter: ISQL
  (2) Open the script %NAMESCRIPT%
  (3) Execute the script</a:TextTargetItem.Value>
<a:Comment>Usage for a single script in database generation</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o32">
<a:Name>Usage2</a:Name>
<a:TextTargetItem.Value>  (1) Start the SQL interpreter: ISQL
  (2) Open one script from the directory %PATHSCRIPT% 
  (3) Execute this script</a:TextTargetItem.Value>
<a:Comment>Usage for multiple scripts in database generation</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o33">
<a:Name>Keywords</a:Name>
<a:Comment>Contains the list of reserved words and functions available in SQL</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o34">
<a:Name>ReservedDefault</a:Name>
<a:TextTargetItem.Value>NULL
AUTOINCREMENT
CURRENT DATE
CURRENT PUBLISHER
CURRENT TIME
CURRENT TIMESTAMP
CURRENT USER
LAST USER
USER</a:TextTargetItem.Value>
<a:Comment>Reserved default values</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o35">
<a:Name>GroupFunc</a:Name>
<a:TextTargetItem.Value>avg()
count()
max()
min()
sum()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions to use with group keywords.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o36">
<a:Name>NumberFunc</a:Name>
<a:TextTargetItem.Value>abs()
ceiling()
floor()
log()
remainder()
round()
sign()
&quot;truncate&quot;()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used on numbers</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o37">
<a:Name>CharFunc</a:Name>
<a:TextTargetItem.Value>ascii()
char()
charindex()
difference()
insertstr()
lcase()
left()
length()
locate()
ltrim()
patindex()
repeat()
replicate()
right()
rtrim()
similar()
soundex()
space()
string()
substr()
trim()
ucase()
upper()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for characters and strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o38">
<a:Name>DateFunc</a:Name>
<a:TextTargetItem.Value>date()
dateadd()
datediff()
dateformat()
datename()
datepart()
datetime()
day()
dayname()
days()
dow()
getdate()
hour()
hours()
minute()
minutes()
month()
monthname()
months()
now(*)
quarter()
second()
seconds()
today(*)
weeks()
year()
years()
ymd()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for dates</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o39">
<a:Name>ConvertFunc</a:Name>
<a:TextTargetItem.Value>cast()
convert()
hextoint()
inttohex()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used to convert values between hex and integer and handling strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o40">
<a:Name>OtherFunc</a:Name>
<a:TextTargetItem.Value>argn()
coalesce()
ifnull()
isnull()
number(*)
suser_id()
suser_name()</a:TextTargetItem.Value>
<a:Comment>List of other SQL functions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o41">
<a:Name>ListOperators</a:Name>
<a:TextTargetItem.Value>=
!=
~=
&lt;&gt;
&gt;
!&gt;
&lt;
!&lt;
&gt;=
&lt;=
*=
=*
not
in
not in
between
not between
exists
not exists
like
not like
is
is not
= any
!= any
&gt; any
!&gt; any
&lt; any
!&lt; any
&gt;= any
&lt;= any
= all
!= all
&gt; all
!&gt; all
&lt; all
!&lt; all
&gt;= all
&lt;= all</a:TextTargetItem.Value>
<a:Comment>List of operators for comparing values, boolean, and various semantic operators</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o42">
<a:Name>Commit</a:Name>
<a:TextTargetItem.Value>commit</a:TextTargetItem.Value>
<a:Comment>Command for validating the transaction by OBDC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o43">
<a:Name>ReservedWord</a:Name>
<a:TextTargetItem.Value>ADD
ALL
ALTER
AND
ANY
AS
ASC
BACKUP
BEGIN
BETWEEN
BIGINT
BINARY
BIT
BOTTOM
BREAK
BY
CALL
CASCADE
CASE
CAST
CHAR
CHAR_CONVERT
CHARACTER
CHECK
CHECKPOINT
CLOSE
COMMENT
COMMIT
CONNECT
CONSTRAINT
CONTINUE
CONVERT
CREATE
CROSS
CURRENT
CURSOR
DATE
DBSPACE
DEALLOCATE
DEC
DECIMAL
DECLARE
DEFAULT
DELETE
DESC
DISABLE
DISTINCT
DO
DOUBLE
DROP
DYNAMIC
ELSE
ELSEIF
ENABLE
ENCRYPTED
END
ENDIF
ESCAPE
EXCEPTION
EXEC
EXECUTE
EXISTING
EXISTS
EXTERNLOGIN
FETCH
FIRST
FLOAT
FOR
FOREIGN
FORWARD
FROM
FULL
GOTO
GRANT
GROUP
HAVING
HOLDLOCK
IDENTIFIED
IF
IN
INDEX
INNER
INOUT
INSENSITIVE
INSERT
INSTALL
INSTEAD
INT
INTEGER
INTEGRATED
INTO
IQ
IS
ISOLATION
JOIN
KEY
LEFT
LIKE
LOCK
LOGIN
LONG
MATCH
MEMBERSHIP
MESSAGE
MODE
MODIFY
NATURAL
NEW
NO
NOHOLDLOCK
NOT
NOTIFY
NULL
NUMERIC
OF
OFF
ON
OPEN
OPTION
OPTIONS
OR
ORDER
OTHERS
OUT
OUTER
PASSTHROUGH
PRECISION
PREPARE
PRIMARY
PRINT
PRIVILEGES
PROC
PROCEDURE
PUBLICATION
RAISERROR
READTEXT
REAL
REFERENCE
REFERENCES
RELEASE
REMOTE
REMOVE
RENAME
RESOURCE
RESTORE
RESTRICT
RETURN
REVOKE
RIGHT
ROLLBACK
SAVE
SAVEPOINT
SCHEDULE
SCROLL
SELECT
SESSION
SET
SETUSER
SHARE
SMALLINT
SOME
SQLCODE
SQLSTATE
START
STOP
SUBTRANS
SUBTRANSACTION
SYNCHRONIZE
SYNTAX_ERROR
TABLE
TEMPORARY
THEN
TIME
TIMESTAMP
TINYINT
TO
TOP
TRAN
TRIGGER
TRUNCATE
TSEQUAL
UNION
UNIQUE
UNKNOWN
UNSIGNED
UPDATE
USER
USING
VALIDATE
VALUES
VARBINARY
VARCHAR
VARIABLE
VARYING
VIEW
WHEN
WHERE
WHILE
WITH
WORK
WRITETEXT
</a:TextTargetItem.Value>
<a:Comment>Reserved words</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o44">
<a:Name>Objects</a:Name>
<a:Comment>Contains sub-categories for each type of object in the database, for example: Table, or Reference. Each sub-category contains entries whose values define database commands and object-related characteristics</a:Comment>
<c:Categories>
<o:TargetCategory Id="o45">
<a:Name>Table</a:Name>
<a:Code>TABL</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLE&quot;        // generated code of the table
   &quot;TNAME&quot;        // name of the table
   &quot;TCODE&quot;        // code of the table
   &quot;TLABL&quot;        // comment of the table
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;TABLDEFN&quot;     // complete body of the table definition. Contains definition of columns, checks and keys
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o46">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o47">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>CKT_%.U26:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for check of table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o48">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create table [%QUALIFIER%]%TABLE% (
%TABLDEFN%
)
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a table. Example: create table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o49">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>in %s : category=tablespace</a:TextTargetItem.Value>
<a:Comment>Available options for creating a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o50">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for table options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o51">
<a:Name>TableComment</a:Name>
<a:TextTargetItem.Value>comment on table [%QUALIFIER%]%TABLE% is 
%.q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a table comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o52">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(
   select 1 from sys.systable 
   where table_name=%.q:TABLE%
     and table_type in (&#39;BASE&#39;)[%QUALIFIER%?
     and creator=user_id(%.q:OWNER%)]
) then
    drop table [%QUALIFIER%]%TABLE%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table. Example: drop table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o53">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>alter table [%OLDQUALIFIER%]%OLDTABL% rename %NEWTABL%</a:TextTargetItem.Value>
<a:Comment>Command for renaming a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o54">
<a:Name>AlterTableHeader</a:Name>
<a:Comment>Alter table header</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o55">
<a:Name>AlterTableFooter</a:Name>
<a:Comment>Alter table footer</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o56">
<a:Name>DropTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete check</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o57">
<a:Name>DefineTableCheck</a:Name>
<a:TextTargetItem.Value>check (%.A:CONSTRAINT%)  unenforced</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script of table check constraints</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o58">
<a:Name>AddTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add check (%.A:CONSTRAINT%)
   unenforced</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script for modifying table constraints within an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o59">
<a:Name>SqlChckQuery</a:Name>
<a:TextTargetItem.Value>               {OWNER, TABLE, CONSTRAINT}
               SELECT U.USER_NAME, T.TABLE_NAME, T.VIEW_DEF 
               FROM SYSUSERPERMS U, SYSTABLE T
               WHERE [U.USER_NAME = %.q:OWNER% AND] [T.TABLE_NAME = %.q:TABLE% AND]
               T.CREATOR = U.USER_ID AND T.TABLE_TYPE = &#39;BASE&#39; AND T.VIEW_DEF IS NOT NULL
               </a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object check constraints</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o60">
<a:Name>SqlListQuery</a:Name>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o61">
<a:Name>SqlAttrQuery</a:Name>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o62">
<a:Name>SqlOptsQuery</a:Name>
<a:TextTargetItem.Value>               {OWNER, TABLE, OPTIONS}
               select su.USER_NAME, st.TABLE_NAME, &#39;in &#39;+ dbspace_name 
               from SYS.SYSUSERPERMS su, SYS.SYSTABLE st, SYS.SYSFILE sf
               where
               st.file_id = sf.file_id and dbspace_name &lt;&gt; &#39;SYSTEM&#39; and
               [%TABLE% ? TABLE_NAME = %.q:TABLE% and] [%SCHEMA% ? su.USER_NAME = %.q:SCHEMA% and]
               st.CREATOR = su.USER_ID
               </a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o63">
<a:Name>Index</a:Name>
<a:Code>INDX</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
   &quot;INDEX&quot;        // generated code of the index
   &quot;INDEXNAME&quot;    // index name
   &quot;INDEXCODE&quot;    // index code
   &quot;UNIQUE&quot;       // keyword &quot;unique&quot; when the index is unique
   &quot;INDEXTYPE&quot;    // index type (available only for a few DBMS)
   &quot;INDEXKEY&quot;     // keywords &quot;primary&quot;, &quot;unique&quot; or &quot;foreign&quot; depending on the index origin
   &quot;CIDXLIST&quot;     // list of index columns. Eg: A asc, B desc, C asc
   &quot;CLUSTER&quot;      // keyword &quot;cluster&quot; when the index is cluster
For index columns, the following system variables are available:
   &quot;ASC&quot;          // keywords &quot;ASC&quot; or &quot;DESC&quot; depending on sort order
   &quot;ISASC&quot;        // TRUE if the index column sort is ascending
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o64">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o65">
<a:Name>MaxColIndex</a:Name>
<a:Comment>Maximum number of columns in an index</a:Comment>
<a:IntegerTargetItem.Value>1</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o66">
<a:Name>Enable</a:Name>
<a:Comment>Index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o67">
<a:Name>UniqName</a:Name>
<a:Comment>Unique index name in the database</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o68">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create [%UNIQUE%] %INDEXTYPE% index %INDEX% on [%TABLQUALIFIER%]%TABLE% (
%CIDXLIST%
)
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating an index. Example: create index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o69">
<a:Name>AddColIndex</a:Name>
<a:TextTargetItem.Value>%COLUMN% [%ASC%]</a:TextTargetItem.Value>
<a:Comment>Command for defining an index column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o70">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>in %s : category=tablespace
notify %d</a:TextTargetItem.Value>
<a:Comment>Default options for creating an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o71">
<a:Name>IndexType</a:Name>
<a:TextTargetItem.Value>LF
HG
HNG</a:TextTargetItem.Value>
<a:Comment>List of types available for an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o72">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for index options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o73">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists (select 1
            from  sys.sysindex            
            where  table_id    =    (select table_id from systable
                                     where table_name=%.q:TABLE%)
            and   index_name  = %.q:INDEX%
            and   index_type &lt;&gt; &#39;FP&#39;
            and   index_owner &lt;&gt; &#39;IQ&#39;
            and   index_id &gt; 0
            and   index_id &lt; 255) then
   drop index [%QUALIFIER%]%TABLE%.%INDEX%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping an index. Example: drop index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o74">
<a:Name>SqlListQuery</a:Name>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o75">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, INDEX, INDEXTYPE}
select u.user_name, t.table_name, i.index_name, i.index_type
from sysindex i, systable t, sysuserperms u
where t.table_id = i.table_id
and u.user_id = t.creator
and i.index_owner = &#39;USER&#39;
[and u.user_name=%.q:OWNER%]
[and t.table_name=%.q:TABLE%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o76">
<a:Name>SqlSysIndexQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, INDEX, INDEXTYPE}
select u.user_name, t.table_name, i.index_name, i.index_type
from sysindex i, systable t, sysuserperms u
where t.table_id = i.table_id
and u.user_id = t.creator
and i.index_owner != &#39;USER&#39;
[and u.user_name=%.q:OWNER%]
[and t.table_name=%.q:TABLE%]
union
select u.user_name, t.table_name, i.index_name, i.index_type
from sysindex i, systable t, sysuserperms u
where t.table_id = i.table_id
and u.user_id = t.creator
and i.index_type = &#39;SA&#39;
[and u.user_name=%.q:OWNER%]
[and t.table_name=%.q:TABLE%]</a:TextTargetItem.Value>
<a:Comment>SQL query to list system indexes created by the database</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o77">
<a:Name>MandIndexType</a:Name>
<a:Comment>Determines if the index type is mandatory for an index</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o78">
<a:Name>Column</a:Name>
<a:Code>COLN</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for columns)
   &quot;COLUMN&quot;       // generated code of the column
   &quot;COLNNO&quot;       // position of the column in the list of columns of the table
   &quot;COLNNAME&quot;     // name of the column
   &quot;COLNCODE&quot;     // code of the column
   &quot;PRIMARY&quot;      // keyword &quot;primary&quot; if the column is primary
   &quot;ISPKEY&quot;       // TRUE if the column is part of the primary key
   &quot;FOREIGN&quot;      // TRUE if the column is part of one foreign key
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o79">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o80">
<a:Name>EnableDefault</a:Name>
<a:Comment>Default values allowed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o81">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>CKC_%.U17:COLUMN%_%.U8:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for a column check parameter</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o82">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>%COLUMN% %DATATYPE%[ %NULLNOTNULL%]
      [check (%.A:CONSTRAINT%)]</a:TextTargetItem.Value>
<a:Comment>Command for defining a table column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o83">
<a:Name>ColumnComment</a:Name>
<a:TextTargetItem.Value>comment on column [%QUALIFIER%]%TABLE%.%COLUMN% is 
%.q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a column comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o84">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   rename %OLDCOLN% to %NEWCOLN%</a:TextTargetItem.Value>
<a:Comment>Command for renaming a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o85">
<a:Name>Create</a:Name>
<a:Comment>Command for adding a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o86">
<a:Name>ModifyColumn</a:Name>
<a:Comment>Command for modifying a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o87">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete %COLUMN%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o88">
<a:Name>ModifyColnDflt</a:Name>
<a:Comment>Command for modifying a column default in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o89">
<a:Name>ModifyColnChck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% 
      [check (%.A:CONSTRAINT%)]</a:TextTargetItem.Value>
<a:Comment>Command for modifying a column check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o90">
<a:Name>DropColnChck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% check null</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o91">
<a:Name>AltEnableAddColnChk</a:Name>
<a:Comment>Column check constraint allowed in an alter table statement</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o92">
<a:Name>Enable</a:Name>
<a:Comment>Column allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o93">
<a:Name>SqlListQuery</a:Name>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o94">
<a:Name>SqlChckQuery</a:Name>
<a:TextTargetItem.Value>               {OWNER, TABLE, COLUMN, CONSTRAINT}
               SELECT SU.USER_NAME, ST.TABLE_NAME, SC.COLUMN_NAME, SC.&quot;CHECK&quot;
               FROM SYSUSERPERMS SU, SYSTABLE ST, SYSCOLUMN SC
               WHERE [SU.USER_NAME=%.q:OWNER% AND] [ST.TABLE_NAME=%.q:TABLE% AND]
               ST.CREATOR=SU.USER_ID AND SC.TABLE_ID=ST.TABLE_ID AND
               SC.&quot;CHECK&quot; IS NOT NULL
               ORDER BY SU.USER_NAME, ST.TABLE_ID
               </a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object check constraints</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o95">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>               {OWNER, TABLE, COLUMN, DEFAULT, DOMAIN}
         
               SELECT U.USER_NAME, T.TABLE_NAME, C.COLUMN_NAME,  NULL, D.TYPE_NAME 
               FROM SYSUSERPERMS U,SYSTABLE T,SYSCOLUMN C, SYSUSERTYPE D 
               WHERE [U.USER_NAME=%.q:OWNER% AND] [T.TABLE_NAME=%.q:TABLE% AND]
               T.CREATOR=U.USER_ID AND C.TABLE_ID=T.TABLE_ID AND
               D.TYPE_ID = C.USER_TYPE
               UNION
               SELECT U.USER_NAME, T.TABLE_NAME, C.COLUMN_NAME,  C.&quot;DEFAULT&quot; , NULL
               FROM SYSUSERPERMS U,SYSTABLE T,SYSCOLUMN C
               WHERE [U.USER_NAME=%.q:OWNER% AND] [T.TABLE_NAME=%.q:TABLE% AND]
               T.CREATOR=U.USER_ID AND C.TABLE_ID=T.TABLE_ID AND
               C.&quot;DEFAULT&quot; IS NOT NULL
               ORDER BY 1,2</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:IntegerTargetItem Id="o96">
<a:Name>MaxConstLen</a:Name>
<a:Comment>Maximum constraint name length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TargetCategory Id="o97">
<a:Name>User</a:Name>
<a:Code>USER</a:Code>
<a:Comment>The following system variables are available:
   &quot;USER&quot;         // generated code of the user
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o98">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o99">
<a:Name>Enable</a:Name>
<a:Comment>User allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o100">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{@OBJTCODE id} Select USER_NAME from SYS.SYSUSERPERMS order by USER_NAME</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o101">
<a:Name>SqlAttrQuery</a:Name>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:BooleanTargetItem Id="o102">
<a:Name>EnableOption</a:Name>
<a:Comment>Physical options allowed  YES/NO</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TargetCategory Id="o103">
<a:Name>Reference</a:Name>
<a:Code>REFR</a:Code>
<a:Comment>The following system variables are available:
   &quot;REFR&quot;         // generated code of the reference
   &quot;REFNAME&quot;      // reference name
   &quot;PARENT&quot;       // generated code of the parent table
   &quot;PNAME&quot;        // name of the parent table
   &quot;PCODE&quot;        // code of the parent table
   &quot;CHILD&quot;        // generated code of the reference
   &quot;CNAME&quot;        // name of the child table
   &quot;CCODE&quot;        // code of the child table
   &quot;PQUALIFIER&quot;   // qualifier of the parent table. See QUALIFIER
   &quot;CQUALIFIER&quot;   // qualifier of the child table. See QUALIFIER
   &quot;REFRNAME&quot;     // Reference name
   &quot;REFRCODE&quot;     // Reference code
   &quot;FKCONSTRAINT&quot; // Reference constraint name (foreign key)
   &quot;PKCONSTRAINT&quot; // constraint name of the parent key used to reference object
   &quot;CKEYCOLUMNS&quot;  // list of parent key columns. Eg: C1, C2, C3
   &quot;FKEYCOLUMNS&quot;  // list of child foreign key columns. Eg:
   &quot;UPDCONST&quot;     // Update declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;DELCONST&quot;     // Delete declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;MINCARD&quot;      // Min cardinality
   &quot;MAXCARD&quot;      // Max cardinality
   &quot;POWNER&quot;       // Parent table owner
   &quot;COWNER&quot;       // child table owner
   &quot;CHCKONCMMT&quot;   // TRUE when check on commit is selected on the reference (ASA 6.0 specific)

For reference joins (couple of column in a reference),
the following system variables are available:
   &quot;CKEYCOLUMN&quot;   // generated code of the parent table column (primary key)
   &quot;FKEYCOLUMN&quot;   // generated code of the child table column (foreign key)
   &quot;PK&quot;           // primary key column generated code
   &quot;PKNAME&quot;       // primary key column name
   &quot;FK&quot;           // foreign key column generated code
   &quot;FKNAME&quot;       // foreign key column name
   &quot;AK&quot;           // alternate key column code (same as PK)
   &quot;AKNAME&quot;       // alternate key column name (same as PKNAME)
   &quot;COLTYPE&quot;      // primary column column datatype
   &quot;DEFAULT&quot;      // foreign key column default value
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o104">
<a:Name>Enable</a:Name>
<a:Comment>Foreign key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o105">
<a:Name>EnablefKeyName</a:Name>
<a:Comment>Foreign key role allowed in database generation</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o106">
<a:Name>FKAutoIndex</a:Name>
<a:Comment>Foreign key is auto-indexed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o107">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>FK_%.U8:CHILD%_%.U9:REFR%_%.U8:PARENT%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for foreign keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o108">
<a:Name>CheckOnCommit</a:Name>
<a:TextTargetItem.Value>CHECK ON COMMIT</a:TextTargetItem.Value>
<a:Comment>Referential integrity test differed after the COMMIT</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o109">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>foreign key %CONSTNAME% (%FKEYCOLUMNS%)
      references [%PQUALIFIER%]%PARENT%[ (%CKEYCOLUMNS%)]
      unenforced</a:TextTargetItem.Value>
<a:Comment>Command for defining a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o110">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add foreign key %CONSTNAME% (%FKEYCOLUMNS%)
      references [%PQUALIFIER%]%PARENT%[ (%CKEYCOLUMNS%)]
      unenforced</a:TextTargetItem.Value>
<a:Comment>Command for adding a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o111">
<a:Name>DclUpdIntegrity</a:Name>
<a:TextTargetItem.Value>
RESTRICT</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for update</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o112">
<a:Name>DclDelIntegrity</a:Name>
<a:TextTargetItem.Value>
RESTRICT</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for delete</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o113">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.sysforeignkey where role=%.q:CONSTNAME%) then
    alter table [%QUALIFIER%]%TABLE%
       delete foreign key %CONSTNAME%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a foreign key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o114">
<a:Name>PKey</a:Name>
<a:Code>PKEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o115">
<a:Name>Enable</a:Name>
<a:Comment>Primary key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o116">
<a:Name>PkAutoIndex</a:Name>
<a:Comment>Primary key is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o117">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>PK_%.U27:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for primary keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o118">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>primary key (%PKEYCOLUMNS%) [%ISMULTICOLN% ? unenforced]</a:TextTargetItem.Value>
<a:Comment>Command for defining a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o119">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add primary key (%PKEYCOLUMNS%)
   [%ISMULTICOLN% ? unenforced]</a:TextTargetItem.Value>
<a:Comment>Command for adding a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o120">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete primary key</a:TextTargetItem.Value>
<a:Comment>Command for dropping a primary key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o121">
<a:Name>Key</a:Name>
<a:Code>KEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;COLUMNS&quot;      // List of columns of the key. Eg: &quot;A, B, C&quot;
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o122">
<a:Name>Enable</a:Name>
<a:Comment>UNIQUE constraint allowed for tables</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o123">
<a:Name>UniqConstAutoIndex</a:Name>
<a:Comment>UNIQUE constraint is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o124">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>AK_%.U18:AKEY%_%.U8:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for alternate keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o125">
<a:Name>SqlAkeyIndex</a:Name>
<a:TextTargetItem.Value>select distinct I.INDEX_NAME
from SYSINDEX I, SYSUSERPERMS U, SYSTABLE T
where I.&quot;UNIQUE&quot; = &#39;U&#39; and I.TABLE_ID = T.TABLE_ID and 
      T.TABLE_NAME = %.q:TABLE% and T.CREATOR = U.USER_ID and U.USER_NAME = %.q:USER%</a:TextTargetItem.Value>
<a:Comment>SQL query to obtain the alternate key indexes of a table by ODBC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o126">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete unique (%COLNLIST%)</a:TextTargetItem.Value>
<a:Comment>Command for dropping an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o127">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>unique (%COLUMNS%) [%ISMULTICOLN% ? unenforced]</a:TextTargetItem.Value>
<a:Comment>Command for defining an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o128">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add unique (%COLUMNS%)
   [%ISMULTICOLN% ? unenforced]</a:TextTargetItem.Value>
<a:Comment>Command for adding an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o129">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{TABLE ID, ISPKEY ID, CONSTNAME ID, COLUMNS ...}

select
   t.table_name,
   1,
   null,
   c.column_name + &#39;, &#39;,
   c.column_id
from 
   systable t,
   sysuserperms u,
   syscolumn c
where
   t.table_name=%.q:TABLE%
   and u.user_name=%.q:OWNER%
   and t.creator=u.user_id
   and c.pkey=&#39;Y&#39;
   and c.table_id=t.table_id
union select
   t.table_name,
   0,
   i.index_name,
   c.column_name + &#39;, &#39;,
   x.sequence
from
   sysindex i,
   systable t,
   sysuserperms u,
   syscolumn c,
   sysixcol x
where
   t.table_name=%.q:TABLE%
   and u.user_name=%.q:OWNER%
   and t.creator=u.user_id
   and i.&quot;unique&quot;=&#39;U&#39;
   and i.index_owner = &#39;USER&#39;
   and i.table_id=t.table_id
   and x.table_id=t.table_id
   and c.table_id=t.table_id
   and x.index_id=i.index_id
   and x.column_id=c.column_id
order by
   1, 3, 5</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o130">
<a:Name>SqlAttrQuery</a:Name>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o131">
<a:Name>Abstract Data Type</a:Name>
<a:Code>ADT</a:Code>
<a:Comment>The following system variables are available:
   &quot;ADT&quot;          // generated code of the abstract data type
   &quot;TYPE&quot;         // ADT type
   &quot;SIZE&quot;         // ADT size
   &quot;FILE&quot;         // ADT: Java file
   &quot;ISARRAY&quot;      // ADT: is an array?
   &quot;ISLIST&quot;       // ADT: is a list?
   &quot;ISSTRUCT&quot;     // ADT: is a structure?
   &quot;ISOBJECT&quot;     // ADT: is an object?
   &quot;ISJAVA&quot;       // ADT: is a JAVA class?
   &quot;ADTDEF&quot;       // ADT definition
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o132">
<a:Name>Enable</a:Name>
<a:Comment>Abstract Data Types allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o133">
<a:Name>EnableAdtOnDomn</a:Name>
<a:Comment>Abstract Data Types allowed on domain</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o134">
<a:Name>EnableAdtOnColn</a:Name>
<a:Comment>Abstract Data Types allowed on column</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o135">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{ADT, OWNER, TYPE(25=Java , 26=Java)}
SELECT t.type_name, u.user_name,  t.domain_id
FROM sysusertype t, sysuserperms u
WHERE [u.user_name = %.q:SCHEMA% AND]
(domain_id = 25 OR domain_id = 26) AND
t.creator = u.user_id
ORDER BY type_name</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o136">
<a:Name>Install</a:Name>
<a:TextTargetItem.Value>install JAVA UPDATE from file %.q:FILE%</a:TextTargetItem.Value>
<a:Comment>Command for installing an abstract data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o137">
<a:Name>Remove</a:Name>
<a:TextTargetItem.Value>remove JAVA class %ADT%</a:TextTargetItem.Value>
<a:Comment>Command for uninstalling an abstract data type</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o138">
<a:Name>Domain</a:Name>
<a:Code>PDMDOMN</a:Code>
<a:Comment>The following system variables are available:
   &quot;DOMAIN&quot;       // generated code of the domain (also available for columns)
SQL Server specific domain system variables:
   &quot;RULENAME&quot;     // name of the rule object associated with the domain
   &quot;DEFAULTNAME&quot;  // name of the default object associated with the domain
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o139">
<a:Name>Enable</a:Name>
<a:Comment>User defined data types allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o140">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>30</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o141">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create domain %DOMAIN% %DATATYPE% [%NOTNULL%]
      [check (%.A:CONSTRAINT%)]</a:TextTargetItem.Value>
<a:Comment>Command for creating a user defined data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o142">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from systypes where name=%.q:DOMAIN%) then
   drop domain %DOMAIN%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a user defined data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o143">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{@OBJTCODE id, DTTPCODE, LENGTH, PREC} 
Select d.type_name, t.domain_name, d.width, t.&quot;precision&quot; 
from sysusertype d, sysdomain t 
where d.domain_id=t.domain_id and d.domain_id &lt;&gt; 25 and d.domain_id &lt;&gt; 26 and creator &lt;&gt; 0</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o144">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{@OBJTCODE id, DTTPCODE, LENGTH, PREC, DEFAULT, CONSTRAINT} 
Select d.type_name, t.domain_name, d.width, d.scale, d.&quot;default&quot;, d.&quot;check&quot; 
from sysusertype d, sysdomain t 
where d.domain_id=t.domain_id  and 
d.domain_id &lt;&gt; 25 and d.domain_id &lt;&gt; 26 and 
creator &lt;&gt; 0</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o145">
<a:Name>Tablespace</a:Name>
<a:Code>TSPC</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLESPACE&quot;   // generated code of the tablespace
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o146">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create dbspace %TABLESPACE%
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a tablespace. Example: create tablespace %TABLESPACE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o147">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a tablespace. Example: drop tablespace %TABLESPACE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o148">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>as %s : squoted=yes
&lt;store&gt; %s : default=iq store, list=iq store|iq temporary store|catalog store
size %d</a:TextTargetItem.Value>
<a:Comment>Default options for creating a tablespace.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o149">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for tablespace options.</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o150">
<a:Name>Enable</a:Name>
<a:Comment>Tablespace allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o151">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{TABLESPACE, OPTIONS}

select
   f.dbspace_name,
   &#39;as &#39;&#39;&#39;+f.file_name+&#39;&#39;&#39;&#39;
   + case (store_type) when &#39;SA&#39; then &#39; catalog store&#39; when &#39;IQ&#39; then &#39; iq store&#39; else &#39;&#39; end
from
   sys.sysfile f
where
   f.dbspace_name != &#39;SYSTEM&#39;
order by
   f.dbspace_name
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o152">
<a:Name>Storage</a:Name>
<a:Code>STOR</a:Code>
<a:Comment>The following system variables are available:
   &quot;STORAGE&quot;      // generated code of the storage
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o153">
<a:Name>Create</a:Name>
<a:Comment>Command for creating a storage. Example: create storage %STORAGE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o154">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a storage. Example: drop storage %STORAGE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o155">
<a:Name>Options</a:Name>
<a:Comment>Default options for creating a storage</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o156">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for storage options</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o157">
<a:Name>Database</a:Name>
<a:Code>DTBS</a:Code>
<a:Comment>The following system variables are available:
   &quot;DATABASE&quot;     // generated code of the database
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o158">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create database &#39;%DATABASE%.db&#39;
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a database. Example: create database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o159">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>transaction
log %s : list= on | off
&lt;logonfile&gt; %s
mirror %s
case %s : default=respect, list=respect | ignore
page size %d : default=1024, list=1024 | 2048 | 4096
collation %s
blank padding %s : list=on | off
ase
compatible
java %s : list=on | off
jconnect %s : list=on | off
iq path %s
iq size %d :default=1
iq page size %d : default=65536, list=1024 | 2048 | 4096 | 8192 | 16384 | 65536 | 131072 | 262144 | 524288
block size %d : list=512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768
message path %s
temporary path %s
temporary size %d :default=1</a:TextTargetItem.Value>
<a:Comment>Available options for creating a database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o160">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for database options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o161">
<a:Name>OpenDatabase</a:Name>
<a:TextTargetItem.Value>start database %DATABASE%;
connect database %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for opening a database. Example: open database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o162">
<a:Name>CloseDatabase</a:Name>
<a:TextTargetItem.Value>disconnect</a:TextTargetItem.Value>
<a:Comment>Command for closing a database. Example: close database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o163">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop database &#39;%DATABASE%.db&#39;</a:TextTargetItem.Value>
<a:Comment>Command for dropping a database. Example: drop database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o164">
<a:Name>Enable</a:Name>
<a:Comment>Database allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o165">
<a:Name>View</a:Name>
<a:Code>VIEW</a:Code>
<a:Comment>The following system variables are available:
   &quot;VIEW&quot;         // generated code of the view
   &quot;VIEWNAME&quot;     // view name
   &quot;VIEWCODE&quot;     // view code
   &quot;VIEWCOLN&quot;     // List of columns of the view. Eg: &quot;A, B, C&quot;
   &quot;SQL&quot;          // SQL text of the view. Eg: Select * from T1
   &quot;VIEWCHECK&quot;    // Keyword &quot;with check option&quot; if selected on the view
   &quot;SCRIPT&quot;       // complete view creation order. Eg: create view V1 as select * from T1
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o166">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create view [%QUALIFIER%]%VIEW% [(%VIEWCOLN%) ]as
%SQL%</a:TextTargetItem.Value>
<a:Comment>Command for creating a view. Example: create view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o167">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.systable where table_name=%.q:VIEW% and table_type=&#39;VIEW&#39;) then
   drop view [%QUALIFIER%]%VIEW%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a view. Example: drop view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o168">
<a:Name>ViewComment</a:Name>
<a:TextTargetItem.Value>comment on view [%QUALIFIER%]%VIEW% is 
%.q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a view comment.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o169">
<a:Name>ViewCheck</a:Name>
<a:TextTargetItem.Value>with check option</a:TextTargetItem.Value>
<a:Comment>Option for checking a view</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o170">
<a:Name>SqlListQuery</a:Name>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o171">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{@OBJTCODE id, OWNER id, SCRIPT} 
SELECT t.table_name, u.user_name, t.view_def
FROM sysuserperms u, systable t
WHERE t.creator=u.user_id 
AND t.table_type=&#39;VIEW&#39;</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o172">
<a:Name>Join Index</a:Name>
<a:Code>JIDX</a:Code>
<a:Comment>The following system variables are available:
   &quot;JIDX&quot;         // generated code for join index
   &quot;JIDXDEFN&quot;     // complete body of join index definition
   &quot;REFRLIST&quot;     // list of references (for ODBC)
   &quot;RFJNLIST&quot;     // list of reference joins (for ODBC)
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o173">
<a:Name>Enable</a:Name>
<a:Comment>Join index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o174">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o175">
<a:Name>Options</a:Name>
<a:Comment>Available options for creating a join index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o176">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for join index options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o177">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(
   select 1 from sys.sysiqjoinindex 
   where joinindex_name=&#39;%JIDX%&#39;[%QUALIFIER%?
   and creator=user_id(%.q:OWNER%)]
) then
   drop join index [%QUALIFIER%]%JIDX%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a join index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o178">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create join index [%QUALIFIER%]%JIDX% for
%JIDXDEFN%</a:TextTargetItem.Value>
<a:Comment>Command for creating a join index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o179">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{JIDX ID, OWNER ID, REFRLIST ...}
SELECT j.joinindex_name, u.user_name, ltu.user_name || &#39;.&#39; || lt.table_name || &#39;,&#39; || rtu.user_name || &#39;.&#39; || rt.table_name || &#39;,&#39;
FROM sysiqjoinindex j, sysuserperms u, sysiqjoinixcolumn jc, systable lt, systable rt, sys.sysuserperms ltu, sys.sysuserperms rtu
WHERE j.joinindex_id = jc.joinindex_id
AND j.creator = u.user_id
AND jc.left_table_id = lt.table_id AND jc.right_table_id = rt.table_id
AND ltu.user_id = lt.creator AND rtu.user_id = rt.creator
[AND u.user_name= %.q:OWNER%]
ORDER BY joinindex_name</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o180">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{JIDX ID, OWNER ID, RFJNLIST ...}
SELECT j.joinindex_name, u.user_name, ltu.user_name || &#39;.&#39; || lt.table_name || &#39;.&#39; || lc.column_name || &#39;=&#39; || rtu.user_name || &#39;.&#39; || rt.table_name || &#39;.&#39; || rc.column_name || &#39;,&#39;
FROM sysiqjoinindex j, sysuserperms u, sysiqjoinixcolumn jc, systable lt, systable rt, syscolumn lc, syscolumn rc, sys.sysuserperms ltu, sys.sysuserperms rtu
WHERE j.joinindex_id = jc.joinindex_id
AND j.creator = u.user_id
AND jc.left_table_id = lt.table_id AND jc.right_table_id = rt.table_id
AND jc.left_column_id = lc.column_id AND jc.right_column_id = rc.column_id
AND lc.table_id = lt.table_id AND rc.table_id = rt.table_id
AND ltu.user_id = lt.creator AND rtu.user_id = rt.creator
[AND u.user_name= %.q:OWNER%]
ORDER BY joinindex_name</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o181">
<a:Name>EnableOwner</a:Name>
<a:Comment>Owner allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o182">
<a:Name>Procedure</a:Name>
<a:Code>PROC</a:Code>
<a:Comment>The following system variables are available:
   &quot;PROC&quot;         // generated code of the procedure (also available for trigger when the trigger is implemented with a procedure)
   &quot;FUNC&quot;         // generated code of the procedure if the procedure is a function (with return value)
   &quot;PROCPRMS&quot;     // list of parameters of the procedure (also available for function)
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o183">
<a:Name>Enable</a:Name>
<a:Comment>Procedure allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o184">
<a:Name>EnableFunc</a:Name>
<a:Comment>Function allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o185">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o186">
<a:Name>MaxFuncLen</a:Name>
<a:Comment>Function name length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o187">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.sysprocedure where proc_name = %.q:PROC%[ and user_name(creator)=%.q:OWNER%]) then
   drop procedure [%QUALIFIER%]%PROC%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a procedure. Example: drop procedure %PROC%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o188">
<a:Name>DropFunc</a:Name>
<a:Comment>Command for dropping a function. Example: drop function %FUNC%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o189">
<a:Name>CustomProc</a:Name>
<a:TextTargetItem.Value>create procedure [%QUALIFIER%]%PROC% (IN &lt;arg&gt; &lt;type&gt;)
begin

end</a:TextTargetItem.Value>
<a:Comment>Command for creating a stored procedure</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o190">
<a:Name>CustomFunc</a:Name>
<a:TextTargetItem.Value>create function %FUNC% (&lt;arg&gt; &lt;type&gt;) 
RETURNS &lt;type&gt;
begin

end</a:TextTargetItem.Value>
<a:Comment>Command for creating a function</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o191">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, @OBJTCODE}
SELECT U.USER_NAME, P.PROC_NAME 
FROM SYSUSERPERMS U,SYSPROCEDURE P 
WHERE [%SCHEMA% ? U.USER_NAME=%.q:SCHEMA% AND] P.CREATOR=U.USER_ID
ORDER BY U.USER_NAME
               </a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o192">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, @OBJTCODE, SCRIPT, @OBJTLABL}
SELECT U.USER_NAME, P.PROC_NAME, P.PROC_DEFN, P.REMARKS
FROM SYSUSERPERMS U,SYSPROCEDURE P 
WHERE [%SCHEMA% ? U.USER_NAME=%.q:SCHEMA% AND] P.CREATOR=U.USER_ID
ORDER BY U.USER_NAME
               </a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o193">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create procedure [%QUALIFIER%]%PROC%[%PROCPRMS%?([%PROCPRMS%])]
%TRGDEFN%</a:TextTargetItem.Value>
<a:Comment>Command for creating a procedure. Example: create procedure %PROC% %TRGDEFN%</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o194">
<a:Name>DataType</a:Name>
<a:Comment>Contains data type translation entries. These entries list the correspondence between internal data types and the target database data types</a:Comment>
<c:Categories>
<o:MapTargetItem Id="o195">
<a:Name>AmcdDataType</a:Name>
<a:Comment>Data types translation table from internal data types to target database data types.
        %n is the length of the data type
        %s is the size of the data type
        %p is the precision of the data type</a:Comment>
<a:MapTargetItem.Value>&lt;UNDEF&gt;=&lt;Undefined&gt;
A%n=CHAR(%n)
VA%n=VARCHAR(%n)
LA=VARCHAR
LA%n=VARCHAR(%n)
LVA=VARCHAR
LVA%n=VARCHAR
BT=TINYINT
BT%n=TINYINT
SI=SMALLINT
I=INTEGER
LI=BIGINT
N=NUMERIC
N%n=NUMERIC(%n)
N%s,%p=NUMERIC(%s,%p)
DC=DECIMAL
DC%n=DECIMAL(%n)
DC%s,%p=DECIMAL(%s,%p)
SF=REAL
F=FLOAT
F%n=FLOAT(%n)
LF=DOUBLE
MN=NUMERIC(8,2)
MN%n=NUMERIC(%n)
MN%s,%p=NUMERIC(%s,%p)
D=DATE
T=TIME
DT=DATETIME
TS=TIMESTAMP
BL=SMALLINT
NO=INTEGER
NO%n=INTEGER
BIN%n=NUMERIC(%n)
LBIN=NUMERIC
LBIN%n=NUMERIC(%n)
TXT=VARCHAR
TXT%n=VARCHAR(%n)
MBT=CHAR(1)
MBT%n=CHAR(%n)
VMBT=VARCHAR(255)
VMBT%n=VARCHAR(%n)
PIC=NUMERIC
PIC%n=NUMERIC
BMP=NUMERIC
BMP%n=NUMERIC
OLE=NUMERIC
OLE%n=NUMERIC
*=CHAR(10)</a:MapTargetItem.Value>
<a:List>&lt;UNDEF&gt;
A%n
VA%n
LA
LA%n
LVA
LVA%n
BT
BT%n
SI
I
LI
N
N%n
N%s,%p
DC
DC%n
DC%s,%p
SF
F
F%n
LF
MN
MN%n
MN%s,%p
D
T
DT
TS
BL
NO
NO%n
BIN%n
LBIN
LBIN%n
TXT
TXT%n
MBT
MBT%n
VMBT
VMBT%n
PIC
PIC%n
BMP
BMP%n
OLE
OLE%n
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o196">
<a:Name>PhysDataType</a:Name>
<a:Comment>Data types translation table from target database data types to internal data types.</a:Comment>
<a:MapTargetItem.Value>&lt;Undefined&gt;=&lt;UNDEF&gt;
CHAR=A1
CHAR(%n)=A%n
CHARACTER=A1
CHARACTER(%n)=A%n
VARCHAR=VA1
VARCHAR(%n)=VA%n
CHARACTER VARYING=VA1
CHARACTER VARYING(%n)=VA%n
BIGINT=LI
NUMERIC=N
NUMERIC(%n)=N%n
NUMERIC(%s,%p)=N%s,%p
DECIMAL=DC
DECIMAL(%n)=DC%n
DECIMAL(%s,%p)=DC%s,%p
TINYINT=BT
INT=I
INTEGER=I
SMALLINT=SI
REAL=SF
FLOAT=F
FLOAT(%n)=F%n
DOUBLE=LF
DATE=D
DATETIME=DT
TIME=T
TIMESTAMP=TS
UNSIGNED BIGINT=LI
UNSIGNED INT=I
UNSIGNED INTEGER=I</a:MapTargetItem.Value>
<a:List>&lt;Undefined&gt;
CHAR
CHAR(%n)
CHARACTER
CHARACTER(%n)
VARCHAR
VARCHAR(%n)
CHARACTER VARYING
CHARACTER VARYING(%n)
BIGINT
NUMERIC
NUMERIC(%n)
NUMERIC(%s,%p)
DECIMAL
DECIMAL(%n)
DECIMAL(%s,%p)
TINYINT
INT
INTEGER
SMALLINT
REAL
FLOAT
FLOAT(%n)
DOUBLE
DATE
DATETIME
TIME
TIMESTAMP
UNSIGNED BIGINT
UNSIGNED INT
UNSIGNED INTEGER
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o197">
<a:Name>PhysDttpSize</a:Name>
<a:Comment>Table of storage sizes of target database data type</a:Comment>
<a:MapTargetItem.Value>numeric=18
decimal=18
time=8
timestamp=8</a:MapTargetItem.Value>
<a:List>numeric
decimal
time
timestamp
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o198">
<a:Name>OdbcPhysDataType</a:Name>
<a:Comment>Data types translation table from ODBC data types to target database data types.</a:Comment>
<a:MapTargetItem.Value>char(1)=char
binary(1)=binary</a:MapTargetItem.Value>
<a:List>char(1)
binary(1)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o199">
<a:Name>PhysLogADTType</a:Name>
<a:Comment>Abstract Data types translation table from target database abstract data types to internal abstract data types.</a:Comment>
<a:MapTargetItem.Value>Java=Java</a:MapTargetItem.Value>
<a:List>Java
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o200">
<a:Name>LogPhysADTType</a:Name>
<a:Comment>Abstract Data types translation table from internal abstract data types to target database abstract data types.</a:Comment>
<a:MapTargetItem.Value>Array=&lt;Undefined&gt;
List=&lt;Undefined&gt;
Java=Java
Object=&lt;Undefined&gt;
Structured=&lt;Undefined&gt;</a:MapTargetItem.Value>
<a:List>Array
List
Java
Object
Structured
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o201">
<a:Name>AllowedADT</a:Name>
<a:TextTargetItem.Value>Java</a:TextTargetItem.Value>
<a:Comment>The list of ADT which can be used as the datatype of a domain or column</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o202">
<a:Name>PhysOdbcDataType</a:Name>
<a:Comment>Data types translation table from target database data types to ODBC data types.</a:Comment>
<a:MapTargetItem.Value>int=integer
character varying=varchar
character varying(%n)=varchar(%n)
decimal=decimal(126,38)
numeric=numeric(126,38)</a:MapTargetItem.Value>
<a:List>int
character varying
character varying(%n)
decimal
numeric
</a:List>
</o:MapTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:ProfileTargetItem Id="o203">
<a:Name>Profile</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o204">
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TargetCategory>
</c:Categories>
</o:ProfileTargetItem>
</c:Categories>
</o:DBMS>

</DBMS>
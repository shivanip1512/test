<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" Code="Sybase AS Anywhere 8" Family="SQL SERVER;WATCOM" Name="Sybase AS Anywhere 8" signature="XDB_XML" version="12.0.0.1645"?>
<!-- do not edit this file -->

<DBMS xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:DBMS Id="o1">
<a:ObjectID>0F8F4B33-106F-4A26-9D61-9CA898F77AAD</a:ObjectID>
<a:Name>Sybase AS Anywhere 8</a:Name>
<a:Code>Sybase AS Anywhere 8</a:Code>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1026305183</a:ModificationDate>
<a:Modifier>mledier</a:Modifier>
<a:Family>SQL SERVER;WATCOM</a:Family>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined

</a:CheckGlobalScript>
<c:Categories>
<o:TargetCategory Id="o2">
<a:Name>General</a:Name>
<a:Comment>Target DBMS identification</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o3">
<a:Name>SqlSupport</a:Name>
<a:Comment>SQL syntax allowed. This does not impact the script generation, but it impacts the SQL Preview</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o4">
<a:Name>EnableCheck</a:Name>
<a:Comment>Determines if the generation of check parameters is authorized or not</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o5">
<a:Name>Enableconstname</a:Name>
<a:Comment>Determines if constraint names are used during the generation</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o6">
<a:Name>Script</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the Script generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o7">
<a:Name>Sql</a:Name>
<a:Comment>Contains sub-categories Syntax, Format, File and Keywords. Each sub-category contains entries whose values define general syntax for the database</a:Comment>
<c:Categories>
<o:TargetCategory Id="o8">
<a:Name>Syntax</a:Name>
<a:Comment>Contains general parameters for SQL syntax</a:Comment>
<c:Categories>
<o:CharacterTargetItem Id="o9">
<a:Name>Terminator</a:Name>
<a:Comment>End of command character</a:Comment>
<a:CharacterTargetItem.Value>;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o10">
<a:Name>BlockTerminator</a:Name>
<a:Comment>End of block character</a:Comment>
</o:StringTargetItem>
<o:BooleanTargetItem Id="o11">
<a:Name>UseBlockTerm</a:Name>
<a:Comment>Use end of block character by default</a:Comment>
</o:BooleanTargetItem>
<o:CharacterTargetItem Id="o12">
<a:Name>Delimiter</a:Name>
<a:Comment>Field separation character. Example: col1, col2, col3</a:Comment>
<a:CharacterTargetItem.Value>,</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o13">
<a:Name>Quote</a:Name>
<a:Comment>Character used to enclose string values</a:Comment>
<a:CharacterTargetItem.Value>&#39;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o14">
<a:Name>BlockComment</a:Name>
<a:Comment>Characters used to enclose a multi-line comment</a:Comment>
<a:StringTargetItem.Value>/*   */</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o15">
<a:Name>LineComment</a:Name>
<a:Comment>Characters used to enclose a single line comment</a:Comment>
<a:StringTargetItem.Value>--</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:TextTargetItem Id="o16">
<a:Name>UsingBlockTerm</a:Name>
<a:TextTargetItem.Value>create trigger, %TERMINATOR%,  1
{
   begin, end, 3
   if, end if, 4
   case, end case, 4
   loop, end loop, 4
   for, end for, 4
   declare, ;, 5
}
create procedure,%TERMINATOR%,  1
{
   begin, end, 3
   if, end if, 4
   case, end case, 4
   loop, end loop, 4
   for, end for, 4
   declare, ;, 5
}
create function,%TERMINATOR%,  1
{
   begin, end, 3
   if, end if, 4
   case, end case, 4
   loop, end loop, 4
   for, end for, 4
   declare, ;, 5
}</a:TextTargetItem.Value>
<a:Comment>List of objects using block definition during reverse.</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o17">
<a:Name>Format</a:Name>
<a:Comment>Contains entries that define script formatting</a:Comment>
<c:Categories>
<o:StringTargetItem Id="o18">
<a:Name>IllegalChar</a:Name>
<a:Comment>Invalid characters for names</a:Comment>
<a:StringTargetItem.Value>&quot; +-*/!=&lt;&gt;&#39;&quot;()&quot;.</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:BooleanTargetItem Id="o19">
<a:Name>UpperCaseOnly</a:Name>
<a:Comment>Uppercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o20">
<a:Name>LowerCaseOnly</a:Name>
<a:Comment>Lowercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o21">
<a:Name>EnableOwnerPrefix</a:Name>
<a:Comment>Object codes can have a prefix made of the object owner code</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o22">
<a:Name>File</a:Name>
<a:Comment>Contains header, footer and usage text entries used during the generation</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o23">
<a:Name>Header</a:Name>
<a:Comment>Header text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o24">
<a:Name>Footer</a:Name>
<a:Comment>Footer text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o25">
<a:Name>EnableMultiFile</a:Name>
<a:Comment>Multi-script allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:StringTargetItem Id="o26">
<a:Name>ScriptExt</a:Name>
<a:Comment>Main script extension in database generation</a:Comment>
<a:StringTargetItem.Value>sql</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o27">
<a:Name>TableExt</a:Name>
<a:Comment>Other scripts extension in database generation</a:Comment>
<a:StringTargetItem.Value>sql</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o28">
<a:Name>StartCommand</a:Name>
<a:Comment>Command for executing a script</a:Comment>
<a:StringTargetItem.Value>read %PATHSCRIPT%\%NAMESCRIPT%</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:TextTargetItem Id="o29">
<a:Name>Usage1</a:Name>
<a:TextTargetItem.Value>  (1) Start the SQL interpreter: ISQL
  (2) Open the script %NAMESCRIPT%
  (3) Execute the script</a:TextTargetItem.Value>
<a:Comment>Usage for a single script in database generation</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o30">
<a:Name>Usage2</a:Name>
<a:TextTargetItem.Value>  (1) Start the SQL interpreter: ISQL
  (2) Open one script from the directory %PATHSCRIPT% 
  (3) Execute this script</a:TextTargetItem.Value>
<a:Comment>Usage for multiple scripts in database generation</a:Comment>
</o:TextTargetItem>
<o:StringTargetItem Id="o31">
<a:Name>TriggerExt</a:Name>
<a:Comment>Script file extension in triggers and procedures generation</a:Comment>
<a:StringTargetItem.Value>trg</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:TextTargetItem Id="o32">
<a:Name>TrgUsage1</a:Name>
<a:TextTargetItem.Value>  (1) Start the SQL interpreter: ISQL
  (2) Select the item &quot;Options&quot; of the menu &quot;Command&quot;
  (3) Change &quot;Command Delimiter&quot; to /
  (4) Open the script %NAMESCRIPT% from the directory %PATHSCRIPT%
  (5) Execute the script
  (6) Restore &quot;Command Delimiter&quot; to ;</a:TextTargetItem.Value>
<a:Comment>Usage for a single script in triggers and procedures generation</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o33">
<a:Name>TrgUsage2</a:Name>
<a:TextTargetItem.Value>  (1) Start the SQL interpreter: ISQL
  (2) Select the item &quot;Options&quot; of the menu &quot;Command&quot;
  (3) Change &quot;Command Delimiter&quot; to /
  (4) Open one script from the directory %PATHSCRIPT%
  (5) Execute the script
  (6) Restore &quot;Command Delimiter&quot; to ;</a:TextTargetItem.Value>
<a:Comment>Usage for multiple scripts in triggers and procedures generation</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o34">
<a:Name>Keywords</a:Name>
<a:Comment>Contains the list of reserved words and functions available in SQL</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o35">
<a:Name>ReservedDefault</a:Name>
<a:TextTargetItem.Value>autoincrement
current database
current date
current publisher
current remote user
current time
current timestamp
current user
current utc timestamp
getdate()
global autoincrement
last user
null
sqlcode
sqlstate
timestamp
user
utc timestamp</a:TextTargetItem.Value>
<a:Comment>Reserved default values</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o36">
<a:Name>GroupFunc</a:Name>
<a:TextTargetItem.Value>avg()
count()
list()
max()
min()
sum()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions to use with group keywords.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o37">
<a:Name>NumberFunc</a:Name>
<a:TextTargetItem.Value>abs()
acos()
asin()
atan()
atn2()
ceiling()
cos()
cot()
degrees()
exp()
floor()
log()
log10()
mod()
pi()
power()
radians()
rand()
remainder()
round()
sign()
sin()
sqrt()
tan()
truncate()
truncnum()
</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used on numbers</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o38">
<a:Name>CharFunc</a:Name>
<a:TextTargetItem.Value>ascii()
byte_length()
byte_substr()
char()
charindex()
char_length()
compare()
difference()
insertstr()
lcase()
left()
length()
locate()
lower()
ltrim()
patindex()
repeat()
replace()
replicate()
right()
rtrim()
similar()
sortkey()
soundex()
space()
str()
string()
stuff()
substring()
trim()
ucase()
upper()
</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for characters and strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o39">
<a:Name>DateFunc</a:Name>
<a:TextTargetItem.Value>date()
dateadd()
datediff()
dateformat()
datename()
datepart()
datetime()
day()
dayname()
days()
dow()
getdate()
hour()
hours()
minute()
minutes()
month()
monthname()
months()
now()
quarter()
second()
seconds()
today()
weeks()
years()
ymd()
</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for dates</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o40">
<a:Name>ConvertFunc</a:Name>
<a:TextTargetItem.Value>cast()
convert()
hextoint()
inttohex()
isdate()
isnumeric()
</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used to convert values between hex and integer and handling strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o41">
<a:Name>OtherFunc</a:Name>
<a:TextTargetItem.Value>argn()
coalesce()
col_length()
col_name()
connection_property()
datalength()
db_id()
db_name()
db_property()
estimate()
estimate_source()
event_condition()
event_condition_name()
event_parameter()
experience_estimate()
explanation()
graphical_plan()
graphical_ulplan()
greater()
identity()
ifnull()
index_col()
index_estimate()
isnull()
lesser()
long_ulplan()
next_connection()
next_database()
nullif()
number()
object_id()
object_name()
plan()
property()
property_description()
property_name()
property_number()
rewrite()
short_ulplan()
sqldialect()
suser_id()
suser_name()
textptr()
traceback()
transactsql()
watcomsql()
tsequal()
user_id()
user_name()
</a:TextTargetItem.Value>
<a:Comment>List of other SQL functions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o42">
<a:Name>ListOperators</a:Name>
<a:TextTargetItem.Value>=
!=
~=
&lt;&gt;
&gt;
!&gt;
&lt;
!&lt;
&gt;=
&lt;=
*=
=*
not
in
not in
between
not between
exists
not exists
like
not like
is
is not
= any
!= any
&gt; any
!&gt; any
&lt; any
!&lt; any
&gt;= any
&lt;= any
= all
!= all
&gt; all
!&gt; all
&lt; all
!&lt; all
&gt;= all
&lt;= all</a:TextTargetItem.Value>
<a:Comment>List of operators for comparing values, boolean, and various semantic operators</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o43">
<a:Name>Commit</a:Name>
<a:TextTargetItem.Value>commit</a:TextTargetItem.Value>
<a:Comment>Command for validating the transaction by OBDC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o44">
<a:Name>ReservedWord</a:Name>
<a:TextTargetItem.Value>add
all
alter
and
any
as
asc
backup
begin
between
bigint
binary
bit
bottom
break
by
call
capability
cascade
case
cast
char
char_convert
character
check
checkpoint
close
comment
commit
connect
constraint
contains
continue
convert
create
cross
cube
current
cursor
date
dbspace
deallocate
dec
decimal
declare
default
delete
desc
distinct
do
double
drop
dynamic
else
elseif
encrypted
end
endif
escape
exception
exec
execute
existing
exists
externlogin
fetch
first
float
for
foreign
forward
from
full
goto
grant
group
having
holdlock
identified
if
in
index
inner
inout
insensitive
insert
install
instead
int
integer
integrated
into
iq
is
isolation
join
key
left
like
lock
login
long
match
membership
message
mode
modify
natural
new
no
noholdlock
not
notify
null
numeric
of
off
on
open
option
options
or
order
others
out
outer
passthrough
precision
prepare
primary
print
privileges
proc
procedure
publication
raiserror
readtext
real
reference
references
release
remote
remove
rename
reorganize
resource
restore
restrict
return
revoke
right
rollback
rollup
save
savepoint
schedule
scroll
select
sensitive
session
set
setuser
share
smallint
some
sqlcode
sqlstate
start
stop
subtrans
subtransaction
synchronize
syntax_error
table
temporary
then
time
timestamp
tinyint
to
top
tran
trigger
truncate
tsequal
union
unique
unknown
unsigned
update
user
using
validate
values
varbinary
varchar
variable
varying
view
wait
waitfor
when
where
while
with
work
writetext</a:TextTargetItem.Value>
<a:Comment>Reserved words</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o45">
<a:Name>Objects</a:Name>
<a:Comment>Contains sub-categories for each type of object in the database, for example: Table, or Reference. Each sub-category contains entries whose values define database commands and object-related characteristics</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o46">
<a:Name>EnableOption</a:Name>
<a:Comment>Physical options allowed  YES/NO</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TargetCategory Id="o47">
<a:Name>Table</a:Name>
<a:Code>TABL</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLE&quot;        // generated code of the table
   &quot;TNAME&quot;        // name of the table
   &quot;TCODE&quot;        // code of the table
   &quot;TLABL&quot;        // comment of the table
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;TABLDEFN&quot;     // complete body of the table definition. Contains definition of columns, checks and keys
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o48">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o49">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>CKT_%.U26:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for check of table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o50">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create[%ExtGlobalTemporaryTable%? global temporary] table [%QUALIFIER%]%TABLE% 
(
    %TABLDEFN%
)
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a table. Example: create table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o51">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>in %s : category=tablespace
on commit %s : default=delete rows, list=delete rows|preserve rows
at %s : squoted=yes</a:TextTargetItem.Value>
<a:Comment>Available options for creating a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o52">
<a:Name>TableComment</a:Name>
<a:TextTargetItem.Value>comment on table [%QUALIFIER%]%TABLE% is 
%.q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a table comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o53">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(
   select 1 from sys.systable 
   where table_name=%.q:TABLE%
     and table_type in (&#39;BASE&#39;, &#39;GBL TEMP&#39;)[%QUALIFIER%?
     and creator=user_id(%.q:OWNER%)]
) then
    drop table [%QUALIFIER%]%TABLE%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table. Example: drop table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o54">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>alter table [%OLDQUALIFIER%]%OLDTABL% rename %NEWTABL%</a:TextTargetItem.Value>
<a:Comment>Command for renaming a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o55">
<a:Name>DropTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
    delete check</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o56">
<a:Name>DefineTableCheck</a:Name>
<a:TextTargetItem.Value>check (%.A:CONSTRAINT%)</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script of table check constraints</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o57">
<a:Name>AddTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
    add check (%.A:CONSTRAINT%)</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script for modifying table constraints within an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o58">
<a:Name>SqlOptsQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, OPTIONS}

select
   u.user_name,
   t.table_name,
   &#39;in &#39;+ f.dbspace_name
from
   sys.sysuserperms u
      join sys.systable t on (t.creator = u.user_id)
      join sys.sysfile f on (f.file_id = t.file_id)
where
   f.dbspace_name &lt;&gt; &#39;SYSTEM&#39;
[  and t.table_name = %.q:TABLE%]
[  and u.user_name = %.q:OWNER%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o59">
<a:Name>SqlChckQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, CONSTRAINT}

select 
   u.user_name, 
   t.table_name, 
   t.view_def
from 
   sys.sysuserperms u
      join sys.systable t on (t.creator = u.user_id)
where 
   t.table_type = &#39;BASE&#39;
   and t.view_def is not null
[  and u.user_name = %.q:OWNER%]
[  and t.table_name = %.q:TABLE%]
               </a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object check constraints</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o60">
<a:Name>Enable</a:Name>
<a:Comment>Table allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:MapTargetItem Id="o61">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a table.
The first column is the SQL name of permission (eg: SELECT)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>ALTER=Alter
DELETE=Delete
INSERT=Insert
REFERENCES=References
SELECT=Select
UPDATE=Update</a:MapTargetItem.Value>
<a:List>ALTER
DELETE
INSERT
REFERENCES
SELECT
UPDATE
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o62">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE ID, PERMISSION ...}

select 
u1.user_name grantee,
case
when (p.selectauth = &#39;Y&#39;) then &#39;SELECT&#39;
when (p.selectauth = &#39;G&#39;) then &#39;SELECT+&#39;
end + &#39;,&#39; ||
case 
when (p.insertauth = &#39;Y&#39;) then &#39;INSERT&#39; 
when (p.insertauth = &#39;G&#39;) then &#39;INSERT+&#39; 
end + &#39;,&#39; ||
case 
when (p.deleteauth = &#39;Y&#39;) then &#39;DELETE&#39; 
when (p.deleteauth = &#39;G&#39;) then &#39;DELETE+&#39; 
end + &#39;,&#39; ||
case 
when (p.updateauth = &#39;Y&#39;) then &#39;UPDATE&#39; 
when (p.updateauth = &#39;G&#39;) then &#39;UPDATE+&#39; 
end + &#39;,&#39; ||
case 
when (p.alterauth = &#39;Y&#39;) then &#39;ALTER&#39; 
when (p.alterauth = &#39;G&#39;) then &#39;ALTER+&#39; 
end
permission
from sysuserperms u, sysuserperms u1, systable s, systableperm p
where 
s.table_type = &#39;BASE&#39; and
(s.table_name = %.q:TABLE% ) and
[ (s.creator = u.user_id) and (u.user_name = %.q:OWNER% ) and ]
(s.table_id = p.stable_id) and
(u1.user_id = p.grantee)</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o63">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, ExtGlobalTemporaryTable, COMMENT}

select 
   u.user_name, 
   t.table_name, 
   case(t.table_type) when &#39;BASE&#39; then &#39;false&#39; else &#39;true&#39; end,
   t.remarks
from 
   sys.sysuserperms u
      join sys.systable t on (t.creator = u.user_id)
where 
   t.table_type in (&#39;BASE&#39;, &#39;GBL TEMP&#39;)
[  and u.user_name = %.q:OWNER%]
[  and t.table_name = %.q:TABLE%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o64">
<a:Name>Index</a:Name>
<a:Code>INDX</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
   &quot;INDEX&quot;        // generated code of the index
   &quot;INDEXNAME&quot;    // index name
   &quot;INDEXCODE&quot;    // index code
   &quot;UNIQUE&quot;       // keyword &quot;unique&quot; when the index is unique
   &quot;INDEXTYPE&quot;    // index type (available only for a few DBMS)
   &quot;INDEXKEY&quot;     // keywords &quot;primary&quot;, &quot;unique&quot; or &quot;foreign&quot; depending on the index origin
   &quot;CIDXLIST&quot;     // list of index columns. Eg: A asc, B desc, C asc
   &quot;CLUSTER&quot;      // keyword &quot;cluster&quot; when the index is cluster
For index columns, the following system variables are available:
   &quot;ASC&quot;          // keywords &quot;ASC&quot; or &quot;DESC&quot; depending on sort order
   &quot;ISASC&quot;        // TRUE if the index column sort is ascending
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o65">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o66">
<a:Name>MaxColIndex</a:Name>
<a:Comment>Maximum number of columns in an index</a:Comment>
<a:IntegerTargetItem.Value>99</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o67">
<a:Name>Enable</a:Name>
<a:Comment>Index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o68">
<a:Name>UniqName</a:Name>
<a:Comment>Unique index name in the database</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o69">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create [%UNIQUE%] index %INDEX% on [%TABLQUALIFIER%]%TABLE% (
%CIDXLIST%
)
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating an index. Example: create index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o70">
<a:Name>AddColIndex</a:Name>
<a:TextTargetItem.Value>%COLUMN%[ %ASC%]</a:TextTargetItem.Value>
<a:Comment>Command for defining an index column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o71">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>in %s : category=tablespace
</a:TextTargetItem.Value>
<a:Comment>Default options for creating an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o72">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(
   select 1 from sys.sysindex i, sys.systable t
   where i.table_id=t.table_id 
     and i.index_name=%.q:INDEX%
     and t.table_name=%.q:TABLE%[%QUALIFIER%?
     and i.creator=user_id(%.q:OWNER%)]
) then
   drop index [%QUALIFIER%]%TABLE%.%INDEX%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping an index. Example: drop index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o73">
<a:Name>SqlOptsQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, INDEX, OPTIONS}

select
   u.user_name,
   t.table_name,
   i.index_name,
   &#39; in &#39;+ f.dbspace_name
from
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.sysindex i on (i.table_id=t.table_id)
      join sys.sysfile f on (f.file_id=i.file_id)
where
   f.dbspace_name &lt;&gt; &#39;SYSTEM&#39;
   and i.&quot;unique&quot; in (&#39;Y&#39;, &#39;N&#39;)
[  and t.table_name = %.q:TABLE%]
[  and u.user_name = %.q:OWNER%]
[  and i.index_name = %.q:INDEX%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o74">
<a:Name>SqlSysIndexQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, INDEX}

select 
   u.user_name, 
   t.table_name, 
   i.index_name 
from 
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.sysindex i on (i.table_id=t.table_id)
where 
   i.&quot;unique&quot; not in (&#39;Y&#39;, &#39;N&#39;)
   and t.table_type=&#39;BASE&#39;
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:TABLE%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to list system indexes created by the database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o75">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER ID, TABLE ID, INDEX ID, UNIQUE ID, CIDXLIST ...}

select
   u.user_name,
   t.table_name,
   i.index_name,
   case (i.&quot;unique&quot;) when &#39;Y&#39; then &#39;unique&#39; else &#39;&#39; end,
   string(c.column_name, case (x.&quot;order&quot;) when &#39;D&#39; then &#39; desc,&#39; else &#39; asc,&#39; end)
from
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.sysindex i on (i.table_id=t.table_id)
      join sys.sysixcol x on (x.index_id = i.index_id and x.table_id = i.table_id)
      join sys.syscolumn c on (c.column_id=x.column_id and c.table_id=x.table_id)
where
   i.&quot;unique&quot; in (&#39;Y&#39;, &#39;N&#39;)
[  and u.user_name=%.q:SCHEMA%]
[  and t.table_name=%.q:TABLE%]
order by 
   1, 2, i.index_id, x.sequence
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o76">
<a:Name>Column</a:Name>
<a:Code>COLN</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for columns)
   &quot;COLUMN&quot;       // generated code of the column
   &quot;COLNNO&quot;       // position of the column in the list of columns of the table
   &quot;COLNNAME&quot;     // name of the column
   &quot;COLNCODE&quot;     // code of the column
   &quot;PRIMARY&quot;      // keyword &quot;primary&quot; if the column is primary
   &quot;ISPKEY&quot;       // TRUE if the column is part of the primary key
   &quot;FOREIGN&quot;      // TRUE if the column is part of one foreign key
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o77">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o78">
<a:Name>EnableDefault</a:Name>
<a:Comment>Default values allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o79">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>CKC_%.U17:COLUMN%_%.U8:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for a column check parameter</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o80">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>%20:COLUMN% %30:DATATYPE%[.Z:[ %NULLNOTNULL%][%IDENTITY%?[.O:[ default autoincrement][ identity]]:[%COMPUTE%? compute (%COMPUTE%):[ default %DEFAULT%]]]
   [check (%.A:CONSTRAINT%)]]</a:TextTargetItem.Value>
<a:Comment>Command for defining a table column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o81">
<a:Name>ColumnComment</a:Name>
<a:TextTargetItem.Value>comment on column [%QUALIFIER%]%TABLE%.%COLUMN% is 
%.q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a column comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o82">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   rename %OLDCOLN% to %NEWCOLN%</a:TextTargetItem.Value>
<a:Comment>Command for renaming a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o83">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>Alter table [%QUALIFIER%]%TABLE%
   add %20:COLUMN% %30:DATATYPE%[ %NULLNOTNULL%][%IDENTITY%? default autoincrement:[%COMPUTE%? compute (%COMPUTE%):[ default %DEFAULT%]]]
      [check (%.A:CONSTRAINT%)]</a:TextTargetItem.Value>
<a:Comment>Command for adding a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o84">
<a:Name>ModifyColumn</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% %DATATYPE% %NOTNULL%</a:TextTargetItem.Value>
<a:Comment>Command for modifying a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o85">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete %COLUMN%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o86">
<a:Name>ModifyColnDflt</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% default %DEFAULT%</a:TextTargetItem.Value>
<a:Comment>Command for modifying a column default in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o87">
<a:Name>ModifyColnChck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% check (%.A:CONSTRAINT%)</a:TextTargetItem.Value>
<a:Comment>Command for modifying a column check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o88">
<a:Name>DropColnChck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% check null</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o89">
<a:Name>AltEnableAddColnChk</a:Name>
<a:Comment>Column check constraint allowed in an alter table statement</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o90">
<a:Name>SqlChckQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, COLUMN, CONSTRAINT}

select 
   u.user_name, 
   t.table_name, 
   c.column_name, 
   c.&quot;check&quot;
from 
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.syscolumn c on (c.table_id=t.table_id)
where 
   c.&quot;check&quot; is not null
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:TABLE%]
[  and c.column_name=%.q:COLUMN%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object check constraints</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o91">
<a:Name>Enable</a:Name>
<a:Comment>Column allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o92">
<a:Name>EnableComputedColn</a:Name>
<a:Comment>Computed columns allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o93">
<a:Name>DropColnComp</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   alter %COLUMN% drop compute</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column computed expression in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o94">
<a:Name>ModifyColnComp</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   alter %COLUMN% set compute (%COMPUTE%)</a:TextTargetItem.Value>
<a:Comment>Command for modifying computed expression for a column in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o95">
<a:Name>ModifyColnNull</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% %MAND%</a:TextTargetItem.Value>
<a:Comment>Command for modifying null/not null for a column in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o96">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, COLUMN, DTTPCODE, LENGTH, PREC, NOTNULL, @OBJTLABL, DOMAIN, DEFAULT}

select 
   u.user_name,
   t.table_name,
   c.column_name,
   d.domain_name,
   c.width,
   c.scale,
   case(c.nulls) when &#39;Y&#39; then &#39;NULL&#39; else &#39;NOT NULL&#39; end,
   c.remarks,
   x.type_name,
   case (column_type) when &#39;R&#39; then c.&quot;default&quot; else null end
from
   sys.sysuserperms u 
      join sys.systable t on (t.creator=u.user_id)
      join sys.syscolumn c on (c.table_id=t.table_id)
      left outer join sys.sysusertype x on (x.type_id = c.user_type)
      join sys.sysdomain d on (d.domain_id=c.domain_id)
where 
c.column_type in (&#39;C&#39;, &#39;R&#39;)
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:TABLE%]
order by
   1, 2, c.column_id

</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o97">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, COLUMN, COMPUTE}

select
   u.user_name,
   t.table_name,
   c.column_name,
   c.&quot;default&quot;
from
   sys.sysuserperms u 
      join sys.systable t on (t.creator=u.user_id)
      join sys.syscolumn c on (c.table_id=t.table_id)
where 
   c.column_type = &#39;C&#39;
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:TABLE%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes
Note: This entry could be merged with SqlListQuery in version 9 in which setting the compute to NULL does not force the computed boolean to TRUE
</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o98">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a column.
The first column is the SQL name of permission (eg: SELECT)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>REFERENCES=References
SELECT=Select
UPDATE=Update</a:MapTargetItem.Value>
<a:List>REFERENCES
SELECT
UPDATE
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o99">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE ID, COLNPERMISSION ID, COLUMN ...}

select 
u.user_name grantee, 
case
when (p.privilege_type = 1 and p.is_grantable =&#39;Y&#39; ) then &#39;SELECT+&#39;
when (p.privilege_type = 1)  then &#39;SELECT&#39;
when (p.privilege_type = 8 and p.is_grantable =&#39;Y&#39; ) then &#39;UPDATE+&#39;
when (p.privilege_type = 8)  then &#39;UPDATE&#39;
when (p.privilege_type = 16 and p.is_grantable =&#39;Y&#39; ) then &#39;REFERENCES+&#39;
when (p.privilege_type = 16)  then &#39;REFERENCES&#39;
end,
s.column_name + &#39;,&#39;
from sysuserperms u, sysuserperms u1, syscolumn s, syscolperm p, systable t
where 
(t.table_name = %.q:TABLE%) and
[ (t.creator = u1.user_id) and (u1.user_name = %.q:OWNER% ) and ]
(t.table_id = p.table_id) and
(p.column_id = s.column_id) and
(s.table_id = t.table_id) and
(u.user_id = p.grantee)
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o100">
<a:Name>AddColnChck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% check (%.A:CONSTRAINT%)</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script for modifying column constraints within an alter table statement</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o101">
<a:Name>User</a:Name>
<a:Code>USER</a:Code>
<a:Comment>The following system variables are available:
   &quot;USER&quot;         // generated code of the user
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o102">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o103">
<a:Name>Enable</a:Name>
<a:Comment>User allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o104">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{USER}

select 
   u.user_name 
from 
   sys.sysuserperms u
where
  u.user_group = &#39;N&#39;
[and UPPER(u.user_name) = %.qU:SCHEMA%]
order by 1</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o105">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant connect to %USER% identified by [%PASSWORD%?%PASSWORD%:&quot;&quot;]
</a:TextTargetItem.Value>
<a:Comment>Command for creating a user</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o106">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>revoke connect from %USER%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a user</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o107">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{USER ID, PRIVILEGE ...}

select 
   u.user_name,
   case
   when (u.dbaauth = &#39;Y&#39;) then &#39;DBA&#39;
   end + &#39;,&#39; ||
   case
   when (u.remotedbaauth = &#39;Y&#39;) then &#39;REMOTE DBA&#39;
   end + &#39;,&#39; ||
   case
   when (u.resourceauth = &#39;Y&#39;) then &#39;RESOURCE&#39;
   end
from 
   sys.sysuserperms u
where
  u.user_group = &#39;N&#39;
order by 1</a:TextTargetItem.Value>
<a:Comment>Query to reverse privileges</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o108">
<a:Name>Reference</a:Name>
<a:Code>REFR</a:Code>
<a:Comment>The following system variables are available:
   &quot;REFR&quot;         // generated code of the reference
   &quot;REFNAME&quot;      // reference name
   &quot;PARENT&quot;       // generated code of the parent table
   &quot;PNAME&quot;        // name of the parent table
   &quot;PCODE&quot;        // code of the parent table
   &quot;CHILD&quot;        // generated code of the reference
   &quot;CNAME&quot;        // name of the child table
   &quot;CCODE&quot;        // code of the child table
   &quot;PQUALIFIER&quot;   // qualifier of the parent table. See QUALIFIER
   &quot;CQUALIFIER&quot;   // qualifier of the child table. See QUALIFIER
   &quot;REFRNAME&quot;     // Reference name
   &quot;REFRCODE&quot;     // Reference code
   &quot;FKCONSTRAINT&quot; // Reference constraint name (foreign key)
   &quot;PKCONSTRAINT&quot; // constraint name of the parent key used to reference object
   &quot;CKEYCOLUMNS&quot;  // list of parent key columns. Eg: C1, C2, C3
   &quot;FKEYCOLUMNS&quot;  // list of child foreign key columns. Eg:
   &quot;UPDCONST&quot;     // Update declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;DELCONST&quot;     // Delete declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;MINCARD&quot;      // Min cardinality
   &quot;MAXCARD&quot;      // Max cardinality
   &quot;POWNER&quot;       // Parent table owner
   &quot;COWNER&quot;       // child table owner
   &quot;CHCKONCMMT&quot;   // TRUE when check on commit is selected on the reference (ASA 6.0 specific)

For reference joins (couple of column in a reference),
the following system variables are available:
   &quot;CKEYCOLUMN&quot;   // generated code of the parent table column (primary key)
   &quot;FKEYCOLUMN&quot;   // generated code of the child table column (foreign key)
   &quot;PK&quot;           // primary key column generated code
   &quot;PKNAME&quot;       // primary key column name
   &quot;FK&quot;           // foreign key column generated code
   &quot;FKNAME&quot;       // foreign key column name
   &quot;AK&quot;           // alternate key column code (same as PK)
   &quot;AKNAME&quot;       // alternate key column name (same as PKNAME)
   &quot;COLTYPE&quot;      // primary column column datatype
   &quot;DEFAULT&quot;      // foreign key column default value
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o109">
<a:Name>Enable</a:Name>
<a:Comment>Foreign key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o110">
<a:Name>EnablefKeyName</a:Name>
<a:Comment>Foreign key role allowed in database generation</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o111">
<a:Name>FKAutoIndex</a:Name>
<a:Comment>Foreign key is auto-indexed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o112">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>FK_%.U8:CHILD%_%.U9:REFR%_%.U8:PARENT%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for foreign keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o113">
<a:Name>CheckOnCommit</a:Name>
<a:TextTargetItem.Value>check on commit</a:TextTargetItem.Value>
<a:Comment>Referential integrity test differed after the COMMIT</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o114">
<a:Name>DclUpdIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT
CASCADE
SET NULL
SET DEFAULT</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for update</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o115">
<a:Name>DclDelIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT
CASCADE
SET NULL
SET DEFAULT</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for delete</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o116">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>foreign key %CONSTNAME% (%FKEYCOLUMNS%)
     references [%PQUALIFIER%]%PARENT%[ (%CKEYCOLUMNS%)]
[     on update %UPDCONST%]
[     on delete %DELCONST%]
[%CHCKONCMMT%?     check on commit]</a:TextTargetItem.Value>
<a:Comment>Command for defining a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o117">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add foreign key %CONSTNAME% (%FKEYCOLUMNS%)
      references [%PQUALIFIER%]%PARENT%[ (%CKEYCOLUMNS%)]
[      on update %UPDCONST%]
[      on delete %DELCONST%]
[%CHCKONCMMT%?      check on commit]</a:TextTargetItem.Value>
<a:Comment>Command for adding a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o118">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.sysforeignkey where role=%.q:CONSTNAME%) then
    alter table [%QUALIFIER%]%TABLE%
       delete foreign key %CONSTNAME%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a foreign key</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o119">
<a:Name>EnableChangeJoinOrder</a:Name>
<a:Comment>Enable to change join order when a reference is linked to a key</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o120">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{COWNER ID, CHILD ID, FKCONSTRAINT ID, POWNER ID, PARENT ID, CHCKONCMMT ID, UPDCONST ..., DELCONST ...}

select
   cu.user_name,
   ct.table_name,
   fk.role,
   pu.user_name,
   pt.table_name,
   case(fk.check_on_commit) when &#39;Y&#39; then &#39;yes&#39; else &#39;&#39; end,
   case (ft.event) when &#39;C&#39; then 
      case (ft.referential_action) 
         when &#39;C&#39; then &#39;cascade&#39;
         when &#39;D&#39; then &#39;set default&#39;
         when &#39;N&#39; then &#39;set null&#39;
         else &#39;restrict&#39;
      end
      else &#39;&#39; end,
   case (ft.event) when &#39;D&#39; then 
      case (ft.referential_action) 
         when &#39;C&#39; then &#39;cascade&#39;
         when &#39;D&#39; then &#39;set default&#39;
         when &#39;N&#39; then &#39;set null&#39;
         else &#39;restrict&#39;
      end
      else &#39;&#39; end
from
   sys.sysuserperms cu
      join sys.systable ct on (ct.creator=cu.user_id)
      join sys.sysforeignkey fk on (fk.foreign_table_id=ct.table_id)
      join sys.systable pt on (pt.table_id=fk.primary_table_id)
      join sys.sysuserperms pu on (pu.user_id=pt.creator)
   left outer join sys.systrigger ft on (
         ft.foreign_table_id=fk.foreign_table_id
         and ft.foreign_key_id=fk.foreign_key_id)
where 1=1
[  and cu.user_name=%.q:SCHEMA%]
[  and ct.table_name=%.q:TABLE%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o121">
<a:Name>SqlListChildrenQuery</a:Name>
<a:TextTargetItem.Value>{FKEYCOLUMN, CKEYCOLUMN}

select
   c.column_name,
   p.column_name
from
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.sysforeignkey f on (f.foreign_table_id=t.table_id)
      join sys.sysfkcol r on (
         r.foreign_table_id=f.foreign_table_id and
         r.foreign_key_id=f.foreign_key_id)
      join sys.syscolumn c on (
         c.table_id=f.foreign_table_id and
         c.column_id=r.foreign_column_id)
      join sys.syscolumn p on (
         p.table_id=f.primary_table_id and
         p.column_id=r.primary_column_id)
where 
   f.role=%.q:FKCONSTRAINT%
[  and t.table_name=%.q:CHILD%]
[  and u.user_name=%.q:COWNER%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to list reference joins</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o122">
<a:Name>PKey</a:Name>
<a:Code>PKEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o123">
<a:Name>Enable</a:Name>
<a:Comment>Primary key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o124">
<a:Name>PkAutoIndex</a:Name>
<a:Comment>Primary key is auto-indexed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o125">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>PK_%.U27:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for primary keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o126">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for defining a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o127">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for adding a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o128">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete primary key</a:TextTargetItem.Value>
<a:Comment>Command for dropping a primary key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o129">
<a:Name>Key</a:Name>
<a:Code>KEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;COLUMNS&quot;      // List of columns of the key. Eg: &quot;A, B, C&quot;
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o130">
<a:Name>Enable</a:Name>
<a:Comment>UNIQUE constraint allowed for tables</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o131">
<a:Name>UniqConstAutoIndex</a:Name>
<a:Comment>UNIQUE constraint is auto-indexed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o132">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>AK_%.U18:AKEY%_%.U8:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for alternate keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o133">
<a:Name>SqlAkeyIndex</a:Name>
<a:TextTargetItem.Value>select distinct 
   i.index_name
from 
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.sysindex i on (i.table_id=t.table_id)

where 
   i.&quot;unique&quot; not in (&#39;Y&#39;, &#39;N&#39;)
[  and t.table_name = %.q:TABLE%]
[  and u.user_name = %.q:SCHEMA%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to obtain the alternate key indexes of a table by ODBC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o134">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete unique (%COLNLIST%)</a:TextTargetItem.Value>
<a:Comment>Command for dropping an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o135">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>unique (%COLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for defining an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o136">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add unique (%COLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for adding an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o137">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER ID, TABLE ID, ISPKEY ID, CONSTNAME ID, COLUMNS ...}

select
   u.user_name,
   t.table_name,
   1,
   string(t.table_name, &#39;_PK&#39;),
   string(c.column_name, &#39;,&#39;),
   c.column_id
from 
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.syscolumn c on (c.table_id=t.table_id)
where 
   t.primary_root != 0
   and c.pkey=&#39;Y&#39;
[  and t.table_name=%.q:TABLE%]
[  and u.user_name=%.q:OWNER%]
union select
   u.user_name,
   t.table_name,
   0,
   string(t.table_name, &#39;_K&#39;, i.index_id),
   string(c.column_name, &#39;,&#39;),
   x.sequence
from
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.sysindex i on (i.table_id=t.table_id)
      join sys.sysixcol x on (x.index_id=i.index_id and x.table_id=i.table_id)
      join sys.syscolumn c on (c.column_id=x.column_id and c.table_id=x.table_id)
where 
   i.&quot;unique&quot; = &#39;U&#39;
[   and t.table_name=%.q:TABLE%]
[   and u.user_name=%.q:OWNER%]
order by
   1, 2, 3 desc, 6
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o138">
<a:Name>Abstract Data Type</a:Name>
<a:Code>ADT</a:Code>
<a:Comment>The following system variables are available:
   &quot;ADT&quot;          // generated code of the abstract data type
   &quot;TYPE&quot;         // ADT type
   &quot;SIZE&quot;         // ADT size
   &quot;FILE&quot;         // ADT: Java file
   &quot;ISARRAY&quot;      // ADT: is an array?
   &quot;ISLIST&quot;       // ADT: is a list?
   &quot;ISSTRUCT&quot;     // ADT: is a structure?
   &quot;ISOBJECT&quot;     // ADT: is an object?
   &quot;ISJAVA&quot;       // ADT: is a JAVA class?
   &quot;ADTDEF&quot;       // ADT definition
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o139">
<a:Name>Enable</a:Name>
<a:Comment>Abstract Data Types allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o140">
<a:Name>EnableAdtOnDomn</a:Name>
<a:Comment>Abstract Data Types allowed on domain</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o141">
<a:Name>EnableAdtOnColn</a:Name>
<a:Comment>Abstract Data Types allowed on column</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o142">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, ADT, TYPE}

select 
   u.user_name,  
   t.type_name, 
   &#39;JAVA&#39;
from 
   sys.sysusertype t, 
   sys.sysuserperms u
where 
   t.domain_id in (25, 26)
   and t.creator = u.user_id
[  and u.user_name = %.q:SCHEMA%]
order by 1,2</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o143">
<a:Name>Install</a:Name>
<a:TextTargetItem.Value>install JAVA UPDATE from file %.q:FILE%</a:TextTargetItem.Value>
<a:Comment>Command for installing an abstract data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o144">
<a:Name>Remove</a:Name>
<a:TextTargetItem.Value>remove JAVA class %ADT%</a:TextTargetItem.Value>
<a:Comment>Command for uninstalling an abstract data type</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o145">
<a:Name>Domain</a:Name>
<a:Code>PDMDOMN</a:Code>
<a:Comment>The following system variables are available:
   &quot;DOMAIN&quot;       // generated code of the domain (also available for columns)
SQL Server specific domain system variables:
   &quot;RULENAME&quot;     // name of the rule object associated with the domain
   &quot;DEFAULTNAME&quot;  // name of the default object associated with the domain
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o146">
<a:Name>Enable</a:Name>
<a:Comment>User defined data types allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o147">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>30</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o148">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>[%R%?create datatype %DOMAIN%[ as] %DATATYPE%[ %NOTNULL%][%IDENTITY%? default autoincrement:[ default %DEFAULT%]] 
[     check (%.A:CONSTRAINT%)]]create domain %DOMAIN%[ as] %DATATYPE%[ %NOTNULL%][%IDENTITY%? default autoincrement:[ default %DEFAULT%]] 
[     check (%.A:CONSTRAINT%)]
</a:TextTargetItem.Value>
<a:Comment>Command for creating a user defined data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o149">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.sysusertype where type_name=%.q:DOMAIN%) then
   drop domain %DOMAIN%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a user defined data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o150">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{@OBJTCODE, DTTPCODE, LENGTH, PREC, DEFAULT, CONSTRAINT} 

select 
   d.type_name, 
   t.domain_name, 
   d.width, 
   d.scale,
   d.&quot;default&quot;, 
   d.&quot;check&quot; 
from 
   sys.sysusertype d
      join sys.sysdomain t on (t.domain_id=d.domain_id)
where 
   d.domain_id not in (25, 26)
   and d.creator &lt;&gt; 0</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o151">
<a:Name>Tablespace</a:Name>
<a:Code>TSPC</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLESPACE&quot;   // generated code of the tablespace
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o152">
<a:Name>Enable</a:Name>
<a:Comment>Tablespace allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o153">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create dbspace %TABLESPACE%
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a tablespace. Example: create tablespace %TABLESPACE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o154">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop dbspace %TABLESPACE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a tablespace. Example: drop tablespace %TABLESPACE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o155">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>as %s : squoted=yes</a:TextTargetItem.Value>
<a:Comment>Default options for creating a tablespace.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o156">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{TABLESPACE, OPTIONS}

select
   f.dbspace_name,
   &#39;as &#39;&#39;&#39; + f.file_name + &#39;&#39;&#39;&#39;
from
   sys.sysfile f
where
   f.dbspace_name &lt;&gt; &#39;SYSTEM&#39;
order by 1
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o157">
<a:Name>Storage</a:Name>
<a:Code>STOR</a:Code>
<a:Comment>The following system variables are available:
   &quot;STORAGE&quot;      // generated code of the storage
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o158">
<a:Name>Enable</a:Name>
<a:Comment>Storage allowed</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o159">
<a:Name>Database</a:Name>
<a:Code>DTBS</a:Code>
<a:Comment>The following system variables are available:
   &quot;DATABASE&quot;     // generated code of the database
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o160">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create database &#39;%DATABASE%.db&#39;
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a database. Example: create database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o161">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>transaction : nextmand=yes
log %s : list= on|off
&lt;logonfile&gt; %s : prevmand=yes, squoted=yes
mirror %s : squoted=yes
case %s : default=respect, list=respect|ignore
page size %d : default=4096, list=1024|2048|4096|8192|16384|32768
collation %s
encrypted %s : composite=yes, list=on|off, default=on
{
   key %s : squoted=yes
   algorithm %s : list=AES|MDSR, default=AES, squoted=yes
}
blank padding %s : list=on|off
ASE : composite=yes
{
   compatible
}
java %s : list=on|off|jdk &#39;1.1.8&#39;|jdk &#39;1.3&#39;, default=&#39;1.3&#39;
jconnect %s : list=on|off</a:TextTargetItem.Value>
<a:Comment>Available options for creating a database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o162">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop database %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a database. Example: drop database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o163">
<a:Name>Enable</a:Name>
<a:Comment>Database allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o164">
<a:Name>View</a:Name>
<a:Code>VIEW</a:Code>
<a:Comment>The following system variables are available:
   &quot;VIEW&quot;         // generated code of the view
   &quot;VIEWNAME&quot;     // view name
   &quot;VIEWCODE&quot;     // view code
   &quot;VIEWCOLN&quot;     // List of columns of the view. Eg: &quot;A, B, C&quot;
   &quot;SQL&quot;          // SQL text of the view. Eg: Select * from T1
   &quot;VIEWCHECK&quot;    // Keyword &quot;with check option&quot; if selected on the view
   &quot;SCRIPT&quot;       // complete view creation order. Eg: create view V1 as select * from T1
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o165">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create view [%QUALIFIER%]%VIEW% [(%VIEWCOLN%)] as
%SQL%
[%VIEWCHECK%]
</a:TextTargetItem.Value>
<a:Comment>Command for creating a view. Example: create view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o166">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.systable where table_name=%.q:VIEW% and table_type=&#39;VIEW&#39;[%QUALIFIER%? and creator=user_id(%.q:OWNER%)]) then
   drop view [%QUALIFIER%]%VIEW%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a view. Example: drop view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o167">
<a:Name>ViewComment</a:Name>
<a:TextTargetItem.Value>comment on view [%QUALIFIER%]%VIEW% is 
%.q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a view comment.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o168">
<a:Name>ViewCheck</a:Name>
<a:TextTargetItem.Value>with check option</a:TextTargetItem.Value>
<a:Comment>Option for checking a view</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o169">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, VIEW, COMMENT}

select
   u.user_name,
   t.table_name,
   t.remarks
from
   sys.sysuserperms u,
   sys.systable t
where
   t.creator=u.user_id
   and t.table_type=&#39;VIEW&#39;
[  and u.user_name=%.q:SCHEMA%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o170">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER ID, VIEW ID, SCRIPT ...} 

select
   u.user_name,
   t.table_name,
   isnull(t.source, t.view_def)
from
   sys.sysuserperms u,
   sys.systable t
where
   t.creator=u.user_id
   and t.table_type=&#39;VIEW&#39;
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:VIEW%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o171">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a view.
The first column is the SQL name of permission (eg: SELECT)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>DELETE=Delete
INSERT=Ins
UPDATE=Upd
SELECT=Select</a:MapTargetItem.Value>
<a:List>DELETE
INSERT
UPDATE
SELECT
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o172">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE ID, PERMISSION ...}

select 
u1.user_name grantee,
case 
when (p.insertauth = &#39;Y&#39;) then &#39;INSERT&#39; 
when (p.insertauth = &#39;G&#39;) then &#39;INSERT+&#39; 
end + &#39;,&#39; ||
case 
when (p.deleteauth = &#39;Y&#39;) then &#39;DELETE&#39; 
when (p.deleteauth = &#39;G&#39;) then &#39;DELETE+&#39; 
end + &#39;,&#39; ||
case 
when (p.updateauth = &#39;Y&#39;) then &#39;UPDATE&#39; 
when (p.updateauth = &#39;G&#39;) then &#39;UPDATE+&#39; 
end
from sysuserperms u, sysuserperms u1, systable s, systableperm p
where 
s.table_type = &#39;VIEW&#39; and
(s.table_name = %.q:VIEW% ) and
[ (s.creator = u.user_id) and (u.user_name = %.q:OWNER% ) and ]
(s.table_id = p.stable_id) and
(u1.user_id = p.grantee)</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o173">
<a:Name>Trigger</a:Name>
<a:Code>TRGR</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
 trigger object specific items
   &quot;ORDER&quot;        // order number of the trigger (to sort the triggers when the DBMS supports more than one trigger of one type)
   &quot;TRIGGER&quot;      // generated code of trigger
   &quot;TRGTYPE&quot;      // trigger type (keywords &quot;beforeinsert&quot;, &quot;afterupdate&quot;, ...)
   &quot;TRGEVENT&quot;     // trigger event (keywords &quot;insert&quot;, &quot;update&quot;, &quot;delete&quot;)
   &quot;TRGTIME&quot;      // trigger time (keywords NULL, &quot;before&quot;, &quot;after&quot;)
 inside the body of the trigger, macros redefine variables on objects
   &quot;REFNO&quot;        // reference position in the list of references of the table
 customized error messages management
   &quot;ERRNO&quot;        // error number for standard error
   &quot;ERRMSG&quot;       // error message for standard error
   &quot;MSGTAB&quot;       // name of the table containing user-defined error messages
   &quot;MSGNO&quot;        // in the user-defined error table, name of the column containing the error numbers
   &quot;MSGTXT&quot;       // in the user-defined error table, name of the column containing the error messages
   &quot;SCRIPT&quot;       // body of trigger or procedure
   &quot;TRGDEFN&quot;      // complete body of the trigger definition. Contains variable declarations and body of trigger or procedure
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o174">
<a:Name>Enable</a:Name>
<a:Comment>Trigger allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o175">
<a:Name>EnableMultiTrigger</a:Name>
<a:Comment>Multi trigger allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o176">
<a:Name>DefaultTriggerName</a:Name>
<a:TextTargetItem.Value>%TEMPLATE%_%.L:TABLE%</a:TextTargetItem.Value>
<a:Comment>Default trigger name</a:Comment>
</o:TextTargetItem>
<o:IntegerTargetItem Id="o177">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>30</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o178">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.systrigger where trigger_name = %.q:TRIGGER%) then
   drop trigger %TRIGGER%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a trigger. Example: drop trigger %TRIGGER%</a:Comment>
</o:TextTargetItem>
<o:StringTargetItem Id="o179">
<a:Name>EventDelimiter</a:Name>
<a:Comment>Events separation character.</a:Comment>
<a:StringTargetItem.Value>,</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:TextTargetItem Id="o180">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{TABLOWNER, TABLE, TRIGGER, TRGEVENT, TRGTIME}

select 
   u.user_name, 
   t.table_name, 
   r.trigger_name, 
   case(r.event)
      when &#39;A&#39; then &#39;insert, delete&#39;
      when &#39;B&#39; then &#39;insert, update&#39;
      when &#39;C&#39; then &#39;update&#39;
      when &#39;D&#39; then &#39;delete&#39;
      when &#39;E&#39; then &#39;delete, update&#39;
      when &#39;I&#39; then &#39;insert&#39;
      when &#39;M&#39; then &#39;insert, delete, update&#39;
      when &#39;U&#39; then &#39;update&#39;
      else &#39;&#39;
   end, 
   case(r.trigger_time)
      when &#39;A&#39; then &#39;after&#39;
      when &#39;B&#39; then &#39;before&#39;
      when &#39;R&#39; then &#39;resolve&#39;
      else &#39;&#39;
   end
from 
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.systrigger r on (r.table_id = t.table_id)
where 
   r.trigger_name is not null
[%TABLE% ?
  and u.user_name=%.q:TABLOWNER%
[  and t.table_name=%.q:TABLE%] :
[  and u.user_name=%.q:SCHEMA%]]
order by 
   1,2,r.trigger_id
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o181">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{TABLOWNER, TABLE, TRIGGER, SCRIPT}

select 
   u.user_name, 
   t.table_name, 
   r.trigger_name, 
   isnull(r.source, r.trigger_defn)
from 
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.systrigger r on (r.table_id = t.table_id)
where 
   r.trigger_name is not null
[  and u.user_name=%.q:TABLOWNER%]
[  and t.table_name=%.q:TABLE%]
[  and r.trigger_name=%.q:TRIGGER%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o182">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create trigger %TRIGGER%[ %TRGTIME%][ %TRGEVENT%[ of %COLUMNS%]][ order %ORDER%] on [%TABLQUALIFIER%]%TABLE%
%TRGDEFN%</a:TextTargetItem.Value>
<a:Comment>Command for creating a trigger. Example: create trigger on [%QUALIFIER%]%TABLE% %TRGDEFN%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o183">
<a:Name>Time</a:Name>
<a:TextTargetItem.Value>before
after
resolve</a:TextTargetItem.Value>
<a:Comment>Extended trigger times list.</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o184">
<a:Name>Procedure</a:Name>
<a:Code>PROC</a:Code>
<a:Comment>The following system variables are available:
   &quot;PROC&quot;         // generated code of the procedure (also available for trigger when the trigger is implemented with a procedure)
   &quot;FUNC&quot;         // generated code of the procedure if the procedure is a function (with return value)
   &quot;PROCPRMS&quot;     // list of parameters of the procedure (also available for function)
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o185">
<a:Name>Enable</a:Name>
<a:Comment>Procedure allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o186">
<a:Name>EnableFunc</a:Name>
<a:Comment>Function allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o187">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o188">
<a:Name>MaxFuncLen</a:Name>
<a:Comment>Function name length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o189">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.sysprocedure where proc_name = %.q:PROC%[ and user_name(creator) = %.q:OWNER%]) then
   drop procedure [%QUALIFIER%]%PROC%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a procedure. Example: drop procedure %PROC%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o190">
<a:Name>DropFunc</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.sysprocedure where proc_name = %.q:FUNC%[ and user_name(creator) = %.q:OWNER%]) then
   drop function [%QUALIFIER%]%FUNC%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a function. Example: drop function %FUNC%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o191">
<a:Name>CustomProc</a:Name>
<a:TextTargetItem.Value>create procedure [%QUALIFIER%]%PROC% (IN &lt;arg&gt; &lt;type&gt;)
begin
end
</a:TextTargetItem.Value>
<a:Comment>Command for creating a stored procedure</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o192">
<a:Name>CustomFunc</a:Name>
<a:TextTargetItem.Value>create function [%QUALIFIER%]%FUNC% (&lt;arg&gt; &lt;type&gt;) 
RETURNS &lt;type&gt;
begin
end
</a:TextTargetItem.Value>
<a:Comment>Command for creating a function</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o193">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, PROC, FUNC}

select
   user_name(p.creator),
   p.proc_name,
   if exists(select 1 from sys.sysprocparm x where x.proc_id = p.proc_id and parm_type = 4 and parm_mode_out = &#39;Y&#39;) then
      p.proc_name
   else
      &#39;&#39;
   endif
from 
   sys.sysprocedure p
[where user_name(p.creator) = %.q:SCHEMA%]
order by 
   1, 2</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o194">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, PROC, SCRIPT, @OBJTLABL}

select
   user_name(p.creator),
   p.proc_name,
   isnull(p.source, p.proc_defn),
   p.remarks
from
   sys.sysprocedure p
where 1=1
[  and user_name(p.creator) = %.q:SCHEMA%]
[  and p.proc_name = %.q:PROC%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o195">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create procedure [%QUALIFIER%]%PROC%[%PROCPRMS%?([%PROCPRMS%])]
%TRGDEFN%</a:TextTargetItem.Value>
<a:Comment>Command for creating a procedure. Example: create procedure %PROC% %TRGDEFN%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o196">
<a:Name>CreateFunc</a:Name>
<a:TextTargetItem.Value>create function [%QUALIFIER%]%FUNC%[%PROCPRMS%?([%PROCPRMS%])]
%TRGDEFN%</a:TextTargetItem.Value>
<a:Comment>Command for creating a function. Example: create function %FUNC% %TRGDEFN%</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o197">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a procedure.
The first column is the SQL name of permission (eg: EXECUTE)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>EXECUTE=Exec</a:MapTargetItem.Value>
<a:List>EXECUTE
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o198">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE, PERMISSION}

select 
u.user_name grantee, &#39;EXECUTE&#39;
from sysuserperms u, sysprocedure s, sysprocperm p
where 
(s.proc_name = %.q:PROC% ) and
(s.proc_id = p.proc_id) and
(u.user_id = p.grantee)</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o199">
<a:Name>Privilege</a:Name>
<a:Comment>Manages the system privileges for a user, role or group</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o200">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant %PRIVLIST% to %USER%
</a:TextTargetItem.Value>
<a:Comment>Command for granting privileges.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o201">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>revoke %REVPRIVLIST% from %USER%</a:TextTargetItem.Value>
<a:Comment>Command for revoking privileges.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o202">
<a:Name>System</a:Name>
<a:TextTargetItem.Value>DBA
REMOTE DBA
RESOURCE
ALL</a:TextTargetItem.Value>
<a:Comment>List of system privileges</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o203">
<a:Name>Permission</a:Name>
<a:Code>PERM</a:Code>
<a:Comment>Manages the permissions on database objects</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o204">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant %PERMLIST% on [%QUALIFIER%]%OBJECT% to %GRANTEE% [%GRANTOPTION%]

</a:TextTargetItem.Value>
<a:Comment>Command for granting permissions.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o205">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>revoke %REVPERMLIST% on [%QUALIFIER%]%OBJECT% from %GRANTEE%</a:TextTargetItem.Value>
<a:Comment>Command for revoking permissions.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o206">
<a:Name>GrantOption</a:Name>
<a:TextTargetItem.Value>with grant option</a:TextTargetItem.Value>
<a:Comment>Option for the grant statement.</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o207">
<a:Name>Group</a:Name>
<a:Code>GRPE</a:Code>
<a:Comment>Manages the group object.</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o208">
<a:Name>Enable</a:Name>
<a:Comment>Group allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o209">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant connect to %GROUP% identified by [%PASSWORD%?%PASSWORD%:&quot;&quot;]</a:TextTargetItem.Value>
<a:Comment>Command for creating a group.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o210">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>revoke connect from %GROUP%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a group.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o211">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{GROUP}

select 
   u.user_name 
from 
   sys.sysuserperms u
where
  u.user_group = &#39;Y&#39;
[and UPPER(u.user_name) = %.qU:SCHEMA%]
order by 1</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o212">
<a:Name>SqlListChildrenQuery</a:Name>
<a:TextTargetItem.Value>{ GROUP ID , MEMBER }
 
select group_name, member_name from sys.sysgroups
order by 1, 2</a:TextTargetItem.Value>
<a:Comment>SQL query to list members of the group</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o213">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{GROUP ID, PRIVILEGE ...}

select 
   u.user_name,
   case
   when (u.dbaauth = &#39;Y&#39;) then &#39;DBA&#39;
   end + &#39;,&#39; ||
   case
   when (u.remotedbaauth = &#39;Y&#39;) then &#39;REMOTE DBA&#39;
   end + &#39;,&#39; ||
   case
   when (u.resourceauth = &#39;Y&#39;) then &#39;RESOURCE&#39;
   end
from 
   sys.sysuserperms u
where
  u.user_group = &#39;Y&#39;
order by 1</a:TextTargetItem.Value>
<a:Comment>Query to reverse privileges</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o214">
<a:Name>Bind</a:Name>
<a:TextTargetItem.Value>grant membership in group %GROUP% to %USER%
</a:TextTargetItem.Value>
<a:Comment>Command for adding a member to a group</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o215">
<a:Name>AfterCreate</a:Name>
<a:TextTargetItem.Value>%SetAsGroup%;

</a:TextTargetItem.Value>
<a:Comment>Commands executed after create statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o216">
<a:Name>ReversedStatements</a:Name>
<a:TextTargetItem.Value>SetAsGroup</a:TextTargetItem.Value>
<a:Comment>Additional statements to be reversed by script</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o217">
<a:Name>SetAsGroup</a:Name>
<a:TextTargetItem.Value>grant group to %GROUP%</a:TextTargetItem.Value>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TextTargetItem>
<o:TextTargetItem Id="o218">
<a:Name>Unbind</a:Name>
<a:TextTargetItem.Value>revoke membership in group %GROUP% from %USER%
</a:TextTargetItem.Value>
<a:Comment>Command for removing a member from a group</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o219">
<a:Name>ObjectOwner</a:Name>
<a:Comment>Allow a group to be an object owner.</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o220">
<a:Name>DataType</a:Name>
<a:Comment>Contains data type translation entries. These entries list the correspondence between internal data types and the target database data types</a:Comment>
<c:Categories>
<o:MapTargetItem Id="o221">
<a:Name>AmcdDataType</a:Name>
<a:Comment>Data types translation table from internal data types to target database data types.
        %n is the length of the data type
        %s is the size of the data type
        %p is the precision of the data type</a:Comment>
<a:MapTargetItem.Value>&lt;UNDEF&gt; = &lt;Undefined&gt;
A%n     = char(%n)
VA%n    = varchar(%n)
LA      = varchar
LA%n    = varchar(%n)
LVA     = long varchar
LVA%n   = long varchar
BT      = tinyint
BT%n    = tinyint
SI      = smallint
I       = integer
LI      = integer
N       = numeric
N%n     = numeric(%n)
N%s,%p  = numeric(%s,%p)
DC      = decimal
DC%n    = decimal(%n)
DC%s,%p = decimal(%s,%p)
SF      = real
F       = float
F%n     = float(%n)
LF      = double
MN      = numeric(8,2)
MN%n    = numeric(%n)
MN%s,%p = numeric(%s,%p)
D       = date
T       = time
DT      = timestamp
TS      = timestamp
BL      = smallint
NO      = integer
NO%n    = integer
BIN%n   = binary(%n)
LBIN    = long binary
LBIN%n  = long binary
TXT     = long varchar
TXT%n   = long varchar
MBT     = char(1)
MBT%n   = char(%n)
VMBT    = varchar(255)
VMBT%n  = varchar(%n)
PIC     = long binary
PIC%n   = long binary
BMP     = long binary
BMP%n   = long binary
OLE     = long binary
OLE%n   = long binary
*       = char(10)</a:MapTargetItem.Value>
<a:List>&lt;UNDEF&gt;
A%n
VA%n
LA
LA%n
LVA
LVA%n
BT
BT%n
SI
I
LI
N
N%n
N%s,%p
DC
DC%n
DC%s,%p
SF
F
F%n
LF
MN
MN%n
MN%s,%p
D
T
DT
TS
BL
NO
NO%n
BIN%n
LBIN
LBIN%n
TXT
TXT%n
MBT
MBT%n
VMBT
VMBT%n
PIC
PIC%n
BMP
BMP%n
OLE
OLE%n
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o222">
<a:Name>PhysDataType</a:Name>
<a:Comment>Data types translation table from target database data types to internal data types.</a:Comment>
<a:MapTargetItem.Value>&lt;Undefined&gt;=&lt;UNDEF&gt;
char=A1
char(%n)=A%n
character=A1
character(%n)=A%n
varchar=VA1
varchar(%n)=VA%n
character varying=VA1
character varying(%n)=VA%n
long varchar=LVA
text=LVA
bigint=LI
unsigned bigint=LI
dec=DC
dec(%n)=DC%n
dec(%s,%p)=DC%s,%p
decimal=DC
decimal(%n)=DC%n
decimal(%s,%p)=DC%s,%p
double=LF
double precision=LF
float=F
float(%n)=F%n
int=I
integer=I
unsigned int=I
unsigned integer=I
numeric=N
numeric(%n)=N%n
numeric(%s,%p)=N%s,%p
real=SF
smallint=SI
unsigned smallint=SI
tinyint=BT
unsigned tinyint=BT
money=MN
smallmoney=MN
bit=BL
date=D
datetime=DT
smalldatetime=DT
time=T
timestamp=TS
binary=BIN1
binary(%n)=BIN%n
long binary=LBIN
image=PIC
varbinary=LBIN1
varbinary(%n)=LBIN%n
*=A10</a:MapTargetItem.Value>
<a:List>&lt;Undefined&gt;
char
char(%n)
character
character(%n)
varchar
varchar(%n)
character varying
character varying(%n)
long varchar
text
bigint
unsigned bigint
dec
dec(%n)
dec(%s,%p)
decimal
decimal(%n)
decimal(%s,%p)
double
double precision
float
float(%n)
int
integer
unsigned int
unsigned integer
numeric
numeric(%n)
numeric(%s,%p)
real
smallint
unsigned smallint
tinyint
unsigned tinyint
money
smallmoney
bit
date
datetime
smalldatetime
time
timestamp
binary
binary(%n)
long binary
image
varbinary
varbinary(%n)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o223">
<a:Name>PhysDttpSize</a:Name>
<a:Comment>Table of storage sizes of target database data type</a:Comment>
<a:MapTargetItem.Value>numeric               = 18
decimal               = 18
time                  = 8
timestamp             = 8</a:MapTargetItem.Value>
<a:List>numeric
decimal
time
timestamp
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o224">
<a:Name>OdbcPhysDataType</a:Name>
<a:Comment>Data types translation table from ODBC data types to target database data types.</a:Comment>
<a:MapTargetItem.Value>float(%n)=float
numeric(30,6)=numeric
char(1)=char
binary(1)=binary
decimal(30,6)=decimal
varchar(1)=varchar</a:MapTargetItem.Value>
<a:List>float(%n)
numeric(30,6)
char(1)
binary(1)
decimal(30,6)
varchar(1)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o225">
<a:Name>LogPhysADTType</a:Name>
<a:Comment>Abstract Data types translation table from internal abstract data types to target database abstract data types.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MapTargetItem.Value>Array=&lt;Undefined&gt;
List=&lt;Undefined&gt;
Java=Java
Object=&lt;Undefined&gt;
Structured=&lt;Undefined&gt;</a:MapTargetItem.Value>
<a:List>Array
List
Java
Object
Structured
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o226">
<a:Name>PhysLogADTType</a:Name>
<a:Comment>Abstract Data types translation table from target database abstract data types to internal abstract data types.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MapTargetItem.Value>Java=Java</a:MapTargetItem.Value>
<a:List>Java
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o227">
<a:Name>AllowedADT</a:Name>
<a:TextTargetItem.Value>Java</a:TextTargetItem.Value>
<a:Comment>The list of ADT which can be used as the datatype of a domain or column</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o228">
<a:Name>PhysOdbcDataType</a:Name>
<a:Comment>Data types translation table from target database data types to ODBC data types.</a:Comment>
<a:MapTargetItem.Value>int=integer
character varying=varchar
character varying(%n)=varchar(%n)
dec=decimal
dec(%n)=decimal(%n)
dec(%s,%p)=decimal(%s,%p)</a:MapTargetItem.Value>
<a:List>int
character varying
character varying(%n)
dec
dec(%n)
dec(%s,%p)
</a:List>
</o:MapTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:ProfileTargetItem Id="o229">
<a:Name>Profile</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o230">
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TargetCategory>
<o:MetaClassTargetItem Id="o231">
<a:Name>Table</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o232">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o233">
<a:ObjectID>AE92B563-6329-4769-8241-4364F19C9436</a:ObjectID>
<a:Name>ExtGlobalTemporaryTable</a:Name>
<a:Comment>Defines if table is a global temporary table or not.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o234">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:Name>Forms</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o235">
<a:Name>Sybase</a:Name>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Attribute=&quot;ExtGlobalTemporaryTable&quot; AttributeID=&quot;{AE92B563-6329-4769-8241-4364F19C9436}&quot; Name=&quot;ExtGlobalTemporaryTable&quot; Caption=&quot;Global temporary table&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
</c:Categories>
</o:ProfileTargetItem>
</c:Categories>
<c:TriggerItems>
<o:TriggerItem Id="o236">
<a:ObjectID>A1F296FD-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>InsertChildParentExist</a:Name>
<a:Code>INSERTCHILDPARENTEXIST</a:Code>
<a:Text>.FOREACH_PARENT()
/*  Parent &quot;[%PQUALIFIER%]%PARENT%&quot; must exist when inserting a child in &quot;[%CQUALIFIER%]%CHILD%&quot;  */
if (.JOIN(&quot;new_ins.%FK% is not null&quot;, &quot;&quot;, &quot; and&quot;, &quot;) then&quot;)
begin
   set found = 0;
   select 1
    into  found
    from  dummy
   where  exists (select 1
                   from  [%PQUALIFIER%]%PARENT%
                  where  .JOIN(&quot;%PK% = new_ins.%FK%&quot;, &quot;and   &quot;, &quot;&quot;, &quot;);&quot;)
   if found &lt;&gt; 1 then
      message &#39;Error: Trigger([%QUALIFIER%]%TRIGGER%) of table [%TABLQUALIFIER%]%TABLE%&#39;;
      message &#39;        Parent code must exist when inserting a child!&#39;;
      signal user_defined_exception;
   end if;
end
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Parent must exist when inserting child constraint</a:Comment>
<a:Declaration>.FOREACH_PARENT()
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o237">
<a:ObjectID>A1F296FE-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>InsertTooManyChildren</a:Name>
<a:Code>INSERTTOOMANYCHILDREN</a:Code>
<a:Text>.FOREACH_PARENT(FKMAXCARD)
/*  The cardinality of Parent &quot;[%PQUALIFIER%]%PARENT%&quot; in child &quot;[%CQUALIFIER%]%CHILD%&quot; cannot exceed %MAXCARD%  */
if (.JOIN(&quot;new_ins.%FK% is not null&quot;, &quot;&quot;, &quot; and&quot;, &quot;) then&quot;)
begin
   set found = 0;
   select count(*)
    into  found
    from  [%CQUALIFIER%]%CHILD%
   where  .JOIN(&quot;%FK% = new_ins.%FK%&quot;, &quot;and   &quot;, &quot;&quot;, &quot;;&quot;)
   if found &gt;= %MAXCARD% then
      message &#39;Error: Trigger([%QUALIFIER%]%TRIGGER%) of table [%TABLQUALIFIER%]%TABLE%&#39;;
      message &#39;        The maximum cardinality of a child has been exceeded!&#39;;
      signal user_defined_exception;
   end if;
end
end if;
.ENDFOR
</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Cannot exceed the maximum cardinality constraint when inserting the child</a:Comment>
<a:Declaration>.FOREACH_PARENT(FKMAXCARD)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o238">
<a:ObjectID>A1F296FF-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>UpdateChangeColumn</a:Name>
<a:Code>UPDATECHANGECOLUMN</a:Code>
<a:Text>.FOREACH_COLUMN(&quot;NMFCOL&quot;)
/*  Non modifiable column &quot;%COLUMN%&quot; cannot be modified */
if ((new_upd.%COLUMN% is null and old_upd.%COLUMN% is not null) or
    (new_upd.%COLUMN% is not null and old_upd.%COLUMN% is null) or
    (new_upd.%COLUMN% &lt;&gt; old_upd.%COLUMN%)) then
      message &#39;Error: Trigger([%QUALIFIER%]%TRIGGER%) of table [%TABLQUALIFIER%]%TABLE%&#39;;
      message &#39;        Non modifiable column cannot be modified!&#39;;
      signal user_defined_exception;
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Cannot modify non modifiable column constraint</a:Comment>
<a:Declaration>.FOREACH_COLUMN(&quot;NMFCOL&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o239">
<a:ObjectID>A1F29700-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>UpdateChildParentExist</a:Name>
<a:Code>UPDATECHILDPARENTEXIST</a:Code>
<a:Text>.FOREACH_PARENT()
/*  Parent &quot;[%PQUALIFIER%]%PARENT%&quot; must exist when updating a child in &quot;[%CQUALIFIER%]%CHILD%&quot;  */
if (.JOIN(&quot;new_upd.%FK% is not null&quot;, &quot;&quot;, &quot; and&quot;, &quot; and&quot;)
    ((.JOIN(&quot;old_upd.%FK% is null&quot;, &quot;&quot;, &quot; and&quot;, &quot;) or&quot;)
     (.JOIN(&quot;new_upd.%FK% &lt;&gt; old_upd.%FK%&quot;, &quot;&quot;, &quot; or&quot;, &quot;))) then&quot;)
begin
   set found = 0;
   select 1
    into  found
    from  dummy
   where  exists (select 1
                   from  [%PQUALIFIER%]%PARENT%
                  where  .JOIN(&quot;%PK% = new_upd.%FK%&quot;, &quot;and   &quot;, &quot;&quot;, &quot;);&quot;)
   if found &lt;&gt; 1 then
      message &#39;Error: Trigger([%QUALIFIER%]%TRIGGER%) of table [%TABLQUALIFIER%]%TABLE%&#39;;
      message &#39;        Parent must exist when updating a child!&#39;;
      signal user_defined_exception;
   end if;
end
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Parent must exist when updating a child constraint</a:Comment>
<a:Declaration>.FOREACH_PARENT()
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o240">
<a:ObjectID>A1F29701-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>UpdateTooManyChildren</a:Name>
<a:Code>UPDATETOOMANYCHILDREN</a:Code>
<a:Text>.FOREACH_PARENT(FKMAXCARD)
/*  The cardinality of Parent &quot;[%PQUALIFIER%]%PARENT%&quot; in child &quot;[%CQUALIFIER%]%CHILD%&quot; cannot exceed %MAXCARD%  */
if (.JOIN(&quot;new_upd.%FK% is not null&quot;, &quot;&quot;, &quot; and&quot;, &quot;) then&quot;)
begin
   set found = 0;
   select count(*)
    into  found
    from  [%CQUALIFIER%]%CHILD%
   where  .JOIN(&quot;%FK% = new_upd.%FK%&quot;, &quot;and   &quot;, &quot;&quot;, &quot;;&quot;)
   if found &gt;= %MAXCARD% then
      message &#39;Error: Trigger([%QUALIFIER%]%TRIGGER%) of table [%TABLQUALIFIER%]%TABLE%&#39;;
      message &#39;        The maximum cardinality of a child has been exceeded!&#39;;
      signal user_defined_exception;
   end if;
end
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Cannot exceed the maximum cardinality constraint when updating the child</a:Comment>
<a:Declaration>.FOREACH_PARENT(FKMAXCARD)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o241">
<a:ObjectID>A1F29702-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>UpdateChildChangeParent</a:Name>
<a:Code>UPDATECHILDCHANGEPARENT</a:Code>
<a:Text>.FOREACH_PARENT(&quot;FKCANTCHG&quot;)
/*  Cannot modify parent code of &quot;[%PQUALIFIER%]%PARENT%&quot; in child &quot;[%CQUALIFIER%]%CHILD%&quot;  */
if (.JOIN(&quot;(new_upd.%FK% is null and old_upd.%FK% is not null)&quot;, &quot;&quot;, &quot; or&quot;, &quot; or&quot;)
    .JOIN(&quot;new_upd.%FK% &lt;&gt; old_upd.%FK%&quot;, &quot;&quot;, &quot; or&quot;, &quot; ) then&quot;)
      message &#39;Error: Trigger([%QUALIFIER%]%TRIGGER%) of table [%TABLQUALIFIER%]%TABLE%&#39;;
      message &#39;        Cannot modify parent code in child!&#39;;
      signal user_defined_exception;
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Cannot change parent constraint</a:Comment>
<a:Declaration>.FOREACH_PARENT(&quot;FKCANTCHG&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o242">
<a:ObjectID>A1F29703-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>UpdateParentRestrict</a:Name>
<a:Code>UPDATEPARENTRESTRICT</a:Code>
<a:Text>.FOREACH_CHILD(&quot;UPDATE RESTRICT&quot;)
/*  Cannot modify parent code in &quot;[%PQUALIFIER%]%PARENT%&quot; if children still exist in &quot;[%CQUALIFIER%]%CHILD%&quot;  */
if (.JOIN(&quot;new_upd.%PK% &lt;&gt; old_upd.%PK%&quot;, &quot;&quot;, &quot; or&quot;, &quot; ) then&quot;)
begin
   set found = 0;
   select 1
    into  found
    from  dummy
   where  exists (select 1
                   from  [%CQUALIFIER%]%CHILD%
                  where  .JOIN(&quot;%FK% = old_upd.%PK%&quot;, &quot;and   &quot;, &quot;&quot;, &quot;);&quot;)
   if found = 1 then
      message &#39;Error: Trigger([%QUALIFIER%]%TRIGGER%) of table [%TABLQUALIFIER%]%TABLE%&#39;;
      message &#39;        Cannot modify parent code if children still exist!&#39;;
      signal user_defined_exception;
   end if;
end
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Update restrict constraint</a:Comment>
<a:Declaration>.FOREACH_CHILD(&quot;UPDATE RESTRICT&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o243">
<a:ObjectID>A1F29704-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>UpdateParentCascade</a:Name>
<a:Code>UPDATEPARENTCASCADE</a:Code>
<a:Text>.FOREACH_CHILD(&quot;UPDATE CASCADE&quot;)
/*  Modify parent code of &quot;[%PQUALIFIER%]%PARENT%&quot; for all children in &quot;[%CQUALIFIER%]%CHILD%&quot;  */
if (.JOIN(&quot;new_upd.%PK% &lt;&gt; old_upd.%PK%&quot;, &quot;&quot;, &quot; or&quot;, &quot; ) then&quot;)
   update [%CQUALIFIER%]%CHILD%
    set   .JOIN(&quot;%FK% = new_upd.%PK%&quot;, &quot;&quot;, &quot;,&quot;)
   where  .JOIN(&quot;%FK% = old_upd.%PK%&quot;, &quot;and   &quot;)
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Update cascade constraint</a:Comment>
<a:Declaration>.FOREACH_CHILD(&quot;UPDATE CASCADE&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o244">
<a:ObjectID>A1F29705-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>UpdateParentSetNull</a:Name>
<a:Code>UPDATEPARENTSETNULL</a:Code>
<a:Text>.FOREACH_CHILD(&quot;UPDATE SETNULL&quot;)
/*  Set parent code of &quot;[%PQUALIFIER%]%PARENT%&quot; to NULL in &quot;[%CQUALIFIER%]%CHILD%&quot;  */
if (.JOIN(&quot;new_upd.%PK% &lt;&gt; old_upd.%PK%&quot;, &quot;&quot;, &quot; or&quot;, &quot; ) then&quot;)
   update [%CQUALIFIER%]%CHILD%
    set   .JOIN(&quot;%FK% = NULL&quot;, &quot;&quot;, &quot;,&quot;)
   where  .JOIN(&quot;%FK% = old_upd.%PK%&quot;, &quot;and   &quot;)
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Update set null constraint</a:Comment>
<a:Declaration>.FOREACH_CHILD(&quot;UPDATE SETNULL&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o245">
<a:ObjectID>A1F29706-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>UpdateParentSetDefault</a:Name>
<a:Code>UPDATEPARENTSETDEFAULT</a:Code>
<a:Text>.DEFINE &quot;_DEFAULT&quot; &quot;NULL&quot; 
.FOREACH_CHILD(&quot;UPDATE SETDEFAULT&quot;)
/*  Set parent code of &quot;[%PQUALIFIER%]%PARENT%&quot; to default in &quot;[%CQUALIFIER%]%CHILD%&quot;  */
if (.JOIN(&quot;new_upd.%PK% &lt;&gt; old_upd.%PK%&quot;, &quot;&quot;, &quot; or&quot;, &quot; ) then&quot;)
   update [%CQUALIFIER%]%CHILD%
    set   .JOIN(&quot;%FK% = %DEFAULT%&quot;, &quot;&quot;, &quot;,&quot;)
   where  .JOIN(&quot;%FK% = old_upd.%PK%&quot;, &quot;and   &quot;)
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Update set default constraint</a:Comment>
<a:Declaration>.FOREACH_CHILD(&quot;UPDATE SETDEFAULT&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o246">
<a:ObjectID>A1F29707-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>DeleteParentRestrict</a:Name>
<a:Code>DELETEPARENTRESTRICT</a:Code>
<a:Text>.FOREACH_CHILD(&quot;DELETE RESTRICT&quot;)
/*  Cannot delete parent &quot;[%PQUALIFIER%]%PARENT%&quot; if children still exist in &quot;[%CQUALIFIER%]%CHILD%&quot;  */
set found = 0;
select 1
 into  found
 from  dummy
where  exists (select 1
                from  [%CQUALIFIER%]%CHILD%
               where  .JOIN(&quot;%FK% = old_del.%PK%&quot;, &quot;and   &quot;, &quot;&quot;, &quot;);&quot;)
if found = 1 then
   message &#39;Error: Trigger([%QUALIFIER%]%TRIGGER%) of table [%TABLQUALIFIER%]%TABLE%&#39;;
   message &#39;        Cannot delete parent if children still exist!&#39;;
   signal user_defined_exception;
end if;
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Delete restrict constraint</a:Comment>
<a:Declaration>.FOREACH_CHILD(&quot;DELETE RESTRICT&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o247">
<a:ObjectID>A1F29708-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>DeleteParentCascade</a:Name>
<a:Code>DELETEPARENTCASCADE</a:Code>
<a:Text>.FOREACH_CHILD(&quot;DELETE CASCADE&quot;)
/*  Delete all children in &quot;[%CQUALIFIER%]%CHILD%&quot;  */
delete from [%CQUALIFIER%]%CHILD%
where  .JOIN(&quot;%FK% = old_del.%PK%&quot;, &quot;and   &quot;, &quot;&quot;, &quot;;&quot;)
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Delete cascade constraint</a:Comment>
<a:Declaration>.FOREACH_CHILD(&quot;DELETE CASCADE&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o248">
<a:ObjectID>A1F29709-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>DeleteParentSetNull</a:Name>
<a:Code>DELETEPARENTSETNULL</a:Code>
<a:Text>.FOREACH_CHILD(&quot;DELETE SETNULL&quot;)
/*  Set parent code of &quot;[%PQUALIFIER%]%PARENT%&quot; to NULL in child &quot;[%CQUALIFIER%]%CHILD%&quot;  */
update [%CQUALIFIER%]%CHILD%
 set   .JOIN(&quot;%FK% = NULL&quot;, &quot;&quot;, &quot;,&quot;)
where  .JOIN(&quot;%FK% = old_del.%PK%&quot;, &quot;and   &quot;, &quot;&quot;, &quot;;&quot;)
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Delete set null constraint</a:Comment>
<a:Declaration>.FOREACH_CHILD(&quot;DELETE SETNULL&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
<o:TriggerItem Id="o249">
<a:ObjectID>A1F2970A-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>DeleteParentSetDefault</a:Name>
<a:Code>DELETEPARENTSETDEFAULT</a:Code>
<a:Text>.DEFINE &quot;_DEFAULT&quot; &quot;NULL&quot; 
.FOREACH_CHILD(&quot;DELETE SETDEFAULT&quot;)
/*  Set parent code of &quot;[%PQUALIFIER%]%PARENT%&quot; to default in &quot;[%CQUALIFIER%]%CHILD%&quot;  */
update [%CQUALIFIER%]%CHILD%
 set   .JOIN(&quot;%FK% = %DEFAULT%&quot;, &quot;&quot;, &quot;,&quot;)
where  .JOIN(&quot;%FK% = old_del.%PK%&quot;, &quot;and   &quot;, &quot;&quot;, &quot;;&quot;)
.ENDFOR</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Delete set default constraint</a:Comment>
<a:Declaration>.FOREACH_CHILD(&quot;DELETE SETDEFAULT&quot;)
.ENDFOR</a:Declaration>
</o:TriggerItem>
</c:TriggerItems>
<c:TriggerTemplates>
<o:TriggerTemplate Id="o250">
<a:ObjectID>A1F296F7-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>BeforeInsertTrigger</a:Name>
<a:Code>BeforeInsertTrigger</a:Code>
<a:Text>create trigger %TRIGGER% before insert order %ORDER% on [%TABLQUALIFIER%]%TABLE%
referencing new as new_ins for each row
begin
    declare user_defined_exception exception for SQLSTATE &#39;99999&#39;;
    declare found integer;
    .InsertChildParentExist
    .InsertTooManyChildren
end;</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TriggerName>tib_%.L:TABLE%</a:TriggerName>
<c:TriggerTemplate.TriggerItems>
<o:TriggerItem Ref="o236"/>
<o:TriggerItem Ref="o237"/>
</c:TriggerTemplate.TriggerItems>
</o:TriggerTemplate>
<o:TriggerTemplate Id="o251">
<a:ObjectID>A1F296F8-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>AfterInsertTrigger</a:Name>
<a:Code>AfterInsertTrigger</a:Code>
<a:Text>create trigger %TRIGGER% after insert order %ORDER% on [%TABLQUALIFIER%]%TABLE%
referencing new as new_ins for each row
begin 
end;</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Time>After</a:Time>
<a:TriggerName>tia_%.L:TABLE%</a:TriggerName>
</o:TriggerTemplate>
<o:TriggerTemplate Id="o252">
<a:ObjectID>A1F296F9-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>BeforeUpdateTrigger</a:Name>
<a:Code>BeforeUpdateTrigger</a:Code>
<a:Text>create trigger %TRIGGER% before update of .INCOLN(&quot;%COLUMN%&quot;, &quot;&quot;, &quot;,&quot;)
order %ORDER% on [%TABLQUALIFIER%]%TABLE%
referencing new as new_upd old as old_upd for each row
begin
    declare user_defined_exception exception for SQLSTATE &#39;99999&#39;;
    declare found integer;
    .UpdateChangeColumn
    .UpdateChildChangeParent
    .UpdateChildParentExist
    .UpdateTooManyChildren
    .UpdateParentRestrict
end;</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Event>Update</a:Event>
<a:TriggerName>tub_%.L:TABLE%</a:TriggerName>
<c:TriggerTemplate.TriggerItems>
<o:TriggerItem Ref="o238"/>
<o:TriggerItem Ref="o239"/>
<o:TriggerItem Ref="o240"/>
<o:TriggerItem Ref="o241"/>
<o:TriggerItem Ref="o242"/>
</c:TriggerTemplate.TriggerItems>
</o:TriggerTemplate>
<o:TriggerTemplate Id="o253">
<a:ObjectID>A1F296FA-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>AfterUpdateTrigger</a:Name>
<a:Code>AfterUpdateTrigger</a:Code>
<a:Text>create trigger %TRIGGER% after update of .INCOLN(&quot;%COLUMN%&quot;, &quot;&quot;, &quot;,&quot;)
order %ORDER% on [%TABLQUALIFIER%]%TABLE%
referencing new as new_upd old as old_upd for each row
begin
    declare user_defined_exception exception for SQLSTATE &#39;99999&#39;;
    declare found integer;
    .UpdateParentCascade
    .UpdateParentSetNull
    .UpdateParentSetDefault
end;</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Time>After</a:Time>
<a:Event>Update</a:Event>
<a:TriggerName>tua_%.L:TABLE%</a:TriggerName>
<c:TriggerTemplate.TriggerItems>
<o:TriggerItem Ref="o243"/>
<o:TriggerItem Ref="o244"/>
<o:TriggerItem Ref="o245"/>
</c:TriggerTemplate.TriggerItems>
</o:TriggerTemplate>
<o:TriggerTemplate Id="o254">
<a:ObjectID>A1F296FB-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>BeforeDeleteTrigger</a:Name>
<a:Code>BeforeDeleteTrigger</a:Code>
<a:Text>create trigger %TRIGGER% before delete order %ORDER% on [%TABLQUALIFIER%]%TABLE%
referencing old as old_del for each row
begin
    declare user_defined_exception exception for SQLSTATE &#39;99999&#39;;
    declare found integer;
    .DeleteParentRestrict
end;</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Event>Delete</a:Event>
<a:TriggerName>tdb_%.L:TABLE%</a:TriggerName>
<c:TriggerTemplate.TriggerItems>
<o:TriggerItem Ref="o246"/>
</c:TriggerTemplate.TriggerItems>
</o:TriggerTemplate>
<o:TriggerTemplate Id="o255">
<a:ObjectID>A1F296FC-F27D-11D2-B699-0008C7EA924D</a:ObjectID>
<a:Name>AfterDeleteTrigger</a:Name>
<a:Code>AfterDeleteTrigger</a:Code>
<a:Text>create trigger %TRIGGER% after delete order %ORDER% on [%TABLQUALIFIER%]%TABLE%
referencing old as old_del for each row
begin
    declare user_defined_exception exception for SQLSTATE &#39;99999&#39;;
    declare found integer;
    .DeleteParentCascade
    .DeleteParentSetNull
    .DeleteParentSetDefault
end;</a:Text>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Time>After</a:Time>
<a:Event>Delete</a:Event>
<a:TriggerName>tda_%.L:TABLE%</a:TriggerName>
<c:TriggerTemplate.TriggerItems>
<o:TriggerItem Ref="o247"/>
<o:TriggerItem Ref="o248"/>
<o:TriggerItem Ref="o249"/>
</c:TriggerTemplate.TriggerItems>
</o:TriggerTemplate>
</c:TriggerTemplates>
</o:DBMS>

</DBMS>
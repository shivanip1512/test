<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" Code="Sybase AS IQ 12.5" Family="ADAPTIVE IQ" Name="Sybase AS IQ 12.5" signature="XDB_XML" version="12.0.0.1649"?>
<!-- do not edit this file -->

<DBMS xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:DBMS Id="o1">
<a:ObjectID>925750C6-B4B7-4F1C-AF77-E2879CC53DA6</a:ObjectID>
<a:Name>Sybase AS IQ 12.5</a:Name>
<a:Code>Sybase AS IQ 12.5</a:Code>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1026305198</a:ModificationDate>
<a:Modifier>mledier</a:Modifier>
<a:Family>ADAPTIVE IQ</a:Family>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined

Function UCaseDttp(col)
   Dim position &#39;position of first ( in datatype

   position = InStr(col.datatype,&quot;(&quot;)
   if (position &lt;&gt; 0) then
      UCaseDttp = ucase(trim(left(col.datatype, position -1)))
   else
      UCaseDttp = ucase(col.datatype)
   end if
End Function
</a:CheckGlobalScript>
<c:Categories>
<o:TargetCategory Id="o2">
<a:Name>General</a:Name>
<a:Comment>Target DBMS identification</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o3">
<a:Name>SqlSupport</a:Name>
<a:Comment>SQL syntax allowed. This does not impact the script generation, but it impacts the SQL Preview</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o4">
<a:Name>EnableCheck</a:Name>
<a:Comment>Determines if the generation of check parameters is authorized or not</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o5">
<a:Name>Enableconstname</a:Name>
<a:Comment>Determines if constraint names are used during the generation</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o6">
<a:Name>UniqConstName</a:Name>
<a:Comment>Determines if unique constraint names for objects are authorized or not</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o7">
<a:Name>Script</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the Script generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o8">
<a:Name>Sql</a:Name>
<a:Comment>Contains sub-categories Syntax, Format, File and Keywords. Each sub-category contains entries whose values define general syntax for the database</a:Comment>
<c:Categories>
<o:TargetCategory Id="o9">
<a:Name>Syntax</a:Name>
<a:Comment>Contains general parameters for SQL syntax</a:Comment>
<c:Categories>
<o:CharacterTargetItem Id="o10">
<a:Name>Terminator</a:Name>
<a:Comment>End of command character</a:Comment>
<a:CharacterTargetItem.Value>;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o11">
<a:Name>BlockTerminator</a:Name>
<a:Comment>End of block character</a:Comment>
</o:StringTargetItem>
<o:BooleanTargetItem Id="o12">
<a:Name>UseBlockTerm</a:Name>
<a:Comment>Use end of block character by default</a:Comment>
</o:BooleanTargetItem>
<o:CharacterTargetItem Id="o13">
<a:Name>Delimiter</a:Name>
<a:Comment>Field separation character. Example: col1, col2, col3</a:Comment>
<a:CharacterTargetItem.Value>,</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o14">
<a:Name>Quote</a:Name>
<a:Comment>Character used to enclose string values</a:Comment>
<a:CharacterTargetItem.Value>&#39;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o15">
<a:Name>SqlContinue</a:Name>
<a:Comment>Continuation character</a:Comment>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o16">
<a:Name>BlockComment</a:Name>
<a:Comment>Characters used to enclose a multi-line comment</a:Comment>
<a:StringTargetItem.Value>/*   */</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o17">
<a:Name>LineComment</a:Name>
<a:Comment>Characters used to enclose a single line comment</a:Comment>
<a:StringTargetItem.Value>--</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:TextTargetItem Id="o18">
<a:Name>UsingBlockTerm</a:Name>
<a:TextTargetItem.Value>create procedure,%TERMINATOR%,  1
{
   begin, end, 3
   select, ;, 4
   {
      case, end, 5
   }
   if, end if, 4
   case, end case, 4
   loop, end loop, 4
   for, end for, 4
   {
      cursor, for, 5
   }
   declare, ;, 4
   {
      cursor, for, 5
   }
}
create function,%TERMINATOR%,  1
{
   begin, end, 3
   select, ;, 4
   {
      case, end, 5
   }
   if, end if, 4
   case, end case, 4
   loop, end loop, 4
   for, end for, 4
   {
      cursor, for, 5
   }
   declare, ;, 4
   {
      cursor, for, 5
   }
}</a:TextTargetItem.Value>
<a:Comment>List of objects using block definition during reverse.</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o19">
<a:Name>Format</a:Name>
<a:Comment>Contains entries that define script formatting</a:Comment>
<c:Categories>
<o:StringTargetItem Id="o20">
<a:Name>IllegalChar</a:Name>
<a:Comment>Invalid characters for names</a:Comment>
<a:StringTargetItem.Value>&quot; +-*/!=&lt;&gt;&#39;&quot;()&quot;.</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:BooleanTargetItem Id="o21">
<a:Name>UpperCaseOnly</a:Name>
<a:Comment>Uppercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o22">
<a:Name>LowerCaseOnly</a:Name>
<a:Comment>Lowercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o23">
<a:Name>EnableOwnerPrefix</a:Name>
<a:Comment>Object codes can have a prefix made of the object owner code</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o24">
<a:Name>File</a:Name>
<a:Comment>Contains header, footer and usage text entries used during the generation</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o25">
<a:Name>Header</a:Name>
<a:Comment>Header text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o26">
<a:Name>Footer</a:Name>
<a:Comment>Footer text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o27">
<a:Name>EnableMultiFile</a:Name>
<a:Comment>Multi-script allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:StringTargetItem Id="o28">
<a:Name>ScriptExt</a:Name>
<a:Comment>Main script extension in database generation</a:Comment>
<a:StringTargetItem.Value>sql</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o29">
<a:Name>TableExt</a:Name>
<a:Comment>Other scripts extension in database generation</a:Comment>
<a:StringTargetItem.Value>sql</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o30">
<a:Name>StartCommand</a:Name>
<a:Comment>Command for executing a script</a:Comment>
<a:StringTargetItem.Value>read %PATHSCRIPT%\%NAMESCRIPT%</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:TextTargetItem Id="o31">
<a:Name>Usage1</a:Name>
<a:TextTargetItem.Value>  (1) Start the SQL interpreter: DBISQL
  (2) Open the script %NAMESCRIPT%
  (3) Execute the script</a:TextTargetItem.Value>
<a:Comment>Usage for a single script in database generation</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o32">
<a:Name>Usage2</a:Name>
<a:TextTargetItem.Value>  (1) Start the SQL interpreter: DBISQL
  (2) Open one script from the directory %PATHSCRIPT%
  (3) Execute this script</a:TextTargetItem.Value>
<a:Comment>Usage for multiple scripts in database generation</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o33">
<a:Name>Keywords</a:Name>
<a:Comment>Contains the list of reserved words and functions available in SQL</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o34">
<a:Name>ReservedDefault</a:Name>
<a:TextTargetItem.Value>NULL
AUTOINCREMENT
CURRENT DATE
CURRENT PUBLISHER
CURRENT TIME
CURRENT TIMESTAMP
CURRENT USER
LAST USER
USER</a:TextTargetItem.Value>
<a:Comment>Reserved default values</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o35">
<a:Name>GroupFunc</a:Name>
<a:TextTargetItem.Value>AVG({ DISTINCTcolumn-name | expression })
COUNT({ DISTINCTcolumn-name | expression })
MAX({ DISTINCTcolumn-name | expression })
MIN({ DISTINCTcolumn-name | expression })
STDDEV({ DISTINCTcolumn-name | expression })
SUM({ DISTINCTcolumn-name | expression })
VARIANCE({ DISTINCTcolumn-name | expression })</a:TextTargetItem.Value>
<a:Comment>List of SQL functions to use with group keywords.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o36">
<a:Name>NumberFunc</a:Name>
<a:TextTargetItem.Value>ABS(numeric-expr)
ACOS(numeric-expr)
ASIN(numeric-expr)
ATAN(numeric-expr)
ATAN2(numeric-expr1, numeric-expr2)
CEILING(numeric-expr)
COS(numeric-expr)
COT(numeric-expr)
DEGREES(numeric-expr)
EXP(numeric-expr)
FLOOR(numeric-expr)
LOG(*)
POWER(numeric-expr1, numeric-expr2)
RADIANS(numeric-expr)
RAND([ integer-expr ])
REMAINDER(numeric-expr, numeric-expr)
ROUND(numeric-expr, integer-expr)
SIGN(numeric-expr)
SIN(numeric-expr)
SQRT(numeric-expr)
TAN(numeric-expr)
&quot;TRUNCATE&quot;(numeric-expr, integer-expr)
TRUNCNUM(numeric-expression, integer-expression)</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used on numbers</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o37">
<a:Name>CharFunc</a:Name>
<a:TextTargetItem.Value>ASCII(string-expr)
BYTE_LENGTH(string-expr)
CHAR(integer-expr)
CHAR_LENGTH(string-expr)
CHARINDEX(string-expr1, string-expr2)
DIFFERENCE(string-expr1, string-expr2)
INSERTSTR(string-expr1, string-expr2)
LCASE(string-expr)
LEFT(string-expr, numeric-expr)
LENGTH(string-expr)
LOCATE(string-expr1, string-expr2 [, numeric-expr ])
LOWER(string-expr)
LTRIM(string-expr)
PATINDEX(’%pattern%’, string_expr)
REPEAT(string-expr, numeric-expr )
REPLACE(original-string, search-string, replace-string)
REPLICATE(string-expr, integer-expr)
RIGHT(string-expr, integer-expr)
RTRIM(string-expr )
SIMILAR(string-expr1, string-expr2)
SORTKEY( string_expr [collation-name ] )
SOUNDEX(string-expr)
SPACE(integer-expr)
STR(numeric_expr [, length [, decimal ] ])
STRING(string1 [, string2, ..., string99 ])
STUFF(string-expr1, start, length, string-expr2)
SUBSTRING(( string-expr, integer-expr [, integer-expr ])
TRIM(string-expr)
UCASE(string-expr)
UPPER(string-expr)</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for characters and strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o38">
<a:Name>DateFunc</a:Name>
<a:TextTargetItem.Value>DATE(expression)
DATEADD(date-part, numeric-expression, date-expr)
DATEDIFF(date-part, date-expr1, date-expr2)
DATEFORMAT(datetime-expr, string-expr)
DATENAME(date-part, date-expr)
DATEPART(date-part, date-expr)
DATETIME(expression)
DAY(date-expr)
DAYNAME(date-expr)
DAYS(date-expr [,date-expr|integer-expr])
DOW(date-expr)
GETDATE()
HOUR(date-expr)
HOURS(date-expr [,date-expr|integer-expr])
MINUTE(date-expr)
MINUTES()
MONTH(date-expr)
MONTHNAME(date-expr)
MONTHS(date-expr [,date-expr|integer-expr])
NOW(*)
QUARTER(date-expr)
SECOND(date-expr)
SECONDS(date-expr [,date-expr|integer-expr])
TODAY(*)
WEEKS(date-expr [,date-expr|integer-expr])
YEAR(date-expr)
YEARS(date-expr [,date-expr|integer-expr])
YMD(year-num, month-num, day-num)</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for dates</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o39">
<a:Name>ConvertFunc</a:Name>
<a:TextTargetItem.Value>CAST(expression AS datatype)
CONVERT(datatype, expression [ , format-style ])
HEXTOINT(hexadecimal-string)
INTTOHEX(integer-expr)</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used to convert values between hex and integer and handling strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o40">
<a:Name>OtherFunc</a:Name>
<a:TextTargetItem.Value>ARGN(integer-expr, expression [, ...])
COALESCE(expression, expression [, expression ...])
IFNULL(expression1, expression2 [, expression3 ])
ISNULL(expression, expression [, expression ...])
NULLIF(expression1, expression2)
NUMBER(*)
ROWID(table-name)
COL_LENGTH(table-name, column-name)
COL_NAME(table-id, column-id [ ,database-id ])
CONNECTION_PROPERTY({ property-id | property-name } ... [ ,connection-id ])
DATALENGTH(expression)
DB_ID([ database-name ])
DB_NAME([ database-id ])
DB_PROPERTY({ property-id | property-name } ...[,{database-id | database-name } ])
EVENT_CONDITION(condition-name)
EVENT_CONDITION_NAME(integer)
EVENT_PARAMETER(context-name)
INDEX_COL(table-name, index-id, key_# [ ,user-id ])
NEXT_CONNECTION({ NULL | connection-id })
NEXT_DATABASE({ NULL | database-id })
OBJECT_ID(object-name)
OBJECT_NAME(object-id [, database-id ])
PROPERTY({ property-number | property-name })
PROPERTY_DESCRIPTION({ property-number | property-name })
PROPERTY_NAME(property-number)
PROPERTY_NUMBER(property-name)
SUSER_ID([ user-name ])
SUSER_NAME([ user-id ])
USER_ID([ user-name ])
USER_NAME([ user-id ])
DENSE_RANK () OVER ( ORDER BY expression [ ASC | DESC ] )
NTILE ( expression1 )OVER ( ORDER BY expression2 [ ASC | DESC ] )
PERCENT_RANK () OVER ( ORDER BY expression [ ASC | DESC ] )
PERCENTILE_CONT ( expression1 ) WITHIN GROUP ( ORDER BY expression2 [ ASC | DESC ] )
PERCENTILE_DISC ( expression1 ) WITHIN GROUP ( ORDER BY expression2 [ ASC | DESC ] )
RANK () OVER ( ORDER BY expression [ ASC | DESC ] )</a:TextTargetItem.Value>
<a:Comment>List of other SQL functions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o41">
<a:Name>ListOperators</a:Name>
<a:TextTargetItem.Value>=
!=
~=
&lt;&gt;
&gt;
!&gt;
&lt;
!&lt;
&gt;=
&lt;=
*=
=*
not
in
not in
between
not between
contains
not contains
exists
not exists
like
not like
is
is not
= any
!= any
&gt; any
!&gt; any
&lt; any
!&lt; any
&gt;= any
&lt;= any
= all
!= all
&gt; all
!&gt; all
&lt; all
!&lt; all
&gt;= all
&lt;= all</a:TextTargetItem.Value>
<a:Comment>List of operators for comparing values, boolean, and various semantic operators</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o42">
<a:Name>Commit</a:Name>
<a:TextTargetItem.Value>commit</a:TextTargetItem.Value>
<a:Comment>Command for validating the transaction by OBDC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o43">
<a:Name>ReservedWord</a:Name>
<a:TextTargetItem.Value>add
all
alter
and
any
as
asc
backup
begin
between
bigint
binary
bit
bottom
break
by
call
cascade
case
cast
char
char_convert
character
check
checkpoint
close
comment
commit
connect
constraint
contains
continue
convert
create
cross
current
cursor
date
dbspace
deallocate
dec
decimal
declare
default
delete
desc
disable
distinct
do
double
drop
dynamic
else
elseif
enable
encrypted
end
endif
escape
exception
exec
execute
existing
exists
externlogin
fetch
first
float
for
foreign
forward
from
full
goto
grant
group
having
holdlock
identified
if
in
index
inner
inout
insensitive
insert
install
instead
int
integer
integrated
into
iq
is
isolation
join
key
left
like
lock
login
long
match
membership
message
mode
modify
natural
new
no
noholdlock
not
notify
null
numeric
of
off
on
open
option
options
or
order
others
out
outer
passthrough
precision
prepare
primary
print
privileges
proc
procedure
publication
raiserror
readtext
real
reference
references
release
remote
remove
rename
resource
restore
restrict
return
revoke
right
rollback
save
savepoint
schedule
scroll
select
session
set
setuser
share
smallint
some
sqlcode
sqlstate
start
stop
subtrans
subtransaction
synchronize
syntax_error
table
temporary
then
time
timestamp
tinyint
to
top
tran
transaction
trigger
truncate
tsequal
union
unique
unknown
unsigned
update
user
using
validate
values
varbinary
varchar
variable
varying
view
when
where
while
with
work
writetext
</a:TextTargetItem.Value>
<a:Comment>Reserved words</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o44">
<a:Name>Objects</a:Name>
<a:Comment>Contains sub-categories for each type of object in the database, for example: Table, or Reference. Each sub-category contains entries whose values define database commands and object-related characteristics</a:Comment>
<c:Categories>
<o:TargetCategory Id="o45">
<a:Name>Table</a:Name>
<a:Code>TABL</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLE&quot;        // generated code of the table
   &quot;TNAME&quot;        // name of the table
   &quot;TCODE&quot;        // code of the table
   &quot;TLABL&quot;        // comment of the table
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;TABLDEFN&quot;     // complete body of the table definition. Contains definition of columns, checks and keys
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o46">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o47">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create[%ExtGlobalTemporaryTable%? global temporary] table [%QUALIFIER%]%TABLE% (
   %TABLDEFN%
)
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a table. Example: create table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o48">
<a:Name>TableComment</a:Name>
<a:TextTargetItem.Value>comment on table [%QUALIFIER%]%TABLE% is 
%.q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a table comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o49">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(
   select 1 from sys.systable 
   where table_name=%.q:TABLE%
     and table_type in (&#39;BASE&#39;, &#39;GBL TEMP&#39;)[%QUALIFIER%?
     and creator=user_id(%.q:OWNER%)]
) then
    drop table [%QUALIFIER%]%TABLE%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table. Example: drop table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o50">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>alter table [%OLDQUALIFIER%]%OLDTABL% rename %NEWTABL%</a:TextTargetItem.Value>
<a:Comment>Command for renaming a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o51">
<a:Name>DropTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete check</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o52">
<a:Name>DefineTableCheck</a:Name>
<a:TextTargetItem.Value>check (%.A:CONSTRAINT%) unenforced</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script of table check constraints</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o53">
<a:Name>AddTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add check (%.A:CONSTRAINT%) unenforced</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script for modifying table constraints within an alter table statement</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o54">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a table.
The first column is the SQL name of permission (eg: SELECT)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>ALTER=Alter
DELETE=Delete
INSERT=Insert
REFERENCES=References
SELECT=Select
UPDATE=Update</a:MapTargetItem.Value>
<a:List>ALTER
DELETE
INSERT
REFERENCES
SELECT
UPDATE
</a:List>
</o:MapTargetItem>
<o:BooleanTargetItem Id="o55">
<a:Name>Enable</a:Name>
<a:Comment>Table allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o56">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, ExtGlobalTemporaryTable, COMMENT}

select 
   u.user_name, 
   t.table_name, 
   case(t.table_type) when &#39;BASE&#39; then &#39;false&#39; else &#39;true&#39; end,
   t.remarks
from 
   sys.sysuserperms u
      join sys.systable t on (t.creator = u.user_id)
where 
   t.table_type in (&#39;BASE&#39;, &#39;GBL TEMP&#39;)
[  and u.user_name = %.q:OWNER%]
[  and t.table_name = %.q:TABLE%]
order by 1, 2</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o57">
<a:Name>SqlOptsQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, OPTIONS}

select
   u.user_name,
   t.table_name,
   &#39;in &#39;+f.dbspace_name
from
   sys.sysuserperms u,
   sys.systable t,
   sys.sysfile f
where
   t.file_id = f.file_id
   and t.creator = u.user_id
[  and t.table_name=%.q:TABLE%]
[  and u.user_name=%.q:SCHEMA%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o58">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE ID, PERMISSION ...}

select 
u1.user_name grantee,
case
when (p.selectauth = &#39;Y&#39;) then &#39;SELECT&#39;
when (p.selectauth = &#39;G&#39;) then &#39;SELECT+&#39;
end + &#39;,&#39; ||
case 
when (p.insertauth = &#39;Y&#39;) then &#39;INSERT&#39; 
when (p.insertauth = &#39;G&#39;) then &#39;INSERT+&#39; 
end + &#39;,&#39; ||
case 
when (p.deleteauth = &#39;Y&#39;) then &#39;DELETE&#39; 
when (p.deleteauth = &#39;G&#39;) then &#39;DELETE+&#39; 
end + &#39;,&#39; ||
case 
when (p.updateauth = &#39;Y&#39;) then &#39;UPDATE&#39; 
when (p.updateauth = &#39;G&#39;) then &#39;UPDATE+&#39; 
end + &#39;,&#39; ||
case 
when (p.alterauth = &#39;Y&#39;) then &#39;ALTER&#39; 
when (p.alterauth = &#39;G&#39;) then &#39;ALTER+&#39; 
end
permission
from sysuserperms u, sysuserperms u1, systable s, systableperm p
where 
s.table_type = &#39;BASE&#39; and
(s.table_name = %.q:TABLE% ) and
[ (s.creator = u.user_id) and (u.user_name = %.q:OWNER% ) and ]
(s.table_id = p.stable_id) and
(u1.user_id = p.grantee)</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o59">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>in %s : category=tablespace</a:TextTargetItem.Value>
<a:Comment>Available options for creating a table</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o60">
<a:Name>Index</a:Name>
<a:Code>INDX</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
   &quot;INDEX&quot;        // generated code of the index
   &quot;INDEXNAME&quot;    // index name
   &quot;INDEXCODE&quot;    // index code
   &quot;UNIQUE&quot;       // keyword &quot;unique&quot; when the index is unique
   &quot;INDEXTYPE&quot;    // index type (available only for a few DBMS)
   &quot;INDEXKEY&quot;     // keywords &quot;primary&quot;, &quot;unique&quot; or &quot;foreign&quot; depending on the index origin
   &quot;CIDXLIST&quot;     // list of index columns. Eg: A asc, B desc, C asc
   &quot;CLUSTER&quot;      // keyword &quot;cluster&quot; when the index is cluster
For index columns, the following system variables are available:
   &quot;ASC&quot;          // keywords &quot;ASC&quot; or &quot;DESC&quot; depending on sort order
   &quot;ISASC&quot;        // TRUE if the index column sort is ascending
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o61">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o62">
<a:Name>MaxColIndex</a:Name>
<a:Comment>Maximum number of columns in an index</a:Comment>
<a:IntegerTargetItem.Value>99</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o63">
<a:Name>Enable</a:Name>
<a:Comment>Index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o64">
<a:Name>UniqName</a:Name>
<a:Comment>Unique index name in the database</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o65">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create[ %UNIQUE%] %INDEXTYPE% index %INDEX% on [%TABLQUALIFIER%]%TABLE% (
%CIDXLIST%
)
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating an index. Example: create index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o66">
<a:Name>AddColIndex</a:Name>
<a:TextTargetItem.Value>%COLUMN%</a:TextTargetItem.Value>
<a:Comment>Command for defining an index column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o67">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>in %s : category=tablespace
notify %d
delimited by %s : squoted=yes
limit %d</a:TextTargetItem.Value>
<a:Comment>Default options for creating an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o68">
<a:Name>IndexType</a:Name>
<a:TextTargetItem.Value>CMP
HG
HNG
LF
WD
DATE
TIME
DTTM</a:TextTargetItem.Value>
<a:Comment>List of types available for an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o69">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists (select 1
            from  sys.sysindex where  table_id    =    (select table_id from systable
             where table_name=%.q:TABLE%)
            and   index_name  = %.q:INDEX%
            and   index_type &lt;&gt; &#39;FP&#39;
            and   index_owner &lt;&gt; &#39;IQ&#39;
            and   index_id &gt; 0
            and   index_id &lt; 255) then
   drop index [%QUALIFIER%]%TABLE%.%INDEX%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping an index. Example: drop index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o70">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, INDEX, INDEXTYPE}

select
   u.user_name,
   t.table_name,
   i.index_name,
   i.index_type
from
   sys.sysindex i
      join sys.systable t on i.table_id = t.table_id
      join sys.sysuserperms u on  u.user_id = t.creator
where
   i.index_owner &lt;&gt; &#39;IQ&#39;
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:TABLE%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o71">
<a:Name>SqlSysIndexQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, INDEX, INDEXTYPE}
select u.user_name, t.table_name, i.index_name, i.index_type
from sysindex i, systable t, sysuserperms u
where t.table_id = i.table_id
and u.user_id = t.creator
and i.index_owner != &#39;USER&#39;
[and u.user_name=%.q:OWNER%]
[and t.table_name=%.q:TABLE%]
union
select u.user_name, t.table_name, i.index_name, i.index_type
from sysindex i, systable t, sysuserperms u
where t.table_id = i.table_id
and u.user_id = t.creator
and i.index_type = &#39;SA&#39;
[and u.user_name=%.q:OWNER%]
[and t.table_name=%.q:TABLE%]</a:TextTargetItem.Value>
<a:Comment>SQL query to list system indexes created by the database</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o72">
<a:Name>MandIndexType</a:Name>
<a:Comment>Determines if the index type is mandatory for an index</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o73">
<a:Name>SqlOptsQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, INDEX, OPTIONS}

select
   u.user_name,
   t.table_name,
   i.index_name,
   ifnull(q.delimited_by,
      ifnull(q.limit, &#39;&#39;, &#39;limit &#39;|| q.limit),
      &#39;delimited by &#39;&#39;&#39;||q.delimited_by || &#39;&#39;&#39;&#39;|| ifnull(q.limit, &#39;&#39;, &#39; limit &#39;|| q.limit))
 from
   sys.sysindex i
      join sys.systable t on i.table_id = t.table_id
      join sys.sysuserperms u on  u.user_id = t.creator
      join sys.sysiqindex q on (i.table_id=q.table_id and i.index_id=q.index_id)
where
   i.index_owner = &#39;USER&#39;
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:TABLE%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o74">
<a:Name>EnableAscDesc</a:Name>
<a:Comment>ASC, DESC keywords allowed</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o75">
<a:Name>EnableCluster</a:Name>
<a:Comment>Cluster option available for indexes</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o76">
<a:Name>Column</a:Name>
<a:Code>COLN</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for columns)
   &quot;COLUMN&quot;       // generated code of the column
   &quot;COLNNO&quot;       // position of the column in the list of columns of the table
   &quot;COLNNAME&quot;     // name of the column
   &quot;COLNCODE&quot;     // code of the column
   &quot;PRIMARY&quot;      // keyword &quot;primary&quot; if the column is primary
   &quot;ISPKEY&quot;       // TRUE if the column is part of the primary key
   &quot;FOREIGN&quot;      // TRUE if the column is part of one foreign key
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o77">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o78">
<a:Name>EnableDefault</a:Name>
<a:Comment>Default values allowed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o79">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>%20:COLUMN% %15:DATATYPE%[ %NULLNOTNULL%]
   [check (%.A:CONSTRAINT%) unenforced][ iq unique (%ExtIqUnicity%)]</a:TextTargetItem.Value>
<a:Comment>Command for defining a table column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o80">
<a:Name>ColumnComment</a:Name>
<a:TextTargetItem.Value>comment on column [%QUALIFIER%]%TABLE%.%COLUMN% is 
%.q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a column comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o81">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   rename %OLDCOLN% to %NEWCOLN%</a:TextTargetItem.Value>
<a:Comment>Command for renaming a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o82">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add %COLUMN% %DATATYPE%[ %NULLNOTNULL%]
      [check (%.A:CONSTRAINT%) unenforced][ iq unique (%ExtIqUnicity%)]
</a:TextTargetItem.Value>
<a:Comment>Command for adding a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o83">
<a:Name>ModifyColumn</a:Name>
<a:Comment>Command for modifying a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o84">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete %COLUMN%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o85">
<a:Name>ModifyColnChck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% check null;
alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN%
      [check (%.A:CONSTRAINT%) unenforced]</a:TextTargetItem.Value>
<a:Comment>Command for modifying a column check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o86">
<a:Name>DropColnChck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   modify %COLUMN% check null</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o87">
<a:Name>AltEnableAddColnChk</a:Name>
<a:Comment>Column check constraint allowed in an alter table statement</a:Comment>
</o:BooleanTargetItem>
<o:MapTargetItem Id="o88">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a column.
The first column is the SQL name of permission (eg: SELECT)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>REFERENCES=References
SELECT=Select
UPDATE=Update</a:MapTargetItem.Value>
<a:List>REFERENCES
SELECT
UPDATE
</a:List>
</o:MapTargetItem>
<o:BooleanTargetItem Id="o89">
<a:Name>Enable</a:Name>
<a:Comment>Column allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o90">
<a:Name>SqlChckQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, COLUMN, CONSTDEFN}

select
   u.user_name,
   t.table_name,
   c.column_name,
   c.&quot;check&quot;
from
   sys.sysuserperms u,
   sys.systable t,
   sys.syscolumn c
where
   c.&quot;check&quot; is not null
   and t.creator=u.user_id
   and c.table_id=t.table_id
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:TABLE%]
order by
   u.user_name,
   t.table_id
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object check constraints</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o91">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, COLUMN, DOMAIN, ExtIqUnicity}

select
   u.user_name,
   t.table_name,
   c.column_name,
   d.type_name,
   case(i.cardinality)
      when 0 then case (i.approx_unique_count) 
         when 0 then null 
         else i.approx_unique_count end
      else i.cardinality end
from
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.syscolumn c on (c.table_id=t.table_id)
      left outer join sys.sysusertype d on (d.type_id = c.user_type)
      left outer join sys.sysiqcolumn i on (i.table_id = t.table_id and i.column_id = c.column_id)
where 
   ((d.type_name is not null) or ((i.approx_unique_count+i.cardinality) &gt; 0))
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:TABLE%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o92">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE ID, COLNPERMISSION ID, COLUMN ...}

select 
u.user_name grantee, 
case
when (p.privilege_type = 1 and p.is_grantable =&#39;Y&#39; ) then &#39;SELECT+&#39;
when (p.privilege_type = 1)  then &#39;SELECT&#39;
when (p.privilege_type = 8 and p.is_grantable =&#39;Y&#39; ) then &#39;UPDATE+&#39;
when (p.privilege_type = 8)  then &#39;UPDATE&#39;
when (p.privilege_type = 16 and p.is_grantable =&#39;Y&#39; ) then &#39;REFERENCES+&#39;
when (p.privilege_type = 16)  then &#39;REFERENCES&#39;
end,
s.column_name + &#39;,&#39;
from sysuserperms u, sysuserperms u1, syscolumn s, syscolperm p, systable t
where 
(t.table_name = %.q:TABLE%) and
[ (t.creator = u1.user_id) and (u1.user_name = %.q:OWNER% ) and ]
(t.table_id = p.table_id) and
(p.column_id = s.column_id) and
(s.table_id = t.table_id) and
(u.user_id = p.grantee)
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o93">
<a:Name>DefineColnChck</a:Name>
<a:TextTargetItem.Value>check (%.A:CONSTRAINT%) unenforced</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script of column check constraints</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:IntegerTargetItem Id="o94">
<a:Name>MaxConstLen</a:Name>
<a:Comment>Maximum constraint name length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TargetCategory Id="o95">
<a:Name>User</a:Name>
<a:Code>USER</a:Code>
<a:Comment>The following system variables are available:
   &quot;USER&quot;         // generated code of the user
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o96">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant connect to %USER% IDENTIFIED BY [%PASSWORD%?%PASSWORD%:&quot;&quot;]
</a:TextTargetItem.Value>
<a:Comment>Command for creating a user</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o97">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(
  select 
    1
  from 
    sys.sysuserperms u
  where
      user_name= &#39;%USER%&#39;
  )
then
 revoke connect from %USER%
end if
</a:TextTargetItem.Value>
<a:Comment>Command for dropping a user</a:Comment>
</o:TextTargetItem>
<o:IntegerTargetItem Id="o98">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o99">
<a:Name>Enable</a:Name>
<a:Comment>User allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o100">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{USER}

select
   user_name
from
   sys.sysuserperms u
where
  u.user_group = &#39;N&#39;
order by
   user_name</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o101">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{USER ID, PRIVILEGE ...}

select 
   u.user_name,
   case
   when (u.dbaauth = &#39;Y&#39;) then &#39;DBA&#39;
   end + &#39;,&#39; ||
   case
   when (u.remotedbaauth = &#39;Y&#39;) then &#39;REMOTE DBA&#39;
   end + &#39;,&#39; ||
   case
   when (u.resourceauth = &#39;Y&#39;) then &#39;RESOURCE&#39;
   end
from 
   sys.sysuserperms u
where
  u.user_group = &#39;N&#39;
order by 1</a:TextTargetItem.Value>
<a:Comment>Query to reverse privileges</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o102">
<a:Name>Group</a:Name>
<a:Code>GRPE</a:Code>
<a:Comment>Manages the group object.</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o103">
<a:Name>Enable</a:Name>
<a:Comment>Group allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o104">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant connect to %GROUP% identified by [%PASSWORD%?%PASSWORD%:&quot;&quot;]</a:TextTargetItem.Value>
<a:Comment>Command for creating a group.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o105">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(
  select 
    1
  from 
    sys.sysuserperms u
  where
      user_name= &#39;%GROUP%&#39;
  )
then
 revoke connect from %GROUP%
end if

</a:TextTargetItem.Value>
<a:Comment>Command for dropping a group.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o106">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{GROUP}

select 
   u.user_name 
from 
   sys.sysuserperms u
where
  u.user_group = &#39;Y&#39;
order by 1</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o107">
<a:Name>SqlListChildrenQuery</a:Name>
<a:TextTargetItem.Value>{ GROUP ID , MEMBER }
 
select group_name, member_name from sys.sysgroups</a:TextTargetItem.Value>
<a:Comment>SQL query to list members of the group</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o108">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{GROUP ID, PRIVILEGE ...}

select 
   u.user_name,
   case
   when (u.dbaauth = &#39;Y&#39;) then &#39;DBA&#39;
   end + &#39;,&#39; ||
   case
   when (u.remotedbaauth = &#39;Y&#39;) then &#39;REMOTE DBA&#39;
   end + &#39;,&#39; ||
   case
   when (u.resourceauth = &#39;Y&#39;) then &#39;RESOURCE&#39;
   end
from 
   sys.sysuserperms u
where
  u.user_group = &#39;Y&#39;
order by 1</a:TextTargetItem.Value>
<a:Comment>Query to reverse privileges</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o109">
<a:Name>Bind</a:Name>
<a:TextTargetItem.Value>grant membership in group %GROUP% to %USER%
</a:TextTargetItem.Value>
<a:Comment>Command for adding a member to a group</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o110">
<a:Name>AfterCreate</a:Name>
<a:TextTargetItem.Value>%SetAsGroup%;

</a:TextTargetItem.Value>
<a:Comment>Commands executed after create statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o111">
<a:Name>ReversedStatements</a:Name>
<a:TextTargetItem.Value>SetAsGroup</a:TextTargetItem.Value>
<a:Comment>Additional statements to be reversed by script</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o112">
<a:Name>SetAsGroup</a:Name>
<a:TextTargetItem.Value>grant group to %GROUP%</a:TextTargetItem.Value>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TextTargetItem>
<o:TextTargetItem Id="o113">
<a:Name>Unbind</a:Name>
<a:TextTargetItem.Value>revoke membership in group %GROUP% from %USER%
</a:TextTargetItem.Value>
<a:Comment>Command for removing a member from a group</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o114">
<a:Name>ObjectOwner</a:Name>
<a:Comment>Allow a group to be an object owner.</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:BooleanTargetItem Id="o115">
<a:Name>EnableOption</a:Name>
<a:Comment>Physical options allowed  YES/NO</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TargetCategory Id="o116">
<a:Name>Reference</a:Name>
<a:Code>REFR</a:Code>
<a:Comment>The following system variables are available:
   &quot;REFR&quot;         // generated code of the reference
   &quot;REFNAME&quot;      // reference name
   &quot;PARENT&quot;       // generated code of the parent table
   &quot;PNAME&quot;        // name of the parent table
   &quot;PCODE&quot;        // code of the parent table
   &quot;CHILD&quot;        // generated code of the reference
   &quot;CNAME&quot;        // name of the child table
   &quot;CCODE&quot;        // code of the child table
   &quot;PQUALIFIER&quot;   // qualifier of the parent table. See QUALIFIER
   &quot;CQUALIFIER&quot;   // qualifier of the child table. See QUALIFIER
   &quot;REFRNAME&quot;     // Reference name
   &quot;REFRCODE&quot;     // Reference code
   &quot;FKCONSTRAINT&quot; // Reference constraint name (foreign key)
   &quot;PKCONSTRAINT&quot; // constraint name of the parent key used to reference object
   &quot;CKEYCOLUMNS&quot;  // list of parent key columns. Eg: C1, C2, C3
   &quot;FKEYCOLUMNS&quot;  // list of child foreign key columns. Eg:
   &quot;UPDCONST&quot;     // Update declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;DELCONST&quot;     // Delete declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;MINCARD&quot;      // Min cardinality
   &quot;MAXCARD&quot;      // Max cardinality
   &quot;POWNER&quot;       // Parent table owner
   &quot;COWNER&quot;       // child table owner
   &quot;CHCKONCMMT&quot;   // TRUE when check on commit is selected on the reference (ASA 6.0 specific)

For reference joins (couple of column in a reference),
the following system variables are available:
   &quot;CKEYCOLUMN&quot;   // generated code of the parent table column (primary key)
   &quot;FKEYCOLUMN&quot;   // generated code of the child table column (foreign key)
   &quot;PK&quot;           // primary key column generated code
   &quot;PKNAME&quot;       // primary key column name
   &quot;FK&quot;           // foreign key column generated code
   &quot;FKNAME&quot;       // foreign key column name
   &quot;AK&quot;           // alternate key column code (same as PK)
   &quot;AKNAME&quot;       // alternate key column name (same as PKNAME)
   &quot;COLTYPE&quot;      // primary column column datatype
   &quot;DEFAULT&quot;      // foreign key column default value
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o117">
<a:Name>Enable</a:Name>
<a:Comment>Foreign key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o118">
<a:Name>EnablefKeyName</a:Name>
<a:Comment>Foreign key role allowed in database generation</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o119">
<a:Name>FKAutoIndex</a:Name>
<a:Comment>Foreign key is auto-indexed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o120">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>FK_%.U8:CHILD%_%.U9:REFR%_%.U8:PARENT%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for foreign keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o121">
<a:Name>CheckOnCommit</a:Name>
<a:TextTargetItem.Value>CHECK ON COMMIT</a:TextTargetItem.Value>
<a:Comment>Referential integrity test differed after the COMMIT</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o122">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>foreign key %CONSTNAME% (%FKEYCOLUMNS%)
      references [%PQUALIFIER%]%PARENT%[ (%CKEYCOLUMNS%)]
     [ on delete %DELCONST%][ on update %UPDCONST%]</a:TextTargetItem.Value>
<a:Comment>Command for defining a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o123">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add foreign key %CONSTNAME% (%FKEYCOLUMNS%)
      references [%PQUALIFIER%]%PARENT%[ (%CKEYCOLUMNS%)]
     [ on delete %DELCONST%][ on update %UPDCONST%]</a:TextTargetItem.Value>
<a:Comment>Command for adding a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o124">
<a:Name>DclUpdIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for update</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o125">
<a:Name>DclDelIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for delete</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o126">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.sysforeignkey where role=%.q:CONSTNAME%) then
    alter table [%QUALIFIER%]%TABLE%
       delete foreign key %CONSTNAME%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o127">
<a:Name>SqlListChildrenQuery</a:Name>
<a:TextTargetItem.Value>{FKEYCOLUMN, CKEYCOLUMN}

select
   c.column_name,
   p.column_name
from
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.sysforeignkey f on (f.foreign_table_id=t.table_id)
      join sys.sysfkcol r on (
         r.foreign_table_id=f.foreign_table_id and
         r.foreign_key_id=f.foreign_key_id)
      join sys.syscolumn c on (
         c.table_id=f.foreign_table_id and
         c.column_id=r.foreign_column_id)
      join sys.syscolumn p on (
         p.table_id=f.primary_table_id and
         p.column_id=r.primary_column_id)
where 
   f.role=%.q:FKCONSTRAINT%
[  and t.table_name=%.q:CHILD%]
[  and u.user_name=%.q:COWNER%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to list reference joins</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o128">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{COWNER, CHILD, FKCONSTRAINT, POWNER, PARENT}

select
   cu.user_name,
   ct.table_name,
   fk.role,
   pu.user_name,
   pt.table_name
from
   sys.sysuserperms cu
      join sys.systable ct on (ct.creator=cu.user_id)
      join sys.sysforeignkey fk on (fk.foreign_table_id=ct.table_id)
      join sys.systable pt on (pt.table_id=fk.primary_table_id)
      join sys.sysuserperms pu on (pu.user_id=pt.creator)
where 1=1
[  and cu.user_name=%.q:SCHEMA%]
[  and ct.table_name=%.q:TABLE%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o129">
<a:Name>PKey</a:Name>
<a:Code>PKEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o130">
<a:Name>Enable</a:Name>
<a:Comment>Primary key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o131">
<a:Name>PkAutoIndex</a:Name>
<a:Comment>Primary key is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o132">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>PK_%.U27:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for primary keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o133">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for defining a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o134">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for adding a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o135">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete primary key</a:TextTargetItem.Value>
<a:Comment>Command for dropping a primary key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o136">
<a:Name>Key</a:Name>
<a:Code>KEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;COLUMNS&quot;      // List of columns of the key. Eg: &quot;A, B, C&quot;
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o137">
<a:Name>Enable</a:Name>
<a:Comment>UNIQUE constraint allowed for tables</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o138">
<a:Name>UniqConstAutoIndex</a:Name>
<a:Comment>UNIQUE constraint is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o139">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>AK_%.U18:AKEY%_%.U8:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for alternate keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o140">
<a:Name>SqlAkeyIndex</a:Name>
<a:TextTargetItem.Value>select distinct I.INDEX_NAME
from SYSINDEX I, SYSUSERPERMS U, SYSTABLE T
where I.&quot;UNIQUE&quot; = &#39;U&#39; and I.TABLE_ID = T.TABLE_ID and
      T.TABLE_NAME = %.q:TABLE% and T.CREATOR = U.USER_ID and U.USER_NAME = %.q:USER%</a:TextTargetItem.Value>
<a:Comment>SQL query to obtain the alternate key indexes of a table by ODBC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o141">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   delete unique (%COLNLIST%)</a:TextTargetItem.Value>
<a:Comment>Command for dropping an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o142">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>unique (%COLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for defining an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o143">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add unique (%COLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for adding an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o144">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER ID, TABLE ID, ISPKEY ID, CONSTNAME ID, COLUMNS ...}

select
   u.user_name,
   t.table_name,
   1,
   string(t.table_name, &#39;_PK&#39;),
   string(c.column_name, &#39;,&#39;),
   c.column_id
from
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.syscolumn c on (c.table_id=t.table_id)
where
   t.primary_root != 0
   and c.pkey in (&#39;Y&#39;, &#39;M&#39;)
[  and t.table_name=%.q:TABLE%]
[  and u.user_name=%.q:OWNER%]
union select
   u.user_name,
   t.table_name,
   0,
   string(t.table_name, &#39;_K&#39;, i.index_id),
   string(c.column_name, &#39;,&#39;),
   x.sequence
from
   sys.sysuserperms u
      join sys.systable t on (t.creator=u.user_id)
      join sys.sysindex i on (i.table_id=t.table_id)
      join sys.sysixcol x on (x.index_id=i.index_id and x.table_id=i.table_id)
      join sys.syscolumn c on (c.column_id=x.column_id and c.table_id=x.table_id)
where
   i.&quot;unique&quot; = &#39;U&#39;
   and i.index_type = &#39;SA&#39;
[  and t.table_name=%.q:TABLE%]
[  and u.user_name=%.q:OWNER%]
order by
   1, 2, 3 desc, 4, 6
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o145">
<a:Name>Permission</a:Name>
<a:Code>PERM</a:Code>
<a:Comment>Manages the permissions on database objects</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o146">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant %PERMLIST% on [%QUALIFIER%]%OBJECT% to %GRANTEE% [%GRANTOPTION%]

</a:TextTargetItem.Value>
<a:Comment>Command for granting permissions.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o147">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>revoke %REVPERMLIST% on [%QUALIFIER%]%OBJECT% from %GRANTEE%</a:TextTargetItem.Value>
<a:Comment>Command for revoking permissions.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o148">
<a:Name>GrantOption</a:Name>
<a:TextTargetItem.Value>with grant option</a:TextTargetItem.Value>
<a:Comment>Option for the grant statement.</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o149">
<a:Name>Abstract Data Type</a:Name>
<a:Code>ADT</a:Code>
<a:Comment>The following system variables are available:
   &quot;ADT&quot;          // generated code of the abstract data type
   &quot;TYPE&quot;         // ADT type
   &quot;SIZE&quot;         // ADT size
   &quot;FILE&quot;         // ADT: Java file
   &quot;ISARRAY&quot;      // ADT: is an array?
   &quot;ISLIST&quot;       // ADT: is a list?
   &quot;ISSTRUCT&quot;     // ADT: is a structure?
   &quot;ISOBJECT&quot;     // ADT: is an object?
   &quot;ISJAVA&quot;       // ADT: is a JAVA class?
   &quot;ADTDEF&quot;       // ADT definition
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o150">
<a:Name>Enable</a:Name>
<a:Comment>Abstract Data Types allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o151">
<a:Name>EnableAdtOnDomn</a:Name>
<a:Comment>Abstract Data Types allowed on domain</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o152">
<a:Name>EnableAdtOnColn</a:Name>
<a:Comment>Abstract Data Types allowed on column</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o153">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, ADT, TYPE}

select
   u.user_name,
   t.type_name,
   &#39;JAVA&#39;
from
   sys.sysusertype t,
   sys.sysuserperms u
where
   t.domain_id in (25, 26)
   and t.creator = u.user_id
[  and u.user_name = %.q:SCHEMA%]
order by 1,2</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o154">
<a:Name>Install</a:Name>
<a:TextTargetItem.Value>install JAVA UPDATE from file %.q:FILE%</a:TextTargetItem.Value>
<a:Comment>Command for installing an abstract data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o155">
<a:Name>Remove</a:Name>
<a:TextTargetItem.Value>remove JAVA class %ADT%</a:TextTargetItem.Value>
<a:Comment>Command for uninstalling an abstract data type</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o156">
<a:Name>Privilege</a:Name>
<a:Comment>Manages the system privileges for a user, role or group</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o157">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant %PRIVLIST% to %USER%
</a:TextTargetItem.Value>
<a:Comment>Command for granting privileges.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o158">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>revoke %REVPRIVLIST% from %USER%</a:TextTargetItem.Value>
<a:Comment>Command for revoking privileges.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o159">
<a:Name>System</a:Name>
<a:TextTargetItem.Value>DBA
RESOURCE
ALL</a:TextTargetItem.Value>
<a:Comment>List of system privileges</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o160">
<a:Name>Domain</a:Name>
<a:Code>PDMDOMN</a:Code>
<a:Comment>The following system variables are available:
   &quot;DOMAIN&quot;       // generated code of the domain (also available for columns)
SQL Server specific domain system variables:
   &quot;RULENAME&quot;     // name of the rule object associated with the domain
   &quot;DEFAULTNAME&quot;  // name of the default object associated with the domain
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o161">
<a:Name>Enable</a:Name>
<a:Comment>User defined data types allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o162">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o163">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create domain %DOMAIN% %DATATYPE% [%NOTNULL%][%NULL%]
</a:TextTargetItem.Value>
<a:Comment>Command for creating a user defined data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o164">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from systypes where name=%.q:DOMAIN%) then
   drop domain %DOMAIN%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a user defined data type</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o165">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{DOMAIN, DTTPCODE, LENGTH, PREC, CONSTRAINT}

select
   d.type_name,
   t.domain_name,
   d.width,
   d.scale,
   d.&quot;check&quot;
from
   sys.sysusertype d,
   sys.sysdomain t
where
   d.domain_id=t.domain_id
   and d.domain_id not in (25, 26)
   and creator &lt;&gt; 0
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o166">
<a:Name>Tablespace</a:Name>
<a:Code>TSPC</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLESPACE&quot;   // generated code of the tablespace
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o167">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create dbspace %TABLESPACE%
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a tablespace. Example: create tablespace %TABLESPACE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o168">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop dbspace %TABLESPACE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a tablespace. Example: drop tablespace %TABLESPACE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o169">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>as %s : squoted=yes
&lt;store&gt; %s : default=iq store, list=iq store|iq temporary store|catalog store
size %d</a:TextTargetItem.Value>
<a:Comment>Default options for creating a tablespace.</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o170">
<a:Name>Enable</a:Name>
<a:Comment>Tablespace allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o171">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{TABLESPACE, OPTIONS}

select
   f.dbspace_name,
   &#39;as &#39;&#39;&#39;+f.file_name+&#39;&#39;&#39;&#39;
   + case (store_type) when &#39;SA&#39; then &#39; catalog store&#39; when &#39;IQ&#39; then &#39; iq store&#39; else &#39;&#39; end
from
   sys.sysfile f
where
   f.dbspace_name != &#39;SYSTEM&#39;
order by
   f.dbspace_name
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o172">
<a:Name>Storage</a:Name>
<a:Code>STOR</a:Code>
<a:Comment>The following system variables are available:
   &quot;STORAGE&quot;      // generated code of the storage
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o173">
<a:Name>Enable</a:Name>
<a:Comment>Storage allowed</a:Comment>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o174">
<a:Name>Database</a:Name>
<a:Code>DTBS</a:Code>
<a:Comment>The following system variables are available:
   &quot;DATABASE&quot;     // generated code of the database
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o175">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create database &#39;%DATABASE%.db&#39;
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a database. Example: create database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o176">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>transaction
log off
log on %s : composite=yes
{
   mirror %s : squoted=yes
}
case %s : default=respect, list=respect|ignore
page size %d : default=4096, list=1024|2048|4096|8192|16384|32768
collation %s :default= &#39;ISO_BINENG&#39;
blank padding %s : list=on|off, default=on
java %s : list=on|off, default=on
jconnect %s : list=on|off, default=on
iq path %s
iq size %d :default=8
iq page size %d : default=131072, list=65536|131072|262144|524288 
block size %d : , list=4096|8192|16384|32768
message path %s : squoted=yes
temporary path %s : squoted=yes
temporary size %d :default=4</a:TextTargetItem.Value>
<a:Comment>Available options for creating a database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o177">
<a:Name>OpenDatabase</a:Name>
<a:TextTargetItem.Value>start database %DATABASE%;
connect database %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for opening a database. Example: open database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o178">
<a:Name>CloseDatabase</a:Name>
<a:TextTargetItem.Value>disconnect</a:TextTargetItem.Value>
<a:Comment>Command for closing a database. Example: close database</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o179">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop database &#39;%DATABASE%.db&#39;</a:TextTargetItem.Value>
<a:Comment>Command for dropping a database. Example: drop database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o180">
<a:Name>Enable</a:Name>
<a:Comment>Database allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o181">
<a:Name>View</a:Name>
<a:Code>VIEW</a:Code>
<a:Comment>The following system variables are available:
   &quot;VIEW&quot;         // generated code of the view
   &quot;VIEWNAME&quot;     // view name
   &quot;VIEWCODE&quot;     // view code
   &quot;VIEWCOLN&quot;     // List of columns of the view. Eg: &quot;A, B, C&quot;
   &quot;SQL&quot;          // SQL text of the view. Eg: Select * from T1
   &quot;VIEWCHECK&quot;    // Keyword &quot;with check option&quot; if selected on the view
   &quot;SCRIPT&quot;       // complete view creation order. Eg: create view V1 as select * from T1
</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o182">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create view [%QUALIFIER%]%VIEW% [(%VIEWCOLN%) ]as
%SQL%</a:TextTargetItem.Value>
<a:Comment>Command for creating a view. Example: create view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o183">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.systable where table_name=%.q:VIEW% and table_type=&#39;VIEW&#39;) then
   drop view [%QUALIFIER%]%VIEW%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a view. Example: drop view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o184">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a view.
The first column is the SQL name of permission (eg: SELECT)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>DELETE=Delete
INSERT=Ins
UPDATE=Upd</a:MapTargetItem.Value>
<a:List>DELETE
INSERT
UPDATE
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o185">
<a:Name>ViewComment</a:Name>
<a:TextTargetItem.Value>comment on view [%QUALIFIER%]%VIEW% is 
%.q:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a view comment.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o186">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE ID, PERMISSION ...}

select 
u1.user_name grantee,
case 
when (p.insertauth = &#39;Y&#39;) then &#39;INSERT&#39; 
when (p.insertauth = &#39;G&#39;) then &#39;INSERT+&#39; 
end + &#39;,&#39; ||
case 
when (p.deleteauth = &#39;Y&#39;) then &#39;DELETE&#39; 
when (p.deleteauth = &#39;G&#39;) then &#39;DELETE+&#39; 
end + &#39;,&#39; ||
case 
when (p.updateauth = &#39;Y&#39;) then &#39;UPDATE&#39; 
when (p.updateauth = &#39;G&#39;) then &#39;UPDATE+&#39; 
end
from sysuserperms u, sysuserperms u1, systable s, systableperm p
where 
s.table_type = &#39;VIEW&#39; and
(s.table_name = %.q:VIEW% ) and
[ (s.creator = u.user_id) and (u.user_name = %.q:OWNER% ) and ]
(s.table_id = p.stable_id) and
(u1.user_id = p.grantee)</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o187">
<a:Name>ViewCheck</a:Name>
<a:TextTargetItem.Value>with check option</a:TextTargetItem.Value>
<a:Comment>Option for checking a view</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o188">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, VIEW, SCRIPT}

select
   u.user_name,
   t.table_name,
   t.view_def
from
   sys.sysuserperms u,
   sys.systable t
where
   t.creator=u.user_id
   and t.table_type=&#39;VIEW&#39;
[  and u.user_name=%.q:OWNER%]
[  and t.table_name=%.q:VIEW%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o189">
<a:Name>Join Index</a:Name>
<a:Code>JIDX</a:Code>
<a:Comment>The following system variables are available:
   &quot;JIDX&quot;         // generated code for join index
   &quot;JIDXDEFN&quot;     // complete body of join index definition
   &quot;REFRLIST&quot;     // list of references (for ODBC)
   &quot;RFJNLIST&quot;     // list of reference joins (for ODBC)
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o190">
<a:Name>Enable</a:Name>
<a:Comment>Join index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o191">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o192">
<a:Name>Options</a:Name>
<a:Comment>Available options for creating a join index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o193">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(
   select 1 from sys.sysiqjoinindex 
   where joinindex_name=&#39;%JIDX%&#39;[%QUALIFIER%?
   and creator=user_id(%.q:OWNER%)]
) then
   drop join index [%QUALIFIER%]%JIDX%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a join index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o194">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create join index [%QUALIFIER%]%JIDX% for
%JIDXDEFN%</a:TextTargetItem.Value>
<a:Comment>Command for creating a join index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o195">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{JIDX ID, OWNER ID, REFRLIST ...}
SELECT j.joinindex_name, u.user_name, ltu.user_name || &#39;.&#39; || lt.table_name || &#39;,&#39; || rtu.user_name || &#39;.&#39; || rt.table_name || &#39;,&#39;
FROM sysiqjoinindex j, sysuserperms u, sysiqjoinixcolumn jc, systable lt, systable rt, sys.sysuserperms ltu, sys.sysuserperms rtu
WHERE j.joinindex_id = jc.joinindex_id
AND j.creator = u.user_id
AND jc.left_table_id = lt.table_id AND jc.right_table_id = rt.table_id
AND ltu.user_id = lt.creator AND rtu.user_id = rt.creator
[AND u.user_name= %.q:OWNER%]
ORDER BY joinindex_name</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o196">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{JIDX ID, OWNER ID, RFJNLIST ...}
SELECT j.joinindex_name, u.user_name, ltu.user_name || &#39;.&#39; || lt.table_name || &#39;.&#39; || lc.column_name || &#39;=&#39; || rtu.user_name || &#39;.&#39; || rt.table_name || &#39;.&#39; || rc.column_name || &#39;,&#39;
FROM sysiqjoinindex j, sysuserperms u, sysiqjoinixcolumn jc, systable lt, systable rt, syscolumn lc, syscolumn rc, sys.sysuserperms ltu, sys.sysuserperms rtu
WHERE j.joinindex_id = jc.joinindex_id
AND j.creator = u.user_id
AND jc.left_table_id = lt.table_id AND jc.right_table_id = rt.table_id
AND jc.left_column_id = lc.column_id AND jc.right_column_id = rc.column_id
AND lc.table_id = lt.table_id AND rc.table_id = rt.table_id
AND ltu.user_id = lt.creator AND rtu.user_id = rt.creator
[AND u.user_name= %.q:OWNER%]
ORDER BY joinindex_name</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o197">
<a:Name>EnableOwner</a:Name>
<a:Comment>Owner allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o198">
<a:Name>Procedure</a:Name>
<a:Code>PROC</a:Code>
<a:Comment>The following system variables are available:
   &quot;PROC&quot;         // generated code of the procedure (also available for trigger when the trigger is implemented with a procedure)
   &quot;FUNC&quot;         // generated code of the procedure if the procedure is a function (with return value)
   &quot;PROCPRMS&quot;     // list of parameters of the procedure (also available for function)
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o199">
<a:Name>Enable</a:Name>
<a:Comment>Procedure allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o200">
<a:Name>EnableFunc</a:Name>
<a:Comment>Function allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o201">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o202">
<a:Name>MaxFuncLen</a:Name>
<a:Comment>Function name length</a:Comment>
<a:IntegerTargetItem.Value>128</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o203">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.sysprocedure where proc_name = %.q:PROC%[ and user_name(creator)=%.q:OWNER%]) then
   drop procedure [%QUALIFIER%]%PROC%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a procedure. Example: drop procedure %PROC%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o204">
<a:Name>DropFunc</a:Name>
<a:TextTargetItem.Value>if exists(select 1 from sys.sysprocedure where proc_name = %.q:FUNC% and user_name(creator)=%.q:OWNER%) then
   drop function [%QUALIFIER%]%FUNC%
end if</a:TextTargetItem.Value>
<a:Comment>Command for dropping a function. Example: drop function %FUNC%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o205">
<a:Name>CustomProc</a:Name>
<a:TextTargetItem.Value>create procedure [%QUALIFIER%]%PROC% (IN &lt;arg&gt; &lt;type&gt;)
external name &lt;library-call&gt; [language java]
dynamic result sets &lt;integer-expression&gt;
result &lt;( result-column , ... )&gt;
on exception resume
at &lt;location_string&gt;
begin

end</a:TextTargetItem.Value>
<a:Comment>Command for creating a stored procedure</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o206">
<a:Name>CustomFunc</a:Name>
<a:TextTargetItem.Value>create function [%QUALIFIER%]%FUNC% (&lt;arg&gt; &lt;type&gt;)
returns &lt;type&gt;
external name &lt;library-call&gt; [language java]
on exception resume
begin

end</a:TextTargetItem.Value>
<a:Comment>Command for creating a function</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o207">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, PROC, FUNC}

select
   u.user_name,
   if (patindex(&#39;%procedure%&#39;, lcase(p.proc_defn)) &lt; patindex(&#39;%&#39;+lcase(p.proc_name)+&#39;%&#39;, lcase(p.proc_defn)) and
      patindex(&#39;%procedure%&#39;, lcase(p.proc_defn)) &gt; patindex(&#39;%create%&#39;, lcase(p.proc_defn)) ) then p.proc_name else &#39;&#39;
   endif,
   if (patindex(&#39;%function%&#39;, lcase(p.proc_defn)) &lt; patindex(&#39;%&#39;+lcase(p.proc_name)+&#39;%&#39;, lcase(p.proc_defn)) and
      patindex(&#39;%function%&#39;, lcase(p.proc_defn)) &gt; patindex(&#39;%create%&#39;, lcase(p.proc_defn)) ) then p.proc_name else &#39;&#39;
   endif
from
   sys.sysuserperms u
      join sys.sysprocedure p on (p.creator=u.user_id)
[where  u.user_name=%.q:SCHEMA%]
order by 1,2
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o208">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, PROC, SCRIPT, @OBJTLABL}

select
   u.user_name,
   p.proc_name,
   p.proc_defn,
   p.remarks
from
   sys.sysuserperms u
      join sys.sysprocedure p on (p.creator=u.user_id)
where 1=1
[  and u.user_name=%.q:OWNER%]
[  and p.proc_name=%.q:PROC%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o209">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a procedure.
The first column is the SQL name of permission (eg: EXECUTE)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>EXECUTE=Exec</a:MapTargetItem.Value>
<a:List>EXECUTE
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o210">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create procedure [%QUALIFIER%]%PROC%[%PROCPRMS%?([%PROCPRMS%])]
%TRGDEFN%</a:TextTargetItem.Value>
<a:Comment>Command for creating a procedure. Example: create procedure %PROC% %TRGDEFN%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o211">
<a:Name>CreateFunc</a:Name>
<a:TextTargetItem.Value>create function [%QUALIFIER%]%FUNC%[%PROCPRMS%?([%PROCPRMS%])]
%TRGDEFN%</a:TextTargetItem.Value>
<a:Comment>Command for creating a function. Example: create function %FUNC% %TRGDEFN%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o212">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE, PERMISSION}

select 
u.user_name grantee, &#39;EXECUTE&#39;
from sysuserperms u, sysprocedure s, sysprocperm p
where 
(s.proc_name = %.q:PROC% ) and
(s.proc_id = p.proc_id) and
(u.user_id = p.grantee)</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o213">
<a:Name>DataType</a:Name>
<a:Comment>Contains data type translation entries. These entries list the correspondence between internal data types and the target database data types</a:Comment>
<c:Categories>
<o:MapTargetItem Id="o214">
<a:Name>AmcdDataType</a:Name>
<a:Comment>Data types translation table from internal data types to target database data types.
        %n is the length of the data type
        %s is the size of the data type
        %p is the precision of the data type</a:Comment>
<a:MapTargetItem.Value>&lt;UNDEF&gt;=&lt;Undefined&gt;
A%n=char(%n)
VA%n=varchar(%n)
LA=varchar
LA%n=varchar(%n)
LVA=varchar
LVA%n=varchar
BT=tinyint
BT%n=tinyint
SI=smallint
I=integer
LI=bigint
N=numeric
N%n=numeric(%n)
N%s,%p=numeric(%s,%p)
DC=decimal
DC%n=decimal(%n)
DC%s,%p=decimal(%s,%p)
SF=real
F=float
F%n=float(%n)
LF=double
MN=numeric(8,2)
MN%n=numeric(%n)
MN%s,%p=numeric(%s,%p)
D=date
T=time
DT=datetime
TS=timestamp
BL=bit
NO=integer
NO%n=integer
BIN=binary
BIN%n=binary(%n)
LBIN=varbinary
LBIN%n=varbinary(%n)
TXT=varchar
TXT%n=varchar(%n)
MBT=char
MBT%n=char(%n)
VMBT=varchar(255)
VMBT%n=varchar(%n)
PIC=varbinary
PIC%n=varbinary(%n)
BMP=varbinary
BMP%n=varbinary(%n)
OLE=varbinary
OLE%n=varbinary(%n)
*=char(10)</a:MapTargetItem.Value>
<a:List>&lt;UNDEF&gt;
A%n
VA%n
LA
LA%n
LVA
LVA%n
BT
BT%n
SI
I
LI
N
N%n
N%s,%p
DC
DC%n
DC%s,%p
SF
F
F%n
LF
MN
MN%n
MN%s,%p
D
T
DT
TS
BL
NO
NO%n
BIN
BIN%n
LBIN
LBIN%n
TXT
TXT%n
MBT
MBT%n
VMBT
VMBT%n
PIC
PIC%n
BMP
BMP%n
OLE
OLE%n
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o215">
<a:Name>PhysDataType</a:Name>
<a:Comment>Data types translation table from target database data types to internal data types.</a:Comment>
<a:MapTargetItem.Value>&lt;Undefined&gt;=&lt;UNDEF&gt;
char=A
char(%n)=A%n
character=A
character(%n)=A%n
character varying=VA
character varying(%n)=VA%n
varchar=VA
varchar(%n)=VA%n
bigint=LI
unsigned bigint=LI
int=I
unsigned int=I
integer=I
unsigned integer=I
smallint=SI
tinyint=BT
decimal=DC
decimal(%n)=DC%n
decimal(%s,%p)=DC%s,%p
numeric=N
numeric(%n)=N%n
numeric(%s,%p)=N%s,%p
double=LF
float=F
float(%n)=F%n
real=SF
binary=BIN
binary(%n)=BIN%n
varbinary=LBIN
varbinary(%n)=LBIN%n
long binary=LBIN
bit=BL
date=D
datetime=DT
smalldatetime=DT
time=T
timestamp=TS</a:MapTargetItem.Value>
<a:List>&lt;Undefined&gt;
char
char(%n)
character
character(%n)
character varying
character varying(%n)
varchar
varchar(%n)
bigint
unsigned bigint
int
unsigned int
integer
unsigned integer
smallint
tinyint
decimal
decimal(%n)
decimal(%s,%p)
numeric
numeric(%n)
numeric(%s,%p)
double
float
float(%n)
real
binary
binary(%n)
varbinary
varbinary(%n)
long binary
bit
date
datetime
smalldatetime
time
timestamp
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o216">
<a:Name>PhysDttpSize</a:Name>
<a:Comment>Table of storage sizes of target database data type</a:Comment>
<a:MapTargetItem.Value>numeric=18
decimal=18
time=8
timestamp=8</a:MapTargetItem.Value>
<a:List>numeric
decimal
time
timestamp
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o217">
<a:Name>OdbcPhysDataType</a:Name>
<a:Comment>Data types translation table from ODBC data types to target database data types.</a:Comment>
<a:MapTargetItem.Value>char(1)=char
binary(1)=binary</a:MapTargetItem.Value>
<a:List>char(1)
binary(1)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o218">
<a:Name>PhysLogADTType</a:Name>
<a:Comment>Abstract Data types translation table from target database abstract data types to internal abstract data types.</a:Comment>
<a:MapTargetItem.Value>Java=Java</a:MapTargetItem.Value>
<a:List>Java
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o219">
<a:Name>LogPhysADTType</a:Name>
<a:Comment>Abstract Data types translation table from internal abstract data types to target database abstract data types.</a:Comment>
<a:MapTargetItem.Value>Array=&lt;Undefined&gt;
List=&lt;Undefined&gt;
Java=Java
Object=&lt;Undefined&gt;
Structured=&lt;Undefined&gt;</a:MapTargetItem.Value>
<a:List>Array
List
Java
Object
Structured
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o220">
<a:Name>AllowedADT</a:Name>
<a:TextTargetItem.Value>Java</a:TextTargetItem.Value>
<a:Comment>The list of ADT which can be used as the datatype of a domain or column</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o221">
<a:Name>PhysOdbcDataType</a:Name>
<a:Comment>Data types translation table from target database data types to ODBC data types.</a:Comment>
<a:MapTargetItem.Value>int=integer
character varying=varchar
character varying(%n)=varchar(%n)
decimal=decimal(126,38)
numeric=numeric(126,38)</a:MapTargetItem.Value>
<a:List>int
character varying
character varying(%n)
decimal
numeric
</a:List>
</o:MapTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:ProfileTargetItem Id="o222">
<a:Name>Profile</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o223">
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TargetCategory>
<o:MetaClassTargetItem Id="o224">
<a:Name>Column</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o225">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o226">
<a:ObjectID>F8CDDBDD-AC84-4EBC-8A1B-415362B51B6A</a:ObjectID>
<a:Name>ExtIqUnicity</a:Name>
<a:Comment>Defines the cardinality of the column, it is used to optimize the indexes internally.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>10</a:ExtendedAttributeTargetItem.DataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o227">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:Name>Forms</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o228">
<a:Name>Sybase</a:Name>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Attribute=&quot;ExtIqUnicity&quot; AttributeID=&quot;{F8CDDBDD-AC84-4EBC-8A1B-415362B51B6A}&quot; Name=&quot;ExtIqUnicity&quot; Caption=&quot;Cardinality (Iq unique)&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o229">
<a:Name>Index</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o230">
<a:TypePublicName>CustomCheckTargetItem</a:TypePublicName>
<a:Name>Custom Checks</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CustomCheckTargetItem Id="o231">
<a:Name>Varchar Index Type</a:Name>
<a:Comment>cannot create an LF, HG, CMP, or HNG index for varchar columns longer than 255 characters
</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensures that index type is compliant with its column datatype.</a:HelpMessage>
<a:OutputMessage>The following LF, HG, CMP, or HNG indexes are defined on a too long varchar column:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   Dim c &#39;temporary  index column
   Dim col &#39;temporary column
   if obj.type = &quot;LF&quot; or obj.type = &quot;HG&quot; or obj.type = &quot;CMP&quot; or obj.type =&quot;HNG&quot; then
      for each c in obj.indexcolumns
         set col = c.column
         if ((UCaseDttp(col) = &quot;VARCHAR&quot;) and (col.length &gt; 255)) then
            %Check% = False
            exit function
         end if
      next
   end if
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o232">
<a:Name>Float Index Type</a:Name>
<a:Comment>cannot create an HNG index on column with FLOAT, REAL, or DOUBLE data type
cannot create a CMP index on column with FLOAT or DOUBLE data type
</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensures that index type is compliant with its column datatype.
HNG indexes must not be defined with FLOAT, REAL, or DOUBLE columns
CMP indexes must not be defined with FLOAT, or DOUBLE columns</a:HelpMessage>
<a:OutputMessage>The following HNG or CMP indexes are defined with a float column:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   Dim c &#39;temporary  index column
   if obj.type = &quot;HNG&quot; then
      for each c in obj.indexcolumns
         select case (UCaseDttp(c.column))
         case &quot;FLOAT&quot;, &quot;REAL&quot;, &quot;DOUBLE&quot; :
            %Check% = False
            exit function
         end select
      next
   end if
   if obj.type = &quot;CMP&quot; then
      for each c in obj.indexcolumns
         select case (UCaseDttp(c.column))
         case &quot;FLOAT&quot;, &quot;DOUBLE&quot; :
            %Check% = False
            exit function
         end select
      next
   end if
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o233">
<a:Name>Date Index Type</a:Name>
<a:Comment>DATE index only supports Date data type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>A DATE index can only be used on Date columns.</a:HelpMessage>
<a:OutputMessage>The following DATE indexes are not defined with a date column:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   Dim c &#39;temporary  index column
   Dim col &#39;temporary column
   if obj.type = &quot;DATE&quot; then
      for each c in obj.indexcolumns
         set col = c.column
         if (UCaseDttp(col) &lt;&gt; &quot;DATE&quot; ) then
            %Check% = False
            exit function
         end if
      next
   end if
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you which
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o234">
<a:Name>DateTime Index Type</a:Name>
<a:Comment>DTTM index only supports Datetime or Timestamp data type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>A DTTM index can only be used on Datetime and Timestamp columns.</a:HelpMessage>
<a:OutputMessage>The following DTTM indexes are not defined with a datetime or timestamp column:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   Dim c &#39;temporary  index column
   Dim col &#39;temporary column
   if obj.type = &quot;DTTM&quot; then
      for each c in obj.indexcolumns
         set col = c.column
         if (UCaseDttp(col) &lt;&gt; &quot;DATETIME&quot; and UCaseDttp(col) &lt;&gt; &quot;TIMESTAMP&quot; and UCaseDttp(col) &lt;&gt; &quot;SMALLDATETIME&quot;) then
            %Check% = False
            exit function
         end if
      next
   end if
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you which
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o235">
<a:Name>Binary Index Type</a:Name>
<a:Comment>cannot create a HNG and LF index on column with BINARY or VARBINARY data type
</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>A LF or HNG index cannot be defined on a binary column</a:HelpMessage>
<a:OutputMessage>The following LF or HNG indexes are defined on a binary column:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   Dim c &#39;temporary  index column
   if obj.type = &quot;HNG&quot; or obj.type = &quot;LF&quot; then
      for each c in obj.indexcolumns
         select case (UCaseDttp(c.column))
         case &quot;BINARY&quot;, &quot;VARBINARY&quot; :
            %Check% = False
            exit function
         end select
      next
   end if
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o236">
<a:Name>Bit Index Type</a:Name>
<a:Comment>Cannot create index with column Bit data type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>An index cannot be defined on a bit column</a:HelpMessage>
<a:OutputMessage>The following index have columns with bit datatype:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   Dim c &#39;temporary  index column
   for each c in obj.indexcolumns
      select case (UCaseDttp(c.column))
      case &quot;BIT&quot; :
         %Check% = False
         exit function
      end select
   next
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o237">
<a:Name>Unique Index Type</a:Name>
<a:Comment>cannot specify the UNIQUE attribute with the DATE, TIME, DTTM, CMP, HNG or WD index types
</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>DATE, TIME, DTTM, CMP, HNG and WD indexes can not be unique</a:HelpMessage>
<a:OutputMessage>The following unique index have DATE, TIME, DTTM, CMP, HNG or WD type:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   select case (obj.type)
   case &quot;HNG&quot;, &quot;CMP&quot; , &quot;WD&quot;, &quot;DATE&quot;, &quot;TIME&quot;, &quot;DTTM&quot; :
      if obj.unique then
         %Check% = False
         exit function
      end if
   end select
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o238">
<a:Name>Time Index Type</a:Name>
<a:Comment>TIME index only supports Time data type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>A TIME index can only be used on Time columns.</a:HelpMessage>
<a:OutputMessage>The following TIME indexes are not defined with a time column:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   Dim c &#39;temporary  index column
   Dim col &#39;temporary column
   if obj.type = &quot;TIME&quot; then
      for each c in obj.indexcolumns
         set col = c.column
         if (UCaseDttp(col) &lt;&gt; &quot;TIME&quot; ) then
            %Check% = False
            exit function
         end if
      next
   end if
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you which
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o239">
<a:Name>Multiple Column Type</a:Name>
<a:Comment>No LF, WD, HNG, DATE, TIME or DTTM indexes may be created with multiple columns.
</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>A LF, WD, HNG, DATE, TIME or DTTM index must contain one and only one column.</a:HelpMessage>
<a:OutputMessage>The following LF, WD, HNG, DATE, TIME or DTTM indexes have more than one column:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   select case (obj.type)
   case &quot;HNG&quot;, &quot;LF&quot; , &quot;WD&quot;, &quot;DATE&quot;, &quot;TIME&quot;, &quot;DTTM&quot; :
      if obj.indexcolumns.count &gt; 1 then
         %Check% = False
         exit function
      end if
   end select
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
<o:CustomCheckTargetItem Id="o240">
<a:Name>Options Index Type</a:Name>
<a:Comment>The &quot;delimited by&quot; and &quot;limit&quot; physical options clause can only be used with WD index type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>Only WD indexes can have &quot;delimited by&quot; or &quot;limit&quot; defined in their physical options</a:HelpMessage>
<a:OutputMessage>The following indexes have incompatible physical options:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   if not obj.type = &quot;WD&quot; then
      If (InStr(lcase(obj.Physicaloptions), &quot;delimited by&quot;) + InStr(lcase(obj.Physicaloptions), &quot;limit &quot;) &lt;&gt; 0) then
         %Check% = False
         exit function
      end if
   end if
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o241">
<a:Name>Table</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o242">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o243">
<a:ObjectID>B1A7C227-2557-468E-B451-5614AF7D10B1</a:ObjectID>
<a:Name>ExtGlobalTemporaryTable</a:Name>
<a:Comment>Defines if table is a global temporary table or not.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o244">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:Name>Forms</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o245">
<a:Name>Sybase</a:Name>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Attribute=&quot;ExtGlobalTemporaryTable&quot; AttributeID=&quot;{B1A7C227-2557-468E-B451-5614AF7D10B1}&quot; Name=&quot;ExtGlobalTemporaryTable&quot; Caption=&quot;Global temporary table&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
</c:Categories>
</o:ProfileTargetItem>
</c:Categories>
</o:DBMS>

</DBMS>
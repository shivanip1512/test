<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" Code="DB2 MVS" Family="DB2;DB2MVS" Name="IBM DB2 5.x for OS/390 (Not Certified)" signature="XDB_XML" version="12.0.0.1642"?>
<!-- do not edit this file -->

<DBMS xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:DBMS Id="o1">
<a:ObjectID>636717E9-506E-4B3D-9428-91ADDA90F65F</a:ObjectID>
<a:Name>IBM DB2 5.x for OS/390 (Not Certified)</a:Name>
<a:Code>DB2 MVS</a:Code>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1124883235</a:ModificationDate>
<a:Modifier>mledier</a:Modifier>
<a:Family>DB2;DB2MVS</a:Family>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined

Function GetBooleanItem(sItemPath)
   GetBooleanItem = CBool(GetItemValue(ActiveModel.DBMS.TargetObject, sItemPath))
End Function

Function GetItemValue(pCtg, sPath)
   if (pCtg is Nothing) then
      GetItemValue = &quot;&quot;
      Exit Function
   end if
   if (sPath = &quot;&quot;) then
      GetItemValue = &quot;&quot;
      Exit Function
   end if
   dim pos, pSub, sSub, bFound
   pos = InStr(sPath, &quot;\&quot;)
   if (pos = 0) then
      sSub = sPath
   else
      sSub = Left(sPath, pos - 1)
   end if
   For each pSub in pCtg.Categories
      if (pSub.Name = sSub) then 
         bFound = true
         exit for
      end if
   next
   if not (bFound) then
      GetItemValue = &quot;&quot;
      Exit Function
   end if
   if (pos = 0) then
      GetItemValue = pSub.Value
   else
      GetItemValue = GetItemValue(pSub, mid(sPath, pos + 1))
   end if
end function</a:CheckGlobalScript>
<c:Categories>
<o:TargetCategory Id="o2">
<a:Name>General</a:Name>
<a:Comment>Target DBMS identification</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o3">
<a:Name>SqlSupport</a:Name>
<a:Comment>SQL syntax allowed. This does not impact the script generation, but it impacts the SQL Preview</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o4">
<a:Name>Enableconstname</a:Name>
<a:Comment>Determines if constraint names are used during the generation</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o5">
<a:Name>UniqConstName</a:Name>
<a:Comment>Determines if unique constraint names for objects are authorized or not</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o6">
<a:Name>EnableCheck</a:Name>
<a:Comment>Determines if the generation of check parameters is authorized or not</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o7">
<a:Name>EnableMultiCheck</a:Name>
<a:Comment>Determines if the generation of multiple check parameters is authorized or not</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o8">
<a:Name>Script</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the Script generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o9">
<a:Name>Sql</a:Name>
<a:Comment>Contains sub-categories Syntax, Format, File and Keywords. Each sub-category contains entries whose values define general syntax for the database</a:Comment>
<c:Categories>
<o:TargetCategory Id="o10">
<a:Name>Syntax</a:Name>
<a:Comment>Contains general parameters for SQL syntax</a:Comment>
<c:Categories>
<o:CharacterTargetItem Id="o11">
<a:Name>Terminator</a:Name>
<a:Comment>End of command character</a:Comment>
<a:CharacterTargetItem.Value>;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o12">
<a:Name>BlockTerminator</a:Name>
<a:Comment>End of block character</a:Comment>
</o:StringTargetItem>
<o:CharacterTargetItem Id="o13">
<a:Name>Delimiter</a:Name>
<a:Comment>Field separation character. Example: col1, col2, col3</a:Comment>
<a:CharacterTargetItem.Value>,</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o14">
<a:Name>Quote</a:Name>
<a:Comment>Character used to enclose string values</a:Comment>
<a:CharacterTargetItem.Value>&#39;</a:CharacterTargetItem.Value>
</o:CharacterTargetItem>
<o:CharacterTargetItem Id="o15">
<a:Name>SqlContinue</a:Name>
<a:Comment>Continuation character</a:Comment>
</o:CharacterTargetItem>
<o:StringTargetItem Id="o16">
<a:Name>LineComment</a:Name>
<a:Comment>Characters used to enclose a single line comment</a:Comment>
<a:StringTargetItem.Value>--</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o17">
<a:Name>BlockComment</a:Name>
<a:Comment>Characters used to enclose a multi-line comment</a:Comment>
</o:StringTargetItem>
<o:TextTargetItem Id="o18">
<a:Name>UsingBlockTerm</a:Name>
<a:TextTargetItem.Value>create trigger, end, 1
{
   begin, , 2
   {
      begin, end, 3
      case, end case, 4
      if, end if, 4
      for, end for, 4
      loop, end loop, 4
      repeat, end repeat, 4
      while, end while, 4
   }
}
create procedure, , 1
{
   begin, end, 2
   case, end case, 4
   if, end if, 4
   for, end for, 4
   loop, end loop, 4
   repeat, end repeat, 4
   while, end while, 4
}</a:TextTargetItem.Value>
<a:Comment>List of objects using block definition during reverse.</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o19">
<a:Name>Format</a:Name>
<a:Comment>Contains entries that define script formatting</a:Comment>
<c:Categories>
<o:StringTargetItem Id="o20">
<a:Name>IllegalChar</a:Name>
<a:Comment>Invalid characters for names</a:Comment>
<a:StringTargetItem.Value>&quot; +-*/!=&lt;&gt;&#39;&quot;()&quot;.</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:IntegerTargetItem Id="o21">
<a:Name>MaxScriptLen</a:Name>
<a:Comment>Maximum length for a script line</a:Comment>
<a:IntegerTargetItem.Value>72</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o22">
<a:Name>UpperCaseOnly</a:Name>
<a:Comment>Uppercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o23">
<a:Name>LowerCaseOnly</a:Name>
<a:Comment>Lowercase only</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o24">
<a:Name>EnableOwnerPrefix</a:Name>
<a:Comment>Object codes can have a prefix made of the object owner code</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o25">
<a:Name>CaseSensitivityUsingQuote</a:Name>
<a:Comment>Determines if the case sensitivity for identifiers is managed using double quotes</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o26">
<a:Name>File</a:Name>
<a:Comment>Contains header, footer and usage text entries used during the generation</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o27">
<a:Name>Header</a:Name>
<a:Comment>Header text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o28">
<a:Name>Footer</a:Name>
<a:Comment>Footer text for a database generation script</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o29">
<a:Name>EnableMultiFile</a:Name>
<a:Comment>Multi-script allowed</a:Comment>
</o:BooleanTargetItem>
<o:StringTargetItem Id="o30">
<a:Name>ScriptExt</a:Name>
<a:Comment>Main script extension in database generation</a:Comment>
<a:StringTargetItem.Value>sql</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o31">
<a:Name>TableExt</a:Name>
<a:Comment>Other scripts extension in database generation</a:Comment>
<a:StringTargetItem.Value>tab</a:StringTargetItem.Value>
</o:StringTargetItem>
<o:StringTargetItem Id="o32">
<a:Name>StartCommand</a:Name>
<a:Comment>Command for executing a script</a:Comment>
</o:StringTargetItem>
<o:TextTargetItem Id="o33">
<a:Name>Usage1</a:Name>
<a:TextTargetItem.Value>  (1) Go to the directory %PATHSCRIPT%
  (2) Start the SQL interpreter
  (3) Run the script &quot;%NAMESCRIPT%&quot;</a:TextTargetItem.Value>
<a:Comment>Usage for a single script in database generation</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o34">
<a:Name>Usage2</a:Name>
<a:TextTargetItem.Value>  (1) Go to the directory %PATHSCRIPT%
  (2) Start the SQL interpreter
  (3) Run the generated scripts</a:TextTargetItem.Value>
<a:Comment>Usage for multiple scripts in database generation</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o35">
<a:Name>Keywords</a:Name>
<a:Comment>Contains the list of reserved words and functions available in SQL</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o36">
<a:Name>ReservedDefault</a:Name>
<a:TextTargetItem.Value>NULL
USER
CURRENT DATE
CURRENT DEGREE
CURRENT PACKAGESET
CURRENT RULES
CURRENT SERVER
CURRENT SQLID
CURRENT TIME
CURRENT TIMESTAMP
CURRENT TIMEZONE</a:TextTargetItem.Value>
<a:Comment>Reserved default values</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o37">
<a:Name>GroupFunc</a:Name>
<a:TextTargetItem.Value>avg()
count()
max()
min()
sum()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions to use with group keywords.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o38">
<a:Name>NumberFunc</a:Name>
<a:Comment>List of SQL functions used on numbers</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o39">
<a:Name>CharFunc</a:Name>
<a:TextTargetItem.Value>char()
length()
substr()
value()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for characters and strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o40">
<a:Name>DateFunc</a:Name>
<a:TextTargetItem.Value>current date
current time
current timestamp
current timezone
date()
day()
days()
hour()
microsecond()
minute()
month()
second()
time()
year()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions for dates</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o41">
<a:Name>ConvertFunc</a:Name>
<a:TextTargetItem.Value>decimal()
digits()
float()
hex()
integer()
timestamp()
vargraphic()</a:TextTargetItem.Value>
<a:Comment>List of SQL functions used to convert values between hex and integer and handling strings</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o42">
<a:Name>OtherFunc</a:Name>
<a:TextTargetItem.Value>user</a:TextTargetItem.Value>
<a:Comment>List of other SQL functions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o43">
<a:Name>ListOperators</a:Name>
<a:TextTargetItem.Value>=
&lt;&gt;
&gt;
&lt;
&gt;=
&lt;=
*=
=*
not
in
not in
between
not between
exists
not exists
like
not like
is
is not
= any
&lt;&gt; any
&gt; any
&lt; any
&gt;= any
&lt;= any
= all
&lt;&gt; all
&gt; all
&lt; all
&gt;= all
&lt;= all</a:TextTargetItem.Value>
<a:Comment>List of operators for comparing values, boolean, and various semantic operators</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o44">
<a:Name>Commit</a:Name>
<a:TextTargetItem.Value>commit</a:TextTargetItem.Value>
<a:Comment>Command for validating the transaction by OBDC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o45">
<a:Name>ReservedWord</a:Name>
<a:TextTargetItem.Value>ADD
ALL
ALLOCATE
ALTER
AND
ANY
AS
ASSOCIATE
AUDIT
BETWEEN
BUFFERPOOL
BY
CALL
CASE
CAPTURE
CASCADED
CCSID
CHAR
CHARACTER
CHECK
CLUSTER
COLLECTION
COLUMN
CONCAT
CONDITION
CONSTRAINT
CONTINUE
COUNT
CURRENT
CURRENT_DATE
CURRENT_TIME
CURRENT_TIMESTAMP
CURSOR
DATABASE
DAY
DAYS
DEFAULT
DELETE
DESCRIPTOR
DISTINCT
DO
DOUBLE
DROP
EDITPROC
ELSE
ELSEIF
END
END-EXEC
ERASE
ESCAPE
EXCEPT
EXECUTE
EXISTS
EXIT
FIELDPROC
FOR
FROM
FULL
GO
GOTO
GRANT
GROUP
HANDLER
HAVING
HOUR
HOURS
IF
IMMEDIATE
IN
INDEX
INNER
INOUT
INSERT
INTO
IS
ISOBID
JOIN
KEY
LEAVE
LEFT
LIKE
LOCAL
LOCATOR
LOCATORS
LOCKMAX
LOCKSIZE
LOOP
MICROSECOND
MICROSECONDS
MINUTE
MINUTES
MONTH
MONTHS
NO
NOT
NULL
NUMPARTS
OBID
OF
ON
OPTIMIZE
OR
ORDER
OUT
OUTER
PACKAGE
PART
PIECESIZE
PLAN
PRECISION
PRIQTY
PRIVILEGES
PROGRAM
PROCEDURE
PSID
REFERENCES
RENAME
REPEAT
RIGHT
SECOND
SECONDS
SECQTY
SELECT
SET
SOME
STOGROUP
SUBPAGES
SYNONYM
TABLE
TABLESPACE
THEN
TO
UNDO
UNION
UNIQUE
UNTIL
UPDATE
USER
USING
VALIDPROC
VALUES
VCAT
VIEW
VOLUMES
WHEN
WHERE
WHILE
WITH
YEAR
YEARS
</a:TextTargetItem.Value>
<a:Comment>Reserved words</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o46">
<a:Name>Objects</a:Name>
<a:Comment>Contains sub-categories for each type of object in the database, for example: Table, or Reference. Each sub-category contains entries whose values define database commands and object-related characteristics</a:Comment>
<c:Categories>
<o:TargetCategory Id="o47">
<a:Name>Table</a:Name>
<a:Code>TABL</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLE&quot;        // generated code of the table
   &quot;TNAME&quot;        // name of the table
   &quot;TCODE&quot;        // code of the table
   &quot;TLABL&quot;        // comment of the table
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;TABLDEFN&quot;     // complete body of the table definition. Contains definition of columns, checks and keys
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o48">
<a:Name>Enable</a:Name>
<a:Comment>Table allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o49">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>18</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o50">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>T_%.16:TABLE%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for check of table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o51">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create table [%QUALIFIER%]%TABLE% (
   %TABLDEFN%
)
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a table. Example: create table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o52">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>in %s : category=tablespace, enabledbprefix=yes
in database %s : category=database, default=dsndb04
editproc %s
validproc %s
audit %s : list=none|changes|all, default=none
obid %d
data capture %s : list=none|changes, default=none
with restrict on drop
ccsid %s : list=ascii|ebcdic, default=ascii</a:TextTargetItem.Value>
<a:Comment>Available options for creating a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o53">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for table options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o54">
<a:Name>TableComment</a:Name>
<a:TextTargetItem.Value>comment on table [%QUALIFIER%]%TABLE% is
%.q254:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a table comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o55">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop table [%QUALIFIER%]%TABLE%
</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table. Example: drop table %TABLE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o56">
<a:Name>Rename</a:Name>
<a:TextTargetItem.Value>rename [table ][%OLDQUALIFIER%]%OLDTABL% to %NEWTABL%</a:TextTargetItem.Value>
<a:Comment>Command for renaming a table</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o57">
<a:Name>AlterTableHeader</a:Name>
<a:Comment>Alter table header</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o58">
<a:Name>AlterTableFooter</a:Name>
<a:Comment>Alter table footer</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o59">
<a:Name>AddTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add [constraint %CONSTNAME% ]check (%.A:CONSTRAINT%)</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script for modifying table constraints within an alter table statement</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o60">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a table.
The first column is the SQL name of permission (eg: SELECT)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>ALTER=Alter
DELETE=Delete
INDEX=Index
INSERT=Insert
SELECT=Select
REFERENCES=Refr.
TRIGGER=Trigger
UPDATE=Update</a:MapTargetItem.Value>
<a:List>ALTER
DELETE
INDEX
INSERT
SELECT
REFERENCES
TRIGGER
UPDATE
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o61">
<a:Name>DefineTableCheck</a:Name>
<a:TextTargetItem.Value>[[constraint %CONSTNAME% ]check (%.A:CONSTRAINT%)]</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script of table check constraints</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o62">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, TABLE_TYPE, @OBJTLABL}

select
   creator,
   name,
   &#39;TABLE&#39;,
   remarks
from
   sysibm.systables
where type=&#39;T&#39;
   [and name=%.q:TABLE%]
   [and dbname=%.q:CATALOG%]
   [and creator=%.q:OWNER%]
union select
   s.creator,
   s.name,
   &#39;SYNONYM&#39;,
   &#39;&#39;
from
   sysibm.syssynonyms s, sysibm.systables t
where 
   s.tbname=t.name
   and s.tbcreator=t.creator
   [and s.name=%.q:TABLE%]
   [and t.dbname=%.q:CATALOG%]
   [and s.creator=%.q:OWNER%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o63">
<a:Name>SqlAttrQuery</a:Name>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o64">
<a:Name>SqlOptsQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, OPTIONS}

select
   creator,
   name,
   &#39;in &#39; concat tsname concat
   case edproc
      when &#39;&#39; then &#39;&#39;
      else &#39; editproc &#39; concat edproc
   end concat
   case valproc
      when &#39;&#39; then &#39;&#39;
      else &#39; validproc &#39; concat valproc
   end concat
   case auditing
      when &#39;A&#39; then &#39;audit all&#39;
      when &#39;C&#39; then &#39;audit change&#39;
      else &#39;&#39;
   end concat
   case datacapture
      when &#39;Y&#39; then &#39; data capture changes&#39;
      else &#39;&#39;
   end concat
   case clustertype
      when &#39;Y&#39; then &#39; with restrict on drop&#39;
      else &#39;&#39;
   end concat
   case encoding_scheme
      when &#39;A&#39; then &#39; ccsid ascii&#39;
      else &#39;&#39;
   end
from 
   sysibm.systables
where 
   1=1
   [and name = %.q:TABLE%] 
   [and creator = %.q:OWNER%]
order 
   by creator, name</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o65">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE ID, PERMISSION ...}

select 
s.grantee grantee, 
case s.alterauth when &#39;Y&#39; then &#39;ALTER&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.alterauth when &#39;G&#39; then &#39;ALTER+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.deleteauth when &#39;Y&#39; then &#39;DELETE&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.deleteauth when &#39;G&#39; then &#39;DELETE+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.indexauth when &#39;Y&#39; then &#39;INDEX&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.indexauth when &#39;G&#39; then &#39;INDEX+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.insertauth when &#39;Y&#39; then &#39;INSERT&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.insertauth when &#39;G&#39; then &#39;INSERT+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.selectauth when &#39;Y&#39; then &#39;SELECT&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.selectauth when &#39;G&#39; then &#39;SELECT+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.referencesauth when &#39;Y&#39; then &#39;REFERENCES&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.referencesauth when &#39;G&#39; then &#39;REFERENCES+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.updateauth when &#39;Y&#39; then &#39;UPDATE&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.updateauth when &#39;G&#39; then &#39;UPDATE+&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.triggerauth when &#39;Y&#39; then &#39;TRIGGER&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.triggerauth when &#39;G&#39; then &#39;TRIGGER+&#39; else &#39;&#39; end
from sysibm.systabauth s
where s.tcreator &lt;&gt; s.grantee 
[and s.ttname = %.q:TABLE%]
[and s.tcreator = %.q:OWNER%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o66">
<a:Name>DropTableCheck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   drop check %CONSTNAME%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a table check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o67">
<a:Name>UniqConstraintName</a:Name>
<a:Comment>Disallows the same name for index and constraint name in the same table.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o68">
<a:Name>User</a:Name>
<a:Code>USER</a:Code>
<a:Comment>The following system variables are available:
   &quot;USER&quot;         // generated code of the user
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o69">
<a:Name>Enable</a:Name>
<a:Comment>User allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o70">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>8</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o71">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{USER}

select distinct creator from sysibm.systables
where 1=1
[and dbname = %.q:CATALOG%]
[and UPPER(creator) = %.qU:SCHEMA%]
order by 1</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o72">
<a:Name>SqlAttrQuery</a:Name>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o73">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{USER ID, PRIVILEGE ...}

select
s.grantee,
case s.archiveauth when &#39;Y&#39; then &#39;ARCHIVE&#39; when &#39;G&#39; then &#39;ARCHIVE+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.bindaddauth when &#39;Y&#39; then &#39;BINDADD&#39; when &#39;G&#39; then &#39;BINDADD+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.bindagentauth when &#39;Y&#39; then &#39;BINDAGENT&#39; when &#39;G&#39; then &#39;BINDAGENT+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.bsdsauth when &#39;Y&#39; then &#39;BSDS&#39; when &#39;G&#39; then &#39;BSDS+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.createaliasauth when &#39;Y&#39; then &#39;CREATEALIAS&#39; when &#39;G&#39; then &#39;CREATEALIAS+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.createdbaauth when &#39;Y&#39; then &#39;CREATEDBA&#39; when &#39;G&#39; then &#39;CREATEDBA+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.createdbcauth when &#39;Y&#39; then &#39;CREATEDBC&#39; when &#39;G&#39; then &#39;CREATEDBC+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.createsgauth when &#39;Y&#39; then &#39;CREATESG&#39; when &#39;G&#39; then &#39;CREATESG+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.createtmtabauth when &#39;Y&#39; then &#39;CREATETMTAB&#39; when &#39;G&#39; then &#39;CREATETMTAB+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.displayauth when &#39;Y&#39; then &#39;DISPLAY&#39; when &#39;G&#39; then &#39;DISPLAY+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.mon1auth when &#39;Y&#39; then &#39;MONITOR1&#39; when &#39;G&#39; then &#39;MONITOR1+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.mon2auth when &#39;Y&#39; then &#39;MONITOR2&#39; when &#39;G&#39; then &#39;MONITOR2+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.recoverauth when &#39;Y&#39; then &#39;RECOVER&#39; when &#39;G&#39; then &#39;RECOVER+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.stopallauth when &#39;Y&#39; then &#39;STOPALL&#39; when &#39;G&#39; then &#39;STOPALL+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.stospaceauth when &#39;Y&#39; then &#39;STOSPACE&#39; when &#39;G&#39; then &#39;STOSPACE+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.sysadmauth when &#39;Y&#39; then &#39;SYSADM&#39; when &#39;G&#39; then &#39;SYSADM+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.sysctrlauth when &#39;Y&#39; then &#39;SYSCTRL&#39; when &#39;G&#39; then &#39;SYSCTRL+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.sysoprauth when &#39;Y&#39; then &#39;SYSOPR&#39; when &#39;G&#39; then &#39;SYSOPR+&#39; else &#39;&#39; end concat &#39;,&#39;concat 
case s.traceauth when &#39;Y&#39; then &#39;TRACE&#39; when &#39;G&#39; then &#39;TRACE+&#39; else &#39;&#39; end
from sysibm.sysuserauth s
</a:TextTargetItem.Value>
<a:Comment>Query to reverse privileges</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o74">
<a:Name>Index</a:Name>
<a:Code>INDX</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for indexes)
   &quot;INDEX&quot;        // generated code of the index
   &quot;INDEXNAME&quot;    // index name
   &quot;INDEXCODE&quot;    // index code
   &quot;UNIQUE&quot;       // keyword &quot;unique&quot; when the index is unique
   &quot;INDEXTYPE&quot;    // index type (available only for a few DBMS)
   &quot;INDEXKEY&quot;     // keywords &quot;primary&quot;, &quot;unique&quot; or &quot;foreign&quot; depending on the index origin
   &quot;CIDXLIST&quot;     // list of index columns. Eg: A asc, B desc, C asc
   &quot;CLUSTER&quot;      // keyword &quot;cluster&quot; when the index is cluster
For index columns, the following system variables are available:
   &quot;ASC&quot;          // keywords &quot;ASC&quot; or &quot;DESC&quot; depending on sort order
   &quot;ISASC&quot;        // TRUE if the index column sort is ascending
</a:Comment>
<c:Categories>
<o:IntegerTargetItem Id="o75">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>18</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:IntegerTargetItem Id="o76">
<a:Name>MaxColIndex</a:Name>
<a:Comment>Maximum number of columns in an index</a:Comment>
<a:IntegerTargetItem.Value>64</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o77">
<a:Name>Enable</a:Name>
<a:Comment>Index allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o78">
<a:Name>EnableAscDesc</a:Name>
<a:Comment>ASC, DESC keywords allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o79">
<a:Name>UniqName</a:Name>
<a:Comment>Unique index name in the database</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o80">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create [%INDEXTYPE% ][%UNIQUE% [%WhereNotNull%?where not null ]]index [%QUALIFIER%]%INDEX% on [%TABLQUALIFIER%]%TABLE% (
%CIDXLIST%
)
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating an index. Example: create index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o81">
<a:Name>AddColIndex</a:Name>
<a:TextTargetItem.Value>   %20:COLUMN% [%ASC%]</a:TextTargetItem.Value>
<a:Comment>Command for defining an index column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o82">
<a:Name>IndexType</a:Name>
<a:TextTargetItem.Value>type 1
type 2</a:TextTargetItem.Value>
<a:Comment>List of types available for an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o83">
<a:Name>DefIndexType</a:Name>
<a:Comment>Default type for an index</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o84">
<a:Name>EnableOwner</a:Name>
<a:Comment>Owner allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o85">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>&lt;usingblock&gt; : composite=yes
{
using vcat %s
using stogroup %s : category=storage, composite=yes
{
priqty %d : default=12
secqty %d
erase %s : default=no, list=yes|no
}
}
freepage %d : default=0
pctfree %d : default=5
gbpcache %s : list=all|changed, default=changed
cluster : composite=yes, parenthesis=yes, separator=yes
{
part %d : composite=yes, multiple=yes
{
values : composite=yes, parenthesis=yes, separator=yes
{
&lt;constant&gt; %d : multiple=yes
}
&lt;usingblock&gt; : composite=yes
{
using vcat %s
using stogroup %s : category=storage, composite=yes
{
priqty %d : default=12
secqty %d
erase %s : default=no, list=yes|no
}
}
freepage %d : default=0
pctfree %d : default=5
gbpcache %s : list=all|changed, default=changed
}
}
subpages %d : list=1|2|4|8|16, default=1
bufferpool %s : default=bp0
close %s : default=yes, list=yes|no
dsetpass %s
defer %s : list=yes|no, default=yes
piecesize %d</a:TextTargetItem.Value>
<a:Comment>Default options for creating an index</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o86">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for index options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o87">
<a:Name>SqlOptsQuery</a:Name>
<a:TextTargetItem.Value>{TABLOWNER, TABLE, OWNER, INDEX, OPTIONS}

select 
   tbcreator,
   tbname,
   creator,
   name,
   case clustering 
      when &#39;Y&#39; then &#39;cluster &#39;
   end concat
   &#39;bufferpool &#39; concat bpool concat
   case closerule
      when &#39;N&#39; then &#39; close no&#39;
      when &#39;Y&#39; then &#39;&#39;
      else &#39;&#39;
   end concat
   case indextype
      when &#39;2&#39; then &#39;&#39;
      else    &#39;subpages &#39; concat strip(strip(strip(char(decimal(pgsize/256, 12, 0)),B),B,&#39;0&#39;),B,&#39;.&#39;)
   end concat
   case dsetpass
      when &#39;nopassword&#39; then &#39;&#39;
      when &#39;&#39; then &#39;&#39;
      else &#39;password &#39; concat dsetpass 
   end concat
   case piecesize
      when 0 then &#39;&#39;
      else &#39; piecesize &#39; concat strip(strip(strip(char(decimal(piecesize, 12, 0)),B),B,&#39;0&#39;),B,&#39;.&#39;) concat &#39; K&#39;
   end
from 
   sysibm.sysindexes
where 1=1 
[and TBNAME = %.q:TABLE%]
[and TBCREATOR = %.q:OWNER%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o88">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop index [%QUALIFIER%]%INDEX%</a:TextTargetItem.Value>
<a:Comment>Command for dropping an index. Example: drop index %INDEX%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o89">
<a:Name>DefineIndexColumn</a:Name>
<a:TextTargetItem.Value>     %20:COLUMN% [%ASC%]</a:TextTargetItem.Value>
<a:Comment>Defines the column of an index</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o90">
<a:Name>EnableCluster</a:Name>
<a:Comment>Cluster option available for indexes</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o91">
<a:Name>CreateBeforeKey</a:Name>
<a:Comment>Allow to invert generation order of indexes and keys</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o92">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{TABLOWNER, TABLE, OWNER, INDEX, INDEXTYPE, UNIQUE, CLUSTER, WhereNotNull}

select 
   tbcreator,
   tbname,
   creator,
   name,
   case indextype when &#39;2&#39; then &#39;type 2&#39; else &#39;type 1&#39; end,
   case uniquerule when &#39;D&#39; then &#39;&#39; else &#39;unique&#39; end, 
   case clustering when &#39;Y&#39; then &#39;cluster&#39; else &#39;&#39; end,
   case uniquerule when &#39;N&#39; then &#39;TRUE&#39; else &#39;FALSE&#39; end
from
   sysibm.sysindexes 
where where uniquerule not in (&#39;P&#39;, &#39;U&#39;)
[  and tbname=%.q:TABLE%]
[  and tbcreator=%.q:OWNER%]
[  and dbname=%.q:CATALOG%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o93">
<a:Name>Column</a:Name>
<a:Code>COLN</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for columns)
   &quot;COLUMN&quot;       // generated code of the column
   &quot;COLNNO&quot;       // position of the column in the list of columns of the table
   &quot;COLNNAME&quot;     // name of the column
   &quot;COLNCODE&quot;     // code of the column
   &quot;PRIMARY&quot;      // keyword &quot;primary&quot; if the column is primary
   &quot;ISPKEY&quot;       // TRUE if the column is part of the primary key
   &quot;FOREIGN&quot;      // TRUE if the column is part of one foreign key
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o94">
<a:Name>Enable</a:Name>
<a:Comment>Column allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o95">
<a:Name>AddColnChck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add [constraint %CONSTNAME% ]check (%.A:CONSTRAINT%)</a:TextTargetItem.Value>
<a:Comment>Allows to customize the script for modifying column constraints within an alter table statement</a:Comment>
</o:TextTargetItem>
<o:IntegerTargetItem Id="o96">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>18</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:BooleanTargetItem Id="o97">
<a:Name>EnableNotNullWithDflt</a:Name>
<a:Comment>Enables not null with default</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o98">
<a:Name>EnableDefault</a:Name>
<a:Comment>Default values allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o99">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>C_%.16:COLUMN%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for a column check parameter</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o100">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>%20:COLUMN% %22:DATATYPE%[%ExtData%? for %ExtData% data][ %NOTNULL%][%ExtFieldProcName%? fieldproc %ExtFieldProcName%:[%WITHDEFAULT%? %WITHDEFAULT%[ %DEFAULT%]:[ default %DEFAULT%]]]
   [[constraint %CONSTNAME% ]check (%.A:CONSTRAINT%)]</a:TextTargetItem.Value>
<a:Comment>Command for defining a table column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o101">
<a:Name>ColumnComment</a:Name>
<a:TextTargetItem.Value>comment on column [%QUALIFIER%]%TABLE%.%COLUMN% is
%.q254:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a column comment</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o102">
<a:Name>Rename</a:Name>
<a:Comment>Command for renaming a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o103">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   add %COLUMN% %DATATYPE%[%ExtData%? for %ExtData% data][ %NOTNULL%][%ExtFieldProcName%? fieldproc %ExtFieldProcName%:[%WITHDEFAULT%? %WITHDEFAULT%[ %DEFAULT%]:[ default %DEFAULT%]]]
   [[constraint %CONSTNAME% ]check (%.A:CONSTRAINT%)]</a:TextTargetItem.Value>
<a:Comment>Command for adding a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o104">
<a:Name>ModifyColumn</a:Name>
<a:Comment>Command for modifying a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o105">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping a column</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o106">
<a:Name>ModifyColnChck</a:Name>
<a:Comment>Command for modifying a column check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o107">
<a:Name>ModifyColnDflt</a:Name>
<a:Comment>Command for modifying a column default in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o108">
<a:Name>DropColnChck</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   drop check %CONSTNAME%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a column check in an alter table statement</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o109">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, COLUMN, DTTPCODE, LENGTH, PREC, NOTNULL (N=&#39;NOT NULL&#39;, *=NULL), WITHDEFAULT, DEFAULT, @OBJTLABL, NO}

select
   tbcreator,
   tbname,
   name,
   coltype,
   length,
   scale,
   nulls,
   case nulls concat default
      when &#39;NN&#39; then &#39;&#39;
      when &#39;YY&#39; then &#39;&#39;
      when &#39;YN&#39; then &#39;&#39;
      else &#39;WITH DEFAULT&#39;
   end,
   case(default) when &#39;1&#39; then &#39;&#39;&#39;&#39; concat defaultvalue concat &#39;&#39;&#39;&#39; when &#39;5&#39; then &#39;&#39;&#39;&#39; concat defaultvalue concat &#39;&#39;&#39;&#39; else defaultvalue end,
   remarks,
   colno
from
   sysibm.syscolumns
where
   1=1
   [and tbcreator=%.q:OWNER%]
   [and tbname=%.q:TABLE%]
order by
   1, 2, colno</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o110">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, TABLE, COLUMN, ExtFieldProcName}

select
   p.tbcreator,
   p.tbname,
   p.name,
   p.fldproc concat
      case(value(p.parmlist, &#39;&#39;)) when &#39;&#39; then &#39;&#39; else &#39;(&#39; concat p.parmlist concat &#39;)&#39; end
from
   sysibm.sysfields p
where
   p.colno &gt; 0
[  and p.tbcreator=%.q:OWNER%]
[  and p.tbname=%.q:TABLE%]
[  and p.name=%.q:COLUMN%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o111">
<a:Name>AltEnableAddColnChk</a:Name>
<a:Comment>Column check constraint allowed in an alter table statement</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:MapTargetItem Id="o112">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a column.
The first column is the SQL name of permission (eg: SELECT)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>REFERENCES=Refr.
UPDATE=Update</a:MapTargetItem.Value>
<a:List>REFERENCES
UPDATE
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o113">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{GRANTEE ID, COLNPERMISSION ID, COLUMN ...}
select 
  s.grantee, 
  case s.privilege 
    when &#39;&#39; then &#39;UPDATE&#39;
    when &#39;R&#39; then &#39;REFERENCES&#39;
    else &#39;&#39;
  end,
  s.colname concat &#39;,&#39;
from SYSIBM.SYSCOLAUTH s
where s.creator &lt;&gt; s.grantee 
[and    s.tname  = %.q:TABLE%]
[and    s.creator = %.q:OWNER%]
order by 2</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:BooleanTargetItem Id="o114">
<a:Name>EnableOption</a:Name>
<a:Comment>Physical options allowed  YES/NO</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TargetCategory Id="o115">
<a:Name>Reference</a:Name>
<a:Code>REFR</a:Code>
<a:Comment>The following system variables are available:
   &quot;REFR&quot;         // generated code of the reference
   &quot;REFNAME&quot;      // reference name
   &quot;PARENT&quot;       // generated code of the parent table
   &quot;PNAME&quot;        // name of the parent table
   &quot;PCODE&quot;        // code of the parent table
   &quot;CHILD&quot;        // generated code of the reference
   &quot;CNAME&quot;        // name of the child table
   &quot;CCODE&quot;        // code of the child table
   &quot;PQUALIFIER&quot;   // qualifier of the parent table. See QUALIFIER
   &quot;CQUALIFIER&quot;   // qualifier of the child table. See QUALIFIER
   &quot;REFRNAME&quot;     // Reference name
   &quot;REFRCODE&quot;     // Reference code
   &quot;FKCONSTRAINT&quot; // Reference constraint name (foreign key)
   &quot;PKCONSTRAINT&quot; // constraint name of the parent key used to reference object
   &quot;CKEYCOLUMNS&quot;  // list of parent key columns. Eg: C1, C2, C3
   &quot;FKEYCOLUMNS&quot;  // list of child foreign key columns. Eg:
   &quot;UPDCONST&quot;     // Update declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;DELCONST&quot;     // Delete declarative constraint. Keywords &quot;restrict&quot;, &quot;cascade&quot;, &quot;set null&quot; or &quot;set default&quot;
   &quot;MINCARD&quot;      // Min cardinality
   &quot;MAXCARD&quot;      // Max cardinality
   &quot;POWNER&quot;       // Parent table owner
   &quot;COWNER&quot;       // child table owner
   &quot;CHCKONCMMT&quot;   // TRUE when check on commit is selected on the reference (ASA 6.0 specific)

For reference joins (couple of column in a reference),
the following system variables are available:
   &quot;CKEYCOLUMN&quot;   // generated code of the parent table column (primary key)
   &quot;FKEYCOLUMN&quot;   // generated code of the child table column (foreign key)
   &quot;PK&quot;           // primary key column generated code
   &quot;PKNAME&quot;       // primary key column name
   &quot;FK&quot;           // foreign key column generated code
   &quot;FKNAME&quot;       // foreign key column name
   &quot;AK&quot;           // alternate key column code (same as PK)
   &quot;AKNAME&quot;       // alternate key column name (same as PKNAME)
   &quot;COLTYPE&quot;      // primary column column datatype
   &quot;DEFAULT&quot;      // foreign key column default value
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o116">
<a:Name>Enable</a:Name>
<a:Comment>Foreign key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o117">
<a:Name>FKAutoIndex</a:Name>
<a:Comment>Foreign key is auto-indexed</a:Comment>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o118">
<a:Name>EnablefKeyName</a:Name>
<a:Comment>Foreign key role allowed in database generation</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o119">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>F_%.6:REFR%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for foreign keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o120">
<a:Name>CheckOnCommit</a:Name>
<a:Comment>Referential integrity test differed after the COMMIT</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o121">
<a:Name>DclDelIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT
NO ACTION
CASCADE
SET NULL</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for delete</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o122">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>foreign key [%CONSTNAME% ](%FKEYCOLUMNS%)
   references [%PQUALIFIER%]%PARENT%[ (%CKEYCOLUMNS%)]
   [%DELCONST%?on delete %DELCONST%:on delete no action]</a:TextTargetItem.Value>
<a:Comment>Command for defining a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o123">
<a:Name>DclUpdIntegrity</a:Name>
<a:TextTargetItem.Value>RESTRICT</a:TextTargetItem.Value>
<a:Comment>Declarative referential integrity constraint allowed for update</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o124">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   [add ]foreign key [%CONSTNAME% ](%FKEYCOLUMNS%)
      references [%PQUALIFIER%]%PARENT%[ (%CKEYCOLUMNS%)]
      [%DELCONST%?on delete %DELCONST%:on delete no action]</a:TextTargetItem.Value>
<a:Comment>Command for adding a foreign key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o125">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{COWNER, CHILD, FKCONSTRAINT, POWNER, PARENT, PKCONSTRAINT, DELCONST}

select
   r.creator,
   r.tbname,
   r.relname,
   r.reftbcreator,
   r.reftbname,
   r.ixname,
   case r.deleterule
      when &#39;A&#39; then &#39;&lt;None&gt;&#39;
      when &#39;C&#39; then &#39;CASCADE&#39;
      when &#39;R&#39; then &#39;RESTRICT&#39;
      when &#39;N&#39; then &#39;SET NULL&#39;
      else &#39;&#39;
   end
from
   sysibm.sysrels r
where 1=1
   [and r.creator=%.q:OWNER%]
   [and r.tbname=%.q:TABLE%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o126">
<a:Name>SqlAttrQuery</a:Name>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o127">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   drop foreign key %CONSTNAME%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a foreign key</a:Comment>
</o:TextTargetItem>
<o:IntegerTargetItem Id="o128">
<a:Name>MaxConstLen</a:Name>
<a:Comment>Maximum reference constraint name length</a:Comment>
<a:IntegerTargetItem.Value>8</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o129">
<a:Name>Permission</a:Name>
<a:Code>PERM</a:Code>
<a:Comment>Manages the permissions on database objects</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o130">
<a:Name>Enable</a:Name>
<a:Comment>Permission allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o131">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant %PERMLIST% on [%QUALIFIER%]%OBJECT% to %GRANTEE% [%GRANTOPTION%]</a:TextTargetItem.Value>
<a:Comment>Command for granting permissions.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o132">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>revoke %REVPERMLIST% on [%QUALIFIER%]%OBJECT% from %GRANTEE%</a:TextTargetItem.Value>
<a:Comment>Command for revoking permissions.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o133">
<a:Name>GrantOption</a:Name>
<a:TextTargetItem.Value>with grant option</a:TextTargetItem.Value>
<a:Comment>Option for the grant statement.</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o134">
<a:Name>PKey</a:Name>
<a:Code>PKEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;PKEYCOLUMNS&quot;  // list of primary key columns. Eg: A, B
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o135">
<a:Name>Enable</a:Name>
<a:Comment>Primary key allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o136">
<a:Name>PkAutoIndex</a:Name>
<a:Comment>Primary key is auto-indexed</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o137">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>P_%.16:PKEY%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for primary keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o138">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   [add ]primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for adding a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o139">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>primary key (%PKEYCOLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for defining a primary key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o140">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>alter table [%QUALIFIER%]%TABLE%
   drop primary key</a:TextTargetItem.Value>
<a:Comment>Command for dropping a primary key</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o141">
<a:Name>Privilege</a:Name>
<a:Comment>Manages the system privileges for a user, role or group</a:Comment>
<c:Categories>
<o:TextTargetItem Id="o142">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>grant %PRIVLIST% to %USER% [%GRANTOPTION%]</a:TextTargetItem.Value>
<a:Comment>Command for granting privileges.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o143">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>revoke %REVPRIVLIST% from %USER%</a:TextTargetItem.Value>
<a:Comment>Command for revoking privileges.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o144">
<a:Name>System</a:Name>
<a:TextTargetItem.Value>ARCHIVE
BINDADD
BINDAGENT
BSDS
CREATEALIAS
CREATEDBA
CREATEDBC
CREATESG
CREATETMTAB
DISPLAY
MONITOR1
MONITOR2
RECOVER
STOPALL
STOSPACE
SYSADM
SYSCTRL
SYSOPR
TRACE</a:TextTargetItem.Value>
<a:Comment>List of system privileges</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o145">
<a:Name>GrantOption</a:Name>
<a:TextTargetItem.Value>with grant option</a:TextTargetItem.Value>
<a:Comment>Option for the grant statement.</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o146">
<a:Name>Enable</a:Name>
<a:Comment>Privilege allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o147">
<a:Name>Key</a:Name>
<a:Code>KEY</a:Code>
<a:Comment>The following system variables are available:
(parent table items are also available for keys)
   &quot;COLUMNS&quot;      // List of columns of the key. Eg: &quot;A, B, C&quot;
   &quot;ISPKEY&quot;       // TRUE when the key is the primary key of the table
   &quot;KEY&quot;          // constraint name
   &quot;PKEY&quot;         // constraint name for primary key
   &quot;AKEY&quot;         // constraint name for alternate key
   &quot;ISMULTICOLN&quot;  // TRUE if key has more than one column
   &quot;CLUSTER&quot;      // keyword cluster
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o148">
<a:Name>Enable</a:Name>
<a:Comment>UNIQUE constraint allowed for tables</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o149">
<a:Name>UniqConstAutoIndex</a:Name>
<a:Comment>UNIQUE constraint is auto-indexed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o150">
<a:Name>ConstName</a:Name>
<a:TextTargetItem.Value>A_%.16:AKEY%</a:TextTargetItem.Value>
<a:Comment>Constraint name template for alternate keys</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o151">
<a:Name>SqlAkeyIndex</a:Name>
<a:TextTargetItem.Value>select name
from sysibm.sysindexes
where uniquerule=&#39;C&#39; and tbname=%.q:TABLE% and tbcreator=%.q:USER%</a:TextTargetItem.Value>
<a:Comment>SQL query to obtain the alternate key indexes of a table by ODBC</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o152">
<a:Name>Create</a:Name>
<a:Comment>Command for adding an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o153">
<a:Name>Drop</a:Name>
<a:Comment>Command for dropping an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o154">
<a:Name>Add</a:Name>
<a:TextTargetItem.Value>unique (%COLUMNS%)</a:TextTargetItem.Value>
<a:Comment>Command for defining an alternate key</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o155">
<a:Name>SqlAttrQuery</a:Name>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o156">
<a:Name>SqlListQuery</a:Name>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o157">
<a:Name>SqlOptsQuery</a:Name>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:IntegerTargetItem Id="o158">
<a:Name>MaxConstLen</a:Name>
<a:Comment>Maximum constraint name length</a:Comment>
<a:IntegerTargetItem.Value>18</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TargetCategory Id="o159">
<a:Name>Database</a:Name>
<a:Code>DTBS</a:Code>
<a:Comment>The following system variables are available:
   &quot;DATABASE&quot;     // generated code of the database
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o160">
<a:Name>Enable</a:Name>
<a:Comment>Database allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o161">
<a:Name>BeforeCreateDatabase</a:Name>
<a:Comment>Creates tablespaces and storages before database</a:Comment>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o162">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create database %DATABASE%
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a database. Example: create database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o163">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>bufferpool %s : default=bp0
roshare %s : list=owner|read, default=owner
as workfile : composite=yes
{
for %s
}
stogroup %s : category=storage, default=sysdflt
ccsid %s : list=ascii|ebcdic, default=ascii</a:TextTargetItem.Value>
<a:Comment>Available options for creating a database</a:Comment>
</o:TextTargetItem>
<o:BooleanTargetItem Id="o164">
<a:Name>EnableManyDatabases</a:Name>
<a:Comment>Many databases allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o165">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{DATABASE}

select name from sysibm.sysdatabase</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o166">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop database %DATABASE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a database. Example: drop database %DATABASE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o167">
<a:Name>SqlOptsQuery</a:Name>
<a:TextTargetItem.Value>{DATABASE, OPTIONS}           
                              
select
   d.name,
   case (d.bpool) when &#39;&#39; then &#39;&#39; else &#39;bufferpool &#39; concat d.bpool end
   concat case(d.roshare) when &#39;O&#39; then &#39; roshare owner &#39; when &#39;R&#39; then &#39; roshare read &#39; else &#39;&#39; end
   concat case(d.type) when &#39;W&#39; then &#39; as workfile &#39; else &#39;&#39; end
   concat case(ltrim(d.group_member)) when &#39;&#39; then &#39;&#39; else &#39; for &#39; concat d.group_member end 
   concat case(d.stgroup) when &#39;&#39; then &#39;&#39; else &#39; stogroup &#39; concat d.stgroup end
   concat case(d.encoding_scheme) when &#39;A&#39; then &#39; ccsid ascii&#39; when &#39;E&#39; then &#39; ccsid ebcdic&#39; else &#39;&#39; end
from 
   sysibm.sysdatabase d
where 1=1
[  and d.name = %.q:DATABASE%]</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object physical options</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o168">
<a:Name>Synonym</a:Name>
<a:Code>SYNM</a:Code>
<a:Comment>Manages the synonym object.</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o169">
<a:Name>Enable</a:Name>
<a:Comment>Synonym allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o170">
<a:Name>EnableAlias</a:Name>
<a:Comment>Enable synonym of alias type.</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o171">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create %SYNMTYPE% [%QUALIFIER%]%SYNONYM% for [%BASEQUALIFIER%]%BASEOBJECT%</a:TextTargetItem.Value>
<a:Comment>Command for creating a synonym.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o172">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop %SYNMTYPE% [%QUALIFIER%]%SYNONYM%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a synonym.</a:Comment>
</o:TextTargetItem>
<o:IntegerTargetItem Id="o173">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>18</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o174">
<a:Name>Tablespace</a:Name>
<a:Code>TSPC</a:Code>
<a:Comment>The following system variables are available:
   &quot;TABLESPACE&quot;   // generated code of the tablespace
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o175">
<a:Name>Enable</a:Name>
<a:Comment>Tablespace allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o176">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create [%ExtTablespaceType% ]tablespace %TABLESPACE%
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a tablespace. Example: create tablespace %TABLESPACE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o177">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop tablespace [%TbspDatabase%.]%TABLESPACE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a tablespace. Example: drop tablespace %TABLESPACE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o178">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>in %s : category=database, default=dsndb04
&lt;usingblock&gt; : composite=yes
{
using vcat %s
using stogroup %s : category=storage, composite=yes
{
priqty %d : default=12
secqty %d
erase %s : default=no, list=yes|no
}
}
freepage %d : default=0
pctfree %d : default=5
gbpcache %s : list=all|changed, default=changed
numparts %d : composite=yes, separator=yes, parenthesis=yes
{
part %d : composite=yes, multiple=yes
{
&lt;usingblock&gt; : composite=yes
{
using vcat %s
using stogroup %s : category=storage, composite=yes
{
priqty %d : default=12
secqty %d
erase %s : default=no, list=yes|no
}
}
freepage %d : default=0
pctfree %d : default=5
gbpcache %s : list=all|changed, default=changed
compress %s : list=yes |no, default=yes
}
}
member cluster
segsize %d
bufferpool %s : default=bp0
locksize %s : default=any, list=any|page|tablespace|table|row
lockmax %s : default=system
close %s : default=yes, list=yes|no
dsetpass %s
compress %s : list=yes |no, default=yes
ccsid %s : list=ascii|ebcdic, default=ascii
lockpart %s : list=yes|no, default=no
maxrows %d</a:TextTargetItem.Value>
<a:Comment>Default options for creating a tablespace.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o179">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for tablespace options.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o180">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{DATABASE, TABLESPACE, ExtTablespaceType}

select
   dbname,
   name,
   case(type) when &#39;K&#39; then &#39;large&#39; when &#39;L&#39; then &#39;large&#39; else &#39;&#39; end
from
     sysibm.systablespace 
where
   implicit=&#39;N&#39;
order by
   name</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o181">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{TABLESPACE, OPTIONS}

SELECT name, 
   &#39; in &#39; concat dbname concat
   &#39; bufferpool &#39; concat bpool concat
   case lockrule 
      when &#39;P&#39; then &#39; locksize page&#39; 
      when &#39;R&#39; then &#39; locksize row&#39; 
      when &#39;S&#39; then &#39; locksize tablespace&#39; 
      when &#39;T&#39; then &#39; locksize table&#39; 
      when &#39;A&#39; then &#39;&#39;
      else &#39;&#39;
   end concat
   case lockmax
      when -1 then &#39;&#39;
      when 0 then &#39; lockmax 0&#39;
      else &#39; lockmax &#39; concat char(integer(lockmax))
   end concat
   case maxrows
      when 255 then &#39;&#39;
      else &#39; maxrows &#39; concat char(integer(maxrows)) 
   end concat
   case closerule
      when &#39;N&#39; then &#39; close no&#39;
      when &#39;Y&#39; then &#39;&#39;
      else &#39;&#39;
   end concat
   case lockpart
      when &#39;Y&#39; then &#39; lockpart yes&#39;
      when &#39;N&#39; then &#39; lockpart no&#39;
      else &#39;&#39;
   end concat
   case encoding_scheme
      when &#39;A&#39; then &#39; ccsid ascii&#39;
      else &#39;&#39;
   end
FROM
     sysibm.systablespace 
WHERE
     implicit=&#39;N&#39;
ORDER BY
     name
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o182">
<a:Name>Storage</a:Name>
<a:Code>STOR</a:Code>
<a:Comment>The following system variables are available:
   &quot;STORAGE&quot;      // generated code of the storage
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o183">
<a:Name>Enable</a:Name>
<a:Comment>Storage allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o184">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create stogroup %STORAGE%
[%OPTIONS%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a storage. Example: create storage %STORAGE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o185">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop stogroup %STORAGE%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a storage. Example: drop storage %STORAGE%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o186">
<a:Name>Options</a:Name>
<a:TextTargetItem.Value>volumes : composite=yes, separator=yes, parenthesis=yes
{
&lt;volume_id&gt; %d : multiple=yes, default=&#39;*&#39;
}
vcat %s
password %s</a:TextTargetItem.Value>
<a:Comment>Default options for creating a storage</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o187">
<a:Name>DefOptions</a:Name>
<a:Comment>Default values for storage options</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o188">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{STORAGE, OPTIONS}

select 
   name,
   &#39;vcat &#39; concat vcatname
from
   sysibm.sysstogroup
order by
   name</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o189">
<a:Name>SqlAttrQuery</a:Name>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o190">
<a:Name>View</a:Name>
<a:Code>VIEW</a:Code>
<a:Comment>The following system variables are available:
   &quot;VIEW&quot;         // generated code of the view
   &quot;VIEWNAME&quot;     // view name
   &quot;VIEWCODE&quot;     // view code
   &quot;VIEWCOLN&quot;     // List of columns of the view. Eg: &quot;A, B, C&quot;
   &quot;SQL&quot;          // SQL text of the view. Eg: Select * from T1
   &quot;VIEWCHECK&quot;    // Keyword &quot;with check option&quot; if selected on the view
   &quot;SCRIPT&quot;       // complete view creation order. Eg: create view V1 as select * from T1
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o191">
<a:Name>Enable</a:Name>
<a:Comment>View allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o192">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create view [%QUALIFIER%]%VIEW% [(%VIEWCOLN%) ]as
%SQL%
[%VIEWCHECK%]</a:TextTargetItem.Value>
<a:Comment>Command for creating a view. Example: create view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o193">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop view [%QUALIFIER%]%VIEW%</a:TextTargetItem.Value>
<a:Comment>Command for dropping a view. Example: drop view %VIEW%</a:Comment>
</o:TextTargetItem>
<o:MapTargetItem Id="o194">
<a:Name>Permission</a:Name>
<a:Comment>Available permission for a view.
The first column is the SQL name of permission (eg: SELECT)
The second column is a shortname to display in a grid</a:Comment>
<a:MapTargetItem.Value>ALTER=Alter
DELETE=Delete
INDEX=Index
INSERT=Insert
SELECT=Select
REFERENCES=Refr.
TRIGGER=Trigger
UPDATE=Update</a:MapTargetItem.Value>
<a:List>ALTER
DELETE
INDEX
INSERT
SELECT
REFERENCES
TRIGGER
UPDATE
</a:List>
</o:MapTargetItem>
<o:TextTargetItem Id="o195">
<a:Name>ViewComment</a:Name>
<a:TextTargetItem.Value>comment on table [%QUALIFIER%]%VIEW% is
%.q254:COMMENT%</a:TextTargetItem.Value>
<a:Comment>Command for adding a view comment.</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o196">
<a:Name>ViewCheck</a:Name>
<a:TextTargetItem.Value>with check option</a:TextTargetItem.Value>
<a:Comment>Option for checking a view</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o197">
<a:Name>SqlPermQuery</a:Name>
<a:TextTargetItem.Value>{ GRANTEE ID, PERMISSION ...}

select 
s.grantee grantee, 
case s.alterauth when &#39;Y&#39; then &#39;ALTER&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.alterauth when &#39;G&#39; then &#39;ALTER+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.deleteauth when &#39;Y&#39; then &#39;DELETE&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.deleteauth when &#39;G&#39; then &#39;DELETE+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.indexauth when &#39;Y&#39; then &#39;INDEX&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.indexauth when &#39;G&#39; then &#39;INDEX+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.insertauth when &#39;Y&#39; then &#39;INSERT&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.insertauth when &#39;G&#39; then &#39;INSERT+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.selectauth when &#39;Y&#39; then &#39;SELECT&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.selectauth when &#39;G&#39; then &#39;SELECT+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.referencesauth when &#39;Y&#39; then &#39;REFERENCES&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.referencesauth when &#39;G&#39; then &#39;REFERENCES+&#39; else &#39;&#39; end  concat &#39;,&#39; concat 
case s.updateauth when &#39;Y&#39; then &#39;UPDATE&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.updateauth when &#39;G&#39; then &#39;UPDATE+&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.triggerauth when &#39;Y&#39; then &#39;TRIGGER&#39; else &#39;&#39; end concat &#39;,&#39; concat 
case s.triggerauth when &#39;G&#39; then &#39;TRIGGER+&#39; else &#39;&#39; end
from sysibm.systabauth s
where s.tcreator &lt;&gt; s.grantee
[and s.ttname = %.q:VIEW%]
[and s.tcreator = %.q:OWNER%]
</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object permissions</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o198">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>{OWNER, VIEW}

select 
   creator,
   name
from sysibm.sysviews
   where seqno=1
   [and creator=%.q:SCHEMA%]
order by
   creator,
   name</a:TextTargetItem.Value>
<a:Comment>SQL query to list objects</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o199">
<a:Name>SqlAttrQuery</a:Name>
<a:TextTargetItem.Value>{OWNER ID, VIEW ID, SCRIPT ...}

select 
   creator,
   name,
   text,
   seqno
from sysibm.sysviews
   where 1=1
   [and name=%.q:VIEW%]
   [and creator=%.q:OWNER%]
order by
   creator,
   name,
   seqno</a:TextTargetItem.Value>
<a:Comment>SQL query to reverse object attributes</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o200">
<a:Name>Procedure</a:Name>
<a:Code>PROC</a:Code>
<a:Comment>The following system variables are available:
   &quot;PROC&quot;         // generated code of the procedure (also available for trigger when the trigger is implemented with a procedure)
   &quot;FUNC&quot;         // generated code of the procedure if the procedure is a function (with return value)
   &quot;PROCPRMS&quot;     // list of parameters of the procedure (also available for function)
</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o201">
<a:Name>Enable</a:Name>
<a:Comment>Procedure allowed</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:BooleanTargetItem Id="o202">
<a:Name>EnableFunc</a:Name>
<a:Comment>Function allowed</a:Comment>
</o:BooleanTargetItem>
<o:IntegerTargetItem Id="o203">
<a:Name>Maxlen</a:Name>
<a:Comment>Maximum object code length</a:Comment>
<a:IntegerTargetItem.Value>18</a:IntegerTargetItem.Value>
</o:IntegerTargetItem>
<o:TextTargetItem Id="o204">
<a:Name>Drop</a:Name>
<a:TextTargetItem.Value>drop procedure [%QUALIFIER%]%PROC% restrict</a:TextTargetItem.Value>
<a:Comment>Command for dropping a procedure. Example: drop procedure %PROC%</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o205">
<a:Name>CustomProc</a:Name>
<a:TextTargetItem.Value>create procedure [%QUALIFIER%]%PROC% (&lt;type&gt;) 
RESULT SET 0
EXTERNAL NAME %.q:PROC%
LANGUAGE C
PARAMETER STYLE DB2SQL
DETERMINISTIC
NO SQL
</a:TextTargetItem.Value>
<a:Comment>Command for creating a stored procedure</a:Comment>
</o:TextTargetItem>
<o:TextTargetItem Id="o206">
<a:Name>Create</a:Name>
<a:TextTargetItem.Value>create procedure [%QUALIFIER%]%PROC%[%PROCPRMS%?([%PROCPRMS%])]
%TRGDEFN%</a:TextTargetItem.Value>
<a:Comment>Command for creating a procedure. Example: create procedure %PROC% %TRGDEFN%</a:Comment>
</o:TextTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o207">
<a:Name>DataType</a:Name>
<a:Comment>Contains data type translation entries. These entries list the correspondence between internal data types and the target database data types</a:Comment>
<c:Categories>
<o:MapTargetItem Id="o208">
<a:Name>AmcdDataType</a:Name>
<a:Comment>Data types translation table from internal data types to target database data types.
        %n is the length of the data type
        %s is the size of the data type
        %p is the precision of the data type</a:Comment>
<a:MapTargetItem.Value>&lt;UNDEF&gt;=&lt;Undefined&gt;
A%n=CHAR(%n)
VA%n=VARCHAR(%n)
LA=LONG VARCHAR
LA%n=LONG VARCHAR
LVA=LONG VARCHAR
LVA%n=LONG VARCHAR
BT=SMALLINT
BT%n=NUMERIC(3, 0)
SI=SMALLINT
I=INTEGER
LI=INTEGER
N=NUMERIC
N%n=NUMERIC(%n)
N%s,%p=NUMERIC(%s, %p)
DC=DECIMAL
DC%n=DECIMAL(%n)
DC%s,%p=DECIMAL(%s, %p)
SF=REAL
F=FLOAT
F%n=FLOAT(%n)
LF=DOUBLE PRECISION
MN=NUMERIC(8, 2)
MN%n=NUMERIC(%n, 0)
MN%s,%p=NUMERIC(%s, %p)
D=DATE
T=TIME
DT=DATE
TS=TIMESTAMP
BL=SMALLINT
NO=NUMERIC(6, 0)
NO%n=NUMERIC(%n, 0)
BIN%n=VARGRAPHIC(%n)
LBIN=LONG VARGRAPHIC
LBIN%n=LONG VARGRAPHIC
TXT=LONG VARCHAR
TXT%n=LONG VARCHAR
MBT=CHAR
MBT%n=CHAR(%n)
VMBT=VARCHAR(255)
VMBT%n=VARCHAR(%n)
PIC=LONG VARGRAPHIC
PIC%n=LONG VARGRAPHIC
BMP=LONG VARGRAPHIC
BMP%n=LONG VARGRAPHIC
OLE=LONG VARGRAPHIC
OLE%n=LONG VARGRAPHIC
*=CHAR(10)</a:MapTargetItem.Value>
<a:List>&lt;UNDEF&gt;
A%n
VA%n
LA
LA%n
LVA
LVA%n
BT
BT%n
SI
I
LI
N
N%n
N%s,%p
DC
DC%n
DC%s,%p
SF
F
F%n
LF
MN
MN%n
MN%s,%p
D
T
DT
TS
BL
NO
NO%n
BIN%n
LBIN
LBIN%n
TXT
TXT%n
MBT
MBT%n
VMBT
VMBT%n
PIC
PIC%n
BMP
BMP%n
OLE
OLE%n
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o209">
<a:Name>PhysDataType</a:Name>
<a:Comment>Data types translation table from target database data types to internal data types.</a:Comment>
<a:MapTargetItem.Value>&lt;Undefined&gt;=&lt;UNDEF&gt;
INTEGER=I
INT=I
SMALLINT=SI
DECIMAL=DC
DECIMAL(%n)=DC%n
DECIMAL(%s, %p)=DC%s,%p
DEC=DC
DEC(%n)=DC%n
DEC(%s, %p)=DC%s,%p
NUMERIC=N
NUMERIC(%n)=N%n
NUMERIC(%s, %p)=N%s,%p
FLOAT=F
FLOAT(%n)=F%n
REAL=SF
DOUBLE=LF
DOUBLE PRECISION=LF
CHARACTER=A1
CHARACTER(%n)=A%n
CHAR=A1
CHAR(%n)=A%n
VARCHAR(%n)=VA%n
CHARACTER VARYING(%n)=VA%n
CHAR VARYING=VA%n
LONG VARCHAR=LVA
GRAPHIC=BIN1
GRAPHIC(%n)=BIN%n
VARGRAPHIC(%n)=BIN%n
LONG VARGRAPHIC=LBIN
DATE=D
TIME=T
TIMESTAMP=TS
*=A10</a:MapTargetItem.Value>
<a:List>&lt;Undefined&gt;
INTEGER
INT
SMALLINT
DECIMAL
DECIMAL(%n)
DECIMAL(%s, %p)
DEC
DEC(%n)
DEC(%s, %p)
NUMERIC
NUMERIC(%n)
NUMERIC(%s, %p)
FLOAT
FLOAT(%n)
REAL
DOUBLE
DOUBLE PRECISION
CHARACTER
CHARACTER(%n)
CHAR
CHAR(%n)
VARCHAR(%n)
CHARACTER VARYING(%n)
CHAR VARYING
LONG VARCHAR
GRAPHIC
GRAPHIC(%n)
VARGRAPHIC(%n)
LONG VARGRAPHIC
DATE
TIME
TIMESTAMP
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o210">
<a:Name>PhysDttpSize</a:Name>
<a:Comment>Table of storage sizes of target database data type</a:Comment>
<a:MapTargetItem.Value>NUMERIC          = 3
DEC              = 3
DECIMAL          = 3
TIME             = 3</a:MapTargetItem.Value>
<a:List>NUMERIC
DEC
DECIMAL
TIME
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o211">
<a:Name>OdbcPhysDataType</a:Name>
<a:Comment>Data types translation table from ODBC data types to target database data types.</a:Comment>
<a:MapTargetItem.Value>TIMESTMP(10)=TIMESTAMP
DECIMAL(5)=DECIMAL
FLOAT(8)=FLOAT
FLOAT(4)=REAL
VARG(%n)=VARGRAPHIC(%n)</a:MapTargetItem.Value>
<a:List>TIMESTMP(10)
DECIMAL(5)
FLOAT(8)
FLOAT(4)
VARG(%n)
</a:List>
</o:MapTargetItem>
<o:MapTargetItem Id="o212">
<a:Name>PhysOdbcDataType</a:Name>
<a:Comment>Data types translation table from target database data types to ODBC data types.</a:Comment>
<a:MapTargetItem.Value>INT=INTEGER
DEC=DECIMAL
DEC(%n)=DECIMAL(%n)
DEC(%s,%p)=DECIMAL(%s,%p)
CHARACTER VARYING=VARCHAR
CHARACTER VARYING(%n)=VARCHAR(%n)</a:MapTargetItem.Value>
<a:List>INT
DEC
DEC(%n)
DEC(%s,%p)
CHARACTER VARYING
CHARACTER VARYING(%n)
</a:List>
</o:MapTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:TargetCategory Id="o213">
<a:Name>Odbc</a:Name>
<a:Comment>DBMS characteristics, command definition, and data type translations for the ODBC generation and reverse engineering</a:Comment>
<c:Categories>
<o:TargetCategory Id="o214">
<a:Name>Objects</a:Name>
<c:Categories>
<o:TargetCategory Id="o215">
<a:Name>Qualifier</a:Name>
<a:Comment>Manages the use of qualifier in ODBC reverse engineering</a:Comment>
<c:Categories>
<o:BooleanTargetItem Id="o216">
<a:Name>Enable</a:Name>
<a:Comment>Allows using the qualifier combo box during ODBC reverse engineering</a:Comment>
<a:Value>1</a:Value>
</o:BooleanTargetItem>
<o:TextTargetItem Id="o217">
<a:Name>SqlListQuery</a:Name>
<a:TextTargetItem.Value>select name from sysibm.sysdatabase
where 1=1
[and name = %.q:CATALOG%]</a:TextTargetItem.Value>
<a:Comment>Query to retrieve qualifier during ODBC reverse engineering</a:Comment>
</o:TextTargetItem>
<o:StringTargetItem Id="o218">
<a:Name>Label</a:Name>
<a:Comment>Label for &lt;All&gt; in qualifier selection list</a:Comment>
<a:StringTargetItem.Value>All databases</a:StringTargetItem.Value>
</o:StringTargetItem>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
<o:ProfileTargetItem Id="o219">
<a:Name>Profile</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o220">
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o221">
<a:TypePublicName>ExtendedAttributeTypeTargetItem</a:TypePublicName>
<a:Name>Extended Attribute Types</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTypeTargetItem Id="o222">
<a:ObjectID>93F56B67-A981-4A39-920A-4806B5CDC2A8</a:ObjectID>
<a:Name>T_ExtTablespaceType</a:Name>
<a:Comment>LARGE Identifies that each partition of a partitioned table space has a maximum partition size of 4 GB, which enables the table space to contain more than 64GB of data.
</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTypeTargetItem.ListOfValues>large</a:ExtendedAttributeTypeTargetItem.ListOfValues>
</o:ExtendedAttributeTypeTargetItem>
<o:ExtendedAttributeTypeTargetItem Id="o223">
<a:ObjectID>57E09460-3A76-45DD-B2D0-9F854E129243</a:ObjectID>
<a:Name>T_ForData</a:Name>
<a:Comment>Subtype of columns:
SBCS  Column holds single-byte data.
MIXED Column holds mixed data.
BIT   Column holds BIT data.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTypeTargetItem.ListOfValues>sbcs
bit
mixed</a:ExtendedAttributeTypeTargetItem.ListOfValues>
</o:ExtendedAttributeTypeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:TargetCategory>
<o:MetaClassTargetItem Id="o224">
<a:Name>Index</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o225">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o226">
<a:ObjectID>5325B10C-3035-4B4B-B248-E60450D4DFEE</a:ObjectID>
<a:Name>WhereNotNull</a:Name>
<a:Comment>Apply on unique indexes, specify that the uniqueness constraint does not apply to the key value if any column of the key is null.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o227">
<a:Name>Key</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o228">
<a:TypePublicName>CustomCheckTargetItem</a:TypePublicName>
<a:Name>Custom Checks</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CustomCheckTargetItem Id="o229">
<a:Name>Key index existence</a:Name>
<a:Comment>The execution of this check depends on the value of the PKAutoIndex (resp. UniqueAutoIndex) item in the PKey (resp. Key) category.
If AutoIndex is set to True, the check is not executed. Else, the check ensures that an index exists for that key (index can be attached, or with exact same column list).</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensures that an index exists for all keys.</a:HelpMessage>
<a:OutputMessage>The following keys do not have an index attached:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   dim bAutoIndex
   if (obj.Primary) then
      bAutoIndex = GetBooleanItem(&quot;Script\Objects\PKey\PkAutoIndex&quot;)
   else
      bAutoIndex = GetBooleanItem(&quot;Script\Objects\Key\UniqConstAutoIndex&quot;)
   end if
   if (bAutoIndex) then
      &#39; If autoIndexed, then we don&#39;t need to check existence of 
      &#39; index as it will not be generated anyway
      %Check% = True
      Exit function
   end if
   &#39; else, we must have an index !
   if (obj.Indexes.Count &gt; 0) then
      %Check% = True
      Exit function
   end if
   &#39; If no attached index, then seek for existing index with same columns
   dim kColList, pCol, pIndex, iColList, kColCount
   kColList = &quot;&quot;
   kColCount = obj.Columns.Count
   For each pCol in obj.Columns
      kColList = kColList &amp; &quot;\&quot; &amp; pCol.ObjectID
   next
   For each pIndex in obj.Table.Indexes
      if (pIndex.IndexColumns.Count = kColCount) then
      &#39; only loop on index having same number of column than key.
         iColList = &quot;&quot;
         For each pCol in pIndex.IndexColumns
            iColList = iColList &amp; &quot;\&quot; &amp; pCol.Column.ObjectID
         next
         if (iColList = kColList) then
            %Check% = True
            Exit Function
         end if
      end if
   next
   &#39; not found
   %Check% = False
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o230">
<a:Name>Reference</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o231">
<a:TypePublicName>CustomCheckTargetItem</a:TypePublicName>
<a:Name>Custom Checks</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CustomCheckTargetItem Id="o232">
<a:Name>Reflexive and restrict on delete reference</a:Name>
<a:Comment>DB2 does not allow creating reflexive reference with delete restrict referential integrity.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensures that referential integrity of reflexive references is not Restrict on delete.</a:HelpMessage>
<a:OutputMessage>The following reflexive references must not be declared as Restrict on delete:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   if (obj.DeleteConstraint = 1) then &#39; 1 is for Restrict
      &#39; Return (!reflexive) state of the reference.
      %Check% = not(obj.ChildTable is obj.ParentTable)
   else
      %Check% = True &#39; not a delete restrict
   end if
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   outmsg = &quot;Automatic correction sets the Delete action of referential integrity to No action (&lt;None&gt;)&quot;
   obj.DeleteConstraint = 0
   %Fix% = True
End Function</a:AutoFixScrpt>
<a:EnableAutoFix>1</a:EnableAutoFix>
</o:CustomCheckTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o233">
<a:Name>Column</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o234">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o235">
<a:ObjectID>1EE05F64-F2BA-4D49-8EF4-6FFAB44317BE</a:ObjectID>
<a:Name>ExtData</a:Name>
<a:Comment>Specifies a subtype for a character string column;that is,for a column with a data type of CHAR,VARCHAR,or LONG VARCHAR.
Subtype can be one of the list defined in extended attribute type T_ForData.
</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>-1</a:ExtendedAttributeTargetItem.DataType>
<c:ExtendedAttributeType>
<o:ExtendedAttributeTypeTargetItem Ref="o223"/>
</c:ExtendedAttributeType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o236">
<a:ObjectID>7FE46091-AE4F-4ED6-8ABF-B56C32BB852E</a:ObjectID>
<a:Name>ExtFieldProcName</a:Name>
<a:Comment>This extended attribute defines the potential field procedure to be used by DB2 as generator/cryptor of values.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o237">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:Name>Forms</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o238">
<a:Name>DB2</a:Name>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Name=&quot;ExtData&quot; Caption=&quot;Character subtype&quot; Attribute=&quot;ExtData&quot; AttributeID=&quot;{9FF41CCF-1052-4F9C-BD08-2B2F670ED5B6}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
   &lt;ExtendedAttribute Name=&quot;ExtFieldProcName&quot; Caption=&quot;Field procedure name&quot; Attribute=&quot;ExtFieldProcName&quot; AttributeID=&quot;{DA5CB4C7-220F-4122-B628-3B157B7B6A9D}&quot; GrayHiddenAttributes=&quot;Yes&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o239">
<a:Name>Table</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o240">
<a:TypePublicName>CustomCheckTargetItem</a:TypePublicName>
<a:Name>Custom Checks</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CustomCheckTargetItem Id="o241">
<a:Name>Physical Option Conflict</a:Name>
<a:Comment>Checking that physical options are correct for the database. An error occurs when both tablespace and database options are used by the same table.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensures that no conflict is detected in table physical options</a:HelpMessage>
<a:OutputMessage>The following tables do not have consistent physical options:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   if (obj.PhysicalOptions &lt;&gt; &quot;&quot;) then
      dim OptsText, InPos, InDBPos
      OptsText = lcase(Replace(obj.PhysicalOptions, vbCrLf, &quot; &quot;))
      InPos = instr(OptsText, &quot;in &quot;)
      InDBPos = instr(OptsText, &quot;in database &quot;)
      if ((InPos &lt;&gt; 0) and (InDBPos &lt;&gt; 0) and (InDBPos &lt;&gt; InPos)) then
         %Check% = False
         exit function
      end if
   end if
   %Check% = True
End Function</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Implement your automatic correction on &lt;obj&gt; here
   &#39; filling &lt;outmsg&gt; as you wish
   &#39; and return True if successful.

   outmsg = &quot;Automatic correction not implemented&quot;

   %Fix% = False
End Function</a:AutoFixScrpt>
</o:CustomCheckTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o242">
<a:Name>Tablespace</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o243">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:Name>Extended Attributes</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o244">
<a:ObjectID>90D9D1AC-EAE6-467B-A861-57C754B5E26F</a:ObjectID>
<a:Name>ExtTablespaceType</a:Name>
<a:Comment>Specify Tablespace Type. See type description on Extended Attribute Type T_ExtTablespaceType comment.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>-1</a:ExtendedAttributeTargetItem.DataType>
<c:ExtendedAttributeType>
<o:ExtendedAttributeTypeTargetItem Ref="o222"/>
</c:ExtendedAttributeType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o245">
<a:ObjectID>B9DAADC5-5B66-4095-BFC5-6435AF92E334</a:ObjectID>
<a:Name>TbspDatabase</a:Name>
<a:Comment>Owning database. See template description.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>%getTbspDatabase%</a:ExtendedAttributeTargetItem.Value>
<a:Template>1</a:Template>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o246">
<a:TypePublicName>TemplateTargetItem</a:TypePublicName>
<a:Name>Templates</a:Name>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TemplateTargetItem Id="o247">
<a:Name>getTbspDatabase</a:Name>
<a:TemplateTargetItem.Value>.set_value(RetVal, &quot;&quot;)
.foreach_item(Databases)
.if(%RetVal% == &quot;&quot;)
.if(%IsShortcut%)
.set_value(RetVal, %Shortcut.Code%)
.else
.set_value(RetVal, %Code%)
.endif
.endif
.next()
%RetVal%</a:TemplateTargetItem.Value>
<a:Comment>Retrieve the code of the database that owns the current tablespace. Only take first item of what should be a single-valued collection.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
</c:Categories>
</o:ProfileTargetItem>
</c:Categories>
</o:DBMS>

</DBMS>
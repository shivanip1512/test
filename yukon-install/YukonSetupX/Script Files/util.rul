//constants
#define PORTER_NAME		"Yukon Port Control Service"
#define SCANNER_NAME	"Yukon Real-Time Scan Service"
#define MACS_NAME		"Yukon MAC Scheduler Service"
#define LM_NAME			"Yukon Load Management Service"
#define FDR_NAME		"Yukon Foreign Data Service"
#define DISPATCH_NAME	"Yukon Dispatch Service"
#define CC_NAME			"Yukon Cap Control Service"
#define CALC_NAME		"Yukon Calc-Logic Service"
#define WEB_NAME		"YukonWebApplicationService"
#define NOTIF_NAME		"YukonNotificationServer"
#define SM_NAME			"YukonServiceMgr"
#define BROKER_NAME     "YukonMessageBroker"
#define WATCHDOG_NAME   "YukonWatchdogService"
#define SYS32			"C:\\WINDOWS\\System32\\"
#define TOMCAT_REG_KEY	"SOFTWARE\\Wow6432Node\\Apache Software Foundation\\Procrun 2.0\\YukonWebApplicationService\\Parameters\\Java"
#define JVM_MX			"JvmMx"
#define JVM_MS          "JvmMs"
#define JVM_OPTIONS		"Options"
#define JAVA_CALC_HIST  "CalcHist"
#define IncludeLogs		1303
#define DirectoryName	715
#define WEB_SERVER_LOG_NAME       "Webserver"
#define NOTIF_SRV_LOG_NAME        "NotificationServer"
#define SERVICE_MGR_LOG_NAME      "ServiceManager"
#define MSG_BROKER_LOG_NAME       "MessageBroker"
#define EIM_SRV_LOG_NAME          "WebServices"
#define DB_EDITOR_LOG_NAME        "DBEditor"
#define COMMANDER_LOG_NAME        "Commander"
#define TRENDING_LOG_NAME         "Trending"
#define TDC_LOG_NAME              "TDC"
#include "BackupSelectionDialog.rul"

//global variable used to store service settings across the upgrade process
string sServiceSettings(13);
number nTomcatSettingsExist;

//-------------------------------------------------------
// Helper function to build up a list of the Yukon
// service names in the provided string array.
//-------------------------------------------------------
export prototype void PopulateServiceNameList(BYREF VARIANT); //array parameters must
function void PopulateServiceNameList(sServiceNameArray) //be prototyped as VARIANT
begin
	//if the array is too small, increase the size
	if(SizeOf(sServiceNameArray) < 13) then
		Resize(sServiceNameArray, 13);
	endif;
	//populate
	sServiceNameArray(0) = SCANNER_NAME;
	sServiceNameArray(1) = MACS_NAME;
	sServiceNameArray(2) = LM_NAME;
	sServiceNameArray(3) = FDR_NAME;
	sServiceNameArray(4) = DISPATCH_NAME;
	sServiceNameArray(5) = CC_NAME;
	sServiceNameArray(6) = CALC_NAME;
	sServiceNameArray(7) = PORTER_NAME;
	sServiceNameArray(8) = WEB_NAME;
	sServiceNameArray(9) = NOTIF_NAME;
	sServiceNameArray(10) = SM_NAME;
	sServiceNameArray(11) = BROKER_NAME;
	sServiceNameArray(12) = WATCHDOG_NAME;
end;

//-------------------------------------------------------
// Helper function to save current Yukon service
// configurations prior to an upgrade so they can be
// reapplied afterward.
//-------------------------------------------------------
export prototype void SaveServiceSettings();
function void SaveServiceSettings()
number i, nType, nSize, nResult;
string sServiceNameArray(13), sRegKey, sKeyValue;
begin
	PopulateServiceNameList(sServiceNameArray);
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	for i = 0 to (SizeOf(sServiceNameArray)-1)
		if (ServiceExistsService(sServiceNameArray(i))) then
			//get service start values from registry
			sRegKey = "SYSTEM\\CurrentControlSet\\Services\\" + sServiceNameArray(i);
			nResult = RegDBGetKeyValueEx(sRegKey, "Start", nType, sKeyValue, nSize);
			if(nResult < 0) then
				MessageBox ("Unable to save service settings: " + sServiceNameArray(i) + ".", SEVERE);
			endif;
			sServiceSettings(i) = sKeyValue;
		endif;
	endfor;
	RegDBSetDefaultRoot(HKEY_CLASSES_ROOT); //set back to default
end;

//-------------------------------------------------------
// Helper function to apply saved configurations to the
// Yukon services after an upgrade.
//-------------------------------------------------------
export prototype void LoadServiceSettings();
function void LoadServiceSettings()
number i, nResult;
string sServiceNameArray(13), sRegKey, sTemp;
BOOL bEntryFound;
begin
	PopulateServiceNameList(sServiceNameArray);
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	//write service start values to the registry
	for i = 0 to (SizeOf(sServiceNameArray)-1)
		if (ServiceExistsService(sServiceNameArray(i))) then
			sRegKey = "SYSTEM\\CurrentControlSet\\Services\\" + sServiceNameArray(i);
			nResult = RegDBSetKeyValueEx(sRegKey, "Start", REGDB_NUMBER, sServiceSettings(i), -1);
			if(nResult < 0) then
				MessageBox ("Unable to save service settings: " + sServiceNameArray(i) + ".", SEVERE);
			endif;
		endif;
	endfor;
	RegDBSetDefaultRoot(HKEY_CLASSES_ROOT); //set back to default
end;

//-------------------------------------------------------
// Helper function to clean up the version string for the
// currently installed version.  This number is pulled
// from the registry in an odd format.  Version 5.1.2
// initially looks like 5.01.002.  Thus, we need to parse
// it.
//-------------------------------------------------------
export prototype string CleanupInstalledVersionNum();
function string CleanupInstalledVersionNum()
string sOldVersion, sV1, sV2, sV3;
number nTemp;
begin
	sOldVersion = IFX_INSTALLED_VERSION;
	//the first segment is fine
	StrSub(sV1, sOldVersion, 0, 1);
	//convert to number and back to remove leading 0s
	StrSub(sV2, sOldVersion, 2, 2);
	StrToNum(nTemp, sV2);
	NumToStr(sV2, nTemp);
	//rinse and repeat
	StrSub(sV3, sOldVersion, 5, 3);
	StrToNum(nTemp, sV3);
	NumToStr(sV3, nTemp);
	//put it all back together
	sOldVersion = sV1 + "." + sV2 + "." + sV3;
	return sOldVersion;
end;

//-------------------------------------------------------
// Helper function to determine the comparison of product versions
// Return true if installed version is greater than compared version otherwise return false
//-------------------------------------------------------
export prototype BOOL IsInstalledVersionGreater(STRING);
function BOOL IsInstalledVersionGreater(version)
string sOldVersion, sTemp;
number nV1, nV2, nV3, nVer1, nVer2, nVer3;
LIST listID1, listID2;
begin
    sOldVersion = IFX_INSTALLED_VERSION;
    listID1 = ListCreate(STRINGLIST);
    listID2 = ListCreate(STRINGLIST);
    //split version into three version components
    StrGetTokens(listID1, sOldVersion, ".");
    ListGetFirstString(listID1, sTemp);
    StrToNum(nV1, sTemp);
    ListGetNextString(listID1, sTemp);
    StrToNum(nV2, sTemp);
    ListGetNextString(listID1, sTemp);
    StrToNum(nV3, sTemp);
    
    StrGetTokens(listID2, version, ".");
    ListGetFirstString(listID2, sTemp);
    StrToNum(nVer1, sTemp);
    ListGetNextString(listID2, sTemp);
    StrToNum(nVer2, sTemp);
    ListGetNextString(listID2, sTemp);
    StrToNum(nVer3, sTemp);
    
    if(nV1 < nVer1) then
        return FALSE;
    elseif(nV1 > nVer1) then
        return TRUE;
    endif;

    if(nV2 < nVer2) then
        return FALSE;
    elseif(nV2 > nVer2) then
        return TRUE;
    endif;

    if(nV3 <= nVer3) then
        return FALSE;
    else
        return TRUE;
    endif;
   
end;

//----------------------------------------------------------------------------------------
// Helper function to determine the comparison of product versions
// Return true if installed version is lesser than compared version otherwise return false
//----------------------------------------------------------------------------------------
export prototype BOOL IsInstalledVersionLesser(STRING);
function BOOL IsInstalledVersionLesser(version)
string sOldVersion, sTemp;
number nV1, nV2, nV3, nVer1, nVer2, nVer3;
LIST listID1, listID2;
begin
    sOldVersion = IFX_INSTALLED_VERSION;
    listID1 = ListCreate(STRINGLIST);
    listID2 = ListCreate(STRINGLIST);
    //split version into three version components
    StrGetTokens(listID1, sOldVersion, ".");
    ListGetFirstString(listID1, sTemp);
    StrToNum(nV1, sTemp);
    ListGetNextString(listID1, sTemp);
    StrToNum(nV2, sTemp);
    ListGetNextString(listID1, sTemp);
    StrToNum(nV3, sTemp);
    
    StrGetTokens(listID2, version, ".");
    ListGetFirstString(listID2, sTemp);
    StrToNum(nVer1, sTemp);
    ListGetNextString(listID2, sTemp);
    StrToNum(nVer2, sTemp);
    ListGetNextString(listID2, sTemp);
    StrToNum(nVer3, sTemp);

    if(nV1 < nVer1) then
        return TRUE;
    elseif(nV1 > nVer1) then
        return FALSE;
    endif;

    if(nV2 < nVer2) then
        return TRUE;
    elseif(nV2 > nVer2) then
        return FALSE;
    endif;

    if(nV3 < nVer3) then
        return TRUE;
    else
       return FALSE;
    endif;
end;

//-------------------------------------------------------
// Helper function to determine if the user is attempting
// an upgrade on a version that does not support it. 
// Upgrades are only supported when the installed version
// is 5.1.3 or higher.
//-------------------------------------------------------
export prototype BOOL IsUpgradeSupported();
function BOOL IsUpgradeSupported()
begin
    return IsInstalledVersionGreater("5.1.3");
end;

//-------------------------------------------------------
// Helper function to determine if the installed version
// is newer than the version that is attempting to 
// install.
//-------------------------------------------------------
export prototype BOOL IsDowngrade();
function BOOL IsDowngrade()
begin
    return IsInstalledVersionGreater(IFX_PRODUCT_VERSION);
end;

//-------------------------------------------------------
// Helper function to check for any running Yukon 
// services
//-------------------------------------------------------
export prototype BOOL AreYukonServicesRunning();
function BOOL AreYukonServicesRunning()
string sServiceNameArray(13);
number i, nServiceState; 
begin
	PopulateServiceNameList(sServiceNameArray);
	for i = 0 to (SizeOf(sServiceNameArray)-1)
		if(ServiceExistsService(sServiceNameArray(i))) then
			ServiceGetServiceState(sServiceNameArray(i), nServiceState);
			if (nServiceState != SERVICE_STOPPED) then
				//at least one service was not stopped
				return TRUE;
			endif;
		endif;
	endfor;
	//all services were stopped
	return FALSE;
end;

//-------------------------------------------------------
// Helper function to remove java Calc Hist service
//-------------------------------------------------------
export prototype RemoveCalcHist();
function RemoveCalcHist()
begin
    if(ServiceExistsService(JAVA_CALC_HIST)) then
	ServiceRemoveService(JAVA_CALC_HIST);
	endif;
end;

//-------------------------------------------------------
// Helper function to build up a list of the Yukon
// service names in the provided string array.
//-------------------------------------------------------
export prototype void PopulateDirNameList(BYREF VARIANT); //array parameters must
function void PopulateDirNameList(sdirArray) //be prototyped as VARIANT
begin
	//if the array is too small, increase the size
	if(SizeOf(sdirArray) < 4) then
		Resize(sdirArray, 4);
	endif;
	//populate
	sdirArray(0) = "docs";
	sdirArray(1) = "examples";
	sdirArray(2) = "host-manager";
	sdirArray(3) = "manager";
end;

//-------------------------------------------------------
// Helper function to remove WebApp directories
//-------------------------------------------------------
export prototype CleanupTomcatWebapps();
function CleanupTomcatWebapps()
string sDir;
string sdirArray(4);
number i;
begin
	PopulateDirNameList(sdirArray);
    sDir = TARGETDIR ^ "\\Server\\web\\webapps\\";
	
	for i = 0 to (SizeOf(sdirArray)-1)
		DeleteDir(sDir+sdirArray(i), ALLCONTENTS);
	endfor;
end;

//-------------------------------------------------------
// Helper function to modify tomcat connector setting
// and Server shutdown port.
//-------------------------------------------------------
export prototype ModifyTomcatConfigSetting();
function ModifyTomcatConfigSetting()
string sCMD, sProg;
begin
    sProg = "cmd.exe";
    sCMD = "/c " + TARGETDIR ^ "\\Client\\bin\\modifyTomcatConfig.bat";
    LaunchApplication(sProg, sCMD, "", SW_HIDE, 0, LAAW_OPTION_HIDDEN | LAAW_OPTION_WAIT);
end;

//---------------------------------------------------
// Helper function to start or stop the Yukon services.
// TRUE to start services, FALSE to stop them
//---------------------------------------------------
export prototype StartYukonServices(BOOL);
function StartYukonServices(bStart)
string sServiceNameArray(13);
string sCMD;
string sProg;
string svDir;
number i;
begin
	PopulateServiceNameList(sServiceNameArray);
	sCMD = SYS32 + "net.exe";
	
	if(bStart) then
		//start services
		//this may take a moment, so give the user some feedback
		sProg = "cmd.exe";
		sCMD = "/c " + TARGETDIR ^ "\\Server\\bin\\StartYukon.bat";
		svDir = TARGETDIR + "\\Server\\bin";
		LaunchApplication(sProg, sCMD, "", SW_NORMAL, 0, LAAW_OPTION_NOWAIT);
    	return 0;	
	else
	    //stop services
	    SdShowMsg("Stopping Yukon Services.", TRUE);
	    for i = 0 to (SizeOf(sServiceNameArray)-1)
			LaunchApplication(sCMD, "stop \"" + sServiceNameArray(i) +"\"", "", SW_HIDE, 0, LAAW_OPTION_WAIT);
		endfor;
		//get out of "hidden" app-launch mode
		LaunchApplication("", "", "", SW_NORMAL, 0, LAAW_OPTION_WAIT);
	    //hide the popup
	    SdShowMsg("", FALSE);
	    return 0;
	endif;
end;

//------------------------------------------------------------
// Convenience function to stop Yukon services
//------------------------------------------------------------
export prototype StopYukonServices();
function StopYukonServices()
begin
	StartYukonServices(FALSE);
end;

//------------------------------------------------------------
// Helper function that searches the specified file for the
// "search" string and replaces all instances with the 
// "replace" string.
//------------------------------------------------------------
export prototype ReplaceStringInFile(string, string, string);
function ReplaceStringInFile(sFile, sSearch, sReplace)
number nGrepResult, nGrepLineNumber;
string sGrepReturnLine;
begin
	nGrepResult = 1;
	while(nGrepResult >= 0)
		nGrepResult = FileGrep(sFile, sSearch, sGrepReturnLine, nGrepLineNumber, RESTART);
		if(nGrepResult >= 0) then
			StrReplace(sGrepReturnLine, sSearch, sReplace, 0);
			FileInsertLine(sFile, sGrepReturnLine, nGrepLineNumber, REPLACE);
		endif;
	endwhile;
end;

export prototype void SetBlankValueInJvmParams();
function void SetBlankValueInJvmParams()
begin
    //TOMCAT SETTINGS - from registry
    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE); //set registry root
    
    nTomcatSettingsExist = RegDBKeyExist(TOMCAT_REG_KEY);

    if(nTomcatSettingsExist) then
        RegDBSetKeyValueEx(TOMCAT_REG_KEY, JVM_MX, REGDB_STRING, "", -1);
        RegDBSetKeyValueEx(TOMCAT_REG_KEY, JVM_MS, REGDB_STRING, "", -1);
    endif;
    RegDBSetDefaultRoot(HKEY_CLASSES_ROOT); //set back to default
    
end;

//-------------------------------------------------------
// As per YUK-15645, Remove JVM setting while upgrading to 6.5.6 version (or new version ) from lower version.
// Retain the JVM setting while upgrading from 6.5.6 to any other new version.
//-------------------------------------------------------
export prototype void RemoveJvmParams();
function void RemoveJvmParams()
begin
    if(!IsInstalledVersionGreater("6.5.5")) then
        SetBlankValueInJvmParams();
    endif;
end;
//------------------------------------------------------------
// Helper function that permits write access to a file for
// the Users group (essentially everyone).
//------------------------------------------------------------
export prototype AllowWriteAccessForUsers(string);
function AllowWriteAccessForUsers(sFilePath)
number nResult;
begin
	nResult = SetObjectPermissions(sFilePath, IS_PERMISSIONS_TYPE_FILE, "", "Users", 
				FILE_WRITE_DATA|FILE_APPEND_DATA|FILE_WRITE_EA|FILE_WRITE_ATTRIBUTES, 0);
	if(nResult != ISERR_SUCCESS) then
		MessageBox("Error setting file permissions. File: " + sFilePath, WARNING);
	endif;
end;


//------------------------------------------------------------
// Helper function that removes all ActiveMQ folders and caches
// Returns 0 if successful, <0 if not
//------------------------------------------------------------
export prototype number RemoveActiveMQFolders();
function number RemoveActiveMQFolders()
number retVal, nResult;
begin
    retVal = 0;
    //Remove ActiveMQ Client Cache to avoid corruption and upgrade issues
    if(ExistsDir(TARGETDIR ^ "\\Server\\web\\bin\\activemq-data") = EXISTS) then
        nResult = DeleteDir(TARGETDIR ^ "\\Server\\web\\bin\\activemq-data", ALLCONTENTS);
        
        if(nResult != 0) then
            retVal = nResult;
        endif;
    endif;
    
    //Remove ActiveMQ Web Cache to avoid corruption and upgrade issues
    if(ExistsDir(TARGETDIR ^ "\\Client\\bin\\activemq-data") = EXISTS) then
        nResult = DeleteDir(TARGETDIR ^ "\\Client\\bin\\activemq-data", ALLCONTENTS);
        
        if(nResult != 0) then
            retVal = nResult;
        endif;
    endif;
    
    return retVal;
end;

//------------------------------------------------------------
// Helper function that copies all the files from srcDir 
// except for logs folder/files to the specified targetDir
//------------------------------------------------------------
export prototype CopyFiles(string, string);
function CopyFiles(srcDir, targetDir)
NUMBER nResult, searchString, nFound;
STRING sDirectory, logFile, svSubStr, copyDir,compareLogName, clientLog;
LIST listDirs, listID; 
begin
	listDirs = ListCreate (STRINGLIST);
	nResult = FindAllDirs ( srcDir, INCLUDE_SUBDIR, listDirs );
	
	if (nResult == 0) then
		 nResult = ListGetFirstString (listDirs, sDirectory);
			while (nResult != END_OF_LIST)	
			copyDir = "";
			clientLog = srcDir ^ "\Client\\Log\\";
				if(sDirectory == srcDir ^ "\Client\\Log\\" ||
				sDirectory == srcDir ^ "\Server\\Log\\" ||
				sDirectory == srcDir ^ "\Server\\Log\\Comm\\" ||
				sDirectory == srcDir ^ "\Server\\Log\\Debug\\" ||
				sDirectory == srcDir ^ "\Server\\web\\logs\\" ) then
					// Do not copy as it is log folder
				else			
					StrSub(svSubStr, sDirectory, 3,StrLength(sDirectory));
					copyDir = targetDir ^ svSubStr;
					XCopyFile(sDirectory ^ "*.*", copyDir, EXCLUDE_SUBDIR);
				endif;
				nResult = ListGetNextString (listDirs, sDirectory);
			endwhile;
	endif;
end;

//------------------------------------------------------------
// Helper function checks if the date of file is less than
// the input date.
//------------------------------------------------------------
export prototype BOOL compareDates(string, string);
function BOOL compareDates(fileDate, inputDate) 
  NUMBER nResultFile, nResultInput, i, nFileDay, nInputDay, nFileYear, nInputYear, nFileMonth, nInputMonth; 
  STRING sFileDay, sInputDay, sFileYear, sInputYear, sFileMonth, sInputMonth;
  LIST fileDateTokens, inputDateTokens;
 
begin
	
	fileDateTokens = ListCreate (STRINGLIST);
	StrGetTokens(fileDateTokens, fileDate, "\\" );
	
	inputDateTokens = ListCreate (STRINGLIST);
	StrGetTokens(inputDateTokens, inputDate, "\\" );
	
	nResultFile = ListGetFirstString (fileDateTokens, sFileYear);
	nResultInput = ListGetFirstString (inputDateTokens, sInputYear);
	i = 0;
	while(nResultFile != END_OF_LIST || nResultInput != END_OF_LIST) 
		nResultFile = ListGetNextString (fileDateTokens, sFileDay);
		nResultInput = ListGetNextString (inputDateTokens, sInputDay);	
			
		if(i == 0) then
			sFileMonth = sFileDay;
			sInputMonth = sInputDay;
			i++;
		endif;
	endwhile;
		
		StrToNum(nInputYear, sInputYear);
		StrToNum(nInputMonth, sInputMonth);
		StrToNum(nInputDay, sInputDay);	
		StrToNum(nFileYear, sFileYear);
		StrToNum(nFileMonth, sFileMonth);
		StrToNum(nFileDay, sFileDay);	
	
	
		
	if(nFileYear < nInputYear) then
		return FALSE;
	elseif (nFileYear > nInputYear) then
		return TRUE;
	endif;
	
	if(nFileMonth < nInputMonth) then
		return FALSE;
	elseif (nFileMonth > nInputMonth) then
		return TRUE;
	endif;
	
	if(nFileDay >= nInputDay) then
		return TRUE;
	else
		return FALSE;
	endif;	
	
	return TRUE;	
end;


//------------------------------------------------------------
// Helper function copies log files created before the 
// selected date.
//------------------------------------------------------------
export prototype CopyLogs(string, string, string);
function CopyLogs(srcDirectory, targetDirectory, sDateString)
 NUMBER nvDummy, nRes, dateRes;
 STRING sFile, sFileDate;
begin

	nRes = FindAllFiles ( srcDirectory , "*.*" , sFile , RESET );
	while (nRes == 0)
		dateRes = GetFileInfo ( sFile , FILE_DATE , nvDummy , sFileDate );
		if(dateRes == 0) then 
			if(compareDates(sFileDate, sDateString)) then
				XCopyFile(sFile, targetDirectory, EXCLUDE_SUBDIR);
			endif;
		endif;
		nRes = FindAllFiles ( srcDirectory , "*.*" , sFile , CONTINUE );			
	endwhile;
end;

//------------------------------------------------------------
// Helper function to find the numeric date from the 
// string date passed.
//------------------------------------------------------------
export prototype number getSelectedValueInDays(string);
function number getSelectedValueInDays(selectedDate) 
NUMBER nDays, position;
STRING sDays;
begin
	position = StrFindEx(selectedDate, "Days", 0);
	StrSub (sDays, selectedDate, 0, position);
	StrToNum(nDays, sDays);
	return nDays;

end;

//------------------------------------------------------------
// Helper function that returns no of days in a given month.
//------------------------------------------------------------
export prototype  number noOfDaysForMonth(number);
function number noOfDaysForMonth(month)
begin
	switch (month)
	case 1: return 31;
	case 2: return 28;
	case 3: return 31;
	case 4: return 30;
	case 5: return 31;
	case 6: return 30;
	case 7: return 31;
	case 8: return 31;
	case 9: return 30;
	case 10: return 31;
	case 11: return 30;
	case 12: return 31;
	endswitch;
end;
	

//------------------------------------------------------------
// Helper function that calculates the date to be used
// for copying the log files.
//------------------------------------------------------------
export prototype string getLogDate(number);
function string getLogDate(selectedDays) 
number nResult, i;
string sDateString, tempYear, tempMonth, tempDay, sMonth, sDay, sYear,selectDate ;
number systemMonth, systemDay, systemYear, selectMonth, selectDay, selectYear;
LIST systemDateTokens;

begin
	selectedDays = selectedDays - 1;
	GetSystemInfo(DATE, nResult, sDateString);

	systemDateTokens = ListCreate (STRINGLIST);
	StrGetTokens(systemDateTokens, sDateString, "-" );
	nResult = ListGetFirstString (systemDateTokens, sMonth);
	i = 0; 
	while (nResult != END_OF_LIST)
	  nResult = ListGetNextString(systemDateTokens, sYear);
	  if(i=0) then
		sDay = sYear;
	  endif;
	  i = i+1;
    endwhile;
	
	StrToNum(systemDay, sDay);
	StrToNum(systemMonth, sMonth);
	StrToNum(systemYear, sYear);

	if((systemDay - selectedDays) <= 0) then
			selectMonth = systemMonth - 1;
			selectDay = noOfDaysForMonth(selectMonth) + (systemDay - selectedDays);
	else 
		selectDay = systemDay - selectedDays;
		selectMonth = systemMonth;
	endif;
	
	if(selectMonth == 0) then
		selectMonth = 12;
		selectYear = systemYear - 1;
	else 
		selectYear = systemYear;
	endif;

	NumToStr(tempYear, selectYear);
	NumToStr(tempMonth, selectMonth);
	NumToStr(tempDay, selectDay);	 
	selectDate = tempYear ^ "\\" ^ tempMonth ^ "\\" ^ tempDay;
	return selectDate;
end;

//------------------------------------------------------------
// Helper function that creates a backup of the current
// TARGETDIR in a location chosen by the user.
//------------------------------------------------------------
export prototype BackupTargetDir();
function BackupTargetDir()
string sDir, sDateString, sTimeString, svCurSel, logDate;
number nResult, nState, nDays;
BOOL bDone;
begin
    nResult = BackupSelectionDialog( );
    nState = CtrlGetState("BackupSelectionDialog", IncludeLogs);
	CtrlGetText("BackupSelectionDialog", DirectoryName , sDir);
	
	if(nResult = NEXT) then
		//disable cancel, because documentation says bad things can happen 
		//if you cancel in the middle of copying
		Disable(CANCELBUTTON);
		//disable logging so the backup isn't touched by uninstall
		Disable(LOGGING);
		SRCDIR = TARGETDIR;
		GetSystemInfo(DATE, nResult, sDateString);
		GetSystemInfo(TIME, nResult, sTimeString);
		StrReplace(sTimeString, ":", "", 0); 
		sDir = sDir + "\\YukonBackup" + sDateString + "_" + sTimeString;
		SdShowMsg("Backing up Yukon files. This may take a while.", TRUE);
		CreateDir(sDir);
		CopyFiles(SRCDIR, sDir);
		if(nState == BUTTON_CHECKED) then
			CtrlGetCurSel ("BackupSelectionDialog", Duration, svCurSel);
			nDays = getSelectedValueInDays(svCurSel);
			logDate = getLogDate(nDays);
			CopyLogs(SRCDIR ^ "Client\\Log", sDir ^ "Yukon\\Client\\Log", logDate);
			CopyLogs(SRCDIR ^ "Server\\Log", sDir ^ "Yukon\\Server\\Log", logDate);
			CopyLogs(SRCDIR ^ "Server\\web\\logs", sDir ^ "Yukon\\Server\\web\\logs", logDate);
			CopyLogs(SRCDIR ^ "Server\\Log\\Comm", sDir ^ "Yukon\\Server\\Log\\Comm", logDate);
			CopyLogs(SRCDIR ^ "Server\\Log\\Debug", sDir ^ "Yukon\\Server\\Log\\Debug", logDate);
		endif;
		//this could be improved by zipping the backup
		SdShowMsg("", FALSE);
		Enable(LOGGING);
		Enable(CANCELBUTTON);
		return NEXT;
	else
	return BACK;
	endif;
end;

//---------------------------------------------------------------
//Helper function that deletes all files in a specified directory
//with a specified file extension.
//---------------------------------------------------------------
export prototype DeleteFilesOfType(string, string);
function DeleteFilesOfType(sDirectory, sExtension)
number nResult;
string sSearchString;
begin
	sSearchString = "*." + sExtension;
	nResult = DeleteFile(sDirectory ^ sSearchString); 
	if(nResult < 0) then
		MessageBox("Error deleting files of type \"" + sSearchString + "\" in directory \"" + sDirectory + ". Old files may still be present.", WARNING);
	endif;
end;

//-------------------------------------------------------
// Helper function to clean up the version string for the
// installed version passed as the parameter.  Version 5.1.2
// initially looks like 5.01.002.  Thus, we need to parse
// it.
//-------------------------------------------------------
export prototype string CleanupVersionNum(string);
function string CleanupVersionNum(versionNumber)
string sV1, sV2, sV3;
number nTemp;
begin
	
	//the first segment is fine
	StrSub(sV1, versionNumber, 0, 1);
	//convert to number and back to remove leading 0s
	StrSub(sV2, versionNumber, 2, 2);
	StrToNum(nTemp, sV2);
	NumToStr(sV2, nTemp);
	//rinse and repeat
	StrSub(sV3, versionNumber, 5, 3);
	if (sV3 != '') then
		StrToNum(nTemp, sV3);
		NumToStr(sV3, nTemp);
	else 
		sV3 = '0';
	endif;
	//put it all back together
	versionNumber = sV1 + "." + sV2 + "." + sV3;
	return versionNumber;
end;

//--------------------------------------------------------------------------------------
//Helper function to install MessageBroker Service (while upgrading from 6.5.* to 6.6.*)
//--------------------------------------------------------------------------------------
export prototype InstallMessageBroker();
function InstallMessageBroker()
string sProg, sCMD, svDir;
begin

	sProg = "cmd.exe";
	sCMD = "/c java -jar " + TARGETDIR ^ "\\Client\\bin\\wrapper.jar" + " -i " + TARGETDIR ^ "\\Client\\bin\\yukonmessagebroker.conf";
	svDir = TARGETDIR + "\\Runtime\\bin";
	LaunchApplication(sProg, sCMD, svDir, SW_HIDE, 0, LAAW_OPTION_HIDDEN | LAAW_OPTION_WAIT);
end;

//--------------------------------------------------------------------------------------
//Helper function to install Watchdog Service (while upgrading from version < 7.1.0)
//--------------------------------------------------------------------------------------
export prototype InstallWatchdogService();
function InstallWatchdogService()
string sProg, sCMD, svDir;
begin

    sProg = "cmd.exe";
    sCMD = "/c java -jar " + TARGETDIR ^ "\\Client\\bin\\wrapper.jar" + " -i " + TARGETDIR ^ "\\Client\\bin\\watchdog.conf";
    svDir = TARGETDIR + "\\Runtime\\bin";
    LaunchApplication(sProg, sCMD, svDir, SW_HIDE, 0, LAAW_OPTION_HIDDEN | LAAW_OPTION_WAIT);
end;


//---------------------------------------------------------------------------
// Workaround method to get these installed on upgrades. Note this matches what is configured
// in the standard install UI, so there is no matching manual uninstall script as the 
// uninstall already knows how to remove these files.
//--------------------------------------------------------------------------- 
export prototype InstallStartStopServicesShortcuts();
function InstallStartStopServicesShortcuts()
string startCommandLine, stopCommandLine, workingDir, iconPath;
begin
	startCommandLine = TARGETDIR ^ "\\Server\\bin\\StartYukon.bat";
	stopCommandLine = TARGETDIR ^ "\\Server\\bin\\StopYukon.bat";
	iconPath = TARGETDIR ^ "\\Client\\bin\\YukonLogin.ico";
	
	AddFolderIcon ( FOLDER_PROGRAMS ^ "Yukon Client", "Start Yukon", startCommandLine, "", iconPath, 0, "", NULL);
	AddFolderIcon ( FOLDER_PROGRAMS ^ "Yukon Client", "Stop Yukon", stopCommandLine, "", iconPath, 0, "", NULL);
	
	AddFolderIcon ( FOLDER_DESKTOP ^ "Yukon Service Control", "Start Yukon", startCommandLine, "", iconPath, 0, "", NULL);
	AddFolderIcon ( FOLDER_DESKTOP ^ "Yukon Service Control", "Stop Yukon", stopCommandLine, "", iconPath, 0, "", NULL);
end;

//---------------------------------------------------------------------------
// Remove old Yukon Debug Servers folder from desktop. Needed for upgrades.
//--------------------------------------------------------------------------- 
export prototype RemoveOldDesktopDebugServers();
function RemoveOldDesktopDebugServers()
begin
	DeleteDir( FOLDER_DESKTOP ^ "Yukon Debug Servers", ALLCONTENTS);
end;

//-------------------------------------------------------------------
// Helper function to convert date format from MM-DD-YYYY to YYYYMMDD 
//-------------------------------------------------------------------
export prototype string FormatDatePattern(string);
function string FormatDatePattern(dateString) 
number nResult, i;
string tempDay, tempMonth, sDay, sMonth, sYear, formattedDate;
LIST systemDateTokens;
begin
    systemDateTokens = ListCreate (STRINGLIST);
    StrGetTokens(systemDateTokens, dateString, "-" );
    nResult = ListGetFirstString (systemDateTokens, tempMonth);
    i = 0; 
    while (nResult != END_OF_LIST)
      nResult = ListGetNextString(systemDateTokens, sYear);
        if(i=0) then
          tempDay = sYear;
        endif;
      i = i+1;
    endwhile;
    // If day is single digit ,append 0 before day string
    if(StrLength(tempDay) = 1) then
      sDay = "0" + tempDay;
    else 
      sDay = tempDay;
    endif;
    // If month is single digit, append 0 before month string
    if(StrLength(tempMonth) = 1) then
      sMonth = "0" + tempMonth;
    else 
      sMonth = tempMonth;
    endif;
    formattedDate = sYear + sMonth + sDay;
    return formattedDate;
end;

//--------------------------------------------------------------------------------
// Check if backup files for yukonlogging.xml and remoteLogging.xml
// are present inside Yukon\\Server\\Config\\Backup\\ directory.
// Return true only if both files are present.
//--------------------------------------------------------------------------------
export prototype BOOL CheckForBackUpFiles();
function BOOL CheckForBackUpFiles()
string svResult;
BOOL bResult1, bResult2;
begin
// Go to the backup location and check for the config files
if (FindFile (TARGETDIR + "\\Server\\Config\\Backup\\", "yukonLogging_" + "*.*", svResult ) < 0) then 
    bResult1 = FALSE;
else 
   bResult1 = TRUE;
endif;
if (FindFile (TARGETDIR + "\\Server\\Config\\Backup\\", "remoteLogging_" + "*.*", svResult ) < 0) then 
   bResult2 = FALSE;
else 
   bResult2 = TRUE;
endif;
return bResult1 & bResult2;
end;

//--------------------------------------------------------------------------------
// Rename old yukonlogging.xml and remoteLogging.xml files (based on passed suffix)
// and take backup in Yukon\\Server\\Config\\Backup\\. 
// Also remove old files from Yukon\\Server\\config directory
//--------------------------------------------------------------------------------
export prototype BackupLoggingConfigFiles(string);
function BackupLoggingConfigFiles(suffix)
string szFile;
begin
    Disable(LOGGING);
    CopyFile(TARGETDIR + "\\Server\\Config\\yukonLogging.xml", TARGETDIR + "\\Server\\Config\\Backup\\yukonLogging_" + suffix + ".xml");
    CopyFile(TARGETDIR + "\\Server\\Config\\remoteLogging.xml", TARGETDIR + "\\Server\\Config\\Backup\\remoteLogging_" + suffix + ".xml");
    Enable(LOGGING);
    // Delete old yukonLogging and remoteLogging files.
    szFile = TARGETDIR ^ "\\Server\\Config\\yukonLogging.xml";
    DeleteFile ( szFile );
    szFile = TARGETDIR ^ "\\Server\\Config\\remoteLogging.xml";
    DeleteFile ( szFile );
end;

//--------------------------------------------------------------------------------
// Helper function to build up a list of the Yukon java
// services And Yukon clients application names in the provided string array.
//--------------------------------------------------------------------------------
export prototype void PopulateJavaServiceAndClientNameList(BYREF VARIANT); //array parameters must
function void PopulateJavaServiceAndClientNameList(javaLogNamesArray) //be prototyped as VARIANT
begin
    //if the array is too small, increase the size
    if(SizeOf(javaLogNamesArray) < 9) then
        Resize(javaLogNamesArray, 9);
    endif;
    //populate
    javaLogNamesArray(0) = WEB_SERVER_LOG_NAME;
    javaLogNamesArray(1) = NOTIF_SRV_LOG_NAME;
    javaLogNamesArray(2) = SERVICE_MGR_LOG_NAME;
    javaLogNamesArray(3) = MSG_BROKER_LOG_NAME;
    javaLogNamesArray(4) = EIM_SRV_LOG_NAME;
    javaLogNamesArray(5) = DB_EDITOR_LOG_NAME;
    javaLogNamesArray(6) = COMMANDER_LOG_NAME;
    javaLogNamesArray(7) = TRENDING_LOG_NAME;
    javaLogNamesArray(8) = TDC_LOG_NAME;
end;

//--------------------------------------------------------------------------------
// Rename Installation day java services and client logs files.
// We have to do this , as after log4j2 changes we will have current day logging file as "ApplicationName.log" 
// file , and after rollover it will create a file with "ApplicationName_yyyyMMdd.log" file which will delete 
// the existing current day "ApplicationName_yyyyMMdd.log" logging file which was present before installing the
// 7.1.0 yukon version.
// For eg. On Installation day we have log file for service manager as ServiceManager_yyyyMMdd.log format
// than that file will be renamed as ServiceManager_0_yyyyMMdd.log file . 
//--------------------------------------------------------------------------------
export prototype void RenameInstalledDateJavaServicesAndClientLog(string);
function void RenameInstalledDateJavaServicesAndClientLog(formattedDateString)
number nCount;
string sJavaLogNamesArray(9), sLogPath, sResult;
begin
        PopulateJavaServiceAndClientNameList(sJavaLogNamesArray);
        sLogPath = TARGETDIR + "\\Server\\Log\\";
        for nCount = 0 to (SizeOf(sJavaLogNamesArray)-1)
           if (FindFile (sLogPath, sJavaLogNamesArray(nCount) + "_" + formattedDateString + ".log", sResult ) == 0) then
                RenameFile (sLogPath + sJavaLogNamesArray(nCount) + "_" + formattedDateString + ".log", sLogPath + sJavaLogNamesArray(nCount) + "_0" + "_" + formattedDateString + ".log" );
           endif;
        endfor;
end;

////////////////////////////////////////////////////////////////////////////////
//
//  File Name:  Setup.rul
//
//  Description:    InstallShield script
//
//  Comments:   This script was generated based on the selections you made in
//              the Project Wizard.  Refer to the help topic entitled "Modify
//              the script that the Project Wizard generates" for information
//              on possible next steps.
//
////////////////////////////////////////////////////////////////////////////////

// Include header files

#include "ifx.h"
#include "ComponentEvents.rul"
#include "featureevents.rul"

////////////////////// string defines ////////////////////////////

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----


    // your script function prototypes
    // your global variables

STRING uninstallName;
STRING svSetupType;

//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIBefore
//
//  EVENT:      FirstUIBefore event is sent when installation is run for the first
//              time on given machine. In the handler installation usually displays
//              UI allowing end user to specify installation parameters. After this
//              function returns, ComponentTransferData is called to perform file
//              transfer.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    number  nResult, nSetupType;
    string  szDir;
    string  szfolder;
    string  szComponents, szTargetdir;
    number  nLevel;
    LIST    listStartCopy;
    string  szTargetPath;
    number  nvSize;
   	
number nvSize2, nvType, nvResult, backupVer, stSize, verCon, dirCreate;
string szName, keyValue, minVersion, szDeleteDir;
STRING szTitle2, szFormat, szString, java_home;

string szKey2, szName2, szEnv; 
pointer pEnv;

string szCmdLine, szPath, szKey, szTitle, szMsg, szMsg2, szTextCont, szTextIg, szMsgWait;
number dirSearch, foundVal, moveNext;
BOOL bvCheckCont, bvCheckIg; 
 
begin
    
	// TO DO: if you want to enable background, window title, and caption bar title
    //SetTitle( @TITLE_MAIN, 24, WHITE );
    //SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION );
    //Enable( FULLWINDOWMODE );
    //Enable( BACKGROUND );
    //SetColor(BACKGROUND,RGB (0, 128, 128));

    TARGETDIR = "C:\\Yukon";
    szDir = TARGETDIR;
    SHELL_OBJECT_FOLDER = @FOLDER_NAME;

Dlg_Start:

	//removeLegacyShortcuts();

Dlg_SdWelcome:
    nResult = SdWelcome("", "");
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdAskDestPath:
    szTitle = "";
    szMsg   = "";
    nResult = SdAskDestPath( szTitle, szMsg, szDir, 0 );
    TARGETDIR = szDir;
    if (nResult = BACK) goto Dlg_SdWelcome;
    
RegDBSetDefaultRoot ( HKEY_LOCAL_MACHINE );

Dlg_SetupType:
    
	szTargetPath = TARGETDIR;
	nvSize = 0;
	FeatureCompareSizeRequired(MEDIA,szTargetPath,nvSize);
	if (nvSize != 0) then
  		MessageBox( szSdStr_NotEnoughSpace, WARNING );
    	goto Dlg_SetupType;
	endif;

	//we don't bother with install types anymore, always go custom
	nSetupType = CUSTOM;
	svSetupType = "Custom Install";
	//FeatureSetupTypeSet ( szFeatureSource, szSetupType ); 

    //set the system environment variable YUKON_BASE for the good of all
	szName2 = "YUKON_BASE";         
	szKey2 = "\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";
	foundVal = RegDBSetKeyValueEx ( szKey2 , szName2 , REGDB_STRING , '"' + TARGETDIR + '"', -1 );
	//SprintfBox (SEVERE, "Did I find the key?", "%d", foundVal);

	//make sure that the system will be aware of the presence of the new Java path
	szEnv = "Environment";
	pEnv = &szEnv;
	SendMessage ( HWND_BROADCAST , WM_SETTINGCHANGE , 0 , pEnv ); 
 
	RegDBSetDefaultRoot ( HKEY_CLASSES_ROOT );

Dlg_SdComponentTree:
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SdAskDestPath;
    szTitle    = "";
    szMsg      = "";
    szTargetdir = TARGETDIR;
    szComponents = "";
    FeatureSelectItem(MEDIA, "Yukon Client\\ESubstation Editor", FALSE);
    FeatureSelectItem(MEDIA, "Yukon Server\\Client Service Manager", FALSE);  
   
   	nLevel = 2;
    if (svSetupType = "Custom Install") then
            nResult = SdFeatureTree(szTitle, szMsg, szTargetdir, szComponents, nLevel);
            if (nResult = BACK) goto Dlg_SdAskDestPath;
    endif; 
    
HAPPYFUNTIME:
	uninstallJavaFirst = FALSE;
	installJava = FALSE;

	SetDialogTitle(DLG_ASK_OPTIONS, 'Yukon: Java required to proceed');
    
	szPath = TARGETDIR + "\\Runtime\\bin";
	//The magic happy Java check
	RegDBSetDefaultRoot ( HKEY_LOCAL_MACHINE );
	szKey = "\\SOFTWARE\\JavaSoft\\Java Development Kit\\" + JAVAVERSION;
	foundVal = RegDBKeyExist ( szKey );
	dirSearch =  ExistsDir (szPath);
	//Yukon Runtime directory is not found, must need to install JDK there
	if(dirSearch < 0) then 		   
    	//1.4.2_05 is already on this system
    	if(foundVal = 1) then
    		szMsg = 'Yukon needs to install Java Development Kit version ' +JAVAVERSION+', which has been detected in another location.  Please click CONTINUE to allow Yukon to move JDK '+JAVAVERSION+'.';
    		bvCheckCont = TRUE;
    		bvCheckIg = FALSE;
    		moveNext = NEXT;
    		szTextCont = 'Continue';
    		szTextIg = 'Ignore (NOT RECOMMENDED)';
    		moveNext = AskOptions(EXCLUSIVE, szMsg, szTextCont, bvCheckCont, szTextIg, bvCheckIg);
    		//they clicked continue like they should have
    		if(moveNext = NEXT && bvCheckCont) then 
    			uninstallJavaFirst = TRUE;
				installJava = TRUE;
	  		//clicked ignore...that was stupid
	  		else 
 		    	if(moveNext = BACK) then goto Dlg_SdComponentTree;
				endif;
 			endif;    
		//1.4.2_05 was not installed somewhere else
		else
			installJava = TRUE;
			//SprintfBox(INFORMATION, 'One true', '%s', 'One true');
		endif;
	//The Yukon\Runtime directory was found
	else
		//however, no registry entry exists for the 1.4.2_05 JDK, so Runtime must be empty 
		if(foundVal < 0) then
			installJava = TRUE;
		endif;
	endif;
    
	// setup default status
    SetStatusWindow(0, "");
    Enable(STATUSEX);
    StatusUpdate(ON, 100);
    
    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMoving
//
//  EVENT:      Moving event is sent when file transfer is started as a result of
//              ComponentTransferData call, before any file transfer operations
//              are performed.
//
///////////////////////////////////////////////////////////////////////////////
function OnMoving()
    string szAppPath;

begin
    // Set LOGO Compliance Application Path
    // TO DO : if your application .exe is in a subfolder of TARGETDIR then add subfolder
    szAppPath = TARGETDIR;

    // MessageBox(szAppPath, INFORMATION);


    RegDBSetItem(REGDB_APPPATH, szAppPath);

end;


///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMaintUIBefore
//
//  EVENT:      MaintUIBefore event is sent when end user runs installation that
//              has already been installed on the machine. Usually this happens
//              through Add/Remove Programs applet. In the handler installation
//              usually displays UI allowing end user to modify existing installation
//              or uninstall application. After this function returns,
//              ComponentTransferData is called to perform file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function OnMaintUIBefore()
    NUMBER nResult, nType, regSearch, dirSearch2;
    STRING svDir, svResult, szCaption, szPath2;
    string szSrcFile , szTargetFile;
    
    string szPathFile, szName, java_home, szEnv; 
	number fileCounter, nvType, nvSize;
	pointer pEnv;
	
	string szCmdLine, szPath, szKey, szTitle, szMsg, szMsg2, szTextCont, szTextIg, szMsgWait;
	number dirSearch, foundVal, moveNext;
	BOOL bvCheckCont, bvCheckIg; 
	
begin
    // TO DO: if you want to enable background, window title, and caption bar title
    // SetTitle( @TITLE_MAIN, 24, WHITE );
    // SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION );
    // SetColor(BACKGROUND,RGB (0, 128, 128));
    // Enable( FULLWINDOWMODE );
    // Enable( BACKGROUND );

Dlg_Start:
    //removeLegacyShortcuts();
    
    Disable(BACKBUTTON);
    nType = SdWelcomeMaint(szTitle, szMsg, REPAIR);
    Enable(BACKBUTTON);

    if (nType = REMOVEALL) then
        svResult = SdLoadString(IFX_MAINTUI_MSG);
        szCaption = SdLoadString(IFX_ONMAINTUI_CAPTION);
        nResult = SprintfBox(MB_OKCANCEL,szCaption,"%s",svResult);
        if (nResult = IDCANCEL) goto Dlg_Start;
    endif;

    nResult = NEXT;

Dlg_SdComponentTree:
    if (nType = MODIFY) then
        szTitle = "";
        szMsg = "Select any new components you want to install, and clear any existing components that you want to remove.";
        nResult = SdFeatureTree(szTitle, szMsg, TARGETDIR, "", 2);
        if (nResult = BACK) goto Dlg_Start;
    endif;
    
HAPPYFUNTIME:
	uninstallJavaFirst = FALSE;
	installJava = FALSE;

	SetDialogTitle(DLG_ASK_OPTIONS, 'Yukon: Java required to proceed');
    
	szPath = TARGETDIR + "\\Runtime\\bin";
	
	//The magic happy Java check
	RegDBSetDefaultRoot ( HKEY_LOCAL_MACHINE );
	szKey = "\\SOFTWARE\\JavaSoft\\Java Development Kit\\" + JAVAVERSION;
	foundVal = RegDBKeyExist ( szKey );
	dirSearch =  ExistsDir (szPath);
	//Yukon Runtime directory is not found, must need to install JDK there
	if(dirSearch < 0) then 		   
    	//1.4.2_05 is already on this system
    	if(foundVal = 1) then
    		szMsg = 'Yukon needs to install Java Development Kit version ' +JAVAVERSION+', which has been detected in another location.  Please click CONTINUE to allow Yukon to move JDK '+JAVAVERSION+'.';
    		bvCheckCont = TRUE;
    		bvCheckIg = FALSE;
    		moveNext = NEXT;
    		szTextCont = 'Continue';
    		szTextIg = 'Ignore (NOT RECOMMENDED)';
    		moveNext = AskOptions(EXCLUSIVE, szMsg, szTextCont, bvCheckCont, szTextIg, bvCheckIg);
    		//they clicked continue like they should have
    		if(moveNext = NEXT && bvCheckCont) then 
    			uninstallJavaFirst = TRUE;
				installJava = TRUE;
	  		//clicked ignore...that was stupid
	  		else 
 		    	if(moveNext = BACK) then goto Dlg_SdComponentTree;
				endif;
 			endif;    
		//1.4.2_05 was not installed somewhere else
		else
			installJava = TRUE;
			//SprintfBox(INFORMATION, 'One true', '%s', 'One true');
		endif;
	//The Yukon\Runtime directory was found
	else
		//however, no registry entry exists for the 1.4.2_05 JDK, so Runtime must be empty 
		if(foundVal < 0) then
			installJava = TRUE;
		endif;
	endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages(nResult);
    if ((nResult = BACK) && (nType != MODIFY)) goto Dlg_Start;
    if ((nResult = BACK) && (nType = MODIFY)) goto Dlg_SdComponentTree;

    switch(nType)
        case REMOVEALL: FeatureRemoveAll();
        case REPAIR:    FeatureReinstall();
    endswitch;

    // setup default status
    SetStatusWindow(0, "");
    Enable(STATUSEX);
    StatusUpdate(ON, 100);
end;


//---------------------------------------------------------------------------
// OnFileLocked
//
// The OnFileLocked event is called when a file that is in use by another
// application needs to be installed or uninstalled (unless the files are
// in a file group which is marked as as potentially locked or shared in
// this case the file will be installed or uninstalled after reboot.
//
// szFile will contain the full path of the file that is locked when the
// event is called.
//
// The event should return one of the following values:
//
// ERR_IGNORE - The setup should skip installing or uninstalling the file
//				that is locked and continue the file transfer.
//
// ERR_RETRY  - The setup should try to install or uninstall the file again.
//
// ERR_ABORT  - The setup should be aborted.
//
// ERR_PERFORM_AFTER_REBOOT - The file should be installed or uninstalled
//							  after the system is rebooted.
//---------------------------------------------------------------------------
function OnFileLocked(szFile)
begin
	// TODO: Enable this code if you want to show a confirmation dialog box.	
	return SdExceptions(LOCKED, szFile);
	
	// Return ERR_PERFORM_AFTER_REBOOT so that the file will be updated
	// w/o confirmation.
	//return ERR_PERFORM_AFTER_REBOOT;
end;
//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// First Install UI Sequence - After Move Data
//
// The OnFirstUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2, szMsg;
    NUMBER bvOpt1, bvOpt2;
	NUMBER bShowUpdateServiceDlg;
begin

    ShowObjWizardPages(NEXT);
    
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    

	// Set this to true if you have the update service enabled, and if you want to check for updates.
	// Note: the ISUS Starter Edition does not support checking for updates programatically.  So, 
	// only set this to true if you have at least the ISUS Professional Edition.
	bShowUpdateServiceDlg = FALSE;
    
    //{{IS_SCRIPT_TAG(Dlg_SdDinishEx)	
    
    //we don't take kindly to lawdogs around here
    BATCH_INSTALL = FALSE;
    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else
		
		// If the update service is enabled, show finish dialog that includes
		// update check option.
		if( bShowUpdateServiceDlg && ( ENABLED_ISERVICES & SERVICE_ISUPDATE ) ) then

			if( SdFinishUpdateEx( szTitle, szMsg1, szMsg2, szOpt1, szOpt2, TRUE ) ) then

				// Don't check for updates in silent mode.
				if( MODE != SILENTMODE ) then
					UpdateServiceCheckForUpdates( "", FALSE );
				endif;

			endif;

		else
			SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
		endif;

    endif;
    //}}IS_SCRIPT_TAG(Dlg_SdDinishEx)
    
    if(setupIsNeeded) then
    	szMsg = "To configure Yukon for the first time, please follow the Yukon Setup shortcut on your desktop.";
    	MessageBox ( szMsg , INFORMATION );
    endif;
 
    	
end;
 

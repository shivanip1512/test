////////////////////////////////////////////////////////////////////////////////
//
//  File Name:  Setup.rul
//
//  Description:    InstallShield script
//
//  Comments:   This script was generated based on the selections you made in
//              the Project Wizard.  Refer to the help topic entitled "Modify
//              the script that the Project Wizard generates" for information
//              on possible next steps.
//
////////////////////////////////////////////////////////////////////////////////

// Include header files

#include "ifx.h"
#include "ComponentEvents.rul"
#include "featureevents.rul"

////////////////////// string defines ////////////////////////////

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----
prototype Shell32.SHChangeNotify(LONG, LONG, POINTER, POINTER);

    // your script function prototypes
    // your global variables

STRING uninstallName;
STRING svSetupType;

//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIBefore
//
//  EVENT:      FirstUIBefore event is sent when installation is run for the first
//              time on given machine. In the handler installation usually displays
//              UI allowing end user to specify installation parameters. After this
//              function returns, ComponentTransferData is called to perform file
//              transfer.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    number  nResult, nSetupType;
    string  szDir;
    string  szfolder;
    string  szComponents, szTargetdir;
    number  nLevel;
    LIST    listStartCopy;
    string  szTargetPath;
    number  nvSize;
   	
number nvSize2, nvType, nvResult, backupVer, stSize, verCon, dirCreate;
string szName, keyValue, minVersion, szDeleteDir;
STRING szTitle2, szFormat, szString, java_home;

string szKey2, szName2, szEnv; 
pointer pEnv;

string szCmdLine, szPath, szKey, szTitle, szMsg, szMsg2, szTextCont, szTextIg, szMsgWait;
number dirSearch, foundVal, moveNext;
BOOL bvCheckCont, bvCheckIg; 
 
begin
    
	// TO DO: if you want to enable background, window title, and caption bar title
    //SetTitle( @TITLE_MAIN, 24, WHITE );
    //SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION );
    //Enable( FULLWINDOWMODE );
    //Enable( BACKGROUND );
    //SetColor(BACKGROUND,RGB (0, 128, 128));

    TARGETDIR = "C:\\Yukon";
    szDir = TARGETDIR;
    SHELL_OBJECT_FOLDER = @FOLDER_NAME;

Dlg_Start:

	//removeLegacyShortcuts();

Dlg_SdWelcome:
    nResult = SdWelcome("", "");
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdAskDestPath:
    szTitle = "";
    szMsg   = "";
    nResult = SdAskDestPath( szTitle, szMsg, szDir, 0 );
    TARGETDIR = szDir;
    if (nResult = BACK) goto Dlg_SdWelcome;
    
RegDBSetDefaultRoot ( HKEY_LOCAL_MACHINE );

Dlg_SetupType:
    
	szTargetPath = TARGETDIR;
	nvSize = 0;
	FeatureCompareSizeRequired(MEDIA,szTargetPath,nvSize);
	if (nvSize != 0) then
  		MessageBox( szSdStr_NotEnoughSpace, WARNING );
    	goto Dlg_SetupType;
	endif;

	//we don't bother with install types anymore, always go custom
	nSetupType = CUSTOM;
	svSetupType = "Custom Install";
	//FeatureSetupTypeSet ( szFeatureSource, szSetupType ); 

    //set the system environment variable YUKON_BASE for the good of all
	szName2 = "YUKON_BASE";         
	szKey2 = "\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";
	foundVal = RegDBSetKeyValueEx ( szKey2 , szName2 , REGDB_STRING , '"' + TARGETDIR + '"', -1 );
	//SprintfBox (SEVERE, "Did I find the key?", "%d", foundVal);

	//make sure that the system will be aware of the presence of the new Java path
	szEnv = "Environment";
	pEnv = &szEnv;
	SendMessage ( HWND_BROADCAST , WM_SETTINGCHANGE , 0 , pEnv ); 
 
	RegDBSetDefaultRoot ( HKEY_CLASSES_ROOT );

Dlg_SdComponentTree:
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SdAskDestPath;
    szTitle    = "";
    szMsg      = "";
    szTargetdir = TARGETDIR;
    szComponents = "";
    FeatureSelectItem(MEDIA, "Yukon Client\\ESubstation Editor", FALSE);
    FeatureSelectItem(MEDIA, "Yukon Server\\Client Service Manager", FALSE);  
   
   	nLevel = 2;
    if (svSetupType = "Custom Install") then
            nResult = SdFeatureTree(szTitle, szMsg, szTargetdir, szComponents, nLevel);
            if (nResult = BACK) goto Dlg_SdAskDestPath;
    endif; 

	// setup default status
    SetStatusWindow(0, "");
    Enable(STATUSEX);
    StatusUpdate(ON, 100);
    
    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMoving
//
//  EVENT:      Moving event is sent when file transfer is started as a result of
//              ComponentTransferData call, before any file transfer operations
//              are performed.
//
///////////////////////////////////////////////////////////////////////////////
function OnMoving()
    string szAppPath;

begin
    // Set LOGO Compliance Application Path
    // TO DO : if your application .exe is in a subfolder of TARGETDIR then add subfolder
    szAppPath = TARGETDIR;

    // MessageBox(szAppPath, INFORMATION);
    
    RegDBSetItem(REGDB_APPPATH, szAppPath);

end;


///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMaintUIBefore
//
//  EVENT:      MaintUIBefore event is sent when end user runs installation that
//              has already been installed on the machine. Usually this happens
//              through Add/Remove Programs applet. In the handler installation
//              usually displays UI allowing end user to modify existing installation
//              or uninstall application. After this function returns,
//              ComponentTransferData is called to perform file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function OnMaintUIBefore()
    NUMBER nResult, nType, regSearch, dirSearch2;
    STRING svDir, svResult, szCaption, szPath2;
    string szSrcFile , szTargetFile;
    
    string szPathFile, szName, java_home, szEnv; 
	number fileCounter, nvType, nvSize;
	pointer pEnv;
	
	string szCmdLine, szPath, szKey, szTitle, szMsg, szMsg2, szTextCont, szTextIg, szMsgWait;
	number dirSearch, foundVal, moveNext;
	BOOL bvCheckCont, bvCheckIg; 
	
begin
    // TO DO: if you want to enable background, window title, and caption bar title
    // SetTitle( @TITLE_MAIN, 24, WHITE );
    // SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION );
    // SetColor(BACKGROUND,RGB (0, 128, 128));
    // Enable( FULLWINDOWMODE );
    // Enable( BACKGROUND );

Dlg_Start:
    //removeLegacyShortcuts();
    
    Disable(BACKBUTTON);
    nType = SdWelcomeMaint(szTitle, szMsg, REPAIR);
    Enable(BACKBUTTON);

    if (nType = REMOVEALL) then
        svResult = SdLoadString(IFX_MAINTUI_MSG);
        szCaption = SdLoadString(IFX_ONMAINTUI_CAPTION);
        nResult = SprintfBox(MB_OKCANCEL,szCaption,"%s",svResult);
        if (nResult = IDCANCEL) goto Dlg_Start;
    endif;

    nResult = NEXT;

Dlg_SdComponentTree:
    if (nType = MODIFY) then
        szTitle = "";
        szMsg = "Select any new components you want to install, and clear any existing components that you want to remove.";
        nResult = SdFeatureTree(szTitle, szMsg, TARGETDIR, "", 2);
        if (nResult = BACK) goto Dlg_Start;
    endif;
    
Dlg_ObjDialogs:
    nResult = ShowObjWizardPages(nResult);
    if ((nResult = BACK) && (nType != MODIFY)) goto Dlg_Start;
    if ((nResult = BACK) && (nType = MODIFY)) goto Dlg_SdComponentTree;

    switch(nType)
        case REMOVEALL: FeatureRemoveAll();
        case REPAIR:    FeatureReinstall();
    endswitch;

    // setup default status
    SetStatusWindow(0, "");
    Enable(STATUSEX);
    StatusUpdate(ON, 100);
end;


//---------------------------------------------------------------------------
// OnFileLocked
//
// The OnFileLocked event is called when a file that is in use by another
// application needs to be installed or uninstalled (unless the files are
// in a file group which is marked as as potentially locked or shared in
// this case the file will be installed or uninstalled after reboot.
//
// szFile will contain the full path of the file that is locked when the
// event is called.
//
// The event should return one of the following values:
//
// ERR_IGNORE - The setup should skip installing or uninstalling the file
//				that is locked and continue the file transfer.
//
// ERR_RETRY  - The setup should try to install or uninstall the file again.
//
// ERR_ABORT  - The setup should be aborted.
//
// ERR_PERFORM_AFTER_REBOOT - The file should be installed or uninstalled
//							  after the system is rebooted.
//---------------------------------------------------------------------------
function OnFileLocked(szFile)
begin
	// TODO: Enable this code if you want to show a confirmation dialog box.	
	return SdExceptions(LOCKED, szFile);
	
	// Return ERR_PERFORM_AFTER_REBOOT so that the file will be updated
	// w/o confirmation.
	//return ERR_PERFORM_AFTER_REBOOT;
end;
//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// First Install UI Sequence - After Move Data
//
// The OnFirstUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2, szMsg;
    NUMBER bvOpt1, bvOpt2;
	NUMBER bShowUpdateServiceDlg;
	
	STRING  szServicesMsg, macsText, notifText, scanText,
	smText, fdrText, ccText, lmText, calcText, StartServicesMsg,
	porterText, dispatchText, webText; 
	BOOL nValue, macsCheck, notifCheck, scanCheck, smCheck, fdrCheck,
	ccCheck, lmCheck, calcCheck, porterCheck, dispatchCheck, webCheck;
	NUMBER nResult;
	 
begin
    
    nValue = NONEXCLUSIVE;
	szServicesMsg = "Select Yukon services to set automatic startup and restart on fail.\n(Porter, Dispatch and Web Applications are always set to automatic.)";
	porterText = "Port Control";
	porterCheck = TRUE;
	dispatchText = "Dispatch";
	dispatchCheck = TRUE;
	webText = "Web Applications";
	webCheck = TRUE;
	macsText = "Metering and Control Scheduler (MACS)";
	macsCheck = TRUE;
	notifText = "Notification";
	notifCheck = TRUE;
	scanText = "Real-Time Scanner";
	scanCheck = TRUE;
	smText = "Service Manager";
	smCheck = TRUE;
	fdrText = "Foreign Data Router (FDR)";;
	fdrCheck = TRUE;
	ccText = "Capacitor Control";
	ccCheck = TRUE;
	lmText = "Load Management";
	lmCheck = TRUE;
	calcText = "Calc Logic";
	calcCheck = TRUE;
    
    Dlg_SetServices:
		//There's no going back now!
		Disable(BACKBUTTON);
		//get user input
		AskOptions(nValue, szServicesMsg, macsText, macsCheck, notifText, notifCheck,
				scanText, scanCheck, smText, smCheck, fdrText, fdrCheck,
	            ccText, ccCheck, lmText, lmCheck, calcText, calcCheck);
    	//set up yukon services according to what the user checked
    	//dispatch
    	LaunchAppAndWait("", "cmd.exe /c sc failure \"Yukon Dispatch Service\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    	LaunchAppAndWait("", "cmd.exe /c sc config \"Yukon Dispatch Service\" start= auto", LAAW_OPTION_WAIT); 
        //porter
    	LaunchAppAndWait("", "cmd.exe /c sc failure \"Yukon Port Control Service\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    	LaunchAppAndWait("", "cmd.exe /c sc config \"Yukon Port Control Service\" start= auto", LAAW_OPTION_WAIT); 
        //web
    	LaunchAppAndWait("", "cmd.exe /c sc failure \"YukonWebApplicationService\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    	LaunchAppAndWait("", "cmd.exe /c sc config \"YukonWebApplicationService\" start= auto", LAAW_OPTION_WAIT); 
    	
    	//TODO:
    	//macs
    	if(macsCheck) then
    		LaunchAppAndWait("", "cmd.exe /c sc failure \"Yukon MAC Scheduler Service\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    		LaunchAppAndWait("", "cmd.exe /c sc config \"Yukon MAC Scheduler Service\" start= auto", LAAW_OPTION_WAIT); 
        endif;
        //notification
    	if(notifCheck) then
    		LaunchAppAndWait("", "cmd.exe /c sc failure \"YukonNotificationServer\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    		LaunchAppAndWait("", "cmd.exe /c sc config \"YukonNotificationServer\" start= auto", LAAW_OPTION_WAIT); 
        endif;
        //scanner
    	if(scanCheck) then
    		LaunchAppAndWait("", "cmd.exe /c sc failure \"Yukon Real-Time Scan Service\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    		LaunchAppAndWait("", "cmd.exe /c sc config \"Yukon Real-Time Scan Service\" start= auto", LAAW_OPTION_WAIT); 
        endif;
        //service manager
    	if(smCheck) then
    		LaunchAppAndWait("", "cmd.exe /c sc failure \"YukonServiceMgr\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    		LaunchAppAndWait("", "cmd.exe /c sc config \"YukonServiceMgr\" start= auto", LAAW_OPTION_WAIT); 
        endif;
        //fdr
    	if(fdrCheck) then
    		LaunchAppAndWait("", "cmd.exe /c sc failure \"Yukon Foreign Data Service\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    		LaunchAppAndWait("", "cmd.exe /c sc config \"Yukon Foreign Data Service\" start= auto", LAAW_OPTION_WAIT); 
        endif;
        //cap control
    	if(ccCheck) then
    		LaunchAppAndWait("", "cmd.exe /c sc failure \"Yukon Cap Control Service\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    		LaunchAppAndWait("", "cmd.exe /c sc config \"Yukon Cap Control Service\" start= auto", LAAW_OPTION_WAIT); 
        endif;
        //load management
    	if(lmCheck) then
    		LaunchAppAndWait("", "cmd.exe /c sc failure \"Yukon Load Management Service\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    		LaunchAppAndWait("", "cmd.exe /c sc config \"Yukon Load Management Service\" start= auto", LAAW_OPTION_WAIT); 
        endif;
        //calc
    	if(calcCheck) then
    		LaunchAppAndWait("", "cmd.exe /c sc failure \"Yukon Calc-Logic Service\" reset= 0 actions= restart/60000/restart/60000/none/60000", LAAW_OPTION_WAIT);
    		LaunchAppAndWait("", "cmd.exe /c sc config \"Yukon Calc-Logic Service\" start= auto", LAAW_OPTION_WAIT); 
        endif;
            
    Dlg_StartPortDispWeb:
    	StartServicesMsg = "Select Yukon services to start at this time.\n(More options on next page)";
    	//get user input
    	AskOptions(nValue, StartServicesMsg, porterText, porterCheck, dispatchText,
    			dispatchCheck, webText, webCheck);  
    
    Dlg_StartServices:
    	StartServicesMsg = "Select Yukon services to start at this time.";
    	AskOptions(nValue, StartServicesMsg, macsText, macsCheck, notifText, notifCheck,
				scanText, scanCheck, smText, smCheck, fdrText, fdrCheck,
	            ccText, ccCheck, lmText, lmCheck, calcText, calcCheck); 
    	//start  services according to what the user checked
    	if(dispatchCheck) then
    		LaunchAppAndWait("", "cmd.exe /c sc start \"Yukon Dispatch Service\"", LAAW_OPTION_WAIT);
        endif;
        if(porterCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"Yukon Port Control Service\"", LAAW_OPTION_WAIT);
        endif;
        if(webCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"YukonWebApplicationService\"", LAAW_OPTION_WAIT);
        endif;
        if(macsCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"Yukon MAC Scheduler Service\"", LAAW_OPTION_WAIT);
        endif;
        if(notifCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"YukonNotificationServer\"", LAAW_OPTION_WAIT);
        endif;
        if(scanCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"Yukon Real-Time Scan Service\"", LAAW_OPTION_WAIT);
        endif;
        if(smCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"YukonServiceMgr\"", LAAW_OPTION_WAIT);
        endif;
        if(fdrCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"Yukon Foreign Data Service\"", LAAW_OPTION_WAIT);
        endif;
        if(ccCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"Yukon Cap Control Service\"", LAAW_OPTION_WAIT);
        endif;
        if(lmCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"Yukon Load Management Service\"", LAAW_OPTION_WAIT);
        endif;
        if(calcCheck) then
        	LaunchAppAndWait("", "cmd.exe /c sc start \"Yukon Calc-Logic Service\"", LAAW_OPTION_WAIT);
        endif;
        
    ShowObjWizardPages(NEXT);
    
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    

	// Set this to true if you have the update service enabled, and if you want to check for updates.
	// Note: the ISUS Starter Edition does not support checking for updates programatically.  So, 
	// only set this to true if you have at least the ISUS Professional Edition.
	bShowUpdateServiceDlg = FALSE;
    
    //{{IS_SCRIPT_TAG(Dlg_SdDinishEx)	
    
    //we don't take kindly to lawdogs around here
    BATCH_INSTALL = FALSE;
    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else
		
		// If the update service is enabled, show finish dialog that includes
		// update check option.
		if( bShowUpdateServiceDlg && ( ENABLED_ISERVICES & SERVICE_ISUPDATE ) ) then

			if( SdFinishUpdateEx( szTitle, szMsg1, szMsg2, szOpt1, szOpt2, TRUE ) ) then

				// Don't check for updates in silent mode.
				if( MODE != SILENTMODE ) then
					UpdateServiceCheckForUpdates( "", FALSE );
				endif;

			endif;

		else
			SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
		endif;

    endif;
    //}}IS_SCRIPT_TAG(Dlg_SdDinishEx)
end;
//---------------------------------------------------------------------------
// OnSetTARGETDIR
//
// OnSetTARGETDIR is called directly by the framework to initialize
// TARGETDIR to it's default value.
//
// Note: This event is called for all setups.
//---------------------------------------------------------------------------
function OnSetTARGETDIR()
number nId, nIgnore, nResult;
string szId, szTARGETDIR;
begin

    // In maintenance mode the value of TARGETDIR is read from the log file.
    if( MAINTENANCE ) then
        return ISERR_SUCCESS;
    endif;

    // Set TARGETDIR to script default.
    TARGETDIR = "<FOLDER_APPLICATIONS>\\<IFX_COMPANY_NAME>\\<IFX_PRODUCT_NAME>";

    // Read TARGETDIR from the media.
    nResult = MediaGetData( MEDIA, MEDIA_FIELD_TARGETDIR, nIgnore, szTARGETDIR );

    // Use the TARGETDIR from the media if anything was read.
    if( nResult >= ISERR_SUCCESS && StrLengthChars( szTARGETDIR ) ) then
        TARGETDIR = szTARGETDIR;
    endif;
        
	// Customize the default TARGETDIR for multi-instance application.
	// TODO: If you want something different customize the code below.	
	if( MAINT_OPTION = MAINT_OPTION_MULTI_INSTANCE  && MULTI_INSTANCE_COUNT > 0) then

		// Start with the current multi-instance count plus one.
		nId = MULTI_INSTANCE_COUNT + 1;

		// Find a unique TARGETDIR.
		while( ExistsDir( TARGETDIR ) = EXISTS )
			
			// Convert to string.
			NumToStr( szId, nId );
			
			// Update IFX_MULTI_INSTANCE_SUFFIX
			IFX_MULTI_INSTANCE_SUFFIX = "_" + szId;
		
			// Update TARGETDIR
			TARGETDIR = TARGETDIR + IFX_MULTI_INSTANCE_SUFFIX;
			
			// Update nId
			nId = nId + 1;

		endwhile;

	endif;

end;
//---------------------------------------------------------------------------
// OnUpdateUIAfter
//
// Update Mode UI Sequence - After Move Data
//
// The OnUpdateUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in update mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnUpdateUIAfter()
    string	szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    BOOL	bOpt1, bOpt2;
begin

    ShowObjWizardPages(NEXT);
    
	szTitle = SdLoadString(IDS_IFX_SDFINISH_UPDATE_TITLE);    
    szMsg1  = SdLoadString(IDS_IFX_SDFINISH_UPDATE_MSG1);
	szMsg2 = "";    
    szOpt1 = "";
    szOpt2 = "";
	bOpt1   = FALSE;
    bOpt2   = FALSE;    
    
    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else    
       	SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bOpt1 , bOpt2 );
    endif;
end;
//---------------------------------------------------------------------------
// OnEnd
//
// The OnEnd event is called at the end of the setup. This event is not
// called if the setup is aborted.
//---------------------------------------------------------------------------
function OnEnd()
begin

SHChangeNotify(134217728, 0, NULL, NULL);

end;
//---------------------------------------------------------------------------
// OnSetUpdateMode
//
// OnSetUpdateMode is called directly by the framework to set the UPDATEMODE
// InstallShield system variable appropriately to control which UI events
// are called by OnShowUI.
//
// Note: This event is called for all setups.
//---------------------------------------------------------------------------
function OnSetUpdateMode()
	number	nIgnore, nMediaFlags, nInstalledVersion, nUpdateVersion, nResult;
	string	szVersion, szIgnore, szMsg;
begin
	
	UPDATEMODE = FALSE; // Non-update mode by default.

	// Added 11.5 - Don't set UPDATEMODE when running from Add/Remove
	if( ADDREMOVE ) then
		return ISERR_SUCCESS;
	endif;

	// Added 11.5 - Don't set UPDATEMODE when REMOVEONLY is specified
	if( REMOVEONLY ) then
		return ISERR_SUCCESS;
	endif;

	// Get the media flags.
	MediaGetData( MEDIA, MEDIA_FIELD_MEDIA_FLAGS, nMediaFlags, szIgnore );

	if( ! ( nMediaFlags & MEDIA_FLAG_UPDATEMODE_SUPPORTED ) ) then
		return ISERR_SUCCESS; // Update mode not supported by the setup.
	endif;

	// TODO: If you are updating an application that was installed by a previous
	// version of InstallShield, IFX_INSTALLED_VERSION will be empty, and
	// VERSION_COMPARE_RESULT_NOT_INSTALLED will be returned by
	// VerProductCompareVersions. Change the value of IFX_INSTALLED_VERSION (and
	// IFX_INSTALLED_DISPLAY_VERSION) here based on application specific version
	// information determined by the setup. Only do this if IFX_INSTALLED_VERSION
	// is empty.
	//if ( !StrLengthChars( IFX_INSTALLED_VERSION ) && MAINTENANCE ) then
	//	IFX_INSTALLED_VERSION = "X.XX.XXX";
	//	IFX_INSTALLED_DISPLAY_VERSION = IFX_INSTALLED_VERSION;
	//endif;

	// Verify that the installed version is valid.
	if( !StrLengthChars( IFX_INSTALLED_VERSION ) && MAINTENANCE ) then
		// If this error occurs, IFX_INSTALLED_VERSION needs to be set manually.
		szMsg = SdLoadString( IDS_IFX_ERROR_UPDATE_NO_INSTALLED_VERSION );
		MessageBox( szMsg, SEVERE );
		abort;
	endif;

	// Verify that the product version is valid.
	if( !StrLengthChars( IFX_PRODUCT_VERSION ) ) then
		// If this error occures, IFX_PRODUCT_VERSION was not initialized correctly.
		szMsg = SdLoadString( IDS_IFX_ERROR_UPDATE_NO_PRODUCT_VERSION );
		MessageBox( szMsg, SEVERE );
		abort;
	endif;

	// Do the version comparison.
	nResult = VerProductCompareVersions();

	// Make sure that valid data was returned by VerProductCompareVersions
	if( nResult < ISERR_SUCCESS ) then
		szMsg = SdLoadString( IDS_IFX_ERROR_UPDATE_VERSION_COMPARE_FAILURE );
		MessageBox( szMsg, SEVERE );
		abort;
	endif;

	// Set update mode if this is a differential media or the product is already installed and the versions do not match.
	UPDATEMODE = ( nMediaFlags & MEDIA_FLAG_FORMAT_DIFFERENTIAL || ( MAINTENANCE && ( nResult != VERSION_COMPARE_RESULT_SAME ) ) );

end;
 

package com.cannontech.dbeditor.editor.user;
/**
 * This type was created in VisualAge.
 */
import java.awt.Dimension;
import java.util.Collections;
import java.util.List;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

import com.cannontech.clientutils.commonutils.ModifiedDate;
import com.cannontech.common.gui.tree.CTITreeModel;
import com.cannontech.common.gui.tree.CheckNode;
import com.cannontech.common.gui.tree.CheckNodeSelectionListener;
import com.cannontech.common.gui.tree.CheckRenderer;
import com.cannontech.common.util.Pair;
import com.cannontech.database.cache.DefaultDatabaseCache;
import com.cannontech.database.cache.functions.AuthFuncs;
import com.cannontech.database.data.lite.LiteComparators;
import com.cannontech.database.data.lite.LiteFactory;
import com.cannontech.database.data.lite.LiteYukonRole;
import com.cannontech.database.data.lite.LiteYukonUser;
import com.cannontech.database.data.user.YukonUser;
import com.cannontech.user.UserUtils;


public class UserRolePanel extends com.cannontech.common.gui.util.DataInputPanel implements javax.swing.event.CaretListener {
	private javax.swing.JPanel ivjJPanelDefvalue = null;
	private javax.swing.JPanel ivjJPanelLoginDescription = null;
	private javax.swing.JPanel ivjJPanelValue = null;
	private javax.swing.JTextField ivjJTextFieldDefaultValue = null;
	private javax.swing.JTextField ivjJTextFieldValue = null;
	private javax.swing.JTree ivjJTreeRoles = null;
	private javax.swing.JScrollPane ivjJScrollJTree = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public UserRolePanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldValue()) 
		connEtoC1(e);
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  (JTextFieldFirstName.caret.caretUpdate(javax.swing.event.CaretEvent) --> CustomerContactBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (JTextFieldLastName.caret.caretUpdate(javax.swing.event.CaretEvent) --> CustomerContactBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JTextFieldPhone1.caret.caretUpdate(javax.swing.event.CaretEvent) --> CustomerContactBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G0B0AD2AEGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E13DBC8DD4D46715EE1664F8CEBCDDFBEA3AA6EBCFCD56A63435A95D5A2D59F5DB1A5A46A6E6EBD333B52D27E5B71C441EB529FB1A5D329B5ABC7E9CD090D49492D1D1B102A17CA8C60228A0E8C0C6A000CA54C45E4C3C9986E6660DEF9EE1D092775E6FFB774D6371860416F04E653D6FFEBF77673B5F7D6E7D3E87C27E5E0599A92979021012A1E8BF47D384A156AE88BDD7CE7F8361EA7FF85EA698FE76
	81EC95566FCC07E78B54E536365972047C14CCA8DF03726266B6DB813CEF97DECFE9FE8FDE2250A9023A62A7BFF8FBE2BA839F929D9BAB17DD4C06679600BE4045G2C8248939AAF96EA78D8A8EF515E91D2D285E1761F304DB63950004F7F93EFF78D1EC10457304D350BC5DA7DAA402D83A887FC43EB3CEDAFBC3398F7F75755EA6D2EFDBED6F8654932549C24E5981FE02956F72D76AC963E459411A634E75443333EF350F34AA97BAB1CE2A0A087D44959DF61F2C8AE2FAAAB955AE3A8A4A9F5F5976137DD76
	F883E7441054A986A41FDDC05D574A19ECBC10894AEB98AECEC6BD4D0577D800F8G4E774FF26AB53E668D468A89FFDF94156F2214B646EF0376C43E972DFABEE3C38A0EFFB71B876CB78B4ACB8138CC155D4727ACD3176C636288DC1E27AF12BCB529A44F4FFDC84F8765980085BA7E81BF6217C0F9A5C0E2AA49F972904959FB6B3BC2626C9F2767C611B3B9154BD71296113370074FE73C4E6C6DFFBEC21B69033A980079G4BG5682A4836CE2F67E2D8F8F43335121B649FE3F9CE88C864F78DC4A8559A579
	603D2E8EEAB4DC1764149517A0F0DBBEA917DB70235BE7FA1B4D0C6332DD96487696F7BDAA2CBE7EC4FA0605ECCB1EFDAB35D49B23BEBDA25BE8BA6A2DA408FA3B866F58EFB3G479FE178F8831E4F77BFB2FB42F28254B5E7101EFB3790AF767407043C6A76D41B85AF739FEFCA0D4D60BC44E7C4F861BADE5507BADE8F784C0DED36E200DA00DE0070C652712B9F9E1DCC472DE0E7CAC074F58FB90222221E99727ADC1222697A5E0B93695A8AF83F7B275C0F6BA57628F10E56FE7B0225DE56469EC91D37116B
	E3714608DEB86DE72252DE39F13CEDEC516770BD36A692B672B9CC53716FB37C86831E4F6DF3ECEDE1D9303559DCG3C7D16G62D7584C6394B27C9A1BF91C05FE9AE79D5459B35BECFCFE838E7429F1D0DE891088108CD01485738CE04F22B9BE77D1659D2E23CE437C723E2FFD34931ED2D8D54456C0C89583CE691228F8C507CF8A89DA1B4C6B28D74718FEB95751761CC063BDA9A0A9226A1583B03A68174018C23C4D4E6BDB310DA2315A9E2FDF82827E20C0636E393E9D1EBEB124DE8C3AC4D50A346075EF
	DEC71B78D83C84A342G703EA08B7555437C368F5EE7E7112E7E4E093884A8A769FAF9707AB6F83601F1CB3E3A3AE62F9359901591325143C158DC056CCDB08EC06666B65BDC007CECDA23AF7712ADB667FCC3A8FF56EEE90B88333339DDAD4CB65BE2AD233182706BGB2F35AEC25GADG3CFE195CCBE3EC62342D6C9379C27EA6DBC3A84B7835782CCE837D5D6689561F6D8E56E91A294C751FA5218D7703DCB1G0BF2E88E56DEAF663609FBAFD9E3078206A439A2B3425BBE5707FB0D743194D01B252094F0
	41CBC83305043E2C081D3AE55D06DEE0F874DBCDE0C8A19D3F3EEFAB474398C62B277AD7D83D282A0A57B124CA5D122AFA831EC87FE446CBE80CCB8CE932EEF6232C4BC04655G093A2CF70B5B8D76E617654121E08F2EA44DEEFF4B7667A4E81F3705667F029F63349A3DFC1915A3753F71515CED515ACD45275E192FCE9AC343BC3FFF999A798114ABC5AF6FE165CEDD4E077D3D02755A7A4B7170FDC663AFAD9F81370130A33A8D5FF6D85B705D8EEB9B3E57B1310DFE41E1E5233C6E81872EF5F9B8E03079AF
	BB509FBA65C0C0E28BCF6FA2709874659E14439B702A173DAE0F24F6FBEFCA605336206D8EB21F9B0677B9DB48BF8E9FA07FD8F2732BC27C75C329D671547C2F1CCBCD546CB6E9CB44BFF21E96BAF1ADC9BE498F0AEA120782AA47BF4C7C39068F25B15C0583816CDBFA3E87F4F84EAB79DC988537B617BBE1192B956CB75FC9CA87440F45F0C5E89874D541A6232289EB4F62EBD9715BEF1FAA9E1F94143B3D0A549A888E51A0E5174A2A383DEC97CE1DD7B96DCE1821E188C699FDAA4CA087C7B87D2FFDF25302
	FE17240E84254F000B232407FB72BE66FCB475CB4E41B3F278ECGBD9C9B21DCE4E6D5419F1D126216953F64E2CCD408432A46C1A32B1EB28B55BA8FEAFD3F498EAE093EA1E95A626BF9142585F01FFF4A03F6DA185BE6AB87E84EA51F3F5F05756473350D2DC976797892033AE53938FE7CAC8E20B5F18DF01803474213573FECD91F1EC775728D2B7AC23DFE03E5FD39DEFFC3312AEF48A3B9F225BC74A5520DA189C2C01C52B6E90462B8E91B290E69DB0F8F77C898D3788C7B9D47EFF5DB2F6D82B77A7EC1FD
	7CDD6E0D8246F9FCCC6E0B62C49CB328F87D909E60862E1DC588170CE791BD40BF1EDB4C43A7G370F9F5AB1B79F1BA1C35B2D28070EG1DD344C37BB5GC95A98B5DB35980E353BCBBF9B2854F177B3DCB5ECA6AF25D13EF2A14FF81ED132E1585287A2A4EA63A7EDB567F121FE9C37F09B44065BE8BE6EF39BE30946D0C8F6FAD9982D693659E3740F9C576A5984CF30619064F4AEA9CC735361C1DEB14E56501A0E3F7E56C9E1FC5EF0169DB3D02856B44C96CB0F5C8421FE8BCCF1133EFDDC72CA43501F1FBD
	AC8A123E6A37517E7049B9631949325C1A544DD1F423EE63BA1937AD221B38471F4F60E39F3CC1E32F06FA0EFBD847E5EFA75CA105F04DBAAED6470DEE2733167B6BB0A736BAEBF1B2C5D4F8063C95C32A971386D19519C3B01E338CDC42B1B126D8321D4ED37E78815A7AFAA82767C30E8640F33BB04B7910EE8D60FC79349EF7C84675388870AB31CFBE5970EF82E8F7D374E85A3CAEAF5B466D40644B48E69F5A5E2051DD7968C3C27D6D9D29D6E7BC33F37726266F6073D13EA3B2AF7107BFCEED1692B334B3
	15A3C67B0FCFB89A557E435A98F3F6186DDF99C0FD4682FE598E327FA7BDDB8D765F8596A786BC60D974B82BBF0D7B902DBC5A1FC1BEC420F86F2B41291CC12C5AC13964B787F1EE9221AC6CEC339582D481F46EA45E523C131E291C8DCFF026F27846D4788A6E2498796BD36A972377ABD72652EF3E5E6F9BD36A37D86FA7DF42FE71BBA3394AEA437B3A1D63F398FEBEF2638A2E15641D7CFCA4CB47FF4A70058591BCDFDBE98C0F659A281BDFC074BF8D1879CEAE98CB333050AACF1EB32EDF0529DCEF6A4757
	5B41D25CD318BFB1AC4F3A3AC8FC42772E0A6EB1FBD7A14F8343701CD3C87E4AAEE5EA63AEAAA4FB4C706378EB211C04FDDE07988420934087B077F5324BAE2F15BF9FEB17511CF9A4BF66B44F86100FB898BBDE9F7F1B5E9C431A6C143D81D5DF0F438338074B0A9742B8420DB21CD3D6D89242F360F836CF2C02B1576B63FEF7B0FA4E743DC16B1CE97920F54E74646044F97FB30351F2AA4EDF638D62CFF8234D46F10F6B38FC9D5724902ED447AD57F175BA6E9E36D7F4C239DF473D44F0AA14E76B38A7FB91
	37984A4B5FA0BB9E3E02B159BAA8276F02BD8520E1975545303A5EDDFC5F980567C23DAE6B0AB11F0F86B8AEBEF1DC9C5F2ACD03851E5358FFC7B4528CFDB222344932406DE6FDFF32B3174DE5A8A405186162EE2C553D286E90ACF259F651AF8914A7FCA7102535B92B4ACD557AFA7DFDD92175FAB55C8D393BE90FDF3E0B7678BE9773CFD04EAF02B5D8C47AFEDF1A48CFB6C33B5E2231FA54E2EEFFF43B5F6937367BA2BF2E4110BC24B8A533ED9F70976AF511155D2ACAFED48BEFD34E7A2B2282793D397FD1
	561F57C56BDF6F1F78CC62FCGFDF4D8AF373372082EFB29F10BCE63EC4025B9919EDF7F0279066D109C7C0DC038DE36762A8177879D779C439D85DCE58A612E3035D7G38A63D5D2F986ED5E85311C6B67125CB98032A326C6B718651BF8BBE189B70FAC302EEB7691751EF794491F988F8AB5D0DE36D3ACC3EBB8E5A2FGC886485B4DFDB8176DDB43B836DB917D20126E2064945277E05FFF6F253EC1E89F833088E0B9C062EE0A77FE6040FAEE014D12DB8BE4F85D3FB9B76BF5AC73A2D98E6E5471ACFFEE16
	C2CE459B6409A7EFE32BC71BBD5F6DD4A0A7BD5F23C8925F0B16DE315A0B6C40EF9FGEF13ACD96ED7D0BFC7EFE3739A5BAC5A435B2C02E7629EDA9F035D4675110CED76C656C3495EE87140EA365EEA771A6FD1FE4D70ADFB4D77A8EE975D2374C25D323D64DB7BA5722D454504FB10616CD06EAB26FC6527D70D31EC5E8387D2F1FC4BFC251873BC2BB8924BF29E1AAE537D6E9228DBDFCC366159FFD0B0649CDE073FE268E3FF0568D0593DEEDDDD7B104FE757CCCE4BB3FEFBB9D39B2BE49F792002DEF67F88
	E595E04EBE62BD7CA665DA0B9FFEC8304F3AE0F9BF1D50D3133AE89F67F9453E886F65BF24DC4B768151CC5F8F7B58FE449D7B40182B20FE9FCB6531912F770C29C77F00BEBAD2FF7F18FA6477F81A317E29B175282FC3DAFFAE5BD387C936642762845FF7CEC43DFB0F594FE50A551ED56A8121EFEE22A65B06AB6453937613BE5F6AE4316581087181DA8ED09CD6632636FD8728EDCFBF361D8F65B80095877439BD3BDB305CCF782A4375294F69E9AF6523897A381F9BE0BC14G8FGADA5E423F731BD288F4A
	2A0EFBD4C45CFCA8AF56F1EFBB493ED715501A7B258B4FD8DE514B092C0C679D3C6CF35D497EBD916058516AB80D3B7FEC9A931D55179CC459EFCB45933449BB48F9643EF02904FCC96C4052A50C327EBF15E8BEFC87A95EDE00C71C5A7E7561902E5BCB6200656948F9186E8E47GEC14BD22C7177B114B533BB37F4EB47B3DBC65FE5C0F5E4BFCC97CC16EC7D3F47CBC06DFE940F35F363B17FC5B9A282BFF137435EC98770005D0DE86309AE0BDC076A1080D8FD10C7F1521AAE1125C24C78E5AA198729942F6
	AEDF7687537B166087B6729BCB7E69EB4252FBDECD09F67ED4FF085B49B56D39C2B94070DC3E0E9114EF8E5445822C84C884C88248ABA579DE9AAA67722101B42A2A686CE7A7F3A49C9E16C550989CE8B97DD523ECA5B0DEEDE9E4DD59CB236D0D99DDB897FD25663DB117610325663D313A137646D9D017D8CAFE60DD3711FECBD91B6DDAD904E630AC9A7D954C97461419ED67E78CBF374CECBBD77A49F696C01DF01868B7FBA71ADB5761E874D387F13C70E1337C598CBF7B30D97EF983A47FFC28CBBECCF157
	7D5D986BB9E4058542BC560B5373743E37A05E81D8823062AD1EEB71FEBF92474708EBC56A17GED13G0A4B5BECB5653C9F0F851B1D54468E78BE00D9G8B81624BE96CB7844C8BCC379B1A8FDBA0A15DA6893F59A1BB9F16484E0B3E7E77C2515EBF24EC0DE2678965DC1F59EFC7767E08FFFCC142BDC2D506A4BE6E42E1E3BCD43B695D28E7FB8D5AF8BD5AF341D78EE83E69733885E86F8F985E8F747E39FB4364FE31FEC6E970F57F236168B95C4AE16B9C6E19E16B330BB5439367D68943516FFBDF9CB65E
	77F23FE53F05F1559C1813D80015G89G2F3CCDBEEBA83CDFE0BE4B42DF1DF5F9B00744AF02D4225FBB92DD566BA313FFC754BF32092DB5D5157DB8BE6183A3B8DF2A9CE4C80E8B0D200E942F27DF65CDB57C48887B76C7F2B334F6BEF395F1F995ED36128A0A09BE3DC0E7ACADBAAE291D62A4DF85791F4DDDE873F375728ED6DE22170FF74E148DC5E8F64E988DDC57DC76CE964F2E861A6BF4FDBC44E21F6CCA70D315045B67A19DB5D792FF7F0A572D5A1A7A05613D2FFF665770480C5260B2DF75124C7D3A
	4C1903E887F37472B6D6DE24179F9818893E10DEC476EF4F888D0A29793E38261B764565C0BB3912F21AFF5904715A9D5D1175F8D51FF4066D20BC47A96E21B36C1AAA4AF1DE6DE35FA1C3B986E0C1955D0F25BB74FC99F06B2B087E8B953B84C3CE051F8F5455E9C478262B1D17BB749C391AE85DE4E3DE03328AB0271AF23A81A735DDD4CD396DFC27B9379585E3EE7A24531C5BBE12E22CCFF61AF35BA74654D7384C392D2455F39F7D60E8B1BC5782BFC9GC5C7A0DEGE8816883D081669CA1FF1DF533D408
	120BG12AB0779ECC57486D4BE7E4FBFE1F7EBB046F2FD1C0E1BEFCDB0CE27A287A5C59D61D89EFB70FEBD37227B7F2B37A6777F2EDB6C4E9A7CF64FC8D0BBCF745EE27786EEF7C8527719402DBC9D579A6A14C3DEBC5162B14AF3D74747EB3F57E32A44A3BCDECB06E75E51B69B1E0F73B60FDC20B625C7F9EC56G4F9E2D8D0F4DF2BB280D8F7033G96824483A49C25582C73B0BBF353E333E649AD8E79D42EA66DDB0FF3DD663BDD24A15450989E77F899BEF5936D7C9AAEC3B9BC9BEA7859BE6F7718B4BE66
	DC251F51755670F349A0BCE334FEDC2EDA8F35D9G78B800D5G9BG720ED19BC5BF472B82DCB3008BA086E051B122FF17FD9313DD11A47C30A2C472B68D9A65DDFE0C5FC52CBBC63E72575D1365EF49472C6E6356CF5AEF0F294C7B9D6C41FE056F5C593712656F50F75B3208FE23619DF3CE93E6F87BBB661CA6C5A45F558BF54B5EA1F9B7B926174797CE335F7BD36E4765FA1979496263E6F97F407065474D724E52FDF5AD54ADB82E5F77BA27CA1F2F734523517D4937C7A777A74BC62D634947C7474713CF
	0CDA4713CF0F9A63C9ADBE5746D5748BA5ADBE9F45F3C73E7EAE088151E338BBD973894A25476E1ABF60F53F79845787FED76995FD5E1B6CB31EEEE89870F03D6E524F2D05DA487FEBE93FF23AE89F8D56525E76149D5B46C2B99EF135340F7E74824D4D8640153ECBE39434531E5777AE0DF1361D1DE3C2B98EE0055E76D88735CDF81776C7E747447B63FD9D667D7168187D6F090E0977477F6D0836BFF21EBE69A29D9456112C8F3BC9DF1D001BDDC77CAF71D25B78BA1275F7CC37C9D04EBB81FAB9C1E3A4C9
	242F864005CF50988DEE52C15C899AA340682D0332D05FE6AB2C27369FF928EDD5BD69EB0E472C2F5CB172FE4FE356572EB17A5C6019D8DF7B7BA75657FCAF71542F7374E32F19272BE34E6F133CE61EDE9F43536181B3CF974770F4ED404CD31656DF7B162F877F2E516A7B8858C9B43EEF8E52B96CC2601B5F7146EF4FE16B46678DC8CD7CAFCD840A596BD90C39865AEE28275C652F7B9017FE926668A47926A1B4D74DCFFEEAF83709B31F3B94FF86B4DEF1C4E47A23617D9E474C537E72E7C0E31FEBFA31C3
	65247D2CE307FE562F64641D458E35A7A9F6B84D7C2F7D24F9AFEDE1785E13663D74E7F672BFAE28DB215B6B3397269783BCBF4DFEC56D530B9D9EE3FBC879A9333C0FB3FC6DA9333CED6DA4EFB354451EA2F96BBA264777DDDD93754BBE5DE6ABBEEDE5974A04674D516DE956247D2C6D69B1562F66741D59D34BE932A7A75B1F2E1DB66B57477F4E6A34D93F7F6DA27D2AD03766B46977CF93FE1B92DD3F596E6975BBBB65FEDC2E7FE0FBECFD03D95E7FE4781686333C2A1B646D013A258DA42F53B3BD3E3FB4
	697CDA773BBDB8D13F224671734EF3296E9E5CA3D5BCBAB9A7336F6878FD64A05B572A20DFFDA365DD8F74E5D0DBF8726FD5445B702A6D0537D91C680376B10D3497F65B59BDB11497B712EE4EDE90F43E5B8D6F3F304F3C9F5F70995078FEFBC426950677775BE71E76400C5260F3FAFF971DD3AE5567799906CB04F2120EDB45E2406CB3ED3612B3049BE6B6D28BE57B9932872F945111E2F8FF754F3E371FDCDF79524C53D8670E4874DF06771B6E19277D0599254167740B03E48F3DB0275CAF9CE37FAB047B
	0D61BE3C5F89C843457ADFE0212FA95D6F02BCD4766CAFAF2EAAAF2E2EA92376DFF4D97B24C7196D0C820D59E748A78D58477B2498BC1E523E4B086BAA1E007F25E70C5FE57C36EB7CF799C2B765B1ABF51AAFFA2D79FB0D59FB8234DB2F377D1CEBBCFF0FA0996D1B3CEF8C52F9D7D1D31B2D8A2093A088B03709F4A9EF0A6872BD7B54F479F417711E16638A3A11A737688BC5F8BA129321B1685AE7CD23D181A2C022DAA32165CCBF9F24FCB72E09F23D4DBEF32E776218DC6D244F1C6B210EA375324F1C6B35
	0D697F204F1C6BD1FFEE77EB466C076B002F642609E39FEE4B3FE33264B53759109E473D42F02500C399F8AEA93E097B3EF616F2596BD27BB93EA81C934137C8F84E83E57E7FF47EB63FA39D5649CBC28660D4A13BE9A8244A7EE27EC7EC0A10B3C65BBFFA70588BABFFFDA914A6ECEC95DEF78326DBD258390D64426F0F35FFC6F0CE488A62372B78B7322DC2FA08BDB2C26A08CF328B796EAE7CE33910AA399A69C4A8248ABB6CC82992EFCDAADB44D03F0A86FF42AE2487705FA6885BF835CF8CF8AA79715009
	B07E33041446BE349126AC81785D4E7845D1AA74D1367FF36E41FD6793172689296704CDBED9F41D931D2A2C348AD9EA3FA2057AE51FAB9CBC5D40864A9CC63D6237B0E9B05CAEDDFC943682CF36F5268743DF1A1333AE67DC2AA00495211235D421C1055E425554AFAAC0CAD2DAD57CB79032D222577D559E754D275FAB3816AA24E8C25E90BE955243C1D55868967DDE5F883CB4337593421ACC9538D544C0887FEE94B8ABB6F1C6D5BA010AAF7C246A3E2F7E5F95C6A052D59576F2D5C257CA0FA47BAB9B5DEE
	EFC05287G3D42703B756131CD05294D367067F71CFF76B58758C13310662F2AE23F2B596FA3783B1AE12A99267A88A8F703B0610F39BECCB2B36381FEF299BFB87D9567E08655DF3E741307FED53FE1BDC8F7CE48E0DF8443A464C5DA358F799D12F24F627BF6EF1E17F0AF4ED190CDA50C63E607D5A1C73B1C60162E8A1B8D5F87B36229632C8B319B471B8922B7691305259C56B4177D5EB6E55131D7BE6B3BD367F8F758122714A8BC250F65091439F1182DFDBEB6761999E68F0435EFEF4AEE9B3F11C93A7B
	0D285F4858DB399F6CEBB57F7D5B7385A8548240AFED25BB3A2385788F3E22FDF7586D97FDBED5748DB686DC788D621991D50AFCA7322EG478FD19B2D12577D2EG799EB07479FFD0CB87882E6D35A89E99GG50CCGGD0CB818294G94G88G88G0B0AD2AE2E6D35A89E99GG50CCGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGD899GGGG
**end of data**/
}

/**
 * Return the JPanelDefvalue property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelDefvalue() {
	if (ivjJPanelDefvalue == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("dialog", 0, 14));
			ivjLocalBorder.setTitle("Default Value");
			ivjJPanelDefvalue = new javax.swing.JPanel();
			ivjJPanelDefvalue.setName("JPanelDefvalue");
			ivjJPanelDefvalue.setBorder(ivjLocalBorder);
			ivjJPanelDefvalue.setLayout(new java.awt.BorderLayout());
			ivjJPanelDefvalue.setBounds(178, 153, 227, 48);
			getJPanelDefvalue().add(getJTextFieldDefaultValue(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelDefvalue;
}


/**
 * Return the JPanelTrigger property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelLoginDescription() {
	if (ivjJPanelLoginDescription == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder2.setTitle("Description");
			ivjJPanelLoginDescription = new javax.swing.JPanel();
			ivjJPanelLoginDescription.setName("JPanelLoginDescription");
			ivjJPanelLoginDescription.setBorder(ivjLocalBorder2);
			ivjJPanelLoginDescription.setLayout(null);
			ivjJPanelLoginDescription.setBounds(178, 13, 227, 135);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelLoginDescription;
}


/**
 * Return the JPanelValue property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelValue() {
	if (ivjJPanelValue == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("dialog", 0, 14));
			ivjLocalBorder1.setTitle("Custom Value");
			ivjJPanelValue = new javax.swing.JPanel();
			ivjJPanelValue.setName("JPanelValue");
			ivjJPanelValue.setBorder(ivjLocalBorder1);
			ivjJPanelValue.setLayout(new java.awt.BorderLayout());
			ivjJPanelValue.setBounds(178, 211, 227, 48);
			getJPanelValue().add(getJTextFieldValue(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelValue;
}


/**
 * Return the JScrollJTree property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollJTree() {
	if (ivjJScrollJTree == null) {
		try {
			ivjJScrollJTree = new javax.swing.JScrollPane();
			ivjJScrollJTree.setName("JScrollJTree");
			ivjJScrollJTree.setBounds(4, 12, 170, 301);
			getJScrollJTree().setViewportView(getJTreeRoles());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollJTree;
}


/**
 * Return the JTextFieldFirstName property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldDefaultValue() {
	if (ivjJTextFieldDefaultValue == null) {
		try {
			ivjJTextFieldDefaultValue = new javax.swing.JTextField();
			ivjJTextFieldDefaultValue.setName("JTextFieldDefaultValue");
			ivjJTextFieldDefaultValue.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDefaultValue;
}


/**
 * Return the JTextFieldValue property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldValue() {
	if (ivjJTextFieldValue == null) {
		try {
			ivjJTextFieldValue = new javax.swing.JTextField();
			ivjJTextFieldValue.setName("JTextFieldValue");
			ivjJTextFieldValue.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldValue;
}


/**
 * Return the JTree1 property value.
 * @return javax.swing.JTree
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTree getJTreeRoles() {
	if (ivjJTreeRoles == null) {
		try {
			ivjJTreeRoles = new javax.swing.JTree();
			ivjJTreeRoles.setName("JTreeRoles");
			ivjJTreeRoles.setBounds(0, 0, 165, 243);
			// user code begin {1}
			
			
			DefaultMutableTreeNode root = 
				new DefaultMutableTreeNode("Role Categories");

			ivjJTreeRoles.setModel( new CTITreeModel(root) );			
			ivjJTreeRoles.setCellRenderer( new CheckRenderer() );
			//ivjJTreeRoles.setRootVisible( false );

			DefaultDatabaseCache cache = DefaultDatabaseCache.getInstance();
			
			synchronized( cache )
			{
				List roles = cache.getAllYukonRoles();
				Collections.sort( roles, LiteComparators.liteRoleCategoryComparator );
				String tmpCat = null;
				CheckNode currParent = null;
				
				for( int i = 0; i < roles.size(); i++ )
				{
					LiteYukonRole role = (LiteYukonRole)roles.get(i);

					if( !role.getCategory().equalsIgnoreCase(tmpCat) )
					{
						tmpCat = role.getCategory();
						currParent = new CheckNode(tmpCat);
						root.add( currParent );
					}
						
					currParent.add( new CheckNode(role) );
				}
				
			}
			
			//expand the root
			ivjJTreeRoles.expandPath( new TreePath(root.getPath()) );

			ivjJTreeRoles.addMouseListener(
				new CheckNodeSelectionListener(ivjJTreeRoles) );
			
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTreeRoles;
}

/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	YukonUser login = (YukonUser)o;

	return o;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	// user code end
	getJTextFieldValue().addCaretListener(this);
}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("UserRolePanel");
		setToolTipText("");
		setLayout(null);
		setSize(411, 348);
		add(getJPanelDefvalue(), getJPanelDefvalue().getName());
		add(getJPanelValue(), getJPanelValue().getName());
		add(getJPanelLoginDescription(), getJPanelLoginDescription().getName());
		add(getJScrollJTree(), getJScrollJTree().getName());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	// user code end
}

/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	return true;
}

/**
 * This method was created in VisualAge.
 * @return CTITreeMode
 */
private CTITreeModel getJTreeModel() 
{
	return (CTITreeModel)getJTreeRoles().getModel();
}

/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		UserLoginBasePanel aUserLoginBasePanel;
		aUserLoginBasePanel = new UserLoginBasePanel();
		frame.setContentPane(aUserLoginBasePanel);
		frame.setSize(aUserLoginBasePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}

	
	/**
	 * setValue method comment.
	 */
	public void setValue(Object o) 
	{
		if( o == null )
			return;
	
		YukonUser login = (YukonUser)o;
	
		DefaultMutableTreeNode
			root = (DefaultMutableTreeNode)getJTreeRoles().getModel().getRoot();

		List allRoles = getJTreeModel().getAllLeafNodes( new TreePath(root) );
					
			
		DefaultDatabaseCache cache = DefaultDatabaseCache.getInstance();
		
		synchronized( cache )
		{
			List roles = (List)cache.getAllYukonUserRoleMap().get( 
									LiteFactory.createLite(login) );
			
			for( int i = 0; roles != null && i < roles.size(); i++ )
			{
				Pair rolePair = (Pair)roles.get(i);
				
				for( int j = 0; j < allRoles.size(); j++  )
				{
					CheckNode roleNode = 
							(CheckNode)allRoles.get(j);

					LiteYukonRole role = (LiteYukonRole)roleNode.getUserObject();

					if( rolePair.getFirst().equals(role) )
					{
						roleNode.setUserObject( rolePair.getFirst() );
						roleNode.setSelected( true );
						
						//direct lookup here
						CheckNode srchNode =
							(CheckNode)getJTreeModel().findNode(
									new TreePath(roleNode), roleNode);
									
						if( srchNode != null )
							srchNode.setSelected( true );
								
						getJTreeModel().reload();
						
						break;
						
					}
		
				}			
								
			}
			
		}
			
			
	}
	
}
package com.cannontech.dbeditor.editor.port;

/**
 * This type was created in VisualAge.
 */

 import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.data.port.DirectPort;
import com.cannontech.database.db.port.CommPort;
 
public class PortAlarmEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ItemListener, javax.swing.event.CaretListener {
	private javax.swing.JCheckBox ivjAlarmInhibitCheckBox = null;
	private javax.swing.JPanel ivjCommunicationsPanel = null;
	private javax.swing.JLabel ivjPercentLabel = null;
	private javax.swing.JCheckBox ivjPerformanceAlarmCheckBox = null;
	private javax.swing.JTextField ivjPerformanceThresholdTextField = null;
	private javax.swing.JLabel ivjPerformanceThresholdLabel = null;
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public PortAlarmEditorPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getPerformanceThresholdTextField()) 
		connEtoC3(e);
	// user code begin {2}
	// user code end
}
/**
 * connEtoC1:  (AlarmInhibitCheckBox.item.itemStateChanged(java.awt.event.ItemEvent) --> PortAlarmEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (PerformanceAlarmCheckBox.item.itemStateChanged(java.awt.event.ItemEvent) --> PortAlarmEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		if( getPerformanceAlarmCheckBox().isSelected() )
		{
			getPerformanceThresholdLabel().setEnabled(true);
			getPerformanceThresholdTextField().setEnabled(true);
		}
		else
		{
			getPerformanceThresholdLabel().setEnabled(false);
			getPerformanceThresholdTextField().setEnabled(false);
		}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (PerformanceThresholdTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> PortAlarmEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Return the AlarmInhibitCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getAlarmInhibitCheckBox() {
	if (ivjAlarmInhibitCheckBox == null) {
		try {
			ivjAlarmInhibitCheckBox = new javax.swing.JCheckBox();
			ivjAlarmInhibitCheckBox.setName("AlarmInhibitCheckBox");
			ivjAlarmInhibitCheckBox.setText("Disable Alarms");
			ivjAlarmInhibitCheckBox.setMaximumSize(new java.awt.Dimension(104, 26));
			ivjAlarmInhibitCheckBox.setActionCommand("Alarm Inhibit");
			ivjAlarmInhibitCheckBox.setBorderPainted(false);
			ivjAlarmInhibitCheckBox.setPreferredSize(new java.awt.Dimension(104, 26));
			ivjAlarmInhibitCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjAlarmInhibitCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjAlarmInhibitCheckBox.setMinimumSize(new java.awt.Dimension(104, 26));
			ivjAlarmInhibitCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAlarmInhibitCheckBox;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G91016CA8GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155DD8FD8D457155744C61A107827E457B426EB92B7F13F250DE95C56B66E3736E53B06F5B7366BEE5844A4ECE2DA1A1016EE4D0636664BC3A02281C30C0998D1D151E0A488BAC6A45470D7C1D1088CB87CD38666B1B3B24C0CB38F987E691EFB6FBB773DF9738686DAF7D33F6F705E7D5DFB6E1FF34FBD775EF35F9D05EDFB9624A6ED58A688C929027C6FC412A034778B420F9FA97A81E2B11FC4E7882A
	FFFB015E95BAF72440B38E625A9F084E4894CE8E26C1F8BD04CB6F0E4E588E6F6F8927868DD6F889D2CEBA44BDBD671EC746AF27398C4B59C8435F4DCE0767961220A0BAA39748DDC04AFFB2BBCB46EBA03CC5FEA71434C190F20E10B412A9CB05AF11532D03E79A44279512B4AFE7E74B71B6402681C581459CE1E993603909566EDAFD311CEED95A5D420C23AFA4114AA72972C7EAA8E43C127C4C91EE2702C896864F9B60D95A50EBBD556D6AAB68166C85162E822FA8753B8B2C7D7682374BA31514B4405F0B
	E60B5DD5ED31CBAECF0359A9BA56523AFE5D14C6739104C8883B0B88362B0548A78F5E4B00CCC5D85FDF1EAF156B53796A83C259F32F842D6F12A2D64F18A2253ECB8F1C5998F614647F5E2EF419AF8B428DC02CAD05C3477D5AE2F6BADDCEC96C369508345A2A4614BB4C1EBED5E3000F3527ED9736E765D1EC4F770D243C14E3519959C006E308CFEFA2F89D04ADC02347301DAFFC0E6DF4589E92D28A93125E89524E08E32CFD4B0EA96D0C7F5C3EE5875533974A092EA412F28D519905C0C6A089A882E8A755
	6F7B4ABE06E7F917D4696A6BF3B94B5D6E8A0745F35EE5919D70DED282B1B2F6D16CF6F9AC0240F4782FCC79BA75C10AB4786BAFA15636CB826A5C3C8D778A73767C1E6A1136ED161ED5C94B65BCD69B1436E59FA7F23B1F6A47BA40899F118D439F25F867F185E77D3D1F62B48CF1A91F221CA37230AE69F367884B2C4FA4ED54290B7B1FDECF1A76A92B433CCF153AB099AF2BA4B20E82BC96A891A87384489A2861844A7867E547A612F1AD681947E9F6B476F7394D9E29225F6E30089ED956BBF60DA7EBBDE2
	FC9FCD1A0F49E551B1F59FE5BD7E3C2EDCE6AFFBA549F10249E34689C5AE2C6C4E20E5AFBC91289BDBF89F9650B13174846B43E40E97D3FC058AE7FD3B1C0EAD920E013852E250F51A7EB51AFEC1B1CB3F11671354CC73D761AC1F19B4BD892F02B84349688C563F2D5544164E0370922015C0EB01D2CA22B3F2008CA55847C74B0F04B80E9AD47D4BF8DFA97FG1E22CF7218EB1DDE496C6C961B4D9E3B394BA1FA85B94D3AF2D237AEBF3E5F52715D8DE51C911D2247AC59DDCE485D5CA702B2F9D91A8D956F12
	B49E11469A6DFDA294506796B05F4D956F4153E176CACDEE0BD9921594ACFEEB85510981F3B3648899103EAEA1727A8E355BC6F8F717202CE61EA6588A8847F2395CD931951E67C039C5C7C9C9153D1BD4436C99C29DFD380548F79D496733680CF8A0DBE9F4C69C10638F907E83377DA6544944176E95623E33C6D7A78979CEB17D1AFDCA2B135F25E5AD85BC86A891A86B73680CE2A093106FF31C1F8F3538D57911FAF0DB70193F6E123AEA4BA7ED5153EF52A6521E784F7463D959B5FEE5E7285ED3F5462AB6
	0F64A0E36EED01593F0DC162D97F3DF6060C01F9A007A5C02BBF47BEDCD11143F43B426C95D11B6BBD200822C569D116769FABC9B9620068142AC4376834400BD7562515151B94BD6FF1F19D7CA945095D2B84C574F2BC2672DD06C39E6AD1037131B45EACC99EFBD73FA4B60A12E4F7DA957EB8DA972F1FC9754AEDFD3D0634B59E5A18D2961D312D8C5BFA2D6ABD153E5639DC3D7DEEA39909325E8F5279BD8F521715213E981A487A4E424327E8D8097F315124A3F312FEB236F9FCDB7F3CEE994174E1EAE57C
	3E8957CD4932BEB2FCA33529B320BD11C02BF93B6FECB2E9527FA96A62DF2707E8996A7A7CA94BE0BAE1298E2E533D557ABAFD2DDADF27872B4757599B55FABA4B62EE2BA6EDF48DBAD5E3600EEAE2DF3BDDCE27C887A2E791581A7617C6528E3B53AEDD32DB2C2254E89F9685A1371C68F28C35616B213FB24B514E8E6EC7BBEBE97E8B21E1EC256E7AEC713B2FA5594A197E0E16ABF61655A97CB4518751A1760120AADD7DCE0961F3697CA0635EE40A19BFA0B24B493BE8ECB43A0C3ECBE63B548893D81591C4
	FA5AAEBAAC793D62D08110F148ADDA722E1A874C8566C1290076C641B9F1281A3C9C4A796413D3B9FA3B0C7C9E3BC72CF53A7B6579AD6FD07321C20115FDB1AF206CAAFBCF4FCDAD3BC8AEFB7DE9A7AB1B701C0769D774984DF6474DAC7A28A017BD50AA513269A62656E933F75925CA1B585DDB6172655BA5312F007CE914002F52E6F6DA83ABD08B711A9AE8F7C43A02E7655B73FD347C86515363727411758E657EBF29C3912B43AFB6FB35F5B05ABC225766F2D8265A892194FFD46E03EAF1AC04723BE16E13
	8A68DFB98BD289DF01F7900C06DC0FCA92BB251A603C7F71D9B2DE6743B8DE8C34229C6742ADE7C8BC4E057204DF69F2B8182901387C8AE2C7FE5932CDE59BE24B19CFE38B0F7F30F57C78539344FBA6087F4684715193447FCF50F8A6075F1F49A4B6D93C56AFC2B71145G74BD2E2FEB36EA621A4D0EFEE55D3E39062C3D9C2AF584435F285137114935E46D504B735FD87B16C0565FACCFE653971BC91EEE0F3D8F16DDE4E1A47B066E5A25768DC950B662C70A0467728A74F1BCB7C05A2AE7B29C15A40F12E6
	749D45GCF8211CFA54B272E12490425FB0327DB8A61D5154152BDFA8953A5C0B82DAABAA32F4ABF1D250A247B9577839D6158DBAD847BA6CC6ACF24605E74FC265AE7B57A13D7F467A7C20B2AE45FC815F64FFE659C49F78D6071D5286B53EB556B3EF22F5755ED27DBA6393F8A4F2A67AE069DBF3B991EB0343C30FF3708BE6C734F4E123A12BD158C4B7D7637077FA0846E91D99760323AF2108EE5232B9236F5B520B615FCEAEF360B03824A616BC7553E30796D7F1A74F690B98855F27B2B95B96415593730
	BAED3CC27669FABEAF623D6B176CE457E6164C54F8287CF609F49DCC72682CC6FF56ABB9F47FG6145C0AB00585E3A1B2E8FC95AD84032CEC7E730F17740DE7538EBB84D5654BEF8B29B995DCCF4E1121301AC6B28C3DBD95FE84C9E4ACFE8A8134B0D2C3ACF70FD7CDF3ABE36F87B53C96127195C161CD6645750F6F54B36ABD73730769D3C046D934E40FE728C366F5EF6ED7B5C9097F1866572B467DB84D82C425724664B2AE1FCE5B5A817F293114BA46786743F9D759BBFEFEC5A90EC7C98EBD8FBEDB55A71
	D3F91E747D8C4067556078794E59F7D56367A2E8AC7493D8BB3E06BE174C6C1A9C361DCBC53BA660BCB46D82E9F7A4643982A896A891A82B964B785539897DE8553EF17CE8EF8478240AEB15BDD8DDED60FE0C790C2E6C25FE45DA66B3CA6578D50ACBAA1C756B2FF330DF43A0AE3E9677C376E6ED798DE77D4BF4E8420CEFB0002FC0931E2D61E3E360D473CE9C5BAA55A8A9B90B8BAD59E77D1FFBC9FF3ECF7470AC7AF27E231E586D74F3E02F014A005A0126814D87DAFE8E7B64D41D1ECD736F13E086CD594F
	33F666DF1A1AFCCA8278347209BD674F47664B5F942B674B44F34C7EE457C5E79482B1597C349DE5D3D3077D98BB45FA7EF242FAC656697563013CEC7DFE648BC5392ECD242E44E794D5077D78419754DFF19E6C52F96C33FB6BB2D4E33541E5F7CAFC1C561CA76B8D1747EE35BB91BBCF31EE1707EEBC9996F6A1781EF856857DBD715D9774774477DE985F4F736005E0FBE6661359361B3431865A578E443056BD841B8661F967315FC42A674BA03C06E3EE0A11F58E31318CFBBDC74F17B29942B27462D89919
	FB7F58B24673296C2271CFFC708E152B57ABFA69A0A493399C77F369FDC147EFF081765E826E9397B4EF1253D4CB2E4AA2DE7767F46B3EDEEEEF6685764C3D20343F985E6B00BAAF784BC402F09850FC20459754EB6E587A607A7573FAFD7DFA351E683557556F699635BA342EBE0B47A99608AC9BC81365B5B965174C9E2B982003A98DD9BCAE98FFC6C3B0BDE5726C3E241667D1BE3EFFF3A8CBFFFC2B56DB07CF2649720F3A006B2D58B6B24F2C077036FAD8BB54237EBE552E57BFD575CC3EA6796928D77AE2
	9A3CC7GAD2A776F1FE590DE853496A8D10EE3ED59EED2376598570D271A46536B74860D9D164386F856E8625AA16C56E0CC4EBB3FA0732D0F07775070902F5B615D44DEB94CC32EFEB0ECEB9A082CAAF6232D1F816179F23ED18D4C6633FEF8F4102C21FBBC66BE90FF23DB6C9616FEC1F82F6DC15EDC8897831900FCC0733E40B559B30DE46D2267D1E1715F6EA07B8BB2C976BB6D5DF4E761E5A7474CDE897BC87F8A97617DA25AB011E25990B6F0EC739035F59036F06C810A79AE32F5884316D3AC823045BC
	5D4CEE02C5C1F8B54736D793AC8E426BB976AA55353446680C1CC644969A88E6E8E432E2580F8CE8E30D0D28FB05A755F35CC24017B6AAFD3832B1589A4B58CEF4B9361135E193474D94DF2F42599A6BE7D477C9B84B981DB1EA44FA7E369D65984B31FD9DA847F80E6536229C05A6443E5A9AA847852DA847EDBC5D0BCDA847BC0E3D33A7D00E15FBD00E25BC1D31BFD00E3D7DA847861E6E37CDD867859CFB136E1117B4B1D9B3ECE78B56EF85CFF71F916B3706E32F5E40B292B8565B0C75ABEB46BD49555D68
	63B782965E0CE3232853EF8DC236DEA5A5E7BCF6CB0559DAC7C79A33C98FD37EA860DB83342E997D4A434938DFDDFF68C1A17C2DF53A5FEE14BE7EC2D27AA526A3051714FDC74C6776AD4C8E3EC6E5CA789C903F7092BD5F4FD16F1748F85B35012D2DD8FC13DFBC31515502BAFE26DFBC296F23FE7C5F730BA772B8A47333369DEE433699BFFDD82839B5A668F7A971F21BB2CD6CE95C3EDD2879CB579659266EA33E9F89A6369A93790EA87A1240ED5A68BEE21B7A4CBEFBDFFF9FF562C719C85D4E6EA7728807
	77F9A634C5FB07C879E6BAC3910BE3F6DAC81F5074A554AE243500BE37E07A6F5174DDAE6260EBB043EAD03470F21F22F1EE0F58A3FABC22059D9F48F9A5503C8AA11FD21E57B73AC99BFADCCE0925D9C2ED0E8D62A51E26207AAD5A968FDDE332363EE6D25A1AD2C25BEAF7EA5A1ADDC272DA8879AC66F9BDEEA0F655868B56E1A8536CA8F7582DCE622391B2DB699E5BD0A54BFECDCB206DC9921473A9C289100650FE391FD3DA19ADD06C4199EA9BCD00BBDAF19C2D98417567EC0ED50C61F8DB520A3631351D
	7891D35A40EEGB5G0D36E11C154691BFDAC49B7313AD61F171EDB8272648FC6AB66435692FB355B4BACE9AD6C6AADFB3A48B0167E8211C5D691DC7A331BE7E1796016B4EB9EA13D7C33DE20198F61E5A5A74F6587337A37684450AA1DC4531F4EA375C909E6518035A05C888AF85E2FDFFCBBF767D5A7660FD3FB1C85FA736ABFD4F4A58C74BCD6900778E543F8FDA88FF374B515F67744A692A28CD2E02B48D9DD83F9FD31BBC8A61308E2CDF5F8D2C5F320E407AA5EBE8D507FF7D56F6E86B97C16B17G787A
	8E3E3F59BD35EF072ECF1A0F4D57BB7750EF77AEABF5E3F8AE458DAA1C4DB75F6473CD9944AD3C0C7B5647DB491AAB6DCAF4C6AED0A91091C8821AFD8577318B3FA894A670BD98DD6EBA58C4B8D45BCA563E5F6D195A37D19B0DE86BA39E19AB789CCF86753BAE3CA22FB165E7EC5AF60A3376DDE8A76DDB87F1191D303E832A836A8472F5E27B623F48E76DA3AE62F2C9B2F75B2877999BC79C428ACC962C2C0EC70A55BE3E553B1ECCCA8AD24770CE793B36CEE52EE5E3356A32A020BDFE5337871ECEF1B007FB
	DD2B6CD0A479A0A82F2850101FF374D374AF7E1720AEBBE75906207E4515F2193172F3D176F659CEF4DFD14A3EF7086C83775105F50E3C325EA7277B2CD3C9B75A9DCA9D99DF1CC561FB3BFA1F166FB4CCA4F97BACF63343E55D171FD3181FD3E4B804B6EC3928709EBB96CA19EC5D7276F17417E71923B376D0FE50EFC1794772FF36C7603A166DC5DD0BBFF30FB063591713768711E5031949F001D96947E542190D2C1E17CF1279164D6F389F6ABF09FB1A9860C9G4A6B02F186E484E2E9FEBD02E9FCDDEC4F
	B49B1E8B3B182F04593016B1EE433A74ED2C1F8D03B4EB3B188DA36144AE459E303A3E56C84A8CF6B24C52140C6C70CF43CFCE6B4CDD74DBDCF99FE85C95A49DF71C7134B574BBC2C85B8DC309E643FC71CF781D8D26F4333667F5232F7EFBA63D78D2F8327E5CE8D374E5C76BF87AE2A8D66B684BAA3E01D622AB7BD48D4921D241F170C33B12B626A974B2129D8ADF721E490D03E7D43C357D2114494641E37DB88E9A380C9E6BD374FF16D349773FCD870367FB3448F042D0FC6CD34389483E10574B6AD27867
	9AF78767BFF64C0F6FE52F4297FB63003EAC3CE62757ABFA6CBDAAF1486D7A468DECD7D877F8637B0712727E75FE254C7926D06A4A662E3DA4FB797DE3557BE33B7FD81F62446B0215B7358CB66FC53586777D7DF32B3E6F6FA72D7A3E6527DA477F5E6A7956605FDB7D2CD57D3D951B372F527373655047EB00848B6C230072ACB8E7CBEDE49C112FFD83676BEA0B15789E49973E9216FF29BDF8DBAF37CF7CDD30351D1CC1F739A44955C772C73C2F1D741764F2D310E11EF6A2A30F5DEA13D8D29977D11F09C3
	6C21307CADAFB9EA166353BA48F8E8B6DF55BD31BE8B7ADA5FF5D56C160CE6AB1753B59FDD8303DCBA39EC3EFA79F030FCGEC70385C22C79AE2A87D0A82FD654755EB35E910DF04E57CBD8F2B43B707485C348852C681458189A27497D0BED09910914886B48DE89ED0A450F22055C0EB01920152FB307E7B2C0746293F6C8C219D6CB133B39536463D6FA4FE231E83F919FA50277273DDA43F714F5E0DF649A1D648D337ECEBDEBA0936E6F68F7A02D3C47AFDBC04E3019201589957F7C56D99D72695561BC0B5
	D674796C9845B5F8A7E0732CF876E59EC5DF4BAAAB16B30B26CD33C17EC045B6CCFB7B98376BB6FD7B975CA61E9A91846E8B6F89628B27F3B2ABCBE843F32EB0DEFE028931F89B6EFD16762B7526419E1DE1310F2FB70C6F419BEABE9F7004CF40A70F2F0160E3F9E8E06231FC4BG7D468446A079600CE1B38768F9DCCF0FD764B6A3FCA013E3355E861757CEBCBDACEE40C76A436D9D9BC6B25F180F58AE72ADA84C6976E16A04EE0404CEAB73D9FCC457288B6CEA7FE7BE45164A984B6787C3415B39E2E862F6
	7EE4C85FE6BDB594E833568C695B2C970654B6CBBE979AA2BAE405F1E8626962B9564231DF53BC89F649EE11EC9CFF1D560B60B5A2A99071B7E83D86A9E612318D438A56A2E39B07C9DFC113EDAEFECE1ABECC7DE1F6070305B3E99A3B933A0E4B637DE1D2C73B5B2C2A77079CEBD1747264C4FB56559ABDE5FC0FCE4837DBF79C3CCC7992A650FD3E763D0AF7EFFC5496E5DD557AG26D3BC772A568730D9C47BD388F191D751F67D544FF6116F5992C9DCAF582FDE9C77C2871E0B5575220DAA9E235F23C3F8BE
	5012DE3487FBC627668B79E40AFCBD1366E3F2CA2675DF592B15DFBA45E3FA35723B1B5B6F3590D76340764E9AD3179F8978F2C7A876AF35CDEF0D37DA660D8B1247FA40B37B7C63F2A1DC5C2727132F19744A281353F6766917A1819E26091B8F61459A0C592EA77B836D596AFE35BDE35877EF84267B079B6AF4ECEEB29FA4F2166DA7B59D8C4F76E5A8B81A8E791CFD79FBAC4EE1F70A156C2696AFA3097A3323206EEB7A50EF9CEE21BEBC8827B8319F2FD31F83FB1F29FA4F94EF7EFA7F50CDAD035DD7FED5
	44EFC4B31D6C3EF29EBCCB1D72990993477AF08B2EB19CCE9C6B9F5273410590DE86341A4BAC35C32D7B71008BAEC5C7363982750B0D31C8BA4672DC5AF3486FD13C4A25BD07BCB50667101D9097654272B70DA97D34D575FE6F684D6F33A5B7358C26278F0D850E193F9D8B9CDB9F5135DA1E9B6C009BF57C36B6BC5B2C635841E6BC476C64D8F3AB1EE3CA9C3B329F4FD542B8669B46F34C980EEDEF41F263B9565702658A57903B43484FF7B976EFA6FE3E4B315E91AC3714E3552DD8EE78B5BC8F48AAA13AA0
	11D5BB719988681BAF24E3FD81240B64E99F3424E2DA8157425F2A9538EEFD5003F6BD96F832BCB88EAE776037528D9E9C878F5234E190DEG341463D72D84DF8561B8A0410B7AF923C5BBB7E5F915B1116F8DB6BE6E22632D4C2B7D96729E0A9B3D5AEFA1F35A71DBC89B442D74226C32693CDDA8C5E7D4C9087DF5AEBDAB0470A847769CC439AF10306E5F9E8BFE0E768FB4AE8152E676C7E79482B574E3DC55584DBFC76B983B1967E8CCEFCE3561B9B153ADA39DCFEEE867E8BF1EB7BDC23185900E64D8BD9D
	E3B190DE4B319BD407B387E06DB600BE5D017D68532D9B1858272BBEB723FB48816D39547DF4FCBAG778DE039E5F4ACAE0470E20E7D854516C3F8A54716507119886114C144565371D9886152C1FE56B702F5F68C8656B9F502BACF9B545659C965928E783CC174D3FE3BCE60FDF0437211B00E3F34204B65306C4B4FA9E2DEC2269B59BDD3DBC7FEBCC53E6E20FCD1BAB2D24678F6EAB3E28635F77077D2BCCE0533B17EB7BD685FC80438F69F6E831E2369177B34F770DFE6792BF0160F5B0AF77093A04EB804
	B6006985318BCBB93626956D421AA19C5F916D015FF77E957B9EE8181DEBB06C206E77F11321093F6F7C7C0FAEE33C6FBB6573270E40F31D339D5AF31D1CE165DC0771FD33A5707B38FF4DC5BE43B0BB6B2903E727ACB7B646BEBD08E34CB7BC79331E70E1E50C313313B78C5A7B91242CF943F83612FADDFB36C262A3F9FCFE0B761E8409DF4E63DF9F5663DFBD0C63797673821765D89BE93F5F998BBFADAA594752F7DDD0526FEC9E6F4C6378B198777C1C2524DE61BBB76E9910BF5FE7DFA8FC0D7BC3BD1FE1
	EB04077763DAB90E37773D0BA4BF767E4AC5A56F6B631E99795769C70D8A1F3D05BC779D40F328FB0DCADC7FF8E7AFC5C7D916B21F37C961DBB15EB908066FF65577D1D7C6A6A71F47C6D0BEB9A3A81FAE13A21F1296A56F7BC2EA8B33CB43BD787BG444F4AEC41AE2B7F6F83FCC443CA7CA3BDB77F7781D6681671277DFD0035D67D5F87C820388964BC8DE8518836FB40FA73FF9FE01675E67EBEG331DD1ADE8BBD70DA85F96470DB09DE05F907F26955388233057GB2G990124D134D711B62DBDA47C9123
	386E3F2583F5F651A87A6E7FA7176F91G4B9A4334278E206F3EE18C77820E83F40FG6185C0CBF9DA6BC14CF755980E052D2D242AAC5EF09C6F4024DDC71E526B68EFF7F02C3B8531D59CAB98C14CF0837BBDF23FFADDB28F70489B217825160E287916834F6A8978589D547DB674AF44C1FA32969026B1DF227FDD559B86CCD78A71E48F211F6EDBA6CCE71C4676988ECDBA56B771AD58B70BA0BEF69A764321D66A9F1D8E3CC0B553D1D6BB5A304FBA2763372DE75A467F36F528ED7CEFDB3F53B67E372DF1ED
	413EEDE5F5FA5106FDBFEFBA765FCC6ADBD9BFBDB47B14F98B722D4F1D5ABAF673012971D5CE1A0F2DCFE369B8493DC56BFF7D85458BEF517ADFBD87301FCBA1EE81EF2F63203A7C14DBE1FC5E9A0A1E1FBC2EE72B73E55EB279E9D465E50377D120591A7C97C2F8A950CA20D8B90E151138D12F0CF5F21A3499C176870097EA622AA0EC52E02C8CDB4BF8EBE00706E71A9C0E0067A2CD5CB2882F52AD635808DE99EB653409C15A117E95D897FF45BF4EG619A8DA65FF3589F686BDA31BF50577564080E3FF9C4
	1D0E69CB1D8DFDA26DD0DE44D7F0DDDEE7184AFDE71667A28366399272CB398D670727CC081782A65D06E51536CC658EB11379FF87780EC29B0FC26B544663FD54DEC65E269D0F8FD1FC69ED5A71F8249547E39444654D4471383BEDEA750E336969D878CC791BBB7939E42622BBAB60FD8DD042CCFFFDCA89839BG148FD4964662181EFC23834F820CE13847B565861E857C0CFC0AA1576BD72AF75F011B6FD71EF3D34BE0ED3E75E060988ABB98B8565A681A4496263E67330CE2BE40E6F3998E9D21FEA688AF
	67585B05745B73B0F5FE7BA816GD87AD7B15D6AA20265C03810E34F55536FDAA0EC6258468602D9A0BC4AB18B75354D7E2A7A1E4FC8B37AAC9673F49F26D17F446D70FEBBEFC79A36A317E3F7DC467A95F32C540C752B63D8E2A1165149311F64E27D96F36C7696ACA30AE3D60A455C2E3EDFF4EB8B169B4F5315B5E139429D0845717BC55BB8767DE6AC5742312691EC2F0FE3AF0EE0DD42B976F697163B00E36FF4E039CBB8D6FC984BDD4131DF9D40F23342F15CDC34CD6D4EF6E7GDF01A61C9F2E4777AD43
	544ADB964027AD2FCA373CE783FE0FB53472DE89605316572EDB5E03F4FFA02F67D56F47DBEF3E9D3AF0D34B106FD95A513EA877B1CF58D1CF25F0441EF523FD8963589F2E855A1736EB284F73F93AB79D284F0BB916D491E8DFF69623BEC771F4A5C5017625258847C2CCB87A4A7F090E193CBBE13FF9A73F9FE6477383963EE0573FDB769235279660F3F35EF56E60F74B9E2036165C5F194F539B2F853FDB6639967CEE59B9EA4716C1BEABF8DE9F74795FADFB0336F79D448BF77173370A403BE57DED82AF73
	E8317E5D32C2EA438BA11FD21E5797C5635FAD1B5B0C7ED05BDD133FDFB4FA17765B7722B47FF31DB3E9F82E93F6977667CB940B0470D20EAD21F343DA88A7F0CC24F3C376ACD87F4CC27F6DBBC5D8DF532C491F6BB8E6E94FC8FEC767959F60B3E6E1390F5179E2B104174DC2B9DE5739A395496695C8331E735A693C12B79BF4F5B656B91A5F11324D1E7C9D2951595ABA3FC86724B040A3E6E33957C770ACEAB9476A5389368A42EBB8E620F3D25A9C186366A0D6CC47D799046B66E01D6B8FE31DC767CC7EAC
	EA769CED1D33687AE7BE600B6620CCA3EC5A5FE6E078CB866DEF8CB0FCDB0B763EBE4B3B075A345510EFACEFD38635D5640EE87ADC446E20D89E048D9C4B6FA3D8A7049D9CBBCBED55FC88AF1A0B72F0F33DDBBDF772F7B06366AA72E0633937C3994FF539133B37D0293A5764BC924A3D8579FEC46178F7B0F62A6EACBDD1947A9D0CF74D8A5FCF6BA75716DF28F8DB46BD0F703F037123E674772D1B0B7E3E9FF4A9F9BD16B671D948BD5DCA7AE917C3BFBF38263AFBD5E48E1DEFC12F4297DFB8B9DFFFD99136
	B77FEB58DE9F3D3F425E9B7A143CD78C07DE27FC2742575AB2793BAAA92A3BAA471BC23F2B12FACD61FBE68AF7D5FE4F6F2AD838BC1E3D2648636FBCCA7EFBDAC22997CB7B7C087FF9501D2ABBB5C2D76867BA22247025F4044E57BB2870659F1E1C0ECCBB0CB2194FE5726E10A213F5C3CA5EFFBF92FA1DD68E2B4637BB147B02AC6D2757025FFBFCE4C449F31DA374FB0F0F0FA9FC2F15CF4E56FC6D3A42FBE4DC7B66FF6F71FEBE76D6F339765EA0F94967D2FE3FED169E911D1193910A0F343AC84DE7G1E1A
	1078E0542A30F660F10744771543EA3E9940B3AFA43E077C6A9989BC4BA760E3EB79671B837DA0EB1B837DA06DC501694CC50169368B0169320540F4738F87263B7FF0E03A3F57A97707FE65327FBF6769EDDB2147A3DF95D2A5E1CB155DCBAE823019536B75886FF0852A25DF44478E9CABC9FE7141648DC2CA2D70963BA1D0AB24104F7CEB05D4FA8B20D6C816DCEE9F79157C8DEA1204776BDC03B98193B41432B5D0CD4B6F7A4F27A22FD4ED5BA0EC0002ECA24BB9F510FC54CB737ED0A0DF1C8899FE8350FB
	CD38AE24E0AC641C61B7F87E717E63BFDB79DC33B7D9F82BD658C176A90DE00049D58B51C2FEFACB7EBF94CE8B1B5C64B757486E839A67250FD42FB464906B04EDBD9749EF49FAE11FD40E17B83C24ED2424A364CE50119A3357A691B9FED6A724B8497F76A0ECE5518E3353FA045D68780C36A2293C138CB52AD7825477BDDADF12CB814F653D475FB930776C5A254942065342E6074BECB98D5BBB1727D658A4612C6FF3FFDEC6B3CA237FC59259C2A5C3F6BBF973C9E38B482DDADE69DE5FFD6199F1992721F3
	FC9E6188CDC936B685BC052552E676C0D12227D6A27FFB054B134B63266F168E7E4B196D6D9B04A43911C4741BFDEE89EA6501290DF4B254A0C7D3830C629995FC6D09423B7F66F72DB4A305D59276B011816B912B686ABBD25E53E3F70ABC83109FE43F0BE7CF5294E852EC754DF97F6C3F3F59857DDDA5A4779596523FC5746FD1723708A2C594A9BA8AC2CC90467D270D77D1055BA2B1A5616305F4F341E968A96969D71FF860195204F8E85DE9A1157E1AA688BBD3C9F5213F2FCB745C96F9772E37A3E26FA0
	FD61A6AA01793E55E36E33BB06600519FD9F41F77BB4FACEC278D5A77F6717A6C2925E8D9CF9FEA9E8A8ADC0A7891A9E28DC844E2411DB695F77A7ADBA42351D726EA0851217EC7FF69E726954905B39D94EA7152759F6634DB75FD4C2C0FB3F9CED5A4417FAB441B11FDFC33053D2F52A1E24A91058E87F1FA853EDE1D2109626F035E27722D8CDC92A1B561DD5CAF71679A461837DBD8BEFBA79B6789E1D507FFB9F2A753256B701A652FACBC25281BFA4DDA77425EA17B1D0B1B78734ABDDDFB1B96AB767FFC9
	5A28D2424BFAB665CBEC83FBA6E7837FAC460FBB247173E7E75707C3376BFFB6A6E1C668A641FFB9629F7AD235692E1016CF789BBF4B2A553F17D43A6D45207F1F410287646F8C9E507E9EFB570754178EF87A0378DB858F6F78C4887E1B8D0DFDE607C3B2BBFA4B1D96727B8D95C312287CA60675C3123F97534811AC4E79A12977D5954F7F82D0CB87881DE1037205A3GG04F5GGD0CB818294G94G88G88G91016CA81DE1037205A3GG04F5GG8CGGGGGGGGGGGGGGGGGE2F5E9
	ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG3FA3GGGG
**end of data**/
}
/**
 * Return the CommunicationsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getCommunicationsPanel() {
	if (ivjCommunicationsPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("dialog.bold", 1, 14));
			ivjLocalBorder.setTitle("Communications");
			ivjCommunicationsPanel = new javax.swing.JPanel();
			ivjCommunicationsPanel.setName("CommunicationsPanel");
			ivjCommunicationsPanel.setBorder(ivjLocalBorder);
			ivjCommunicationsPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsPerformanceAlarmCheckBox = new java.awt.GridBagConstraints();
			constraintsPerformanceAlarmCheckBox.gridx = 0; constraintsPerformanceAlarmCheckBox.gridy = 0;
			constraintsPerformanceAlarmCheckBox.gridwidth = 3;
			constraintsPerformanceAlarmCheckBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPerformanceAlarmCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPerformanceAlarmCheckBox.insets = new java.awt.Insets(5, 10, 5, 0);
			getCommunicationsPanel().add(getPerformanceAlarmCheckBox(), constraintsPerformanceAlarmCheckBox);

			java.awt.GridBagConstraints constraintsPerformanceThresholdLabel = new java.awt.GridBagConstraints();
			constraintsPerformanceThresholdLabel.gridx = 0; constraintsPerformanceThresholdLabel.gridy = 1;
			constraintsPerformanceThresholdLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPerformanceThresholdLabel.insets = new java.awt.Insets(5, 10, 5, 0);
			getCommunicationsPanel().add(getPerformanceThresholdLabel(), constraintsPerformanceThresholdLabel);

			java.awt.GridBagConstraints constraintsPerformanceThresholdTextField = new java.awt.GridBagConstraints();
			constraintsPerformanceThresholdTextField.gridx = 1; constraintsPerformanceThresholdTextField.gridy = 1;
			constraintsPerformanceThresholdTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPerformanceThresholdTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPerformanceThresholdTextField.insets = new java.awt.Insets(5, 5, 5, 0);
			getCommunicationsPanel().add(getPerformanceThresholdTextField(), constraintsPerformanceThresholdTextField);

			java.awt.GridBagConstraints constraintsPercentLabel = new java.awt.GridBagConstraints();
			constraintsPercentLabel.gridx = 2; constraintsPercentLabel.gridy = 1;
			constraintsPercentLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPercentLabel.insets = new java.awt.Insets(5, 5, 5, 10);
			getCommunicationsPanel().add(getPercentLabel(), constraintsPercentLabel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCommunicationsPanel;
}
/**
 * Return the PercentLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPercentLabel() {
	if (ivjPercentLabel == null) {
		try {
			ivjPercentLabel = new javax.swing.JLabel();
			ivjPercentLabel.setName("PercentLabel");
			ivjPercentLabel.setText("%");
			ivjPercentLabel.setMaximumSize(new java.awt.Dimension(12, 16));
			ivjPercentLabel.setPreferredSize(new java.awt.Dimension(12, 16));
			ivjPercentLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPercentLabel.setMinimumSize(new java.awt.Dimension(12, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPercentLabel;
}
/**
 * Return the PerformanceAlarmCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getPerformanceAlarmCheckBox() {
	if (ivjPerformanceAlarmCheckBox == null) {
		try {
			ivjPerformanceAlarmCheckBox = new javax.swing.JCheckBox();
			ivjPerformanceAlarmCheckBox.setName("PerformanceAlarmCheckBox");
			ivjPerformanceAlarmCheckBox.setText("Low Performance Alarm");
			ivjPerformanceAlarmCheckBox.setMaximumSize(new java.awt.Dimension(148, 26));
			ivjPerformanceAlarmCheckBox.setActionCommand("Performance Alarm");
			ivjPerformanceAlarmCheckBox.setBorderPainted(false);
			ivjPerformanceAlarmCheckBox.setPreferredSize(new java.awt.Dimension(148, 26));
			ivjPerformanceAlarmCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPerformanceAlarmCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjPerformanceAlarmCheckBox.setMinimumSize(new java.awt.Dimension(148, 26));
			ivjPerformanceAlarmCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPerformanceAlarmCheckBox;
}
/**
 * Return the PerformancThresholdLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPerformanceThresholdLabel() {
	if (ivjPerformanceThresholdLabel == null) {
		try {
			ivjPerformanceThresholdLabel = new javax.swing.JLabel();
			ivjPerformanceThresholdLabel.setName("PerformanceThresholdLabel");
			ivjPerformanceThresholdLabel.setText("Performance Threshold:");
			ivjPerformanceThresholdLabel.setMaximumSize(new java.awt.Dimension(153, 16));
			ivjPerformanceThresholdLabel.setPreferredSize(new java.awt.Dimension(153, 16));
			ivjPerformanceThresholdLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPerformanceThresholdLabel.setMinimumSize(new java.awt.Dimension(153, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPerformanceThresholdLabel;
}
/**
 * Return the PerformanceThresholdTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPerformanceThresholdTextField() {
	if (ivjPerformanceThresholdTextField == null) {
		try {
			ivjPerformanceThresholdTextField = new javax.swing.JTextField();
			ivjPerformanceThresholdTextField.setName("PerformanceThresholdTextField");
			ivjPerformanceThresholdTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPerformanceThresholdTextField.setColumns(3);
			ivjPerformanceThresholdTextField.setPreferredSize(new java.awt.Dimension(33, 20));
			ivjPerformanceThresholdTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPerformanceThresholdTextField.setMinimumSize(new java.awt.Dimension(33, 20));
			// user code begin {1}

			ivjPerformanceThresholdTextField.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPerformanceThresholdTextField;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) {
	CommPort cp = ((DirectPort) val).getCommPort();
	
	Character alarmInhibit = null;

	if( getAlarmInhibitCheckBox().isSelected() )
		alarmInhibit = new Character('Y');
	else
		alarmInhibit = new Character('N');

	Integer performThreshold = new Integer( getPerformanceThresholdTextField().getText().trim() );
	Character performanceAlarm = null;

	if( getPerformanceAlarmCheckBox().isSelected() )
		performanceAlarm = new Character('Y');
	else
		performanceAlarm = new Character('N');

	cp.setAlarmInhibit( alarmInhibit);
	cp.setPerformThreshold( performThreshold);
	cp.setPerformanceAlarm( performanceAlarm);
	return val;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getAlarmInhibitCheckBox().addItemListener(this);
	getPerformanceAlarmCheckBox().addItemListener(this);
	getPerformanceThresholdTextField().addCaretListener(this);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("PortRadioEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(344, 270);

		java.awt.GridBagConstraints constraintsAlarmInhibitCheckBox = new java.awt.GridBagConstraints();
		constraintsAlarmInhibitCheckBox.gridx = 0; constraintsAlarmInhibitCheckBox.gridy = 0;
		constraintsAlarmInhibitCheckBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsAlarmInhibitCheckBox.anchor = java.awt.GridBagConstraints.WEST;
		constraintsAlarmInhibitCheckBox.insets = new java.awt.Insets(0, 0, 5, 0);
		add(getAlarmInhibitCheckBox(), constraintsAlarmInhibitCheckBox);

		java.awt.GridBagConstraints constraintsCommunicationsPanel = new java.awt.GridBagConstraints();
		constraintsCommunicationsPanel.gridx = 0; constraintsCommunicationsPanel.gridy = 1;
		constraintsCommunicationsPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsCommunicationsPanel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsCommunicationsPanel.insets = new java.awt.Insets(5, 0, 0, 0);
		add(getCommunicationsPanel(), constraintsCommunicationsPanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the ItemListener interface.
 * @param e java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void itemStateChanged(java.awt.event.ItemEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getAlarmInhibitCheckBox()) 
		connEtoC1(e);
	if (e.getSource() == getPerformanceAlarmCheckBox()) 
		connEtoC2(e);
	// user code begin {2}
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		PortAlarmEditorPanel aPortAlarmEditorPanel;
		aPortAlarmEditorPanel = new PortAlarmEditorPanel();
		frame.getContentPane().add("Center", aPortAlarmEditorPanel);
		frame.setSize(aPortAlarmEditorPanel.getSize());
		frame.setVisible(true);
		frame.setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage("dbEditorIcon.gif"));
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.database.db.setup.gui.SetupPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val) {
	CommPort cp = ((DirectPort) val).getCommPort();

	Character alarmInhibit = cp.getAlarmInhibit();
	Character performanceAlarm = cp.getPerformanceAlarm();
	Integer performThreshold = cp.getPerformThreshold();
	
	CtiUtilities.setCheckBoxState( getAlarmInhibitCheckBox(), alarmInhibit );
	CtiUtilities.setCheckBoxState( getPerformanceAlarmCheckBox(), performanceAlarm );
	getPerformanceThresholdTextField().setText( performThreshold.toString() );		
}
}

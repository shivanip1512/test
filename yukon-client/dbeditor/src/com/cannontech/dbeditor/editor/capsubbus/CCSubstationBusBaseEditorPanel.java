package com.cannontech.dbeditor.editor.capsubbus;

/**
 * This type was created in VisualAge.
 */
public class CCSubstationBusBaseEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
	private Integer originalMapLocID = null;
	private javax.swing.JPanel ivjIdentificationPanel = null;
	private javax.swing.JCheckBox ivjDisableCheckBox = null;
	private javax.swing.JCheckBox ivjJCheckBoxFriday = null;
	private javax.swing.JCheckBox ivjJCheckBoxHoliday = null;
	private javax.swing.JCheckBox ivjJCheckBoxMonday = null;
	private javax.swing.JCheckBox ivjJCheckBoxSaturday = null;
	private javax.swing.JCheckBox ivjJCheckBoxSunday = null;
	private javax.swing.JCheckBox ivjJCheckBoxThursday = null;
	private javax.swing.JCheckBox ivjJCheckBoxTuesday = null;
	private javax.swing.JCheckBox ivjJCheckBoxWednesday = null;
	private javax.swing.JLabel ivjJLabelGeoName = null;
	private javax.swing.JLabel ivjJLabelSubName = null;
	private javax.swing.JTextField ivjJTextFieldGeoName = null;
	private javax.swing.JTextField ivjJTextFieldSubName = null;
	private javax.swing.JLabel ivjJLabelMapLocation = null;
	private javax.swing.JTextField ivjJTextFieldMapLocation = null;
	private javax.swing.JPanel ivjJPanelAvailableDays = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public CCSubstationBusBaseEditorPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getDisableCheckBox()) 
		connEtoC9(e);
	if (e.getSource() == getJCheckBoxSunday()) 
		connEtoC8(e);
	if (e.getSource() == getJCheckBoxMonday()) 
		connEtoC10(e);
	if (e.getSource() == getJCheckBoxTuesday()) 
		connEtoC11(e);
	if (e.getSource() == getJCheckBoxWednesday()) 
		connEtoC12(e);
	if (e.getSource() == getJCheckBoxThursday()) 
		connEtoC13(e);
	if (e.getSource() == getJCheckBoxFriday()) 
		connEtoC14(e);
	if (e.getSource() == getJCheckBoxSaturday()) 
		connEtoC15(e);
	if (e.getSource() == getJCheckBoxHoliday()) 
		connEtoC16(e);
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldSubName()) 
		connEtoC2(e);
	if (e.getSource() == getJTextFieldGeoName()) 
		connEtoC3(e);
	if (e.getSource() == getJTextFieldMapLocation()) 
		connEtoC17(e);
	// user code begin {2}
	// user code end
}

/**
 * connEtoC1:  (PeakSetPointTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JCheckBoxMonday.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (JCheckBoxTuesday.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC12:  (JCheckBoxWednesday.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}

}


/**
 * connEtoC13:  (JCheckBoxThursday.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC14:  (JCheckBoxFriday.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC15:  (JCheckBoxSaturday.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC15(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC16:  (JCheckBoxHoliday.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC16(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC17:  (JTextFieldMapLocation.caret.caretUpdate(javax.swing.event.CaretEvent) --> CCSubstationBusBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC17(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (PasswordTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceTapTerminalEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (BankAddressTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceCapBankControllerEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (OffPeakSetPointTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (PeakStartTimeTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (JTextFieldStopTime.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (BandwidthTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (JCheckBoxSunday.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (DisableCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GA8F765ACGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DDD8DDCD4D55AE7F72D5CF759DDAC5AD557FA292CB4F9CD0B5E58240D0CB65AEC37ADAACBCACA572C50E85332DDF73B8C9F03090A0A0A1BA5AA36DA0460C739C88A72A19AA8B90878C646B0F30149E1E61A3940C0286FF34E394F39F76E5C612BB75F7577FB3C77BC67BC4F791F67BC677B5CC1485E9C1616EC48960464B4C17E77C932A0C4CB027062AF5EC8C6DE4E4FCDC6C175EF8B50EA2163E4AABC
	F7103814FAE316D0F9B18342A59036AFB199B7407BDA615845BC9B3C8448E7E93BA0ECBF979A59FFBEB797E3BEC69A9E5319894F15C025403382CD814A9226F666487C1190DEA93F93CAB688C2DF88C973430C9C95FF111C2E8E622CC03923C81A991D1B6478986011B47170CC8AE1E9B3A04DB20A6E32627DF23A26D1E142225FEDB12CA0F92974A3350FE2324172B3D718C88D11A2DC1EDACBECD6F72E6D204559D1E0B1BB9CCE07A4DA5A8B2CAD2255A6B95D857243E2F6F9BADBDABABD45456565264E960FE4
	16ECCE4761CE4FE133C72C24096A4C8E518E7A1652F2CC484820F9C0B9A0BC72CA424BDDC6ECD78A6F0DC02EAB31ACFFDCD1A2E38DBD97A6A45C109D30ACB32EE4E5C83AD2A9CBDEF60FA16CAA22FFB12D9BA2D78861F6A0066553AE44B277AA44726CF912F6D32849389728A69479B7DEA0FCAB047B00C2C39163277FC40C0D5F5EAAEC7A29A5E5D5G0C61218CDBDC2802F1F4FA0FE1A3751FBDA54487322E06FC012A016CC041C061C06FD03FDDD87C81BC4BDA24F2E7C70753D166F29D36DB5D35CE2BE80777
	62E20811F9A7C50B53ED9584661B7F15112F0387A966EADF3FA4444AF6DAC0DF8ABFF91310D9E2CDC953A9DB44635B8CB3E59D09D7ABE52B7E8531DB822D5BCCF8A7F2242C0C3F187203D5FCD6D76FD3BE8947C2DC68AF514E0DAB91CBCD6AD8A12B284AE05441B2FA7A81C373E80641BBDA4142EC3C62A03171F860C7834D84CA824A9AE3B2960EC19B6FBF30E7A09B9F053660F6186D606FAE33DBBA5CE933DBC537EC6B3FF676E7EBBDE2F24B3A06AA476CB2E10F3A0E62EF2F5435CB7C048F8CB5E318BD2CE3
	943B303C8F874CFB4498FF5FD8496B70A4ED93234730BACC617CA64A1F2062333A1DCB5B9689C7C25C26316067B43DF811700346EAFD2417722346EAFDE452857411A5909773AB1311556F24C3240F8C9987ED86A886A89EE8A9D04EB5A6E37EB5D847BFBA30EB106D28CED53FCC3624E4BDBCC52F64B69FF5C0F76730088DE6374D5CE297BD021C263204583545C76E98ED5F9648630868905D341B846D668E911C49435218CAD613B4EE1146565BBAC4482043A5205EAFCA564253EE76C827DCD633A4AAA9D83C
	250478C4173981B40282F86F3B0658AB067639B5705EFE8D5AEAE6A961C5C3F8A6374B33A5EB607999B837E8AFAE2E30D9888C333B87FDF45E32C25246A13DF4AD5895E844FF027EB013F1B4D05EF5B0668115DCEFB24682555FE0B2A65C006DF7E1A37AE9450A9B057C47ABF47D1410FDBC7339916335FE7AD71AFFB870E7GA582E55E88758AD483E4878A868A871A81148814F9930E4F794B2235FDC5183EEFE72978248CC3E913DAA2F650EDD77F496CC7ECC642441E98C76C0BF6CC50644F4A7215DFD9D684
	48FF396AFD43F7A88721F581784BE4DC2B64F01AAAAE0562A53E455A2BDA0E79E155E1521673211E2A015AEFC2DF5C78E92EC05BA819C8E02BBC610686A5DA954FE4E9579FA4F90BDD22C32A90DD22438AAF9E39CD3CFB1060135BEB2B133725ED14CF7A6FF2E8D09E4E5FF9F0B563038EF56B4778A29AEF16A4372D25D392CD22A4599CED0A7C3FA8960F4F5060114BDADDCE7BB9A863E820893C2C538F927BE03B2BF1BA4FF53A6AC90FA2375FB3F41E9285696338BFB7DEA0734FA5BC5CC243CA7CCB679B8728
	CFA2BBDCDFE0F924DC98A80F146F60EFAC0FF3978BE5BDE932AFED177DE91D6C539F4936FF97E833406667CCB6084A6E3859E42C83728205814582A58165CCB099CB015A01C200A20192A6207D26DE08D615A1ADG46559AACABF5302C14B12B65BE7A8EF6993A8D678E2AACA4AD69AFC8DF02EDD9DDB6EC3F4BF4ECF0A94A425A4A9D0782377528C37AEDFD7AA17D369EFB287F367C48A13D364C621EBCC46C686CF6287A0678C3E47C34B89D8E514216C132084056D58B6BC9B9EC8E1BF45AE6ED93A5132DD704
	B549C45246E751B1BA835EB7CD44B133FB9B0E19F93D578951DFEDB6684D3FC75FF850A0CDE4EDF964C4E54CE4181EA9A5FD0EE897BB40D0654ECE074478F36878AF73BDA9147766975F92599D476A4106D5B651EE05A96EF1182264DB20BF148A687FEC6A3163EBF31759DB6069860395505AA8A8A7311564F5E76EC79F9D4C6DFFC1185FEAF30BC79D2ECED43833E1E71140F04CDA2E45F1C4F4DEC29C3BE59CB7AF6F23B8AAEC9E529B17370B16F3071D5EFCB32D5D827628935D2DCEF707E825D08A4C5D120C
	230CC6FFA7A07B990EFD7FBC4F6C0188CC1D8E2B39675261A85AAF779DEB0566D3FD3ED8EA1D17964B3F980EA51BAF7862286F94BD1756A805E813144F03FC311C962D0ECB0D2608E149CF3D2831CBFB277B52C2590D6D27F81946EF2B5C36CBEB14BD5CEF0F9F525845E416BA5D17964DDE994B55199A5F2DF65AAF31E17621DDFE608852743535E6D70D53C215DD2AFE7FE3B6BF7E36026E9B4098968594B7916747DF1511F81C9F4B0B00F2275D4E06D9085BFF8B99C3BFF9BBDBB5AEA6CEE47B30ABF93CE500
	781F8F90BFED0078978608DF3B3C7F78C383441F9BA07E1783445FB7C07CAB83443F1399A81E55D34D61ACB2DF923F69949D96118C191F09BD3837F1F80DA62E41EC6FD476CC3EB8CC661EF6555A07710F176B4FDF6A4B49FA679C575FD81EAE103D8F26134D37261809CE175B5681CBC5321813775BDDDD6A7D76A0A89B591B0F06E79C90EB97556B485C3D5C6CAAF7BAA43753EE02C925A43675786FEB87CDA2BA23AE627EFCA268C885DE5EA42637F9923391CBF7D140F4B3A0BCB7E03ABD4918AEB59C6604C0
	A561FA695E60697AA0BE94A8C2B75DB48326DB8471197F95A81DB3855365C31A0A00693625E2BAAB24698B186E951EEE9CC993B05D8DE918AE8E52A486CCF7BA9D53E5CE865BCD8E14EE399153D5C01A2600696E61697AA0CDA8C9B759B7DD52E4126E4F7C5CE29767ADDBC6F8EF40426906945C0F2D4DD21F3FE4CFCA515DB3A73477D6263F7AD66DBE7514CA22379D785EDB318FFC34DC3DC7D06671B8ADB65A454A6D6487956A79BC63DDDE71B6BC214375C8C7E12164453696DCC13012FDC419AD3717C99FFE
	AA786F0BB2EF47AD1872EE5A5557BB4B1DD6319A1AEBB9DF6EB45844EE816DF03ECAFDF69335AA5F30BC009D026572072B6CD0185EE3E018469413B1DC6FAC4AC2C19634F55A8ABAA59B5930B4CBE6BA323016494EF81E26FBA7C4D7622DF81633280774A9F9D320CD81558331FD65BF517DE612568E3C71C02C5F4B372A7B3DF86027CEB599F7CC453E22067A449047CA5966B1BB5730BA528C0AE8476B5716E2FFB1F92CD0F2F105C16FFCE9642A8D061229727E7ED4450E3957A7270C1C0A67E09384AC5F94C8
	B3FFAA166F27A7744A17FB9B5A25A9996576824FFE9B4A75F42965465F4664E65C06F639AFF9B7BC07BE2941FD7EDC83661BGBAF3EE47FC7F52204D378E62245BB15FAB8C5FAD5F39BC5F1120B31A677B35EE3ECBEEC7BB0DCEC1394C8868BBA3D06EAADD393E8814332622DC8870E2395C8367756404BBD0AEA78D653201D7F3874A0D722B97A2B7024B4D60F223017788173BC5B73F0C7FC63920F4145B843C7A7FC639DBF56502395CDEA34A0581EFA6177BC657AED9F7225CFCAE17873C26BBD12E76381E3F
	065E0975FFA2E3B86DD1BE735C2D6E3F2393BE545DF3A1B461CE564E226E54765F21C7C81FB3937809F7E27FED2CDC2D6A3FCFC20FE9F63441AC076FEBD5926CB01F11433F2EA47952790C00FB65FF2CA66596A2E1BEG34972886489E09F914D68DF8F6D9696D676CF2365FB9E0F02432C79C26FAC7E267F46D3D241EA2A259B9DD9A67FBA8BFD645E7757A179E2C57F808AB7DB56E393EFCD11B7F78DF7B66992D89B339B77D648AB461399AB95677EE5FC146FEBA3628DC2338D8D98B31796224DE75FCF1692F
	59BEFC6EDDD087F761DD820B1554B959BB2D398B4F587EF90C681F826199C0F30104E9B0E781AA8532CE43FA7BF9155E386BDBEF0186DD65FC0259E232B0BC9BC67949E9EDB8E21A2F9CABF74C89AC7738E97CACA2F9F898DCFEF2DA8CC214DEBD9EECF8C73F9EF1FDADE31DC26782241D67C4A156778D43433A57CFCE0B35CE03157952F3121EAF35C35A3EA87425225384A719AF05F21CAF8D93671281F14E08522B576B9A9043DC0E615A1461E188771353E258F4379E065FF18CFB6FC68CDF278E8F0357CFCE
	0B412E0B616F679143880E613D3461E148771353E2085245905B059862B806C70709A1E1C08C193F5143709C37C35EEF904365694343906AA7274550240BE19E47A0F18C454661E128761353E2885745B0017BE48C4730F01898168E08E129AE069147F1AD1AFD8F0EB5ED1F51BB9E90EE3A87471544AA52AF631C234EE9F3C8824EB7469CA17BA5CE372D4D66C05E3514E7F13A69219663BDD59D783CAD21DA7F3CEDDE357EF9DBE2F57FE76B0B2A831D4731F37057E9BB30C3790200986FDEAF610D07F054BDD8
	9F0EDE42CB0030900D3C9E4AA373C4B247E4BC21F72073EB22C39DA67A7ACB6FDF479B874CC3FBC69E68FCD60F5E25728F2EDFC56D6A71089EBAD1A0ABE1B96E85E91D20F3A6C9CE53845C835ECA47C41226D2F2166F96F0DCFDEDA7992BF446D53A40E63EB8075A1514B5B79A57576B0B497C2E9142AE4263F550EE6D4F96E19A5BC64861D8F846EB6212A01CFA2FAFCF3E1FF1AC303F6EBF266F2F870F11F662F1F63AAD2256A7AB0F6570B8E556F5D492BB088965BDCAAAAF195DED221FCF1F2272ACAE107C59
	E3017C1E554F1FFC6AE78F772D87CF74E74F9C0DFD7265F0A9BC6BB5F16D906E5370D85EE31255F97F0B67FD074FDAA1C4169DAFBFA361B9C3D75F178635BE3256E2FE3431937B5504FB510FEE2377F6F3261B0C05C05553510FBEBE2DF7DF319962A5201153D93E636467146938AE5C127236AAEFF2FE47745D542027AF8664E682A54AFA047B58B37BBE5477382F3EA2547787DDFDBBC02E8428CE56E3151FDE2E6F3AD49FFD3B15FBB6FA7A02C1AE8CA8C25693ABBF63393ED3E9BE7A76203E07F56FFBA601DC
	EA0C4918934374644B4F52985437AC5DC75FDEFEAF703C1E3EFA10EB876A137504484F71DC5F5D3E7A76213E17F575C5025C8C2084D94FA27919F1BF6A7B4668236FE3FE7FD937BEB601DCA1D0457DCCCF237C34F3FD5BB3FC74FD027AFEFC3C3F3B3AC1777B0F912C1D5BBFA36BE0AF8F3BE83807370D955DE47C351BFB1C1DE4207EADE983F95D38DE88853D61C0F1C07365BCD8BFBD351B341BD63739833A8D13CB348871D4F62697E52BA15C845487B48EA86A373C8ECE11FD6523241B34355AAC723DD432FF
	4A62EB5BC9BC6B714B3A4CB6BBB91B29B077F8E4DB4C6FD55BA26F8113F17F83CA79EB9E7037855B9B98CB47086687585E40AA4E3F0572C72A78EC4FE09365137094084B0F45717FBF683AFB820423B9EFCBB76145C1F8BE67FDCDF9CBA11C73A07262695AB59F42A51CD730816793F51CD7C95305C1B81273DEBE01794E603C33DD18EF8267DD5F0579AE623C4BF83E993FC3DEC88E663B09739E2B43FC6D1CB7036A8B02F08867DD738D1505F08467995C28AF1A73C6D09BE4BDE4B266BD4457B27C3EFAA170AA
	009A9FD26A4C8E6FC18F7956A12B2743DD24BEC29FE275341A73CD149F2D62337A0B24FDB989A7C21CF786E22A25EB5D5407CD466C0711B71972F2A1DC4AF9EF1E467254F35EBE3A9E988F61984E8B223C1990DE42F9F7B7E09E193FC75EFBBC0F9C4E3371BC72B96F45BE4C230F737672BCC2B8EF9E4FE3BC679D61F9CC613CABF99EB11C174E4B117D8764FD4E735841F97F3800F914F05E3797B00FEA4E7B6D854C23C9515700F904F35E38864CA31A7366F6E19EF11CF7349B73C8D0E43BB10FC51CB7759466
	D1718872D2F99E0D1C77377318071D734E72F2F8B9EFA2AFC7B0673D447308673CFDBC0FA44EB3F0DB257E91F9961EC79667CD66F964F1DEAC4FC3623C35BC0F111C97436BFC9C67ED67F5BE0173DC3C4E23B86FBDDE67190FF27F63F51E4BF9E147D1F66F2338AFDE530D5FB30DGDE94909B870A1AFD76B349A9C7F17191374DFA585CD6C3C795B6578A25F5C76497BD0AF32D69D4E77EE3D0F7C0CD0F619DC46F7BF80E97FE53D821A628D2779B2C047AFC0374986BA7C6BF266C070727779864FD94AF669987
	7119F174DC2DC73D0FCF461B85863686E671E7FD62C95FC1663ECAFC08CFBC41CBAEC1A97153FD62090DCE49722CEC8FED4732ADFDE802E03FE3CF406F4B6A6364391A7C8CBA39CD989F5FE3E0F57496DD83CD013818B82C373FDA88EFBE0417F2DE2F08F5197BB8763FE145244EDC908E868A870A851A8F147A8478649318EE8ACDD77D843BDB507E843BBBC06E850CFC021DDB33F4DB0B4977A2C4B6507C44A56BD77372D46943D5F131B22EC03A10D85EE5B46FC05FA2E09DAF5770D6E974286BF3B0EBE1B6CF
	3977G515BE1765ABABABB68455A79CF901B5F4E6687709E71844EF976F713FCACCEFBE70743A327BBC15B8439331D7FA426B359C9D9DCEE31D5F43BC5AB3B2EAB273F0A26AF013455BC7DE6973913526AF4C8ACCD9A9D3FA5088F821A7FA41DCBEC286827ACE902F2C71BBCA3C0A696E81D4C0B07774BE49FE5F9062553F25B9C1AF2BB689C23F0A60C95C00C17CD7134C3D8623CAB3A305C93B86FA14A0B04F08C67CD267A12A03CF4A61665661C014A1226AACB61D33EE52900B019GA7F31BAE25786A005F74
	945AF4CE172FCD5F2458C6C2FCA8CF93718DC9A34142BE66A9722D6E34138251C9B1EEF47707B1C576399419E2D576A638B21EB6997779587BD7F40E5E816BF932EF4672AB2BA77949E391DD47E603DC6153586E4754E27FD041F9919B30FFE8673CCD9B79F847F9E6976145C3F8515358462B3BF28936D9B0B7G2AGEA866A839A879489B4F39626BDC35312FBB719723D9AF227A7CF3E93C36E6D10BBC3AC6DEFBA0360C9F4925B0C1B25B93F18255F8FC44A7CE6D5FCC60034EA2A50C92360FE0EE241762F6D
	D334FD0836AFD1FF23B018EFD00CBA3C553C4E7F5A656BDFD6B20C60FD68EE122ECBF4CB30F8321759EDED8EF283077B741327F12FF651ACECB7D90D8379241AF263E13CG5AA67B61DEF8DF7C56DBEFADGE298E2699A2E5D693675C2BBD123E0984E1E47BBB0257158E65E21E76F081B9CF856B9BDB6327AE3B2934F63F8ED8799D66E508601176B88AF5738F8ACD75069014A1556CF39E2D565E2F92C61386362319F7A1263921EC1DCF71ED6F039B82E42E790574481F1997B4155740C9657AE0E2B7D994455
	4BF105F2DCCFB7AA3846DF605F3DF3DC4FDC98885732FEF0A579616AEDC0DCCBB92E7B9B90570EE791575F4EA838FA3B91D76333086B766E01F0AD6F875708E735381EBF0538C21EC5DC7BB82EA80EEB44978A2EAB383D92B92E68816D35229FDCB933CD4657FCF02D65764A1B0D384EF2DCF53391574DCD8A2EE00EABE8B6623AFFC0DC2B7A4195BEDBEB2FD7393DA2B92E920EEBAE47157025026BB8777B6C8444F54500FE3F3A9FDC2589DADCC7385F57A4A02EAB395FFBF93EF79E6FAFDF23263DCDC8701D97
	C4C178E6D9A79B8BCEF68F6F1B7A66E14A0D99329C5B7B8875527BAE89EC6FA319732F217CB8951F2D63E279BAAE8162AA1E43333C7B4E12FD3B89900E810A87DA84147DBC4CA91E47333D451F11EF9B7B3DB3D26FF45508DD22DDF554A66FA7778C6F37866EB562FAA9622E6B05484BDFCB8EF4273362F9F90FDBFE66FC3E0D72D9799A1AC979C2A1EE8AD09CD0A210B047E44C1903657B34A61F150FDCBFAD13A433251D5EEC4542114B268A1BECFA32F1ED7D37E4FE5662F433C3983A8FDA18027B2079203F82
	A888A8F48E43466456D87D77DEF7DAD1AEFC8E5BFB0D01674CB96C3E997375D162D04672A4A2BB1735B1924E017785BEE33953CB7A30E3B5669651AEFFFD47B17E10FEFB6C77F59E0FAF5D28484ADF4C71B833C6D69BDF7EA16923B4DF3A49F19BBC2B39DE5557A1DCF64C876BFCF47B26113F0DA8D62F457366B29BD64F45BBFDBF726845B771787135FA712E3958973EE696B81E6C6E776169903BF379E54F8A9B388979D1049D3B0B76FE32F77F1E0F77FE121F3B3BF0A77AF6D8377A5E5F7E370B825E7B9BB1
	D75E67101F09BF5AA6675B5AED00A7B947E0183E34A8187EF8E2F3E0CCC5FBF6B3B0CC6E26F6C5EE4B066DDA39AA18646D586AB1BBBC9E51EDEB5D1A1FDB181FDB34970AC257F1E4AE18A1603F24C37EBC4477A07995A4397C4FE5E25B5EB469D7C245132FA563B820AD7FA3F239F37F246C736CE869B5B01D1EF38A76D64F604BBC562E48FD5EB5147AE3B257F6795A7E6E8EC5DF6F0977826B5B33C75643649CEEC56EC7B95F5576CC67A80FE27388C9515F54B5F8DCD95D0A5C28EF366A63325A4CF6E71B8A94
	2B5BBFFC21766D2C316F98F09C5256ED23DC27D6D55D327C3DDEA57F1A4E407BA2A2DD7F0E867971C02C9F1DDE0B7D68A3FFE27D6FFCF8AE1573E0E91E5900E93267313EB69F1E2573D89A56576E59B81475C5A3485A67A9FDED903C3F8B057E896FEB3DAE7D3D13903A668E0674236761FA699AAF6D8335DFD5F21BBCDB34CA9D4F3E0A15632AB77B44312FA06538E9CDD9BEFA59D72CAC2E6CCB1FBC710BC51E67AA270F2C7C95A10BBBC3FF4B457F0BD414BDE67541443EA81663961EA6FE293EADEDA27F17BB
	698F5EC81E027A93F5FA7E0E3EFAEB0F62AB1D67B7772F2B26322ADECE9BFDFECB7FE94BAB0F57D71E643A4F8E8AA74374E82F02E96790B0858F915395C340E46AD3B0D58D815328A1E21AF6E170183A4E2B7A190641E30AEF989A26D15D0347B4660202694DD30347D4B3C4CC578E41CED19795CC9F8C41CE1DC344F44390B04D9694CC99C340E49AA2A6F188BEEEB0A8184E8E4147A78E5A47830F3B3790D5721AEE2CD7F93FC1757E7B6E016E67FD97E2F93C703D664156CBB34E863E777658D97DFBEFCF1D55
	3F27B97BEC7F3F0B724259403F0B32702C7AF7D158FA2FB7154C5DE3E0ACCDGCAFD8156F9C079AF60DA2F6FABB21FA13F3A663F4E2B343609D869187FD74D014B5A5ABC706F33B91B493D1E9627A4B9BB08FE64F7B6137A121CAE4AE43C5EE6E2A3372D2DDDE2C9E5FED0B33D0BAA36D2B6DB4F2FCC455F372B0632853D006732F73FCD566A037A06315EA6594543F4754A4ECD9BD279DE508BF8D67BBF9612CF9204B3661B0C397371DC78F3AB6EA76C871EEBBEFECFB0460AFBB49366230E87E85A8488AF814A
	FA51E49C5C5A815B568A32DC46FB222D816E095295A343705E8122034C9BF73C08386E72A0AF1873E65562FD522497F1BF642EF4425B71924C9DDF623F535872A1BC9B4CDF7BFF258A4CBA3753A53A259E4625DF1A4B3E783A114CA12D20A788E8BCD09450A3C073011682E53DECB2668115G55833583758105G0581C5G453E0CB8D6FE3D339F9C7261BBF5E037195D3FE6B81A6854DC7E163DFBFBA09D50820E01C9CF34FCADDA24FAF31B40479F6242F2DF79335ADCA170FAE99FAC86F6976D5F49FC6425DA
	7451F8A8C3F6A25AFD77F13E371708BE32F683C9BB82426300A292514F52F2504FE6GAFF5816A284DC1BFABD900BA3E25E9A58887830DDFB0D4BF1BCD2668B8162CD04AFCF567E04A4C6C7B4354407D450FD3876EAF2E24EDD004F6DE5F63126F6C7EB2155E1FEFED75083CDF9A171A45F9C7BDF81E424600EC3F6FCF349435C06F9B012D834A3D2789B339AF285C4C85831F4351BD0C8578DB1C3F27FD0B30D03B0779A465E7AE546EE1B6DB5097F2A02EEFA11E5F1D368EEF6FD59C265C35C316E365BAA052FE
	502F3C95141F68D75E07F99F3B84621ADE4172EEBB20B746C73F426C9F770AFEBD4C877ED2CDDCD69274BFC9FA3EF00FC7AF0F7DF25A1AA47DBC1A01AFE962C6C2F81CEE9E8935EABBCE115344484F19BAF9B05F3FA71D3C73B9836BF265385F2613711F7C6E194DEC3775520DC193A4F434317837B382374F559983374FFFE4680F6739997E6379768C7D717C438C75F84EF8059924BFEC03BE3C11275B47F9E7B82F186AA43C53B62B544E7925949761D70BA4C364D7D1DC5D1457A873BED3714E483C3A8C5247
	C0115B1D7CFB1CD39974BE044DEEE761B3B40D4D81DD8E3747D90A5166B22BF0DBB86F8C2F6B245A6175C9FF9FD0CE3FCF7A045E1BCE8C6027DA92DE45BE698ABA8EE53F2AED23A1141F7B2A360DEE5C00EDB49F62C2DE45B63ABCE7F8FD4B46E14A1D9C329CAB57ABF44CDC64D75EA514AF7CD9DB5E9F7071B89362DCC06C5B1F6835AB28EF58ED8E311C7D72300077D45CF4CC0B033409FF463BA64F37507177B518973C06B60B23FB586C7D9955FB2B657BDFB7DD3C84F91409CA190E295E9F6B77DB257F1B3C
	933F57BC643B6BF45E1D8B75D9789A5673AD87706EFA89671558711EFA9D67E538701E3A157316D5639DA5AF677DB89D6F2947F25EF39E4CB71E738ECB186FFC4E7BD58D663B1473BE6F42FC3396A16FA75F70FB3A1C175C0D79CA1C7786DDBF0C0470E805370E7042A19C45F9CD6BD1DFAC679D27F3601C45E02B459C9FCDD78161464558A6FE3AC17113DF285EB7EF787EFDE67FA548E3F10ED2263F2B5E2F48797E738E7BDE73E0EB079F271271DAA2CBEDF2EEA2605945F534CF34C2BD3B96633E7F1BADE918
	D640F548F6228A4FF08E785E8D231F4B4A7A8EFDCA7D93F405AF467B92F65A4EE6C2F8AE676D236DAC6BF513F1536BF82E1CDBBD14F3E56D3D459A50C376EB52B816C85AC69B01EFFD9D4FCC4FE5A9D84F51369982F163DEC7DCB134ED46C2B80E73FAE95B945EB099B35FC02C57FFB314F399AD569250D3660375835A2E2B01DF7F8656434A633E77C073E8DB8D0278E0A54DFA5F3A7859EADABE0A5133FE203B2A7D5D830DFA0335FD659E28F8DC5F074ED3DC3110BE0E633AED3D3F8FCDA547B3727B46F50ABF
	BD51C276BDF54E764AE052EB5F1A1FDB04670DCC167EB982D936485E4FF9627ECFC070E3FE1E785586C56EEF4E414BD57DC3A5F7E4306710CC56760ED26660CD0A1ED5564167FF6B3B0ADCC8CDFF674BC53B1920FC7E731EA2D755B5F83902AD0A5C45C11F3BB2594F37AA651536A9FADC7D5E85704D3F7383C56E65F5C34BFF7407CA7EB9850A1E1F2F9F2C0F313F17749F47AF0305CC7882A1CD920C7295910FDBD845250F5265C7C2571E6214B9B72498045423C2BADB0E9D95D2491A6A2810C617DCC70594D8
	0EF949E782BE7FA4A11D1DC0428BBBBA051C6433D0C9D846CFAFA5A183CFDEA1A5BBC8859E1E0C0210FC888A7056789B376CE7CFBD997ED5C536C1B0G42F611C1CA6BA62BB68AAA7B62DBEF3D6579C638C0EFB812D56B0D20E9050F196E3FEE5F3C994FB6F8D204742342C652A319C4B7DD580AD672613D7C57B72A04E5AE720B8B64DC992C60210FB40F54E397EB046C56136417B0BD12E8AD43A533C7925655101CF6112D60DD55E6CF3BC4ACFD20C6C8F5103F93A22CE151F63323ED97DBBF9F2028134B1A29
	95693084F857D23CC4CB815732F65A2A6DDB0E4D0DCC918CD5425BF62759DAE536C8CE77D1E119546E96BD6DCE3B556BBAD4CA95E5508E18DE7284F56F706213429610EBBE9C74B96FB541AB662F28B2880257AD6C22A9C987DC40D3D84B5B4DEE48CAF49F15485FBDF13A73F85C8F5E135EFF784806A60310AC971218BE4B6B02BA07853F43C3FE338D9064EA90E094D7D4F0550305D7CF7C4B7FD0C50A28A4ECE6A68351DDED2233E3D7D9EBABAC063882309F28FF172BA7E98AB4E956F8C72DBB7678DBADD05F
	95C2CAC7E1A17D3F087E3F1B7CDFC4B9C514D3349B0C1824F5EF5FFF5AF8AFF538ECF068D6F3074DCE9C1EDFB041A86ABF3C4D918FA82802CA141EDE70607533CA12922160D5C29A7D39B02807ACA555714E0E9651FDF978556FAE8FCD788929A6977196AF513B19650C03DA0A6C72861F86B0C28969B48E92DA696702043B465F1788FBBD0D4C217F3FB3E4CB9129F75576A10CDC2AECABAF56C7CA3130E884EC2A8F74AD7FCF5053ABE8DF2D07FB1F029B7F3E51DEDE9DD89A1832A59F60C88947A0F349EFB3A4
	7BF17779E8C0AE99C7D27C38053AE9ABFC38024C5D6D43B54A5C929F8CEF4B18093D0DBE254810A91D574953C0FF61E92C2AB4865FB412305277EBF5C948D6FEF0BA77F027A717DCECAC066E720868ECF31BDD6D648B87E4E6551ADD39F8BBB177E88530D6726F5AF349076D3A0E119C40B1D23FE74760DD835B99E49125A8F65C4BEDC3267227F5C27F8F9EEE8D6861E7948FA7B3E26261861F9A76AF05CBA774EFD5A60B572745E019527E5DF11FD3F063579C34A57FDB39BFF929A37F1D24695C6462863B5338
	73227ACE63124B56843C2FDB11D24FFE5FC3FEAA3F53E9B511F20482FF8A905BA70FB8C97EB6CF2033D8D30759EE174C76F3E58EABB917BD5CA3094A3D881B096877E09AB9D27E2D8F93417D35CA66FF81D0CB87888756D338CFA3GG68F4GGD0CB818294G94G88G88GA8F765AC8756D338CFA3GG68F4GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG09A3GGGG
**end of data**/
}

/**
 * Return the DisableCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getDisableCheckBox() {
	if (ivjDisableCheckBox == null) {
		try {
			ivjDisableCheckBox = new javax.swing.JCheckBox();
			ivjDisableCheckBox.setName("DisableCheckBox");
			ivjDisableCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjDisableCheckBox.setText("Disable");
			ivjDisableCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDisableCheckBox;
}


/**
 * Return the IdentificationPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getIdentificationPanel() {
	if (ivjIdentificationPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Identification");
			ivjIdentificationPanel = new javax.swing.JPanel();
			ivjIdentificationPanel.setName("IdentificationPanel");
			ivjIdentificationPanel.setBorder(ivjLocalBorder);
			ivjIdentificationPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJLabelSubName = new java.awt.GridBagConstraints();
			constraintsJLabelSubName.gridx = 1; constraintsJLabelSubName.gridy = 1;
			constraintsJLabelSubName.ipadx = 57;
			constraintsJLabelSubName.ipady = 2;
			constraintsJLabelSubName.insets = new java.awt.Insets(2, 25, 5, 2);
			getIdentificationPanel().add(getJLabelSubName(), constraintsJLabelSubName);

			java.awt.GridBagConstraints constraintsJTextFieldSubName = new java.awt.GridBagConstraints();
			constraintsJTextFieldSubName.gridx = 2; constraintsJTextFieldSubName.gridy = 1;
			constraintsJTextFieldSubName.gridwidth = 2;
			constraintsJTextFieldSubName.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSubName.weightx = 1.0;
			constraintsJTextFieldSubName.ipadx = 66;
			constraintsJTextFieldSubName.insets = new java.awt.Insets(2, 3, 3, 20);
			getIdentificationPanel().add(getJTextFieldSubName(), constraintsJTextFieldSubName);

			java.awt.GridBagConstraints constraintsJLabelGeoName = new java.awt.GridBagConstraints();
			constraintsJLabelGeoName.gridx = 1; constraintsJLabelGeoName.gridy = 2;
			constraintsJLabelGeoName.ipadx = 32;
			constraintsJLabelGeoName.ipady = 2;
			constraintsJLabelGeoName.insets = new java.awt.Insets(5, 25, 2, 2);
			getIdentificationPanel().add(getJLabelGeoName(), constraintsJLabelGeoName);

			java.awt.GridBagConstraints constraintsJTextFieldGeoName = new java.awt.GridBagConstraints();
			constraintsJTextFieldGeoName.gridx = 2; constraintsJTextFieldGeoName.gridy = 2;
			constraintsJTextFieldGeoName.gridwidth = 2;
			constraintsJTextFieldGeoName.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldGeoName.weightx = 1.0;
			constraintsJTextFieldGeoName.ipadx = 165;
			constraintsJTextFieldGeoName.insets = new java.awt.Insets(4, 3, 1, 20);
			getIdentificationPanel().add(getJTextFieldGeoName(), constraintsJTextFieldGeoName);

			java.awt.GridBagConstraints constraintsDisableCheckBox = new java.awt.GridBagConstraints();
			constraintsDisableCheckBox.gridx = 1; constraintsDisableCheckBox.gridy = 3;
			constraintsDisableCheckBox.ipadx = 26;
			constraintsDisableCheckBox.insets = new java.awt.Insets(2, 25, 12, 52);
			getIdentificationPanel().add(getDisableCheckBox(), constraintsDisableCheckBox);

			java.awt.GridBagConstraints constraintsJLabelMapLocation = new java.awt.GridBagConstraints();
			constraintsJLabelMapLocation.gridx = 2; constraintsJLabelMapLocation.gridy = 3;
			constraintsJLabelMapLocation.ipadx = 3;
			constraintsJLabelMapLocation.insets = new java.awt.Insets(7, 3, 11, 1);
			getIdentificationPanel().add(getJLabelMapLocation(), constraintsJLabelMapLocation);

			java.awt.GridBagConstraints constraintsJTextFieldMapLocation = new java.awt.GridBagConstraints();
			constraintsJTextFieldMapLocation.gridx = 3; constraintsJTextFieldMapLocation.gridy = 3;
			constraintsJTextFieldMapLocation.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldMapLocation.weightx = 1.0;
			constraintsJTextFieldMapLocation.ipadx = 83;
			constraintsJTextFieldMapLocation.insets = new java.awt.Insets(7, 1, 10, 20);
			getIdentificationPanel().add(getJTextFieldMapLocation(), constraintsJTextFieldMapLocation);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjIdentificationPanel;
}

/**
 * Return the JCheckBoxFriday property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxFriday() {
	if (ivjJCheckBoxFriday == null) {
		try {
			ivjJCheckBoxFriday = new javax.swing.JCheckBox();
			ivjJCheckBoxFriday.setName("JCheckBoxFriday");
			ivjJCheckBoxFriday.setText("Friday");
			ivjJCheckBoxFriday.setVerticalAlignment(javax.swing.SwingConstants.TOP);
			ivjJCheckBoxFriday.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjJCheckBoxFriday.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxFriday;
}


/**
 * Return the JCheckBoxHoliday property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxHoliday() {
	if (ivjJCheckBoxHoliday == null) {
		try {
			ivjJCheckBoxHoliday = new javax.swing.JCheckBox();
			ivjJCheckBoxHoliday.setName("JCheckBoxHoliday");
			ivjJCheckBoxHoliday.setText("Holiday");
			ivjJCheckBoxHoliday.setVerticalAlignment(javax.swing.SwingConstants.TOP);
			ivjJCheckBoxHoliday.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjJCheckBoxHoliday.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxHoliday;
}


/**
 * Return the JCheckBoxMonday property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxMonday() {
	if (ivjJCheckBoxMonday == null) {
		try {
			ivjJCheckBoxMonday = new javax.swing.JCheckBox();
			ivjJCheckBoxMonday.setName("JCheckBoxMonday");
			ivjJCheckBoxMonday.setText("Monday");
			ivjJCheckBoxMonday.setVerticalAlignment(javax.swing.SwingConstants.TOP);
			ivjJCheckBoxMonday.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjJCheckBoxMonday.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxMonday;
}


/**
 * Return the JCheckBoxSaturday property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSaturday() {
	if (ivjJCheckBoxSaturday == null) {
		try {
			ivjJCheckBoxSaturday = new javax.swing.JCheckBox();
			ivjJCheckBoxSaturday.setName("JCheckBoxSaturday");
			ivjJCheckBoxSaturday.setText("Saturday");
			ivjJCheckBoxSaturday.setVerticalAlignment(javax.swing.SwingConstants.TOP);
			ivjJCheckBoxSaturday.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjJCheckBoxSaturday.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSaturday;
}


/**
 * Return the JCheckBoxSunday property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSunday() {
	if (ivjJCheckBoxSunday == null) {
		try {
			ivjJCheckBoxSunday = new javax.swing.JCheckBox();
			ivjJCheckBoxSunday.setName("JCheckBoxSunday");
			ivjJCheckBoxSunday.setText("Sunday");
			ivjJCheckBoxSunday.setVerticalAlignment(javax.swing.SwingConstants.TOP);
			ivjJCheckBoxSunday.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjJCheckBoxSunday.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSunday;
}


/**
 * Return the JCheckBoxThursday property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxThursday() {
	if (ivjJCheckBoxThursday == null) {
		try {
			ivjJCheckBoxThursday = new javax.swing.JCheckBox();
			ivjJCheckBoxThursday.setName("JCheckBoxThursday");
			ivjJCheckBoxThursday.setText("Thursday");
			ivjJCheckBoxThursday.setVerticalAlignment(javax.swing.SwingConstants.TOP);
			ivjJCheckBoxThursday.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjJCheckBoxThursday.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxThursday;
}


/**
 * Return the JCheckBoxTuesday property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxTuesday() {
	if (ivjJCheckBoxTuesday == null) {
		try {
			ivjJCheckBoxTuesday = new javax.swing.JCheckBox();
			ivjJCheckBoxTuesday.setName("JCheckBoxTuesday");
			ivjJCheckBoxTuesday.setText("Tuesday");
			ivjJCheckBoxTuesday.setVerticalAlignment(javax.swing.SwingConstants.TOP);
			ivjJCheckBoxTuesday.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjJCheckBoxTuesday.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTuesday;
}


/**
 * Return the JCheckBoxWednesday property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxWednesday() {
	if (ivjJCheckBoxWednesday == null) {
		try {
			ivjJCheckBoxWednesday = new javax.swing.JCheckBox();
			ivjJCheckBoxWednesday.setName("JCheckBoxWednesday");
			ivjJCheckBoxWednesday.setText("Wednesday");
			ivjJCheckBoxWednesday.setVerticalAlignment(javax.swing.SwingConstants.TOP);
			ivjJCheckBoxWednesday.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjJCheckBoxWednesday.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxWednesday;
}


/**
 * Return the BankAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGeoName() {
	if (ivjJLabelGeoName == null) {
		try {
			ivjJLabelGeoName = new javax.swing.JLabel();
			ivjJLabelGeoName.setName("JLabelGeoName");
			ivjJLabelGeoName.setText("Geographical Name:");
			ivjJLabelGeoName.setMaximumSize(new java.awt.Dimension(112, 16));
			ivjJLabelGeoName.setPreferredSize(new java.awt.Dimension(112, 16));
			ivjJLabelGeoName.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelGeoName.setMinimumSize(new java.awt.Dimension(112, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGeoName;
}


/**
 * Return the JLabelMapLocation property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMapLocation() {
	if (ivjJLabelMapLocation == null) {
		try {
			ivjJLabelMapLocation = new javax.swing.JLabel();
			ivjJLabelMapLocation.setName("JLabelMapLocation");
			ivjJLabelMapLocation.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelMapLocation.setText("Map Location ID:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMapLocation;
}


/**
 * Return the NameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSubName() {
	if (ivjJLabelSubName == null) {
		try {
			ivjJLabelSubName = new javax.swing.JLabel();
			ivjJLabelSubName.setName("JLabelSubName");
			ivjJLabelSubName.setText("Substation Bus Name:");
			ivjJLabelSubName.setMaximumSize(new java.awt.Dimension(87, 16));
			ivjJLabelSubName.setPreferredSize(new java.awt.Dimension(87, 16));
			ivjJLabelSubName.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelSubName.setMinimumSize(new java.awt.Dimension(87, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSubName;
}


/**
 * Return the JPanelAvailableDays property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelAvailableDays() {
	if (ivjJPanelAvailableDays == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Available Days");
			ivjJPanelAvailableDays = new javax.swing.JPanel();
			ivjJPanelAvailableDays.setName("JPanelAvailableDays");
			ivjJPanelAvailableDays.setPreferredSize(new java.awt.Dimension(250, 218));
			ivjJPanelAvailableDays.setBorder(ivjLocalBorder1);
			ivjJPanelAvailableDays.setLayout(new java.awt.GridBagLayout());
			ivjJPanelAvailableDays.setMinimumSize(new java.awt.Dimension(250, 218));

			java.awt.GridBagConstraints constraintsJCheckBoxThursday = new java.awt.GridBagConstraints();
			constraintsJCheckBoxThursday.gridx = 1; constraintsJCheckBoxThursday.gridy = 5;
			constraintsJCheckBoxThursday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxThursday.ipadx = -6;
			constraintsJCheckBoxThursday.ipady = -10;
			constraintsJCheckBoxThursday.insets = new java.awt.Insets(2, 16, 2, 304);
			getJPanelAvailableDays().add(getJCheckBoxThursday(), constraintsJCheckBoxThursday);

			java.awt.GridBagConstraints constraintsJCheckBoxMonday = new java.awt.GridBagConstraints();
			constraintsJCheckBoxMonday.gridx = 1; constraintsJCheckBoxMonday.gridy = 2;
			constraintsJCheckBoxMonday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxMonday.ipadx = -6;
			constraintsJCheckBoxMonday.ipady = -10;
			constraintsJCheckBoxMonday.insets = new java.awt.Insets(1, 16, 2, 313);
			getJPanelAvailableDays().add(getJCheckBoxMonday(), constraintsJCheckBoxMonday);

			java.awt.GridBagConstraints constraintsJCheckBoxFriday = new java.awt.GridBagConstraints();
			constraintsJCheckBoxFriday.gridx = 1; constraintsJCheckBoxFriday.gridy = 6;
			constraintsJCheckBoxFriday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxFriday.ipadx = -7;
			constraintsJCheckBoxFriday.ipady = -10;
			constraintsJCheckBoxFriday.insets = new java.awt.Insets(2, 16, 2, 324);
			getJPanelAvailableDays().add(getJCheckBoxFriday(), constraintsJCheckBoxFriday);

			java.awt.GridBagConstraints constraintsJCheckBoxTuesday = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTuesday.gridx = 1; constraintsJCheckBoxTuesday.gridy = 3;
			constraintsJCheckBoxTuesday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxTuesday.ipadx = -6;
			constraintsJCheckBoxTuesday.ipady = -10;
			constraintsJCheckBoxTuesday.insets = new java.awt.Insets(2, 16, 2, 309);
			getJPanelAvailableDays().add(getJCheckBoxTuesday(), constraintsJCheckBoxTuesday);

			java.awt.GridBagConstraints constraintsJCheckBoxSaturday = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSaturday.gridx = 1; constraintsJCheckBoxSaturday.gridy = 7;
			constraintsJCheckBoxSaturday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSaturday.ipadx = -6;
			constraintsJCheckBoxSaturday.ipady = -10;
			constraintsJCheckBoxSaturday.insets = new java.awt.Insets(2, 16, 0, 306);
			getJPanelAvailableDays().add(getJCheckBoxSaturday(), constraintsJCheckBoxSaturday);

			java.awt.GridBagConstraints constraintsJCheckBoxHoliday = new java.awt.GridBagConstraints();
			constraintsJCheckBoxHoliday.gridx = 1; constraintsJCheckBoxHoliday.gridy = 8;
			constraintsJCheckBoxHoliday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxHoliday.ipadx = -6;
			constraintsJCheckBoxHoliday.ipady = -10;
			constraintsJCheckBoxHoliday.insets = new java.awt.Insets(1, 16, 7, 316);
			getJPanelAvailableDays().add(getJCheckBoxHoliday(), constraintsJCheckBoxHoliday);

			java.awt.GridBagConstraints constraintsJCheckBoxWednesday = new java.awt.GridBagConstraints();
			constraintsJCheckBoxWednesday.gridx = 1; constraintsJCheckBoxWednesday.gridy = 4;
			constraintsJCheckBoxWednesday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxWednesday.ipadx = -6;
			constraintsJCheckBoxWednesday.ipady = -10;
			constraintsJCheckBoxWednesday.insets = new java.awt.Insets(3, 16, 2, 290);
			getJPanelAvailableDays().add(getJCheckBoxWednesday(), constraintsJCheckBoxWednesday);

			java.awt.GridBagConstraints constraintsJCheckBoxSunday = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSunday.gridx = 1; constraintsJCheckBoxSunday.gridy = 1;
			constraintsJCheckBoxSunday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSunday.ipadx = -6;
			constraintsJCheckBoxSunday.ipady = -10;
			constraintsJCheckBoxSunday.insets = new java.awt.Insets(0, 16, 1, 315);
			getJPanelAvailableDays().add(getJCheckBoxSunday(), constraintsJCheckBoxSunday);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelAvailableDays;
}

/**
 * Return the BankAddressTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldGeoName() {
	if (ivjJTextFieldGeoName == null) {
		try {
			ivjJTextFieldGeoName = new javax.swing.JTextField();
			ivjJTextFieldGeoName.setName("JTextFieldGeoName");
			ivjJTextFieldGeoName.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjJTextFieldGeoName.setColumns(15);
			ivjJTextFieldGeoName.setPreferredSize(new java.awt.Dimension(33, 20));
			ivjJTextFieldGeoName.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjJTextFieldGeoName.setMinimumSize(new java.awt.Dimension(33, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldGeoName;
}


/**
 * Return the JTextFieldMapLocation property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldMapLocation() {
	if (ivjJTextFieldMapLocation == null) {
		try {
			ivjJTextFieldMapLocation = new javax.swing.JTextField();
			ivjJTextFieldMapLocation.setName("JTextFieldMapLocation");
			// user code begin {1}

			ivjJTextFieldMapLocation.setDocument( 
					new com.cannontech.common.gui.unchanging.LongRangeDocument() );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldMapLocation;
}


/**
 * Return the NameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSubName() {
	if (ivjJTextFieldSubName == null) {
		try {
			ivjJTextFieldSubName = new javax.swing.JTextField();
			ivjJTextFieldSubName.setName("JTextFieldSubName");
			ivjJTextFieldSubName.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjJTextFieldSubName.setColumns(15);
			ivjJTextFieldSubName.setPreferredSize(new java.awt.Dimension(132, 20));
			ivjJTextFieldSubName.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjJTextFieldSubName.setMinimumSize(new java.awt.Dimension(132, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSubName;
}


/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) 
{
	com.cannontech.database.data.capcontrol.CapControlSubBus subBus = (com.cannontech.database.data.capcontrol.CapControlSubBus)val;

	String subName = getJTextFieldSubName().getText();
	String geoName = getJTextFieldGeoName().getText();
	

	String daysOfWeek = new String();	
   if( getJCheckBoxSunday().isSelected() ) 
      daysOfWeek += "Y";
   else
      daysOfWeek += "N";

	if( getJCheckBoxMonday().isSelected() ) 
		daysOfWeek += "Y";
	else
		daysOfWeek += "N";
		
	if( getJCheckBoxTuesday().isSelected() ) 
		daysOfWeek += "Y";
	else
		daysOfWeek += "N";

	if( getJCheckBoxWednesday().isSelected() ) 
		daysOfWeek += "Y";
	else
		daysOfWeek += "N";

	if( getJCheckBoxThursday().isSelected() ) 
		daysOfWeek += "Y";
	else
		daysOfWeek += "N";

	if( getJCheckBoxFriday().isSelected() ) 
		daysOfWeek += "Y";
	else
		daysOfWeek += "N";

	if( getJCheckBoxSaturday().isSelected() ) 
		daysOfWeek += "Y";
	else
		daysOfWeek += "N";

	if( getJCheckBoxHoliday().isSelected() ) 
		daysOfWeek += "Y";
	else
		daysOfWeek += "N";


	subBus.setName(subName);
	subBus.setGeoAreaName(geoName);
	subBus.getCapControlSubstationBus().setDaysOfWeek(daysOfWeek);

	subBus.setDisableFlag(
			getDisableCheckBox().isSelected() 
			? new Character('Y')
			: new Character('N') );

	if( getJTextFieldMapLocation().getText() == null || getJTextFieldMapLocation().getText().length() <= 0 )
		subBus.getCapControlSubstationBus().setMapLocationID( new Integer(0) );
	else
		subBus.getCapControlSubstationBus().setMapLocationID(
				new Integer( getJTextFieldMapLocation().getText() ) );
	
	originalMapLocID = subBus.getCapControlSubstationBus().getMapLocationID();

	return val;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getJTextFieldSubName().addCaretListener(this);
	getJTextFieldGeoName().addCaretListener(this);
	getDisableCheckBox().addActionListener(this);
	getJCheckBoxSunday().addActionListener(this);
	getJCheckBoxMonday().addActionListener(this);
	getJCheckBoxTuesday().addActionListener(this);
	getJCheckBoxWednesday().addActionListener(this);
	getJCheckBoxThursday().addActionListener(this);
	getJCheckBoxFriday().addActionListener(this);
	getJCheckBoxSaturday().addActionListener(this);
	getJCheckBoxHoliday().addActionListener(this);
	getJTextFieldMapLocation().addCaretListener(this);
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("CapControlStrategyBaseEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(408, 374);

		java.awt.GridBagConstraints constraintsIdentificationPanel = new java.awt.GridBagConstraints();
		constraintsIdentificationPanel.gridx = 1; constraintsIdentificationPanel.gridy = 1;
		constraintsIdentificationPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsIdentificationPanel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsIdentificationPanel.weightx = 1.0;
		constraintsIdentificationPanel.weighty = 1.0;
		constraintsIdentificationPanel.ipadx = -10;
		constraintsIdentificationPanel.ipady = -10;
		constraintsIdentificationPanel.insets = new java.awt.Insets(6, 8, 1, 8);
		add(getIdentificationPanel(), constraintsIdentificationPanel);

		java.awt.GridBagConstraints constraintsJPanelAvailableDays = new java.awt.GridBagConstraints();
		constraintsJPanelAvailableDays.gridx = 1; constraintsJPanelAvailableDays.gridy = 2;
		constraintsJPanelAvailableDays.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelAvailableDays.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelAvailableDays.weightx = 1.0;
		constraintsJPanelAvailableDays.weighty = 1.0;
		constraintsJPanelAvailableDays.ipadx = 142;
		constraintsJPanelAvailableDays.ipady = -59;
		constraintsJPanelAvailableDays.insets = new java.awt.Insets(2, 8, 100, 8);
		add(getJPanelAvailableDays(), constraintsJPanelAvailableDays);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	boolean amfmInterface = false;
	try
	{	
		amfmInterface = com.cannontech.common.util.CtiProperties.getInstance().getProperty(
			com.cannontech.common.util.CtiProperties.KEY_CC_INTERFACE, "NotFound").trim().equalsIgnoreCase(
				com.cannontech.common.util.CtiProperties.VALUE_CC_INTERFACE_AMFM );
	}
	catch( java.util.MissingResourceException e )
	{}
		
	getJLabelMapLocation().setVisible( amfmInterface );
	getJTextFieldMapLocation().setVisible( amfmInterface );

	// user code end
}

/**
 * Insert the method's description here.
 * Creation date: (5/1/2001 9:11:36 AM)
 * @return boolean
 */
public boolean isInputValid() 
{
	if( getJTextFieldSubName().getText() == null
		 || getJTextFieldSubName().getText().length() <= 0 
		 || getJTextFieldGeoName().getText() == null
		 || getJTextFieldGeoName().getText().length() <= 0 )
	{
		setErrorString("The Substatin bus Name text field and Geo Name text field must be filled in");
		return false;
	}
	

	//if we are using MapLocation IDs, we must validate them!
	if( getJTextFieldMapLocation().isVisible()
		 && getJTextFieldMapLocation().getText() != null 
		 && getJTextFieldMapLocation().getText().length() > 0 )	
	{
		int[] mapIDs = null;
		
		if( originalMapLocID != null )
			mapIDs = com.cannontech.database.data.capcontrol.CapControlYukonPAOBase.getAllUsedCapControlMapIDs( originalMapLocID.intValue() );
		else
			mapIDs = com.cannontech.database.data.capcontrol.CapControlYukonPAOBase.getAllUsedCapControlMapIDs();

		StringBuffer buf = new StringBuffer("The MapLocationID selected is already used, try another\nUsed IDs: ");

		long mapId = Long.parseLong( getJTextFieldMapLocation().getText() );
		for( int i = 0; i < mapIDs.length; i++ )
			if( mapIDs[i] == mapId )
			{
				//setErrorString("The MapLocationID selected is already used, try another");
				for( int j = 0; j < mapIDs.length; j ++ )
				{
					if( (j % 20 == 0) && j != 0 )
						buf.append("\n  ");
						
					buf.append( mapIDs[j] + "," );
				}

				setErrorString( buf.toString() );
				return false;
			}
	}

	return true;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		CCSubstationBusBaseEditorPanel aCCSubstationBusBaseEditorPanel;
		aCCSubstationBusBaseEditorPanel = new CCSubstationBusBaseEditorPanel();
		frame.setContentPane(aCCSubstationBusBaseEditorPanel);
		frame.setSize(aCCSubstationBusBaseEditorPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val) 
{
	com.cannontech.database.data.capcontrol.CapControlSubBus subBus = (com.cannontech.database.data.capcontrol.CapControlSubBus)val;

	String subName = subBus.getPAOName();
	String geoName = subBus.getGeoAreaName();
	String daysOfWeek = subBus.getCapControlSubstationBus().getDaysOfWeek();
	
	getJTextFieldSubName().setText(subName);
	getJTextFieldGeoName().setText(geoName);

   if( Character.toUpperCase(daysOfWeek.charAt(0)) == 'Y' )
      getJCheckBoxSunday().setSelected( true );    
	if( Character.toUpperCase(daysOfWeek.charAt(1)) == 'Y' )
		getJCheckBoxMonday().setSelected( true );
	if( Character.toUpperCase(daysOfWeek.charAt(2)) == 'Y' )
		getJCheckBoxTuesday().setSelected( true );
	if( Character.toUpperCase(daysOfWeek.charAt(3)) == 'Y' )
		getJCheckBoxWednesday().setSelected( true );
	if( Character.toUpperCase(daysOfWeek.charAt(4)) == 'Y' )
		getJCheckBoxThursday().setSelected( true );
	if( Character.toUpperCase(daysOfWeek.charAt(5)) == 'Y' )
		getJCheckBoxFriday().setSelected( true );
	if( Character.toUpperCase(daysOfWeek.charAt(6)) == 'Y' )
		getJCheckBoxSaturday().setSelected( true );
	if( Character.toUpperCase(daysOfWeek.charAt(7)) == 'Y' )
		getJCheckBoxHoliday().setSelected( true );
		
	
	getDisableCheckBox().setSelected( subBus.getDisableFlag().charValue() == 'Y'
						||  subBus.getDisableFlag().charValue() == 'y' );

	//set our mapLocIDs values for all variables
	originalMapLocID = subBus.getCapControlSubstationBus().getMapLocationID();
	getJTextFieldMapLocation().setText(
		subBus.getCapControlSubstationBus().getMapLocationID().toString() );
}
}
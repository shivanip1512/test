package com.cannontech.dbeditor.editor.point;

/**
 * This type was created in VisualAge.
 */

import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.data.point.PointTypes;

public class PointStatusPhysicalSettingsEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener, java.awt.event.ActionListener, java.awt.event.ItemListener, javax.swing.event.CaretListener {
	private javax.swing.JLabel ivjPointOffsetLabel = null;
	private com.klg.jclass.field.JCSpinField ivjPointOffsetSpinner = null;
	private javax.swing.JCheckBox ivjPhysicalPointOffsetCheckBox = null;
	private java.util.Vector usedPointOffsetsVector = null;
	private javax.swing.JLabel ivjUsedPointOffsetLabel = null;
	private javax.swing.JLabel ivjCloseTime1Label = null;
	private com.klg.jclass.field.JCSpinField ivjCloseTime1Spinner = null;
	private javax.swing.JLabel ivjCloseTime2Label = null;
	private com.klg.jclass.field.JCSpinField ivjCloseTime2Spinner = null;
	private javax.swing.JCheckBox ivjControlInhibitCheckBox = null;
	private javax.swing.JLabel ivjControlPointOffsetLabel = null;
	private com.klg.jclass.field.JCSpinField ivjControlPointOffsetSpinner = null;
	private javax.swing.JPanel ivjControlSettingsPanel = null;
	private javax.swing.JComboBox ivjControlTypeComboBox = null;
	private javax.swing.JLabel ivjControlTypeLabel = null;
	private javax.swing.JLabel ivjJLabelControlOne = null;
	private javax.swing.JLabel ivjJLabelControlZero = null;
	private javax.swing.JTextField ivjJTextFieldControlOne = null;
	private javax.swing.JTextField ivjJTextFieldControlZero = null;
	private javax.swing.JPanel ivjJPanelControlString = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldCmdHrs = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldCmdSecs = null;
	private javax.swing.JLabel ivjJLabelCmdTimeOut = null;
	private javax.swing.JLabel ivjJLabelHrs = null;
	private javax.swing.JLabel ivjJLabelSecs = null;
	private javax.swing.JPanel ivjJPanelCmd = null;

class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.ItemListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == PointStatusPhysicalSettingsEditorPanel.this.getControlTypeComboBox()) 
				connEtoC1(e);
			if (e.getSource() == PointStatusPhysicalSettingsEditorPanel.this.getControlInhibitCheckBox()) 
				connEtoC2(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == PointStatusPhysicalSettingsEditorPanel.this.getJTextFieldControlZero()) 
				connEtoC4(e);
			if (e.getSource() == PointStatusPhysicalSettingsEditorPanel.this.getJTextFieldControlOne()) 
				connEtoC5(e);
		};
		public void itemStateChanged(java.awt.event.ItemEvent e) {
			if (e.getSource() == PointStatusPhysicalSettingsEditorPanel.this.getPhysicalPointOffsetCheckBox()) 
				connEtoC7(e);
		};
	};
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public PointStatusPhysicalSettingsEditorPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getControlTypeComboBox()) 
		connEtoC1(e);
	if (e.getSource() == getControlInhibitCheckBox()) 
		connEtoC2(e);
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldControlZero()) 
		connEtoC4(e);
	if (e.getSource() == getJTextFieldControlOne()) 
		connEtoC5(e);
	// user code begin {2}
	// user code end
}
/**
 * connEtoC1:  (ControlTypeComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> PointStatusPhysicalSettingsEditorPanel.controlTypeComboBox_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.controlTypeComboBox_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (ControlInhibitCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> PointStatusPhysicalSettingsEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JTextFieldControlZero.caret.caretUpdate(javax.swing.event.CaretEvent) --> PointStatusPhysicalSettingsEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JTextFieldControlOne.caret.caretUpdate(javax.swing.event.CaretEvent) --> PointStatusPhysicalSettingsEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (PhysicalPointOffsetCheckBox.item.itemStateChanged(java.awt.event.ItemEvent) --> PointStatusPhysicalSettingsEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		if ( getPhysicalPointOffsetCheckBox().isSelected() )
		{
			getPointOffsetSpinner().setEnabled(true);
			getPointOffsetSpinner().setValidator( new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(1), new Integer(10000), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)) );
			getPointOffsetSpinner().setValue(new Integer(1));
			int temp = 2;
			while( getUsedPointOffsetLabel().getText() != "" )
			{
				getPointOffsetSpinner().setValue(new Integer(temp));
				temp++;
			}
			getPointOffsetLabel().setEnabled(true);
		}
		else
		{
			getPointOffsetSpinner().setValidator( new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(0), new Integer(0), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)) );
			getPointOffsetSpinner().setValue(new Integer(0));
			getPointOffsetLabel().setEnabled(false);
			getPointOffsetSpinner().setEnabled(false);
		}

		revalidate();
		repaint();
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Comment
 */
public void controlTypeComboBox_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	Object controlType = getControlTypeComboBox().getSelectedItem();

	boolean value = PointTypes.hasControl(controlType.toString());

	getControlPointOffsetLabel().setEnabled(value);
	getCloseTime1Label().setEnabled(value);
	getCloseTime2Label().setEnabled(value);
	
	getControlPointOffsetSpinner().setEnabled(value);
	getCloseTime1Spinner().setEnabled(value);
	getCloseTime2Spinner().setEnabled(value);

	getJLabelControlZero().setEnabled(value);
	getJLabelControlOne().setEnabled(value);
	getJTextFieldControlZero().setEnabled(value);
	getJTextFieldControlOne().setEnabled(value);

	getJLabelCmdTimeOut().setEnabled(value);
	getJLabelHrs().setEnabled(value);
	getJLabelSecs().setEnabled(value);
	getJCSpinFieldCmdSecs().setEnabled(value);
	getJCSpinFieldCmdHrs().setEnabled(value);

	
	revalidate();
	repaint();
	fireInputUpdate();
	return;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GA107C1AFGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8FDCD447353FED0D753534212F76153626BF9BEDCBDADEEADB5B5A5457C79B1218C49B13C2E39293E9E3A2C9092186935310644A222002222220A062BF0484117FA022C1A18615AAAA72DFE4E1AF30F1595D6EDEF4D592FFE7E66E19FB776E5DE531C9BFF9FEBE47FB67FB664FB973674C1939B30B1036E34A4A9571E90230E225A07F2BDCA1884B3FAA88CF7F66E7C5084D8F8DB7882AFFBB01B688
	BFBC18G4FA860ADBF9DE1C8953E33BE8942F1904E2A09B024437BA6E14A7A349B7062251C686B0270051F9E5B6E3B1C69DB301CC49A7EFCF3B2BC5711883F8BB76C813283258A5FEE4E107186882F135F892D0897045A5F13B8DF6E49D061B364F8E9404B83DAC4637C22B9CB66CF04B009B305BCFF4F624E0167EAAA5DED55D5F23C2E2F858B318FE546271032D479A3955C4B52B6494F9CE1AA2D8803D0D6FA961EB5CD17870E7459068A7B0CD62B4DAA09FD030526DE51E416EC0EC279E137192DD2F5F593F9
	1C170C523033E9701A535CE7341C97A549EC9DF03ECFA3B6992D2285728C3D176872531EA4DA8E68826146B002659BC97DA540FB96D0D9986A73E8CA0DAC6F244B41C26454F5DE75898CE3FA4C88D37489EFDB3552F49F497F995ABEA4DDAC708BGE33264DEC0D9026FC3D92EF510381190DECE525E0FF8EDA74173A0DC8B54F6BF4AF8F89F4A58F663D742725EA3716B3D48E83F1F4996F43FA2E3D64A61442D348F55E410FE908E3C65C0498F049B0A001A006CC019346F3E36659DF89E6D156AECC3C3B66BD1
	3B7D18456478074DA4DA603D3A9AB8B2F6CE6C33B9CC02407A67AFFB8AF464C11A7800FB5FA444F4EB9530BF051C3BDB1024327815BA3A4D08589EBFD94EE37A830AEE318F10FA7B9EED5BF970CE521176E378F40AD74DD6F056D687A8CE42DD401BBD9B6B39ED9D4A5218F02710DADC9B1F28A3CB506F4B634B9EE4B2B4BE2848426AF84BB6D247AE40A78105G0581AD82CAF8886B78E8FA69E8F5FC824603438A5DFC3857EEF4C847064D961368106BFAD1332F3A56A316EE69185331FA89AED53751021F3F27
	DBAF8B02774467BC446A236AA125DED8596FDE70D6F65BC31EFDE39DEF431768D831BC445A50407157A8BE2242D95B5E24B88987GAF8608451FC947D673435ABE72G45DD8FEB7B4871CE6CA3130117B4A75C405AF7C6A63113920483010201C201A2016200D267E29B87249F70F39CB5295A1725FDBFE38BBCC51764B01E30BAA52335CFECB1BA4C46DE0B689464B827B3C83D763A25BBCF47F79F147101E8959DC649EC33C26E46A191BA131345694A58C062B8C44AEDB68F09D04010DD40FCCD991BC8FD9B1D
	52853B49A809CA8C4637E410BEF1455882B9C286705EB3175457DCEAF30B603DF1AE56551F3388B68D4233F83DAC4E58884FD35039C5CBF5F53D390F08E1F4DC43BE7AC3A351E19E44377C816A7D11F0439CA053BC30D973F01CAEE9437ED81F725FC2C144915D7EC8A860D1563726BD2A6D0F3F24654C81BC9AA879B13059C00DC01647F04EADB77648799099547992D95649F22AF1A233E91EFEFFD6D312AABFD6D693AFEB35A6EE0A7CB4E8F0E2A7577AB10693D56F2CDD4EE4133E9DGFA86834DFE8C5BE657
	569C56E70F991DA27652B38E68E022C9E9A996F747B6B28709D7C42BD4AF5AC52B89DE1CF29F495D36DA693F7DB65E378AA8CE6CD99DF4B0A747CB36EDE0B864219E8D482F26FC23A4B94C3D431208D3BF679F2332B85DCC25D356756C8EBA57020E4B01127E083ABE3CED132A9FB65AEC17076D4DE404497D79981D3733A0FE599F31BF3C52C1FC32B69EFE1306957EED9DEDBA75CF620F45667A36615F55ADC35BB77E35B2FE5B19A1773B55F2BFA378F6393F31B8F3E91CG50ED8650822004F098C3C04D61D8
	9F0D1DBD2A3CB11F55F2BEA9234832FDCCB28F381505652C144B992DFE7C99C76BF8FF7BED26773EFFDF26FE5FFFB8D33F6FBF1A693BEFBF1129573799AFB21368E73BEAD50D1567B209FD6D33D92DA29D30BC0940FC6FA54DC48F3355AC351ACD8322F45EFCDD847B98CE7A7CA2EA43C760BDB09CED6D555DE8EB77DC3FCB883D34D557BF8B7AFED5FCD4B86B67F1610A2DE5B2BD1FC54620E8910720226AEC43D6096151F4FE10F12701E28643D7C85ABC7473296BFF263F5FA9CAF503E25F65E3B6D701D99207
	8A49FFE4C9A0568D9A2D8322A96FC36395E321712AD4C89B267084705FA7EF79B97B779F4971EF89D150EFF608A72C76E1F9764B4BEF492F107B4FA6617A7E5B19EC0ACC676DE628E9C7419523E5D8AC247F23BCE4E9F359B2D078E19FE97042E149ECE1918ACF56351067A7A2DD19AC5B5C5619D436BAD8C9B9EC1666EBF691BC0FDE9B29AFA36D89056C51A4BA7AED0EA14F8ABBCA59E3972A4F3344CBC7B5C5B5FAAF6B90A8D142F4A8CD7832DA079356C1F32FD9E976CFD78D1D3AAD156B56F4E0A2156BE4B3
	0C6B63E651E212A56C909D3602BE183724C27A3F1C14C864AAF4DE05A2E4216A8877931129380C49F428F3023ECCE72C623FD924F274AB466710F11E95816BCA2006881CEB873793BE4E3532C3D1E733D8180982DEC88431BF5146B415CD6909E07B9C6BB8BF2357B73FFE943EFD947E64D178333D72191E9732D3092D967FB9AC024BCE1C09D362B5743B33B7EAF85486F0FF5E14CD66A00B4A8FE1F86B8EFD5BF9F18771BDAE737C0DBBD68944AFE7F9B2DBBF5DC87234BB4CC360369147CA5E8FEA3F205E8F0A
	A5ED85FA147D891EC0AC6DACD3AEBC7D5DF8097D9349575005FBC8BD90F681857D09659D7EA7D6CFAC5E7DBCDE6D636106B6A05763FA7182AEE23CD0604F87DAAE472B1A2F0E57544D772EG1F8294BADFAF3F34CB98CFF8A25C1081D47504DE3C47F9BC897881BA71C21EA0715E607BCC87B83651C83017418139A381574F7FC8D56F19191C453AF3A82118A7D87E89CFEA7795FE3D13643B877032A7F1DCBD35C36D439EF5BAEDFDE63A2C137B4E17F25473AB43EE4FD983CF9845CE6984B8AEAE6CFF5F48A132
	12F51F8C4BFD68476F9E96BC57312C71F109D0F7155A11E6DB9DACBD9B208B57F1772345ACDE95309EBEBA2E5EEB1B35BEB7FE2D17FAE810759FD455C3E47261C4A653372A497E095E7EE19F9532F0E058CC67DBD8E09AA5A3B5D72C2332BD39FB29EFCF728AFE92775E3E5EC6578990DE8E147A942C6368BEC0C1D7329CB78F309EA0E68B32BB5436A068A936CE8805A7334FDF6FA2FDE20C1E0ADC67E1799BD99BE9ACAD56631D1BEA65F2675CFD27D0F3B3D1F7BFF0627A8D7161CF49BE59D3CABD86FEADBFF1
	9A90536FE52EDF4302F0433885285F53DB547A4DDC40740BDE007A35DC2CC6FBF3CBEE8F6E337C62A216AFBC8D636CE9AC5FD123AE5F8EF890502C27317C2C6E92F80E5DA540FEFDDF76B1017A497F226F02FADC6BC6BD66010CC94F209E51955AFEC27428FD8675083CE5BDD83907AFE1394D10E7GAFB7A7DBDDEE986051C0298B315CE917C87F9C2323A017A974E019FBA03F2E05D8667F566A15B9E9A12EA5DACB54F6B0B4F22FD7BB983C107557D98B35F6700E5DE46C4E87BCFAA15A41541D9BD4F6709CD8
	9E680AB00372755ACE22B34C15F27877BBD7E25F9550F7F9F28F11DD088CB7E4811581B582D9A2310C933BC65D33FD5F65E34FF636477EE7C02432AFB0A552F30F006DCFA636133A1E914976A757F2FCB34543D5B8EB1BEFD1BBC663812F6D4F3896AF695216BF6B4F6EE54E5704D93ADA0FF4051AF01CA69D9BDFC7DAC83DD19B2D6AD25555A7511D17ED71050EA4DA0EA0247D85778D0BF2497C6B0270A420902059C051C0C94F069B8A1E45B6895A25B7B73937093709C959E3E2FAAE3B457AB1DC9C2DFE9A1F
	552B1F0FABF285559C2632187D4419A795C556165433476FDAE969242E48D8B2BD0B6D7A9B0F727D137BC10FF4591A70E4DD3987AC5E5AD5361F320F7979AE37EF0E4F3279E3BEBC231F45EFE3F75520BE890BD01F1B5D37264FD7BC52E95B21E611FBBAA6436E4AA4F93CB4F3996AAE5D1A8CE7BD52E9E588D824D727FB7332746B142F6DD81D3E53212D53E9105FEC20850B30CEDB33513709657A2C7278B6671FBEE99E69347A94BC27D7272F56228C754F6118366F23FBCB908EF88E476F32DDE4EF8E6DB6DD
	EB88E8336F5CCD56B3B607F940ECC56C07946B33B9680697437E32477BDE5C8BFB747762DE5E233F9737EC0F6FFD68B777F85B2BE3FB468B29DFB999741B8E443078D60205C3B87AB9EC0F14F6B25724BE8F368C2891C8821A74BC72B3A9FF4673725A88569C614FB33F01717FDF1BF68F1824554E9F6B64B274F0B5C9AAB914361F69D10637BDD2FF761E557B48A43C1D26FBF04BFADA5FCE276824061AF86BB2EF3134D9505947BCED9C92855C0FB3F72D16633CAF596AAA396C9D3AFB643132FEC90B59B3EB31
	D2B7C570DE8F5436583D3EAC909E274164EF92395E7B5D51DC7DFE77C1AE696FCE5B3023CF54762D5339991C274CD2E4E9C0D4167782E8FA49689890BD7AE6B7CD4FF85E528F64FA6B3F2CBE8BAE2A6B3314576756F4348313B4F5918C61D9C073B4B84BEF29DBFE45825A3BD772092CBA760EAE52188D39270B0C9BD2470B96639AED6AD9625BB4C4415882F2C561F8383B86658B84ECDA143BACB3A1BCA7CACF3EDFF62B65AB617A66D5127CA265B43172B36985395F484F229714BC657D61CB6A7C4A84BCFFF3
	FF3956EE1331DC8F695BDEC03B5D5B01F3217D855477ECAA51B71844811A7F826A5B156D6BBBFE8C44CBF8D1CF5F43BDEA794A393EEF547A4AAF8372AAF8D1EF8C8C6FA33E270B072F5170B5DE5E2B97083D36982F59064130CFFA11681452222E0BDA408601C6647CD97F7869D5E2EB7A9D46A16896676DE21FE07FABC93B359553AE0078B1A4BF400B001A7E0A6B9A30F9023CEF45F6689B0D3D2205714E37ECF467493B77A86F7317099EBE3EBC4871420608FD3E6094CD7A65CC6DA7FCF9BF96C7996D5BEC1D
	54546E36367EAB730D967C9557D16B2B7478B1FF45B9E50476150468F0C3DAB4E2FF26D88E042BB8F61A7AB60D909E6458AFA9A6C1F8A2475E2658E4884F6458D7E8FEF3A03C00E3F73563DC9643316ACE02553E84FD79A5440A281FEA0170C40E4D4F25E5C0F886474EDF477CE6F36C64D902E5AC01F6DD027D7DFF3B54763C9E7036A5CAFF34AC511F634681BEC9438B0670AC8D4656D3274E51B3C4CB58FAEAB3473BA91E70320233F556DD549611F09570963D0C725FC7FD5A4098E84B98444E50FA8B0570BC
	0E7534216E0BB8F61A56F9595FE07C7F8D3177E85B74C0D86258FFD0ECA20403B896F003E0A1901E45313F5D60754B31B3B4ED46D268D3CB51763CD50E7EDA6DD234BD83F4FD6902F0A0D070D2EC8BC7075AD604829E8E9435D45EE7DA6AED9DFB9F35E5292F30FADC4D7147A8DE2042D97D36D21C049B0097728A4A6F4CC61DD2E3915BCF7D4D9E88CB9C5BF89463CD6458035BB15E7CD85C67AE6EF1733D49EECBF575878E336918F12011DAAED6C725ADA4AD11B1BA966B4858C2E45C33AC5CD083543C8C77B9
	DC39384F997203BB0546F16F691EA90CEC4E0D37ACE3759538CC5967A8CAB91C484A3C23954B1C837C04D78976F02B5AB690FB73D1BC734B997FCDB7BE196F7385B57FC01B1ACF647D27C14DB73A71D72A52B35D9E5E0B3A45BDBCDD307CE23F5773120D2FB21D6C72B37511ED426416F764BD5CD77A3D78G540EB27D3FC8478D49BF78D56C2B472B90CBFE0D6F3552F39892B8DC765748D95AA70838322DDE5EC16612A1234BBCB4BCC4BFF6C73FC672C925F6EB863C0772FC44CA12AF5B04A3DB8AC62B0948CF
	735CD02464B9170EA127C83EDF09A6165F22CA7C96D0349C735BD2C57233BB44FE516190CD6CD33BDC7E812AC7AD44ED647127D1BD7AE15EE0F16E217640857C71C0614B89965ADE2FD3576A7EE090F09E857DA08D214DF29B4DDE4E56E3AB38AEE7BBE97D182D1A7AB1537A49FABD5C1077BA4A77C13AF7FD6E4FA0711BA1EE8F0F7FF2AE795650EB6C3BBC60308D134AE4F19369DAB0G62853D0EFAFDF8FDB43DD62A74536AB573F5E6BF943D0CE775753AC66717B008BF6FF5BEF7D2DFB38E4229FF6776391B
	5AE288B7F06C8B17683C8661719C1BD00D76BE08E3C59729AD0670AC0E9D4EC7FBB40FE30FDEC7FB1F73865A57336772888661A6A089A890A884E88ED08CD0C69C4C71C0EDF11846C45358A19C88B49DE8DE9C7BDEC63E054540FB6A1BB01F3E49768BD81A1F1C1D62252EC95964B9C71621CDAE4F434FFCC341C2E4393C351F7406F79E35FFDE78CC56A73D4A0AEB4F9439FFEC96188F280D37DE753ED6E0F6511BAC09BEF8E8B33D4932C938235A7B98D9C2FD03A6E8072EB7F10C5CD665BE66DD5466CD847E24
	B7F1ECDCED73B5B6F0DC60B36CCDE5EC90ECBE04CB5D46C654F57D31F1155A1BC590BF064B5722E36B06AAF1DE4AFA8B63CD29F457037919C5402F61F1265EF037536DE4C9A8B09D13C67C997FC85A71EF01B2F63B69586F43160F10259E6E5FD6E857BE2E37143E987016B7FFE6A1750F263C25BDCF3C0462E1EFE94F938F3563F962A860B53F4DFDB9DA6721908E67D89235C74BA11CACC448589729CDA902F0AD4706AB5026B4834674F9B8152CFF26C1B88CA892C8D8013C791437874275C08172B7F0463B18
	2A7631C9DA2D5EA41FC88DBECDA71E77F1FC452D0C15DE4616F67C79FB36117523AFE57BB3D610CC20138BE8374C8BA06F716AFE342B1A48A3DA49118C13BCCEDAEA317F87C1FCD6EE7E51514AD5179D22A9B7D4D5AEABE369F66E7B71762BEA996B79FD56A7A3281F9A8979609C4970E7A89E2D42D9DF9DE8413BAC4B0157959FA16F61DEAAA5BEDBA80497G4582A59BA28C85C08DC0EC8F602DFD44D17279CD2659E6EF942F08965596AB536F4E56DB3B1F703BC474C9E75C73A3E1660417D6F8BBD750E5E07D
	F5C4FE864F5DC6F1265F52B222DF8870E683C583A5A4C498B2000A92D03F63F985CCBFF2846228A4997B8669698AD40E9CF8D0E032F941F48BE8575B132CCFE0F234A5680FA38B6063B43CC9908E56E02C0CD3D5FAE54C12634E73D246A24017EBF849ABA38CB9AB5DB1D6570FF42A3F6126FEFBF3BC769DED3EE5F27ADA79C956B64C7E6EA2DB3572782A2B5C81CF2BF8B507FF6C2EB7C355114B85F945D56585B9A51579F259D32E2A4B2EDA732E576F4712DC66C479B9A2E44A653DC167A949B1ACB2D9822A94
	D9BE5F610FACAC5D4D43CA3ABB5AF7E9539D0709B0EF1749EC345886F69564949564941741C2EA07407C13A4C17947723B7308406B784F49581F33FEBCD528FF7C2595B837E9758C1575CBDD2554F1DC672A15AC4F33350A0CCB7D2AE716CEBA2A241B1B1B6DBDDDB9C9D6120FBA6CF8DFC9F76ABAD9C772B4F5B60B4DD1F8F550AC49757E0F630A6E768F14F4ABBA7CA9CFDE5BF5117D45DE1B03EE04337D45759779FDC828139E20A020907264E7C72EF6FB6ECBFE35DB3BAF9986E9664B754A52FD7B127EDA72
	E7F4DD9083F16300E47F072E8B2A92E12E851257CF975DFD240BF4CE3783FFA4916711667C517CA0B256F1AE8901F421C01B65F0B83C13417528007308C07700A2810F66F230BDD255C9E1555E25A024ABBC6D762600F108BFDDE731B9697520E29F3C92F75EA677F279B7E3467F1534C561EBCE7F727E714ED6DD7978D62E9C6FE45B86B799357C17373871CB347C57CA49D8E4DFA46A06086F4876E63FFBCE3BB7CB7AD5C6D2043CF7BB502947AF607C1243FA7CDA4E4F9B5163B7F37E03155AF3D904BF4879B1
	95FA7C914E7F26AEBF9078ECACFE3DC1990B756DBE46A2B599E5FC6C3FFCD2C9575CF66B76B066BD165F46C645BE147FC3497B118AFFE4E2F147D712F152EF34B8C51E57774FA8F90D3B612F1CAC6D6CA61216795E5B286FBD8D6AEDE6927A635F2AC4FFFCC1927AEC4F35933BD230BA425088B488B491E88AD068EA0C93CB631033D27381DB8E1431A642D08554368663B85BFBB4360064614BB78AD571A74AE5EB63942830C6AE4FD7BD4A9A6DFE0C7AAE0F1E8F0F368B5F51FE413A314353067F0A1FF3F02DE1
	B6BC901E5300227939399DDD1EB63C021FB91985F1098D8F07E714DB3A6FEAEC708CEA030535604B2EC59B9CD0614F9E5BDA79D983691A56B2DF1E2EA9607D59375FFE7B95A079CECBA731B5ECE7D3F5F3005741339929DA7E992B48F8772513712AF74A1F716312B66B71657C5918CF5E2035A924BE6CEB394D2A56630F873E5E78746E431CB8270C2D21DA755873BE4EAD6715B42B3355E9D8DFFC2AC5606F0BD46FC3ADFA3E6EA7C52C0C891FEA99725D08D26F6788EC257A678806CB754F2F5CA875FD176C8B
	255E6F12FD29D4FD17CC7E3D00E652AF02209F4CG1A8F948DA4A463DAA8230C58CFF21359F39D743EE9001CE3A03717A5AC7F0DB26F3A46170FFE67F9EDB95DCF36C912ED08640F7806F252DE124DCEC106EDA9A7F564B08F8CCAAC2A0CE751EFDD96311F424CEE5FCD775C32C02F02E4346509FDF4FF9E42ED9C1368DE0D854293B976A15D2B198C61900E7DB19D6701D00E25D3FFB0B5A54210170258907D86D08361C60E859DA2D89B046D9CFB056E450F0770940E6DBCC83FDFC0B80CE3278DD86EFC0E75D0
	19735601BDDC076B78768B822F0F10723D70ECB1FE28FB327FA44C0BE7FABF947B24E663G6F97F574DBD8B364E7DF07FDE12072DDEF79G58643059C507F40D217498381C574DD6E2EB83A11F9020F9C0D1C0F1C0E96B212E00EA001A0086014681CD828A861A85B487A892A8F6BD4A3178C83E8FB9648FFB34E3BA0C6C3C995B73283C083F9B10148AF585446628455BC9FEFAF78D14CB864DE649A29E1327B0798C5C4D0B38FF63023C5877427F26E5CC0770EC20C8A096F7C6B746DD4E637E051EA7AF5A90E1
	E8G6A59007ED9DF3BA0203D3CDADDA8F87505CA0A4BAA4B2ACAAB4AAA41A7626F5C17195021643377E20E77FCCA8F92A72824BC1F257B7822122EB8FF27B69D731F0E424035007BD4CCD2127A73EF9E41B961FB5DA4445E43AEA965CDB86B0F1C2CCEA34E61F7C257862C676FF6621922859CB39FC62CF6A3E217C6901B46B1218A4F09A6EDC2EC9FBFBBDA4B31BFD4A0665A046B2D628ACFDF252182FD15691B182FB29B1E8B0048B79A6607CC2F9C4D8F413B5464BD9652A625A9EB41AC793D13575F7B29243E
	65B50DFCBA85668A6B004C6F302B7C10A193D9971D9916982F311C7AB04A21E4085060D04E0ED55333D4AC2D9A9F6C5D68116E3C5867C47E1FCE2D6169984EFC127135DA1F0454CBDE9A7AACF1EB346B98422F617CAC0FF59461B7F17E97BB74521BB87FF60FB3BA046F82BE33978B155F9981ACAC0D7709CE9C4BF1E9B816AF505F92A95B8CE1A053E64C233B8B77D9C7G1B31997378C197BFEB3099738827F177EC81FB88543C856D415EFEE5FC18AB7E15F5177771F81E18FE592E55ED40F3EA16ADFCDCD5A3
	B6ED8B5A617AE66FF37D296651677A66E6FAF78D66E832D1403076E6FAA6182E7779394766D40E1DF0B6591CE67245C7761D5B71FB9373751F22737C8210B1EA8B0E4D6CBE7DBD1D8ABA7FA724C798D253B16E17BB3CFF5B1BC667599A085B4063FF2E4BFD2D71CD5A2E9270472563DA634574FF653B7774F4761BE34A770A42EA7DEFFB47E99B4D02783339FC632B5C3F47DD99D47A52CF8E69574B8354BF0905BC048C4CE7CD1777FA59CDF5AE0038D5BCFE55C177FAB9CDFD9993706D99D8AF22E1AC5FD33475
	B2ADA3C2F39E60EA07FE3D5CCE5BEDBA441F1501FD37210514417DE8662E487D6DCC8B318B647793E0CC192F536B164C08B27E57DB3D777BEF370E5E6F27366A7B38F735FA7A38F7376A7B38B3DA55BEAE43FE5DCA6AEBG7C1FB69E6F379CEB67583DB4CF02351ACD52A0479F24F2913CC1A485A27E88156BAA455AE4ACDC0535636FD83412318BAA8F5A78597DE7DAE9BFB0DBAC72D9FE9A47EC05214C6BE3B11551ECB72A640E6698111B2D558EFB5CE751D2D4066EB713D153E96F4530F463C7CD27A5764DED
	A7756B9236EA3F453DC371542D5AEFF1BF3F08F3C4967046ED45BD1ADFFB5CF7712F7C96FADFF011C77917A89E63D1FED4B7169F873C1EEDD87E1367745646E15BD89D4F5F263FB7958D3810694ECB03F0DE26DE5BCC6D54AB23C60E5B1429DF0689F0170697G61A9C0B3D4B8AB43FAD82F0C59F23C85DE4A0881BCA14B1D17816182205AACED9926913DB21A65F803D97AE50CG9E2861CD0370CC20B99EE52C2C427E9029C9938B61246D9106AC20226D5AF48515182EFE3BFB3AB688DB004681CD72C877C7FE
	EEA2D813EE96046781AD82DA2E62317EE42F407E141C9DE1284FC69FE2E6857ABCA3596873BCCF634E00709C20C5597E6EC7215F72ADB389317CFFD30BBEFD9CAF33F4AD7A6ABDBB90BBBF023ECC9047FE5B017166F16C7EF60C17144377FABBEE4D863DB2EABAFD9BD450F9EBB660C16A0F5666E8ED40E394EF4C515A004ECEEC33B6604D627A1ABC6ECC0EC6729962DBCC7763B127E3FAB5D09B1A33D32B6FD90A976C546A7BA4774B2B00B7F9A76A5B30C1DD3E300B35E51A7C4C03E74DAEDDBBD62DCE57A447
	B149CF97BC83B469D87F1D75A1A9C67EF656C77A6EAE7A45AB07FD722A5EA547DBF8D909E776757D34328A7C7F8A3E8790BF24243B5465FF3A97ECCA3A875247768DA5791F82576F00C349A7F40B7F651FF3AA6922BAFDFE570642CB0A703BB6D9FDE33AAD877DCF776895A55DD143BEDF7A96765AACA6F967238C5347DED5F4CE3F2664A5F679A3833B8F973A097858E62B45EC956B58AFBC727E350F6E173077A2557B2FAFFE7AFB640F7D9B4A683A2468A42A5E17F4FF7AE5A7DE7AB44BE0FB34F1F42FEA8A58
	00693BF05F76EB67712CF198471C1DF856F8BE472CD5F837A41AE3DD9F61BE30309B31D387712CF193476E6B44F2CD9C4B6D42F26DCA5ACAACF7BC4772BA305CA0A5AD3F9F94423104CEACB70EE3CDB43F54BD9106BDFB908BBC0C32D4F16CEF07D116FA0EBD5A0D3234A9718E21AC960E352620AC63B836FEAF4AB2CF496F864A3208E393C6D016659CDBBC0232A46CC5AC76904A124131E55DA8CB81470E6CC3D9EAB9D671B14A9248314C9A14E59A4732E87B4E04F0B84752E85DC7C1D848C5AC7990161126E0
	B41E8942A39C1BC47D2CC088CF63D89DED0F19908E67586D34AD23A0AC6CC36C36EADE864786E8BC9304C7B8D64B4B8864580B6CFBB904C3B9360F759788C7F34CF410775DBC44FEC46FCAB5C1F810E336F2ACE3A48F6767AB9EE7F97D9B6363EFB15D7F0CB99D73BBBAAA09FF91182775C77AA8BEB9CF6B0FC4F31FB998F8497928EFE82D1EED3267B3DFE2FC3E7E3AA28870908DAF944261C0D179DABF3FEAAD6A9827C9137A8E0CDF20AA2046F734695AC654F553A373A579B9911E135F5173156E653E70F48D
	BF8C427301220104F73565BD5C2EAEAFCD6667494F9AF8B63D2BD75EA3E4FBDCFE1F2FFAB76A2EBDBF5939657A3F210C5397951DDAD56F11DD1FFE592FFF2AE5B0BBF0096EC71B20ED25F751B6141C26F7A8A09C4431EF1EC63BB20DE3EB29BDA37781E3B9F68F45128AA28C998508BDC03F6796C03806E3859918DF8347FA4BB13F20825C6B5CF45EFD8FBA1F4E6BA1401FD900E7856F21D8B804A3B9B6194E1B497BC10E7D08FD074E857590EE5A0F7B244E0F7CB92B62ED1FF45CFE455630B2A4EAFF83G8F5A
	0F5F982A2F8B1CFF067A87E1401B476512687C91876124C2444E323B2C902EADC4D98F7B3C3B36FA94D96D104F53EF3F7D36A26BFEDAC7A300CFAC447A9E2874BC2F7FB13F2FB22390F53AF8C351E95B91421FCD6464727F1D4E634281303787905BC66767AA88579FC01D2CA93EF442331A09DEF412A01FA1377A2F22BE4AB84083F839FF3F01724FBC00720F9BD164CF257E5E9C604D67E936D3D9930AA28C29C508E553F32AB590EEA8C279AF6C9BCD7EC49F723B0A3472DF22FE4DF84083F93975B5A87F2CA2
	EC27D29FF7A39BE9BF1F87F19770786FF6685FA52C237DAC29B84210D60CBA6DBE64CBA77CDE6A2D1F15C1BE2B857537035DDE3E9D9C22E557C27C46E2147347951E7D6F77FCEF4B4563F5D4FA575FC97BEBG448D6271FF502E2F7FEF298F95867166F17DA7D70F263F2FEFA7B19E7AFF5C2E2F7FFF513263A0FED2893635196BDAD602322F70216BB62AEB8344ED66710FF851350516B78E628514202EB78E0E26EB228FDDC3CA343A7E2ECDDF57A7288FBA936207F1DD034AD15718927449FA685D8676EED63D
	AF2D7874675B35151F7EFC7B973A0F1AD08A632D94673D8F68DD7B9C88D7F16CD8A6419AA1BC4831594554DEC3B800E336BC1CC727F06C09D20245C0B8298C31A9EB88168561A20E1D217B3775A44C3147E9FE920483B8F6E395AF03E389544E46C0B8299C31D0EAE733A0DC44B19BDD7755C33819E363E9DF9804300BE3AF705FF3984F31F729FD8807F094471E24D89C04B3AA90FB190E19828857F32C3F9B73EB63987BBD0FE08807F22C142D21A09C45313F30F1896164CA3E1FC0654B01F09147DE65B257F0
	ECBB15AFG42D3AAF1BCDE59607E3DB6007ADCB3009F4A631CB86D7EADF96AC7246F33B1FA77693178A8AE555DB8BA36AA59B916755CE69C2C46F197474BFF345ADD46456C3CDDD504A12B8A63BC136EAE637D9FABB256E50C65BB3CD64646AAF636CE11714B5CB634D5611C9DFBD390504EFC69BC5D4F150F616410C38EFCBFB7D5F5BFEA305357F9770A021C12D23EAFDA2A3A4B54D765FF3A1FD7AB691ABE9A5BFE6E62C3A4ADFBDF233A93F5F28CF26FBF22242B75F9CF29C45E88E6691A5ED352ED77F9F74B
	BDDD086AFE53B63F6FEE31340F9CD374FD2DDE4967FD3F64E6F1B38FFB5ECB58F6DC496B7EEEDFF5D7693697FED8F5F76A79C37E27F3286EEB1CCA99DB9DFC6314D287B39BD5F25F7027FC96F74308E79DBC253A67714298F4F96B34126E45B154DD47D9A5DD493E315541C76714BA1822BA431EDA63FF9DF456F856413D4DCADE2B7D3A8B47526537A869928E793EFB575A2A48FE3DCDC9779F3E6E56E86E5EBDD161A97B9D2A332963FD5D9D5248EE68D452FDD46DDB765CAEC576932A332865E310FD1C0E6C16
	EEA52F2CB1487E186AFCEA57C15F32AF6BD1E44F68D552194A7D177DA765EA599976FA2D7B3CF628CF493B7B287EB92EAB54E733405C646273E3FB26F7BF5DC17D39E990F7BA0F3F3058FD4EDDC67D3B85400F2AC27FFCC25ED866550C0360979DD4665582F83FA4287D7318D2FD7FBC290C2E4DA1FE7DC1146FD7EBBC57E2FFD80373321D476BDF6BDD6F1B54479C8FF183F97CA5F97A6B13D574B7DEE6C13C5987D17F7FDCB516F3ECDA7D238E32F3680A7E19FB7575AF257EECAC44972AD14E47EFF86A3F046F
	A59470F893C65C5BF1B275F9EB015F4863FC274D3D0FF513AB11326FA4785C57C99CC54711EA36F6FA135F17BA5661A9F7FB874ABD114B74B79F67B157503D214990B71847DFD5295FEE596C5E9E440B2C46F67B28FB343DAADFBA8907346BCA31D23F5DBE22E5A7C37C0CC3A86749F6CF7D0D6D28FFBD0F77FA3BFB3B2D27F55486FC930F932CE9374F09CA3B2578ECB76DBE01D647C9D0468637F6AB53E937D33C5D269CC2BF78E9FA1E182549BD6D4F3C2B58DB412C24ED2A763463C65559005F78F5B6C149FB
	3C6AFC401D651EF97FF0D861D7E67A6FE7BC24BABF70BF457E274BD51D95684B7B57FFE36044F5655DF2C3497B9BEB7C77D91EDB63D9AF370FA8F94D4973FF6EDC7611124E394A775C19F1D3111DAEB964F43F7065F3EA664E15BABE67B763153CDCFE5DDBD6643F47202435F7F8669D1520709779651F48E3B4D1C9575D6D3BDE26A5A9757240EAA5DD1EDFBE0C2CF73B276C3B13153CEE9BE33D9CCFD152763A558B7B7B58BFAB1D3B91D6E1AF89ABA5E1B37E5CEA0E7AE813A4E47A7899D6C9D80F6BE679D782
	FC47F7BA040D1E35F0742BCFBC9EF229BEADDE08BFA12C9A242715CF88AB2F12E34FAE7C03283FF67ED378D8C860A1071062D68777FD2F7C79B94F34B88D422A9342D6E20A4F0B8EFAB2DCB411DF33167FCC6AF1E1B57DD35644701F90921C743152A9DD33080DC2DA7FB972E7211C12E8BA0AE74E1DD0B3748F0F9CA0D74C8EB4981D0392B12B079A0584AB79032E42C64636982D8387588174C3D46A95C7FB6870A0A6DCGF9B7D1F9691FE16139EC7A4D7A3DBBCFAE1AE990620F8BEBACB623693831CF32B9CE
	882B25C107689C34D9CCAE7BFB35B423242B240B51DDF348AE132BCF14ADA4770E395017DDF78424C4259C07A165F28887E8CCB273947298263AC123830A929DA7A47287EAED0EBD1C7739ECA9F76E8769DD71428AD9C9D2752BDDF609D598943E1EE6C9D4AEBC8ED2CBCF3E74601DCF5544C4C3126342CA7A87BD2060D4A556696121DE51B1A1649B5B57CE0A7CB2114BCE2A07B6EA0AA42C6AB78E19AD57600575E444D7CB8E2355C97E888B941A235198D9DC70422FBFD8740D3B7E5EC185D712CA428E56C410
	744000E89BBAF0343F5FEC95F98650DE107DF61EBD09D32809335175354DA7A35E6E057ED5AF98060A0A687F45747F9272FFB1C50AA9D2DC820D96A3787C27653BDCC467ADAEDE3BC412937488FE641552EA4333D38D71C2828C90F6A581BAAF39D7G1D5741460BC13259E93FA3E304DC45F996A8D9B3EAB0C42EBFD4C2C96B5C6D590A6F27FFA175765261F8A169B8E9930BFD50F8C2EE4FC6E1EDAFADCAF4C0DCC9C8D56A14260581915F8723A5D3417B884E38676D46BEB2E6D61B0C0E4BB487A24A6ECEE1F5
	3FE3201796A089711D47BB21D89AA26C3D0D429AE9105CDEA61DD79252152C1B481DD11941061BG5E4F5BF67A0F2A19ADD7855EE0DF29D19EC364765F859ACA74983484DD6BB97A883C1EB2B7106864A50DF7DD92CA274C2D747F2CDB6B8805AE2E85FE970E27A37FB3AEF705A2B729E7D2B6B9B7194051F839BD52382484DD25C2E59DEFC2FB92629A031332E202CAE3269FBD1163C563843546350A4675EEC6E6953BA0432211ACBE212AB82AD485D96E248A5A0E28D568561B307E13EC42C617DB331086A352
	46CB42DAB61D6710DFDCF7530D9E3FA73AC9C20A5B49E82EAB517E34CE68B355F95B5CB5A7D2129D7955DE3420FF9CC4A72455492F6E5923571A4748FF751F10F63D0AF6F894025CBDDF652E81B8B46853B571E6A4A07905269CF295B927B8A7EF48192F81CB90CC46646427CF204FE0700C95CCFC0A5BF796DEB2F1C7DBF4C21F295E61D06A0F0C89DC56993CE8C17A4AB81D50E7CA2791C5A7BC76334ACDA7CFADDAF5C21FA91DA6380FE272EC7250C9CF0B4F30CE010ACEEBD5BA2D70220562621085231EEB04
	AD3D4D2DE65CDD2351F3D9214AA57E16F3D9294AE505FBBA70B3659F8D4E11FF8581ACCCE2DE03ED58614C0775C15EF9314FE6B5B973F57D823F1A2C76D31AC6FF28B419A0173B0A4B74191274EE778163AE697F19A172ABF7F70BFA4B02F6729E4B90A15A111834136B247BCC35613D6E86C21035DFF38B7A467FDF50778F1E7A12FF680C8AC27ECD75EF54AE3FAD596BEF54561C116FB11FD1FE3B157DA6927BBD0DG40034F60EF92ACB938DF707EBBCD67070C960BE434DCBEEAB5115FECBAF6CD92155F7D1A
	DACD72F7E29C1949F8BF2AA6F2FF28CA737F81D0CB878816DEF4B229ABGGA00FGGD0CB818294G94G88G88GA107C1AF16DEF4B229ABGGA00FGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG63ABGGGG
**end of data**/
}
/**
 * Return the CloseTime1Label property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getCloseTime1Label() {
	if (ivjCloseTime1Label == null) {
		try {
			ivjCloseTime1Label = new javax.swing.JLabel();
			ivjCloseTime1Label.setName("CloseTime1Label");
			ivjCloseTime1Label.setText("Close Time 1 (ms):");
			ivjCloseTime1Label.setMaximumSize(new java.awt.Dimension(87, 16));
			ivjCloseTime1Label.setPreferredSize(new java.awt.Dimension(87, 16));
			ivjCloseTime1Label.setFont(new java.awt.Font("dialog", 0, 14));
			ivjCloseTime1Label.setMinimumSize(new java.awt.Dimension(87, 16));
			ivjCloseTime1Label.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCloseTime1Label;
}
/**
 * Return the CloseTime1Spinner property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getCloseTime1Spinner() {
	if (ivjCloseTime1Spinner == null) {
		try {
			ivjCloseTime1Spinner = new com.klg.jclass.field.JCSpinField();
			ivjCloseTime1Spinner.setName("CloseTime1Spinner");
			ivjCloseTime1Spinner.setPreferredSize(new java.awt.Dimension(55, 22));
			ivjCloseTime1Spinner.setBackground(java.awt.Color.white);
			ivjCloseTime1Spinner.setMinimumSize(new java.awt.Dimension(55, 22));
			ivjCloseTime1Spinner.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCloseTime1Spinner;
}
/**
 * Return the CloseTime2Label property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getCloseTime2Label() {
	if (ivjCloseTime2Label == null) {
		try {
			ivjCloseTime2Label = new javax.swing.JLabel();
			ivjCloseTime2Label.setName("CloseTime2Label");
			ivjCloseTime2Label.setText("Close Time 2 (ms):");
			ivjCloseTime2Label.setMaximumSize(new java.awt.Dimension(87, 16));
			ivjCloseTime2Label.setPreferredSize(new java.awt.Dimension(87, 16));
			ivjCloseTime2Label.setFont(new java.awt.Font("dialog", 0, 14));
			ivjCloseTime2Label.setMinimumSize(new java.awt.Dimension(87, 16));
			ivjCloseTime2Label.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCloseTime2Label;
}
/**
 * Return the CloseTime2Spinner property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getCloseTime2Spinner() {
	if (ivjCloseTime2Spinner == null) {
		try {
			ivjCloseTime2Spinner = new com.klg.jclass.field.JCSpinField();
			ivjCloseTime2Spinner.setName("CloseTime2Spinner");
			ivjCloseTime2Spinner.setPreferredSize(new java.awt.Dimension(55, 22));
			ivjCloseTime2Spinner.setBackground(java.awt.Color.white);
			ivjCloseTime2Spinner.setMinimumSize(new java.awt.Dimension(55, 22));
			ivjCloseTime2Spinner.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCloseTime2Spinner;
}
/**
 * Return the ControlInhibitCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getControlInhibitCheckBox() {
	if (ivjControlInhibitCheckBox == null) {
		try {
			ivjControlInhibitCheckBox = new javax.swing.JCheckBox();
			ivjControlInhibitCheckBox.setName("ControlInhibitCheckBox");
			ivjControlInhibitCheckBox.setSelected(false);
			ivjControlInhibitCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjControlInhibitCheckBox.setText("Control Inhibit");
			ivjControlInhibitCheckBox.setActionCommand("PhysicalPointOffsetCheckBox");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlInhibitCheckBox;
}
/**
 * Return the ControlPointOffsetLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getControlPointOffsetLabel() {
	if (ivjControlPointOffsetLabel == null) {
		try {
			ivjControlPointOffsetLabel = new javax.swing.JLabel();
			ivjControlPointOffsetLabel.setName("ControlPointOffsetLabel");
			ivjControlPointOffsetLabel.setText("Control Pt Offset:");
			ivjControlPointOffsetLabel.setMaximumSize(new java.awt.Dimension(128, 16));
			ivjControlPointOffsetLabel.setPreferredSize(new java.awt.Dimension(128, 16));
			ivjControlPointOffsetLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjControlPointOffsetLabel.setMinimumSize(new java.awt.Dimension(128, 16));
			ivjControlPointOffsetLabel.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlPointOffsetLabel;
}
/**
 * Return the ControlPointOffsetSpinner property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getControlPointOffsetSpinner() {
	if (ivjControlPointOffsetSpinner == null) {
		try {
			ivjControlPointOffsetSpinner = new com.klg.jclass.field.JCSpinField();
			ivjControlPointOffsetSpinner.setName("ControlPointOffsetSpinner");
			ivjControlPointOffsetSpinner.setPreferredSize(new java.awt.Dimension(55, 22));
			ivjControlPointOffsetSpinner.setBackground(java.awt.Color.white);
			ivjControlPointOffsetSpinner.setMinimumSize(new java.awt.Dimension(55, 22));
			ivjControlPointOffsetSpinner.setEnabled(false);
			// user code begin {1}
			ivjControlPointOffsetSpinner.setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(1), new Integer(1000000), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(1)), 
				new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(1)), new com.klg.jclass.field.JCInvalidInfo(true, com.klg.jclass.field.JCInvalidInfo.RESTORE_PREVIOUS, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlPointOffsetSpinner;
}
/**
 * Return the ControlSettingsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getControlSettingsPanel() {
	if (ivjControlSettingsPanel == null) {
		try {
			ivjControlSettingsPanel = new javax.swing.JPanel();
			ivjControlSettingsPanel.setName("ControlSettingsPanel");
			ivjControlSettingsPanel.setLayout(new java.awt.GridBagLayout());
			ivjControlSettingsPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
			ivjControlSettingsPanel.setPreferredSize(new java.awt.Dimension(390, 125));
			ivjControlSettingsPanel.setFont(new java.awt.Font("Arial", 1, 12));
			ivjControlSettingsPanel.setMinimumSize(new java.awt.Dimension(390, 125));

			java.awt.GridBagConstraints constraintsControlTypeLabel = new java.awt.GridBagConstraints();
			constraintsControlTypeLabel.gridx = 1; constraintsControlTypeLabel.gridy = 1;
			constraintsControlTypeLabel.insets = new java.awt.Insets(3, 8, 2, 0);
			getControlSettingsPanel().add(getControlTypeLabel(), constraintsControlTypeLabel);

			java.awt.GridBagConstraints constraintsControlPointOffsetLabel = new java.awt.GridBagConstraints();
			constraintsControlPointOffsetLabel.gridx = 4; constraintsControlPointOffsetLabel.gridy = 1;
			constraintsControlPointOffsetLabel.ipadx = -18;
			constraintsControlPointOffsetLabel.insets = new java.awt.Insets(3, 3, 9, 6);
			getControlSettingsPanel().add(getControlPointOffsetLabel(), constraintsControlPointOffsetLabel);

			java.awt.GridBagConstraints constraintsCloseTime1Label = new java.awt.GridBagConstraints();
			constraintsCloseTime1Label.gridx = 3; constraintsCloseTime1Label.gridy = 2;
			constraintsCloseTime1Label.gridwidth = 3;
			constraintsCloseTime1Label.ipadx = 54;
			constraintsCloseTime1Label.insets = new java.awt.Insets(3, 30, 6, 80);
			getControlSettingsPanel().add(getCloseTime1Label(), constraintsCloseTime1Label);

			java.awt.GridBagConstraints constraintsCloseTime2Label = new java.awt.GridBagConstraints();
			constraintsCloseTime2Label.gridx = 3; constraintsCloseTime2Label.gridy = 3;
			constraintsCloseTime2Label.gridwidth = 3;
			constraintsCloseTime2Label.ipadx = 54;
			constraintsCloseTime2Label.insets = new java.awt.Insets(1, 30, 11, 80);
			getControlSettingsPanel().add(getCloseTime2Label(), constraintsCloseTime2Label);

			java.awt.GridBagConstraints constraintsControlTypeComboBox = new java.awt.GridBagConstraints();
			constraintsControlTypeComboBox.gridx = 2; constraintsControlTypeComboBox.gridy = 1;
			constraintsControlTypeComboBox.gridwidth = 2;
			constraintsControlTypeComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsControlTypeComboBox.weightx = 1.0;
			constraintsControlTypeComboBox.ipadx = 25;
			constraintsControlTypeComboBox.insets = new java.awt.Insets(3, 1, 1, 2);
			getControlSettingsPanel().add(getControlTypeComboBox(), constraintsControlTypeComboBox);

			java.awt.GridBagConstraints constraintsControlInhibitCheckBox = new java.awt.GridBagConstraints();
			constraintsControlInhibitCheckBox.gridx = 1; constraintsControlInhibitCheckBox.gridy = 2;
			constraintsControlInhibitCheckBox.gridwidth = 2;
constraintsControlInhibitCheckBox.gridheight = 2;
			constraintsControlInhibitCheckBox.ipadx = 17;
			constraintsControlInhibitCheckBox.insets = new java.awt.Insets(4, 8, 22, 29);
			getControlSettingsPanel().add(getControlInhibitCheckBox(), constraintsControlInhibitCheckBox);

			java.awt.GridBagConstraints constraintsControlPointOffsetSpinner = new java.awt.GridBagConstraints();
			constraintsControlPointOffsetSpinner.gridx = 5; constraintsControlPointOffsetSpinner.gridy = 1;
			constraintsControlPointOffsetSpinner.ipadx = 4;
			constraintsControlPointOffsetSpinner.insets = new java.awt.Insets(3, 6, 3, 26);
			getControlSettingsPanel().add(getControlPointOffsetSpinner(), constraintsControlPointOffsetSpinner);

			java.awt.GridBagConstraints constraintsCloseTime1Spinner = new java.awt.GridBagConstraints();
			constraintsCloseTime1Spinner.gridx = 5; constraintsCloseTime1Spinner.gridy = 2;
			constraintsCloseTime1Spinner.ipadx = 4;
			constraintsCloseTime1Spinner.insets = new java.awt.Insets(2, 6, 1, 26);
			getControlSettingsPanel().add(getCloseTime1Spinner(), constraintsCloseTime1Spinner);

			java.awt.GridBagConstraints constraintsCloseTime2Spinner = new java.awt.GridBagConstraints();
			constraintsCloseTime2Spinner.gridx = 5; constraintsCloseTime2Spinner.gridy = 3;
			constraintsCloseTime2Spinner.ipadx = 4;
			constraintsCloseTime2Spinner.insets = new java.awt.Insets(1, 6, 5, 26);
			getControlSettingsPanel().add(getCloseTime2Spinner(), constraintsCloseTime2Spinner);

			java.awt.GridBagConstraints constraintsJPanelCmd = new java.awt.GridBagConstraints();
			constraintsJPanelCmd.gridx = 1; constraintsJPanelCmd.gridy = 4;
			constraintsJPanelCmd.gridwidth = 5;
			constraintsJPanelCmd.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelCmd.weightx = 1.0;
			constraintsJPanelCmd.weighty = 1.0;
			constraintsJPanelCmd.ipadx = 10;
			constraintsJPanelCmd.ipady = 45;
			constraintsJPanelCmd.insets = new java.awt.Insets(5, 9, 10, 8);
			getControlSettingsPanel().add(getJPanelCmd(), constraintsJPanelCmd);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlSettingsPanel;
}
/**
 * Return the ControlTypeComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getControlTypeComboBox() {
	if (ivjControlTypeComboBox == null) {
		try {
			ivjControlTypeComboBox = new javax.swing.JComboBox();
			ivjControlTypeComboBox.setName("ControlTypeComboBox");
			ivjControlTypeComboBox.setPreferredSize(new java.awt.Dimension(85, 24));
			ivjControlTypeComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjControlTypeComboBox.setMinimumSize(new java.awt.Dimension(85, 24));
			// user code begin {1}

			//Load default possibilites into control type combo box
			ivjControlTypeComboBox.addItem( PointTypes.getType( PointTypes.CONTROLTYPE_NONE) );
			ivjControlTypeComboBox.addItem( PointTypes.getType( PointTypes.CONTROLTYPE_LATCH) );
			ivjControlTypeComboBox.addItem( PointTypes.getType( PointTypes.CONTROLTYPE_NORMAL) );
			ivjControlTypeComboBox.addItem( PointTypes.getType( PointTypes.CONTROLTYPE_PSEUDO) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlTypeComboBox;
}
/**
 * Return the ControlTypeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getControlTypeLabel() {
	if (ivjControlTypeLabel == null) {
		try {
			ivjControlTypeLabel = new javax.swing.JLabel();
			ivjControlTypeLabel.setName("ControlTypeLabel");
			ivjControlTypeLabel.setText("Control Type:");
			ivjControlTypeLabel.setMaximumSize(new java.awt.Dimension(86, 23));
			ivjControlTypeLabel.setPreferredSize(new java.awt.Dimension(86, 23));
			ivjControlTypeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjControlTypeLabel.setMinimumSize(new java.awt.Dimension(86, 23));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlTypeLabel;
}
/**
 * Return the JCSpinFieldCmdHrs property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldCmdHrs() {
	if (ivjJCSpinFieldCmdHrs == null) {
		try {
			ivjJCSpinFieldCmdHrs = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldCmdHrs.setName("JCSpinFieldCmdHrs");
			ivjJCSpinFieldCmdHrs.setPreferredSize(new java.awt.Dimension(55, 22));
			ivjJCSpinFieldCmdHrs.setBackground(java.awt.Color.white);
			ivjJCSpinFieldCmdHrs.setMinimumSize(new java.awt.Dimension(55, 22));
			ivjJCSpinFieldCmdHrs.setEnabled(false);
			// user code begin {1}

			ivjJCSpinFieldCmdHrs.setDataProperties(
				new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(
					null, new Integer(0), new Integer(999999), null, true, null, new Integer(1), 
					"#####0.###;-######0.###", false, false, false, null, new Integer(0)), 
				new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
					new Integer(1)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), 
					new java.awt.Color(255, 255, 255, 255))));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldCmdHrs;
}
/**
 * Return the JCSpinFieldCmdSecs property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldCmdSecs() {
	if (ivjJCSpinFieldCmdSecs == null) {
		try {
			ivjJCSpinFieldCmdSecs = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldCmdSecs.setName("JCSpinFieldCmdSecs");
			ivjJCSpinFieldCmdSecs.setPreferredSize(new java.awt.Dimension(55, 22));
			ivjJCSpinFieldCmdSecs.setBackground(java.awt.Color.white);
			ivjJCSpinFieldCmdSecs.setMinimumSize(new java.awt.Dimension(55, 22));
			ivjJCSpinFieldCmdSecs.setEnabled(false);
			// user code begin {1}

			ivjJCSpinFieldCmdSecs.setDataProperties(
				new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(
					null, new Integer(0), new Integer(59), null, true, null, new Integer(1),
					"#####0.###;-######0.###", false, false, false, null, new Integer(0)), 
				new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
					new Integer(1)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), 
					new java.awt.Color(255, 255, 255, 255))));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldCmdSecs;
}
/**
 * Return the JLabelCmdTimeOut property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCmdTimeOut() {
	if (ivjJLabelCmdTimeOut == null) {
		try {
			ivjJLabelCmdTimeOut = new javax.swing.JLabel();
			ivjJLabelCmdTimeOut.setName("JLabelCmdTimeOut");
			ivjJLabelCmdTimeOut.setText("Command TimeOut:");
			ivjJLabelCmdTimeOut.setMaximumSize(new java.awt.Dimension(87, 16));
			ivjJLabelCmdTimeOut.setPreferredSize(new java.awt.Dimension(87, 16));
			ivjJLabelCmdTimeOut.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelCmdTimeOut.setMinimumSize(new java.awt.Dimension(87, 16));
			ivjJLabelCmdTimeOut.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCmdTimeOut;
}
/**
 * Return the JLabelControlOne property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlOne() {
	if (ivjJLabelControlOne == null) {
		try {
			ivjJLabelControlOne = new javax.swing.JLabel();
			ivjJLabelControlOne.setName("JLabelControlOne");
			ivjJLabelControlOne.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelControlOne.setText("Control One");
			ivjJLabelControlOne.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlOne;
}
/**
 * Return the JLabelControlZero property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlZero() {
	if (ivjJLabelControlZero == null) {
		try {
			ivjJLabelControlZero = new javax.swing.JLabel();
			ivjJLabelControlZero.setName("JLabelControlZero");
			ivjJLabelControlZero.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelControlZero.setText("Control Zero");
			ivjJLabelControlZero.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlZero;
}
/**
 * Return the JLabelHrs property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHrs() {
	if (ivjJLabelHrs == null) {
		try {
			ivjJLabelHrs = new javax.swing.JLabel();
			ivjJLabelHrs.setName("JLabelHrs");
			ivjJLabelHrs.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHrs.setText("(Hours)");
			ivjJLabelHrs.setEnabled(false);
			// user code begin {1}
         
         ivjJLabelHrs.setText("(min.)");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHrs;
}
/**
 * Return the JLabelSecs property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSecs() {
	if (ivjJLabelSecs == null) {
		try {
			ivjJLabelSecs = new javax.swing.JLabel();
			ivjJLabelSecs.setName("JLabelSecs");
			ivjJLabelSecs.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelSecs.setText("(Seconds)");
			ivjJLabelSecs.setEnabled(false);
			// user code begin {1}
         
         ivjJLabelSecs.setText("(sec.)");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSecs;
}
/**
 * Return the JPanelCmd property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelCmd() {
	if (ivjJPanelCmd == null) {
		try {
			ivjJPanelCmd = new javax.swing.JPanel();
			ivjJPanelCmd.setName("JPanelCmd");
			ivjJPanelCmd.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJPanelControlString = new java.awt.GridBagConstraints();
			constraintsJPanelControlString.gridx = 1; constraintsJPanelControlString.gridy = 1;
			constraintsJPanelControlString.gridwidth = 5;
			constraintsJPanelControlString.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelControlString.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJPanelControlString.weightx = 1.0;
			constraintsJPanelControlString.weighty = 1.0;
			constraintsJPanelControlString.ipadx = -15;
			constraintsJPanelControlString.ipady = -7;
			constraintsJPanelControlString.insets = new java.awt.Insets(2, 2, 6, 4);
			getJPanelCmd().add(getJPanelControlString(), constraintsJPanelControlString);

			java.awt.GridBagConstraints constraintsJLabelCmdTimeOut = new java.awt.GridBagConstraints();
			constraintsJLabelCmdTimeOut.gridx = 1; constraintsJLabelCmdTimeOut.gridy = 2;
			constraintsJLabelCmdTimeOut.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelCmdTimeOut.ipadx = 47;
			constraintsJLabelCmdTimeOut.insets = new java.awt.Insets(9, 2, 10, 3);
			getJPanelCmd().add(getJLabelCmdTimeOut(), constraintsJLabelCmdTimeOut);

			java.awt.GridBagConstraints constraintsJCSpinFieldCmdHrs = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldCmdHrs.gridx = 2; constraintsJCSpinFieldCmdHrs.gridy = 2;
			constraintsJCSpinFieldCmdHrs.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldCmdHrs.ipadx = 2;
			constraintsJCSpinFieldCmdHrs.insets = new java.awt.Insets(6, 4, 7, 1);
			getJPanelCmd().add(getJCSpinFieldCmdHrs(), constraintsJCSpinFieldCmdHrs);

			java.awt.GridBagConstraints constraintsJLabelHrs = new java.awt.GridBagConstraints();
			constraintsJLabelHrs.gridx = 3; constraintsJLabelHrs.gridy = 2;
			constraintsJLabelHrs.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelHrs.ipadx = 3;
			constraintsJLabelHrs.ipady = -2;
			constraintsJLabelHrs.insets = new java.awt.Insets(10, 0, 11, 3);
			getJPanelCmd().add(getJLabelHrs(), constraintsJLabelHrs);

			java.awt.GridBagConstraints constraintsJCSpinFieldCmdSecs = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldCmdSecs.gridx = 4; constraintsJCSpinFieldCmdSecs.gridy = 2;
			constraintsJCSpinFieldCmdSecs.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldCmdSecs.ipadx = 4;
			constraintsJCSpinFieldCmdSecs.insets = new java.awt.Insets(6, 4, 7, 2);
			getJPanelCmd().add(getJCSpinFieldCmdSecs(), constraintsJCSpinFieldCmdSecs);

			java.awt.GridBagConstraints constraintsJLabelSecs = new java.awt.GridBagConstraints();
			constraintsJLabelSecs.gridx = 5; constraintsJLabelSecs.gridy = 2;
			constraintsJLabelSecs.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSecs.ipadx = 8;
			constraintsJLabelSecs.ipady = -2;
			constraintsJLabelSecs.insets = new java.awt.Insets(10, 0, 11, 0);
			getJPanelCmd().add(getJLabelSecs(), constraintsJLabelSecs);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelCmd;
}
/**
 * Return the JPanelControlString property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelControlString() {
	if (ivjJPanelControlString == null) {
		try {
			ivjJPanelControlString = new javax.swing.JPanel();
			ivjJPanelControlString.setName("JPanelControlString");
			ivjJPanelControlString.setLayout(new java.awt.GridBagLayout());
			ivjJPanelControlString.setFont(new java.awt.Font("dialog", 0, 14));

			java.awt.GridBagConstraints constraintsJLabelControlZero = new java.awt.GridBagConstraints();
			constraintsJLabelControlZero.gridx = 1; constraintsJLabelControlZero.gridy = 1;
			constraintsJLabelControlZero.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelControlZero.ipadx = 10;
			constraintsJLabelControlZero.ipady = 7;
			constraintsJLabelControlZero.insets = new java.awt.Insets(0, 11, 0, 6);
			getJPanelControlString().add(getJLabelControlZero(), constraintsJLabelControlZero);

			java.awt.GridBagConstraints constraintsJLabelControlOne = new java.awt.GridBagConstraints();
			constraintsJLabelControlOne.gridx = 1; constraintsJLabelControlOne.gridy = 2;
			constraintsJLabelControlOne.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelControlOne.ipadx = 12;
			constraintsJLabelControlOne.ipady = 7;
			constraintsJLabelControlOne.insets = new java.awt.Insets(0, 11, 6, 6);
			getJPanelControlString().add(getJLabelControlOne(), constraintsJLabelControlOne);

			java.awt.GridBagConstraints constraintsJTextFieldControlOne = new java.awt.GridBagConstraints();
			constraintsJTextFieldControlOne.gridx = 2; constraintsJTextFieldControlOne.gridy = 2;
			constraintsJTextFieldControlOne.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldControlOne.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldControlOne.weightx = 1.0;
			constraintsJTextFieldControlOne.ipadx = 273;
			constraintsJTextFieldControlOne.insets = new java.awt.Insets(3, 7, 6, 20);
			getJPanelControlString().add(getJTextFieldControlOne(), constraintsJTextFieldControlOne);

			java.awt.GridBagConstraints constraintsJTextFieldControlZero = new java.awt.GridBagConstraints();
			constraintsJTextFieldControlZero.gridx = 2; constraintsJTextFieldControlZero.gridy = 1;
			constraintsJTextFieldControlZero.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldControlZero.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldControlZero.weightx = 1.0;
			constraintsJTextFieldControlZero.ipadx = 273;
			constraintsJTextFieldControlZero.insets = new java.awt.Insets(0, 7, 2, 20);
			getJPanelControlString().add(getJTextFieldControlZero(), constraintsJTextFieldControlZero);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelControlString;
}
/**
 * Return the JTextFieldControlOne property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldControlOne() {
	if (ivjJTextFieldControlOne == null) {
		try {
			ivjJTextFieldControlOne = new javax.swing.JTextField();
			ivjJTextFieldControlOne.setName("JTextFieldControlOne");
			ivjJTextFieldControlOne.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldControlOne;
}
/**
 * Return the JTextFieldControlZero property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldControlZero() {
	if (ivjJTextFieldControlZero == null) {
		try {
			ivjJTextFieldControlZero = new javax.swing.JTextField();
			ivjJTextFieldControlZero.setName("JTextFieldControlZero");
			ivjJTextFieldControlZero.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldControlZero;
}
/**
 * Return the PhysicalPointOffsetCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getPhysicalPointOffsetCheckBox() {
	if (ivjPhysicalPointOffsetCheckBox == null) {
		try {
			ivjPhysicalPointOffsetCheckBox = new javax.swing.JCheckBox();
			ivjPhysicalPointOffsetCheckBox.setName("PhysicalPointOffsetCheckBox");
			ivjPhysicalPointOffsetCheckBox.setText("Physical Point Offset");
			ivjPhysicalPointOffsetCheckBox.setMaximumSize(new java.awt.Dimension(185, 27));
			ivjPhysicalPointOffsetCheckBox.setActionCommand("PhysicalPointOffsetCheckBox");
			ivjPhysicalPointOffsetCheckBox.setSelected(true);
			ivjPhysicalPointOffsetCheckBox.setPreferredSize(new java.awt.Dimension(185, 27));
			ivjPhysicalPointOffsetCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPhysicalPointOffsetCheckBox.setMinimumSize(new java.awt.Dimension(185, 27));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhysicalPointOffsetCheckBox;
}
/**
 * Return the PointOffsetLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPointOffsetLabel() {
	if (ivjPointOffsetLabel == null) {
		try {
			ivjPointOffsetLabel = new javax.swing.JLabel();
			ivjPointOffsetLabel.setName("PointOffsetLabel");
			ivjPointOffsetLabel.setText("Point Offset:");
			ivjPointOffsetLabel.setMaximumSize(new java.awt.Dimension(78, 16));
			ivjPointOffsetLabel.setPreferredSize(new java.awt.Dimension(78, 16));
			ivjPointOffsetLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPointOffsetLabel.setMinimumSize(new java.awt.Dimension(78, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPointOffsetLabel;
}
/**
 * Return the PointOffsetSpinner property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getPointOffsetSpinner() {
	if (ivjPointOffsetSpinner == null) {
		try {
			ivjPointOffsetSpinner = new com.klg.jclass.field.JCSpinField();
			ivjPointOffsetSpinner.setName("PointOffsetSpinner");
			ivjPointOffsetSpinner.setPreferredSize(new java.awt.Dimension(55, 22));
			ivjPointOffsetSpinner.setBackground(java.awt.Color.white);
			ivjPointOffsetSpinner.setMinimumSize(new java.awt.Dimension(55, 22));
			// user code begin {1}
			
			ivjPointOffsetSpinner.setDataProperties(
				new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(
					null, new Integer(0), new Integer(90000), null, true, null, new Integer(1), 
					"#####0.###;-#####0.###", false, false, false, null, new Integer(0)), 
				new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(1)), 
				new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255),
					new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPointOffsetSpinner;
}
/**
 * Return the InvalidPointOffsetLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getUsedPointOffsetLabel() {
	if (ivjUsedPointOffsetLabel == null) {
		try {
			ivjUsedPointOffsetLabel = new javax.swing.JLabel();
			ivjUsedPointOffsetLabel.setName("UsedPointOffsetLabel");
			ivjUsedPointOffsetLabel.setText("Offset Used");
			ivjUsedPointOffsetLabel.setMaximumSize(new java.awt.Dimension(180, 20));
			ivjUsedPointOffsetLabel.setPreferredSize(new java.awt.Dimension(180, 20));
			ivjUsedPointOffsetLabel.setFont(new java.awt.Font("dialog.bold", 1, 14));
			ivjUsedPointOffsetLabel.setMinimumSize(new java.awt.Dimension(180, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUsedPointOffsetLabel;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) {
	//Assume that commonObject is an instance of com.cannontech.database.data.point.StatusPoint
	com.cannontech.database.data.point.StatusPoint point = (com.cannontech.database.data.point.StatusPoint) val;

	Integer pointOffset = null;
	Object pointOffsetSpinVal = getPointOffsetSpinner().getValue();
	if( pointOffsetSpinVal instanceof Long )
		pointOffset = new Integer( ((Long)pointOffsetSpinVal).intValue() );
	else if( pointOffsetSpinVal instanceof Integer )
		pointOffset = new Integer( ((Integer)pointOffsetSpinVal).intValue() );


	if ( (getUsedPointOffsetLabel().getText()) == "" )
		point.getPoint().setPointOffset( pointOffset );
	else
		point.getPoint().setPointOffset( null );


	//get all the values in the Control Settings JPanel
	String controlType = (String) getControlTypeComboBox().getSelectedItem();
	Integer controlPointOffset = null;
	Object controlPointOffsetSpinVal = getControlPointOffsetSpinner().getValue();
	if( controlPointOffsetSpinVal instanceof Long )
		controlPointOffset = new Integer( ((Long)controlPointOffsetSpinVal).intValue() );
	else if( controlPointOffsetSpinVal instanceof Integer )
		controlPointOffset = new Integer( ((Integer)controlPointOffsetSpinVal).intValue() );

	Integer closeTime1 = null;
	Object closeTime1SpinVal = getCloseTime1Spinner().getValue();
	if( closeTime1SpinVal instanceof Long )
		closeTime1 = new Integer( ((Long)closeTime1SpinVal).intValue() );
	else if( closeTime1SpinVal instanceof Integer )
		closeTime1 = new Integer( ((Integer)closeTime1SpinVal).intValue() );

	Integer closeTime2 = null;
	Object closeTime2SpinVal = getCloseTime1Spinner().getValue();
	if( closeTime2SpinVal instanceof Long )
		closeTime2 = new Integer( ((Long)closeTime2SpinVal).intValue() );
	else if( closeTime2SpinVal instanceof Integer )
		closeTime2 = new Integer( ((Integer)closeTime2SpinVal).intValue() );

	point.getPointStatus().setControlType( controlType );
	if ( getControlInhibitCheckBox().isSelected() )
		point.getPointStatus().setControlInhibit( CtiUtilities.getTrueCharacter() );
	else
		point.getPointStatus().setControlInhibit( CtiUtilities.getFalseCharacter() );

	if( (controlType.equals(com.cannontech.database.data.point.PointTypes.getType(com.cannontech.database.data.point.PointTypes.CONTROLTYPE_LATCH))) ||
			(controlType.equals(com.cannontech.database.data.point.PointTypes.getType(com.cannontech.database.data.point.PointTypes.CONTROLTYPE_NORMAL))) )
	{
		point.getPointStatus().setControlOffset( controlPointOffset );
		point.getPointStatus().setCloseTime1( closeTime1 );
		point.getPointStatus().setCloseTime2( closeTime2 );
	}

	if( getJTextFieldControlOne().getText() != null
		 && getJTextFieldControlOne().getText().length() > 0 )
		point.getPointStatus().setStateOneControl( getJTextFieldControlOne().getText() );
	else
		point.getPointStatus().setStateOneControl(" ");
	
	if( getJTextFieldControlZero().getText() != null
		 && getJTextFieldControlZero().getText().length() > 0 )
		point.getPointStatus().setStateZeroControl( getJTextFieldControlZero().getText() );
	else
		point.getPointStatus().setStateZeroControl(" ");

/*	if (pointOffset.intValue() == 0)
		point.getPoint().setPseudoFlag( new Character('P') );
	else
		point.getPoint().setPseudoFlag( new Character('R') );
*/

	Integer cmdTimeOut = new Integer( (((Number)getJCSpinFieldCmdHrs().getValue()).intValue() * 60) + 
						((Number)getJCSpinFieldCmdSecs().getValue()).intValue() );
	point.getPointStatus().setCommandTimeOut( cmdTimeOut )	;

	return point;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getPointOffsetSpinner().addValueListener(this);
	getCloseTime1Spinner().addValueListener(this);
	getCloseTime2Spinner().addValueListener(this);
	getControlPointOffsetSpinner().addValueListener(this);
	getJCSpinFieldCmdHrs().addValueListener(this);
	getJCSpinFieldCmdSecs().addValueListener(this);

	// user code end
	getPhysicalPointOffsetCheckBox().addItemListener(ivjEventHandler);
	getControlTypeComboBox().addActionListener(ivjEventHandler);
	getControlInhibitCheckBox().addActionListener(ivjEventHandler);
	getJTextFieldControlZero().addCaretListener(ivjEventHandler);
	getJTextFieldControlOne().addCaretListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("PointStatusPhysicalSettingsEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(440, 318);

		java.awt.GridBagConstraints constraintsPointOffsetLabel = new java.awt.GridBagConstraints();
		constraintsPointOffsetLabel.gridx = 1; constraintsPointOffsetLabel.gridy = 2;
		constraintsPointOffsetLabel.ipadx = 11;
		constraintsPointOffsetLabel.insets = new java.awt.Insets(9, 16, 6, 58);
		add(getPointOffsetLabel(), constraintsPointOffsetLabel);

		java.awt.GridBagConstraints constraintsPointOffsetSpinner = new java.awt.GridBagConstraints();
		constraintsPointOffsetSpinner.gridx = 1; constraintsPointOffsetSpinner.gridy = 2;
		constraintsPointOffsetSpinner.insets = new java.awt.Insets(5, 101, 4, 7);
		add(getPointOffsetSpinner(), constraintsPointOffsetSpinner);

		java.awt.GridBagConstraints constraintsPhysicalPointOffsetCheckBox = new java.awt.GridBagConstraints();
		constraintsPhysicalPointOffsetCheckBox.gridx = 1; constraintsPhysicalPointOffsetCheckBox.gridy = 1;
		constraintsPhysicalPointOffsetCheckBox.gridwidth = 2;
		constraintsPhysicalPointOffsetCheckBox.ipadx = 12;
		constraintsPhysicalPointOffsetCheckBox.insets = new java.awt.Insets(12, 16, 4, 227);
		add(getPhysicalPointOffsetCheckBox(), constraintsPhysicalPointOffsetCheckBox);

		java.awt.GridBagConstraints constraintsUsedPointOffsetLabel = new java.awt.GridBagConstraints();
		constraintsUsedPointOffsetLabel.gridx = 2; constraintsUsedPointOffsetLabel.gridy = 2;
		constraintsUsedPointOffsetLabel.insets = new java.awt.Insets(6, 7, 5, 90);
		add(getUsedPointOffsetLabel(), constraintsUsedPointOffsetLabel);

		java.awt.GridBagConstraints constraintsControlSettingsPanel = new java.awt.GridBagConstraints();
		constraintsControlSettingsPanel.gridx = 1; constraintsControlSettingsPanel.gridy = 3;
		constraintsControlSettingsPanel.gridwidth = 2;
		constraintsControlSettingsPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsControlSettingsPanel.weightx = 1.0;
		constraintsControlSettingsPanel.weighty = 1.0;
		constraintsControlSettingsPanel.ipadx = 27;
		constraintsControlSettingsPanel.ipady = 104;
		constraintsControlSettingsPanel.insets = new java.awt.Insets(5, 16, 10, 7);
		add(getControlSettingsPanel(), constraintsControlSettingsPanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	// user code end
}
/**
 * Insert the method's description here.
 * Creation date: (5/1/2001 9:11:36 AM)
 * @return boolean
 */
public boolean isInputValid() 
{
	return true;
}
/**
 * Method to handle events for the ItemListener interface.
 * @param e java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void itemStateChanged(java.awt.event.ItemEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getPhysicalPointOffsetCheckBox()) 
		connEtoC7(e);
	// user code begin {2}
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame;
		try {
			Class aFrameClass = Class.forName("com.ibm.uvm.abt.edit.TestFrame");
			frame = (java.awt.Frame)aFrameClass.newInstance();
		} catch (java.lang.Throwable ivjExc) {
			frame = new java.awt.Frame();
		}
		PointStatusPhysicalSettingsEditorPanel aPointStatusPhysicalSettingsEditorPanel;
		aPointStatusPhysicalSettingsEditorPanel = new PointStatusPhysicalSettingsEditorPanel();
		frame.add("Center", aPointStatusPhysicalSettingsEditorPanel);
		frame.setSize(aPointStatusPhysicalSettingsEditorPanel.getSize());
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val) 
{	
	//Assume defaultObject is an instance of com.cannontech.database.data.point.StatusPoint
	com.cannontech.database.data.point.StatusPoint point = (com.cannontech.database.data.point.StatusPoint) val;

	getUsedPointOffsetLabel().setText("");
	usedPointOffsetsVector = new java.util.Vector();

	Integer pointOffset = point.getPoint().getPointOffset();

	if( pointOffset != null )
		getPointOffsetSpinner().setValue( pointOffset );

	if( pointOffset != null )
	{
		if (pointOffset.intValue() == 0)
			getPhysicalPointOffsetCheckBox().setSelected(false);
		else
			getPhysicalPointOffsetCheckBox().setSelected(true);
		getPointOffsetSpinner().setValue( pointOffset );
	}
	else
	{
		getPhysicalPointOffsetCheckBox().setSelected(false);
		getPointOffsetSpinner().setValue( new Integer(0) );
	}

	com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List points = cache.getAllPoints();
		java.util.Collections.sort(points, com.cannontech.database.data.lite.LiteComparators.litePointDeviceIDComparator);
		int pointDeviceID = point.getPoint().getPaoID().intValue();
		int pointPointType = PointTypes.getType(point.getPoint().getPointType());
		int pointPointOffset = point.getPoint().getPointOffset().intValue();
		com.cannontech.database.data.lite.LitePoint litePoint = null;
		for (int i=0; i<points.size(); i++)
		{
			litePoint = ((com.cannontech.database.data.lite.LitePoint)points.get(i));
			if( pointDeviceID == litePoint.getPaobjectID() && pointPointType == litePoint.getPointType() )
			{
				if( (pointPointOffset != litePoint.getPointOffset()) && (pointPointOffset > 0) )
					usedPointOffsetsVector.addElement(litePoint);
			}
			else if( litePoint.getPaobjectID() > pointDeviceID )
				break;
		}
	}

	//do all the setting for the values in the Control Settings JPanel
	String controlType = point.getPointStatus().getControlType();
	Integer controlPointOffset = point.getPointStatus().getControlOffset();
	Integer closeTime1 = point.getPointStatus().getCloseTime1();
	Integer closeTime2 = point.getPointStatus().getCloseTime2();

	CtiUtilities.setSelectedInComboBox( getControlTypeComboBox(), controlType );

	getControlPointOffsetSpinner().setValue( controlPointOffset );
	getCloseTime1Spinner().setValue( closeTime1 );
	getCloseTime2Spinner().setValue( closeTime2 );

	getJTextFieldControlZero().setText( point.getPointStatus().getStateZeroControl() );
	getJTextFieldControlOne().setText( point.getPointStatus().getStateOneControl() );

	getControlInhibitCheckBox().setSelected( point.getPointStatus().getControlInhibit().equals(CtiUtilities.getTrueCharacter()) );

	//set the text for the state zero label and state one label the their proper state text
	//Load all the state groups
	int stateGroupID = point.getPoint().getStateGroupID().intValue();
	cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List allStateGroups = cache.getAllStateGroups();

		//Load the state table
		for(int i=0;i<allStateGroups.size();i++)
		{
			if( ((com.cannontech.database.data.lite.LiteStateGroup)allStateGroups.get(i)).getStateGroupID() == stateGroupID )
			{
				java.util.List statesList = ((com.cannontech.database.data.lite.LiteStateGroup)allStateGroups.get(i)).getStatesList();
				
				//Select the appropriate rawstate
				int currentRawState = 0;
				for( int y = 0; y < statesList.size(); y++ )
				{
					if( ((com.cannontech.database.data.lite.LiteState)statesList.get(y)).getStateRawState() == 0 )
						getJLabelControlZero().setText( ((com.cannontech.database.data.lite.LiteState)statesList.get(y)).getStateText() );
						
					if( ((com.cannontech.database.data.lite.LiteState)statesList.get(y)).getStateRawState() == 1 )
						getJLabelControlOne().setText( ((com.cannontech.database.data.lite.LiteState)statesList.get(y)).getStateText() );
				}
				
				break;
			}
		}
	}

	
	Integer cmdTimeOut = point.getPointStatus().getCommandTimeOut();
	if( cmdTimeOut != null )
	{
		getJCSpinFieldCmdHrs().setValue( new Integer(cmdTimeOut.intValue() / 60) );
		getJCSpinFieldCmdSecs().setValue( new Integer(cmdTimeOut.intValue() % 60) );
	}

}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	fireInputUpdate();
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
}

package com.cannontech.dbeditor.editor.point;
/**
 * This type was created in VisualAge.
 */

import java.util.List;

import com.cannontech.common.util.CtiUtilities;
import com.cannontech.core.dao.DaoFactory;
import com.cannontech.database.data.lite.LiteUnitMeasure;
import com.cannontech.database.data.point.PointTypes;

public class AccumulatorBasePanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener, java.awt.event.ActionListener 
{
	private javax.swing.JComboBox ivjUnitOfMeasureComboBox = null;
	private javax.swing.JLabel ivjUnitOfMeasureLabel = null;
	private javax.swing.JComboBox ivjArchiveIntervalComboBox = null;
	private javax.swing.JLabel ivjArchiveIntervalLabel = null;
	private javax.swing.JComboBox ivjArchiveTypeComboBox = null;
	private javax.swing.JLabel ivjArchiveTypeLabel = null;
	private com.klg.jclass.field.JCSpinField ivjDecimalPlacesSpinner = null;
	private javax.swing.JLabel ivjJLabelDecimalPositons = null;
	private javax.swing.JPanel ivjJPanelArchive = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public AccumulatorBasePanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getUnitOfMeasureComboBox()) 
		connEtoC2(e);
	if (e.getSource() == getArchiveTypeComboBox()) 
		connEtoC3(e);
	if (e.getSource() == getArchiveIntervalComboBox()) 
		connEtoC4(e);
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  (JRadioButton1.action.actionPerformed(java.awt.event.ActionEvent) --> AccumulatorBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (UnitOfMeasureComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> AccumulatorBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (ArchiveTypeComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> AccumulatorBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		if( ((String)getArchiveTypeComboBox().getSelectedItem()).equalsIgnoreCase(PointTypes.ARCHIVE_NONE) ||
				((String)getArchiveTypeComboBox().getSelectedItem()).equalsIgnoreCase(PointTypes.ARCHIVE_ON_CHANGE) ||
				((String)getArchiveTypeComboBox().getSelectedItem()).equalsIgnoreCase(PointTypes.ARCHIVE_ON_UPDATE) )
		{
			getArchiveIntervalLabel().setEnabled(false);
			getArchiveIntervalComboBox().setEnabled(false);
		}
		else
		{
			getArchiveIntervalLabel().setEnabled(true);
			getArchiveIntervalComboBox().setEnabled(true);
			getArchiveIntervalComboBox().setSelectedItem("5 minute");
			
			if("On Timer Or Update".equalsIgnoreCase(((String)getArchiveTypeComboBox().getSelectedItem())))
				getArchiveIntervalComboBox().setSelectedItem("Daily");
		}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (ArchiveIntervalComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> AccumulatorBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (JRadioButton2.action.actionPerformed(java.awt.event.ActionEvent) --> AccumulatorBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * Return the ArchiveIntervalComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getArchiveIntervalComboBox() {
	if (ivjArchiveIntervalComboBox == null) {
		try {
			ivjArchiveIntervalComboBox = new javax.swing.JComboBox();
			ivjArchiveIntervalComboBox.setName("ArchiveIntervalComboBox");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjArchiveIntervalComboBox;
}


/**
 * Return the ArchiveIntervalLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getArchiveIntervalLabel() {
	if (ivjArchiveIntervalLabel == null) {
		try {
			ivjArchiveIntervalLabel = new javax.swing.JLabel();
			ivjArchiveIntervalLabel.setName("ArchiveIntervalLabel");
			ivjArchiveIntervalLabel.setText("Archive Interval:");
			ivjArchiveIntervalLabel.setMaximumSize(new java.awt.Dimension(78, 16));
			ivjArchiveIntervalLabel.setPreferredSize(new java.awt.Dimension(78, 16));
			ivjArchiveIntervalLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjArchiveIntervalLabel.setMinimumSize(new java.awt.Dimension(78, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjArchiveIntervalLabel;
}


/**
 * Return the ArchiveTypeComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getArchiveTypeComboBox() {
	if (ivjArchiveTypeComboBox == null) {
		try {
			ivjArchiveTypeComboBox = new javax.swing.JComboBox();
			ivjArchiveTypeComboBox.setName("ArchiveTypeComboBox");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjArchiveTypeComboBox;
}


/**
 * Return the ArchiveTypeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getArchiveTypeLabel() {
	if (ivjArchiveTypeLabel == null) {
		try {
			ivjArchiveTypeLabel = new javax.swing.JLabel();
			ivjArchiveTypeLabel.setName("ArchiveTypeLabel");
			ivjArchiveTypeLabel.setText("Data Archive Type:");
			ivjArchiveTypeLabel.setMaximumSize(new java.awt.Dimension(78, 16));
			ivjArchiveTypeLabel.setPreferredSize(new java.awt.Dimension(78, 16));
			ivjArchiveTypeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjArchiveTypeLabel.setMinimumSize(new java.awt.Dimension(78, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjArchiveTypeLabel;
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GD0D0A2AEGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFC8BF4D44711283041165732C3DE480B48A13B0490AFCE48C6CE481ACDF8D912109759418AC96498FBD9AFF108232CC9166C629362E03BB57A5B7A0290328DE640328D36AC89FD50478A208FA019818674C1181F2EE62EB4832319514C15B482812F2ABF775E995D51AF8F1F4C2138372B7AD355DDDDDDDD5DD7A4FF577C14C4D3BEA109A9047F2A938909F282467D506784AE3DACAE0D68FE3B8172C8
	22A5991E05C0DB969D1716CBFABEC807F4B124775E9F17369D5E37123E8FB6DC0417B06D44826DABCF3E9BB1FEBB6F8C0BF652E87A8F1ECCF8E68314812E9DE0FE99361F61AD6478G243379BBC22209108B7BB14F4541C29DFE9D4FD78634E6GD20EF90A3CBBB8FDA160B04FB2F82E5A4F72A640B303F2B72B2E06673B7069C5E463234526ACECCBD73F0016F2D656451FE63204F6C492F9327B90BC6B2DD77B8E5ABC7DA5B6496D7638955966A8317748F62762711570075763F4ABF5F58DB65BE07F20CB82D4
	2364172D12DBF611B5146FBB8753E91D40B7249D95087B73A07615995EEBG2C9502771FE655F35E66DCDDC456FEE9D7D85E97D7B01ED7D5E83C2FF6DDCE0928447ACFF8B3F939DCC837GB0DEBE6B953C2C28943C7C110E5BE6C867D7452595D7897CFADAC7B324AFGA8D502473F3CABF86C3A7EB05974A92FA9A78C0FD1D50C37A5D59A0F164B17D3DE237A720DG0E798620659FG5D8430G38G22G5E20FA5ABF7C9EBC9BFA14A6CFFF3F475D6075B63A6C3E939E3B6C02F768769E05634E48B60F4FCE88
	53454841E283FE84ACBC902C0788CC3633C4684E62B37FC4928E8E18D28CE4DB72F809E9A92FE36581CD365CEA6CB77F90765BFA40E3B99CBF063F03625B2BB5BC9B2BC40A47F4GE86B2AC5BFF7E58BDEAC498BC86E7E5326B483DE223FFF54E42DE1BCB8EAB4DED89FC7DD43BE1E83789800D80035G24B6AE4DDCAB7A7861610A097A3895F45F6716DCED03BDDE4927B48EBADDF659477B3A4DBBDEDF9B81ABA7CD399C6B17C5957AB1DA73CD2BE13F2CD9D4E52A2FE57D51DE2B758BEB7B73E15BD6EA476AC6
	36BA06D7691C082CE5E318226207A8FE1E8E4F4676C5BA37B09D83347CBA40517C5D83088F54317C2F2A7538A9BEDA07E7757CB72D9F53CB0136634338B4B63E6F0D22CD0C0074BC00A5GAB8156832457C33EFAB14626C069A46711D5B73E2C6CF782857014830ACFEAF57B9549ED13BBA51FD36AF149FE42732C88E03F768415FB044EEF9B34F1CCF64BBEC9F1FA5CD03B54AF03B279D91E1F8572B00FCF2654F6E73F8C8D74FB0928772940D6F83AA43F526135CB0A2C65E074E7822893C3D2A7548895E05EFA
	6C2FFF20B6379E5E3B6AC5DF1D3D013898C8472A7DF2F1E48BBC0F03F24B2E3A3AE6278D5910FCA3C2C7C706D006B510FFA3C060AFF1E91B81E69E0CCB4BBCA466696F3B04BEB6E7FD0D94BFFE4AD09F29CDBF44F4EB7121D0FD0C246D4483FEA3C07E613834CA00F6G6530D8DF53063A8D6AC4FE103709664E9A4E3F60FD7C393947302D8C2E4B933515446BC1FD4D9AA79F9B179F5EC45D1E83F246G2CBAAC46A6FA444CF49697D4212527FC20E032DD9BA916773357F08D1207E43752ACFBE5379DDE7CDCC7
	66DD4B50743757236A56820AC7FB56848A66D7710B2E65B1BC54211F8D029EC3691222781CBD030A5CA6AB0A535D2715DFCAF9718719CABF1775C737D056841011B4001EB688D99B2EEF556921456339BA68ED4799467579A13AEE97C17E7A86218F8394578DE99CDB069B25B84C932166CB72F671711F0A2D8D87585ED8FD59C15B180CEECC86128CF532F7A01F53F6826C62788C152ED07AFC60AF96E083C0E1E3DC5A61C6518F1BA80F7A7AC5794970A45A9CFF5E648D043611416741E45AC861750423B3DD29
	9C8D2F6B9F0E9A6BFA4328312E9F9B9DDF17CF0D9A69B223F50EA23F1EE137EEEE1C9FC5FBEA73385DB21D20EA91427C6A5F37239CCE37D3B96B347749CA1B731ACC486CC65471FF26B65B816F230D42368E3FA5ECEB51358749724B6F997AE351DFEEB545B772FDC023E6DB99CF97EE601C13DDF2BFF4D413E7502DB0FC8FDD8FB85E1FC4F109091837F1D0D1BC6EE3BE4F20F7BF43FF6FF8G6B5C5B811C1F6ABDA1CB7EC11F8CEBE90F275193A816282CA56CE115FD3D9EDF3FEC5FFBC59A12CA24E125040ED5
	C983A59F4177FD668FBEB8E8B65AB39477BAFDF22B5BBB48973C3D7BBA77F19EFE1BBECCF9E870599C4EA139FD447B49F1D0C9988F0F16DF5773C07D42A149750971D1457978D64388652359A9394E48129D14768C7C6FE1A3F73B59286073FBABF9B10D75C7335CAF396D1FBCA715FCDDF901205E26B7014F87D059A4561527EFA0DD2CABFC71EC7238DCECFA82EDF6934E3D6F8E656B661325096D5FC761496879577474551C1E2D16BFBC815DB581BDFA827A0A30F4A6670FEF66221D128786E5F0CFF161BCAE
	0F889F73661690DA27649A54FC5727EE22FDF66956DC06FF6C16315D7879AD0CFBDCD56BFF62D6AAC19F1455496CDC0C04F5FAFD4EFEF0D1500960F10ED82FBE4ED1548CBE9948E147A7GAB1B008199E224812CAF16FB75FDB11B57016F6DC7107E60000813AC83DABC40C61E277208BEDF3FCF641B8F6925G2B0F98655B6F97798A0F4625159D8D176F57EABEAB64F1GC49EB54A7720A2724582FD2DC1BEF28C73BD2646CDCAD55CBA0A7BB9AC121FCB967B4193397AF84F624F3DEC38C6A0B49FE375F79D8B
	5DA7171A305EG60A30F0939F31A68FD32863F5FE3F352ED8A578F1228DFBF98AEA57195F842C475431E59AE87040E3D1A083C62BE0623391E7C36E08F993BAFBBC2C3CB6A665B06931545EF1E9F42B651C718F7CC2C11B70E6AE3C64BF22ACD2F0611BF1E4B3DD1A77F3ACB17D398AFDFFD7FAF937252B4CC0DD43B278936F5ADB0E51A54253E53A98F2BF24D2DC39BE994BF33514ACB7A861DA5030A93B7DD12A2D12B260F19158F201CA8DFE50B08C74D5E057351856919G73DA44FCF931E427E88B4DEA2044
	BF8CC6382ECE370A93310F7E5900580FAF01726BDB04FDDB50221FD3C52D4C4F3640135979DADFB9BC27EE4CC5FF2C58370569C5088197BA3CE06BE15E764AFFDAC06AEF959A4654A2F376183ADB5958C536EAE3387227AF1AAE24F773585F7F76899963A1CF66C7C2466D5521B2B6834D7111107145E94B485A7D58AF5A9D05BA17286DE6679A353B9E00154BD6C4B9F2BCAE2D6638A8F761263E1C977073G169F977C8EAAFF9D3FBFD35B0D07BAB3AD225D3B6B0C5AED360879F636DCEFEF162FBD90565EF4D9
	F8FC5992EAEF36A623FEC782FE1EC5581B3B9273F476668C4CAA495D872B116A771BD0EED8F7F83A0636CB579DA2769FAF8C054635E2AC5AFEED056EFDB5FFE77CD8D3D0667500CBBF9117E686288168BAA1F87BD75304B142A301F1E2045583022F408956EE54890D1779703E64C4703E124543124DB8C631A7D8BCACC34567D17CBA9D1E6BBE3591F41CCE423AFAD26C7DD68F0476CB6C496076561DB45A57BEBB26DCC9C8BA7DD4F0B9B65F7BDCEF985A240F04274C6D5C13AD424E19CF09B855832938BEF6C1
	DA810882D8843092A081A053AA46A4BB4948DE870FC9B8E32D45B4181C73FC536B1F2F0CA9975ABF455660F24C8FFA74005E8FEA36B2FB6B006728D51CD51C2C966B7F9C2B9847EE7F7478F40FA9974A674A90BE998FC7F2858F6BD49E7215697130E7CC39D09EF61CB652250246B70DF5C9374F907D7A272C50FE2D04BA3BGDC27C53FFE662670A1E61ED66747B4E5FAF6C219161DB66A576F56A18F6827441F96FA7FEC9A62B24F409E660C50712BC998BF94B6510AE7EDC4584342E4743BBDBEE71F53ADF0BB
	A94E66715120840B1D658D5373CF28538240F0FBC7906705F4240A7BB545AD0674F2357D2E147031164BA9463196B945B856F2B5E57C3822BFA5DCAC0671F7127AC42B01370DAA4F656D08CBEF03BEEB93381CCEA15BE195D7F696F1F6C80F3609B1FF450CFB2659100E81088758205236D3DAFABB5BBF60FADD296A4A3CDDA246A5G4B052EFDFA184D69B18679625B0C746ADBE35A18A8CEA762EDC6B14850185ACE1A7F11029CBA9EFE3F6C270692BDD1CE7B0D320D984431CECA7DB291FB7F9CDF864FF3C471
	B4152B3CBF5DA26644DE683F7A76E0792C10360760F8DCB9B53C2EBD1CEA2CEB7FA79567075FB3683349217A34A235D025E9163FD5117BD18C3E472565954957A70F5147F8DA1E5142157F7754F0BA4B7A6867C1FDD4C104CD7B1FFDD83701CD231BGE6A3CC5542CE855A459EE0D68E2E6FB1100E85D85BAEF4322DFA3C3344CD6DE3750E7177B93F1E3FCAF58CBF4A9D2F3E4C0EF0759DD774756DA742AEFFB046AE63FAE706FAAABB04DD5E1FADFC81CB0710774BB4F6B9935273G16F488F923EF6A79DB4979
	D94B1F9B437217B328672FCA157787F57A7A52BBD9799D7CD9461F4D706C6A5447DD1E237ED7C0CD7F97CD0F28636C6946FDCF1FCF72BA1CB6FF336C37791CDE58CF024D6824F6F8987B45856FF3GD6G2C6B54F8E7F5BCB40C6BC42FCF6A8795E9734AB692F5964B9E9A91FDDAF316153170276B2C589BFE3D821FAE2987F616228FB60F9847F865811C8BDE1F5CAB7BFC321D0526C9E69736F5135A5EF828F76DD9317FE8EDCF25F50FF886E1D1DAC673FD37DD70E4053483E0B64042AEB65E0C6FF7BAC51E64
	F3F1E905GB5GDDG01F3226EE3E7D1E6905859BF58CFB9E1FCEC6BC2BE22A15FC2B5AFA15847C111E98B93D850370552D5AFD464397F864A4EE69F0F6D2AB452142952DABCE8A258BE6938D93FCFDAF90E4938611CD8F31E273EED724720679F8B5CEAB362AAA15D2C626E6C926BD5170A7BAA1D8B0BA03D7CE3757CB3E80E4783BE61E3CDD7B6FFBCD66759DE61CF54E6641E8F5DC32466A23E78FC689E625E9C3107E8815A62730227AB55024F5C8B82A7658ADC7785B10F65ACE137E2AE08F91C1FC54F7DA0
	CDAE4218DF94B29D48564BD48678E6002E0BDC0FAF061369B5FAE69AF1B1749EC291BBCB3D98FA8F612BB744DEF79150B2AF897E3FCEFDC1AF24A3D45C0DDB081B836905AA6E19DBC24E989577D41DA8CBAE8B5C9DBBC559FC95772B1D222CD9459D74D09C24E72B38CFD35CC2C847DE963A5DB40C3E21EE09A8514F5B83C0DB5A0DE5AF8F9791F6AFEDB79F3B8C5A3F60EFC2DD8E48036F115D225ED7C7D0F707241EBEE72F7F02DD6E758EDE5BFF2084D20C7EB61AB09E1BB97F0A082FC52D79C7123F702544F0
	F732B6F773FD3E246D77EB76FC534475027A17D82E8B6833A56A0B0F68679072380FB09F1A51FF98C44771FBA3095199EFBFFEDB70367947B144752D03E16F0B2D66BCED664F680E37C82022BB2532876F76DDC457034F77F75B4D70F44B43E6B508526C6C175DF841E2EFC5D9D931F9FFD979BE567E7CE1FDAC2466157A303110C08F5F7773E7725DEFF15DFC36DD5CD5DB81344DBD42F66F6F46FD306AA3A0A3F5F547FCCEFB2354E721D61775EBC9076857CA1B18EF97BAE82C9052B3816659C46CA6700E682F
	458FACA016882BE1FF2DED2FB6AD31B1BED75B34316C3EFCB90535E96994ED665B45D8DE6B540F957625ADD1BF160BBBC347BAA3E82C1F8E22A36DB7A6BDBD77EC28AEE47172EC8C8F64E9E3286C5A91FE8CE1844B76F1BF2CB70C9FC6D790A66B9D54E6E3DB963B18BF9D2670EB651B2D741E8D64DD26667F49A9BCB36975389516A7F1B766C9G7AC600AE99F11F6FEAB6509B3D3CA9DCBE04A2A8D383709647DB607DB3FCCCD81B453B0D5750F83A364C077C0BE5E1FB5E2436FDB524572B38C5B5084B6D0DCB
	AB6A9538F76B04ADEB6995B67C659C5CABC5C3FA89C0BC40A61516190B3442BE60350F1D1D60B98B23FDBA8777B818172EE73D133F1F91BDC15EA5EA7BDF21ED083D53F8F78B0C7C4571685867EC5CE6D4CFB4EEC9BA6802FEF075E96396816F477938317A8239D3510328107A666B6AE3FDF0A5AB5417DF5C27755FF2F80F6F8B6ECF3616C632B53B0F2D25E9AAFE8E45930706E7F66CF50A47F4A150C69DC2E7CEE48B5DDA2B6136D15F48893E00D3603C85746E8E24ADAA6E1717D47F42A946F497DD33E3A09D
	2F625E23B887BFCFE33807EE046E21278AD83FBE9D23CB33B69E7D2B5B885D2FA7053CEFA57F77E6306DD8C3E55D843CA4DF9176E58EBD13D5E0034CEC61B9F40939BE7D6956F87A149482B5BA3BC25794E8230A3F337613BE44768F835E82405A1B33D5EB6F051DD3198F216D0DC21D6F933D9D6B70E0658E0F4FF98D7AC0F2B5381CFDEEBCF3647CF8285F0475C62A7D3148D390D4269DFA466A71BB5921BFAB77830F58EFAE39A23E8B38B19C814F3BFAFB611FA352B6F7F6445C398511BD0D6911C9CD291136
	2674C8D3E3EAE4CF3319D4B611F4DBF3E3F9F3E3063967487076016666B25B31917FF0FE25396758707070161EB25B516D4383EDA4352771F45E3646D4072D796D0EA22827279CFF291192F69AA9080446FA31BD711BF995797B4630D86F5682FF6857392EB27DE3BE5F71005E67CBA21A5F978B7972DD1A2E3235FFD7165ED7F145EDB1EDA5463ECAA5AFEB67CF6552DB7C1C6421FCDCAF23813F88E099C0BCC082C0F23F08997A525107EB70761E11D970650464167A68A9F1DD9D20DB7BA1255F8A8BBBB5B23D
	7B505FCB93BE4D12EFFF05AC3D6B2544F0673F66FEA64FE17EACEBFF0B6219EC078AD0B6AF5022GE2GE28156GECD4E57B17F46491CF966CCE25C1D1A41B031EFE0B8387BC84565038D9E7BC7E643C3E6FF3BF7F0EA9B18C0F69EE46DB3EBB744C6C9F37233E36G5E6E967CAC48413952A9DD99FBDA8DC82B4F6315FD4A884352DB9F3C2F5737CF6F4E7A8B53ACD751B155F2EC2DD9C57D5819EE3656A42A78A7A9FE368E4F56201E8E61CB4F839A7108587A6AC29CDBBB24A3G2281E2GD6812C77083EFCAE
	270CCCF01E546E71DA64A159258BDFB379CEF7CE2FDF6EB69B2D9F444BF540EB6C676C85FCFD884D8AE9FB880E59E65F6BD8A5330B0F19718EE7983FF8FF7901E2F3F965BEDEEE59AE2D5CF0571E50F2C741306E5DE3F7CAAECF5F9E7028E1DB84C5699DD134AB69C47CB69C9A0B933C7D27995F599C79E5261847BB3E7AA5527C44CB09E2CD8815BF40650C75EAF324700BE2AF573EC7637BEB875E8CAFEFED999317672D2A46F8D60F47C70340AC1EE5299631AAB2G3E8A009540BE404E84D839FF2D999B877B
	C50DA8B7BA4062E0F360390817E36B64413A0956E5549131DEAE07327183EC1D44F482FFFF99FE0C8FF3B27A5A3A5B11F48F43E82F3973B51A383528234F2E58BE162EC649D81EB87B56607AD5BA3F83179B9A8FC3D9B78E08FB857756985153FDF1E9D35319E5A836211EB17AFF6032484F0CE650D8548EE8234CA7FCCA12A3FC4AF6957773AA9AFB0174B21F709F6F277E6CAAC8EFG48778B7C67A93E985296BF3B9B417066AC23390CE575E92CA71B57BBF5FBD1EB58C6288FA976B9936DE1C201696ED03650
	DD171F697CCCF8C6F3D919AE58370D55796B5B74B1FE547998A833024B4B4A5DDD906C4BFE017A7CEBA0CF02DF4C0BCD1726622F96AAF1E9450AB6AF8E43FB9B51FC222DE4248FFDC1631B32A2CF8FBD0F8FF70B156955BF20DB43738F5C1A0CBDAC5FA7F4767B6FE97A3B6F832D1E211DD32B47D222153D4B03F3C09F9BEC437F1BBC74A3A545DFE2B9F2341D67FD4AE39EBF6F1956E3AD6D4C87DEC9FDE07DAF82904B690F10879EF874518D9B506E7C794F781C8F3F058BB18F7ED87E17DF56723FCCFFE44ABF
	FEB7AAA056F38B0C6BCCC5443164D161CF151D1BCF4A663E985667DB26B07DDB23E83EAC135399B88C4F9B1B88F9F1B36C27B83C7C9263FF8CA0FE338637B6B1BE192FFEFFC0583674C1963FAB9A545FAF2AA9C523D48FB8AB009DA0GB09BE09140D20015G890342977945563D70E40E48B1FEFAD4D7575457AC8FB9EDB25E216487245419E6E53E1D0FF34B2D1ECDFEB7DFFFBF0A61FE100F77B3FD5CB1EF358B7CA379E8B36CAE97BD61E53838FC0CF1B95DFEDCAE95DC976CEABD0F6767865328F349E40DA8
	433EC89E0ACBB383B483F481380604EC72B6FE675340FFBEE26F1305D20A36DA8A421F8B1FAA18785B3C2E8214394783B3399F6B9778CB85A8336271D2A443598AD03FFC4EBE074232F23C135AA9175CCB51CC4EAF6071A6277F2960ED92468F8729BE02F9F72A670AECD35A25BE354C626D289F6A59B1F34FB96D1B5B73897BCE846C00739A3DF65B86995DFDEC9D78C587364D5E7FC3776E6878EB6391932FC1B3EEEB9BCC7EDF96069F7304C2633BG3FAFB43EF73231F07CEFFCB697067F46A769B57DB7BE4C
	D7F8104603A3C11F2307047FF00846F397C3FA050ABBE89267FF2BD55C52D3627CEF3D0A3BDEA57C91B2ACF05BF60B73BF6B3058434416633AE807F48440C200E5G2BG92GB683648662520AG6A815A819CG23G33816683AC81088D08F9D83AFBDFB81D85A4BFE8201351A731FBC74CA6AB55E813F1DDD983F5650F08730A5F6C447A0C6EBCEB171D5B1D0ACBEE64AEB63F8B7523EAF116E0999167974F53B6E6C2FA9E401291F1D776259A319E2C84DC72B5F166F834D654D1FFCD542154E2DE8552D1G8B
	2FCD564F94FE645CF7094A63F02EB883D82636797D9A01B3DF97FED1F456D83F686B6A5D07195759DEE09EBCE32E733BE95467591EB3991FC76C85E2216C1A6B1A4F33613A368FE6FC7CE7950D7DCB0110583F69G723C9972270F8A1E2F3C013626D936B97BA51755A559E4FF1B57698615E774D3EF6079B9BB919139B014861A213677BF745EA9771CF45FEABC16257779ABC7194C0ED131A7684F8A5D93A0FDF4D40C775FE78BDD1B8D3858D151774FE60B71A6B754B3E6FAEEDD83E9AB62EE083CDF5CA672C6
	28F9FF328D73AE0574AA00049BA20E793C4E47FB7C52E4FD332969D5A106EC38AD4D8FCCAFEE30E74A65188DC9F89F7B1B5C04F98BD089508CF061263089D1A5E6E264F7502FB6E43BD5F2017514197F34A810CB341F707358384529FE1B82F5AFD66BEFAEC59D9EF65A95879176373594670CC346C5D760CE52FC60656872351522CE7B412E381CEE59AA59B97EDCA93655B32248FE2B6C33G0D5FCFACC5FF48AEA992DF5BCB316F3CCC84DE56D10AB20001F37B7945C4E7C0F6B11AA704E69BB9A1792FB2DAE4
	D9787569D3E5937BA451E5745B9970A5F0A34DF0DFA82377B9FBFB7D325A8F8B4AF2D5DC2BDFC43019FEAEB70B18BF1B5B3F206B52BA686B8DB7455C6E5CEDEC87C6687A12FBABAEED87G433969FA558269F69577EB3ADEC5C0BA6A1630D57F2BEAA2DB250F71074677175DE231F66DBC211972928B7878DBC2CF5614076F5FDF15CF5C3F6B4B0DFD3E7FAE9F6B737D315C5867FB31DC6F73713FA3C16FD375415A582566CBD3F167D4DCE6C586471D8D5275AD952FF0FCCB103E97D6A0DF439457A56E726AF067
	B8EECF856A88086C4040B9433DDBC17754CE97575B77E99E744D9535BF4AA80FCE2F24633BCA451DD36D4A2CF16F91A21088237B2A1F19305C1BA1E9D6EE650465C20145FF1D548F5891919A9776D17C5E085038701F2B05BD2A84DAF4040859A457CE4F7EEE19E63963D3AE4764CA203E4C66B1727E016253E7044AFB2DD6481B8F34408C756FA3649A796EEBE630B15DB043B8A615FCC7DCDA619D4134E2C89F3E43C897FED4E354C6BB4F6B3843380DD1404F8E21AD047452909C136F09AC558F84FA721DE22D
	5F257A8575F70A357E8475A194C8C781AC3CF32AFE60BDB4DE435E971760BB332DFF4C9CAF16DE43034B4C965EBC708E517946D7DDFDA5D7EC38CBA969F54AAEBBFE9803BE57D1CC881FB3D93D8F3BCC15EF21FA37EE631DE2CC97E6CFEF4EFEE342F246F37639894B996BF0B675390AE7066A70F60A2F19992A432F6708B1EE865A2219C25E8736CD2F7D26822CAFF3D6E87B960AAF1C955A7E635BC47BC5C00B1CA556268D6FD3FFC5F25BDD6A3A727C7BF8600EBE4899596B137D30DC31CFE545DA72BE5AE8BF
	AC40AC1DD8EC7C4DF5DAB13669711FB956F8448D9BD6594FE40E1F261F784C144BB1BD7F20CC53736A5DA85B9E3CC0EB76741A79955A3ABDA22FF53F163742B45E1CA82BG077900B8DF3AD92E157B5A2949173BDC25154B281C6C3994ABFB87DE19646FDF2E566A1955B219765937914B37323898FA21CD6C2FBB297D6D4130A4FF8F685E938DED627FAFE0ED3C7E8934717BDACD26BF6A5EA3EAEFFF5BF3EFEB9BAC6E7277F41F3F9E667A66D9A2961314C73FB13AABAE4DFC1740D55218C5A5242DAA6E904DE7
	073422620E2BF73BA3D55C0CD2FA9F8A529BD45CEFE9ACA179EE58175DADF0A7E9CC438C699A9537F58B62AC10F628B896079805F4140ADBD9AE5A1D2F62CE507AB6C0BABDD25852FF9FF3B7ECF2E3715CB44B95CDF36D789EDD43F7C4065A6EC7A9FEEFE4286DEE4BD67DBD20C52B72E6286DEF0E8C3973F6CFDCDA91C04DBDC6EB6503C172DAF81EEE7ED46E996B53707DBD06CE787BCE5D3BB967764F175ACF200D5682CD26B33A77FF5BF67B5B5EF8DB5B60FFE7A7B778DEDDAC35690C76FA1E715E3A1C5A01
	C85009B97708FD78716A7077056D5416AC073CAB557C1DF9416724AEDA67A620A77F1D5807770CFBDFB8741C54253BA7CA678554F31E68E3065125467705E3283DBA8C79ADFF27FEF3D39B5CAF4F55EA7DA2579A774B8DEAFF82D047CC351E7736046F17A6EA6BE2A06FB2B57F13B5417D72DF5476A5GFD235AAF3FAA1FCAFCA234DF0A6E8D6D97FB2DF13F0CD2F94AA0FF7D3D423E7CA8DB1B832BF46F6732EF7FFC705D56B6589AE226FB928748BB73DE312E7C2E12FE1385699895F7ACCF2CBFABD4DCAEBD67
	480F0ACBAB0E923865F4BFF39852D69557C13FAD30C3DAD1F15FD63F690D0892315A6C8FB51D5BD7BD4EBD1F6A9A663EF13FEFFF3DD62EB2EF7265228FEA658ECD7ABE94AB7B9D7CF34A7C7D6943DABD6E1A49371F592815CB5FB279F225CDDA390727505E490F34F24B4B27A66F40F1CD5EB9962D1EBF64CC26FD3E6F488EEF9B2CD48FD701AE2C099236A1390A467CA45B55BE1FE750ED97F9F7D03DCB3F8FFC2B7B040D3814B71E0DC8A34136F34C1D687B58FC57EC443BD546B66290ED7BB064375CA778FCA2
	AB58067D0E4E01G50E72AF9DC1D417675619358070C771FF67EB5772B175C2779CA2C6E27CEEA6373CC65B863D305A18D6DAE4AE12BEEBE64613902DA2649637278CA069DCEC5E6F9ED27B5FD386B0CD64E1AB579761EE9574A35F6CECD9FF3BB31ACBB37F833A59294E5716FC80A5FC7360CED37617EA71FD8FC39B95FC4CC2DA4151DCB341294FAE89140BF25548B3DD76C9FA0B7097AD3C8B2DEB0D2C8AA3BC324D271686FA634139544678F3FD8756C4A27BB7DC9A435153C062A50A67B68C93FEC472F7079
	1F73BDCAB2681FD7C705EAA549FE7AC871ABA3AE59C272FB4F601FF473AB323DC11CED7B95324D02AD1562F1EBE90B64F7A898DD7850C21271E208C236B032CBF27715328B859FD219929B3AA93FF44D82FE37D2FE31169235162D5F49F9FB77C76B16A69153D1720A4BA3590FCAB64563EBA5990A43A77B9D9E17BD60BDC44D9BC99F96FF61A2892AFBC3959F05AD416B78AA53D783DF084ACA48BAEA02C960A325B4A7EAFE091A435E6410FC50146CEBD5708FA9FBFCC5AAED461B4ABB0F9D5BFE41C492391058
	756981AF0CC52F546FF40D408B538ABAA8198AF00BE7BA78071200B3F388E70224B6D07219C74ABE7B608B9F538634228A59453A920A1676491E7E52065EDE27DBD6AB00FE056AF72A55E31E1210BCDB821F5E765163AF77009EB413247E32B27A7FFE7AFFB97E3F1FE276D34C7EF2685C8DE45CDFA8BDA0E4264A837C64D0FEF078CB0E4288AACF7D6E11857FD63FE1BDC8F71424504BC2B08839DA2E13037DBD326F2E451F5D796A1C35776298F9D1D582D8EFEEC02D91A5EC25C78EEB07AA6A12FE7525A493C9
	0669430EE0C0F9719C85145747E6D3126271D23D931FB321ADB1854D1A0FE98AC3AEA61E872F58E42858CC9D1615CC25FA4C540FFE22C4312F0CD5C8C4E763DC25EA0129BC1AF5AB7D3FE04A1D0C258AE9595731F91AAE8A281CA21714B7BA997E66B8FDBF18D375A2010A4D667CA3247C6D71DF91885294A2E4D03109BA7E1302F4EC09C2F2C3631AEA86BCF96DB3C8B1613BA9B6FBB2425BEF03705DBCFDC893DE7CF5F2749CD20379863B0F4B0A19DF5EB66321F31DC272C4DA5C788E967E24C16AEFCA78631A
	70293A8E4818D00A3FE119BAB419F2F5B22584730D834A2E62184525G3FB6F89808A987531C9D6C10A5FEF97B1D391F2A98B411742338B83A3C8E29159BFD8BF935075AE65987F9E1DAE80B9BAD8B9E0449866E459B9A5E06F8C6ED73CAB6F4B2B26C126FAA2D81D939F41EE4747A7AFAE8838AB11DBFFA9E1A25A9A4F7DB48AB0A832FFB62EA2F106DDA55D63CF046894CBF2177CB3C7427768FDE6BCB62E31F9DA27C344675F6D8A9B12EFD5A3862F10A09731E4B6EB36F3B257FBEEC532C1DE17F0EG194B3F
	8D1A9B7AFD58A68B8AE4853CEB2EB82BEA316061E538FB29ED20BFAEC5F2DDEDF05B710EEAA35E21A16A1915856B770BBC1C48E849A7106FAB3AB27F8FD0CB878826379CB7BBA3GG34E9GGD0CB818294G94G88G88GD0D0A2AE26379CB7BBA3GG34E9GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGF5A3GGGG
**end of data**/
}

/**
 * Return the DecimalPlacesSpinner property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getDecimalPlacesSpinner() {
	if (ivjDecimalPlacesSpinner == null) {
		try {
			ivjDecimalPlacesSpinner = new com.klg.jclass.field.JCSpinField();
			ivjDecimalPlacesSpinner.setName("DecimalPlacesSpinner");
			ivjDecimalPlacesSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
			ivjDecimalPlacesSpinner.setBackground(java.awt.Color.white);
			ivjDecimalPlacesSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
			// user code begin {1}
			ivjDecimalPlacesSpinner.setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(0), new Integer(10), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			ivjDecimalPlacesSpinner.setPreferredSize(new java.awt.Dimension(30,22));
			ivjDecimalPlacesSpinner.setMinimumSize(new java.awt.Dimension(30,22));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDecimalPlacesSpinner;
}


/**
 * Return the JLabelDecimalPositons property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDecimalPositons() {
	if (ivjJLabelDecimalPositons == null) {
		try {
			ivjJLabelDecimalPositons = new javax.swing.JLabel();
			ivjJLabelDecimalPositons.setName("JLabelDecimalPositons");
			ivjJLabelDecimalPositons.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelDecimalPositons.setText("Decimal Positions:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDecimalPositons;
}


/**
 * Return the JPanelArchive property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelArchive() {
	if (ivjJPanelArchive == null) {
		try {
			ivjJPanelArchive = new javax.swing.JPanel();
			ivjJPanelArchive.setName("JPanelArchive");
			ivjJPanelArchive.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsArchiveTypeLabel = new java.awt.GridBagConstraints();
			constraintsArchiveTypeLabel.gridx = 1; constraintsArchiveTypeLabel.gridy = 1;
			constraintsArchiveTypeLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsArchiveTypeLabel.ipadx = 45;
			constraintsArchiveTypeLabel.insets = new java.awt.Insets(9, 9, 6, 5);
			getJPanelArchive().add(getArchiveTypeLabel(), constraintsArchiveTypeLabel);

			java.awt.GridBagConstraints constraintsArchiveIntervalLabel = new java.awt.GridBagConstraints();
			constraintsArchiveIntervalLabel.gridx = 1; constraintsArchiveIntervalLabel.gridy = 2;
			constraintsArchiveIntervalLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsArchiveIntervalLabel.ipadx = 45;
			constraintsArchiveIntervalLabel.insets = new java.awt.Insets(5, 9, 16, 5);
			getJPanelArchive().add(getArchiveIntervalLabel(), constraintsArchiveIntervalLabel);

			java.awt.GridBagConstraints constraintsArchiveIntervalComboBox = new java.awt.GridBagConstraints();
			constraintsArchiveIntervalComboBox.gridx = 2; constraintsArchiveIntervalComboBox.gridy = 2;
			constraintsArchiveIntervalComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsArchiveIntervalComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsArchiveIntervalComboBox.weightx = 1.0;
			constraintsArchiveIntervalComboBox.ipadx = 37;
			constraintsArchiveIntervalComboBox.insets = new java.awt.Insets(2, 5, 12, 37);
			getJPanelArchive().add(getArchiveIntervalComboBox(), constraintsArchiveIntervalComboBox);

			java.awt.GridBagConstraints constraintsArchiveTypeComboBox = new java.awt.GridBagConstraints();
			constraintsArchiveTypeComboBox.gridx = 2; constraintsArchiveTypeComboBox.gridy = 1;
			constraintsArchiveTypeComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsArchiveTypeComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsArchiveTypeComboBox.weightx = 1.0;
			constraintsArchiveTypeComboBox.ipadx = 37;
			constraintsArchiveTypeComboBox.insets = new java.awt.Insets(9, 5, 2, 37);
			getJPanelArchive().add(getArchiveTypeComboBox(), constraintsArchiveTypeComboBox);
			// user code begin {1}

			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Archive");
			ivjJPanelArchive.setBorder(ivjLocalBorder);
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelArchive;
}

/**
 * Return the UnitOfMeasureComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getUnitOfMeasureComboBox() {
	if (ivjUnitOfMeasureComboBox == null) {
		try {
			ivjUnitOfMeasureComboBox = new javax.swing.JComboBox();
			ivjUnitOfMeasureComboBox.setName("UnitOfMeasureComboBox");
			ivjUnitOfMeasureComboBox.setPreferredSize(new java.awt.Dimension(126, 24));
			ivjUnitOfMeasureComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjUnitOfMeasureComboBox.setMinimumSize(new java.awt.Dimension(90, 24));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUnitOfMeasureComboBox;
}


/**
 * Return the UnitOfMeasureLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getUnitOfMeasureLabel() {
	if (ivjUnitOfMeasureLabel == null) {
		try {
			ivjUnitOfMeasureLabel = new javax.swing.JLabel();
			ivjUnitOfMeasureLabel.setName("UnitOfMeasureLabel");
			ivjUnitOfMeasureLabel.setText("Unit of Measure:");
			ivjUnitOfMeasureLabel.setMaximumSize(new java.awt.Dimension(103, 16));
			ivjUnitOfMeasureLabel.setPreferredSize(new java.awt.Dimension(103, 16));
			ivjUnitOfMeasureLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjUnitOfMeasureLabel.setMinimumSize(new java.awt.Dimension(103, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUnitOfMeasureLabel;
}


/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val)
{
	//Assuming that commonObject is an instance of com.cannontech.database.data.point.AccumulatorPoint
	com.cannontech.database.data.point.AccumulatorPoint point = (com.cannontech.database.data.point.AccumulatorPoint) val;

	int uOfMeasureID =
		((com.cannontech.database.data.lite.LiteUnitMeasure) getUnitOfMeasureComboBox().getSelectedItem()).getUomID();

	
	point.getPointUnit().setUomID( new Integer(uOfMeasureID) );//setUnit(uOfMeasure);
	point.getPointUnit().setDecimalPlaces(new Integer(((Number) getDecimalPlacesSpinner().getValue()).intValue()));
	
	if(getArchiveTypeComboBox().getSelectedItem().toString().compareTo("On Timer Or Update") == 0)
		point.getPoint().setArchiveType(PointTypes.ARCHIVE_ON_TIMER_OR_UPDATE);
	else
		point.getPoint().setArchiveType((String) getArchiveTypeComboBox().getSelectedItem());
	point.getPoint().setArchiveInterval(CtiUtilities.getIntervalComboBoxSecondsValue(getArchiveIntervalComboBox()));

	return point;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	
	getDecimalPlacesSpinner().addValueListener( this );
	
	// user code end
	getUnitOfMeasureComboBox().addActionListener(this);
	getArchiveTypeComboBox().addActionListener(this);
	getArchiveIntervalComboBox().addActionListener(this);
}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("AccumulatorBasePanel");
		setPreferredSize(new java.awt.Dimension(300, 102));
		setLayout(new java.awt.GridBagLayout());
		setSize(371, 177);
		setMinimumSize(new java.awt.Dimension(0, 0));



		java.awt.GridBagConstraints constraintsJLabelDecimalPositons = new java.awt.GridBagConstraints();
		constraintsJLabelDecimalPositons.gridx = 1; constraintsJLabelDecimalPositons.gridy = 1;
		constraintsJLabelDecimalPositons.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelDecimalPositons.insets = new java.awt.Insets(6, 5, 9, 4);
		constraintsJLabelDecimalPositons.ipadx = 11;
		add(getJLabelDecimalPositons(), constraintsJLabelDecimalPositons);

		java.awt.GridBagConstraints constraintsDecimalPlacesSpinner = new java.awt.GridBagConstraints();
		constraintsDecimalPlacesSpinner.gridx = 2; constraintsDecimalPlacesSpinner.gridy = 1;
		constraintsDecimalPlacesSpinner.anchor = java.awt.GridBagConstraints.WEST;
		constraintsDecimalPlacesSpinner.weightx = 1.0;
		constraintsDecimalPlacesSpinner.insets = new java.awt.Insets(2, 5, 5, 80);
		add(getDecimalPlacesSpinner(), constraintsDecimalPlacesSpinner);


		java.awt.GridBagConstraints constraintsUnitOfMeasureLabel = new java.awt.GridBagConstraints();
		constraintsUnitOfMeasureLabel.gridx = 1; constraintsUnitOfMeasureLabel.gridy = 2;
		constraintsUnitOfMeasureLabel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsUnitOfMeasureLabel.ipadx = 11;
		constraintsUnitOfMeasureLabel.insets = new java.awt.Insets(6, 5, 9, 4);
		add(getUnitOfMeasureLabel(), constraintsUnitOfMeasureLabel);

		java.awt.GridBagConstraints constraintsUnitOfMeasureComboBox = new java.awt.GridBagConstraints();
		constraintsUnitOfMeasureComboBox.gridx = 2; constraintsUnitOfMeasureComboBox.gridy = 2;
		constraintsUnitOfMeasureComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsUnitOfMeasureComboBox.anchor = java.awt.GridBagConstraints.WEST;
		constraintsUnitOfMeasureComboBox.weightx = 1.0;
		constraintsUnitOfMeasureComboBox.ipadx = 73;
		constraintsUnitOfMeasureComboBox.insets = new java.awt.Insets(2, 5, 5, 80);
		add(getUnitOfMeasureComboBox(), constraintsUnitOfMeasureComboBox);

		java.awt.GridBagConstraints constraintsJPanelArchive = new java.awt.GridBagConstraints();
		constraintsJPanelArchive.gridx = 1; constraintsJPanelArchive.gridy = 3;
		constraintsJPanelArchive.gridwidth = 2;
		constraintsJPanelArchive.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelArchive.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelArchive.weightx = 1.0;
		constraintsJPanelArchive.weighty = 1.0;
		constraintsJPanelArchive.ipadx = 17;
		constraintsJPanelArchive.ipady = -1;
		constraintsJPanelArchive.insets = new java.awt.Insets(5, 6, 14, 6);
		add(getJPanelArchive(), constraintsJPanelArchive);

		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	
	//Put a border around the Accumulator section of panel
	javax.swing.border.TitledBorder border = new javax.swing.border.TitledBorder("Accumulator Summary");
	border.setTitleFont(new java.awt.Font("dialog", java.awt.Font.BOLD, 14));
	setBorder( border );

	//Load the type combo box with default possible values
	
	
	//Load the unit of measure combo box with default possible values
    List<LiteUnitMeasure> unitMeasures = 
        DaoFactory.getUnitMeasureDao().getLiteUnitMeasures();
    for (LiteUnitMeasure lum : unitMeasures) {
        getUnitOfMeasureComboBox().addItem(lum);
    }


	//Load the Archive Type combo box with default possible values
    getArchiveTypeComboBox().addItem(PointTypes.ARCHIVE_NONE);
    getArchiveTypeComboBox().addItem(PointTypes.ARCHIVE_ON_CHANGE);
    getArchiveTypeComboBox().addItem(PointTypes.ARCHIVE_ON_TIMER);
    getArchiveTypeComboBox().addItem(PointTypes.ARCHIVE_ON_UPDATE);
	getArchiveTypeComboBox().addItem("On Timer Or Update");

	//Load the Archive Interval combo box with default possible values
	getArchiveIntervalComboBox().addItem("1 second");
	getArchiveIntervalComboBox().addItem("2 second");
	getArchiveIntervalComboBox().addItem("5 second");
	getArchiveIntervalComboBox().addItem("10 second");
	getArchiveIntervalComboBox().addItem("15 second");
	getArchiveIntervalComboBox().addItem("30 second");
	getArchiveIntervalComboBox().addItem("1 minute");
	getArchiveIntervalComboBox().addItem("2 minute");
	getArchiveIntervalComboBox().addItem("3 minute");
	getArchiveIntervalComboBox().addItem("5 minute");
	getArchiveIntervalComboBox().addItem("10 minute");
	getArchiveIntervalComboBox().addItem("15 minute");
	getArchiveIntervalComboBox().addItem("30 minute");
	getArchiveIntervalComboBox().addItem("1 hour");
	getArchiveIntervalComboBox().addItem("2 hour");
	getArchiveIntervalComboBox().addItem("6 hour");
	getArchiveIntervalComboBox().addItem("12 hour");
	//getArchiveIntervalComboBox().addItem("1 day");
	getArchiveIntervalComboBox().addItem("Daily");
	getArchiveIntervalComboBox().addItem("Weekly");
	getArchiveIntervalComboBox().addItem("Monthly");
	getArchiveIntervalComboBox().setSelectedItem("5 minute");
	// user code end
}

/**
 * Insert the method's description here.
 * Creation date: (5/1/2001 9:11:36 AM)
 * @return boolean
 */
public boolean isInputValid() {
	return true;
}

/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val)
{
	//Assuming defaultObject is an instance of com.cannontech.database.data.point.AccumulatorPoint
	com.cannontech.database.data.point.AccumulatorPoint point = (com.cannontech.database.data.point.AccumulatorPoint) val;

	int uOfMeasureID = point.getPointUnit().getUomID().intValue();
	String pointType = point.getPoint().getPointType();
	String archiveType = point.getPoint().getArchiveType();
	if(archiveType.compareTo(PointTypes.ARCHIVE_ON_TIMER_OR_UPDATE) == 0)
		archiveType = "On Timer Or Update";
	Integer archiveInteger = point.getPoint().getArchiveInterval();

//	if (com.cannontech.database.data.point.PointTypes.getType(pointType) == PointTypes.DEMAND_ACCUMULATOR_POINT)
//		getDemandReadingRadioButton().setSelected(true);
//	else
//		getDialReadingRadioButton().setSelected(true);

	getDecimalPlacesSpinner().setValue(point.getPointUnit().getDecimalPlaces());
	getArchiveIntervalLabel().setEnabled(false);
	getArchiveIntervalComboBox().setEnabled(false);

	for (int i = 0; i < getUnitOfMeasureComboBox().getModel().getSize(); i++)
	{
		if( ((com.cannontech.database.data.lite.LiteUnitMeasure) getUnitOfMeasureComboBox().getItemAt(i)).getUomID()
			 == uOfMeasureID )
		{
			getUnitOfMeasureComboBox().setSelectedIndex(i);
			break;
		}
	}

	for (int i = 0; i < getArchiveTypeComboBox().getModel().getSize(); i++)
	{
		if (((String) getArchiveTypeComboBox().getItemAt(i)).equalsIgnoreCase(archiveType))
		{
			getArchiveTypeComboBox().setSelectedIndex(i);
			if (getArchiveIntervalComboBox().isEnabled())
				CtiUtilities.setIntervalComboBoxSelectedItem(getArchiveIntervalComboBox(), archiveInteger.intValue());
			break;
		}
	}

}


/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	if (arg1.getSource() == getDecimalPlacesSpinner()) 
		this.fireInputUpdate();
}


/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
}
package com.cannontech.dbeditor.editor.notification.group;
/**
 * This type was created in VisualAge.
 */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;

import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

import com.cannontech.clientutils.CTILogger;
import com.cannontech.common.constants.YukonListEntry;
import com.cannontech.common.constants.YukonListEntryTypes;
import com.cannontech.common.gui.table.CTITableRenderer;
import com.cannontech.common.gui.tree.CTITreeModel;
import com.cannontech.common.gui.tree.CheckNode;
import com.cannontech.common.gui.tree.CheckNodeSelectionListener;
import com.cannontech.common.gui.tree.CheckRenderer;
import com.cannontech.common.util.NativeIntVector;
import com.cannontech.database.cache.DefaultDatabaseCache;
import com.cannontech.database.cache.functions.ContactFuncs;
import com.cannontech.database.cache.functions.ContactNotifcationFuncs;
import com.cannontech.database.cache.functions.CustomerFuncs;
import com.cannontech.database.cache.functions.YukonListFuncs;
import com.cannontech.database.data.lite.LiteBase;
import com.cannontech.database.data.lite.LiteCICustomer;
import com.cannontech.database.data.lite.LiteComparators;
import com.cannontech.database.data.lite.LiteContact;
import com.cannontech.database.data.lite.LiteContactNotification;
import com.cannontech.database.data.lite.LiteCustomer;
import com.cannontech.database.data.notification.ContactNotifGroupMap;
import com.cannontech.database.data.notification.CustomerNotifGroupMap;
import com.cannontech.database.data.notification.NotifDestinationMap;
import com.cannontech.database.data.notification.NotifMap;
import com.cannontech.database.data.notification.NotificationGroup;
import com.cannontech.database.model.DummyTreeNode;
import com.cannontech.dbeditor.editor.user.LiteBaseNode;


public class NotifcationPanel extends com.cannontech.common.gui.util.DataInputPanel implements javax.swing.event.TreeSelectionListener, ActionListener {
	private javax.swing.JTree ivjJTreeNotifis = null;
	private javax.swing.JScrollPane ivjJScrollJTree = null;
	private javax.swing.JPanel ivjJPanelProperties = null;
	private javax.swing.JScrollPane ivjJScrollPaneTable = null;
	private javax.swing.JTable ivjJTableProperties = null;
	private NotifcationAddressTableModel notifTableModel = null;
	private CheckNodeSelectionListener nodeListener = null;
	private javax.swing.JPanel ivjJPanelLoginDescription = null;
	private javax.swing.JCheckBox ivjJCheckBoxPhoneCall = null;

	private final DummyTreeNode customersNode = new DummyTreeNode("Customers");
	private final DummyTreeNode contactsNode = new DummyTreeNode("Contacts");
	private final DummyTreeNode emailNode = new DummyTreeNode("Individual Email");
	private final DummyTreeNode phoneNode = new DummyTreeNode("Individual Phone");


/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public NotifcationPanel() {
	super();
	initialize();
}

public void actionPerformed(ActionEvent e)
{
	if( e.getSource() == getJCheckBoxPhoneCall() )
	{
		doCheckBoxAction( e );
	}

}

private void doCheckBoxAction(ActionEvent arg1)
{
	int selRow = getJTreeNotifs().getMaxSelectionRow();
	if(selRow != -1) 
	{
		TreeNode node = 
			(TreeNode)getJTreeNotifs().getPathForRow( selRow ).getLastPathComponent();

		if( node instanceof LiteBaseNode )
		{
			//set our attribs inside the user string of the Tree node
			LiteBaseNode lbNode = (LiteBaseNode)node;

			//create a dummy notifmap to use the attribs logic only 
			NotifMap nm = new NotifMap(-1);
			nm.setSendOutboundCalls( getJCheckBoxPhoneCall().isSelected() );
			lbNode.setUserValue( nm.getAttribs() );
		}


		fireInputUpdate();              
	}

}

/**
 * Returns all the LiteContactNotifcations for the given list of LiteContact objects
 *
 */
private void addContactNotifs( List contacts )
{
	if( contacts == null ) return;

	for( int i = 0; i < contacts.size(); i++)
	{
		LiteContact lc = (LiteContact)contacts.get(i);
		for( int j = 0; j < lc.getLiteContactNotifications().size(); j++ )
			getJTableNotifTableModel().addRow(
					(LiteContactNotification)lc.getLiteContactNotifications().get(j) );
	}
	
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G630A3AB2GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8FDCD4D576B8159535D4D4D4D4D6D464D2CBE5C5C5C9C5ADEDEE4BEE6E4696EDEEDF3675D36CFE2D1FED6CE63B347B788F8A0A020A02BAAA962E082883A272E7D0D4D4D452D1D15198E00051011906874C2865775CFB5F3973664D9F7E3853EF7DF8F86F1C7B7F5CF34E7DF75E9DA1FFE5D0DAD2F23EA0A42589523F2DC902A0C68BC26A490EFFA12DC930A58B32FF2BG96886FACCD05E7AB044D78
	05ADB9D7F8ACAF93F0A3607E2F58121740FB1E70FAC741AB7062261CD9AF8B42716EF7EE74DCCE6DB2ACA70362619B3261B98F408C34G00B80114BFEDC301C48F87FC1E74CEA089F28DCCA2F11AD28BE47462A4964F88CF9FG7FE49267FFB794C961F1C01B8D508C7476E496578A4FACDA3B2B2B2B24F8EDB78789B12F57E5641032E479A344CAE9932527A07CAC1DB0A2C5B818D6834F1A16F3BDF51D263E32CEDDFF3F29DF54F77616F5F5683B8C2249D2A6BD868774166A6A2370375954E3685F219B503768
	7A75C6E38A29F3FFEAA64DCF9054004F26348FD2891FA6437BD40038942C772FF3EA24FA851C8B92A29F5C64365EB5292C3E6D2976FA473F1514121BC6724FAF4B165285C1F8ACGEB536F66B40D32CD7DA65150ED68540986D3FFD90F45B4E82E2EBEC8E80CA4EBDFDB9936CF1B066D7BD5B2A95F8F70E00088CE3FAD0550E3G1F89101A0E6D2E7D8A5B5DFA61F1A1701ECB99735D343BA81D3537B15D5E6EA65B440C25D47EFEDEC8E4488742028142812683A48294E558128B295CCFD876EFF8B6F408BBCDFD
	FD267E8633F907314BF2405425B742FBF5B504C834437ACE1325CB9018EC8F24163A288F02BA43D12E8930369D97D096C38FCF922C9F7AE42439E8DB40EFB599CDD29EED99763685E6903E1DCCA3FC3B886FC9D23E0C5EC36953E5F4567FB329FC91FCB60435E5A21FDB67E1DD1AD36F92E615F7E6E438280B7515560C48CCD60758CCFBDD980F9FDCCEF81C1AE5CBD681D48134G18817C3310473FDA36E5A49E6F853933746B0CC786BB4CBA0B38E350E06C52DBA4DEAFAB7344EBD74052150CB99D63CB4896F9
	9FC5BC556112AF91A1FBB2C23398BF22326CFCE1E56B5C16BDA34BD9B66671BE5CC1F5E2F6966B4394CEEF26744CB9F6BA6B5B982ADB84AF00300BGACFE966D73B8A9FE924FE7A1254F1451D9BEF727200D188DE1EDF3ED492CFF9BD6929B9B8978F40084006CECDBF2A9C093C0DBB6767152420D23542396D97F32343FA9DC8CCF3DD5346876768F083A7ECE7DB11D45206BB06A8784A94E3B05042F9D8E696228FEF7C299FB747DFA0BE40AAC3ABEBD8853G0B73274285A40EC5CFC33506BEBD9450E796B05F
	CF8A7360E9548D08C74DDDBAD1EF0F4142BFAFA4B2B124BB86B9C286C4A632893F2E27F67CA23C87E6A32F7AD504B68B704C9C640BD834901E7BC13875466A6AC6C3A729064EE2C399EDCF4B05E791448F84A818E7CB8E1A077A79F1AB4AE1E34EC3C276EFF5AE65100E0F7319CC554CD74AE19F4D3F8B6893G0281226663787C1754D6143D9C57B2C900540754EBA45DA9D264414A181B06E5240D20F79923504F94854E78BEFD95115D9950AEA1976CD0AE727E71A29513C9B28623949E3200G693B6CBD4162
	06AEA7E30CFEC85FAFB66A4D7A7EAEF89910E4602965D9F6796CB6F159F90E52093D5A8982B44069AFADDF40681007DC5AB17CB59A2E93C50B21E3D0549F510B22213F471E7E8DDA178187D3B8A035753D55242DD550469600F65E565695F9B2B9EBB6194E8D1A35C403A4F93552F1D90478FE39587FCDA9E43EB6196307A9EE8F7FDDB2765DBCA95ED8EC6968EC74278EE5A87B77BFD346FC52AC693DC076FEFFCA6BFF38BC67321F77EA992C6F772FF4AF3B07D73A165D56152EE5774CCA4F32593D5215EC3230
	3E15C447CD437DB2D9372CA4762F53545F2F278A471388EC8E7A3116344350EF900F9B3AFA74629143F93DA0A46492193D1F5A58E8F80F4BC51BB83C86EDE271797B0520EFEADC4E1F2C8F1D4A28DA406435F9015DA632BA8D28088E690D7ABEE054CE53E03F4868B6EA3FA57AC08A259DD8538FCFD549BEAD70F037C1EF6CA2B37B3D0D251D205EE2997D4BC60E12333AA11D35ECE09878D5C6BB23ECA7895DC5DE5729B6EC28D3B9AF8ACA3B8D967D5EFE73A0E6326E583AF22687F9C25DBE11155D82BDB48C13
	CFDABEA2DE2C41E6D67EA35F1DF7D17EE13DE8B36BFF00DAECC1BEDC13BB446A3133D75FF9EE07493A2B1FD8B61AC3290E0AD599FB3468AD5DA6CB1F3E0BD622CCB7ACCAB5E82041E32E4226ADB846ACA8A6B2E384D9728188DC00F6772FAA920EF6D79ADCF61A0CC6A66E90163B104AF2DA3ECCBEA7AFE06B61C4F8327055692E42DB97E27803AE430DBC3CB843D5384FC22C677B2B48BCE0C07F6D209E26D704FD7B75B61CA32DDA2888BB26B38E5A67DE1F2C1ACB5AAE9BD398FD46EA57FA74675544481E6379
	FF3CBADDA0F3A816A7537B49BA122759E26803A1188C12523A7F26B2793ABFG6ACF7688E260998F406461274DE49DCCFA70304948BA0F28F79EC99F4E57579BB96D8DCA5B8F86798F29B847BF10AB5F93087865A517F604C0E39E339F2DF94A354F6E35A4DFAB50FD73104F3DEB6463F04340002953C0271E924F16944BED8C2395954F01A7085FG2C033A74D6647B6AE2D2D7B2B71548926FFE323ED6F01EEB6F22CBF51C666C9C26422EB56D0469F193F45DCEEE020F997443A4DF3A860FCDC3FECD4CC39B7B
	5DEE793E434479FBB3663A61CD0C44138499EFE6DBA7E6303CCF24733D0EFC10D5CA7B9D2799B96DD486520273F1EF624EEA32E6F435B751C99BDD56B3E8A89B948DE4D22D93F5D4EF19A430BCBF27739DB286CF4F477D062F55C4DE7397417A8520F191367778E639AC8445B539150536C52C1D66C5CAD9087D121467877420C5A88B7794AF104942E1603E2E3F8734070F5BEBD3181EC8782135E928A7824E9FFE1FB616B5EC58A2DC0BACAAA176E0AA60B3G928172975B12550B31EEEF2D9DF1CD3E4B6AE1CD
	FEA6FDAC7552AE46B9657F0CA9DDAFCF571EB116F497F93AFF52F5387FE27B5CB5D8769E3E58F9CE4B56492FD2D909DE4C5649991C7EEBCA1FA123337573F1CAA7F8A20435AF41FED02FA3F29185F84C9264FD7917B9B239E8B1997AC5AE933F7F1258CA1345GC393525E2734CE1305CE2C58FCBE016A6D8C48D3A840FC1717381F879617381E877E3B4475BC303C44739A262A445DBC1155EFB09D6B178F75E3343FF1DA89278DE7A02D065396EDA4349640FBB96DA22509007BF25A0AAD04968AF8D4817677AF
	E8BF4483AEAC35A597AFC57A5B142E813C8B401753CF2B47B2BFA7F93A8BA3E596AFF535869E9AD3991E5649A90273BA19754736F5C49E2D9C2F2538CD40B1C35FC0620ABA8B4C31F775F721505171F1AE6D17BC989BEF921066C7E91B0076992765503E5A82340DC9C83B115216GED27007335520DE43C90CDA62356E0A673E6A1F4A9B9AF78088E49AC4E2D9B09CC9BF5B653A05423ED99496B110DB8764F027819C0AB87E8DC46F84A5A7144B0493B5B226B83F1BBE256F78AD505A4ED4596CC9B8C714381E2
	81E6839494623CA1230648403EA31D96181F6D53DA74FAC63FE7AD59FF5AC7078FBAA7EC548FF4DA8CE6B601E3F186F3F2F91C960B492C3708867DG1B334C29104FD9FC8A599ABB941E11GAC4E0E2572B831D21CC4D277A20C33B84DD51C92882FA942316A0DD37231EA561DD599380F67E4F30B24B301A27BD845EC55EFB662DEDFG04C59761183B291D6C7551B197274F5555FBAC062E9D3A1EE65AD3ECEC3516E7CA69D31763587A5DE612E78D60DAG63F22C2F75CB1CCB04CE3ACBA87569F0F90691295D
	1BB1E1B92BE748F2FBFD55B61CCB1C5A02E54E0070229504F65D96791C177453BBA0E5E570E461D39C42093DDAAE4843BFF288A775DD1FA28FDF291607939EFDA525E7ED7B45DAECDB62AFC2046627DB5C1E4FF42DE0ED72151E61A967532BBE3BB703713DE757F2B95F2535D3F535A429C466841C2F6D284039D2648A647D970B691EB12973CA101715581F1F2EABF01D2F6C3C667CD21CA7E9D6E2FE39F4AF588A38BFC048CA1C279D24E38EE9FBA40F7BA6352B33814FD5C159AA9C774C1B880718AD5AD43E96
	1E47F4E7DD4ED477C1558EF51C055911D657A3204D2CAC9F5F1EFF63B853FDB766F4ECBE708915FB0DCA394F7EF7CAEFD6A977592F5A0C3A578AE1911CDF7E1BC9DF29D6012E83E8810CGFEGA12BF0FC3715178BA34C5934A6F3B3CCG0C32A1DB1ABFED995FD9484B99A863E14FBFA084DE136BF6AD90310A4976F4695912FCBE1DBCD97B5628C97B32D7030CGB483F481D8817CD7E37BDE26FDC0E61EA0A08D22286B6C252BA4EC9CD938584944783336FDD16129ED412B5D4D713EDDC27AA2FC35722C6582
	25CFDD2DBCEBC9D902E7AD3190D63386679017164A4B8F82FA589AFB19D35738ABFF82553369EB14655FC869B357A84BDF1C0265A7C2D8FBB116FF44E10D908574D8001945129DDD6B2E7CBD95F4BD34D6D97E5714DE3CD6D97EBBEAACDF8DE101EB317C4FB68BDC0F04AD76776BB6FBFFFF75812F164164724E4D6E6755C11BDD4F2BA7EDF6BD2F8E5D6CF9FFB5EC337B7D55A91B657B2BCC2F448AB2C6A5C2DF94FC89B28950825075A56A545EAD2B852AD3AE74E9D7D70FFE27091E3809D8FE295AFDDB3728C7
	BE272BD1133D0C8E13A81A7AC87EC85F21A67DA51A4C1448E8FB5404C730546995D9D409FEC0CD7DD3745D144C667A7915B85777799265EE18CCBB05E99C3F0262719C4FDA628D59A0655965EF35D74A40F39056765B69981D79954CFB3E4235CFB4650786F0AD27E92B10C7562F10875753B31D299C8F20F8BC470B7EE36793248C57BADA719FAB43557990EB7BD9BAB749AC819E15A0BF84CA53G2E6534CBF4DDE3855C1753F6DDC03ECDACC13E9C28A0FC1A497163944FDC4777B1C6DC53113417E75BE60FD8
	46651C17B1DD3BD861DE5F2F2A98D95F7D68FCD48FFA2A3519750CF6F3855D43686E9E50F33BF2FBC5AE276D9DE8B18D98486A2AFD9D61FFD9DD6388EDC4A0762F9452E8G56C8B4AD3CFF878355D54938D63B321958A03A40A39B448338877F649279FCBE0464836B4C68F538BEFCF4A929F70749C2B7BA581AB40A2F5B62A05EECG753FED49CDG6D7F46F4FF2CF4DE4B7E3D9253CD00F8938122GE27FAD2D49E83B4FD5F9EAF71A226D33A0ED6AFAE657293F873C1F06673782367BA68D59476727A4AD3D26
	FE7DCE1D51086DFFB5C55E7E6275ECAF24F9BD36630AB467768772B5E97BFA56FEABBC7DG02F93AA5E94E6DAF636926C23CB8004CD2504DD2367742525D1ECEF42A5B54AF1ACBC91AD02A1BEAF857GB09E35DD9809C7F2BE05C13A2925F69ECD07778DA09B7AA464D114112E636DABABFA2041565F3ECE6BF8D257F848A391E0A5CD8FB6C040FF336ADD5158DE07FEAB41589C7A8F59B807AE7A495DC2715B3999C4F6DD4D2173B7B079685AE0DF834F9A30C96B4449DA622B69E2BDC7A4DDDA9F7EE9895F4F07
	BCA47F2F25B8EF0B81DAF6992E8FDF18D3AE0CF20FDDEB900D7A9DD4B2D8B96AE519926F9B4BF0ADF845916A1786F8GC0E8996EEB28354AFD0DA8880B87C8AC43BA2E5E0A6B227C0DA0139B310E071B8ADD3699641BEDC9C86DBE3B955BBDE1A35667A91AE78460B1GB3B70E358F5FA0DBAD12FC559DF3DD8F2EEDD2BD92D3F0BD1DDA0EED0BCCC37E57GCDAC4775F4E6BA72B0349C6B7C07B9F4FF9970C4007CCD48430039CA9E16C2D88BC057A6AC67D89A7270A25042B6A18FBFA8F328BB5B57E11D694043
	FB53F00FE566A62CCFB44D33F8B34CAD8134G0CB74B6B8481F5EA5B85B2476C578F2B78296BEE90241255DD861D5154333AD4D5DE2A5A34F99D6AC35030FC8F2BE04EC13767AD464DCC8FFC24E7F1457974317561357584E36D0B2C407D0B704D583ED5D4C6E6811E3945162C5A026B71C18D31BBD500EB812CG7EG41G91G53GE6G4C8648D5431A9620862085208BC0847085182846F978A3DB21792E77C000A8ED32514938C54736E6599C6063A51E563613556E66DCFFD9BA52FABFCA6DEA2FDAD8B6D2
	3A95AE4B5BC6534539280FABC8D0231F62DF294D482CD06E1F7C135273AB147BA7579EC199D7C158048A540FC38EB6061C9B47C3D8EE25AD393892752DE688F53326927BFFD18F49CF845C8FA0389267F7A5DB47370FD4B94EF4A61EAE22F2F4BCE4FC7A2A0A54FFDA2512FF6514BE3DD2493F67381D0D0730662D585EA46A4FBCF92BE359D1929E3B551D1C7DEC4473C957F296B3E2BA57F216C34F8FE73A280FAB902AD04E0E4E2572D425645399CAD7D5A97974619C64D3A90479D7211CBDBED7A9E78990D634
	4D16DC3E8D65EC289E6DCC53B61433176959038F6001G1337A15F5B46F43EEB674359F126FBF04C69981FB469F4CFEC1B12FFFBA9BDE61B12FF3F61E3D19C04B5D623DDFD370170A6847028EA340D9DF56B857736D1BAED31B1AA75CC115A72AA5F771B81F94D86485EEE178B55F6F77BDE37D19DD0EFD76EFB5DC7690D5B157BDEDFED4571DB8BE1615B315E57E95C2F1D7CB5A32F1D6E54385EAB39CF633CD7922CF13DD77208C63ED7A2793DEA48F85A83E3CAAB0F9746E9A7B86DB91AA7219DB7F4093D1C7E
	922D9721B769C901C8FF1556EB1852DAA55A6BB25A8974DF551075GB43957E44134B19ABA57B7980D8C0F25F18C7D309C647C78BD2D23412C13557BFDCEA375E66B753482DC2F9755581217533E094C4B2179998D3066E19E61BCFE8B1D2BEAA0EEEB8D2E799F7C1A728DF01F9A5445FF9C91381E24EA6D6FB79C717EBE66A42F16413E17BA2B456F257CEA5877D241708C2FE1FAB22D866D57C347F01C0C2FC17B754089EAA7EBED49D5GAD35483306A139BD69857A45DA3B5E79573A53416B68389BDC2B5441
	DBA9BD2CD6290305BD2803D190D6D2077DF88D1D777B5531B5A52B5306AAFB5FD54A5EDF5A6A7DFE0C75EA992C4D85541FEDA234B90C73619225C582BE0D53E624221ECC6734E23A66906AED498575C8B34CA134D240B575582F27665A7956A5FB7FE80E77F918BE577B3A707ADC540566FA268BDD703456B3F9752FC7DDC81B073A90D20F3A103C00FEDBC3F000DC8D726CC23DDC97CA00DE8350221156749AF73AD0D1CB4FDBB5CADD2827F4DF0DD297DE2BC1DD880430C4DE7E6EF4FBBF9D123D4726F93F4FBE
	71EA995277BE5407051F1D3029009476E183595BA2FE643066B41C27AE17C7A0E2FF8F137169F46D575EGEB0686147B8A3A079E88F8A4275DC4E9B10047F35ADB7C6CE1F683727A6E2DE4BCAB5E0178C39457F0FC4308F600243DBC1E6F9E310C4B599FE6FEB5C585B85F6D027ADA8182814281E2F760BEDE4FB2B20F90499691D97743BB5B4F3BC4475D5990AFF5A746FD7E6BB40CCBF8CA57681D44F5C8126DDB35B8EFD4C39A63CE5443F7355CC7F4A76A216AA8DD63G1EG105D08748FA93D98709AGEDA3
	7649A34708FE9A9B6DFC77113D87B43A534F45A7C9FEA10DCADF4055149E592874858CB9013E0031248E3BD00EDA697AB38870B0CE739DA634D840E7F25A7BFA14375C5DD8771BFA08FC29B9FEA745359CDF55B3DA7DA3F90CCF5E2AC7DD46F864CE724522FA24339A246FAFB6263A76A53B06EC4FC8E9EECFA5E9C488E4E18F6FA2E1565D04177FF0780E5CF5195B53DD4B6F91BAD6C6C2BE513BD1FEFD66B84BEF74EE3B7CFEBA9765B791522877207CEE4F66FE4FFBD0CEFD32699C8870880098CE5F13C34F7F
	81CFED02B9EE9376711CF9C4FE55CD767EEB123D37B539135FA1BADE191B1472FBA5257BB6A965B7F3814AEF9004256EC5393C052EEBFB813F48E9575375C79060E11C1635034AB460711CF663F61469443D581E6D350EE7EC3BA82E5A0778AFEB3CFF46764108E5DC0E8DE5B273E98559379FA2AE031DBAA3BBFA58213334180C06CE1BA4EB736898338120F19F4ADAF3A5D9B343A24AF09E4452B9A54AE9AFCD5BGB001271DC4E9C3867D3059E491276DA371DE28A47C0D0277127D847F28D265216E797B99EF
	D9FE69FAFAEEC2CFCB147E0FEFED156B18995211F352GF8066CC7795FD100FB5D117B51FF6FFC0152FF6F43A4397FDDE80152FF0F4829BD7C3D82257F5EFE077439CB157EFB181E696DDB7B855E3EBB3EA6F7D8385843EE00C53BF1F529EA937CD72F63F2F327F6FC7BAFBF9EE73AB83769E66F7774BDF9G9D8B331B15F34BFBA93D28D9B9377C72A84EADCBA14C3F99774FCE9DA37404E6657ECF97258B87147BBF9F9DC5BB188DE16683E887DE26EB4B1883F25F6ED914B693E842C12419DA51DE949F643E8A
	A7DD7BF617D0FA53C1F6A6EB64719FBB61FD5F6E5746D446D8FD3B19EC1A061C4FE52F99D21ECB7B9FD41ECB5FB76CFCAE7B4CB07713BE484EE5A360B96DA0EB9B1B73FD2E47B871C0CF84A8BA8473980036C318F7F5B651C765B9AAF17AE4B661759E65D9AA2957C5C86FFF88FD03271E167B4F8A6B8BDD7A4F461E5E1D91F20855AF7A107DDCF47A00AD0369711587854E2B53F34626471F4F9D1FBEE6E40FAF1D46EDBA2145139EA75039C2FE0BD20F7FC96945ADCABD3EA61B7B6AC1D8E08B6A7194BA37C8EC
	D16AF19425E7FE2D546383B97CDC96422CDF23FE2E226B6269DF4B75380552920016F998E9EF4CC7BDAEBD0CFAF9F101EBBD7625749608A79EE67E850CBEEF017775782BB115B1BEBDFE385ED90FA36B157E950107157E9577EB1C75B8DC0369C28FB3BD0E02E76CE1F9BA558EC77F0ACABAAF1B85F19281182EBF349D73A9BDE2CB56G348378G849D41B30F21DA25AE13B2A2A1BC668816353612683E7C53DF19EDA8BB366B30F66F4E0666EF0E6CBCFC2839F9C74361EF9A1A0FB71CB842F9F329F20B0774CD
	078E6FBDF9682056D58EAC7D1B15246B257B03747273655C8B8599A9026B736519C7247B1E0E584F17D9FEF336921E6F5413FBE9B05FE13D5C0FA3F1C5F64682B77916EA25EFC635F6FB05F213A21C3D6046AF1F5AD0B6DF1AD7057BCEFEDADC9794523BDE22G1F8E1020C57D58D3A037A959C7ED492A231E6745CCB7BF53621D90449F0365F557D147BBA102A9EE8FAFBD6A7DBBA1F6B914611DBBA1F447847EFED6767E69D16F6F15E59F73E699CCFEE30FA9574D52B7D0471DED490A63285FEA101BE6G9F00
	0023CCAE181D3826155B9B20C78244818847C0560E211DB8F5D2E9A7C8FA8D04EBF91CEDE7DC798299A15C67982E95DE9C4235C260B174EDF9EF984721E9C04BBC0EF13F34224F0A66B86A0956CA77D38177878861F1D7F6E35C48633886B9502DDC037CDA102FA1AEF5AB57A0058E61CFF4AB57A0FD8EEB10BFF6AB57A04FCA612CCE493DF8D6BC1B573F53C06ADF5E8A73B90076D6BCBB1DF108704E8AF8GC0B840B40099G092DF8A6393639C4F0FF164A5CFD6CEEA64C8E9C4FC6BBC0FC0A180C7EBD5B518E
	2466905C9E6E176DFDBB70D036776D404BE44AA93D3FAEFBBF1263FDBBE074EA99CC5F2B66393683BD731C6D407773D0B7F3CFB0BBD0824F1A93CCAE189D78E0BE4651823D974097A084E06A895471A98B14F600240F0770C49E675AC52E7C5972CFC219A7D1DFE757239D501CC4BB9027C1BBE0855AE49E372481F5BB7EA46A513186FAE6F98A6A8E50F28AFD571EB9ACF07EDC39FD343EEB2C1CDFEC47F2FACF218D79FC3B52067C5441862C2FD15A10AC077053B5CA9BE2F0883F29C6E9C326B8581047EA5106
	841D42364F2FA7ED0F85FC96C0E69B5A104EA3F40F2D8D6D452B87C97B5D598BF2124ECED170FB139FE9D570D4C37A96G91408FA088A09CA09AE0864FBB6B10A7DB449C906D360869C4DE95194B8827C196CEBB5B149297B436FE39094E0DEACEAB57B501145EF4DA392ED9150CF2240530705338DEB9C377290A4E581249DE9223F5D21A9AE8E4FF0A255FFD9C5337G5D778C7ADA762CA65FBAF21FDAC3C7DF5960D0DF192EC324F7E9D6D79F9CB49AA52FCB6C3F9B0F73F1698C76DF844DFFB660395F00CEFC
	03F29E5A4A473BEFD07EFE576A79BB586C931E3F032DBB2114BF476FE04DA71472075F4132BA5DFA9277362D5FE07D5FBFC56ABF997029GF13C7E5F1E61639D0F3B2F080EF76DB05E813437639873D36ADBE0ED9F5D586247534D989E5F5A7CAF63CC375EBABE1F2A29F41E92542E1459DFD3FAE83BD2E6CFDAD16642A12CC8076DAD6E9E679EC6AF2673013C82GC2F4F6DEC7685C695A5BF4FEB2CD275C0B788325476914FB9186836EC54C02B0ED875A070F8E39771FCAB8B4327F549707DC7BCF2534B87BCF
	E53638761F1A57A2771FE2751DB40F73996ABA2B83E57763F928FBA51DA83BC573C95CF6402DG7E1D98B7BB976306F4221ED667FA56D3E32EE7BD3DB757331ECE4B752C271FAEC0BD0D63755F11C76ADF50E5CBAE87E86A427A3F3488571F6DDD98776799A4EEA060138126F6217CFDC17D9E623AC6697B4B53FD20991F5CA60CB35D06067169696BF49E1129D76A691B141E2FD76AE9DB8377D1063089FAEC6F346D632B77D33518AE9E72CA84486D36733A385B1D1EDEC567GD55DCABD3D01521B3A15FA3A28
	9E75349542A23AD1CFFB0E10396200B48F103E67523A575DFB34A36B6EA42DEB5D8D55BA6B6E93DA573A7B2C565977B1C24A174CAD8E6A7AF83E2FE849641E4DF78F687AF5BD749BDAB63E7F1B6E3528FA98BF982D0952EA00565A03F303B7855C4BB476E01F5EC66FC1E76F774A5E3FCA767E7AC16355B258FCC677A51189492F063A09B2FA11B547CEC7B7D129DE4D4747A767A747196E56B12713FC64DBC95B7CFB14FA3D0D52A776A8757A95BE678B01306CDE1401A7DA47D76F40131E5219FB5D697531B6D2
	0F893DCA3DEE277400DE25DE471FC23D8E0630CC8356FB680C3CFCA350FDG828C52BDAC86F7653FC867EB9186E579D3A9BD5A20AC3F25884B1F8EE11A3328CF3F9BF2764BCD99C63F5C6033D84FDF11EB0DA41E3DADFBEF37FADF47ECDEADC33A470A6E81CD067646F05E8CD3DABC6039671076EBCAAB863C0A538A8CE8131A4EA13FFEEF207EB09C7F10627E9CB7993C55A6FB193EDEAB436E679BBAEFFCFA777CB853FDBA66F4CCAF7C699CB16C1C524E5CC969116714F6E675FC34B35190D6EEC41EAE489DDF
	3DE7AF7014AE4068CE4F1F21F3439023D24FA3A9BD5C28547326BC54732990D65A07750EDAA4AF5F9F6841FD32BB787A5C15DF1BC96DC91F327CBD14BE3DCFD97E9B99D87ECC88EB69C79D4957B87BBC57EA5067B92C1F4F4F088B0D4433F7E46F9D8D5E37B3973CDA86EB736BF41FA8925ABB0373E6CD9D755184DCE5C25AF71426863C0953226A504E341A10DF5755BB7A405ECA7189BC3C305E7BBE306A914B38FC7F2D06AA722E9B94CD0775830673FAF2639206FDD3C566C1E60B3EDBEF31683B58755512DF
	16154EA1C3009FE1A65CBF7D33407DB60016G10EF36A52B8134E664DBE52BDD766AE56FD30FFBDF8E7F6055B218ACBDFE92E5C964EDEEEBF33C4B251B6201BC7C63D35E3F4BA5234D7BF7395CC0773F4221DD51E6542D3DD4CEE6811E7AAD5226EEA33492402BB8EDC9A1722D79DBEEDB0B9CFDA8FFC5F1B38FBFD664FD9FCA5308E5DC0E8E32BD7BAD740C1669DCC56F487E14AD3D68CF9970AD7AA85C58BBBAFF4AC7FA511FB206270D6FF576277CD7AF61F53E857DA9B79AD49E5A2132487DA9933A48BBBB71
	37DF82454EC68A4EAA7DA9091F379A52B7D930DFEFA74BEF097F77495ECB66FB5FC6B4F8358CA66B7397222C3773B6C764B95A081FD1FC828FBF1867FD9B516315B29CED443BF46FAD985A95EEC15DDFC76FE6188E78ACCE3BBD9DF914BF00BC581969781D40810AD771705FE6F87FBB010FC7DD46F86C823387470E8B826A529FEAC736870935E88F5A86388FE35D686C4131BA348793F95A00BAE7FB7013BA426B6983E88F5E2DD3F9E8C77CG63AF537928FA254E93BF78C40813AB6239658D2D76B6CF95C85E
	8E67160D06BEFDBF79112212CD1BAACAD51BAA2B56313D5C5CA4BCC7AD91F1AF3AA9C93997DD683097FDF512E75F6BE71314FB510EE71AFFCAF267FB4D66C1BF633EA26DD0A791A0GA08CA086005DD7F4C71B723EA662631BA0E29F841FF176271B427DCBB28719BF1D8A1E6AC166974C5235D7B91FFD8FD7E13A66C166CF5785CF2BC33A7F596668CF77D7BAC67BC31C0903B83FABAB44FC22C9BEG42905481C0B304E75F7FAAD21E0F13B25AA1DC9C625FD475DE1EBF5D4B3D1767CF3748E01735E6035C970E
	49D44BD96E1FB60467836BAB29FF9A605381920610A7DFAE4476E68F83AFGB4G6DGBE4358571F65A97B1A7801868DA3BF7E3248392F3396E33EE1432C2F236199C75EF9BA0D0B3B290E733B290A2C2C2F5570EC324AFD209FCD677289F491A0GA08CA0460A7D78FD26329F095FEA8204E75A307C3C3A4B6B473E3A4B6B4717E577744C2EF36E4744FA6CC7158D7B719B7A9BF12D001B81FCEDB8F6ACCA122F6303009EE673BCC630B2E61E44333029B634BF4BCEA96D4F638E76277914527EACF530BF5F1FD2
	5A1F079D6C4F64D3CA7B13A5484F42FE5506E7E142F91B64DB72308E778F2A00E6BE0FE7E11F6850FE061CC79E5DCE6F0408A3B8C9FF8173382F8A77EECA0056FE817378308AF990F8015FBD330D1E23829E8FA0DCC4BB3F67143D4F66960E4DBFC5DB086594DCC4DEDFD96859BFA52C5033FF4A87051E7DD38A0ABC7B27ECDD0EE77EAD97316D01AB6837E700878104DFC499BBFA164858B440E7DCF4162D59AEE8525D9D5476E4FF275CE38B2174026F14FBEC1BAA311F0AA14C77BB6C2766057C8E2C6F78F7CA
	8BBD4BEA68C24F327A5EC24F321A1B67D9D64B72D1D60B3FC7B95B3498E5358DE8815FE37DED0BD1D6233FC7DEFF1EC56226DE0276G28AF217D8A1D237441EA06B0B34004CBD84EA5FE0F4BC42045DC42F2DE63F705E57BE0B9FF25F19B81EF8390FDB06E1B6998574F87F91A14216429235F65168CA5CF9D7DAE7599CA1EBA7ADD5E11216429235F65B319A813D13C7ECB681DBF090067DFE1CBAE3D025F0DC44F1B9B81EF3D42D97E0CAEE85279B03523BED7A8E5F2BA257BDD2114C9FDAA72BA9042922F40F9
	FEE9927AA4E5F11F24CDC96813C466ED2C1E1FF8BCCFF285AC5D1BED1E5235DF696E6E2747F5A315677A6E2797C6CC677A6E273F51F4220B7A38825FAB711B17B954A6CF3CD2598FF9149EF225329FA672BB3242A02C60AA7E0DFF55B84F6F4719EE661853C9F72B50F16562D54A765EC2693ED7A95BDB388D5B9BGE133F9FBCF940E2F5EB54BB1DD5B8430A7G93A6587BACF002BBFD49DEC97D1EA6A8777B97D3FA448465FE7F3DAB5086C6C3D8795528AFC6BAB78D38DAFE1EFFBD25CD86DAB40F77319A574F
	F1D773BE265F11C85F8F4A5E37D6FAFFDF256587A8636B05636B53AD791E5225DE634EC6ECDDBCBE9B31EB44F42EED4477B4DD010B7A380252EB50C674D15B2F39C629B3C3145EFC0DD2E77E1505BA538AE1915760187A1A4318CA6E07D3DD8BEB8B0036EBF1BC3C219A675C6235B876B454D15987BC8AE07A35A80FD70F731E37DB4719AEFA1C77439968BDF08957AA79E721F441D7493FFF70F9C5B60419FD313D31E37AFDB0FB3D27E4E23A9848AB9EA05157AE8339573933B9BF227DDBFC1D52665CC6696A6B
	14B6E7799C34B90D9096F29DBF0727670959574BEDCEA52515G2D71FA0C37BA051F23DD0FEDFEC7761B346F4B5E4F25FA5F9ECC70EA992C4DFFEE43B6DF64FC48692077C6G9E4EE9AB68DDDE51574B4FE4F3E577F7AD153DBF70835C65B56587A86326ED76B6854A5ED7ED73FE5955DEAD037569913A760B03BECD7D9176F3A82595G2E613474950426853C17538E2CC039317E8865E161CA47B367A20A87737060955EBFF3FEE144B2AE7F4C792A33645D7519737DE75D1FB9EB4C04E7D3019FB1BF427D37B4
	FE2F396087EB9BGB50096C074C3DE6F4BC7DE87F05AEDF4AD998E78B4CEFBAE0B50E678496FCD9C18E3175B0B3277349F602E3895DEAD035D95777E9C3CABEE369F3BABAE7786DBF2718DCC0EEAEE40F1FDF98E0E6B5A9BF0DCDF16CB57FA008783C45C00BC3B25DABE4E45GBD7E863BDCA65E60EE3CFA1A4E93F2EFD40ED7AFD13A6AC665F835278E472BF2888B38117B00496E07334A5E13523D5FE74B3CDA8613535F50757DECE8EF51CDA83B6B296C16835E4AE9D7D31A91F09FCE0B4EC2DD703F8979F573
	9CC71F3A3BA99E414357F8CD8E6DE556F82D0C9481ED4BC68D41DD5B1D839A77F6271B4EF562009FB3EFC23B33AD856DCE013FAD39942099408860670FF112CE736F0A0196899087A05C8C73661BF18F3D3843757DDCB5F48E2101F84DBCEE45D6797DDC0CF6F679486703D7AF4773410BBC2F1FAE9F5D79607FAC477341881EF6798A6773C1758AA2B309B76379E0578A1507BE493CC5FEBEF8E02572FC1078F894C11C72DBF05F78EC1B405B7CC7B549FBF467036BABF04F3069965C1F6B2C70FCBEF8DB056773
	4157AABC1F8FFEDE6179FCD0170F6D7501BA85G048144GA45C02BC8EDD6CDAAE22683815FFAB48502D98F7DA16DCAE18ED1C4B6FEAEB01F83E37229DBFB29777DBA3EF657B55B46EEC40F383207F8278D9893DE7C583F8AB00B9GF5F5F58E316F3E81F6BBBED176BEB9401DFD3F110E97D1814A3B5A6E227469B2BAEB030A52891EC06AF09B5A3007699AB38270E91CF6BF7DF6B581704C5B11B62F165F4FF2BB56FDCA1D238F412B94EF6161876A3C6FC350BD6AB246B357E2B271274C116DC2EA965A8571F6
	14259DD923338BE73250AE04713493331C6D42D3D9043F893723DD78E3164AC35D05BB64F6A1FA0E52AE90DF0FFC08D3F2875A0505E7845E66A5A9A46F515905EFD2787757F720DD38A34533DD78F90AE73B700F944FF6E1C32ABB3B406A7455E92C131557691B531E6F113B793467BA7D743432CE0E77487D75343BBAB17E76375B793BF06BAAA5FF5D5CBFA54943724BBB9F7E5B724BBB9F5E3742DE77ABD6B81F8FDF3D926734136FC01B777DA031B971008B01366402C0348B658E3F43D98E744640511C8FDF
	1B0FFD5A9A08FD7AD23E67BE7DA45FF31F2ED96439CF0FAE725C272FF7587972E856E87BD472539F671DE2AB47192E55EDBAFFB77C17765B597D2301CE7B6D149E9668345FBE975792D190D6F2A76E1D3EC9637B5D69F44EC56901F7BA1DF3E563389B8CE119F761D8340D2E1F0CF7496F946B253489C08B6471BE1C07E3D644DD7CF78D69B868FC27D89025475D45FCC2D26FC67A17395E3FD32CFECCE50C6FCE3148EAE73F18372B15FEB1A5F7AB7DE24237BB7B453C416F822B391B7945E86159FB375CAFE6AD
	3F8B4C876881GE1GB1G89F7639E785F6A14FEB1245C7C09D00F09D8FEE15665593D412C4B33FBBF27D7FA31F7E10E335DCB1D0BF6CFB3916D5EA43A1636826E8F90B291E529ABC52EFF11C00F1968596E31F42527656962A1CD622852DD3F12244B3D87646E9E6778D5AEE8CC9F7FC26DF673BDCABD7D8725375E23545389032827DD90B6759E543FBD954E67514D954E6751FE8EE7C625775A12B5770E66DEB253DC3C0F0878A3C87BFE0A7B080AA8EE8F8FF6784DG6F5CC77402C3995E390F689DFADCA21D
	85485E4FE57FGE781DEAD0369DACB0E6B7B08AE65B85B235BF378DDC377327B080C70743917498533C77F64F7968582BD94A09AE0A6C076FDE80F5E4CD55AA3123E9442B5BC4E937972B8688B538A61467BF0DDB8FFBB4ED3A6G0D6948E75BD1C7A2001640635657204FCBE9905A0FBE7A3B8DDD00DF84888842387BEBB1EEE8904EFFEC351E7DE3FED26B59BF6677351E7DE36657F9760FA9633FE1B503577FA6FA77D2517D36E4B5C0737D7CF716697C238BF06B7D4EFA676702466C4EB2FA5FC0507DCAFB34
	0652C36FD75A2350BA64F5B80495BD007668C20A33BD72C9115BA3C65BF95A79EE1F2653723BFD24F5B21D737ABCA0BF4BFB0952A682AD1C175BA062BCA47A8164456CC13B4EA68D595F2F9F743E7EBE6855B2245FCD4AF766E1C83E737DC8AF72FBE3E781EFCA9EC4D9CF67F72834BF08F22526772D8482BE99E0AA0FDBBC9F6346BD08FAF1F83E67BBD4A64CD76A05639DAA4F4CD76A05639DAA717315FA7115A0570B397C8E1502E02C7F4905247EAD0077827884E37D7F140FBA944863F650FB8C27819E8FA0
	BC04F213CF6F86A9F8E814FE8BBC5D97633CD3E4EE4D7852B50EB91DF4B79035FD1A07143A7EE7CAEFFEC8296B83B55C3F8242A2F8FBDBEA47D76FAD7C37F9D41340FE81B4CD127DF642A4F7B6AA055E65E21E24DCA365D03A4FA4659A69B68D2E117CA1ACE1925A8A951D53347ED8EED36A58BC87E87EBF663F4544776302FF0CEDD6515FB0E56F6BE46FCF0EFA0FEC7CB66597DEADC3DA0B2CA46F2E4F9C5EDA697E4C617FD11BBC95789473E31C8F340A7C2CB384569CGEAGAD0098423F194C991F8C7DE61C
	69660E735E0090EA9783C214BA7384258705A8F5261A5FDB958AE1398FE3FB574D9FDF3DF3BD5E9BA0BE6CCEE7FEC56D216F43CA1D092574400715BA533E90F5A68442329F615F7CBA2C9F4CC01FG907888ABB77491F7653FC5EDEC64A34A7263186DFDC4D9FE6FB0169F87E10DBF6167055B1D4F3F355B717C5BFEBF490764DAE809E733E46F3691FFDB64727573962F16A179865039E08870A51A7366C1CA0B83BCB394E9DFD0DA9160651C5628C1FB268965734586473354BC0A9BF9785D9A6F1F2506F92D8C
	7BD96A563984F7ED570E4EF5EF577A6938608F7C18980AF64D076F3BCC855AF400C40022C7ED49B50F62BE7FC71D82AF3BD2D489235D677FDE44F5CD5B23B84FFAC6743C4F9FAFFA5EFFDDB668F91F3FF9505D7E2B64FBCB48527B3332F74DBC6F6B54892F164174622B855C5F66D1144918050E5FB73FC771F09E5E3D507B5FB7DF72CA990E5FB727516F1BE321DDB39FC5BBD1C97DB5F29F33A597BF06342769D9D993602D1C36F18879E6FC8C79B2FD58718E048FA86E4F437B073DFF874235A316F179BEE13A
	7A114FABAF5663F9E558E37CB7776AC7F7DE79D6BD1ED7A670346C6E9C47734A757437FC550F63F965A90D4AC35DB50F4B4FAB9B9B14671564DCD98BF1FA9FC7BB16CBCC215466B335A46F515931C935E847FC9EC7BB761E53BE0A239D4B2D73EC47F654F936E32253BE0A239D3BCA144FE14221DE510FFB16B5E66F6B789D5AF190BF81A0FFB24CE58134G6C1B5979CE5F4C12F38EF1B276DD110BEFE63770FB37FDA7333301A0F806CDE6E7A3121FCF2673DEDC977F56B5FAB2BB9B18C152BB240B4EF27CBE7A
	FD2A3F39CFC0DFBC016358EE7E3BC54DC0EB877081888208FC82776216D8157BF5240CB888CFF8824B3A357E724E8FBE2A3F3C7303860DDDC62D9A6773030B8DF8FE107DA42E7DFD6977DD0D00378108CF22FD7A09431A568F68C1CF0EE61F7CAE51F95F6BBED13E6F456A5235G77D1421EC43D38E50167EF9A2396A87542711B463FADD06A0563B70DA58B15FA6178CD636EBC5CC71979A46E251EDA047370622700C7CF61BE4A030BD02F831EC2DEDEC56F7A0A86FC86C062D31807DFA62E017243EC494DE118
	C7CCA672E0C2987F9DDF7A8DC78460B1GB343507E041E33776D1A2131FDFFEB9C42F2D21FC6DE5FB564797B5B68A1A52F9DED4CBF07143CF67C7E36FC58737737072C388FD573B436FD0A0D34DD845C8FA078E91445AB689D399100CFFB5AD986E738203135D5A2156D59CFAB572AE974BB0F54E714EB559B79370E3990A6BE03637BAB354EB27DDA2D73591241635A547DB83DBF4FD33A58E75CFD4724DBB4D2F92E3FE3B20D184E75F7CCA1B45DCC9775F1854233F8967F99550B7CE7157DA0D03DD0BD2B6C07
	6BB2309FCAA14C7FD96E1F1CB9BE7E860DB35DBBE3CEA7FD1FC5F5B841293D17A8DD88D736B713FF37158DE166F0EC6F37C3632B37165F7D9E83F94583A4064B3EBBFA4E1D3EECBCCF3FBBFACE39C7310D52554FA977A8DE36716F0EA0AC64B95417C0BA4EE4BFAF5FD7FC0652CA005678BC465BEF7F6E68F9ECB37D49825C23123D877CG5F9DBD7A83FCF75411473FBB62FCE0771A87819E4EE9BBB368F7C74F4B3FBB7AA2434E8F7A79BAFE2FB36A3B0D464F1B109F200C0BD976B6DDADFB1F17657D323F72EA
	992CCF4F51B1AF8E7AB4F58A3F4312528AG57F05ABA9B7D6E8870DECEB35B78F7C7D3D09EAA4EBBFEF7D4CF71E09E7E1A4D7B5F9D450DD846652FB19FEFA06F2E772CFE5960FE4F6A83EAF32682BFE22660DC3F037B7F8B9130FE81D083E88144880CE34B43B881C08B81188A908F1079824E755FDA645A4F7BE32A4BA590CF4D631E4CF0767F3F52BA723A799EAB2E1B3BF8DE9FD8C737EECE36613AB9182755581C574D47EDC4E6E63C006B66EBEDAA8F7DB16B85793A59FCDE39EEA67B9B29AF5A128BDE44F9
	6B9BC60137D9B386BFDFDF6E67DB7EA24ED9A3C770737D4B88FE3E45291E574D47C670733DAF8F6B544B6B74F61E32CE0EBE21D9A37804EE4FD7564951A734AF5FDD1D245F0DB259793BB5E3ECFE3EE1564BDB2FAE35DD5EFA354FE62FFB304DF93D9AF29E572BC1AF629A618DFAAFC4AC6033GB2DFC2DBF703033F1B8A686A17C66337966CB077EE02B4ED23CA7768F9124E8CF1A738089F680AC667D2BB2B299F49CB4A39E1B325073F241C9B7E165F039185E1A511B89E843B70AFF95805FF4914BCE75F0848
	BCE77F12A84AEB3FC8791C6DFDCA8B81DA94AF7716AA9C07E2A31177FB2B854E17433277F7FF006F05933CDA86134DF74F3B9FFFBEBF6FFE7CD9F80170AA91781479B20EAD8F73BB7D54C0EB826885708588F999ED66BBE63BDEDC31C1A50C56E63ED10576E96A4BE81FB236F936195B36F936CF6736F9361977EC733C579863F0DF0C708A0C392F0CE69F69FF2B1C65FBD615DC3E17D07E6CDE3C87AA957A111086E37000C5184F593437FFC0AF8E448DED29CE796303A949C26ADEA11D7D364BDEA1157CC04BDE
	A10D7EFE4BDEA1C5B4192DE629FD29D29B32873E953E27EF24D549D2C88E141163E0DEDF3D3F620368770E8D248869FB0525E42771081E58DB10042EC61D28BB2637104E5AADE419CD868884BAD4E000BE5286C41BD15FAC64F79F56FFBB289F9075DD8D22E8B1F48C0A00880B1AC9C99B87C503F1E313EE20D7A4B773EEEF96D27BF5FDFAD1D848020D3A7E1E0D6C97713653D6A4310DC0012EB6213EF9343EA417B21ECB5E1479EBD76D1B911EA2A46F966698CD3A2E5D3ACE51E459ABE4093D967DC02F4958E5
	B557330CB2698FE090A74994482E10B71FB4360CB8CC72CA1F335E6317931F339B58E535889BE9CC91A2147198DDBBFBF596A8CAEF598B2003A20BF95895AB44AFFF39E7C9DB3210A4B512F4C13A55AC8A695D3ABE035186AF0DF4130BF64E9C91EAEB51758FF41BACFDD0B31522E698448BA83B75676537BD7C771334GFBD2D1D849D889C9B77668CDFD9B9B3A3B8D7DFA1E81709532DF4E33A7F14A94F196DAEFDE346F377F6AGB9E894D27A4A4B695FCD746FE672F79325EC2214CD1B013933840F7F1461D6
	ECB3959EAE6B247B4BF6C38F0A3F7B68678F3CDBB3EBA634EE3710B624B38E6A2193F26D318E8E76F568AD57045E36FCEEC05C0FC89F190928D8C93E732CDC5EB3E4728EEA1509F7C10B4246A33D26C1E317CA6C552B4C3D26FE3D2A1FE6B9206A509BCD4370D78533D9233ECBE532287AC159045C833AF3FAD58B0D3B9302A0131C03A651508D53DE9154E20016CAF52E211DB6135800A4CA4DF4923FD4C24EF6920274E17AE3BF94ADA0E9484BFC0AAE20FF73474CEB12EAB14B10540B622B2D17D3D9022DA1FF
	56FA27F66B6535E3F5E18640F56DD21CEB771F2B13C642B7D9C5E1EE23FE2053E2B0135E9605B9AD9613192CFA7483A0418B1D8735069B5FF9BB741B467CE4A1998CF62F1ED96834E172B3CF543A0510B67D77B5F5BBE37FD6079ABAE27F250233733FDA2C770E162F2C1E7F5F6560EBD7757DAF65ED2B222EF47EA3886BAED5C975EC3BB9C8083DFAE3864E6B14F33512E8693E9169A988BFCBE73F49BBED99E91395688151781BFD2AE5E4AF4365EF6FB6F408C77AE0F890F546F38D7DDD7B40AC6C3009642779
	245F4A7B6DB2127FG461182D95874E5245EE7E5E97E8FD0CB8788F054DB83ADB8GG1C4CGGD0CB818294G94G88G88G630A3AB2F054DB83ADB8GG1C4CGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGE7B8GGGG
**end of data**/
}

/**
 * Return the JCheckBoxPhoneCall property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxPhoneCall() {
	if (ivjJCheckBoxPhoneCall == null) {
		try {
			ivjJCheckBoxPhoneCall = new javax.swing.JCheckBox();
			ivjJCheckBoxPhoneCall.setName("JCheckBoxPhoneCall");
			ivjJCheckBoxPhoneCall.setToolTipText("Should the phone numbers below be called or not");
			ivjJCheckBoxPhoneCall.setText("Make Phone Calls");
			// user code begin {1}
			
			ivjJCheckBoxPhoneCall.setToolTipText("Should the phone numbers in the NOTIFICATION window be called or not");
			ivjJCheckBoxPhoneCall.setEnabled( false );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxPhoneCall;
}

/**
 * Return the JPanelTrigger property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelLoginDescription() {
	if (ivjJPanelLoginDescription == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Settings");
			ivjJPanelLoginDescription = new javax.swing.JPanel();
			ivjJPanelLoginDescription.setName("JPanelLoginDescription");
			ivjJPanelLoginDescription.setBorder(ivjLocalBorder);
			ivjJPanelLoginDescription.setLayout(getJPanelLoginDescriptionBoxLayout());
			getJPanelLoginDescription().add(getJCheckBoxPhoneCall(), getJCheckBoxPhoneCall().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelLoginDescription;
}

/**
 * Return the JPanelLoginDescriptionBoxLayout property value.
 * @return javax.swing.BoxLayout
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.BoxLayout getJPanelLoginDescriptionBoxLayout() {
	javax.swing.BoxLayout ivjJPanelLoginDescriptionBoxLayout = null;
	try {
		/* Create part */
		ivjJPanelLoginDescriptionBoxLayout = new javax.swing.BoxLayout(getJPanelLoginDescription(), javax.swing.BoxLayout.Y_AXIS);
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelLoginDescriptionBoxLayout;
}


/**
 * Return the JPanelValue property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelProperties() {
	if (ivjJPanelProperties == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Notifications");
			ivjJPanelProperties = new javax.swing.JPanel();
			ivjJPanelProperties.setName("JPanelProperties");
			ivjJPanelProperties.setBorder(ivjLocalBorder1);
			ivjJPanelProperties.setLayout(new java.awt.BorderLayout());
			ivjJPanelProperties.setFont(new java.awt.Font("dialog", 0, 12));
			getJPanelProperties().add(getJScrollPaneTable(), "Center");
			// user code begin {1}

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelProperties;
}

/**
 * Return the JScrollJTree property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollJTree() {
	if (ivjJScrollJTree == null) {
		try {
			ivjJScrollJTree = new javax.swing.JScrollPane();
			ivjJScrollJTree.setName("JScrollJTree");
			getJScrollJTree().setViewportView(getJTreeNotifs());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollJTree;
}


/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPaneTable() {
	if (ivjJScrollPaneTable == null) {
		try {
			ivjJScrollPaneTable = new javax.swing.JScrollPane();
			ivjJScrollPaneTable.setName("JScrollPaneTable");
			ivjJScrollPaneTable.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			ivjJScrollPaneTable.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
			getJScrollPaneTable().setViewportView(getJTableProperties());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPaneTable;
}


private NotifcationAddressTableModel getJTableNotifTableModel()
{
	if( notifTableModel == null )
		notifTableModel = new NotifcationAddressTableModel();
		
	return notifTableModel;
}


/**
 * Return the ScrollPaneTable1 property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTable getJTableProperties() {
	if (ivjJTableProperties == null) {
		try {
			ivjJTableProperties = new javax.swing.JTable();
			ivjJTableProperties.setName("JTableProperties");
			getJScrollPaneTable().setColumnHeaderView(ivjJTableProperties.getTableHeader());
			getJScrollPaneTable().getViewport().setBackingStoreEnabled(true);
			ivjJTableProperties.setAutoResizeMode(0);
			ivjJTableProperties.setPreferredSize(new java.awt.Dimension(115, 168));
			ivjJTableProperties.setBounds(0, 0, 132, 269);
			// user code begin {1}

			//do this to force the table to layout completely in the ScrollPane
			//  VAJ puts the above setting on automatically
			ivjJTableProperties.setPreferredSize( null );



			ivjJTableProperties.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
			ivjJTableProperties.setOpaque(false);
			ivjJTableProperties.setShowVerticalLines(false);
			ivjJTableProperties.setShowHorizontalLines(false);
			
			ivjJTableProperties.setIntercellSpacing(new java.awt.Dimension(0,0));
			ivjJTableProperties.setRowHeight( (int)(ivjJTableProperties.getFont().getSize() * 1.75) );
			
			ivjJTableProperties.setGridColor( getJTableProperties().getTableHeader().getBackground() );
			ivjJTableProperties.setBackground( getJTableProperties().getTableHeader().getBackground() );
			ivjJTableProperties.createDefaultColumnsFromModel();

			
			ivjJTableProperties.setModel( getJTableNotifTableModel() );
			ivjJTableProperties.setDefaultRenderer(
					Object.class, new CTITableRenderer() );
              
                          
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTableProperties;
}

/**
 * This method was created in VisualAge.
 * @return CTITreeMode
 */
private CTITreeModel getJTreeModel() 
{
	return (CTITreeModel)getJTreeNotifs().getModel();
}


/**
 * Return the JTree1 property value.
 * @return javax.swing.JTree
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTree getJTreeNotifs() {
	if (ivjJTreeNotifis == null) {
		try {
			ivjJTreeNotifis = new javax.swing.JTree();
			ivjJTreeNotifis.setName("JTreeRoles");
			ivjJTreeNotifis.setBounds(0, 0, 165, 243);
			// user code begin {1}
			
			DummyTreeNode root = 
				new DummyTreeNode("Notifications");

			ivjJTreeNotifis.setModel( new CTITreeModel(root) );			
			ivjJTreeNotifis.setCellRenderer( new CheckRenderer() );
			ivjJTreeNotifis.getSelectionModel().setSelectionMode( TreeSelectionModel.SINGLE_TREE_SELECTION );
			//ivjJTreeNotifis.setC( new com.cannontech.common.gui.util.CtiTreeCellRenderer() );

			DefaultDatabaseCache cache = DefaultDatabaseCache.getInstance();
			
			synchronized( cache )
			{
				root.add( customersNode ); root.add( contactsNode );
				root.add( emailNode ); root.add( phoneNode );


				List customers = cache.getAllCICustomers();
				Collections.sort( customers, LiteComparators.liteStringComparator );
				for( int i = 0; i < customers.size(); i++ )
				{
					LiteCICustomer lcust = (LiteCICustomer)customers.get(i);
					LiteBaseNode lbNode = new LiteBaseNode( lcust );
					lbNode.setUserValue( NotifMap.DEF_ATTRIBS );	
					
					customersNode.add( lbNode );	
				}


				List contacts = cache.getAllContacts();
				Collections.sort( contacts, LiteComparators.liteStringComparator );
				for( int i = 0; i < contacts.size(); i++ )
				{
					LiteContact lcont = (LiteContact)contacts.get(i);
					LiteBaseNode lbNode = new LiteBaseNode( lcont );
					lbNode.setUserValue( NotifMap.DEF_ATTRIBS );	
					
					contactsNode.add( lbNode );	
				}


				//add individual addresses
				List cntctNotifs = ContactFuncs.getAllContactNotifications();
				Collections.sort( cntctNotifs, LiteComparators.liteStringComparator );
				for( int i = 0; i < cntctNotifs.size(); i++ )
				{
					LiteContactNotification lcn = (LiteContactNotification)cntctNotifs.get(i);
					LiteBaseNode lbNode = new LiteBaseNode( lcn );
					lbNode.setUserValue( NotifMap.DEF_ATTRIBS );	
					
					if( YukonListFuncs.isEmail(lcn.getNotificationCategoryID()) )
					{
						emailNode.add( lbNode );
					}
					else if( YukonListFuncs.isPhoneNumber(lcn.getNotificationCategoryID()) )
					{
						phoneNode.add( lbNode );
					}

				}

				
			}
			
			//expand the root
			ivjJTreeNotifis.expandPath( new TreePath(root.getPath()) );
			ivjJTreeNotifis.addMouseListener( getNodeListener() );
            
            ivjJTreeNotifis.addMouseListener( new MouseAdapter()
            {
                public void mouseClicked(MouseEvent e)
                {
                    valueChanged( null );
                }
            });

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTreeNotifis;
}


	private CheckNodeSelectionListener getNodeListener()
	{
		if( nodeListener == null )
			nodeListener = new CheckNodeSelectionListener( getJTreeNotifs() );
		
		return nodeListener;
	}


/**
 * getValue method comment.
 */
public Object getValue(Object obj) 
{
	NotificationGroup gn = (NotificationGroup)obj;

	DefaultMutableTreeNode
		root = (DefaultMutableTreeNode)getJTreeNotifs().getModel().getRoot();

	List allNotifications = getJTreeModel().getAllLeafNodes( new TreePath(root) );

	// store all of our selected entries in Lists so we can set them below
	// on the NotifcationGroup
	Vector notifDestVector = new Vector(32);
	Vector contVect = new Vector(32);
	Vector custVect = new Vector(32);

	for( int i = 0; i < allNotifications.size(); i++  )
	{
		if( allNotifications.get(i) instanceof LiteBaseNode
			 && ((LiteBaseNode)allNotifications.get(i)).isSelected() )
		{
			//treeNode.getUserValue() is the attribs of the checkbox data
			LiteBaseNode treeNode = 
					(LiteBaseNode)allNotifications.get(i);

			LiteBase notifElem = 
				(LiteBase)treeNode.getUserObject();

			if( notifElem instanceof LiteContactNotification )
			{
				notifDestVector.add(
					new NotifDestinationMap(
						((LiteContactNotification)notifElem).getContactNotifID(),
						treeNode.getUserValue()) );
			}
			else if( notifElem instanceof LiteContact )
			{
				contVect.add(
					new ContactNotifGroupMap(
						((LiteContact)notifElem).getContactID(),
						treeNode.getUserValue()) );
			}
			else if( notifElem instanceof LiteCustomer )
			{
				custVect.add(
					new CustomerNotifGroupMap(
						((LiteCustomer)notifElem).getCustomerID(),
						treeNode.getUserValue()) );
			}
		}

	}


	gn.setNotifDestinationMap( 
		(NotifDestinationMap[])notifDestVector.toArray(new NotifDestinationMap[notifDestVector.size()]) );

	gn.setContactMap(
		(ContactNotifGroupMap[])contVect.toArray(new ContactNotifGroupMap[contVect.size()]) );

	gn.setCustomerMap(
		(CustomerNotifGroupMap[])custVect.toArray(new CustomerNotifGroupMap[custVect.size()]) );
	
	return obj;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception)
{
	CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	CTILogger.error( exception.getMessage(), exception );;
}


private void initConnections()
{
	
	MouseListener tableMl = new MouseAdapter()
	{
		public void mousePressed(final MouseEvent e) 
		{
			int selRow = getJTableProperties().rowAtPoint( e.getPoint() );
			
			if(selRow != -1) 
			{
//				StringBuffer sBuff = new StringBuffer( getJTextPaneDescription().getText() );
//				int indx = 
//						getJTextPaneDescription().getText().indexOf(							 
//									System.getProperty("line.separator") );

//				sBuff.replace( 
//						(indx >= 0 ? indx : sBuff.length()),
//						sBuff.length(),
//						System.getProperty("line.separator") +
//						getJTablePropertyModel().getRowAt(selRow).getLiteProperty().getKeyName() + " : " +
//						getJTablePropertyModel().getRowAt(selRow).getLiteProperty().getDescription() );


//				getJTextPaneDescription().setText( sBuff.toString() );
			}
		}
	};	
	getJTableProperties().addMouseListener( tableMl );

	// add the TreeSelectionListener for the JTree
	getJTreeNotifs().addTreeSelectionListener( this );
	
	getJCheckBoxPhoneCall().addActionListener( this );


}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("UserRolePanel");
		setToolTipText("");
		setLayout(new java.awt.GridBagLayout());
		setSize(405, 364);

		java.awt.GridBagConstraints constraintsJScrollJTree = new java.awt.GridBagConstraints();
		constraintsJScrollJTree.gridx = 1; constraintsJScrollJTree.gridy = 1;
constraintsJScrollJTree.gridheight = 2;
		constraintsJScrollJTree.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJScrollJTree.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJScrollJTree.weightx = 1.0;
		constraintsJScrollJTree.weighty = 1.0;
		constraintsJScrollJTree.ipadx = 190;
		constraintsJScrollJTree.ipady = 321;
		constraintsJScrollJTree.insets = new java.awt.Insets(12, 4, 9, 1);
		add(getJScrollJTree(), constraintsJScrollJTree);

		java.awt.GridBagConstraints constraintsJPanelLoginDescription = new java.awt.GridBagConstraints();
		constraintsJPanelLoginDescription.gridx = 2; constraintsJPanelLoginDescription.gridy = 1;
		constraintsJPanelLoginDescription.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelLoginDescription.anchor = java.awt.GridBagConstraints.EAST;
		constraintsJPanelLoginDescription.weightx = 1.0;
		constraintsJPanelLoginDescription.weighty = 1.0;
		constraintsJPanelLoginDescription.ipadx = 46;
		constraintsJPanelLoginDescription.ipady = 56;
		constraintsJPanelLoginDescription.insets = new java.awt.Insets(13, 2, 5, 4);
		add(getJPanelLoginDescription(), constraintsJPanelLoginDescription);

		java.awt.GridBagConstraints constraintsJPanelProperties = new java.awt.GridBagConstraints();
		constraintsJPanelProperties.gridx = 2; constraintsJPanelProperties.gridy = 2;
		constraintsJPanelProperties.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelProperties.anchor = java.awt.GridBagConstraints.EAST;
		constraintsJPanelProperties.weightx = 1.0;
		constraintsJPanelProperties.weighty = 1.0;
		constraintsJPanelProperties.ipadx = 150;
		constraintsJPanelProperties.ipady = 178;
		constraintsJPanelProperties.insets = new java.awt.Insets(5, 2, 7, 4);
		add(getJPanelProperties(), constraintsJPanelProperties);
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	initConnections();
	updateSelectionCountNodes();
	// user code end
}

/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	return true;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		NotifcationPanel aNotifcationPanel;
		aNotifcationPanel = new NotifcationPanel();
		frame.setContentPane(aNotifcationPanel);
		frame.setSize(aNotifcationPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}

	/**
	 * setValue method comment.
	 */
	public void setValue(Object o) 
	{
		if( o == null )
			return;

		//only done if we are an editor
		NotificationGroup notifGrp = (NotificationGroup)o;
		
		
		for( int i = 0; i < notifGrp.getNotifDestinationMap().length; i++ )
		{
			LiteContactNotification lContNotif =
				(LiteContactNotification)ContactNotifcationFuncs.getContactNotification(
					notifGrp.getNotifDestinationMap()[i].getRecipientID());

			//set the selected node
			DefaultMutableTreeNode tnode = getJTreeModel().findNode( 
				new TreePath(getJTreeModel().getRoot()), lContNotif );
				
			if( tnode != null )
			{
				LiteBaseNode lbNode = (LiteBaseNode)tnode;
				lbNode.setSelected( true );
				lbNode.setUserValue( notifGrp.getNotifDestinationMap()[i].getAttribs() );
			}

		}

		for( int i = 0; i < notifGrp.getContactMap().length; i++ )
		{
			int contID = notifGrp.getContactMap()[i].getContactID();

			//set the selected node
			DefaultMutableTreeNode tnode = getJTreeModel().findNode(
				new TreePath(getJTreeModel().getRoot()), ContactFuncs.getContact(contID) );

			if( tnode != null )
			{
				LiteBaseNode lbNode = (LiteBaseNode)tnode;
				lbNode.setSelected( true );
				lbNode.setUserValue( notifGrp.getContactMap()[i].getAttribs() );
			}
		}

		for( int i = 0; i < notifGrp.getCustomerMap().length; i++ )
		{
			int custID = notifGrp.getCustomerMap()[i].getCustomerID();

			//set the selected node
			DefaultMutableTreeNode tnode = getJTreeModel().findNode( 
				new TreePath(getJTreeModel().getRoot()), CustomerFuncs.getLiteCICustomer(custID) );
				
			if( tnode != null )
			{
				LiteBaseNode lbNode = (LiteBaseNode)tnode;
				lbNode.setSelected( true );
				lbNode.setUserValue( notifGrp.getCustomerMap()[i].getAttribs() );
			}

		}


		getJTreeModel().reload();
		updateSelectionCountNodes();
	}


	private void updateSelectionCountNodes()
	{
		DefaultMutableTreeNode root = (DefaultMutableTreeNode)getJTreeModel().getRoot();
				
		for( int i = 0; i < root.getChildCount(); i++ )
		{
			DefaultMutableTreeNode currParent= (DefaultMutableTreeNode)root.getChildAt(i);

			int selected = 0;
			for( int j = 0; j < currParent.getChildCount(); j++ )
				if( currParent.getChildAt(j) instanceof CheckNode )
					if( ((CheckNode)currParent.getChildAt(j)).isSelected() )
						selected++;
				

			int endIndx = currParent.getUserObject().toString().indexOf("\t");

			currParent.setUserObject(
					currParent.getUserObject().toString().substring(
						0,
						(endIndx >= 0 ? endIndx : currParent.getUserObject().toString().length()) ) +
					"\t   (" + selected + " Selected)");


			//let the tree repaint itself
			getJTreeModel().nodeChanged( currParent );

			getJTreeNotifs().invalidate();
			getJTreeNotifs().repaint();
		}

	}


public void valueChanged(TreeSelectionEvent e) 
{
	//remove all rows from the table
	getJTableNotifTableModel().clear();

    int selRow = getJTreeNotifs().getMaxSelectionRow();
    if(selRow != -1) 
    {
        TreeNode node = 
            (TreeNode)getJTreeNotifs().getPathForRow( selRow ).getLastPathComponent();

        if( node instanceof LiteBaseNode )
        {
			LiteBaseNode lbNode = (LiteBaseNode)node;
            LiteBase lb = (LiteBase)(lbNode).getUserObject();

			//be sure we can set this value
			getJCheckBoxPhoneCall().setEnabled( true );

			//create a dummy notifmap to use the attribs logic only 
			NotifMap dummyMap = new NotifMap(-1);
			dummyMap.setAttribs( lbNode.getUserValue() );
			getJCheckBoxPhoneCall().setSelected( dummyMap.isSendOutboundCalls() );


			//add the appropriate object to the tree model
			if( lb instanceof LiteContactNotification )
			{
				//only allow phone number definitions to be changed
				YukonListEntry entry =
					YukonListFuncs.getYukonListEntry( ((LiteContactNotification)lb).getNotificationCategoryID() );
		
				getJCheckBoxPhoneCall().setEnabled(
					entry.getYukonDefID() == YukonListEntryTypes.YUK_DEF_ID_PHONE );

				getJTableNotifTableModel().addRow(
					ContactNotifcationFuncs.getContactNotification(
						((LiteContactNotification)lb).getContactNotifID()) );
			}
			else if( lb instanceof LiteContact )
			{	
				List contacts = new Vector(1);
				contacts.add( lb );
				addContactNotifs( contacts );
				//validateIndividualNotifs( contacts, ((CheckNode)node).isSelected() );
			}
			else if( lb instanceof LiteCustomer )
			{
				List contacts = CustomerFuncs.getAllContacts( ((LiteCustomer)lb).getCustomerID() );
				addContactNotifs( contacts );
				//validateIndividualNotifs( contacts, ((CheckNode)node).isSelected() );
			}




            if( !((CheckNode)node).isSelected() )
            {
                //always disable the property if the role is NOT selected
                getJTableProperties().setEnabled( false );
            }
            else
            {
                //if the ROLE_CATEGORY is SystemReserved, dont allow editing
                getJTableProperties().setEnabled( 
                    !((LiteBaseNode)node).isSystemReserved() );
            }


        }


        fireInputUpdate();              
    }

}

private void validateIndividualNotifs( List contacts, boolean isSelected )
{
//	DefaultMutableTreeNode
//		root = (DefaultMutableTreeNode)getJTreeNotifs().getModel().getRoot();

	//List allNotifications = getJTreeModel().getAllLeafNodes( new TreePath(root) );

	// store all of our selected entries in Lists so we can set them below
	// on the NotifcationGroup
	HashMap contNotifIDMap = new HashMap(32);

	for( int i = 0; i < contacts.size(); i++ )
	{
		LiteContact lContact = (LiteContact)contacts.get(i);
		
		for( int j = 0; j < lContact.getLiteContactNotifications().size(); j++ )
		{
			LiteContactNotification lcn = (LiteContactNotification)lContact.getLiteContactNotifications().get(j);			
			contNotifIDMap.put(
				new Integer(lcn.getContactNotifID()),
				lcn );
		}
		
	}

	for( int i = 0; i < emailNode.getChildCount(); i++ )
	{
		validateNode( emailNode.getChildAt(i), contNotifIDMap, isSelected );
	}

	for( int i = 0; i < phoneNode.getChildCount(); i++ )
	{
		validateNode( phoneNode.getChildAt(i), contNotifIDMap, isSelected );
	}

}

private void validateNode( TreeNode realNode, HashMap contNotifIDMap, boolean isSelected )
{
	if( realNode instanceof LiteBaseNode ) {

		LiteBaseNode treeNode = (LiteBaseNode)realNode;
		LiteBase notifElem = (LiteBase)treeNode.getUserObject();

		if( notifElem instanceof LiteContactNotification ) {

			LiteContactNotification lcn = (LiteContactNotification)notifElem;
			boolean exists = contNotifIDMap.get(new Integer(lcn.getContactNotifID())) != null;
			
			if( exists ) {
				treeNode.setSelected( false );
				treeNode.setIsSystemReserved( isSelected ); //true
			}

		}
	}	
}
	
}
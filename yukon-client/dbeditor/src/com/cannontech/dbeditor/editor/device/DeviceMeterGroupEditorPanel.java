package com.cannontech.dbeditor.editor.device;
import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.data.device.DeviceBase;
import com.cannontech.database.data.device.DeviceTypesFuncs;
import com.cannontech.database.data.device.IDeviceMeterGroup;
import com.cannontech.database.data.device.IEDMeter;
import com.cannontech.database.data.device.MCTBase;
import com.cannontech.database.data.pao.PAOGroups;
import com.cannontech.database.db.device.DeviceLoadProfile;
import com.cannontech.database.db.device.DeviceMeterGroup;

/**
 * This type was created in VisualAge.
 */
public class DeviceMeterGroupEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.KeyListener, javax.swing.event.CaretListener {
	private javax.swing.JLabel ivjAreaCodeGroupLabel = null;
	private javax.swing.JLabel ivjCycleGroupLabel = null;
	private javax.swing.JComboBox ivjAreaCodeGroupComboBox = null;
	private javax.swing.JComboBox ivjCycleGroupComboBox = null;
	private javax.swing.JComboBox ivjLastIntervalDemandRateComboBox = null;
	private javax.swing.JLabel ivjLastIntervalDemandRateLabel = null;
	private javax.swing.JCheckBox ivjChannel1CheckBox = null;
	private javax.swing.JCheckBox ivjChannel2CheckBox = null;
	private javax.swing.JCheckBox ivjChannel3CheckBox = null;
	private javax.swing.JCheckBox ivjChannel4CheckBox = null;
	private javax.swing.JComboBox ivjLoadProfileDemandRateComboBox = null;
	private javax.swing.JLabel ivjLoadProfileDemandRateLabel = null;
	private javax.swing.JPanel ivjLoadProfileCollectionPanel = null;
	private javax.swing.JPanel ivjDataCollectionPanel = null;
	private javax.swing.JLabel ivjMeterNumberLabel = null;
	private javax.swing.JTextField ivjMeterNumberTextField = null;
	private javax.swing.JComboBox ivjJComboBoxBillingGroup = null;
	private javax.swing.JLabel ivjJLabelBillingGroup = null;
	private javax.swing.JComboBox ivjJComboBoxlVoltInterval = null;
	private javax.swing.JComboBox ivjJComboBoxlVoltRate = null;
	private javax.swing.JLabel ivjJLabelVoltDmdRate = null;
	private javax.swing.JLabel ivjJLabelVoltIntervalDmdRate = null;
	private boolean is410 = false;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public DeviceMeterGroupEditorPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getCycleGroupComboBox()) 
		connEtoC5(e);
	if (e.getSource() == getAreaCodeGroupComboBox()) 
		connEtoC6(e);
	if (e.getSource() == getChannel2CheckBox()) 
		connEtoC1(e);
	if (e.getSource() == getChannel1CheckBox()) 
		connEtoC2(e);
	if (e.getSource() == getChannel3CheckBox()) 
		connEtoC7(e);
	if (e.getSource() == getChannel4CheckBox()) 
		connEtoC8(e);
	if (e.getSource() == getLoadProfileDemandRateComboBox()) 
		connEtoC9(e);
	if (e.getSource() == getJComboBoxBillingGroup()) 
		connEtoC3(e);
	if (e.getSource() == getJComboBoxlVoltInterval()) 
		connEtoC13(e);
	if (e.getSource() == getJComboBoxlVoltRate()) 
		connEtoC14(e);
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getMeterNumberTextField()) 
		connEtoC12(e);
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  (Channel2CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (CycleGroupComboBox.key.keyTyped(java.awt.event.KeyEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (AreaCodeGroupComboBox.key.keyTyped(java.awt.event.KeyEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC12:  (MeterNumberTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC13:  (JComboBoxlVoltInterval.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC14:  (JComboBoxlVoltRate.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (Channel1CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JComboBoxBillingGroup.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (DemandIntervalComboBox.item.itemStateChanged(java.awt.event.ItemEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (CycleGroupComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (AreaCodeGroupComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (Channel3CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (Channel4CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		
		setVoltageEnabled( getChannel4CheckBox().isSelected() );

		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (LoadProfileDemandRateComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * Return the AreaCodeGroupComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getAreaCodeGroupComboBox() {
	if (ivjAreaCodeGroupComboBox == null) {
		try {
			ivjAreaCodeGroupComboBox = new javax.swing.JComboBox();
			ivjAreaCodeGroupComboBox.setName("AreaCodeGroupComboBox");
			ivjAreaCodeGroupComboBox.setPreferredSize(new java.awt.Dimension(200, 25));
			ivjAreaCodeGroupComboBox.setEditable(true);
			ivjAreaCodeGroupComboBox.setMinimumSize(new java.awt.Dimension(200, 25));
			// user code begin {1}
         
         try
         {
            String availableAreaCodeGroups[] = DeviceMeterGroup.getDeviceTestCollectionGroups();
            for(int i=0;i<availableAreaCodeGroups.length;i++)
               ivjAreaCodeGroupComboBox.addItem( availableAreaCodeGroups[i] );
         }
         catch(java.sql.SQLException e)
         {
            com.cannontech.clientutils.CTILogger.error( e.getMessage(), e );
         }
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAreaCodeGroupComboBox;
}


/**
 * Return the AreaCodeGroupLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getAreaCodeGroupLabel() {
	if (ivjAreaCodeGroupLabel == null) {
		try {
			ivjAreaCodeGroupLabel = new javax.swing.JLabel();
			ivjAreaCodeGroupLabel.setName("AreaCodeGroupLabel");
			ivjAreaCodeGroupLabel.setText("Alternate Group:");
			ivjAreaCodeGroupLabel.setMaximumSize(new java.awt.Dimension(114, 16));
			ivjAreaCodeGroupLabel.setPreferredSize(new java.awt.Dimension(114, 16));
			ivjAreaCodeGroupLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjAreaCodeGroupLabel.setMinimumSize(new java.awt.Dimension(114, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAreaCodeGroupLabel;
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GDB0015B0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8DDCD5D536B8169A9595D358D0E912DFD1D1D1D9D1D1C30DB5E4B64F9AFBE3491BE7B3CE5A0C75E8467F9BDF4FB79D7990148FD1D12E0AFAB5D41888D051481C89958D8B95859190158B77GD7AE775E6EBD40A5C97FEB6FFD56BE671EFBAEDF7DF49AFF3F6539EB6D3576DAFB6D353F77B988191BC2929747E58A4262C4C17E7759E2C18838D9909EEABF150634462306A4C175EFB3408A21A0B981
	1E8EC84B1CE5C84A905EB9178C78F040E3269A12326077AA610F67AA3E079FBE7464C0DA421B9F7D29EFBD6EE328A70962FFDE168A4FF4GFF200581ACBCCA74272498E47AF44053655F84964789C264B142F34B96030A3E6F98638B04678400466304E7DBCA361C1EGB8614906E751F146DB8E4F25543A91FBCBE43E061F048A8B26B6449107ADD6650F90AA4BCE131FC6E18EF5C43CE05E73953123323D759F4D760E02E6134DE637C9E2F3DB0139C9B4DBA43B33C0FE1845AECB3338F7EF99FD9E95A5517915
	535E69B8C413ABCDB6518A79907B9F5F12CC73867B810F2634CFBFA6BE73035F41G6115D80657527649B68635078A33479F77D90654934C762293CA9912FFEF0C1FFD0264FFBCA5D516F3G9E8A40EC79E98A5A12F392EDB9300670B6GAE8184F07A52ACC21FGF8A4400C13E8635F37230D35971F949C07F645AF77E1637C134C364CAA45465EDF9B6357523881EF40339252A4GFF00B000E9G73815653F87D59313F41F3FF13F4505E51E1376DF7B88ED84D4E23F633E8055FFB77C20ACCBBA9B65B1DE6C1
	E0B1797416FC9DFB90922ABD6311GAB5BE981E3A86C64C302753A037109BAE51B7C4639B8031CC7FE35D23640EA6237449C62378A78CD64B610F82674ECCA1F2122333A5AC5E3016006D30624049A74F3EDBA5AD211B0CE4858B1ACAEC9471660973A62E2EB188D492795DB180FFFF3027838986815GEDGFEGA1GD1275147CB0F6F6A4F47C7208DB8EDA6EBD5E7134364148EF4DA2CE651A97B7AD4CADF3E5683A657BCE8B9661750DD6ABA0AF94CCF57AFB121E2DC0C6C0F85AA3FB05D23FD6A4E2C750E0D
	F4DE07CF503612DB4B6AB01E5323A83DC4C5E7F5DBCE6984AF0734B0G467FB6EDDB99F55A98D9C86955F55A98D91E05B1928CE9436B8DC92CFEFB2BC85F68B8836D96E082C0A4C08C40C20054862C636A630583ECC7152A7AE532E915EB60A93AA52769084DA519EC4DE20D49E9B1B5D9C517A0732C29A4FEED7210DBCF5BF7B36878CA3409CE13E4315BA0F7D38769ABDD0CA727F28561F10AB4355A52A102028E07007966D72E0227556412CEB94CA6C9D4B8D8FAF1A50909AED38D648899406F0686622F57E8
	1F1B8F3F4B9B50D777D593DA8860915CAF8FD72E0467B7905C22957AF2CBB3B143646C4198CD49A131B68D789B4F9A126681C8678CC90BG061F877FB69A1202GF2CD60FB001CA628E30012E668C31B319D3FDF0B71DA167620107F46E55DF8A5D0EDE631E7B5EB63F58B35A388681381E6GACG48948DC945G55G92C09040E40099G8BGB2DBA03D8547694FBF1E2D52C5EC2563C823E73C13F210F26A3581D26E4134D70430A6C58E7D05B871151A1778BADAC5EB5458A2E9ECA075605D37C89EE54D121F
	4BB5F62D167975ECCE99C2B9892CD57DDEC1E3CC4157EBF8C93F30C105A7EA5217EA70B49DDDAB042C9A5AE7C0BDBBG82DBB0367FD0E994E81BBFE0F209584A0FBB21010AE6A552996F5C9344B7E217E8134AC407E8B3438F175C465EBFC16C105BFF0BDD403639005249F8F0909A280B53BFBC310251A18FF5EF0269F1A7C93AC9121C1626CEC92C92A549E2EBD564171DA43638BC069A17DC563527C9D9C3210CD1G53F9D9EFBBC97C0C6D3842EEEF6FF4D4139ECA6E8F9E23731EB9403F08370748B5E49EEB
	ECC57CA50AAB694756548E217EC9FE8361E3BADA0724A3FE00FCCC475C2C927977D2B92EC94CED1263E939AACEC9FBA0ED6593B9365673BC7ECA73A80732B9G028122G6681E434C1FF875088608F908EB093C030C0BB87283420BFD7E74D56318FED72E58B5A01B66B157313A17870CA81ABEB25D7D9C91DA54A693E4A0A65C41F74573F7C3301353D11D53E7B0E1B2A747B0E5B2A747B0EBB2A7A6E9B6E29526B9BD8DAE895712F3D5B266AEB9E2CA263FB335DE693E90747C584365EFB3F1A1443E233C827AD
	66D6D12A32FCA7429C41C27A0CF9F48E61065F81969C4B3BBF4631BC673B7B04287375F1FA6B036009BDF1F3AC2C9FD8E8D146F2E653C355248F932DE287B86A203D53A6B17AE4BABF11692EF8CADB12B2024866D6408C08CE423BCC56B23143E4B31F045990CC661A6C876C6EFC0BA4F694107F2AA4C2EEB359DAC5F36E85D317294054AD95503AA9B8826907482FBC63271F7E43584742B53F4562940F589C1D722CABB72FA6EF179C432B04031F75D21B8E76B4DBC5AA4A6DB0D1A79730C72568EC31BBBB3C8D
	59CF1307EECAB1336359F317299D7BE176F8104CB27F89266C16FD322171A27389389ED8F79EEC931B5B2F1E99BB0AE5BBF6AF7530E3475536837D7172175F296D58F5156D5803313A4A6AE1C771D53663B33463162E6BD8BB361B4C15CEFB0B45AA6AB4632BE3D409EC5322FDF6DF6D38DD6CA9G286EF1F82B7FC66C993A6E4FE55D3F68F07551F62F187A9DC5327E74B85607D149E31D9DCD22339AC629439651EA4EEF06292BD4C07F17C5098D6E82D7B70CC5329987C96A8FB0E4873323AE4B0F5A71B5167D
	0045EA85ADB40F2B948FBBE5DBA61C9B66E90B3546EE65234E556AC1F672F126EE5B77BA761086F335EC59A5609A2B22160C59068B0624FC00328B386EA8BAC552F15DA1AF2E8E5A2DD6B65D0034508BE4AE511813291A9FB4DCE07B6469BCBD201F7408FE526774131E31356F74FD7D243775139E54CFFAD4BF69737BC9B7EC6BBB3DCCB7BD961EAC7D8F3A69896D185E3EDDAF5D500E753C21A6034CBB45EFBBC5DB33C89616508F619ED64DCACDDA0D495A296C0D655710393CD535A6E574CD27756701DBCF13
	F5E8BB4FBF6F7492016CF131BC593CB55CC472F4B8AD9D3004A70BEC79BCE5EA0A7ABCA59F6CA7E7AFD6F87A81B0D941C9726D6B5CA25FCAE3420067AE41A09BCE721273CB354AFB5F146FA34E6786BC90A05C2A4777733548978BF8F207AF3E6EF548178BBC25G0D9DFAFCDF2CC73E90C80F704977DF1CEFA624477A649B1F0DFC99B6D83B5AFC711D5E00FC650487404F264737FEA372C55918DFE66A7245F03ED4BB730BBEDF60A6644B813EFDG8DF6BD3EAAA32FB7C88FA7BC3AFCD91BF9F99DD0DE00F207
	9E5FAC4E678F69A1BAFCD18E9A877C1C2B105356FCCCE8DB613F098938FFFFB4C3FDCE179322FF46C2A061DB163F61DB6D394630BA12EF89504B3F45B6BA7E34FA8FE83F4BE5EF3650EDE5393D1D2CD52F2F986DF46DB2F8C25FCF16D7E6510DED76ECAD3155EA62E4395DBD70495F856FFDF456F6F00B6DE0B79DF22A6DE4E2D38E4D7EA0DFFE56D844EE817D707DE175D9DF64725638949FFEE8104B5F2B72C3662F0D716CCCAFE49B7ABD72DBBC675B3C9DE98BB8ED9C2765BB31AF38E3AF9963744EBB1BE981
	8BDABBAD851D1205EC0E1BA4939DA055E71B45294932EF4CCEBCB7ECDCCE7A355100CF861886404EB0C4C32A4CBB87E859AE6CFB57E7287B5EEA975B236B05A71B87CCB310F89A6492D72E2FA9F9ABD97DEA46F62C03F12BCAE53D539E9AA76C3BDC9E27F716693F7CE4DC200B79BE422554C17958317121BD1B65B3575C35D83E8489FCAEE179C252346513A0ADD842725D32164CF986BF2541332179DCEF9864B9076B3D2DDECFEFF6A756C748BA14AB82DADBA74A3D1C2F168B81FAB4407CCE34B7E97D8F3357
	3C9E758ADD062412AE9E873AFA9DDDE82FA19B650683AD124BCDAB5013DB406526F13964EE98CF3AD14EDC28A7676EC6B93F8DA897G34A9DC6E76F3DA3F9239C55D681F399BFE18FF4AB6225E8CB774EFEE4C77010DDB85BAAF68FFEDA4E0DE091BB0AFBF48A7420DE5FB0A53E301165B03E57B2ACEDD36469E96B37EBDE80351C85A62A097C832AD3DC654B99A721B41F53EE7560B53546FD0676F0CBF4C1F251BD12F91722C7D8E755E6D55BEC8BD86F23D77EE7EE1FA9336205E8910E78C57FB442D27B773A2
	6EB11E5E299E9F23E637686EB1527951C556976D3B289D9F45B324DF2E853A75A20E0FB3EB495EAA0E0FA7E1C402BE94E623FC9F37AE1E45170C5FD0C77452F927006B20F18D44F6BF48F3B440E400E9G73390E95757D5EA5B8646E63AE4144ED033993105A0BE78B5B368FC64E48656E9D14DCB1177BBCD5ABD75E2B1C7BB428FEA330737D99F4ECF47432737D251C7EB625872868AC06DAA81D602110167ABD6AEFB7E875BB3E775499204119DC0F17DC01868F574831F13455CA6A174E93D4CDFD6FDE3EB617
	6783A7B3F0BE907DBD1E3BE71CA373C761920CBDG45G15G92C0A04064CB98BB0D75FAF3AB4F5871B531D24E98D9B98B568E4DBF7B3C64347E19F149D30E2D3BC6972A57DD73AF31B9CC46E5C3D24EE51CFF7DBAADD92E4BFD17319E7FB4C4BB05F57D59A9DD7614E3B6CC2DC79B82388D133C729A188D137B35E14AE53DD87AC70D2FD812B7E7E51F7E65DBBD1F46C01E315C2742274932BD49FED81E8B6B07D69E37171C36BC25FEFABEBD190FB654F29BB6E68F4D06FCAFB92D8D013AB64497228D215C0657
	07E8436CFEED182DEB43DD5C06055C06119B06E6C310171C560622E1FAB63CFA8E7B1F72E1E843579B07E6C32D171C56863FE1FAF2A91B0626EF2D171CD6DF302E3E1F8DD15F2B7D6A8B9F2657FE3766E68B3A6D176F20333A38D4076B4DE8DE97579807E6EB20171C56D6619A3DF84891313FB3DC03B69C5EBCB49B2A3D6434B6D46A5A70C6BD46E49B37E119577D540159E07012535A9022EB031F9BED08388647654A7304968B38F0AD0E414F56133B89B8C72C34DBEC120073438BE748BE245DE9E9355810E6
	2734E63B139E3AB35A7D8D3E6F83BC5220FF9F6049867D7BG4FB674FD17684586DF7785583D1FC83AB71281654B87E0343FEFC7DAA927BD47E9551CD6C977B65AG6F6534CF53699DC240A32E453AFCEBB9599B0E81BCF938A1298820F6B8264D25E9E46F54BD1C4D73495A0625D917133BBF041F482A6B8C01642325A56B5074006998C1F5105F3E6E8CE96F18E1BB9F080E8DB45F1757AC27F564F209AEBAC1A3BBC5F25ADCE93520F37F621829C394701CE71CE1294CF3C8329FAC66361F4E68EBEE9E8CFE88
	53780245443AF33E63EF73B97D785BFE0E443D4B5E69EC9635B1D6F04E40531499A759EAA245E0BC1FD1F94964EC953DE2749FD41E2579127F6A1C2FB8E6BE92572AFD34DB403E784FF986C137AF261BF42C6D4F6063F254F05C23BB14CB56958B814F98816B7F919813B1E9687352915EF1D68D34B600DED59A33AFEF1D5A3EBD3C8E7F2D9E738B5449EF8250A2G26F965779F9E796D90309FABF4E2FFBEFB8416457889BD1B9B89ED8F20FCA416A571D3F57CB40EE4BAA47969BF525B9E267B1E75EA5DBB15F8
	4CD767B7DA168F171FD3FC66F7AADB1D5FE7BC3F64C2F5FEB3E5797972D3384ED7FECBB72873AB617905F86417A94B674A4FFDBE73FB56A33F4FF9FE2F1F6B2B7DD5C2FEE6CD1EAC3FE19B17296B2E886987B6F950F7A07D3FBD69BBD17F35F5FD69F77BAC4FD3C6F5F9F67172640918DF000EEC8850A683C4DF270D456FB7FB58378B73FB2B3EAF7BE2A01FD8DD7F6C5F6211DFB16F2B5DFD3E3362EFC8B2786B75F7274E13BD83B7476BA85EA3E09FA16E27F1CF7B1FC3B633BC28337319DF517171BF413055F1
	C82B26E3617FG6D90273DC1E96F816D79B8ACC7EBAA997B2D269EFBA764976CCF67FC2938E64B873C8C408A60674F56EE4C1EC73A49B9C70B535481DDD515C3EC96246B693EE7BA4A4E867E85G19C0AF86283E9E77641CC7B742336F5BF0E81F49385EA7EF0529C9344AFC7F1B330E70A9B7F31473FBF654A1733DD3C84E17486026E5E07BFA0732547BFA115733B24F3E9E678E368C1CBBAC6034BF2CA134329BE04EF08376DBEFFA34E3AB507DEED05D1F3F41BBF6599E529B34CF8F3D016DA12D6074F7A8FD
	060A4E76163E21F4028BB79A1282EEC41B7ECC77A98C81607BG240D29C75B4BB9AD0D4E0F02818F63349ACA0B82FCA6273DD30F794D673438944CCF3889E9E768FA2192F0B327CD28437C5CB721FF0A1DEA7F84GBD84E072CD4CAF51B77972CFB49DA7E2EEE2FED84D6933A8BD63E6054E7C330D5289DE86E931B723CD59F44FE174ADD06EDB1076DAB7359370691C36470DE50C61B49B5DAB488FB4A46D8BC45A16AEDAEE409BB96D3AAE1435F25AA6BA0EC782BE0D53DE27FAE7839E4BE91FF13D0BB86DC9AA
	DB719340FF0234A44A67G5C0F532CDCB600535EBD474B41E917E90C645F8AF368DB11F6E79D72D5F3DAA9DDFFCDGBC0A53EEDC03FCB3B8ED85654B394D10D4F29B526AA92D82F0B327FD4063504DE94F2CA034E840E3B8EDB4AFC7AC276D27BEA88D827B02709CE4D2AA3EA759863410A06C23F6B4FA2CF149CE7F5E3DDFB9AD668326568A5A633179487BB45E097C4CA01C0FE42751F89A8573AA0052D1382F6F5E06673DE113468995FEFE3A6FF64E2EEE0D2B9DA51F770ED276758379F96F05F45499816931
	2388ADB8DD5D77107E6ABF62585A1025CF75C8A7ED1E1C91A9690BBC52093D1F452B538B162B5393D5722CEC2FEC4532ADFAA5DC30BEEE73795EEA496D2CCC8D7253EF3E5F62A9011B636579EC0B0F79AC6D30D979FB33C879499CBF8872487FA921799B4AF4F4296D156F3ED0D888F229A07731CCB74A3F715D3DD54262AC525708B6F2DD47AC8C27BA8CD9381FA17D94E3AA1646D4B460B11C3638095004E0983F021166570C71D8920C7D582CDCA3BC7D811FGB085E08EC0729D06249C00B2G739D48BB1F71
	829EFA873BCBC26E09C45F416E014C3B035D73E03CA7F27DFC7801642D4609CE223F6C8E6FBE33BFA0B61327D9A5CB6C4F11F179BDAC1F36E85FEF40B52A769D2D01G2ED7D7E8E2985F17E2F53AAC1D608E2758A2BA1D2219DD75176B76E35A26126F04BA3B93E3EAF27DE0E22A94642A6FD4E22A6DCEB61EA8B115C37B8A727AB809AA26770BD49ED3F7629C27A3157886A6C7160E4E8EEAA5639DC1F90783DFA0G23AD2767FC1100C7F33B572674E7F7124A6E859A3B136F525A6D2C73367BFA3E3717F9975A
	72AA2565GDEF497467DB7F43D56G3803535E25F34EA040C3B92DAD175026819E43E9695D3C8F3F8BE37B171F6492DF0F869EGB7C090C0B840CC0004B1608300CAG479814F91B4AC448F749487DAFF237ABF08C3B3B95BE065DFD1ABE065DED127761BF8951780D642746ABD5F87E985F6D075826465DAADB7578CB65B2794A2FC115A62FCB3DECDD2D41556FA02E70112F2FB6096FAA6971478B7A7BC75AF6293441DD1F123B0DADF61BA447EF915D0384DFAC9A0371BF2F1B70C822DB4A3F1BFCFF623E9601
	7818729FF58F24CDE23BA4FDFC2A2AEFF75C2D0D6D91791E765CC567E73D4067FFB75A73F91727BD9F34AA765C5D5517BD7102E79F2135A7424B1EBD051E76D45071E58A70CD67763C2B71CF1EC53167D81F7E0997BC5B3E569EE12C561EDFEA6C19C36DC985BE43D834E7235B531E0A8B0ABD5776DBDFC9FD54D7394A9E161FF03E3F7C54BE2F9E6BB94E370DE5F3B125FC3727F90F738F2671BEF9AC76290F548DC4AF4270311EFDEAB06057AFD66BBDAD7A9E0B9CEC4E8CB261DC7F38B57D69DF2A529F23519F
	6BD52F3922F71F7E250865DE446B76DBD1FFAC3A1E722606C09C04200D49E77A32B1C9E3E3D908E75D540630F389454657D7F8574D3BAB50C6B3577BD81FB1C672C8D16915B4FA7D3D745696FA6B3597225E20909CA3423C6E0074877237C906A87767C14B31756D7BF4BDB2A1C40981C67F8B25072B68ECCD34A58D57C41110E63C874F0B8A5B495CFCB860A1G91G5381E281D247617951EF4E97897D5C612836BBAA44AE512ABA4EE16533278F6DFBA04FA7615AE37253778B91A38BFC5E23B50EE3E3E7297C
	B47C51EFB1F932723DE0A565F3C0DAGC0B8C0B4C08C4082DE3EED0D792CFC644A6FFEC9B2B537515B44D8B8F241D7A1134DADD636E1D9FA6FF9A70FE7F6E40F579F6F0B00DE26C92B855C8A602722EF925898CF579D74DF6C175EB468C3E97F7C3ACD603EFBBB95FD177D40F8216C5785F15877EAED8912754D992F2CC927FF38B91E351942ACBA86B8BBC516EFC8377A8EDB49B22B4FBBEC5993D8FEC572F37E06E10B65FB26C5E4FF31496E2407A9ECFFF1E3916E9136813F9FC0A44074896CDC0D49991A3C77
	A58B1BD0EE5E8436AFA9CC04397EC4A6477A111FB677B7F62A4716FC10AD1D487A91BA56406F77BE7A68237F840817FDCF66CD4A5BF56ABDC7C1A07712BD5EFEE349F27A3571ABBDE435FB1B613BD6EB6595961947E1A5E70F2AB75C288616764A12CC4FB4FEF64F525B5DC4BFDBF52BDFC9433CEFAEA17AF55FDA93701D1C1CBC6DFEA871F563C43C8779D103DE3A44532FCD51CB776769376B260F06F49667F791D3E4FBEF2DA76D41A6F69B79454DB28BB4D17251185C1DC5C579461D3B7386590EFE752D127F
	49D40CFF16765FCEA52DEBC03A195CD9C9117B4B32215A4C72CA6CD2728A297334AF37DBC9EBC999089E465B6474EE13BDCEECDB6193D91B0C06E74CC4F65EAD477BF66FB619359D6596CCE4EDB2F5920CB71354F217F3BD671F2368BA3184F84AA6E13B5D5ABD10B9AF36DB89647CA7A96DF6B47C3E8D5A6C5B3C5DA69CA16DC67B86B5CBFB31D5153653B36D21C4D55AAE4F34E3E52A34E24F34C007667CC1FBCC01FDC67C86DFFCDEED7F4E6F5772762BFE0B332C0372F33E9579EB546D580397F926152E7048
	CB1B475FAE2E744A03B1486D3CC05BCEC97D06CE42F67CD61ADEFAA4CFDF33D2AFFD7AA4EC6713AFAA317CE27796EDAC9F0660495DE236182C7656AD79C688679D45F9B87E7D5B9975B815F1E7CD9C4E0534F1B4E7929B1FE2A7A9639F533F793252A784A7AB362C699A28ADF2FF32D44907FEA2C24E672581170949F627A9794CDD2E64733F034CE799BD9A725D3F0CDF2964BDA58D7B975F7CAF2DD26CFAB7D31175DB73437A3954B5CADEB522E7BFD7182524ED7D01FACE9A143C04157D17F765BA05FFE4A172
	33796082DAC76C777F29FE67268D65FBC003DBC76C3F22BA58BC39245D779D1CAF5B756F609CEA573F8376CDFB5F5F0429EA777DCD187AF675B7E158BC7F376BC870655C8B73B7GB3009BA060DE1C634FEBA76D04FC914FFBFEFF485CCA6EG112F60C9287F952B6F323EEE6D7F5BF9332C64BEC013DD126C9DA4FF243FEDA575A5599D1448E86FD8090F1C1656B609314A7479D692FFD6310512597E69F8FADE918A650A389777D4138DF4BF897098CEDB19C07760GCF8DC51A69A2219981AF6234F1A768D9B5
	60351CF6220A6A85FCB8273D3E9E77ED03C3F16DD81ACD4668F900A75CE7C84A85A88528863082788184810482C4814C84188FA05C8FF3F4009C0092000A7B310E326C647C2946F4417B8DCCA04A87F534221CA6F6071159B1E983312D91726965F9F559BF69A3AF98EB9D22D36AE1D47AE6373CCEBEDC045FF69C8DF94D389F4F8E1FDDC6564083FA27325AA2D94583F4B6454E36EEAE42FB1A298F60F962B19351D386F8830074G1EDD1EEE42F5FAG5026BC00F76247B6617960A21E472B1437B88CFC88E086
	9858DC977B32AC12A45F41BA130767EF3DE128F34FD9C2A39D59ECCEFBBA85794A9EC45A2B1C967AA016639EA77AB175A11857BD043C6FBA51973D8FE1B976ECA33C13811F86B067A14C634B6D680BC5C0ABFE987338EEBB7A427AB06671B8651DGF8A4400C07F19E91CCBEEFAC7757F1839AABF7668DF46D0DFEFCE60B6247BD05680B795C5E9569C82B8CC75A5115C81B9C0E6D290DCCDF65363F7062D6DF718BBD5657E07F71268BE233D4EDEA65B2FFD8673B4F7AE0DD7FFD56076B587EE12BC8DEC4E4340F
	56517B41ADADAE11770D896BB3B86D082B526E3210DBB34C47CFE7F96E9BC767A87E5FE4207B0EA637E65F71B35AFF999E01BE6191DCA364A5785ECBBDC07B36CA60ED607C6E0B1EEB0A1BE9DF678F69C11C6729935EFB0053CF609E60944E57D6253FBF6AC77B459940B77B91DC273C3B7E071C9524BEEAC85AA57F163F691A6D3B8E4FE477DF0766EC7DF167C2367738E34F569FF7BA3355638E23FD17CD4A518AFDF0AD673B4CE9F51CB61C66C9E827ADE6290D53EF20F691FA39C894A2BD105A55CDE935B2ED
	140AD6A7536E4CA6F188C5EE3373BB69E333E91DDB2CD679DB811447E20330647E8825B6DA9CA6155D8FF21AE277839BC8FD7179889B926434C7B7E48A6CFBF250CFD83E231F9F2882C6DBAB1BFBD594753747E9F8D46F5EFFFD3FF29BB5B8133B0D4A95BFBA30737D72C7717B44AF50B12761D16D1E71AB145E7628F64F385A047D2F84E9B39F45BD7233CDC35B6BEE9F225C04C14B31F26DEFA6766FFBCCDB5E2FA93D7CB1EDF9FF45475EEAC80BF88C4B5B1827B7374E1EAC6FF14A4F32491ABDDD402D9A1A9F
	60C11375E2610B33FABAC2E55E48497AF5BD9D68F3B4E98B81CFFDDC771D2294BD9DC61937D8FE16EBE49BGF7E8E843818F5655713A2E0EB019B7CAFE4E50484E83FC11061671840C87CF68693857B9347676F83FF27A6D6DFDAAD77244405ADB4593585E6E27731A46A73471779825DB1F50465F3EED98FFEEC80BF982636F50205EE7D66C2E9A22DC402065D83972685D5352A735655DC96995CFEA4B7B8C1F5F55C2DA6413D85EAF8AF563B4C20E53887DFAA887FA03A64D8178F000E0951D69D8132E9B27B2
	DF148F9DB300BECF133688700C27A0D61F526AB839D2CFC7094CD771143E0EC620CB1AB4FF40C783042B68ECFE75C7B2CD1467D7C9897D6D056C5803FB52695B95391A0BFD486D78EC37DA4E7E29A2F77B09016EBDB17E39A7BC77F1EEADD0727A457A3EEC586DE17B2B64F395723BC8D12B48BC51E233DAEC62C176D5FA815F933B1F2E3B26004FE21E42F56C3FB752F5B16089CFE33CC51B84DEE72F29FE571B2E7C3E0D6BAA68782AD9A9D3256A771BCDD7DE771F2E288ED627575035EB86542771E92C673914
	168FF899273DF80A50EA816F653435B5049688F8982765503B60D100CF67348B17F07FE38E276DD9CEE8454F407A7B99241DBD0B36B4F25AF3E75196AB27852623DEBFCE0BBD0BFA03B86D13A2549B4AE9A39BD06FC2CEFB1B2E41D3A38DC95911C8BBCC6F966682DE4AE9EB69FD3EEA405D1C56C1E9810007F25A47B43FC84027F1DAF9AF5AB21B53FAA8DF5133062472E7113600529AG37F2DA9D35458DF8A0275DC275CEGBC1A53FEC7E9B100AF6434032CEC4FC1591EC35AE3975116A2CEAB25FBE3FE0087
	F3DA220B5042G1F42E94F11CF1789B3811F7F9C7681615B14F671146A7701EDD73E0D1C398ABA8AF315B21528FEBF3F7D4A6BFE6B0A6A105B9D5DF7D98875197CB32C6797A8AD9370FCCE7BF75A5ECB894EE93F216D5D81389F270D265F158B82BC1453FECFE911004F603417F97B1C47E9A534ED17C4C11B08626F5AD0DAB560D6CE1BCE5FFB7083FCB427BDCE5BC9B860D11C764B4BF45F8170F91C163A075096811E79BC5272525016DCCE1368BE139BF0FFCEFB135202G8F63345F53774623G0F61346F69
	3D2CD8400597BC5BECA660391CB613527681DE4DE93FB322ADEDAF603E4A73C5E4EFC0A25B23E41EA060FE4E1B54079140B705733E5718083C824EF5E249962CBCDF38A34FF31F296924127657BC7DFD26B5FFA3FA96008E616728A7669459D3E933BBAD5F01C9A6AB39B201BBDAE85FDFCE611EE5BE17AB2A713DBFF50446D8AD701AB97F971ABB32A7E84C85C27A681F63DE5230CB0359CB2AD65D71A6F368E9104FAA954FAA6168F27DFDAC110EDBB301FF4E4FF11FF4C415406D1F4B4630A9505FCE41FB60CF
	5178AD873C1A535652F7087CG8F1802E5B8D0B4183B2A5AB2C4C2BEDF49E5E0BA9E26E3DDB450E7CCC1DFAECC712C7B50EA256E4F266A57FDA7EDD7420B30B6FE1157E1DD7FF57FCD9D56FD89179BDE673B6E47D0FEB370BAB87F5E944F3A2F246359E8C88FFD917DF63EF7A07714FC79EDA6645361D17701A97AF59F4A7EE68A7047F27BD2D2BD7DF931C671274307BF7D29BF33DF02FE60A54CE752G7C79BC77E7B5177B308FFF2EE2FDA47086F07EFA0DBF9D34CC9110BE65A57467540B7D79D3FDEFD56B4F
	85AFE95B5269ACFDFF5A691CC378854455AF503EEC17FEBFD7CC67A2A540D746F95F586A5D4F5DFDDA713FD468D9B74F57AAE9EF966A574D87F45C13C0079F5773DE9F7D551253F40E843C911C7F7FE97A2B14829AB7109E4BF99E2B755ECF1FDA0B7B6946E864DBD42B6F3BCC9A8BC54037AF9A6BEDF63F7D079A347B69ED514AFEBA53FDBC5D53FFF36A947FCDCE57775FB45A57C910179FAF435CFA5F7E93687BBAE1409B41792725FA7A6F37343D4C0174D84E7356EEEF7FFD301B7B6FE5647BF80F3E7F3E20
	F300A2605B77B27A2FB4EDA0F16F6BEEFE9B64B3C655B6D689B72E7474DF529945FF31AB757D173C0A7A8F727263E5D8F45E377FD653B5F99870C6F07E20951E7E3B1F4EC566C0FA6C4BCAFF636D3FE779BBCC46294877DFF57A7ECB22FDCB91706D1B0A7E7B50581F7F54774E3D7CB71545DF9AEF4B76330A3F26B61243C81D7D127DCE0B493AA55F38C35EAE11E5EFBD2748BEFDEAA0FBBB0CB73D06702A3F5ED9C57E47AB8E2E020AC3072BE59D0F1FD7F42C7D342FBD18E20FBD183CA6C56E5C25415DC12A20
	FB9032FF4CCABE3FED98387EDF0A0A5C08743E64F6942B65BEE8D164FEFFF660F2CE0BA23729E8F0659DF5C1A9EFC43B124F35E98357BF4B2A4825578DBC961A6A869E8BFF6DD0F4987A3ABF3A43F3AF713C6A4E6C3E5E4179669A27621BE7DDCABEFF2B5B68DB7F67721624ACB7DBF53FF678A0FCB3F3903EF9CDF56F3624CF5FF84669219EC56E5E0B0373CD5BF70AEFEED45D071CEE9E387E54CB0A5C23DB87577F94DED6E4DF2999785EF2202ACD7F2A4FBE45F3EFB921D5118B2C9D5C5E725B351EFB4BDF36
	A9F9BDD7B4703D65A60B6273919714BCDE6C773E3712C7282A0D5F1FBA70726759943997AE8F2E7C49FBBC4BDFE1D7725A58E7BF63D9FE3BC3A97F2D2AF67D567901177FF155BDF9670A0117FF4D772A3E31EEF0651F21398BFFC29577B30D83AF3FC4E31E7DDD755F46654164AE6CBDA1D1921649573C0D9F6FD4A3BB5448AEB5D26CF28A4B393EA374D2426C2EDDFB63FFB7BEBECEC8B8A2ACE117B40E888964264591A111DE44B8A244CBF6071B5482CE52AAG92A037155E566F3F794DDF071DAF4B0C9362A0
	43B611651058CD2EDE50BC484522E8573742A5A1C14E0D7CA34B34F8CADD624133E4D092CEA14D23EEDE3CE777BB53FED3630A97169C91561229DB156824B7A6C4B379400E7C67FC8F8BCB9D64EBC5E4A28605F751C722CB6A310A95C2E64BC972A7D7DC12E85E0FF7B1DC12303A02E8AAA4776B8A4BCD2EB67A02639795C2020D7C61E1E1A5CB361AEC2D056CE2469734740B77B7D26B4954CDGFBD7D1FBC9AE85BC17D54FAC5F3A796BB99171C25CE1E11955EEB29FB6B5CBF66791E129546694DDEDF62B596D
	783214E614CC5FDE27B3C048EEBDAFBEA9EC81D96EF2235B5DE3825266259D0E938437D3A8241CE496DD40B94C90AACED0A5BA0FC8648FA95B1DB9BCED58C6E95B2BDFE5B544890B65C29257AFF7BBA4E1C90B2943E26D019FE534A550CAD9A50135CE134DC5BEE48E1699B516E192D7D0F05B4BC5236E7B301EAAD0C4A5E193F3A50896360A760E427DADAD961B48B3G3FC2769BF8760427C04333527D1355DF3F71D19344C119905FD1D4C47F5FC17F5FC97E5FC1A9BBA8E547CEF0EE2C5067BFED3A9B4BCC03
	0737B3D27D8507218625375EFBF95C2CFD317321F40705C47A31F328048C050B3D9EB5B2EC5406142059B712BAF210D0F113FC335CBC7A63C84B83A0D71762A8B54DAB2A88F505F7F89072EADEC984B3D056F5747F8D03AEB2115AC4E5B7F3CB37FBDBFA6247E9E9413F0C253B7B2AFD02AD16297B8192F57B49E49FFDE926ACCDDE32536BFD9364BC085E251C07D013F529F481AA439215A7195FD27FD91EAC1571B24513CBD51642D83A0EFC3E4D08EFA499599BCFC672F651DE6E168CC1BDA8916C6121850B79
	8A864BB137070537FB9518D4DA12A4ACA7431FD179401CA42C51D00C74AD4B3D1210315FCA7F1202A4F2D29AFD2353487AAC40536597B3B9C396F9FD4CA83FBF6621E62DC70A5A511230053C52E5EA950D3EEBC392B211492B1234953158C7C5A4F8469AF65DCB5875CE66D0A2F3E5EA683C3B0F088A7871C55485255190AB716F96A569580D18D3877BD115C99AC8191CFD54137947D726CBCA1962D5E5CA76307B7C3FD66C79ABE54A122DA47F74E2EF080D1FE00D643F26ABD302403EDA7B0FF07C8876B5FE50
	3FB7A6C3623FD6194679AA93CE2768846ADF2BCCE13E4A14222AA77C9BBF0210F7D97D7E714291C7FDFEA723F6963B4FE91D253CFF4C5E857AFAA9A9E1A850274C42F75ABA134965CBDF6F84D5F5182CB0D6DB5B775B4C647D2083BD12283CCFF9FCA9495F05BCF2A2CB2BD9CA6C3E2012797FD0CB8788C411160A69A8GG340EGGD0CB818294G94G88G88GDB0015B0C411160A69A8GG340EGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81
	GBAGGGA3A9GGGG
**end of data**/
}


/**
 * Return the Channel1CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel1CheckBox() {
	if (ivjChannel1CheckBox == null) {
		try {
			ivjChannel1CheckBox = new javax.swing.JCheckBox();
			ivjChannel1CheckBox.setName("Channel1CheckBox");
			ivjChannel1CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel1CheckBox.setText("Channel #1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel1CheckBox;
}

/**
 * Return the Channel2CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel2CheckBox() {
	if (ivjChannel2CheckBox == null) {
		try {
			ivjChannel2CheckBox = new javax.swing.JCheckBox();
			ivjChannel2CheckBox.setName("Channel2CheckBox");
			ivjChannel2CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel2CheckBox.setText("Channel #2");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel2CheckBox;
}

/**
 * Return the Channel3CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel3CheckBox() {
	if (ivjChannel3CheckBox == null) {
		try {
			ivjChannel3CheckBox = new javax.swing.JCheckBox();
			ivjChannel3CheckBox.setName("Channel3CheckBox");
			ivjChannel3CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel3CheckBox.setText("Channel #3");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel3CheckBox;
}

/**
 * Return the Channel4CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel4CheckBox() {
	if (ivjChannel4CheckBox == null) {
		try {
			ivjChannel4CheckBox = new javax.swing.JCheckBox();
			ivjChannel4CheckBox.setName("Channel4CheckBox");
			ivjChannel4CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel4CheckBox.setText("Channel #4");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel4CheckBox;
}

/**
 * Return the CycleGroupComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getCycleGroupComboBox() {
	if (ivjCycleGroupComboBox == null) {
		try {
			ivjCycleGroupComboBox = new javax.swing.JComboBox();
			ivjCycleGroupComboBox.setName("CycleGroupComboBox");
			ivjCycleGroupComboBox.setPreferredSize(new java.awt.Dimension(200, 25));
			ivjCycleGroupComboBox.setEditable(true);
			ivjCycleGroupComboBox.setMinimumSize(new java.awt.Dimension(200, 25));
			// user code begin {1}
         
         try
         {
            String availableCycleGroups[] = DeviceMeterGroup.getDeviceCollectionGroups();
            for(int i=0;i<availableCycleGroups.length;i++)
               ivjCycleGroupComboBox.addItem( availableCycleGroups[i] );
         }
         catch(java.sql.SQLException e)
         {
            com.cannontech.clientutils.CTILogger.error( e.getMessage(), e );
         }
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCycleGroupComboBox;
}


/**
 * Return the CycleGroupLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getCycleGroupLabel() {
	if (ivjCycleGroupLabel == null) {
		try {
			ivjCycleGroupLabel = new javax.swing.JLabel();
			ivjCycleGroupLabel.setName("CycleGroupLabel");
			ivjCycleGroupLabel.setText("Data Collection Group:");
			ivjCycleGroupLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjCycleGroupLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjCycleGroupLabel.setPreferredSize(new java.awt.Dimension(140, 16));
			ivjCycleGroupLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjCycleGroupLabel.setMinimumSize(new java.awt.Dimension(140, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCycleGroupLabel;
}


/**
 * Return the DataCollectionPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getDataCollectionPanel() {
	if (ivjDataCollectionPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Data Collection");
			ivjDataCollectionPanel = new javax.swing.JPanel();
			ivjDataCollectionPanel.setName("DataCollectionPanel");
			ivjDataCollectionPanel.setBorder(ivjLocalBorder1);
			ivjDataCollectionPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsCycleGroupLabel = new java.awt.GridBagConstraints();
			constraintsCycleGroupLabel.gridx = 1; constraintsCycleGroupLabel.gridy = 2;
			constraintsCycleGroupLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsCycleGroupLabel.ipadx = 9;
			constraintsCycleGroupLabel.ipady = 2;
			constraintsCycleGroupLabel.insets = new java.awt.Insets(7, 15, 6, 1);
			getDataCollectionPanel().add(getCycleGroupLabel(), constraintsCycleGroupLabel);

			java.awt.GridBagConstraints constraintsAreaCodeGroupLabel = new java.awt.GridBagConstraints();
			constraintsAreaCodeGroupLabel.gridx = 1; constraintsAreaCodeGroupLabel.gridy = 3;
			constraintsAreaCodeGroupLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsAreaCodeGroupLabel.ipadx = 35;
			constraintsAreaCodeGroupLabel.ipady = 2;
			constraintsAreaCodeGroupLabel.insets = new java.awt.Insets(7, 15, 6, 1);
			getDataCollectionPanel().add(getAreaCodeGroupLabel(), constraintsAreaCodeGroupLabel);

			java.awt.GridBagConstraints constraintsCycleGroupComboBox = new java.awt.GridBagConstraints();
			constraintsCycleGroupComboBox.gridx = 2; constraintsCycleGroupComboBox.gridy = 2;
			constraintsCycleGroupComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsCycleGroupComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsCycleGroupComboBox.weightx = 1.0;
			constraintsCycleGroupComboBox.insets = new java.awt.Insets(3, 0, 3, 22);
			getDataCollectionPanel().add(getCycleGroupComboBox(), constraintsCycleGroupComboBox);

			java.awt.GridBagConstraints constraintsAreaCodeGroupComboBox = new java.awt.GridBagConstraints();
			constraintsAreaCodeGroupComboBox.gridx = 2; constraintsAreaCodeGroupComboBox.gridy = 3;
			constraintsAreaCodeGroupComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsAreaCodeGroupComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsAreaCodeGroupComboBox.weightx = 1.0;
			constraintsAreaCodeGroupComboBox.insets = new java.awt.Insets(3, 0, 3, 22);
			getDataCollectionPanel().add(getAreaCodeGroupComboBox(), constraintsAreaCodeGroupComboBox);

			java.awt.GridBagConstraints constraintsMeterNumberLabel = new java.awt.GridBagConstraints();
			constraintsMeterNumberLabel.gridx = 1; constraintsMeterNumberLabel.gridy = 1;
			constraintsMeterNumberLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMeterNumberLabel.ipadx = 54;
			constraintsMeterNumberLabel.ipady = 2;
			constraintsMeterNumberLabel.insets = new java.awt.Insets(8, 15, 3, 1);
			getDataCollectionPanel().add(getMeterNumberLabel(), constraintsMeterNumberLabel);

			java.awt.GridBagConstraints constraintsMeterNumberTextField = new java.awt.GridBagConstraints();
			constraintsMeterNumberTextField.gridx = 2; constraintsMeterNumberTextField.gridy = 1;
			constraintsMeterNumberTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsMeterNumberTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMeterNumberTextField.weightx = 1.0;
			constraintsMeterNumberTextField.ipadx = 196;
			constraintsMeterNumberTextField.insets = new java.awt.Insets(8, 0, 3, 22);
			getDataCollectionPanel().add(getMeterNumberTextField(), constraintsMeterNumberTextField);

			java.awt.GridBagConstraints constraintsJLabelBillingGroup = new java.awt.GridBagConstraints();
			constraintsJLabelBillingGroup.gridx = 1; constraintsJLabelBillingGroup.gridy = 4;
			constraintsJLabelBillingGroup.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelBillingGroup.ipadx = 9;
			constraintsJLabelBillingGroup.ipady = 2;
			constraintsJLabelBillingGroup.insets = new java.awt.Insets(7, 16, 23, 0);
			getDataCollectionPanel().add(getJLabelBillingGroup(), constraintsJLabelBillingGroup);

			java.awt.GridBagConstraints constraintsJComboBoxBillingGroup = new java.awt.GridBagConstraints();
			constraintsJComboBoxBillingGroup.gridx = 2; constraintsJComboBoxBillingGroup.gridy = 4;
			constraintsJComboBoxBillingGroup.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxBillingGroup.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxBillingGroup.weightx = 1.0;
			constraintsJComboBoxBillingGroup.insets = new java.awt.Insets(3, 1, 20, 21);
			getDataCollectionPanel().add(getJComboBoxBillingGroup(), constraintsJComboBoxBillingGroup);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDataCollectionPanel;
}

/**
 * Return the JComboBoxBillingGroup property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxBillingGroup() {
	if (ivjJComboBoxBillingGroup == null) {
		try {
			ivjJComboBoxBillingGroup = new javax.swing.JComboBox();
			ivjJComboBoxBillingGroup.setName("JComboBoxBillingGroup");
			ivjJComboBoxBillingGroup.setPreferredSize(new java.awt.Dimension(200, 25));
			ivjJComboBoxBillingGroup.setEditable(true);
			ivjJComboBoxBillingGroup.setMinimumSize(new java.awt.Dimension(200, 25));
			// user code begin {1}
         
         try
         {
            String avBillGrps[] = DeviceMeterGroup.getDeviceBillingGroups();
            for( int i = 0; i < avBillGrps.length; i++ )
               ivjJComboBoxBillingGroup.addItem( avBillGrps[i] );
         }
         catch(java.sql.SQLException e)
         {
            com.cannontech.clientutils.CTILogger.error( e.getMessage(), e );
         }
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxBillingGroup;
}


/**
 * Return the JComboBoxlVoltInterval property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxlVoltInterval() {
	if (ivjJComboBoxlVoltInterval == null) {
		try {
			ivjJComboBoxlVoltInterval = new javax.swing.JComboBox();
			ivjJComboBoxlVoltInterval.setName("JComboBoxlVoltInterval");
			ivjJComboBoxlVoltInterval.setEnabled(true);
			// user code begin {1}

			ivjJComboBoxlVoltInterval.addItem("15 second");
			ivjJComboBoxlVoltInterval.addItem("30 second");
			ivjJComboBoxlVoltInterval.addItem("45 second");
			ivjJComboBoxlVoltInterval.addItem("1 minute");
			ivjJComboBoxlVoltInterval.addItem("2 minute");
			ivjJComboBoxlVoltInterval.addItem("3 minute");
			ivjJComboBoxlVoltInterval.addItem("5 minute");
			ivjJComboBoxlVoltInterval.addItem("6 minute");
			ivjJComboBoxlVoltInterval.addItem("8 minute");
			ivjJComboBoxlVoltInterval.addItem("10 minute");
			ivjJComboBoxlVoltInterval.addItem("15 minute");
			ivjJComboBoxlVoltInterval.addItem("30 minute");
			ivjJComboBoxlVoltInterval.addItem("1 hour");
			
			
			
			ivjJComboBoxlVoltInterval.setEnabled( false );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxlVoltInterval;
}

/**
 * Return the JComboBoxlVoltRate property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxlVoltRate() {
	if (ivjJComboBoxlVoltRate == null) {
		try {
			ivjJComboBoxlVoltRate = new javax.swing.JComboBox();
			ivjJComboBoxlVoltRate.setName("JComboBoxlVoltRate");
			ivjJComboBoxlVoltRate.setEnabled(true);
			// user code begin {1}
			
			ivjJComboBoxlVoltRate.addItem("1 minute");
			ivjJComboBoxlVoltRate.addItem("2 minute");
			ivjJComboBoxlVoltRate.addItem("3 minute");
			ivjJComboBoxlVoltRate.addItem("5 minute");
			ivjJComboBoxlVoltRate.addItem("10 minute");
			ivjJComboBoxlVoltRate.addItem("15 minute");
			ivjJComboBoxlVoltRate.addItem("30 minute");
			ivjJComboBoxlVoltRate.addItem("1 hour");

			
			ivjJComboBoxlVoltRate.setEnabled( false );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxlVoltRate;
}

/**
 * Return the JLabelBillingGroup property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelBillingGroup() {
	if (ivjJLabelBillingGroup == null) {
		try {
			ivjJLabelBillingGroup = new javax.swing.JLabel();
			ivjJLabelBillingGroup.setName("JLabelBillingGroup");
			ivjJLabelBillingGroup.setText("Billing Group:");
			ivjJLabelBillingGroup.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjJLabelBillingGroup.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelBillingGroup.setPreferredSize(new java.awt.Dimension(140, 16));
			ivjJLabelBillingGroup.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelBillingGroup.setMinimumSize(new java.awt.Dimension(140, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelBillingGroup;
}


/**
 * Return the JLabelVoltDmdRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelVoltDmdRate() {
	if (ivjJLabelVoltDmdRate == null) {
		try {
			ivjJLabelVoltDmdRate = new javax.swing.JLabel();
			ivjJLabelVoltDmdRate.setName("JLabelVoltDmdRate");
			ivjJLabelVoltDmdRate.setText("Voltage Demand Rate:");
			ivjJLabelVoltDmdRate.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjJLabelVoltDmdRate.setPreferredSize(new java.awt.Dimension(200, 16));
			ivjJLabelVoltDmdRate.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelVoltDmdRate.setEnabled(true);
			ivjJLabelVoltDmdRate.setMinimumSize(new java.awt.Dimension(175, 16));
			// user code begin {1}
			
			ivjJLabelVoltDmdRate.setEnabled( false );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelVoltDmdRate;
}

/**
 * Return the JLabelVoltIntervalDmdRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelVoltIntervalDmdRate() {
	if (ivjJLabelVoltIntervalDmdRate == null) {
		try {
			ivjJLabelVoltIntervalDmdRate = new javax.swing.JLabel();
			ivjJLabelVoltIntervalDmdRate.setName("JLabelVoltIntervalDmdRate");
			ivjJLabelVoltIntervalDmdRate.setText("Voltage Last Interval Demand Rate:");
			ivjJLabelVoltIntervalDmdRate.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjJLabelVoltIntervalDmdRate.setPreferredSize(new java.awt.Dimension(175, 16));
			ivjJLabelVoltIntervalDmdRate.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelVoltIntervalDmdRate.setEnabled(true);
			ivjJLabelVoltIntervalDmdRate.setMinimumSize(new java.awt.Dimension(150, 16));
			// user code begin {1}
			
			ivjJLabelVoltIntervalDmdRate.setEnabled( false );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelVoltIntervalDmdRate;
}

/**
 * Return the DemandIntervalComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getLastIntervalDemandRateComboBox() {
	if (ivjLastIntervalDemandRateComboBox == null) {
		try {
			ivjLastIntervalDemandRateComboBox = new javax.swing.JComboBox();
			ivjLastIntervalDemandRateComboBox.setName("LastIntervalDemandRateComboBox");
			ivjLastIntervalDemandRateComboBox.setEnabled(true);
			// user code begin {1}
         
         ivjLastIntervalDemandRateComboBox.addItem("1 minute");
         ivjLastIntervalDemandRateComboBox.addItem("2 minute");
         ivjLastIntervalDemandRateComboBox.addItem("3 minute");
         ivjLastIntervalDemandRateComboBox.addItem("5 minute");
         ivjLastIntervalDemandRateComboBox.addItem("10 minute");
         ivjLastIntervalDemandRateComboBox.addItem("15 minute");
         ivjLastIntervalDemandRateComboBox.addItem("30 minute");
         ivjLastIntervalDemandRateComboBox.addItem("1 hour");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLastIntervalDemandRateComboBox;
}

/**
 * Return the DemandIntervalLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getLastIntervalDemandRateLabel() {
	if (ivjLastIntervalDemandRateLabel == null) {
		try {
			ivjLastIntervalDemandRateLabel = new javax.swing.JLabel();
			ivjLastIntervalDemandRateLabel.setName("LastIntervalDemandRateLabel");
			ivjLastIntervalDemandRateLabel.setText("Last Interval Demand Rate:");
			ivjLastIntervalDemandRateLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjLastIntervalDemandRateLabel.setPreferredSize(new java.awt.Dimension(175, 16));
			ivjLastIntervalDemandRateLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjLastIntervalDemandRateLabel.setEnabled(true);
			ivjLastIntervalDemandRateLabel.setMinimumSize(new java.awt.Dimension(150, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLastIntervalDemandRateLabel;
}

/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getLoadProfileCollectionPanel() {
	if (ivjLoadProfileCollectionPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Load Profile Collection");
			ivjLoadProfileCollectionPanel = new javax.swing.JPanel();
			ivjLoadProfileCollectionPanel.setName("LoadProfileCollectionPanel");
			ivjLoadProfileCollectionPanel.setBorder(ivjLocalBorder);
			ivjLoadProfileCollectionPanel.setLayout(new java.awt.GridBagLayout());
			ivjLoadProfileCollectionPanel.setFont(new java.awt.Font("dialog", 0, 12));

			java.awt.GridBagConstraints constraintsChannel1CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel1CheckBox.gridx = 1; constraintsChannel1CheckBox.gridy = 2;
			constraintsChannel1CheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsChannel1CheckBox.insets = new java.awt.Insets(2, 4, 2, 81);
			getLoadProfileCollectionPanel().add(getChannel1CheckBox(), constraintsChannel1CheckBox);

			java.awt.GridBagConstraints constraintsChannel2CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel2CheckBox.gridx = 2; constraintsChannel2CheckBox.gridy = 2;
			constraintsChannel2CheckBox.gridwidth = 2;
			constraintsChannel2CheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsChannel2CheckBox.insets = new java.awt.Insets(2, 4, 2, 10);
			getLoadProfileCollectionPanel().add(getChannel2CheckBox(), constraintsChannel2CheckBox);

			java.awt.GridBagConstraints constraintsChannel3CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel3CheckBox.gridx = 1; constraintsChannel3CheckBox.gridy = 3;
			constraintsChannel3CheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsChannel3CheckBox.insets = new java.awt.Insets(2, 4, 2, 81);
			getLoadProfileCollectionPanel().add(getChannel3CheckBox(), constraintsChannel3CheckBox);

			java.awt.GridBagConstraints constraintsChannel4CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel4CheckBox.gridx = 2; constraintsChannel4CheckBox.gridy = 3;
			constraintsChannel4CheckBox.gridwidth = 2;
			constraintsChannel4CheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsChannel4CheckBox.insets = new java.awt.Insets(2, 4, 2, 10);
			getLoadProfileCollectionPanel().add(getChannel4CheckBox(), constraintsChannel4CheckBox);

			java.awt.GridBagConstraints constraintsLoadProfileDemandRateLabel = new java.awt.GridBagConstraints();
			constraintsLoadProfileDemandRateLabel.gridx = 1; constraintsLoadProfileDemandRateLabel.gridy = 1;
			constraintsLoadProfileDemandRateLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsLoadProfileDemandRateLabel.ipadx = 25;
			constraintsLoadProfileDemandRateLabel.insets = new java.awt.Insets(5, 4, 5, 4);
			getLoadProfileCollectionPanel().add(getLoadProfileDemandRateLabel(), constraintsLoadProfileDemandRateLabel);

			java.awt.GridBagConstraints constraintsLoadProfileDemandRateComboBox = new java.awt.GridBagConstraints();
			constraintsLoadProfileDemandRateComboBox.gridx = 2; constraintsLoadProfileDemandRateComboBox.gridy = 1;
			constraintsLoadProfileDemandRateComboBox.gridwidth = 2;
			constraintsLoadProfileDemandRateComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsLoadProfileDemandRateComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsLoadProfileDemandRateComboBox.weightx = 1.0;
			constraintsLoadProfileDemandRateComboBox.ipadx = 4;
			constraintsLoadProfileDemandRateComboBox.insets = new java.awt.Insets(5, 4, 1, 65);
			getLoadProfileCollectionPanel().add(getLoadProfileDemandRateComboBox(), constraintsLoadProfileDemandRateComboBox);

			java.awt.GridBagConstraints constraintsJLabelVoltIntervalDmdRate = new java.awt.GridBagConstraints();
			constraintsJLabelVoltIntervalDmdRate.gridx = 1; constraintsJLabelVoltIntervalDmdRate.gridy = 4;
			constraintsJLabelVoltIntervalDmdRate.gridwidth = 2;
			constraintsJLabelVoltIntervalDmdRate.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelVoltIntervalDmdRate.ipadx = 78;
			constraintsJLabelVoltIntervalDmdRate.ipady = 4;
			constraintsJLabelVoltIntervalDmdRate.insets = new java.awt.Insets(4, 4, 2, 1);
			getLoadProfileCollectionPanel().add(getJLabelVoltIntervalDmdRate(), constraintsJLabelVoltIntervalDmdRate);

			java.awt.GridBagConstraints constraintsJComboBoxlVoltInterval = new java.awt.GridBagConstraints();
			constraintsJComboBoxlVoltInterval.gridx = 3; constraintsJComboBoxlVoltInterval.gridy = 4;
			constraintsJComboBoxlVoltInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxlVoltInterval.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxlVoltInterval.weightx = 1.0;
			constraintsJComboBoxlVoltInterval.ipadx = 12;
			constraintsJComboBoxlVoltInterval.insets = new java.awt.Insets(3, 2, 0, 9);
			getLoadProfileCollectionPanel().add(getJComboBoxlVoltInterval(), constraintsJComboBoxlVoltInterval);

			java.awt.GridBagConstraints constraintsJLabelVoltDmdRate = new java.awt.GridBagConstraints();
			constraintsJLabelVoltDmdRate.gridx = 1; constraintsJLabelVoltDmdRate.gridy = 5;
			constraintsJLabelVoltDmdRate.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelVoltDmdRate.ipadx = 25;
			constraintsJLabelVoltDmdRate.ipady = 6;
			constraintsJLabelVoltDmdRate.insets = new java.awt.Insets(1, 4, 11, 4);
			getLoadProfileCollectionPanel().add(getJLabelVoltDmdRate(), constraintsJLabelVoltDmdRate);

			java.awt.GridBagConstraints constraintsJComboBoxlVoltRate = new java.awt.GridBagConstraints();
			constraintsJComboBoxlVoltRate.gridx = 3; constraintsJComboBoxlVoltRate.gridy = 5;
			constraintsJComboBoxlVoltRate.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxlVoltRate.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxlVoltRate.weightx = 1.0;
			constraintsJComboBoxlVoltRate.ipadx = 12;
			constraintsJComboBoxlVoltRate.insets = new java.awt.Insets(3, 2, 8, 9);
			getLoadProfileCollectionPanel().add(getJComboBoxlVoltRate(), constraintsJComboBoxlVoltRate);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadProfileCollectionPanel;
}


/**
 * Return the LoadProfileDemandRateComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getLoadProfileDemandRateComboBox() {
	if (ivjLoadProfileDemandRateComboBox == null) {
		try {
			ivjLoadProfileDemandRateComboBox = new javax.swing.JComboBox();
			ivjLoadProfileDemandRateComboBox.setName("LoadProfileDemandRateComboBox");
			ivjLoadProfileDemandRateComboBox.setEnabled(true);
			// user code begin {1}
         
         ivjLoadProfileDemandRateComboBox.addItem("5 minute");
         ivjLoadProfileDemandRateComboBox.addItem("15 minute");
         ivjLoadProfileDemandRateComboBox.addItem("30 minute");
         ivjLoadProfileDemandRateComboBox.addItem("1 hour");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadProfileDemandRateComboBox;
}

/**
 * Return the LoadProfileDemandRateLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getLoadProfileDemandRateLabel() {
	if (ivjLoadProfileDemandRateLabel == null) {
		try {
			ivjLoadProfileDemandRateLabel = new javax.swing.JLabel();
			ivjLoadProfileDemandRateLabel.setName("LoadProfileDemandRateLabel");
			ivjLoadProfileDemandRateLabel.setText("Load Profile Demand Rate:");
			ivjLoadProfileDemandRateLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjLoadProfileDemandRateLabel.setPreferredSize(new java.awt.Dimension(175, 16));
			ivjLoadProfileDemandRateLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjLoadProfileDemandRateLabel.setEnabled(true);
			ivjLoadProfileDemandRateLabel.setMinimumSize(new java.awt.Dimension(150, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadProfileDemandRateLabel;
}

/**
 * Return the MeterNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMeterNumberLabel() {
	if (ivjMeterNumberLabel == null) {
		try {
			ivjMeterNumberLabel = new javax.swing.JLabel();
			ivjMeterNumberLabel.setName("MeterNumberLabel");
			ivjMeterNumberLabel.setText("Meter Number:");
			ivjMeterNumberLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjMeterNumberLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjMeterNumberLabel.setPreferredSize(new java.awt.Dimension(100, 16));
			ivjMeterNumberLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjMeterNumberLabel.setMinimumSize(new java.awt.Dimension(95, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMeterNumberLabel;
}


/**
 * Return the MeterNumberTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getMeterNumberTextField()
{
    if (ivjMeterNumberTextField == null)
    {
        try
        {
            ivjMeterNumberTextField = new javax.swing.JTextField();
            ivjMeterNumberTextField.setName("MeterNumberTextField");
            // user code begin {1}
            ivjMeterNumberTextField.setDocument(
                new com.cannontech.common.gui.util.TextFieldDocument(com.cannontech.common.gui.util.TextFieldDocument.MAX_METER_NUMBER_LENGTH));

            // user code end
        }
        catch (java.lang.Throwable ivjExc)
        {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    }
    return ivjMeterNumberTextField;
}


/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) 
{

	//The default object is either a MCT or a IEDmeter
	if( val instanceof MCTBase || val instanceof IEDMeter )
	{
		DeviceLoadProfile dlp = null;
		
		if( val instanceof MCTBase )
		{
			dlp = ((MCTBase) val).getDeviceLoadProfile();
		}		
		else if( val instanceof IEDMeter )
		{
			dlp = ((IEDMeter) val).getDeviceLoadProfile();
		}
				
		dlp.setLastIntervalDemandRate(
         CtiUtilities.getIntervalComboBoxSecondsValue(getLastIntervalDemandRateComboBox()) );

		if( getLoadProfileCollectionPanel().isVisible() )
		{
         dlp.setLoadProfileDemandRate(
            CtiUtilities.getIntervalComboBoxSecondsValue(getLoadProfileDemandRateComboBox()) );

			StringBuffer loadProfileCollection = new StringBuffer();
			if( getChannel1CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");
			if( getChannel2CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");
            

			if( getChannel3CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");
			if( getChannel4CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");

			dlp.setLoadProfileCollection(loadProfileCollection.toString());

			dlp.setVoltageDmdInterval(
				CtiUtilities.getIntervalComboBoxSecondsValue(getJComboBoxlVoltInterval()) );

			dlp.setVoltageDmdRate(
				CtiUtilities.getIntervalComboBoxSecondsValue(getJComboBoxlVoltRate()) );

		}
		
	}


	//handle the devicemetergroup data below
	DeviceMeterGroup dmg = 
			((IDeviceMeterGroup)val).getDeviceMeterGroup();

	String cycleGroup = getCycleGroupComboBox().getSelectedItem().toString();
	String areaCodeGroup = getAreaCodeGroupComboBox().getSelectedItem().toString();
	String meterNumber = getMeterNumberTextField().getText();
   String billingGroup = getJComboBoxBillingGroup().getSelectedItem().toString();
   
   if( cycleGroup != null && cycleGroup.length() > 0 )
   	dmg.setCollectionGroup( cycleGroup );
      
   if( areaCodeGroup != null && areaCodeGroup.length() > 0 )
   	dmg.setTestCollectionGroup( areaCodeGroup );
      
   if( meterNumber != null && meterNumber.length() > 0 )
   	dmg.setMeterNumber( meterNumber );

   if( billingGroup != null && billingGroup.length() > 0 )
      dmg.setBillingGroup( billingGroup );
	
	return val;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	// com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getLastIntervalDemandRateComboBox().addItemListener(this);
	getCycleGroupComboBox().addActionListener(this);
	getAreaCodeGroupComboBox().addActionListener(this);
	getChannel2CheckBox().addActionListener(this);
	getChannel1CheckBox().addActionListener(this);
	getChannel3CheckBox().addActionListener(this);
	getChannel4CheckBox().addActionListener(this);
	getLoadProfileDemandRateComboBox().addActionListener(this);
	getCycleGroupComboBox().addKeyListener(this);
	getAreaCodeGroupComboBox().addKeyListener(this);
	getMeterNumberTextField().addCaretListener(this);
	getJComboBoxBillingGroup().addActionListener(this);
	getJComboBoxlVoltInterval().addActionListener(this);
	getJComboBoxlVoltRate().addActionListener(this);
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DeviceMeterGroupEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(411, 366);

		java.awt.GridBagConstraints constraintsLastIntervalDemandRateComboBox = new java.awt.GridBagConstraints();
		constraintsLastIntervalDemandRateComboBox.gridx = 2; constraintsLastIntervalDemandRateComboBox.gridy = 2;
		constraintsLastIntervalDemandRateComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsLastIntervalDemandRateComboBox.anchor = java.awt.GridBagConstraints.WEST;
		constraintsLastIntervalDemandRateComboBox.weightx = 1.0;
		constraintsLastIntervalDemandRateComboBox.ipadx = 17;
		constraintsLastIntervalDemandRateComboBox.insets = new java.awt.Insets(4, 3, 5, 76);
		add(getLastIntervalDemandRateComboBox(), constraintsLastIntervalDemandRateComboBox);

		java.awt.GridBagConstraints constraintsLastIntervalDemandRateLabel = new java.awt.GridBagConstraints();
		constraintsLastIntervalDemandRateLabel.gridx = 1; constraintsLastIntervalDemandRateLabel.gridy = 2;
		constraintsLastIntervalDemandRateLabel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsLastIntervalDemandRateLabel.ipadx = 25;
		constraintsLastIntervalDemandRateLabel.insets = new java.awt.Insets(7, 12, 9, 2);
		add(getLastIntervalDemandRateLabel(), constraintsLastIntervalDemandRateLabel);

		java.awt.GridBagConstraints constraintsLoadProfileCollectionPanel = new java.awt.GridBagConstraints();
		constraintsLoadProfileCollectionPanel.gridx = 1; constraintsLoadProfileCollectionPanel.gridy = 3;
		constraintsLoadProfileCollectionPanel.gridwidth = 2;
		constraintsLoadProfileCollectionPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsLoadProfileCollectionPanel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsLoadProfileCollectionPanel.weightx = 1.0;
		constraintsLoadProfileCollectionPanel.weighty = 1.0;
		constraintsLoadProfileCollectionPanel.ipadx = -55;
		constraintsLoadProfileCollectionPanel.ipady = -16;
		constraintsLoadProfileCollectionPanel.insets = new java.awt.Insets(5, 12, 9, 12);
		add(getLoadProfileCollectionPanel(), constraintsLoadProfileCollectionPanel);

		java.awt.GridBagConstraints constraintsDataCollectionPanel = new java.awt.GridBagConstraints();
		constraintsDataCollectionPanel.gridx = 1; constraintsDataCollectionPanel.gridy = 1;
		constraintsDataCollectionPanel.gridwidth = 2;
		constraintsDataCollectionPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsDataCollectionPanel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsDataCollectionPanel.weightx = 1.0;
		constraintsDataCollectionPanel.weighty = 1.0;
		constraintsDataCollectionPanel.ipadx = -10;
		constraintsDataCollectionPanel.ipady = -17;
		constraintsDataCollectionPanel.insets = new java.awt.Insets(6, 12, 3, 12);
		add(getDataCollectionPanel(), constraintsDataCollectionPanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
/*   if( getJCheckBoxScanWindow().isSelected() 
       && (getJTextFieldClose().getTimeTotalSeconds().intValue()
           == getJTextFieldOpen().getTimeTotalSeconds().intValue()) )
   {
      setErrorString("The Device Window open and close values can not be equal");
      return false;
   }
*/
	if(is410 && getMeterNumberTextField().getText().length() < 7)
	{
	   setErrorString("An MCT410 requires a meter number with seven digits");
	   return false;
	}

   return true;
}


/**
 * Method to handle events for the ItemListener interface.
 * @param e java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void itemStateChanged(java.awt.event.ItemEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getLastIntervalDemandRateComboBox()) 
		connEtoC4(e);
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyPressed(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyReleased(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyTyped(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getCycleGroupComboBox()) 
		connEtoC10(e);
	if (e.getSource() == getAreaCodeGroupComboBox()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame;
		try {
			Class aFrameClass = Class.forName("com.ibm.uvm.abt.edit.TestFrame");
			frame = (java.awt.Frame)aFrameClass.newInstance();
		} catch (java.lang.Throwable ivjExc) {
			frame = new java.awt.Frame();
		}
		DeviceMeterGroupEditorPanel aDeviceMeterGroupEditorPanel;
		aDeviceMeterGroupEditorPanel = new DeviceMeterGroupEditorPanel();
		frame.add("Center", aDeviceMeterGroupEditorPanel);
		frame.setSize(aDeviceMeterGroupEditorPanel.getSize());
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}

private void setVoltageEnabled( boolean value )
{
	getJComboBoxlVoltInterval().setEnabled( value );
	getJComboBoxlVoltRate().setEnabled( value );
	getJLabelVoltDmdRate().setEnabled( value );
	getJLabelVoltIntervalDmdRate().setEnabled( value );
}

/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val) 
{
	int deviceType = PAOGroups.getDeviceType( ((DeviceBase)val).getPAOType() );

	getLastIntervalDemandRateLabel().setVisible( val instanceof MCTBase );
	getLastIntervalDemandRateComboBox().setVisible( val instanceof MCTBase );
	getLoadProfileCollectionPanel().setVisible( val instanceof MCTBase );
		
	//are we a voltage channel?
	getJComboBoxlVoltInterval().setVisible( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) );
	getJComboBoxlVoltRate().setVisible( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) );		
	getJLabelVoltDmdRate().setVisible( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) );
	getJLabelVoltIntervalDmdRate().setVisible( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) );

	//The default object is either a MCT or a IEDmeter
	if( val instanceof MCTBase )
	{
		getLastIntervalDemandRateLabel().setVisible(true);
		getLastIntervalDemandRateComboBox().setVisible(true);
		getLoadProfileCollectionPanel().setVisible(true);


		DeviceLoadProfile dlp = ((MCTBase)val).getDeviceLoadProfile();

		String loadProfileCollection = dlp.getLoadProfileCollection();

      CtiUtilities.setIntervalComboBoxSelectedItem(
      		getLastIntervalDemandRateComboBox(), dlp.getLastIntervalDemandRate().intValue() );

		CtiUtilities.setIntervalComboBoxSelectedItem(
				getJComboBoxlVoltInterval(), dlp.getVoltageDmdInterval().intValue() );

		CtiUtilities.setIntervalComboBoxSelectedItem(
				getJComboBoxlVoltRate(), dlp.getVoltageDmdRate().intValue() );


		if( deviceType == PAOGroups.DCT_501 
			 || deviceType == PAOGroups.LMT_2 )
		{
			//the last interval demand rate can not be edited for DCT_501 & LMT-2
			getLastIntervalDemandRateComboBox().setVisible(false);
			getLastIntervalDemandRateLabel().setVisible(false);
		}
		
		if( deviceType == PAOGroups.MCT410_KWH_ONLY)
		{
			//The 410 LE doesn't support all these options
			getChannel2CheckBox().setEnabled(false);
			getChannel3CheckBox().setEnabled(false);
			
			getJLabelVoltDmdRate().setText("Voltage Profile Demand Rate: ");
			getJComboBoxlVoltRate().removeAllItems();
			getJComboBoxlVoltRate().addItem("5 minute");
			getJComboBoxlVoltRate().addItem("15 minute");
			getJComboBoxlVoltRate().addItem("30 minute");
			getJComboBoxlVoltRate().addItem("1 hour");
			
			is410 = true;
		}
		if(deviceType == PAOGroups.MCT410IL)
		{
			getChannel1CheckBox().setEnabled(false);
			getChannel2CheckBox().setEnabled(false);
			getChannel3CheckBox().setEnabled(false);
			
			getJLabelVoltDmdRate().setText("Voltage Profile Demand Rate: ");
			getJComboBoxlVoltRate().removeAllItems();
			getJComboBoxlVoltRate().addItem("5 minute");
			getJComboBoxlVoltRate().addItem("15 minute");
			getJComboBoxlVoltRate().addItem("30 minute");
			getJComboBoxlVoltRate().addItem("1 hour");
		}
		
      CtiUtilities.setIntervalComboBoxSelectedItem(
            getLoadProfileDemandRateComboBox(), dlp.getLoadProfileDemandRate().intValue() );


		if( DeviceTypesFuncs.isLoadProfile1Channel(deviceType) )
		{
			CtiUtilities.setCheckBoxState(getChannel1CheckBox(),new Character(loadProfileCollection.charAt(0)));
			getChannel2CheckBox().setVisible(false);
			getChannel3CheckBox().setVisible(false);
			getChannel4CheckBox().setVisible(false);
		}
      else if( DeviceTypesFuncs.isLoadProfile3Channel(deviceType) )
      {
         CtiUtilities.setCheckBoxState(getChannel1CheckBox(), new Character(loadProfileCollection.charAt(0)));
         CtiUtilities.setCheckBoxState(getChannel2CheckBox(), new Character(loadProfileCollection.charAt(1)));
         CtiUtilities.setCheckBoxState(getChannel3CheckBox(), new Character(loadProfileCollection.charAt(2)));
         getChannel4CheckBox().setVisible(false);
      }
		else if( DeviceTypesFuncs.isLoadProfile4Channel(deviceType) )
		{
			CtiUtilities.setCheckBoxState(getChannel1CheckBox(), new Character(loadProfileCollection.charAt(0)));
			CtiUtilities.setCheckBoxState(getChannel2CheckBox(), new Character(loadProfileCollection.charAt(1)));
			CtiUtilities.setCheckBoxState(getChannel3CheckBox(), new Character(loadProfileCollection.charAt(2)));
			CtiUtilities.setCheckBoxState(getChannel4CheckBox(), new Character(loadProfileCollection.charAt(3)));
			
			if( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) )
			{
				getChannel4CheckBox().setText("Channel Voltage");
				setVoltageEnabled( getChannel4CheckBox().isSelected() );
			}
			
			
		}
	   else //must not have load profile capabilities
      {
         //setting invisible lays out the JPanel in a Funny way, just remove the comps
         getLoadProfileCollectionPanel().removeAll();
         getLoadProfileCollectionPanel().setBorder( null );
      }

	}



	//handle the DeviceMeterGroup data below
	DeviceMeterGroup dmg = 
			((IDeviceMeterGroup)val).getDeviceMeterGroup();
	
	getMeterNumberTextField().setText( dmg.getMeterNumber() );
	getCycleGroupComboBox().setSelectedItem( dmg.getCollectionGroup() );
	getAreaCodeGroupComboBox().setSelectedItem( dmg.getTestCollectionGroup() );
   getJComboBoxBillingGroup().setSelectedItem( dmg.getBillingGroup() );
}
}
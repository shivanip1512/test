package com.cannontech.dbeditor.editor.device;

import com.cannontech.database.data.device.DeviceBase;
import com.cannontech.database.data.device.DeviceTypesFuncs;
import com.cannontech.database.data.device.IDeviceMeterGroup;
import com.cannontech.database.data.device.IEDMeter;
import com.cannontech.database.data.device.MCTBase;
import com.cannontech.database.data.pao.DeviceTypes;
import com.cannontech.database.db.device.DeviceLoadProfile;
import com.cannontech.database.db.device.DeviceMeterGroup;

/**
 * This type was created in VisualAge.
 */
public class DeviceMeterGroupEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.KeyListener, javax.swing.event.CaretListener {
	private javax.swing.JLabel ivjAreaCodeGroupLabel = null;
	private javax.swing.JLabel ivjCycleGroupLabel = null;
	private javax.swing.JComboBox ivjAreaCodeGroupComboBox = null;
	private javax.swing.JComboBox ivjCycleGroupComboBox = null;
	private javax.swing.JComboBox ivjLastIntervalDemandRateComboBox = null;
	private javax.swing.JLabel ivjLastIntervalDemandRateLabel = null;
	private javax.swing.JCheckBox ivjChannel1CheckBox = null;
	private javax.swing.JCheckBox ivjChannel2CheckBox = null;
	private javax.swing.JCheckBox ivjChannel3CheckBox = null;
	private javax.swing.JCheckBox ivjChannel4CheckBox = null;
	private javax.swing.JComboBox ivjLoadProfileDemandRateComboBox = null;
	private javax.swing.JLabel ivjLoadProfileDemandRateLabel = null;
	private javax.swing.JPanel ivjLoadProfileCollectionPanel = null;
	private javax.swing.JPanel ivjDataCollectionPanel = null;
	private javax.swing.JLabel ivjMeterNumberLabel = null;
	private javax.swing.JTextField ivjMeterNumberTextField = null;
	private javax.swing.JComboBox ivjJComboBoxBillingGroup = null;
	private javax.swing.JLabel ivjJLabelBillingGroup = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public DeviceMeterGroupEditorPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getCycleGroupComboBox()) 
		connEtoC5(e);
	if (e.getSource() == getAreaCodeGroupComboBox()) 
		connEtoC6(e);
	if (e.getSource() == getChannel2CheckBox()) 
		connEtoC1(e);
	if (e.getSource() == getChannel1CheckBox()) 
		connEtoC2(e);
	if (e.getSource() == getChannel3CheckBox()) 
		connEtoC7(e);
	if (e.getSource() == getChannel4CheckBox()) 
		connEtoC8(e);
	if (e.getSource() == getLoadProfileDemandRateComboBox()) 
		connEtoC9(e);
	if (e.getSource() == getJComboBoxBillingGroup()) 
		connEtoC3(e);
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getMeterNumberTextField()) 
		connEtoC12(e);
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  (Channel2CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (CycleGroupComboBox.key.keyTyped(java.awt.event.KeyEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (AreaCodeGroupComboBox.key.keyTyped(java.awt.event.KeyEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC12:  (MeterNumberTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (Channel1CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JComboBoxBillingGroup.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (DemandIntervalComboBox.item.itemStateChanged(java.awt.event.ItemEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (CycleGroupComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (AreaCodeGroupComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (Channel3CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (Channel4CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (LoadProfileDemandRateComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * Return the AreaCodeGroupComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getAreaCodeGroupComboBox() {
	if (ivjAreaCodeGroupComboBox == null) {
		try {
			ivjAreaCodeGroupComboBox = new javax.swing.JComboBox();
			ivjAreaCodeGroupComboBox.setName("AreaCodeGroupComboBox");
			ivjAreaCodeGroupComboBox.setPreferredSize(new java.awt.Dimension(200, 25));
			ivjAreaCodeGroupComboBox.setEditable(true);
			ivjAreaCodeGroupComboBox.setMinimumSize(new java.awt.Dimension(200, 25));
			// user code begin {1}
         
         try
         {
            String availableAreaCodeGroups[] = DeviceMeterGroup.getDeviceTestCollectionGroups();
            for(int i=0;i<availableAreaCodeGroups.length;i++)
               ivjAreaCodeGroupComboBox.addItem( availableAreaCodeGroups[i] );
         }
         catch(java.sql.SQLException e)
         {
            com.cannontech.clientutils.CTILogger.error( e.getMessage(), e );
         }
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAreaCodeGroupComboBox;
}


/**
 * Return the AreaCodeGroupLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getAreaCodeGroupLabel() {
	if (ivjAreaCodeGroupLabel == null) {
		try {
			ivjAreaCodeGroupLabel = new javax.swing.JLabel();
			ivjAreaCodeGroupLabel.setName("AreaCodeGroupLabel");
			ivjAreaCodeGroupLabel.setText("Alternate Group:");
			ivjAreaCodeGroupLabel.setMaximumSize(new java.awt.Dimension(114, 16));
			ivjAreaCodeGroupLabel.setPreferredSize(new java.awt.Dimension(114, 16));
			ivjAreaCodeGroupLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjAreaCodeGroupLabel.setMinimumSize(new java.awt.Dimension(114, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAreaCodeGroupLabel;
}

/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GA3E1AAADGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155BD8DD8D5D536B412D943949516B9D8D4582322223299CB1A688DCD16CE51FBB4799AE70669B9451B3106B771E62CFC53119FAF18BF28603FF9D3ACD0C2D0B4FFC8D0712FAE08F2C5AAD2AE5C83DC3DFF5EFB100BE23E3577BEEB1FF34FBD173FBEFDB3FE5F625C3D76DAEB2F3D765AFFEB6FF3947257C4E54F4A489704D959027C6F33D902E03AA488FFB0FCDB0B38E575D586C1756FA3000542EF9DD9
	70AC023C30972A8CF9429F8F65C03A92525604AA43D2783DD8787321D5EE7891241CF417A02C2DFD6D753E4B39219B4BB150741F174D0567FC00EAD296C0DCBDA95F30FC190C9F81697972EF8233B284C1BACAE8EEE8DD2642274BF407A02F99E059B1C233F679AAB9BF9EF004A6991E29C7992DGB439D43B2BF7EE17691AEF0C92521F7FA8E39EA9CBA59F216598638D151FC661DEEA08CC413A6DA03559190E5DEDAEC7E91B4569F4B9A5312D33545AAADAED124BD3AABF2C62B9DB1B38F3E78DFD560A1268B9
	68F1F53977536CFA0BD3348B69D47F47DAF328EC509F52A18D8477E99B3159F678DD8F505900F5F8E9DE252CE34419A8A1656E7C20F5C8ECE03A27B6A8F5C879761D4CD1E6A27F4B65F3E53EA2C837GB0DDEEDE0E3ACCB523AEE3CD04B67FF81521842066B8626D35845F8CE989A06CB86A7879A728E353050784615BB3D98B026898FD1C69B679382223397E1D4C6554EFD67610364FE904F2812A812CG21G51GAB293F7E2AFB83BC7734CA7BDC8E074B39476D5EEB37FAEADDD6518E3FF76E049C99F7CCEC
	F3F92C0240FC720956929DFD90629B7D7D11G2B5B8981FDA87658BDC25A87762CEC1D3A0DFBF9DDC612ACE3DA23D2376A9344EEEF52364D025F040F541561B32C849F2A4233365AC269C9BA8172421A504ECD73D197D356E8A12F7CC006C1C717D17F3AAB2369AB26037BABC597E6637FB9CFEC9C897871GC9G29GB9DFD7990A3EC69B9BFDDB7A3371E168839E27455E50556A36F8243DDDB63BD5744836BE3A3CAFDB6B8163BBB5E8BEE61718AD6AB61A7A68FEDD3BCC0D5910D173B533C773570ADDD85923
	02165D7BF520EF4C67ED381C7609702FD99BE6F27CBA0A0FD261D95B5ECF7B96C947C1DE7EB76067143E240E60FD5FE8FDE48F450F7BC66BA31EDA7411B4480BEF2EB230763D39170C0DA33E05BE83908F108C108E10F7324AD0F8925B780CEF53G7BD13D2AFD99EFE14F92F80ABE49E3B96C74CA96E71B58E87158AC2DF651AB48B41F76903B367A71ED267D3B8D4AB8A8BAC50FC532391CA05D62A0E32517516C6AD9C8E8BCA24DB55B9CA29460A0D3944B5F5733981EF60BD7BA6E36DAA4D121E079DF76901F
	B8E7E98409A0GFECBA7093DDE22E3EE8D7CEEB90936CA38C8F063A11D446D720B1EC5707C921CDB3443D8EEEBA3EAD8BCBD6823EF371511BE8E743ED3B09736C07F844837D499A2818ADB2B8C31G55EDE0FB00CAEB15A1510A7D772DA674531AF9E3051217EBF47D14C03D48FC2ED3547AE90E15149F8E78B800A400B4003C76AAC399C0BD009BA09CA08EA089A02D9D67659DED8970A4FA8D260F2901541354FDA034246E6409F6C1BC319731DB352C8731E322D5490FED6DDBBE2B0B1D5625E00875A070015C
	8F87C23BD4FE1239F7018A1FAB6B33D8CEE74BFD92739776A31779E169A5521773BAE05E83B0F520AF4EBAEF94E89F5DEB710A58AB0FF820C309D645B3996D5F4F933D44F322D32A915D22538ABF3CF21F483EC074147BEB3B0B77258FA81E0C5F7B20C3F9B9FE6105058C8FB2543D9F731753FC0BA4F9EC2DDD1258A0CA124D592170FFF4016862751B9A3CF2DD4B84D2D7AB543197A00C57753E8B4406586FCCAE5719AE37190CA8F27FFD082ED32200FEFC877A731ADA326E1C4A5345B42D64BFECEA9A02DF90
	F9831F331E9FD2998375BBD646663AB279F72E6C372B8156287CF1216C0385322FEE643C87A9EFD6A7789600992097A09AE0B2C0BA40AA9B2C71G6CG91G71B6341F2FB6C1C79F54A1D859C80BBA6A55EB6390ECB6D4E0F539BF20AE248D32657C7E6A02F58E56072FD4DDD8DF99539B3C2FC7776A77757BFA757BFADCEF5FFDF9FC2FDEDFE6F9CF75927B393A1D2A31A131174C1FEDAE27D3248394E79158FE6AADB329074DE913CE582C9D2254E0BBAF8A425C53240F2752B9FA9A785F8C9B4E195D6BF04EAC
	BCFF2710F0EACD065E7AFB54585D997527D93F351ED666CC2653B3974918A35AC58798EA1F2B4BA9B17CA4BA7F4BF8EFA6454D7E60EA42DBE4029586DD641E3358EBC40745E9BD862B8DD8AC353A763AFCA5B6C9F41412BF8D92C1F7DA1C9D22356834651C255452AD155236A9BD8C797B492FE263271F6EB67631B1ACE937F94443CEF7173C2AA9AAEEAC5EA27BA82CF9BE6B25BA6D6BE9330B14156BE121C6AEE50FFA51536E72B8829559C333072ECA855363491317289EFBE0F5360F2C627E9FD459AA5BE4F5
	4B85E693B0BD10EE5E57A9361D39F2EA14D748FAEC4D7553237CCA6B0176F82E6A3CDA0FADD7D80FED682B0B6DFEFAD4DCE1BDBEC3BDEEB8F78D6B47AE0B355E63EA3759C51DEEFCE5145AAE6BB43352952C9F1F91FBCA814CBD6E40623F94FB06DE768E396CE79D5EBE7A6EE5AB3E3CCCAEFFFE869B43A8E7DD1723D57418E116BAE0936D5612B6D8EACA25742F4CCAF47015FA3BE1AE125558C7F23F07A265CC0F2F1606D0BD3E403A6F35596DD08A15F1057CE1F3B9DB8B374D22719F182FC681441D46357041
	6FC8BE2E0565857FBE175D4E26D4484BBFC3664B9AEB3EEA8E1CF81A45DA6773FCF7BF79117D64CF6CA7BF3D1FFC2358F73E291FFCDFBF79517D64A77513BF331F7C22F63D7C66B358CE951772485AC8BC5BA5BA5BC432D9013E02F10CCB0BB4F90D96FB17929F59F7092CA76D2AFD8E43EF937457AA1582595B1C61722B05598209F3B019ECED95E7A1B25D9E1B833605E463A64754FF31DC9DD3F7037EA47E9E874FC4G46ABF8085C3EE257EEBB11B52C8EE36FD301B79DA05F4E64555B6518A325BBF0044768
	A11D8C102ECBB7279E69AA9C3077F584237B99273383CDA8C034C30F6E0123C8B78D72E78625339CC33AD54EAAC305B398DDC183521901469E146EB9CE97C6E8G921DFAF4BFB2A3DD160B59E515CB0F2E6EB852553B18DD7469B29A112E9372C3G22F469A6D9F83BC1FEBAC03E5B1F4E6CA6F46F733309CD9C37240D603A406106E5E14C35B6CFFD3652B47A2C6E3A1C2E4D5DCCFE2CDB9B0B9E15C164CE867CD4B77629A784F59CE00F576BEA3351D0205CBFEC3354EBF606F34E1A83CF98E849125DAA7A300F
	C933082EF68BC74B7D647E0D1F8B0131CF666B98E65957CD47F7330BCC1607201B6E63DB1AC61B58AD209DAE9ED01F4F44AFA84978A0089D52647A671DD56CB07D48BB196C9C66D4BB5A3D7EAC76495BF612BD005E59D39BD53C34234BD65AA559C82052A2D968AC23BEE7AADB11A357F944D9BC4391D61371A58152D3G52GD8BCB916461989ED0E274AD08D404640892B55E3204F4362AFD1701457FBC7081F8CF2BBA437C3E271A256EE1A8992EDFB5762EA395C498F0E96AAAF4D4B50BBD79A31E0E946B88F
	3369D40FE25B1817DC9956F7707C4BF5846BD7642DB234F831FEAB9C5A7A0D023CF8AF566FD7C7B643F3706B82FE16D30F65A6014C9C894BB5CBFA65D6CB589EEFF0BEB36042B8DF5B9AB5DFA260278364F5213EF5C73F1F3E3FBA0A6596024C66AEACF722EE3991DD286FF54710AF86F0A91C6F2D0F7478161DC33E5D8D48D782B86BB9645B37D60FAF12737D05734581AE1573D554E96DCA780C5DE81F2F4C5F4FBEBFB1E33995A0534E652EBE3EDE2073F37F6BE881E5F59FC7D951A0E7EAB756EDE3A36273FD
	B0767B30EEA33D6A3A057A184F447AD0071B9AC9DF9C64E2DA56A55D02E5A6003C993C4C3D3AFEDA5603E5FE53BAD4FB4A672B1B5573C8C24A462073C8CD8F6B5BCDBD5AF924B70B0CF39260C77460BC7267D9A42E057348B19839E1CC02D5960F21E5E432761253F752F269FACA40387C6359246E11A0F3BCC092C0AAC04EF9AC23A8335FF3527D3EBE4EC92D6D03B96FACBA0FF1592DAB34FC15671518F53D6AB782BBCB146858EFBD4F4E92F3B97EAA0A8FD16119CF4C26F8120E04BC6182167FC81D36FC6B85
	7FB2C3B4E946179040D72AC9C7EB7858BC51E1A7762673204A15F76E64FBB8F93E7B4BEA1C6F62AF60995F8283D97724C3BA2F374AD084D0835089908A90530BED591D2937A670EF4BE08B8265FC0455336B48506CB3AC00CFEB1F093D7EFCECFD7F33C2757ABE25174D51D997E11C3D0877BC0EBAF26436AC3B484F836B07266741GBE2D1E1D977D79188EBF14D007902E431BC354613DFEF598FFD14F17F6B78673A5B9D0A55BF4DD2B1ECD13C066B4EE5351EBF2E4FDE6727ACCBDBA347A7CB100CFDB1F0A6F
	74EC7ABE5741749D6A90FEECE8BA5C9E402755A1D4D70775EBD107C82EC3CD4350F4B896402755A1D9D70773DC0769DC0799C354E13639BF9D8AAF6969F0268E471F4ACB28C3FC002C016970FC3FBAC8177478AE9E9FDAF9BF8C6053169726DBDEF963504A2B8A60531697FDC92F7F2EAFA26339CE7F6551C45696133D7C0E9DEF0BF7ADC353B5A7606E18D657F4DDFF6861635D5C901C0F0E6450FBA810B607605C131CC94E9FF12DD26F32B9A58157A9D7E511B80F4BE36B30B991B71C625ADC9EFA7046F0CFE7
	87BF931C182DFFA678C2367E19E0F2F65F677FD333031D9932337A8BF4AFEB057A05GB01C096EC5A3A09D43F12E15F47F8F69E9A158C667D71318DA4ED5D5068A00E600502BB06F9A1AC7E2CE51D731F5BDD90B323C392B49B9BC21A73C6A3660E3178E3EA2882D96D8996BE99986A17879FD2E8EAEFBG72892C26F21FDB32005A5E6B953DF441C1F676F25E9BD20120F336DAE7F108821EFB7CD7DD2ECC33DFF26D2B603A7FEDF5DFEB4DC43043940DAD643B9E0660FEE5B4687B554786624FDED71727CD547A
	4E2706E5BCCFD9C11150G29069C83257C124553A186785E67141F658563BFE088661F4CC631C754B65AAA605872F6B1112DB33650208A6B53FFAD64734CD598D3F97A84D9A7977E204AD089E07E817AE42383EDEE7FC1201F05GAE82A0C6154774F3572B755B465BB0DCC2F971BA7212GB78DE0C6003C4223EAF965820ECF5F347271E99856A5FB8D29CB8D241B8124E1D817BB56287DA7EC98ABA3CAFE0E9B96280F9C9FBA26AEFBB32FCB16D1ADEF224CBFD5FE268515772C1F3C4F383C8DEB557232C2997F
	B279D9929ACC5E0586353C6DDC5EA5BFF955B23FD9FEF6861537492C1637034BF3876CFD54508B7242B5B2193C374DF354EDD70678F1477D7065086FEC7443EF4672DF7276D5FEF4507A14372A6B33055767BB6E0B63F5F8A783AE85A0DD15477A26B9076CB1FDBC5DC453BD8276C1F18F21E57DFB3F53AACF06AC8EFD931DD7FE870A95E420FEEDAB48DCE83774383A002E79EA3A96DC21DE3B67G2E8C2066EA268BAB6761EE9227ED77D89C50459B5CE21B30FDB8619D3E92F92301FEBC40940099G4B06E34C
	43D37BA1BC7B3EA1027AD90CAB03521AAC2D22DD26FB2FF08521D3CE2B1573BE96521569DE5FC46263E4D2509230F84DAC3FF8CD48F036EF099E0EF36E7C8FF14E9D4FF1E99E024B39264A306A9A6C6F6F952A7D258C70B557A8ED59F4CDE01B33D84251A6B2FE582FE13104059C5FCA7123D4F896E3F8160E1DA41D88F975A3D0A7875D2FCE05748C0E1B6EC55D67DE0B380FEA892E9952EE0EBBCDF121100E6438FF11D0DE9C477D41047292B9AE135265DFD7E5A83A0E2FDDA414D7F99D5A2745EFCDD88FF8AB
	006FBAE617306B025967A29DDF232EE3F6184771E1941F2842B37BFCC071A41D8AF9669F22CEBF217B3E84C8A7F15CBB27687DA9C827F35C49962C2390063815C6022B07F48B47BD76AD0D21C1BA1463D61CC45EF00E5BC377D9A910CE63389BE999D9BF2AB2647F88F1FF65659AB96E964A6B06F48847F9A8DD842423B96E954E9B47F1575471FADC0F38B6BA9757C35A4AF1295CC7FC9CB712365FC4C8CF633822DA241B41F1EECAF76886187BEEC05C6394670674089B70DC263C45EF8FC2A21CBBF79E74582C
	FBAD9DA6BA923179B50A2EF9C9FBC65E00736B8BABC8FBA6C3FABAC0D6B85EF373FD0C67C831770C96CCA17BF55F73C9B117E42C8AE73ED59D2E44C1BB6B719CE94EAAAC3397724705935C76D56AB1010CA33F49E0FB9816FF5AAF1F74C59223D672A37D72093E1FE52A73DF704B4FD671333ACDDA0FF51BB9A9C630BF36A568BBCCB331CEB74AF7430F2D93C28A5F4D1457E76DC156E7F4A0E5755FCE5B0B2CD91BC0C65A0D342DBF2E51A9CB2D2FFC864E760B40138430CE46CF13FF63FB9C0B8503170C812213
	9C5BDB05C3B711B21279FEF37BCD68BB0B5693DC982423B86EF3BA2EA5C2FA8A4735B85197E75E04634B09A6A3BCCDB7D799BA81C6G44GCC86C88548090071A982E9BB99AD246D916CCC191C9707C53073605888F65E4BE8FFF9A2A4089D08ECF51A14E9124B8AE63BE050A94BAAD27146483A135FCC1734203AE86F5A621EEB41A0754076C53FD67B70BCD5FFD8AC04BAC85A6D915BC50FC73432EB29F25B0E21EDB6996AB2A582FDAAD39A0CCFE50D747729E5A359B82F7854F6BA9E11D78909D731F20F5422
	CF950E443547D53544B630E831B93A9CD4CBC6FB9B252DG3AEAG06CB22FD418EE95FC854FB2629BF3D8DAA3D23B5FA0F8F50FB059428F73904FAA7F2DD3AA8AE9952A9A3516F3B697EE36EADB0C75C02388FB7507888241BB8EE4CC6026B05F498473D7FAD761928DB5037072DA163C39A24675E8A7D8320862085E0442DC8F3932519A95FA129106FF40C3B155D59E0B48B573484318F112BCE37E852B537765DD708EEC5FE7A1484ADCB9BB75076893DD8039AB28565EEBBEB2BDF2EA1F7085ADDCE0935493D
	F4BECE86DDD2EEC57F4AEBA1B492EC6A73C611F7FDE3C81793186FF435206F18C7696F97545089B484F06C6C9D25751D4DC6FFFD8E51F54988200B98057ACC7E56DF1FC9F90ABE65A7D11FC49DFDE675234F14GFD1A567A6B6324761986F4E9DC1F980DFDBEDC2468B34F027A98EF5357A73B8FFDAAEE536A7300C61F1FD3FD2A014EF49B6AF32DC61FBD0B95FD5E626D552B23CFE6BF7A042B74E172EE2FC3F911C16429ED9E87B409G85F2B9D3826AF73EB0F09E3D3190470EE9376118753E373FB1CB5D4E69
	37790FD9B9232B8C574ED2179BAB859F6B1FE16BFF60B10E46722BEA7BABBFD7D53EE934FF79AD2335753EC6E74C3C1D0F1976515836C9127ED81FCAE9FB01EE44E89CC746861C897787EC5F31F7A5FD3FD425A343FFC97189AABC5B0FA42F407748A7C3DE590FB12EDD18CF465588C84781CC84C88190A2E1CF9909F16E5F6410F7117ABCE3B53B5CA6711CE8D7051DD97D962C9A5A3B41CF9BF06DB96E093B0471435F1E956CFED6D9A47369FA7919F7F49D45337A7D340054AF8472A28192G26GCC87489A03
	75DB1FDB426AC72E126D11A4CBDBA73D250615A3974794B489BA303AFDAE693DC336EC0C9C3B9A23BF27D4835E2C496B04F4AFC0388A3FC6E06FB4658878AF2DAA908775256347336435A759F63F1F0B36DBF57F0F051AD75E1E05E303D617E8393C74B14A1E44F8533B194C0F7F6425E31427CBE4F2233A55F7BE364FA98FFA672364F6F92FA3BF278DDBA777216275A46E536A725060B00B7BD42F47580D8F684381A683245C4E4E89981F599198AFBA6350460BE6G4F5CBB64D8A49D833A1DFD0D815877F1AC
	AA845E6DF730B1000E89707B4D775FFF7FF7G19326D49442A3C89200E85898219D47CEE6A33ECB9FFD866A2BFDEED4CA9EECB0116DFA14198331DCC242A5B78348416B7E9F63EFF9EBFDBE379E7FC24FC366BD2DF1FC75957EFA7656B5E309770EEF5D413B6CEC55A28698E3CF7F43FD1AF5F4E7347187472C3F87E8C5D7C8848E7FE6EA35DDA567777DE529F1CE23711DFD82A31C197A5AF1097EDAEABABB1EE5EDA2C5B0F182C38950A2C76DA74F5167756CAA56FB3E9A065B03ECFD6ABFC2F1A3E1FFEAFFE28
	48BAA4796B7717B5CADE48004A115B38B5307F0D65F7A6E26EE07DAF811E49F73033BA79FD298D017D4F3481792683AD69FFD9D1D506E5D1EA3EF19B7D57C24F53BDC19950D4C661BC3D64E4FFFD54206A23F6608B09D27AE8847C3E9F1E0739BD328E13BE22FD330B65BD53214A5B6C1F77E036AAEF0BFFDEDD0DAA2F42BFAF5C2D0981EBC345B8BEE42E8EC6276A672C9FBC37D65B8F08CD2322309F0496AA6D7F6629355A76BFG86AFDAEB35D96C2E0E35A5C6F001728AFEF76F45EF5463F85E68159938D650
	5AFEDC949BCB932214790145EB6EE941BB93691097FCDE7A6FCF145FB19B941D6F7DF620BA3372DACFE2F9A5F7228DA6EDD4E4FFD22A483E3AE5F032F7DBD036154B96B7A932DFAED70D9303143D064B0E6432E71063B4B97FC5FE77A479CEFDBB8637EDCF0522D7CCA10E8F414713482D8A6FD35B945E55355FEF1CFA6DB3C556E31AF1AAFB0712B7E2C06394DBDB9D22632F7CDD9A556FD7D78C653D7D01027C2D104BDA06FC1E1E9F7CFC3EA2DF7FFCFEE73E7E3D0F6A7C3E5F85BF149F7CDD70A3796AF74159
	1A79659DE46C19FBD715218840845082A05D45778379248F10AF4D842E1577DBBB487DG72F599894BCFA888DE57E78B7A7FA6CDD281B99BEDF5C9124BC164A37ED785243DA4171BA2996E578544C69EDBC72744C8E57C6F8BE8CCCDEC27E8960BBAC577E361D02F283BB0BE15C8F13110CE643897E93CEB8A2453B9EE41FEFA76F6B74CF7F773730A8602AB01F4B5477D16624C1036F3DCEC8E4640C26E46FD5816DDE48ECC0274F4003CE830BDC0A5009920932097A09CA086A081A099A095E0A6405C31306F85
	28980BEDB4F7990965B7DACE873EA583C8795003B61447426EADB1BDEE2B24E7A9A0474AE5B5AC5B5807AC184B5C22C76AE1D87A361C3C676CDC0F5FCC8A85D971E3719C6649B9E4BFB92077E34CB649AE6E252B95B6DE462D67734ED8BC1B394ECE4AA939274AD08350FC8F5E733C5101E7AA52BDC87B14035046C2BA91E06ABDFAE32E5EBE8B473AB93BC90A49FF25894FAC52F9192F51D89809D3B47D8B6212CDC8974FF11BEA91E70C417787FE594A6D8538789824ADE863F50E41FA1CA926F53E976A8C50FC
	AF4A10B660BEDF82DC6C3DA8A3FE835AE25A3DA8630F14F655FD60B7G267BF0FE7AD335A070FB8C831A27B7978FF43F0AF61C3FD73123308EEDE13D8F7B43841AAF5F03ABDC9F4C7FE044798274BA52FADAEC134C168E01FFB724456F1E8A481DFADF5FB1DE4657F1D24D1786BCD9778F04EF1F5F9D45E540D3B2A03EC2BF3EEA60B18F08AF596FDECAA770747643A70F5DBB020F4553F674BF963F39034540BAC472328C437DE5873D6B585E6E9579187F379DF99CF758DB6F725A480D8766D367A47F58674A9A
	455FFE4DE2E7961FA6F676B69B2B210E1177635E6275566071C076BE64C420CD66749F6F775F0BD452B1DC080571B396E9E29B82E31BBFEF4098DFA5277B1F867D981F77B821B581DDD3AC6EEFFE1E535F7EC69D8BCDD21DE3127E9A8AF236483F65774CF785EF433ADD7D376109DD7A7369373B82675356DD7A73E967AE75FC4AF00EDD249E9DB037B4F1BA8F47FD45F15DD4A6411D30D925CE0E3FC875A278C3A2A990714328DE5D9457A463C628F0DF49389F6DA2FE88D56EF4717B35B76D22EDEE335BD97A96
	CAE3F302DBF2FB7C186AE8F3DBD4FAC7F11C22776D15243D78BA0BCDF5F25E584AFC01FD9F8746C55BF97A6AEB8390BABBD8FFF52E6FAF8E9A9E2BF7073937DF3E8FF5470747A8DFEC6C404E0093E271FB06FF27F3E9F22CB62EEC2073E6CA2CB62E9CEE4779E6BA6455BF00F16DDB9CC30BEBEFF1523876835A72ABA9BE6181ED794FB8F8DC9B724A9E646FF3B4692D61A39EE47608111F718F7A5BA7895253B43899101E7B10DE5B3CE154AB43A853D6BC24EF7BC300EF566439A19D2ADB46FF68FE27EC14CC9B
	ABBF93B43C4910CE5560E6C2BAAFCE2F0C0ADA3DB28AE55A6D72532461ED013424410D00F424EE997F5E67F7DC037B7F6F7B6553777F95ED04AFAEEEE07E1F98077E7FBB3A2E1A9227753FD40A1F9627753F334568FFE910E7FE185F075FB034EF290E98A25F530366E375BA391168BF7EE1EDFDBBA8BE71E1EDFD53787AB28972AA9E417AE62F537553C7E4BFFDC43F9D92G1F2C49CB0574CC003CC795BC5BB77DAB0DB995BE4AF4E238E7A92E528F775D49C03AE1A783693E3684521D3284526D52212B56217B
	D3DDA0DDDA1D1A0E2DF7F66F071F72FAA731353F18C879B60CADDB8EA8FCD97B7B60AB7FEC2B1A6F49C38A5F358D830DDF49B16C867FF8CE4AE1C5561DB9FD693055CF771CA3040F3D8F1130182C5BECCE3B4DA96EE3DF1565761ACC77F7CDE0AF77237CBE161D5E63047428C7515F329C82777DF92A5F3758AFFFFC6821ABD0468E27D2273D2A5F139C173F6CE917358C5626FF27FB67E8E84FF13C1D7F0B765184C8CF6138B7E92CE4BA247346713B2C39341FC13A1A63DE2763009952D60E8B5B466F14F2DCCB
	A35D97C0BA0563F2BFC2DD52B96E74C7280B709862DE2A42F273B92EE7A916DB44F13D87305CCA0ECBAA40F243B86EBD9A970802F49C47355038C0BC2413B96EFAFAC7B19552F3FF023857A84E8869CA0E3B194A2B07F48B47CDAAC0DDA40E2B26E3D2A22427F2DCA3ADB78D5242CF91B7016266C23A1063FEC14B5D8E69E60EE3F7495C108E63385BD95DA09D47F199CBD017C40E7BB1ADA3FFBC6C1747A32E1C46BB2AA15D44F1EF97517D8624C34663987007E225DF3C257A5DDDFC797BC87895A8433AD12913
	C3757B2F9BAEFF598BB6DE7EB160939A778903760C646D9CC6F1B110CE6038BF51FE178C69B40E4B207DAE6BF1680B0F73779269BE3D8852159CB71E626AA15D49F1D14568073D0FE3CC5272B1D957487BB73AADE578D53EF98A9E3725727C771F6B49BED6A2A1CAB2078A98FBF80F4EE113C1761447B1DED0EC4FC6DA8157819B6B85AE2B60AB7F18C85DD1A5CFB8259F93D9C65F9B48F982EC7084161315CB767F3081361D8715ACF6F285G23AF285F1ADC0CA7D6F33E265C60311433145E8E34BECE7F3FAD7E
	311445F4BD948D79F1CFE05C636EED5FA76E1182F2962BE8968B5D0D7AB1179B6818BE9D68E7BC01B14C3347842E7F4DF4ACAF1CG7B4389F82F75DD6AD34D106E64383B28CFC5C0BAEA825661668383B91B8ED607A410F3D02E83AB639DBA9ECF85FC6A84346522DA7F360FE8D05A3E3BD63F6DEFE063E6FC1541980FF246FA7BEF7B84AF363D09733D638D5E760B68586E835AD0CEFF1F493F6D9368D89F87797171E837578A86F26FA6185D26039C07DF5B1F2853EFFB971D4BE6GFD5613281FC3E34F1F1A95
	FB7EDB90FB7E115A338CE4D4F2B93F9900BDE7F0FBF6F23E72BE6EA9FEC16D998134D11C7EB10DBDA731771BA0FF4A13E84F65CB7A33277AAE23561EB9BF537625C7025CC7FF1E7995509BFF067A9DEA539F67DA68BCED823AA6CEBB27B8F01CFB7538E27F5D6B7C5BE64489A56F6EF57AEDB3014E89A3200C88DECEC6F5F09B2F2C26EBB7201D4C6917AF753771A65A57E7C0FE56D3C8B3DCA776BB0647FEABB85D0BC1E23FEFD05A9A202BFF8A5B6D27457CAE6FD37AF70B55F7EF93D5F7EF69DD5E27147DB733
	D75AD70A3DE65B497F632433175B6301498A36F26572D6CE66DD7C0D427BDADFFBB73E6FE4345BF2892D7AEBD48D64AF9E73FACBCD7B8F1865B236B5ABE57C3A252F7DE1055F7E7026138ADF4836016ED1996FE32784DE47A9AD0A1C6B0D83AF7FBD0B42770B2A3E784AAB54FC9F36A9FC4E2583673BDDD4785C8786D75F275B157ACE6BD0647C2FFD60659BEC8A5F30FE6F51A93E700AF7603E306134D2C61FF7BF4A7D639C436D8A5FD38503334D3D8E45B6131D0A9C1F774360656F1043A5B2DF3ADB611BB088
	5BAC1086EE1B259E250C1B7B340D3F1FDE2BEA6F3F8E52B6311D0AEDDED4357F7A3E6EB7EA4A5F28EA1BB70A86B77E54B9945E143E7A18A66EF5D6550EFFDBB27038D72A2A9D5B8699779A2709FBFD20EA2F11458309FB31336D54E2FE7F6BA9DC1B9EA6D7F364FD561B456A38EDB250246A4C9301FB272C8D0131465C8D6AD8A37BFF8217581683D36C1BC236A44C112FAF9A57EDD6A74A5509AD6AC40557A3AC60F5BCCC8F4DD24EED5919791FF7E7E688D90705596C90713010C5CE828F8B597420703010A939
	5CBE3720ACB8CCGD9A0EDD1204576DC7F9F2F441E2A494F90B2C0E02748A4E4F713BD9815C1AE84CC741E953E231FD2A65248BF32B44B245859FEB4338745619166797943B3F7EEFDFD72EF9B3D19426C4342F232DCE890BD74C4CF34121777657F1E6A00106BA6DFB8A013BFD45ECB9F59DE2947AE1A047C76E3647351DEC9346E4133C22FA49418C8C91B483D16CD07AC5ECE7A9249AE131065A47F11163008E55BAD4E0ECD6C60F0972D7D2CBDADD4FB527482683B186ACB2414F2A90BA7ACD87F51975346E7
	8A998704B9F61745FA4052A639BC0705DC2953A3FABBDDF62B4FDDD5CD8565F493AF217F0B9208DB492BCFAADBCA1638DC69B33EB1E173D2679D48A09F1094B6D1CA32F2AB6594D6F0958F94A5FA8ECB64BF86F3F98AF95ED59FCA9F7F726052668CE116DCC9E27A85BE37A44CEE37B8EC769E78D1C3FB9FED144592E86B31B83D64A3142019D12399E67182CAEFFE2EEC643D6FFECD8BD0D8A5E18DB3A530EE6A90DD0ECDFB5A5BEDCE118BG3B027855DCBC21A95550AC725DD870454B6F37029F5488190E32B2
	7A371C7E5DCC7E16D3CCB94514EF86632689FD7E53667B304E54F9F8BFA34DDFFAGDAD0FA754D676E7AF5E55AF4285D81A11BFE60929AA1CF21E2D77C07470EDC7DC1C44A8FC99B39092B78085C25BE6E7DFEC03173823C0AE097863A87C19770C6A229E514F4857D3BFA50D5A6DCEBA86FC7DC53CF7EE9B4AD7D2751F4EBDF1A86472A47491CA0E3A93964C0A69732C1519BFDD14EDC99E62B2C43ECB1777F4BBA55F2FA2FE29D03CAD3189FD7104F3D9871FBAFC6F6BB5FC82E676F64D54D9354938DC9BDB4B4
	8730DEC687B0797CB43C05D7B8D72EEC86293CA4ACA0D31AD179A00DA4AC51E00C746D1F1D12103747CE3F08AB099CB50F3EE9E4E4639024674BAF8CF1022564D587237C2E03DFB14B7DF2828C2DB5662CA0464C7277979CD2E733EBC14CA8046772D8799BDF9FDE91760F67956D0A6393AD711B6C869D3DB16551C97DC35549BD10BAF97AE8A76BBFDE1D4EABF54AD455A947CF6FD37FDC3E972A54E9292CA5792767FBC36C7CA455CC7E1C3CBCB5886B2B377F834E81914166GAD30F7420AAF295F891BF17522
	206F76A63DA03F537B0272CE187C5E887D9E0E7145AAC3650B7C5DEA6727C2703B5B8D8E0B5DAED96CE776B82D649E775E9EC9D45EDBF955C964FB11C64E145F67F0923DCF2BF87E8FD0CB87885601A22C1FA5GGF4FFGGD0CB818294G94G88G88GA3E1AAAD5601A22C1FA5GGF4FFGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG59A5GGGG
**end of data**/
}

/**
 * Return the Channel1CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel1CheckBox() {
	if (ivjChannel1CheckBox == null) {
		try {
			ivjChannel1CheckBox = new javax.swing.JCheckBox();
			ivjChannel1CheckBox.setName("Channel1CheckBox");
			ivjChannel1CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel1CheckBox.setText("Channel #1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel1CheckBox;
}


/**
 * Return the Channel2CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel2CheckBox() {
	if (ivjChannel2CheckBox == null) {
		try {
			ivjChannel2CheckBox = new javax.swing.JCheckBox();
			ivjChannel2CheckBox.setName("Channel2CheckBox");
			ivjChannel2CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel2CheckBox.setText("Channel #2");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel2CheckBox;
}


/**
 * Return the Channel3CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel3CheckBox() {
	if (ivjChannel3CheckBox == null) {
		try {
			ivjChannel3CheckBox = new javax.swing.JCheckBox();
			ivjChannel3CheckBox.setName("Channel3CheckBox");
			ivjChannel3CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel3CheckBox.setText("Channel #3");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel3CheckBox;
}


/**
 * Return the Channel4CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel4CheckBox() {
	if (ivjChannel4CheckBox == null) {
		try {
			ivjChannel4CheckBox = new javax.swing.JCheckBox();
			ivjChannel4CheckBox.setName("Channel4CheckBox");
			ivjChannel4CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel4CheckBox.setText("Channel #4");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel4CheckBox;
}


/**
 * Return the CycleGroupComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getCycleGroupComboBox() {
	if (ivjCycleGroupComboBox == null) {
		try {
			ivjCycleGroupComboBox = new javax.swing.JComboBox();
			ivjCycleGroupComboBox.setName("CycleGroupComboBox");
			ivjCycleGroupComboBox.setPreferredSize(new java.awt.Dimension(200, 25));
			ivjCycleGroupComboBox.setEditable(true);
			ivjCycleGroupComboBox.setMinimumSize(new java.awt.Dimension(200, 25));
			// user code begin {1}
         
         try
         {
            String availableCycleGroups[] = DeviceMeterGroup.getDeviceCollectionGroups();
            for(int i=0;i<availableCycleGroups.length;i++)
               ivjCycleGroupComboBox.addItem( availableCycleGroups[i] );
         }
         catch(java.sql.SQLException e)
         {
            com.cannontech.clientutils.CTILogger.error( e.getMessage(), e );
         }
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCycleGroupComboBox;
}


/**
 * Return the CycleGroupLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getCycleGroupLabel() {
	if (ivjCycleGroupLabel == null) {
		try {
			ivjCycleGroupLabel = new javax.swing.JLabel();
			ivjCycleGroupLabel.setName("CycleGroupLabel");
			ivjCycleGroupLabel.setText("Data Collection Group:");
			ivjCycleGroupLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjCycleGroupLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjCycleGroupLabel.setPreferredSize(new java.awt.Dimension(140, 16));
			ivjCycleGroupLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjCycleGroupLabel.setMinimumSize(new java.awt.Dimension(140, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCycleGroupLabel;
}

/**
 * Return the DataCollectionPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getDataCollectionPanel() {
	if (ivjDataCollectionPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Data Collection");
			ivjDataCollectionPanel = new javax.swing.JPanel();
			ivjDataCollectionPanel.setName("DataCollectionPanel");
			ivjDataCollectionPanel.setBorder(ivjLocalBorder1);
			ivjDataCollectionPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsCycleGroupLabel = new java.awt.GridBagConstraints();
			constraintsCycleGroupLabel.gridx = 1; constraintsCycleGroupLabel.gridy = 2;
			constraintsCycleGroupLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsCycleGroupLabel.ipadx = 9;
			constraintsCycleGroupLabel.ipady = 2;
			constraintsCycleGroupLabel.insets = new java.awt.Insets(7, 15, 6, 1);
			getDataCollectionPanel().add(getCycleGroupLabel(), constraintsCycleGroupLabel);

			java.awt.GridBagConstraints constraintsAreaCodeGroupLabel = new java.awt.GridBagConstraints();
			constraintsAreaCodeGroupLabel.gridx = 1; constraintsAreaCodeGroupLabel.gridy = 3;
			constraintsAreaCodeGroupLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsAreaCodeGroupLabel.ipadx = 35;
			constraintsAreaCodeGroupLabel.ipady = 2;
			constraintsAreaCodeGroupLabel.insets = new java.awt.Insets(7, 15, 6, 1);
			getDataCollectionPanel().add(getAreaCodeGroupLabel(), constraintsAreaCodeGroupLabel);

			java.awt.GridBagConstraints constraintsCycleGroupComboBox = new java.awt.GridBagConstraints();
			constraintsCycleGroupComboBox.gridx = 2; constraintsCycleGroupComboBox.gridy = 2;
			constraintsCycleGroupComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsCycleGroupComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsCycleGroupComboBox.weightx = 1.0;
			constraintsCycleGroupComboBox.insets = new java.awt.Insets(3, 0, 3, 22);
			getDataCollectionPanel().add(getCycleGroupComboBox(), constraintsCycleGroupComboBox);

			java.awt.GridBagConstraints constraintsAreaCodeGroupComboBox = new java.awt.GridBagConstraints();
			constraintsAreaCodeGroupComboBox.gridx = 2; constraintsAreaCodeGroupComboBox.gridy = 3;
			constraintsAreaCodeGroupComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsAreaCodeGroupComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsAreaCodeGroupComboBox.weightx = 1.0;
			constraintsAreaCodeGroupComboBox.insets = new java.awt.Insets(3, 0, 3, 22);
			getDataCollectionPanel().add(getAreaCodeGroupComboBox(), constraintsAreaCodeGroupComboBox);

			java.awt.GridBagConstraints constraintsMeterNumberLabel = new java.awt.GridBagConstraints();
			constraintsMeterNumberLabel.gridx = 1; constraintsMeterNumberLabel.gridy = 1;
			constraintsMeterNumberLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMeterNumberLabel.ipadx = 54;
			constraintsMeterNumberLabel.ipady = 2;
			constraintsMeterNumberLabel.insets = new java.awt.Insets(8, 15, 3, 1);
			getDataCollectionPanel().add(getMeterNumberLabel(), constraintsMeterNumberLabel);

			java.awt.GridBagConstraints constraintsMeterNumberTextField = new java.awt.GridBagConstraints();
			constraintsMeterNumberTextField.gridx = 2; constraintsMeterNumberTextField.gridy = 1;
			constraintsMeterNumberTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsMeterNumberTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMeterNumberTextField.weightx = 1.0;
			constraintsMeterNumberTextField.ipadx = 196;
			constraintsMeterNumberTextField.insets = new java.awt.Insets(8, 0, 3, 22);
			getDataCollectionPanel().add(getMeterNumberTextField(), constraintsMeterNumberTextField);

			java.awt.GridBagConstraints constraintsJLabelBillingGroup = new java.awt.GridBagConstraints();
			constraintsJLabelBillingGroup.gridx = 1; constraintsJLabelBillingGroup.gridy = 4;
			constraintsJLabelBillingGroup.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelBillingGroup.ipadx = 9;
			constraintsJLabelBillingGroup.ipady = 2;
			constraintsJLabelBillingGroup.insets = new java.awt.Insets(7, 16, 23, 0);
			getDataCollectionPanel().add(getJLabelBillingGroup(), constraintsJLabelBillingGroup);

			java.awt.GridBagConstraints constraintsJComboBoxBillingGroup = new java.awt.GridBagConstraints();
			constraintsJComboBoxBillingGroup.gridx = 2; constraintsJComboBoxBillingGroup.gridy = 4;
			constraintsJComboBoxBillingGroup.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxBillingGroup.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxBillingGroup.weightx = 1.0;
			constraintsJComboBoxBillingGroup.insets = new java.awt.Insets(3, 1, 20, 21);
			getDataCollectionPanel().add(getJComboBoxBillingGroup(), constraintsJComboBoxBillingGroup);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDataCollectionPanel;
}

/**
 * Return the JComboBoxBillingGroup property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxBillingGroup() {
	if (ivjJComboBoxBillingGroup == null) {
		try {
			ivjJComboBoxBillingGroup = new javax.swing.JComboBox();
			ivjJComboBoxBillingGroup.setName("JComboBoxBillingGroup");
			ivjJComboBoxBillingGroup.setPreferredSize(new java.awt.Dimension(200, 25));
			ivjJComboBoxBillingGroup.setEditable(true);
			ivjJComboBoxBillingGroup.setMinimumSize(new java.awt.Dimension(200, 25));
			// user code begin {1}
         
         try
         {
            String avBillGrps[] = DeviceMeterGroup.getDeviceBillingGroups();
            for( int i = 0; i < avBillGrps.length; i++ )
               ivjJComboBoxBillingGroup.addItem( avBillGrps[i] );
         }
         catch(java.sql.SQLException e)
         {
            com.cannontech.clientutils.CTILogger.error( e.getMessage(), e );
         }
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxBillingGroup;
}


/**
 * Return the JLabelBillingGroup property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelBillingGroup() {
	if (ivjJLabelBillingGroup == null) {
		try {
			ivjJLabelBillingGroup = new javax.swing.JLabel();
			ivjJLabelBillingGroup.setName("JLabelBillingGroup");
			ivjJLabelBillingGroup.setText("Billing Group:");
			ivjJLabelBillingGroup.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjJLabelBillingGroup.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelBillingGroup.setPreferredSize(new java.awt.Dimension(140, 16));
			ivjJLabelBillingGroup.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelBillingGroup.setMinimumSize(new java.awt.Dimension(140, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelBillingGroup;
}


/**
 * Return the DemandIntervalComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getLastIntervalDemandRateComboBox() {
	if (ivjLastIntervalDemandRateComboBox == null) {
		try {
			ivjLastIntervalDemandRateComboBox = new javax.swing.JComboBox();
			ivjLastIntervalDemandRateComboBox.setName("LastIntervalDemandRateComboBox");
			ivjLastIntervalDemandRateComboBox.setEnabled(true);
			// user code begin {1}
         
         ivjLastIntervalDemandRateComboBox.addItem("1 minute");
         ivjLastIntervalDemandRateComboBox.addItem("2 minute");
         ivjLastIntervalDemandRateComboBox.addItem("3 minute");
         ivjLastIntervalDemandRateComboBox.addItem("5 minute");
         ivjLastIntervalDemandRateComboBox.addItem("10 minute");
         ivjLastIntervalDemandRateComboBox.addItem("15 minute");
         ivjLastIntervalDemandRateComboBox.addItem("30 minute");
         ivjLastIntervalDemandRateComboBox.addItem("1 hour");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLastIntervalDemandRateComboBox;
}


/**
 * Return the DemandIntervalLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getLastIntervalDemandRateLabel() {
	if (ivjLastIntervalDemandRateLabel == null) {
		try {
			ivjLastIntervalDemandRateLabel = new javax.swing.JLabel();
			ivjLastIntervalDemandRateLabel.setName("LastIntervalDemandRateLabel");
			ivjLastIntervalDemandRateLabel.setText("Last Interval Demand Rate:");
			ivjLastIntervalDemandRateLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjLastIntervalDemandRateLabel.setPreferredSize(new java.awt.Dimension(175, 16));
			ivjLastIntervalDemandRateLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjLastIntervalDemandRateLabel.setEnabled(true);
			ivjLastIntervalDemandRateLabel.setMinimumSize(new java.awt.Dimension(150, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLastIntervalDemandRateLabel;
}


/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getLoadProfileCollectionPanel() {
	if (ivjLoadProfileCollectionPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Load Profile Collection");
			ivjLoadProfileCollectionPanel = new javax.swing.JPanel();
			ivjLoadProfileCollectionPanel.setName("LoadProfileCollectionPanel");
			ivjLoadProfileCollectionPanel.setBorder(ivjLocalBorder);
			ivjLoadProfileCollectionPanel.setLayout(new java.awt.GridBagLayout());
			ivjLoadProfileCollectionPanel.setFont(new java.awt.Font("dialog", 0, 12));

			java.awt.GridBagConstraints constraintsChannel1CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel1CheckBox.gridx = 0; constraintsChannel1CheckBox.gridy = 1;
			constraintsChannel1CheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsChannel1CheckBox.insets = new java.awt.Insets(4, 4, 4, 4);
			getLoadProfileCollectionPanel().add(getChannel1CheckBox(), constraintsChannel1CheckBox);

			java.awt.GridBagConstraints constraintsChannel2CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel2CheckBox.gridx = 1; constraintsChannel2CheckBox.gridy = 1;
			constraintsChannel2CheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsChannel2CheckBox.insets = new java.awt.Insets(4, 4, 4, 4);
			getLoadProfileCollectionPanel().add(getChannel2CheckBox(), constraintsChannel2CheckBox);

			java.awt.GridBagConstraints constraintsChannel3CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel3CheckBox.gridx = 0; constraintsChannel3CheckBox.gridy = 2;
			constraintsChannel3CheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsChannel3CheckBox.insets = new java.awt.Insets(4, 4, 4, 4);
			getLoadProfileCollectionPanel().add(getChannel3CheckBox(), constraintsChannel3CheckBox);

			java.awt.GridBagConstraints constraintsChannel4CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel4CheckBox.gridx = 1; constraintsChannel4CheckBox.gridy = 2;
			constraintsChannel4CheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsChannel4CheckBox.insets = new java.awt.Insets(4, 4, 4, 4);
			getLoadProfileCollectionPanel().add(getChannel4CheckBox(), constraintsChannel4CheckBox);

			java.awt.GridBagConstraints constraintsLoadProfileDemandRateLabel = new java.awt.GridBagConstraints();
			constraintsLoadProfileDemandRateLabel.gridx = 0; constraintsLoadProfileDemandRateLabel.gridy = 0;
			constraintsLoadProfileDemandRateLabel.insets = new java.awt.Insets(4, 4, 4, 4);
			getLoadProfileCollectionPanel().add(getLoadProfileDemandRateLabel(), constraintsLoadProfileDemandRateLabel);

			java.awt.GridBagConstraints constraintsLoadProfileDemandRateComboBox = new java.awt.GridBagConstraints();
			constraintsLoadProfileDemandRateComboBox.gridx = 1; constraintsLoadProfileDemandRateComboBox.gridy = 0;
			constraintsLoadProfileDemandRateComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsLoadProfileDemandRateComboBox.insets = new java.awt.Insets(4, 4, 4, 4);
			getLoadProfileCollectionPanel().add(getLoadProfileDemandRateComboBox(), constraintsLoadProfileDemandRateComboBox);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadProfileCollectionPanel;
}


/**
 * Return the LoadProfileDemandRateComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getLoadProfileDemandRateComboBox() {
	if (ivjLoadProfileDemandRateComboBox == null) {
		try {
			ivjLoadProfileDemandRateComboBox = new javax.swing.JComboBox();
			ivjLoadProfileDemandRateComboBox.setName("LoadProfileDemandRateComboBox");
			ivjLoadProfileDemandRateComboBox.setEnabled(true);
			// user code begin {1}
         
         ivjLoadProfileDemandRateComboBox.addItem("5 minute");
         ivjLoadProfileDemandRateComboBox.addItem("15 minute");
         ivjLoadProfileDemandRateComboBox.addItem("30 minute");
         ivjLoadProfileDemandRateComboBox.addItem("1 hour");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadProfileDemandRateComboBox;
}


/**
 * Return the LoadProfileDemandRateLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getLoadProfileDemandRateLabel() {
	if (ivjLoadProfileDemandRateLabel == null) {
		try {
			ivjLoadProfileDemandRateLabel = new javax.swing.JLabel();
			ivjLoadProfileDemandRateLabel.setName("LoadProfileDemandRateLabel");
			ivjLoadProfileDemandRateLabel.setText("Load Profile Demand Rate:");
			ivjLoadProfileDemandRateLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjLoadProfileDemandRateLabel.setPreferredSize(new java.awt.Dimension(175, 16));
			ivjLoadProfileDemandRateLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjLoadProfileDemandRateLabel.setEnabled(true);
			ivjLoadProfileDemandRateLabel.setMinimumSize(new java.awt.Dimension(150, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadProfileDemandRateLabel;
}


/**
 * Return the MeterNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMeterNumberLabel() {
	if (ivjMeterNumberLabel == null) {
		try {
			ivjMeterNumberLabel = new javax.swing.JLabel();
			ivjMeterNumberLabel.setName("MeterNumberLabel");
			ivjMeterNumberLabel.setText("Meter Number:");
			ivjMeterNumberLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjMeterNumberLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjMeterNumberLabel.setPreferredSize(new java.awt.Dimension(100, 16));
			ivjMeterNumberLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjMeterNumberLabel.setMinimumSize(new java.awt.Dimension(95, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMeterNumberLabel;
}

/**
 * Return the MeterNumberTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getMeterNumberTextField()
{
    if (ivjMeterNumberTextField == null)
    {
        try
        {
            ivjMeterNumberTextField = new javax.swing.JTextField();
            ivjMeterNumberTextField.setName("MeterNumberTextField");
            // user code begin {1}
            ivjMeterNumberTextField.setDocument(
                new com.cannontech.common.gui.util.TextFieldDocument(com.cannontech.common.gui.util.TextFieldDocument.MAX_METER_NUMBER_LENGTH));

            // user code end
        }
        catch (java.lang.Throwable ivjExc)
        {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    }
    return ivjMeterNumberTextField;
}


/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) 
{

	//The default object is either a MCT or a IEDmeter
	if( val instanceof MCTBase || val instanceof IEDMeter )
	{
		DeviceLoadProfile dlp = null;
		
		if( val instanceof MCTBase )
		{
			dlp = ((MCTBase) val).getDeviceLoadProfile();
		}		
		else if( val instanceof IEDMeter )
		{
			dlp = ((IEDMeter) val).getDeviceLoadProfile();
		}
				
		dlp.setLastIntervalDemandRate(
         com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue(getLastIntervalDemandRateComboBox()) );

		if( getLoadProfileCollectionPanel().isVisible() )
		{
         dlp.setLoadProfileDemandRate(
            com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue(getLoadProfileDemandRateComboBox()) );

			StringBuffer loadProfileCollection = new StringBuffer();
			if( getChannel1CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");
			if( getChannel2CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");
            

			if( getChannel3CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");
			if( getChannel4CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");

			dlp.setLoadProfileCollection(loadProfileCollection.toString());
		}
		
	}


	//handle the devicemetergroup data below
	DeviceMeterGroup dmg = 
			((IDeviceMeterGroup)val).getDeviceMeterGroup();

	String cycleGroup = getCycleGroupComboBox().getSelectedItem().toString();
	String areaCodeGroup = getAreaCodeGroupComboBox().getSelectedItem().toString();
	String meterNumber = getMeterNumberTextField().getText();
   String billingGroup = getJComboBoxBillingGroup().getSelectedItem().toString();
   
   if( cycleGroup != null && cycleGroup.length() > 0 )
   	dmg.setCollectionGroup( cycleGroup );
      
   if( areaCodeGroup != null && areaCodeGroup.length() > 0 )
   	dmg.setTestCollectionGroup( areaCodeGroup );
      
   if( meterNumber != null && meterNumber.length() > 0 )
   	dmg.setMeterNumber( meterNumber );

   if( billingGroup != null && billingGroup.length() > 0 )
      dmg.setBillingGroup( billingGroup );
	
	return val;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	// com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getLastIntervalDemandRateComboBox().addItemListener(this);
	getCycleGroupComboBox().addActionListener(this);
	getAreaCodeGroupComboBox().addActionListener(this);
	getChannel2CheckBox().addActionListener(this);
	getChannel1CheckBox().addActionListener(this);
	getChannel3CheckBox().addActionListener(this);
	getChannel4CheckBox().addActionListener(this);
	getLoadProfileDemandRateComboBox().addActionListener(this);
	getCycleGroupComboBox().addKeyListener(this);
	getAreaCodeGroupComboBox().addKeyListener(this);
	getMeterNumberTextField().addCaretListener(this);
	getJComboBoxBillingGroup().addActionListener(this);
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DeviceMeterGroupEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(411, 366);

		java.awt.GridBagConstraints constraintsLastIntervalDemandRateComboBox = new java.awt.GridBagConstraints();
		constraintsLastIntervalDemandRateComboBox.gridx = 2; constraintsLastIntervalDemandRateComboBox.gridy = 2;
		constraintsLastIntervalDemandRateComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsLastIntervalDemandRateComboBox.anchor = java.awt.GridBagConstraints.WEST;
		constraintsLastIntervalDemandRateComboBox.weightx = 1.0;
		constraintsLastIntervalDemandRateComboBox.ipadx = 17;
		constraintsLastIntervalDemandRateComboBox.insets = new java.awt.Insets(4, 3, 5, 76);
		add(getLastIntervalDemandRateComboBox(), constraintsLastIntervalDemandRateComboBox);

		java.awt.GridBagConstraints constraintsLastIntervalDemandRateLabel = new java.awt.GridBagConstraints();
		constraintsLastIntervalDemandRateLabel.gridx = 1; constraintsLastIntervalDemandRateLabel.gridy = 2;
		constraintsLastIntervalDemandRateLabel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsLastIntervalDemandRateLabel.ipadx = 25;
		constraintsLastIntervalDemandRateLabel.insets = new java.awt.Insets(7, 12, 9, 2);
		add(getLastIntervalDemandRateLabel(), constraintsLastIntervalDemandRateLabel);

		java.awt.GridBagConstraints constraintsLoadProfileCollectionPanel = new java.awt.GridBagConstraints();
		constraintsLoadProfileCollectionPanel.gridx = 1; constraintsLoadProfileCollectionPanel.gridy = 3;
		constraintsLoadProfileCollectionPanel.gridwidth = 2;
		constraintsLoadProfileCollectionPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsLoadProfileCollectionPanel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsLoadProfileCollectionPanel.weightx = 1.0;
		constraintsLoadProfileCollectionPanel.weighty = 1.0;
		constraintsLoadProfileCollectionPanel.ipadx = 85;
		constraintsLoadProfileCollectionPanel.ipady = 36;
		constraintsLoadProfileCollectionPanel.insets = new java.awt.Insets(5, 12, 7, 12);
		add(getLoadProfileCollectionPanel(), constraintsLoadProfileCollectionPanel);

		java.awt.GridBagConstraints constraintsDataCollectionPanel = new java.awt.GridBagConstraints();
		constraintsDataCollectionPanel.gridx = 1; constraintsDataCollectionPanel.gridy = 1;
		constraintsDataCollectionPanel.gridwidth = 2;
		constraintsDataCollectionPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsDataCollectionPanel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsDataCollectionPanel.weightx = 1.0;
		constraintsDataCollectionPanel.weighty = 1.0;
		constraintsDataCollectionPanel.ipadx = -10;
		constraintsDataCollectionPanel.ipady = -17;
		constraintsDataCollectionPanel.insets = new java.awt.Insets(6, 12, 3, 12);
		add(getDataCollectionPanel(), constraintsDataCollectionPanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
/*   if( getJCheckBoxScanWindow().isSelected() 
       && (getJTextFieldClose().getTimeTotalSeconds().intValue()
           == getJTextFieldOpen().getTimeTotalSeconds().intValue()) )
   {
      setErrorString("The Device Window open and close values can not be equal");
      return false;
   }
*/
   return true;
}

/**
 * Method to handle events for the ItemListener interface.
 * @param e java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void itemStateChanged(java.awt.event.ItemEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getLastIntervalDemandRateComboBox()) 
		connEtoC4(e);
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyPressed(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyReleased(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyTyped(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getCycleGroupComboBox()) 
		connEtoC10(e);
	if (e.getSource() == getAreaCodeGroupComboBox()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame;
		try {
			Class aFrameClass = Class.forName("com.ibm.uvm.abt.edit.TestFrame");
			frame = (java.awt.Frame)aFrameClass.newInstance();
		} catch (java.lang.Throwable ivjExc) {
			frame = new java.awt.Frame();
		}
		DeviceMeterGroupEditorPanel aDeviceMeterGroupEditorPanel;
		aDeviceMeterGroupEditorPanel = new DeviceMeterGroupEditorPanel();
		frame.add("Center", aDeviceMeterGroupEditorPanel);
		frame.setSize(aDeviceMeterGroupEditorPanel.getSize());
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val) 
{
	int deviceType = com.cannontech.database.data.pao.PAOGroups.getDeviceType( ((DeviceBase)val).getPAOType() );

	//The default object is either a MCT or a IEDmeter
	if( val instanceof MCTBase )
	{
		getLastIntervalDemandRateLabel().setVisible(true);
		getLastIntervalDemandRateComboBox().setVisible(true);
		getLoadProfileCollectionPanel().setVisible(true);


		DeviceLoadProfile dlp = ((MCTBase)val).getDeviceLoadProfile();

		String loadProfileCollection = dlp.getLoadProfileCollection();

      com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem(
      		getLastIntervalDemandRateComboBox(), dlp.getLastIntervalDemandRate().intValue() );

		if( deviceType == com.cannontech.database.data.pao.PAOGroups.DCT_501 
			 || deviceType == com.cannontech.database.data.pao.PAOGroups.LMT_2 )
		{
			//the last interval demand rate can not be edited for DCT_501 & LMT-2
			getLastIntervalDemandRateComboBox().setVisible(false);
			getLastIntervalDemandRateLabel().setVisible(false);
		}
		
      com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem(
            getLoadProfileDemandRateComboBox(), dlp.getLoadProfileDemandRate().intValue() );


		if( DeviceTypesFuncs.isLoadProfile1Channel(deviceType) )
		{
			com.cannontech.common.util.CtiUtilities.setCheckBoxState(getChannel1CheckBox(),new Character(loadProfileCollection.charAt(0)));
			getChannel2CheckBox().setVisible(false);
			getChannel3CheckBox().setVisible(false);
			getChannel4CheckBox().setVisible(false);
		}
      else if( DeviceTypesFuncs.isLoadProfile3Channel(deviceType) )
      {
         com.cannontech.common.util.CtiUtilities.setCheckBoxState(getChannel1CheckBox(), new Character(loadProfileCollection.charAt(0)));
         com.cannontech.common.util.CtiUtilities.setCheckBoxState(getChannel2CheckBox(), new Character(loadProfileCollection.charAt(1)));
         com.cannontech.common.util.CtiUtilities.setCheckBoxState(getChannel3CheckBox(), new Character(loadProfileCollection.charAt(2)));
         getChannel4CheckBox().setVisible(false);
      }
		else if( DeviceTypesFuncs.isLoadProfile4Channel(deviceType) )
		{
			com.cannontech.common.util.CtiUtilities.setCheckBoxState(getChannel1CheckBox(), new Character(loadProfileCollection.charAt(0)));
			com.cannontech.common.util.CtiUtilities.setCheckBoxState(getChannel2CheckBox(), new Character(loadProfileCollection.charAt(1)));
			com.cannontech.common.util.CtiUtilities.setCheckBoxState(getChannel3CheckBox(), new Character(loadProfileCollection.charAt(2)));
			com.cannontech.common.util.CtiUtilities.setCheckBoxState(getChannel4CheckBox(), new Character(loadProfileCollection.charAt(3)));
		}
	   else //must not have load profile capabilities
      {
         //setting invisible lays out the JPanel in a Funny way, just remove the comps
         getLoadProfileCollectionPanel().removeAll();
         getLoadProfileCollectionPanel().setBorder( null );
      }

	}
	else //must not have load profile data??
	//if( val instanceof IEDMeter )
	{		
		getLastIntervalDemandRateLabel().setVisible(false);
		getLastIntervalDemandRateComboBox().setVisible(false);
		
 		getLoadProfileCollectionPanel().setVisible(false);
	}


	//handle the DeviceMeterGroup data below
	DeviceMeterGroup dmg = 
			((IDeviceMeterGroup)val).getDeviceMeterGroup();
	
	getMeterNumberTextField().setText( dmg.getMeterNumber() );
	getCycleGroupComboBox().setSelectedItem( dmg.getCollectionGroup() );
	getAreaCodeGroupComboBox().setSelectedItem( dmg.getTestCollectionGroup() );
   getJComboBoxBillingGroup().setSelectedItem( dmg.getBillingGroup() );
}
}
package com.cannontech.dbeditor.editor.device;

import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.data.device.DeviceBase;
import com.cannontech.database.data.device.DeviceTypesFuncs;
import com.cannontech.database.data.device.IDeviceMeterGroup;
import com.cannontech.database.data.device.IEDMeter;
import com.cannontech.database.data.device.MCTBase;
import com.cannontech.database.data.pao.PAOGroups;
import com.cannontech.database.db.device.DeviceLoadProfile;
import com.cannontech.database.db.device.DeviceMeterGroup;

/**
 * This type was created in VisualAge.
 */
public class DeviceMeterGroupEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.KeyListener, javax.swing.event.CaretListener {
	private javax.swing.JLabel ivjAreaCodeGroupLabel = null;
	private javax.swing.JLabel ivjCycleGroupLabel = null;
	private javax.swing.JComboBox ivjAreaCodeGroupComboBox = null;
	private javax.swing.JComboBox ivjCycleGroupComboBox = null;
	private javax.swing.JComboBox ivjLastIntervalDemandRateComboBox = null;
	private javax.swing.JLabel ivjLastIntervalDemandRateLabel = null;
	private javax.swing.JCheckBox ivjChannel1CheckBox = null;
	private javax.swing.JCheckBox ivjChannel2CheckBox = null;
	private javax.swing.JCheckBox ivjChannel3CheckBox = null;
	private javax.swing.JCheckBox ivjChannel4CheckBox = null;
	private javax.swing.JComboBox ivjLoadProfileDemandRateComboBox = null;
	private javax.swing.JLabel ivjLoadProfileDemandRateLabel = null;
	private javax.swing.JPanel ivjLoadProfileCollectionPanel = null;
	private javax.swing.JPanel ivjDataCollectionPanel = null;
	private javax.swing.JLabel ivjMeterNumberLabel = null;
	private javax.swing.JTextField ivjMeterNumberTextField = null;
	private javax.swing.JComboBox ivjJComboBoxBillingGroup = null;
	private javax.swing.JLabel ivjJLabelBillingGroup = null;
	private javax.swing.JComboBox ivjJComboBoxlVoltInterval = null;
	private javax.swing.JComboBox ivjJComboBoxlVoltRate = null;
	private javax.swing.JLabel ivjJLabelVoltDmdRate = null;
	private javax.swing.JLabel ivjJLabelVoltIntervalDmdRate = null;
	private boolean is410 = false;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();

class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.KeyListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getCycleGroupComboBox()) 
				connEtoC5(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getAreaCodeGroupComboBox()) 
				connEtoC6(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getChannel2CheckBox()) 
				connEtoC1(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getChannel1CheckBox()) 
				connEtoC2(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getChannel3CheckBox()) 
				connEtoC7(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getChannel4CheckBox()) 
				connEtoC8(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getLoadProfileDemandRateComboBox()) 
				connEtoC9(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getJComboBoxBillingGroup()) 
				connEtoC3(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getJComboBoxlVoltInterval()) 
				connEtoC13(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getJComboBoxlVoltRate()) 
				connEtoC14(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getMeterNumberTextField()) 
				connEtoC12(e);
		};
		public void itemStateChanged(java.awt.event.ItemEvent e) {
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getLastIntervalDemandRateComboBox()) 
				connEtoC4(e);
		};
		public void keyPressed(java.awt.event.KeyEvent e) {};
		public void keyReleased(java.awt.event.KeyEvent e) {};
		public void keyTyped(java.awt.event.KeyEvent e) {
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getCycleGroupComboBox()) 
				connEtoC10(e);
			if (e.getSource() == DeviceMeterGroupEditorPanel.this.getAreaCodeGroupComboBox()) 
				connEtoC11(e);
		};
	};
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public DeviceMeterGroupEditorPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getCycleGroupComboBox()) 
		connEtoC5(e);
	if (e.getSource() == getAreaCodeGroupComboBox()) 
		connEtoC6(e);
	if (e.getSource() == getChannel2CheckBox()) 
		connEtoC1(e);
	if (e.getSource() == getChannel1CheckBox()) 
		connEtoC2(e);
	if (e.getSource() == getChannel3CheckBox()) 
		connEtoC7(e);
	if (e.getSource() == getChannel4CheckBox()) 
		connEtoC8(e);
	if (e.getSource() == getLoadProfileDemandRateComboBox()) 
		connEtoC9(e);
	if (e.getSource() == getJComboBoxBillingGroup()) 
		connEtoC3(e);
	if (e.getSource() == getJComboBoxlVoltInterval()) 
		connEtoC13(e);
	if (e.getSource() == getJComboBoxlVoltRate()) 
		connEtoC14(e);
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getMeterNumberTextField()) 
		connEtoC12(e);
	// user code begin {2}
	// user code end
}
/**
 * connEtoC1:  (Channel2CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (CycleGroupComboBox.key.keyTyped(java.awt.event.KeyEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC11:  (AreaCodeGroupComboBox.key.keyTyped(java.awt.event.KeyEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC12:  (MeterNumberTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC13:  (JComboBoxlVoltInterval.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC14:  (JComboBoxlVoltRate.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (Channel1CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JComboBoxBillingGroup.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (DemandIntervalComboBox.item.itemStateChanged(java.awt.event.ItemEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (CycleGroupComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (AreaCodeGroupComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (Channel3CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (Channel4CheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}

		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC9:  (LoadProfileDemandRateComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceMeterGroupEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Return the AreaCodeGroupComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getAreaCodeGroupComboBox() {
	if (ivjAreaCodeGroupComboBox == null) {
		try {
			ivjAreaCodeGroupComboBox = new javax.swing.JComboBox();
			ivjAreaCodeGroupComboBox.setName("AreaCodeGroupComboBox");
			ivjAreaCodeGroupComboBox.setPreferredSize(new java.awt.Dimension(200, 25));
			ivjAreaCodeGroupComboBox.setEditable(true);
			ivjAreaCodeGroupComboBox.setMinimumSize(new java.awt.Dimension(200, 25));
			// user code begin {1}
         
         try
         {
            String availableAreaCodeGroups[] = DeviceMeterGroup.getDeviceTestCollectionGroups();
            for(int i=0;i<availableAreaCodeGroups.length;i++)
               ivjAreaCodeGroupComboBox.addItem( availableAreaCodeGroups[i] );
         }
         catch(java.sql.SQLException e)
         {
            com.cannontech.clientutils.CTILogger.error( e.getMessage(), e );
         }
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAreaCodeGroupComboBox;
}
/**
 * Return the AreaCodeGroupLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getAreaCodeGroupLabel() {
	if (ivjAreaCodeGroupLabel == null) {
		try {
			ivjAreaCodeGroupLabel = new javax.swing.JLabel();
			ivjAreaCodeGroupLabel.setName("AreaCodeGroupLabel");
			ivjAreaCodeGroupLabel.setText("Alternate Group:");
			ivjAreaCodeGroupLabel.setMaximumSize(new java.awt.Dimension(114, 16));
			ivjAreaCodeGroupLabel.setPreferredSize(new java.awt.Dimension(114, 16));
			ivjAreaCodeGroupLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjAreaCodeGroupLabel.setMinimumSize(new java.awt.Dimension(114, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAreaCodeGroupLabel;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G0CDBF1B2GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8BD8D45735B0E9B0252DFFEA9A1A104626B4B1ADCD382DEDCCC3D348B53D6646B424352D39350DED692DE94D2DE97D9B3FFB39375CBFC79EBAB8A8A878CA50E0C4030670FE85D1C108510889AA4220288C4C01991917B387999475DFFB6F3376B9F3664CB0104F34757B16E7565AEB6D75586F47B98885EF44E62DCCAF900415D9027C2FFE25A0F44488427F7BC57D81249D91120C026A5F8E0075C2
	CEE7A6BCCD10B6776EA4E31E303644G389DF077EDC9464D70BBDF58D012BA8DFE845133G523E7C7E3792C26BF9258C752C26780D3E9CF82E83F083AD9AA0C5A07A6F6E5BA25393GDFA77FA630B2DD90E62DA4BCEB24ADAAFA71CA46670367F400A3690467BBFD05F27AB220911ECC20EFC9E73C95704C2656CDEBEC1079FA6F0893D67C70767435C417AAFF0499326C9C79D9A4ECCAA7014890ACF56F433329E3F86840004BD1B6E0F6BADDCEC99C3016D97AC50BCDF2F94A6407C53CEC9B909B9B5B687338A8
	091E77BD2E9177FBB439436C946DC2F186313FC2B2503C41FE50B71B5262A492B3AB7C0EG0849C09FFE3236C936B1FAB8CEC8F9601620BE2C48E036EF49D4FCE83AFAD7467CCC127F8B34CC081C897099G4C161DE634A5A78BED794E9061ED833C97C06274B1AB21CF87FC96C0E2965A387FAD3451F475B1A1357F5B6939C1ECDC1845ECCB4BD2ECB4ACCB4C5A4A6ACD85A97B06D52097408D908DB087E0A1406B343EB6166F05E7CB3F546AF2B8DC4E96377B105D62B96E3208F6785D5888A9B26D24B86072D8
	84015549DA29D4479E04E52B7C6BA38166DB3700F5A87E64B785C97ABA2D97DA5F66BCBFA3DDD84D72A8D82D7866DBCD6296B1C262D6833F095CB6D21FA97DEECACFD451D9D9FD135685028B06A463B2834659348EEDE94F3CDF482BFCA4FD350EADB1BF08CBDF144DECD81E2D5842E25CD3C5E2DC38A64958G5081E085088208DB03B10EAC2F1EA846C7218DF81CE67B2911FE3759A39D9A3159AD22C70E75EF7BC245DA8F185C1FA7AD476292D72DAE23450FFCC7B7AE0B636ECE1F370645E3719AA5AECCF709
	B9186E34B501F5E39DAF435D34CD6499D999E6F0FA85259729682CEC93E85BA2F88524C583B07E93B6C2CFB5EA6B0815521BF234F56406956BC884245957A699D9797ED7F5A12DA950EE8126834C821887108230E29D16710F4B4B43ECC79D2A72E532D1951B60A97AA40F792853AB191D83E21759E3B3775BC52FA0735CD1C1625A6FA7F797ED5F832063FD51A9FA4C124D65045C4D8E52D7FA994FD7AA56939E0FC8D3BBED8E9194B85C82667B750AFCF85A4DDE69345BE216C4050325FF2B0254094B66AE4891
	B2005FED39A4DE6D344FAD005F9539982B62DAC20B82BCB697633237F283BC0FC165966D50175B860899E64F9856515BC6C8DD1B837CC772120C8BGFA57A79917G58B7C0FC814673C1DF81449EA0E7A314B1C051A668C3B7E1BB7E13896BEB5B5AFF92CA1F7F36EEFDA5503419553D4E4D5A7A7AE5EA47B850E782A482AC86C883A85C12E4EC8268859887188910883098A08D20F0AB0E53F3249415AEE2AB9DC7B67857F7628771D32F8D903FA753DE9122B7AAF298AF44C92C7C7A56DC96BB440FE8EC695558
	E05758AF77ADFE3EEE161F399A3BB64A7CFAB69B2760A7012D2A5F6BE99DD37057B53C24DF58264233B469599AFC2D0E2E7542976AE81F8165EC8270ED453AADD69689344D9FB2FBC5EC659FF920010A962526B35E7EAA929B713268145AC4376834408F2F5C46ECD5448E397D8F3A84EC1BAECAA763C1ABB4D0AF270FD42DE7F448C35D1BE07AB51AEE16A40F2DFFC492CF0912E4F38EA9725328ADDE3F2146AB7B9ADDCFFC1D81BE4681A4F0DF57D513B8E3BBEEF73906C75C1D2407127B0303F45E138C7CCBF8
	FBA83512F92C61B5446BA82E24BFB1E41AC279137C4261E3BAFEBEA59D99E172B19D5D368679F736DC2FC91DFBC32ECF392AFACA5A83E9ABEF4BF56BF51E071366D1813E19GA2G62G96G2482943D8E7DA3009BA086E0AE40D2003CC218F794E2BC27D9D3F46CC31B025902F6204DFAFE3EBD05985EACE03E4E8D701514D9161C9E4CD77493E3B2D17F7237865676D656846FBB8CB57AFD473A9A7D3E2320A6F45FD0D82357B730341DB5A43E2ED1272A2FA929A1637B004B6994E90747C584365E7BD3A77143
	6634C95DB64B10A81D32DD91E10ED0C87A0C81BA0768035FD2A10E6523BBF1ACAF3E728DE16E05693A6B0318879FCECFAEE47DC0CA21B216B31B765412BECC340B8E88D42BEB44A9B1FAB91D1F48F4EF86252DB21265FAD1C9BB4C0068A47C32595EA6BA4CCE4BC9188D41E42E5FF54865AB35C922230C7CF7CAA2E42B59B9A4DACAAE1AAF1B4B4C23D299AD1B3223107E9E793527681DF78E9405D838168E5ABC62D127FBC41EF5156C695AD3AD5761FC2135FE1C5A54BAB6E09729A83743CC03DC469E9D22E750
	65F1849A52C21327EECA8D33A3697C8DEAC78B4C9EDB49AC73EFE0CA2D9C13EDFDD7D9CCA07440DA55EA958706BFB9B3AAEBE4BBEA337D6C287C246D40F8BCF3700A5A0E6ACF580EBA2C2B79F6BFBBEABEE1BB6A510E4FDF7EB4EB47AE332543639A3459C51DE67C499855A05B1456648A560E074531B2004EB1F7207AE3625854F53FAB6BFE5A618D51F6EF1A7A4A8AD97F3AF45607D1498FC79C7D222793C62943B651EEA99D00292BD4C67F17C5098D3EB26FA80CC532992DA475E398D2496C68599CC16D78G
	FDBFE4335BC18B4D63932A8FD532AD334E5F62EF0B3D4BE567234EA75503D471F126E777B59DFBC8037924EC2996F00D75F483993305EDC946820052ED386EF8381624633AC3DEDC353A6CF6B65D0034995B68FE6CC801EAFE50360D6D132F63692BAF07CE2F1EA07D4284691F1BA07D318952FFB7C1FA6EE86874FD93248FCD10FE6784697F2C1B3E881EAC3D5927173E0C27BF291BAEEC47F20E294BA373CE715208689C904942927AA15C432A5B20C96BB25BC7143D312F5711393CDD35A6E574AF556B4F83E3
	6B49BAF41867BF2BFE15C07638D81EEC5EBA5BCC72F4FBEC8ED84213C536FC1E52E5D61F2794007D646C25931ED6GA6ABF8C83E214EAD8A5EA0F9455B705CA582E4E3C8DEF2FEAB364BFB5F144FF591797AG7781443C2147D7BD0CFC0BGDF9E146F8F1CAF2FA849D882F024C80F6FE1BB72C5C1FAECD03E0B8E641B8B690B0272EDF7A2DFAA24676D884677D34ED7C1F8G2CBB74786EF2A1DF5C8E9617393AFC5DEE64DB310345C51F4FF88979F25ECCB29683343D294777A34E978169B104C7176F8B9E6EAF
	24676DCCB2D66C54636B72A21F9B5223F47862F6923EAB7C1C2B1C536E203497E0517B19CC5C3FBF1E27BE2733F8E7692E2188AC5B4972970A35679AE96F12FC0B00DED10CEDF4FB03FA8F28456BF58D586836325C5E1EEBD02F2F986D278DEB6089FDBFD9DED9C49F3659C58D44D63B191365F677705B7B0540FDF456F6F00B2DF5148EB91DAEB231B9824D3E15AFBF3BEC622800F138F6D8FD561718FBCF3AB1C89C5AE47FAD2AB8A47FB1B10B1D697D67A846FDD6B11E730D7A10361853D2B92DE097768577B4
	12B1CE6F3CF300BAD8B6B4E2AB9B11ECE4F35CAC1969G29BE5B1CCB7755C8DE6D3B705CF0190574EB11004F841883404EB01E27E79B04B799E8193B316F7D16286EFB1BF633BDBA8BBC59BC2069A229CF13DC624A65B5EF4F86D63E1A319D4B607E7CE6D9EF72B76F971AEEDC51BD4B0C4A0DCC776DE6310F5D2D14C1D1C6FCD68DG73AF66A27A378CF80A5FC27FBEE7537A578BE991EF21FF2FDEA4F31E49CFE970EC28F79875C6C31E49DC2FE052531BD9026511E7C739ADC06BA8C1398F4F2B652200BE9BE0
	E1895ABBEA7FF876AE64FA17C21EC5FBD06FAB19FAFACDFB505EBB9DA8E7875AACAEF77B301E5CE2AE773E936516832DE4AF4AFD35DBCF2EEFAF4A7D154BC9C00B67F2874EE963CA64166C4578743BBEDEFC7E5905FAD3A14F0A37B15F5D6EDD821D97CC3CB692B02F88B766E505FCE25FC65FEAAEA1FD915072CA513765E635EFC7CAD91DF117228D77DEA2EDF1128BA459167F62BAA3A13FC42EF33CD62F1E2E60BA4FFBBEDEBC3F6FC13D06F7120C4D6F205EEFF46B75BB3EF7D06F1B5E0F2777069775CE07BC
	67F13D0981FAC97DC9FB8777983B2B5463635C14182063E3DE996B0B0A4B3463E34ABE52AFB7833D338C4747D36F123DD59C9FCF420884FDA84CC679BEEEE3862BDFB21E55C87452F927006B20ED7B096DD648B392E0A6409C0005DC477446896F923C678BF117602F2313399330228C4F9646FD1311B314235C7FCECA2E104BBD95F0FF2022DCB977E9D37DC6E0677B96115489D3B9BB5FDF4B69DECA9FD751D99D7A8B9DCB899E8BE9B995287F851BD63F2F42DFE73486E7F2AF854815E970840D9C9BC7076C24
	FC69BCC155549B9B795ADC1E8F7CDE447940028ABCF7779EA073C7C3A50C09GCDGA600F100980044CA2CBBAFB46A4D2D7C6BCE300915F246487C3C6F625462939FA0270D4F62CAFFB9366E3AB224DEF72D28E4FD49162AA4E3E9954E3F1E33115810B65ED6056558BFBCB5BB5D81F2DABB472B7C65188D75A634A11A5B3049BEB59B0A836434B6A4D769552583DD416A123CB9AB47F439C3AF26CBA04FD49E53E9678DF27B482BC6FFFEB9C5FF16CE680FD42D97533DD9E843F4EE43BD0E29597075GB92D8D4B
	F5EDF8EA98EDB054208D471DD33361EC001C5686FB0D1E8D0B3A5106C8EE43CA5754EC488D10535A30D4570611F3D83F05DA5ED7CF51061FCDE8C3C32D1E5CED6E29690B8E10536A6B505557F8E9EA7A0E8448E975D9EB755A6F2E92521F6B34DF3E034E4A622DFEDCEFC67032785FA95AEA74CCB8EE556A5507C7EA31BEAC60B6BC9910D7F8B67CF8C29B8CF5FAB624F4238DC5F57CAE04F7EAB65C99A027354124EB43AB5C86F79D0E4B0F9CA434B840936AF08CEE58C75AAF4E91BBDCB627A4607C7045FDE49F
	5265318D591CC87B8FCA9BF0F96821BB236D5A9F7CBEC069FE7D7BGD57B756F83B46C8FFD1728F9FF307B826C5E4F863A67B19F7CDB8240E8F7F2DAAA27950CA1AD279EE90B695EC69160B51C763D81C2B3816E2E47323CA812F1AA9A7039GCB81729AE05D86E0EAC01EB14AC376D0479B58FC1F2CF1E6B630FDB74613EA6903A711D717DFB0A0F92B7139BAF2F9B2CF057C0C66B6670BFDC2703BEFDA505EBB535ED3DBA7A8F755705E8A5EED4B901E5914CB4B506B953DF482C7F6126434BFC89B851D7B999F
	1A9D220067C09BAEE64BBC6FC92E569A5E967EA8061A3BA7024F8BB4B1126F1F9D88DEBFA38F68574F4F9EA0B1703AC6BC8322368E5EF1E08BCFD3E624E4AB0A38A16F75D3F9496C9992836A70D729BCCB8BA67F5001E0751C4568F93F98558A58D73F3207642D53D753CD3CE2797E3FC10E6912865C43FB166EA9953E8BF59F207DDD2CB7BF656B874B3BBAEB9C20CD8708D525B17B6E99D65BD7474B304904794D5149EFBE509683AC8F486F38DD1DDF25007DDC099367A0190D68CB51BA7A2E856091GB10D68
	4BE74F6B5D3D1B5D48F44DEB54EF070B003ECC13A66CCBB2966C7327B1BB57BB54F6D6F13F4B3374F41748F9B46D53575D81F40BA64D8778F4DD5D8B7CF457F35DBF9C56539DAB67B1A7086E79C0DF2CC9DB8EF8E6131E6EC827DAF783577D2BEEBD5DDB64BCCA1B74F5B7833DD313E685FCDCD7F703CB2D7BDD2E7B4AB92CEBB3F4744C82DA82C0F213362E253956286BDA8552135CFE74CA24DF3A64C72FC27D257D217A2B949D1BD8FEB59E35BF555C1F04DA4CEF050E2CE1FF12319020E23F561FD40F1FFD55
	185F0B5D18DF5B7E407CCCC03383C484641768754B2F8673CB6579C56B64978734C400852AB45657A59CA4FBA0BE0EA7D2FCCC40BECDECA13C2C3FFC4FE911A7A96C3CE98F9D5BFF8306EDCCC75AC314765FC0FB0F535E26637D4BC0FBB29D7DF845CC66B2F67318EB84726BB8C05FCF6B47B5689230B38D2098688D8758DA1459736DD1B2668DFA4C8E68DACF3945812174A011DDB00032B1409F8F108C308CA067A06EB1FA0EEF07E7685BFDE81F396875203C6D66FE51AE737D3578B542275CB4D26EA330239B
	196F7765643C0C8C46DA86167E25EBE41E78814DDAFD93244DC1D57272DFDFCA5E8F513FB50267737FFEC13D67A99DE4710BB908FB2257A53D747803B86FCA9F44F957DCCE7B7485C24BEB06B2E946BE7D31A1F59BEBGFAFB33D23F7A1AF546AC3A7FF6161EC9C84DEC7FEDBD275BA9BDD6C5E77BF2BF2163A34113A14D5402B63DC477F816GAE9CC2DAF9B75ADE40E9DB2C04E6815C47E9E6CA1B8E78ACCEBBE5427C92B86D03A14CAF1953B6D09D052D505EDB11F6369B73EBEB45783C63D4773FA6205BDBA7
	1EEFC6GCF3406AF8E70C48D0D45ECD6A6094D02D6EDAC9F257434D6EDACF72F43D81634A5996734217D71F4EF27793DA4E347FBC8DBCF4B3C97F009537EE4276F75GBE0B53CE7492DA826073B94D3D9663361853961FA5345243009F6632F4BF47843815533E1B4575F2DA6D85549B45E9879C04B69370F8CE7BD6AD2F3B1C76E88E6A4DFB9FE94B689ECEB160B51CF6420EFA1BB9ED788C6A6D64341F52BAE1855C47E9EF0E215E691C76008D75AE6634D7E9BDD98E38F084E996936A4D6134C6AB6AAD62345B
	29EC8D41B96D709A54EB6234A73AD1EF9C275DC177EA9281DF44E9C38E14DD46E91BA8DF53D12887C711F60152AC000FF3DAEBBF4A4E60349F535827G1E46E97766A0DF5E87C8CB2232FD00CB1C360A2E7522G0F653434EE34F98E27992D185FFCCE6B20FCDB0EA599CB0FA16D1EEE34391953F2CD18DFA7274D666D5B4AE92FD03E844013B92D298773CBB90667FAD57D785E6F8A223B9D47284ABE3FBD9BF2F25558783E47E6B9E49EEA27A39E1BBFDF21F1A07216F67E2EB24DF3A660F3G125B711C4A379B
	6FAF44FF6DFE21BD62BB3A6FAA27F45E133E241D759306634AB9D561B2FEFFE1GF536C17A78F1C2AB36284783B24E7CB91D6DF53074AE3FF452F710B3CFA5BD4AAF1D58DB1F21CEFF5CAFBDCBA54FFCFBF6977A16766CEC417EE8EC5077306749BEAD151FF1279EDB99753D78ACF97DB598E47DC5C7D5667F56BE62BFD91396FD087B5A0FCAC80B84DA61C704D668EC8B51C7E789B8BFE230946452GB64A74BC48836FB630F17B3E8BE4CC901D64CA1AC510280EC7AF601E1D65A32CE7BF2275B18170E4CEBB14
	CF7B8C40B3BB1076E481565B128E9CEF4C76A2D2D3G0F8618833090A09520608474F3G1DA7105743F8810FB9416ECB113BD089A758DD27C5A758DDA6793D296108A0F1A0F92BF1221368A73AA69A673490AD67552912DDA85BCEFEB3DB7EA728AD5AF7F8D64B31553E07988E601E4BFACD3D463D99D62642C5023BBD62206871089676BA0BDC36DBAF1272C9855BB3CFE21DBA5CBD19BAD581F2EDGBBE53A69A49B4B15BAD5CE7BC2720984D22B185E43D6DE27CE623C57E7A5310189334DB16220D6B25E9914
	D7823E88GC69B27FDDFBC60895CEE7350C4F62FD6593DC4E3F7EA005DFB3A836DEE6EC63BB3CF21AD1114D6GF851A92C779F51BD07F6407BB8EDDF9D21C5829E43E90F57E3DF1F48E94FD03E850027F05A61A6ECC7ABB86DE8BD7675ED1D58869E4AA46D45843884B083A09EE0BE40F2004253C9462653487BFD4A9BAB5F27DCA45FEF6CBD4D6EAF0E1FE6777A64F56A3AE0759901642D461BE4DC4F96B55F724E705BA033652389ED5136A5EC9F6A776D745E27536EE90682D6C77E65BC3917AB09BEE966E972
	DD149C722990B96D39ACDA1F4DBECDFDEE247DE98A70AFBB0DF53F7DC270B63A194EFF36F4C11F57057C56DE22F7506514984FF5BA376D00745EAEEC8F1FDEBB197610269A9BC89B185E25ED8F49B97A6DB30B6A0E817ED90AFDD97EF1A9BFA2F0FF9EB6507A8D3C0B3B308D09B4A606EE68C73BB10F538EFF9F07E99C1AA13D3D9BFD7C575AD0BEE6CC6063F83762A35331044E8323009E4D6D48307B7BB2F4D471658A1D0B4F855E64EE74A51A4E45D3814FB4E19EAF8D797B72AA9DBFABA03D49043E3CBBB611
	AF59A1FC311B343EA453F93D8F68115C0ECDA6FFDFBE7B01624B7F21FD6AEC60CDB421AF83346FDD8A788A1E47035D7E3EFC1F76FFC5BDB0376CC1DF4E2D19286E05722537C76B4B9F288EAB50259E3463A775415B4C63F4AD908B3C715C266B0E09EC4AD041229E7F3952B240DFFE7555D71576704E394039D25BB99C9FD2391DFD757A6DA60A729A4EC01DBF03B61E691F0C0D4DE77C4730CE40BF33D25DE6FFDF9BBCC62F52F5D09F4858397E6F64CC265CE2B47A634FE87B0C057D01E3689F7999F042990C51
	36817D985552F540FC60DBF8866B64AEDACF0533308EBD0BF63FE91DCCDF57F0563FEC5B4FEA6D9E6A8EAC5B6BFC6CB71DC5DBFE406AA541B92D015A978BF8BC376F698967A66A32DD2431EF59D9ED5DDB5393E85F0E9EDE7738ADA22599FA210E7562D85E90F24FB97838FBF80AF2B7A6AD4776062E8C10B5E6F32FD2B60CFEAB25372B6872B71378BA5784E9093DF8266DB8C656DBC567202F8568843083CC8708BB07E75CAD4D954284774CBADD6EF67132E8D79DB94B77938726764D22A7D763FAF24E638F89
	893775853D6B1FF80E4D11964B4F66130F2DA4CF661FF01C7817F39E66F1G6DG96G9F400C73685FE71ACB19FF64350496C9B28FD8699B8F689CF989C1A1138DEB665B76BE3D3319D967199D89677567EE49C0CF51242DG5CF0815A4385054EF4BCAE69692810795AAE686BB0815D2EC90BGBC9AA0CEC5FFC3E05FD320FD867D377CE0A0CD9058F8187711404B6737B9D8BE058FBFA0347D3CAFFDE7307211756574A9FB99166BF7E54873268BF44C750C08AC5F58D175DD5E06B577853D4B5BA667E7121F85
	539EDB4972FCF1081CCB743BBC7450181DCB24717B06B300BF8EE089C0EA9F3BD7A03FBF199FF81E614EC739BCB3BB4FA801E7131949317EEBD141C4F3931CDB13E7A748DA4D2C7FA278381975DF3F81105724F40E2E3CE52CBE2B908472FE065FDB40ACD9CE3FB5E3031F2C76CCE4F675C62D3C42A273386D645DBD551B3ED483CBFBF6D501FF9A3F43445207FDC4BF5B2DD13F1A0BF95F5EC0746B3E3DAB605947C3F66D598609F514994FBE2E7468254F646907067452E773F4412B17BE8F52D9BDCF6E90F8AC
	0A3BC9FBF00A23C57C82FB1B8D3A8172712C122A0A0A52222A5ABD13ECC719A7157C4FD9317E333437CEA9E93F8BCBB7136B6BD4648E8ECD55E6161721CB492B3B5B5F3E373B1534DDE169E13C034E40B6F94D09EDEB1119354965704C6CE777FD185C493A40B6E92BC33942FE56A6EB60F9C416E3E37BFF5075FF9F506C7D18D7CA1D7F5C7CBF69DEC28C244F6A67F37326F05699581697025C52FE25AD2775EB6766BEEA07E1G669883E8C766D1523E34DF1CE0E9CF8D29522A7C533E1925CA2B76CF7B30CD15
	D6631FB6432DB95F549E03E25F1231AD98DFC09F115C3CDED01FF5EA4FB877DE5DA0E84FB89983EB03AB835AA0A93B6681EC23DFF66825F78E60DE7A0F4F2A47093CAFC525E35C35E5E69DE06303B4200CBF2CAE5FE9D235B5FB083ADCD9CB6AF2BD36356F76A8F207FB4317FB33CF11332CFDD3ABF798AAE6491B961B596E9AFA333488C4ABEB76E01FB14D2C749FF17DCABE170643577F6C00A23777C278F2FF32A8F2550E7065CE8FA9F28F54CE4EDF1FD57177DE1B12CF65797075BFF1D1116BBB933E5CEF07
	953927C375F19A39DE27A237E9ECF27E7E4A2578ABDCD272098CB586E8746F74A8F2655670658EFB9539DBA7216F2D4B0ADC631A4979FBFAD4715767D372D96289DF7F3DE30ADCEF48FAD9DD8DF25521463CA72EA8F91DBD67BF667D762A129671B175E4DED37CFE6B3A126F0C1C0FB7E6FFF0C349ABFD405FFE0720241925706794B3D6AAF2C2487AB4315F0F24ABF9FDD1B32778378CD5DA487606FA185CFFE7AAF28F06A5975C3E42D5CADE8DBD7E769DDC2D241D8BCB8FDB3BC5507E167D7E0C6A771C7E29FC
	43B0DCE0BA1E3B29BA583A7972316077022F9D533F97FC6BB17DFB6B1FB9967ABBF6F79C8B7E9D3B18E36A6F5831F5FF2E014C9F62E04C1F873094A08DA04F02EB7E5D6D243FA2DF718DDC6F3FE799A277124917FBA5541FFDBC382FF947A77E5E6F5663644EDF3FCB12DC8E12BF525FB8CE4ACBF239A911510A0F1398F9ECC3D609314A743D47C93D350B03144C4E391A69D9F8A97855E441332F87A96D8860FD1C76923D53A781BE03531EE9A134D9004F6134AF507D477900AF6634968BBD3B865CA0723BAD57
	714C2D105396CB4C3EA463B827350C50B38340E3B9ED8D5D971C837882CEFB146E79AF81FC85277DAB3559B088BA86797D8FFAC7278270A31C36095FA7699D647BDA59E49E9F8F78FC00E5G19C3C946ADG95GEDGA6GBBC0A440CC0059G73G9681AC85C8834833E2FDB97D91396F50E53E9878858BA04A97C3E825711859BBA04C0E1F513BBD4510CFB34FEB66C7EF07488B665EEE51A30DB1AA7DB20E3C07D7EC45EFE377C1DEB1D63C2B1234066C4F0575CD0ACE1BE4978F51D5983BB7E12731236F1FDA
	717E4A67B790BD86DB123188204106F7E5E272F18F3183E8D1B63CFB11120F77D1665AB00FF58574FB5D0067DDCCB216G0437C6467E380DFEBE0A657FDBBB5E6DE83E08BA3FCD77EE497E7DACCE9B9BC2BE43B0526A3DC8338F239F8FBAB10E8B00E630A36F4BCE0CC5339D7D08225F1E7481BE83A04E0EF95CD10731188B34D41E47AF6AB096958E4CE3B57DEE119570880098876EB38C917365F165093AA2A16838D25DD0CFA6CFD5FB185C558B0ADCE3D3B8732E2ABD616E75E17C6F6BA3987B7D24D9511731
	AE9CBBD9AC9AF86CE7BBB0BE8B9DC8ABF0E2DBF552750C7C0D646EDD415A86744C9F004E0F7AAF0A83D227F9084BECB6846F1B379BA66E1B5FB230F318A111FCA4C2FE6F4AC05F5D9A9C740AFC8C28B464F15AD1EF074BEBA3B70065FD12BE7F33439F2956DA09FD7AE75D8BE9BF6D03B8C4BAF1EFC0988BF19F0576FD3301B711732734E876B4E81F3E9452D7F01EEF74871E074C6567CC45AE64B3D9744F195C347F2F813EE6976E131C38BE51BE097A4CA660BC9672299654E7CA2FC87E717B3F2AB527E9C4BF
	FEEEBA3678A02FC86E430E6E6071EB24634EEC60CD647C491A3367FF27FD48D2C8DF41F9FE658B0C5F8A7EED20E2B77F5E4818FE7C8E50F22B813EE6B7466F1D10E7F2A43FD0E773F648073C33144D5B40AD59415BC0D4F698FF0FA0DBFFFEF2F7F6607CE4E6367E7C647EEC757CC47E16DBB62987C3B0BE1AB8DFBC2775F05A37E91E0456ED33C8D6CEFF0C5AC568C7C4229069C9542ED1CAB349349F28E8BDB26D69EC520E41E52B0B3FEF191CCD4B5CE637B3FC816531B921D973F8BCCFED34394DAA3BFF49E9
	0A5D0B5610726273D6B6DC4BE93FD9D3A030EFA5C3DFEC3BC2BF2DF58A981DC3EC0E3E57BA5159184F2D77CEEB4304F25BB5B8133BC465225D615DA90AF3635F5E482063FE22DBFB5618C369735D5A3346AFEE4031F1A124B5DC4233557B7227F6C69ABFC53997A7AD477C7A941D3B4C3C247577F3149EF7C96BEFC1817ABB875236F8505F5F5B7556E0639E967F9972F316473FBC92GCF5650D2GDF61512B8B5F6D5153E170B25EC22FFED9D7G3DCD13E6825C6E5553F1DD771B7B91B2EF347C0C5348A6823E
	C0C3DB82F82A2E0EA62F1E0E9CC95E33151FB5123F6C9140FBB5B4B76011121E0E07833E5390DEFB7B5E04F27A6D6DAFD4AEC68A2F3D45CB585E52681CF32E242DFFD9F44E19ACE96B5F6D35D87F96C1DA5388563F3B6B2656EE9E1C225C2FA7AD477C3ACA674731A3DAFFA3A9BDFEC46B6F5AFA74B781528AAF233F7BF56BD044E5391EDE56AF07B820A7EA5296G3E84A0D5C5E7BAFE61502D2723F2BD9D5557D18374A31A34DE405DG11AABA1B7B948C42CFF96E73EB5FC47BF515F5389FD62F5AEFFF22A554
	BED5FD2DDA6EBE557E7AED7D616E63B27E1F777B6F15BD295AF3AF3FBE51DE2EE243923A674EFE2FF6A8F93C5A953E7FFB1D0A5CC3A177697C7DFF482D48BD6E1B1C7F46B1FF7F1FD36D5D9BA75C03D7ECD8CE776E59BB7EF373499C5666345B1CE2AB7BEBD082FE1FA10A2E57E3204E4C9E457D0FDB2E915ABC40970DE2DB48A64BBA394EEED07D3EF7434D5FFB1C73896808AAD0FC3AC3757B35021B2F3B7A266AE0E5EA206B64A5D01EABF8B9BBA8CD70419C43475F51237BA02500F7F05ABC761E9360911CD6
	C15FE50886FC9627B92F623ED98227BDC1798CE3C94622B124AD6AC1DBEAB86D5DB3E8CBB327D5DEC43D1D1CB65203FA2D1C761291750EF3DACA8F6ACD6634D83A96CB81FCB927E5517A1F86F841957EAEDF972115G5E4EE93B69DA2F8F70F1CE7BAC4DEF8660311CD667C3DB66F05ACA2AA373AA0CADD711F61E6EE5D4G5E4CE97FC2E96D00DBB86DB53A2E7681BE13531C14B69B70E4CEFB4AC3FD83FCB9279DE9C6DBB2471196350750BA8137F3DA360B50A2G0F6134BCFADFB59E70396358872457A96D42
	287A9DDDFB735B48BFFD82BAEE29D7FC7A2C6AF7FE7D4D57DDFAD3F5486FEC527A158C6539181773BCCADB8A38F08DE90F30F7ECG2F60B4768ED19B601D1CE626FB13D64047B96DA1CA1B81F89C278D7277FE93B96D2F346F49398EED62BA527A68FEE989604D8A0D3E6F5089381B53CA29ECA460511C76139AC20B83BC1153DE23F5F88160CBB96DC55ED724DD47FD162FD849DE01C436324958AC607E4EE35467769BC9C6538D640D3916053C824EAF720908BCC63F61705FF72A9BD152A29D7A7BCEB329BFD1
	20A31A6B79F48F59E3313ABC36ABE01259CE2E45618EA15AF7FF8F6EAF4F65F2AF74845F2FDAC1791781EFAA67FF7F227FFE55B95A6796C7C059C7605E52342B13591BEBD33D6BC56654FD10CF3E0A07FCABC7FFDF6BE52A5B8E7C3E885C536E21F782D8FABF9DA3E6C15A6C883C17F5064AAC86FCA9275DC77DAC3885461CDB5087A164DDFB6D7E1856078E4867FD598726A31B5A528BF46BAD984B47067C4BFEFCD4A97BC22BFE595750BA968DF94472FCDE6A1A386CB33B316C13395C7E90FB15DD14BF95F8B3
	BF057CDF556CD5BE465E13017426CFE15C0E7B42390B9AACEEF6484761D776DB023CF7380F4641877C115C3E912FFFBC3F223A5771CB2FFEBC7FC27B335910C7A24F2732FF62F83677E3BC17F239E97D4163F99F65AF38956A582D483F58639F4F3F50B1399D52CD37E2BCAFB4CF663DA3EDBC23EE5536252F6C510F67E3F41C0F867ED8EEDF11CB3F1FEB2063FFB270AD623CEF558676F3BFD05D0F392CA91B97D577DDDE88D2B62F5032B1C442DCAB92757CB0C41D7D9D2D334D405B4E79597DD6A546DED6EFA0
	BD1273786A827757BFDF077B6BF3B85F13F57A31E3E7EE7300EFC1A4165B35106F77E95B01F6FFBDADD2FBBE3141699FBF4338923FD127FE7CBECF47C743B4085FB47EAD785E60711BC1474EE660ED677C2D1A777CFA6858630374C84E3334A6B0FE2F567078F13E4ADA7D789D25636EBC60DBB08D6317E67CB867BBE953D87C56723A98213A1FB4F2ED07203B46EE7140A29B1658157292DB16FDC0D0E4451EF07683986F77A82F7ACB6B27487FF83543DB567E5E61CED9C7346AFE522E0B21566DB57E6BF6559D
	247E2B133B83C7DFB710FF37286F980572D1231F9E4D49F23BC35ADDD923167BF436A2F7B124BEFF395F999539DF99A7676F2A350A3FFB56A979B8ED616BEF4FD5641E8EEBEF08713E5E9DFEDDF065A9BAEE045CC7725FFFFAF603A237B76CFDA4790EED3E921B759B15FCFEE65E9EDC7F3B72B616ACD733C9114B6D8FBFB6837D614726FB3322637110F7B57D6B69A3DB953926664945665FDED3E2735F2FAB79DC288DDF7F696D0ADCE66D647A9F3A85AB4B46CD78CE0622735EA2C5EEDF483DC07F7D48343D0A
	5C693A496DC7FE2D4EFFBF720DD2A52F33EB435F0FBC740E92F331CCE5CF287B6E9A7F234A95399DA16F4D7A7B7F67CAC56E291A49793F29565F7F8D55CADE3FB4066FFFAD79ECAA7D9B437942158F8F2D9704781705ACC9D8A33FE2D13433CA0DD42A11EAC9B0F22426486B91F23942237414B965F2F5E3466F9E48C897B20F8A2B58297BD1A1139C1D9F953268497AD1A1C3F239FDE4EBBADD0693G19105B06C073DBEE7F454F63AF3495248B691021D5E4B9E40D1233F41A87E9FE733D17046BC2269C8F720F
	F49899143A4A0FE75514A4C8533CCB03F90435FE857754D7EBFF1F7C6BAEEF06306A2830154CEBCE099EFABCAEDA4817753AC48F716730106DA61FA9A43394880C17BE323C5218DDEC978A86CF123F9D6715C4CB8B9E3CFBA5E1E3BB51D4CEAE3A159FB1FB2D742D6AFD6DC226536C90A5E183CB361B1DC3656C94FE9F0D4C4A16BE6A999D10405EFCEAAF49250C67127F7D5CDDBBBED81210A1249F965658DDE64BE1730064729C9532A52BC774DADDF60B4FFD3019E6E420FFDE4AC8836591DE676E93E74B48DA
	069BBD6C7B727435CB579E064275F904F24AC92618E51C43827548832AC44FD1GB328AC66E937EC17F6BF777E665EF4E1256CA4897DFA1FDB92D68D1A9DB67B987CE8234D04964AC6892C75181DDE7297D94032A20DE5184495145D79CC45973F71BFE72882C5D4925EE021845172A15165A8EF999C34B9C51E814495325F4633A7BCE59A1E8D3EBBB6FE707C2B7DD08F5A048CC7C5857D3F127EDFC57E2F2414CACA292C0260AE97C27E53267B50E7DAF9F89BA445DFF698CAD07A654B4F5C7FC25372E5605DE1
	A10B7E5596A804BC050B3D5FF8DB7C97379923D3BEC74A48CD2A0A0F643B5547DB86E919243E6FA6F5A9E4DB8844F2836A9F216687D6A4C25E4C0B13E02FD156C27A7F9B138E8E115AC1E5F7F21FCA7DFD4A13AD7D077629CE71A9D765D37ABF32CF4D7EBEE15D8B6693994326F18932BAA34FD6920DA0BC6A3E5E90E4BCA8107322EFBE86998F7CF345FAF542CFC26189EDEBE688DBF3E4D845F9EE8761DBD5A5474AA967EFD5F24DB25E2D145C9A155DD97EF6CB42EB641B35C578C958A2769AE691F9FD32D192
	8A492B1466A1312865B20C88C3B00EF14E46A21ED31EDFC9906CDBD32B49161BD81387FCFE965E4523C3A86B6552DD7D0F6513E3A21FC89B481404DCB25BA9D2BEA4AC891BB414A27AD6BC14F8DE0B1D7E85B0C9642435748D7CA2B6C4813ECEFE111EB3ECA62F7196496F717A29596A1762DF37DE433A05491A1A250D744AA0114E74EFCDB8942FE2F7B3D944084C4DA902EB3E90D5E67A5FDF15097279D5927C6864EA9D3B917368E0FFD7BEFDA19C1FBCA14A4972776753CC45278C15CF86BF3BAF7CE3553D2F
	A9BEED162DA47F746A5E949BBF412E137FA2EE0E875F8C555A7F8E87086F869BA0700F4B105F6B7F31FC1A9B4C27CC15CF69786D20BDB7545FEEC81DF6A368B7FEB2E3585D48ADB14A379B58BBC3992769BD83203BE3785F6B6CA41BD6415E9DBA65B05BE1F0338F37B8AD64BD22C3E312283CDFEAB8CD7277A20F1C4852F2CF933BAF2AE47EBFD0CB8788327B68EDD5ABGGF818GGD0CB818294G94G88G88G0CDBF1B2327B68EDD5ABGGF818GG8CGGGGGGGGGGGGGGGGGE2F5E9
	ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG0FABGGGG
**end of data**/
}
/**
 * Return the Channel1CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel1CheckBox() {
	if (ivjChannel1CheckBox == null) {
		try {
			ivjChannel1CheckBox = new javax.swing.JCheckBox();
			ivjChannel1CheckBox.setName("Channel1CheckBox");
			ivjChannel1CheckBox.setText("Channel #1");
			ivjChannel1CheckBox.setMaximumSize(new java.awt.Dimension(150, 27));
			ivjChannel1CheckBox.setPreferredSize(new java.awt.Dimension(150, 27));
			ivjChannel1CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel1CheckBox.setMinimumSize(new java.awt.Dimension(150, 27));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel1CheckBox;
}
/**
 * Return the Channel2CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel2CheckBox() {
	if (ivjChannel2CheckBox == null) {
		try {
			ivjChannel2CheckBox = new javax.swing.JCheckBox();
			ivjChannel2CheckBox.setName("Channel2CheckBox");
			ivjChannel2CheckBox.setText("Channel #2");
			ivjChannel2CheckBox.setMaximumSize(new java.awt.Dimension(150, 27));
			ivjChannel2CheckBox.setPreferredSize(new java.awt.Dimension(150, 27));
			ivjChannel2CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel2CheckBox.setMinimumSize(new java.awt.Dimension(150, 27));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel2CheckBox;
}
/**
 * Return the Channel3CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel3CheckBox() {
	if (ivjChannel3CheckBox == null) {
		try {
			ivjChannel3CheckBox = new javax.swing.JCheckBox();
			ivjChannel3CheckBox.setName("Channel3CheckBox");
			ivjChannel3CheckBox.setText("Channel #3");
			ivjChannel3CheckBox.setMaximumSize(new java.awt.Dimension(150, 27));
			ivjChannel3CheckBox.setPreferredSize(new java.awt.Dimension(150, 27));
			ivjChannel3CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel3CheckBox.setMinimumSize(new java.awt.Dimension(150, 27));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel3CheckBox;
}
/**
 * Return the Channel4CheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getChannel4CheckBox() {
	if (ivjChannel4CheckBox == null) {
		try {
			ivjChannel4CheckBox = new javax.swing.JCheckBox();
			ivjChannel4CheckBox.setName("Channel4CheckBox");
			ivjChannel4CheckBox.setText("Channel #4 ");
			ivjChannel4CheckBox.setMaximumSize(new java.awt.Dimension(150, 27));
			ivjChannel4CheckBox.setPreferredSize(new java.awt.Dimension(150, 27));
			ivjChannel4CheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjChannel4CheckBox.setMinimumSize(new java.awt.Dimension(150, 27));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChannel4CheckBox;
}
/**
 * Return the CycleGroupComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getCycleGroupComboBox() {
	if (ivjCycleGroupComboBox == null) {
		try {
			ivjCycleGroupComboBox = new javax.swing.JComboBox();
			ivjCycleGroupComboBox.setName("CycleGroupComboBox");
			ivjCycleGroupComboBox.setPreferredSize(new java.awt.Dimension(200, 25));
			ivjCycleGroupComboBox.setEditable(true);
			ivjCycleGroupComboBox.setMinimumSize(new java.awt.Dimension(200, 25));
			// user code begin {1}
         
         try
         {
            String availableCycleGroups[] = DeviceMeterGroup.getDeviceCollectionGroups();
            for(int i=0;i<availableCycleGroups.length;i++)
               ivjCycleGroupComboBox.addItem( availableCycleGroups[i] );
         }
         catch(java.sql.SQLException e)
         {
            com.cannontech.clientutils.CTILogger.error( e.getMessage(), e );
         }
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCycleGroupComboBox;
}
/**
 * Return the CycleGroupLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getCycleGroupLabel() {
	if (ivjCycleGroupLabel == null) {
		try {
			ivjCycleGroupLabel = new javax.swing.JLabel();
			ivjCycleGroupLabel.setName("CycleGroupLabel");
			ivjCycleGroupLabel.setText("Data Collection Group:");
			ivjCycleGroupLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjCycleGroupLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjCycleGroupLabel.setPreferredSize(new java.awt.Dimension(140, 16));
			ivjCycleGroupLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjCycleGroupLabel.setMinimumSize(new java.awt.Dimension(140, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCycleGroupLabel;
}
/**
 * Return the DataCollectionPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getDataCollectionPanel() {
	if (ivjDataCollectionPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Data Collection");
			ivjDataCollectionPanel = new javax.swing.JPanel();
			ivjDataCollectionPanel.setName("DataCollectionPanel");
			ivjDataCollectionPanel.setBorder(ivjLocalBorder1);
			ivjDataCollectionPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsCycleGroupLabel = new java.awt.GridBagConstraints();
			constraintsCycleGroupLabel.gridx = 1; constraintsCycleGroupLabel.gridy = 2;
			constraintsCycleGroupLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsCycleGroupLabel.ipadx = 9;
			constraintsCycleGroupLabel.ipady = 2;
			constraintsCycleGroupLabel.insets = new java.awt.Insets(7, 15, 6, 1);
			getDataCollectionPanel().add(getCycleGroupLabel(), constraintsCycleGroupLabel);

			java.awt.GridBagConstraints constraintsAreaCodeGroupLabel = new java.awt.GridBagConstraints();
			constraintsAreaCodeGroupLabel.gridx = 1; constraintsAreaCodeGroupLabel.gridy = 3;
			constraintsAreaCodeGroupLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsAreaCodeGroupLabel.ipadx = 35;
			constraintsAreaCodeGroupLabel.ipady = 2;
			constraintsAreaCodeGroupLabel.insets = new java.awt.Insets(7, 15, 6, 1);
			getDataCollectionPanel().add(getAreaCodeGroupLabel(), constraintsAreaCodeGroupLabel);

			java.awt.GridBagConstraints constraintsCycleGroupComboBox = new java.awt.GridBagConstraints();
			constraintsCycleGroupComboBox.gridx = 2; constraintsCycleGroupComboBox.gridy = 2;
			constraintsCycleGroupComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsCycleGroupComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsCycleGroupComboBox.weightx = 1.0;
			constraintsCycleGroupComboBox.insets = new java.awt.Insets(3, 0, 3, 22);
			getDataCollectionPanel().add(getCycleGroupComboBox(), constraintsCycleGroupComboBox);

			java.awt.GridBagConstraints constraintsAreaCodeGroupComboBox = new java.awt.GridBagConstraints();
			constraintsAreaCodeGroupComboBox.gridx = 2; constraintsAreaCodeGroupComboBox.gridy = 3;
			constraintsAreaCodeGroupComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsAreaCodeGroupComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsAreaCodeGroupComboBox.weightx = 1.0;
			constraintsAreaCodeGroupComboBox.insets = new java.awt.Insets(3, 0, 3, 22);
			getDataCollectionPanel().add(getAreaCodeGroupComboBox(), constraintsAreaCodeGroupComboBox);

			java.awt.GridBagConstraints constraintsMeterNumberLabel = new java.awt.GridBagConstraints();
			constraintsMeterNumberLabel.gridx = 1; constraintsMeterNumberLabel.gridy = 1;
			constraintsMeterNumberLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMeterNumberLabel.ipadx = 54;
			constraintsMeterNumberLabel.ipady = 2;
			constraintsMeterNumberLabel.insets = new java.awt.Insets(8, 15, 3, 1);
			getDataCollectionPanel().add(getMeterNumberLabel(), constraintsMeterNumberLabel);

			java.awt.GridBagConstraints constraintsMeterNumberTextField = new java.awt.GridBagConstraints();
			constraintsMeterNumberTextField.gridx = 2; constraintsMeterNumberTextField.gridy = 1;
			constraintsMeterNumberTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsMeterNumberTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMeterNumberTextField.weightx = 1.0;
			constraintsMeterNumberTextField.ipadx = 196;
			constraintsMeterNumberTextField.insets = new java.awt.Insets(8, 0, 3, 22);
			getDataCollectionPanel().add(getMeterNumberTextField(), constraintsMeterNumberTextField);

			java.awt.GridBagConstraints constraintsJLabelBillingGroup = new java.awt.GridBagConstraints();
			constraintsJLabelBillingGroup.gridx = 1; constraintsJLabelBillingGroup.gridy = 4;
			constraintsJLabelBillingGroup.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelBillingGroup.ipadx = 9;
			constraintsJLabelBillingGroup.ipady = 2;
			constraintsJLabelBillingGroup.insets = new java.awt.Insets(7, 16, 23, 0);
			getDataCollectionPanel().add(getJLabelBillingGroup(), constraintsJLabelBillingGroup);

			java.awt.GridBagConstraints constraintsJComboBoxBillingGroup = new java.awt.GridBagConstraints();
			constraintsJComboBoxBillingGroup.gridx = 2; constraintsJComboBoxBillingGroup.gridy = 4;
			constraintsJComboBoxBillingGroup.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxBillingGroup.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxBillingGroup.weightx = 1.0;
			constraintsJComboBoxBillingGroup.insets = new java.awt.Insets(3, 1, 20, 21);
			getDataCollectionPanel().add(getJComboBoxBillingGroup(), constraintsJComboBoxBillingGroup);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDataCollectionPanel;
}
/**
 * Return the JComboBoxBillingGroup property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxBillingGroup() {
	if (ivjJComboBoxBillingGroup == null) {
		try {
			ivjJComboBoxBillingGroup = new javax.swing.JComboBox();
			ivjJComboBoxBillingGroup.setName("JComboBoxBillingGroup");
			ivjJComboBoxBillingGroup.setPreferredSize(new java.awt.Dimension(200, 25));
			ivjJComboBoxBillingGroup.setEditable(true);
			ivjJComboBoxBillingGroup.setMinimumSize(new java.awt.Dimension(200, 25));
			// user code begin {1}
         
         try
         {
            String avBillGrps[] = DeviceMeterGroup.getDeviceBillingGroups();
            for( int i = 0; i < avBillGrps.length; i++ )
               ivjJComboBoxBillingGroup.addItem( avBillGrps[i] );
         }
         catch(java.sql.SQLException e)
         {
            com.cannontech.clientutils.CTILogger.error( e.getMessage(), e );
         }
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxBillingGroup;
}
/**
 * Return the JComboBoxlVoltInterval property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxlVoltInterval() {
	if (ivjJComboBoxlVoltInterval == null) {
		try {
			ivjJComboBoxlVoltInterval = new javax.swing.JComboBox();
			ivjJComboBoxlVoltInterval.setName("JComboBoxlVoltInterval");
			ivjJComboBoxlVoltInterval.setPreferredSize(new java.awt.Dimension(133, 23));
			ivjJComboBoxlVoltInterval.setEnabled(true);
			ivjJComboBoxlVoltInterval.setMinimumSize(new java.awt.Dimension(133, 23));
			// user code begin {1}

			ivjJComboBoxlVoltInterval.addItem("15 second");
			ivjJComboBoxlVoltInterval.addItem("30 second");
			ivjJComboBoxlVoltInterval.addItem("45 second");
			ivjJComboBoxlVoltInterval.addItem("1 minute");
			ivjJComboBoxlVoltInterval.addItem("2 minute");
			ivjJComboBoxlVoltInterval.addItem("3 minute");
			ivjJComboBoxlVoltInterval.addItem("5 minute");
			ivjJComboBoxlVoltInterval.addItem("6 minute");
			ivjJComboBoxlVoltInterval.addItem("8 minute");
			ivjJComboBoxlVoltInterval.addItem("10 minute");
			ivjJComboBoxlVoltInterval.addItem("15 minute");
			ivjJComboBoxlVoltInterval.addItem("30 minute");
			ivjJComboBoxlVoltInterval.addItem("1 hour");

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxlVoltInterval;
}
/**
 * Return the JComboBoxlVoltRate property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxlVoltRate() {
	if (ivjJComboBoxlVoltRate == null) {
		try {
			ivjJComboBoxlVoltRate = new javax.swing.JComboBox();
			ivjJComboBoxlVoltRate.setName("JComboBoxlVoltRate");
			ivjJComboBoxlVoltRate.setPreferredSize(new java.awt.Dimension(133, 23));
			ivjJComboBoxlVoltRate.setEnabled(true);
			ivjJComboBoxlVoltRate.setMinimumSize(new java.awt.Dimension(133, 23));
			// user code begin {1}
			
			ivjJComboBoxlVoltRate.addItem("1 minute");
			ivjJComboBoxlVoltRate.addItem("2 minute");
			ivjJComboBoxlVoltRate.addItem("3 minute");
			ivjJComboBoxlVoltRate.addItem("5 minute");
			ivjJComboBoxlVoltRate.addItem("10 minute");
			ivjJComboBoxlVoltRate.addItem("15 minute");
			ivjJComboBoxlVoltRate.addItem("30 minute");
			ivjJComboBoxlVoltRate.addItem("1 hour");

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxlVoltRate;
}
/**
 * Return the JLabelBillingGroup property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelBillingGroup() {
	if (ivjJLabelBillingGroup == null) {
		try {
			ivjJLabelBillingGroup = new javax.swing.JLabel();
			ivjJLabelBillingGroup.setName("JLabelBillingGroup");
			ivjJLabelBillingGroup.setText("Billing Group:");
			ivjJLabelBillingGroup.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjJLabelBillingGroup.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelBillingGroup.setPreferredSize(new java.awt.Dimension(140, 16));
			ivjJLabelBillingGroup.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelBillingGroup.setMinimumSize(new java.awt.Dimension(140, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelBillingGroup;
}
/**
 * Return the JLabelVoltDmdRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelVoltDmdRate() {
	if (ivjJLabelVoltDmdRate == null) {
		try {
			ivjJLabelVoltDmdRate = new javax.swing.JLabel();
			ivjJLabelVoltDmdRate.setName("JLabelVoltDmdRate");
			ivjJLabelVoltDmdRate.setText("Voltage Profile Interval: ");
			ivjJLabelVoltDmdRate.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjJLabelVoltDmdRate.setPreferredSize(new java.awt.Dimension(175, 16));
			ivjJLabelVoltDmdRate.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelVoltDmdRate.setEnabled(true);
			ivjJLabelVoltDmdRate.setMinimumSize(new java.awt.Dimension(150, 16));
			
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelVoltDmdRate;
}
/**
 * Return the JLabelVoltIntervalDmdRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelVoltIntervalDmdRate() {
	if (ivjJLabelVoltIntervalDmdRate == null) {
		try {
			ivjJLabelVoltIntervalDmdRate = new javax.swing.JLabel();
			ivjJLabelVoltIntervalDmdRate.setName("JLabelVoltIntervalDmdRate");
			ivjJLabelVoltIntervalDmdRate.setText("Voltage Averaging Interval: ");
			ivjJLabelVoltIntervalDmdRate.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjJLabelVoltIntervalDmdRate.setPreferredSize(new java.awt.Dimension(175, 16));
			ivjJLabelVoltIntervalDmdRate.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelVoltIntervalDmdRate.setEnabled(true);
			ivjJLabelVoltIntervalDmdRate.setMinimumSize(new java.awt.Dimension(150, 16));
			
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelVoltIntervalDmdRate;
}
/**
 * Return the DemandIntervalComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getLastIntervalDemandRateComboBox() {
	if (ivjLastIntervalDemandRateComboBox == null) {
		try {
			ivjLastIntervalDemandRateComboBox = new javax.swing.JComboBox();
			ivjLastIntervalDemandRateComboBox.setName("LastIntervalDemandRateComboBox");
			ivjLastIntervalDemandRateComboBox.setEnabled(true);
			// user code begin {1}
         
         ivjLastIntervalDemandRateComboBox.addItem("1 minute");
         ivjLastIntervalDemandRateComboBox.addItem("2 minute");
         ivjLastIntervalDemandRateComboBox.addItem("3 minute");
         ivjLastIntervalDemandRateComboBox.addItem("5 minute");
         ivjLastIntervalDemandRateComboBox.addItem("10 minute");
         ivjLastIntervalDemandRateComboBox.addItem("15 minute");
         ivjLastIntervalDemandRateComboBox.addItem("30 minute");
         ivjLastIntervalDemandRateComboBox.addItem("1 hour");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLastIntervalDemandRateComboBox;
}
/**
 * Return the DemandIntervalLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getLastIntervalDemandRateLabel() {
	if (ivjLastIntervalDemandRateLabel == null) {
		try {
			ivjLastIntervalDemandRateLabel = new javax.swing.JLabel();
			ivjLastIntervalDemandRateLabel.setName("LastIntervalDemandRateLabel");
			ivjLastIntervalDemandRateLabel.setText("Last Interval Demand Rate:");
			ivjLastIntervalDemandRateLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjLastIntervalDemandRateLabel.setPreferredSize(new java.awt.Dimension(175, 16));
			ivjLastIntervalDemandRateLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjLastIntervalDemandRateLabel.setEnabled(true);
			ivjLastIntervalDemandRateLabel.setMinimumSize(new java.awt.Dimension(150, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLastIntervalDemandRateLabel;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getLoadProfileCollectionPanel() {
	if (ivjLoadProfileCollectionPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Load Profile Collection");
			ivjLoadProfileCollectionPanel = new javax.swing.JPanel();
			ivjLoadProfileCollectionPanel.setName("LoadProfileCollectionPanel");
			ivjLoadProfileCollectionPanel.setBorder(ivjLocalBorder);
			ivjLoadProfileCollectionPanel.setLayout(new java.awt.GridBagLayout());
			ivjLoadProfileCollectionPanel.setPreferredSize(new java.awt.Dimension(387, 142));
			ivjLoadProfileCollectionPanel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjLoadProfileCollectionPanel.setMinimumSize(new java.awt.Dimension(387, 142));

			java.awt.GridBagConstraints constraintsChannel1CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel1CheckBox.gridx = 1; constraintsChannel1CheckBox.gridy = 3;
			constraintsChannel1CheckBox.insets = new java.awt.Insets(1, 16, 2, 27);
			getLoadProfileCollectionPanel().add(getChannel1CheckBox(), constraintsChannel1CheckBox);

			java.awt.GridBagConstraints constraintsChannel2CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel2CheckBox.gridx = 2; constraintsChannel2CheckBox.gridy = 3;
			constraintsChannel2CheckBox.insets = new java.awt.Insets(1, 6, 2, 38);
			getLoadProfileCollectionPanel().add(getChannel2CheckBox(), constraintsChannel2CheckBox);

			java.awt.GridBagConstraints constraintsChannel3CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel3CheckBox.gridx = 1; constraintsChannel3CheckBox.gridy = 4;
			constraintsChannel3CheckBox.insets = new java.awt.Insets(2, 16, 15, 27);
			getLoadProfileCollectionPanel().add(getChannel3CheckBox(), constraintsChannel3CheckBox);

			java.awt.GridBagConstraints constraintsChannel4CheckBox = new java.awt.GridBagConstraints();
			constraintsChannel4CheckBox.gridx = 2; constraintsChannel4CheckBox.gridy = 4;
			constraintsChannel4CheckBox.insets = new java.awt.Insets(2, 6, 15, 38);
			getLoadProfileCollectionPanel().add(getChannel4CheckBox(), constraintsChannel4CheckBox);

			java.awt.GridBagConstraints constraintsLoadProfileDemandRateLabel = new java.awt.GridBagConstraints();
			constraintsLoadProfileDemandRateLabel.gridx = 1; constraintsLoadProfileDemandRateLabel.gridy = 1;
			constraintsLoadProfileDemandRateLabel.ipadx = 25;
			constraintsLoadProfileDemandRateLabel.insets = new java.awt.Insets(17, 14, 7, 4);
			getLoadProfileCollectionPanel().add(getLoadProfileDemandRateLabel(), constraintsLoadProfileDemandRateLabel);

			java.awt.GridBagConstraints constraintsLoadProfileDemandRateComboBox = new java.awt.GridBagConstraints();
			constraintsLoadProfileDemandRateComboBox.gridx = 2; constraintsLoadProfileDemandRateComboBox.gridy = 1;
			constraintsLoadProfileDemandRateComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsLoadProfileDemandRateComboBox.weightx = 1.0;
			constraintsLoadProfileDemandRateComboBox.ipadx = -10;
			constraintsLoadProfileDemandRateComboBox.insets = new java.awt.Insets(16, 4, 1, 67);
			getLoadProfileCollectionPanel().add(getLoadProfileDemandRateComboBox(), constraintsLoadProfileDemandRateComboBox);

			java.awt.GridBagConstraints constraintsJLabelVoltDmdRate = new java.awt.GridBagConstraints();
			constraintsJLabelVoltDmdRate.gridx = 1; constraintsJLabelVoltDmdRate.gridy = 2;
			constraintsJLabelVoltDmdRate.ipadx = 25;
			constraintsJLabelVoltDmdRate.ipady = 6;
			constraintsJLabelVoltDmdRate.insets = new java.awt.Insets(2, 14, 4, 4);
			getLoadProfileCollectionPanel().add(getJLabelVoltDmdRate(), constraintsJLabelVoltDmdRate);

			java.awt.GridBagConstraints constraintsJComboBoxlVoltRate = new java.awt.GridBagConstraints();
			constraintsJComboBoxlVoltRate.gridx = 2; constraintsJComboBoxlVoltRate.gridy = 2;
			constraintsJComboBoxlVoltRate.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxlVoltRate.weightx = 1.0;
			constraintsJComboBoxlVoltRate.ipadx = -10;
			constraintsJComboBoxlVoltRate.insets = new java.awt.Insets(4, 4, 1, 67);
			getLoadProfileCollectionPanel().add(getJComboBoxlVoltRate(), constraintsJComboBoxlVoltRate);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadProfileCollectionPanel;
}
/**
 * Return the LoadProfileDemandRateComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getLoadProfileDemandRateComboBox() {
	if (ivjLoadProfileDemandRateComboBox == null) {
		try {
			ivjLoadProfileDemandRateComboBox = new javax.swing.JComboBox();
			ivjLoadProfileDemandRateComboBox.setName("LoadProfileDemandRateComboBox");
			ivjLoadProfileDemandRateComboBox.setPreferredSize(new java.awt.Dimension(133, 23));
			ivjLoadProfileDemandRateComboBox.setEnabled(true);
			ivjLoadProfileDemandRateComboBox.setMinimumSize(new java.awt.Dimension(133, 23));
			// user code begin {1}
         
         ivjLoadProfileDemandRateComboBox.addItem("5 minute");
         ivjLoadProfileDemandRateComboBox.addItem("15 minute");
         ivjLoadProfileDemandRateComboBox.addItem("30 minute");
         ivjLoadProfileDemandRateComboBox.addItem("1 hour");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadProfileDemandRateComboBox;
}
/**
 * Return the LoadProfileDemandRateLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getLoadProfileDemandRateLabel() {
	if (ivjLoadProfileDemandRateLabel == null) {
		try {
			ivjLoadProfileDemandRateLabel = new javax.swing.JLabel();
			ivjLoadProfileDemandRateLabel.setName("LoadProfileDemandRateLabel");
			ivjLoadProfileDemandRateLabel.setText("Load Profile Demand Rate:");
			ivjLoadProfileDemandRateLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjLoadProfileDemandRateLabel.setPreferredSize(new java.awt.Dimension(175, 16));
			ivjLoadProfileDemandRateLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjLoadProfileDemandRateLabel.setEnabled(true);
			ivjLoadProfileDemandRateLabel.setMinimumSize(new java.awt.Dimension(150, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadProfileDemandRateLabel;
}
/**
 * Return the MeterNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMeterNumberLabel() {
	if (ivjMeterNumberLabel == null) {
		try {
			ivjMeterNumberLabel = new javax.swing.JLabel();
			ivjMeterNumberLabel.setName("MeterNumberLabel");
			ivjMeterNumberLabel.setText("Meter Number:");
			ivjMeterNumberLabel.setMaximumSize(new java.awt.Dimension(200, 16));
			ivjMeterNumberLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjMeterNumberLabel.setPreferredSize(new java.awt.Dimension(100, 16));
			ivjMeterNumberLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjMeterNumberLabel.setMinimumSize(new java.awt.Dimension(95, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMeterNumberLabel;
}
/**
 * Return the MeterNumberTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getMeterNumberTextField()
{
    if (ivjMeterNumberTextField == null)
    {
        try
        {
            ivjMeterNumberTextField = new javax.swing.JTextField();
            ivjMeterNumberTextField.setName("MeterNumberTextField");
            // user code begin {1}
            ivjMeterNumberTextField.setDocument(
                new com.cannontech.common.gui.util.TextFieldDocument(com.cannontech.common.gui.util.TextFieldDocument.MAX_METER_NUMBER_LENGTH));

            // user code end
        }
        catch (java.lang.Throwable ivjExc)
        {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    }
    return ivjMeterNumberTextField;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) 
{

	//The default object is either a MCT or a IEDmeter
	if( val instanceof MCTBase || val instanceof IEDMeter )
	{
		DeviceLoadProfile dlp = null;
		
		if( val instanceof MCTBase )
		{
			dlp = ((MCTBase) val).getDeviceLoadProfile();
		}		
		else if( val instanceof IEDMeter )
		{
			dlp = ((IEDMeter) val).getDeviceLoadProfile();
		}
				
		dlp.setLastIntervalDemandRate(
         CtiUtilities.getIntervalComboBoxSecondsValue(getLastIntervalDemandRateComboBox()) );

		if( getLoadProfileCollectionPanel().isVisible() )
		{
         dlp.setLoadProfileDemandRate(
            CtiUtilities.getIntervalComboBoxSecondsValue(getLoadProfileDemandRateComboBox()) );

			StringBuffer loadProfileCollection = new StringBuffer();
			if( getChannel1CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");
				
			if( getChannel2CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");
            

			if( getChannel3CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");
				
			if( getChannel4CheckBox().isSelected() )
				loadProfileCollection.append("Y");
			else
				loadProfileCollection.append("N");

			dlp.setLoadProfileCollection(loadProfileCollection.toString());

			dlp.setVoltageDmdInterval(
				CtiUtilities.getIntervalComboBoxSecondsValue(getJComboBoxlVoltInterval()) );

			dlp.setVoltageDmdRate(
				CtiUtilities.getIntervalComboBoxSecondsValue(getJComboBoxlVoltRate()) );

		}
		
	}


	//handle the devicemetergroup data below
	DeviceMeterGroup dmg = 
			((IDeviceMeterGroup)val).getDeviceMeterGroup();

	String cycleGroup = getCycleGroupComboBox().getSelectedItem().toString();
	String areaCodeGroup = getAreaCodeGroupComboBox().getSelectedItem().toString();
	String meterNumber = getMeterNumberTextField().getText();
   String billingGroup = getJComboBoxBillingGroup().getSelectedItem().toString();
   
   if( cycleGroup != null && cycleGroup.length() > 0 )
   	dmg.setCollectionGroup( cycleGroup );
      
   if( areaCodeGroup != null && areaCodeGroup.length() > 0 )
   	dmg.setTestCollectionGroup( areaCodeGroup );
      
   if( meterNumber != null && meterNumber.length() > 0 )
   	dmg.setMeterNumber( meterNumber );

   if( billingGroup != null && billingGroup.length() > 0 )
      dmg.setBillingGroup( billingGroup );
	
	return val;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	// com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getLastIntervalDemandRateComboBox().addItemListener(ivjEventHandler);
	getCycleGroupComboBox().addActionListener(ivjEventHandler);
	getAreaCodeGroupComboBox().addActionListener(ivjEventHandler);
	getChannel2CheckBox().addActionListener(ivjEventHandler);
	getChannel1CheckBox().addActionListener(ivjEventHandler);
	getChannel3CheckBox().addActionListener(ivjEventHandler);
	getChannel4CheckBox().addActionListener(ivjEventHandler);
	getLoadProfileDemandRateComboBox().addActionListener(ivjEventHandler);
	getCycleGroupComboBox().addKeyListener(ivjEventHandler);
	getAreaCodeGroupComboBox().addKeyListener(ivjEventHandler);
	getMeterNumberTextField().addCaretListener(ivjEventHandler);
	getJComboBoxBillingGroup().addActionListener(ivjEventHandler);
	getJComboBoxlVoltInterval().addActionListener(ivjEventHandler);
	getJComboBoxlVoltRate().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DeviceMeterGroupEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(411, 375);

		java.awt.GridBagConstraints constraintsLastIntervalDemandRateComboBox = new java.awt.GridBagConstraints();
		constraintsLastIntervalDemandRateComboBox.gridx = 2; constraintsLastIntervalDemandRateComboBox.gridy = 2;
		constraintsLastIntervalDemandRateComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsLastIntervalDemandRateComboBox.weightx = 1.0;
		constraintsLastIntervalDemandRateComboBox.ipadx = 7;
		constraintsLastIntervalDemandRateComboBox.insets = new java.awt.Insets(4, 2, 2, 81);
		add(getLastIntervalDemandRateComboBox(), constraintsLastIntervalDemandRateComboBox);

		java.awt.GridBagConstraints constraintsLastIntervalDemandRateLabel = new java.awt.GridBagConstraints();
		constraintsLastIntervalDemandRateLabel.gridx = 1; constraintsLastIntervalDemandRateLabel.gridy = 2;
		constraintsLastIntervalDemandRateLabel.ipadx = 25;
		constraintsLastIntervalDemandRateLabel.insets = new java.awt.Insets(7, 17, 6, 3);
		add(getLastIntervalDemandRateLabel(), constraintsLastIntervalDemandRateLabel);

		java.awt.GridBagConstraints constraintsLoadProfileCollectionPanel = new java.awt.GridBagConstraints();
		constraintsLoadProfileCollectionPanel.gridx = 1; constraintsLoadProfileCollectionPanel.gridy = 4;
		constraintsLoadProfileCollectionPanel.gridwidth = 2;
		constraintsLoadProfileCollectionPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsLoadProfileCollectionPanel.weightx = 1.0;
		constraintsLoadProfileCollectionPanel.weighty = 1.0;
		constraintsLoadProfileCollectionPanel.insets = new java.awt.Insets(5, 12, 10, 12);
		add(getLoadProfileCollectionPanel(), constraintsLoadProfileCollectionPanel);

		java.awt.GridBagConstraints constraintsDataCollectionPanel = new java.awt.GridBagConstraints();
		constraintsDataCollectionPanel.gridx = 1; constraintsDataCollectionPanel.gridy = 1;
		constraintsDataCollectionPanel.gridwidth = 2;
		constraintsDataCollectionPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsDataCollectionPanel.weightx = 1.0;
		constraintsDataCollectionPanel.weighty = 1.0;
		constraintsDataCollectionPanel.ipadx = -10;
		constraintsDataCollectionPanel.ipady = -17;
		constraintsDataCollectionPanel.insets = new java.awt.Insets(6, 12, 3, 12);
		add(getDataCollectionPanel(), constraintsDataCollectionPanel);

		java.awt.GridBagConstraints constraintsJLabelVoltIntervalDmdRate = new java.awt.GridBagConstraints();
		constraintsJLabelVoltIntervalDmdRate.gridx = 1; constraintsJLabelVoltIntervalDmdRate.gridy = 3;
		constraintsJLabelVoltIntervalDmdRate.ipadx = 26;
		constraintsJLabelVoltIntervalDmdRate.ipady = 4;
		constraintsJLabelVoltIntervalDmdRate.insets = new java.awt.Insets(4, 17, 6, 2);
		add(getJLabelVoltIntervalDmdRate(), constraintsJLabelVoltIntervalDmdRate);

		java.awt.GridBagConstraints constraintsJComboBoxlVoltInterval = new java.awt.GridBagConstraints();
		constraintsJComboBoxlVoltInterval.gridx = 2; constraintsJComboBoxlVoltInterval.gridy = 3;
		constraintsJComboBoxlVoltInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxlVoltInterval.weightx = 1.0;
		constraintsJComboBoxlVoltInterval.insets = new java.awt.Insets(3, 2, 4, 81);
		add(getJComboBoxlVoltInterval(), constraintsJComboBoxlVoltInterval);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
/*   if( getJCheckBoxScanWindow().isSelected() 
       && (getJTextFieldClose().getTimeTotalSeconds().intValue()
           == getJTextFieldOpen().getTimeTotalSeconds().intValue()) )
   {
      setErrorString("The Device Window open and close values can not be equal");
      return false;
   }
*/
	/*if(is410 && getMeterNumberTextField().getText().length() < 7)
	{
	   setErrorString("An MCT410 requires a meter number with seven digits");
	   return false;
	}*/

   return true;
}
/**
 * Method to handle events for the ItemListener interface.
 * @param e java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void itemStateChanged(java.awt.event.ItemEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getLastIntervalDemandRateComboBox()) 
		connEtoC4(e);
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyPressed(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyReleased(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyTyped(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getCycleGroupComboBox()) 
		connEtoC10(e);
	if (e.getSource() == getAreaCodeGroupComboBox()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame;
		try {
			Class aFrameClass = Class.forName("com.ibm.uvm.abt.edit.TestFrame");
			frame = (java.awt.Frame)aFrameClass.newInstance();
		} catch (java.lang.Throwable ivjExc) {
			frame = new java.awt.Frame();
		}
		DeviceMeterGroupEditorPanel aDeviceMeterGroupEditorPanel;
		aDeviceMeterGroupEditorPanel = new DeviceMeterGroupEditorPanel();
		frame.add("Center", aDeviceMeterGroupEditorPanel);
		frame.setSize(aDeviceMeterGroupEditorPanel.getSize());
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val) 
{
	int deviceType = PAOGroups.getDeviceType( ((DeviceBase)val).getPAOType() );

	getLastIntervalDemandRateLabel().setVisible( val instanceof MCTBase );
	getLastIntervalDemandRateComboBox().setVisible( val instanceof MCTBase );
	getLoadProfileCollectionPanel().setVisible( val instanceof MCTBase );
		
	//are we a voltage channel?
	getJComboBoxlVoltInterval().setVisible( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) );
	getJComboBoxlVoltRate().setVisible( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) );		
	getJLabelVoltDmdRate().setVisible( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) );
	getJLabelVoltIntervalDmdRate().setVisible( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) );

	//The default object is either a MCT or a IEDmeter
	if( val instanceof MCTBase )
	{
		getLastIntervalDemandRateLabel().setVisible(true);
		getLastIntervalDemandRateComboBox().setVisible(true);
		getLoadProfileCollectionPanel().setVisible(true);


		DeviceLoadProfile dlp = ((MCTBase)val).getDeviceLoadProfile();

		String loadProfileCollection = dlp.getLoadProfileCollection();

      	CtiUtilities.setIntervalComboBoxSelectedItem(
      		getLastIntervalDemandRateComboBox(), dlp.getLastIntervalDemandRate().intValue() );

		CtiUtilities.setIntervalComboBoxSelectedItem(
			getJComboBoxlVoltInterval(), dlp.getVoltageDmdInterval().intValue() );

		if( deviceType == PAOGroups.DCT_501 
			 || deviceType == PAOGroups.LMT_2 )
		{
			//the last interval demand rate can not be edited for DCT_501 & LMT-2
			getLastIntervalDemandRateComboBox().setVisible(false);
			getLastIntervalDemandRateLabel().setVisible(false);
		}
		
		if(deviceType == PAOGroups.MCT410IL
			|| deviceType == PAOGroups.MCT410CL
			|| deviceType == PAOGroups.MCT470)
		{
			getChannel2CheckBox().setEnabled(false);
			getChannel3CheckBox().setEnabled(false);
			
			getJLabelVoltDmdRate().setText("Voltage Profile Demand Rate: ");
			getJComboBoxlVoltRate().removeAllItems();
			getJComboBoxlVoltRate().addItem("5 minute");
			getJComboBoxlVoltRate().addItem("15 minute");
			getJComboBoxlVoltRate().addItem("30 minute");
			getJComboBoxlVoltRate().addItem("1 hour");
			
			CtiUtilities.setCheckBoxState(getChannel1CheckBox(),new Character(loadProfileCollection.charAt(0)));
		}
		
		CtiUtilities.setIntervalComboBoxSelectedItem(
			getJComboBoxlVoltRate(), dlp.getVoltageDmdRate().intValue() );
      	
      	CtiUtilities.setIntervalComboBoxSelectedItem(
            getLoadProfileDemandRateComboBox(), dlp.getLoadProfileDemandRate().intValue() );


		if( DeviceTypesFuncs.isLoadProfile1Channel(deviceType) )
		{
			CtiUtilities.setCheckBoxState(getChannel1CheckBox(),new Character(loadProfileCollection.charAt(0)));
			getChannel2CheckBox().setVisible(false);
			getChannel3CheckBox().setVisible(false);
			getChannel4CheckBox().setVisible(false);
		}
      else if( DeviceTypesFuncs.isLoadProfile3Channel(deviceType) )
      {
         CtiUtilities.setCheckBoxState(getChannel1CheckBox(), new Character(loadProfileCollection.charAt(0)));
         CtiUtilities.setCheckBoxState(getChannel2CheckBox(), new Character(loadProfileCollection.charAt(1)));
         CtiUtilities.setCheckBoxState(getChannel3CheckBox(), new Character(loadProfileCollection.charAt(2)));
         getChannel4CheckBox().setVisible(false);
      }
		else if( DeviceTypesFuncs.isLoadProfile4Channel(deviceType) )
		{
			CtiUtilities.setCheckBoxState(getChannel1CheckBox(), new Character(loadProfileCollection.charAt(0)));
			CtiUtilities.setCheckBoxState(getChannel2CheckBox(), new Character(loadProfileCollection.charAt(1)));
			CtiUtilities.setCheckBoxState(getChannel3CheckBox(), new Character(loadProfileCollection.charAt(2)));
			CtiUtilities.setCheckBoxState(getChannel4CheckBox(), new Character(loadProfileCollection.charAt(3)));
			
			if( DeviceTypesFuncs.isLoadProfileVoltage(deviceType) )
			{
				getChannel4CheckBox().setText("Channel #4 (Volts)");
			}
		}
	   else //must not have load profile capabilities
      {
         //setting invisible lays out the JPanel in a Funny way, just remove the comps
         getLoadProfileCollectionPanel().removeAll();
         getLoadProfileCollectionPanel().setBorder( null );
      }

	}



	//handle the DeviceMeterGroup data below
	DeviceMeterGroup dmg = 
			((IDeviceMeterGroup)val).getDeviceMeterGroup();
	
	getMeterNumberTextField().setText( dmg.getMeterNumber() );
	getCycleGroupComboBox().setSelectedItem( dmg.getCollectionGroup() );
	getAreaCodeGroupComboBox().setSelectedItem( dmg.getTestCollectionGroup() );
   getJComboBoxBillingGroup().setSelectedItem( dmg.getBillingGroup() );
}

}

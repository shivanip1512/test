package com.cannontech.dbeditor.editor.device;

import com.cannontech.common.gui.util.AdvancedPropertiesDialog;
import com.cannontech.common.gui.util.TextFieldDocument;
import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.data.device.*;
import com.cannontech.database.data.config.ConfigTwoWay;
import com.cannontech.database.data.pao.DeviceClasses;
import com.cannontech.database.data.pao.PAOGroups;
import com.cannontech.database.db.device.DeviceCarrierSettings;
import com.cannontech.database.db.device.DeviceDialupSettings;
import com.cannontech.database.db.device.DeviceDirectCommSettings;
import com.cannontech.database.db.device.DeviceIDLCRemote;


public class DeviceBaseEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener, java.awt.event.ActionListener, javax.swing.event.CaretListener {
	private int deviceType = -1;
	private int paoID = -1;
	private DeviceAdvancedDialupEditorPanel advancedPanel = null;
	private javax.swing.JCheckBox ivjControlInhibitCheckBox = null;
	private javax.swing.JCheckBox ivjDisableFlagCheckBox = null;
	private javax.swing.JLabel ivjNameLabel = null;
	private javax.swing.JTextField ivjNameTextField = null;
	private javax.swing.JLabel ivjTypeLabel = null;
	private javax.swing.JLabel ivjPhysicalAddressLabel = null;
	private javax.swing.JTextField ivjPhysicalAddressTextField = null;
	private javax.swing.JLabel ivjTypeTextField = null;
	private javax.swing.JPanel ivjIdentificationPanel = null;
	private javax.swing.JComboBox ivjRouteComboBox = null;
	private javax.swing.JPanel ivjDialupSettingsPanel = null;
	private javax.swing.JLabel ivjPhoneNumberLabel = null;
	private javax.swing.JTextField ivjPhoneNumberTextField = null;
	private javax.swing.JComboBox ivjPortComboBox = null;
	private javax.swing.JLabel ivjPortLabel = null;
	private javax.swing.JLabel ivjPostCommWaitLabel = null;
	private com.klg.jclass.field.JCSpinField ivjPostCommWaitSpinner = null;
	private javax.swing.JLabel ivjWaitLabel = null;
	private javax.swing.JLabel ivjRouteLabel = null;
	private javax.swing.JLabel ivjPasswordLabel = null;
	private javax.swing.JTextField ivjPasswordTextField = null;
	private javax.swing.JComboBox ivjSlaveAddressComboBox = null;
	private javax.swing.JLabel ivjSlaveAddressLabel = null;
	private javax.swing.JPanel ivjCommunicationPanel = null;
	private javax.swing.JButton ivjJButtonAdvanced = null;
	private javax.swing.JComboBox ivjJComboBoxAmpUseType = null;
	private javax.swing.JLabel ivjJLabelCCUAmpUseType = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JLabel ivjConfigLabel = null;
	private javax.swing.JComboBox ivjConfigComboBox = null;
	private javax.swing.JComboBox ivjTOUComboBox = null;
	private javax.swing.JLabel ivjTOULabel = null;

class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == DeviceBaseEditorPanel.this.getDisableFlagCheckBox()) 
				connEtoC3(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getControlInhibitCheckBox()) 
				connEtoC5(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getRouteComboBox()) 
				connEtoC4(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPortComboBox()) 
				connEtoC6(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getSlaveAddressComboBox()) 
				connEtoC14(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getJButtonAdvanced()) 
				connEtoC7(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getJComboBoxAmpUseType()) 
				connEtoC9(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getConfigComboBox()) 
				connEtoC10(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getTOUComboBox()) 
				connEtoC11(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == DeviceBaseEditorPanel.this.getNameTextField()) 
				connEtoC1(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPhysicalAddressTextField()) 
				connEtoC2(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPhoneNumberTextField()) 
				connEtoC8(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPasswordTextField()) 
				connEtoC13(e);
		};
	};
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public DeviceBaseEditorPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getDisableFlagCheckBox()) 
		connEtoC3(e);
	if (e.getSource() == getControlInhibitCheckBox()) 
		connEtoC5(e);
	if (e.getSource() == getRouteComboBox()) 
		connEtoC4(e);
	if (e.getSource() == getPortComboBox()) 
		connEtoC6(e);
	if (e.getSource() == getSlaveAddressComboBox()) 
		connEtoC14(e);
	if (e.getSource() == getJButtonAdvanced()) 
		connEtoC7(e);
	if (e.getSource() == getJComboBoxAmpUseType()) 
		connEtoC9(e);
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}	
	// user code end
	if (e.getSource() == getNameTextField()) 
		connEtoC1(e);
	if (e.getSource() == getPhysicalAddressTextField()) 
		connEtoC2(e);
	if (e.getSource() == getPhoneNumberTextField()) 
		connEtoC8(e);
	if (e.getSource() == getPasswordTextField()) 
		connEtoC13(e);
	// user code begin {2}

	if( e.getSource() instanceof com.cannontech.common.gui.util.JTextFieldComboEditor )
		fireInputUpdate();

	// user code end
}
//verify that there are no duplicate addresses for any CCUs or RTUs on a dedicated Comm Channel
private boolean checkForDuplicateAddresses( int address, int portID )
{
	try
	{
		String[] devices = DeviceIDLCRemote.isAddressUnique( address, new Integer(paoID), portID );

		if( devices != null )
		{
			String devStr = new String();
			for( int i = 0; i < devices.length; i++ )
				devStr += "          " + devices[i] + "\n";
			 	  
			javax.swing.JOptionPane.showMessageDialog(
				this, 
				"The address '" + address + "' is already in use by the following CCUs or RTUs: \n" + devStr + 
				"\nCCUs and/or RTUs cannot have duplicate addresses on a dedicated comm channel.",
				"Address Already Used",
				javax.swing.JOptionPane.WARNING_MESSAGE );

			setErrorString(null);
			return false;
		}
		
	}
	
	catch( java.sql.SQLException sq )
	{
		com.cannontech.clientutils.CTILogger.error( sq.getMessage(), sq );
		return false;
	}

	return true;
}
/**
 * Insert the method's description here.
 * Creation date: (4/30/2002 1:16:35 PM)
 */
private boolean checkMCTAddresses( int address )
{
	try
	{
		String[] devices = DeviceCarrierSettings.isAddressUnique( address, new Integer(paoID) );

		if( devices != null )
		{
			String devStr = new String();
			for( int i = 0; i < devices.length; i++ )
				devStr += "          " + devices[i] + "\n";

			int res = javax.swing.JOptionPane.showConfirmDialog(
							this, 
							"The address '" + address + "' is already used by the following devices,\n" + 
							"are you sure you want to use it again?\n" +
							devStr,
							"Address Already Used",
							javax.swing.JOptionPane.YES_NO_OPTION,
							javax.swing.JOptionPane.WARNING_MESSAGE );

			if( res == javax.swing.JOptionPane.NO_OPTION )
			{
				setErrorString(null);
				return false;
			}
			

		}
		
	}
	catch( java.sql.SQLException sq )
	{
		com.cannontech.clientutils.CTILogger.error( sq.getMessage(), sq );
		return false;
	}

	return true;
}
/**
 * Comment
 */
public void configComboBox_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	this.fireInputUpdate();
	return;
}
/**
 * connEtoC1:  (NameTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (ConfigComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.configComboBox_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC11:  (TOUComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC13:  (PasswordTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC14:  (SlaveAddressComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (PhysicalAddressTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (DisableFlagCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (RouteComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (ControlInhibitCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (PortComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		getDialupSettingsPanel().setVisible(
			com.cannontech.database.data.pao.PAOGroups.isDialupPort( ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem()).getType()) );
		
		revalidate();
		repaint();
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JButtonAdvanced.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.jButtonAdvanced_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonAdvanced_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (PhoneNumberTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC9:  (JComboBoxAmpUseType.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 4:29:58 PM)
 * @return com.cannontech.dbeditor.editor.device.DeviceAdvancedDialupEditorPanel
 */
private DeviceAdvancedDialupEditorPanel getAdvancedPanel() 
{
	if( advancedPanel == null )
		advancedPanel = new DeviceAdvancedDialupEditorPanel();

	return advancedPanel;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G29ECBBB1GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8DD8D45719BFC9C9CA92B6A509E9CCCA931210063626B5DD3221AD5952AD5D1A06B6F6E3B634258D5D352D7F562434219B37CB6A858645EF9CB192819D9195139179D29181C15020C198E5C0D492991881C60719F1E654B1A57AFF4FB977BD774E1DBBB3E092EBFD1E631D73BB6FFB5E0F73FD6EBD8721F0E3CCDEF6CE21A0E46789623FBD5902107C0CA0BC10595408D83E20558832FF1BA02C969A
	ED84AC02344CC42D26C0C82A4B07389E62650FEAB56B60779A617BF5739F019F0164C0DA4E8F7447034B7956CA143318466F5E379C1EABA1D481E60490A39079DF59D7A462DE082F94FF13101DA388035904E64929A299BED7242B03348E881A9CC2737DFDA5E2FA9CE004A6891EF332996DFCF8AE215A5D52D0AF528D5C95A7E47E30ABE78511A54B9FC3E78E63F50ACF1D701F549139420237DB6159E8B8B75ABC6C982F9CB6596D8E3B47B2BCD6E99E32182D9E072BD2FC18AD972D43160606F67ABCE0F2DB8E
	52840349EE31C19E69D4771D2772E93E20BB44ED3984FB7C9471D7B97CEE04E04CC57DFF3222D154EF5A39B8A17D5156007A4F4CE5FA4F4915744F4F3AA9AFDCC372FF15168761AB04F8A784264B6EC654E51686F5F9200B508AF9DACD91042ABC44CD5D846F0078A084EF9E6A58348DF56C7F5B5342022173B92B8268981547F4CB4813F48CCF3DBB67ADDAE78E9510F24FA4F297E9B5FA888688CE88D1900AE9DD4DDE75B6BCDB07BCED0E71F1073D5569BCE0B33B0EBA4C969B7CEEE8009491BBEE99F6384C02
	406AE35DA93D0ABE9862967956C59218EDA7842CBFB30EFFCD70F8C6F372D4EC0BFF511013A866B1FB11E4DB55E262B777E962378C40899F31036137D15C33D842D9D9BDC16B820947C3DAD4BE7A39FFA56A5229F9C4A828F667ACD651E57A3F0D655816B09D4217C83AB09F6B344447B381CF01B097C296041225D06F16220F5FDBD59B4A4707217E3B6CA6DB4F05A1274965B9F041EAB3DBDC222FB377857335DAE0FCB90DD365E3FE092B1517D15ABF3BD47D1296F7A227FF29584617CAFEE1327785149D3554
	3FEE2C64E53812360958252C8CF3B9DEC471F8994E4AB60636AD92CF06340AE5503EA87D8E8341A317A96BC89B45D316A96B48E8B75611654B351AF990D879BE3B06740B49AB20FDC3D8G21E0A548005089E1F0A5167167D76D1CE4BBB2484A1771F6973C89CF0B5763B29D363BBDA67B30254F64321A06EC9637A0527497903F8E79703DCF5B77B048F857E23738CC9E2B438E391B46ADD0195C0CE624E0B521F1D9E82A51BAEE818163CE817335972C01274D647674BA4DA60FC522E069978BC81D38E86A039C
	A183D257D792FF3DC77B5CB0789D3D92FD75BF05844B047872D56817BF96E861799ED4EE0B8D7AF16BB0D143643A0CF5747269BAD2EF00BE9AC2F901D6938721EA35D6B39302DE8BCF88D5EB341A848866C2A89B88E3EB318D3F5A0FF535FD4593027E45732AF5150EFBEBD93D4BDA2B2C2B1F23BA143F295534C3B0C38807908BA19942DC881AF5209B04F688E6886190E25761587C4F27E64313680FBA2A566FB56AB831BDD81B9C9375A53E18A766CD7CB31976CC7C69B326E903734D9473A5E540EC7B9D350D
	7451EBA12C8B4037A6G1E9BC23FE271C9463737445F4BA6E19776F172786A9074AB84290FE375557CA6E97349D00E699004A22C337A55BA0136E5B26140565B6D0206E7B1CBB51851EE57925DAD97ADF6CF3B45E9311B6107DBECBBD5DAA2CBEC57A38E815B5CEE0A13FE3E8D9A1E1B630D5A558C07BC643D84263753F4134763328EDD70D8FAAC9E0F55BEAA71F7D2DD5CBEC308DB34F5E49D313588EC2C025042EDCD57123243765969F01C3B60B4121EC7EC674769FC46887436A22C93055DE4EE9A45639BE8
	DCCA7FD2D73F4C6F04EEAAE350E44AFD35709D9F99216A59354928B510FE81471BBC316E140AF5946BAC732354BEF6F07E4314BF9E6CCF0320F98B7AB388C6889390E2A124C04804D0329E7A9688B6885356239F473BE7AB64E37D45B632CA105A9F4AC71DCAC358386393765954FC9BCBEDC33B30AD935B301D22EDF23BD60B36066AA30AC324FFDA0155059756846E93FE36C63DCFC8DF235EA77CE6CD70B67F6A9A35B64F527E3C067856F149AE6BC37E32060C47438E3B5DC2BBB24EA23035592BC6E20755EE
	751C301AC7AD1E9E6B079698BB57133EE0080E790970FB76FA9CFFAFED4671377C43AF8BC9E7BAD56773539FBB17D3D14C7A0146E2E97CE5BA7DDFA1691BACB64BB8B82A4DF1416E9157A6EB73A55C1DCBB14D081D70D6F441AC4788EEBCE435584C7AE168B3BD1574FFB60D29B8EB3AE872D63AAF0133AAE9C9D4361154036467F65D0E9D4DBA55B525FE446A329C36BBAFE0BE5B7B36D731FA8AF321AD1729EC4358E537F558E4EBB51BDD96377BBA29D1AD209E83DD17289E6DD6B769298F59CC23EDE31661F3
	879CDE3D0916EAA5FB98AC2E9107EB5CE226FAD41AAEF9C4A5DAE97235E8D1A36A70DF1D9FD29D5AE0656EF2588E5B472CC3D64FF5D3238EFDE13E6422FA9CF7C06B0039771063FA082F667273F7BBD91DF038BC57CD7CAEA67B1E068BE2FDF458ADDD974607AC2E6BD49777703A58B466E6BAC027F54961B2DF2F460075B06BEF2CCD7658CC97ADE2033CFE5520167B61DB7A07289EC78EDC70F8E07DE73EC816F166CFD605333E191FE9D5645A99B85BFD206EDED157820F17690A0EEA9DF7763AAD464BCE4B27
	6F32AA26437D8DEE6CBFC62C23572F442AC59F9CE8E76D56585DFB5D04575430B94C7DC5E43C9B00F15089A1229867629F2DA569B89797979CED8E1B0D8D5510B63F180C43A9278BE5E3EBCCB15B8FDE49539704C8AF9F881EEE8811BE91A2BDAEC47A1C9069427B415375A1527BC3240707C81F99A2BDADE0BAAB4733EF9610B919657C858BB4D3B2C43FE739AC6E471CFFD32BC86BB359AEC87BBC175FA4F3DB1BEC9D46F05BBA75B912EB9DD9FB1D6379DFDC37C8A07BB5ACCFB6271BE9A2F9BADD56F1D83612
	052578DE405AA8FFAFD0D7225510F7889EF8C6C0E03C4D5DE47E9DE87F3D2E1464F32B815F9D44GDF8204D4B12F42D271DD8325BBFC8C6942A0BE3DB4905D9B1CAE816233A1E4142A51FD77B852D5ED50EABAB684223B5003F4E3C09386A1E6039A5DDEA35225C37A0200F42FF03A220D301E5E98480E07FB114EGB4E38169FA7B10AE82E8E2B686123B648452A5113CA0AC5848686AF5F23A9FF13AF04023A1A46A54723B2B9F6932A03DF013D6D337C9D53F13C8670174C8953A991B885DE57E9EE6A74722A8
	76D3D8605D22417D65238572F7C8E637D9F54DC0C246A6163F26CC396F7E6337C83E65005715E17F1931CE3E17516AF6BB062DF45BD3ECC38F954957938C0BADDA8ACF682C5D1E4330D073E2BB7CCA9151156C0B0A3058163E7ACE13603F4F4BDA85EE9535DD222303515166B0DBBA20A9377165D61F55C2666E4C8F9F9D123F0BCADCF5B2E7D9GBFF408760F497C5011FAF78E53697E86B28FD1FB1FB6CC152C9C3DE02D3C6031128DD81347C4C7A5560259BB2B97689E8FD9034715613B29ADCD243FC9077882
	88851B359A36CF7EF53AFFCE64D6GB688017509EFEF1077095381CF02B097829BEF5FBCC66A44946704224F1337EBD999A986D47463A3EBDAC439A9DFFBC4E83C5A207A3EACE2D5FB4E024D227F4AA5BFCEFF75261C999018FD2EE3E81F8DE8E24B51BEDB311AFDE96568172D4711AF83300AAD48D75EA5679B5C4278A23620DF7E69F88DBC27BE734077963F63F223A14FB9DC6E072AF217EFC5FD9F6CC1BE9DE07DDB11EF20CF4E9785F88204342D28EF1E716369BBE464FE02BCAB36215C773A55648EEEC3FD
	5F6CC5BE8FE0B3B8DF58A9E5394C05347C8A647BA167AB814CD801FCA77C4A13480B64FCD77A10AF8630D44EF73ED8CD4F026D48D7F382794A819B580EFC8FEE1373CD5B4E74CC5C0EFE3D7F44357A153511EFACE9066747DBA0E0997D8F37E1B668177FB65AE0D1353D65ED34617D7E0FD7B73E550FF20D10E7A4175B28DAB712395CCDA7BF1E5CABA7D1EEAA64D9708E4A7D5792B5399D6F605E57099A79B816145E9FF09C9BF8C7FCCF7A0EF29C7BC6B169FBA3810FF9874731ADEF11BDBF9C470E4348E1320F
	42CC106FAF3EC56C06B91F98FF69ADA2174E79845CA77D8355BD9E721C8DE19E84C12F556874A8630375A15FC99F7486F9A71D6A77FE37C5AF6D739B617718ACCE67E8747D6B7DF4DC195033772FF99C0F25F8148CE7E573CE9316CDAC24656F403D71278CCA79369D3E72A294F14677BDBF3ECAC5FC06020F352FAD95E48EC447D859105550F004EFF830B9F5DA13FCCE1D3C033DB719874F2C9D780D08E983A9F3324FDDD8096FCE8FEEA079FBA1BE8D428C8833A04C07103FD32B516F44F2FBE23D5A7C43375C
	82CDBE2477C94C975EE3576643DB7D7814BE6C5C694B476CFE34986DB66F44F2549F3FB69D9A7C7814BA4C5A29D60E4DFD456A6508DB17222E273B082EE46D134EF54D38C6DD7F9AD25776AAB5FF6DB1228E83D528C3EC4F3569708DBFBE258EC9D5EA7E9A3585721738EBA22EA5BBB729557BD448F3FE95567BFB7A08BD246F54D423BDE346EB3367229F1F521E46EAB51F5E5CCDF4A073ECA3572124775AF4F85B0FCF29C302C287662B2C23CADF11F1E5B6504E2DC6DFBDCD57CDE49C4862FA4E3EC6BDFF99D2
	4F419AB5DF5D495B2B3786F5886F3BB69D6E7663D36A10262AC3DCB116D7A657217E443569F0480FEF03A25EDF2B5686D67510BEDA258D305996577545ED79A20F3396F54D3AC6DD17760772D7DC2D1A3F22393F12388EC9FEF9CDCE079F0754213CCECD87F7B7561B46BADEEFCEDEE33D7163D36A90232A431FCBD00704BA9CE3EF59C83012DDB01E6E4271F4E9B12141391641E135FB841CE7BDDDCC76529CAE6B28550ED8A245069DAE7AD215E12F1784FE5F7B579275773D1AD275773DCBCB03FF8322AD8D74
	BE18FD2F71873A16EF847B8C909826EDA6188762119C3BEBBF41E6C2FC56AEAC23071A88168671AC0EFD05E2C9627A08E155CD645B8BC2A3773BCFDB8E1296AAB099C7280C3CA0F49F671B0FD24A7F6C1B2B282F5DEE0B1BCE1A486E081876DB4FDAC165BDB9F96DAC60BB1F7906A5A24DC10F232DDA407E62356D24FFD769AF68268B2B1FBFEC46BD17125D386772DD8D196B9AC99CC278EE747748067EA036C46FD6FC63A5461361192AC81B8FF1E10FAFA6FE0338A1F09D6E5B20DE0787B6103663F6DCF08DDB
	1475F4F8C391CF13E62007BD16F162C2F1CF1B72FBCC2ED10BDFBDF7D3FE169608FFE2C32036404A676B476465D3436BD6DCF1B0FF96AA7CD3A1469B61E9D02419A16ED5E0CC7670F1396CDAAEFB30CBCDF62418C70C780C1765B98BFE27C148D0485154EBB5C5907490DA6AD99A133D2DC7AEFB97175DE8D413ED94F9474467C43DA4A78AFE47C2C82877151D8271F488199072774AE57F5CC7B6797E09557770CD3C3E6F457A7EC73A97E4A4F18861FB313ECF67F305E840E66E75151D8C71543DEABEFF48A817
	3D1B5B7D596EE065BDFF2FFADFA5B4E8B5058D0A3AG714686B559BD3DF259755C6EBA3A0EA0ED4B50405BB97DE6B99E62A99066B6205D092702691985F4857BA45965626FFAF8F66E7355E990629E8891B21C693938EF29CCCF72821B493EA7E81B08D664BFD30CA743B3D511B69F62C2231A0F3E6DAB3B8EE5BF913CBDB62A17CF85600D0AB483444D2A329DA764653307570D1FEDD37BCE5DAB669129A21B65D75BAF4FEFAF4F6F612036448430A59E70D90A34B408E7285A72FA3F0F9F2B78FABEE8BD57B4C1
	FF5164AFDF8FD80B82B7C2FC2CC9358CCF7A482EC659FFA989A6FB82720AD2119D8BD80282CF01F83A82E37D7D6D9B495E1017476F24714BDC37C5CDE4EEE6B3DDF6DC00C9DCC7B3E9EB25BE7BB11910EF8960D54DACFFB6DEBFF9094C17C7DC26F198BEFA1C16E121FCBF615D5E0C3CD1C09F8BA19942DC881A7D387798371F708223F57C42B87DD8AE1672A65179158DFEFBB96DB33D647D54E1B234DAC72C4362777A64BD8CCB6F9CA66FB948464E853BCF326863671B65F5F59E641B35DF72D3C10B3FFF595E
	5A31BCFA962A056D2D2D667890458DB21C6D397D004EC3C8FC825272DBF14E98C1772D26C1FC8647DEB25079A14467F0CCF70CE073A02EB90058E64ADB84718A0E7D278B67250D9C9B20F411900F65588F0BD1EE824716F5215C940EF5F7215CF489ABC639199C7BBF874A4DEFC30C2DF5095CFE0E5DCC7333C1FC02E36B3AD117A80EB5D35ED808A7F16CC10A4DE9E33EE5D8E2B16A1741695E6EC27DB46D081D26F36EA2086BB9B658057A55F34CC8736BECE76F6A9966AEC65BEC1C6E83A35A1148316F98510E
	D99CFBC107F624F14C32495F0E09CD5C8ECE175C436DB808586AE2FFBB9A381F0BB85DFDAEFFBB3E466B067EA00E0F37ED12577F8940238ECAF5BE76E0207A7F3F749DD042C1E643960E9752F7BC4B8FC9B82B7F2F53F989098FC2DA643B286757697ED5C28754758E444AB6D3DFC0BC0BE3564D287B724308A57492ECG629E0EFD195625880847F04CCE7D938F71599CDBCF4BFEAE44B3B9565B446B7091445E20F47D90F79EC11F6D7519EF0683BE7D0864279970BB69083F5F6628E073G4BD2604C0F7B6879
	3A0277189F97F37CDD0AD748F031FF21739F92EF01345877D07FDF1EC2FF64F7A276AC5DD3A901F89547D6D4902C9D627D9C6B2BC03F59B866BE05FE8B63D885DDF7CD03F89C47A61A51EF099C7BE9B67AF7B6471E22E523BB8AED70A8E26FD21FF7C2FC10E3D19473C0BC0AE32CFF0905F8BC474EBAD146AC0E7D183519AE30378B3167A9568E71810EED22B21C900F6458C1CA97C3629C1B477B3AE40E5DCF698A3B21EDF5A376C76A6796089B3AFDFDCAF887B876BD4ABB8362499CFB63A841D2A11EA971D23A
	FC8334F3839FAB38AEFA0EFD0E52CDC0FC9A479E206DA28E62C99C7B9D6BCFA1BE0FE3BB699ECF9611F18C31CA6A97BD449BB9B64A5B0A01E34B280C9808A7F02C2414E0A9901F4B3162EE143B00E30394DBFE9C4632633C9ED0DD9AA15E4931B6DE3E039CAB22B2E6C2FC56F17C462AFA50675D92F9DB5950702E4BEABEE09A6D2433993616E823F6103614F69C579267697B31429E70A904769EFCB7695D0A5F164C7852A3C2E718CB751CF33A71E44EC08FEB53E1BD32EFA2D26F4EE1B21FE8C61909101E59C3
	301FB74B5F0B12394B8B39ECDF0E252F58AFCFA773086D02BCFD3FCFBA51576443FF5EA7BDCF464FECFBEE8B5A16755CCC417654E040B35C0DC6E6532078F46E38A3DBF86C661C69C6F266FE61D6C1605FF1B76960E937DC527197466D56F10B1D9CFA2C58D535D72F2B5BD3331D490F39A4FF6FDB3F7403006FFD53C4399962B36D03BB32D9BD788D75EBC5AF5453DEBE563690EC90629E0E4DED45BAB43D977B7493F9C457F990577441FC96C29D848384A704E990627B787B95CA1B8A7185900ACE306F736ACF
	306F6F4837F5643BB9C67BA3CD180A8D4AC0E4102721EF72FBFC9A111668C5742E9375D45215F03DB3A6258B1E951A6C19C12CCFD8AFF345BA35CA05EEB12F9B8FAD26F3FC13D7B147FF124ED57B41176693B847FF55C078069D368B63F637C817C76743E48FFABA27FB3D16686EF4D9C6ACAE17454C0E59087407A9FD9C5046F37A0A2B64BB4F91075D43E8BA296CF4C81F8F4158CF30D7DC6DA16C4E93EDA2C187BCF590560AF8877C7E05A01DB70335DE297A5A6696AABB9A6863A0B06CB556BFC3BC1DE3F57C
	9DEA61C9443C94AB07F81504D15E81080F1DC4DB344ED036AC165992FD5257161990FFDC340549F81A4AC884FC56C97E4DCD977129476295FD7AF52ADBA6248B27D037965A5717C03C6294727552F7866CC39332DAB3594DDC8E1B3F11BC0C1C7EA9CABF64A09FF49BCCD63B47A2517F1A52BB01F6024B6C21FA44C1BC1E676122EB5BF1130B3E0BE07D578B95824F67B6B6C7847A8C4EF32E182CB7479CAE6B07D0EFCC36D61BF554CE3EFD94180FEFAF8E66E3EC9B6863BAD9FDA1FEADB94D461ABFACDC381069
	137B36244FBC3A3E28G1A3A53E8D796DDDF8CC25C46314768DAA2926253B9768ADDCBA4C3FCB64706291F048118D38FE09D79FE487A2E267FE6D17F7A81B6AF1556B5B11B30CFEE9F60F36F4D58A70FF12C3E1C3FCF99407EEAE1EF87BC53A03EGC2417BD0DFA034C098049086E1BA048488F3A0E4C2A87CG7401E00460019089A18EC2628718677ABE12A779DEF98EE0199F30EF128B4FG9F846399768D19678C7B36F85A99766DF07C99764D6F1CB36C1B5E4CB36C1BDD16679BC6DD36B84797F51AEC3F29
	8CC4DF7C9D7701FABEE8FF2118DEB0C9F989227FFC46528196CF94732A134974083FB3C51E85836AF242A6A15F487D5F510B3EDAAB04BEDF9EACEC127D5E9C00067435241F40F3704A736D01429A311EAB5BAEF9EE911F7273309B45A71E658F740ECDEDCCD406D281470AFF6F8BBC1E3DCC574D0503DA0DEE907B263D1BC9FF467AC498C387891DE1B3690FBB8731FD07ED8E553EF3E54FE8601BB9A80D8149707BE5681BDE0740E4BE5F2BBE1E7D162E4DE783FD9A57EFE30B7A187F9FF4BC48B7C11DB671EFF8
	8D01ED3F0F2D5D00564069DFAE759D4B5BE85FBD816991A6345D56B419319CEDCFB0795A1EE2D25A3EEC033A6DDB29BD29C0BF5744771F28BE85C3DACD7990E2BF23F49D909F605849E338DE8F63581592DC2FCF63588FCAF0ED9E47B1B62E12BEB411E3FBCAF09D3EFC985BE0AB5DC350C13C8542G470FD21C1C3D708E333390629C566F7D9A61D37AEFC044F4AAE9418213719BBF99EAED885B6FD45FD333F2D9FC1A78E2BA6897BB0C75665E921267C52B5BCA4E85B13ABF51F5BBC9CF65F465957EF350FDF4
	ADCF7A01F943B826DE25588208EB4C08C553BD13AA08B71AB13F7D4DA4BF0B1D9CC7B20B7975B523DCA767FD0CE2E1900FB4E3BD4E481ECC9B4610GFCA9E6B6C61334F4783DAFDBBEA7CDA9D6EF17F3E9BB1B8F748B385E9FF4797B61C2972EE7759624FB3CABF07BCD22740DC05B41699FAB76ED3F5FE6FB2E109EE6C13BEF8AB9FFDDA233BF5E625BFEE7C17C9EC11A3F2C01F922FA7BFD034D3B01BE1D6B3728DB5DC78BA86D7291D8870EA06D074501EDBFC2ED6FGDAA327BF5865EBBB1B6F06C1FA64885A
	3E50914A7695B25B93C7FCED1FBD42EC177A2E2BDD6A367F9B151D86747338FE7995B827E7F3522D6FC0D41C6F0ED7CCE5FD14A22B0B741E37D12DE62FA02F0BAFF6297BF9BE5BA784FA7DA86AF5F790BFEF25FE9EG5AB1CEDF227073D5768E8452E3C6514F2F067473B219CD33C7FD7DBC976247FC7C6C8A606784AABB83683338FECF8628E34F52FE3DE28C6628E3FC2D5B655FEF2DA941F6E866F407CA827B688C257782ED78D8203A48462D19101EB806BE3A92F29CDDA573517CB1DF9F89D6E5DDAC6BD677
	D1835B93847AA2AB6AD7DB2A6E2377689EE0BB50992C58F736F723BF42B87F256E407E08E26F2100B60653FFD0626B8F8F75D98A2427DA519F27C276CB2BE57E48BF6B6B0F1233CAFF6C8C30C770AE353182686B4E7279F453D46F23E36F91FECD77B8874FCA6BB5063FCAF11B8CE76F97AEB5615D0CDEC8CBBB0B5F7F956A497B5C16F3B00F0060019089E18604D96770FB40B53AAAA1447775C6073353F251E213FD1EA7FEE35DBCD57B58FE62F79763FEE67C373EA2A45C2A8BF88EB06D9C1B2FE4094FFC7D9D
	5964496CFBFC8731CFEF03318A028DC2B8046990E65A503E53BABD330F9CD9EC75F8CC43E374B4A49AC78EA8CAB0F9994EF4FC7E34FC4F3360010E1C6CGBAA65B18EE33ED4A33AE2BF612BA219907F540B86A533E0DF450FD26337EA7A981B4389CCE0B4BF3192174243458773E51ACDFBF30F77D057B71FDFD8B645F8FA18AC26CB8BB7B4678A6DA7C3F9138278579920116FCA3B0871E73C4BE56EEF6EE8C35D7A28F029D5687F656EEC83C42AE55D126C7CEB9E95B644A85FE00042731FAC152BACDC3741C35
	9CA75F3FA97195A22E169759CBD75CD8C359B13D48BF1DE703B4A4285CB643E5107B8B55EF0241B373B1F972BD7DBABB73ED3F9D4FDA5D3BC8AD5D46535FB22825077174B92A6953604966816124D90B7A7E50C0B67E836C7557D4576D292B2F5DDD37C72F2B295A0EBCA547F260D9DD03FBEF0FD7CB7995ED5898B83F6A5A9A169163FBE03744772CEB0B126F90B831224CED323B5D9617F524CC2F2B526B2A6B487B0F0D222F69BE987D17315F9FC37D1EA11FB8097D4B2F16E37FD27255C7057617F4B9B827D1
	5663B83B38FFE2175AEE55421B72D81E363D126ECF9BA6EF73BD8D925FDF0FCE5D776FF5D15FD721ED7F32CF4A2F3DF8C3607CEAEB45FC985F0996096FD5474775BD4B7343D64967DFBCA0653F38EB72FAA535C9FC855D646E08B2313109F70B14B13A7FEE1768EA0B03793F269A846C5EAE525ED79CB84FC50724BCB7F6CDA6CF46B754A171F5B715297B52ECB5599C23B2C7B25EDB8ECB3C07A7E587630BBBA2797A397724BCE6690264D1D3359B046F41BCDE6D14785E5FC466BAE5E2472593FB2EB2AEE3CB17
	C47B4D1E494BF859A0716595CF4DB7B947A55EC85764E5FE25077031716CD9FE962B4A4146418EF88EB844732B1426ED33723BB88F24C7B8D83BE7E3DEF7F928B1CF3EDE0A815EF807B4664DF2A8473C67B711F14A6726AE1EF65934945344410D618F0F10BE0C5C2E65BB66FDF3E43908E3D68C4F9DDDCDF1B71D401DB0D995FCBF99D923C86FF1DA6D64B087CB7FBD15674FD7BA4A46C01802B871C3F37937FB7B69980C37E079724E322C1625790F513F7012F4798DD63E7C8F6FAED4247B5ADCD0CEF4BBC219
	5A5AFA255B1CC4FEDD93CD773F6DC9CCEF256BBEF69393134C7017B62F6438D4E0AC6DD6BB698B0D5D3D3239443FB5ADE398A7E6E37313E54A31195443B98E9C3B8F6ED7CB1F4753DFACD6CB4F62693FBFAACFAFF03274F6A71FBB28727773F467A935F49BCF57F729250771740C23EA6953F87ABAD57EB81E7ED7D57D921DB8F77911D16A9356ED8E56A7D4C3E7D2338B7B7D91B24C0BF300A60BFC7EDE75370A1CDCC1FD8EB05B497A00F427744D4254669E35FD526F3E93126E534AA623BB633B5CAF718D95EF
	8A4CD7DB33E7779E4609B223CFCA3C2B020DE98A193983925F61C90FE9016786DB5F177CF07883A96F04E0E31E228CDDDD7E6B1C5B3A306FAEB84F7A778AF8B61EE76F83995F9F3B7D57B9798664B31EE76B9C9BBC43C4BE36EE3F196E69CF87AC76BCE2B3CAF02FB71DE399944B00F856F9DCA31D688EB5DE90BF61FB7B8A97686C12468B837CA67D607FDB38F0A113B1C8E58CGBE66C23BF0BD63FF63A1269778264B7A270D74FEE4458DFDE29F75659AE59BA4BE196642B668BCA315DF6236294FE11730FDC9
	57858B0B9F2F20F35ADA2C9F778CCA790F1D8AB2F72C2E7119BBE60EC8FC454DD31953B29EEFB36A4572DBB7A66577636C4968B1353E2141AA7D1EFFD6125550B5F51FC6F6513DA01E5FAA1B145FE7024FAB2B646B13F3F6096FFD67A733AE3853A1597924D34ABFE8FF2450EB4EF909EFED57547A4057DDB25F0676856F839FDBAC7125B9BEFE9FB8ABDF72436F17C8F93FF0F472BA2DDCA665D13DDC4A630FC7276693638A09773DA978E44EAA096F39CF40A7B92BA5FB36E8253C7FB2851FF42C1178FEB96971
	11513FDDC2666DA3A61B5B4275B8D7A86537B9F49D65FA7C60CD096F74A7B0E67EEE1D649B6DFAA96FDFCD213CF6954B5ADB7754FCF33A5B5FB7741ABCB13D31E472FA5C3CD1625B637C783EF9CCA779E656A6A96F0FA6D5DEEC0F7A77647A987C3BB2325F9FB585BB3F75F183137179CFD5865BCFAE5587BE47DC2ED7BF477C36DE7DACFE15BE785D6B757A40F72F6F574B6FDEE77B5F5369BAA88E6694499066C14802D060463D709F69C99DA1FFA946FFDF7E20F9141C23A6FF9D460372E76E88EC6B53BBC27F
	CD19249DE44DBD64006950B8499F71FF5FC14A4B63F0D210E14F6DA0BEF2D9C747BC0CD444FF320354D31BE504424C4E27683A03251BAA49F82A3A3F8FD69D017A5ABDF456B26CB11AC6B9CF614E15F23F33EDFFB12DF8A771A1391F9E5A0D75C3FAC82E87886D236C5DCF63FE7CFBC0FA702B590D5F587F361434F135BB92254B910DD60F4DF2C01CEA6339657D78DEAE5A0D5F5CFF034A1883717990B49E3C7B6D5BAD785E2984B023876FF249ED45BCA2BD18C7F5AB7D5BA390CF031089E1F273A86C8B569237
	62FD83A3816E9B20F3DF2643CBF9A48FD2064BAF20DEA90B88C68645F60E998C0845F1EC59B14416DF44F7E939DB49DC5F8971C888B3A14C021086A193C27EA52D2684C295048E880390BC90A2A0C4C31881A189421CCBD877F36A37872AA7G0A07A1E883F019589D9D4C67FF5C0465BD8F7252F9D1673DE56873FEAF7AFC340C5EB18671B888C91C161D57A234291C763E4D74CC53E5D8DBC1E839BC5572F9F91B406B50BC2A8BE9D37D17D16644FE74E994471673BBCBB2AFE33D3D32FB2B3C5E1E330DD61E9D
	A63DD46588D974100B1848861638214472A9236F414924297FC3DE2E7CAE1FA80EBDFE0A4B6358F097E27DFFC3EC9BBF431E48312EAE2CCF3A8944F615A056BF0175A4122EFB22A6301C8BFA4B0214B339330C35E6AC5FA7795F770A05BC52382C7F655F7194FE04E5360D7E8D2FCE081BA1CCFC046D324A006DF29AE0A99FE19EDE8366213902F9FC0952B6C25CC830AB387E7B8B291E62F86BA82994A637D6613F791A65FBA53E6B2D52F724FCF7F56B8267DBDBDF8793046A2A6DD32B07AD64F52FB8E7985EA1
	490A6D1A0CAC6627741AFCC1BC9FFC854BB126AC705873F8D96831E7A6ED939698B348C6A4431EAA23776D0C0C38ADFC0C7BD6D981478E3B8D8E37157478ECBEF1E0FF28776D732E285DA9E48849273C97CABCFF9A12CF9958F78ADB693820392A7CFEE1A7458B2EAA3FDFC8584F4791C88B3B0A5FCFFC37655A7E8E60735748175FFAED76BEC6473639FE76FE0D6299FE766EE9C5FB33A0EDB08C6DCD4BC3794900250631321CAFBE051B7C3F5DE4FCBFD924B64FAC9469ABD478C8E8845C20C8B3C35CFB13DA9D
	6AB5285E63A252468410918F78ACC5DA9A44B3D4E5949CD31321391951965D2CAEC38FF80BA24D8871B185465A573A2D015B71062D215B71362D6AF3489DDB7D6710B5DB55671075DB65F3C806B5EDA5635FA80C7B7D1C6EG47CEF26CDD1AA741CED84D1EB10E9F25FA913C43C284A25EC3753AC431FE7C5B0AB26CA47EED452D24AF8213479C7C1E2F212D747BAA2B4DA67EEDC5CAE335C357447DF10E6AE8F51AE4FABBB9F612176D6B1B2E2D6F4AAB3B363E2BB9A41FFADB7EB91DB3CD5C2CEC4BF3A99EF133
	32AD0F1771319652965C0CED593E795A64AFAB27FFAB63B3CA7905949F7B0CD27E97B723FC8F2425FE86653F62E3FFE338F806D1FC1A438375A5B76DD7EB03DE11BED2050F36FF406395E933A01E962ED6262BD56FCE4990E9B537284BA882DC2FC8EB01387196B5995B3A507EB1C81FD050C4C1BC96C2028C977BB9557BECD2C43A74G3AE5821EFF2BEFDA89442BEED553ED066A3DC76DA2ED7F2D6AB2EC0007A95226C1BCCED546186A3DDB09A26D6CGB266823EC011367C33304E782C1A8C3D2A0CBA113683
	1E831F75176384ACDC01CF07788CD599BDDD72FA1CA4524C911F736019254A57D0A267AB08E0B46562339E1E1D91EA63C3D48569635C621C1C6575F4573575DD5F8F49275EF77DB5A41FB230BE628BF4BDB098216CBBE2A9EE0BD0769DBB3A79F72310169601FD47EE3FBB23C3854657FE0DFC9FCD190F59351E7E6D02165B1476EE26F867EDCAFBE770F5D1BF24A55E06767E3AC62D9E6BEE974F5D413363F615B3B500B995F8B84427C318A14359193124B5E40DE9355B2CF6CB9B7B8B465CFEFD0B40FF6F127D
	7ED7553E78138ACC46CB57C146D7DBA51B62E53F1BDABFFD59FD1F2A8CF60E6BB53A571484E5BE67F6BC5B55C8771A66C1FC814784FA9EF8799DDACD499D7C8E849D1E8B2B6058EB14578B71880EC5AC265F3F37EAB5519CCB2F25B248BDD49CDBFD15E064DE22E40E5DFE94E524F2AC16FE2FCE6EA52A08C46C128165B6F2AC7F984AB5F0EC3094651AB9E66BC639DE0EBDA85D434A310AE3A8B70DE3B547D0EE86471239DC4DBFA136004BAD62D83C81656AB976883FC32205E337727B24227E895B7D2F4A243A
	78BB59EFF75927DFAFA32F030C556512CD6BE53F9F5D7C694BCE7CD4E530B25550FD4CD8A84FF8DE4E4F0D92EC9644D3B9D6B50675E1AE479E257B11F5F7EAB56DF7723A5E0267BB8D9C3BE840331CE60E4D2275105C336465581F4E733A4E314CD2BC5F1946315A92141B4131E9A5A8B70BE371DDA83760F37C3E1EE214DB4E31E7799DC3759C9BADC639919CEB6679C5F3AC1767B713E35FF420AE499C1B416FD8CB6558FAFE77D6C5946FBFA8DDA344BBB91646F4013813E373E8FF948E7118A8DF5B62A11E4C
	31F4EEDBAA479C142E62AEE85BF771BB24683E2E9162E60E55527324CE08C7F0EC1C1E9D0D06F882470ED35E940827F16CA70DA8B703E3DF2276365C2D55745F4D7BD5F6DF9E44A7B876870A113B2BA2B8466EF2A0F7D7C5F30C5D5BC46F2E6258E9FEEFD3B24746A89D393B2A709E4458DEF485446BB9762F94A377D435F32C06799E62B60E7D0DE2646E2AB00E65D1DEF2F755B40EB5F1DD62B8464E1B113B2B96F06CAC4516CF03B1ED9A3F730972D6C13C05E39F717CBAB916CEF949DDD3519CBBC65B42CC08
	A7F16C99FA2F549C084F65D899EFEF999C9BAD417CDA6E45BE7E61EE295F7B0A6CF7ED503BC3BF19BE3073BA48509D13EC5AAE7B7D8D557D3ACFD676F31F2A8CD6260BEB313FB45E0B65BC3D967B28B10E392E900C1C431F60583FDC41BEAF0AE30D55586745F26C0E75F42E813C899CFBFEBD76EFA99C3BBC0CF5AE7DDE7CBEEF69A23A076FB41DA76FEC59F7FC1B96617703D51FC73A1EC53EE7952D14268552BBB94DBA1D6FD95EDBABC9F932EF8DA7F4D3B9D72E3C3BA68CE43C104D6E959375DE6CFB97100E
	4EAFA301EE7A67711B4727A9968F71A40E955491ECBE4497F02C194EB94B6F53EA2A6E43EFA39FBEBA1573E3CAFD876F1356EECC468BF4AC35816E3D8F65465031B99662B3B9D6CD670DA990CF6558ED14D7B39DFECFC76CDEBADFED04F847F45479296629FC7F2F5459BBDD2973B12ACBB860D1DC6EE90AA5C2FC9647DEE17747C2BC13E31B681DD33A7BE1DEFBBFE23F207676C35CFCBF6A7C4D56D0BAAF8E2273347B15BA33BB21E2G1FF1BF564B624D3EF5371A4E3BD2A1FDAE27792FD15F3A7B651DD25DFD
	F7ECAAF5E1266CDE937A3E738165390AEF6D771515C24F3AB15D7650B91C8EF8748F205F3E447C86F1B3477ECC6BC49444239FC0DFAE89FA3F12327C15FA26C0BE87FDFC496EGCE85FC6E8378DE758F55122E4F50712A608BB0F6FE0117B13B03G62C60E31FBAE43A09E798554B5BD68D9F8E539ABF5CD7C02325C23280CD9004F61F2C729AEC234D633BC9AB1BD252B07F8BB477E0B4E533C908F0FC67D3E97742EAD65FDE6CA7D9222157A31BBE312811F9D0DF56E4EE25FFA20A5FFF6C02CA32F8538B7E399
	3BC39372487FA2663370E860F367C5D4EE9D5036F07ADA45FD980729CFEC106E7DA25A7FFA5072D99C427EB8486715058B97CAF57E56G77E130FB176301BE096B776BD33EFE59D5A7796548E9F53F8C517972FC48E3814FA7FCDBE03FFC114E254B9F04BE7FC124371ED25C61C067568310BE76A07AE5DEE328FA3BA408DF26BF286C8B1E89F007430B345CE201FEA6576F61AEDF3F746F125A6286BA9E24816D3C8731DE5F436E0DFDC82B51BD447BEFF67FAD447B9FC21BDCC16FDCA032D78431A962A1E5DD3F
	0F4A1886F84CC3283BC5217B5FF6CB3A3FC269D300B615539FAE763F03E2309867A51A9834672B4CC6086BB8D643EC04F8FF8C5AE88CE96332E0B646A8EDE4EB27E9004744204EB7A96E37E0FEC80174D4CE333349578F8F52F33FCC47E9A1F5DC95C4477C07359A7241489B7CBC46CAFEC7C56143A8FFCCF167843B7F2982526BB84D9C272F0E5F2D17F45CFBBE140E2B0368E8FE18FD17A56998456F95F1BE0C65D7C5674761900F6258F7A9B68362899C7B42952C8FF3B976B245B2A1AEBC0218054E1975902F
	67D87CFA649D6358820AF9A19E7E88561B2861290C7D4ABBE8E6BE22EC6F750BFC3FA75AAEBB9B7D5AC67291DA40EF0EAB079CB6F319DED74DBEBCE67C1D642838785B51A465F553E222DF99BBBB2CA35F6CB414A15D5D4D925D0B35C14E0C54AB4EBD6F177896DD1DBCDF096C1C751523D3BBDF3B3FCD32EFC8F61EBA2BFB7272EFB9A871E59F137B055C41A079A5CEF6363A37B4D87EFBC0475DBC7F675E1578CCC1757265534B4E8E5F5DBCB53FF477C8FEF1494E9B2E58B0F9797776CAFC09474877E8E5F831
	04CEBC388A4EE13489FD926DAB25413EDFA7870D2A7999701F4B4E93FEB9689D843EFCFBCEC9FC1FEF1D1AEFCE1D16FC93A1BBA3589D74CC022F7CF503925FF7C627A63F41A449FFFFC84A67DC70BB986A65724306A53EE7027A5B17AF4DA2717D667C5474DEB8A2693DE3CC4A2732FB72728DD6D9F987BD673047475FEE59593255C14B49176FF9599932E7A6FD5607717EE9DC327724C34A6747C14F75784A1F101D95DB30BEC85B5BC50EF554F059293273DEB326F43705D8D6EE097F2162291C45E37CE597A4
	5B8FDE14752BD330E16C1244770B23C178F66F7269F76E704A4BFA72FC3F7DD0621BB3293216F4DDBAA12B5B9FC9793CBC853D8DD7A43E21ED215A04F4AE50FDD562FB775464791E4F16783E5FB8453A1DA3593BD6A365937CEC212F7C7ABC092FBFA41F54A68673A53E60E753FC7992174A7A6AA95ED172326C4CE10E6C5C20F18AFAEFD9A971ED1B949F233DD46CBB276B101DBF8CFEC650D77E57D7CBFC55D3347FBF34127DFF161DB56C18027D47E4E78317CFD13EE71D443BC565CC5E6C372474A7A7FD360E
	713EA6BBD778384AD948B7E5677D6E2AA54EAF23874AF56CC4B91F436CAD1568C62F84E977FBC53708345F3862DB3E839BE465D4BD19FC44B914CE623B3AFE32BEE0744F2D775561673273047661496B70D77A1D40BA4AF73BB999CAE546ABC21E5BA5E87DF9DB6F7C69CBB34E34976688B90705C5E374FB5B43C25EA572612E97463D6CD488EFG6FAA4EFB18FEDC1BFE3136A1773F9F4D4D91B44048BEB6BEACE8489743406FE27964FA9CCE120B10A38F9E61AD3C7708FCE6246BA3431F784755BC42B23C8520
	323252FDDE207D31D0F895D613D28CC2B8683442472F5FFFF857EFD2FE59674E95969D965EA24B5F9E48181CC8331849DF1185B14462C34292A7791342E4A38694F653C71E5BF359E669948AC70EDB4EDF3038BD96F3AB1EF5F3FB04351DC452CEF2A4EDE70749BD66A14A6F6B94B4F6D8DCF884ADCB36196C23BB59D119FD546A6C56C12AAF6DF3C05FB5D4DF12CBA54FE54D37D7ED59F4E4EEC22E10F3C8D8EAF3184C07CC439E076B303044B3865373B1D890FA1D7BDBE8C67917C837CBF7B1A03BE2EEBEB136
	125C3A4015BE677DE2640AF9AB8E01433DAEE1A725A42B7DCACEE1EE9BB339C01445F5980289C41673341BB6F8367E685DF583B9C236E8A4F17DD22F5383DA39E046B262F00D0386BA05861844B32A3C67592AFB3F7C17D3B4A30955A3ECE4AE83561D239647784E5611912B5D42B3G7FC17625BCFBC2D3292051FA6FDAFB644505C3D05E6DC26EF8D5957D3F1A7EDFC37E2F26C8B5C52AEB400999C250FF4AF4AF2DF0ABBD2C1270B6C00A397290141467E72FBC7B484F9BB36603F507043C0B64CCA4B83BC022
	E21D532DB36EADDDB6AD7D8ED296CED2A5B05FC5A326F12B6DB2B8154F823DA4E98313CC9ACB3658E8F652B277EDG019B071D46727D2AA0C1177B57A5829750C4AD7DFF6D14BDC53856D15E3708C07223444F2C8AFF331EA0CF9F55B7F904153E372271E4B2C4DCD6097D5D6DDC44BAF41ADA6BD55110180A7735E67B18CC2683BF76882B94971E79265FF8D6B6FBD5B4C4AB49334747CAB2B1788FCE03BBE9DB38953EB4E26C6AC215349B4A8B6FF9D5ED528430493F1DFE6E4630C951CEFB3DBECAAE67C61269
	8919EA96F1A5554D725E10E61DD1AF2D9C955549BF7F9AF80318A52F01564954C00906FCDBCEAEFAA48518770FE529476BD38D0925E4ABB7D7C56FFF981B2E2817DE5EBF32CD91133789A782646BA4D226ABB93AC4C4C80A58BEC9A76353515801B90CF310E56DAAB1E8FCE9BC3026928AFD7E04330EDEEA5960915E7405E1CAEC37DBEC10D0C42E23547926129BA8A1A957ED99064E856F0E84E4A53D87126F27FB0455EDED3D3A56F1272E57AD3E1871884B0F3699F56C6246869D70983BFBF5BD43E39673851B
	25C127DA1059818AD2732995E4BBADC8BEBFE567AF99D98B3245C82507013CBCDC85A64ADFC579F42BBDAA319B2A5ABE61EB94192811DBGD6796AAD19C85FAA71C4F29E7E04CA6C06B2B14137E59293493B48BCDF3D21727A3DA07221F02A44EEA8BB3F67EFA751C9F3C36A5DAE697D1C6F88C7FA320DDCA7547BF615585F5F8A197767C8D660DF72A03F978531E206CA6C063269177EA563EF13E485990BEAEE8CAB94D3605F4AE676FCB045E118FF6420E2889A592A92E3C6B21316DFBFA3DBD40B6ACF3E550F
	9497F9731597408A522B5F2E927B3B971C5C26AC7FA6C5CECAE982D8710F50CDE4AFD237A9D8B7F1435BD4A05934C8E6D35E8D2937B470E497C9FAAF9675A6DF53E8EEBCCDB7CA1A660B1A12EF2BF2BD428A1F37C1BE9E9FD2097D7D2D12551B6DDE958D31B4C89FCCDE7DE433BB4337DF155F993E60167D817F4EF97DB36CFCF767B34A3F79D3BBCE4F26G9E7B8C5E9D75999B792EB0501D00BD63A61B4DE3321DEB351B497D0087AEFBAC32BB9747C97EEE24919345BB9747095EE7E5BC7F9FD0CB87884EFFE2
	CA6FB4GG6C3DGGD0CB818294G94G88G88G29ECBBB14EFFE2CA6FB4GG6C3DGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGA9B5GGGG
**end of data**/
}
/**
 * Return the ConfigurationPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getCommunicationPanel() {
	if (ivjCommunicationPanel == null) {
		try {
			ivjCommunicationPanel = new javax.swing.JPanel();
			ivjCommunicationPanel.setName("CommunicationPanel");
			ivjCommunicationPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsRouteComboBox = new java.awt.GridBagConstraints();
			constraintsRouteComboBox.gridx = 2; constraintsRouteComboBox.gridy = 1;
			constraintsRouteComboBox.gridwidth = 2;
			constraintsRouteComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsRouteComboBox.weightx = 1.0;
			constraintsRouteComboBox.ipadx = -17;
			constraintsRouteComboBox.ipady = -5;
			constraintsRouteComboBox.insets = new java.awt.Insets(0, 3, 3, 37);
			getCommunicationPanel().add(getRouteComboBox(), constraintsRouteComboBox);

			java.awt.GridBagConstraints constraintsRouteLabel = new java.awt.GridBagConstraints();
			constraintsRouteLabel.gridx = 1; constraintsRouteLabel.gridy = 1;
			constraintsRouteLabel.insets = new java.awt.Insets(0, 15, 4, 31);
			getCommunicationPanel().add(getRouteLabel(), constraintsRouteLabel);

			java.awt.GridBagConstraints constraintsPortLabel = new java.awt.GridBagConstraints();
			constraintsPortLabel.gridx = 1; constraintsPortLabel.gridy = 2;
			constraintsPortLabel.ipadx = 34;
			constraintsPortLabel.insets = new java.awt.Insets(6, 15, 5, 2);
			getCommunicationPanel().add(getPortLabel(), constraintsPortLabel);

			java.awt.GridBagConstraints constraintsPortComboBox = new java.awt.GridBagConstraints();
			constraintsPortComboBox.gridx = 2; constraintsPortComboBox.gridy = 2;
			constraintsPortComboBox.gridwidth = 2;
			constraintsPortComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPortComboBox.weightx = 1.0;
			constraintsPortComboBox.ipadx = -17;
			constraintsPortComboBox.ipady = -5;
			constraintsPortComboBox.insets = new java.awt.Insets(4, 3, 3, 37);
			getCommunicationPanel().add(getPortComboBox(), constraintsPortComboBox);

			java.awt.GridBagConstraints constraintsPostCommWaitLabel = new java.awt.GridBagConstraints();
			constraintsPostCommWaitLabel.gridx = 1; constraintsPostCommWaitLabel.gridy = 3;
			constraintsPostCommWaitLabel.insets = new java.awt.Insets(6, 15, 4, 2);
			getCommunicationPanel().add(getPostCommWaitLabel(), constraintsPostCommWaitLabel);

			java.awt.GridBagConstraints constraintsPostCommWaitSpinner = new java.awt.GridBagConstraints();
			constraintsPostCommWaitSpinner.gridx = 2; constraintsPostCommWaitSpinner.gridy = 3;
			constraintsPostCommWaitSpinner.insets = new java.awt.Insets(3, 3, 1, 3);
			getCommunicationPanel().add(getPostCommWaitSpinner(), constraintsPostCommWaitSpinner);

			java.awt.GridBagConstraints constraintsWaitLabel = new java.awt.GridBagConstraints();
			constraintsWaitLabel.gridx = 3; constraintsWaitLabel.gridy = 3;
			constraintsWaitLabel.ipadx = -10;
			constraintsWaitLabel.insets = new java.awt.Insets(5, 4, 5, 118);
			getCommunicationPanel().add(getWaitLabel(), constraintsWaitLabel);

			java.awt.GridBagConstraints constraintsDialupSettingsPanel = new java.awt.GridBagConstraints();
			constraintsDialupSettingsPanel.gridx = 1; constraintsDialupSettingsPanel.gridy = 9;
			constraintsDialupSettingsPanel.gridwidth = 3;
			constraintsDialupSettingsPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsDialupSettingsPanel.weightx = 1.0;
			constraintsDialupSettingsPanel.weighty = 1.0;
			constraintsDialupSettingsPanel.ipadx = 8;
			constraintsDialupSettingsPanel.ipady = -12;
			constraintsDialupSettingsPanel.insets = new java.awt.Insets(4, 15, 22, 15);
			getCommunicationPanel().add(getDialupSettingsPanel(), constraintsDialupSettingsPanel);

			java.awt.GridBagConstraints constraintsPasswordLabel = new java.awt.GridBagConstraints();
			constraintsPasswordLabel.gridx = 1; constraintsPasswordLabel.gridy = 4;
			constraintsPasswordLabel.insets = new java.awt.Insets(4, 15, 5, 36);
			getCommunicationPanel().add(getPasswordLabel(), constraintsPasswordLabel);

			java.awt.GridBagConstraints constraintsPasswordTextField = new java.awt.GridBagConstraints();
			constraintsPasswordTextField.gridx = 2; constraintsPasswordTextField.gridy = 4;
			constraintsPasswordTextField.gridwidth = 2;
			constraintsPasswordTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPasswordTextField.weightx = 1.0;
			constraintsPasswordTextField.ipadx = 73;
			constraintsPasswordTextField.ipady = 4;
			constraintsPasswordTextField.insets = new java.awt.Insets(2, 3, 3, 37);
			getCommunicationPanel().add(getPasswordTextField(), constraintsPasswordTextField);

			java.awt.GridBagConstraints constraintsSlaveAddressLabel = new java.awt.GridBagConstraints();
			constraintsSlaveAddressLabel.gridx = 1; constraintsSlaveAddressLabel.gridy = 6;
			constraintsSlaveAddressLabel.insets = new java.awt.Insets(6, 15, 5, 36);
			getCommunicationPanel().add(getSlaveAddressLabel(), constraintsSlaveAddressLabel);

			java.awt.GridBagConstraints constraintsSlaveAddressComboBox = new java.awt.GridBagConstraints();
			constraintsSlaveAddressComboBox.gridx = 2; constraintsSlaveAddressComboBox.gridy = 6;
			constraintsSlaveAddressComboBox.gridwidth = 2;
			constraintsSlaveAddressComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsSlaveAddressComboBox.weightx = 1.0;
			constraintsSlaveAddressComboBox.ipadx = 73;
			constraintsSlaveAddressComboBox.ipady = -5;
			constraintsSlaveAddressComboBox.insets = new java.awt.Insets(4, 3, 3, 37);
			getCommunicationPanel().add(getSlaveAddressComboBox(), constraintsSlaveAddressComboBox);

			java.awt.GridBagConstraints constraintsJLabelCCUAmpUseType = new java.awt.GridBagConstraints();
			constraintsJLabelCCUAmpUseType.gridx = 1; constraintsJLabelCCUAmpUseType.gridy = 5;
			constraintsJLabelCCUAmpUseType.insets = new java.awt.Insets(5, 15, 6, 36);
			getCommunicationPanel().add(getJLabelCCUAmpUseType(), constraintsJLabelCCUAmpUseType);

			java.awt.GridBagConstraints constraintsJComboBoxAmpUseType = new java.awt.GridBagConstraints();
			constraintsJComboBoxAmpUseType.gridx = 2; constraintsJComboBoxAmpUseType.gridy = 5;
			constraintsJComboBoxAmpUseType.gridwidth = 2;
			constraintsJComboBoxAmpUseType.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxAmpUseType.weightx = 1.0;
			constraintsJComboBoxAmpUseType.ipadx = 40;
			constraintsJComboBoxAmpUseType.ipady = -5;
			constraintsJComboBoxAmpUseType.insets = new java.awt.Insets(3, 3, 4, 70);
			getCommunicationPanel().add(getJComboBoxAmpUseType(), constraintsJComboBoxAmpUseType);

			java.awt.GridBagConstraints constraintsConfigLabel = new java.awt.GridBagConstraints();
			constraintsConfigLabel.gridx = 1; constraintsConfigLabel.gridy = 7;
			constraintsConfigLabel.ipadx = 22;
			constraintsConfigLabel.ipady = -2;
			constraintsConfigLabel.insets = new java.awt.Insets(4, 15, 7, 69);
			getCommunicationPanel().add(getConfigLabel(), constraintsConfigLabel);

			java.awt.GridBagConstraints constraintsConfigComboBox = new java.awt.GridBagConstraints();
			constraintsConfigComboBox.gridx = 2; constraintsConfigComboBox.gridy = 7;
			constraintsConfigComboBox.gridwidth = 2;
			constraintsConfigComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsConfigComboBox.weightx = 1.0;
			constraintsConfigComboBox.ipadx = 73;
			constraintsConfigComboBox.ipady = -5;
			constraintsConfigComboBox.insets = new java.awt.Insets(5, 3, 3, 37);
			getCommunicationPanel().add(getConfigComboBox(), constraintsConfigComboBox);

			java.awt.GridBagConstraints constraintsTOULabel = new java.awt.GridBagConstraints();
			constraintsTOULabel.gridx = 1; constraintsTOULabel.gridy = 8;
			constraintsTOULabel.ipadx = 15;
			constraintsTOULabel.ipady = -2;
			constraintsTOULabel.insets = new java.awt.Insets(3, 15, 8, 59);
			getCommunicationPanel().add(getTOULabel(), constraintsTOULabel);

			java.awt.GridBagConstraints constraintsTOUComboBox = new java.awt.GridBagConstraints();
			constraintsTOUComboBox.gridx = 2; constraintsTOUComboBox.gridy = 8;
			constraintsTOUComboBox.gridwidth = 2;
			constraintsTOUComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsTOUComboBox.weightx = 1.0;
			constraintsTOUComboBox.ipadx = 73;
			constraintsTOUComboBox.ipady = -5;
			constraintsTOUComboBox.insets = new java.awt.Insets(5, 3, 3, 37);
			getCommunicationPanel().add(getTOUComboBox(), constraintsTOUComboBox);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCommunicationPanel;
}
/**
 * Return the ConfigComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getConfigComboBox() {
	if (ivjConfigComboBox == null) {
		try {
			ivjConfigComboBox = new javax.swing.JComboBox();
			ivjConfigComboBox.setName("ConfigComboBox");
			ivjConfigComboBox.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjConfigComboBox.setVisible(false);
			ivjConfigComboBox.setPreferredSize(new java.awt.Dimension(120, 25));
			ivjConfigComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjConfigComboBox.setMinimumSize(new java.awt.Dimension(120, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjConfigComboBox;
}
/**
 * Return the ConfigLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getConfigLabel() {
	if (ivjConfigLabel == null) {
		try {
			ivjConfigLabel = new javax.swing.JLabel();
			ivjConfigLabel.setName("ConfigLabel");
			ivjConfigLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjConfigLabel.setText("MCT Config: ");
			ivjConfigLabel.setVisible(false);
			// user code begin {1}
			ivjConfigLabel.setFont(new java.awt.Font("Arial", 0, 14));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjConfigLabel;
}
/**
 * Return the ControlInhibitCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getControlInhibitCheckBox() {
	if (ivjControlInhibitCheckBox == null) {
		try {
			ivjControlInhibitCheckBox = new javax.swing.JCheckBox();
			ivjControlInhibitCheckBox.setName("ControlInhibitCheckBox");
			ivjControlInhibitCheckBox.setText("Disable Code Verification");
			ivjControlInhibitCheckBox.setMaximumSize(new java.awt.Dimension(206, 17));
			ivjControlInhibitCheckBox.setActionCommand("Control Inhibit");
			ivjControlInhibitCheckBox.setBorderPainted(false);
			ivjControlInhibitCheckBox.setPreferredSize(new java.awt.Dimension(206, 17));
			ivjControlInhibitCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjControlInhibitCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjControlInhibitCheckBox.setMinimumSize(new java.awt.Dimension(206, 17));
			ivjControlInhibitCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlInhibitCheckBox;
}
/**
 * Insert the method's description here.
 * Creation date: (4/30/2002 1:27:35 PM)
 * @return int
 */
private int getDeviceType() {
	return deviceType;
}
/**
 * Return the DialupSettingsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getDialupSettingsPanel() {
	if (ivjDialupSettingsPanel == null) {
		try {
			ivjDialupSettingsPanel = new javax.swing.JPanel();
			ivjDialupSettingsPanel.setName("DialupSettingsPanel");
			ivjDialupSettingsPanel.setLayout(new java.awt.GridBagLayout());
			ivjDialupSettingsPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
			ivjDialupSettingsPanel.setVisible(true);
			ivjDialupSettingsPanel.setPreferredSize(new java.awt.Dimension(384, 110));
			ivjDialupSettingsPanel.setMinimumSize(new java.awt.Dimension(384, 110));

			java.awt.GridBagConstraints constraintsPhoneNumberTextField = new java.awt.GridBagConstraints();
			constraintsPhoneNumberTextField.gridx = 2; constraintsPhoneNumberTextField.gridy = 1;
			constraintsPhoneNumberTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPhoneNumberTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhoneNumberTextField.weightx = 1.0;
			constraintsPhoneNumberTextField.ipadx = 157;
			constraintsPhoneNumberTextField.insets = new java.awt.Insets(0, 31, 4, 24);
			getDialupSettingsPanel().add(getPhoneNumberTextField(), constraintsPhoneNumberTextField);

			java.awt.GridBagConstraints constraintsPhoneNumberLabel = new java.awt.GridBagConstraints();
			constraintsPhoneNumberLabel.gridx = 1; constraintsPhoneNumberLabel.gridy = 1;
			constraintsPhoneNumberLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhoneNumberLabel.insets = new java.awt.Insets(1, 22, 7, 30);
			getDialupSettingsPanel().add(getPhoneNumberLabel(), constraintsPhoneNumberLabel);

			java.awt.GridBagConstraints constraintsJButtonAdvanced = new java.awt.GridBagConstraints();
			constraintsJButtonAdvanced.gridx = 2; constraintsJButtonAdvanced.gridy = 2;
			constraintsJButtonAdvanced.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJButtonAdvanced.ipadx = 28;
			constraintsJButtonAdvanced.insets = new java.awt.Insets(5, 73, 12, 24);
			getDialupSettingsPanel().add(getJButtonAdvanced(), constraintsJButtonAdvanced);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDialupSettingsPanel;
}
/**
 * Return the DisableFlagCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getDisableFlagCheckBox() {
	if (ivjDisableFlagCheckBox == null) {
		try {
			ivjDisableFlagCheckBox = new javax.swing.JCheckBox();
			ivjDisableFlagCheckBox.setName("DisableFlagCheckBox");
			ivjDisableFlagCheckBox.setText("Disable Device");
			ivjDisableFlagCheckBox.setMaximumSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setActionCommand("Disable Device");
			ivjDisableFlagCheckBox.setBorderPainted(false);
			ivjDisableFlagCheckBox.setPreferredSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjDisableFlagCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjDisableFlagCheckBox.setMinimumSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDisableFlagCheckBox;
}
/**
 * Return the IdentificationPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getIdentificationPanel() {
	if (ivjIdentificationPanel == null) {
		try {
			ivjIdentificationPanel = new javax.swing.JPanel();
			ivjIdentificationPanel.setName("IdentificationPanel");
			ivjIdentificationPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsTypeTextField = new java.awt.GridBagConstraints();
			constraintsTypeTextField.gridx = 2; constraintsTypeTextField.gridy = 1;
			constraintsTypeTextField.ipadx = 233;
			constraintsTypeTextField.ipady = 20;
			constraintsTypeTextField.insets = new java.awt.Insets(15, 2, 2, 56);
			getIdentificationPanel().add(getTypeTextField(), constraintsTypeTextField);

			java.awt.GridBagConstraints constraintsTypeLabel = new java.awt.GridBagConstraints();
			constraintsTypeLabel.gridx = 1; constraintsTypeLabel.gridy = 1;
			constraintsTypeLabel.insets = new java.awt.Insets(15, 5, 2, 43);
			getIdentificationPanel().add(getTypeLabel(), constraintsTypeLabel);

			java.awt.GridBagConstraints constraintsNameLabel = new java.awt.GridBagConstraints();
			constraintsNameLabel.gridx = 1; constraintsNameLabel.gridy = 2;
			constraintsNameLabel.insets = new java.awt.Insets(5, 5, 3, 39);
			getIdentificationPanel().add(getNameLabel(), constraintsNameLabel);

			java.awt.GridBagConstraints constraintsNameTextField = new java.awt.GridBagConstraints();
			constraintsNameTextField.gridx = 2; constraintsNameTextField.gridy = 2;
			constraintsNameTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsNameTextField.weightx = 1.0;
			constraintsNameTextField.ipadx = 110;
			constraintsNameTextField.insets = new java.awt.Insets(3, 2, 1, 47);
			getIdentificationPanel().add(getNameTextField(), constraintsNameTextField);

			java.awt.GridBagConstraints constraintsPhysicalAddressLabel = new java.awt.GridBagConstraints();
			constraintsPhysicalAddressLabel.gridx = 1; constraintsPhysicalAddressLabel.gridy = 3;
			constraintsPhysicalAddressLabel.insets = new java.awt.Insets(4, 5, 3, 14);
			getIdentificationPanel().add(getPhysicalAddressLabel(), constraintsPhysicalAddressLabel);

			java.awt.GridBagConstraints constraintsPhysicalAddressTextField = new java.awt.GridBagConstraints();
			constraintsPhysicalAddressTextField.gridx = 2; constraintsPhysicalAddressTextField.gridy = 3;
			constraintsPhysicalAddressTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPhysicalAddressTextField.weightx = 1.0;
			constraintsPhysicalAddressTextField.ipadx = 83;
			constraintsPhysicalAddressTextField.insets = new java.awt.Insets(2, 2, 1, 173);
			getIdentificationPanel().add(getPhysicalAddressTextField(), constraintsPhysicalAddressTextField);

			java.awt.GridBagConstraints constraintsDisableFlagCheckBox = new java.awt.GridBagConstraints();
			constraintsDisableFlagCheckBox.gridx = 1; constraintsDisableFlagCheckBox.gridy = 4;
			constraintsDisableFlagCheckBox.ipadx = 4;
			constraintsDisableFlagCheckBox.ipady = -9;
			constraintsDisableFlagCheckBox.insets = new java.awt.Insets(2, 5, 21, 1);
			getIdentificationPanel().add(getDisableFlagCheckBox(), constraintsDisableFlagCheckBox);

			java.awt.GridBagConstraints constraintsControlInhibitCheckBox = new java.awt.GridBagConstraints();
			constraintsControlInhibitCheckBox.gridx = 2; constraintsControlInhibitCheckBox.gridy = 4;
			constraintsControlInhibitCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsControlInhibitCheckBox.insets = new java.awt.Insets(2, 2, 21, 83);
			getIdentificationPanel().add(getControlInhibitCheckBox(), constraintsControlInhibitCheckBox);
			// user code begin {1}
			getControlInhibitCheckBox().setVisible(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjIdentificationPanel;
}
/**
 * Return the JButtonAdvanced property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getJButtonAdvanced() {
	if (ivjJButtonAdvanced == null) {
		try {
			ivjJButtonAdvanced = new javax.swing.JButton();
			ivjJButtonAdvanced.setName("JButtonAdvanced");
			ivjJButtonAdvanced.setText("Advanced...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonAdvanced;
}
/**
 * Return the JComboBoxAmpUseType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxAmpUseType() {
	if (ivjJComboBoxAmpUseType == null) {
		try {
			ivjJComboBoxAmpUseType = new javax.swing.JComboBox();
			ivjJComboBoxAmpUseType.setName("JComboBoxAmpUseType");
			ivjJComboBoxAmpUseType.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjJComboBoxAmpUseType.setPreferredSize(new java.awt.Dimension(120, 25));
			ivjJComboBoxAmpUseType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJComboBoxAmpUseType.setMinimumSize(new java.awt.Dimension(120, 25));
			// user code begin {1}

			//CCU-710 has only Amp1 & Amp2
			ivjJComboBoxAmpUseType.addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_AMP1 );
			ivjJComboBoxAmpUseType.addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_AMP2 );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxAmpUseType;
}
/**
 * Return the JLabelCCUAmpUseType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCCUAmpUseType() {
	if (ivjJLabelCCUAmpUseType == null) {
		try {
			ivjJLabelCCUAmpUseType = new javax.swing.JLabel();
			ivjJLabelCCUAmpUseType.setName("JLabelCCUAmpUseType");
			ivjJLabelCCUAmpUseType.setText("CCU Amp Use Type:");
			ivjJLabelCCUAmpUseType.setMaximumSize(new java.awt.Dimension(138, 16));
			ivjJLabelCCUAmpUseType.setVisible(true);
			ivjJLabelCCUAmpUseType.setPreferredSize(new java.awt.Dimension(138, 16));
			ivjJLabelCCUAmpUseType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelCCUAmpUseType.setMinimumSize(new java.awt.Dimension(138, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCCUAmpUseType;
}
/**
 * Return the NameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getNameLabel() {
	if (ivjNameLabel == null) {
		try {
			ivjNameLabel = new javax.swing.JLabel();
			ivjNameLabel.setName("NameLabel");
			ivjNameLabel.setText("Device Name:");
			ivjNameLabel.setMaximumSize(new java.awt.Dimension(87, 16));
			ivjNameLabel.setPreferredSize(new java.awt.Dimension(87, 16));
			ivjNameLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjNameLabel.setMinimumSize(new java.awt.Dimension(87, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameLabel;
}
/**
 * Return the NameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getNameTextField() {
	if (ivjNameTextField == null) {
		try {
			ivjNameTextField = new javax.swing.JTextField();
			ivjNameTextField.setName("NameTextField");
			ivjNameTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjNameTextField.setColumns(12);
			ivjNameTextField.setPreferredSize(new java.awt.Dimension(132, 20));
			ivjNameTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjNameTextField.setMinimumSize(new java.awt.Dimension(132, 20));
			// user code begin {1}

			ivjNameTextField.setDocument(
					new TextFieldDocument(
					TextFieldDocument.MAX_DEVICE_NAME_LENGTH,
					TextFieldDocument.INVALID_CHARS_PAO));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameTextField;
}
/**
 * Return the PasswordLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPasswordLabel() {
	if (ivjPasswordLabel == null) {
		try {
			ivjPasswordLabel = new javax.swing.JLabel();
			ivjPasswordLabel.setName("PasswordLabel");
			ivjPasswordLabel.setText("Password:");
			ivjPasswordLabel.setMaximumSize(new java.awt.Dimension(138, 20));
			ivjPasswordLabel.setPreferredSize(new java.awt.Dimension(138, 20));
			ivjPasswordLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPasswordLabel.setMinimumSize(new java.awt.Dimension(138, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPasswordLabel;
}
/**
 * Return the PhysicalAddressTextField1 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPasswordTextField() {
	if (ivjPasswordTextField == null) {
		try {
			ivjPasswordTextField = new javax.swing.JTextField();
			ivjPasswordTextField.setName("PasswordTextField");
			ivjPasswordTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPasswordTextField.setColumns(0);
			ivjPasswordTextField.setPreferredSize(new java.awt.Dimension(120, 20));
			ivjPasswordTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPasswordTextField.setMinimumSize(new java.awt.Dimension(120, 20));
			// user code begin {1}
			
			ivjPasswordTextField.setDocument(
				new TextFieldDocument(TextFieldDocument.MAX_IED_PASSWORD_LENGTH));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPasswordTextField;
}
/**
 * Return the PhoneNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPhoneNumberLabel() {
	if (ivjPhoneNumberLabel == null) {
		try {
			ivjPhoneNumberLabel = new javax.swing.JLabel();
			ivjPhoneNumberLabel.setName("PhoneNumberLabel");
			ivjPhoneNumberLabel.setText("Phone Number:");
			ivjPhoneNumberLabel.setMaximumSize(new java.awt.Dimension(98, 16));
			ivjPhoneNumberLabel.setVisible(true);
			ivjPhoneNumberLabel.setPreferredSize(new java.awt.Dimension(98, 16));
			ivjPhoneNumberLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPhoneNumberLabel.setEnabled(true);
			ivjPhoneNumberLabel.setMinimumSize(new java.awt.Dimension(98, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhoneNumberLabel;
}
/**
 * Return the PhoneNumberTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPhoneNumberTextField() {
	if (ivjPhoneNumberTextField == null) {
		try {
			ivjPhoneNumberTextField = new javax.swing.JTextField();
			ivjPhoneNumberTextField.setName("PhoneNumberTextField");
			ivjPhoneNumberTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPhoneNumberTextField.setVisible(true);
			ivjPhoneNumberTextField.setColumns(13);
			ivjPhoneNumberTextField.setPreferredSize(new java.awt.Dimension(12, 20));
			ivjPhoneNumberTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPhoneNumberTextField.setEnabled(true);
			ivjPhoneNumberTextField.setMinimumSize(new java.awt.Dimension(12, 20));
			// user code begin {1}
			
			ivjPhoneNumberTextField.setDocument(
				new TextFieldDocument(TextFieldDocument.MAX_PHONE_NUMBER_LENGTH));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhoneNumberTextField;
}
/**
 * Return the PhysicalAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPhysicalAddressLabel() {
	if (ivjPhysicalAddressLabel == null) {
		try {
			ivjPhysicalAddressLabel = new javax.swing.JLabel();
			ivjPhysicalAddressLabel.setName("PhysicalAddressLabel");
			ivjPhysicalAddressLabel.setText("Physical Address:");
			ivjPhysicalAddressLabel.setMaximumSize(new java.awt.Dimension(112, 16));
			ivjPhysicalAddressLabel.setPreferredSize(new java.awt.Dimension(112, 16));
			ivjPhysicalAddressLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPhysicalAddressLabel.setMinimumSize(new java.awt.Dimension(112, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhysicalAddressLabel;
}
/**
 * Return the PhysicalAddressTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPhysicalAddressTextField() {
	if (ivjPhysicalAddressTextField == null) {
		try {
			ivjPhysicalAddressTextField = new javax.swing.JTextField();
			ivjPhysicalAddressTextField.setName("PhysicalAddressTextField");
			ivjPhysicalAddressTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPhysicalAddressTextField.setColumns(10);
			ivjPhysicalAddressTextField.setPreferredSize(new java.awt.Dimension(33, 20));
			ivjPhysicalAddressTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPhysicalAddressTextField.setMinimumSize(new java.awt.Dimension(33, 20));
			// user code begin {1}

			ivjPhysicalAddressTextField.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-9999999999L, 9999999999L) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhysicalAddressTextField;
}
/**
 * Return the PortComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getPortComboBox() {
	if (ivjPortComboBox == null) {
		try {
			ivjPortComboBox = new javax.swing.JComboBox();
			ivjPortComboBox.setName("PortComboBox");
			ivjPortComboBox.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjPortComboBox.setPreferredSize(new java.awt.Dimension(210, 25));
			ivjPortComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPortComboBox.setMinimumSize(new java.awt.Dimension(210, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPortComboBox;
}
/**
 * Return the PortLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPortLabel() {
	if (ivjPortLabel == null) {
		try {
			ivjPortLabel = new javax.swing.JLabel();
			ivjPortLabel.setName("PortLabel");
			ivjPortLabel.setText("Communication Channel:");
			ivjPortLabel.setMaximumSize(new java.awt.Dimension(138, 16));
			ivjPortLabel.setPreferredSize(new java.awt.Dimension(138, 16));
			ivjPortLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPortLabel.setMinimumSize(new java.awt.Dimension(138, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPortLabel;
}
/**
 * Return the PostCommWaitLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPostCommWaitLabel() {
	if (ivjPostCommWaitLabel == null) {
		try {
			ivjPostCommWaitLabel = new javax.swing.JLabel();
			ivjPostCommWaitLabel.setName("PostCommWaitLabel");
			ivjPostCommWaitLabel.setText("Post Communication Wait:");
			ivjPostCommWaitLabel.setMaximumSize(new java.awt.Dimension(172, 16));
			ivjPostCommWaitLabel.setPreferredSize(new java.awt.Dimension(172, 16));
			ivjPostCommWaitLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPostCommWaitLabel.setMinimumSize(new java.awt.Dimension(172, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPostCommWaitLabel;
}
/**
 * Return the PostCommWaitSpinner property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getPostCommWaitSpinner() {
	if (ivjPostCommWaitSpinner == null) {
		try {
			ivjPostCommWaitSpinner = new com.klg.jclass.field.JCSpinField();
			ivjPostCommWaitSpinner.setName("PostCommWaitSpinner");
			ivjPostCommWaitSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
			ivjPostCommWaitSpinner.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPostCommWaitSpinner.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPostCommWaitSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
			// user code begin {1}
			ivjPostCommWaitSpinner.setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(0), new Integer(1000000), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPostCommWaitSpinner;
}
/**
 * Return the RouteComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getRouteComboBox() {
	if (ivjRouteComboBox == null) {
		try {
			ivjRouteComboBox = new javax.swing.JComboBox();
			ivjRouteComboBox.setName("RouteComboBox");
			ivjRouteComboBox.setPreferredSize(new java.awt.Dimension(210, 25));
			ivjRouteComboBox.setMinimumSize(new java.awt.Dimension(210, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRouteComboBox;
}
/**
 * Return the CommPathLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getRouteLabel() {
	if (ivjRouteLabel == null) {
		try {
			ivjRouteLabel = new javax.swing.JLabel();
			ivjRouteLabel.setName("RouteLabel");
			ivjRouteLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjRouteLabel.setText("Communication Route:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRouteLabel;
}
/**
 * Return the SlaveAddressComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getSlaveAddressComboBox() {
	if (ivjSlaveAddressComboBox == null) {
		try {
			ivjSlaveAddressComboBox = new javax.swing.JComboBox();
			ivjSlaveAddressComboBox.setName("SlaveAddressComboBox");
			ivjSlaveAddressComboBox.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjSlaveAddressComboBox.setPreferredSize(new java.awt.Dimension(120, 25));
			ivjSlaveAddressComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSlaveAddressComboBox.setMinimumSize(new java.awt.Dimension(120, 25));
			// user code begin {1}

			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_STAND_ALONE );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_MASTER );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE1 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE2 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE3 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE4 );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSlaveAddressComboBox;
}
/**
 * Return the SlaveAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getSlaveAddressLabel() {
	if (ivjSlaveAddressLabel == null) {
		try {
			ivjSlaveAddressLabel = new javax.swing.JLabel();
			ivjSlaveAddressLabel.setName("SlaveAddressLabel");
			ivjSlaveAddressLabel.setText("Slave Address:");
			ivjSlaveAddressLabel.setMaximumSize(new java.awt.Dimension(138, 16));
			ivjSlaveAddressLabel.setPreferredSize(new java.awt.Dimension(138, 16));
			ivjSlaveAddressLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSlaveAddressLabel.setMinimumSize(new java.awt.Dimension(138, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSlaveAddressLabel;
}
/**
 * Return the TOUComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getTOUComboBox() {
	if (ivjTOUComboBox == null) {
		try {
			ivjTOUComboBox = new javax.swing.JComboBox();
			ivjTOUComboBox.setName("TOUComboBox");
			ivjTOUComboBox.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjTOUComboBox.setVisible(false);
			ivjTOUComboBox.setPreferredSize(new java.awt.Dimension(120, 25));
			ivjTOUComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjTOUComboBox.setMinimumSize(new java.awt.Dimension(120, 25));
			// user code begin {1}
			ivjTOUComboBox.setEnabled(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTOUComboBox;
}
/**
 * Return the TOULabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTOULabel() {
	if (ivjTOULabel == null) {
		try {
			ivjTOULabel = new javax.swing.JLabel();
			ivjTOULabel.setName("TOULabel");
			ivjTOULabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjTOULabel.setText("TOU Schedule: ");
			ivjTOULabel.setVisible(false);
			// user code begin {1}
			ivjTOULabel.setEnabled(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTOULabel;
}
/**
 * Return the TypeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTypeLabel() {
	if (ivjTypeLabel == null) {
		try {
			ivjTypeLabel = new javax.swing.JLabel();
			ivjTypeLabel.setName("TypeLabel");
			ivjTypeLabel.setText("Device Type:");
			ivjTypeLabel.setMaximumSize(new java.awt.Dimension(83, 20));
			ivjTypeLabel.setPreferredSize(new java.awt.Dimension(83, 20));
			ivjTypeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjTypeLabel.setMinimumSize(new java.awt.Dimension(83, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTypeLabel;
}
/**
 * Return the DeviceTypeTextField property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTypeTextField() {
	if (ivjTypeTextField == null) {
		try {
			ivjTypeTextField = new javax.swing.JLabel();
			ivjTypeTextField.setName("TypeTextField");
			ivjTypeTextField.setOpaque(true);
			ivjTypeTextField.setFont(new java.awt.Font("dialog.bold", 1, 14));
			ivjTypeTextField.setText("");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTypeTextField;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) 
{	
	com.cannontech.database.data.device.DeviceBase d = (com.cannontech.database.data.device.DeviceBase)val;

	d.setPAOName( getNameTextField().getText() );
    int devType = PAOGroups.getDeviceType( d.getPAOType() );

    //just in case, set our String type data to the exact String type expected
    // used to ensure the type string in the DB is the same as the code
    d.setDeviceType( PAOGroups.getPAOTypeString(devType) );


	if( getDisableFlagCheckBox().isSelected() )
		d.setDisableFlag( new Character('Y') );
	else
		d.setDisableFlag( new Character('N') );

	/*if( getControlInhibitCheckBox().isSelected() )
		d.getDevice().setControlInhibit( new Character( 'Y' ) );
	else
		d.getDevice().setControlInhibit( new Character( 'N' ) );*/

	//This is a little bit ugly
	//The address could be coming from three distinct
	//types of devices - yet all devices have an address
	//eeck.
	if( getPhysicalAddressTextField().isVisible() )
	{
		try
		{
			Integer address = new Integer( getPhysicalAddressTextField().getText() );

			if( val instanceof com.cannontech.database.data.device.CarrierBase )
			{

				if( devType == PAOGroups.REPEATER ) //val instanceof Repeater900
				{
					((CarrierBase) val).getDeviceCarrierSettings().setAddress( new Integer(address.intValue() + 4190000) );
				}
				else
				{
					((CarrierBase) val).getDeviceCarrierSettings().setAddress( address );
				}
			}
			else if( val instanceof com.cannontech.database.data.device.IDLCBase )
				((com.cannontech.database.data.device.IDLCBase) val).getDeviceIDLCRemote().setAddress(address);
		}
		catch(NumberFormatException n )
		{
			com.cannontech.clientutils.CTILogger.error( n.getMessage(), n );
		}
	}

	if( val instanceof RemoteBase )
	{
		DeviceDirectCommSettings dDirect = ((RemoteBase) val).getDeviceDirectCommSettings();

		Integer portID = null;
		Integer address = null;
		Integer postCommWait = null;

		com.cannontech.database.data.lite.LiteYukonPAObject port = ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem());

		portID = new Integer(port.getYukonID());
		dDirect.setPortID( portID );

		Object postCommWaitSpinVal = getPostCommWaitSpinner().getValue();
		if( postCommWaitSpinVal instanceof Long )
			postCommWait = new Integer( ((Long)postCommWaitSpinVal).intValue() );
		else if( postCommWaitSpinVal instanceof Integer )
			postCommWait = new Integer( ((Integer)postCommWaitSpinVal).intValue() );

		if( val instanceof IDLCBase )
		{
			((IDLCBase)val).getDeviceIDLCRemote().setPostCommWait( postCommWait );
			((IDLCBase)val).getDeviceIDLCRemote().setCcuAmpUseType( getJComboBoxAmpUseType().getSelectedItem().toString() );
		}
		
		if( PAOGroups.isDialupPort(port.getType()) )
		{
			DeviceDialupSettings dDialup = ((RemoteBase) val).getDeviceDialupSettings();

			getAdvancedPanel().getValue( dDialup );
			
			dDialup.setPhoneNumber( getPhoneNumberTextField().getText().trim() );
			if( val instanceof PagingTapTerminal )
				dDialup.setLineSettings( "7E1" );
			else
				dDialup.setLineSettings( "8N1" );
		}
		else
			((RemoteBase)val).getDeviceDialupSettings().setPhoneNumber(null);

      if( val instanceof DNPBase ) //DeviceTypesFuncs.hasMasterAddress(devType) ) 
      {
         DNPBase dnp = (DNPBase)val;
         try
         {
            dnp.getDeviceAddress().setMasterAddress( new Integer(getPhysicalAddressTextField().getText()) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceAddress().setMasterAddress( new Integer(0) );
         }
            
         try
         {         
            dnp.getDeviceAddress().setSlaveAddress( new Integer(getSlaveAddressComboBox().getSelectedItem().toString() ) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceAddress().setSlaveAddress( new Integer(0) );
         }
   
         try
         {
            dnp.getDeviceAddress().setPostCommWait( new Integer(getPostCommWaitSpinner().getValue().toString()) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceAddress().setPostCommWait( new Integer(0) );
         }
   	
      }
      else if( val instanceof Series5Base )
      {
		Series5Base s5 = (Series5Base)val;
		
		try
		{
			s5.getSeries5().setSlaveAddress( new Integer(getPhysicalAddressTextField().getText()) );
		}
		catch( NumberFormatException e )
		{
			s5.getSeries5().setSlaveAddress( new Integer(0) );
		}
		
		try
		{
			s5.getSeries5().setPostCommWait( new Integer(getPostCommWaitSpinner().getValue().toString()) );
		}
		catch( NumberFormatException e )
		{
			s5.getSeries5().setPostCommWait( new Integer(0) );
		}
		
		if(getControlInhibitCheckBox().isSelected())
			s5.getVerification().setDisable("Y");
		else
			s5.getVerification().setDisable("N");	
      }
      
      else if( val instanceof RTCBase)
      {
		RTCBase rtc = (RTCBase)val;
		try
		{
			rtc.getDeviceRTC().setRTCAddress( new Integer(getPhysicalAddressTextField().getText()) );
		}
		catch( NumberFormatException e )
		{
			rtc.getDeviceRTC().setRTCAddress( new Integer(0) );
		}
            
		try
		{         
			rtc.setLBTMode( getSlaveAddressComboBox().getSelectedItem().toString() );
		}
		catch( NumberFormatException e )
		{
			rtc.getDeviceRTC().setLBTMode( new Integer(0) );
		}
		
		if(getControlInhibitCheckBox().isSelected())
			rtc.getDeviceRTC().setDisableVerifies("Y");
		else
			rtc.getDeviceRTC().setDisableVerifies("N");
			
      }
      else if( val instanceof RTM )
      {
			RTM rtm = (RTM)val;
			rtm.getDeviceIED().setSlaveAddress( getPhysicalAddressTextField().getText() );
      }
      else if( val instanceof IEDBase )
      {
      		String password = getPasswordTextField().getText();
			if( password.length() > 0 )
				((IEDBase)val).getDeviceIED().setPassword(password);
			else
				((IEDBase)val).getDeviceIED().setPassword("0");
				
			if( getSlaveAddressComboBox().isVisible() )
			{
				String slaveAddress = null;

				/**** START SUPER HACK ****/
				if( getSlaveAddressComboBox().isEditable() )
					slaveAddress = getSlaveAddressComboBox().getEditor().getItem().toString();
				else /**** END SUPER HACK ****/
					slaveAddress = new String( getSlaveAddressComboBox().getSelectedItem() != null ?
						  		getSlaveAddressComboBox().getSelectedItem().toString() : "" );

				((IEDBase)val).getDeviceIED().setSlaveAddress(slaveAddress);
			}
	  	}

	}
	else
	{
		if( val instanceof CarrierBase )
			((CarrierBase) val).getDeviceRoutes().setRouteID( new Integer(((com.cannontech.database.data.lite.LiteYukonPAObject)getRouteComboBox().getSelectedItem()).getYukonID()) );
	}
	
	if( val instanceof MCTBase )
	{
		if(getConfigComboBox().getSelectedItem().equals(CtiUtilities.STRING_NONE))
		{
			((MCTBase)val).getConfigMapping().deleteAMapping((((MCTBase)val).getDevice().getDeviceID()));
			((MCTBase)val).setHasConfig(false);
		}
		else
		{
			((MCTBase)val).setConfigMapping(new Integer(((com.cannontech.database.data.lite.LiteConfig)getConfigComboBox().getSelectedItem()).getConfigID()),(((MCTBase)val).getDevice().getDeviceID()));
			((MCTBase)val).setHasConfig(true);
		}
		 
		/*if(getTOUComboBox().getSelectedItem().equals(CtiUtilities.STRING_NONE))
		{
		   ((MCTBase)val).getTOUDeviceMapping().deleteAMapping((((MCTBase)val).getDevice().getDeviceID()));
		   ((MCTBase)val).setHasTOUSchedule(false);
		}
		else
		{
		   ((MCTBase)val).setTOUDeviceMapping(new Integer(((com.cannontech.database.data.lite.LiteTOUSchedule)getTOUComboBox().getSelectedItem()).getScheduleID()),(((MCTBase)val).getDevice().getDeviceID()));
		   ((MCTBase)val).setHasTOUSchedule(true);
		}*/
	}

	return val;
}
/**
 * Return the WaitLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getWaitLabel() {
	if (ivjWaitLabel == null) {
		try {
			ivjWaitLabel = new javax.swing.JLabel();
			ivjWaitLabel.setName("WaitLabel");
			ivjWaitLabel.setText("sec");
			ivjWaitLabel.setMaximumSize(new java.awt.Dimension(65, 16));
			ivjWaitLabel.setPreferredSize(new java.awt.Dimension(65, 16));
			ivjWaitLabel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjWaitLabel.setMinimumSize(new java.awt.Dimension(65, 16));
			// user code begin {1}
         
         ivjWaitLabel.setText("(msec.)");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjWaitLabel;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	
	getPostCommWaitSpinner().addValueListener(this);
	
	// user code end
	getNameTextField().addCaretListener(ivjEventHandler);
	getPhysicalAddressTextField().addCaretListener(ivjEventHandler);
	getDisableFlagCheckBox().addActionListener(ivjEventHandler);
	getControlInhibitCheckBox().addActionListener(ivjEventHandler);
	getRouteComboBox().addActionListener(ivjEventHandler);
	getPortComboBox().addActionListener(ivjEventHandler);
	getPhoneNumberTextField().addCaretListener(ivjEventHandler);
	getPasswordTextField().addCaretListener(ivjEventHandler);
	getSlaveAddressComboBox().addActionListener(ivjEventHandler);
	getJButtonAdvanced().addActionListener(ivjEventHandler);
	getJComboBoxAmpUseType().addActionListener(ivjEventHandler);
	getConfigComboBox().addActionListener(ivjEventHandler);
	getTOUComboBox().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DeviceBaseEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(432, 489);
		setMinimumSize(new java.awt.Dimension(509, 472));

		java.awt.GridBagConstraints constraintsIdentificationPanel = new java.awt.GridBagConstraints();
		constraintsIdentificationPanel.gridx = 1; constraintsIdentificationPanel.gridy = 1;
		constraintsIdentificationPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsIdentificationPanel.weightx = 1.0;
		constraintsIdentificationPanel.weighty = 1.0;
		constraintsIdentificationPanel.insets = new java.awt.Insets(14, 6, 1, 4);
		add(getIdentificationPanel(), constraintsIdentificationPanel);

		java.awt.GridBagConstraints constraintsCommunicationPanel = new java.awt.GridBagConstraints();
		constraintsCommunicationPanel.gridx = 1; constraintsCommunicationPanel.gridy = 2;
		constraintsCommunicationPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsCommunicationPanel.weightx = 1.0;
		constraintsCommunicationPanel.weighty = 1.0;
		constraintsCommunicationPanel.insets = new java.awt.Insets(2, 4, 9, 6);
		add(getCommunicationPanel(), constraintsCommunicationPanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	if( getNameTextField().getText() == null
		 || getNameTextField().getText().length() < 1 )
	{
		setErrorString("The Name text field must be filled in");
		return false;
	}

	int address = -1;
	
	if( getPhysicalAddressTextField().isVisible()
		 && (getPhysicalAddressTextField().getText() == null
		     || getPhysicalAddressTextField().getText().length() < 1) )
	{
		setErrorString("The Address text field must be filled in");
		return false;
	}


	if( getPhysicalAddressTextField().isVisible() )
		address = Integer.parseInt( getPhysicalAddressTextField().getText() );

   	if( !com.cannontech.device.range.DeviceAddressRange.isValidRange( getDeviceType(), address ) )
   	{
      	setErrorString( com.cannontech.device.range.DeviceAddressRange.getRangeMessage( getDeviceType() ) );
      	return false;
   	}

   	if( com.cannontech.database.data.device.DeviceTypesFuncs.isMCT(getDeviceType()) )
      	return checkMCTAddresses( address );
      
	//verify that there are no duplicate physical address for CCUs or RTUs on a dedicated channel
	com.cannontech.database.data.lite.LiteYukonPAObject port = ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem());
	if(com.cannontech.database.data.device.DeviceTypesFuncs.isCarrier(getDeviceType()) || com.cannontech.database.data.device.DeviceTypesFuncs.isVirtualDevice(getDeviceType()))
		return true;
	else if((! PAOGroups.isDialupPort(port.getType())) && (com.cannontech.database.data.device.DeviceTypesFuncs.isCCU(getDeviceType()) || com.cannontech.database.data.device.DeviceTypesFuncs.isRTU(getDeviceType()) ))
	{
		address = Integer.parseInt( getPhysicalAddressTextField().getText() );
		return checkForDuplicateAddresses(address, port.getLiteID() );   	
	}
	
	return true;
}
/**
 * Comment
 */
public void jButtonAdvanced_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	AdvancedPropertiesDialog dialog = new AdvancedPropertiesDialog( 
						getAdvancedPanel(), "Advanced Dialup Properties");

	int result = dialog.showPanel( com.cannontech.common.util.CtiUtilities.getParentFrame(this) );

	if( result == AdvancedPropertiesDialog.RESPONSE_ACCEPT )
		fireInputUpdate(); //there has been a change!!!!

	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame;
		try {
			Class aFrameClass = Class.forName("com.ibm.uvm.abt.edit.TestFrame");
			frame = (java.awt.Frame)aFrameClass.newInstance();
		} catch (java.lang.Throwable ivjExc) {
			frame = new java.awt.Frame();
		}
		DeviceBaseEditorPanel aDeviceBaseEditorPanel;
		aDeviceBaseEditorPanel = new DeviceBaseEditorPanel();
		frame.add("Center", aDeviceBaseEditorPanel);
		frame.setSize(aDeviceBaseEditorPanel.getSize());
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setCarrierBaseValue( CarrierBase cBase )
{
	Integer address = cBase.getDeviceCarrierSettings().getAddress();

	if( cBase instanceof Repeater900 )
		address = new Integer( address.intValue() - 4190000 );
      
   if( cBase instanceof com.cannontech.database.data.device.MCT_Broadcast )
      getPhysicalAddressLabel().setText("Lead Address:");
		
	getPhysicalAddressLabel().setVisible(true);
	getPhysicalAddressTextField().setVisible(true);
	
	getPhysicalAddressTextField().setText( address.toString() );
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setIDLCBaseValue( IDLCBase idlcBase )
{
	Integer address = idlcBase.getDeviceIDLCRemote().getAddress();
	getPhysicalAddressTextField().setText( address.toString() );
	
	getPhysicalAddressLabel().setVisible(true);
	getPhysicalAddressTextField().setVisible(true);

}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setNonRemBaseValue( Object base )
{  
   getJLabelCCUAmpUseType().setVisible(false);
   getJComboBoxAmpUseType().setVisible(false);
   getPortLabel().setVisible(false);
   getPortComboBox().setVisible(false);
   getPasswordLabel().setVisible(false);
   getPasswordTextField().setVisible(false);
    
   if( base instanceof MCTBase )
   {
	   getConfigComboBox().setVisible(true);
	   getConfigLabel().setVisible(true);
	   if(base instanceof MCT410IL)
	   {
	   		getTOUComboBox().setVisible(true);
	   		getTOULabel().setVisible(true);		
	   }
   }
	
	getRouteLabel().setVisible(true);
	getRouteComboBox().setVisible(true);
   
   	getPostCommWaitLabel().setVisible(false);
	getPostCommWaitSpinner().setVisible(false);
	getWaitLabel().setVisible(false);
	getSlaveAddressLabel().setVisible(false);
	getSlaveAddressComboBox().setVisible(false);   

	int assignedRouteID = 0;
	if( getRouteComboBox().getModel().getSize() > 0 )
		getRouteComboBox().removeAllItems();

	int assignedConfigID = 0;
	if( getConfigComboBox().getModel().getSize() > 0)
		getConfigComboBox().removeAllItems();
		
	getConfigComboBox().addItem( CtiUtilities.STRING_NONE );
	getTOUComboBox().addItem(CtiUtilities.STRING_NONE );
	
	com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List routes = cache.getAllRoutes();
		java.util.List configs = cache.getAllConfigs();
		java.util.List tous = cache.getAllTOUSchedules();
		
		Integer mctSeriesType = ConfigTwoWay.SERIES_300_TYPE;;
		if(base instanceof MCTBase)
		{					
			for(int j = 0; j < configs.size(); j++)
			{
				//this is a tad disgusting
				if(base instanceof MCT210 || base instanceof MCT213 ||
					base instanceof MCT240 || base instanceof MCT248 ||
					base instanceof MCT250)
						mctSeriesType = ConfigTwoWay.SERIES_200_TYPE;
						
				if(base instanceof MCT410_KWH_Only || base instanceof MCT410IL)
						mctSeriesType = ConfigTwoWay.SERIES_400_TYPE;
				
				if(mctSeriesType.compareTo(((com.cannontech.database.data.lite.LiteConfig)configs.get(j)).getConfigType()) == 0)
					getConfigComboBox().addItem( configs.get(j) );
				
				if(((MCTBase) base).hasMappedConfig())
				{
					assignedConfigID = ((MCTBase) base).getConfigID().intValue();
					if( ((com.cannontech.database.data.lite.LiteConfig)configs.get(j)).getConfigID() == assignedConfigID )
						getConfigComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteConfig)configs.get(j));
				}
			}
			if(! ((MCTBase) base).hasMappedConfig())
			{
				getConfigComboBox().setSelectedItem(CtiUtilities.STRING_NONE);
			}
			
			if(base instanceof MCT410IL)
			{
				/*for(int x = 0; x < tous.size(); x++)
				{
					getTOUComboBox().addItem( tous.get(x) );
					if(((MCTBase) base).hasTOUSchedule())
					{
						if(((MCTBase) base).getTOUScheduleID().intValue() == ((com.cannontech.database.data.lite.LiteTOUSchedule)tous.get(x)).getLiteID())
							getTOUComboBox().setSelectedItem(tous.get(x));
					}
				}*/
			}
		}
		if( base instanceof CarrierBase )
		{
			int routeType = 0;
			assignedRouteID = ((CarrierBase) base).getDeviceRoutes().getRouteID().intValue();
			
			for( int i = 0 ; i < routes.size(); i++ )
			{
				routeType = ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getType();
				
				if( routeType == com.cannontech.database.data.pao.RouteTypes.ROUTE_CCU ||
						routeType == com.cannontech.database.data.pao.RouteTypes.ROUTE_MACRO )
				{
					getRouteComboBox().addItem( routes.get(i) );
					if( ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getYukonID() == assignedRouteID )
						getRouteComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i));
				}
			}
		}
		else
		{
			if( base instanceof com.cannontech.database.data.device.lm.LMGroupEmetcon )
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupEmetcon) base).getLmGroupEmetcon().getRouteID().intValue();
			else if( base instanceof com.cannontech.database.data.device.lm.LMGroupVersacom )
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupVersacom) base).getLmGroupVersacom().getRouteID().intValue();
			else if (base instanceof com.cannontech.database.data.device.lm.LMGroupRipple) 
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupRipple)base).getLmGroupRipple().getRouteID().intValue();
				for( int i = 0 ; i < routes.size(); i++ )
			{
				getRouteComboBox().addItem( routes.get(i) );
				if( ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getYukonID() == assignedRouteID )
					getRouteComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i));
			}
		}
	}
   
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setRemoteBaseValue( RemoteBase rBase, int intType )
{
	getRouteLabel().setVisible(false);
	getRouteComboBox().setVisible(false);
	getJLabelCCUAmpUseType().setVisible(false);
	getJComboBoxAmpUseType().setVisible(false);

	getPortLabel().setVisible(true);
	getPortComboBox().setVisible(true);
	getPostCommWaitLabel().setVisible(true);
	getPostCommWaitSpinner().setVisible(true);
	getWaitLabel().setVisible(true);

	if( getRouteComboBox().getModel().getSize() > 0 )
		getRouteComboBox().removeAllItems();

	int portID = rBase.getDeviceDirectCommSettings().getPortID().intValue();
	//Load the combo box
	com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List ports = cache.getAllPorts();
		if( getPortComboBox().getModel().getSize() > 0 )
			getPortComboBox().removeAllItems();
			
		com.cannontech.database.data.lite.LiteYukonPAObject litePort = null;
		for( int i = 0; i < ports.size(); i++ )
		{
			litePort = (com.cannontech.database.data.lite.LiteYukonPAObject)ports.get(i);
			getPortComboBox().addItem(litePort);
			
			if( ((com.cannontech.database.data.lite.LiteYukonPAObject)ports.get(i)).getYukonID() == portID )
			{
				getPortComboBox().setSelectedItem(litePort);
				
				if( com.cannontech.database.data.pao.PAOGroups.isDialupPort(litePort.getType()) )
					getDialupSettingsPanel().setVisible(true);
			}
		}
	}

	Integer postCommWait = null;
	String ampUse = null;
	if( rBase instanceof IDLCBase )
	{
		postCommWait = ((IDLCBase)rBase).getDeviceIDLCRemote().getPostCommWait();

		//only show CCUAmpUse when its a CCU-711 or CCU-710A
		if( com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 == PAOGroups.CCU711
			 || com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 == PAOGroups.CCU710A )
		{
			ampUse = ((IDLCBase)rBase).getDeviceIDLCRemote().getCcuAmpUseType();
			getJLabelCCUAmpUseType().setVisible(true);
			getJComboBoxAmpUseType().setVisible(true);

			//add the extra options for CCU-711's only!
			if( com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 	 == PAOGroups.CCU711 )
			{
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_ALTERNATING );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_DEF_1_FAIL_2 );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_DEF_2_FAIL_1 );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_ALT_FAILOVER );				
			}
			
		}
		
	}
	

	//regardless of our type, we should set the advanced settings of the port
	getAdvancedPanel().setValue( rBase );
	
	if( getDialupSettingsPanel().isVisible() )
	{
		DeviceDialupSettings dDialup = rBase.getDeviceDialupSettings();

		if( dDialup != null )
		{
		
			String phoneNumber = dDialup.getPhoneNumber();

			if( phoneNumber != null )
				getPhoneNumberTextField().setText( phoneNumber );
		}
	}

	if( rBase instanceof IEDBase )
	{
		//do not show the PostCommWait Items
		getPostCommWaitLabel().setVisible(false);
		getPostCommWaitSpinner().setVisible(false);
		getWaitLabel().setVisible(false);
		
		getPasswordLabel().setVisible(true);
		getPasswordTextField().setVisible(true);
		String password = ((IEDBase)rBase).getDeviceIED().getPassword();
      
		if( CtiUtilities.STRING_NONE.equalsIgnoreCase(password)
          || "None".equalsIgnoreCase(password) //keep the old (none) value valid
          || "0".equalsIgnoreCase(password) )  //keep the old '0' value valid
      {
			getPasswordTextField().setText( "" );
      }
		else
			getPasswordTextField().setText( password );


		if( rBase instanceof Schlumberger 
			 || intType == PAOGroups.ALPHA_PPLUS
			 || intType == PAOGroups.TRANSDATA_MARKV
			 || rBase instanceof KV)
		{
			getSlaveAddressLabel().setVisible(true);
			getSlaveAddressComboBox().setVisible(true);

			String slaveAddress = ((IEDBase)rBase).getDeviceIED().getSlaveAddress();
			getSlaveAddressComboBox().setSelectedItem(slaveAddress);
		}
		if( rBase instanceof RTM )
		{
			getPhysicalAddressLabel().setVisible(true);
			getPhysicalAddressLabel().setText("RTM Address:");
			getPhysicalAddressTextField().setVisible(true);
			ivjPhysicalAddressTextField.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 15) );
			getPhysicalAddressTextField().setText( ((IEDBase)rBase).getDeviceIED().getSlaveAddress() );
			
			getSlaveAddressLabel().setVisible(false);
			getSlaveAddressComboBox().setVisible(false);
			
			getPasswordLabel().setVisible(false);
			getPasswordTextField().setVisible(false);

		}
		else if( rBase instanceof Sixnet )
		{
			/**** BEGIN SUPER HACK --- Special case for Sixnet Devices!! ****/
			getSlaveAddressLabel().setText("Station Address:");
			getSlaveAddressLabel().setVisible(true);
			getSlaveAddressComboBox().setVisible(true);
			getSlaveAddressComboBox().setEditable(true);
			getSlaveAddressComboBox().removeAllItems();				

			com.cannontech.common.gui.util.JTextFieldComboEditor e = new com.cannontech.common.gui.util.JTextFieldComboEditor();
			e.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 16000) );
			e.addCaretListener(this);
			getSlaveAddressComboBox().setEditor( e );
			

			String slaveAddress = ((IEDBase)rBase).getDeviceIED().getSlaveAddress();
			getSlaveAddressComboBox().addItem(slaveAddress);
			getSlaveAddressComboBox().setSelectedItem(slaveAddress);

			getPasswordLabel().setText("Log File:");
			/**** END SUPER HACK --- Special case for Sixnet Devices!! ****/
		}
		else
		{
			getSlaveAddressLabel().setVisible(false);
			getSlaveAddressComboBox().setVisible(false);
		}
	}
   else if( rBase instanceof DNPBase )
   {
      getPhysicalAddressLabel().setVisible(true);
      getPhysicalAddressLabel().setText("Master Address:");
      getPhysicalAddressTextField().setVisible(true);
      getPhysicalAddressTextField().setText( ((DNPBase)rBase).getDeviceAddress().getMasterAddress().toString() );
      
      getSlaveAddressLabel().setVisible(true);
      getSlaveAddressComboBox().setVisible(true);
      
      //create a new editor for our combobox so we can set the document
      getSlaveAddressComboBox().setEditable( true );
      getSlaveAddressComboBox().removeAllItems();
      com.cannontech.common.gui.util.JTextFieldComboEditor editor = new com.cannontech.common.gui.util.JTextFieldComboEditor();
      editor.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-999999999, 999999999) );
      editor.addCaretListener(this);  //be sure to fireInputUpdate() messages!

      getSlaveAddressComboBox().setEditor( editor );
      getSlaveAddressComboBox().addItem( ((DNPBase)rBase).getDeviceAddress().getSlaveAddress() );

      
      getPostCommWaitSpinner().setValue( ((DNPBase)rBase).getDeviceAddress().getPostCommWait() );
      
      getPasswordLabel().setVisible(false);
      getPasswordTextField().setVisible(false);
   }
   else if( rBase instanceof Series5Base )
	{
		getPhysicalAddressLabel().setVisible(true);
		getPhysicalAddressLabel().setText("Address:");
		getPhysicalAddressTextField().setVisible(true);
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(1, 127) );
		getPhysicalAddressTextField().setText( ((Series5Base)rBase).getSeries5().getSlaveAddress().toString() );
      
		getSlaveAddressLabel().setVisible(false);
		getSlaveAddressComboBox().setVisible(false);
		
		getControlInhibitCheckBox().setVisible(true);
		ivjControlInhibitCheckBox.setText("Disable Verification");
		if(((Series5Base)rBase).getVerification().getDisable().compareTo("Y") == 0)
			getControlInhibitCheckBox().setSelected(true);
		else
			getControlInhibitCheckBox().setSelected(false);
      
		getPostCommWaitSpinner().setValue( ((Series5Base)rBase).getSeries5().getPostCommWait() );
      
      	getPasswordLabel().setVisible(false);
		getPasswordTextField().setVisible(false);
	}
	else if( rBase instanceof RTCBase )
	{
		getPhysicalAddressLabel().setVisible(true);
		getPhysicalAddressLabel().setText("Physical Address:");
		getPhysicalAddressTextField().setVisible(true);
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 15) );
		getPhysicalAddressTextField().setText( ((RTCBase)rBase).getDeviceRTC().getRTCAddress().toString() );
			
      	getSlaveAddressLabel().setText("Listen Before Talk: ");
		getSlaveAddressLabel().setVisible(true);
	  	getSlaveAddressComboBox().setVisible(true);
      
	  	//create a new editor for our combobox so we can set the document
	  	getSlaveAddressComboBox().setEditable( false );
	  	getSlaveAddressComboBox().removeAllItems();
	  	getSlaveAddressComboBox().addItem( RTCBase.LBT3 );
		getSlaveAddressComboBox().addItem( RTCBase.LBT2 );
		getSlaveAddressComboBox().addItem( RTCBase.LBT1 );
		getSlaveAddressComboBox().addItem( RTCBase.LBT0 );
		getSlaveAddressComboBox().setSelectedItem(RTCBase.getLBTModeString(((RTCBase)rBase).getDeviceRTC().getLBTMode()));

		getPostCommWaitSpinner().setVisible(false);
		getPostCommWaitLabel().setVisible(false);
		//getPostCommWaitSpinner().setValue( ((RTCBase)rBase).getDeviceRTC().getPostCommWait() );
		getWaitLabel().setVisible(false);
		getPasswordLabel().setVisible(false);
		getPasswordTextField().setVisible(false);
		
		getControlInhibitCheckBox().setVisible(true);
		ivjControlInhibitCheckBox.setText("Disable Code Verification");
		if(((RTCBase)rBase).getDeviceRTC().getDisableVerifies().compareTo("Y") == 0)
			getControlInhibitCheckBox().setSelected(true);
		else
			getControlInhibitCheckBox().setSelected(false);
		
	}
	else
	{
		getPasswordLabel().setVisible(false);
		getPasswordTextField().setVisible(false);
		getSlaveAddressLabel().setVisible(false);
		getSlaveAddressComboBox().setVisible(false);
	}

   
   if( postCommWait != null )
      getPostCommWaitSpinner().setValue( postCommWait );

   if( ampUse != null )
      getJComboBoxAmpUseType().setSelectedItem( ampUse );
   
}
/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val)  
{
	DeviceBase d = (DeviceBase)val;

	String name = d.getPAOName();
	paoID = d.getPAObjectID().intValue();
	
	deviceType = com.cannontech.database.data.pao.PAOGroups.getDeviceType( d.getPAOType() );
	String type = null;
	
	if (deviceType == PAOGroups.TAPTERMINAL)
		type = PAOGroups.STRING_TAP_TERMINAL[2];
	else
		type = d.getPAOType();

	Character disableFlag = d.getPAODisableFlag();
	Character controlInhibit = d.getDevice().getControlInhibit();

	getNameTextField().setText(name);
	getTypeTextField().setText(type);
	CtiUtilities.setCheckBoxState(getDisableFlagCheckBox(), disableFlag);
	CtiUtilities.setCheckBoxState( getControlInhibitCheckBox(), controlInhibit );

	//	CCU's cannot have addresses larger than 128
	if(com.cannontech.database.data.device.DeviceTypesFuncs.isCCU(getDeviceType()))
	{
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0L, 128L) );
	}
	else
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-9999999999L, 9999999999L) );


	//This is a bit ugly
	//The address could come from one of three different types of
	//devices even though they all have one
	//Note also getValue(DBPersistent)
	
	if( val instanceof com.cannontech.database.data.device.CarrierBase )
	{
		setCarrierBaseValue( (com.cannontech.database.data.device.CarrierBase) val );
	}
	else if( val instanceof com.cannontech.database.data.device.IDLCBase )
	{
		setIDLCBaseValue( (com.cannontech.database.data.device.IDLCBase) val );
	}
	else
	{
		if( d.getPAOClass().equalsIgnoreCase(DeviceClasses.STRING_CLASS_VIRTUAL) )
			getCommunicationPanel().setVisible( false );

		getPhysicalAddressLabel().setVisible(false);
		getPhysicalAddressTextField().setVisible(false);
	}

	if( d.getPAOClass().equalsIgnoreCase(DeviceClasses.STRING_CLASS_GROUP) )
		getDisableFlagCheckBox().setVisible(false);
	else
		getDisableFlagCheckBox().setVisible(true);

	getDialupSettingsPanel().setVisible(false);
	
	if( val instanceof RemoteBase )
	{
		setRemoteBaseValue( (RemoteBase)val, deviceType );		
	}
	
	else
	{
		setNonRemBaseValue( val );		
	}

}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	if (arg1.getSource() == getPostCommWaitSpinner()) 
		fireInputUpdate();
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
}

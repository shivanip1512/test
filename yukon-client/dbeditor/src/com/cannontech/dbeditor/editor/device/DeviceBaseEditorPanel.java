package com.cannontech.dbeditor.editor.device;

import com.cannontech.common.gui.util.AdvancedPropertiesDialog;
import com.cannontech.common.gui.util.TextFieldDocument;
import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.data.device.*;
import com.cannontech.database.data.config.ConfigTwoWay;
import com.cannontech.database.data.pao.DeviceClasses;
import com.cannontech.database.data.pao.PAOGroups;
import com.cannontech.database.db.device.DeviceCarrierSettings;
import com.cannontech.database.db.device.DeviceDialupSettings;
import com.cannontech.database.db.device.DeviceDirectCommSettings;
import com.cannontech.database.db.device.DeviceIDLCRemote;

public class DeviceBaseEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener, java.awt.event.ActionListener, javax.swing.event.CaretListener {
	private int deviceType = -1;
	private int paoID = -1;
	private DeviceAdvancedDialupEditorPanel advancedPanel = null;
	private javax.swing.JCheckBox ivjControlInhibitCheckBox = null;
	private javax.swing.JCheckBox ivjDisableFlagCheckBox = null;
	private javax.swing.JLabel ivjNameLabel = null;
	private javax.swing.JTextField ivjNameTextField = null;
	private javax.swing.JLabel ivjTypeLabel = null;
	private javax.swing.JLabel ivjPhysicalAddressLabel = null;
	private javax.swing.JTextField ivjPhysicalAddressTextField = null;
	private javax.swing.JLabel ivjTypeTextField = null;
	private javax.swing.JPanel ivjIdentificationPanel = null;
	private javax.swing.JComboBox ivjRouteComboBox = null;
	private javax.swing.JPanel ivjDialupSettingsPanel = null;
	private javax.swing.JLabel ivjPhoneNumberLabel = null;
	private javax.swing.JTextField ivjPhoneNumberTextField = null;
	private javax.swing.JComboBox ivjPortComboBox = null;
	private javax.swing.JLabel ivjPortLabel = null;
	private javax.swing.JLabel ivjPostCommWaitLabel = null;
	private com.klg.jclass.field.JCSpinField ivjPostCommWaitSpinner = null;
	private javax.swing.JLabel ivjWaitLabel = null;
	private javax.swing.JLabel ivjRouteLabel = null;
	private javax.swing.JLabel ivjPasswordLabel = null;
	private javax.swing.JTextField ivjPasswordTextField = null;
	private javax.swing.JComboBox ivjSlaveAddressComboBox = null;
	private javax.swing.JLabel ivjSlaveAddressLabel = null;
	private javax.swing.JPanel ivjCommunicationPanel = null;
	private javax.swing.JButton ivjJButtonAdvanced = null;
	private javax.swing.JComboBox ivjJComboBoxAmpUseType = null;
	private javax.swing.JLabel ivjJLabelCCUAmpUseType = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JComboBox ivjConfigComboBox = null;
	private javax.swing.JLabel ivjConfigLabel = null;

class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == DeviceBaseEditorPanel.this.getDisableFlagCheckBox()) 
				connEtoC3(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getControlInhibitCheckBox()) 
				connEtoC5(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getRouteComboBox()) 
				connEtoC4(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPortComboBox()) 
				connEtoC6(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getSlaveAddressComboBox()) 
				connEtoC14(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getJButtonAdvanced()) 
				connEtoC7(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getJComboBoxAmpUseType()) 
				connEtoC9(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getConfigComboBox()) 
				connEtoC10(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == DeviceBaseEditorPanel.this.getNameTextField()) 
				connEtoC1(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPhysicalAddressTextField()) 
				connEtoC2(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPhoneNumberTextField()) 
				connEtoC8(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPasswordTextField()) 
				connEtoC13(e);
		};
	};
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public DeviceBaseEditorPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getDisableFlagCheckBox()) 
		connEtoC3(e);
	if (e.getSource() == getControlInhibitCheckBox()) 
		connEtoC5(e);
	if (e.getSource() == getRouteComboBox()) 
		connEtoC4(e);
	if (e.getSource() == getPortComboBox()) 
		connEtoC6(e);
	if (e.getSource() == getSlaveAddressComboBox()) 
		connEtoC14(e);
	if (e.getSource() == getJButtonAdvanced()) 
		connEtoC7(e);
	if (e.getSource() == getJComboBoxAmpUseType()) 
		connEtoC9(e);
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}	
	// user code end
	if (e.getSource() == getNameTextField()) 
		connEtoC1(e);
	if (e.getSource() == getPhysicalAddressTextField()) 
		connEtoC2(e);
	if (e.getSource() == getPhoneNumberTextField()) 
		connEtoC8(e);
	if (e.getSource() == getPasswordTextField()) 
		connEtoC13(e);
	// user code begin {2}

	if( e.getSource() instanceof com.cannontech.common.gui.util.JTextFieldComboEditor )
		fireInputUpdate();

	// user code end
}
//verify that there are no duplicate addresses for any CCUs or RTUs on a dedicated Comm Channel
private boolean checkForDuplicateAddresses( int address, int portID )
{
	try
	{
		String[] devices = DeviceIDLCRemote.isAddressUnique( address, new Integer(paoID), portID );

		if( devices != null )
		{
			String devStr = new String();
			for( int i = 0; i < devices.length; i++ )
				devStr += "          " + devices[i] + "\n";
			 	  
			javax.swing.JOptionPane.showMessageDialog(
				this, 
				"The address '" + address + "' is already in use by the following CCUs or RTUs: \n" + devStr + 
				"\nCCUs and/or RTUs cannot have duplicate addresses on a dedicated comm channel.",
				"Address Already Used",
				javax.swing.JOptionPane.WARNING_MESSAGE );

			setErrorString(null);
			return false;
		}
		
	}
	
	catch( java.sql.SQLException sq )
	{
		com.cannontech.clientutils.CTILogger.error( sq.getMessage(), sq );
		return false;
	}

	return true;
}
/**
 * Insert the method's description here.
 * Creation date: (4/30/2002 1:16:35 PM)
 */
private boolean checkMCTAddresses( int address )
{
	try
	{
		String[] devices = DeviceCarrierSettings.isAddressUnique( address, new Integer(paoID) );

		if( devices != null )
		{
			String devStr = new String();
			for( int i = 0; i < devices.length; i++ )
				devStr += "          " + devices[i] + "\n";

			int res = javax.swing.JOptionPane.showConfirmDialog(
							this, 
							"The address '" + address + "' is already used by the following devices,\n" + 
							"are you sure you want to use it again?\n" +
							devStr,
							"Address Already Used",
							javax.swing.JOptionPane.YES_NO_OPTION,
							javax.swing.JOptionPane.WARNING_MESSAGE );

			if( res == javax.swing.JOptionPane.NO_OPTION )
			{
				setErrorString(null);
				return false;
			}
			

		}
		
	}
	catch( java.sql.SQLException sq )
	{
		com.cannontech.clientutils.CTILogger.error( sq.getMessage(), sq );
		return false;
	}

	return true;
}
/**
 * Comment
 */
public void configComboBox_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	this.fireInputUpdate();
	return;
}
/**
 * connEtoC1:  (NameTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (ConfigComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.configComboBox_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.configComboBox_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC13:  (PasswordTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC14:  (SlaveAddressComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (PhysicalAddressTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (DisableFlagCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (RouteComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (ControlInhibitCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (PortComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		getDialupSettingsPanel().setVisible(
			com.cannontech.database.data.pao.PAOGroups.isDialupPort( ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem()).getType()) );
		
		revalidate();
		repaint();
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JButtonAdvanced.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.jButtonAdvanced_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonAdvanced_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (PhoneNumberTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC9:  (JComboBoxAmpUseType.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 4:29:58 PM)
 * @return com.cannontech.dbeditor.editor.device.DeviceAdvancedDialupEditorPanel
 */
private DeviceAdvancedDialupEditorPanel getAdvancedPanel() 
{
	if( advancedPanel == null )
		advancedPanel = new DeviceAdvancedDialupEditorPanel();

	return advancedPanel;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GB9D6A2B0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8DD8D447393F09A4A106B4A4A18DE9CCCB921ACB921A1004A424253734B50DE96C8DED4C2DCDE82F6935AD3DB5097FFBE9EAEEE9BCA0A0AAA2AAA6A6FE8495BF03880A32A072A1AB0222222082124A429EE063323B6EAE4BA2287FF7E64EBB676C59338B1818476B730CE767B7734E7BB1DF6F19B3B388391F06252724668AC2CA3AA07DABCD9104294F88421962BDF7A01619674A90947F56C3D8A6
	D49FCE0367AAC81B7BABD7C60E706FABB3A1DEGF1678FDC999F416F95421BABAB6E079FBE7864C25A622E890F786773328D79AC20716613D9704C06D084D88B0430BC427F7C49D5926E06F836741B0414D4C168DCCF72CC2EDD2540E7C979CAA02D9EC25A8612676613EB24748840C81EB8F8CEDF4F724E0667C2AA5DCD65BAA9DF471D91C2524FD727AEA13C9465E3E85C40E8ED52B3CFF8189AE23EB0F7FB8DBCAB1A4E77D6F6DB7B8B3B8D960B5562943B7B8A0DDD225164345A8B2507D1F4193A4572F2BDFD
	9EB0B84403B42149E0914DD046CCAA7BCFEAB3E939A0BB444D9B89D62EA7764A075F9590DAB6227C3FDCD2A14997F2BEC21879F036CF7923B6B23927EF14650FD93DA0BDA01F147FA42D8FC2178B71C688CC163F1DC4D9266623AC6F6AC8DEE113ABE3950422CD08BFD7C670FA08F7C2F0EFC29977EFC199DB071F9766F6D526AE75A1E370A6A6DB4CA6D94678274E25FECC5BCC271D54FB92613B5915D1G2189028DC2B00455342D66DC588E4F1AAEE72D353F5FEA2931598E180D7623D623E8065F656510A2E1
	A745EE2B5DA8882CBD3ED4DB20A18F06084D1EED1184265B99815BCF6449A7842733A4B5DDC3376857572646CAE544EF16F5AB58C26C763F34EE67GCE68082E8CDFFA106036ADB24E6A2A1A66A771C8C8F3EFC5BB37E623AC0DE98F89B94555298BB4E4897D491ED47DB6A6C347B6D996E663F2A731F1A0606190E2A1CC071084A1F7BB5A387D426E51EC5CG6D5FEEB1181B873AEC863B73400049EC946D122D1FBD694F56DA01517DF45CF44CAE913B15F51470CC1526DD92A272D30B36B3FB54EF176D42F8A7
	7B645D375D3BEDE473BA6C26FDE2E4BB2B43799C6F27F81082E7F57BD75A37C8FCB224891FC1BB2779DD6584B7FE26EEA337D1BC6CB3F59B09AD43B612GE991852E8CD63FB3864838685C81FD86C28404B888B3A1A4C348A944BA7E6E051DE36CC7CD0A7AE534A67B0770945DCE3B214162F09AAC5D62E9035DE468B20B8EC14AE337933BF6F9508D527E5D8DBC8E099651EEF01A2C96A85D50AFC2E3F230BC936C4BC89E3BC8D3DBCC7DA2B0683789D8EE20FD85BC4D860773144DE8F00AF28E169EECA7ED42E5
	B88DA5C281703B3310586BF7F44CAD025F0D05E82B74C10205C3BC165BE531E3B9BC0FC063964DB00E1B3A0998867B9036D161E0916963241C1D50F7A0349601FDA1F4963BB292A0F46E02B8043E5D5027CADC9921A558FF5FE945F62ADF72BD216075CA4DF6CA5377C87DF70F3A1D2E247C83G8F07B08542AC88E9FBDD99799074900C9082A004C31882E156DE1C136B74F19A3C284C45F29BA7FAE935F722B3F9925D080E281BB28F31831D0394E590BB0C35BF37960D1E1769B224298B19F716A86269BE4A18
	AFBDD730BA95BE127A12B24FE285BF44D60ED18F9C1BC64B435A2143CD7AF2DA29ABA38FC2F5A93645BAC71EC07BA8F1A430D79E37C307920DF24BE4F9EB1DC4F751A5DA1CFA51A6DA0C7043A1750943CEA20B54DFFB2C3CAFB5D11C0C5F3550219C9CBF6DDC46F0A8C3597BB17D1FB45D60F45ACDDD83CE31D9F4BACD16DE193E074A6270189A9C122E83C3C457D6505186E1825775DDA7298B6CF70DD66B7981DB8B99D1247E3B2219745590489FD90A6D59D4C6FC4EF89EF750381C7EF7DD2B327D160E3D9D0E
	FD4E4AADD372187F9516AF7398A9A7FD9E6711F429ED2D155A68D2299D2D165A73CA29BDB35ABBA9ED92683EC687638384B30490883190E6C148AAF3E514C0680090GA1328C6D771332B895DFEC5758B7168AF2BFC23EA84B5A2F5896DF4E06FF253A209E582709AEB8DE20AECABD16C93AAD7E927C3F4A406A7877833E7B7A1F87347B7A3B835AFD7D2F837E7B72BF86347AB2CBCBF391DBDA87AD0A31E1210B4C1F5DD60BC5248394A791583B54BBADC48F134564BCE3B2760A4EE653C5D190124B28EFC46768
	6970BB318C674C410DB8E766DFFCD408BB7731267F9D7ADDDDEAF5B96B5FAD65721C49E4DAB4C8469C51AC760321EA2D83962774AEC167FF89F74CE7BA75D8886D56E360153400996BCC2259D8508DE32133107E4F5C0E2DDF98DC86F721E3900CD5C8EB223016249EA4BF37656D58D11927798ED850E3320B8D965BG16336D7436A256AED7882ECDC314F7D35F104354EDB057980DF65161781A44A896D00E0EE303D48E3D49C1C660BA33213736CF6CBEFF406AAEB050DAADE40FA6515EE335770BC6AAC721E1
	50A989D1C3132FC60ADD128C3FEF3CC8E52805B7ED3B555CE069B3F5191CDF1B98A5E88B63201D4AF1528A3D83FC65AE6B57413E18734F5CEBE3ED42EAF7FEED6C77B05EF7178FC86D51EA910F8D74F709762F29AD167236383F4F41E400C1EB905E673F2E4E006DB0F9187549E63341A5CA9D726BEB863B399D3EDF709DAA47618383CEA73C2F99DD64354B78550A7005E76167EAD425B67AAEF69F08DBA6491A63F4B3D951D0B57D36D38E31E548A6DEFB1395C9E36932EF637851E36A3DB6B5566DD176F82DD5
	DC0CBEC644C5B2BFB9E15E8A0490D60EBEF150A0C9C71FD8F27CEB2DE6B31BDAA1ADED9F19B7CF9C4CD54C05B165EC3DB51B27DF9AA57D51D152DF9FA5BD254EFF7A0ED1525BC6C93FE9147427C6C97F6DA8698B8F79CF5F63B31D555310BB0778C8620581913A8D19B20F08C3381E61DE2ECABBEDB08F486BA401EE62DB1A956FBB8C9F9E5276D9EE98A26FB867F979B78D1145F817D4A67331228C24CC1B5D548F2F076485CEDAD75F5E2CDCD7EF845D489AFC90BC43A0B05A4A63447F7535FE5DD8C14A79C5B9
	2E3D47GDDBC04B9D2D985954CAEACDF70BE4C978A71288ADF79749518AF9E620990B277EB654B5C0F796AA13DF33F2FFC31BC5F84C88F05902319EFC2A5661B8B69B9153E7215D4E13EA248D3DF69CB0FC41E2F8F72CC7019EFF2B5668BA3BCFD72ED2A41FCB3C8D990F22AD83E26AAE53E5C8318EFB260519026D7E915B703674B2D06B4880D55D29B28E679E6D413FCD9FA7CA63013E39BA976A63CB85D1A066B2EC7F3145FD60C0EE2CD5F1C04B5B52C7C229A75FA74EF07C939CD00F7566038B7EFC83996D0
	63F0D83BCDF4B9D06A9BCFDCD47A6D8CFB6662A2F8420460F0B6408B119B7B578B97092CE43DD00225BE7278E77B856F75CF565AF12925F6108E56AD56DA2BD12C07AEDA4BDFEBCE1BC462A3B3BBDC2AD3FE2309DD3AB9F5318FBBB8A57DC394F688F96ADCAA13693EF2B25FEBFDE76A26C296768E188A871CA632B0E9F09A684C47FAA67B1693C257C8483B6D749A7CE6D3FA1C0CA3D987DC997990AAA030756377683AB2615B82D89084B6563DBC2C9C6B26GBE9BC2CE2DAB034D2B1F6FA3EDE21C3E17E473A9
	5B1633BAD2CD5AE84707D6D4CBFC27BD7110D0F1E50166F72440254BD273EB25F6DDAB5B31733D2329CE88CC3F977621FE2110A73E9675FBF13D16FE19FA34CBFF85522D812CC50FF4C7AEAA6902740CAEDA0FF619DE318B1E63F7AFF0BD3FF8BF721D8AE58A87116F6ACEAD3E3A03A86F9FB8DDA341B85DD01712AE9670D990B26BD05E464AAFA76F23155CCED0E6CB9D728D6F53629BD40772FEDE05F4E1004D60F4CF0B6AFA49B9644AA8B904F44B2A112E9E30890710AE2ED4CDC77845F03A97B95DB4C2D30F
	F4B125DAF2D654A35DD08D52B581964869166B15F4F175CC4E44FA346B4C1A2B35AB6BA3CFAF2C046717F344310E769FC09D12C13E128654A1CCD3F7F3836A90FE604B350D14DA64BB814A0C61FC1DEDDAFC67F03EFD35DF4EF6B3AF13B17DCBF965FCCCBF33CBB937454D5C64F3EECBBB4C4620D50755F35B0FAF11713884707A43B837158C1375B61C5BCE42ECE2307402574757760609AD403F1362FF9CA6FC29FFA7607B428717099DBB20CCB704E088919026F29E7DA323FE3FBD6876737D763EE675375044
	43725AF9B27C4EB96239164E3ED59A1A689E06A36CDBE5BA474D9457A9F029FD9E67E39724C59D41F56764F2B57F5CC6CFFEC52AB823DB34CFCDD7280A372868D83B59341578C5F45ED5CCE365650779E283731F431B147E333911FD0B8806E7F8A36E2790C6C81D13B56558C67C4E58A21072730E4278822185028DC28804A888530FE23D450EE879A41E75664BA1113F51B0DB7C484B96E33361AFC635E152D155B7BF2AF772FA54BB6B987F9ED3F1F5B25C60C5271641F6CC2B9EABCF2F562EC7DCB614E43D11
	7A0F64BDA7104BDA3A7F6AE4BD68C52716F576B1ADFB1D6CC499520E238CFF39CA995E9FD5063E63DA766AB57B3217B4F8CA6F0DF76C57EA7793204C1063586E233A08BEE46C0C647ABCD9F9F57A7C500BCE2D4F2C63DAB6FD330F48C0FC6FE4AEC3F7555549F0410BCEADC3E713A79D335571B6352D489C67063CC1CDE82BBF0B19827B36945E04F2FED4FDF5F2EE7222D34B19F9C24BD6FFAB457E1AF782E5F865AAE5784D28B284E84A70EEA95657E4AE43151A2B1361F6AF3AF52A38F0D22B8FACEDA6E334C6
	9FE09E981735013E7F921AD5A7D1565A83D7A76B89AFBA353D1ACEEA596B575CDEFDDC0685DE7B5A46A643CAAFBA353D26E94A70F89B5AE156C91C5FC2D28836265915D1500CF3594717C85BC2BF2749EA32B88574F1FEF6092CD9D96D26DE138531D7A856ED35530F098C4B38627BBB6712AB5A5FB9D7DC517E4E7971957FFB9A56DF71759D146DBF08226F569520DF9384065DFE0AE0CE0887F16C0953840B027854E62C235EA602A5C0BC19E3F60A4D165ED72476F41C6CA5A0F914F6D70684BFE92385462303
	727035AFA6DB78F2FB9856D27A17BFDCCAED6DF0088E6A3010558AA96DCF4E15024677E17239D540EF9D3B77AD14729CF4DAEB0B856C2B7F330D0C2D9AFD15AE023076195004EBA0EBDAF08D645523444FECA1F18881ADE86F7411D6BF3ACCEE7134F514941F824F992A34599097CEF9E252DE9941F79B96856DB6FC1E0E4B8E6B003DDBD437D33B300A27495EDF03D36CA7A614560EA93D53E06F953D5A790D141E2579223FCD705597D87D3C67D1BF3BF85BCA59604F1E39AA7BEC15629570ECD22599A16ED6E1
	0C77E395CA5E3BB96FDBAEEA718E124A88131E510AB227426F8488F3D4FC52CE3BB2D6C1A800D0FD1A25B15E167DCA5EFBB86FB31DDA3CDBA45ABE69B9F2DA66938C3F43A1441C7664BD8D62B3A1A4C148BC23643D21D2493BC4407178257D3C3D1F41763E5DC05BBB09C388B8036D7D59AE9C73A78396F546137794084FB823E573BFFA705E4B751E59672F3EE71F519E2B04D6D7C6EE2B2AADC03C22D50B77372A143CF5DC6FDB68BCC47AD6D3AB6A7D3E11689D8D71E990E635225E6F087E64CC06FCB9EDB26F
	FC69378E1E0DED1EB2F5C25C89A1D001B3B90FD5AFD248C9BE5CCA6F3225FE4798D579D1D2FC8ABCE72852E6C3DCE85732D1EA0D876F92641D6417F7EE3BF67DEC853CC2155684F123A66F67EA1475D34A5B46B13D56FEEA37D4C61086EFD65E45834A724AF8F989FEF5897321CBB460D3D5E989901F2329CBE52D079D0B10F7D41B3FFD69E9E7E13CB82BB5765F17C256BB5CBC7EG0D8FF1FEAFB5931F47EC98328E00F394FA166ED3665F688AA02E07E006B061ACFB67E27360D30344876C319B7AE1D8EE3609
	5D0233032ECF1CC25A1910BF89C2AE60A590DABAF00D6D4553049688CD7D837DF473D592257DAD75DBE26177D41E77072748F71886B2E519FACC5D52FEED723DC1DAC36EA66B79E431E2406211AC596D2DA6255DF41FC3FF7ADC36D367675EF546560B4E9D235F43BFE76BC54BB8EE23F81882E76BC82F53791D4427C1DA6BBF51975BC257E2E6C1BC19E3476A8816F34E1511FF8E31FBA92603F88B47A2683BE49F445D9C8BB1F2FF6F1CE7F98990CF6258468D48B7339331575D48F78D47BE9EC23EC59CEBDF03
	FC759C5B3C9C7936F26C62C6649B4131C7693AC6AC4427F12CF298E5194931B09D4112A01EE3C0CCA8A3D83E015916E16B4AD03EEA1E6F01F6142F05E3B18C037888474A4E22FC019CEB26FCA79BD8BBE618DD073A4572FCC31D28C7D697E2EFF4229E2BB8763B7D28C78147EC155EFA5CD249756079BEBA4775605805AD5EFAFCEB8B6A5147739D3C6C2DC747E554E3248B671DE99E6BB253G1F59A5377924AEDF6D7F13AE521EB33B198E6BB93E1B62AD8A1C357FA2BA5F13F89824C59AD14EE9F4CDA6C6F4E5
	CC9739FD2A88168871E40EBDDF0532E775A03648C0308E08BBB916EAA2D8A04443B87694FDA70D06F8BC474E5339F9964413B8965A06BCB2FB91DBC75BCDAB44ED3DE83320B665B89FGF8E82FEC27C8789D576BED37699AD8A2E049AADCBA1BA392FB6574B1BBAE6078904537AAF0E65FF9542FA071EAC88B6FC379F3FA509E19A60E51F502B590AF62D88B457490EF655883FA341B19E3B1A25AED8247EEEC207B5EA19E4131D79A50EE319C2BDE07760D6758BA5A37723EF0E5683E60FD0B56C3A309F36CA72C
	EEA09E4C315F52FA8D07F8B44712AEA20F299C7B000E912B4E033E67917B107255C33C03E393A98F9B4403B8F6BB65918671A80E9D98C69ED3B816C873651A211F1B9193297D2AA15E44311F6B113603E39FD05AC808CF6158BF29ACB3A01E4431F01AAF339F4617FE440EF3D98AB876924DB78271909963EDBBC215EFAE4433AC78CDB123854FE0668156EA41793C3853637B8379B8D5DEFE48EEB29EB074B6D26F00793C47DAB2A57AE08B7A3CA3344C29901F89E12E8577CD3BB7631E0448C79E929AA7D4E91E
	9B1D5932B9B5474A7AC809D57EFEB56B29F3290C674FCFA1CF9B24C7D889B6771472BB9E7185EA6633B5AC163E7D34B21D4C4B5B84E5FA07C7BA115760C17F8D0F74F485BD536D15CD28DB72ABD10279599DBE4F444E11F44A35C96F012FFDA2CC0DBC165AE8A3E71833E9F14C177964F89EBCAD62E09E7FBE28B7750B96F208EC6B1E2232023C1252DD5B987F30C16537C15D224FFCFE9B8C167806CB4F2C745552FCB1172D8981BE4706EDE6101E454D3D604A58FA8131771A31EDB5DE40B1D2BCC6E41D8C7198
	88719092A12459412701D08F214F0EF9DDB4EF9044A3A1CC33337DDA336DECBF9659EBC576D1313CEF9E1D202103BA909E546F350FFDAD0A48C91EC42E49123C759A7471DC478F46A48B1E5D984F798CDC7BDAA655BD2953259A7996703671528E6AB39B5CAA1F39097A17D98E98B39C68B30BF5042E5BEA9E6837B824FCA354C7A4EB250DBC5F8F0A086CB63B58A35A6D22119D03107247517C9D10370F677F7595326F2F47EAF132BC3F247EE9882407C148F45235D9235E0F5E73D5E1BA50A5C258A859A499FE
	3FA24867FDD6887587345F958629FCCD40338382439A294F9B8871900EFD6046EFDCD3B9F6007A3CB3A0BE0BE393294F1BB3G3E71G6A32FF79E83A24ABF4E99A7054458871FBA4DD980F07293FEC83FCE4GED9AF7115854A93AA51B7EBB1D5FA2A0BDFAGE56B25F3C0BC4493B85D73BAD2F7EC0382F97BB1D80C1CCF3C8E4B48F4E17E0F4AC87EAEAB59405BE4B0D91C221C7F90733BA1EF118BF97E0C7AC59D906F63E53C5A1EC15B201D2E1933716BED723AAA1553C57D6DD0489F4EE93E50117737BE2B5D
	F4915A0D41DCE3B675DA481EB9015978D61DBF9B238F04B6CED4349712966FE2F34D3B73664DE3722C4D126519CF7D478448134875DAC07D705CC1D7C65EA0E2D1942B06F8A3472A29EF6E06F8G47FECA7D70E808478DE29BF1DC9E2D0D7813FFB614F3D4121F0D357F399F47643903B87EFEDE05E3729AB7E23F2E46B1395A0D63D5DED7B5BC03A19E89E18A048488C990F207609D9CC2A384B304C088919026C2C80410F99146FB887A0BD8D699AD0B6CDB6DGEC8482591BBA991E319092C87C90783697599E
	53B543EC8FE945B05B7BC976F5F68CE3D9FB8DC459310E0DC4C6AD5C6C83A7FAC6C8E9C4874475526F92A90D58E4AC7CF3B578E4CAE521BD83A55B91DBA77A10CBEBACDFA68C0D4B964BFC60AB7C7078C87A7D2982DFAFBDF10E71776DC5EBEED386BCD309E7B049587A31543ED70F31DCB6B67CE7176F79A7193EB70EC09B8A9C46316416AAB27E30B1CC906206C93EEFD71171B3FA987B633FD5796B0FB8DE63B3ED8466CD88ABA52CGFE7F8774453FC1E0BC579B34671FB2BA3668A03FFE84650B6C501E23BF
	236F2CB648B7427366F478567D8D763EGF9E3F87E0AF24F39B7043D5FC27A1C91547D493651F4CFD7681EF749D37712CBEA5DA715EB6BFE084E8D55103F71927F66C865F1C3BC08E3BB68FC908571A99C0B6C407755C40E4D50617BEAB2475617613BE94EE544DC6DB86665F3EC128E5FC31D17791E9F7A8E9D88718888D3B8FE0562E46F7C4C4BECAF3B748D4EEBED1E50F90DB392962811B6FA3FDF6745C32B8F62196071FE7F145AA4DD8B902E407B5E95ECB76F6AC819AE1343C44EF5C879785E7AEA1E6F3C
	5E5BE73C1166A3FD3A698A778BA85689F1B3475E22EB8621908F67655D57C04A93AD64B809D1AAAF2A81794E6034C994CBA471AB580E4F2C9BCB9F4610B781663689325FD58F3F7725A8FD48BDBA6DFEF914361D96485FB981658EEE7336433F34617BE7884F771BB65F7D773FE97EF0489B4573A715FA765FC514F78224A7CEC03D978F0F2677C2057EEBEE706C3FC5903FDB4A43F82E7451FFF714935E95103F7E86142F3BDD5BC6D5ECED9472CD60F9FFDF6ADB77C82AFB94640D65796FED73547DB9BA3EA5C2
	FA528D28FB5B283AAFD1681EFF23276E3A9B196E7258756BB6ED5D1731F5A1485FF4A34AB722C79F1C7910550415641F3E259F4B180AED31C45196C9FB99819EE50232AD2E77E167ADD42EC0489F4265FA570F1D593747A910B71E6737286C7C8BEA67E4C84F1C08F66E99554E0B95BA69A6FA5A399162A7BC6C7C2A8FBB4F213CDBA13F11737E5D28731312F7300AF7B844A7FA5872F7255EE35BDFCB312FC6CD4471BD2B656A6E027A64AA691A47CD4756FE0F1DA273531409EC6DB70563E7A89E2F4059DA5E0D
	FCADAF81522A83F0AF5446EC728DAE9C62F190E6C01883A167A6704BEF423DD19BD2491D9CFE777936D8ED0D22CBB4AB36AAB17DDEBDF5F5F7E47DF8812E19C5FF7FB1A1666637D3FC1DD12A3E094D311D52D3772BCFA84E74FBEEA951AF9852A2A144C3C804108CA177E6546F0B5482269FB9CED563F49A3A7B68C9ADD40E9C1E12E172811349786AD9653ADA4E37D626267810F16B4D527B454D6ABD776B1651EFB80087F0F91A97FE864F5306AF3CCFF98158E4375AC43BF3082174F4265446171ED07A3C6C7B
	6C6693780DB59C4A0F051084A17396F6AE0751FD632477F75D6F72FB8F73EEE15FF5F570EC1468D89FDD52B21E759BA3503AEFE1FD14440360B7F9B7116FF1C84DA7E398B9F64DB73273B456AEC8DA23210B1E6DD462E4AF109ADFA261DAE51175DA552D95149C53D7F92773E2B08F899AB7CEF09E644EB16D5BA0701C6E9347146B462112EDE3EF4173A7BFAC50CA0F67697D5DDA6933F8FA4BA52D7439249E695CF5B7799CAE49DBD337D970391E3C2B382434C437FBEFC9E9C15E2E22EDC8F3F7DDAA293FDD38
	3E735C8A393C877ABE75DDDE716EDD2CA0C67768AA196E9663A6B5DD9D98F16B86074162F008F6D34F06023C22023C629232467E29E4EB6A4B52FFF32A3CB114EF9A69F2527872D6960EAFEB9EFFD8507F7A6D941C07556DB8AB1075590EC0396F4EDC37A01D15B93CDA163D745258F5FEE80DCCB755BDFE5B2F9C2236AFC25DDEDCAB17F7FC4DBA5F656D5EAD154368FAB648F49FAF7F3236E7E55E3AD136F9E43EDCFE6145314B756AA605DD0749F9758DD2E713AEB75840727D77E6B95FBDBAFF765FD58C8C76
	EE13723E2F73DD664A2DF219F7350F25CCC6C72F7A1468A25BB7E85B52E8B2182D3D8AC3B25A104FE45A7AB16941681EAF10ED7D468E390C57767BAD23C4D946BF8AE53A3ECA320E34C19A38722411EB8367D1D2A4674DBAB7F69E6F6F126944AD63334D1A9219367C7258F9CEA1DB9E2579AC2B92673310C0B68FC642B3AE106DE7E6F9EE2E42BCB382591CB7871EE937CAE7D1691C77CE75F8567957GED512D721C273FD5764BA41FF8BD1927BCEE6B61E9C306C518A6CDEE8CFF30070CE164069D4FB96F051E
	AC89472298BE3FF799459D5401BBE3B02968FE5933C2155EECB3D94846F6167E974A4F1BEEEDAF1B834185316126DB65FE2BAABA8763CDB81E34D345E50AB46FB97A37EE122E3C4546137E413D392AF4CF1DF37209EC07A9D1ED6DA979C69709BEEFBFCD773E71C5CA5F729929CF4F5BD878FBD95FE21E4624E2736D07D56A7916341B26DBF1BE7E55D92DF4A3CF5F2C53CAF77374639E67D10324F6994753EFAF55221F4E53FFA4EA25A77274DB5B345213F97AA14D741CC9183ED1D37E7CC968EF7CE92FE28C28
	72530FF79543G30EB8F0E5551D504CE3A3BD9D47A5CC543FFCD19AFE84F5B3AC9EC3E2E1FA4FF4B9E1F3FF0D4A77F361549323FDFB99659A59F2BDC267BEE69FA5FF43BF7156EADE5145C1F5AA753F6360D1D6772CA19AE28ED2CE32D6F79FCCF15EC0756EA396C057E66A9D59D3E58667DEE12404F1E39A731B1B9981E61135877A2C627BF6B7DEEF276AC5245CEE26374F4F8A6CAF46C5D7EF53AF6AC5C664A483A8D310CB2DCD32C6758E10A35C25CF89B0E7137370FB64613EFA3782DAE986842EF13477898
	78CD462EBF4F1BB70F71F8062E57CC81BC7EB6548B5FC13CEFAA43749C4FF4457B49274B89FF554DDA52983438D25D876937375B308FDE29116BEF3EFE7CFEE793DB7F328F08525A2D1E7A213B31FDBCF4C0AE7FFB229FFF2FF817073FB73FC1269BE8980F9F4AE8DEEAC039D8F91B8F4B656DD9B796B946B7B6B49C11FF7F3DD166E5EE9B3FCD7F350D0CDFC53C3CF5476472FED56A575FA9D23ED35C54A4537D6962D7634BC71C1075FC6524D24F314B75CE33CCB758B63EB1F059A919764651ED4147C0779919
	EE6F70179F836FEF156D702FEDF2595BC7378317692DF6390C348E390C13633449164FE55A7B46E11321DA192E76AB3049E43D2C4F0F8E4AE51F9913CDFC177B7BBA392CAC9D7127FB8CE687D94FE6EB0AAD34CD305F1FABFE873678BBF371E583637160B56541567F8A32FD1F415B1D2DFD862FACDB7B9CE9D5367F7BF28FE57B3EAF77D836723EDC36DE79B43DDBAEA74815D1G2189029102BB8857AE9332C93BA23771FB2F239EB47612B3006486FEA7727F51D25F3A7EEC696877763F3A143CA3F5D9E1AA6C
	A765A37E7AD2D2DFCE2B0D028CFBE3A931115D545B67E4D9A5FC66D252864DE28F05191E2F568BBC5D16C346D24D75D8506AB0347163DDDF085D4E96C3AF275938ACDBE9F736CCAB25EDDFC6ECC86E94063EE63AC88F22B4C3C6CBAFDB2BBFF6827F66C28858F5DA906E3B7D53DAB286E85D37A5DF3455E2F21A4583121BA51DBD7B66897C4E11F6BB6E431DC2F9D4C03C05E037631E5FDF703F3B92GD86C6DF887404AE6ACA30917D15BCC7296FC83FCB0889D9046B607E2BF5FC967E8692CEC0F0F3332546FE1
	B27C6198A9035421739BA8D7D2814148FBE6A447423B914B3983315BAEA1663C833FFD2CBDC286309990CF0230AA985E55A168A1F4C030C18800908AA18A42D488899066C0C83B5315118BE1AB040ABB316DAF7BE41B2FF6822034C11AF6G3B011DAFE7B6AF29447AEE0232826FC419C7AA5166F1F7224D9F23F967C2BC67AE60FF97565B93D5D8EF5500396F42B25E2B625F386E42B272699DD30990976E863D6F9EEF3D3DCF7D9DD67ED1DABE69EBC5F7A34F059DE86BBE0EFD2EC3EC5A5D581EAF6F5D2CEC4F
	674D3D05DFF413512B3007B84264E28F3290A1AD8C30F2EE265FB2497BF7D18816BD055F8D51473177C44E0FE3F1ED08955D0358E5FEAEB304E36DBAECE7F36F41367248D162DF96FD936BFAFB6986BFF5CD6E3BE1BD9A6BB82D9D6BD88FE50CFC93F9B536E37DC4FF936B67A24DBB9B62E9773AB2565C0BF5BC71AC56F189E066FB310CD74EE2996177723325B4EF824413A0E405227F1FFBDC90F0EEFDD9C7967E46622B725F5CE7DDDB6669EF17AAFC4F736DF93E4B5D2DAB81472238E85B785ADC3B428F3D24
	70C3930CE361456CF40076A7B29F6607E2BDFE7F106F79674707C61FFFFEFE0814A9423CC1960F24B969903DAF222747A172F9EE7A219C0EB5B81A2C8E939975A5FF6644E85FC883C3356E44689A15CEFDC786233BFFD4BAF5E05F16F5F4EE888FD5FFF32E21F8D4287A1B734FCFE0FB0D05343C7B709B7BEBD77977165E3ACA3ACF3C6E879B1B3E4F5379AD60BE353EF1948F3ECF2DEFC3B36ABB995204EF213E7FF58C799B81F3FFCBBAD3ACBD433E653DC7CC3AA729C04B570C1672CF5520A3A18170B92A3434
	7BE11C3FDF2B8DBD5A2D4523C04ADBFD3FB60F96407BD4E9A3908F566491FCC90BC73814B746870FE9004FD425A5C1BCF33256596562A33E7B316E48687D386608369FF96808379F59F8C45B0FBCF9C469C7B26C4C91B25775425C5F4A73F5F02C0DE386DAA6414E180C4EBE0E77D23988DEAF92060877D33986A9560AF7EDA830B67C9BD6C748D884AA77D979BDB5A3C7685E9F1359AC5D79CC7318ACB0B4F1FB5CC4E5B4598C8A39A7F12C0D57ED39575DD7E39B3B6AC725539E3BEE9815CE3BAF2F237E511A49
	6A3E3C0562DBA72B7BF2D4A51FEBA1ADF4B27665E82FFB3646B6867D64AA697EBEEEBA26D7A87571123D74FD1062198F28755DDE0D7A66C21A7B81547724877F0487D8DD4E111EE95F76B5F6E5F7E87579D5D27E828DBABA5EG5E22CA6B03784837B567BF1D960FE0A9EF388F9EB100CFD3254D04F812A60F5B78DD8A195F81DF6CBB2A3B2AA02E07502A40995D4B1A77BF1825FC933E23ADDB8860912A34D80847FFC7CB363FEB5E93B2CB4ABB57870F2CB0180B43BC53CAA0DE9F26456345B6AD9E9DD2DEDB18
	B60FG40C3D5E911900F5364B1D11347F4A9EFA2BC13B57864BC684A48FF509357C13C71C1AD9E67F44AF65CA965F1CA4FC0F8CED65131B16F3123E4ECF4C83E3CF4EFE77B550DF92BC625539E73CE0CCA278E2C2F3FC35FA3229ED40F81FF23F86C036AB1E0C2BB0E81D3A12D60A19C83EEBDFBF5E3573DD7C997BFEEBA691CFC87754B9ED26B6B22786407547A4E636FD391101675B06AFB28D22BBD5A9EE6F59AG4F50073D5BE3A4E0F1AAFCBA4493A1A4ABF0F62FD85C8A729EEA3218CD9631167D05C92EFF
	A5FD3F11E4D17C0EBFF16D57B77F7CB57078E1332C534F943F0FB7DFFB5EFD571487BBE712F21C1E8F8D0771A99C4F1E9C26188E62759C8B2167A3BAA0EE66587B7CCEGB747D66FA058D4084F60D89445487DA233B996DEC4F91C03F70F6FA296F7056EAF85AC17E3A59FA10F2D9CABBEC04F98107BE3B876CAB7728D62D807917906F16C975B10EFB447A64EC73ED3B976FE9D72CD6058DD8711EF41A308BDFD8979D6F3CCFF997936F06C3DEA645B4731455D48F704E3297B10EFB0472296A25F190FE03F4F2F
	125B628E456F67B447032F36DD3E7AB57078F6352C533FA8FE97D5DFFB5E8D5714872BD393DD0BCC027ACC7B972C67D3E984DB85712D9C7BFE9A3607920E9551B54BG0807F06C9EFE7EAC0CE36F1F4533E6519C5BC44F4810FBD026F24CFC0937F50EB94A717CD9C184E281BA64DB4D31BF6810EFA3470A5B10EFA747EEA8C53ECE0E4D9DC13E019CFB2B94794E6058C33C3C599CF3727204C7793DC343A8CBAE47D672BB1036F2ECC29B72F0F36CAF343CA008CF66D893BBEF8E71B80E6D243453A1BE07E337D2
	5A3447006FE3BC9F3F5FE4AB47FECA7339A19E4C313574ECDBB84423B9F6A34562A0BEC32625FF3FF1B644B39FC76C8E3AEE3C8662859CDB4B6FCB2966581FA8968C718895968B71E99CE36B3B64EE19999CFB054ACC6E16197D38277D485DB2C2A4E20FF13E399CE3EB5864EE99A3473E4B4ED3C2BC10E30BA8DFF20FCC88476E20FCA3A09E4B319994A3F74B44F36C8CAD0F5CADB30BE32FF2D966F2AC06E264EE197A6F71F31734FEBBA0EE661805565B840887F36CB5DE1713B996CAE9499DB4333F07E3F2D2
	3BBCCE7DC3717B6676EBBFE6FD67EB60616810F59AD17CCE57FCFF7EEAF92F3B26BC24B1399247B761892C677F2D64E38A477E63935A6FCC5037B936F1B50ED1959C7BC6850ED1CD9C1B3317E0644EA9A347CA7818671673D9304D85BD017B30D69D27EB75B6438572FD166D575AF99C7709A570FC06631E676586E91E5910BE1767F9DCF5B6B00C7A36ECCFD94E41517614611EE09254F7BF94BC694AF8AD055DAB44F86D5A61F997C8BD7587F510CF7FA46EED7B8F0AF5C25C4C316954C78C05F8B8475E26BEE2
	BC44931E44BDF0C7BE9A6D2E8DFF72E6C5496FDA0CC7A775AFD7811E9F454F73D2DF2D89629D9C3B097A17EE0887F06CBD6ADFC6C1BC16E311543FCCA471A814B96750E8B24F77A3F37ED3EA19FFC0FD53A240AB1EC23EEF52F93D8F62CE0E75D35FB48462E19C7B3406E053A0BE03E3A5D45F3427617753A873477BC613B95D0F4C55CF2BE57E8D75EB9B81EFFD9A5B6504AA4F367BCD6AA785C0FAB04FE3CE73EC3BBFED115B6EAF5346F34EEB15621E847A6D7AE9751E77C39D1E3C7EC27E0C0DA47F946AF3CD
	831A99CF235D36D1AC6D99787D8CE2A75939E40857BF03361CF8E9BCFB7355F23A211C039E36FC087288GBC78997CFE1A5DAA4B1ACD770E46C25AD4AED7BB1D9313A0AEC4A376989D0B8AA02E0BC6D9170EAA6B82BF3276C52B6B1D1D91F782BE0173FD054A928971980EBD40FCBC084F61D8B51D0B731FF5E594BD0B7295783DEBA7FD94790C4F2A65FB145D27877848335866D2F51E6D20D8312F2E5747B97CAB4CFF04B222F9B9F5FE4E571F23FCE7C25E59BCFF186AFCBDBBE33E6AB9981B1EC37D6B7C1EFD
	DEB00A7EADD04E5B73664D135B7C9B255AE71F7F1B726E047C6667D03E129ECF3B34344BF6392FC75BAECFD17FB6944A8867653CD16B5BAE7FC3FD5FF8481B4073BFA2FA5AA5167A42194F43BC7DBC5A25446F39ECD24EC2BFF651BF2F9E8BBE70F1A67CC36A3FB6C17E0E67D13E8F5ABC6DB2F8D66E0B43B4FFA0648DF99E5B755F29ED63A0BE0DE35F236DE1AE4453E2D0279F0F2A5392BFBA1544285B7A3B14C7B5600DB1A8FB2CCA763E4FE5594B286CEE489B4073BF22F1DE7D07256817C44520BE1934BF44
	C1FC9A4782180E90CFFB81F57C6328BAAE7627638BEA9D593BCEB5600DAF204C376BBC5B4F43D4B6B7248770BCB78DFB5A6136FF92BBB0997F4BEF1F9BCD46E8AF99FFCC7953B96885344DDD54771C8E71199C5BC86743E4E22B6FF33B2EC6DB17F02C11E2FA08B7F16CF96A0F0EC0BC10E39F73FA0A615867941B8A71695F47BAD9E09D4F3C2A3EAFC278013AAF559D775C1373C1274053EE51EF917C6C77AD6C321A0D9B8A720A5926DFC63F3E0B50335F7AEE392CC7F79079B630B313F9E45FCB79864C57EB14
	735DD764E75F3D4E733C67A4D126FB764A58697E58AB53ED7DE8FC678A971AE47D8A3E104BE96A9EBB7F6367E53AD3C625DD4859F359AEF6331C6FA75B7C15DF8AB26E65655F53AF5339670F1D6E7FD9E53AAD7A7159A57702EC17D23BDCCE6470587937BBE43A0A4BE4CF5786BCD01FA79D588363C87B391CF25E3FD47B5BBBCE8EEB9473731D0F8F48F4C27758699638E53A774A47E71B6DC332ED0EDE144B09D8BFF67ECF2449F48DE963637F4BF419FFD206DC4EBBE77D1EBD57A9795365FF096E1372315315
	AC1669BAAF0DCF6EB3D9325C9717A846A57F7784F870FFA0DB265B6C770CC129073D63164AF4AE3F67A5BC690EAB6EB318BDB2BEFD6D39323E772C144B59B58E39E3BE1469CC25FE7A5E9EF224E297677D6947B25D2261711C83E274F51F4874193A711CE7E2742655326EC10AFB8EEC635061C945FD8679EDFE68766E7198F7FE35CE263B6C0F1F0A2EF03DCC37F1CCE7E3E4D9CFEC10750D59282C6B3173FFD3F1CFC2CC6DE8FDC2BEDB7501621E04GF16CF46DDBE53AE5E3BEA3AA0D575BE4FD4394F79EBC6C
	37EFF9727F29623E0338D16964BE71478219EE40EFDF7224BB30D3267B76B875950BE4FD830B65F26E9F075C0FAB6EBF8898939D4BBB3D5453277B375DF2B90D6350FF3B626C75CF47297F51D2D9FF1BCEAEE762B8747FE505CC57B56633E752BC37DF261D61F19ECC1A4F2A64747F29A4037D86FAF0B60F1D1C65FEC6F9351CEF7AA7FE7AE619A43A147753551EF55027B8C3BB31E2AC65C877D1544AF433760E5586ACFF112A9D7CC9AF1775874B58E5D8C44F56FDC46956578E420F483705F407DDD86ECDDB73
	0D5F7CBA721CBEB7D5C8ED90B27A683E5286A1FD10ECD0F55B604DE38604FFG6DD2CE5BC0B7114EF46DAE1F7F1F8F4FCF95520010ED2AED9052484ED8203733F266BB2DB6D20A102A8CCEA1876FE4116EA0F1B80545F84839303050F1C138CCD490F22F4C1BB7CF0EC188GD116F818734587777CF15A6FCEBB668B998D4247644D349926BCF268CAB412BF72F7DA3493C56B0405B672979F497A834869200FF407F348ACB68A39BDA7458B832243A99AEB70B8974834127EE16E1D6454554EFA03234FC9E45E57
	A824D9406FF78A4BD93259E0695D49CE026C234A2654F4D2F929AB83722E207212D28AF9A9ABFE30F4537A4333E2668B29F542A23355E02CB3F4BB2D7686E121338FBC67BEF8D7F35B2AE8EB96B28709B7C7DF0C213855DCFD22ECA1B9D44E05BE6FFEA0E8C96292F2E9135BAE6C24B9490BF8A14FE12C6DB3580115E8EF00E0G1679BC6D06F54E4D3FB874D1C72A10A2A9C9CC3F48EDF38A99BD06FE13F948A9AC64CE852D17ECC01CF600481FB2876172D442E19267D1F8774BC577BC7A3F6D1407CC6A94BEE5
	5684521D3D2235FFE7CDCF0F49A272824034D07CDADEBC49D3284A335CFD674A432F4F6B0226209766779795517F0B697F3B487F4594A926C871AE306F9C416FBFF53A9BF5266D07778A52828A6B20921DEF3C7D72C3EFD64C198D5A55896974CF24C3BD64483958F0F5F364BDEB97074C3C0DD4130D3496B7A9F7B9AB1E741194292F1099ADD55581FCF78E8B0DE5FAB5C102E6F937A58267A8EB14GABE86E15747FD563368F217A04522E61EAED72D66BFBDEEA2DF78A591E97B571E462298EE944462BE7869B
	F62F0D12C5EE8D89092AF8C5EB0A074AA44F08D3D82A3A0349B37D7A53F21FDBC3C25412BCDD9EDA12F714DF71BC38483509EB6119C70ADD192711F6DDD9215E2D29D31A8F1D3C7B699D57E5BFBD697690B20BABC93C9262852E62C2EA2B653EAE556A10EB8BEB0C54D62A0668641FF78B3CBA352EE98B6C719CD2D127799AF213BCE4DD065C3DC2AAB07D7F162697E4AD7043AE71EE53FCE8CA52C9F35D4C2D01B64A10D232B93AC4C2C80A549AC81376E85696A01E60A141D2A924FA66F10263AE64FA7C5D49BC
	FA2BDB39D378509386874CC27E8239D3D8C56EE34B73CCA5D730C152FC07588DFD83AFCF83A41BDE044697D61D42325A5AD3F9B57D363CD38EE9059EBC562335ADF9AD03569D030621BCF6FBD9F9DE1EE63526782856B42CD6BD2DD674F8B25819B3D6BD04665A54772D5ABED00AD348D2FE0B70683C4D9A316B2A91FF53330112E6C416C666FB4AAD2BC8BFAB70C4F228780CC66C3AD271C1EF95494728B4CF392151FAFDA17048E15308DDD7FAC6FA6B196D2567D54A2D3F06F2C74BF213B10F0CE01FF219D06E
	C99A316B4A7ABF741C8D68B88CA1430F96119A316BCA27173CEB46DBA7D98B723DE057F569E845AB7CC7BE09AADD949AB494C1A5EBB4E2CCC926D25698143CA6D5D5AD455F74ECFE243A488BCF3A8FAD4828BEC9A3F6DDB53FBFF8B7BF7219A24D07967FA70609F7BD87E954A9FDD4AD2EE31D5E17F5DA2050C9EB683B1EA61E1494D9EE42F7039496B805A59E8B789EFAF4E9442E275AC8D96C5610906B060CECE435BEC53A4FF65B9565FD36F3EF4A727937D9ABDEE3E7C81BDED37F8D0983745E09A040A3DE43
	FBED6EBACCAE8377F5E7D9F33F41ECF69A4C67EBACC6F2FF5901A1272838936E88A95F01F924C469CEB8FACF45978A1A7F8FD0CB87889F30181A50B2GG7033GGD0CB818294G94G88G88GB9D6A2B09F30181A50B2GG7033GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG8AB3GGGG
**end of data**/
}
/**
 * Return the ConfigurationPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getCommunicationPanel() {
	if (ivjCommunicationPanel == null) {
		try {
			ivjCommunicationPanel = new javax.swing.JPanel();
			ivjCommunicationPanel.setName("CommunicationPanel");
			//ivjCommunicationPanel.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjCommunicationPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsRouteComboBox = new java.awt.GridBagConstraints();
			constraintsRouteComboBox.gridx = 2; constraintsRouteComboBox.gridy = 1;
			constraintsRouteComboBox.gridwidth = 2;
			constraintsRouteComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsRouteComboBox.weightx = 1.0;
			constraintsRouteComboBox.ipadx = -17;
			constraintsRouteComboBox.ipady = -5;
			constraintsRouteComboBox.insets = new java.awt.Insets(0, 3, 3, 37);
			getCommunicationPanel().add(getRouteComboBox(), constraintsRouteComboBox);

			java.awt.GridBagConstraints constraintsRouteLabel = new java.awt.GridBagConstraints();
			constraintsRouteLabel.gridx = 1; constraintsRouteLabel.gridy = 1;
			constraintsRouteLabel.insets = new java.awt.Insets(0, 15, 4, 31);
			getCommunicationPanel().add(getRouteLabel(), constraintsRouteLabel);

			java.awt.GridBagConstraints constraintsPortLabel = new java.awt.GridBagConstraints();
			constraintsPortLabel.gridx = 1; constraintsPortLabel.gridy = 2;
			constraintsPortLabel.ipadx = 34;
			constraintsPortLabel.insets = new java.awt.Insets(6, 15, 5, 2);
			getCommunicationPanel().add(getPortLabel(), constraintsPortLabel);

			java.awt.GridBagConstraints constraintsPortComboBox = new java.awt.GridBagConstraints();
			constraintsPortComboBox.gridx = 2; constraintsPortComboBox.gridy = 2;
			constraintsPortComboBox.gridwidth = 2;
			constraintsPortComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPortComboBox.weightx = 1.0;
			constraintsPortComboBox.ipadx = -17;
			constraintsPortComboBox.ipady = -5;
			constraintsPortComboBox.insets = new java.awt.Insets(4, 3, 3, 37);
			getCommunicationPanel().add(getPortComboBox(), constraintsPortComboBox);

			java.awt.GridBagConstraints constraintsPostCommWaitLabel = new java.awt.GridBagConstraints();
			constraintsPostCommWaitLabel.gridx = 1; constraintsPostCommWaitLabel.gridy = 3;
			constraintsPostCommWaitLabel.insets = new java.awt.Insets(6, 15, 4, 2);
			getCommunicationPanel().add(getPostCommWaitLabel(), constraintsPostCommWaitLabel);

			java.awt.GridBagConstraints constraintsPostCommWaitSpinner = new java.awt.GridBagConstraints();
			constraintsPostCommWaitSpinner.gridx = 2; constraintsPostCommWaitSpinner.gridy = 3;
			constraintsPostCommWaitSpinner.insets = new java.awt.Insets(3, 3, 1, 3);
			getCommunicationPanel().add(getPostCommWaitSpinner(), constraintsPostCommWaitSpinner);

			java.awt.GridBagConstraints constraintsWaitLabel = new java.awt.GridBagConstraints();
			constraintsWaitLabel.gridx = 3; constraintsWaitLabel.gridy = 3;
			constraintsWaitLabel.ipadx = -10;
			constraintsWaitLabel.insets = new java.awt.Insets(5, 4, 5, 118);
			getCommunicationPanel().add(getWaitLabel(), constraintsWaitLabel);

			java.awt.GridBagConstraints constraintsDialupSettingsPanel = new java.awt.GridBagConstraints();
			constraintsDialupSettingsPanel.gridx = 1; constraintsDialupSettingsPanel.gridy = 7;
			constraintsDialupSettingsPanel.gridwidth = 3;
			constraintsDialupSettingsPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsDialupSettingsPanel.weightx = 1.0;
			constraintsDialupSettingsPanel.weighty = 1.0;
			constraintsDialupSettingsPanel.ipadx = 8;
			constraintsDialupSettingsPanel.ipady = -12;
			constraintsDialupSettingsPanel.insets = new java.awt.Insets(2, 15, 5, 15);
			getCommunicationPanel().add(getDialupSettingsPanel(), constraintsDialupSettingsPanel);

			java.awt.GridBagConstraints constraintsPasswordLabel = new java.awt.GridBagConstraints();
			constraintsPasswordLabel.gridx = 1; constraintsPasswordLabel.gridy = 4;
			constraintsPasswordLabel.insets = new java.awt.Insets(4, 15, 4, 36);
			getCommunicationPanel().add(getPasswordLabel(), constraintsPasswordLabel);

			java.awt.GridBagConstraints constraintsPasswordTextField = new java.awt.GridBagConstraints();
			constraintsPasswordTextField.gridx = 2; constraintsPasswordTextField.gridy = 4;
			constraintsPasswordTextField.gridwidth = 2;
			constraintsPasswordTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPasswordTextField.weightx = 1.0;
			constraintsPasswordTextField.ipadx = 73;
			constraintsPasswordTextField.ipady = 4;
			constraintsPasswordTextField.insets = new java.awt.Insets(2, 3, 2, 37);
			getCommunicationPanel().add(getPasswordTextField(), constraintsPasswordTextField);

			java.awt.GridBagConstraints constraintsSlaveAddressLabel = new java.awt.GridBagConstraints();
			constraintsSlaveAddressLabel.gridx = 1; constraintsSlaveAddressLabel.gridy = 6;
			constraintsSlaveAddressLabel.insets = new java.awt.Insets(5, 15, 3, 36);
			getCommunicationPanel().add(getSlaveAddressLabel(), constraintsSlaveAddressLabel);

			java.awt.GridBagConstraints constraintsSlaveAddressComboBox = new java.awt.GridBagConstraints();
			constraintsSlaveAddressComboBox.gridx = 2; constraintsSlaveAddressComboBox.gridy = 6;
			constraintsSlaveAddressComboBox.gridwidth = 2;
			constraintsSlaveAddressComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsSlaveAddressComboBox.weightx = 1.0;
			constraintsSlaveAddressComboBox.ipadx = 73;
			constraintsSlaveAddressComboBox.ipady = -5;
			constraintsSlaveAddressComboBox.insets = new java.awt.Insets(3, 3, 1, 37);
			getCommunicationPanel().add(getSlaveAddressComboBox(), constraintsSlaveAddressComboBox);

			java.awt.GridBagConstraints constraintsJLabelCCUAmpUseType = new java.awt.GridBagConstraints();
			constraintsJLabelCCUAmpUseType.gridx = 1; constraintsJLabelCCUAmpUseType.gridy = 5;
			constraintsJLabelCCUAmpUseType.insets = new java.awt.Insets(6, 15, 7, 36);
			getCommunicationPanel().add(getJLabelCCUAmpUseType(), constraintsJLabelCCUAmpUseType);

			java.awt.GridBagConstraints constraintsJComboBoxAmpUseType = new java.awt.GridBagConstraints();
			constraintsJComboBoxAmpUseType.gridx = 2; constraintsJComboBoxAmpUseType.gridy = 5;
			constraintsJComboBoxAmpUseType.gridwidth = 2;
			constraintsJComboBoxAmpUseType.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxAmpUseType.weightx = 1.0;
			constraintsJComboBoxAmpUseType.ipadx = 40;
			constraintsJComboBoxAmpUseType.ipady = -5;
			constraintsJComboBoxAmpUseType.insets = new java.awt.Insets(4, 3, 5, 70);
			getCommunicationPanel().add(getJComboBoxAmpUseType(), constraintsJComboBoxAmpUseType);

			java.awt.GridBagConstraints constraintsConfigComboBox = new java.awt.GridBagConstraints();
			constraintsConfigComboBox.gridx = 2; constraintsConfigComboBox.gridy = 5;
			constraintsConfigComboBox.gridwidth = 2;
			constraintsConfigComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsConfigComboBox.weightx = 1.0;
			constraintsConfigComboBox.ipadx = 65;
			constraintsConfigComboBox.insets = new java.awt.Insets(3, 4, 3, 38);
			getCommunicationPanel().add(getConfigComboBox(), constraintsConfigComboBox);

			java.awt.GridBagConstraints constraintsConfigLabel = new java.awt.GridBagConstraints();
			constraintsConfigLabel.gridx = 1; constraintsConfigLabel.gridy = 5;
			constraintsConfigLabel.insets = new java.awt.Insets(7, 34, 8, 34);
			getCommunicationPanel().add(getConfigLabel(), constraintsConfigLabel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCommunicationPanel;
}
/**
 * Return the ConfigComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getConfigComboBox() {
	if (ivjConfigComboBox == null) {
		try {
			ivjConfigComboBox = new javax.swing.JComboBox();
			ivjConfigComboBox.setName("ConfigComboBox");
			ivjConfigComboBox.setVisible(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjConfigComboBox;
}
/**
 * Return the ConfigLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getConfigLabel() {
	if (ivjConfigLabel == null) {
		try {
			ivjConfigLabel = new javax.swing.JLabel();
			ivjConfigLabel.setName("ConfigLabel");
			ivjConfigLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjConfigLabel.setText("MCT Two-way Config:  ");
			ivjConfigLabel.setVisible(false);
			// user code begin {1}
			ivjConfigLabel.setFont(new java.awt.Font("Arial", 0, 14));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjConfigLabel;
}
/**
 * Return the ControlInhibitCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getControlInhibitCheckBox() {
	if (ivjControlInhibitCheckBox == null) {
		try {
			ivjControlInhibitCheckBox = new javax.swing.JCheckBox();
			ivjControlInhibitCheckBox.setName("ControlInhibitCheckBox");
			ivjControlInhibitCheckBox.setText("Disable Controls");
			ivjControlInhibitCheckBox.setMaximumSize(new java.awt.Dimension(124, 26));
			ivjControlInhibitCheckBox.setActionCommand("Control Inhibit");
			ivjControlInhibitCheckBox.setBorderPainted(false);
			ivjControlInhibitCheckBox.setPreferredSize(new java.awt.Dimension(124, 26));
			ivjControlInhibitCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjControlInhibitCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjControlInhibitCheckBox.setMinimumSize(new java.awt.Dimension(124, 26));
			ivjControlInhibitCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlInhibitCheckBox;
}
/**
 * Insert the method's description here.
 * Creation date: (4/30/2002 1:27:35 PM)
 * @return int
 */
private int getDeviceType() {
	return deviceType;
}
/**
 * Return the DialupSettingsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getDialupSettingsPanel() {
	if (ivjDialupSettingsPanel == null) {
		try {
			ivjDialupSettingsPanel = new javax.swing.JPanel();
			ivjDialupSettingsPanel.setName("DialupSettingsPanel");
			//ivjDialupSettingsPanel.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjDialupSettingsPanel.setLayout(new java.awt.GridBagLayout());
			ivjDialupSettingsPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
			ivjDialupSettingsPanel.setVisible(true);
			ivjDialupSettingsPanel.setPreferredSize(new java.awt.Dimension(384, 110));
			ivjDialupSettingsPanel.setMinimumSize(new java.awt.Dimension(384, 110));

			java.awt.GridBagConstraints constraintsPhoneNumberTextField = new java.awt.GridBagConstraints();
			constraintsPhoneNumberTextField.gridx = 2; constraintsPhoneNumberTextField.gridy = 1;
			constraintsPhoneNumberTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPhoneNumberTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhoneNumberTextField.weightx = 1.0;
			constraintsPhoneNumberTextField.ipadx = 157;
			constraintsPhoneNumberTextField.insets = new java.awt.Insets(0, 31, 4, 24);
			getDialupSettingsPanel().add(getPhoneNumberTextField(), constraintsPhoneNumberTextField);

			java.awt.GridBagConstraints constraintsPhoneNumberLabel = new java.awt.GridBagConstraints();
			constraintsPhoneNumberLabel.gridx = 1; constraintsPhoneNumberLabel.gridy = 1;
			constraintsPhoneNumberLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhoneNumberLabel.insets = new java.awt.Insets(1, 22, 7, 30);
			getDialupSettingsPanel().add(getPhoneNumberLabel(), constraintsPhoneNumberLabel);

			java.awt.GridBagConstraints constraintsJButtonAdvanced = new java.awt.GridBagConstraints();
			constraintsJButtonAdvanced.gridx = 2; constraintsJButtonAdvanced.gridy = 2;
			constraintsJButtonAdvanced.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJButtonAdvanced.ipadx = 28;
			constraintsJButtonAdvanced.insets = new java.awt.Insets(5, 73, 12, 24);
			getDialupSettingsPanel().add(getJButtonAdvanced(), constraintsJButtonAdvanced);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDialupSettingsPanel;
}
/**
 * Return the DisableFlagCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getDisableFlagCheckBox() {
	if (ivjDisableFlagCheckBox == null) {
		try {
			ivjDisableFlagCheckBox = new javax.swing.JCheckBox();
			ivjDisableFlagCheckBox.setName("DisableFlagCheckBox");
			ivjDisableFlagCheckBox.setText("Disable Device");
			ivjDisableFlagCheckBox.setMaximumSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setActionCommand("Disable Device");
			ivjDisableFlagCheckBox.setBorderPainted(false);
			ivjDisableFlagCheckBox.setPreferredSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjDisableFlagCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjDisableFlagCheckBox.setMinimumSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDisableFlagCheckBox;
}
/**
 * Return the IdentificationPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getIdentificationPanel() {
	if (ivjIdentificationPanel == null) {
		try {
			ivjIdentificationPanel = new javax.swing.JPanel();
			ivjIdentificationPanel.setName("IdentificationPanel");
			//ivjIdentificationPanel.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjIdentificationPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsTypeTextField = new java.awt.GridBagConstraints();
			constraintsTypeTextField.gridx = 1; constraintsTypeTextField.gridy = 0;
			constraintsTypeTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsTypeTextField.ipadx = 233;
			constraintsTypeTextField.ipady = 20;
			constraintsTypeTextField.insets = new java.awt.Insets(1, 2, 1, 47);
			getIdentificationPanel().add(getTypeTextField(), constraintsTypeTextField);

			java.awt.GridBagConstraints constraintsTypeLabel = new java.awt.GridBagConstraints();
			constraintsTypeLabel.gridx = 0; constraintsTypeLabel.gridy = 0;
			constraintsTypeLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsTypeLabel.insets = new java.awt.Insets(3, 5, 3, 43);
			getIdentificationPanel().add(getTypeLabel(), constraintsTypeLabel);

			java.awt.GridBagConstraints constraintsNameLabel = new java.awt.GridBagConstraints();
			constraintsNameLabel.gridx = 0; constraintsNameLabel.gridy = 1;
			constraintsNameLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsNameLabel.insets = new java.awt.Insets(4, 5, 3, 39);
			getIdentificationPanel().add(getNameLabel(), constraintsNameLabel);

			java.awt.GridBagConstraints constraintsNameTextField = new java.awt.GridBagConstraints();
			constraintsNameTextField.gridx = 1; constraintsNameTextField.gridy = 1;
			constraintsNameTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsNameTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsNameTextField.weightx = 1.0;
			constraintsNameTextField.ipadx = 101;
			constraintsNameTextField.insets = new java.awt.Insets(2, 2, 1, 47);
			getIdentificationPanel().add(getNameTextField(), constraintsNameTextField);

			java.awt.GridBagConstraints constraintsPhysicalAddressLabel = new java.awt.GridBagConstraints();
			constraintsPhysicalAddressLabel.gridx = 0; constraintsPhysicalAddressLabel.gridy = 2;
			constraintsPhysicalAddressLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhysicalAddressLabel.insets = new java.awt.Insets(4, 5, 3, 14);
			getIdentificationPanel().add(getPhysicalAddressLabel(), constraintsPhysicalAddressLabel);

			java.awt.GridBagConstraints constraintsPhysicalAddressTextField = new java.awt.GridBagConstraints();
			constraintsPhysicalAddressTextField.gridx = 1; constraintsPhysicalAddressTextField.gridy = 2;
			constraintsPhysicalAddressTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPhysicalAddressTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhysicalAddressTextField.weightx = 1.0;
			constraintsPhysicalAddressTextField.ipadx = 74;
			constraintsPhysicalAddressTextField.insets = new java.awt.Insets(2, 2, 1, 173);
			getIdentificationPanel().add(getPhysicalAddressTextField(), constraintsPhysicalAddressTextField);

			java.awt.GridBagConstraints constraintsDisableFlagCheckBox = new java.awt.GridBagConstraints();
			constraintsDisableFlagCheckBox.gridx = 0; constraintsDisableFlagCheckBox.gridy = 3;
			constraintsDisableFlagCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsDisableFlagCheckBox.ipadx = 4;
			constraintsDisableFlagCheckBox.ipady = -9;
			constraintsDisableFlagCheckBox.insets = new java.awt.Insets(2, 5, 9, 1);
			getIdentificationPanel().add(getDisableFlagCheckBox(), constraintsDisableFlagCheckBox);

			java.awt.GridBagConstraints constraintsControlInhibitCheckBox = new java.awt.GridBagConstraints();
			constraintsControlInhibitCheckBox.gridx = 1; constraintsControlInhibitCheckBox.gridy = 3;
			constraintsControlInhibitCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsControlInhibitCheckBox.ipadx = 38;
			constraintsControlInhibitCheckBox.ipady = -9;
			constraintsControlInhibitCheckBox.insets = new java.awt.Insets(2, 2, 9, 118);
			getIdentificationPanel().add(getControlInhibitCheckBox(), constraintsControlInhibitCheckBox);
			// user code begin {1}
			getControlInhibitCheckBox().setVisible(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjIdentificationPanel;
}
/**
 * Return the JButtonAdvanced property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getJButtonAdvanced() {
	if (ivjJButtonAdvanced == null) {
		try {
			ivjJButtonAdvanced = new javax.swing.JButton();
			ivjJButtonAdvanced.setName("JButtonAdvanced");
			ivjJButtonAdvanced.setText("Advanced...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonAdvanced;
}
/**
 * Return the JComboBoxAmpUseType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxAmpUseType() {
	if (ivjJComboBoxAmpUseType == null) {
		try {
			ivjJComboBoxAmpUseType = new javax.swing.JComboBox();
			ivjJComboBoxAmpUseType.setName("JComboBoxAmpUseType");
			ivjJComboBoxAmpUseType.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjJComboBoxAmpUseType.setPreferredSize(new java.awt.Dimension(120, 25));
			ivjJComboBoxAmpUseType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJComboBoxAmpUseType.setMinimumSize(new java.awt.Dimension(120, 25));
			// user code begin {1}

			//CCU-710 has only Amp1 & Amp2
			ivjJComboBoxAmpUseType.addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_AMP1 );
			ivjJComboBoxAmpUseType.addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_AMP2 );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxAmpUseType;
}
/**
 * Return the JLabelCCUAmpUseType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCCUAmpUseType() {
	if (ivjJLabelCCUAmpUseType == null) {
		try {
			ivjJLabelCCUAmpUseType = new javax.swing.JLabel();
			ivjJLabelCCUAmpUseType.setName("JLabelCCUAmpUseType");
			ivjJLabelCCUAmpUseType.setText("CCU Amp Use Type:");
			ivjJLabelCCUAmpUseType.setMaximumSize(new java.awt.Dimension(138, 16));
			ivjJLabelCCUAmpUseType.setVisible(true);
			ivjJLabelCCUAmpUseType.setPreferredSize(new java.awt.Dimension(138, 16));
			ivjJLabelCCUAmpUseType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelCCUAmpUseType.setMinimumSize(new java.awt.Dimension(138, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCCUAmpUseType;
}
/**
 * Return the NameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getNameLabel() {
	if (ivjNameLabel == null) {
		try {
			ivjNameLabel = new javax.swing.JLabel();
			ivjNameLabel.setName("NameLabel");
			ivjNameLabel.setText("Device Name:");
			ivjNameLabel.setMaximumSize(new java.awt.Dimension(87, 16));
			ivjNameLabel.setPreferredSize(new java.awt.Dimension(87, 16));
			ivjNameLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjNameLabel.setMinimumSize(new java.awt.Dimension(87, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameLabel;
}
/**
 * Return the NameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getNameTextField() {
	if (ivjNameTextField == null) {
		try {
			ivjNameTextField = new javax.swing.JTextField();
			ivjNameTextField.setName("NameTextField");
			ivjNameTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjNameTextField.setColumns(12);
			ivjNameTextField.setPreferredSize(new java.awt.Dimension(132, 20));
			ivjNameTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjNameTextField.setMinimumSize(new java.awt.Dimension(132, 20));
			// user code begin {1}

			ivjNameTextField.setDocument(
					new TextFieldDocument(
					TextFieldDocument.MAX_DEVICE_NAME_LENGTH,
					TextFieldDocument.INVALID_CHARS_PAO));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameTextField;
}
/**
 * Return the PasswordLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPasswordLabel() {
	if (ivjPasswordLabel == null) {
		try {
			ivjPasswordLabel = new javax.swing.JLabel();
			ivjPasswordLabel.setName("PasswordLabel");
			ivjPasswordLabel.setText("Password:");
			ivjPasswordLabel.setMaximumSize(new java.awt.Dimension(138, 20));
			ivjPasswordLabel.setPreferredSize(new java.awt.Dimension(138, 20));
			ivjPasswordLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPasswordLabel.setMinimumSize(new java.awt.Dimension(138, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPasswordLabel;
}
/**
 * Return the PhysicalAddressTextField1 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPasswordTextField() {
	if (ivjPasswordTextField == null) {
		try {
			ivjPasswordTextField = new javax.swing.JTextField();
			ivjPasswordTextField.setName("PasswordTextField");
			ivjPasswordTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPasswordTextField.setColumns(0);
			ivjPasswordTextField.setPreferredSize(new java.awt.Dimension(120, 20));
			ivjPasswordTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPasswordTextField.setMinimumSize(new java.awt.Dimension(120, 20));
			// user code begin {1}
			
			ivjPasswordTextField.setDocument(
				new TextFieldDocument(TextFieldDocument.MAX_IED_PASSWORD_LENGTH));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPasswordTextField;
}
/**
 * Return the PhoneNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPhoneNumberLabel() {
	if (ivjPhoneNumberLabel == null) {
		try {
			ivjPhoneNumberLabel = new javax.swing.JLabel();
			ivjPhoneNumberLabel.setName("PhoneNumberLabel");
			ivjPhoneNumberLabel.setText("Phone Number:");
			ivjPhoneNumberLabel.setMaximumSize(new java.awt.Dimension(98, 16));
			ivjPhoneNumberLabel.setVisible(true);
			ivjPhoneNumberLabel.setPreferredSize(new java.awt.Dimension(98, 16));
			ivjPhoneNumberLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPhoneNumberLabel.setEnabled(true);
			ivjPhoneNumberLabel.setMinimumSize(new java.awt.Dimension(98, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhoneNumberLabel;
}
/**
 * Return the PhoneNumberTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPhoneNumberTextField() {
	if (ivjPhoneNumberTextField == null) {
		try {
			ivjPhoneNumberTextField = new javax.swing.JTextField();
			ivjPhoneNumberTextField.setName("PhoneNumberTextField");
			ivjPhoneNumberTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPhoneNumberTextField.setVisible(true);
			ivjPhoneNumberTextField.setColumns(13);
			ivjPhoneNumberTextField.setPreferredSize(new java.awt.Dimension(12, 20));
			ivjPhoneNumberTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPhoneNumberTextField.setEnabled(true);
			ivjPhoneNumberTextField.setMinimumSize(new java.awt.Dimension(12, 20));
			// user code begin {1}
			
			ivjPhoneNumberTextField.setDocument(
				new TextFieldDocument(TextFieldDocument.MAX_PHONE_NUMBER_LENGTH));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhoneNumberTextField;
}
/**
 * Return the PhysicalAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPhysicalAddressLabel() {
	if (ivjPhysicalAddressLabel == null) {
		try {
			ivjPhysicalAddressLabel = new javax.swing.JLabel();
			ivjPhysicalAddressLabel.setName("PhysicalAddressLabel");
			ivjPhysicalAddressLabel.setText("Physical Address:");
			ivjPhysicalAddressLabel.setMaximumSize(new java.awt.Dimension(112, 16));
			ivjPhysicalAddressLabel.setPreferredSize(new java.awt.Dimension(112, 16));
			ivjPhysicalAddressLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPhysicalAddressLabel.setMinimumSize(new java.awt.Dimension(112, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhysicalAddressLabel;
}
/**
 * Return the PhysicalAddressTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPhysicalAddressTextField() {
	if (ivjPhysicalAddressTextField == null) {
		try {
			ivjPhysicalAddressTextField = new javax.swing.JTextField();
			ivjPhysicalAddressTextField.setName("PhysicalAddressTextField");
			ivjPhysicalAddressTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPhysicalAddressTextField.setColumns(10);
			ivjPhysicalAddressTextField.setPreferredSize(new java.awt.Dimension(33, 20));
			ivjPhysicalAddressTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPhysicalAddressTextField.setMinimumSize(new java.awt.Dimension(33, 20));
			// user code begin {1}

			ivjPhysicalAddressTextField.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-9999999999L, 9999999999L) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhysicalAddressTextField;
}
/**
 * Return the PortComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getPortComboBox() {
	if (ivjPortComboBox == null) {
		try {
			ivjPortComboBox = new javax.swing.JComboBox();
			ivjPortComboBox.setName("PortComboBox");
			ivjPortComboBox.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjPortComboBox.setPreferredSize(new java.awt.Dimension(210, 25));
			ivjPortComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPortComboBox.setMinimumSize(new java.awt.Dimension(210, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPortComboBox;
}
/**
 * Return the PortLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPortLabel() {
	if (ivjPortLabel == null) {
		try {
			ivjPortLabel = new javax.swing.JLabel();
			ivjPortLabel.setName("PortLabel");
			ivjPortLabel.setText("Communication Channel:");
			ivjPortLabel.setMaximumSize(new java.awt.Dimension(138, 16));
			ivjPortLabel.setPreferredSize(new java.awt.Dimension(138, 16));
			ivjPortLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPortLabel.setMinimumSize(new java.awt.Dimension(138, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPortLabel;
}
/**
 * Return the PostCommWaitLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPostCommWaitLabel() {
	if (ivjPostCommWaitLabel == null) {
		try {
			ivjPostCommWaitLabel = new javax.swing.JLabel();
			ivjPostCommWaitLabel.setName("PostCommWaitLabel");
			ivjPostCommWaitLabel.setText("Post Communication Wait:");
			ivjPostCommWaitLabel.setMaximumSize(new java.awt.Dimension(172, 16));
			ivjPostCommWaitLabel.setPreferredSize(new java.awt.Dimension(172, 16));
			ivjPostCommWaitLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPostCommWaitLabel.setMinimumSize(new java.awt.Dimension(172, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPostCommWaitLabel;
}
/**
 * Return the PostCommWaitSpinner property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getPostCommWaitSpinner() {
	if (ivjPostCommWaitSpinner == null) {
		try {
			ivjPostCommWaitSpinner = new com.klg.jclass.field.JCSpinField();
			ivjPostCommWaitSpinner.setName("PostCommWaitSpinner");
			ivjPostCommWaitSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
			ivjPostCommWaitSpinner.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPostCommWaitSpinner.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPostCommWaitSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
			// user code begin {1}
			ivjPostCommWaitSpinner.setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(0), new Integer(1000000), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPostCommWaitSpinner;
}
/**
 * Return the RouteComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getRouteComboBox() {
	if (ivjRouteComboBox == null) {
		try {
			ivjRouteComboBox = new javax.swing.JComboBox();
			ivjRouteComboBox.setName("RouteComboBox");
			ivjRouteComboBox.setPreferredSize(new java.awt.Dimension(210, 25));
			ivjRouteComboBox.setMinimumSize(new java.awt.Dimension(210, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRouteComboBox;
}
/**
 * Return the CommPathLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getRouteLabel() {
	if (ivjRouteLabel == null) {
		try {
			ivjRouteLabel = new javax.swing.JLabel();
			ivjRouteLabel.setName("RouteLabel");
			ivjRouteLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjRouteLabel.setText("Communication Route:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRouteLabel;
}
/**
 * Return the SlaveAddressComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getSlaveAddressComboBox() {
	if (ivjSlaveAddressComboBox == null) {
		try {
			ivjSlaveAddressComboBox = new javax.swing.JComboBox();
			ivjSlaveAddressComboBox.setName("SlaveAddressComboBox");
			ivjSlaveAddressComboBox.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjSlaveAddressComboBox.setPreferredSize(new java.awt.Dimension(120, 25));
			ivjSlaveAddressComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSlaveAddressComboBox.setMinimumSize(new java.awt.Dimension(120, 25));
			// user code begin {1}

			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_STAND_ALONE );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_MASTER );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE1 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE2 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE3 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE4 );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSlaveAddressComboBox;
}
/**
 * Return the SlaveAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getSlaveAddressLabel() {
	if (ivjSlaveAddressLabel == null) {
		try {
			ivjSlaveAddressLabel = new javax.swing.JLabel();
			ivjSlaveAddressLabel.setName("SlaveAddressLabel");
			ivjSlaveAddressLabel.setText("Slave Address:");
			ivjSlaveAddressLabel.setMaximumSize(new java.awt.Dimension(138, 16));
			ivjSlaveAddressLabel.setPreferredSize(new java.awt.Dimension(138, 16));
			ivjSlaveAddressLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSlaveAddressLabel.setMinimumSize(new java.awt.Dimension(138, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSlaveAddressLabel;
}
/**
 * Return the TypeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTypeLabel() {
	if (ivjTypeLabel == null) {
		try {
			ivjTypeLabel = new javax.swing.JLabel();
			ivjTypeLabel.setName("TypeLabel");
			ivjTypeLabel.setText("Device Type:");
			ivjTypeLabel.setMaximumSize(new java.awt.Dimension(83, 20));
			ivjTypeLabel.setPreferredSize(new java.awt.Dimension(83, 20));
			ivjTypeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjTypeLabel.setMinimumSize(new java.awt.Dimension(83, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTypeLabel;
}
/**
 * Return the DeviceTypeTextField property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTypeTextField() {
	if (ivjTypeTextField == null) {
		try {
			ivjTypeTextField = new javax.swing.JLabel();
			ivjTypeTextField.setName("TypeTextField");
			ivjTypeTextField.setOpaque(true);
			ivjTypeTextField.setFont(new java.awt.Font("dialog.bold", 1, 14));
			ivjTypeTextField.setText("");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTypeTextField;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) 
{	
	com.cannontech.database.data.device.DeviceBase d = (com.cannontech.database.data.device.DeviceBase)val;

	d.setPAOName( getNameTextField().getText() );
   int devType = PAOGroups.getDeviceType( d.getPAOType() );

	if( getDisableFlagCheckBox().isSelected() )
		d.setDisableFlag( new Character('Y') );
	else
		d.setDisableFlag( new Character('N') );

	if( getControlInhibitCheckBox().isSelected() )
		d.getDevice().setControlInhibit( new Character( 'Y' ) );
	else
		d.getDevice().setControlInhibit( new Character( 'N' ) );

	//This is a little bit ugly
	//The address could be coming from three distinct
	//types of devices - yet all devices have an address
	//eeck.
	if( getPhysicalAddressTextField().isVisible() )
	{
		try
		{
			Integer address = new Integer( getPhysicalAddressTextField().getText() );

			if( val instanceof com.cannontech.database.data.device.CarrierBase )
			{

				if( devType == PAOGroups.REPEATER ) //val instanceof Repeater900
				{
					((CarrierBase) val).getDeviceCarrierSettings().setAddress( new Integer(address.intValue() + 4190000) );
				}
				else
				{
					((CarrierBase) val).getDeviceCarrierSettings().setAddress( address );
				}
			}
			else if( val instanceof com.cannontech.database.data.device.IDLCBase )
				((com.cannontech.database.data.device.IDLCBase) val).getDeviceIDLCRemote().setAddress(address);
		}
		catch(NumberFormatException n )
		{
			com.cannontech.clientutils.CTILogger.error( n.getMessage(), n );
		}
	}

	if( val instanceof RemoteBase )
	{
		DeviceDirectCommSettings dDirect = ((RemoteBase) val).getDeviceDirectCommSettings();

		Integer portID = null;
		Integer address = null;
		Integer postCommWait = null;

		com.cannontech.database.data.lite.LiteYukonPAObject port = ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem());

		portID = new Integer(port.getYukonID());
		dDirect.setPortID( portID );

		Object postCommWaitSpinVal = getPostCommWaitSpinner().getValue();
		if( postCommWaitSpinVal instanceof Long )
			postCommWait = new Integer( ((Long)postCommWaitSpinVal).intValue() );
		else if( postCommWaitSpinVal instanceof Integer )
			postCommWait = new Integer( ((Integer)postCommWaitSpinVal).intValue() );

		if( val instanceof IDLCBase )
		{
			((IDLCBase)val).getDeviceIDLCRemote().setPostCommWait( postCommWait );
			((IDLCBase)val).getDeviceIDLCRemote().setCcuAmpUseType( getJComboBoxAmpUseType().getSelectedItem().toString() );
		}
		
		if( PAOGroups.isDialupPort(port.getType()) )
		{
			DeviceDialupSettings dDialup = ((RemoteBase) val).getDeviceDialupSettings();

			getAdvancedPanel().getValue( dDialup );
			
			dDialup.setPhoneNumber( getPhoneNumberTextField().getText().trim() );
			if( val instanceof PagingTapTerminal )
				dDialup.setLineSettings( "7E1" );
			else
				dDialup.setLineSettings( "8N1" );
		}
		else
			((RemoteBase)val).getDeviceDialupSettings().setPhoneNumber(null);

      if( val instanceof DNPBase ) //DeviceTypesFuncs.hasMasterAddress(devType) ) 
      {
         DNPBase dnp = (DNPBase)val;
         try
         {
            dnp.getDeviceDNP().setMasterAddress( new Integer(getPhysicalAddressTextField().getText()) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceDNP().setMasterAddress( new Integer(0) );
         }
            
         try
         {         
            dnp.getDeviceDNP().setSlaveAddress( new Integer(getSlaveAddressComboBox().getSelectedItem().toString() ) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceDNP().setSlaveAddress( new Integer(0) );
         }
   
         try
         {
            dnp.getDeviceDNP().setPostCommWait( new Integer(getPostCommWaitSpinner().getValue().toString()) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceDNP().setPostCommWait( new Integer(0) );
         }
   
      }
		else if( val instanceof IEDBase )
		{
			String password = getPasswordTextField().getText();
			if( password.length() > 0 )
				((IEDBase)val).getDeviceIED().setPassword(password);
			else
				((IEDBase)val).getDeviceIED().setPassword("0");
				
			if( getSlaveAddressComboBox().isVisible() )
			{
				String slaveAddress = null;

				/**** START SUPER HACK ****/
				if( getSlaveAddressComboBox().isEditable() )
					slaveAddress = getSlaveAddressComboBox().getEditor().getItem().toString();
				else /**** END SUPER HACK ****/
					slaveAddress = new String( getSlaveAddressComboBox().getSelectedItem() != null ?
							  getSlaveAddressComboBox().getSelectedItem().toString() : "" );

	
				((IEDBase)val).getDeviceIED().setSlaveAddress(slaveAddress);
			}
		}

	}
	else
	{
		if( val instanceof CarrierBase )
			((CarrierBase) val).getDeviceRoutes().setRouteID( new Integer(((com.cannontech.database.data.lite.LiteYukonPAObject)getRouteComboBox().getSelectedItem()).getYukonID()) );
			
	}
	
	if( val instanceof MCTBase )
	{
		 if(getConfigComboBox().getSelectedItem().equals("(none)"))
		 {
			((MCTBase)val).getConfigMapping().deleteAMapping((((MCTBase)val).getDevice().getDeviceID()));
			((MCTBase)val).setHasConfig(false);
		 }
		 else
		 {
		 	((MCTBase)val).setConfigMapping(new Integer(((com.cannontech.database.data.lite.LiteConfig)getConfigComboBox().getSelectedItem()).getConfigID()),(((MCTBase)val).getDevice().getDeviceID()));
			((MCTBase)val).setHasConfig(true);
		 }
	}

	return val;
}
/**
 * Return the WaitLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getWaitLabel() {
	if (ivjWaitLabel == null) {
		try {
			ivjWaitLabel = new javax.swing.JLabel();
			ivjWaitLabel.setName("WaitLabel");
			ivjWaitLabel.setText("sec");
			ivjWaitLabel.setMaximumSize(new java.awt.Dimension(65, 16));
			ivjWaitLabel.setPreferredSize(new java.awt.Dimension(65, 16));
			ivjWaitLabel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjWaitLabel.setMinimumSize(new java.awt.Dimension(65, 16));
			// user code begin {1}
         
         ivjWaitLabel.setText("(msec.)");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjWaitLabel;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	
	getPostCommWaitSpinner().addValueListener(this);
	
	// user code end
	getNameTextField().addCaretListener(ivjEventHandler);
	getPhysicalAddressTextField().addCaretListener(ivjEventHandler);
	getDisableFlagCheckBox().addActionListener(ivjEventHandler);
	getControlInhibitCheckBox().addActionListener(ivjEventHandler);
	getRouteComboBox().addActionListener(ivjEventHandler);
	getPortComboBox().addActionListener(ivjEventHandler);
	getPhoneNumberTextField().addCaretListener(ivjEventHandler);
	getPasswordTextField().addCaretListener(ivjEventHandler);
	getSlaveAddressComboBox().addActionListener(ivjEventHandler);
	getJButtonAdvanced().addActionListener(ivjEventHandler);
	getJComboBoxAmpUseType().addActionListener(ivjEventHandler);
	getConfigComboBox().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DeviceBaseEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(432, 416);
		setMinimumSize(new java.awt.Dimension(509, 472));

		java.awt.GridBagConstraints constraintsIdentificationPanel = new java.awt.GridBagConstraints();
		constraintsIdentificationPanel.gridx = 1; constraintsIdentificationPanel.gridy = 1;
		constraintsIdentificationPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsIdentificationPanel.weightx = 1.0;
		constraintsIdentificationPanel.weighty = 1.0;
		constraintsIdentificationPanel.ipadx = 9;
		constraintsIdentificationPanel.ipady = 24;
		constraintsIdentificationPanel.insets = new java.awt.Insets(14, 6, 1, 4);
		add(getIdentificationPanel(), constraintsIdentificationPanel);

		java.awt.GridBagConstraints constraintsCommunicationPanel = new java.awt.GridBagConstraints();
		constraintsCommunicationPanel.gridx = 1; constraintsCommunicationPanel.gridy = 2;
		constraintsCommunicationPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsCommunicationPanel.weightx = 1.0;
		constraintsCommunicationPanel.weighty = 1.0;
		constraintsCommunicationPanel.insets = new java.awt.Insets(2, 4, 13, 6);
		add(getCommunicationPanel(), constraintsCommunicationPanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	if( getNameTextField().getText() == null
		 || getNameTextField().getText().length() < 1 )
	{
		setErrorString("The Name text field must be filled in");
		return false;
	}

	int address = -1;
	
	if( getPhysicalAddressTextField().isVisible()
		 && (getPhysicalAddressTextField().getText() == null
		     || getPhysicalAddressTextField().getText().length() < 1) )
	{
		setErrorString("The Address text field must be filled in");
		return false;
	}


	if( getPhysicalAddressTextField().isVisible() )
		address = Integer.parseInt( getPhysicalAddressTextField().getText() );

   	if( !com.cannontech.device.range.DeviceAddressRange.isValidRange( getDeviceType(), address ) )
   	{
      	setErrorString( com.cannontech.device.range.DeviceAddressRange.getRangeMessage( getDeviceType() ) );
      	return false;
   	}

   	if( com.cannontech.database.data.device.DeviceTypesFuncs.isMCT(getDeviceType()) )
      	return checkMCTAddresses( address );
      
	//verify that there are no duplicate physical address for CCUs or RTUs on a dedicated channel
	com.cannontech.database.data.lite.LiteYukonPAObject port = ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem());
	if(com.cannontech.database.data.device.DeviceTypesFuncs.isCarrier(getDeviceType()) || com.cannontech.database.data.device.DeviceTypesFuncs.isVirtualDevice(getDeviceType()))
		return true;
	else if((! PAOGroups.isDialupPort(port.getType())) && (com.cannontech.database.data.device.DeviceTypesFuncs.isCCU(getDeviceType()) || com.cannontech.database.data.device.DeviceTypesFuncs.isRTU(getDeviceType()) ))
	{
		address = Integer.parseInt( getPhysicalAddressTextField().getText() );
		return checkForDuplicateAddresses(address, port.getLiteID() );   	
	}
	
	return true;
}
/**
 * Comment
 */
public void jButtonAdvanced_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	AdvancedPropertiesDialog dialog = new AdvancedPropertiesDialog( 
						getAdvancedPanel(), "Advanced Dialup Properties");

	int result = dialog.showPanel( com.cannontech.common.util.CtiUtilities.getParentFrame(this) );

	if( result == AdvancedPropertiesDialog.RESPONSE_ACCEPT )
		fireInputUpdate(); //there has been a change!!!!

	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame;
		try {
			Class aFrameClass = Class.forName("com.ibm.uvm.abt.edit.TestFrame");
			frame = (java.awt.Frame)aFrameClass.newInstance();
		} catch (java.lang.Throwable ivjExc) {
			frame = new java.awt.Frame();
		}
		DeviceBaseEditorPanel aDeviceBaseEditorPanel;
		aDeviceBaseEditorPanel = new DeviceBaseEditorPanel();
		frame.add("Center", aDeviceBaseEditorPanel);
		frame.setSize(aDeviceBaseEditorPanel.getSize());
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setCarrierBaseValue( CarrierBase cBase )
{
	Integer address = cBase.getDeviceCarrierSettings().getAddress();

	if( cBase instanceof Repeater900 )
		address = new Integer( address.intValue() - 4190000 );
      
   if( cBase instanceof com.cannontech.database.data.device.MCT_Broadcast )
      getPhysicalAddressLabel().setText("Lead Address:");
		
	getPhysicalAddressLabel().setVisible(true);
	getPhysicalAddressTextField().setVisible(true);
	
	getPhysicalAddressTextField().setText( address.toString() );
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setIDLCBaseValue( IDLCBase idlcBase )
{
	Integer address = idlcBase.getDeviceIDLCRemote().getAddress();
	getPhysicalAddressTextField().setText( address.toString() );
	
	getPhysicalAddressLabel().setVisible(true);
	getPhysicalAddressTextField().setVisible(true);

}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setNonRemBaseValue( Object base )
{  
   getJLabelCCUAmpUseType().setVisible(false);
   getJComboBoxAmpUseType().setVisible(false);
   getPortLabel().setVisible(false);
   getPortComboBox().setVisible(false);
   getPasswordLabel().setVisible(false);
   getPasswordTextField().setVisible(false);
    
   if( base instanceof MCTBase )
   {
	   getConfigComboBox().setVisible(true);
	   getConfigLabel().setVisible(true);		
   }
	
	getRouteLabel().setVisible(true);
	getRouteComboBox().setVisible(true);
   
   	getPostCommWaitLabel().setVisible(false);
	getPostCommWaitSpinner().setVisible(false);
	getWaitLabel().setVisible(false);
	getSlaveAddressLabel().setVisible(false);
	getSlaveAddressComboBox().setVisible(false);   

	int assignedRouteID = 0;
	if( getRouteComboBox().getModel().getSize() > 0 )
		getRouteComboBox().removeAllItems();

	int assignedConfigID = 0;
	if( getConfigComboBox().getModel().getSize() > 0)
		getConfigComboBox().removeAllItems();
		
	String noConfig = "(none)";
	getConfigComboBox().addItem( noConfig );
	
	com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List routes = cache.getAllRoutes();
		java.util.List configs = cache.getAllConfigs();
		
		Integer mctSeriesType = ConfigTwoWay.SERIES_300_TYPE;;
		if(base instanceof MCTBase)
		{					
			for(int j = 0; j < configs.size(); j++)
			{
				//this is a tad disgusting
				if(base instanceof MCT210 || base instanceof MCT213 ||
					base instanceof MCT240 || base instanceof MCT248 ||
					base instanceof MCT250)
						mctSeriesType = ConfigTwoWay.SERIES_200_TYPE;
						
				if(base instanceof MCT410_KWH_Only)
						mctSeriesType = ConfigTwoWay.SERIES_400_TYPE;
				
				if(mctSeriesType.compareTo(((com.cannontech.database.data.lite.LiteConfig)configs.get(j)).getConfigType()) == 0)
					getConfigComboBox().addItem( configs.get(j) );
				
				if(((MCTBase) base).hasMappedConfig())
				{
					assignedConfigID = ((MCTBase) base).getConfigID().intValue();
					if( ((com.cannontech.database.data.lite.LiteConfig)configs.get(j)).getConfigID() == assignedConfigID )
						getConfigComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteConfig)configs.get(j));

				}
			}
			if(! ((MCTBase) base).hasMappedConfig())
				{
					getConfigComboBox().setSelectedItem(noConfig);
				}
		}
		if( base instanceof CarrierBase )
		{
			int routeType = 0;
			assignedRouteID = ((CarrierBase) base).getDeviceRoutes().getRouteID().intValue();
			
			for( int i = 0 ; i < routes.size(); i++ )
			{
				routeType = ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getType();
				
				if( routeType == com.cannontech.database.data.pao.RouteTypes.ROUTE_CCU ||
						routeType == com.cannontech.database.data.pao.RouteTypes.ROUTE_MACRO )
				{
					getRouteComboBox().addItem( routes.get(i) );
					if( ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getYukonID() == assignedRouteID )
						getRouteComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i));
				}
			}
		}
		else
		{
			if( base instanceof com.cannontech.database.data.device.lm.LMGroupEmetcon )
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupEmetcon) base).getLmGroupEmetcon().getRouteID().intValue();
			else if( base instanceof com.cannontech.database.data.device.lm.LMGroupVersacom )
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupVersacom) base).getLmGroupVersacom().getRouteID().intValue();
			else if (base instanceof com.cannontech.database.data.device.lm.LMGroupRipple) 
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupRipple)base).getLmGroupRipple().getRouteID().intValue();
				for( int i = 0 ; i < routes.size(); i++ )
			{
				getRouteComboBox().addItem( routes.get(i) );
				if( ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getYukonID() == assignedRouteID )
					getRouteComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i));
			}
		}
	}
   
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setRemoteBaseValue( RemoteBase rBase, int intType )
{
	getRouteLabel().setVisible(false);
	getRouteComboBox().setVisible(false);
	getJLabelCCUAmpUseType().setVisible(false);
	getJComboBoxAmpUseType().setVisible(false);

	getPortLabel().setVisible(true);
	getPortComboBox().setVisible(true);
	getPostCommWaitLabel().setVisible(true);
	getPostCommWaitSpinner().setVisible(true);
	getWaitLabel().setVisible(true);

	if( getRouteComboBox().getModel().getSize() > 0 )
		getRouteComboBox().removeAllItems();

	int portID = rBase.getDeviceDirectCommSettings().getPortID().intValue();
	//Load the combo box
	com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List ports = cache.getAllPorts();
		if( getPortComboBox().getModel().getSize() > 0 )
			getPortComboBox().removeAllItems();
			
		com.cannontech.database.data.lite.LiteYukonPAObject litePort = null;
		for( int i = 0; i < ports.size(); i++ )
		{
			litePort = (com.cannontech.database.data.lite.LiteYukonPAObject)ports.get(i);
			getPortComboBox().addItem(litePort);
			
			if( ((com.cannontech.database.data.lite.LiteYukonPAObject)ports.get(i)).getYukonID() == portID )
			{
				getPortComboBox().setSelectedItem(litePort);
				
				if( com.cannontech.database.data.pao.PAOGroups.isDialupPort(litePort.getType()) )
					getDialupSettingsPanel().setVisible(true);
			}
		}
	}

	Integer postCommWait = null;
	String ampUse = null;
	if( rBase instanceof IDLCBase )
	{
		postCommWait = ((IDLCBase)rBase).getDeviceIDLCRemote().getPostCommWait();

		//only show CCUAmpUse when its a CCU-711 or CCU-710A
		if( com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 == PAOGroups.CCU711
			 || com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 == PAOGroups.CCU710A )
		{
			ampUse = ((IDLCBase)rBase).getDeviceIDLCRemote().getCcuAmpUseType();
			getJLabelCCUAmpUseType().setVisible(true);
			getJComboBoxAmpUseType().setVisible(true);

			//add the extra options for CCU-711's only!
			if( com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 	 == PAOGroups.CCU711 )
			{
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_ALTERNATING );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_DEF_1_FAIL_2 );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_DEF_2_FAIL_1 );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_ALT_FAILOVER );				
			}
			
		}
		
	}
	

	//regardless of our type, we shuld set the advanced settings of the port
	getAdvancedPanel().setValue( rBase );
	
	if( getDialupSettingsPanel().isVisible() )
	{
		DeviceDialupSettings dDialup = rBase.getDeviceDialupSettings();

		if( dDialup != null )
		{
		
			String phoneNumber = dDialup.getPhoneNumber();

			if( phoneNumber != null )
				getPhoneNumberTextField().setText( phoneNumber );
		}
	}

	if( rBase instanceof IEDBase )
	{
		//do not show the PostCommWait Items
		getPostCommWaitLabel().setVisible(false);
		getPostCommWaitSpinner().setVisible(false);
		getWaitLabel().setVisible(false);
		
		getPasswordLabel().setVisible(true);
		getPasswordTextField().setVisible(true);
		String password = ((IEDBase)rBase).getDeviceIED().getPassword();
      
		if( CtiUtilities.STRING_NONE.equalsIgnoreCase(password)
          || "None".equalsIgnoreCase(password) //keep the old (none) value valid
          || "0".equalsIgnoreCase(password) )  //keep the old '0' value valid
      {
			getPasswordTextField().setText( "" );
      }
		else
			getPasswordTextField().setText( password );


		if( rBase instanceof Schlumberger 
			 || intType == PAOGroups.ALPHA_PPLUS
			 || intType == PAOGroups.TRANSDATA_MARKV )
		{
			getSlaveAddressLabel().setVisible(true);
			getSlaveAddressComboBox().setVisible(true);

			String slaveAddress = ((IEDBase)rBase).getDeviceIED().getSlaveAddress();
			getSlaveAddressComboBox().setSelectedItem(slaveAddress);
		}
		else if( rBase instanceof Sixnet )
		{
			/**** BEGIN SUPER HACK --- Special case for Sixnet Devices!! ****/
			getSlaveAddressLabel().setText("Station Address:");
			getSlaveAddressLabel().setVisible(true);
			getSlaveAddressComboBox().setVisible(true);
			getSlaveAddressComboBox().setEditable(true);
			getSlaveAddressComboBox().removeAllItems();				

			com.cannontech.common.gui.util.JTextFieldComboEditor e = new com.cannontech.common.gui.util.JTextFieldComboEditor();
			e.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 16000) );
			e.addCaretListener(this);
			getSlaveAddressComboBox().setEditor( e );
			

			String slaveAddress = ((IEDBase)rBase).getDeviceIED().getSlaveAddress();
			getSlaveAddressComboBox().addItem(slaveAddress);
			getSlaveAddressComboBox().setSelectedItem(slaveAddress);

			getPasswordLabel().setText("Log File:");
			/**** END SUPER HACK --- Special case for Sixnet Devices!! ****/
		}
		else
		{
			getSlaveAddressLabel().setVisible(false);
			getSlaveAddressComboBox().setVisible(false);
		}
	}
   else if( rBase instanceof DNPBase )
   {
      getPhysicalAddressLabel().setVisible(true);
      getPhysicalAddressLabel().setText("Master Address:");
      getPhysicalAddressTextField().setVisible(true);
      getPhysicalAddressTextField().setText( ((DNPBase)rBase).getDeviceDNP().getMasterAddress().toString() );
      
      getSlaveAddressLabel().setVisible(true);
      getSlaveAddressComboBox().setVisible(true);
      
      //create a new editor for our combobox so we can set the document
      getSlaveAddressComboBox().setEditable( true );
      getSlaveAddressComboBox().removeAllItems();
      com.cannontech.common.gui.util.JTextFieldComboEditor editor = new com.cannontech.common.gui.util.JTextFieldComboEditor();
      editor.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-999999999, 999999999) );
      editor.addCaretListener(this);  //be sure to fireInputUpdate() messages!

      getSlaveAddressComboBox().setEditor( editor );
      getSlaveAddressComboBox().addItem( ((DNPBase)rBase).getDeviceDNP().getSlaveAddress() );

      
      getPostCommWaitSpinner().setValue( ((DNPBase)rBase).getDeviceDNP().getPostCommWait() );
      
      getPasswordLabel().setVisible(false);
      getPasswordTextField().setVisible(false);
   }
	else
	{
		getPasswordLabel().setVisible(false);
		getPasswordTextField().setVisible(false);
		getSlaveAddressLabel().setVisible(false);
		getSlaveAddressComboBox().setVisible(false);
	}

   
   if( postCommWait != null )
      getPostCommWaitSpinner().setValue( postCommWait );

   if( ampUse != null )
      getJComboBoxAmpUseType().setSelectedItem( ampUse );
   
}
/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val)  
{
	DeviceBase d = (DeviceBase)val;

	String name = d.getPAOName();
	paoID = d.getPAObjectID().intValue();
	
	deviceType = com.cannontech.database.data.pao.PAOGroups.getDeviceType( d.getPAOType() );
	String type = null;
	
	if (deviceType == PAOGroups.TAPTERMINAL)
		type = PAOGroups.STRING_TAP_TERMINAL[2];
	else
		type = d.getPAOType();

	Character disableFlag = d.getPAODisableFlag();
	Character controlInhibit = d.getDevice().getControlInhibit();

	getNameTextField().setText(name);
	getTypeTextField().setText(type);
	CtiUtilities.setCheckBoxState(getDisableFlagCheckBox(), disableFlag);
	CtiUtilities.setCheckBoxState( getControlInhibitCheckBox(), controlInhibit );

	//	CCU's cannot have addresses larger than 128
	if(com.cannontech.database.data.device.DeviceTypesFuncs.isCCU(getDeviceType()))
	{
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0L, 128L) );
	}
	else
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-9999999999L, 9999999999L) );


	//This is a bit ugly
	//The address could come from one of three different types of
	//devices even though they all have one
	//Note also getValue(DBPersistent)
	
	if( val instanceof com.cannontech.database.data.device.CarrierBase )
	{
		setCarrierBaseValue( (com.cannontech.database.data.device.CarrierBase) val );
	}
	else if( val instanceof com.cannontech.database.data.device.IDLCBase )
	{
		setIDLCBaseValue( (com.cannontech.database.data.device.IDLCBase) val );
	}
	else
	{
		if( d.getPAOClass().equalsIgnoreCase(DeviceClasses.STRING_CLASS_VIRTUAL) )
			getCommunicationPanel().setVisible( false );

		getPhysicalAddressLabel().setVisible(false);
		getPhysicalAddressTextField().setVisible(false);
	}

	if( d.getPAOClass().equalsIgnoreCase(DeviceClasses.STRING_CLASS_GROUP) )
		getDisableFlagCheckBox().setVisible(false);
	else
		getDisableFlagCheckBox().setVisible(true);

	getDialupSettingsPanel().setVisible(false);
	
	if( val instanceof RemoteBase )
	{
		setRemoteBaseValue( (RemoteBase)val, deviceType );		
	}
	
	else
	{
		setNonRemBaseValue( val );		
	}

}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	if (arg1.getSource() == getPostCommWaitSpinner()) 
		fireInputUpdate();
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
}

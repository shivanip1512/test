package com.cannontech.dbeditor.editor.device;

import com.cannontech.common.gui.util.AdvancedPropertiesDialog;
import com.cannontech.common.gui.util.TextFieldDocument;
import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.data.device.CarrierBase;
import com.cannontech.database.data.device.DeviceBase;
import com.cannontech.database.data.device.DeviceTypesFuncs;
import com.cannontech.database.data.device.IDLCBase;
import com.cannontech.database.data.device.IEDBase;
import com.cannontech.database.data.device.PagingTapTerminal;
import com.cannontech.database.data.device.DNPBase;
import com.cannontech.database.data.device.RemoteBase;
import com.cannontech.database.data.device.Repeater900;
import com.cannontech.database.data.device.Schlumberger;
import com.cannontech.database.data.device.Sixnet;
import com.cannontech.database.data.pao.DeviceClasses;
import com.cannontech.database.data.pao.PAOGroups;
import com.cannontech.database.db.device.DeviceCarrierSettings;
import com.cannontech.database.db.device.DeviceDialupSettings;
import com.cannontech.database.db.device.DeviceDirectCommSettings;
import com.cannontech.database.db.device.DeviceIDLCRemote;

public class DeviceBaseEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener, java.awt.event.ActionListener, javax.swing.event.CaretListener {
	private int deviceType = -1;
	private int paoID = -1;
	private DeviceAdvancedDialupEditorPanel advancedPanel = null;
	private javax.swing.JCheckBox ivjControlInhibitCheckBox = null;
	private javax.swing.JCheckBox ivjDisableFlagCheckBox = null;
	private javax.swing.JLabel ivjNameLabel = null;
	private javax.swing.JTextField ivjNameTextField = null;
	private javax.swing.JLabel ivjTypeLabel = null;
	private javax.swing.JLabel ivjPhysicalAddressLabel = null;
	private javax.swing.JTextField ivjPhysicalAddressTextField = null;
	private javax.swing.JLabel ivjTypeTextField = null;
	private javax.swing.JPanel ivjIdentificationPanel = null;
	private javax.swing.JComboBox ivjRouteComboBox = null;
	private javax.swing.JPanel ivjDialupSettingsPanel = null;
	private javax.swing.JLabel ivjPhoneNumberLabel = null;
	private javax.swing.JTextField ivjPhoneNumberTextField = null;
	private javax.swing.JComboBox ivjPortComboBox = null;
	private javax.swing.JLabel ivjPortLabel = null;
	private javax.swing.JLabel ivjPostCommWaitLabel = null;
	private com.klg.jclass.field.JCSpinField ivjPostCommWaitSpinner = null;
	private javax.swing.JLabel ivjWaitLabel = null;
	private javax.swing.JLabel ivjRouteLabel = null;
	private javax.swing.JLabel ivjPasswordLabel = null;
	private javax.swing.JTextField ivjPasswordTextField = null;
	private javax.swing.JComboBox ivjSlaveAddressComboBox = null;
	private javax.swing.JLabel ivjSlaveAddressLabel = null;
	private javax.swing.JPanel ivjCommunicationPanel = null;
	private javax.swing.JButton ivjJButtonAdvanced = null;
	private javax.swing.JComboBox ivjJComboBoxAmpUseType = null;
	private javax.swing.JLabel ivjJLabelCCUAmpUseType = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();

class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == DeviceBaseEditorPanel.this.getDisableFlagCheckBox()) 
				connEtoC3(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getControlInhibitCheckBox()) 
				connEtoC5(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getRouteComboBox()) 
				connEtoC4(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPortComboBox()) 
				connEtoC6(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getSlaveAddressComboBox()) 
				connEtoC14(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getJButtonAdvanced()) 
				connEtoC7(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getJComboBoxAmpUseType()) 
				connEtoC9(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == DeviceBaseEditorPanel.this.getNameTextField()) 
				connEtoC1(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPhysicalAddressTextField()) 
				connEtoC2(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPhoneNumberTextField()) 
				connEtoC8(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPasswordTextField()) 
				connEtoC13(e);
		};
	};
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public DeviceBaseEditorPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getDisableFlagCheckBox()) 
		connEtoC3(e);
	if (e.getSource() == getControlInhibitCheckBox()) 
		connEtoC5(e);
	if (e.getSource() == getRouteComboBox()) 
		connEtoC4(e);
	if (e.getSource() == getPortComboBox()) 
		connEtoC6(e);
	if (e.getSource() == getSlaveAddressComboBox()) 
		connEtoC14(e);
	if (e.getSource() == getJButtonAdvanced()) 
		connEtoC7(e);
	if (e.getSource() == getJComboBoxAmpUseType()) 
		connEtoC9(e);
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}	
	// user code end
	if (e.getSource() == getNameTextField()) 
		connEtoC1(e);
	if (e.getSource() == getPhysicalAddressTextField()) 
		connEtoC2(e);
	if (e.getSource() == getPhoneNumberTextField()) 
		connEtoC8(e);
	if (e.getSource() == getPasswordTextField()) 
		connEtoC13(e);
	// user code begin {2}

	if( e.getSource() instanceof com.cannontech.common.gui.util.JTextFieldComboEditor )
		fireInputUpdate();

	// user code end
}
//verify that there are no duplicate addresses for any CCUs or RTUs on a dedicated Comm Channel
private boolean checkForDuplicateAddresses( int address, int portID )
{
	try
	{
		String[] devices = DeviceIDLCRemote.isAddressUnique( address, new Integer(paoID), portID );

		if( devices != null )
		{
			String devStr = new String();
			for( int i = 0; i < devices.length; i++ )
				devStr += "          " + devices[i] + "\n";
			 	  
			javax.swing.JOptionPane.showMessageDialog(
				this, 
				"The address '" + address + "' is already in use by the following CCUs or RTUs: \n" + devStr + 
				"\nCCUs and/or RTUs cannot have duplicate addresses on a dedicated comm channel.",
				"Address Already Used",
				javax.swing.JOptionPane.WARNING_MESSAGE );

			setErrorString(null);
			return false;
		}
		
	}
	
	catch( java.sql.SQLException sq )
	{
		com.cannontech.clientutils.CTILogger.error( sq.getMessage(), sq );
		return false;
	}

	return true;
}
/**
 * Insert the method's description here.
 * Creation date: (4/30/2002 1:16:35 PM)
 */
private boolean checkMCTAddresses( int address )
{
	try
	{
		String[] devices = DeviceCarrierSettings.isAddressUnique( address, new Integer(paoID) );

		if( devices != null )
		{
			String devStr = new String();
			for( int i = 0; i < devices.length; i++ )
				devStr += "          " + devices[i] + "\n";

			int res = javax.swing.JOptionPane.showConfirmDialog(
							this, 
							"The address '" + address + "' is already used by the following devices,\n" + 
							"are you sure you want to use it again?\n" +
							devStr,
							"Address Already Used",
							javax.swing.JOptionPane.YES_NO_OPTION,
							javax.swing.JOptionPane.WARNING_MESSAGE );

			if( res == javax.swing.JOptionPane.NO_OPTION )
			{
				setErrorString(null);
				return false;
			}
			

		}
		
	}
	catch( java.sql.SQLException sq )
	{
		com.cannontech.clientutils.CTILogger.error( sq.getMessage(), sq );
		return false;
	}

	return true;
}
/**
 * connEtoC1:  (NameTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC13:  (PasswordTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC14:  (SlaveAddressComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (PhysicalAddressTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (DisableFlagCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (RouteComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (ControlInhibitCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (PortComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		getDialupSettingsPanel().setVisible(
			com.cannontech.database.data.pao.PAOGroups.isDialupPort( ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem()).getType()) );
		
		revalidate();
		repaint();
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JButtonAdvanced.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.jButtonAdvanced_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonAdvanced_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (PhoneNumberTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC9:  (JComboBoxAmpUseType.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 4:29:58 PM)
 * @return com.cannontech.dbeditor.editor.device.DeviceAdvancedDialupEditorPanel
 */
private DeviceAdvancedDialupEditorPanel getAdvancedPanel() 
{
	if( advancedPanel == null )
		advancedPanel = new DeviceAdvancedDialupEditorPanel();

	return advancedPanel;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G3AE90BAFGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155DD8DDC15557DE7659A7FE24BAD5B7CEFEED9396696155BECE39BDBD42CD95122A6E4E56596B5D6D8D454D859FC602222A2022222021222C2927226DC9015172B0121112282D2F261BE404D4B3D37FBAF0ACA7A7F1DF31E5FF91E7B5C675E8B7472716F67F3FC6E791E73BB3F177376FB4EF34EC1485AB8F9C1D2F216A0A4AD9024FF15C902B065D6C138EEFA7C7791939E0C52890AFF6FC048942EB91F
	824F8CC80B980C56E588DD0D29904F07F85E29E85D9A783DD2909B632F039FDE784C00342254BBD77B66F3BE8D79AC227125075260198E21G30E68893A1E4881B8FE5CB389D626952EF9212128521AD0264916B329578ECA9DF912455C218C7736CBD14A325CF06B84993824F088816B7861E0B29F45F2C56CB79BA3FBBD5C8F8E0FD72B242CBD1BE8643C30C36DFFA6689B7D3C3680444F76B60D953F23AEFEF0FED203847E8355A2CAE31273F5854AD1A4CAE1B23D8FA1844B3669E313A5AC01F75C627381FA6
	34982D22854A187590117D1A3AD4DAAE488EF153DF89262BA7764A015F95901A7F0A72BF322CC612EF426929421C1B533D4ABF752FCC6E083F4A72DB9AEE538DBFCC4A6F2375C16852A0EE0040E43963904A9276B04AF2F5A5491BC868A223F4851108FF24A7F8AD445BA058A3D146BD5BD046368B3F95923B77A6AF77A2E3E0A413EDDA24AC23705C296435344DACCCA7759E87E9990FC46972A1B4C268079088E1BDED2BF7273D8B4F3AEED703EDE040E62D335B6BADA647A11BC934406F6AEAC81130A3E20F4D
	E19284569E475795E94803E172A36EED1184265B89815BCF70115B85172BA2F90106EE5323F21327CBE54CF8C456AD6FD1E2375F523A0D851C5011BE477087A9EEFAD446D9DDAD26B809CF0234363F211D5B52D11666141B040C525A64C59A32CC3CE7E7F256CC294F4C14E5E1B61E331C58388DF09704A088D3A004C3081909B6DE3A2C5C1F0D1B207DBB2CC64B5141EE3B51612A9FB4DBCC22C3327540A1DF36568A0C6E42286918DD2616AB6BE8762F77E95AE576547CE4A10A59A3BBCA368B63BD5DABEFFD14
	E75BC867F578DF5AD71A23D89D6AB81ECA7BCA2782E7F5BB1E66A7F18B24C5C2E07997D4913CA2DA5DC656D25C922DEEA3A77458C626C0DA57E3D1BAD63F97B3493818B3ABCA27075082219FC2A004A990C2E6E19D9FDF36E3047D28C5D13F0CF6F9BA198C44A1174358E4F53A0C569E713851E1B6F6DBC427A06549CEA7F66DF6234B257D3B87F83CAFDAC50751E536D921F46300880D494972ECCD4FA4F99CA2CDEDB58F0840E040AEE0394569AB09BD0CCE57B13B496892659CACFDD7BAE993E70C4721C4A8G
	FE27BECE6C75B3BA664E827D93E6212DEEDDC130E6C8B7BD0EF679E57A8AF8FEG0DDB3440B8EE6EA1E2989D67300D7E311E3413A1481FGE17889188B1F847BC2C81D9D259B87A175A908C348F8BACA977AB4765D175A300D9A165DA694C56D55EC23A454BE435ADB5BB36AB67A88659DG78E488E19066C09066C09B02D08B218BC2G044990426660DC3C3CFE1AD4B61117482E66C9F4A03272F17AC926033F7E172A48C3F51FAD47B31EF627CF50606BFFCC584BE5DFA4759B2DB1E00DA23E1456237F72B395
	3F49FC35CC91DF254A3BE094F213405A575AAC52C767C0BD4C031073F7ECE3F169F92C6F918781FB5B078E68A822C9EEF1AC6F3F16935944B32255E5906D225584BF1CD2DB0FDF3ED86E073DB65EC75E20B899179B2023B8B9BEEFF9A643218CE52F4674148C12EEF4399C666EC117F8D4F4394C56BE19BEAD034862F49B721D122E6BD751718BF4EC065049F53DBEE32522BFB55BEC27876D2DE424107A6503547F30C37E403FE3FBCD5193DFB2184753E9DCCE7FFEE51B4256A45FE86AE6E46D6E8EB79EDA6D6E
	0B73D8DAC57AB34E8F8B24361CAB356165D2BBDAAF3567D51CEEA3250B843D93A1647D837CA488F68893A104C108051071AC4C81903A1EC53BFD2C1F2662077DE729229F24AB7825ABE4487D12EDB0BADB85D159D16EC58A59315F226CC4EE9C8FB2A5DD16FEC199469AD85D85E6FA6F4357E6EA77616BB3357B700FB2FD77511BB3357AA8CB7BC5A6311D6D2CD551676F48A473DD0F4DEA95694043C984766E73D2AB5143ECB53BCE18CDFD226B28793C887E7B33246F7E094E290170FB5233B84F1D5D0C73DC7E
	791F8BE12756EA7A4B93FF2ACFCEF816755B5498F91EE3B2CDDBC1469251A28E00219AEC03D69743FFC367EB89F76AA81652EBA5348507410BE885B39EB00B96D3D18F0CF12EE27ABFF3938ABEB51EB18E95BB4F02310AE9CD94B710547D64E7E15EFB6F6D4D53FCE7AB6AB5BB44A62BFD904BA9BCDED8425A61CA614C16F314F7CB7FB9273947E829B3199C225379B509D1AA209C1D074FD2B98CE6A799D98FD80CFD8D7DE24F69FA5BD0111156EAB1FB34080EDE1BE3C0B4D1B90A0DE7DD1290F5B4F9ACD214C9
	B27C2379BC1521815E0C9DB6CB13355F5CEDF6FDEDE2D420ADCCE79DD40EA3B6689D605BF65B3E8E76251CFF6AAEBBEB93B6076BEBE33F13713E2EFAD0EA0FB62BF8F8F020DBF4FCCDED31123745BD7DCEA6838CDAE7617D7B6B6A8C588E67DDE0FD722845F8C614BA6457578C4A399DFEDFF4831563E07D204B856FD726B364B54974650A7029FB61276AD425B6FBAFF6B708DBA5491A619AE23222216A866C471CE26BB93B78551B2C04790F07D713B13FG66029A882DB168BF162DA46968BFCACEF2034DE2E1
	53952405441039A82DA1CBB13FD8E2581AE3BACF577BC9B779C99F6FA7BD54CFFA2C1F74AC036F74DABF6996BF69937D2407FBCDE77530B1AB03789562E703A2B4B5B24DFCA01E43F7762C952A3463C64B203C96D01CC57CAF0B4277E778BB2B346779ED2B083FFF1A173FFD55C2013C5333B219DFB24DC84A34BB4C83702AC4DEE6243563FF9CD22E9D8B4F01DF8CFA5442339582235D7BA171913D2D518A4F13F2BA2AF0FD5982F463A0CC114A1A739C338B4B17DB0D791AA1EEFA5EDB3EC7F83EF1901F84A174
	F92DFC576F46FC73A01E75CFEF791AEAB0DF8564E906E07927D63EE5FBB0DFB02407FB4DF7B74F978369737E69CD0F413D18AFA7B6CAD7916BADDF61BE4C578AF9AC315E78BE4573851132A0044732FCA97FD2663B31967335G5E8FA170DF6E654D78974997455756F7F0AC0EE2CF42CB437F24601A61218C65F7811333D453CFA5A16D8549BFFDC176D35918F5659AD2EEAD60ADAF60F87553D54A775DBA275356E326CBD9D21BEFDD2D74E199563EFA89BCE1F0F43A1A6065E0887B4D2955C4D63256A541D25B
	3FF57B9E41F36D0E35E2DCCEE8B8CBC763D6DB034DA4B6C257EB60AE7EF133C87CC5E6074F8FA83FAF04AE5F1A3C540B9DCC127E6394F6880FB9154CE47A5FEAB277E9FDA36921C296778D1A0B87DDE63228E6F49969AC40FA9C7B8E51FC1858053C57053F005F9B8E161271E19E4433DE0C5295C1E0EB1FD752B5D14257C0B088EC8CBB50289C432683BE9B02909725E3735C8BD524CD0C528F11EC9EDE38025511EA82C3BB5E3432D6629BF17BCDC24D25C51A5FC08217E7A6E745B17B554449F64CFF7BD0329E
	82536FC0B56A9788F94262D03FC7AFE969179807F6F91353254D0D529966A25DEF74CA3A61390CEE4ADC340BF1F799BCC7BF5363DA741FF6A35F90A8B31E73DD2A493760A51457D103F4B50039DEC23AEB6B15F441004F041078924A7BF84D9713F7579EEE271741CEAFA35FBB74DAFC07DFC6F9DF60F463811B41695EECD0570B909F254B0FC73A1F6CC5BABDE076F8247B2CDDCDC778CD65F4C776A1DDA8E0891C6E4AF6ADB90BDEC13A0535C8D78B5850ABC8F72728241B768A13F356ABE857015A315A157511
	DFAD5E8B4FAF6614E29DBD40F508837972DFC59DBE55543D73D5542134EE2CBAC85F7B4A1473C2581CADDE67857B2B52F8782AFADE68DBCB46324900CFFF956705A7D6E7AA6605A3B0929B2DFD608971B522B5C4FE70F924F8509A42177ABC822EA7CFD9C7F41F81E546C01887A16BB51803DFC39EAB337DFE375BBF64633B5DC707555F40DADF1357D67B617730A2CEF5265F287EC44769712F31EFD48BB8FEBF4527A8F0D637AD25FC3C00341C84DC1F7C1FAAB57F0084F7FE13D4F1C677838F3AE2D5BCCCC547
	5A6B168262D350B9CBB185D4D79F64AF2D4C27CCAAD37A14339258DA75BCF8E63C0E5F51BF277BAA48DAE4416B78FD694D75247CA008CF059086E1B684618D5099C26D9BD8EF5D59DA7339FB3DF91B4C65B5FCE60B666A3159304303CEED432EB75C69185E0B8554FB688D2CC7E17758E4C87720D34BB07B8D2DFA5CFBFC3DF6BD627213A46BDCBD1115787E89DC5670B14A7A28DFD95B7E2DE52F99FBD0867B3FD106211A3149F015871DDA06197F5632D71F451B3D2477FF69DD6A60A92DF69F87E58A09586E6F
	2BA77A1031B3BB91752959B3B6FD8EFA502975E9C95432697334DE095F5A4FE5089F238C7F75ABC304CA86E62B7315EADB11F9A98672A6F2DB159AD28576CDA263BFA867143DE31373D79EF4EAB9DD7F51325554F66C2FC1DC0636FDE313215703CEADC33C268C3FEF477ACAFD93E5C82B9D1B8C6BBC68B6286216B7357A407223E40C5668834CFB6132460929924DB8AEEB6498E5FD5A03CEED2F50B7356CF5A337574CB7F1EE294EA5187E2DA8DD63DBB80F5C15CD6A95FD0C961B596A92503F302CA5EBA8B607
	394FECC56CB30A75589C740390430257F97FD6756BF55A5F2AFE37CE7BDB55DD6BFCFFEF7E4BBAEF5F32583761FE7ACE58867AD9A0B06C1A8F89B69E62D3B93664A302C5C0BC66ADBE2E1792AC9162597390FB18E233A5BF1BE147CB49F7DE12C7E9F7E5A0E5F8CB7397988F9B6561EB8F4197793E1CCB696FDF3D1C5A5A69941D54D9A0EF59D25ABFDD2B840DEFFC641319006B55E1D50B25BC7BDD3606D25ECFDEAB4C566EA774651D354F174B705DDDBF8F5F5D6717919F4F8E71C08813F99DDC515866C31790
	D5BDC4C871B970CCD025253E8DFE545B6E18340FA147FB9BDE1A235D06B3F3C85FF15A869DBD223A1DE667E473B45973EAF20983440452DAA625F7999DFD22C7BBAF2074AC4D9BFDE90E373E406A674AEAE57D14713635395B17BDCBD476B1C871B6F8DAD4E981901F2042986F4A5DCA5E651C775BFAAD5ED325B2C225E724224C98781D88A16D3F2A778808D7C0E80450A925B15EEF39715E49F9BF34C70B37DD229DA7BDA7AA7884436FB088B3D53CE3A1BE8FC246FCF84F1C2F64FDC70D12F7050063719527F8
	FB1F0F6D3D330E36F70887C218BC9F5B7B0375B86607G96B15F1D779C08A74C573239F30F1277AE2E770B1AB667FDC208569C2BF2GAFD12599A05E2642986FEDFB153C75DC6FDFD5923DC95F32G9D53FBB75D07988971D888C2D2342477AE03AFB933A1DFD1124C3BD67A5D8A4F7EA4F71906A1BE9E4294854E64FCF26F92051C64639B639D526EF30CD1159FA1456740B3C115161A9C2D4BC9563251357B5CF8D7A06F3BFC72AEC9562E9F8360ED2AB48B4483B4F9B754AA6B2712370DD7C42DBD2C9324B226
	EA70E665AD2AD316D7454B3B4527AE21DEF40984BCC615168871B41DBB46463DFD39E4EDE008479BE87C9C176D52E16223D80C67EC03604C38F4648C43778FABFD6DBC409AA1F4CA6533F96B17E7093F546BB08E40B0FA54AE7688ADA90476268F11B69472C7C208A7E5C2DA898446731D0F88AD901A878687680617C8CADBC57D0C0970FB8A4F7B47E3E43D3F09CCB166DEF30F3427152CEB3374669E32EECCDE6C872DEE49120D934A14F51635A0DAD730C036D34D82CF9B333515EB4BC93FEB0174A4013DD3B0
	FCB2450795B8DBF3D9C0F1921F8AE9958B23A55FE98ADD37880378AC0ED932889687F1E191E2F7D2AC8B62A59C1BCF67FD8344DBB976DE9D7AE77D9CCB6FA1D88844A3B9363F9B7946F06C7EAA641B4831E55548B7AD95B1C787724D635837BB10EF854702BB106FB80EED24BCA6C2FCAA4726D721AC219C0B25BEF7A44463B856C84B9396B35BB22C3783654BD90C798E69D13E920E258DD38C62ED9C4B2BC279CC9C3B06729D0278824E63976D285BC41E6F65BD28C7AC47DA76229E899CFB729354A3F589E283
	27BC7598F70A6B41732D5A43756058B5A91EFACCCFC1BD8CBC5F27A7BD757846C95423ED894E935FBA25EC7FD3818FDDA2377948A55E5AFF85BDA391330469104B718FA8DE30D446D97B6F2673B309DBA02DAD8D657C87DD3FB0AC0B56F5ADC3EC3111E0AE0887F22C45486B00E32B7691AC9662C2BAEF2F34CE33A0DE443189347EEAA15E4931C0BA175AA19E403163971047840E755336948371F969E8335F3A6DCD4DD89E2D4BDFAE5BC98F3F1B17FB5A2DCB83F381962842199D6FECA0761A341C59F191476F
	2678F4854E6CDBC77DG920F0034128C143F4D0076184031887ACEBD9562219C4B68256D9462B19CEB6FC53BA5F2AC31816D16160958CF3791AC8F62959CFBE99B5A2D11E37F5E07766D64589334EE02A19E4E319BE85D4C02F89C47E2A9A62C007E3182B19B6D7BA5902F6558965ED7DBB916CC73CD01F8A8477E4E46970847F26C964AE39E4433D7A256C97395C13C06E31FF09EAD9C7BB145A6C3BC04E32954FE91901F4D3101DE240D65588CCA2B4F0A5635E4A1F6A515458471G0E3551FC93A0BE05E3C3DC
	16900E7D1AE2292BE0FCDE95AD6D39A86DF2DBEBA7DFE12A2B5FF718CD75463EE6BA3BB39FB3143E731336D5318AFD4C978E53B3B0909F87E19284762DE6E8ABFE3B8E3E65A621B9E01F665938B92DDB13272FE2EDFC1674A45FEA321EBB154CF8EEEDC11ED92B216F2CA6F3FDEB0B72BB93194B6BF4EC3D0625DF6516CE6655C2C1199E6216CE64B53A513F60163EC0C14FF4FBF08B6AB66F41E902654E773C1E7B1B301A6994A2BD5B7E36CE189DF6B8B99E6202F0D73EA020AF75DEE99EBC2D6259BC7EA14CE0
	9E902D6420CC414E122A223C0A4A32C246FF72D965F7B07D126DDE3F03D52CE1FC9B25E7F84AFAE93CDFDACE6C9AG7804B558B62E2E20F38544A3B836F897362178B5B846DDDFCEE42D4D06B193028BC290042990E6C00803103696735EC27316C03C85029D82592FB39E1EA6E92F8D59C7A36D39AF8F5050C19D888FBA9FE5EB7B38DA21D34ACB642A15640D5320A73AB0D90AC7A48B6EEF9F4D9EF6DCEB4A146A1E5469F20DFCF826E625D01DC4FDDE63104A67FD087A0753C02750356873DE19C568FAEC1641
	812BD34A77C36A9F123549F81E4F51CAE437BB44DE516190CDEC6B38147FE91ADFD88775388E737F38196C7B6A35D9DDACCF81EDBFFAC8B7C088DEC7B0C31D410F5E8BA41DC898821AA0881BA5FCB27CFED0104FC040BBE435362FDFC9FD568448AF2C873F15E2D66A3396C1DC4F31D72B70FB0E05E33B284FBA8C71C00E7D084E8153A19E369EF5195261CF17C58ADD92563B6B121A932D3BDE52057108E23EA860F9B9E853DDD54426AEF1C832E9B3153799525BF2D03627A86602F8G271B5FCE6A0EFDC0A7EF
	AFC62B0973496E40B202F97ED39DA4FF370DEC50ECB11A2DAED14EFFAD4DBF83724E64BC4FD03FC648057A4F45B2B68FAF24ED50C157285978F55DD6011753C4652C017C0D1C6626F6727E55EFF3184FC33BB1DA6AAC66BEAB59DBA5B09B5F5D6E4B4658B75046C10A76C26C6A4AE5F34D4B73674FE7725C3BCD16679C753783A0CFD0AE6A15C27D68900807F36CB60A45C0BC1EE3FB29EF1D33815E77B670FA20FEF49B44CD9B300DCCBC692F0D7812FFBC14F3C8121F0D35BFB905E372248DB87EE69BF1CC8E63
	582EEE9C13E3B660F8D5DDCF66040A0DB04EC2680790GE1A204908833A044C34848835F97C2B3848B04A08841F9D846C7348C32DFB18230B888E4CFE25ABBC0832199825913E201A759DB9884CF32F7B0981EE44F9FAB233FEE0E24BF61CFF80DF4DCD40696C9D6A23F92EFD615973F51F77996BF7CC3947495125D082D02A55BF823E33A5E4CF5A5752CBE17B81A79C06B9C549AD5BC53CFB9EB7D24AB4FD06AA49D483CC35E3B567B20E3FD79BF755E670B95546F0F00F6B06B9D6C7BF9C6B2DE30B1875E03B6
	51F15BC8463B14CD58FF7A0C7E7A0FCE71EC853AFE882BA4EC98FEBF83FD675F90984F22FD5A7305013EDB84C27E891BD03EB597356754DDEC3D8172C5703C2FD4F9577D0F541F1E87F9D3B7E37E7BCE3A4F153F247EFA852457EEC65D87AE0CE42EC45D6D1B5DF59F37D92DFBCA27366E5F25E379F848BFE9B30E9F0FD3F9E6C0FCB6475A285EC2FE34AEAB9F31472A717DD04F316BBB707D3019E3CFF7603BE09747EE54639865621858016FFD6179B8667C013E334E02F8A2613D85713FD01C6CF5AE810C6CBD
	E6787B9EEB6C04CEEDBFD2CE3AD46EE87AA263516541C36B7BA01EF39C6D77C1D6AF5F206F5EADA0E76796ECB7419D244CB3E627196C43E779DE276F63A4FDBC4F372D5753475BCB5F9DC9BF1E3C85672CABA8B68D62219CFB07720D05F882AFAFF49BA9CF34126D7FA6293C3FEDC33E85DB11F6CD817579A0EE580A6DB83DF6A4FD98039D6846ED157D240970FBF7125267FB25DD3BDFAEE66F6910FF5AD6147BB7151EF6F828925F97E3F83E79155E7BEFB6ED278910D75806792F6AF06F3F13A86FA2C857EFC3
	3DEBFC7AAEB877237E16ED6E7DB7G62578932FF30D2D85B215DFFCBA96FA048BF114B779D3D360D16503C6110AF12673D2E5D3B6ECF30F5138270738AB07FDD156E3AFF132DBFC03A21GF59F742B7BB2056E2E82F75D838B186E7258152557567DBE36268179A7F379B676224F4CFC3E678B088ACC2EF13D23F97F9827E80B243DC4G0FAAC15996FB3D587995AA57AC489F4365EA73E167E0EA672CC2707D8BB17F95AABBFF0316598C69ED05E867EB7D5AF929C22740C2F7BBCF0278C7EEF63E2FCA5B4E33A9
	6F2910FFFAA10E3FF7FB6CB77597589A64A79F52FB958A599AE492477BA89E2740595AE47CE13C7BA89152BA5F0D1676505CCF77B604C1FCB6048488E95B411F04508801FD0F1A11DBA278591B59EA33B70BE7C40BE20B8B53EFFB4B586E3339FB912E7DCC7F7DAF04102B66A6F9BB1351391D4DBD4352B37E11F55CCF4B04D422DFB0244D009087A125A8DA178D212488754B58D04474A347C76ADCAEE3CFBFBD19024A1143A2B2CCBE24B1999FBE29DC9F4A78612A64A4AFB29A0A18ECADC5725A9B13AF3C0834
	09F100CF667224EC598E4F6346CFBDCF35G58623059C5076B9CC369A9B3299FEDAAD77A026CBBE1D5B9FE6B8B0372E7C148F8AFDA178F016C81E2F4B7D6F8FEDF8C29C03A9A48CB3EAF364233DF22E37DA6EF173F77CAE588G5A896F31FEC362D361B7714765B35C497924EF13A317FC73B1CFE36D0224B59B3B6999B5A5CE76102871E5922ED596D9F7D41DD82764181E6D194E0B41BCA4E81CB667BC487DC05AA741713C613F4A5D4EBEC8361D85CF16DEA2E82547717467FB345205E2CC3F2ED5ABBD8B5259
	18DED5ACF01B1C4AA20B8CDE56C54BCAABAAAB74653BAAAA0B724ACA8A116617D949247E4AF01D22F307DCDEC259C66F65151617310298DDC705CC17D737C5CDF7G0CD83049E934BA1D22435C3B29A82F24A82F34022C95EF14ECCD67D77AAFFE1FA70672FDCE364EC8634B5F53F0FC493975E64170585CA41C1F546D382018755921E2396FCEB8F01BE44322CAD976B32DA3577928DE268B2D9A3D6D97D7D35B1720EEE72A64727ABAB6F8AF2F3CDCAA07512D59AB5385F4FCD15B33B22B7749B67F38D6AE7FFF
	75A317AB20CE263B2D0A1C3B5DA4F5B669DC75A6166F66FAB95FD36D3E6CDFD68A8CF695CAF96BBA3C17F9DF03DCE63DFEA4E5B23ACD87E4BAF8ED56362549EC34587A9406E4347B5FD754430874E0F47D0D322D2FE9124B087C44E799954AB2EEBFA8530927487A47A6E9604A13C62ECD1C47F39F48F9176C99B90F9B8E4BF417D2C6E71BFBBED40CD3A7C74E73D36216C97359DF78BE7EE945EC9E1C814F599048BED816274E285ED313G6929BBD83FE7F35E21EEFFF31E52774D835A0A9D721C5738C3764B18
	BE8F3FC366A9371BBAF85AB96392CC13A6B7E93E6EA5E39839DD43FD4E7BDDEF1A04E3D18C5775E5D25CC99D3893C6330A6E115E152A7423F63315EC08E669AFD2FE1EF439FDEC8E8497440E1BB5157BFE7651B998EF41F0271DA1E6AA52BC67682706C83A72868BF77A9BF7E529525DF54E48A7329D24C48D8D47645B9CF01E59C353BDEFFB1066666B3B54F3A7E9A72DBBF0EE5D7339D6FABFCF3F37DDABFD18275BAB156963F73074F01EDE2FC9BF0B273F5820159E475327D7EA258BA5189E24191ED5023E41
	370F48FD6E3FDDBE7ADCD9A9F456321DB82E9EB292BA69CED4D1699F17DCF8BDC9A7F819E3CBD89F5317485FCFC7B7373FF6D47E3D7A18AC7B5008E4177C2163B2DDE07BBB5E694A4BAAF7D5B2CA6E7B1C10E9BF2F9CB94FFB5BE53A0397C6BAAEFA1FFB1F6F106D3038D3AE7B96DFF30A2A8E63ABBD5FA39669F1EC6CAFE163E7GBCA71430EF950C4ED665799EF1D595528517307708F0C2AF513177E2E1B751A39E30F9A53886F6EF872E0B69CB91DBC477CEB5C23C35945F5DC3747E46E332760E5F908300EE
	C229629D84FE13F1063C3BB39E5FE15FA8818FAB45B584FCDF703CD18853B35C53956F929BD7907E2A9BF024B1A6BFC75D8709CD62CA318F16FCAC575FDD6268FD44B43606639894D97CD8AF75994B31FD9C7DC4AEFFEE038F5F2C344C4DB71BEE1269A6EE9B0D4F48E8DE5806F231729E93657262760DC40E510D8DEF764A3F037BE5DE5F2B9C3DCDE348F560C289AF6FE133DC1E294327EFD222747F37DBE43A6C76AF476FEE9F10759C364A657F4057F824126B861BCC77434A510D017758E55A0FFC7B30EEE3
	608627CCF7247D0B0F01F5AE598E26C139EC1BFFBBF0193EF5C6AE6397E765B24E0E52A68F8D493407C6E113368BB21D65CB304905E1D91F1FFCAE17BDB0A21B3035BC937543257B2D953F5FB86CEB0F7C978D527D3D9FFE15BC583A5B23055E4FCCBDDE28FDE66A19C26DF3FF4F957A3E23F2EE2177BBAA938A15F7D432F5C26BC5B2D788E5513A9C883590DAA17417611A61956F12B6C2EE2C76DC3F5CEF6AA3E73648AD55AE64AFEE772E2BE53B7F3B2D873713F713EE9BCCEB8324FC44AFECA775653259A948
	30006D44C68EF3DF3F0BE515702B3613F6EA91FBA94C743C66124053D79711F1D1F39D9434BA886D75436ECF459ED72B310F535CDF142E34BBDB9E1552A20B088D49BD1E50EF4C6769C1042310515A4756480D65F8AF79B830EBE8996E5B7CE7AE694FDA777A48977A341ADD9631DEF2192433C2BFAF47EFE489E5380F73B14A2328BCDAE700508901711ED3016B73AE4002A130B28AF6726FEC65D846711D746FA4D4403BA504E688A31B8FF1ACF8114624330D3DDE4EB6D29F064910C777AB12BAB4D520DCFD7C
	4E03C99C4BB5A1A66CC46C01D644CCBB711B4363C944E71B81719888293B40AF04D0812199C297849704C08813A104C00800B087C28204144AE8DDB60422CAEC7B775071565BFA39344116F6G07111D87E6B6FF799456F7AD14B5D409B2D7F6214D27D5224D45AE7A778BA0AE68013F1E5B4108F9CB741877FAA3495B8F71G889375232D1FBB09C8D29B0A203210BEB50D73F4FD0EB60D65581B7CCCFBF395365B0B3B36AA5B6DE9CBDF7127BDE414AA6EA54EAB396C003C68CBAF5E2C1C1F51EFE864DB4B34AA
	AC7B9CAFBB16E31B8C1CDFB5E2AFD6A2B60DE377F2ACEBB756FFF78A717F06F6E37DC59E5964237E48FD9F2C17E23D6D50E33D85C199613B1157D9BD56453C5DD897BF25F9ABEA20EDC1B055E0FF3B3D8A7B5BB0E053EB300CB72A300C389AACA31F5EA9153FA7DAD78321F58F7A671174EF4430F9742A8E3218BE92DF127F66BE65939D6E7E70EB8B65F23F2F4F73DEEE393E82A67E5212425135AFFA7D9A3E73AE16F9ED9891AFE62713B929825BABE5590375F8662277B965730B7E67142BAE12B2C5188B48C2
	8C432E39C84F6C7776BAC5BEF70D3F184131A6E70B4DE9A6A3B973937A4A7DFDEF0C5C633ED705518D7A25D35F294068EE77CB278E52999DBA5E476DD1FF3FED25F8629E75775B274A313D266C05F9FFAFFEBFFE3EE2ECFFE7A4E10CF46F6D9C1B3E8F50B9ABE22FDA5F3FD1FC56DE353E1DBBD15F98C8EB5C077AEE61F2878396360F5565CC69993B4FF39F92233388DA7E63BCA9FFC62D767E25FC40752A34E608F755EA3521CDA6AD9EAEA9EF20979E13G1F26CA8B0778ACCD9E8F37EA710813728AF55ABC32
	GAFD02555C03CC505C93EE91277FE1C10643F9F3F1D246D9B6A12BDFD4354E4ED5FB0BDD9699BCAF7FB517397FDB01F3771FC599CEB67D8AEAD13E0A74CA6D7BF47B7A7AF1170C611B0C43C104AF516E2EDF8DF2B82EB173072E4B296014A7DB6FED708BE196EAFB1DBACACDEC373182DB0B4F1FB54D1994DF623C26E839CEB67F57B7A29310DDD3A2E310DDDB5FE69347B72635497B255297B72BFA8EE2FD3776553DDFC2E0534B9F55817AD463171DF5CCD4AB3542B792F20F8CB3D1A7F0F0C483F9352426A11
	7FA3EE7A67B7C8EB50523339415BD8F26EF32DBE58A565F7E950517E8F78A4D55AB40807B7E85569FC4DF36733243CF1DEF88806E8DD1641BD2DG62B586AD9E411528FF8B241BD4F906A09E84E13282E7F497B5E51BAE651BE15016EDB660712A34147D60CB6F5712ED1B665D89C5D25E5A7D5ABCDA816FD7258DC3FC3CA60F78CAAD9ED3243CA1DEF8C4GBEC71516G715483DABCE6E872481172169C5066E1G3CCD15E601F840812D713AB7050CB9CE49C7E6FCF76A47B616B47825539ECB067D52290372EF
	FBCDB8206E4B1BA8BE79003AAF5F2A473E9C8CE9996FE3DF1E6EF17F213F40686E99A35DDB2326E3FACD246F922E77557A5EC8710077557A3EDB0D7A86C1DABC5737ABC72BDD35B632BA6D0767F023E75B9A8F5894959E82718888F394B83BB3A9ECA5F9EFB3DBADE62B58407EE299577FA33AE7C73AB7D1717B59722FFEADF05E5740A3F2272C53630A5F5DBB3FFA5E973ED29E6C0CC08DDD53C900BACFED42F3835F24D88E440BB876634D744C8144DBB8161C0FE78EBAB9769D7A1E998C71D00EEDCE22E7BC96
	C66BA2B9F6122E8711BB96E2B8F6D5B341489D8B099CDB5700BC528EA296CE4FC910BB96BAB9E6B0A1DFBB4722CC48F79C47CE9CC33E93B9D6EFC23E41B22D817906F12CA68B79E6FC0058AB2D48B71FE3D79EC33EFA0E5D520DFC1BB956D807FC3BB87613BCFE0E03E3EF95A05F708F305FBF53A53745D8456F4F3A3E7AF6F9755740E3F9372CD33662770D462F1E776F3FD29E529D8AF4BDEF9654E7AC2F6769DB6859A60827B5A336F6AB3607EC0E7D082E7B75C3FC08E342C5BCBBB40EE3CFD461B921099C3B
	03FEBBA7F7C684F34C406FA28963585C13F8F6A86390E26FF4A05FFC0EDD5101FCCBB8E62AC43E860E3D550EFC5BB856456FCB30F00C6D4BA7FCC3B9F6AFAFAF12E3053C3C980E9DECC7D992B99645F9249DC66C76CA64514931492CBC0887F0EC81BB8B8271A99C6B2734A1901F4931B2CA9B8B71C40E1D1079FE085877A85689F197471A68B8938871099C3B1DE2D3A09EAA5352F3C911900F63D8B89D9B0596282396BE9E1DC73E799CCB24B23BA09E443195F40DF4B24427F10C2D1B12FBB8C2B9B64C4E5B81
	9649312934BCF28FC78C47CE727BDA92B976B64DC76E61E87C883197A85689F18B47BE24FC491D9BC39C2B23FC491D9BC19CBBCDE9491D9B13B9F68D67BB1DE3F750F6CF6E5CC8B902636546AAF98CA9D07C7E254FBB643E1C7164012F0147CF2AE51DFE2678DDD27D5573EE7ACAF9C863CC8E0EBD59C7301ED766E2FFAF62588DB574ECCDC6342E16E34F566078514A3170F5B8FE74F36C66B602113BF306B976EA9B0E9563B93670903639A9C7F0EF50D1FAF642E6B7FEC63EB332BDC41FD6605E25841EEFD205
	7BB924DF51BCA9C76177D14CB3FD337B192BCE32DCA56DBBDD1BBF1A73FF6AB37086607137A4F63F8A6375D3417DCE04BFD07F2D8572F59E457DD6C7287FB68471F19C3B067ABD53A09E4A31DFD37FAD966289C7F1DFD6E943E84E0628654DEF155F03980F57286FD782F8CDAB729D207EDBBF44DD9C7BAF4546C3FC92478228DFB68362B3B9F61A66930E411CFB8CE50EB30CE6EF2FDA661AE3EA19C56AB7B6825EFA8C792E233284C0BC08E341948B06F888479E26FEE38C4463B97699759BF30EC76B8A0E234C
	F7667913F9118F195B0E2BE54EAF2463AF6076637CDCE717FB5BDDC53FF9CE027429BC4F03DB5C5B6E2525F25BAD59BA1A36502FB8FFCE641AF5DC3DE77AD71F3B733A093CA2CB726F207ED08C50449FC73BAD21EDA76784586D84E233291F538A712E93E84B13BE6F19D0573FDA4E71D04EFEB7DB66F4D2BB81BE7584FEB3FCA0DD1675D66AE74C0434B9DC2EEF5339AE2D8D463BB6447259DDFF90EFE9C3D94F7A3D53E3118FD9835A54754E6E578B82FCA2679BC7E589A7F10E9DE1FE8144D35B91F3D22C8662
	0D6D3CAF79BDD369CB3E61F635FC0FD1D982811F500EED6E376D6E6DE0AE79ECA135111C8E6DB325955416E1D0C684AF67120FF34B93A95FC4481B5201791B5A5D7B43A92AFF892457F4207ED61F7AAF72233F854A19BBFF7EFC394D7F3CDD7BCC695D6C2EC448BF0E4B57E5F0378B7D1356D2B9FFB6E85B65A96AFBCE03B2C2F9B9BF973D5B659E6A1746C25E841E7F4986F73B3CC27D543C13B0CF1FC43B247A3C0F0114335807DDBACF2A470265DE4EB4EF233EE5BF64F71DC4798A756EF6A9DFA17745DB18DF
	CC64BC4947E5F67E9862B19C0B226DA123B3DA175309BAB97C6A344C07CE4D1D6A36DEC4E5E9835C540932A729E4BF3ED2167DA23B838272CE6A64F38515FD8644E7F20C35E561E31873BEC659EF72AB7BD29F3257FC2C167DE96A03B7825E7AB1723D157AF081908F62D88D756126C2FCBA47E654205FB407E3E9740E20F8084F6358DC6A4395FC922D2B788431475A10564431755486AE0887FC027A669E9A4DDC24BE3B9E7C093A7DFD2342FD6FC650EA392F0D5FCCAECA723AEF33385BE6B1EDAA4AABE51BB7
	997D9D64BA9A69772359F2D9B9C9C43ECD6C1CDA9E599FD13D89733D3ED64E57526AE37F345E7D0CDD76FA196EC2734869AE654AF4698D23BB4BF55386D93FBFEF144B393FE7647CE373E43A3F1A14F6A167FDE53BAC5DA467EBBE662B7CCA10F197AF3FF833CCD7E99AB95D55DB947A98C6E7175B364AF6095CA617D358B8F27E2F95A86A135E493C898FB167C9072440B8529E20F7653CBF6A76358718EC3AAF65E76A2A364BF4FB6AC6CEB779BD196EFBF923334D3D4532ED1ED71CB13E73524879571749F4D3
	370C0E3FD8AE738FD41CD5FE384A67F9DF3D127F34BDB25D941FE7985D6956544AF47A1323133B3ACE167BE345B9596F79BC536A4EBF20C126EB7739D73C524D5EB79BE43AF81F7B5E5D694A9AE53A56916FFBE734471AE4FD0794E7DA0F0EC26E9FA94E37EEE8775177F6122D71E51CF772E1C53F9855F98EC6DF28B863BA23FDB467D298FDF30B2C3B6DA3392CAD235061FB0AB3FF9FD77A205B3553ED5C397328CC374D97BF95DD26623C5D87A32AEBD9560A93323EA75A46A677F945593BEF097E7A04FCC666
	6F9DB25D6F9AC6CE37C7F11E6B397323EB5B490AB375DB94E3C22B4F3E654E3FD1F1267EB33FF4F21FB82D98BBFE6C33AF39537DC5B186FCB862330D0C76057D323E4B94E763FBC7A1F709E2AC59B58A3A230AF374DD2350778E4558F1E9147ABE5AAC6B7B7AA1399C5FE7065C79E7AB461034DC72B23C099ECA4CE32792795C3F3BC54EB72146C7FF29120A1772BED3636E6BFE2298E7FE37EEA465B03A3B9467F3FF50B6D2BB317CAF35394BB0D7B1063C654B07D54910C1470CB5146EA6678D6035874F9596B8
	9D428ACF5A3A6FBC7ED870A9C3D632105CA4AC6C27FB821B0485E7496642A1BB3C8D4C0270B650AE6734CDF483601CB365553AE7EF56A58BA9C048B6C4B689A9E4D7A350BBD8B9BA174DCECA91121541A5E4605D9452DD8CCE1730948F10969797BBBF93AE9295042CCB73674F17E3904601A84B5C4C79679BF7BE9F7174F127CED858A42CA5EF68C7E19AA207E0C49379A3D947C587D174003058CE7EE29AF90F86B91D74314069BAE7911B052C5EA3642F5BBBDD22298E0F5700CC2B685F325DC1CE416CE8B4BA
	7BDDC4665D4DC20A95FCF1173002A5DB0C563E9DEC977FEE2AECD2DD971517AE07013CAB293C2414E2DE4A4ABFAC5F724E4118901D10FCC0D8E23199CD870CBDAE1B23C9D86C6A87EF369F5E1F066C7B68E8A8241EA5AFFB74E5950ADB4F55A74A9613833BDC6853C3BF8EDA963B6CG58F948A16C20B9490BF5B14FE1EA68B7BA001568E802E0841679BC6D9B9BDCDB9FFAFFCDE73210A4A9C9CC3FE4486EE286634D0028DCFCG24F6BDB1777E1B1E2C090F83128342827A77EC01F1061C0B754F2B022F4FDDBA
	E14EB5C4AEBBB18F2D54F417303057B8E0361CF3890B398301C90BDD8E00481F76853EF9AA25B1094BDEFC5D7DA5577F7C4D8EAA3BCC6A92B632DA82529DFD22EDE0C7DDEF2F59AA7282204A2078DCDEBC49D32C4A33E2683B2B8EC64D6F06A6E690F483A5A5747FD27AFF99793F14A22594A9AD03FA0B97FC7ED3278F8D911D578CD155C99FC9127A8AF9A3C8D6F5G6F1D43CAE3299ECD1020E91EED094099B4F18549CEFE2CD2D6848132E97ABA7AFF6E58545A6A2956ED9EEA3D6392525DAF2C61496BA01C53
	08FDC1BD9732D178CBD232F4C8C3C222AADE61186426B249B36C92162B6E22F1CF3F7C342C9952109035A44FB3EEDA12351BC7F99EDCF85A4235F04FA345AE4D57C83B2C2C50B42429D30A971DBC7B693517E5BFBDBA64A6E49AD712F8A544D34B66C2EA2BB5F4D92A75317B700335152CA1BA796759823F94353E5C965867CFA7D9EE1207FCC3A4FEBF2940857F3FB4F548DAE0FFBB60C3D39248268552E453B93AD4016A98A5E93CEE8D588ACA87F08AB2E2AF17C232FB9EF27D0B106576975F7268BDD655AEE1
	35BB8C2E16157C2DDE1710CDEE204AF3CFA517CEC1124EA976C033476B22GC927D7BF71E5CD17105950F0AC2FEE401EF74CA92D0FEBD6D412170ACA71D2D186DAD15C93E38702D8B6D24417D403015ADECD12CBC8D32E783BF547239A314B2AD9DE6FBE851066C2960FF56EF24BAA5245FB1EC80EF81E5008DDD6AACE76D4112C5D27384B8D0D53E39D5EAD07DDA3F6D969F92B271E699EFAFEB9F29B3ECC39FFAD4BCD46B5B2D2ED64B2215CD7EB44AEAB6B074ADA6018CB47F09FDA84EB44AEAB1D6E732C99CF
	1DE4AD48D755324B52F5FAD861917249D269F450202188AAD92791E3CAB21552C62AE46DD7D4D5CF38B7BFD2DD6495E60197AD4828FE35C66C32EAFEB16E839AE9FE640F4425F851627F45B07112BF1D3CE9F1996B1468B9CCE86864921639ADF43B25F6EB44AEA79D13F4C39A92920D498EB1B2DE10D56DA469CE4D42CB4ABBB5933F196675EF92E61CE16779724F286F1C3F026E1D6F82FC788C5E5D7168F972015E5BDDCBC7870C960B4BE8B9DDE7B511FB176A4F39C479AE2BEFDDA065BBB10F1448523EF301
	487D2902667FGD0CB8788343F396E95B1GG4C2BGGD0CB818294G94G88G88G3AE90BAF343F396E95B1GG4C2BGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGCFB1GGGG
**end of data**/
}
/**
 * Return the ConfigurationPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getCommunicationPanel() {
	if (ivjCommunicationPanel == null) {
		try {
			ivjCommunicationPanel = new javax.swing.JPanel();
			ivjCommunicationPanel.setName("CommunicationPanel");
			//ivjCommunicationPanel.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjCommunicationPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsRouteComboBox = new java.awt.GridBagConstraints();
			constraintsRouteComboBox.gridx = 2; constraintsRouteComboBox.gridy = 1;
			constraintsRouteComboBox.gridwidth = 2;
			constraintsRouteComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsRouteComboBox.weightx = 1.0;
			constraintsRouteComboBox.ipadx = -17;
			constraintsRouteComboBox.ipady = -5;
			constraintsRouteComboBox.insets = new java.awt.Insets(0, 3, 3, 37);
			getCommunicationPanel().add(getRouteComboBox(), constraintsRouteComboBox);

			java.awt.GridBagConstraints constraintsRouteLabel = new java.awt.GridBagConstraints();
			constraintsRouteLabel.gridx = 1; constraintsRouteLabel.gridy = 1;
			constraintsRouteLabel.insets = new java.awt.Insets(0, 15, 4, 31);
			getCommunicationPanel().add(getRouteLabel(), constraintsRouteLabel);

			java.awt.GridBagConstraints constraintsPortLabel = new java.awt.GridBagConstraints();
			constraintsPortLabel.gridx = 1; constraintsPortLabel.gridy = 2;
			constraintsPortLabel.ipadx = 34;
			constraintsPortLabel.insets = new java.awt.Insets(6, 15, 5, 2);
			getCommunicationPanel().add(getPortLabel(), constraintsPortLabel);

			java.awt.GridBagConstraints constraintsPortComboBox = new java.awt.GridBagConstraints();
			constraintsPortComboBox.gridx = 2; constraintsPortComboBox.gridy = 2;
			constraintsPortComboBox.gridwidth = 2;
			constraintsPortComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPortComboBox.weightx = 1.0;
			constraintsPortComboBox.ipadx = -17;
			constraintsPortComboBox.ipady = -5;
			constraintsPortComboBox.insets = new java.awt.Insets(4, 3, 3, 37);
			getCommunicationPanel().add(getPortComboBox(), constraintsPortComboBox);

			java.awt.GridBagConstraints constraintsPostCommWaitLabel = new java.awt.GridBagConstraints();
			constraintsPostCommWaitLabel.gridx = 1; constraintsPostCommWaitLabel.gridy = 3;
			constraintsPostCommWaitLabel.insets = new java.awt.Insets(6, 15, 4, 2);
			getCommunicationPanel().add(getPostCommWaitLabel(), constraintsPostCommWaitLabel);

			java.awt.GridBagConstraints constraintsPostCommWaitSpinner = new java.awt.GridBagConstraints();
			constraintsPostCommWaitSpinner.gridx = 2; constraintsPostCommWaitSpinner.gridy = 3;
			constraintsPostCommWaitSpinner.insets = new java.awt.Insets(3, 3, 1, 3);
			getCommunicationPanel().add(getPostCommWaitSpinner(), constraintsPostCommWaitSpinner);

			java.awt.GridBagConstraints constraintsWaitLabel = new java.awt.GridBagConstraints();
			constraintsWaitLabel.gridx = 3; constraintsWaitLabel.gridy = 3;
			constraintsWaitLabel.ipadx = -10;
			constraintsWaitLabel.insets = new java.awt.Insets(5, 4, 5, 118);
			getCommunicationPanel().add(getWaitLabel(), constraintsWaitLabel);

			java.awt.GridBagConstraints constraintsDialupSettingsPanel = new java.awt.GridBagConstraints();
			constraintsDialupSettingsPanel.gridx = 1; constraintsDialupSettingsPanel.gridy = 7;
			constraintsDialupSettingsPanel.gridwidth = 3;
			constraintsDialupSettingsPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsDialupSettingsPanel.weightx = 1.0;
			constraintsDialupSettingsPanel.weighty = 1.0;
			constraintsDialupSettingsPanel.ipadx = 8;
			constraintsDialupSettingsPanel.ipady = -5;
			constraintsDialupSettingsPanel.insets = new java.awt.Insets(2, 15, 5, 15);
			getCommunicationPanel().add(getDialupSettingsPanel(), constraintsDialupSettingsPanel);

			java.awt.GridBagConstraints constraintsPasswordLabel = new java.awt.GridBagConstraints();
			constraintsPasswordLabel.gridx = 1; constraintsPasswordLabel.gridy = 4;
			constraintsPasswordLabel.insets = new java.awt.Insets(4, 15, 3, 36);
			getCommunicationPanel().add(getPasswordLabel(), constraintsPasswordLabel);

			java.awt.GridBagConstraints constraintsPasswordTextField = new java.awt.GridBagConstraints();
			constraintsPasswordTextField.gridx = 2; constraintsPasswordTextField.gridy = 4;
			constraintsPasswordTextField.gridwidth = 2;
			constraintsPasswordTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPasswordTextField.weightx = 1.0;
			constraintsPasswordTextField.ipadx = 73;
			constraintsPasswordTextField.ipady = 4;
			constraintsPasswordTextField.insets = new java.awt.Insets(2, 3, 1, 37);
			getCommunicationPanel().add(getPasswordTextField(), constraintsPasswordTextField);

			java.awt.GridBagConstraints constraintsSlaveAddressLabel = new java.awt.GridBagConstraints();
			constraintsSlaveAddressLabel.gridx = 1; constraintsSlaveAddressLabel.gridy = 6;
			constraintsSlaveAddressLabel.insets = new java.awt.Insets(4, 15, 3, 36);
			getCommunicationPanel().add(getSlaveAddressLabel(), constraintsSlaveAddressLabel);

			java.awt.GridBagConstraints constraintsSlaveAddressComboBox = new java.awt.GridBagConstraints();
			constraintsSlaveAddressComboBox.gridx = 2; constraintsSlaveAddressComboBox.gridy = 6;
			constraintsSlaveAddressComboBox.gridwidth = 2;
			constraintsSlaveAddressComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsSlaveAddressComboBox.weightx = 1.0;
			constraintsSlaveAddressComboBox.ipadx = 73;
			constraintsSlaveAddressComboBox.ipady = -5;
			constraintsSlaveAddressComboBox.insets = new java.awt.Insets(2, 3, 1, 37);
			getCommunicationPanel().add(getSlaveAddressComboBox(), constraintsSlaveAddressComboBox);

			java.awt.GridBagConstraints constraintsJLabelCCUAmpUseType = new java.awt.GridBagConstraints();
			constraintsJLabelCCUAmpUseType.gridx = 1; constraintsJLabelCCUAmpUseType.gridy = 5;
			constraintsJLabelCCUAmpUseType.insets = new java.awt.Insets(4, 15, 4, 36);
			getCommunicationPanel().add(getJLabelCCUAmpUseType(), constraintsJLabelCCUAmpUseType);

			java.awt.GridBagConstraints constraintsJComboBoxAmpUseType = new java.awt.GridBagConstraints();
			constraintsJComboBoxAmpUseType.gridx = 2; constraintsJComboBoxAmpUseType.gridy = 5;
			constraintsJComboBoxAmpUseType.gridwidth = 2;
			constraintsJComboBoxAmpUseType.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxAmpUseType.weightx = 1.0;
			constraintsJComboBoxAmpUseType.ipadx = 40;
			constraintsJComboBoxAmpUseType.ipady = -5;
			constraintsJComboBoxAmpUseType.insets = new java.awt.Insets(2, 3, 2, 70);
			getCommunicationPanel().add(getJComboBoxAmpUseType(), constraintsJComboBoxAmpUseType);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCommunicationPanel;
}
/**
 * Return the ControlInhibitCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getControlInhibitCheckBox() {
	if (ivjControlInhibitCheckBox == null) {
		try {
			ivjControlInhibitCheckBox = new javax.swing.JCheckBox();
			ivjControlInhibitCheckBox.setName("ControlInhibitCheckBox");
			ivjControlInhibitCheckBox.setText("Disable Controls");
			ivjControlInhibitCheckBox.setMaximumSize(new java.awt.Dimension(124, 26));
			ivjControlInhibitCheckBox.setActionCommand("Control Inhibit");
			ivjControlInhibitCheckBox.setBorderPainted(false);
			ivjControlInhibitCheckBox.setPreferredSize(new java.awt.Dimension(124, 26));
			ivjControlInhibitCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjControlInhibitCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjControlInhibitCheckBox.setMinimumSize(new java.awt.Dimension(124, 26));
			ivjControlInhibitCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlInhibitCheckBox;
}
/**
 * Insert the method's description here.
 * Creation date: (4/30/2002 1:27:35 PM)
 * @return int
 */
private int getDeviceType() {
	return deviceType;
}
/**
 * Return the DialupSettingsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getDialupSettingsPanel() {
	if (ivjDialupSettingsPanel == null) {
		try {
			ivjDialupSettingsPanel = new javax.swing.JPanel();
			ivjDialupSettingsPanel.setName("DialupSettingsPanel");
			//ivjDialupSettingsPanel.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjDialupSettingsPanel.setLayout(new java.awt.GridBagLayout());
			ivjDialupSettingsPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
			ivjDialupSettingsPanel.setVisible(true);
			ivjDialupSettingsPanel.setPreferredSize(new java.awt.Dimension(384, 110));
			ivjDialupSettingsPanel.setMinimumSize(new java.awt.Dimension(384, 110));

			java.awt.GridBagConstraints constraintsPhoneNumberTextField = new java.awt.GridBagConstraints();
			constraintsPhoneNumberTextField.gridx = 2; constraintsPhoneNumberTextField.gridy = 1;
			constraintsPhoneNumberTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPhoneNumberTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhoneNumberTextField.weightx = 1.0;
			constraintsPhoneNumberTextField.ipadx = 157;
			constraintsPhoneNumberTextField.insets = new java.awt.Insets(0, 31, 4, 24);
			getDialupSettingsPanel().add(getPhoneNumberTextField(), constraintsPhoneNumberTextField);

			java.awt.GridBagConstraints constraintsPhoneNumberLabel = new java.awt.GridBagConstraints();
			constraintsPhoneNumberLabel.gridx = 1; constraintsPhoneNumberLabel.gridy = 1;
			constraintsPhoneNumberLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhoneNumberLabel.insets = new java.awt.Insets(1, 22, 7, 30);
			getDialupSettingsPanel().add(getPhoneNumberLabel(), constraintsPhoneNumberLabel);

			java.awt.GridBagConstraints constraintsJButtonAdvanced = new java.awt.GridBagConstraints();
			constraintsJButtonAdvanced.gridx = 2; constraintsJButtonAdvanced.gridy = 2;
			constraintsJButtonAdvanced.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJButtonAdvanced.ipadx = 28;
			constraintsJButtonAdvanced.insets = new java.awt.Insets(5, 73, 12, 24);
			getDialupSettingsPanel().add(getJButtonAdvanced(), constraintsJButtonAdvanced);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDialupSettingsPanel;
}
/**
 * Return the DisableFlagCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getDisableFlagCheckBox() {
	if (ivjDisableFlagCheckBox == null) {
		try {
			ivjDisableFlagCheckBox = new javax.swing.JCheckBox();
			ivjDisableFlagCheckBox.setName("DisableFlagCheckBox");
			ivjDisableFlagCheckBox.setText("Disable Device");
			ivjDisableFlagCheckBox.setMaximumSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setActionCommand("Disable Device");
			ivjDisableFlagCheckBox.setBorderPainted(false);
			ivjDisableFlagCheckBox.setPreferredSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjDisableFlagCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjDisableFlagCheckBox.setMinimumSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDisableFlagCheckBox;
}
/**
 * Return the IdentificationPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getIdentificationPanel() {
	if (ivjIdentificationPanel == null) {
		try {
			ivjIdentificationPanel = new javax.swing.JPanel();
			ivjIdentificationPanel.setName("IdentificationPanel");
			//ivjIdentificationPanel.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjIdentificationPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsTypeTextField = new java.awt.GridBagConstraints();
			constraintsTypeTextField.gridx = 2; constraintsTypeTextField.gridy = 1;
			constraintsTypeTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsTypeTextField.ipadx = 233;
			constraintsTypeTextField.ipady = 20;
			constraintsTypeTextField.insets = new java.awt.Insets(1, 2, 1, 47);
			getIdentificationPanel().add(getTypeTextField(), constraintsTypeTextField);

			java.awt.GridBagConstraints constraintsTypeLabel = new java.awt.GridBagConstraints();
			constraintsTypeLabel.gridx = 1; constraintsTypeLabel.gridy = 1;
			constraintsTypeLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsTypeLabel.insets = new java.awt.Insets(3, 5, 3, 43);
			getIdentificationPanel().add(getTypeLabel(), constraintsTypeLabel);

			java.awt.GridBagConstraints constraintsNameLabel = new java.awt.GridBagConstraints();
			constraintsNameLabel.gridx = 1; constraintsNameLabel.gridy = 2;
			constraintsNameLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsNameLabel.insets = new java.awt.Insets(4, 5, 3, 39);
			getIdentificationPanel().add(getNameLabel(), constraintsNameLabel);

			java.awt.GridBagConstraints constraintsNameTextField = new java.awt.GridBagConstraints();
			constraintsNameTextField.gridx = 2; constraintsNameTextField.gridy = 2;
			constraintsNameTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsNameTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsNameTextField.weightx = 1.0;
			constraintsNameTextField.ipadx = 101;
			constraintsNameTextField.insets = new java.awt.Insets(2, 2, 1, 47);
			getIdentificationPanel().add(getNameTextField(), constraintsNameTextField);

			java.awt.GridBagConstraints constraintsPhysicalAddressLabel = new java.awt.GridBagConstraints();
			constraintsPhysicalAddressLabel.gridx = 1; constraintsPhysicalAddressLabel.gridy = 3;
			constraintsPhysicalAddressLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhysicalAddressLabel.insets = new java.awt.Insets(4, 5, 3, 14);
			getIdentificationPanel().add(getPhysicalAddressLabel(), constraintsPhysicalAddressLabel);

			java.awt.GridBagConstraints constraintsPhysicalAddressTextField = new java.awt.GridBagConstraints();
			constraintsPhysicalAddressTextField.gridx = 2; constraintsPhysicalAddressTextField.gridy = 3;
			constraintsPhysicalAddressTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPhysicalAddressTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPhysicalAddressTextField.weightx = 1.0;
			constraintsPhysicalAddressTextField.ipadx = 74;
			constraintsPhysicalAddressTextField.insets = new java.awt.Insets(2, 2, 1, 173);
			getIdentificationPanel().add(getPhysicalAddressTextField(), constraintsPhysicalAddressTextField);

			java.awt.GridBagConstraints constraintsDisableFlagCheckBox = new java.awt.GridBagConstraints();
			constraintsDisableFlagCheckBox.gridx = 1; constraintsDisableFlagCheckBox.gridy = 4;
			constraintsDisableFlagCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsDisableFlagCheckBox.ipadx = 4;
			constraintsDisableFlagCheckBox.ipady = -9;
			constraintsDisableFlagCheckBox.insets = new java.awt.Insets(2, 5, 9, 1);
			getIdentificationPanel().add(getDisableFlagCheckBox(), constraintsDisableFlagCheckBox);

			java.awt.GridBagConstraints constraintsControlInhibitCheckBox = new java.awt.GridBagConstraints();
			constraintsControlInhibitCheckBox.gridx = 2; constraintsControlInhibitCheckBox.gridy = 4;
			constraintsControlInhibitCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsControlInhibitCheckBox.ipadx = 38;
			constraintsControlInhibitCheckBox.ipady = -9;
			constraintsControlInhibitCheckBox.insets = new java.awt.Insets(2, 2, 9, 118);
			getIdentificationPanel().add(getControlInhibitCheckBox(), constraintsControlInhibitCheckBox);
			// user code begin {1}
			getControlInhibitCheckBox().setVisible(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjIdentificationPanel;
}
/**
 * Return the JButtonAdvanced property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getJButtonAdvanced() {
	if (ivjJButtonAdvanced == null) {
		try {
			ivjJButtonAdvanced = new javax.swing.JButton();
			ivjJButtonAdvanced.setName("JButtonAdvanced");
			ivjJButtonAdvanced.setText("Advanced...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonAdvanced;
}
/**
 * Return the JComboBoxAmpUseType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxAmpUseType() {
	if (ivjJComboBoxAmpUseType == null) {
		try {
			ivjJComboBoxAmpUseType = new javax.swing.JComboBox();
			ivjJComboBoxAmpUseType.setName("JComboBoxAmpUseType");
			ivjJComboBoxAmpUseType.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjJComboBoxAmpUseType.setPreferredSize(new java.awt.Dimension(120, 25));
			ivjJComboBoxAmpUseType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJComboBoxAmpUseType.setMinimumSize(new java.awt.Dimension(120, 25));
			// user code begin {1}

			//CCU-710 has only Amp1 & Amp2
			ivjJComboBoxAmpUseType.addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_AMP1 );
			ivjJComboBoxAmpUseType.addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_AMP2 );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxAmpUseType;
}
/**
 * Return the JLabelCCUAmpUseType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCCUAmpUseType() {
	if (ivjJLabelCCUAmpUseType == null) {
		try {
			ivjJLabelCCUAmpUseType = new javax.swing.JLabel();
			ivjJLabelCCUAmpUseType.setName("JLabelCCUAmpUseType");
			ivjJLabelCCUAmpUseType.setText("CCU Amp Use Type:");
			ivjJLabelCCUAmpUseType.setMaximumSize(new java.awt.Dimension(138, 16));
			ivjJLabelCCUAmpUseType.setPreferredSize(new java.awt.Dimension(138, 16));
			ivjJLabelCCUAmpUseType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelCCUAmpUseType.setMinimumSize(new java.awt.Dimension(138, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCCUAmpUseType;
}
/**
 * Return the NameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getNameLabel() {
	if (ivjNameLabel == null) {
		try {
			ivjNameLabel = new javax.swing.JLabel();
			ivjNameLabel.setName("NameLabel");
			ivjNameLabel.setText("Device Name:");
			ivjNameLabel.setMaximumSize(new java.awt.Dimension(87, 16));
			ivjNameLabel.setPreferredSize(new java.awt.Dimension(87, 16));
			ivjNameLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjNameLabel.setMinimumSize(new java.awt.Dimension(87, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameLabel;
}
/**
 * Return the NameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getNameTextField() {
	if (ivjNameTextField == null) {
		try {
			ivjNameTextField = new javax.swing.JTextField();
			ivjNameTextField.setName("NameTextField");
			ivjNameTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjNameTextField.setColumns(12);
			ivjNameTextField.setPreferredSize(new java.awt.Dimension(132, 20));
			ivjNameTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjNameTextField.setMinimumSize(new java.awt.Dimension(132, 20));
			// user code begin {1}

			ivjNameTextField.setDocument(
					new TextFieldDocument(
					TextFieldDocument.MAX_DEVICE_NAME_LENGTH,
					TextFieldDocument.INVALID_CHARS_PAO));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameTextField;
}
/**
 * Return the PasswordLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPasswordLabel() {
	if (ivjPasswordLabel == null) {
		try {
			ivjPasswordLabel = new javax.swing.JLabel();
			ivjPasswordLabel.setName("PasswordLabel");
			ivjPasswordLabel.setText("Password:");
			ivjPasswordLabel.setMaximumSize(new java.awt.Dimension(138, 20));
			ivjPasswordLabel.setPreferredSize(new java.awt.Dimension(138, 20));
			ivjPasswordLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPasswordLabel.setMinimumSize(new java.awt.Dimension(138, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPasswordLabel;
}
/**
 * Return the PhysicalAddressTextField1 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPasswordTextField() {
	if (ivjPasswordTextField == null) {
		try {
			ivjPasswordTextField = new javax.swing.JTextField();
			ivjPasswordTextField.setName("PasswordTextField");
			ivjPasswordTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPasswordTextField.setColumns(0);
			ivjPasswordTextField.setPreferredSize(new java.awt.Dimension(120, 20));
			ivjPasswordTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPasswordTextField.setMinimumSize(new java.awt.Dimension(120, 20));
			// user code begin {1}
			
			ivjPasswordTextField.setDocument(
				new TextFieldDocument(TextFieldDocument.MAX_IED_PASSWORD_LENGTH));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPasswordTextField;
}
/**
 * Return the PhoneNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPhoneNumberLabel() {
	if (ivjPhoneNumberLabel == null) {
		try {
			ivjPhoneNumberLabel = new javax.swing.JLabel();
			ivjPhoneNumberLabel.setName("PhoneNumberLabel");
			ivjPhoneNumberLabel.setText("Phone Number:");
			ivjPhoneNumberLabel.setMaximumSize(new java.awt.Dimension(98, 16));
			ivjPhoneNumberLabel.setVisible(true);
			ivjPhoneNumberLabel.setPreferredSize(new java.awt.Dimension(98, 16));
			ivjPhoneNumberLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPhoneNumberLabel.setEnabled(true);
			ivjPhoneNumberLabel.setMinimumSize(new java.awt.Dimension(98, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhoneNumberLabel;
}
/**
 * Return the PhoneNumberTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPhoneNumberTextField() {
	if (ivjPhoneNumberTextField == null) {
		try {
			ivjPhoneNumberTextField = new javax.swing.JTextField();
			ivjPhoneNumberTextField.setName("PhoneNumberTextField");
			ivjPhoneNumberTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPhoneNumberTextField.setVisible(true);
			ivjPhoneNumberTextField.setColumns(13);
			ivjPhoneNumberTextField.setPreferredSize(new java.awt.Dimension(12, 20));
			ivjPhoneNumberTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPhoneNumberTextField.setEnabled(true);
			ivjPhoneNumberTextField.setMinimumSize(new java.awt.Dimension(12, 20));
			// user code begin {1}
			
			ivjPhoneNumberTextField.setDocument(
				new TextFieldDocument(TextFieldDocument.MAX_PHONE_NUMBER_LENGTH));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhoneNumberTextField;
}
/**
 * Return the PhysicalAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPhysicalAddressLabel() {
	if (ivjPhysicalAddressLabel == null) {
		try {
			ivjPhysicalAddressLabel = new javax.swing.JLabel();
			ivjPhysicalAddressLabel.setName("PhysicalAddressLabel");
			ivjPhysicalAddressLabel.setText("Physical Address:");
			ivjPhysicalAddressLabel.setMaximumSize(new java.awt.Dimension(112, 16));
			ivjPhysicalAddressLabel.setPreferredSize(new java.awt.Dimension(112, 16));
			ivjPhysicalAddressLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPhysicalAddressLabel.setMinimumSize(new java.awt.Dimension(112, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhysicalAddressLabel;
}
/**
 * Return the PhysicalAddressTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPhysicalAddressTextField() {
	if (ivjPhysicalAddressTextField == null) {
		try {
			ivjPhysicalAddressTextField = new javax.swing.JTextField();
			ivjPhysicalAddressTextField.setName("PhysicalAddressTextField");
			ivjPhysicalAddressTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPhysicalAddressTextField.setColumns(10);
			ivjPhysicalAddressTextField.setPreferredSize(new java.awt.Dimension(33, 20));
			ivjPhysicalAddressTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPhysicalAddressTextField.setMinimumSize(new java.awt.Dimension(33, 20));
			// user code begin {1}

			ivjPhysicalAddressTextField.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-9999999999L, 9999999999L) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhysicalAddressTextField;
}
/**
 * Return the PortComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getPortComboBox() {
	if (ivjPortComboBox == null) {
		try {
			ivjPortComboBox = new javax.swing.JComboBox();
			ivjPortComboBox.setName("PortComboBox");
			ivjPortComboBox.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjPortComboBox.setPreferredSize(new java.awt.Dimension(210, 25));
			ivjPortComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPortComboBox.setMinimumSize(new java.awt.Dimension(210, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPortComboBox;
}
/**
 * Return the PortLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPortLabel() {
	if (ivjPortLabel == null) {
		try {
			ivjPortLabel = new javax.swing.JLabel();
			ivjPortLabel.setName("PortLabel");
			ivjPortLabel.setText("Communication Channel:");
			ivjPortLabel.setMaximumSize(new java.awt.Dimension(138, 16));
			ivjPortLabel.setPreferredSize(new java.awt.Dimension(138, 16));
			ivjPortLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPortLabel.setMinimumSize(new java.awt.Dimension(138, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPortLabel;
}
/**
 * Return the PostCommWaitLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPostCommWaitLabel() {
	if (ivjPostCommWaitLabel == null) {
		try {
			ivjPostCommWaitLabel = new javax.swing.JLabel();
			ivjPostCommWaitLabel.setName("PostCommWaitLabel");
			ivjPostCommWaitLabel.setText("Post Communication Wait:");
			ivjPostCommWaitLabel.setMaximumSize(new java.awt.Dimension(172, 16));
			ivjPostCommWaitLabel.setPreferredSize(new java.awt.Dimension(172, 16));
			ivjPostCommWaitLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPostCommWaitLabel.setMinimumSize(new java.awt.Dimension(172, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPostCommWaitLabel;
}
/**
 * Return the PostCommWaitSpinner property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getPostCommWaitSpinner() {
	if (ivjPostCommWaitSpinner == null) {
		try {
			ivjPostCommWaitSpinner = new com.klg.jclass.field.JCSpinField();
			ivjPostCommWaitSpinner.setName("PostCommWaitSpinner");
			ivjPostCommWaitSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
			ivjPostCommWaitSpinner.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPostCommWaitSpinner.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPostCommWaitSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
			// user code begin {1}
			ivjPostCommWaitSpinner.setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(0), new Integer(1000000), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPostCommWaitSpinner;
}
/**
 * Return the RouteComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getRouteComboBox() {
	if (ivjRouteComboBox == null) {
		try {
			ivjRouteComboBox = new javax.swing.JComboBox();
			ivjRouteComboBox.setName("RouteComboBox");
			ivjRouteComboBox.setPreferredSize(new java.awt.Dimension(210, 25));
			ivjRouteComboBox.setMinimumSize(new java.awt.Dimension(210, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRouteComboBox;
}
/**
 * Return the CommPathLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getRouteLabel() {
	if (ivjRouteLabel == null) {
		try {
			ivjRouteLabel = new javax.swing.JLabel();
			ivjRouteLabel.setName("RouteLabel");
			ivjRouteLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjRouteLabel.setText("Communication Route:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRouteLabel;
}
/**
 * Return the SlaveAddressComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getSlaveAddressComboBox() {
	if (ivjSlaveAddressComboBox == null) {
		try {
			ivjSlaveAddressComboBox = new javax.swing.JComboBox();
			ivjSlaveAddressComboBox.setName("SlaveAddressComboBox");
			ivjSlaveAddressComboBox.setMaximumSize(new java.awt.Dimension(32767, 25));
			ivjSlaveAddressComboBox.setPreferredSize(new java.awt.Dimension(120, 25));
			ivjSlaveAddressComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSlaveAddressComboBox.setMinimumSize(new java.awt.Dimension(120, 25));
			// user code begin {1}

			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_STAND_ALONE );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_MASTER );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE1 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE2 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE3 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE4 );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSlaveAddressComboBox;
}
/**
 * Return the SlaveAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getSlaveAddressLabel() {
	if (ivjSlaveAddressLabel == null) {
		try {
			ivjSlaveAddressLabel = new javax.swing.JLabel();
			ivjSlaveAddressLabel.setName("SlaveAddressLabel");
			ivjSlaveAddressLabel.setText("Slave Address:");
			ivjSlaveAddressLabel.setMaximumSize(new java.awt.Dimension(138, 16));
			ivjSlaveAddressLabel.setPreferredSize(new java.awt.Dimension(138, 16));
			ivjSlaveAddressLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSlaveAddressLabel.setMinimumSize(new java.awt.Dimension(138, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSlaveAddressLabel;
}
/**
 * Return the TypeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTypeLabel() {
	if (ivjTypeLabel == null) {
		try {
			ivjTypeLabel = new javax.swing.JLabel();
			ivjTypeLabel.setName("TypeLabel");
			ivjTypeLabel.setText("Device Type:");
			ivjTypeLabel.setMaximumSize(new java.awt.Dimension(83, 20));
			ivjTypeLabel.setPreferredSize(new java.awt.Dimension(83, 20));
			ivjTypeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjTypeLabel.setMinimumSize(new java.awt.Dimension(83, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTypeLabel;
}
/**
 * Return the DeviceTypeTextField property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTypeTextField() {
	if (ivjTypeTextField == null) {
		try {
			ivjTypeTextField = new javax.swing.JLabel();
			ivjTypeTextField.setName("TypeTextField");
			ivjTypeTextField.setOpaque(true);
			ivjTypeTextField.setFont(new java.awt.Font("dialog.bold", 1, 14));
			ivjTypeTextField.setText("");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTypeTextField;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) 
{	
	com.cannontech.database.data.device.DeviceBase d = (com.cannontech.database.data.device.DeviceBase)val;

	d.setPAOName( getNameTextField().getText() );
   int devType = PAOGroups.getDeviceType( d.getPAOType() );

	if( getDisableFlagCheckBox().isSelected() )
		d.setDisableFlag( new Character('Y') );
	else
		d.setDisableFlag( new Character('N') );

	if( getControlInhibitCheckBox().isSelected() )
		d.getDevice().setControlInhibit( new Character( 'Y' ) );
	else
		d.getDevice().setControlInhibit( new Character( 'N' ) );

	//This is a little bit ugly
	//The address could be coming from three distinct
	//types of devices - yet all devices have an address
	//eeck.
	if( getPhysicalAddressTextField().isVisible() )
	{
		try
		{
			Integer address = new Integer( getPhysicalAddressTextField().getText() );

			if( val instanceof com.cannontech.database.data.device.CarrierBase )
			{

				if( devType == PAOGroups.REPEATER ) //val instanceof Repeater900
				{
					((CarrierBase) val).getDeviceCarrierSettings().setAddress( new Integer(address.intValue() + 4190000) );
				}
				else
				{
					((CarrierBase) val).getDeviceCarrierSettings().setAddress( address );
				}
			}
			else if( val instanceof com.cannontech.database.data.device.IDLCBase )
				((com.cannontech.database.data.device.IDLCBase) val).getDeviceIDLCRemote().setAddress(address);
		}
		catch(NumberFormatException n )
		{
			com.cannontech.clientutils.CTILogger.error( n.getMessage(), n );
		}
	}

	if( val instanceof RemoteBase )
	{
		DeviceDirectCommSettings dDirect = ((RemoteBase) val).getDeviceDirectCommSettings();

		Integer portID = null;
		Integer address = null;
		Integer postCommWait = null;

		com.cannontech.database.data.lite.LiteYukonPAObject port = ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem());

		portID = new Integer(port.getYukonID());
		dDirect.setPortID( portID );

		Object postCommWaitSpinVal = getPostCommWaitSpinner().getValue();
		if( postCommWaitSpinVal instanceof Long )
			postCommWait = new Integer( ((Long)postCommWaitSpinVal).intValue() );
		else if( postCommWaitSpinVal instanceof Integer )
			postCommWait = new Integer( ((Integer)postCommWaitSpinVal).intValue() );

		if( val instanceof IDLCBase )
		{
			((IDLCBase)val).getDeviceIDLCRemote().setPostCommWait( postCommWait );
			((IDLCBase)val).getDeviceIDLCRemote().setCcuAmpUseType( getJComboBoxAmpUseType().getSelectedItem().toString() );
		}
		
		if( PAOGroups.isDialupPort(port.getType()) )
		{
			DeviceDialupSettings dDialup = ((RemoteBase) val).getDeviceDialupSettings();

			getAdvancedPanel().getValue( dDialup );
			
			dDialup.setPhoneNumber( getPhoneNumberTextField().getText().trim() );
			if( val instanceof PagingTapTerminal )
				dDialup.setLineSettings( "7E1" );
			else
				dDialup.setLineSettings( "8N1" );
		}
		else
			((RemoteBase)val).getDeviceDialupSettings().setPhoneNumber(null);

      if( val instanceof DNPBase ) //DeviceTypesFuncs.hasMasterAddress(devType) ) 
      {
         DNPBase dnp = (DNPBase)val;
         try
         {
            dnp.getDeviceDNP().setMasterAddress( new Integer(getPhysicalAddressTextField().getText()) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceDNP().setMasterAddress( new Integer(0) );
         }
            
         try
         {         
            dnp.getDeviceDNP().setSlaveAddress( new Integer(getSlaveAddressComboBox().getSelectedItem().toString() ) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceDNP().setSlaveAddress( new Integer(0) );
         }
   
         try
         {
            dnp.getDeviceDNP().setPostCommWait( new Integer(getPostCommWaitSpinner().getValue().toString()) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceDNP().setPostCommWait( new Integer(0) );
         }
   
      }
		else if( val instanceof IEDBase )
		{
			String password = getPasswordTextField().getText();
			if( password.length() > 0 )
				((IEDBase)val).getDeviceIED().setPassword(password);
			else
				((IEDBase)val).getDeviceIED().setPassword("0");
				
			if( getSlaveAddressComboBox().isVisible() )
			{
				String slaveAddress = null;

				/**** START SUPER HACK ****/
				if( getSlaveAddressComboBox().isEditable() )
					slaveAddress = getSlaveAddressComboBox().getEditor().getItem().toString();
				else /**** END SUPER HACK ****/
					slaveAddress = new String( getSlaveAddressComboBox().getSelectedItem() != null ?
							  getSlaveAddressComboBox().getSelectedItem().toString() : "" );

	
				((IEDBase)val).getDeviceIED().setSlaveAddress(slaveAddress);
			}
		}

	}
	else
	{
		if( val instanceof CarrierBase )
			((CarrierBase) val).getDeviceRoutes().setRouteID( new Integer(((com.cannontech.database.data.lite.LiteYukonPAObject)getRouteComboBox().getSelectedItem()).getYukonID()) );
			
	}

	return val;
}
/**
 * Return the WaitLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getWaitLabel() {
	if (ivjWaitLabel == null) {
		try {
			ivjWaitLabel = new javax.swing.JLabel();
			ivjWaitLabel.setName("WaitLabel");
			ivjWaitLabel.setText("sec");
			ivjWaitLabel.setMaximumSize(new java.awt.Dimension(65, 16));
			ivjWaitLabel.setPreferredSize(new java.awt.Dimension(65, 16));
			ivjWaitLabel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjWaitLabel.setMinimumSize(new java.awt.Dimension(65, 16));
			// user code begin {1}
         
         ivjWaitLabel.setText("(msec.)");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjWaitLabel;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	
	getPostCommWaitSpinner().addValueListener(this);
	
	// user code end
	getNameTextField().addCaretListener(ivjEventHandler);
	getPhysicalAddressTextField().addCaretListener(ivjEventHandler);
	getDisableFlagCheckBox().addActionListener(ivjEventHandler);
	getControlInhibitCheckBox().addActionListener(ivjEventHandler);
	getRouteComboBox().addActionListener(ivjEventHandler);
	getPortComboBox().addActionListener(ivjEventHandler);
	getPhoneNumberTextField().addCaretListener(ivjEventHandler);
	getPasswordTextField().addCaretListener(ivjEventHandler);
	getSlaveAddressComboBox().addActionListener(ivjEventHandler);
	getJButtonAdvanced().addActionListener(ivjEventHandler);
	getJComboBoxAmpUseType().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DeviceBaseEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(432, 416);
		setMinimumSize(new java.awt.Dimension(509, 472));

		java.awt.GridBagConstraints constraintsIdentificationPanel = new java.awt.GridBagConstraints();
		constraintsIdentificationPanel.gridx = 1; constraintsIdentificationPanel.gridy = 1;
		constraintsIdentificationPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsIdentificationPanel.weightx = 1.0;
		constraintsIdentificationPanel.weighty = 1.0;
		constraintsIdentificationPanel.ipadx = 9;
		constraintsIdentificationPanel.ipady = 24;
		constraintsIdentificationPanel.insets = new java.awt.Insets(14, 6, 2, 4);
		add(getIdentificationPanel(), constraintsIdentificationPanel);

		java.awt.GridBagConstraints constraintsCommunicationPanel = new java.awt.GridBagConstraints();
		constraintsCommunicationPanel.gridx = 1; constraintsCommunicationPanel.gridy = 2;
		constraintsCommunicationPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsCommunicationPanel.weightx = 1.0;
		constraintsCommunicationPanel.weighty = 1.0;
		constraintsCommunicationPanel.insets = new java.awt.Insets(3, 6, 11, 4);
		add(getCommunicationPanel(), constraintsCommunicationPanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	if( getNameTextField().getText() == null
		 || getNameTextField().getText().length() < 1 )
	{
		setErrorString("The Name text field must be filled in");
		return false;
	}

	int address = -1;
	
	if( getPhysicalAddressTextField().isVisible()
		 && (getPhysicalAddressTextField().getText() == null
		     || getPhysicalAddressTextField().getText().length() < 1) )
	{
		setErrorString("The Address text field must be filled in");
		return false;
	}


	if( getPhysicalAddressTextField().isVisible() )
		address = Integer.parseInt( getPhysicalAddressTextField().getText() );

   	if( !com.cannontech.dbeditor.range.DeviceAddressRange.isValidRange( getDeviceType(), address ) )
   	{
      	setErrorString( com.cannontech.dbeditor.range.DeviceAddressRange.getRangeMessage( getDeviceType() ) );
      	return false;
   	}

   	if( com.cannontech.database.data.device.DeviceTypesFuncs.isMCT(getDeviceType()) )
      	return checkMCTAddresses( address );
      
	//verify that there are no duplicate physical address for CCUs or RTUs on a dedicated channel
	com.cannontech.database.data.lite.LiteYukonPAObject port = ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem());
	if(com.cannontech.database.data.device.DeviceTypesFuncs.isCarrier(getDeviceType()) || com.cannontech.database.data.device.DeviceTypesFuncs.isVirtualDevice(getDeviceType()))
		return true;
	else if((! PAOGroups.isDialupPort(port.getType())) && (com.cannontech.database.data.device.DeviceTypesFuncs.isCCU(getDeviceType()) || com.cannontech.database.data.device.DeviceTypesFuncs.isRTU(getDeviceType()) ))
	{
		address = Integer.parseInt( getPhysicalAddressTextField().getText() );
		return checkForDuplicateAddresses(address, port.getLiteID() );   	
	}
	
	return true;
}
/**
 * Comment
 */
public void jButtonAdvanced_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	AdvancedPropertiesDialog dialog = new AdvancedPropertiesDialog( 
						getAdvancedPanel(), "Advanced Dialup Properties");

	int result = dialog.showPanel( com.cannontech.common.util.CtiUtilities.getParentFrame(this) );

	if( result == AdvancedPropertiesDialog.RESPONSE_ACCEPT )
		fireInputUpdate(); //there has been a change!!!!

	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame;
		try {
			Class aFrameClass = Class.forName("com.ibm.uvm.abt.edit.TestFrame");
			frame = (java.awt.Frame)aFrameClass.newInstance();
		} catch (java.lang.Throwable ivjExc) {
			frame = new java.awt.Frame();
		}
		DeviceBaseEditorPanel aDeviceBaseEditorPanel;
		aDeviceBaseEditorPanel = new DeviceBaseEditorPanel();
		frame.add("Center", aDeviceBaseEditorPanel);
		frame.setSize(aDeviceBaseEditorPanel.getSize());
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setCarrierBaseValue( CarrierBase cBase )
{
	Integer address = cBase.getDeviceCarrierSettings().getAddress();

	if( cBase instanceof Repeater900 )
		address = new Integer( address.intValue() - 4190000 );
      
   if( cBase instanceof com.cannontech.database.data.device.MCT_Broadcast )
      getPhysicalAddressLabel().setText("Lead Address:");
		
	getPhysicalAddressLabel().setVisible(true);
	getPhysicalAddressTextField().setVisible(true);
	
	getPhysicalAddressTextField().setText( address.toString() );
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setIDLCBaseValue( IDLCBase idlcBase )
{
	Integer address = idlcBase.getDeviceIDLCRemote().getAddress();
	getPhysicalAddressTextField().setText( address.toString() );
	
	getPhysicalAddressLabel().setVisible(true);
	getPhysicalAddressTextField().setVisible(true);

}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setNonRemBaseValue( Object base )
{  
   getJLabelCCUAmpUseType().setVisible(false);
   getJComboBoxAmpUseType().setVisible(false);
   getPortLabel().setVisible(false);
   getPortComboBox().setVisible(false);
   getPasswordLabel().setVisible(false);
   getPasswordTextField().setVisible(false);
    
	getRouteLabel().setVisible(true);
	getRouteComboBox().setVisible(true);
   
	getPostCommWaitLabel().setVisible(false);
	getPostCommWaitSpinner().setVisible(false);
	getWaitLabel().setVisible(false);
	getSlaveAddressLabel().setVisible(false);
	getSlaveAddressComboBox().setVisible(false);   

	int assignedRouteID = 0;
	if( getRouteComboBox().getModel().getSize() > 0 )
		getRouteComboBox().removeAllItems();

	com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List routes = cache.getAllRoutes();
		if( base instanceof CarrierBase )
		{
			int routeType = 0;
			assignedRouteID = ((CarrierBase) base).getDeviceRoutes().getRouteID().intValue();
			
			for( int i = 0 ; i < routes.size(); i++ )
			{
				routeType = ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getType();
				
				if( routeType == com.cannontech.database.data.pao.RouteTypes.ROUTE_CCU ||
						routeType == com.cannontech.database.data.pao.RouteTypes.ROUTE_MACRO )
				{
					getRouteComboBox().addItem( routes.get(i) );
					if( ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getYukonID() == assignedRouteID )
						getRouteComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i));
				}
			}
		}
		else
		{
			if( base instanceof com.cannontech.database.data.device.lm.LMGroupEmetcon )
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupEmetcon) base).getLmGroupEmetcon().getRouteID().intValue();
			else if( base instanceof com.cannontech.database.data.device.lm.LMGroupVersacom )
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupVersacom) base).getLmGroupVersacom().getRouteID().intValue();
			else if (base instanceof com.cannontech.database.data.device.lm.LMGroupRipple) 
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupRipple)base).getLmGroupRipple().getRouteID().intValue();
				for( int i = 0 ; i < routes.size(); i++ )
			{
				getRouteComboBox().addItem( routes.get(i) );
				if( ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getYukonID() == assignedRouteID )
					getRouteComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i));
			}
		}
	}
   
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setRemoteBaseValue( RemoteBase rBase, int intType )
{
	getRouteLabel().setVisible(false);
	getRouteComboBox().setVisible(false);
	getJLabelCCUAmpUseType().setVisible(false);
	getJComboBoxAmpUseType().setVisible(false);

	getPortLabel().setVisible(true);
	getPortComboBox().setVisible(true);
	getPostCommWaitLabel().setVisible(true);
	getPostCommWaitSpinner().setVisible(true);
	getWaitLabel().setVisible(true);

	if( getRouteComboBox().getModel().getSize() > 0 )
		getRouteComboBox().removeAllItems();

	int portID = rBase.getDeviceDirectCommSettings().getPortID().intValue();
	//Load the combo box
	com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List ports = cache.getAllPorts();
		if( getPortComboBox().getModel().getSize() > 0 )
			getPortComboBox().removeAllItems();
			
		com.cannontech.database.data.lite.LiteYukonPAObject litePort = null;
		for( int i = 0; i < ports.size(); i++ )
		{
			litePort = (com.cannontech.database.data.lite.LiteYukonPAObject)ports.get(i);
			getPortComboBox().addItem(litePort);
			
			if( ((com.cannontech.database.data.lite.LiteYukonPAObject)ports.get(i)).getYukonID() == portID )
			{
				getPortComboBox().setSelectedItem(litePort);
				
				if( com.cannontech.database.data.pao.PAOGroups.isDialupPort(litePort.getType()) )
					getDialupSettingsPanel().setVisible(true);
			}
		}
	}

	Integer postCommWait = null;
	String ampUse = null;
	if( rBase instanceof IDLCBase )
	{
		postCommWait = ((IDLCBase)rBase).getDeviceIDLCRemote().getPostCommWait();

		//only show CCUAmpUse when its a CCU-711 or CCU-710A
		if( com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 == PAOGroups.CCU711
			 || com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 == PAOGroups.CCU710A )
		{
			ampUse = ((IDLCBase)rBase).getDeviceIDLCRemote().getCcuAmpUseType();
			getJLabelCCUAmpUseType().setVisible(true);
			getJComboBoxAmpUseType().setVisible(true);

			//add the extra options for CCU-711's only!
			if( com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 	 == PAOGroups.CCU711 )
			{
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_ALTERNATING );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_DEF_1_FAIL_2 );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_DEF_2_FAIL_1 );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_ALT_FAILOVER );				
			}
			
		}
		
	}
	

	//regardless of our type, we shuld set the advanced settings of the port
	getAdvancedPanel().setValue( rBase );
	
	if( getDialupSettingsPanel().isVisible() )
	{
		DeviceDialupSettings dDialup = rBase.getDeviceDialupSettings();

		if( dDialup != null )
		{
		
			String phoneNumber = dDialup.getPhoneNumber();

			if( phoneNumber != null )
				getPhoneNumberTextField().setText( phoneNumber );
		}
	}

	if( rBase instanceof IEDBase )
	{
		//do not show the PostCommWait Items
		getPostCommWaitLabel().setVisible(false);
		getPostCommWaitSpinner().setVisible(false);
		getWaitLabel().setVisible(false);
		
		getPasswordLabel().setVisible(true);
		getPasswordTextField().setVisible(true);
		String password = ((IEDBase)rBase).getDeviceIED().getPassword();
      
		if( CtiUtilities.STRING_NONE.equalsIgnoreCase(password)
          || "None".equalsIgnoreCase(password) //keep the old (none) value valid
          || "0".equalsIgnoreCase(password) )  //keep the old '0' value valid
      {
			getPasswordTextField().setText( "" );
      }
		else
			getPasswordTextField().setText( password );


		if( rBase instanceof Schlumberger 
			 || intType == PAOGroups.ALPHA_PPLUS
			 || intType == PAOGroups.TRANSDATA_MARKV )
		{
			getSlaveAddressLabel().setVisible(true);
			getSlaveAddressComboBox().setVisible(true);

			String slaveAddress = ((IEDBase)rBase).getDeviceIED().getSlaveAddress();
			getSlaveAddressComboBox().setSelectedItem(slaveAddress);
		}
		else if( rBase instanceof Sixnet )
		{
			/**** BEGIN SUPER HACK --- Special case for Sixnet Devices!! ****/
			getSlaveAddressLabel().setText("Station Address:");
			getSlaveAddressLabel().setVisible(true);
			getSlaveAddressComboBox().setVisible(true);
			getSlaveAddressComboBox().setEditable(true);
			getSlaveAddressComboBox().removeAllItems();				

			com.cannontech.common.gui.util.JTextFieldComboEditor e = new com.cannontech.common.gui.util.JTextFieldComboEditor();
			e.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 16000) );
			e.addCaretListener(this);
			getSlaveAddressComboBox().setEditor( e );
			

			String slaveAddress = ((IEDBase)rBase).getDeviceIED().getSlaveAddress();
			getSlaveAddressComboBox().addItem(slaveAddress);
			getSlaveAddressComboBox().setSelectedItem(slaveAddress);

			getPasswordLabel().setText("Log File:");
			/**** END SUPER HACK --- Special case for Sixnet Devices!! ****/
		}
		else
		{
			getSlaveAddressLabel().setVisible(false);
			getSlaveAddressComboBox().setVisible(false);
		}
	}
   else if( rBase instanceof DNPBase )
   {
      getPhysicalAddressLabel().setVisible(true);
      getPhysicalAddressLabel().setText("Master Address:");
      getPhysicalAddressTextField().setVisible(true);
      getPhysicalAddressTextField().setText( ((DNPBase)rBase).getDeviceDNP().getMasterAddress().toString() );
      
      getSlaveAddressLabel().setVisible(true);
      getSlaveAddressComboBox().setVisible(true);
      
      //create a new editor for our combobox so we can set the document
      getSlaveAddressComboBox().setEditable( true );
      getSlaveAddressComboBox().removeAllItems();
      com.cannontech.common.gui.util.JTextFieldComboEditor editor = new com.cannontech.common.gui.util.JTextFieldComboEditor();
      editor.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-999999999, 999999999) );
      editor.addCaretListener(this);  //be sure to fireInputUpdate() messages!

      getSlaveAddressComboBox().setEditor( editor );
      getSlaveAddressComboBox().addItem( ((DNPBase)rBase).getDeviceDNP().getSlaveAddress() );

      
      getPostCommWaitSpinner().setValue( ((DNPBase)rBase).getDeviceDNP().getPostCommWait() );
      
      getPasswordLabel().setVisible(false);
      getPasswordTextField().setVisible(false);
   }
	else
	{
		getPasswordLabel().setVisible(false);
		getPasswordTextField().setVisible(false);
		getSlaveAddressLabel().setVisible(false);
		getSlaveAddressComboBox().setVisible(false);
	}

   
   if( postCommWait != null )
      getPostCommWaitSpinner().setValue( postCommWait );

   if( ampUse != null )
      getJComboBoxAmpUseType().setSelectedItem( ampUse );
   
}
/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val)  
{
	DeviceBase d = (DeviceBase)val;

	String name = d.getPAOName();
	paoID = d.getPAObjectID().intValue();
	
	deviceType = com.cannontech.database.data.pao.PAOGroups.getDeviceType( d.getPAOType() );
	String type = null;
	
	if (deviceType == PAOGroups.TAPTERMINAL)
		type = PAOGroups.STRING_TAP_TERMINAL[2];
	else
		type = d.getPAOType();

	Character disableFlag = d.getPAODisableFlag();
	Character controlInhibit = d.getDevice().getControlInhibit();

	getNameTextField().setText(name);
	getTypeTextField().setText(type);
	CtiUtilities.setCheckBoxState(getDisableFlagCheckBox(), disableFlag);
	CtiUtilities.setCheckBoxState( getControlInhibitCheckBox(), controlInhibit );

	//This is a bit ugly
	//The address could come from one of three differnet types of
	//devices even though they all have one
	//Note also getValue(DBPersistent)
	
	if( val instanceof com.cannontech.database.data.device.CarrierBase )
	{
		setCarrierBaseValue( (com.cannontech.database.data.device.CarrierBase) val );
	}
	else if( val instanceof com.cannontech.database.data.device.IDLCBase )
	{
		setIDLCBaseValue( (com.cannontech.database.data.device.IDLCBase) val );
	}
	else
	{
		if( d.getPAOClass().equalsIgnoreCase(DeviceClasses.STRING_CLASS_VIRTUAL) )
			getCommunicationPanel().setVisible( false );

		getPhysicalAddressLabel().setVisible(false);
		getPhysicalAddressTextField().setVisible(false);
	}


	if( d.getPAOClass().equalsIgnoreCase(DeviceClasses.STRING_CLASS_GROUP) )
		getDisableFlagCheckBox().setVisible(false);
	else
		getDisableFlagCheckBox().setVisible(true);

	getDialupSettingsPanel().setVisible(false);
	
	if( val instanceof RemoteBase )
	{
		setRemoteBaseValue( (RemoteBase)val, deviceType );		
	}
	else
	{
		setNonRemBaseValue( val );		
	}

}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	if (arg1.getSource() == getPostCommWaitSpinner()) 
		fireInputUpdate();
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
}

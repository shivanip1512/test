package com.cannontech.dbeditor.editor.device;

import com.cannontech.common.gui.util.AdvancedPropertiesDialog;
import com.cannontech.common.gui.util.TextFieldDocument;
import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.data.device.*;
import com.cannontech.database.data.config.ConfigTwoWay;
import com.cannontech.database.data.pao.DeviceClasses;
import com.cannontech.database.data.pao.PAOGroups;
import com.cannontech.database.db.device.DeviceCarrierSettings;
import com.cannontech.database.db.device.DeviceDialupSettings;
import com.cannontech.database.db.device.DeviceDirectCommSettings;
import com.cannontech.database.db.device.DeviceIDLCRemote;


public class DeviceBaseEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener, java.awt.event.ActionListener, javax.swing.event.CaretListener {
	private int deviceType = -1;
	private int paoID = -1;
	private DeviceAdvancedDialupEditorPanel advancedPanel = null;  //  @jve:visual-info  decl-index=0 visual-constraint="428,10"
	private javax.swing.JCheckBox ivjControlInhibitCheckBox = null;
	private javax.swing.JCheckBox ivjDisableFlagCheckBox = null;
	private javax.swing.JLabel ivjNameLabel = null;
	private javax.swing.JTextField ivjNameTextField = null;
	private javax.swing.JLabel ivjTypeLabel = null;
	private javax.swing.JLabel ivjPhysicalAddressLabel = null;
	private javax.swing.JTextField ivjPhysicalAddressTextField = null;
	private javax.swing.JLabel ivjTypeTextField = null;
	private javax.swing.JPanel ivjIdentificationPanel = null;
	private javax.swing.JComboBox ivjRouteComboBox = null;
	private javax.swing.JPanel ivjDialupSettingsPanel = null;
	private javax.swing.JLabel ivjPhoneNumberLabel = null;
	private javax.swing.JTextField ivjPhoneNumberTextField = null;
	private javax.swing.JComboBox ivjPortComboBox = null;
	private javax.swing.JLabel ivjPortLabel = null;
	private javax.swing.JLabel ivjPostCommWaitLabel = null;
	private com.klg.jclass.field.JCSpinField ivjPostCommWaitSpinner = null;
	private javax.swing.JLabel ivjWaitLabel = null;
	private javax.swing.JLabel ivjRouteLabel = null;
	private javax.swing.JLabel ivjPasswordLabel = null;
	private javax.swing.JTextField ivjPasswordTextField = null;
	private javax.swing.JComboBox ivjSlaveAddressComboBox = null;
	private javax.swing.JLabel ivjSlaveAddressLabel = null;
	private javax.swing.JPanel ivjCommunicationPanel = null;
	private javax.swing.JButton ivjJButtonAdvanced = null;
	private javax.swing.JComboBox ivjJComboBoxAmpUseType = null;
	private javax.swing.JLabel ivjJLabelCCUAmpUseType = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JLabel ivjConfigLabel = null;
	private javax.swing.JComboBox ivjConfigComboBox = null;
	private javax.swing.JComboBox ivjTOUComboBox = null;
	private javax.swing.JLabel ivjTOULabel = null;
	private javax.swing.JLabel ivjSecurityCodeLabel = null;
	private javax.swing.JTextField ivjSecurityCodeTextField = null;
	private javax.swing.JLabel ivjSenderLabel = null;
	private javax.swing.JTextField ivjSenderTextField = null;

	private javax.swing.JPanel jPanelMCTSettings = null;
class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == DeviceBaseEditorPanel.this.getDisableFlagCheckBox()) 
				connEtoC3(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getControlInhibitCheckBox()) 
				connEtoC5(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getRouteComboBox()) 
				connEtoC4(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPortComboBox()) 
				connEtoC6(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getSlaveAddressComboBox()) 
				connEtoC14(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getJButtonAdvanced()) 
				connEtoC7(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getJComboBoxAmpUseType()) 
				connEtoC9(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getConfigComboBox()) 
				connEtoC10(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getTOUComboBox()) 
				connEtoC11(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == DeviceBaseEditorPanel.this.getNameTextField()) 
				connEtoC1(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPhysicalAddressTextField()) 
				connEtoC2(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPhoneNumberTextField()) 
				connEtoC8(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getPasswordTextField()) 
				connEtoC12(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getSenderTextField()) 
				connEtoC13(e);
			if (e.getSource() == DeviceBaseEditorPanel.this.getSecurityCodeTextField()) 
				connEtoC15(e);
		};
	};
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public DeviceBaseEditorPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getDisableFlagCheckBox()) 
		connEtoC3(e);
	if (e.getSource() == getControlInhibitCheckBox()) 
		connEtoC5(e);
	if (e.getSource() == getRouteComboBox()) 
		connEtoC4(e);
	if (e.getSource() == getPortComboBox()) 
		connEtoC6(e);
	if (e.getSource() == getSlaveAddressComboBox()) 
		connEtoC14(e);
	if (e.getSource() == getJButtonAdvanced()) 
		connEtoC7(e);
	if (e.getSource() == getJComboBoxAmpUseType()) 
		connEtoC9(e);
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}	
	// user code end
	if (e.getSource() == getNameTextField()) 
		connEtoC1(e);
	if (e.getSource() == getPhysicalAddressTextField()) 
		connEtoC2(e);
	if (e.getSource() == getPhoneNumberTextField()) 
		connEtoC8(e);
	if (e.getSource() == getPasswordTextField()) 
		connEtoC13(e);
	// user code begin {2}

	if( e.getSource() instanceof com.cannontech.common.gui.util.JTextFieldComboEditor )
		fireInputUpdate();

	// user code end
}
//verify that there are no duplicate addresses for any CCUs or RTUs on a dedicated Comm Channel
private boolean checkForDuplicateAddresses( int address, int portID )
{
	try
	{
		String[] devices = DeviceIDLCRemote.isAddressUnique( address, new Integer(paoID), portID );

		if( devices != null )
		{
			String devStr = new String();
			for( int i = 0; i < devices.length; i++ )
				devStr += "          " + devices[i] + "\n";
			 	  
			javax.swing.JOptionPane.showMessageDialog(
				this, 
				"The address '" + address + "' is already in use by the following CCUs or RTUs: \n" + devStr + 
				"\nCCUs and/or RTUs cannot have duplicate addresses on a dedicated comm channel.",
				"Address Already Used",
				javax.swing.JOptionPane.WARNING_MESSAGE );

			setErrorString(null);
			return false;
		}
		
	}
	
	catch( java.sql.SQLException sq )
	{
		com.cannontech.clientutils.CTILogger.error( sq.getMessage(), sq );
		return false;
	}

	return true;
}
/**
 * Insert the method's description here.
 * Creation date: (4/30/2002 1:16:35 PM)
 */
private boolean checkMCTAddresses( int address )
{
	try
	{
		String[] devices = DeviceCarrierSettings.isAddressUnique( address, new Integer(paoID) );

		if( devices != null )
		{
			String devStr = new String();
			for( int i = 0; i < devices.length; i++ )
				devStr += "          " + devices[i] + "\n";

			int res = javax.swing.JOptionPane.showConfirmDialog(
							this, 
							"The address '" + address + "' is already used by the following devices,\n" + 
							"are you sure you want to use it again?\n" +
							devStr,
							"Address Already Used",
							javax.swing.JOptionPane.YES_NO_OPTION,
							javax.swing.JOptionPane.WARNING_MESSAGE );

			if( res == javax.swing.JOptionPane.NO_OPTION )
			{
				setErrorString(null);
				return false;
			}
			

		}
		
	}
	catch( java.sql.SQLException sq )
	{
		com.cannontech.clientutils.CTILogger.error( sq.getMessage(), sq );
		return false;
	}

	return true;
}
/**
 * Comment
 */
public void configComboBox_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	this.fireInputUpdate();
	return;
}
/**
 * connEtoC1:  (NameTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (ConfigComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.configComboBox_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC11:  (TOUComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC12:  (PasswordTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC13:  (PasswordTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC14:  (SlaveAddressComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC15:  (SecurityCodeTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC15(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (PhysicalAddressTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (DisableFlagCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (RouteComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (ControlInhibitCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (PortComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		getDialupSettingsPanel().setVisible(
			com.cannontech.database.data.pao.PAOGroups.isDialupPort( ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem()).getType()) );
		
		revalidate();
		repaint();
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JButtonAdvanced.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.jButtonAdvanced_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonAdvanced_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (PhoneNumberTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC9:  (JComboBoxAmpUseType.action.actionPerformed(java.awt.event.ActionEvent) --> DeviceBaseEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 4:29:58 PM)
 * @return com.cannontech.dbeditor.editor.device.DeviceAdvancedDialupEditorPanel
 */
private DeviceAdvancedDialupEditorPanel getAdvancedPanel() 
{
	if( advancedPanel == null )
		advancedPanel = new DeviceAdvancedDialupEditorPanel();

	return advancedPanel;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G081B05B2GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8BDC14D57ABF9595153B6B963BCB7BF3B7365C164ADFBF3658FE545A7E5816F62928E833E24BDAAAAAF633223222CD57171B208E9795959593E5C0B0642E2212222022E11122D2E1B1B2838C8EB3634C2023D27D1FF34E7B1C7742BB976872F77DF4FAF93E67F94EF3B97777F2C6A8D89D1A191AD6A08829190278EFF32AA0CCFFCA90EE4FE9B2A0D67800D9A7487E2D0134D01811118157F248AB1A
	B2284B97924A3301EE82DAB7E1D0378C7EDEACDC5392FDA77C61C14FA448FB6B4013315E756C4EC4BDD914AE58C118F2A1B583E604948EA9DF285CD1A862C1C0670AFF13141AA6887687894FC5B505B2FC2648578AF9DD108A62884F5E9DC5E2FEA4E004A78E2E098FB25ED9F01DC72D3BF8EB2348577D63B0E1663DBFCC4BA13AE465E36A0EE332816235D8D81AC68211AE242C5FC9E256F122FFFB2FED282A57E0355A2CAED36FC015713849E8F6599CD56245E8BAE56EB5ED5D5ACA2F3B8CCE53EE1A51E1301A
	ACD0C6B2357D061AECDAAE588E7448C384DBD3CB6255GFF37C3B2BE0476BF1453A45A97FCA2CCC8386E820F76C7BD446CCEFCC832FFA4F8CEE670DFC979F6DA9FC4CE8FF4B7A4E6CB648E34A57E2FE84B85A504B77FE1332E9CD27343083769895E85349DD25043E8637B6B50462EF37FAB249C7FEDDA1E879BC39FE63645BCAC59D8F45D9D994BE91BF9E8AE29770CE92097D293249EC88110C2A12D24EDF5C266FA386EBC6EEA318D8D592CBB6D76DD962363004DE832405FDB37C20E089DB4755A9CC6C1E06D
	71661ACA8DFBB0C5CED336C51218EFC785ECBFD38E5EAC38DC3F21EDC26DDB44A39353E245B29226C93E35BDC26216D9C7BB8C7CCD64D6C3E278AA0ACF10612C2E565136C068E9109777A84639AB97EDE94F38D6482F3DB5ADCB4316103B4252E29F935B42E312ADAC46B7E5139867471BF51510DAA1F5C39A01B4A99EE37CE8E63D2F986F03766F309AAC07060F5B8D8E572EE13345E8F20831BE3543DB2C3592138B9C339C0BCBD83D3C0E265FFA0BE6DC26077DACADB21E45A3AEDE0A8B53FD27C75D4971235B
	C6AE2F43B7E8DF49789B2B43F40E4F21F8018CE7F5FBA945892D073CA0C80C3F321460B37E26EEA32D94EFF8DC5DC6BE54E39B9901BC7793E69D2B5FFD734938681AEE56CD049486A98AD28224D910721F44BADEB3375A4FFE54A12BDFA67B785C25F0B539DD8E43BE2B53E530761A0E989CE643F10B49A908BC4F4EA5F1BD2E10CB227D3B97F46CB5D9CD8E034BEC33C26906A193B4A6A763F9F56EC24263B0515CCE731089948C5985AC776D390B61EAB1B8DD076DC6034BA4F1307C54AC52A6CE990EC009D0G
	7C5D73A409575DF44C2D013F5B1F44D81DDAC03049C0CF65F19949DA84578F20F11BACB00E1BFB0999864799EC238B6A48D897C74AF94A2C1B86296B6F90DFC8BD89E65DF4C8BDCF1BF5C910021FB16B8A1FB56BC2A095A4828D2960B96C4BAFF7E11BED4D79EF2172115FEA36D95A1F1FE36DAF7CB9F51BAD213644831E822970F9332E91D297A4B72490C8111062A125C0AAFC8172A1F5C1F2C38AF981676A8D3549B2FD44D66213BF7D0F78DFA05AC5FC17671178E8491058615FA4A6DABC899A7AC9CCC9BC7D
	9D9BC8BD10BAA1759022A147FC37A8FCA7EDE01E1F65E7097D0F7C1D274A4B74A013AE7BFB15871E859A98E9734B7C34AB177AA588E41D308452F20DFC567E93F5E48C0904F6B08D524C97308F7CEFD631C047863200415160A387F4E413D16A910CB7A21B78EEBAE5323ADACDF6135588FFB8453E787BEC92CBF11C68338958077FC8F1B2EF34C0C7F6F27CAF598B998EE548C79D4CFF10669BDCAE077978304BF44864F2192D7D127CE3549627E2CAF20A3EBE1FC3FC55A519F5FAC88DC968EB4FBC92DB6C6F6D
	B65B09E1FBA7994944F1E39ADD9F3581FFCF927617F7CA48DAB7105319FAC2CB79BFA86912451A700DE5CE73275DAD942ED768C87F964B17F4541512718567AF522667096D163451BC9EF7564EC87B5CG094CABAD10EAF9B97BE9B9E19007B8C8A9100A7F81739EA4BB2490C8D11012A0657F9346A8C8BD1002A005C30A7FA74635D31F2C32A7D734897B8C76C339CD582FBD75B7CCE8FB2D9F71E97916636D3BAE2E223E235FD9B25FF3FC783ED0509ED35463810951EA9FFC39FE44715BCC2CFD9D1A6FF90C79
	F43E769853B3DFFB0C691B6FFD8C314E579AC3D85E70FC92FB5BE92BECCCBABB1F2C97FAEDD62B098E0CDCC4E0FB4717BB099FE62B59F554EC6CB7398E194F1AE01F7CA299DB2653B509GFF973C086B0253A538AE501F3DC1087AE20266FEA36457B725D9DE94772BAFCA6B82E6533985E42CB3D9CCC39028965B305545708B68FAC7441D69944B68339259728FE1955689E15CE3B6D90C153DB0863B2A687F59B22BFC50F04A602EF21E06E0D5511A28EAA1393B491F95459BB6ECAF565C73D676199D26FDD67B
	B016D3F1242206356345422952B3D4F7474099273957E059E9B4BACCCE6777E4C62D00F6F4FFF81A5A51EAF61211FF0F45505FB2E06ABD314B662EB450DA2DE2178E13234F6698B299299DD50653AE51081DB4FBBCD65409B6BC53FE165A50E2333A9CB64BBE6B00793859753D19510031B01EF6D0BB8E5A20F7405E60386D7BD0DF4B75E7EF3233B6E1F3383EB7759B196E2B368E0B6D51E6B5FDB8BCF45C64781E5A62E65E96E71DE3FD621045F04AA4F6086F2F9A6A399DF7D4DEC36D583FEB5865027D217194
	5966993FDD93861505FF31D3D5EA3B67E2370139DBC4DB73DDEEE6AB86EA67107D305354F946EE7A6EC3D643EC38FA2B937BEF1F397F7B2B31DAB1863BDAD93F697C687077263C2ECE9CB33A196F9DB0511E36B90C5FD327292B97FD3F644CC956E74852607B6A3275D2DFF9337134283FF758E1F61DE931993F2F39342EC15C5FAC4FA3F3FEA82C85A2A0453E087B1B598BC8BE6EEF44CDDC0B4DE2E14B95482B19C156A2476B8AE46B0B449759BD7BDC1E7FC39F79F77848FF5EC77E22FA6F795BFD648F7A487F
	290F7C3BFC643F6CA3FFC503777CBDBE729DBE72FF69A37FDE0F792C9D7C93F8E0DDEBBAB9EC022116ACF3BEB01D41FBEE3AC52A3CA3864B30F4AF6FED9D59BFD8E4FBE3064F4851DEE73E16C37643A7F879EF664C9548BDB9D6A6DB97079BC819F607F94860B8C3B67B62331F97F7481F7D3841B7721CA8922E3110186C760F487E4653B39677CB241C4BCA7179D0A2484D02D47492AB2B6BA596974657DE06FC51C0CFFF49931F308E79E681DD7032D957703296DFB467F3C17E840FFC6EF2641B8279511092B5
	791AAA10CF7F0AD957740AA73EE44E578DBC2ED7BC79B1F9BD7285834F940F65F53D07FC310487D2C6B263EBCD167395D5A25FC44043A045A4EB1517407932DF057DBF2466D7B56D5B00FC81109F62112F2B0ABF7F037CB8C8491AFCAB2B112F72B5307DB5CFFC8FF2BEA3700CE870CDFA0D703D4E1F5DD5F3ECFEAD411E00CD79E59978CC62C03E7C392351B9D9F39FC7D242EB2C7C192F291F55FC18CF4AADF85D2C533F0E6339BDD7FE3FEA2753E96BB553DB65E21FDC1DA75F63B1CC1FB79F2EB0FBB8DD7BE0
	06F4E33FDE1FC7ECA57752C5D86C1BB73D773EB07A59G6BE5F8BB3065B41D2EBAEDE432EB03212105EF010F18CDE4BEE4F178F20F7C7965543C2B5396F808C3636B4C7F2E5725B8A4DCFBC78633696A2DE43E55FA865BCB0D2C6A9FB6D78D3B4C64263D41E52053A49B9158F34E434DA4AEC4F7486B78BC7389010CDFF1C0A7C192E61AF56C594AAD74198B51DB88D887A4B6460E8C494758A04043A1CD034456814B4BC81B9863FCAF46BC3AE2912BA3558C0FF13CF6F1B376471B2F951A3EBE2B790CB5A8AFB0
	ADE9A60BDF7E9BD29C9B6E38A1238D9273EF388C7D6B861E60B750BFD32916FF31EFE0DCAA5621DC82E005EF225CCFAB64F29DEFB2B9771B9817096B6A60BA7655A8BE6BFA096B1DGE5C6F33DE796E9691D75A65A7B2BF2144BFF4B2CEBFB8B65827364F2810007C10AFD8B6D4D2E78E6761AAAF81C204C4294541B1D2B2537A3856DDD3E9E650C00CD62F2C7D6286BE59A6425F0397B391C6EED98635EC6390492ADFDA3EF235C856F215CC440E2385CA3B9F2B961DFCCDF793FB0BEC96F0DB7BE2C2D5FB2EFBB
	DC3F59668FE33D3B92FDE8827BDC7FC29F9E5274FD8A77E1CA65B72B63F99BD0EF9414194275A665E8692DF987755AB7FCB33D77F33D2DD06648BB28373CD4CBEF44BB3C2E2BD0AE86B0E1964A1515285B9611EB1C456B3AEABCE39A5359DA0DBA5B213CC02EB3D32F25F36AAC34B5054B458116BD9B65422CDAF24D33715E6951BA791C9B159062F14E6D1C4D464601596AB937EE9119A782818F190DF36E2F7348BDE31CF38F42ACE7307643AA185F1F4EA73102752EC89F4DA7FA69FAD740E7ED36454476A9D0
	E68C2484C8A9108A7F0DBA1E4A77794E45EE3717F7AEBEED4677979A7F4DFCEA7F37745C29877EF6C18A12E16C7D020FD2C92CA77D1B3DDF104971CFA99EAE43D95DBCADE05DC4C3DE799CFCB693D92AFEFFE2429C65F32FB0954D647EBCCA2ECAC5472A645898D2CA574FF4BDA0EB0ADB376E679BEF361F38B2D53E1FC81C431E63E58B033AA2C8ECEDF06B9029F3729C2581B0D6DFF7971072C3000E00948BA98912AEF5D0D78E299D922B378D8B3556CA4AFA7334D0121EEF32D81CAB9BDF8CAF9BA5270E2185
	6C15534C6FC92568F7A06433322A570D4F0677C74929EDC8D259A06E650E2C542EC73C75AD5AFAFF8531156C7B04B4347575F15A1ADA6E4BD6E31AD63C4297218DA35C065F0CAA4BBF9BFE67530604B42DF875DBBC45CB3C6BA76E23D76B355AFD8A1429CB47F67FFB3AD7A0E327BE9D7DB9D1B1BEFF4E0C12D37B531D2E95539D3938AEF7F19BD62F9F1F8D9BC64929ED08D75940E2750EDD9DABB22FA483EFC686466A87AB328576AC35A8836DFCF81CF6BE6D534E008C2DD8AD5373BD8C3761527746E743CFC6
	493D2B22E7E5E8353F3CC34B355B9FDB4DF1DBF53CDE8BB251568FAA47E76BA723645471EA4F540AD7B60F17115B1037E1FCB62C9AA52736A1C653065539B846A6F09B9E9E278DCF7B3421F52E168DDF70F13EFBAEEFB7D563ECB7236454B6C4E95AF02C84ED0867B66C2F9E1F8DDD236454B6B4E5E9595024C79BBA335006FF0F53865D28770955B6C4EA5A70F7AB5A901705EB0D4C2584EB489E5435E6633A6272050487571C9DB63355A560FAF373A2F2BF5566B0771B2D08B5D12C576620AFA7B06C74E24F6F
	CDFC35D87B3D0940455A6FCDDC3E587B3BD9D7AE7674DE85FB0F6AA43D7F52897E59A1B1ECF0AEDDEB839D42313D59841B8A74B40E8D4CA3D88A507973907BD3A64174C0B74D433ABC1CCA308E206D9C6B21D83838D7E0588B82F9F70A70486BC71EBA3C6479CACC0710CAF4F8FA8F1024EF724E56AAAAFF4F52BCDAA7CE2749C99719644E17187702EB092071DE8AF94DC34067D62F144E93F9F63BECAD35820E712FD71079D0E30C27B754D8BB3EB7955B71C408953B1FF66BD932B7188934EE7E20CEBF9F6BA0
	F2284B0BAFCD7315316E90E9A3DC5D2A3C89C0072AB0715D40824FED7D51826D36BE3D00586F348DBBFACD6A767CECC1A14F13D66C7BDC26A192C271798715F7999C7D26D17D61F5AA4F72BC494FAA7054E7D87D5CD2A62F1FBA5E36FED56AAD1E912A78440874F438A62B72B2968C6A8A97A8B1263BEF1DDCF7BD577D578AAD5D15E2994D6235D3D666G7CBD82E922CA4FE420A3A145C2CA9073186E7565F25D9B396E5FAD5252BDD3144D5631EB11CE52D383FF37C26A52A9F5DB008E00948CA9CCA7577D14C2
	F703006376D1BEF7CC55E1FBFF1ABE7FAA4E9954B5C26A4841769E1507F343GE0A3B9CA5D93011E1C239573EBAB643AB7F13FDBF33D55F7E40E76D8958BF802AAEFA6505939DA3A0F2C176BEE64FE571FA4FE133ED5140BFE7FE2B971BBG6890C86139687715AB3C599983FC53E53A13453FB372208D66A9ED2A843A99D2278CE7F64EFFEF3E4CCE725E9053DD247726FBA0CFBBC6A300CFD465CD86BAB2CFABC6FFF8CF9E234D3CFE9666E2FD474A6492443FE742B5BBFFD0D7142F766542CAF9F9DBF8F9B9DE
	FD29495776259570AED51E856800FCADDF76ECD0443186F56B3D3635E0A8ABCCC37FD44062D4F8A250A91A3A67D7A9F45722EE2357F1CD37F0D0D73CF0346E86405AD4F8B75076051AF52854DD073A0F17F8539D28AAABC4242740B5CA15B78D68A4CD5D97D4ABF457236E1DDE6BFB162A2C7CC50C564335F111B22F9D681EC5DA3AB756A8F4EFC45D09D6EF3ADD2A3202C4FA92DC43D5F951C0472BB0B64F4DDFCA6EA13AB91DCB69B35C3620E6B22E5A9D26BE1343E1B232D7E4857DE2723D6A2F683AF186141B
	82C90C63DC325635984E5806E1D1BC0D723DB997777083C087C08A03B49592396F4156B53FBDCD7602FD8E4390CC33076C26DEA13C0048FE1E0D32C5C057C06A00E407B431GF5FEBD0F480220F9E8F808DA486CBBB01F2ECD01AFE38972BE1EC9F98DEE956FEBF44DDA83FCCD1C774E4364F96EBE32DCB17719FB45EF2248F3CB165F5ECB1E8B121B0B43D6C536D8FF8F264A6BEFG4A9DD9A2554144A55AE345E48DBC9230D8954E6E85371CA363FD8264258A6C9E8843BBA92EDBAA616C9E716DF49DC868C648
	0BDE0AEB764769FD560EE5033A01E508DD5CCD309120A7F26C810ACD86BA0AE30EC102CD83BA11E33F3562DEA105E311AB69779A05C097723DC2A96AF5F16C369C549B4431FF65205EC99CFB26827506F32C4709FA23B996FE907596ACC7ECA615AD873A11E3172DC7DB5AB9B6C479FA009E61983B5FB9F1B90BAD43DE2CC07B26F03E7D0B503EA80EDD73A94500CE62D8D89D5AB713E317537232D78C527E41309BAA50377295487758A274434D31464568C7A0473E62FE04F0ACFF7DE8BF562D67FEF03E9BF55C
	8F0E5D3BFB349F2F6FC6BF26F13EE93A51FE3C28C3BF12D6607A24DBB14EB62E04BAD8A935771E155AFD4525018781B6E925D6DFE16F61052FE47EEE60F8A3458B0AA41C751597689A1250EE48CBDC45E3CE6F4DF62C9E54D9D6A3D6D2C630G2003B9B6D806FECE6658A9AABB93E8DDB1E2FD74BED4B1500D9C1BCF57346DC08FF0EC0446ED8468899C3BE7B76A88655825342FA4831D3D86635BF8D29E5FA240EB56C8B1EA053F3B560C0E25C5838BGACF80DD6FC972EA0718ADB4362184571D5940F1261AC3E
	575135AA2163A12FE9AD5A9F318263914A312F69FBBC91C047F06CCF941B8EF4B247F4F598370C9244BEDB01F1AB6418130ED915C0B7F3EC6AA0462D13E3A1DFE2FC87B8361D56CDA450F19C0B27F513883420C7ECB23D2FD6G341EE341D5D8DEA347F2E9F9C1C007F22C1C3609882063B87682ADAF9168199CEB57E3F9C2A9E2F9347EBB009E6058DBD4F68468E00ED5D359B02023B8F6856B6BC0A7F36CF6BAC6E7144178D94647E86EC7B947E6D39DEE20A7F2EC8F75E3B250D3B9E620FA6300CE64587594CB
	A1BA56A176A835259C68C60E4570765E4E31EB293F13000E6058A55466982093B8766B9C54BB13E37F24D8F6B954D1B9E27F20ED289168B60E3D467D6D16B0EA73942023B996C8E3908FF4B2478A299F9995507EAAF88CA8D689F49B4736D359EE20AD9CDB447586F0ECA575AD8E68A40E75D2DBE681DD309E317FE671833A09E3EFD22C83E88B47F228ECG5093B9F6E5AF9F3BB87640D6BAF6812DFB8F3139B65AD701EE645875F4AD55CEE80E3DC2B1975093B996C2578813010E60584FCBD0EF8C473652EF23
	8AABE14C02548AC990DEA60F0045F55897F30B61EAB51DAE66AFE9341A07CCD67211F9F9C34D664A6206AD1BAB58FB882127656FA1B44E7F2547779002AA457534F8ED0AA991472DF733703C0EE910275BB0A82EE1EBFB944F3D09A1DB376EF5180D3B8C7D6DF4C54C766DFDD95922FC6B865C378753B2C7008E06B485923357DD066F68CD397EDA21BD60964DB3C692BA2FCE0B5E406CCC922F643D091A6B6E48E0BA8333D1273E8A5AF095D9735E12ADFFE70344723EF4F62F1C65A7AA72491A31C21067AF1DA7
	4FA776D6AB645B947919B2F9665BFD25685B2C7B42854B6FC2BD1E1FB2390A7994A3DE63FEDAA2CC325F18415AC26EEA29ADC4E67A539618DCED31A47787419FB9569EDF2577D705EA68EB5558C60B68385488F4BB47D25BF09C36F36C3729F82FBD10E3F1B6EC73A19CBBCB5789C9C08BB5B8076FBBC7ECACG3A86D29B249EC8A310A6C10A021440F9BF253C9935B02EC1EA05C45E33B642F53A780EB4F97F19717E5F59G0D182B9351C12EA3B57E5FFF2F91F909DD85223DD19A72ED5C6EE77C32853F2B7575
	6D2CBC617D7E05E21D13B628BE9B0024AC5EA61A6A35770A69F45C8A04D8CE2C453D6224EEA257EB338C8FD91DA25F2DF42FC41EA3CD65FC2FD5F95ECF3FC579E301B71E734F2EA36F6B77592CAE4673DFF40D12D187FFC3F2132B90E3ED7561F7266893C92DA05385E90908DB6A583AAC157B5DE3565ECFBFCD77EFD1409F8B09E1B368DC1482F4C6BDE2FF27F3AAA93F06E3A5F49D508CF4BB4796503D069B6840FA7465345317AFD9B2DFA26B153E4456CB3EB09DFF23FB3FF840936BB1268B5613183ACCEEB1
	26EB289D798D033A2286346D960AB5825D5A00F20195246E580B01E457EF309A391EDFD4E099F64E1FC8790F5B4807BD9D863355E512788BE8799300B7046BF4523DDCB450F13C0C5BBE1DCB5B2003BECFE463567564D8AF311C0768DAC558887350C61479D58539EFB1E0F3184FC23BB1D8F6DA4C7DD6724E3940E29CD561AD4658B7B046DD3276C2625A88FA66403FF7A0B1FB1EDEAB59E320FB4FD660695808FE7D0646E68468A00EF5D07F43000E605843F4ED12G748C0E956DA1D851A6D8E7EE42B6121663
	2B0DF8333FF31354C6443D319E47731ECD7CDE40900E67019CCB2763F49850D19C3B1F6D0301CE66D8EBAE0E67991B915BC17BC9A750164D7CDD1ABC32A78BGFA922488C8311092A1E5B4027F101AA0F5C3F2C38A019489A99ED28A2442ADB08FC0EA075483498DE9A224A910E237200E6DD4877906A599307C2D0374BB159A38F6C032C3A26F8FCF04AB79CEA39C2E643B13B838126FC51261CA3E87495FB6C83F772801AB79CE23832E64BB8C2663251C1ED44F7521976D75E70CF6FB60A37E1198E965C528F0
	92BF9227F6B19698974C4F1069A0318F1151A436B5DB7C1F5F64095493293FA6BFFDAD74C3CF2C0C07453AAD57DB2C49FC666F9990CBBC60250267E763D9AA1A4C93E4FEAB01749E24F582DB63E1FE0E6CEF5297656764107B4DEB4691E7124878B6CFE0F339BF7C7E1C1D31C1E56BE26165BC4FF3F5967D7E47CE7A41B69CF7371611311A0D7750AE37913E0F4B48DC93368D472E8B4A3C0DDDD902F23ECE59261C5FF4CD033A2BE05CFD8B92537903BC6D397A57F47DD8887C7AA6346F4AF55A6B199F51712A83
	783AB9EFF23EE75F6B69F8B981F8C3B87FFD254AF54A2F69D89E8D79F1CD68FB42EEDF3EE749FC975ED77ADE703E5A775BCA35FD8F276B0FE2602FFC9F475FCF693352AE20AD9C0B207B4A09C0CF66D8FD8E5EFB0A61D872D63C77B41DE3DB3661FD26E40E1DDD4E477D6D086D2B6577143663183C0C5E8F9BGBA8852E40E17D01CFC9F988598792E0F61B7ACD7BF87A2F26A78CD9631810DBCEF096938EB148E2DB1G7B7FD85F0FE17572A43D8F17G764D580E6DA6EB9BA9731459E9A65F2EB23EB09AB312DF
	3C03BF37299D3D3EFE157211F124E6872E97B65275D0B3506D9C8B24FA5DC0877272AE9FA465192C6413D9A3BE4F9AC43D11DC76B90A45GBDED8736637F7952577AA3DD1604E6D5BBEED62F37E3F3347BE5BF6DE74540DF590CF65FDF6239DF2652365B8D3C831C7F851D32DF5ECF6F2F84C3FEE8B37AF3D3152FFE39D866D71C4A1FC4207742D56A17FBF3347B65E66ACFB2704F6276BDE5776C4F47F4DCAA5FB928EB58097C7FAE4135BBDBFBE668C908199F3DFADF6BDAF95D285705BDBB5575D25826DDAF0D
	B44E9660F7F33B42F55ABE97D31FA783DFB867B5F8286FAE4ABB9D7812B8EF1A5EF3FCA26898DB388B5A6AAE3E8FD55577B36C799A64F76F427A3E5FE7FDAF1445EA42AEE5FD076ED257772B9EFCAFE377C701BF125BF7ACD75B77E1DA570940174CF92F4B99BDB6DC2E477BD845AD7CB92D1798BDCA799B003719733F240AD1BA2BCF48F737E00C5E72BAD7619CBDC77C9756220C51D42097827EA00F516D9E7A44C3D4F78C70CF63767D22D4BBC63F23F5A93442DE2F95472787F2B09ECD2DA81F1A6BB99EAB58
	DC8F3C5D1CDF28D746E3E9BDFD9E8179412D980FF955E309C7F42BB29E712D6AF84C73B0F72F21BEA682FFB2376F3FCA3463F1AB9D4B0AF6435EF0B772D66BC64F93FBF49823EE4E6756F90E510FA93F85F85D1C7FF009B2C6A7286E49109F3E9BE3D46133DFAD10752B445D4A98256CE67D8A772E0B05BA8FB15A4F1E476C013F7720FDE7755AB13A12367FA660EB633C519AB1FA0247E804736564F80ED199EDF79300B704736B754A98ED253A23A1BFEE8F466806DEDFB14A1145A8E32FB2C605FB55B1FAEE2B
	F60CE653B51B9E78EB7622FD2BEC5AB15AC877755D40B740F96F4C9C9D23E9199823C91CEF6EDC4FB1DACD5F211E823C111C7FFF2C4A985DCD6FA5A6C2FE72DE0C51EFCBFC45A8CF96A3FD1BB2C60DED6A98FD3CC0BBC6E63A7EED857E0EB6FC5E7060E77267A379BF8FCA43B9D1ED47C89BDBE78635C94F9B58BB73EF32E71200473761BB73752B487E7008E1F0740985GF6B8ECF61343F50621740493FC67ADEBFC67D5570DD36E44186558B36E6CEC32F6CFE913569062B3F10AE76C13F0768C69677C99D2BE
	6439766177866B4A487BCE71C04F04245B8F63BC24D6C8BD7BB116A32BEA849F5FB5F65A6C6D26D3A60B6CF3G71FB446C711D637D47ACFCD693F1470DC264A5BD9E4F0AF06DE76DA1D83C8E7C2404624C3FBB56917F22A1AF81D24687033AA2C8B5105ABEC07F22D7D5B27FC8F35869F299FA87680999689CB944C202494BE26259GE9727DB7FB77ECF59A3EBF568D653BA005C30AA6D7FEB6C47D6E516F2C056FC139699F30F756E642B53B1D49317ED3C31F6F9483D6590E7371637479CE975046F66C4FAF58
	FC2DCB65E9A248CDEEE77D196EC55A556B529FFB58735FC0777C51409F572EDCBF1263567847373C9CD637A42F5DF01C1E4FA347493B70EABCC744354AA24F7AD427C5D2F14CAF9C1D4F0BC19E12B4CEFA64BA4859665A27B062D9CBD71E13BFF31CA556D77101C171BBF5CB35D6FE834F3FEF2BD6FE9B4F7FB2DDAB3F7BGBE179EA0373FC4FB4FF6137BCE9E1EA9565554D4965755D7083C77F62741153C734A4A39E23DD4CE7F20BF65B0391B2BA5394956D2355C9E88DE79DA27416AF41A9C663E351545A0DD
	5BC00CDEAD46182EB1693F649D23B1346F9FE48892470627F5B8B6945DF41D507AD8CFDA09073141FE000D89D18724B9E3724F66E432B28F55C93677247B6F7329FAC96E269C7FE37EE68E0DF98D7A744BCDD2B90FD5782FFF6B96C96E10731B461C15F9EC2B946B00EDD279E746E057F5CD125C056B4999E3EB454EA59EE23716717D79FD096F383772EB6BEA217CCD983FBFD7F8AE739F5B25B2F7AC7227CC516F1D125CD51F2E550E2551EC30587AE501946334CB127D5AAFBF44B835C831FE3CD5AA43B906D8
	4F5EAD49E52FA77B673562C0D5AC0ED4EB390E2F76CA3C57687C5771C826A477075DE30BCD4ADCC9761EB168240FFC45B971B77C3B751483ECAE4D7F9066BDC8647BBD46F34B9072B4FD48664DCE388E08BCCC7F8A8F6B70BA3A8E8FG5E899F72E7283BBD2F2FE753E7EF11409B7DA14E351F650E659ED0B248E5FCA44D350564EF786322B47E6D0D07BD18156E417440DF73915A7A609AE22B62F4DE295F9A66E31EB8290A4FEA7B4898CACE54D54E35377769C49C0BE2F8FA7FC20ABB69626F28412C12FB28EF
	31AA7F105DECA59F1E327C97293E51F22B7A595C8BCBEFBBFE6CA6FF57FD871D7B7194D125EC0CE921ACEF745A60C9B749171F1A2B147F552682D53E5267FCBD31EDBF95EAE9B9AC1DA0AB4A973FCF73C71FB0AB666F7C1054A1BB7D15E996477812DC0ECB954672AE217B324E0F8E4B56B0F73D3F00E11C1961855D84E7A71C4A4B0F2C4B63389495713E270B46C4F6AA29B2A6537317287265F1E5EB1102B275DA0474312E0FF02D922919EF61790F17E8658770FC2BCE1E9F7C914B0F6179BF2D52121F4E7343
	F4DA7949BC7FB54D7C0C8E4C3FD4B33F1067C7EB66D7727CE13DD6FEB34F7FB8D7AB3F1367472D554A9F6840355E11F95218DAD866EDCC2DA5E36AC61CB77B4B081C787BDCA679FE3B665CC09A61515CEFF730B553048E69FDC44F6B0729E4389147703FAF106CFC2B549FBB199CFD9DCF407B6EEBBC4B5557ED5E3419C9224E52DCC976245779C6297302FCC96ECE3F67B84FF1183CD00A43DF96494AAE713F3ECE1E9C3D2F8CBA09735C548EB697CE03EBD287FB1F02495D37E0743E721985A8A7FC4C6647C238
	D6FE4C64585C52CD6F2D35825671B16EAB5F5D064F26A6F06CB845A6819D76B14EFFBFDE6E6BBEAD99D7709D2AE9A0177431B47F4D023FE74F19B3C7FAFF4AC11F31E59F9C54959C64770B453D5E681358B1BFDF19AF9BC3D7AFA2E3226A64F2BC2757246EEFA4A64D8779BB3F0B257AF35416F92B3F064D8D0D751B9AC8232C29C0197F2B254F0E9C43A6F11DD6C7577F7558BE96AE114A6FD861ED7D58D0A7DFA37DEC25A457B7B816753FB8CF8C22DD2C3C5D2B2472FE7025BFF6F8EE7F836FCA6D7F8A59FB32
	313A3175671B0BA5592B3D751D5ABAC5FF1EDFA24985D5FD737E3CC1AF7953D1AA15BD68ED0CD15964AC136426FB77C5D14FBFDDA7693E3DDCAAE346984A18AE3BBFF005F71B95F2F3E477833E9EE35D2D2D14E4EF76B67E2B6274D515A4F76337D0F7F7D7CB71CB2A114A7E4D986AEE016C9E41E13D3FF1905719FAB27E7599ACCE933723CAF66F603EB158F179C6C9EE6A37B0CF7D77A6A9B6F11B25323B747E5B74FA232C0F660CADB64F650C0E4D522DD2F9CF5579EF470FE477931E7F965A4DAD5B2558DC57
	AC155D106B3FCD774A6EABAC500DFD6EB8C66F4156F0BBDE125DEB2877BD9E56209D7BE47789B22B3E1DFBC516BDD2FCFEA43B3770086F764C6D3A2DCD128B9DC7FCDED34567EF7B247252FC37E1EE4746F6C96EFF3E2578F49D1062F36EC3297CDB577AEF57359F497AD666586373E226B2BEF7F7C8657D406A3F9DDB8E4964CA3E1D78F4F7CA71797A30D43E512FF64D1E6BD49EA1F26C79CD1B1E5825792CEF67F157FEA86B23630326DED727211F4B3C23A7EBBEFE5E8EFB84A866255173F3496FF44118E1BE
	CBBF34BF840C56FE76CC0B3E52A0BE3FDBA67BBBB44B5B79895FB4B19D37FF27BA187FB5E51E4FCF5ADC26FDFE527BE55AE7053514F97F0D358F4ABC7F465A41B279EF2C31FA5FF21454CDA72C516D1002A105C11AFA901F65A51411711F7CE26D6867F83B0D7D647CA672AB35AE547F27F51EFD3DF71D6F5F36FDF89D59789E374176E208140F785F56117AF2596C94944F752567A8B94C7D83AE46AA62096B687B9F26BE8A336735FB53F4E23F08875F728F61B7FFF74EA7FD5A2F336FBB4DAE0BE9975DC532EF
	72FE14C67450F3FD8F61F70066D6FAFE8F50A11042A1B17D71FB70F9F18CE0C2A71EFDD93C975FC9E86C44B2BE5CCBF86DC087C18A6D447DD3EC1754372FCFAD765C376B37B410D123DE7CCE6E15CFA4393BED7E487977ACA9BB0A153F68B3C20963FF37246B27E77D51A51E0B566761DCB43A77E4313A679C51CD5AD7A40F5FF55584A3B7BA0A8EA316368D31G0EC524A316F8981F55179CA3FB6D36A303BAA324A0C82110A2A045C2CA00B493D27651C1DDB124C6C86D10FAA039A085C28A01B465A876152ADA
	B2CEFBFAC7C27C1014F69807011DB9485A4603FAEC1BD1D0D64AD134F9D9A9362F1AAEEC9B0FDA683B47C087C08A694276757890362FF040123A300C35D67E3E5DA7D8C6071570F681ED07947489362FB91FCBF5F757EEDFF5D7DF0F5FE12E6D116436647AA367DF7B4279ED37C1EADF8347E5EDB9274833AE185DEAAAD88CBE2067B81071A374930C4BABE5589E62B936101FC35674A90E8FDFEDAA130F8FA7AC7DD5033DE4C42E6AA3B7CC48614064863DF8E31715435E1DA7B76DC2BF45326F2F627AB876F79D
	577799E295B90805F26C8FBAEC77995D083DC3B1B27E8DF0EC0A9E31D00E8571B3D263B916454F8BEDBA06FDE1C9AF390791FA8C5B72557356FAE94B64FEB61B41318D071F44B69C81E54CB8063AD2CEE29B56FF0E6DAF157E06E6B750AEC893BE47B6BCDF07EDF8B2E053BF47B28E72F75B8A3E40B282A8EFBB50C602FD01EDB84CA8350F2737D6F9EE9F0AF59E7F1B2F77B6EED35E53394FA415EBDB6EE5DDD5DF8F7B7E4DB55A77F4B44650E6715ED81F5446978EC83A827C5245627431A9DB904F8A7A826BF1
	67D14F73F15BD15F737147C7C919A618C7498399069DB9CA4FC86D6BF31A783C7F5951FC0E6DF3F6581CE6324AE3EB2C83E93E5ED9CA79C2794D83137B4C271C7ADCE5A697CC658AFA7C7B0E229C78583BDECF52393B29C77D8E587394EF6BD13F83E6EB45765A89F911BD789D48D3FB46776E5A0CF14A156E9D5FBBEFF751F5C611C16D6FFD94AFB7287D6D5C0B7EB6C0DE08817DFD609C2E21E7992418679F974FD2BB2EDD8F0D00372B72FA00F69D57EA8B56BA2DF5FA1048BB49030EF04023D5F971C04F5054
	1135CDCB07504BF88BFA35F514835E244A6BG5A582B256376F4AD9DEE11F702879D2100C72872E2001E2E4244BD45B14FFDFE7BB15FFDFE6FB16DB57801E3235760870FE92F413B0E4957608CBBF60C4C837D308E6A62FC47B97689477AE91984BBEAB63A86B8BEC46DA2F81B09A8C45CC96DBACD31AE91F34B30CFC46C4BE3E45C821787EC7C9C678B0F5177F94D968B23AF21BCE6AB8CE3BC9ED7D09B4DF6034C6E099C7B04576DA37A710DF34F7A14539E670A686FFBA4FBE8B36A14E144F1EEBFDDAB969A55
	7D7E904575C6F53F1FEE41FEDF83F941C66C7789C3639B2FDE9E275CBA6B784639E83A5ECD99656F7D944FB0297DBDE2C5FF73A14FE5C2FFBB943F8592EFE2F11FA1DE053E51754064E616E9757982113FDCC30E24A640BBD4F9C6205DFDDAEDE82966B91793C45ED08FBAA2G0FD165CD87BAD9D3470DBA74BF23FFD0D7582F6429843A99D2278C974FB52E5232EDC0649B695736EDA26013D5F911C04776EB591628535211A0724E7420A3FBE0D0D7B4204C2B813AF5C0CBC7D50E160EAE1157B2202DA3G70E0
	D5DE9850D3B5F57CC9530FB811B7912EA99AFAF4E658231A15F88350EDE6AD9DC20E3C9DF70BBCF6719A885790CD395FAA4629A9A2CF14F81D8657A4CD399FE81EFBBBCB644D9F540E1B9E70C6D5DEBB50BD03DABAF41AE74C3AC45EA08FBAA6819E2E4A0B86BADE0531B1FFF9AF199B1C623E07693D6D6478467CE81FF25AE37EECAAB74303BF6AA41C40B1FF186E398ACE2847402FA8DEFCC2BD86E6AD40B1309272A61E40B1B0DFB73E317B5DF14A9D9D339C73EBA65D9F4E9C656FEC0A8B96353F17703D278E
	726C96747708C92BDDCD333078A741F516E5F4DD648F8D6A74C3CA3C9168F6C8BDB21C7D1EC054E23297B7DBADE62B096C2C771A2CC0336F4FEF227798DDA0B3E1883FC9FF3505E021C0C78C211D4F5277DE45FD046C6F61566F7E9E7A8F3F879DB1FBA51F9E127D7D695E6FDE3773BB55A11ED1C06FEDC6C1FDCE63753CE504E0C9C027F06C1794A3E712E5D8917B0B1D1EEF2007B919E38F52EFC9AA01EE62D8E8A11EEF5041312B591924D0DEA847A652EF70A3000E66D8A97D26141CC99B4F31A768BDADF256
	6C8C0EBDCFE549D933028DB15BA254DB4031FDE6021133E60D9C2B5806FA5D9C3BE39B6A1D4031F7D6225ED00E55F23D919C3B191FD39B4331B9BD2837504E7DC8C73D159C9B4AC03D4D9CBBD00AFABBB9F6E58E6A9D6058B3FBD06F8847D666225ED80E5517E25FCE60D82F857B76CCBBDFF78EC96D7D93595F4FD83E7B367F4E772063DE2B645343323F3B3D1E1F7E6D689E7ECEF530BA6D27771A0513033A7C13D84F37525F3A56835D403142DAECB74D9CDBCA1FE5CD84BA14E367A8C64EB81942313F5173EC
	48F9A6D19C0B206D0B1C1BBB0DE326EA54114431EBA89FB963245101D8239E7536F36CEABD6A6D6258C5BA54EB61580DA528B700E3C778B928419CFB2A8475A6F26C0F3C3C940E057072F4CEFE7EEF955AD24C31429A545140316717210EC00E4D2432A1C007F16C939A178820E3B9768BAA1BG74AC0ECD263279AE506B626347B92E17E3F7FECE30C020A7F1ECAE9DAB42010E6258890A45821D4831EB283FA9C0978CA3D6454E02853A11E3DB2433F4B976BA651B84F48447BA589985C047F36CF794A3E7A0A7
	F26CB6F6BEB1E0A99C0B236511B310F527907BAB57DB4C319ADA9EB983594E316728ECA050419C5BCF79481945219C3B166A0DGBA06E3AFD20C1CE3BC1DE39733F3F84BE0FF4AB169BC610C5308BDCE7948B9461D9CDBC6758EG6D6658B5D4F6825013B81641476EB00ECD60678E27F0AC0676851D9B760FEE440E53B6D483F4B3477E427BDBBB479E6267A7CF62587F5079A19C68A80E9550B9BC9668C40E4532F31601AEB803D892EB9BC0B7F2EC8377231DE3B730F316010E60D8950DF38C50719C3B0A3583
	20E7F16C31AD345D1F05B972ACE2E1EB89568CF48747ECE7D02F11E399746C5A8820E3B9D66060F39F47FEB81F4FFDE7F16EBB37C01A8F82E5FF67AC786E6706326FC1473FF412CF69B9525F93B46F83FC3B3AFF7D1D6AE0F56AB661BCA21C43FA1E5707E3F781479EBDC15B485AC1DDB947D6D8F0AEE862584CDDB897F4F06CF7F4CCA6E7419BB976F6950E7BEE0EFD454FDA1FF08E5F053FAB0D5CEBF611D7BB483BD7823EB77FB85DF7CD873EA44E1B5D1A093C82BE2BEBB013BAE379D9A37439185DF0123C7B
	A43E77CF576B745B3491AC27E3C4F9865251C1016B7D8B65AF875E06917CCE60AD3A3E6F815A424BF8BECFF98E45ACBAD604C07E64917C1660FF8B47F24E157ABC25789175D92CB16C0CFC4013399D3F29D31E45FAA7DD0797FD897578A55A5FC9778E2DC0F7F0EC819D97C7008E6258E24A9781F454176843A50B46726D3D5A07E4A86783313DB39DEE3A6F1885F876D72877A05DE3B4G5D4C31E7A9568D74G4774C5848B86BA14E31FD2FFE3010E7F8AED3EDB77CD4E314A7EFAD0C7BEE84D63B6179B689C8C
	F8715728B7036ECF5A016E6258CFA96686BA10E327685AAE9C68299C7BBD1D8712001E79B55A7C769EDFB6E7F931D99FB028DB2830191D21DA83F8D3G6A6D26368CG6D8A406775E7CFC87D672BB2E51B8E266B6649409B9E006D6D5E9AE55F79857964CEBCBF2C3AF6AC67A82BFDC888D01F5330E11DD2D7541054CFEF24EB7099A013427D1B37102E69AF985455DC0058535467EE2087AE40D80F78BC0B49DB2CC3201C5D0AFE79G5B17829EFE814675D92BE46BDD6CDCB248CB62F6CDE16B3A8B21CDDD484F
	6F2573FEBB50DD97222DC3DE4FC472F5D6EF50056AB1A40B5A928CF8A8577BCFEACBAC50719C7BA335A563A2787BA244A651B13D95680E0B503E6A9ADFE76DF833AF70A235FDF9749E49C440A7DD444F1B2ED6360339F6294D5A2B353F058E2263DB8C14B10D1793314C733750773397DF83E11D9D087C3F2FD2760707287F0D105F9A087E3FF64E1B7F73FC786F02F25E923F97E3BA27FD2E7D3D748C3A1F89G7E895C3ED5B94A38D41C1462F22107B372FE4E769DD0C6B4AF67B6AFE7A2BE48760840BB0B736F
	D61D7F7699DB7FDE8CF3664598178E1F673FAD70929763456A31E03E07735F56D2FF6C40BFF2B15A572F0ACB3BC36A0B09EC7F833C9197E33BFE1E7A18G748C0E4DE6E783DE8274A56853BFFC7A34580BCF1D17285B7A9754169E40AD17206D33F4CA5BEDCE4976B314BF84F8A7F37E5BCBC61F7197D702EB1E38CB501F15345FA7GBD03E337B09FAF857AD274716FBEFDDC684D47CB55BE4EE3BE82EE3994ED2E4AD1361FD6669764CF66BC376DD64661CA32B494671915DE67CA75D9FAEA9B27010E4FGFF82
	9253FF87BF83B0016B7F3B6AAC36B7E87CE6C23E9004BCE7D463529DDFCAB6BEB526737E54B656000EAD8A9B7F454FEDEC627A7F1C2B547F64D7D27FFFAFCF3B7F37305F5E02B23AF9B94FFAB97FF1967BEDA5608D667CF3D47DFF890DDF94644786E1BBEA75D9C7B9DE5A512CA0F57F0F72507F63596F8FDD86FB194B787824BA63147D933F4373F09662DD344FB4C3996D3C1C1737F8B93F1A1E0F67865EC04E7FFFEB15F1F9046E4F43A1FF6AE5FCBDFD46D7DC723C44E546E56A382C4C560ECBBD5D7327GFF
	4665585F5F27FB7E9A201BAE47F5CA89A98A4F6F25FBC58B643939CC9D5DAB86839D4A31B9A7F0FC0965D88B5DABCE87BA09E32B68F33202ABE00DF385E2CFD521EC87475652393A87E84B9598271F78BC0B565B3EA3844A2995E3A9FE3B1BAE350167DAC6FD5B473E7B5969B09BACEBAB0BEB613FBA695B3E0DA34AF7D11F161DA3B3556E7FD9B099D912DCF41E7FF2BD32F3922EAADC27EDBB7B9E306A384DE294BDE8C0790BE4E799DCAFBB4B6023EA7FED38C7A7493DDBCF6AE0ADBB2F28183C173AF5AD16BF
	C3F666C1DC553B1E4BEF2C973F6FE2F2F9F9125C93F57E4BDD34D0126BDDB436B3FD2EDFA445659E593771B7EF75DF7F0C82C96E56ED723810F35E243864AD157812D7FAABFFB358380917DF37CC12AB739A97255CDF17CBF2576A469617B7D6C8F1A9147FCE58107F7A37493E41B7E510602E45436B0A45C3EAA0B80C7773F7A55EDDDE3F2F2E2DE3CA185C0545125C255E4EADD349BD35D612FBF44F58E213AA7BFEDEAF7BFE3EED8CF6872C13640EDA7C9D0BC6FF7F7E1B1A31594E3E01E7FF2F2B124AF9A05F
	1B6D750DF25B774B4E473B412B4FCA39BF54CAF21FD40F4D6E276BA43B5F10456EC52FF52E54DFA80B1B5B6BF73D1B95F535CDF6EE40B5DE3F67D44ACD2D1464767B7D8D37F85E4C86495FB4D93CBF9E035D25327381FED062255FEEA443FC9D57FD016CFC003EB1FDBFACFE7FA1BB8FA033F4AC5F790A5FF9B4C83E3FACBBA3600C3739C46543C259777FD7AE73A237E923E24CEA10FF7F6FCD1FCAEE226CBB7F874F79D357122D37EE137CFDD4F65E60D3F67F753FADBBAFA058EB9BA5FDC27A963AE807A4D762
	35EDA965F635C8F29B46F80E1E29D572B7C876AD7F3CB158FD539EC96EA61FF2D21FF8C076ED7F5DBE7D1564566F17647EBCC6FF8FFCA079EBEF174A7953986C3E6A00A477B33F64986F8BA54AF56BED9FCA651C9D037F0BBE16647CBF2BC37C9E752064FF176C5B7B08B1789FA17B267E2AB16AFF6C08A47B1046999D7532EFF30F0CF1DEBA7229A43B30F4F459BF7ECC4A7F2357B39C146DBBC2768D6F13E3681779DFC8F2EB46382E296F116A6908C1AAA7E98C7D720C6C5B5058AD7E4BCD6A1564FE6175CC89
	25DC0A6C1B405EB3E373F7E53F646F7681299C275733A4147AFFBEA849DDB8FFEC6B38BBE54FDD527A4866E7ADBD702B181D78455746A996096F3E93DE6604ADE21791F917DA14FDFF25D5AA679F3B7CA907491D165DEB3F416FF58C63FF23CAE9434FE577271DFA7FED380B9CB3C6FF7BEC31F0633934E2C11872121069F4880BC64B6E7C615F9E1B72C5EBC11A1036CF18BBC03FBF5AA7E41EA69FB239411754D7A17D4CF9D220774AB4A90710474B5DC7BFC4CAB8D53FB57D596B5253048CA814FD1835CF48A0
	DFD7C1598E26A35DE533938DC21ABC390465F83EAFF935387888D9B641AE08FC1D6992966089EED5D5D5E885F5B4C6C18502CDB90A185F7D2B0D4F47BEF54419AE4C5DA7ACA7371C8E199C74F48F13315560B2009A920DBD42BC3B4D8C19000341CEFA49F43A4ED8CC6DC2C15FC15349E11353E5B26E4473AC1CAEE1C9BB51D4CD4EDC28EEB3B887DC4478ED6DC20695B634AEE1914B36982C7D556C9364ED546B541DF4842137E78430F7B1351714D245CBD97C7B3C52B57B93A3530534BD42FC0B4DE05CE368F5
	599C7B04F92E8158928E58ACC637FDC7B3ADA87BB439ABC41F92C0F1AB397B4459AAF2E29EB77A047B9793F212F276C0405D8E211AF2123BFFD51C4358B2E0F000AA13E39FA4832854733C8B5EF5155D3FF7D9F71A10AABAC9C22FF35BDD425CBE431059F246A54C63ABDEDAAF7900389CG75599CC3E0DC314AB84C62BA2A2E3A2766A7B77C6BD32AC392F5892BD9B4C1343A5FE49B2A5E5957E7361AF88190DAA8FE95AF1E70D429F89639FF3CE47FA3F30EC3D3E8955207EAEA687FEB697F6B487FEBA9D2CB11
	5ABA08EF3260751FBA5F0DBE5376433B87E981D5FB2092DD0F3FF44F35CFB4A54FG6F768819274851B3D08F7992979B53AE197213D58B02932EA055E4A72D45CD4AADE045131102A47A8B9C344EBDF787A5E525547CD1CD102039235B92019749EB14GCBA877B27A7F95E30E8F11AA22326FF23756C9EE614DFE62D626529117102BBC7D1BE713DBB0E7B428317AB9170D4D5F0D13F5EE8D8B094B64E6E1B63A2EF6B9CFF53037C65D1ED7DE3E6F5630903D9CDD3164465BDFB98F5E21A65B78868D9E117AFA0E
	C65EF995057D4A860DBEE5F87029606BB9F366A862762373321FF6AAAB77075CC97298E109E84C82AFD565BE7F2A6AF365102ADDD5CA3F4FF28962C91E68FB1A864FE86ABFA2A616314564BF4227D312CF0AFF7F49BE850C4DA765B0D3B0EE1F3E6BE166F249AD32AD4066172EE17AFF12DB4112DB7209AE6DBF5C2DDFEA8F961EEA6BC7E07D659A944A123712692FB3EBCB24FE6C01A27259B2F9C93F4003A41010AA423A87645B39BC899B992E4963178CA58FACBE771123C9E47BD141A564105F3D9836F228C0
	C19753DF60586A9216AAE158DFD92DA68BE494125F4EA8D666121F4B002C2C72A12729372A82AA90FF6C8250DC7A43957C2120CBD85852F238F867103D7830D3FC3A6C92F487DABA0B59AFCDECAD86194E0F8E979F6A9DB09907ADA682E431DF092045093F79C0775BC4AB79D18EF2C6235452D83B229F9CFBE8E999B8563552310EF2418EE8AEBB5004B597A2736D363FE6117E23560AD3C9293B0C1F0E906AAE723F686F266744AA8784DC9D672A77GBA794B830AEEF5C803BA2FE6284714AE62B6A7D7E93764
	A2FD8F00E712D33A0EEAD067150B4FA847BFF4B1DDE9B77454D10F74959CF68D6A3C7273A5651EE6740ED5EDB733F28C8347F7555F1AC57A0DF1AE61DA3F43283E23ECBD244713FB6A8D0A28DE2EC11DCFEDA3B5C372A2CB74022C5C66FA71E20A86F5DE7914AB79B4D766D33687AF48ABCBF5676382ADF519561AD23E8A25130F06A36864CE8DCA5D457F3FD4D5336861DAE573A3D77294B44B0397E44E39DC03BA2F1ADF656801013CCD1569410B7F08E1E21364D3364C278C1FDE1C47BEB57B6F5379B4712436
	F93BF7F0DED97A112F3B9C7F917D39EB74F4C25AC93ACFAF4EE31F0EEB37FDAD1F4E4FA5E16A209BB6710AF789947D763886F5DE5500532DE1A15E1147BB538B70777FAA3E167F7EDF4A45DF27E58A5A3F7F57B3051D7B65922F64371359595B4FE6526FB4G0F1D0267B657E71217B0BD7D864721A1034562B2D8CE6C349A496FF16CBA63B2C93F811114C94AF7A20F184972DE49A4F68F4AE47E9FD0CB8788A58F12191ABCGG845FGGD0CB818294G94G88G88G081B05B2A58F12191ABCGG845FGG
	8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG54BCGGGG
**end of data**/
}

/**
 * Return the ConfigurationPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getCommunicationPanel() {
	if (ivjCommunicationPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.BOLD, 12));
			ivjLocalBorder1.setTitle("Communication");
			ivjCommunicationPanel = new javax.swing.JPanel();
			java.awt.GridBagConstraints consGridBagConstraints29 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints31 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints30 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints32 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints34 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints33 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints35 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints37 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints38 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints36 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints40 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints39 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints42 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints43 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints41 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints44 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints46 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints45 = new java.awt.GridBagConstraints();
			consGridBagConstraints35.insets = new java.awt.Insets(7,11,7,33);
			consGridBagConstraints35.ipadx = -14;
			consGridBagConstraints35.gridy = 2;
			consGridBagConstraints35.gridx = 2;
			consGridBagConstraints37.insets = new java.awt.Insets(5,33,6,2);
			consGridBagConstraints37.gridy = 3;
			consGridBagConstraints37.gridx = 0;
			consGridBagConstraints29.insets = new java.awt.Insets(3,3,3,17);
			consGridBagConstraints29.ipadx = -5;
			consGridBagConstraints29.fill = java.awt.GridBagConstraints.HORIZONTAL;
			consGridBagConstraints29.weightx = 1.0;
			consGridBagConstraints29.gridwidth = 2;
			consGridBagConstraints29.gridy = 0;
			consGridBagConstraints29.gridx = 1;
			consGridBagConstraints31.insets = new java.awt.Insets(6,33,4,2);
			consGridBagConstraints31.gridy = 1;
			consGridBagConstraints31.gridx = 0;
			consGridBagConstraints32.insets = new java.awt.Insets(4,3,5,17);
			consGridBagConstraints32.ipadx = -5;
			consGridBagConstraints32.fill = java.awt.GridBagConstraints.HORIZONTAL;
			consGridBagConstraints32.weightx = 1.0;
			consGridBagConstraints32.gridwidth = 2;
			consGridBagConstraints32.gridy = 1;
			consGridBagConstraints32.gridx = 1;
			consGridBagConstraints33.insets = new java.awt.Insets(8,33,6,2);
			consGridBagConstraints33.ipady = -3;
			consGridBagConstraints33.gridy = 2;
			consGridBagConstraints33.gridx = 0;
			consGridBagConstraints34.insets = new java.awt.Insets(5,3,3,11);
			consGridBagConstraints34.ipadx = 18;
			consGridBagConstraints34.gridy = 2;
			consGridBagConstraints34.gridx = 1;
			consGridBagConstraints30.insets = new java.awt.Insets(3,33,7,2);
			consGridBagConstraints30.ipady = -3;
			consGridBagConstraints30.gridy = 0;
			consGridBagConstraints30.gridx = 0;
			consGridBagConstraints38.insets = new java.awt.Insets(3,3,3,17);
			consGridBagConstraints38.ipadx = -5;
			consGridBagConstraints38.fill = java.awt.GridBagConstraints.HORIZONTAL;
			consGridBagConstraints38.weightx = 1.0;
			consGridBagConstraints38.gridwidth = 2;
			consGridBagConstraints38.gridy = 3;
			consGridBagConstraints38.gridx = 1;
			consGridBagConstraints40.insets = new java.awt.Insets(4,3,1,17);
			consGridBagConstraints40.ipadx = -5;
			consGridBagConstraints40.fill = java.awt.GridBagConstraints.HORIZONTAL;
			consGridBagConstraints40.weightx = 1.0;
			consGridBagConstraints40.gridwidth = 2;
			consGridBagConstraints40.gridy = 5;
			consGridBagConstraints40.gridx = 1;
			consGridBagConstraints43.insets = new java.awt.Insets(5,33,4,2);
			consGridBagConstraints43.gridy = 6;
			consGridBagConstraints43.gridx = 0;
			consGridBagConstraints36.insets = new java.awt.Insets(4,33,5,19);
			consGridBagConstraints36.ipady = 1;
			consGridBagConstraints36.gridwidth = 3;
			consGridBagConstraints36.gridy = 8;
			consGridBagConstraints36.gridx = 0;
			consGridBagConstraints39.insets = new java.awt.Insets(4,33,2,2);
			consGridBagConstraints39.gridy = 5;
			consGridBagConstraints39.gridx = 0;
			consGridBagConstraints42.insets = new java.awt.Insets(3,3,4,17);
			consGridBagConstraints42.ipadx = -5;
			consGridBagConstraints42.fill = java.awt.GridBagConstraints.HORIZONTAL;
			consGridBagConstraints42.weightx = 1.0;
			consGridBagConstraints42.gridwidth = 2;
			consGridBagConstraints42.gridy = 4;
			consGridBagConstraints42.gridx = 1;
			consGridBagConstraints44.insets = new java.awt.Insets(2,3,2,17);
			consGridBagConstraints44.ipady = 4;
			consGridBagConstraints44.ipadx = 37;
			consGridBagConstraints44.fill = java.awt.GridBagConstraints.HORIZONTAL;
			consGridBagConstraints44.weightx = 1.0;
			consGridBagConstraints44.gridwidth = 2;
			consGridBagConstraints44.gridy = 6;
			consGridBagConstraints44.gridx = 1;
			consGridBagConstraints44.anchor = java.awt.GridBagConstraints.NORTHWEST;
			consGridBagConstraints43.anchor = java.awt.GridBagConstraints.NORTHWEST;
			consGridBagConstraints46.insets = new java.awt.Insets(3,3,3,17);
			consGridBagConstraints46.fill = java.awt.GridBagConstraints.HORIZONTAL;
			consGridBagConstraints46.weightx = 1.0;
			consGridBagConstraints46.gridwidth = 2;
			consGridBagConstraints46.gridy = 7;
			consGridBagConstraints46.gridx = 1;
			consGridBagConstraints46.anchor = java.awt.GridBagConstraints.NORTHWEST;
			consGridBagConstraints45.insets = new java.awt.Insets(4,33,7,2);
			consGridBagConstraints45.gridy = 7;
			consGridBagConstraints45.gridx = 0;
			consGridBagConstraints45.anchor = java.awt.GridBagConstraints.NORTHWEST;
			consGridBagConstraints41.insets = new java.awt.Insets(3,33,5,2);
			consGridBagConstraints41.gridy = 4;
			consGridBagConstraints41.gridx = 0;
			ivjCommunicationPanel.setName("CommunicationPanel");
			ivjCommunicationPanel.setBorder(ivjLocalBorder1);
			ivjCommunicationPanel.setLayout(new java.awt.GridBagLayout());
			ivjCommunicationPanel.add(getRouteComboBox(), consGridBagConstraints29);
			ivjCommunicationPanel.add(getRouteLabel(), consGridBagConstraints30);
			ivjCommunicationPanel.add(getPortLabel(), consGridBagConstraints31);
			ivjCommunicationPanel.add(getPortComboBox(), consGridBagConstraints32);
			ivjCommunicationPanel.add(getPostCommWaitLabel(), consGridBagConstraints33);
			ivjCommunicationPanel.add(getPostCommWaitSpinner(), consGridBagConstraints34);
			ivjCommunicationPanel.add(getWaitLabel(), consGridBagConstraints35);
			ivjCommunicationPanel.add(getDialupSettingsPanel(), consGridBagConstraints36);
			ivjCommunicationPanel.add(getPasswordLabel(), consGridBagConstraints37);
			ivjCommunicationPanel.add(getPasswordTextField(), consGridBagConstraints38);
			ivjCommunicationPanel.add(getSlaveAddressLabel(), consGridBagConstraints39);
			ivjCommunicationPanel.add(getSlaveAddressComboBox(), consGridBagConstraints40);
			ivjCommunicationPanel.add(getJLabelCCUAmpUseType(), consGridBagConstraints41);
			ivjCommunicationPanel.add(getJComboBoxAmpUseType(), consGridBagConstraints42);
			ivjCommunicationPanel.add(getSenderLabel(), consGridBagConstraints43);
			ivjCommunicationPanel.add(getSenderTextField(), consGridBagConstraints44);
			ivjCommunicationPanel.add(getSecurityCodeLabel(), consGridBagConstraints45);
			ivjCommunicationPanel.add(getSecurityCodeTextField(), consGridBagConstraints46);
			ivjCommunicationPanel.setMaximumSize(new java.awt.Dimension(394,252));
			ivjCommunicationPanel.setPreferredSize(new java.awt.Dimension(394,265));
			ivjCommunicationPanel.setMinimumSize(new java.awt.Dimension(0,0));

            // user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCommunicationPanel;
}

/**
 * Return the ConfigComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getConfigComboBox() {
	if (ivjConfigComboBox == null) {
		try {
			ivjConfigComboBox = new javax.swing.JComboBox();
			ivjConfigComboBox.setName("ConfigComboBox");
			ivjConfigComboBox.setMaximumSize(new java.awt.Dimension(162,20));
			ivjConfigComboBox.setVisible(true);
			ivjConfigComboBox.setPreferredSize(new java.awt.Dimension(162,20));
			ivjConfigComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjConfigComboBox.setMinimumSize(new java.awt.Dimension(162,20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjConfigComboBox;
}

/**
 * Return the ConfigLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getConfigLabel() {
	if (ivjConfigLabel == null) {
		try {
			ivjConfigLabel = new javax.swing.JLabel();
			ivjConfigLabel.setName("ConfigLabel");
			ivjConfigLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjConfigLabel.setText("MCT Config: ");
			ivjConfigLabel.setVisible(true);
			// user code begin {1}
			ivjConfigLabel.setPreferredSize(new java.awt.Dimension(172,19));
			ivjConfigLabel.setMaximumSize(new java.awt.Dimension(172,19));
			ivjConfigLabel.setMinimumSize(new java.awt.Dimension(172,19));
			ivjConfigLabel.setFont(new java.awt.Font("Arial", 0, 14));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjConfigLabel;
}

/**
 * Return the ControlInhibitCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getControlInhibitCheckBox() {
	if (ivjControlInhibitCheckBox == null) {
		try {
			ivjControlInhibitCheckBox = new javax.swing.JCheckBox();
			ivjControlInhibitCheckBox.setName("ControlInhibitCheckBox");
			ivjControlInhibitCheckBox.setText("Disable Code Verification");
			ivjControlInhibitCheckBox.setMaximumSize(new java.awt.Dimension(200, 23));
			ivjControlInhibitCheckBox.setActionCommand("Control Inhibit");
			ivjControlInhibitCheckBox.setBorderPainted(false);
			ivjControlInhibitCheckBox.setPreferredSize(new java.awt.Dimension(200, 23));
			ivjControlInhibitCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjControlInhibitCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjControlInhibitCheckBox.setMinimumSize(new java.awt.Dimension(200, 23));
			ivjControlInhibitCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlInhibitCheckBox;
}

/**
 * Insert the method's description here.
 * Creation date: (4/30/2002 1:27:35 PM)
 * @return int
 */
private int getDeviceType() {
	return deviceType;
}
/**
 * Return the DialupSettingsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getDialupSettingsPanel() {
	if (ivjDialupSettingsPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder2.setTitle("Dialing");
			ivjDialupSettingsPanel = new javax.swing.JPanel();
			ivjDialupSettingsPanel.setName("DialupSettingsPanel");
			ivjDialupSettingsPanel.setBorder(ivjLocalBorder2);
			ivjDialupSettingsPanel.setLayout(new java.awt.GridBagLayout());
			ivjDialupSettingsPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
			ivjDialupSettingsPanel.setVisible(true);
			ivjDialupSettingsPanel.setPreferredSize(new java.awt.Dimension(332, 70));
			ivjDialupSettingsPanel.setMinimumSize(new java.awt.Dimension(332, 70));

			java.awt.GridBagConstraints constraintsPhoneNumberTextField = new java.awt.GridBagConstraints();
			constraintsPhoneNumberTextField.gridx = 2; constraintsPhoneNumberTextField.gridy = 1;
			constraintsPhoneNumberTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPhoneNumberTextField.weightx = 1.0;
			constraintsPhoneNumberTextField.insets = new java.awt.Insets(11, 21, 1, 11);
			getDialupSettingsPanel().add(getPhoneNumberTextField(), constraintsPhoneNumberTextField);

			java.awt.GridBagConstraints constraintsPhoneNumberLabel = new java.awt.GridBagConstraints();
			constraintsPhoneNumberLabel.gridx = 1; constraintsPhoneNumberLabel.gridy = 1;
			constraintsPhoneNumberLabel.ipadx = 24;
			constraintsPhoneNumberLabel.ipady = 7;
			constraintsPhoneNumberLabel.insets = new java.awt.Insets(11, 15, 1, 21);
			getDialupSettingsPanel().add(getPhoneNumberLabel(), constraintsPhoneNumberLabel);

			java.awt.GridBagConstraints constraintsJButtonAdvanced = new java.awt.GridBagConstraints();
			constraintsJButtonAdvanced.gridx = 1; constraintsJButtonAdvanced.gridy = 2;
			constraintsJButtonAdvanced.insets = new java.awt.Insets(2, 15, 10, 21);
			getDialupSettingsPanel().add(getJButtonAdvanced(), constraintsJButtonAdvanced);
			// user code begin {1}
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDialupSettingsPanel;
}

/**
 * Return the DisableFlagCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getDisableFlagCheckBox() {
	if (ivjDisableFlagCheckBox == null) {
		try {
			ivjDisableFlagCheckBox = new javax.swing.JCheckBox();
			ivjDisableFlagCheckBox.setName("DisableFlagCheckBox");
			ivjDisableFlagCheckBox.setText("Disable Device");
			ivjDisableFlagCheckBox.setMaximumSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setActionCommand("Disable Device");
			ivjDisableFlagCheckBox.setBorderPainted(false);
			ivjDisableFlagCheckBox.setPreferredSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjDisableFlagCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 2));
			ivjDisableFlagCheckBox.setMinimumSize(new java.awt.Dimension(121, 26));
			ivjDisableFlagCheckBox.setHorizontalAlignment(2);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDisableFlagCheckBox;
}
/**
 * Return the IdentificationPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getIdentificationPanel() {
	if (ivjIdentificationPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder.setTitle("Identification");
			ivjIdentificationPanel = new javax.swing.JPanel();
			ivjIdentificationPanel.setName("IdentificationPanel");
			ivjIdentificationPanel.setBorder(ivjLocalBorder);
			ivjIdentificationPanel.setLayout(new java.awt.GridBagLayout());
			ivjIdentificationPanel.setMaximumSize(new java.awt.Dimension(394, 143));
			ivjIdentificationPanel.setPreferredSize(new java.awt.Dimension(394, 143));
			ivjIdentificationPanel.setMinimumSize(new java.awt.Dimension(0,0));

			java.awt.GridBagConstraints constraintsTypeTextField = new java.awt.GridBagConstraints();
			constraintsTypeTextField.gridx = 2; constraintsTypeTextField.gridy = 1;
			constraintsTypeTextField.insets = new java.awt.Insets(14, 5, 3, 56);
			java.awt.GridBagConstraints constraintsTypeLabel = new java.awt.GridBagConstraints();
			constraintsTypeLabel.gridx = 1; constraintsTypeLabel.gridy = 1;
			constraintsTypeLabel.ipadx = 37;
			constraintsTypeLabel.ipady = 3;
			constraintsTypeLabel.insets = new java.awt.Insets(14, 8, 3, 5);
			java.awt.GridBagConstraints constraintsNameLabel = new java.awt.GridBagConstraints();
			constraintsNameLabel.gridx = 1; constraintsNameLabel.gridy = 2;
			constraintsNameLabel.ipadx = 33;
			constraintsNameLabel.ipady = 7;
			constraintsNameLabel.insets = new java.awt.Insets(3, 8, 4, 5);
			java.awt.GridBagConstraints constraintsNameTextField = new java.awt.GridBagConstraints();
			constraintsNameTextField.gridx = 2; constraintsNameTextField.gridy = 2;
			constraintsNameTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsNameTextField.weightx = 1.0;
			constraintsNameTextField.insets = new java.awt.Insets(3, 5, 4, 56);
			java.awt.GridBagConstraints constraintsPhysicalAddressLabel = new java.awt.GridBagConstraints();
			constraintsPhysicalAddressLabel.gridx = 1; constraintsPhysicalAddressLabel.gridy = 3;
			constraintsPhysicalAddressLabel.ipadx = 8;
			constraintsPhysicalAddressLabel.ipady = 7;
			constraintsPhysicalAddressLabel.insets = new java.awt.Insets(5, 8, 5, 5);
			java.awt.GridBagConstraints constraintsPhysicalAddressTextField = new java.awt.GridBagConstraints();
			constraintsPhysicalAddressTextField.gridx = 2; constraintsPhysicalAddressTextField.gridy = 3;
			constraintsPhysicalAddressTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPhysicalAddressTextField.weightx = 1.0;
			constraintsPhysicalAddressTextField.insets = new java.awt.Insets(5, 5, 5, 56);
			java.awt.GridBagConstraints constraintsDisableFlagCheckBox = new java.awt.GridBagConstraints();
			constraintsDisableFlagCheckBox.gridx = 1; constraintsDisableFlagCheckBox.gridy = 4;
			constraintsDisableFlagCheckBox.ipadx = -1;
			constraintsDisableFlagCheckBox.ipady = -3;
			constraintsDisableFlagCheckBox.insets = new java.awt.Insets(5, 8, 12, 5);
			getIdentificationPanel().add(getDisableFlagCheckBox(), constraintsDisableFlagCheckBox);

			java.awt.GridBagConstraints constraintsControlInhibitCheckBox = new java.awt.GridBagConstraints();
			constraintsPhysicalAddressTextField.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsTypeLabel.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsTypeTextField.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsNameTextField.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsPhysicalAddressLabel.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsControlInhibitCheckBox.gridx = 2; constraintsControlInhibitCheckBox.gridy = 4;
			constraintsControlInhibitCheckBox.insets = new java.awt.Insets(5, 5, 12, 56);
			constraintsNameLabel.anchor = java.awt.GridBagConstraints.NORTHWEST;
			ivjIdentificationPanel.add(getTypeTextField(), constraintsTypeTextField);
			ivjIdentificationPanel.add(getTypeLabel(), constraintsTypeLabel);
			ivjIdentificationPanel.add(getNameLabel(), constraintsNameLabel);
			ivjIdentificationPanel.add(getNameTextField(), constraintsNameTextField);
			ivjIdentificationPanel.add(getPhysicalAddressLabel(), constraintsPhysicalAddressLabel);
			ivjIdentificationPanel.add(getPhysicalAddressTextField(), constraintsPhysicalAddressTextField);
			getIdentificationPanel().add(getControlInhibitCheckBox(), constraintsControlInhibitCheckBox);
			// user code begin {1}
			getControlInhibitCheckBox().setVisible(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjIdentificationPanel;
}

/**
 * Return the JButtonAdvanced property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getJButtonAdvanced() {
	if (ivjJButtonAdvanced == null) {
		try {
			ivjJButtonAdvanced = new javax.swing.JButton();
			ivjJButtonAdvanced.setName("JButtonAdvanced");
			ivjJButtonAdvanced.setPreferredSize(new java.awt.Dimension(122, 23));
			ivjJButtonAdvanced.setText("Advanced...");
			ivjJButtonAdvanced.setMaximumSize(new java.awt.Dimension(122, 23));
			ivjJButtonAdvanced.setMinimumSize(new java.awt.Dimension(122, 23));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonAdvanced;
}

/**
 * Return the JComboBoxAmpUseType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxAmpUseType() {
	if (ivjJComboBoxAmpUseType == null) {
		try {
			ivjJComboBoxAmpUseType = new javax.swing.JComboBox();
			ivjJComboBoxAmpUseType.setName("JComboBoxAmpUseType");
			ivjJComboBoxAmpUseType.setMaximumSize(new java.awt.Dimension(162,20));
			ivjJComboBoxAmpUseType.setPreferredSize(new java.awt.Dimension(162,20));
			ivjJComboBoxAmpUseType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJComboBoxAmpUseType.setMinimumSize(new java.awt.Dimension(162,20));
			// user code begin {1}

			ivjJComboBoxAmpUseType.addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_AMP1 );
			ivjJComboBoxAmpUseType.addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_AMP2 );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxAmpUseType;
}

/**
 * Return the JLabelCCUAmpUseType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCCUAmpUseType() {
	if (ivjJLabelCCUAmpUseType == null) {
		try {
			ivjJLabelCCUAmpUseType = new javax.swing.JLabel();
			ivjJLabelCCUAmpUseType.setName("JLabelCCUAmpUseType");
			ivjJLabelCCUAmpUseType.setText("CCU Amp Use Type:");
			ivjJLabelCCUAmpUseType.setMaximumSize(new java.awt.Dimension(172,19));
			ivjJLabelCCUAmpUseType.setVisible(true);
			ivjJLabelCCUAmpUseType.setPreferredSize(new java.awt.Dimension(172,19));
			ivjJLabelCCUAmpUseType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelCCUAmpUseType.setMinimumSize(new java.awt.Dimension(172,19));
			// user code begin {1}
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCCUAmpUseType;
}

/**
 * Return the NameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getNameLabel() {
	if (ivjNameLabel == null) {
		try {
			ivjNameLabel = new javax.swing.JLabel();
			ivjNameLabel.setName("NameLabel");
			ivjNameLabel.setText("Device Name:");
			ivjNameLabel.setMaximumSize(new java.awt.Dimension(87, 16));
			ivjNameLabel.setPreferredSize(new java.awt.Dimension(87, 16));
			ivjNameLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjNameLabel.setMinimumSize(new java.awt.Dimension(87, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameLabel;
}
/**
 * Return the NameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getNameTextField() {
	if (ivjNameTextField == null) {
		try {
			ivjNameTextField = new javax.swing.JTextField();
			ivjNameTextField.setName("NameTextField");
			ivjNameTextField.setMaximumSize(new java.awt.Dimension(200, 23));
			ivjNameTextField.setColumns(12);
			ivjNameTextField.setPreferredSize(new java.awt.Dimension(200, 23));
			ivjNameTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjNameTextField.setMinimumSize(new java.awt.Dimension(200, 23));
			// user code begin {1}

			ivjNameTextField.setDocument(
					new TextFieldDocument(
					TextFieldDocument.MAX_DEVICE_NAME_LENGTH,
					TextFieldDocument.INVALID_CHARS_PAO));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameTextField;
}

/**
 * Return the PasswordLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPasswordLabel() {
	if (ivjPasswordLabel == null) {
		try {
			ivjPasswordLabel = new javax.swing.JLabel();
			ivjPasswordLabel.setName("PasswordLabel");
			ivjPasswordLabel.setText("Password:");
			ivjPasswordLabel.setMaximumSize(new java.awt.Dimension(172,19));
			ivjPasswordLabel.setPreferredSize(new java.awt.Dimension(172,19));
			ivjPasswordLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPasswordLabel.setMinimumSize(new java.awt.Dimension(172,19));
			// user code begin {1}
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPasswordLabel;
}

/**
 * Return the PhysicalAddressTextField1 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPasswordTextField() {
	if (ivjPasswordTextField == null) {
		try {
			ivjPasswordTextField = new javax.swing.JTextField();
			ivjPasswordTextField.setName("PasswordTextField");
			ivjPasswordTextField.setMaximumSize(new java.awt.Dimension(162,24));
			ivjPasswordTextField.setColumns(0);
			ivjPasswordTextField.setPreferredSize(new java.awt.Dimension(162,24));
			ivjPasswordTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPasswordTextField.setMinimumSize(new java.awt.Dimension(162,24));
			// user code begin {1}
			
			ivjPasswordTextField.setDocument(
				new TextFieldDocument(TextFieldDocument.MAX_IED_PASSWORD_LENGTH));

		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPasswordTextField;
}

/**
 * Return the PhoneNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPhoneNumberLabel() {
	if (ivjPhoneNumberLabel == null) {
		try {
			ivjPhoneNumberLabel = new javax.swing.JLabel();
			ivjPhoneNumberLabel.setName("PhoneNumberLabel");
			ivjPhoneNumberLabel.setText("Phone Number:");
			ivjPhoneNumberLabel.setMaximumSize(new java.awt.Dimension(98, 16));
			ivjPhoneNumberLabel.setVisible(true);
			ivjPhoneNumberLabel.setPreferredSize(new java.awt.Dimension(98, 16));
			ivjPhoneNumberLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPhoneNumberLabel.setEnabled(true);
			ivjPhoneNumberLabel.setMinimumSize(new java.awt.Dimension(98, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhoneNumberLabel;
}
/**
 * Return the PhoneNumberTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPhoneNumberTextField() {
	if (ivjPhoneNumberTextField == null) {
		try {
			ivjPhoneNumberTextField = new javax.swing.JTextField();
			ivjPhoneNumberTextField.setName("PhoneNumberTextField");
			ivjPhoneNumberTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPhoneNumberTextField.setVisible(true);
			ivjPhoneNumberTextField.setColumns(13);
			ivjPhoneNumberTextField.setPreferredSize(new java.awt.Dimension(142, 23));
			ivjPhoneNumberTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPhoneNumberTextField.setEnabled(true);
			ivjPhoneNumberTextField.setMinimumSize(new java.awt.Dimension(142, 23));
			// user code begin {1}
			
			ivjPhoneNumberTextField.setDocument(
				new TextFieldDocument(TextFieldDocument.MAX_PHONE_NUMBER_LENGTH));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhoneNumberTextField;
}

/**
 * Return the PhysicalAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPhysicalAddressLabel() {
	if (ivjPhysicalAddressLabel == null) {
		try {
			ivjPhysicalAddressLabel = new javax.swing.JLabel();
			ivjPhysicalAddressLabel.setName("PhysicalAddressLabel");
			ivjPhysicalAddressLabel.setText("Physical Address:");
			ivjPhysicalAddressLabel.setMaximumSize(new java.awt.Dimension(112, 16));
			ivjPhysicalAddressLabel.setPreferredSize(new java.awt.Dimension(112, 16));
			ivjPhysicalAddressLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPhysicalAddressLabel.setMinimumSize(new java.awt.Dimension(112, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhysicalAddressLabel;
}
/**
 * Return the PhysicalAddressTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPhysicalAddressTextField() {
	if (ivjPhysicalAddressTextField == null) {
		try {
			ivjPhysicalAddressTextField = new javax.swing.JTextField();
			ivjPhysicalAddressTextField.setName("PhysicalAddressTextField");
			ivjPhysicalAddressTextField.setMaximumSize(new java.awt.Dimension(200, 23));
			ivjPhysicalAddressTextField.setColumns(10);
			ivjPhysicalAddressTextField.setPreferredSize(new java.awt.Dimension(200, 23));
			ivjPhysicalAddressTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPhysicalAddressTextField.setMinimumSize(new java.awt.Dimension(200, 23));
			// user code begin {1}

			ivjPhysicalAddressTextField.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-9999999999L, 9999999999L) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPhysicalAddressTextField;
}

/**
 * Return the PortComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getPortComboBox() {
	if (ivjPortComboBox == null) {
		try {
			ivjPortComboBox = new javax.swing.JComboBox();
			ivjPortComboBox.setName("PortComboBox");
			ivjPortComboBox.setMaximumSize(new java.awt.Dimension(162,20));
			ivjPortComboBox.setPreferredSize(new java.awt.Dimension(162,20));
			ivjPortComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPortComboBox.setMinimumSize(new java.awt.Dimension(162,20));
			// user code begin {1}
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPortComboBox;
}

/**
 * Return the PortLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPortLabel() {
	if (ivjPortLabel == null) {
		try {
			ivjPortLabel = new javax.swing.JLabel();
			ivjPortLabel.setName("PortLabel");
			ivjPortLabel.setText("Communication Channel:");
			ivjPortLabel.setMaximumSize(new java.awt.Dimension(172,19));
			ivjPortLabel.setPreferredSize(new java.awt.Dimension(172,19));
			ivjPortLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPortLabel.setMinimumSize(new java.awt.Dimension(172,19));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPortLabel;
}

/**
 * Return the PostCommWaitLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPostCommWaitLabel() {
	if (ivjPostCommWaitLabel == null) {
		try {
			ivjPostCommWaitLabel = new javax.swing.JLabel();
			ivjPostCommWaitLabel.setName("PostCommWaitLabel");
			ivjPostCommWaitLabel.setText("Post Communication Wait:");
			ivjPostCommWaitLabel.setMaximumSize(new java.awt.Dimension(172, 16));
			ivjPostCommWaitLabel.setPreferredSize(new java.awt.Dimension(172,19));
			ivjPostCommWaitLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPostCommWaitLabel.setMinimumSize(new java.awt.Dimension(172, 16));
			// user code begin {1}
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPostCommWaitLabel;
}

/**
 * Return the PostCommWaitSpinner property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getPostCommWaitSpinner() {
	if (ivjPostCommWaitSpinner == null) {
		try {
			ivjPostCommWaitSpinner = new com.klg.jclass.field.JCSpinField();
			ivjPostCommWaitSpinner.setName("PostCommWaitSpinner");
			ivjPostCommWaitSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
			ivjPostCommWaitSpinner.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPostCommWaitSpinner.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjPostCommWaitSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
			// user code begin {1}
			ivjPostCommWaitSpinner.setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(0), new Integer(1000000), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPostCommWaitSpinner;
}

/**
 * Return the RouteComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getRouteComboBox() {
	if (ivjRouteComboBox == null) {
		try {
			ivjRouteComboBox = new javax.swing.JComboBox();
			ivjRouteComboBox.setName("RouteComboBox");
			ivjRouteComboBox.setPreferredSize(new java.awt.Dimension(162,20));
			ivjRouteComboBox.setMinimumSize(new java.awt.Dimension(162,20));
			// user code begin {1}
			ivjRouteComboBox.setMaximumSize(new java.awt.Dimension(162,20));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRouteComboBox;
}

/**
 * Return the CommPathLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getRouteLabel() {
	if (ivjRouteLabel == null) {
		try {
			ivjRouteLabel = new javax.swing.JLabel();
			ivjRouteLabel.setName("RouteLabel");
			ivjRouteLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjRouteLabel.setText("Communication Route:");
			// user code begin {1}
			ivjRouteLabel.setPreferredSize(new java.awt.Dimension(172,19));
			ivjRouteLabel.setAlignmentX(0.0F);
			ivjRouteLabel.setMinimumSize(new java.awt.Dimension(172,19));
			ivjRouteLabel.setMaximumSize(new java.awt.Dimension(172,19));
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRouteLabel;
}

/**
 * Return the SecurityCodeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getSecurityCodeLabel() {
	if (ivjSecurityCodeLabel == null) {
		try {
			ivjSecurityCodeLabel = new javax.swing.JLabel();
			ivjSecurityCodeLabel.setName("SecurityCodeLabel");
			ivjSecurityCodeLabel.setText("Security Code:");
			ivjSecurityCodeLabel.setMaximumSize(new java.awt.Dimension(172,19));
			ivjSecurityCodeLabel.setPreferredSize(new java.awt.Dimension(172,19));
			ivjSecurityCodeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSecurityCodeLabel.setMinimumSize(new java.awt.Dimension(172,19));
			// user code begin {1}
			ivjSecurityCodeLabel.setVisible(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSecurityCodeLabel;
}

/**
 * Return the SecurityCodeTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getSecurityCodeTextField() {
	if (ivjSecurityCodeTextField == null) {
		try {
			ivjSecurityCodeTextField = new javax.swing.JTextField();
			ivjSecurityCodeTextField.setName("SecurityCodeTextField");
			ivjSecurityCodeTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjSecurityCodeTextField.setColumns(0);
			ivjSecurityCodeTextField.setPreferredSize(new java.awt.Dimension(157,24));
			ivjSecurityCodeTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjSecurityCodeTextField.setMinimumSize(new java.awt.Dimension(120, 20));
			// user code begin {1}
			ivjSecurityCodeTextField.setVisible(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSecurityCodeTextField;
}

/**
 * Return the SenderLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getSenderLabel() {
	if (ivjSenderLabel == null) {
		try {
			ivjSenderLabel = new javax.swing.JLabel();
			ivjSenderLabel.setName("SenderLabel");
			ivjSenderLabel.setText("Sender:");
			ivjSenderLabel.setMaximumSize(new java.awt.Dimension(172,19));
			ivjSenderLabel.setPreferredSize(new java.awt.Dimension(172,19));
			ivjSenderLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSenderLabel.setMinimumSize(new java.awt.Dimension(172,19));
			// user code begin {1}
			ivjSenderLabel.setVisible(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSenderLabel;
}

/**
 * Return the SenderTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getSenderTextField() {
	if (ivjSenderTextField == null) {
		try {
			ivjSenderTextField = new javax.swing.JTextField();
			ivjSenderTextField.setName("SenderTextField");
			ivjSenderTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			ivjSenderTextField.setColumns(0);
			ivjSenderTextField.setPreferredSize(new java.awt.Dimension(120, 20));
			ivjSenderTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjSenderTextField.setMinimumSize(new java.awt.Dimension(120, 20));
			// user code begin {1}
			ivjSenderTextField.setVisible(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSenderTextField;
}

/**
 * Return the SlaveAddressComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getSlaveAddressComboBox() {
	if (ivjSlaveAddressComboBox == null) {
		try {
			ivjSlaveAddressComboBox = new javax.swing.JComboBox();
			ivjSlaveAddressComboBox.setName("SlaveAddressComboBox");
			ivjSlaveAddressComboBox.setMaximumSize(new java.awt.Dimension(162,20));
			ivjSlaveAddressComboBox.setPreferredSize(new java.awt.Dimension(162,20));
			ivjSlaveAddressComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSlaveAddressComboBox.setMinimumSize(new java.awt.Dimension(162,20));
			// user code begin {1}

			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_STAND_ALONE );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_MASTER );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE1 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE2 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE3 );
			ivjSlaveAddressComboBox.addItem( IEDBase.SLAVE_SLAVE4 );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSlaveAddressComboBox;
}

/**
 * Return the SlaveAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getSlaveAddressLabel() {
	if (ivjSlaveAddressLabel == null) {
		try {
			ivjSlaveAddressLabel = new javax.swing.JLabel();
			ivjSlaveAddressLabel.setName("SlaveAddressLabel");
			ivjSlaveAddressLabel.setText("Slave Address:");
			ivjSlaveAddressLabel.setMaximumSize(new java.awt.Dimension(172,19));
			ivjSlaveAddressLabel.setPreferredSize(new java.awt.Dimension(172,19));
			ivjSlaveAddressLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjSlaveAddressLabel.setMinimumSize(new java.awt.Dimension(172,19));
			// user code begin {1}
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSlaveAddressLabel;
}

/**
 * Return the TOUComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getTOUComboBox() {
	if (ivjTOUComboBox == null) {
		try {
			ivjTOUComboBox = new javax.swing.JComboBox();
			ivjTOUComboBox.setName("TOUComboBox");
			ivjTOUComboBox.setMaximumSize(new java.awt.Dimension(162,20));
			ivjTOUComboBox.setVisible(false);
			ivjTOUComboBox.setPreferredSize(new java.awt.Dimension(162,20));
			ivjTOUComboBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjTOUComboBox.setMinimumSize(new java.awt.Dimension(162,20));
			// user code begin {1}
			ivjTOUComboBox.setEnabled(false);
			ivjTOUComboBox.setVisible(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTOUComboBox;
}

/**
 * Return the TOULabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTOULabel() {
	if (ivjTOULabel == null) {
		try {
			ivjTOULabel = new javax.swing.JLabel();
			ivjTOULabel.setName("TOULabel");
			ivjTOULabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjTOULabel.setText("TOU Schedule: ");
			ivjTOULabel.setVisible(false);
			// user code begin {1}
			ivjTOULabel.setEnabled(false);
			// user code end
			ivjTOULabel.setPreferredSize(new java.awt.Dimension(172,19));
			ivjTOULabel.setMaximumSize(new java.awt.Dimension(172,19));
			ivjTOULabel.setMinimumSize(new java.awt.Dimension(172,19));
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTOULabel;
}

/**
 * Return the TypeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTypeLabel() {
	if (ivjTypeLabel == null) {
		try {
			ivjTypeLabel = new javax.swing.JLabel();
			ivjTypeLabel.setName("TypeLabel");
			ivjTypeLabel.setText("Device Type:");
			ivjTypeLabel.setMaximumSize(new java.awt.Dimension(83, 20));
			ivjTypeLabel.setPreferredSize(new java.awt.Dimension(83, 20));
			ivjTypeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjTypeLabel.setMinimumSize(new java.awt.Dimension(83, 20));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTypeLabel;
}
/**
 * Return the DeviceTypeTextField property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTypeTextField() {
	if (ivjTypeTextField == null) {
		try {
			ivjTypeTextField = new javax.swing.JLabel();
			ivjTypeTextField.setName("TypeTextField");
			ivjTypeTextField.setOpaque(true);
			ivjTypeTextField.setText("");
			ivjTypeTextField.setMaximumSize(new java.awt.Dimension(200, 23));
			ivjTypeTextField.setPreferredSize(new java.awt.Dimension(200, 23));
			ivjTypeTextField.setFont(new java.awt.Font("dialog.bold", 1, 14));
			ivjTypeTextField.setMinimumSize(new java.awt.Dimension(200, 23));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTypeTextField;
}

/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) 
{	
	com.cannontech.database.data.device.DeviceBase d = (com.cannontech.database.data.device.DeviceBase)val;

	d.setPAOName( getNameTextField().getText() );
    int devType = PAOGroups.getDeviceType( d.getPAOType() );

    //just in case, set our String type data to the exact String type expected
    // used to ensure the type string in the DB is the same as the code
    d.setDeviceType( PAOGroups.getPAOTypeString(devType) );


	if( getDisableFlagCheckBox().isSelected() )
		d.setDisableFlag( new Character('Y') );
	else
		d.setDisableFlag( new Character('N') );

	/*if( getControlInhibitCheckBox().isSelected() )
		d.getDevice().setControlInhibit( new Character( 'Y' ) );
	else
		d.getDevice().setControlInhibit( new Character( 'N' ) );*/

	//This is a little bit ugly
	//The address could be coming from three distinct
	//types of devices - yet all devices have an address
	//eeck.
	if( getPhysicalAddressTextField().isVisible() )
	{
		try
		{
			Integer address = new Integer( getPhysicalAddressTextField().getText() );

			if( val instanceof com.cannontech.database.data.device.CarrierBase )
			{

				if( devType == PAOGroups.REPEATER ) //val instanceof Repeater900
				{
					((CarrierBase) val).getDeviceCarrierSettings().setAddress( new Integer(address.intValue() + 4190000) );
				}
				else
				{
					((CarrierBase) val).getDeviceCarrierSettings().setAddress( address );
				}
			}
			else if( val instanceof com.cannontech.database.data.device.IDLCBase )
				((com.cannontech.database.data.device.IDLCBase) val).getDeviceIDLCRemote().setAddress(address);
		}
		catch(NumberFormatException n )
		{
			com.cannontech.clientutils.CTILogger.error( n.getMessage(), n );
		}
	}

	if( val instanceof RemoteBase )
	{
		DeviceDirectCommSettings dDirect = ((RemoteBase) val).getDeviceDirectCommSettings();

		Integer portID = null;
		Integer address = null;
		Integer postCommWait = null;

		com.cannontech.database.data.lite.LiteYukonPAObject port = ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem());

		portID = new Integer(port.getYukonID());
		dDirect.setPortID( portID );

		Object postCommWaitSpinVal = getPostCommWaitSpinner().getValue();
		if( postCommWaitSpinVal instanceof Long )
			postCommWait = new Integer( ((Long)postCommWaitSpinVal).intValue() );
		else if( postCommWaitSpinVal instanceof Integer )
			postCommWait = new Integer( ((Integer)postCommWaitSpinVal).intValue() );

		if( val instanceof IDLCBase )
		{
			((IDLCBase)val).getDeviceIDLCRemote().setPostCommWait( postCommWait );
			((IDLCBase)val).getDeviceIDLCRemote().setCcuAmpUseType( getJComboBoxAmpUseType().getSelectedItem().toString() );
		}
		
		if( PAOGroups.isDialupPort(port.getType()) )
		{
			DeviceDialupSettings dDialup = ((RemoteBase) val).getDeviceDialupSettings();

			getAdvancedPanel().getValue( dDialup );
			
			dDialup.setPhoneNumber( getPhoneNumberTextField().getText().trim() );
			if( val instanceof PagingTapTerminal )
				dDialup.setLineSettings( "7E1" );
			else
				dDialup.setLineSettings( "8N1" );
		}
		else
			((RemoteBase)val).getDeviceDialupSettings().setPhoneNumber(null);

      if( val instanceof DNPBase ) //DeviceTypesFuncs.hasMasterAddress(devType) ) 
      {
         DNPBase dnp = (DNPBase)val;
         try
         {
            dnp.getDeviceAddress().setMasterAddress( new Integer(getPhysicalAddressTextField().getText()) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceAddress().setMasterAddress( new Integer(0) );
         }
            
         try
         {         
            dnp.getDeviceAddress().setSlaveAddress( new Integer(getSlaveAddressComboBox().getSelectedItem().toString() ) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceAddress().setSlaveAddress( new Integer(0) );
         }
   
         try
         {
            dnp.getDeviceAddress().setPostCommWait( new Integer(getPostCommWaitSpinner().getValue().toString()) );
         }
         catch( NumberFormatException e )
         {
            dnp.getDeviceAddress().setPostCommWait( new Integer(0) );
         }
   	
      }
      else if( val instanceof Series5Base )
      {
		Series5Base s5 = (Series5Base)val;
		
		try
		{
			s5.getSeries5().setSlaveAddress( new Integer(getPhysicalAddressTextField().getText()) );
		}
		catch( NumberFormatException e )
		{
			s5.getSeries5().setSlaveAddress( new Integer(0) );
		}
		
		try
		{
			s5.getSeries5().setPostCommWait( new Integer(getPostCommWaitSpinner().getValue().toString()) );
		}
		catch( NumberFormatException e )
		{
			s5.getSeries5().setPostCommWait( new Integer(0) );
		}
		
		if(getControlInhibitCheckBox().isSelected())
			s5.getVerification().setDisable("Y");
		else
			s5.getVerification().setDisable("N");	
      }
      
      else if( val instanceof RTCBase)
      {
		RTCBase rtc = (RTCBase)val;
		try
		{
			rtc.getDeviceRTC().setRTCAddress( new Integer(getPhysicalAddressTextField().getText()) );
		}
		catch( NumberFormatException e )
		{
			rtc.getDeviceRTC().setRTCAddress( new Integer(0) );
		}
            
		try
		{         
			rtc.setLBTMode( getSlaveAddressComboBox().getSelectedItem().toString() );
		}
		catch( NumberFormatException e )
		{
			rtc.getDeviceRTC().setLBTMode( new Integer(0) );
		}
		
		if(getControlInhibitCheckBox().isSelected())
			rtc.getDeviceRTC().setDisableVerifies("Y");
		else
			rtc.getDeviceRTC().setDisableVerifies("N");
			
      }
      else if( val instanceof RTM )
      {
			RTM rtm = (RTM)val;
			rtm.getDeviceIED().setSlaveAddress( getPhysicalAddressTextField().getText() );
      }
      else if( val instanceof IEDBase )
      {
      		String password = getPasswordTextField().getText();
			if( password.length() > 0 )
				if(val instanceof WCTPTerminal)
					((WCTPTerminal)val).getDeviceTapPagingSettings().setPOSTPath(password);
				else
					((IEDBase)val).getDeviceIED().setPassword(password);
			else
			{
				if(val instanceof WCTPTerminal)
					((WCTPTerminal)val).getDeviceTapPagingSettings().setPOSTPath(com.cannontech.common.util.CtiUtilities.STRING_NONE);
				if(val instanceof SNPPTerminal)
					((SNPPTerminal)val).getDeviceTapPagingSettings().setPOSTPath(com.cannontech.common.util.CtiUtilities.STRING_NONE);
				else
					((IEDBase)val).getDeviceIED().setPassword(com.cannontech.common.util.CtiUtilities.STRING_NONE);
			}
			
			if(val instanceof WCTPTerminal)
			{
				if(getSenderTextField().isVisible() && getSenderTextField().getText().length() > 0)
					((WCTPTerminal)val).getDeviceTapPagingSettings().setSender(getSenderTextField().getText());
				if(getSecurityCodeTextField().isVisible() && getSecurityCodeTextField().getText().length() > 0)
					((WCTPTerminal)val).getDeviceTapPagingSettings().setSecurityCode(getSecurityCodeTextField().getText());
			}			
			
			if(val instanceof SNPPTerminal)
			{
				if(getSenderTextField().isVisible() && getSenderTextField().getText().length() > 0)
					((SNPPTerminal)val).getDeviceTapPagingSettings().setSender(getSenderTextField().getText());
				if(getSecurityCodeTextField().isVisible() && getSecurityCodeTextField().getText().length() > 0)
					((SNPPTerminal)val).getDeviceTapPagingSettings().setSecurityCode(getSecurityCodeTextField().getText());
			}			
	
			if( getSlaveAddressComboBox().isVisible() )
			{
				String slaveAddress = null;

				/**** START SUPER HACK ****/
				if( getSlaveAddressComboBox().isEditable() )
					slaveAddress = getSlaveAddressComboBox().getEditor().getItem().toString();
				else /**** END SUPER HACK ****/
					slaveAddress = new String( getSlaveAddressComboBox().getSelectedItem() != null ?
						  		getSlaveAddressComboBox().getSelectedItem().toString() : "" );

				((IEDBase)val).getDeviceIED().setSlaveAddress(slaveAddress);
			}
	  	}

	}
	else
	{
		if( val instanceof CarrierBase )
			((CarrierBase) val).getDeviceRoutes().setRouteID( new Integer(((com.cannontech.database.data.lite.LiteYukonPAObject)getRouteComboBox().getSelectedItem()).getYukonID()) );
	}
	
	if( val instanceof MCTBase )
	{
		if(getConfigComboBox().getSelectedItem().equals(CtiUtilities.STRING_NONE))
		{
			((MCTBase)val).getConfigMapping().deleteAMapping((((MCTBase)val).getDevice().getDeviceID()));
			((MCTBase)val).setHasConfig(false);
		}
		else
		{
			((MCTBase)val).setConfigMapping(new Integer(((com.cannontech.database.data.lite.LiteConfig)getConfigComboBox().getSelectedItem()).getConfigID()),(((MCTBase)val).getDevice().getDeviceID()));
			((MCTBase)val).setHasConfig(true);
		}
		 
		/*if(getTOUComboBox().getSelectedItem().equals(CtiUtilities.STRING_NONE))
		{
		   ((MCTBase)val).getTOUDeviceMapping().deleteAMapping((((MCTBase)val).getDevice().getDeviceID()));
		   ((MCTBase)val).setHasTOUSchedule(false);
		}
		else
		{
		   ((MCTBase)val).setTOUDeviceMapping(new Integer(((com.cannontech.database.data.lite.LiteTOUSchedule)getTOUComboBox().getSelectedItem()).getScheduleID()),(((MCTBase)val).getDevice().getDeviceID()));
		   ((MCTBase)val).setHasTOUSchedule(true);
		}*/
	}

	return val;
}
/**
 * Return the WaitLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getWaitLabel() {
	if (ivjWaitLabel == null) {
		try {
			ivjWaitLabel = new javax.swing.JLabel();
			ivjWaitLabel.setName("WaitLabel");
			ivjWaitLabel.setText("(msec.)");
			ivjWaitLabel.setMaximumSize(new java.awt.Dimension(65, 16));
			ivjWaitLabel.setPreferredSize(new java.awt.Dimension(65, 16));
			ivjWaitLabel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjWaitLabel.setMinimumSize(new java.awt.Dimension(65, 16));
			// user code begin {1}
         
         ivjWaitLabel.setText("(msec.)");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjWaitLabel;
}

/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	
	getPostCommWaitSpinner().addValueListener(this);
	
	// user code end
	getNameTextField().addCaretListener(ivjEventHandler);
	getPhysicalAddressTextField().addCaretListener(ivjEventHandler);
	getDisableFlagCheckBox().addActionListener(ivjEventHandler);
	getControlInhibitCheckBox().addActionListener(ivjEventHandler);
	getRouteComboBox().addActionListener(ivjEventHandler);
	getPortComboBox().addActionListener(ivjEventHandler);
	getPhoneNumberTextField().addCaretListener(ivjEventHandler);
	getSlaveAddressComboBox().addActionListener(ivjEventHandler);
	getJButtonAdvanced().addActionListener(ivjEventHandler);
	getJComboBoxAmpUseType().addActionListener(ivjEventHandler);
	getConfigComboBox().addActionListener(ivjEventHandler);
	getTOUComboBox().addActionListener(ivjEventHandler);
	getPasswordTextField().addCaretListener(ivjEventHandler);
	getSenderTextField().addCaretListener(ivjEventHandler);
	getSecurityCodeTextField().addCaretListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DeviceBaseEditorPanel");
		setPreferredSize(new java.awt.Dimension(407, 497));
		java.awt.GridBagConstraints consGridBagConstraints151 = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints consGridBagConstraints152 = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints consGridBagConstraints54 = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints consGridBagConstraints153 = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints consGridBagConstraints55 = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints consGridBagConstraints56 = new java.awt.GridBagConstraints();
		consGridBagConstraints54.insets = new java.awt.Insets(5,6,1,7);
		consGridBagConstraints54.gridy = 0;
		consGridBagConstraints54.gridx = 0;
		consGridBagConstraints54.anchor = java.awt.GridBagConstraints.NORTHWEST;
		consGridBagConstraints153.insets = new java.awt.Insets(2,6,1,7);
		consGridBagConstraints153.gridy = 1;
		consGridBagConstraints153.gridx = 0;
		consGridBagConstraints153.anchor = java.awt.GridBagConstraints.NORTHWEST;
		consGridBagConstraints153.fill = java.awt.GridBagConstraints.VERTICAL;
		consGridBagConstraints153.weighty = 0.0D;
		consGridBagConstraints153.ipady = -5;
		consGridBagConstraints56.insets = new java.awt.Insets(1,6,2,7);
		consGridBagConstraints56.ipady = -120;
		consGridBagConstraints56.gridy = 1;
		consGridBagConstraints56.gridx = 0;
		consGridBagConstraints56.anchor = java.awt.GridBagConstraints.NORTHWEST;
		consGridBagConstraints56.fill = java.awt.GridBagConstraints.VERTICAL;
		consGridBagConstraints56.weighty = 1.0D;
		consGridBagConstraints151.insets = new java.awt.Insets(7,6,2,7);
		consGridBagConstraints151.ipady = -7;
		consGridBagConstraints151.gridy = 0;
		consGridBagConstraints151.gridx = 0;
		consGridBagConstraints151.anchor = java.awt.GridBagConstraints.NORTHWEST;
		consGridBagConstraints152.insets = new java.awt.Insets(1,6,8,7);
		consGridBagConstraints152.gridy = 2;
		consGridBagConstraints152.gridx = 0;
		consGridBagConstraints152.anchor = java.awt.GridBagConstraints.NORTHWEST;
		consGridBagConstraints152.fill = java.awt.GridBagConstraints.VERTICAL;
		consGridBagConstraints152.weighty = 0.0D;
		consGridBagConstraints152.ipady = -3;
		consGridBagConstraints55.insets = new java.awt.Insets(3,6,5,7);
		consGridBagConstraints55.ipady = -7;
		consGridBagConstraints55.gridy = 2;
		consGridBagConstraints55.gridx = 0;
		consGridBagConstraints55.anchor = java.awt.GridBagConstraints.NORTHWEST;
		consGridBagConstraints151.fill = java.awt.GridBagConstraints.VERTICAL;
		consGridBagConstraints151.weighty = 0.0D;
		setLayout(new java.awt.GridBagLayout());
		this.add(getIdentificationPanel(), consGridBagConstraints54);
		this.add(getJPanelMCTSettings(), consGridBagConstraints55);
		this.add(getCommunicationPanel(), consGridBagConstraints56);
		setSize(407, 379);
		setMinimumSize(new java.awt.Dimension(407,503));
		setMaximumSize(new java.awt.Dimension(407,503));

		this.setDoubleBuffered(true);
  		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	if( getNameTextField().getText() == null
		 || getNameTextField().getText().length() < 1 )
	{
		setErrorString("The Name text field must be filled in");
		return false;
	}

	int address = -1;
	
	if( getPhysicalAddressTextField().isVisible()
		 && (getPhysicalAddressTextField().getText() == null
		     || getPhysicalAddressTextField().getText().length() < 1) )
	{
		setErrorString("The Address text field must be filled in");
		return false;
	}


	if( getPhysicalAddressTextField().isVisible() )
		address = Integer.parseInt( getPhysicalAddressTextField().getText() );

   	if( !com.cannontech.device.range.DeviceAddressRange.isValidRange( getDeviceType(), address ) )
   	{
      	setErrorString( com.cannontech.device.range.DeviceAddressRange.getRangeMessage( getDeviceType() ) );
      	return false;
   	}

   	if( com.cannontech.database.data.device.DeviceTypesFuncs.isMCT(getDeviceType()) )
      	return checkMCTAddresses( address );
      
	//verify that there are no duplicate physical address for CCUs or RTUs on a dedicated channel
	com.cannontech.database.data.lite.LiteYukonPAObject port = ((com.cannontech.database.data.lite.LiteYukonPAObject)getPortComboBox().getSelectedItem());
	if(com.cannontech.database.data.device.DeviceTypesFuncs.isCarrier(getDeviceType()) || com.cannontech.database.data.device.DeviceTypesFuncs.isVirtualDevice(getDeviceType()))
		return true;
	else if((! PAOGroups.isDialupPort(port.getType())) && (com.cannontech.database.data.device.DeviceTypesFuncs.isCCU(getDeviceType()) || com.cannontech.database.data.device.DeviceTypesFuncs.isRTU(getDeviceType()) ))
	{
		address = Integer.parseInt( getPhysicalAddressTextField().getText() );
		return checkForDuplicateAddresses(address, port.getLiteID() );   	
	}
	
	return true;
}
/**
 * Comment
 */
public void jButtonAdvanced_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	AdvancedPropertiesDialog dialog = new AdvancedPropertiesDialog( 
						getAdvancedPanel(), "Advanced Dialup Properties");

	int result = dialog.showPanel( com.cannontech.common.util.CtiUtilities.getParentFrame(this) );

	if( result == AdvancedPropertiesDialog.RESPONSE_ACCEPT )
		fireInputUpdate(); //there has been a change!!!!

	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame;
		try {
			Class aFrameClass = Class.forName("com.ibm.uvm.abt.edit.TestFrame");
			frame = (java.awt.Frame)aFrameClass.newInstance();
		} catch (java.lang.Throwable ivjExc) {
			frame = new java.awt.Frame();
		}
		DeviceBaseEditorPanel aDeviceBaseEditorPanel;
		aDeviceBaseEditorPanel = new DeviceBaseEditorPanel();
		frame.add("Center", aDeviceBaseEditorPanel);
		frame.setSize(aDeviceBaseEditorPanel.getSize());
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setCarrierBaseValue( CarrierBase cBase )
{
	Integer address = cBase.getDeviceCarrierSettings().getAddress();

	if( cBase instanceof Repeater900 )
		address = new Integer( address.intValue() - 4190000 );
      
   if( cBase instanceof com.cannontech.database.data.device.MCT_Broadcast )
      getPhysicalAddressLabel().setText("Lead Address:");
		
	getPhysicalAddressLabel().setVisible(true);
	getPhysicalAddressTextField().setVisible(true);
	
	getPhysicalAddressTextField().setText( address.toString() );
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setIDLCBaseValue( IDLCBase idlcBase )
{
	Integer address = idlcBase.getDeviceIDLCRemote().getAddress();
	getPhysicalAddressTextField().setText( address.toString() );
	
	getPhysicalAddressLabel().setVisible(true);
	getPhysicalAddressTextField().setVisible(true);

}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setNonRemBaseValue( Object base )
{  
   getJLabelCCUAmpUseType().setVisible(false);
   getJComboBoxAmpUseType().setVisible(false);
   getPortLabel().setVisible(false);
   getPortComboBox().setVisible(false);
   getPasswordLabel().setVisible(false);
   getPasswordTextField().setVisible(false);
    
   if( base instanceof MCTBase )
   {
	   getJPanelMCTSettings().setVisible(true);
	   if(base instanceof MCT400SeriesBase)
	   {
	   		getTOUComboBox().setVisible(false);
	   		getTOULabel().setVisible(false);		
	   }
   }
	
	getRouteLabel().setVisible(true);
	getRouteComboBox().setVisible(true);
   
   	getPostCommWaitLabel().setVisible(false);
	getPostCommWaitSpinner().setVisible(false);
	getWaitLabel().setVisible(false);
	getSlaveAddressLabel().setVisible(false);
	getSlaveAddressComboBox().setVisible(false);   

	int assignedRouteID = 0;
	if( getRouteComboBox().getModel().getSize() > 0 )
		getRouteComboBox().removeAllItems();

	int assignedConfigID = 0;
	if( getConfigComboBox().getModel().getSize() > 0)
		getConfigComboBox().removeAllItems();
		
	getConfigComboBox().addItem( CtiUtilities.STRING_NONE );
	getTOUComboBox().addItem(CtiUtilities.STRING_NONE );
	
	com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List routes = cache.getAllRoutes();
		java.util.List configs = cache.getAllConfigs();
		java.util.List tous = cache.getAllTOUSchedules();
		
		Integer mctSeriesType = ConfigTwoWay.SERIES_300_TYPE;;
		if(base instanceof MCTBase)
		{					
			for(int j = 0; j < configs.size(); j++)
			{
				//this is a tad disgusting
				if(base instanceof MCT210 || base instanceof MCT213 ||
					base instanceof MCT240 || base instanceof MCT248 ||
					base instanceof MCT250)
						mctSeriesType = ConfigTwoWay.SERIES_200_TYPE;
						
				if(base instanceof MCT400SeriesBase)
						mctSeriesType = ConfigTwoWay.SERIES_400_TYPE;
				
				if(mctSeriesType.compareTo(((com.cannontech.database.data.lite.LiteConfig)configs.get(j)).getConfigType()) == 0)
					getConfigComboBox().addItem( configs.get(j) );
				
				if(((MCTBase) base).hasMappedConfig())
				{
					assignedConfigID = ((MCTBase) base).getConfigID().intValue();
					if( ((com.cannontech.database.data.lite.LiteConfig)configs.get(j)).getConfigID() == assignedConfigID )
						getConfigComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteConfig)configs.get(j));
				}
			}
			if(! ((MCTBase) base).hasMappedConfig())
			{
				getConfigComboBox().setSelectedItem(CtiUtilities.STRING_NONE);
			}
			
			if(base instanceof MCT400SeriesBase)
			{
				/*for(int x = 0; x < tous.size(); x++)
				{
					getTOUComboBox().addItem( tous.get(x) );
					if(((MCTBase) base).hasTOUSchedule())
					{
						if(((MCTBase) base).getTOUScheduleID().intValue() == ((com.cannontech.database.data.lite.LiteTOUSchedule)tous.get(x)).getLiteID())
							getTOUComboBox().setSelectedItem(tous.get(x));
					}
				}*/
			}
		}
		if( base instanceof CarrierBase )
		{
			int routeType = 0;
			assignedRouteID = ((CarrierBase) base).getDeviceRoutes().getRouteID().intValue();
			
			for( int i = 0 ; i < routes.size(); i++ )
			{
				routeType = ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getType();
				
				if( routeType == com.cannontech.database.data.pao.RouteTypes.ROUTE_CCU ||
						routeType == com.cannontech.database.data.pao.RouteTypes.ROUTE_MACRO )
				{
					getRouteComboBox().addItem( routes.get(i) );
					if( ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getYukonID() == assignedRouteID )
						getRouteComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i));
				}
			}
		}
		else
		{
			if( base instanceof com.cannontech.database.data.device.lm.LMGroupEmetcon )
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupEmetcon) base).getLmGroupEmetcon().getRouteID().intValue();
			else if( base instanceof com.cannontech.database.data.device.lm.LMGroupVersacom )
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupVersacom) base).getLmGroupVersacom().getRouteID().intValue();
			else if (base instanceof com.cannontech.database.data.device.lm.LMGroupRipple) 
				assignedRouteID = ((com.cannontech.database.data.device.lm.LMGroupRipple)base).getLmGroupRipple().getRouteID().intValue();
				for( int i = 0 ; i < routes.size(); i++ )
			{
				getRouteComboBox().addItem( routes.get(i) );
				if( ((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i)).getYukonID() == assignedRouteID )
					getRouteComboBox().setSelectedItem((com.cannontech.database.data.lite.LiteYukonPAObject)routes.get(i));
			}
		}
	}
   
}
/**
 * Insert the method's description here.
 * Creation date: (9/18/2001 1:58:37 PM)
 */
private void setRemoteBaseValue( RemoteBase rBase, int intType )
{
	getRouteLabel().setVisible(false);
	getRouteComboBox().setVisible(false);
	getJLabelCCUAmpUseType().setVisible(false);
	getJComboBoxAmpUseType().setVisible(false);

	getPortLabel().setVisible(true);
	getPortComboBox().setVisible(true);
	getPostCommWaitLabel().setVisible(true);
	getPostCommWaitSpinner().setVisible(true);
	getWaitLabel().setVisible(true);

	if( getRouteComboBox().getModel().getSize() > 0 )
		getRouteComboBox().removeAllItems();

	int portID = rBase.getDeviceDirectCommSettings().getPortID().intValue();
	//Load the combo box
	com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
	synchronized(cache)
	{
		java.util.List ports = cache.getAllPorts();
		if( getPortComboBox().getModel().getSize() > 0 )
			getPortComboBox().removeAllItems();
			
		com.cannontech.database.data.lite.LiteYukonPAObject litePort = null;
		for( int i = 0; i < ports.size(); i++ )
		{
			litePort = (com.cannontech.database.data.lite.LiteYukonPAObject)ports.get(i);
			getPortComboBox().addItem(litePort);
			
			if( ((com.cannontech.database.data.lite.LiteYukonPAObject)ports.get(i)).getYukonID() == portID )
			{
				getPortComboBox().setSelectedItem(litePort);
				
				if( com.cannontech.database.data.pao.PAOGroups.isDialupPort(litePort.getType()) )
					getDialupSettingsPanel().setVisible(true);
			}
		}
	}

	Integer postCommWait = null;
	String ampUse = null;
	if( rBase instanceof IDLCBase )
	{
		postCommWait = ((IDLCBase)rBase).getDeviceIDLCRemote().getPostCommWait();

		//only show CCUAmpUse when its a CCU-711 or CCU-710A
		if( com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 == PAOGroups.CCU711
			 || com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 == PAOGroups.CCU710A )
		{
			ampUse = ((IDLCBase)rBase).getDeviceIDLCRemote().getCcuAmpUseType();
			getJLabelCCUAmpUseType().setVisible(true);
			getJComboBoxAmpUseType().setVisible(true);

			//add the extra options for CCU-711's only!
			if( com.cannontech.database.data.pao.PAOGroups.getPAOType( rBase.getPAOCategory(), rBase.getPAOType() )
			 	 == PAOGroups.CCU711 )
			{
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_ALTERNATING );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_DEF_1_FAIL_2 );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_DEF_2_FAIL_1 );
				getJComboBoxAmpUseType().addItem( com.cannontech.database.db.device.DeviceIDLCRemote.AMPUSE_ALT_FAILOVER );				
			}
			
		}
		
	}
	

	//regardless of our type, we should set the advanced settings of the port
	getAdvancedPanel().setValue( rBase );
	
	if( getDialupSettingsPanel().isVisible() )
	{
		DeviceDialupSettings dDialup = rBase.getDeviceDialupSettings();

		if( dDialup != null )
		{
		
			String phoneNumber = dDialup.getPhoneNumber();

			if( phoneNumber != null )
				getPhoneNumberTextField().setText( phoneNumber );
		}
	}

	if( rBase instanceof IEDBase )
	{
		//do not show the PostCommWait Items
		getPostCommWaitLabel().setVisible(false);
		getPostCommWaitSpinner().setVisible(false);
		getWaitLabel().setVisible(false);
		
		getPasswordLabel().setVisible(true);
		getPasswordTextField().setVisible(true);
		
		if(rBase instanceof WCTPTerminal)
		{
			getSenderLabel().setVisible(true);
			getSenderTextField().setVisible(true);
			getSecurityCodeLabel().setVisible(true);
			getSecurityCodeTextField().setVisible(true);
			
			getSenderTextField().setText(((PagingTapTerminal)rBase).getDeviceTapPagingSettings().getSender());
			getSecurityCodeTextField().setText(((PagingTapTerminal)rBase).getDeviceTapPagingSettings().getSecurityCode());
		}
		else if(rBase instanceof SNPPTerminal)
		{
			getSenderLabel().setText("Login: ");
			getSenderLabel().setVisible(true);
			getSenderTextField().setVisible(true);
			getSecurityCodeLabel().setText("Password: ");
			getSecurityCodeLabel().setVisible(true);
			getSecurityCodeTextField().setVisible(true);
			getPasswordLabel().setVisible(false);
			getPasswordTextField().setVisible(false);
			
			getSenderTextField().setText(((PagingTapTerminal)rBase).getDeviceTapPagingSettings().getSender());
			getSecurityCodeTextField().setText(((PagingTapTerminal)rBase).getDeviceTapPagingSettings().getSecurityCode());
		}
		
		String password;
		if(rBase instanceof WCTPTerminal)
			password = ((PagingTapTerminal)rBase).getDeviceTapPagingSettings().getPOSTPath();
		else
			password = ((IEDBase)rBase).getDeviceIED().getPassword();
      
		if( CtiUtilities.STRING_NONE.equalsIgnoreCase(password)
          || "None".equalsIgnoreCase(password) //keep the old (none) value valid
          || "0".equalsIgnoreCase(password) )  //keep the old '0' value valid
      {
			getPasswordTextField().setText( "" );
      }
		else
			getPasswordTextField().setText( password );


		if( rBase instanceof Schlumberger 
			 || intType == PAOGroups.ALPHA_PPLUS
			 || intType == PAOGroups.TRANSDATA_MARKV
			 || rBase instanceof KV)
		{
			getSlaveAddressLabel().setVisible(true);
			getSlaveAddressComboBox().setVisible(true);

			String slaveAddress = ((IEDBase)rBase).getDeviceIED().getSlaveAddress();
			getSlaveAddressComboBox().setSelectedItem(slaveAddress);
		}
		if( rBase instanceof RTM )
		{
			getPhysicalAddressLabel().setVisible(true);
			getPhysicalAddressLabel().setText("RTM Address:");
			getPhysicalAddressTextField().setVisible(true);
			ivjPhysicalAddressTextField.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 15) );
			getPhysicalAddressTextField().setText( ((IEDBase)rBase).getDeviceIED().getSlaveAddress() );
			
			getSlaveAddressLabel().setVisible(false);
			getSlaveAddressComboBox().setVisible(false);
			
			getPasswordLabel().setVisible(false);
			getPasswordTextField().setVisible(false);

		}
		else if( rBase instanceof Sixnet )
		{
			/**** BEGIN SUPER HACK --- Special case for Sixnet Devices!! ****/
			getSlaveAddressLabel().setText("Station Address:");
			getSlaveAddressLabel().setVisible(true);
			getSlaveAddressComboBox().setVisible(true);
			getSlaveAddressComboBox().setEditable(true);
			getSlaveAddressComboBox().removeAllItems();				

			com.cannontech.common.gui.util.JTextFieldComboEditor e = new com.cannontech.common.gui.util.JTextFieldComboEditor();
			e.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 16000) );
			e.addCaretListener(this);
			getSlaveAddressComboBox().setEditor( e );
			

			String slaveAddress = ((IEDBase)rBase).getDeviceIED().getSlaveAddress();
			getSlaveAddressComboBox().addItem(slaveAddress);
			getSlaveAddressComboBox().setSelectedItem(slaveAddress);

			getPasswordLabel().setText("Log File:");
			/**** END SUPER HACK --- Special case for Sixnet Devices!! ****/
		}
		else
		{
			getSlaveAddressLabel().setVisible(false);
			getSlaveAddressComboBox().setVisible(false);
		}
	}
   else if( rBase instanceof DNPBase )
   {
      getPhysicalAddressLabel().setVisible(true);
      getPhysicalAddressLabel().setText("Master Address:");
      getPhysicalAddressTextField().setVisible(true);
      getPhysicalAddressTextField().setText( ((DNPBase)rBase).getDeviceAddress().getMasterAddress().toString() );
      
      getSlaveAddressLabel().setVisible(true);
      getSlaveAddressComboBox().setVisible(true);
      
      //create a new editor for our combobox so we can set the document
      getSlaveAddressComboBox().setEditable( true );
      getSlaveAddressComboBox().removeAllItems();
      com.cannontech.common.gui.util.JTextFieldComboEditor editor = new com.cannontech.common.gui.util.JTextFieldComboEditor();
      editor.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-999999999, 999999999) );
      editor.addCaretListener(this);  //be sure to fireInputUpdate() messages!

      getSlaveAddressComboBox().setEditor( editor );
      getSlaveAddressComboBox().addItem( ((DNPBase)rBase).getDeviceAddress().getSlaveAddress() );

      
      getPostCommWaitSpinner().setValue( ((DNPBase)rBase).getDeviceAddress().getPostCommWait() );
      
      getPasswordLabel().setVisible(false);
      getPasswordTextField().setVisible(false);
   }
   else if( rBase instanceof Series5Base )
	{
		getPhysicalAddressLabel().setVisible(true);
		getPhysicalAddressLabel().setText("Address:");
		getPhysicalAddressTextField().setVisible(true);
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(1, 127) );
		getPhysicalAddressTextField().setText( ((Series5Base)rBase).getSeries5().getSlaveAddress().toString() );
      
		getSlaveAddressLabel().setVisible(false);
		getSlaveAddressComboBox().setVisible(false);
		
		getControlInhibitCheckBox().setVisible(true);
		ivjControlInhibitCheckBox.setText("Disable Verification");
		if(((Series5Base)rBase).getVerification().getDisable().compareTo("Y") == 0)
			getControlInhibitCheckBox().setSelected(true);
		else
			getControlInhibitCheckBox().setSelected(false);
      
		getPostCommWaitSpinner().setValue( ((Series5Base)rBase).getSeries5().getPostCommWait() );
      
      	getPasswordLabel().setVisible(false);
		getPasswordTextField().setVisible(false);
	}
	else if( rBase instanceof RTCBase )
	{
		getPhysicalAddressLabel().setVisible(true);
		getPhysicalAddressLabel().setText("Physical Address:");
		getPhysicalAddressTextField().setVisible(true);
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 15) );
		getPhysicalAddressTextField().setText( ((RTCBase)rBase).getDeviceRTC().getRTCAddress().toString() );
			
      	getSlaveAddressLabel().setText("Listen Before Talk: ");
		getSlaveAddressLabel().setVisible(true);
	  	getSlaveAddressComboBox().setVisible(true);
      
	  	//create a new editor for our combobox so we can set the document
	  	getSlaveAddressComboBox().setEditable( false );
	  	getSlaveAddressComboBox().removeAllItems();
	  	getSlaveAddressComboBox().addItem( RTCBase.LBT3 );
		getSlaveAddressComboBox().addItem( RTCBase.LBT2 );
		getSlaveAddressComboBox().addItem( RTCBase.LBT1 );
		getSlaveAddressComboBox().addItem( RTCBase.LBT0 );
		getSlaveAddressComboBox().setSelectedItem(RTCBase.getLBTModeString(((RTCBase)rBase).getDeviceRTC().getLBTMode()));

		getPostCommWaitSpinner().setVisible(false);
		getPostCommWaitLabel().setVisible(false);
		//getPostCommWaitSpinner().setValue( ((RTCBase)rBase).getDeviceRTC().getPostCommWait() );
		getWaitLabel().setVisible(false);
		getPasswordLabel().setVisible(false);
		getPasswordTextField().setVisible(false);
		
		getControlInhibitCheckBox().setVisible(true);
		ivjControlInhibitCheckBox.setText("Disable Code Verification");
		if(((RTCBase)rBase).getDeviceRTC().getDisableVerifies().compareTo("Y") == 0)
			getControlInhibitCheckBox().setSelected(true);
		else
			getControlInhibitCheckBox().setSelected(false);
		
	}
	else
	{
		getPasswordLabel().setVisible(false);
		getPasswordTextField().setVisible(false);
		getSlaveAddressLabel().setVisible(false);
		getSlaveAddressComboBox().setVisible(false);
	}

   
   if( postCommWait != null )
      getPostCommWaitSpinner().setValue( postCommWait );

   if( ampUse != null )
      getJComboBoxAmpUseType().setSelectedItem( ampUse );
   
}
/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val)  
{
	DeviceBase d = (DeviceBase)val;

	String name = d.getPAOName();
	paoID = d.getPAObjectID().intValue();
	
	deviceType = com.cannontech.database.data.pao.PAOGroups.getDeviceType( d.getPAOType() );
	String type = null;
	
	if (deviceType == PAOGroups.TAPTERMINAL)
		type = PAOGroups.STRING_TAP_TERMINAL[2];
	else
		type = d.getPAOType();

	Character disableFlag = d.getPAODisableFlag();
	Character controlInhibit = d.getDevice().getControlInhibit();

	getNameTextField().setText(name);
	getTypeTextField().setText(type);
	CtiUtilities.setCheckBoxState(getDisableFlagCheckBox(), disableFlag);
	CtiUtilities.setCheckBoxState( getControlInhibitCheckBox(), controlInhibit );

	//	CCU's cannot have addresses larger than 128
	if(com.cannontech.database.data.device.DeviceTypesFuncs.isCCU(getDeviceType()))
	{
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0L, 128L) );
	}
	else
		getPhysicalAddressTextField().setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(-9999999999L, 9999999999L) );


	//This is a bit ugly
	//The address could come from one of three different types of
	//devices even though they all have one
	//Note also getValue(DBPersistent)
	
	if( val instanceof com.cannontech.database.data.device.CarrierBase )
	{
		setCarrierBaseValue( (com.cannontech.database.data.device.CarrierBase) val );
	}
	else if( val instanceof com.cannontech.database.data.device.IDLCBase )
	{
		setIDLCBaseValue( (com.cannontech.database.data.device.IDLCBase) val );
	}
	else
	{
		if( d.getPAOClass().equalsIgnoreCase(DeviceClasses.STRING_CLASS_VIRTUAL) )
			getCommunicationPanel().setVisible( false );

		getPhysicalAddressLabel().setVisible(false);
		getPhysicalAddressTextField().setVisible(false);
	}

	if( d.getPAOClass().equalsIgnoreCase(DeviceClasses.STRING_CLASS_GROUP) )
		getDisableFlagCheckBox().setVisible(false);
	else
		getDisableFlagCheckBox().setVisible(true);

	getDialupSettingsPanel().setVisible(false);
	
	if( val instanceof RemoteBase )
	{
		setRemoteBaseValue( (RemoteBase)val, deviceType );		
	}
	
	else
	{
		setNonRemBaseValue( val );		
	}

}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	if (arg1.getSource() == getPostCommWaitSpinner()) 
		fireInputUpdate();
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
	/**
	 * This method initializes jPanelMCTSettings
	 * 
	 * @return javax.swing.JPanel
	 */
	private javax.swing.JPanel getJPanelMCTSettings() {
		if(jPanelMCTSettings == null) {
			jPanelMCTSettings = new javax.swing.JPanel();
			java.awt.GridBagConstraints consGridBagConstraints51 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints50 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints52 = new java.awt.GridBagConstraints();
			java.awt.GridBagConstraints consGridBagConstraints53 = new java.awt.GridBagConstraints();
			consGridBagConstraints52.insets = new java.awt.Insets(4,3,0,21);
			consGridBagConstraints52.ipadx = -9;
			consGridBagConstraints52.fill = java.awt.GridBagConstraints.HORIZONTAL;
			consGridBagConstraints52.weightx = 1.0;
			consGridBagConstraints52.gridy = 1;
			consGridBagConstraints52.gridx = 1;
			consGridBagConstraints52.anchor = java.awt.GridBagConstraints.NORTHWEST;
			consGridBagConstraints51.insets = new java.awt.Insets(4,33,1,2);
			consGridBagConstraints51.gridy = 1;
			consGridBagConstraints51.gridx = 0;
			consGridBagConstraints53.insets = new java.awt.Insets(1,3,4,21);
			consGridBagConstraints53.ipadx = -9;
			consGridBagConstraints53.fill = java.awt.GridBagConstraints.HORIZONTAL;
			consGridBagConstraints53.weightx = 1.0;
			consGridBagConstraints53.gridy = 0;
			consGridBagConstraints53.gridx = 1;
			consGridBagConstraints53.anchor = java.awt.GridBagConstraints.NORTHWEST;
			consGridBagConstraints51.anchor = java.awt.GridBagConstraints.NORTHWEST;
			consGridBagConstraints50.insets = new java.awt.Insets(1,33,5,2);
			consGridBagConstraints50.gridy = 0;
			consGridBagConstraints50.gridx = 0;
			consGridBagConstraints50.anchor = java.awt.GridBagConstraints.NORTHWEST;
			jPanelMCTSettings.setLayout(new java.awt.GridBagLayout());
			jPanelMCTSettings.add(getConfigLabel(), consGridBagConstraints50);
			jPanelMCTSettings.add(getTOULabel(), consGridBagConstraints51);
			jPanelMCTSettings.add(getTOUComboBox(), consGridBagConstraints52);
			jPanelMCTSettings.add(getConfigComboBox(), consGridBagConstraints53);
			jPanelMCTSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MCT Additional Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", java.awt.Font.BOLD, 12), java.awt.Color.black));
			jPanelMCTSettings.setName("JPanelMCTSettings");
			jPanelMCTSettings.setPreferredSize(new java.awt.Dimension(394,81));
			jPanelMCTSettings.setMinimumSize(new java.awt.Dimension(0,0));
			jPanelMCTSettings.setMaximumSize(new java.awt.Dimension(394,81));
			jPanelMCTSettings.setVisible(false);
		}
		return jPanelMCTSettings;
	}
}  //  @jve:visual-info  decl-index=0 visual-constraint="10,10"

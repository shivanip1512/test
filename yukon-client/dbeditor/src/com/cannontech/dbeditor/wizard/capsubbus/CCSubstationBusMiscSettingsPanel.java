package com.cannontech.dbeditor.wizard.capsubbus;
import com.cannontech.database.db.device.*;
import com.cannontech.database.data.*;
import com.cannontech.database.data.device.*;

/**
 * This type was created in VisualAge.
 */
 import java.awt.Dimension;
 import com.cannontech.database.db.*;
 import com.cannontech.database.data.device.*;

 import com.cannontech.common.gui.util.DataInputPanel;
 
public class CCSubstationBusMiscSettingsPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener, java.awt.event.ActionListener, javax.swing.event.CaretListener {
	private javax.swing.JLabel ivjControlIntervalLabel = null;
	private javax.swing.JLabel ivjFailurePercentLabel = null;
	private com.klg.jclass.field.JCSpinField ivjFailurePercentSpinField = null;
	private javax.swing.JLabel ivjMinConfirmPercentLabel = null;
	private com.klg.jclass.field.JCSpinField ivjMinConfirmPercentSpinField = null;
	private javax.swing.JLabel ivjMinResponseTimeLabel = null;
	private javax.swing.JLabel ivjMaxDailyOperationLabel = null;
	private com.klg.jclass.field.JCSpinField ivjMaxDailyOperationSpinField = null;
	private javax.swing.JCheckBox ivjMaxDailyOperationCheckBox = null;
	private javax.swing.JCheckBox ivjJCheckBoxMaxOpDisableFlag = null;
	private javax.swing.JPanel ivjJPanelMaxDaily = null;
	private javax.swing.JComboBox ivjJComboBoxControlMethod = null;
	private javax.swing.JLabel ivjJLabelControlMethod = null;
	private javax.swing.JPanel ivjJPanelDailyOp = null;
	private javax.swing.JComboBox ivjJComboBoxControlInterval = null;
	private javax.swing.JComboBox ivjJComboBoxMinRespTime = null;
	private javax.swing.JComboBox ivjJComboBoxControlUnits = null;
	private javax.swing.JLabel ivjJLabelControlUnits = null;
	private javax.swing.JLabel ivjJLabelFormatTime = null;
	private javax.swing.JLabel ivjJLabelFormatTime2 = null;
	private javax.swing.JLabel ivjJLabelLowerBandwidth = null;
	private javax.swing.JLabel ivjJLabelUpperBandwidth = null;
	private javax.swing.JPanel ivjJPanel1 = null;
	private javax.swing.JTextField ivjJTextFieldLowerBandwidth = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStartTime = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStopTime = null;
	private javax.swing.JTextField ivjJTextFieldUpperBandwidth = null;
	private javax.swing.JLabel ivjOffPeakSetPointLabel = null;
	private javax.swing.JTextField ivjOffPeakSetPointTextField = null;
	private javax.swing.JLabel ivjPeakSetPointLabel = null;
	private javax.swing.JTextField ivjPeakSetPointTextField = null;
	private javax.swing.JLabel ivjPeakStartTimeLabel = null;
	private javax.swing.JLabel ivjPeakStopTimeLabel = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public CCSubstationBusMiscSettingsPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getMaxDailyOperationCheckBox()) 
		connEtoC1(e);
	if (e.getSource() == getJComboBoxControlMethod()) 
		connEtoC2(e);
	if (e.getSource() == getJComboBoxControlInterval()) 
		connEtoC3(e);
	if (e.getSource() == getJComboBoxMinRespTime()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxControlUnits()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getPeakSetPointTextField()) 
		connEtoC5(e);
	if (e.getSource() == getOffPeakSetPointTextField()) 
		connEtoC6(e);
	if (e.getSource() == getJTextFieldUpperBandwidth()) 
		connEtoC7(e);
	if (e.getSource() == getJTextFieldLowerBandwidth()) 
		connEtoC8(e);
	if (e.getSource() == getJTextFieldStartTime()) 
		connEtoC9(e);
	if (e.getSource() == getJTextFieldStopTime()) 
		connEtoC10(e);
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  (MaxDailyOperationCheckBox.action.actionPerformed(java.awt.event.ActionEvent) --> CapControlStrategyMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.maxDailyOperationCheckBox_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JTextFieldStopTime.caret.caretUpdate(javax.swing.event.CaretEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (JComboBoxControlUnits.action.actionPerformed(java.awt.event.ActionEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (JComboBoxControlMethod.action.actionPerformed(java.awt.event.ActionEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JComboBoxControlInterval.action.actionPerformed(java.awt.event.ActionEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JComboBoxMinRespTime.action.actionPerformed(java.awt.event.ActionEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (PeakSetPointTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (OffPeakSetPointTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JTextFieldUpperBandwidth.caret.caretUpdate(javax.swing.event.CaretEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (JTextFieldLowerBandwidth.caret.caretUpdate(javax.swing.event.CaretEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (JTextFieldStartTime.caret.caretUpdate(javax.swing.event.CaretEvent) --> CCSubstationBusMiscSettingsPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G10FE65ACGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DDD8BDCD4D57EE7B7ABF7F3F7ED577E312D3B391B75E7B7AAABEBDDE3B7ABB3AA7D07E5E9C5C569961595A525956565652002220020E10E0A0AC5080F0C088C64A1A048C392EC3198198BB3B24CCCB397990CFF7EFF67F99FF3E7F8147D65532FBB67FB4E6FF15E677E4EB9D7A1FD5304445838F4C108CD94685FA73102B0FD2CA0DC376C02238C1B925CE29094FF1B0156886F6FCE00E7A844CDACEEB5
	248A4EE5C9908E07F0724ED6C3A67CCE93FA17658C408F9FFAE23E9304AB3BEB5E722FA7281469B160F005A5991E2B00A2GCB382E4550G14AA1C30E4D1BC97422B68EFC431F10210FDBDCA933FBCCB010F2369226019G7153F01A3116EC9AEF06B0CAB3G4F31571334C170DC0E2D3B30281026EB3BF40290FD5F66389424CBA11FD1528D04B70FBE0D42DFF1C1448BB79F2E07E7F1C3F757018EC7CFFE0749EEF758A5314312EFBEA91A2D1243155FE7BDE3F219A14A696EBDF93257DDD4D4D6F6347724DBB2
	C9D6077DE02F3B4E6A6EB8AACA12555E65EEB059C51BB07E86140F1D4B13308E488704F3A7A16C4F4BD159C5C0F889CAB30965E5F6CAB1AB136E89C244D569BE73E21BC472B0F6121C171C747E38129B117CFF603AC1FCE1901F849831A5564AEC99F5A333E505045206C0F88E50C20E4F46F842CDAD06EC20FDB7B19BBF5F41ECEC7D6E86A17BD79D712BFD58D8FB9331CD3AC936B1F0D9FF5CFA5CFE761521B6B0896266GC582A55F5CE248832A85FA8F375BD7CABF00E769C9294C5153633017BA1D87EDE6D7
	1D43AC5A60F7D19144D02CC96CF0384C02C05AE67E72BC9DFB9819EFD637CBC4A4EFAD82EBCB41CD578849456678C41D3CCDFEF8EB1C074A98F3331C3785B723F27BF285AA37E0780D78D07FA33895633913E51C5455FF633600426D9017FD8BAB6756D54C165A04AB04545D15F1869DDB826F7CACEE5EAD347F5CA25BC24AF8D585AA636CDBDB8C05C08DC0962051C0C13732B27E74605E414A389A7A024BEE32C1FBF71ADC5241DE2B4DAC3AE8D95FEE71D756FAC478E68D1B0F14CB50DEE59D055FDC21DBAE61
	C19F44CD3F1514C7782DF239905D4B2C3EF4475C6A5DB6D671BA7C9E7709543F13BA0C6778E80C9B95B8295BD40C23F081440D83A269AF6CC578123FEB5B486FB1DEB0C55BC666CA2C0DD8A0AE679FAD86D23F4115E80C0C00F08CD07AD468BFC035C0962001292C0EC79D5CB544FE542028DF427BF959BAF80A9E49E52A3643F0E76F900F19DCD653C91B6896E81A4AB2D42EA7D5FC07F17F6EG9D07C43B684243A4C8B7750850185CA4CDF3599A1446A56258E6EB0F888AFA1C82135BD61686CF1B49ADFD69B4
	1BA4D1CEC1624DE528CD1CB69D8309A0GFE4F1C0A4A2B820F3963617714292C2C9EBD0430545BE0FC3B0D154BD3E5EB61F9989A37E8ABAAAA37F6A0B3CC2EFE56C67F33823513E2C81F9482E3A8D041BFE1FE82EA78D70BA18248F9BB4C1553DA8CE300326EE0FD7765D656C64BD32E96729EAE57ED23388D5FC15A5B74BB34ED5401F5AF84BC79CE28D720DAA09B509820E02019C08B01126F02783B583CFC5D72C98A794CBE74BB0B6AC079705547D07E0653A791CD23BC28CC7018887AD01971F9176A0B7817
	EF594476F0156DEBF09D115F190AF47E4607615A3E12BED368B30376D7961FC81F2B7D48A06D6BD0B56A2335D08F962051F731B636215CC87A5EC113DBE43D2D5E859DC5B44BAD0E244D2CC0FA445322DDAA971D225D8CBF5C342D3FDF31DC6E071D8E5EC7F2B00E4665B268A8EE0EFFD0310660A0C3592BD97C9E9CEF12A41775E42FA432258B0FAF423638D5C33E1B66353A8665F58264F18AD0A84F6BDD95E90A7ED46BF0F477BA1B51C8C17B65C63C7E880774513C3D0E12503AB2EBBA8B7F9A076578F5D26B
	A0F508F807DB6F6AF637EBD09D71A314AF6B38249775E7B6BFA4D2FCB9ED03A9340D31B61F41792E44FC4510C7B350982049C061C089F7C33F87EA869AG1A88B473EED6EECFC8130629EF24797BB109581E5CBBE998F6E77E48B60C14C89F383552F79F7EE725FE9F3E2BD23F8F5FDB693F0F4E2E546B23A4EEDEA5AABBC71FDD51671F28C473DD0743EE97BB48EB8BE59148FB504B4DA89FD63BD5EA311A3BC46928750C886B4799286F3661B9B59A5AD7528CB64F75EDE573DC4E19BF8B533E59942737DE8E3C
	7AC0DC7B8C7AAEB0C31E6708CDCF9EC2E309E893FB20204A9C3DF609608B70FCCDF1F7BC46824B7E05F8F36BCC1EF2135556DF6F248B0BB20B5851FD506149B361FC6513C703686AF438FAC4F36EA953E9D33E29CF4A477512DF0A23AB506F1D460FBEBAE09C6CDDAE2F471746EFCAB52AEAFD6B7AEC67311D8524DDC3DE52AE44F92901B559C987C8AA03D7CE1743D6A7CA9607791CE524536A922B6D4EDE3A224A8513F68B4C2645C5976B5A04DFGCE1BECBF25D5FB28CD73CEDE2036294EEAEF925DCE34967C
	A96D59CB6D49AF78993627C1B4F583D30343EA171A21CBD7DAC51BB92F8366DBA99F7F1F32A2DBBC796EBE90CE4DA9C331BF501AFD3C4E920F0C427654F7F67E7F1A74B13127231D58D343AD7852891D662049EE6E331AA54BCFE64FFEE20F432435275651777FE14FA7441E5F6DBE2B3167288423B7EE4EBF15A905346DBC3361FBAFDB9C4E1F5414CFD9BB5E7A097EF878A54CC66E1FF4B804A11A2EF3878E2339E99C4CD9C1C053E630F5EEFB950AE76BDC3A18AFF358ECE4DA053842FB501C793795690AF9F0
	5E8C62A74D01B8927F61CA3D78D51C3FE510788B86093FC1B7BE006BAFC8560B9F4763EF540D1765BF219B9F44793FCE510B8F6171CF694607717876D5FA718B6EE175D0D71D0A56BF62373D223DC3C4AF9A0745FE66DB28DE2B09BBE632754ABE0B36EA341E34A95ED188DEDF233F9E7932863D17F4F37947EB16894877C0E4127553A4931269F4D9FB60158E3DF4D1FF77BE2B525F3D846CC73E7142D0F82787A23C759FA0BFCB39F85A5AA19EB1750825E633CBF4D3D732D0F0AF1273D8AF7709835FG5078D0
	A2ABBC14548BC9772753AC5DG044781CD3E17240B3ED7196EE49FCB17FE9F3CCBG555E2717EE3B07259B837193FD26FB0C271B8E7161C0B13A697E584F52955E5FE2E8385FD73A46B3AC1D93520C7619AE71BB16AE8852CC7319EE6EB216AE8252AC71196E9283CB17B53345D0B053D73AAF12D83A86C8E3819ABDD31DAEF4A6CA6766FBG3BB876CB0CAD06171B2B6219EF33AED5391791EC0F56DDCFA3CA1EC55751336475B49933EE2CC5F2CBGEF18457A49C3B54A7772D2375B51E145E3A2ED73BFBF2CDC
	EB936C6243AB60896323DB2A0617988F6BB73FBA0CECC5BEB98A5336FF6D071F8B5EBE468A3CFB425C9EE5FDF8ECEEF614B94CE295F43DB27EAAF24CAA7681BF5927F8FA855FB319455EB57E37D239B79232BAAFEE250F3299CF4BA4C4D1B6854B7A63086CE7D7B259B133583EC8D7B243767D8F4352D398E66358E59C1B4831F52B98964E314BB9167EG6B5F3FAFC2FEF63DBD268EDCE079DD3D567CDE490A9C11A64904A7A565BE521F306F84492AFD006D51CC312131EA94044783CD86A27E62785349B46DCC
	40924258F8DA7E35F2BCAD865C8CB49A084C4127CE6F01677067DA5686C65B2B6079E33DAB11FA7FCBDA8935F76675D78845E7D36274761BC62F4E0C9B9FC6FD29E1F23DCF91DF0B9BFDA35B973B0717CB6A6C96C355ECD6AEC7CD4AF28918CD7CD3C133D93964777D30F2193EF3AD69CB1A3586736FDF52476C8AC13A39DD13366B591577A0336B35915BC57456FB185E921069F91069DDD72327F752033CFD75B33E690045F03E68FAA55F3E07DA8CEDC0818F7176550F463FE1AEAD292DB3384EF1A0EF66C3CC
	E7C8031E4E04B94C56B3E798DF96E08DF3985F4AF2BD3E511C2FF699639B8F589C4E7718EE9E139FE6FC0201719981EBFD1871659ED4720DFD18704D61FC13B9DFA4E046C798DF7C86BD3E56C7981FA5097159G1B48797EDD2F2DC344977E882B0B8712C65AF668DE699E65DCB5AD62C31FF3D554A324BFA64C554ED5179DC1E31A9170FDF359DC15D40BFCDEEC2EEA025941E46F025599772F55A27BE19DC643D3EB11DE3C8E93187F7059954359DB2C1A4B76089E44E55686E18F50D820A020D0EEDBE95D20FB
	25959EBFFB25AF2E9C0EDD11F319AF5716BC9C3E984E37BEE5B8FC2973985F9543624B61FC6F2D9A8EDFA1679BBFAC3EDA4EF71557BEEE7BBCF9AFC01A673DAFC076D9BDBD284F0C1EC776D957F37CD7981F2E40C99F7B971EE7D1D8F894461EC7197E6527357A839FD36B1C2C89933ECCAF3E77B561F99ABEB20F9CB8065AA1DEC3A8064C22229AB64352770D6E954A770D284748781D7EB82C9B9EE7EB146F3EC6FD8F75651247D97B4FEDC46BD98F04478185830582AD84CA8A07F9A71C750331F5FAEBBDF5BF
	70355013772168B90091166163DEFC795AF6922ED706DDB6DFE5C87D8EF43D75CB93DF0306337A3E34EFE436DE69452735F53C46D6E243F35B198D13398DDFFAC6E6C307971F5606053AB65455B09B921E606D3EFF046D5E0BCFEBC37193FAF536ADB7DB3F4E385F0A347B58F43DF65F8CB2ADCF30F67FE1C39235A70067E766887373582079197204DE19AE62B604F19B824E0C4C06DFFB71E9EDC8FAD24F0603654C8663134C0626E5A333215D0BCFEBC32B2E8DEBF8B9B8398D4B8CA333A15D0BCFEBC35013FA
	ED6B0B3CC2E1086FE5F2F3C3AE528A3B646AA7797866A06BA353F8BE260EB09F210366E309EED93ABD4C065427188D76241159B060452735216AA9BD9B329B188D6DCF31B945520430C08887BD45660F176A50BEAEDB63617D8A012D6F2EB8027CEA8E17354BEAE75815986BF03870E6A6B9CB708E7691CC8119F3385C476AFD6F3DBEDD2F3F777ADC3D7E5E6BCB757E4FCF3CDE6FEBEF165897174C6C0B84A258859C0B61D8C18A43D2A398F6A347F2B836E795438AB9F6B347EAB9B6957B895AA1ACF16C42EEDC
	87901E94415A4677BD484FBD874251C069CF439A9C2895C8828A841A82B493A88AA86B99507B8C637D9D66ED0370G5078E7080F9179927228FF903DEB04G9E8E948314BD1F71CE37CDD3349B248369E7E1E40732DD691124C833EF8869D751FCAA43A8AFA8CF018A7E19BEE435D2BCCA91CF7232D81597549E9295E1FFE7159825A8FE8F757C1276AC8A6AE7688C04720CD21A8FDEF65EC9F95EE3A316F96F3A55383D3B5D229BAF5E10970A46BDA7E588BA6786101BDAE07BB7A5271753B4951223EC37404657
	C5BB511C2CB3F7E3679699B72EDA41FCDB457319EFEBFD83DAF3CB909E83B411371F002F15E3D348FCD2A7E17439G1ECB662B6B111EF7EA74BDB6FC5A28BFB6FC51086A476D68F5F5085A7EDF591845636455ED35A47620E221FB8918DFB2393AC42F71639866A7F13E783FE974B54610B2CF68D316799E5EAEFFE37277BE153C403B1D93F921AAF9FB393C055B7D49B37A14B7462314370F4BEB2A71A7EF1FCFF9A57DCAF99F8BEC5E79B41D351F2A852C7DBC0D5F5982A09C88B4E981EBBF858DCA5D219ADD61
	1AF0548266AF09BF23543D1F67E509CADE423F557CD91AF05E3F193C3F2B64FD42659DAAD74AAB5170B7EB4296AE6F974B14728A393CF5AA7B86B47CE3B56109DC5E6786253CCF39BC73C1FFF5B7655F3E6A6ED5438A05BC3449CA64F93C5ECB14B453273C2B13D472F6B3F91B9B7C490B5011C77ADACF93FA6777707037B85CAF30F1CCACC5E9C9FF2D301B6922056C652463BD059EC87826403075F82EFF950C3DB016E1D7E06C3D84C1380BE30770DC7F91E00BB8960A31DD00ED0DE3D8B51E6BBF834C44317B
	B0F69C304B63D8394C362235124D546F68857B5A1FC569A2797EE3B464BF9930FDC0D54F1232A0793B318F4D8D1DAED38F8CB1C71DE207D07C9C629D5F4DF803A0FD88D0B8D08CD076F32C2D2C5A0D7CE61A43C2352613220D44BF1B0E6269419D075D0D8FF2AB62EF7D884DD7B598D19D0322F98A7B886D0D6A1F14E279FEF0A79AEB492CC2379FF8DB711C4E5261E70612B41958BF2BF74A08444FDFEF6072F7D339D55D6BC83EC0E227555553A042E4E017F0BE18EE5B5A8DFAE90EBA2DF67CAA4152DD530C4A
	2092AC6FF509AAC1A45ED9156995AF8BA1BE5F87FA14BE5FD14F51FD0C6718CF7840893D78909E9F3CCBAFBE0C472F756845AF10651FD646AF2171F911ACBE22CE0F3F0447AF2E5363EF0EE4E3F71017DF5792A9776701C86F3ECD7DFAF8ADB1B612787592B99E0871098A1C787BB6B5B01F7A94084BFE1E2D23AF47BE33G880F655842BC04CD0470E40EB5FE44565B53B8363C9E5FBFF8815674AFB06C9A93CBD74031789D8C8B60183506E1E1AF3032B8102EAD8B630B0AF5710B3E4AE2B676F1D63DC8723C19
	63AFE0FC1C82A7E5719C1EC7D1B8826296AEE4B69D426FFACBDEEAB1A43D4C305BB2191D599C7BA7CEE703F0G47D6B7A2EC9C04A7F2ACFDBD631D4231EBDB9116748A48FB05E1DFE33FC58104CBB8963E0771B6F3ECD6A92E9788CF6158C7581619908E67D8C996630D625898DCD7A5D1A0AF0AE15F9DE469AC9C7B0D075B4C31428606A53D4A76E8D2CF317BF82D000DFD156D896FEED77935500ECBD151A11755FC5054D50BC7F0323EE9BD15C479C3DFE56B1B0B30CC61B5F80F81AAF80D6D13FB3633FD7260
	EB2E90EA83AAF46F90C6B46745D53DC65A086DB5F9DFA6186F135F594DF486C1FC44EB880B6AD676CFB4AE5D9FC7FC83A4FE0BCD990F562EDB85E5FC33AA9E591B962F0C3FC8950F4AE8A365A7F93BFF9B4BDB4C7DC1026D163DBE6FC766AEA2F92A254F00262D4244707EB87ACE5269631D848F38A47F4B6C4CB7B5EA91739D761EE0D88847666FE2D8B4472ABD8C4B0BE6F57D7D7E6D02424F54ED6B4ABF5501BC8E791DE884C78EE8451CC0751DE6F24C51CCF66691060D67D8BE4766C433F6F8BBFE27CAFE3D
	45E0FC1DE18712D95BACFF1D3F4B6376BA8E4213B876A70C4DFB1D1CB1A2583686FFF7A4902F2F38D5D43E3FF8BA2679551168A70E3547416253046B3FC66738BAE189D07886AA1369F8CC0F817B125E60EBFD349C93A4F8A19CF8835D057E1F632875C56074160F4A7D68089564BB97589F88BC0836D2FC4E9BE4FC0D6576986B51FA2D875615485FC574957FC75677CF13BFFD0902FCCF82BDF39737980A9793FD88EB005F0728BEA2EF430E4164A5AA6435E964B93D6485548CA64F2010B72011B7D6A10F3451
	AF53197FEA7CE2BE07E47079F4B1EB0FF3FBCA60193A8446BE20E6A089A890E88A50BC20E82074B7E12D8B548A64818A848A818A870AF913490A42320CEF11B3EBA5EF11B3E96D708CG1AGB48DA862ADF2868D1D9BC3E74250B9B361ED68DFEF1333DFC456CBB614993D32C0B6686148CE765B23C8037290236141F924767BEB6B2BE85924537C8E16569785523255627BB4B28BE8392B7BF3C10F2F3270F5E7E70D6277FA45EF643B592CC90B6684742E36E98879A0FD0D4CA7A3AD0B15023ECFCFFBF78A356B
	94AF5DB75955630E930F31A550F6EA01C8DFFAB0F3A8FD1DD1405B6A3EB48E425F894A31E5CE83323743E16B6D313B852277C52C9759B761EDB65E7D3CD1EDDBA1DE1FCD027890EE5B076B7D5936DCE3DB14463604982DEDF736FA5B76E8AB33ADB506593628DAED5B45F87DE704783C98E65B22BDC3995318ED6DB1EA5BA4AF5B9614FA5B76F6A933AD005BD65E20366DABDC36E3A1FEBC372DA5EB30F2D35A962631ED0117EDD755FB5BB6351E599645757E7660D046E526D7F8C72DB77D9DD9AF11F70DE7B0F9
	4AB6E054485B67A52F3EE1B0F9AB95E5D32211577C8ED96F468A5C4FF5EAE45FA14899A15F09E17311772C56EE34EEEFFFC7DE87905C04F11B82A76F8EE3783B038762425FE17BEA1B5A509A36645D96C39B1084B486A898A874DD369F76C6935A2771FBCE2359612C95CF0BB6459697495FBD5DA37BBE439D8636C61FBC75AF42140B96457ABA279B7EAE19AFE268B32BF1AB9F775788B71DC0794BDB5AE2288232810D828A841A3414656F4051BC12BFF44C38D412CC9D96FC0219E58E9DAA16E16454A2F9DBE9
	D766ED7AD222FF9EFDAEDC6ABD5F913EB3A714FCB02363F4697419CB1F5EFC113B14FC45B4DD83FD1AFD729DD179C6BDB45D987A1C60136F8CBF9BB3D9A7CDA8E0619A1C70E59FD16A0B22E992E249B3AB56173E3D1CAFCFA7CD89E04D9A1C0CE50F2C7076D53E444FAED9008779AA8360B98E886DAF1231634BE4FFE387124D66EA74BB98F82781ED2561B970DB3D86FF65B862A33EBDF63714450DFD8F35C71FB7CE8576CD2330866D5993ECAF680A86A26B7A37BB842EB3A2EF8BBC6DE21F119F362C0409A4F7
	0B59EA32B93A3664998B720C3B77717316937A1467AD8BD76C76FDB7A00E143511BE97DE30154AF860BFCA9929D73C97976BC3C6AB65B5B3D942DFE3B789E48D15A448FFA4DFFFC35B00D44753492C7FE7DF7B8721FC6E22582DBEF484D259118A9D39A74F44F96B097A42376E74AE74DB0F074417D97C47F7DAD108343D6F7979A1E3BCE9FB05702C0DA7761136B7A7E3303617A248F32199F8BD71F25B9B932FEDFB3D789C01726AA6F59F53785F54E7E86279A9941E66EF785C2A668628423FBE3DBE4BBB1E0B
	A1E91E2ADF4B74307B08AABF761B321D740E205A4E3486F4970BF8D0AA9D2E9E13A47B4E739A5668446D613C15788CB709D75F96A5716D38EF793AD1CA52FC571026CA43F3C1F5DC5630D693CFF241EC38C123C3FDCB142439CFE127DE7C8222C3390F012FAFB29D6FB6203A543D61A830BBF5D5F62D0F9C1D258804F6C362339A756203F97C3263FA7153F87C4725FA71F3F87C54EA3D78C89E7F20EEFC8C0F7F05EEFCEA820BFF2EDEAFBE07474F570DAFCCE0E32881B5B9664B495CA6680E21EE135D6D96DD56
	CE45B06AE78C7820C7169957087A66FEBE3E4CF048F10675BF0E3E671D324C28D6353E37FA653887767CB87AB67649B2579ED46B7BD53F9C37B76B4751B7690CACF3F6BD5367BB7DEE74F5C2BF714D7F6BBF3E8FDDE326EB112F3B655FDD0A5F3FBDB558B7DEFE88919D571ED39DE44D1B5B667B9C4B2EB67DF3AC9F37691FF17B2C4D7F77C54A5AFCFFDF2426CD79FD917A8D2433286F56C2DF35G0D811AGB49908FE13248D2DF95057463C576A9566AEF40E86FDE1CCE27AEFBB61BB2FF71E987C3BE4771FC0
	E784CEBAA449510364736F261CC0758593G8689764889D4C6AEEB17C5A2C9A99E0EFD7EB6319343449F39856F8D04C13EA2008876D0997EBE8A04939299D6D84E7C16299C3B944BEB073013E34DED889B8561F19C7BC79B631D403125F82FA18A4242B206D9DC88CB07F08E47E639783EA247C43CA791G61319C933E45FBE4901EAC277B167BDAB9F6A95E07C8B5349A728C8CFB7888CBD742311BFA317F8342C19C5B0B530520B047B661FD428888C7F1EC945FBB0C61D88D662DCD0276144430DBA516EE00E3
	81F5F8DF8F428B0048FBF346CA765E3C843002652DF42F6444CA362FE5810C6C25DD0253CE00709420B020212DC1597873988E9179C90DECAFA6D2160F6F5999D7409C8754GC47A4B4531A82D854223D630BED2E27E901E47CC273CEF50825860F24052C76AA7A83E51CE7B5E4F63845EE6AFB2EF73A583FADA8D0C6D75A7CF099DD233290B775D6B62513AF6A258B18DE881D08CD06ACA4883D0B1D0831099E8GE89CD090D088D098D084D0B4D0D2B24B47AB62CEBF79201B1C38433BCC647CAF2937EB52D93D
	E5032C66E4D6EFAF2733FA9B134C4AB5BB835F5701F0B8D0F472F06B6D9709F23D1D657BFD49A9CCE7BD2F4BF20EFDFE1CE1839C3315B2ECB247DE2DE658C20EAD2FE1D84EAA06CD63695AB876BEBF97BF0EE39BB8B6F395AB637A333E4747E3E7879F9F3FB90BE40AB02EB577BB6919C373D9FC7E3A3353AD72F158FAB615E3556E86075B0ADE01497C7E29462FDD0F4BB1E1B5349DA0126605B275FEDAB0D2417C0065033DCFA97D23450A7DA36CA3DB2DFD1F8ABA2136E7BE9EEFEBA1DDAB37273BCDEDCFF312
	ECCFD85BE076987C58B35A4B1EF585EAFB728A70FEAB241B406DB96BD25B030FE1D2FB96388633A75E0FBDE1DE768CF854767C964F8B6110AE125B13792D5A1EABD648768CFCBB18BD4B7D5813156AD5DF27517B3253A5F60AAE17E8A61F9C23FE6DBB703C1383BC85C0C47F42A34371C3EB7537F9693F3797790AFA2CF6EBCFEF8F56CEF4BF0D67B28B2417D2D939549CD117DDBB1E1FA6C0FCB0CF33BFD3DDF67FDCA9175D9F7C6E6F988631BD5C4BF653915FE5F7865B9689BC513C6CE6C9036DC57853EFDC23
	55FFF91DFE595D006763BCC8DF88C456466F8D6B6E2B3C265EB9C23E134366A3FE7825F8ADE0D6641560C94988F7AAF0B2DFDD4A579983909741731B522854DF3E96461F35328F5436565BCFCA756335C240DA2247407115787EFB2082277AF1FA941E84F169E9ECEE98930BE47235BDD9AA50717CF731E81D0E3E73E7B5592CE730C373A8A434F71178BB62FD4FAB2171034FAB336375575DF3633D575D61717A6B6EE762156BEEFAD787FF0F3B8B568E2DBC5DC20E9D67582BD8A642DA10F306630B31DD882F92
	11C2063F036D6A43D8AB456292E46CB8458C89E86202ACDB9CAE461B1C0047842B4DC64229B80D558ED3A5AF0F0C84E42355E9D2583D01E347F91B8D76BA53B73436BEF504FC0B064DC75A62D83C6E7224E97B486FB1BEAACD5BC736E430BEB296622253D89F99255A07E9CDA7FD42C61F81693E769B1AD5FDEB9CCD97C41FA1BE798E9ED7720551F48B68F309CF3EEFCB15FC499954DFCD1F7BB2FC713DD12D642B22695A68536913EF156AFE44A81AAE10BE03FD725D2D52B70D261BC31F11BE79362A4E4C4750
	F4296B48B3E71DAF3ECDAA3EC21A2E16BE5BF578481C389E7D24F348BDE5C35D8721E7235050C4FF872E1165D4358DCF4EEDEBE5B91999321CB71C4313F377BAD94E6675321C68E14AA95FA04B4143B015F35F117735F24A2DBD229DFD70BC77630F730CFBF6F3993F4C16E5DC37D116F1D75D50E5ACB74AFCE919434B43255BE57D13F748F22E15062EFFEE2EAC632D1D320C175CC311C15AE5A2BE9ACB7B12627765AB4F3D8FF052B955C17C9DB9783DD4027EB5FA9D7301DC056F5986C3F89A4736B4B3DF4902
	F5EC4CCD446B08FD192D06B62000CC062F41F89004C301A2B9FE39C7199F4403F807E3F3001F74344CD4BA587B5EF04B5E3F0E7F4A105B41150A5F3999673ECD141ED39D242E7FE067677133D87DBF03FDEA59904E6358A1FE5E3D10E35D7CBC7EE80EC560F463A19C4C318A790CBE470EE3FFC8527AD6C356FA063D35992F7FA1DC4C31EF36B05EAA0E0D46FE13C08887F12CE6BF769722B047EE584FF867F1AC857BD2F2B740BB4686063DD7045F75A15C463100A2FEEE1FE35BB86F940E3D70A9631D4931431C
	F79E47422B597D035C779876AE66AD06F0AD47BAB8EFAB470A787D03A00EBD0D6BA88405B9D6496BE89E4776E35E5CEC48EFB643DE443C3590EE63D8836735E433F7524F9A511A74244305AF20123D6E26C63657BD85520581A5EC04BA84C2673E895F54A66F7399331B98DF41C632C7DE854FB64AC75EB3BFED9E6C0C3452E7A1816F680D729E79F8780DA62FB717AEDDCA6C1876993EC325BD0361F5076A6A4F566925D36DE3FF950FA6E97E459CC8DC6FAC373A517BCB258D7BC36937727A35F711D07E02B632
	FD4AAF1B357B14A8BE04473F2B5A27C55F5AC371E1A89E17D1A86E2F8BA09C351155531B9A5F41C6648A263E032F7D1EA39C4C8FE4FCDFDE13937D01384F6781DE78BE533FB8CB2D3FA4CF565F66777C27E1907D1677353E8367F135AF65A2BC0EC810AE005B33E60B5A1E0BBF126DB93D65077869A6F959F3E5295A1EDB7058948269C239BD267DEAFB7E16AF5BB3E37F8F710BAD7132A727C6EDCF919E3392B6359AD2B7B1FB7694296D1935CB36677222416A4BDF7914ECA2FB94093C3D9C417AEB81EF5D4476
	62238AE4FDE7865567AF7F233D7491DF79B840A7707CE6E8721B36E7287A8773A307ED52760F8EBC5E06839E4975AF51744F7DFBE57DA77C76CF43A07A330C5A7A2F531CADA67664C03A82A333A7CE53DF0F6F136D699AF43CD869471EF623769D7ECCE3B2CDEB033809C0A4BF09C63457243DCB15CFA61B22228A2943A21A8F5229076E355C594876F2420DECAFA78A4BCF5F8CEB9520724DEC9F6F4DA666BBE883EC5CE6369FD2FA144918391949F09CC5E99336349A320176ED996EFE50G7A24G35713BFE36
	5FD23B05699C534C30D19C7B982F3BD15B8E59427A45BCF41D1F1DF19C66BB545B68089E7D5DD6AC4B1913B5BCB9F587E4B9FFAD11653C3CF9F8F2E6164AF2F24BE5B987768FCF4E618AD94EFF9F12652CAE9A0A1C82AE673EAAD94E7643321CA7BF9D1E1C6ADAD94E55C7E4B92F8DC90E1C2F50FAD9CECE13AC6761E1567B2123321C2B3E1465BCB5CCB9B30E8982FB6F88E89C4C3F973DC56F9C702F876553FE2F10705DB3A81F16085F500C7BF86AD62DBF31876359DB35E3519B0DECCC480538B1DB593B6A52
	261179C1D30E0E0C2FF258FCA4DF7371B89565155F05980F714AEF6FD1165F241CD603AD0765B700FFFFAEACC7E7BF8130A5B9FA75FBE9334A1F390D7AB369F35FB6DF7E3EA2D579D651F4ED74690467A88DAF79FE5034B434CFE5355B2CF6310C7C0B00DC6629A6393D3A953FE39A4F7DFBF9C6533957717CD1B9CF2FA9FEFFF7745C6B9EF7CEF550EFA260F9B2906AFD72B6FE0628093D0306F26CF13C4F1C359D56AF5B9996046753F288B7F32C855F6537C058433190FE3FFF94479A310EB990DE403157AB30
	8F8442C9BB9876D5A563CD6758A6BC771BA16C594156D257777B5ECB3D8767F194249D3B036D258EB48D672EDE8870A1626B4D9D5A755EEB9E7D3D5495D8F7B8240F64365E5E2CDE9BBE0C4BB1BD3755E04CE5E96CFB54EB4367DBD05BA336BF64773E1C76DDD2EBFBC32E7C1B6832B4296D799E57CD9B2433F0FB12AB5576A4AB6ED4FFDBB91435FB228FFB82F349F8E860766C973C6FD46F7A8A69A33F1B707DEA6A8FE89A0ADF59777D035EB679F76089D9EEE17350FD5E515F48FC07778CEF3E4FB4497A2FB1
	4BF21E2F980A1CBDDC4E3D788E877977425F7A60171059601704C4C9C82BB3F90C581FE2648E9537CBD84D25D6632D4E0853FB0B6267DF959FA7A4D48B4B4856EF35100076EF2B05C43C3DDBAD44CB8E2747A9E87EC0DA0A4A463B7F7C7133B31FBC660E9716D58B6BD133BAAA3A70CE35E8C6DF25237F5CEB25305C09AEB2204E822A5C781168167AEDE22D105E59047E699737A41ACB599E38DB92B270BFB9308BFD4FF3D71549ED11105F6733DAA1410E7EE1DAE1AD0936196CDD3B480678E7585E5852F6EC6A
	AAEAEF9A3697C94967D252EEDB3DEDF34D02A971C2DC25304266B019ABCD9D1243D5ADAC17ACAE51EDF1584C9E6797A5D8D0D29FEAC9788D8C443D47330FB21B0F6EA0F0233BBDFF9C139219D299A7889E17308B27C43DA81F27B017D9CCAED0A53A2AA5D4C18ED78E0F7B597B5276D907B25B6204D81A49EF056F05C40FD39216F51AFA20D661C7B9EE91EE9433DC027FDCA63B9BFD889EACB3EAACE3D1DCC17E6F6EAD386C2FEFFD0595482C12300994A5306E6A929DBD3BCABBBBE176678220DCC17CC6AE9E25
	495724D96B39B423666125A7219D148B71BD8585787F3B717F77207F6F4648EE0C6C5E83059B25EDDB6ABFED3C076599B79E5E2AD17567D7C28DCA0F3DF46FDF9EAF0EDA88392B949271C7662192D265D4C7FAFBCE0A2E0B02AF5B38F2DC44A5280E1C2829F8105C94A2BE16AAC34F4B5013230850C005BFB6240B6A27A5E83CD73BC428413B01A1F8A554ABBF440F00D5B8F5AA7EFF5A304B8DF1E5E05ECC1EDD231CDDB452335BE971672531BB5446F21774F9E9EC3EFE49A61C1746FE2CDF32899CE553B97AAD
	377AB8C15BE4D80BC7A87A5CFC1C2AAFA059EBD5E9D3A90A35CA429AFA3B4A48BE73D68443FB1D55EEE45F20B3225BDFG2EE689497764GC9C74968675A0C74D3EBG27520F2FF1E8C4653F0C4C3F672670ABBD2AE2C6C531CD98E933BE271656F9DB1AF4FEDA5A6CEDE98E10617C3374BF5E16224E9387935BDA6FC5E8692F9F1D9B7CCDF9FA1C9087ABB60BC816E80978BAA3DE7420CD72CFD49D94F5C7344AA693D03BAA4DF9D5921D6A12C822764769584D7206A855BBEFB0BE20BB2F462322E44457E6E1A0
	C82B6F6CB4FA212984C157CE7950C2A10713A1065C2A2A223A3A1D4ADF2978BA2B115FA5C532706DD295340A8DD3783AE811AAFFEB69F3E48B03F3DA93E7641AC02D8735C9749E15F87ED97AB3352509B46DF9E869E86FFE0EF4AFBB7FAC7D0DC755471025F807C6E12991F32F980A25656740D2A38D7F17ECA9DB0620CD8A4379E7699F3D97D8485273301DCE746E7B28EC4F43F6FA2DF75FDFFEFEDAFA13EC290116A972CDA522D52B372386660D9D74F00B515DFB52E86A04353051A51ABAACD6FB173187B8E0
	EE6AC07F4A2D6ADD157F7919B0519FBA1F12F83EAF86EED7F71895B42D3243903B1207E26939685AA5B4BCC3DD39AB2845F16C5BAABB4FAA3F5F32644235BE3F8193D9CC76E1E20A65EF2B10FB1E995817DE78F92B2179F3F6D7C45C0D8E56783AAFFA3447E433C9A6DBF7295D0C6E0E9E6C17C4790E7806BDC83E1B252111A4EE739EE477A9854F7F81D0CB8788F41E21B5GA9GG6C10GGD0CB818294G94G88G88G10FE65ACF41E21B5GA9GG6C10GG8CGGGGGGGGGGGGGGGGG
	E2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGBAA9GGGG
**end of data**/
}

/**
 * Return the MaxDailyOperationLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getControlIntervalLabel() {
	if (ivjControlIntervalLabel == null) {
		try {
			ivjControlIntervalLabel = new javax.swing.JLabel();
			ivjControlIntervalLabel.setName("ControlIntervalLabel");
			ivjControlIntervalLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjControlIntervalLabel.setText("Control Interval:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjControlIntervalLabel;
}


/**
 * Return the FailurePercentLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getFailurePercentLabel() {
	if (ivjFailurePercentLabel == null) {
		try {
			ivjFailurePercentLabel = new javax.swing.JLabel();
			ivjFailurePercentLabel.setName("FailurePercentLabel");
			ivjFailurePercentLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjFailurePercentLabel.setText("Failure Percent:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFailurePercentLabel;
}


/**
 * Return the FailurePercentSpinField property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getFailurePercentSpinField() {
	if (ivjFailurePercentSpinField == null) {
		try {
			ivjFailurePercentSpinField = new com.klg.jclass.field.JCSpinField();
			ivjFailurePercentSpinField.setName("FailurePercentSpinField");
			ivjFailurePercentSpinField.setPreferredSize(new java.awt.Dimension(55, 21));
			ivjFailurePercentSpinField.setMinimumSize(new java.awt.Dimension(55, 21));
			// user code begin {1}
			ivjFailurePercentSpinField.setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(0), new Integer(90), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFailurePercentSpinField;
}


/**
 * Return the JCheckBoxMaxOpDisableFlag property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxMaxOpDisableFlag() {
	if (ivjJCheckBoxMaxOpDisableFlag == null) {
		try {
			ivjJCheckBoxMaxOpDisableFlag = new javax.swing.JCheckBox();
			ivjJCheckBoxMaxOpDisableFlag.setName("JCheckBoxMaxOpDisableFlag");
			ivjJCheckBoxMaxOpDisableFlag.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxMaxOpDisableFlag.setText("Disable sub after reaching max op count");
			ivjJCheckBoxMaxOpDisableFlag.setMargin(new java.awt.Insets(0, 0, 0, 0));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxMaxOpDisableFlag;
}


/**
 * Return the JComboBoxControlInterval property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxControlInterval() {
	if (ivjJComboBoxControlInterval == null) {
		try {
			ivjJComboBoxControlInterval = new javax.swing.JComboBox();
			ivjJComboBoxControlInterval.setName("JComboBoxControlInterval");
			// user code begin {1}

			ivjJComboBoxControlInterval.addItem("(On New Data Only)");
			ivjJComboBoxControlInterval.addItem("1 minute");
			ivjJComboBoxControlInterval.addItem("2 minute");
			ivjJComboBoxControlInterval.addItem("3 minute");
			ivjJComboBoxControlInterval.addItem("4 minute");
			ivjJComboBoxControlInterval.addItem("5 minute");
			ivjJComboBoxControlInterval.addItem("10 minute");
			ivjJComboBoxControlInterval.addItem("15 minute");
			ivjJComboBoxControlInterval.addItem("30 minute");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxControlInterval;
}


/**
 * Return the JComboBoxControlMethod property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxControlMethod() {
	if (ivjJComboBoxControlMethod == null) {
		try {
			ivjJComboBoxControlMethod = new javax.swing.JComboBox();
			ivjJComboBoxControlMethod.setName("JComboBoxControlMethod");
			// user code begin {1}

			ivjJComboBoxControlMethod.addItem( 
				com.cannontech.common.util.StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.capcontrol.CapControlSubstationBus.CNTRL_INDIVIDUAL_FEEDER ) );

			ivjJComboBoxControlMethod.addItem( 
				com.cannontech.common.util.StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.capcontrol.CapControlSubstationBus.CNTRL_SUBSTATION_BUS ) );

			ivjJComboBoxControlMethod.addItem( 
				com.cannontech.common.util.StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.capcontrol.CapControlSubstationBus.CNTRL_BUSOPTIMIZED_FEEDER ) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxControlMethod;
}


/**
 * Return the JComboBoxControlUnits property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxControlUnits() {
	if (ivjJComboBoxControlUnits == null) {
		try {
			ivjJComboBoxControlUnits = new javax.swing.JComboBox();
			ivjJComboBoxControlUnits.setName("JComboBoxControlUnits");
			// user code begin {1}

         ivjJComboBoxControlUnits.addItem( 
               com.cannontech.database.db.capcontrol.CapControlSubstationBus.UNITS_KVAR );
               
         ivjJComboBoxControlUnits.addItem( 
               com.cannontech.database.db.capcontrol.CapControlSubstationBus.UNITS_PF_KVAR );

         ivjJComboBoxControlUnits.addItem( 
               com.cannontech.database.db.capcontrol.CapControlSubstationBus.UNITS_PF_KQ );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxControlUnits;
}


/**
 * Return the JComboBoxMinRespTime property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxMinRespTime() {
	if (ivjJComboBoxMinRespTime == null) {
		try {
			ivjJComboBoxMinRespTime = new javax.swing.JComboBox();
			ivjJComboBoxMinRespTime.setName("JComboBoxMinRespTime");
			// user code begin {1}

			ivjJComboBoxMinRespTime.addItem(com.cannontech.common.util.CtiUtilities.STRING_NONE);
			ivjJComboBoxMinRespTime.addItem("1 minute");
			ivjJComboBoxMinRespTime.addItem("2 minute");
			ivjJComboBoxMinRespTime.addItem("3 minute");
			ivjJComboBoxMinRespTime.addItem("4 minute");
			ivjJComboBoxMinRespTime.addItem("5 minute");
			ivjJComboBoxMinRespTime.addItem("10 minute");
			ivjJComboBoxMinRespTime.addItem("15 minute");
			ivjJComboBoxMinRespTime.addItem("30 minute");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxMinRespTime;
}


/**
 * Return the JLabelControlMethod property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlMethod() {
	if (ivjJLabelControlMethod == null) {
		try {
			ivjJLabelControlMethod = new javax.swing.JLabel();
			ivjJLabelControlMethod.setName("JLabelControlMethod");
			ivjJLabelControlMethod.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelControlMethod.setText("Control Method:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlMethod;
}


/**
 * Return the JLabelControlUnits property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlUnits() {
	if (ivjJLabelControlUnits == null) {
		try {
			ivjJLabelControlUnits = new javax.swing.JLabel();
			ivjJLabelControlUnits.setName("JLabelControlUnits");
			ivjJLabelControlUnits.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelControlUnits.setText("Control Units:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlUnits;
}


/**
 * Return the JLabelFormatTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelFormatTime() {
	if (ivjJLabelFormatTime == null) {
		try {
			ivjJLabelFormatTime = new javax.swing.JLabel();
			ivjJLabelFormatTime.setName("JLabelFormatTime");
			ivjJLabelFormatTime.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJLabelFormatTime.setText("(HH:MM)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelFormatTime;
}


/**
 * Return the JLabelFormatTime2 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelFormatTime2() {
	if (ivjJLabelFormatTime2 == null) {
		try {
			ivjJLabelFormatTime2 = new javax.swing.JLabel();
			ivjJLabelFormatTime2.setName("JLabelFormatTime2");
			ivjJLabelFormatTime2.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJLabelFormatTime2.setText("(HH:MM)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelFormatTime2;
}


/**
 * Return the JLabelLowerBandwidth property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelLowerBandwidth() {
	if (ivjJLabelLowerBandwidth == null) {
		try {
			ivjJLabelLowerBandwidth = new javax.swing.JLabel();
			ivjJLabelLowerBandwidth.setName("JLabelLowerBandwidth");
			ivjJLabelLowerBandwidth.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelLowerBandwidth.setText("Lower Bandwidth:");
			// user code begin {1}
         
         ivjJLabelLowerBandwidth.setText("Lower Bandwidth(-):");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelLowerBandwidth;
}


/**
 * Return the JLabelUpperBandwidth property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelUpperBandwidth() {
	if (ivjJLabelUpperBandwidth == null) {
		try {
			ivjJLabelUpperBandwidth = new javax.swing.JLabel();
			ivjJLabelUpperBandwidth.setName("JLabelUpperBandwidth");
			ivjJLabelUpperBandwidth.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelUpperBandwidth.setText("Upper Bandwidth:");
			// user code begin {1}
         
         ivjJLabelUpperBandwidth.setText("Upper Bandwidth(+):");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelUpperBandwidth;
}


/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsPeakSetPointLabel = new java.awt.GridBagConstraints();
			constraintsPeakSetPointLabel.gridx = 1; constraintsPeakSetPointLabel.gridy = 1;
			constraintsPeakSetPointLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPeakSetPointLabel.insets = new java.awt.Insets(5, 4, 6, 19);
			getJPanel1().add(getPeakSetPointLabel(), constraintsPeakSetPointLabel);

			java.awt.GridBagConstraints constraintsPeakSetPointTextField = new java.awt.GridBagConstraints();
			constraintsPeakSetPointTextField.gridx = 2; constraintsPeakSetPointTextField.gridy = 1;
			constraintsPeakSetPointTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPeakSetPointTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPeakSetPointTextField.weightx = 1.0;
			constraintsPeakSetPointTextField.ipadx = 61;
			constraintsPeakSetPointTextField.insets = new java.awt.Insets(3, 5, 4, 1);
			getJPanel1().add(getPeakSetPointTextField(), constraintsPeakSetPointTextField);

			java.awt.GridBagConstraints constraintsOffPeakSetPointLabel = new java.awt.GridBagConstraints();
			constraintsOffPeakSetPointLabel.gridx = 3; constraintsOffPeakSetPointLabel.gridy = 1;
			constraintsOffPeakSetPointLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsOffPeakSetPointLabel.insets = new java.awt.Insets(5, 5, 6, 0);
			getJPanel1().add(getOffPeakSetPointLabel(), constraintsOffPeakSetPointLabel);

			java.awt.GridBagConstraints constraintsOffPeakSetPointTextField = new java.awt.GridBagConstraints();
			constraintsOffPeakSetPointTextField.gridx = 4; constraintsOffPeakSetPointTextField.gridy = 1;
			constraintsOffPeakSetPointTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsOffPeakSetPointTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsOffPeakSetPointTextField.weightx = 1.0;
			constraintsOffPeakSetPointTextField.ipadx = 61;
			constraintsOffPeakSetPointTextField.insets = new java.awt.Insets(3, 1, 4, 3);
			getJPanel1().add(getOffPeakSetPointTextField(), constraintsOffPeakSetPointTextField);

			java.awt.GridBagConstraints constraintsPeakStartTimeLabel = new java.awt.GridBagConstraints();
			constraintsPeakStartTimeLabel.gridx = 1; constraintsPeakStartTimeLabel.gridy = 3;
			constraintsPeakStartTimeLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPeakStartTimeLabel.insets = new java.awt.Insets(6, 4, 3, 11);
			getJPanel1().add(getPeakStartTimeLabel(), constraintsPeakStartTimeLabel);

			java.awt.GridBagConstraints constraintsPeakStopTimeLabel = new java.awt.GridBagConstraints();
			constraintsPeakStopTimeLabel.gridx = 1; constraintsPeakStopTimeLabel.gridy = 4;
			constraintsPeakStopTimeLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsPeakStopTimeLabel.insets = new java.awt.Insets(4, 4, 2, 12);
			getJPanel1().add(getPeakStopTimeLabel(), constraintsPeakStopTimeLabel);

			java.awt.GridBagConstraints constraintsJLabelFormatTime = new java.awt.GridBagConstraints();
			constraintsJLabelFormatTime.gridx = 3; constraintsJLabelFormatTime.gridy = 3;
			constraintsJLabelFormatTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelFormatTime.ipadx = 12;
			constraintsJLabelFormatTime.ipady = 2;
			constraintsJLabelFormatTime.insets = new java.awt.Insets(7, 1, 5, 71);
			getJPanel1().add(getJLabelFormatTime(), constraintsJLabelFormatTime);

			java.awt.GridBagConstraints constraintsJLabelFormatTime2 = new java.awt.GridBagConstraints();
			constraintsJLabelFormatTime2.gridx = 3; constraintsJLabelFormatTime2.gridy = 4;
			constraintsJLabelFormatTime2.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelFormatTime2.ipadx = 12;
			constraintsJLabelFormatTime2.ipady = 2;
			constraintsJLabelFormatTime2.insets = new java.awt.Insets(5, 1, 4, 71);
			getJPanel1().add(getJLabelFormatTime2(), constraintsJLabelFormatTime2);

			java.awt.GridBagConstraints constraintsJLabelUpperBandwidth = new java.awt.GridBagConstraints();
			constraintsJLabelUpperBandwidth.gridx = 1; constraintsJLabelUpperBandwidth.gridy = 2;
			constraintsJLabelUpperBandwidth.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelUpperBandwidth.insets = new java.awt.Insets(6, 4, 6, 5);
			getJPanel1().add(getJLabelUpperBandwidth(), constraintsJLabelUpperBandwidth);

			java.awt.GridBagConstraints constraintsJTextFieldUpperBandwidth = new java.awt.GridBagConstraints();
			constraintsJTextFieldUpperBandwidth.gridx = 2; constraintsJTextFieldUpperBandwidth.gridy = 2;
			constraintsJTextFieldUpperBandwidth.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldUpperBandwidth.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldUpperBandwidth.weightx = 1.0;
			constraintsJTextFieldUpperBandwidth.ipadx = 61;
			constraintsJTextFieldUpperBandwidth.insets = new java.awt.Insets(4, 5, 4, 1);
			getJPanel1().add(getJTextFieldUpperBandwidth(), constraintsJTextFieldUpperBandwidth);

			java.awt.GridBagConstraints constraintsJTextFieldStartTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldStartTime.gridx = 2; constraintsJTextFieldStartTime.gridy = 3;
			constraintsJTextFieldStartTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldStartTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldStartTime.weightx = 1.0;
			constraintsJTextFieldStartTime.ipadx = 61;
			constraintsJTextFieldStartTime.insets = new java.awt.Insets(5, 5, 3, 1);
			getJPanel1().add(getJTextFieldStartTime(), constraintsJTextFieldStartTime);

			java.awt.GridBagConstraints constraintsJTextFieldStopTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldStopTime.gridx = 2; constraintsJTextFieldStopTime.gridy = 4;
			constraintsJTextFieldStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldStopTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldStopTime.weightx = 1.0;
			constraintsJTextFieldStopTime.ipadx = 61;
			constraintsJTextFieldStopTime.insets = new java.awt.Insets(3, 5, 2, 1);
			getJPanel1().add(getJTextFieldStopTime(), constraintsJTextFieldStopTime);

			java.awt.GridBagConstraints constraintsJTextFieldLowerBandwidth = new java.awt.GridBagConstraints();
			constraintsJTextFieldLowerBandwidth.gridx = 4; constraintsJTextFieldLowerBandwidth.gridy = 2;
			constraintsJTextFieldLowerBandwidth.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldLowerBandwidth.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldLowerBandwidth.weightx = 1.0;
			constraintsJTextFieldLowerBandwidth.ipadx = 61;
			constraintsJTextFieldLowerBandwidth.insets = new java.awt.Insets(4, 1, 4, 3);
			getJPanel1().add(getJTextFieldLowerBandwidth(), constraintsJTextFieldLowerBandwidth);

			java.awt.GridBagConstraints constraintsJLabelLowerBandwidth = new java.awt.GridBagConstraints();
			constraintsJLabelLowerBandwidth.gridx = 3; constraintsJLabelLowerBandwidth.gridy = 2;
			constraintsJLabelLowerBandwidth.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelLowerBandwidth.insets = new java.awt.Insets(6, 5, 6, 9);
			getJPanel1().add(getJLabelLowerBandwidth(), constraintsJLabelLowerBandwidth);

			java.awt.GridBagConstraints constraintsJLabelControlUnits = new java.awt.GridBagConstraints();
			constraintsJLabelControlUnits.gridx = 1; constraintsJLabelControlUnits.gridy = 5;
			constraintsJLabelControlUnits.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelControlUnits.insets = new java.awt.Insets(5, 4, 7, 31);
			getJPanel1().add(getJLabelControlUnits(), constraintsJLabelControlUnits);

			java.awt.GridBagConstraints constraintsJComboBoxControlUnits = new java.awt.GridBagConstraints();
			constraintsJComboBoxControlUnits.gridx = 2; constraintsJComboBoxControlUnits.gridy = 5;
			constraintsJComboBoxControlUnits.gridwidth = 2;
			constraintsJComboBoxControlUnits.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxControlUnits.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxControlUnits.weightx = 1.0;
			constraintsJComboBoxControlUnits.ipadx = 4;
			constraintsJComboBoxControlUnits.insets = new java.awt.Insets(2, 5, 6, 61);
			getJPanel1().add(getJComboBoxControlUnits(), constraintsJComboBoxControlUnits);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}


/**
 * Return the JPanelDailyOp property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelDailyOp() {
	if (ivjJPanelDailyOp == null) {
		try {
			ivjJPanelDailyOp = new javax.swing.JPanel();
			ivjJPanelDailyOp.setName("JPanelDailyOp");
			ivjJPanelDailyOp.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJPanelMaxDaily = new java.awt.GridBagConstraints();
			constraintsJPanelMaxDaily.gridx = 0; constraintsJPanelMaxDaily.gridy = 1;
			constraintsJPanelMaxDaily.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelMaxDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJPanelMaxDaily.weightx = 1.0;
			constraintsJPanelMaxDaily.weighty = 1.0;
			constraintsJPanelMaxDaily.ipadx = 14;
			constraintsJPanelMaxDaily.ipady = -4;
			constraintsJPanelMaxDaily.insets = new java.awt.Insets(1, 18, 3, 3);
			getJPanelDailyOp().add(getJPanelMaxDaily(), constraintsJPanelMaxDaily);

			java.awt.GridBagConstraints constraintsMaxDailyOperationCheckBox = new java.awt.GridBagConstraints();
			constraintsMaxDailyOperationCheckBox.gridx = 0; constraintsMaxDailyOperationCheckBox.gridy = 0;
			constraintsMaxDailyOperationCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMaxDailyOperationCheckBox.insets = new java.awt.Insets(1, 1, 0, 149);
			getJPanelDailyOp().add(getMaxDailyOperationCheckBox(), constraintsMaxDailyOperationCheckBox);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelDailyOp;
}

/**
 * Return the JPanelMaxDaily property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxDaily() {
	if (ivjJPanelMaxDaily == null) {
		try {
			ivjJPanelMaxDaily = new javax.swing.JPanel();
			ivjJPanelMaxDaily.setName("JPanelMaxDaily");
			ivjJPanelMaxDaily.setBorder(new javax.swing.border.EtchedBorder());
			ivjJPanelMaxDaily.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsMaxDailyOperationSpinField = new java.awt.GridBagConstraints();
			constraintsMaxDailyOperationSpinField.gridx = 2; constraintsMaxDailyOperationSpinField.gridy = 1;
			constraintsMaxDailyOperationSpinField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMaxDailyOperationSpinField.insets = new java.awt.Insets(5, 0, 2, 43);
			getJPanelMaxDaily().add(getMaxDailyOperationSpinField(), constraintsMaxDailyOperationSpinField);

			java.awt.GridBagConstraints constraintsMaxDailyOperationLabel = new java.awt.GridBagConstraints();
			constraintsMaxDailyOperationLabel.gridx = 1; constraintsMaxDailyOperationLabel.gridy = 1;
			constraintsMaxDailyOperationLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMaxDailyOperationLabel.ipadx = 17;
			constraintsMaxDailyOperationLabel.insets = new java.awt.Insets(5, 10, 4, 0);
			getJPanelMaxDaily().add(getMaxDailyOperationLabel(), constraintsMaxDailyOperationLabel);

			java.awt.GridBagConstraints constraintsJCheckBoxMaxOpDisableFlag = new java.awt.GridBagConstraints();
			constraintsJCheckBoxMaxOpDisableFlag.gridx = 1; constraintsJCheckBoxMaxOpDisableFlag.gridy = 2;
			constraintsJCheckBoxMaxOpDisableFlag.gridwidth = 2;
			constraintsJCheckBoxMaxOpDisableFlag.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxMaxOpDisableFlag.ipadx = 3;
			constraintsJCheckBoxMaxOpDisableFlag.ipady = 3;
			constraintsJCheckBoxMaxOpDisableFlag.insets = new java.awt.Insets(2, 10, 7, 4);
			getJPanelMaxDaily().add(getJCheckBoxMaxOpDisableFlag(), constraintsJCheckBoxMaxOpDisableFlag);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxDaily;
}


/**
 * Return the JTextFieldLowerBandwidth property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldLowerBandwidth() {
	if (ivjJTextFieldLowerBandwidth == null) {
		try {
			ivjJTextFieldLowerBandwidth = new javax.swing.JTextField();
			ivjJTextFieldLowerBandwidth.setName("JTextFieldLowerBandwidth");
			ivjJTextFieldLowerBandwidth.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjJTextFieldLowerBandwidth.setColumns(6);
			// user code begin {1}
         
         ivjJTextFieldLowerBandwidth.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 99999999.99999) );
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldLowerBandwidth;
}


/**
 * Return the JTextFieldStartTime property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStartTime() {
	if (ivjJTextFieldStartTime == null) {
		try {
			ivjJTextFieldStartTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldStartTime.setName("JTextFieldStartTime");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldStartTime;
}


/**
 * Return the JTextFieldStopTime property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStopTime() {
	if (ivjJTextFieldStopTime == null) {
		try {
			ivjJTextFieldStopTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldStopTime.setName("JTextFieldStopTime");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldStopTime;
}


/**
 * Return the JTextFieldUpperBandwidth property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldUpperBandwidth() {
	if (ivjJTextFieldUpperBandwidth == null) {
		try {
			ivjJTextFieldUpperBandwidth = new javax.swing.JTextField();
			ivjJTextFieldUpperBandwidth.setName("JTextFieldUpperBandwidth");
			ivjJTextFieldUpperBandwidth.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjJTextFieldUpperBandwidth.setColumns(6);
			// user code begin {1}
         
         ivjJTextFieldUpperBandwidth.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 99999999.99999) );
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldUpperBandwidth;
}


/**
 * Return the MaxDailyOperationCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getMaxDailyOperationCheckBox() {
	if (ivjMaxDailyOperationCheckBox == null) {
		try {
			ivjMaxDailyOperationCheckBox = new javax.swing.JCheckBox();
			ivjMaxDailyOperationCheckBox.setName("MaxDailyOperationCheckBox");
			ivjMaxDailyOperationCheckBox.setFont(new java.awt.Font("dialog", 0, 14));
			ivjMaxDailyOperationCheckBox.setText("Max Daily Operation");
			ivjMaxDailyOperationCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMaxDailyOperationCheckBox;
}


/**
 * Return the MaxDailyOperationLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMaxDailyOperationLabel() {
	if (ivjMaxDailyOperationLabel == null) {
		try {
			ivjMaxDailyOperationLabel = new javax.swing.JLabel();
			ivjMaxDailyOperationLabel.setName("MaxDailyOperationLabel");
			ivjMaxDailyOperationLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjMaxDailyOperationLabel.setText("Max Daily Operation:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMaxDailyOperationLabel;
}


/**
 * Return the MaxDailyOperationSpinField property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getMaxDailyOperationSpinField() {
	if (ivjMaxDailyOperationSpinField == null) {
		try {
			ivjMaxDailyOperationSpinField = new com.klg.jclass.field.JCSpinField();
			ivjMaxDailyOperationSpinField.setName("MaxDailyOperationSpinField");
			ivjMaxDailyOperationSpinField.setPreferredSize(new java.awt.Dimension(55, 21));
			ivjMaxDailyOperationSpinField.setMinimumSize(new java.awt.Dimension(55, 21));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMaxDailyOperationSpinField;
}


/**
 * Return the MinConfirmPercentLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMinConfirmPercentLabel() {
	if (ivjMinConfirmPercentLabel == null) {
		try {
			ivjMinConfirmPercentLabel = new javax.swing.JLabel();
			ivjMinConfirmPercentLabel.setName("MinConfirmPercentLabel");
			ivjMinConfirmPercentLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjMinConfirmPercentLabel.setText("Min Confirm Percent:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMinConfirmPercentLabel;
}


/**
 * Return the MinConfirmPercentSpinField property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getMinConfirmPercentSpinField() {
	if (ivjMinConfirmPercentSpinField == null) {
		try {
			ivjMinConfirmPercentSpinField = new com.klg.jclass.field.JCSpinField();
			ivjMinConfirmPercentSpinField.setName("MinConfirmPercentSpinField");
			ivjMinConfirmPercentSpinField.setPreferredSize(new java.awt.Dimension(55, 21));
			ivjMinConfirmPercentSpinField.setMinimumSize(new java.awt.Dimension(55, 21));
			// user code begin {1}
			ivjMinConfirmPercentSpinField.setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(0), new Integer(100), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMinConfirmPercentSpinField;
}


/**
 * This method was created in VisualAge.
 * @return java.awt.Dimension
 */
public Dimension getMinimumSize() {
	return getPreferredSize();
}


/**
 * Return the MinResponseTimeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMinResponseTimeLabel() {
	if (ivjMinResponseTimeLabel == null) {
		try {
			ivjMinResponseTimeLabel = new javax.swing.JLabel();
			ivjMinResponseTimeLabel.setName("MinResponseTimeLabel");
			ivjMinResponseTimeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjMinResponseTimeLabel.setText("Min Response Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMinResponseTimeLabel;
}


/**
 * Return the OffPeakSetPointLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getOffPeakSetPointLabel() {
	if (ivjOffPeakSetPointLabel == null) {
		try {
			ivjOffPeakSetPointLabel = new javax.swing.JLabel();
			ivjOffPeakSetPointLabel.setName("OffPeakSetPointLabel");
			ivjOffPeakSetPointLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjOffPeakSetPointLabel.setText("Off Peak Set Point:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOffPeakSetPointLabel;
}


/**
 * Return the OffPeakSetPointTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getOffPeakSetPointTextField() {
	if (ivjOffPeakSetPointTextField == null) {
		try {
			ivjOffPeakSetPointTextField = new javax.swing.JTextField();
			ivjOffPeakSetPointTextField.setName("OffPeakSetPointTextField");
			ivjOffPeakSetPointTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjOffPeakSetPointTextField.setColumns(6);
			// user code begin {1}
         
         ivjOffPeakSetPointTextField.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument( -999999.999, 999999.999, 3) );
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOffPeakSetPointTextField;
}


/**
 * Return the PeakSetPointLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPeakSetPointLabel() {
	if (ivjPeakSetPointLabel == null) {
		try {
			ivjPeakSetPointLabel = new javax.swing.JLabel();
			ivjPeakSetPointLabel.setName("PeakSetPointLabel");
			ivjPeakSetPointLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPeakSetPointLabel.setText("Peak Set Point:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPeakSetPointLabel;
}


/**
 * Return the PeakSetPointTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getPeakSetPointTextField() {
	if (ivjPeakSetPointTextField == null) {
		try {
			ivjPeakSetPointTextField = new javax.swing.JTextField();
			ivjPeakSetPointTextField.setName("PeakSetPointTextField");
			ivjPeakSetPointTextField.setFont(new java.awt.Font("sansserif", 0, 14));
			ivjPeakSetPointTextField.setColumns(6);
			// user code begin {1}
         
         ivjPeakSetPointTextField.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument( -999999.999, 999999.999, 3) );
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPeakSetPointTextField;
}


/**
 * Return the PeakStartTimeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPeakStartTimeLabel() {
	if (ivjPeakStartTimeLabel == null) {
		try {
			ivjPeakStartTimeLabel = new javax.swing.JLabel();
			ivjPeakStartTimeLabel.setName("PeakStartTimeLabel");
			ivjPeakStartTimeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPeakStartTimeLabel.setText("Peak Start Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPeakStartTimeLabel;
}


/**
 * Return the PeakStopTimeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPeakStopTimeLabel() {
	if (ivjPeakStopTimeLabel == null) {
		try {
			ivjPeakStopTimeLabel = new javax.swing.JLabel();
			ivjPeakStopTimeLabel.setName("PeakStopTimeLabel");
			ivjPeakStopTimeLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjPeakStopTimeLabel.setText("Peak Stop Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPeakStopTimeLabel;
}


/**
 * This method was created in VisualAge.
 * @return java.awt.Dimension
 */
public Dimension getPreferredSize() {
	return new Dimension( 350, 200);
}


/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param val java.lang.Object
 */
public Object getValue(Object val) 
{
	com.cannontech.database.data.capcontrol.CapControlSubBus subBus = ((com.cannontech.database.data.capcontrol.CapControlSubBus) val);

	subBus.getCapControlSubstationBus().setControlInterval( 
			com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue(getJComboBoxControlInterval()) );

	subBus.getCapControlSubstationBus().setMinResponseTime( 
			com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue(getJComboBoxMinRespTime()) );

	
	Object spinFieldVal = getMinConfirmPercentSpinField().getValue();
	subBus.getCapControlSubstationBus().setMinConfirmPercent( new Integer(((Number)spinFieldVal).intValue()) );

	spinFieldVal = getFailurePercentSpinField().getValue();
	subBus.getCapControlSubstationBus().setFailurePercent( new Integer(((Number)spinFieldVal).intValue()) );

	subBus.getCapControlSubstationBus().setControlMethod( 
		com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxControlMethod().getSelectedItem().toString() ) );

	if( getMaxDailyOperationCheckBox().isSelected() )
	{
		spinFieldVal = getMaxDailyOperationSpinField().getValue();
		subBus.getCapControlSubstationBus().setMaxDailyOperation( new Integer(((Number)spinFieldVal).intValue()) );
		subBus.getCapControlSubstationBus().setMaxOperationDisableFlag( 
					getJCheckBoxMaxOpDisableFlag().isSelected() 
					? new Character('Y')
					: new Character('N') );
	}
	else
	{
		subBus.getCapControlSubstationBus().setMaxDailyOperation( new Integer(0) );
		subBus.getCapControlSubstationBus().setMaxOperationDisableFlag( new Character('N') );
	}


	subBus.getCapControlSubstationBus().setPeakSetPoint( 
		stringToDouble(getPeakSetPointTextField().getText()) );
	
	subBus.getCapControlSubstationBus().setOffPeakSetPoint(
		stringToDouble(getOffPeakSetPointTextField().getText()) );

	subBus.getCapControlSubstationBus().setUpperBandwidth(
		stringToDouble(getJTextFieldUpperBandwidth().getText()) );

	subBus.getCapControlSubstationBus().setLowerBandwidth(
		stringToDouble(getJTextFieldLowerBandwidth().getText()) );

		
	subBus.getCapControlSubstationBus().setPeakStartTime( getJTextFieldStartTime().getTimeTotalSeconds() );
	
	subBus.getCapControlSubstationBus().setPeakStopTime( getJTextFieldStopTime().getTimeTotalSeconds() );

	subBus.getCapControlSubstationBus().setControlUnits( getJComboBoxControlUnits().getSelectedItem().toString() );
	
	return val;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	// had to add this manualy. For some reason Visual Age
	// does not allow me to add it in the Visual Composition Editor??
	getMaxDailyOperationSpinField().addValueListener( this );
	getMinConfirmPercentSpinField().addValueListener( this );
	getFailurePercentSpinField().addValueListener( this );

	// user code end
	getMaxDailyOperationCheckBox().addActionListener(this);
	getJComboBoxControlMethod().addActionListener(this);
	getJComboBoxControlInterval().addActionListener(this);
	getJComboBoxMinRespTime().addActionListener(this);
	getPeakSetPointTextField().addCaretListener(this);
	getOffPeakSetPointTextField().addCaretListener(this);
	getJTextFieldUpperBandwidth().addCaretListener(this);
	getJTextFieldLowerBandwidth().addCaretListener(this);
	getJTextFieldStartTime().addCaretListener(this);
	getJTextFieldStopTime().addCaretListener(this);
	getJComboBoxControlUnits().addActionListener(this);
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DeviceNameAddressPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(393, 357);

		java.awt.GridBagConstraints constraintsControlIntervalLabel = new java.awt.GridBagConstraints();
		constraintsControlIntervalLabel.gridx = 1; constraintsControlIntervalLabel.gridy = 2;
		constraintsControlIntervalLabel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsControlIntervalLabel.insets = new java.awt.Insets(3, 4, 3, 37);
		add(getControlIntervalLabel(), constraintsControlIntervalLabel);

		java.awt.GridBagConstraints constraintsMinResponseTimeLabel = new java.awt.GridBagConstraints();
		constraintsMinResponseTimeLabel.gridx = 1; constraintsMinResponseTimeLabel.gridy = 3;
		constraintsMinResponseTimeLabel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsMinResponseTimeLabel.insets = new java.awt.Insets(3, 4, 3, 8);
		add(getMinResponseTimeLabel(), constraintsMinResponseTimeLabel);

		java.awt.GridBagConstraints constraintsJLabelControlMethod = new java.awt.GridBagConstraints();
		constraintsJLabelControlMethod.gridx = 1; constraintsJLabelControlMethod.gridy = 1;
		constraintsJLabelControlMethod.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelControlMethod.insets = new java.awt.Insets(7, 4, 3, 36);
		add(getJLabelControlMethod(), constraintsJLabelControlMethod);

		java.awt.GridBagConstraints constraintsJComboBoxControlMethod = new java.awt.GridBagConstraints();
		constraintsJComboBoxControlMethod.gridx = 2; constraintsJComboBoxControlMethod.gridy = 1;
		constraintsJComboBoxControlMethod.gridwidth = 2;
		constraintsJComboBoxControlMethod.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxControlMethod.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJComboBoxControlMethod.weightx = 1.0;
		constraintsJComboBoxControlMethod.ipadx = 35;
		constraintsJComboBoxControlMethod.insets = new java.awt.Insets(5, 6, 1, 12);
		add(getJComboBoxControlMethod(), constraintsJComboBoxControlMethod);

		java.awt.GridBagConstraints constraintsJPanelDailyOp = new java.awt.GridBagConstraints();
		constraintsJPanelDailyOp.gridx = 1; constraintsJPanelDailyOp.gridy = 5;
		constraintsJPanelDailyOp.gridwidth = 3;
		constraintsJPanelDailyOp.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelDailyOp.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelDailyOp.weightx = 1.0;
		constraintsJPanelDailyOp.weighty = 1.0;
		constraintsJPanelDailyOp.insets = new java.awt.Insets(3, 4, 1, 18);
		add(getJPanelDailyOp(), constraintsJPanelDailyOp);

		java.awt.GridBagConstraints constraintsJComboBoxControlInterval = new java.awt.GridBagConstraints();
		constraintsJComboBoxControlInterval.gridx = 2; constraintsJComboBoxControlInterval.gridy = 2;
		constraintsJComboBoxControlInterval.gridwidth = 2;
		constraintsJComboBoxControlInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxControlInterval.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJComboBoxControlInterval.weightx = 1.0;
		constraintsJComboBoxControlInterval.ipadx = 35;
		constraintsJComboBoxControlInterval.insets = new java.awt.Insets(1, 6, 1, 12);
		add(getJComboBoxControlInterval(), constraintsJComboBoxControlInterval);

		java.awt.GridBagConstraints constraintsJComboBoxMinRespTime = new java.awt.GridBagConstraints();
		constraintsJComboBoxMinRespTime.gridx = 2; constraintsJComboBoxMinRespTime.gridy = 3;
		constraintsJComboBoxMinRespTime.gridwidth = 2;
		constraintsJComboBoxMinRespTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxMinRespTime.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJComboBoxMinRespTime.weightx = 1.0;
		constraintsJComboBoxMinRespTime.ipadx = 35;
		constraintsJComboBoxMinRespTime.insets = new java.awt.Insets(1, 6, 1, 12);
		add(getJComboBoxMinRespTime(), constraintsJComboBoxMinRespTime);

		java.awt.GridBagConstraints constraintsJPanel1 = new java.awt.GridBagConstraints();
		constraintsJPanel1.gridx = 1; constraintsJPanel1.gridy = 6;
		constraintsJPanel1.gridwidth = 4;
		constraintsJPanel1.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanel1.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanel1.weightx = 1.0;
		constraintsJPanel1.weighty = 1.0;
		constraintsJPanel1.insets = new java.awt.Insets(1, 4, 16, 4);
		add(getJPanel1(), constraintsJPanel1);

		java.awt.GridBagConstraints constraintsMinConfirmPercentLabel = new java.awt.GridBagConstraints();
		constraintsMinConfirmPercentLabel.gridx = 1; constraintsMinConfirmPercentLabel.gridy = 4;
		constraintsMinConfirmPercentLabel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsMinConfirmPercentLabel.insets = new java.awt.Insets(2, 4, 3, 5);
		add(getMinConfirmPercentLabel(), constraintsMinConfirmPercentLabel);

		java.awt.GridBagConstraints constraintsMinConfirmPercentSpinField = new java.awt.GridBagConstraints();
		constraintsMinConfirmPercentSpinField.gridx = 2; constraintsMinConfirmPercentSpinField.gridy = 4;
		constraintsMinConfirmPercentSpinField.anchor = java.awt.GridBagConstraints.WEST;
		constraintsMinConfirmPercentSpinField.insets = new java.awt.Insets(1, 6, 2, 7);
		add(getMinConfirmPercentSpinField(), constraintsMinConfirmPercentSpinField);

		java.awt.GridBagConstraints constraintsFailurePercentLabel = new java.awt.GridBagConstraints();
		constraintsFailurePercentLabel.gridx = 3; constraintsFailurePercentLabel.gridy = 4;
		constraintsFailurePercentLabel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsFailurePercentLabel.insets = new java.awt.Insets(2, 8, 3, 2);
		add(getFailurePercentLabel(), constraintsFailurePercentLabel);

		java.awt.GridBagConstraints constraintsFailurePercentSpinField = new java.awt.GridBagConstraints();
		constraintsFailurePercentSpinField.gridx = 4; constraintsFailurePercentSpinField.gridy = 4;
		constraintsFailurePercentSpinField.anchor = java.awt.GridBagConstraints.WEST;
		constraintsFailurePercentSpinField.insets = new java.awt.Insets(1, 2, 2, 16);
		add(getFailurePercentSpinField(), constraintsFailurePercentSpinField);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	getMaxDailyOperationCheckBox().setSelected(false);
	getMaxDailyOperationLabel().setEnabled(false);
	getJCheckBoxMaxOpDisableFlag().setEnabled(false);
	
	// user code end
}

/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
   if( getJTextFieldStartTime().getTimeTotalSeconds().intValue() >
       getJTextFieldStopTime().getTimeTotalSeconds().intValue() )
   {     
      setErrorString("The peak start time must be before the peak stop time");
      return false;
   }

	return true;
}


/**
 * Comment
 */
public void jComboBoxControlMethod_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	return;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		CCSubstationBusMiscSettingsPanel aCCSubstationBusMiscSettingsPanel;
		aCCSubstationBusMiscSettingsPanel = new CCSubstationBusMiscSettingsPanel();
		frame.setContentPane(aCCSubstationBusMiscSettingsPanel);
		frame.setSize(aCCSubstationBusMiscSettingsPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}


/**
 * Comment
 */
public void maxDailyOperationCheckBox_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	this.fireInputUpdate();
	
	if( getMaxDailyOperationCheckBox().isSelected() )
	{
		getMaxDailyOperationSpinField().setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(1), new Integer(999), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(1)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
		getMaxDailyOperationLabel().setEnabled(true);
		getMaxDailyOperationSpinField().setEnabled(true);
		getJCheckBoxMaxOpDisableFlag().setEnabled(true);
	}
	else
	{
		getJCheckBoxMaxOpDisableFlag().setEnabled(false);
		getMaxDailyOperationLabel().setEnabled(false);
		getMaxDailyOperationSpinField().setEnabled(false);
		getMaxDailyOperationSpinField().setDataProperties(new com.klg.jclass.field.DataProperties(new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(0), new Integer(0), null, true, null, new Integer(1), "#,##0.###;-#,##0.###", false, false, false, null, new Integer(0)), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
	}		

	return;
}


/**
 * This method was created in VisualAge.
 * @param val java.lang.Object
 */
public void setValue(Object val ) 
{
	com.cannontech.database.data.capcontrol.CapControlSubBus subBus = ((com.cannontech.database.data.capcontrol.CapControlSubBus) val);


	if( subBus.getCapControlSubstationBus().getControlInterval().intValue() == 0 )
		getJComboBoxControlInterval().setSelectedIndex(0);
	else
		com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
				getJComboBoxControlInterval(),
				subBus.getCapControlSubstationBus().getControlInterval().intValue() );

	if( subBus.getCapControlSubstationBus().getMinResponseTime().intValue() == 0 )
		getJComboBoxMinRespTime().setSelectedIndex(0);
	else
		com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
				getJComboBoxMinRespTime(),
				subBus.getCapControlSubstationBus().getMinResponseTime().intValue() );

	
	getMinConfirmPercentSpinField().setValue( subBus.getCapControlSubstationBus().getMinConfirmPercent() );

	getFailurePercentSpinField().setValue(	subBus.getCapControlSubstationBus().getFailurePercent() );

	getJComboBoxControlMethod().setSelectedItem( 
		com.cannontech.common.util.StringUtils.addCharBetweenWords( ' ', subBus.getCapControlSubstationBus().getControlMethod() ) );


	Integer maxDailyOperation = subBus.getCapControlSubstationBus().getMaxDailyOperation();
	if( maxDailyOperation != null
		 && maxDailyOperation.intValue() > 0 )
	{
		getMaxDailyOperationCheckBox().doClick();
		getMaxDailyOperationSpinField().setValue(maxDailyOperation);

		getJCheckBoxMaxOpDisableFlag().setSelected(
				subBus.getCapControlSubstationBus().getMaxOperationDisableFlag().charValue() == 'Y'
				|| subBus.getCapControlSubstationBus().getMaxOperationDisableFlag().charValue() == 'y' );
	}




	getJTextFieldUpperBandwidth().setText( 
			subBus.getCapControlSubstationBus().getUpperBandwidth().toString() );
	
	getJTextFieldLowerBandwidth().setText( 
			subBus.getCapControlSubstationBus().getLowerBandwidth().toString() );
	
	getPeakSetPointTextField().setText(
			subBus.getCapControlSubstationBus().getPeakSetPoint().toString() );
	
	getOffPeakSetPointTextField().setText(
			subBus.getCapControlSubstationBus().getOffPeakSetPoint().toString() );
	
	getJTextFieldStartTime().setTimeText( 
			subBus.getCapControlSubstationBus().getPeakStartTime() );
	
	getJTextFieldStopTime().setTimeText(
			subBus.getCapControlSubstationBus().getPeakStopTime() );


	
	return;
}


/**
 * Insert the method's description here.
 * Creation date: (7/5/2002 10:37:18 AM)
 * @return java.lang.Double
 * @param text java.lang.String
 */
private Double stringToDouble( final String text )
{

	try
	{
		if( text != null 
			 && text.length() >= 1 )
		{
			return new Double(text);
		}

	}
	catch( Exception n )
	{}
	
	return new Double(0.0);
}


/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	// if its a spinner, do something
	if( arg1.getSource() == getMaxDailyOperationSpinField() ||
		 arg1.getSource() == getMinConfirmPercentSpinField() ||
		 arg1.getSource() == getFailurePercentSpinField() )
	{
		this.fireInputUpdate();
	}
}


/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	
}
}
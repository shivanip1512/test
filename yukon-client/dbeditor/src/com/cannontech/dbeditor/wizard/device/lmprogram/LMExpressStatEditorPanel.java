package com.cannontech.dbeditor.wizard.device.lmprogram;

/**
 * This type was created in VisualAge.
 */
import com.cannontech.common.gui.util.LineLabel;
import com.cannontech.dbeditor.wizard.device.lmgroup.ExpressComCellRenderer;
import com.cannontech.dbeditor.wizard.device.lmgroup.LMGroupExpressComEditorPanel;

public class LMExpressStatEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, java.awt.event.MouseListener {
	private javax.swing.JButton ivjJButtonDeltasAbsolute = null;
	private javax.swing.JButton ivjJButtonFahrenheitCelsius = null;
	private javax.swing.JCheckBox ivjJCheckBoxCoolMode = null;
	private javax.swing.JCheckBox ivjJCheckBoxDeltaB = null;
	private javax.swing.JCheckBox ivjJCheckBoxDeltaD = null;
	private javax.swing.JCheckBox ivjJCheckBoxDeltaF = null;
	private javax.swing.JCheckBox ivjJCheckBoxHeatMode = null;
	private javax.swing.JCheckBox ivjJCheckBoxMax = null;
	private javax.swing.JPanel ivjJPanelData = null;
	private javax.swing.JTable ivjJTableCurve = null;
	private javax.swing.JTextField ivjJTextFieldDeltaD = null;
	private javax.swing.JTextField ivjJTextFieldDeltaF = null;
	private javax.swing.JTextField ivjJTextFieldMax = null;
	private javax.swing.JTextField ivjJTextFieldRand = null;
	private javax.swing.JPanel ivjJPanelDataChanges = null;
	private javax.swing.JScrollPane ivjJScrollPaneJTable = null;
	private javax.swing.JCheckBox ivjJCheckBoxTa = null;
	private javax.swing.JCheckBox ivjJCheckBoxTb = null;
	private javax.swing.JCheckBox ivjJCheckBoxTc = null;
	private javax.swing.JCheckBox ivjJCheckBoxTd = null;
	private javax.swing.JCheckBox ivjJCheckBoxTe = null;
	private javax.swing.JCheckBox ivjJCheckBoxTf = null;
	private javax.swing.JPanel ivjJPanelTable = null;
	private javax.swing.JTextField ivjJTextFieldTa = null;
	private javax.swing.JTextField ivjJTextFieldTb = null;
	private javax.swing.JTextField ivjJTextFieldTc = null;
	private javax.swing.JTextField ivjJTextFieldTd = null;
	private javax.swing.JTextField ivjJTextFieldTe = null;
	private javax.swing.JTextField ivjJTextFieldTf = null;
	private javax.swing.JCheckBox ivjJCheckBoxMin = null;
	private javax.swing.JCheckBox ivjJCheckBoxRand = null;
	private javax.swing.JTextField ivjJTextFieldMin = null;
	private javax.swing.JTextField ivjJTextFieldDeltaB = null;
	public boolean isAbsolute = false;
	public boolean isCelsius = false;

class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.MouseListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == LMExpressStatEditorPanel.this.getJButtonFahrenheitCelsius()) 
				connEtoC2(e);
			if (e.getSource() == LMExpressStatEditorPanel.this.getJButtonDeltasAbsolute()) 
				connEtoC3(e);
		};
		public void mouseClicked(java.awt.event.MouseEvent e) {
			if (e.getSource() == LMExpressStatEditorPanel.this.getJTableCurve()) 
				connEtoC4(e);
		};
		public void mouseEntered(java.awt.event.MouseEvent e) {};
		public void mouseExited(java.awt.event.MouseEvent e) {};
		public void mousePressed(java.awt.event.MouseEvent e) {};
		public void mouseReleased(java.awt.event.MouseEvent e) {};
	};
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public LMExpressStatEditorPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJButtonFahrenheitCelsius()) 
		connEtoC2(e);
	if (e.getSource() == getJButtonDeltasAbsolute()) 
		connEtoC3(e);
		
	// user code begin {2}

	//takes care of the actions of the statEditorPanel for ThermostatGears
	if (e.getSource() == getJCheckBoxCoolMode() || e.getSource() == getJCheckBoxDeltaB() 
		|| e.getSource() == getJCheckBoxDeltaD() || e.getSource() == getJCheckBoxDeltaF() 
		|| e.getSource() == getJCheckBoxHeatMode() || e.getSource() == getJCheckBoxMax() 
		|| e.getSource() == getJCheckBoxMin() || e.getSource() == getJCheckBoxRand() 
		|| e.getSource() == getJCheckBoxTa() || e.getSource() == getJCheckBoxTb() 
		|| e.getSource() == getJCheckBoxTc() || e.getSource() == getJCheckBoxTd() 
		|| e.getSource() == getJCheckBoxTe() || e.getSource() == getJCheckBoxTf())
		fireInputUpdate();
	// user code end
}
/**
 * connEtoC2:  (JButtonFahrenheitCelsius.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jButtonFahrenheitCelsius_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonFahrenheitCelsius_ActionPerformed(arg1);
		// user code begin {2}
		fireInputUpdate();
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JButtonDeltasAbsolute.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jButtonDeltasAbsolute_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonDeltasAbsolute_ActionPerformed(arg1);
		// user code begin {2}
		fireInputUpdate();
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JTableCurve.mouse.mouseClicked(java.awt.event.MouseEvent) --> LMGroupExpressComEditorPanel.jTableCurve_MouseClicked(Ljava.awt.event.MouseEvent;)V)
 * @param arg1 java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.MouseEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jTableCurve_MouseClicked(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		fireInputUpdate();
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G54F501AFGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8FDCD44735BFE9ECC2D25B5A167451975AD2C3925A18163634B1093FBE7AABE9CCE2D35B105626B6B5ADEDED1FC94DFB36356FE71A4BAE682A8898D1B122E2C4DD7E48BFA1A22272E7C5B07C0B20C185E5E1AF303A6CEEF6AF32A0465F1919FB665E3D5C85097177B3FEBC5EBB5FB3F34E1919F3E74E4C1D3B8A69BB4213928C69021010A448FF8EA48842324F89423CC352A944A257479985551F1D
	C06B051FE7A642F5B670E2E746995304275CA6C84F0374523B630C1B61FE03702CBBE384EE8268D96A9304762A3EFBA6566398C5BD2BE8BA78E8B2DCD3006683368C286A8D22BF7CE8060CE7C0BAC53EA714E09004348DA4CFC4DE068A1FA6670B076BF2A2A31D64F97CE8264C6F00B2EE20F9C00BB6303C4B613A1ADA77490AF2B9DF6767A205E5CFEFB52CA33AD47211BA52D959B1791AA55CC79B42A804385E05EBE56B257EA33D2E4102DE2B5369F2CAE26FC0012DC73459A51727E058BEEA75588AEC62E5FB
	2FD860986C7738065C95950DCD47494DB11F5BA3FA3DED12D5BAC67337DA1D2283E4AE21F5F9BA4FC47588C2B424FD9B89D613CF5A2F886E6B013AB7E2FDFE362ED236B764D22430683E14007519331155E351C625BEB39A9EB64E58C46447537EA16532A05D81446A7A64D073D46B6A76387ABD56C1D25BC095E5754C2F42FA46ED42FA7EF9AF31A3F9F31CB19B28F2B362D1E60237C35A81B4EDB3567F70DE2CFF4715C70465BDC78C29816A9F361955BBF633D27FC52FDEB0EC217E397C8A71B1A18374821583
	F5820D810581ED254F45F7C7F361DA5DA3553A8687DD4EEA373B46E173B439EC22836EABAA00A3E3A745DE1747A6884C77FF1A172FE38FD2F4063F5F93E2F5FBCFC0DF1DF5721B02A4159A12F46A967D7CB643DCD946428C25EED9DBC83BBDC67DE68560249C718D06BFC5F15B9685E7FED0CFF1128E865E32AD584E9DA9E8CBE362CCA12D384A30CA4716507FDDE668FE135960FBD3310535714F2F12B60EGBC86E88150D220342DF146222D58462F0D6E1F2C0D9B407FBCCE2B23ED2847ED75C8B5C3F607CD74
	48ED7D17239335359E31F24B27DC0E35CB64FEF59FAD7C6ED15DF6D99819EDE85C4A5A4336D5E997263B38AA106EE9DB477BC68A6F43AE7ACC04EEE5FDE864F8BF45A3D5B86B5B3F52E70B24E783AFB3B34E4872E76790BCA81365DF456594D1BCD405B3B95F2772C9BA8AF8695B620C2CFF5D5748986C03F48850AC20D820F8A0E1BB645B0EFDDCFF2570BA1F23D6D57F323289E31B60AA7AA40F354169152C4EDE713455E33776B8C42FA067D9B3C6EC6B71AB17BAC6FC2F97F49C971D2247AA59DDCE10EE9D94
	41193CACCF4658FA1247A3D2EE3BFDD0848503EE8165E60DED002B436A15CE39EDD6C9D4F2B03EF90C7844E56BE9108882C8DFEFA76D75C7BA1E1742FD6BF6EC2BAF8B840B04F48CEF177B465E006BBB605C22232242E26FA5E6D8BDA36823B179248EF110BFEC870CCFD9502EBB21BC5058DB781C3E52017EE8D97730107F7C91DDFFA414390B79D669AE2DBF7E146A6984FC8CA88CE88E50C220953BF0BEEF4E6F16ED8974FC903B74F034DD0D917B3579C85D18AEBB55E51C60D9DC9BGCF127DD40D2D8B70AC
	33FED9EBA03E1D198DF3GD0C7B6764D0BE3D94CE7EB2CDE913D3445838EA65A141EE2F9FFFD154CC162E551A9D9C4376834410DD776115FDDDD2D78EF1F0B7B56E20A13712C969C4C4B71D72E2EE7B848D0BF8D487FBB65DBA549E36F991244B6D1126C4EFE257C3F28ADDE3F2152AB57F51D1154558DF58C868A65F53D73038DAABFECF439AE8D395B4993A67BF3BD1D37E7C17E58EC6C23DEB30977967374A0CDAB7C3F6D6D18207FC839290C3D7AE3F80AF9A29D93794F756B484D41B194FD0B61EFD3BCEDB7
	788DD077EE2C779CEE133A4C0D58B15E2667EF2A8E66932357827B74ED5774FD7A4EEB7ABE7D69EB937B6CBD5774FC1671422E117A39061D2AE760EB574838596BF2BAC57AA072A2820BE1DFE9A77530BB6D52FBF6DB3FA83559C7C5183BF693DFFE0D0E4D41F09F369B475061DDB806E60FFEDD083930C5B76E8A3D3F5C30ECB773DB539EE58CE5B64D9408BF088EF1909A2A56B56414989EC947FD99779AA97615379FA5E54DA7EA06A449652C338E4053BEA05A25DA5161358FF9732D34DA856C52AAFA7ADC1E
	C151E63EE83DECAD308ECB8534DB8A2AA97B98394F495A376FC856042B0D7C0B8134DD285628E98C2C67D04E691CE2596FB6886D066F2A6BE1919D1255DB5D63F5B92017EFEAA57CD5CD3586A5327DC55DDFE47653412EF648F3D94C9FF48DF945827AEF2D435EFBE93C45CD04F77D86AB32AFB42925EAEDD444929377E39B071C0E3EC93EF2335D04597F147B1BB743C7EE2EFB48EDEFAA7E5CC7629F9F39EB4873F9D5A299F34CB096D582356F4179BC1B2E3FF0BE170316DA17434106CB604D5EC3464224FD69
	2A714D31076D5324F0FE71A47C2EC978F7CD427F5EA47C178272D9BD579B52483CA13EBFA4423200B466BB6288467606B7B43C53D6471032E648B2109852210AF5983E4128BF0EEFB112786692173F4D38D2A031BF1349661DA8AB1169765887A1B4A4411B3C1FF521CA3D1FA56C0DB3123D2FAA383683B1DF1BDFCB56D27EE389AC17D47ED2EEA6326CB9386F6500325300A2E4F971FBD95B30FC7BF2B15FB4C8071915FCF34C6AFCAF71FC49B9F146EC207A9C16EFDA8E4BB7B70764CB4F473D1BC20E65D16C2F
	90FCFCB9915747CDE96A7DB61B37D8F7AE257AF265B9B4D73BEFB014C464D6815E1A0BBE7DEFC6F50CDA6D753AFA6DF459A677DBDD22FA1EE558BB09EB605AE777F8258688E0FC58776FA692DB493ACE06657EFBA86F30B0FE1D4A3AG17G354374C1ECF7554252329E5C271607A1276D6230006DF035CE3DCFB7A7F58F75B73DF63049751F26EA0708D7AF9818CDDF2AA04F3B5EFEDCAFB53220FF48DEB0A459498252AAC1BC669E1258269B5BF3FB0A466EC4D6ECAE6E2DFD29166E91C1BABDAF4E188F445679
	1F27B1AD49EB81EC8CC89EA7C6544FE1B4608B0104FC745DFF12A1D3187AD80E6D7EFE4BF138FEC4930F5C7EB3B7D449764E7B66CC21725AAA5DFD426054750674FC566E1579CA7B073C56E40884E26DF2BA975BA598724464E33B3C112757AE4B73F1AF55FC5A22546B0666A4E6471ABC34A3F9DF1C51824446174FF7294717B1404301E201966C43BEFABFEF9FDC27B4FB7167624F6B5FA67578D053955F5BACD10F8BB10BF6879C97166EE37D10D8209D974E2CA23E1C85F8E9810E8B7392572B46051370A4DA
	1D7DB01A73F5CC12110D5BF27A0324A49C37851CC73FE8A27DD88FB2EDC0E3C0A1C051DCC7524AC977A80F79A65823FCF65CFEDFDC01327EDDDCB0FEAD4C766356D968F3DA205D6F5BCC7164C26DFE5FD7EBF12D1A893C20C2DC130666E87547977A6B940A7C532C5C83634AED572433B565183F2436ED41B10B38062F40BB8C6B3D0A8AB9869470BDCF33C56D3715C5ECFF219B2E92909B3FAAC7CC32BD530BF0AFED49EAB2E745C2FA9150F22074E2D807833583790A315F5AD76A0D677E7D96E8B0D776DDD8DB
	F466FE38B63CB82E1C368DC30B7D4B31FAB750F5AA593B0AAA46FECC9B77DE617AEC58BE2E1C560674923DFE3CC85F116874A39D89D89FD6652A7BB09F64F4G0D814DA841BEFC3A0B54E5A3D0E489FF3FF3187A70FE08B900AA77E35F662FA5F95BA1ED5B0F7D786D156BD44FF82B4B6E147873FDFE950943DC9EFB3F5D09D8AF45FADD9E3AE940302F18826FE75CEF525F4FF848243F1F71ED5344FBF40F1A826DF7307D34BF50B9D9027A8513FAD24CD4C37758A09D3B9F7BFB03056E317174B61AA6F38CCB5F
	DF5BA173356347C7C1CC478F280E9B5DCB8BC45B286C27B625527674FAC5AFFDA0C9A4A3737EA4ED94F476FA1A2D0322006B341F662C16739C13DC35A55CFF7FBBA7007F52G0979669D969CDF04D2744D0A82621B6510EE859AA845762E9E51BEC7C1408BA9E56D9FD9BA3E9F64BD5B5501FD6F35557A3EE7DCC3FC5E6B9A72740ADA7FDA33A6037314912BC19287C933486B98DADE32FA7A45F17E79A6AD4FF8014A6FDA934807D91BFFA1D75D667B393FB467E977E467C03B4C175BA6DE270D88AD5741134B62
	0CD9E57EB853FDBCCF2D3B1477F77F31ED7A7D5D566B0155AF69F581671E47D234F38FF92ECAC1DFFD990EDB3EDC629BA4EE6FAEC35F78CDA7FDC78669A82039E5689BBF6DA275DE2432F7995C1B5E7637BF9352C5AA4C82779DF25AA1DF03609A22A9A73F37BBC25F733D4D667D840E6F23F8348A175F5B9D46F77CB1404BBE0063E971DA027938BF14517488EF5F95D5E47CF4D8C7DCC3B050AEBCC0E4ED28D637D7B0E0D1C03187181D2C7D3FBDCC5A2A4FE39D04E6EFF30B3D426CF2D2F6C78D164D06F4B9D0
	87108FA8349C6353CF6DA7EBB576E45247DF7627CFD9544F1CF090667A03CA5B188F860A1D3EC31F614A035A7760BF24F877C16DFB702A82FC8FBE8DF8CB8F62385CC1630F4E0AB8233B8231B00ACD03F4884792C6F17C8E6718BB8F4BAE65582394CBBC8475B80458F63A0E4E02F4B947FEC1FD2F9152839CF3B6210EB10E7D65DDFA1E8752710750EF7FAB05E06499D9FE887DF6ABDD5B95D502FF83F5D7225FDE6571098F3069C06115CA1BC6437D5CCABDDFFC370B48DBD8290DCD4FD1FCC925B6B67DFDA746
	26AB087E43E87F2BB4B6080574A20E551DA758B2C8E79CC1AC04E2791036F06C8F946B00341BE36F5339F59A24A3B876830A4D06F49C476CD46FE2C88BC791FB1CE26910AE62D8D1A5363905E36F9EA658G24030FE2BB669EA16E496E772B6E679C1E689D55C7B3C7BFFFD3F530E73B381B445CFCECA54B3D0A0A639E3B2D465A5FC8C78A66FB872BC95B103E8FBB0A3E57DFCD7ABE8E52CB00922B703D0BEF8F6E114CFAE0265098F4D477AC532276BD064CAA6603D5D54A1AF0592B978CCC67FDB528F38C7851
	D5847BD90DFAEDCE7CEEAD7CD3C0FC1A720D35EABE196B48FAD761177971093D4F98547CFEBFFE122ABC2B5BB33B31EEAB1E09929C5F5B97701C568A2CD3B53BF67F72CD2171074D8666EBB3E9FC5281BCC7B57A5F8B4D841B8169880E3D5602FEBA379AFDF2F68199F7B3EAE0DC816AG9A838A870A2941BCCF52BC8BA03D3C066D9312BD450CDA964733BCF5855D9A1B098C3C4F10652A7965B5579713F64836A83EEC9D27CB7D2E5FA8372F56BF2F77D9D9271233C138130E4503CE919607765E46DA520E3751
	317D99626B35B8B7FDF704445D9284E9B3EA495947CF122DE5E1994D1FB1EA19C027D156EB14A98E4A905AA87B42E238FF9D7E10FB267FAB5426BF917D963EB71C672FBF12EC054AF5A84BA76DB3E87559870786690BCEA627094EA90DA023034BF9B917545F6D917BC40FC734315722F27E15D46FB448BB8308556D13CD13558DA9C927EEF3ACCA5D187E041354D63BD3E36B1613C477DC489FE7C11F7BC70A5F3CFF8C66CBA073B1F92F6ED820F97FCFF41EEBBD46661F2D9CFF0D62B3D4B81B17F6D21C246783
	EFD69D1FEF687C9BFC9C306308AD21D88C2497F32CAE8F6769959C8BB5623318D60F58D74E62BC5DDD0FF5FC2F0B76ABCFDBE91A6C4133741FBBEFF4DCA732A71EBB8CDDB72AE32235217C9E6DBC39378EC92E1322973A1D6C40205F6DBC0F314A74FA74532E73644CD72F4BB1B468EC936537D6558E07EBD834E1B95FF99C73E3F939074E1398526A3077BB49DB00B31877C7B46F8248370467DDF11E686C07892C5665F0F978F310FE01644DE800F839817386D711874EBB609A2EF7F96C23AE27E4F5B45A1D22
	D7AEB3338AED2967E51E2F8A7C2C3DC273F7C25E811EBF284B4F768E4C9BCAE31290489749737E3C0B3C773213E3113D224351663676C2404D727FA74D3FG72468331787BF8A5465F49A7E0CD85D485548D94F482E58E9CA6F574380647B5B8137B0943D8477093681FC72A27FA0612BD0B3F2671C074896DBAA61E62B1A7346B1841EADC474C83DE51BB38D77429F4D22F90C8C7814D85DA84A4B44699B39BF12D73585AA2E112BD40F6173B9196678E55D68E2BDFE44D07BBA37A43D5B877C7BF768DE1769DAF
	A784FA77D354481E4FD6793A7C79B7A94E6A37FD9329DF90704200E20096GAD81CAEC427A991273D97D48EB2AEAC932768E50B7E0D8B972D2CA0149220C7577239632466BF1F96846GDB63BD57484F66037CA220812031A636B6E665DEED9E3FB6B435E85706A1D0A6320955094DA5692D57BB17900A0132F1CDECAEA16945CD0ACFB0BB1E9BA5B15B095A813177D20D4BD7AFDAA5B62C487C33E77D7835AE17430F7F7CD6A2DB77D402B2EE6D4CD0720CFBAF457298D7D1BDFC5DDABBE0F5760B4ABE493339EB
	B91F3DE7E66F0EDEABD0470F4B64B64EEC46F7CB3FBF2A47AFEA46F7BEB1E77476AFAC406FE8463E8A9DA1573D62DE59AF4307556FE04A576485FC8763EE165FC94A57F9262D320C1F1ED34BC87B770D0604GB26648E567B6ABB17B8EEA17C04FC4619F9653FC069E47E7BADECA4667A773217B844BAFDFCE5895C0478AD9F6E30B22E3F66343F27D3F17C76B6F5DAB6BC8FAD3607D72CCAE5983F70A43D97C6D15458E0F88B948EBBED8161FD5D21603365D3ED5A9575BF47D659E48D46A7762B6C546E25F7548
	E0F1C3CAAA0D4B20FEE1AD98CBF4D3AC8A52319C7BED9ADD4FC2DAE865EB57759807243762187DF28E59AF33C1FA9AD098D0B450BC20F82095C0696F46997301ACC01DC0925074F7313CB11714A76F97A3G0B850A87CABC8973A510854886B48DA882A896A89EA8318D4B6F4D192F530FC40FBACDEC8BB4D658E4FB092D444EB01D3C71B2969DC08E56A9100EF4397E57BB6E333A1D572D5BE6CDFA22758ADD2782254A4F095E39CEDC43E857C1C8E46E58BA018EB2DEED3C4EFA21CD90DB6512FADC96BD123D57
	6AE09B2AB5D6CF2B4BE16F9D11E3049F5378B88FA83B8D47A0E39E31E70047CD5A1298676C20F174D120EEA84BB0974542A1BD2B8D57A45FB2DE4FBC12A4DF97C039A5ED4ABCA234479909FD07395EA7E9DC1E8CF8C6BB5AFC6FDEBAE6AB6F3B65B6A8BFCF3E87D2EDAD9730BC8555275ADBAE1CBC5656F07658056A46468B35AD0D271A1A5B306DBEFB1E5853E7F5F8495C22B78632FCAF1C4F126553B181A296374BC95E28373734025C06634DCD471A5B59F8F2A4CBA9B7D035513F9C843485A3A2095FF81EC7
	2B54B6B099561D0A0C73DD930CC945E54579874BF3A6327DDBDDBB75EDEFBCD6572E984FF54FFDCBA93B27B2F3825D79D9C5B9EC1FE73092E3D0CBBB6E735CDB295D67F9C2D06F537C24D23B4F136047FF3DD23B4FD3182066979F566E73E0F9E67B178E2B5B150D83AFD58B7C7EAF2AFBEF754D5F8B1CFED3F53018B3A4BD707B2CFB53755FE7FDADDD7FDD6A0369931F8D7FD6FA6033615FCFD71F8DE7B1F368AE52DFE3609F21C0F30066834537E33CEC59C89C0FFCF1B4BED6BEE66BA76F5348D7C6926A5F3B
	A9F0DD8BB6CD7EED5201CDE4DD57630290F21048C77C70A652DF124BCDC10655ECA2ED6431778FC8AC2B0C57EFA2FE6F907BA84C56C47F279157C44229B8E379A9BCF37427EDE49FD26F3C18F2D02C5DAEB9449AB974174F9B7C33891FAD77A95C375D5BCC5FB7C1BA86E841A9FC3FD05002F917723C1DAD74AC6AE9D8DB82F5G0D9FAB169E554358F81037DB90F05CBEF2FA2B207B9E8F23F9596652C2FCF76BBE0D363DD905D8A447161F41B3F00BCE233D778E90FBB35E03189A287EBDDCD3AE58CD72F6C3FA
	6CBD7419DFEDA2F346E96B4571A78281EC75385CB0AD0EB0141EB215FD7139BD826F439D1BF78712811EF7822A5952F391965E6D56FE6E4B7F5ACB663AB030E3B650C220E5C0268ED8438315825583F582C9C05301420122016682ADGDA82A41C41FABC1711B3C1BD644DFC7AGF82C6C0C859B63F6276A6FCD9C26F1E8BA48B71F4139F3B8F57C7A70B32938D66900FCE4FD68066B34B3EC0F19157BFB1A7E5ECD8A0DE143A0EF54990C810E2F1FA886C8D291710305D0EE6999A586C8BC2BDDCBFE46CD57F04A
	DBE2B62DF37E53A9B49EC06FEB6F45F639620F5BE47CE415BF0E71C356AA62F3A75AE14428330B8EDB3B4870DDD59A5C467047D3B4383CF63FB268AF5FAA4B2F717963BDB2FE7418BF5E07EB53039A79FD8C7FC33E866F11771DCAB438152DD5FB0FE8572A24DF534E62DAF6438EBDFEB6674FB46B714BB97FFF6528790DE799DF627CCDE6BDFEB0679F366B7143B83F2FD3CFFF9467C7A76B71E3B9BF7E109EFF81671FA951533F04733D25FAFC619C72176972534F6133731BDC3247659717AA3EDCF07A584976
	065A6A468BED35A7DB9A9BEB2ACFDEE8BE86A0AB7BF6DE4984E56BDBCEB61CEDE9EE9FDF9A6338974810A27B532769189FA80E5BDF141FF520A8C7A7061CE8DEF80D045C322E2CFCC5D7CC677568E2B11127F22A7BF8EC3C8C5F95F86EFFF05764F3FF54AEFAA69D666C769137FC2E66FB3B68F9353EBE2F48E30C47F625F12C415B6A725A497EAB337D11268F77FD7B939F325C3F26DC0E6D5D5ECBE38573B96D1EEE8445CB4FE977F477B5E37CD2853C08F338BF303F6543691FCF638FD327D67F2FA81E5E2955
	5F5342FF7F82F853BAD17F41C2357E451DEC8FE005FCCD6B9A3FA7404A6D70BB631BAD67AB172F0D814B3DF6C6DB5FEED5DEC9271CFC4E42CE6C8F6EE2755A42F1B745E3D5B82B6F57E83CC3524279B8633C7398937CE6B7114963EF963E48FE993F1B0CBB64BBCABBCC4C2374F30BB648686CE77CB74C011F0FAD66491F0F374C7A313159BCBEB65EE7560F0D771B5531B1434A4DE46EA76FF6BAF83E439CBB43319AB33E83FA4FEE1386B8DECF6DA2F83DC894A25ECC6D9A26D8070C352930B3B256E1A64FB8D4
	F940454F1FF6516F237B6C8E87CBDBE99E3B939EF95E9EFD54C63B5B2A327B9247085D01575F6D29573D7EE6E743D2517FC3AF409A6982464A7FCA45585E540D31F2FE9A49DB85698EA0F737DEEC4FE34575D97AF6786DE1CCED8EE8A61FAE48B17F3F9F417705415DE873099D0845F06CD7E6FE862A9B57C63B4DFEE7D8D46719B122E1E51765609A22480A721A4C088DF0CC32A3964E31AFF7225E859C7B4FE44452FA905BDA09D8BD47E614203CA00EFD239431599C4BABC3ECE98F0EDBDFEB96849CD33E213A
	5F5FFC73779C9A7F9F6878C50BD2275F2A6E87DAEE3E6E5BEE2A8E36D75FCA573266DE08FBFB797936E2FA36G521D9CBBD102FB7A839CFB1B1DEF0374DC85B390ECA12417F06CDE8316DD4E31F43A7FD9EF839DB6448E1C43FCC1B6FEB641CEE24C7910DE82E492A1FE872A826A8472814DG0A840A85DA8434C2443217E9590CBE289BD087108FA894E8B650822065C0997D40876AG7275E3598787E2D4EDC5F47BE47908C54A77D57255A4865E37DF9100B7C32ECF6784E5A7A252AE6AF42CC68E2B4B8BFEF5
	A1E39219BF556F87B64857352AF201F4EE89001335AC99D774FE7764FAC8FB1EC37B2EC0BE57187A61624B27BFE4B9E35A070B8B43695C955A2F0D8B3FCE7108FEEDDCD8120673E294705287508F3FFA0468778D30FE1DAEDF4365EB74C020782EE587A9B7D766AF142FCB65EB22BDD039974D24DC064C4F172FD57235BDE039FF7AFD33B52049B7866999F6BD5FBCE9D6170B5064198D69F93A65C66C6AF20BB4F916C15AF4D12F5C4CCED2AED3669549D70BFC6D389828FECB69F987074C8F122FA172B5B2E039
	AC3A861CA373674B57F8793ABCE039FBCA5475CB3E24B98B8D6952CBFA757BD6293ADC3DA6CFA7245D3A650A4A546526E97204C2FA1686E3F1D7FFA10DAFDDCE096D1BDD2573C98C641DF7091FF9AA76BFC778FE01A060798CEB49E4FBEA6A73995A33FEABAE3167681F2F3F7EBA5355D465EF4FD374DC3049814F14836DE9B2785B93D22858739D43C4762C1A449E8B68788758225813F7F67C3EE44DD96D3915D6A8E7F3284F2DB41F1B6CFD63EA159DE3D0F606C359EB0CF030F6F91D5B5132190C79FCAF0E1E
	BC29117BB056BE1EE741F31EF563F9F5B26F619DE47FC009E299D3FE2FD7224333B0DE05C307D743F8FF255F14F0FDCDF627FCEEA6559F377A987E3911F5EA7C2455E9633EF94E15622707B1996FF774CC2A4283013CDCF80206C7BE71134F4FFC472E5DF3A3E716239C38E716FECA0F9F4B79991775788BB8BF7934F64F0D7017F03E5D2B479786117F13FCBDFEBA67BFDE28275F4C793B3A7478151C7F472BFA7CD64E9FB0696937F13EBDD50F6F63FC2BAEFF7AA04E078F90574131CEF5DF1EF6736371F7EF2A
	8E9683FF1F2EB343C9FB8CE2DC3C79A87DD68552F19CBBEF2267EEA03D1CE3BFB2E17C1C68C42CEF874AEB675813946B06341BE3E7B369F99FC807F06CBFB27937C59C7B1B9965AD6558E93AEEDD8169E497E253F752EF0BA0DD4431D7F7223CCA0E2565E259699CBB331D6B65D84CDE02AD05F4221BFFCBE346FAE4F06C58B6AC1B4F31BF8DE059B10E4D30E31B4E60583CCEAC9B413134CEAC3B0CE30FF6E29B185EC76CCD768D8F2433B9B60B3E53AB07F4BD47B697230EF60E2DDA0772A2B8B6C031A8C847F0
	AC2F15E0F1100E67580CD6143714E387AAD1DE15071F8D27D8A324BBB9761D8C0239A19D44314DDBD05EF40E4DAA41328BB9161A4775F2ECDBA936D51597319F17E2BD5AB9E662E587B87695DEF6B6470E17E11B4E63D8FA9616DD4431AFF05FA81220BF59FBDDF2DCCC9E4FFFD5CC76287C766C6BA0C0B03FD56D31DB9DEF65E795435FA272C2C15E77A993783D37C21113EB181A1CAF9EA2E5595E4940D9FE06C4427D2DAF1EA5F35A9824C300E6C9D3FDF73D7930A27F4FF65C570915F03F661DD3082D60D84B
	E544CA07902BBD0D7BBA8E0E05FB910B60D862BE4496F26C3F8AD1DE7AE5444EF6A1564831ED9FA0B60DE3DFB5213CB99C8BCFC5EC9947C2B916BF0CB1DC66C532D615DCAEC73B5DCDE6EA394DAB0EA87DD5F054BF963450F15486B25CDC4E1049BF969CA0C74164986C8553D4E230F010C988E34168E1A5B6E532BFD5255876628EFF5B1651B1B9864A4C63363D1F69EF5BB72B955BFE11B919EDEBA730ED45B85BFED62358B61863EF5B6DF4FCB779A00E7021ED776D7437ED442258E6FAEBB25B56CDE01B4527
	5846749F24F3C4AB601DBEFC976F5EBE593AC12DE33ACF51C1F861107E2A200E0FF7FB09FF09CE7222G3FBD78B39DD788FF168F4F86FE1E4EB9F3A0BD175B5239EDB2DB54FD31DCE3CB7208E28B5311E6C73D99A32877D10A19A1DDBA02FAFF5FB919DE35FF5AC67C757A4669BD5809FA270D60B89AF6CC710B62AEFF3FB84E3E91A1F2C750AFFE345B5FAF7E23CE710B0262497CC23D5E537A457C912D4F7E6E38E25B35F57E365DC3674F05D0E6B1372D26555F362486453687A77DCEE0558436E50CEAEDB31F
	D0EC7BD6253FEDCF5039B89B4A940D22EDCFE5785B764EBB2AF65BB219ED29935856BD4AE2E765F9FA1E4E678E40FD2368CBFB72A673A5350E48D1FFDF1AB32A75253AD2742539236843FF255882C847F33DBBA6552BEE7774AB7EFA4DD734FA1F64FACB2F20DEB70DA3AC10EE3D02FA73322E67AC8F6A8D52688D9927F78E9FAB422F705FA6BE7B61768E571CA3F1C154956D5E61860A4F39225DBB8CBB0BFB07F30117BF067ADF21FBE4B346583EC204FC1DADDF670D855AFBEABDC54AAD12794B642B69AA3BE6
	DE8DD42E7DB2A9D7A473AD7235C33EBA82162BBF2DEE27A0CD3E90C8C7DE555B333A5F2BAEB7C713E7BE2463F54B2D5E27AE37DC13A77903B8E35687FA657EC15F51174A3CFA795AA9DF5D9F842A5F05AED2EE1A4C8F152F3364EBCC40F2EFFDC04A45497C4572F505FCCD3B9628DC04496FCC00A6DFB9249B2F6936275F9EF937A60F8469E05DF2DF76AB972649938569D88D464638871B60964F2E192EB7368E7CAD4F534D4AFD713B0A6C664C29456D6DA795B907CEA9F202F6CECD4E79530A1C47BA94B9CD5B
	5F5217E383B12EFE90D4A48B8A9C7B7F660CA2CF206F78A54F1048F887BB955E41EDB72E2B33CB1137576E2F6B19F38AAF267346F58D77A872DABB7DF5BDE7D3F8613B275697FF97153EB8B920485951BAB5B9C3F6C54ECB8EC54E8399D31373F327A22760FDC50EB16F465B70DD0FA22F2B543F8D9F16945E0A5C9B57B5FFC8117722C6D73ECF611932EEDCD74B08A26F393D28CB7E0DBA6A076CFE0B6AFE66591B3FAF7878CD554176B812AE621E4E02EB386F6120D8BC2417F16C91FAC65E9494E74C88C2AC13
	6F91E5F32C7F944A13B8B617E2C1101E4131C4AB41A2A09D4DB13B956545F06C52E51417F69B5FCF23D8A62473B9D654CD30AAC837F26C1EEE145749318B27316CAC0EFD76A8574B3194AF6E7D24FD8231B9DE2CC7B64792B330ECB947067331ECB0473276E11B06F12C560CE523B8A696E2D961F6EECB9136C1BA47DC944B02F491477EDECF63D1C837F36CDC836A68665865AE14974531DFD2EC8E2467F14C3E07E00BA03D14E34F6EC1F9ABB8F670831457B88D31AFD19F6A0074G47DA689E65982427F3AC1A
	6FDB06F26CF19316DD4C31C7ADDCAF47B624E2DBB5FE1277D1AA56231BE32B0FE3D909E3EBF959D80EC527E21BAED030BAAC3B04E33694ACDBF9872EE72F0EAAE3486D977D57E52CADDAA1EF679D38AEFB3645FFDD96FE0514E7EB087D573DE6547B1D12692003FC1B212C99FFB42658765BD37E367D0DBE1B21D0A6025B36556AEF5B9F2FAA3685D92732BF2435ADEE1CED2B2FA9367D7E323FED7F244F79A2A833045BF63C5B5FB6FA04DA36EDD677D476073436E55E99E75CAB28573341F42CB083DEFAA72E6F
	9EB8BA157DA15B1D0A8E3AB782E992B0A86B3BCAAF5F9B39935715FF20D8882443395E2D99D3598B1A2F519BBFCEEFB87F7D7325DCEF839D230460B8E3F2B06ABDEB1E4ADED0E5303F5E56E02D5E4F94225E4EE0FCF6DA92949F3823485F874268B867003C3EE07401F58D7EBE60B1A8BE60E9184A6FB2E8FDA092F49C70734FFB0C0AED2FE8762992696F30C4C31998EEDB509EFF5BE6A7AA367DE14FD476293436AD859D7B7DEC7BF512E2DB14E64C79B19DF3D6C09953DDE8DB1F663C443FD6AA36BDB3699EDA
	6A8436155F25349B539FCF47F08B602DF721AF4D37CCE5AFA868AEFFDF8A39EB5C33134A77C66E624F8E7BAD81C84F61FA330EDF6F1E8C39AE5168956E566AAD65FA136FC63D3F21D8A6244DF7235EE76A26F2862563EEFF3D0EF1FABF1D02FAFDF76333F3F63562838F35CCED2DF0159C8B176F631395B94B3B27A6E7D50AA227B7CD1113BDC5B9F72CD7647CCE751BE0379F3D7198BFE923A22F4D6B3F1E8849D055FD730D6BFAE40BA26F11FCFFDD9BB2955E81730D6BFADB75BB9C77977A6B7A7C8E0577177A
	2975457732143ED83FCB115335E7EAF2CA3395B991450A1C5AA93EBBFD32C411332BCC11733065465B306EED15EF247A37614CF20577DA5D0D6BFA6220A26F9D0D2E1D158AAF72A350E5B92C480BC8C1DD6C7FC87E6A469F434D2C1705A4C9D8237C9610A42CE4BF9E64758829DCF3837D2CE351657D95465F5FE7B488098D42CA7619CB0310C83ED5E990126827AC8D02D1F239FD643F1CA41F4B10310958E084E9EF0C7F2E2D7AB33F7A652C8B16F403E0G0183A21310B4CCBEDE21B248F3F4417B3E70011068
	17B2884AEBD2DAC7CD9E0F10627F6B918977EF3EBD6D337B078C0229CED859E7F538872C20097E37890D425A9EEA3C68013C1210C67F7F07C2A8DBC84B9EEA948C3DDEC9582A603D84E7DC72E3E5A2E4D9ED33FAAED1894414B5670455FD1E7E9E2AC0928C676A4E01DA1AA26C64C6E10DB4C03E4DA71331A4ECD6C43712AF15E546A15A88E482905C748F2FA6594C7AB71EA2FF92F8435CAE3079038C44ABF99E723A6C93BC8F1E99B07012637390DAA367B5CA42EA7213D4D964B727601E7C7C943D0726DE6767
	20CFFC2D6C0F73DEBC6DB58AAB9B04ADA49EE993BD74F3AB51C6FECFCA7E3FC56B0455EE723B7764F76440073C74126415C69C509F69FDA7497FF36415C4DBB5FE48859D3011359279663F305E6A9D1048BBD5E87AC4A779DFD005B7985BE1F57697322F3AD87BA5D453210C56A5816C5DC06DA5D28A38148D0F276E5EF9A2FE36D1B05489EB9CAE2B2D4E5AAB39BC8D42EA899E8D6F004BE173390FD6D1C126E152A4A45CCE84F1DBF975C9E58B481181EE74A55F17272FDB3C2E8E1A5267918AE9CE523185BC07
	2DF6406A81D52227C1A27F2B2B4B134DF937ED17767C647866CE0310A0D712F44D1BBE37C4DCF8506E98A1CFAB9D8EE827ED07A47BF00BBF3C24B18A6A20BE528BAFBFB5735715CB170030BA59714124B4A5D77350E00F6839E356BD5B5606AC7A943158DD05CF96C8DEADF92CCEAF794FDDC0F816264E48622697FC612922FB3E7EBFE72969CAD1C95821F8FA3F689AAC2C6E6B33BBC5AEGFA8C44EF6362C91E82CD1EB7FC1F5BF8627957FB4043AC02F13028087EDBCC7FADA17F96D32418A245A550EDCB0589
	7FE879BE2CB3F5CB1A58CDFC48C76E5E720DFBC00CFC844A9867EE844D9C6FB7844E623DC7D23B48BFFB49BFE6DAA8177E3BEF4A3613D2059A1B4B7CED468D8401233B65471C0C271BA4E17DC9721BEF95D945D912AB6B6D32327DE512E0EC6F2D88443185640881B956001C1E001C3E0ADB39159B14D6CED0E73E15EDEE5537B961D636793D2958AC843059B85E660F5E52737E16925AF1EBDAAAFEECACF568DBFACBBFE5DEFD0FB55D4AB60FAAB62B7F5C52A343ED9F1B11A178E3733CFD565F8FEEE1CB3F285F
	26A6D8994851443E6212F292D094179C108493DD67E655D4CC4C37CC422F83FE2ABADAA9A903D8A531496E8C40307A8244B7C964B322DBBA42797A47B042097A98C6B80FFCEC46319F0C1FA548BE3261563374090F0D257374AD3D251F326746FB2CC938451F32974637732ADB5D6617941B7946DFC01B7F3FFA71E245D2231C6F96FD5E7E7A3199997E9E40D27C1D791CEB6A5F32DF7E4964003F07EF3ACFBEF3FD1F72BB736CB7BA1F225FB9F6GAE5D073F2935E59B794122C03F7559B6E8F5C0A46438D46D34
	115F7D2C9911C46577EE1F5DC664FBB10F4CE43C6737913BAF2A4A7CDFD0CB8788A8C9C113A3AAGG9C12GGD0CB818294G94G88G88G54F501AFA8C9C113A3AAGG9C12GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGDDAAGGGG
**end of data**/
}
/**
 * Return the JButtonDeltasAbsolute property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JButton getJButtonDeltasAbsolute() {
	if (ivjJButtonDeltasAbsolute == null) {
		try {
			ivjJButtonDeltasAbsolute = new javax.swing.JButton();
			ivjJButtonDeltasAbsolute.setName("JButtonDeltasAbsolute");
			ivjJButtonDeltasAbsolute.setMnemonic('s');
			ivjJButtonDeltasAbsolute.setText("Deltas");
			ivjJButtonDeltasAbsolute.setMaximumSize(new java.awt.Dimension(95, 25));
			ivjJButtonDeltasAbsolute.setPreferredSize(new java.awt.Dimension(95, 25));
			ivjJButtonDeltasAbsolute.setMinimumSize(new java.awt.Dimension(95, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonDeltasAbsolute;
}
/**
 * Return the JButtonFahrenheitCelsius property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JButton getJButtonFahrenheitCelsius() {
	if (ivjJButtonFahrenheitCelsius == null) {
		try {
			ivjJButtonFahrenheitCelsius = new javax.swing.JButton();
			ivjJButtonFahrenheitCelsius.setName("JButtonFahrenheitCelsius");
			ivjJButtonFahrenheitCelsius.setMnemonic('e');
			ivjJButtonFahrenheitCelsius.setText("Fahrenheit");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonFahrenheitCelsius;
}
/**
 * Return the JCheckBoxCoolMode property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxCoolMode() {
	if (ivjJCheckBoxCoolMode == null) {
		try {
			ivjJCheckBoxCoolMode = new javax.swing.JCheckBox();
			ivjJCheckBoxCoolMode.setName("JCheckBoxCoolMode");
			ivjJCheckBoxCoolMode.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxCoolMode.setText("Cool Mode");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxCoolMode;
}
/**
 * Return the JCheckBoxDeltaB property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxDeltaB() {
	if (ivjJCheckBoxDeltaB == null) {
		try {
			ivjJCheckBoxDeltaB = new javax.swing.JCheckBox();
			ivjJCheckBoxDeltaB.setName("JCheckBoxDeltaB");
			ivjJCheckBoxDeltaB.setToolTipText("Range: -128 to 127");
			ivjJCheckBoxDeltaB.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxDeltaB.setText("Delta B:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDeltaB;
}
/**
 * Return the JCheckBoxDeltaD property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxDeltaD() {
	if (ivjJCheckBoxDeltaD == null) {
		try {
			ivjJCheckBoxDeltaD = new javax.swing.JCheckBox();
			ivjJCheckBoxDeltaD.setName("JCheckBoxDeltaD");
			ivjJCheckBoxDeltaD.setToolTipText("Range: -128 to 127");
			ivjJCheckBoxDeltaD.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxDeltaD.setText("Delta D:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDeltaD;
}
/**
 * Return the JCheckBoxDeltaF property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxDeltaF() {
	if (ivjJCheckBoxDeltaF == null) {
		try {
			ivjJCheckBoxDeltaF = new javax.swing.JCheckBox();
			ivjJCheckBoxDeltaF.setName("JCheckBoxDeltaF");
			ivjJCheckBoxDeltaF.setToolTipText("Range: -128 to 127");
			ivjJCheckBoxDeltaF.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxDeltaF.setText("Delta F:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDeltaF;
}
/**
 * Return the JCheckBoxHeatMode property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxHeatMode() {
	if (ivjJCheckBoxHeatMode == null) {
		try {
			ivjJCheckBoxHeatMode = new javax.swing.JCheckBox();
			ivjJCheckBoxHeatMode.setName("JCheckBoxHeatMode");
			ivjJCheckBoxHeatMode.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxHeatMode.setText("Heat Mode");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxHeatMode;
}
/**
 * Return the JCheckBoxMax property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxMax() {
	if (ivjJCheckBoxMax == null) {
		try {
			ivjJCheckBoxMax = new javax.swing.JCheckBox();
			ivjJCheckBoxMax.setName("JCheckBoxMax");
			ivjJCheckBoxMax.setToolTipText("Range: 1 to 255");
			ivjJCheckBoxMax.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxMax.setText("Max:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxMax;
}
/**
 * Return the JCheckBoxMin5 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxMin() {
	if (ivjJCheckBoxMin == null) {
		try {
			ivjJCheckBoxMin = new javax.swing.JCheckBox();
			ivjJCheckBoxMin.setName("JCheckBoxMin");
			ivjJCheckBoxMin.setToolTipText("Range: 1 to 255");
			ivjJCheckBoxMin.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxMin.setText("Min:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxMin;
}
/**
 * Return the JCheckBoxMin3 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxRand() {
	if (ivjJCheckBoxRand == null) {
		try {
			ivjJCheckBoxRand = new javax.swing.JCheckBox();
			ivjJCheckBoxRand.setName("JCheckBoxRand");
			ivjJCheckBoxRand.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxRand.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxRand.setText("Rand:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRand;
}
/**
 * Return the JCheckBoxTa property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTa() {
	if (ivjJCheckBoxTa == null) {
		try {
			ivjJCheckBoxTa = new javax.swing.JCheckBox();
			ivjJCheckBoxTa.setName("JCheckBoxTa");
			ivjJCheckBoxTa.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTa.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTa.setText("Ta:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTa;
}
/**
 * Return the JCheckBoxTb property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTb() {
	if (ivjJCheckBoxTb == null) {
		try {
			ivjJCheckBoxTb = new javax.swing.JCheckBox();
			ivjJCheckBoxTb.setName("JCheckBoxTb");
			ivjJCheckBoxTb.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTb.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTb.setText("Tb:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTb;
}
/**
 * Return the JCheckBoxTc property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTc() {
	if (ivjJCheckBoxTc == null) {
		try {
			ivjJCheckBoxTc = new javax.swing.JCheckBox();
			ivjJCheckBoxTc.setName("JCheckBoxTc");
			ivjJCheckBoxTc.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTc.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTc.setText("Tc:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTc;
}
/**
 * Return the JCheckBoxTd property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTd() {
	if (ivjJCheckBoxTd == null) {
		try {
			ivjJCheckBoxTd = new javax.swing.JCheckBox();
			ivjJCheckBoxTd.setName("JCheckBoxTd");
			ivjJCheckBoxTd.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTd.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTd.setText("Td:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTd;
}
/**
 * Return the JCheckBoxTe property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTe() {
	if (ivjJCheckBoxTe == null) {
		try {
			ivjJCheckBoxTe = new javax.swing.JCheckBox();
			ivjJCheckBoxTe.setName("JCheckBoxTe");
			ivjJCheckBoxTe.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTe.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTe.setText("Te:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTe;
}
/**
 * Return the JCheckBoxTf property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTf() {
	if (ivjJCheckBoxTf == null) {
		try {
			ivjJCheckBoxTf = new javax.swing.JCheckBox();
			ivjJCheckBoxTf.setName("JCheckBoxTf");
			ivjJCheckBoxTf.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTf.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTf.setText("Tf:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTf;
}
/**
 * Return the JPanelData property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JPanel getJPanelData() {
	if (ivjJPanelData == null) {
		try {
			ivjJPanelData = new javax.swing.JPanel();
			ivjJPanelData.setName("JPanelData");
			//ivjJPanelData.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjJPanelData.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxHeatMode = new java.awt.GridBagConstraints();
			constraintsJCheckBoxHeatMode.gridx = 2; constraintsJCheckBoxHeatMode.gridy = 1;
			constraintsJCheckBoxHeatMode.ipady = -4;
			constraintsJCheckBoxHeatMode.insets = new java.awt.Insets(0, 10, 2, 3);
			getJPanelData().add(getJCheckBoxHeatMode(), constraintsJCheckBoxHeatMode);

			java.awt.GridBagConstraints constraintsJCheckBoxCoolMode = new java.awt.GridBagConstraints();
			constraintsJCheckBoxCoolMode.gridx = 3; constraintsJCheckBoxCoolMode.gridy = 1;
			constraintsJCheckBoxCoolMode.ipadx = -5;
			constraintsJCheckBoxCoolMode.ipady = -4;
			constraintsJCheckBoxCoolMode.insets = new java.awt.Insets(0, 3, 2, 7);
			getJPanelData().add(getJCheckBoxCoolMode(), constraintsJCheckBoxCoolMode);

			java.awt.GridBagConstraints constraintsJButtonDeltasAbsolute = new java.awt.GridBagConstraints();
			constraintsJButtonDeltasAbsolute.gridx = 1; constraintsJButtonDeltasAbsolute.gridy = 1;
constraintsJButtonDeltasAbsolute.gridheight = 2;
			constraintsJButtonDeltasAbsolute.ipadx = -1;
			constraintsJButtonDeltasAbsolute.insets = new java.awt.Insets(0, 9, 3, 61);
			getJPanelData().add(getJButtonDeltasAbsolute(), constraintsJButtonDeltasAbsolute);

			java.awt.GridBagConstraints constraintsJButtonFahrenheitCelsius = new java.awt.GridBagConstraints();
			constraintsJButtonFahrenheitCelsius.gridx = 1; constraintsJButtonFahrenheitCelsius.gridy = 3;
			constraintsJButtonFahrenheitCelsius.ipadx = -1;
			constraintsJButtonFahrenheitCelsius.insets = new java.awt.Insets(3, 9, 22, 61);
			getJPanelData().add(getJButtonFahrenheitCelsius(), constraintsJButtonFahrenheitCelsius);

			java.awt.GridBagConstraints constraintsJPanelDataChanges = new java.awt.GridBagConstraints();
			constraintsJPanelDataChanges.gridx = 1; constraintsJPanelDataChanges.gridy = 4;
			constraintsJPanelDataChanges.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelDataChanges.weightx = 1.0;
			constraintsJPanelDataChanges.weighty = 1.0;
			constraintsJPanelDataChanges.ipady = -1;
			constraintsJPanelDataChanges.insets = new java.awt.Insets(22, 8, 37, 9);
			getJPanelData().add(getJPanelDataChanges(), constraintsJPanelDataChanges);

			java.awt.GridBagConstraints constraintsJPanelTable = new java.awt.GridBagConstraints();
			constraintsJPanelTable.gridx = 2; constraintsJPanelTable.gridy = 2;
			constraintsJPanelTable.gridwidth = 2;
constraintsJPanelTable.gridheight = 3;
			constraintsJPanelTable.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelTable.weightx = 1.0;
			constraintsJPanelTable.weighty = 1.0;
			constraintsJPanelTable.insets = new java.awt.Insets(3, 10, 2, 8);
			getJPanelData().add(getJPanelTable(), constraintsJPanelTable);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelData;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelDataChanges() {
	if (ivjJPanelDataChanges == null) {
		try {
			ivjJPanelDataChanges = new javax.swing.JPanel();
			ivjJPanelDataChanges.setName("JPanelDataChanges");
			ivjJPanelDataChanges.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxDeltaB = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDeltaB.gridx = 1; constraintsJCheckBoxDeltaB.gridy = 3;
constraintsJCheckBoxDeltaB.gridheight = 2;
			constraintsJCheckBoxDeltaB.ipadx = 18;
			constraintsJCheckBoxDeltaB.ipady = -4;
			constraintsJCheckBoxDeltaB.insets = new java.awt.Insets(0, 0, 1, 0);
			getJPanelDataChanges().add(getJCheckBoxDeltaB(), constraintsJCheckBoxDeltaB);

			java.awt.GridBagConstraints constraintsJCheckBoxDeltaD = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDeltaD.gridx = 1; constraintsJCheckBoxDeltaD.gridy = 5;
			constraintsJCheckBoxDeltaD.ipadx = 18;
			constraintsJCheckBoxDeltaD.ipady = -4;
			constraintsJCheckBoxDeltaD.insets = new java.awt.Insets(1, 0, 1, 0);
			getJPanelDataChanges().add(getJCheckBoxDeltaD(), constraintsJCheckBoxDeltaD);

			java.awt.GridBagConstraints constraintsJCheckBoxDeltaF = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDeltaF.gridx = 1; constraintsJCheckBoxDeltaF.gridy = 6;
			constraintsJCheckBoxDeltaF.ipadx = 19;
			constraintsJCheckBoxDeltaF.ipady = -4;
			constraintsJCheckBoxDeltaF.insets = new java.awt.Insets(1, 0, 1, 0);
			getJPanelDataChanges().add(getJCheckBoxDeltaF(), constraintsJCheckBoxDeltaF);

			java.awt.GridBagConstraints constraintsJTextFieldDeltaF = new java.awt.GridBagConstraints();
			constraintsJTextFieldDeltaF.gridx = 2; constraintsJTextFieldDeltaF.gridy = 6;
			constraintsJTextFieldDeltaF.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldDeltaF.weightx = 1.0;
			constraintsJTextFieldDeltaF.ipadx = 50;
			constraintsJTextFieldDeltaF.ipady = -1;
			constraintsJTextFieldDeltaF.insets = new java.awt.Insets(2, 0, 0, 12);
			getJPanelDataChanges().add(getJTextFieldDeltaF(), constraintsJTextFieldDeltaF);

			java.awt.GridBagConstraints constraintsJTextFieldDeltaD = new java.awt.GridBagConstraints();
			constraintsJTextFieldDeltaD.gridx = 2; constraintsJTextFieldDeltaD.gridy = 5;
			constraintsJTextFieldDeltaD.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldDeltaD.weightx = 1.0;
			constraintsJTextFieldDeltaD.ipadx = 50;
			constraintsJTextFieldDeltaD.ipady = -1;
			constraintsJTextFieldDeltaD.insets = new java.awt.Insets(2, 0, 0, 12);
			getJPanelDataChanges().add(getJTextFieldDeltaD(), constraintsJTextFieldDeltaD);

			java.awt.GridBagConstraints constraintsJTextFieldDeltaB = new java.awt.GridBagConstraints();
			constraintsJTextFieldDeltaB.gridx = 2; constraintsJTextFieldDeltaB.gridy = 4;
			constraintsJTextFieldDeltaB.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldDeltaB.weightx = 1.0;
			constraintsJTextFieldDeltaB.ipadx = 50;
			constraintsJTextFieldDeltaB.ipady = -1;
			constraintsJTextFieldDeltaB.insets = new java.awt.Insets(0, 0, 0, 12);
			getJPanelDataChanges().add(getJTextFieldDeltaB(), constraintsJTextFieldDeltaB);

			java.awt.GridBagConstraints constraintsJCheckBoxMin = new java.awt.GridBagConstraints();
			constraintsJCheckBoxMin.gridx = 1; constraintsJCheckBoxMin.gridy = 1;
			constraintsJCheckBoxMin.ipadx = 27;
			constraintsJCheckBoxMin.ipady = -4;
			constraintsJCheckBoxMin.insets = new java.awt.Insets(1, 0, 1, 8);
			getJPanelDataChanges().add(getJCheckBoxMin(), constraintsJCheckBoxMin);

			java.awt.GridBagConstraints constraintsJCheckBoxMax = new java.awt.GridBagConstraints();
			constraintsJCheckBoxMax.gridx = 1; constraintsJCheckBoxMax.gridy = 2;
			constraintsJCheckBoxMax.ipadx = 25;
			constraintsJCheckBoxMax.ipady = -4;
			constraintsJCheckBoxMax.insets = new java.awt.Insets(1, 0, 0, 7);
			getJPanelDataChanges().add(getJCheckBoxMax(), constraintsJCheckBoxMax);

			java.awt.GridBagConstraints constraintsJCheckBoxRand = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRand.gridx = 1; constraintsJCheckBoxRand.gridy = 7;
			constraintsJCheckBoxRand.ipadx = 27;
			constraintsJCheckBoxRand.ipady = -4;
			constraintsJCheckBoxRand.insets = new java.awt.Insets(1, 0, 4, 1);
			getJPanelDataChanges().add(getJCheckBoxRand(), constraintsJCheckBoxRand);

			java.awt.GridBagConstraints constraintsJTextFieldRand = new java.awt.GridBagConstraints();
			constraintsJTextFieldRand.gridx = 2; constraintsJTextFieldRand.gridy = 7;
			constraintsJTextFieldRand.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldRand.weightx = 1.0;
			constraintsJTextFieldRand.ipadx = 50;
			constraintsJTextFieldRand.ipady = -1;
			constraintsJTextFieldRand.insets = new java.awt.Insets(2, 0, 3, 12);
			getJPanelDataChanges().add(getJTextFieldRand(), constraintsJTextFieldRand);

			java.awt.GridBagConstraints constraintsJTextFieldMax = new java.awt.GridBagConstraints();
			constraintsJTextFieldMax.gridx = 2; constraintsJTextFieldMax.gridy = 2;
constraintsJTextFieldMax.gridheight = 2;
			constraintsJTextFieldMax.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldMax.weightx = 1.0;
			constraintsJTextFieldMax.ipadx = 50;
			constraintsJTextFieldMax.ipady = -1;
			constraintsJTextFieldMax.insets = new java.awt.Insets(2, 0, 0, 12);
			getJPanelDataChanges().add(getJTextFieldMax(), constraintsJTextFieldMax);

			java.awt.GridBagConstraints constraintsJTextFieldMin = new java.awt.GridBagConstraints();
			constraintsJTextFieldMin.gridx = 2; constraintsJTextFieldMin.gridy = 1;
			constraintsJTextFieldMin.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldMin.weightx = 1.0;
			constraintsJTextFieldMin.ipadx = 50;
			constraintsJTextFieldMin.ipady = -1;
			constraintsJTextFieldMin.insets = new java.awt.Insets(2, 0, 0, 12);
			getJPanelDataChanges().add(getJTextFieldMin(), constraintsJTextFieldMin);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelDataChanges;
}
/**
 * Return the JPanelDataTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelDataTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelDataTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelDataTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelDataTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelDataTitleBorder.setTitle("Stat Data");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelDataTitleBorder;
}
/**
 * Return the JPanelTable property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JPanel getJPanelTable() {
	if (ivjJPanelTable == null) {
		try {
			ivjJPanelTable = new javax.swing.JPanel();
			ivjJPanelTable.setName("JPanelTable");
			ivjJPanelTable.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJPanelTable.setLayout(new java.awt.GridBagLayout());
			ivjJPanelTable.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJScrollPaneJTable = new java.awt.GridBagConstraints();
			constraintsJScrollPaneJTable.gridx = 1; constraintsJScrollPaneJTable.gridy = 1;
			constraintsJScrollPaneJTable.gridwidth = 2;
			constraintsJScrollPaneJTable.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJScrollPaneJTable.weightx = 1.0;
			constraintsJScrollPaneJTable.weighty = 1.0;
			constraintsJScrollPaneJTable.ipadx = 21;
			constraintsJScrollPaneJTable.ipady = 30;
			constraintsJScrollPaneJTable.insets = new java.awt.Insets(1, 1, 8, 2);
			getJPanelTable().add(getJScrollPaneJTable(), constraintsJScrollPaneJTable);

			java.awt.GridBagConstraints constraintsJCheckBoxTc = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTc.gridx = 1; constraintsJCheckBoxTc.gridy = 4;
			constraintsJCheckBoxTc.ipady = -4;
			constraintsJCheckBoxTc.insets = new java.awt.Insets(0, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTc(), constraintsJCheckBoxTc);

			java.awt.GridBagConstraints constraintsJCheckBoxTd = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTd.gridx = 1; constraintsJCheckBoxTd.gridy = 5;
			constraintsJCheckBoxTd.ipady = -4;
			constraintsJCheckBoxTd.insets = new java.awt.Insets(1, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTd(), constraintsJCheckBoxTd);

			java.awt.GridBagConstraints constraintsJCheckBoxTe = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTe.gridx = 1; constraintsJCheckBoxTe.gridy = 6;
			constraintsJCheckBoxTe.ipady = -4;
			constraintsJCheckBoxTe.insets = new java.awt.Insets(1, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTe(), constraintsJCheckBoxTe);

			java.awt.GridBagConstraints constraintsJTextFieldTe = new java.awt.GridBagConstraints();
			constraintsJTextFieldTe.gridx = 2; constraintsJTextFieldTe.gridy = 6;
			constraintsJTextFieldTe.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTe.weightx = 1.0;
			constraintsJTextFieldTe.ipadx = 79;
			constraintsJTextFieldTe.ipady = -1;
			constraintsJTextFieldTe.insets = new java.awt.Insets(1, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTe(), constraintsJTextFieldTe);

			java.awt.GridBagConstraints constraintsJTextFieldTd = new java.awt.GridBagConstraints();
			constraintsJTextFieldTd.gridx = 2; constraintsJTextFieldTd.gridy = 5;
			constraintsJTextFieldTd.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTd.weightx = 1.0;
			constraintsJTextFieldTd.ipadx = 79;
			constraintsJTextFieldTd.ipady = -1;
			constraintsJTextFieldTd.insets = new java.awt.Insets(1, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTd(), constraintsJTextFieldTd);

			java.awt.GridBagConstraints constraintsJTextFieldTc = new java.awt.GridBagConstraints();
			constraintsJTextFieldTc.gridx = 2; constraintsJTextFieldTc.gridy = 4;
			constraintsJTextFieldTc.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTc.weightx = 1.0;
			constraintsJTextFieldTc.ipadx = 79;
			constraintsJTextFieldTc.ipady = -1;
			constraintsJTextFieldTc.insets = new java.awt.Insets(0, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTc(), constraintsJTextFieldTc);

			java.awt.GridBagConstraints constraintsJCheckBoxTa = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTa.gridx = 1; constraintsJCheckBoxTa.gridy = 2;
			constraintsJCheckBoxTa.ipady = -4;
			constraintsJCheckBoxTa.insets = new java.awt.Insets(8, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTa(), constraintsJCheckBoxTa);

			java.awt.GridBagConstraints constraintsJCheckBoxTb = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTb.gridx = 1; constraintsJCheckBoxTb.gridy = 3;
			constraintsJCheckBoxTb.ipady = -4;
			constraintsJCheckBoxTb.insets = new java.awt.Insets(1, 0, 0, 0);
			getJPanelTable().add(getJCheckBoxTb(), constraintsJCheckBoxTb);

			java.awt.GridBagConstraints constraintsJCheckBoxTf = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTf.gridx = 1; constraintsJCheckBoxTf.gridy = 7;
			constraintsJCheckBoxTf.ipadx = 3;
			constraintsJCheckBoxTf.ipady = -4;
			constraintsJCheckBoxTf.insets = new java.awt.Insets(1, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTf(), constraintsJCheckBoxTf);

			java.awt.GridBagConstraints constraintsJTextFieldTf = new java.awt.GridBagConstraints();
			constraintsJTextFieldTf.gridx = 2; constraintsJTextFieldTf.gridy = 7;
			constraintsJTextFieldTf.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTf.weightx = 1.0;
			constraintsJTextFieldTf.ipadx = 79;
			constraintsJTextFieldTf.ipady = -1;
			constraintsJTextFieldTf.insets = new java.awt.Insets(1, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTf(), constraintsJTextFieldTf);

			java.awt.GridBagConstraints constraintsJTextFieldTb = new java.awt.GridBagConstraints();
			constraintsJTextFieldTb.gridx = 2; constraintsJTextFieldTb.gridy = 3;
			constraintsJTextFieldTb.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTb.weightx = 1.0;
			constraintsJTextFieldTb.ipadx = 79;
			constraintsJTextFieldTb.ipady = -1;
			constraintsJTextFieldTb.insets = new java.awt.Insets(1, 1, 0, 31);
			getJPanelTable().add(getJTextFieldTb(), constraintsJTextFieldTb);

			java.awt.GridBagConstraints constraintsJTextFieldTa = new java.awt.GridBagConstraints();
			constraintsJTextFieldTa.gridx = 2; constraintsJTextFieldTa.gridy = 2;
			constraintsJTextFieldTa.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTa.weightx = 1.0;
			constraintsJTextFieldTa.ipadx = 79;
			constraintsJTextFieldTa.ipady = -1;
			constraintsJTextFieldTa.insets = new java.awt.Insets(8, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTa(), constraintsJTextFieldTa);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelTable;
}
/**
 * Return the JScrollPaneJTable property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JScrollPane getJScrollPaneJTable() {
	if (ivjJScrollPaneJTable == null) {
		try {
			ivjJScrollPaneJTable = new javax.swing.JScrollPane();
			ivjJScrollPaneJTable.setName("JScrollPaneJTable");
			ivjJScrollPaneJTable.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
			ivjJScrollPaneJTable.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			ivjJScrollPaneJTable.setPreferredSize(new java.awt.Dimension(130, 70));
			ivjJScrollPaneJTable.setMinimumSize(new java.awt.Dimension(130, 70));
			getJScrollPaneJTable().setViewportView(getJTableCurve());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPaneJTable;
}
/**
 * Return the JTableCurve property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTable getJTableCurve() {
	if (ivjJTableCurve == null) {
		try {
			ivjJTableCurve = new javax.swing.JTable();
			ivjJTableCurve.setName("JTableCurve");
			getJScrollPaneJTable().setColumnHeaderView(ivjJTableCurve.getTableHeader());
			getJScrollPaneJTable().getViewport().setBackingStoreEnabled(true);
			ivjJTableCurve.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
			ivjJTableCurve.setColumnSelectionAllowed(false);
			ivjJTableCurve.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTableCurve.setGridColor(java.awt.Color.yellow);
			ivjJTableCurve.setShowHorizontalLines(false);
			ivjJTableCurve.setPreferredSize(new java.awt.Dimension(151,98));
			ivjJTableCurve.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTableCurve.setIntercellSpacing(new java.awt.Dimension(1, 0));
			ivjJTableCurve.setBounds(0, 0, 151, 98);
			ivjJTableCurve.setRowSelectionAllowed(false);
			// user code begin {1}


			ivjJTableCurve.setIntercellSpacing(new java.awt.Dimension(0, 0));
			ivjJTableCurve.setShowVerticalLines(false);

			String[] cols = { "Ta", "Tb", "Tc", "Td","X", "Te", "Tf" };
			javax.swing.JLabel c1 = new javax.swing.JLabel("Ta");
			javax.swing.JLabel c2 = new javax.swing.JLabel("Tb");
			javax.swing.JLabel c3 = new javax.swing.JLabel("Tc");
			javax.swing.JLabel c4 = new javax.swing.JLabel("T");
			javax.swing.JLabel c5 = new javax.swing.JLabel("d");
			javax.swing.JLabel c6 = new javax.swing.JLabel("Te");
			javax.swing.JLabel c7 = new javax.swing.JLabel("Tf");


			c1.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			c2.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			c3.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			c4.setHorizontalAlignment( javax.swing.SwingConstants.RIGHT );
			c5.setHorizontalAlignment( javax.swing.SwingConstants.LEFT );
			c6.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			c7.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			
			
			final LineLabel blank = new LineLabel( LineLabel.NO_LINE );
			final LineLabel fSlash = new LineLabel( LineLabel.BOT_LEFT_UP_RIGHT );
			final LineLabel bkSlash = new LineLabel( LineLabel.UP_LEFT_BOT_RIGHT );
			final LineLabel bottom = new LineLabel( LineLabel.BOTTOM );
			Object[][] vals = 
			{
				//the columns and the third row must be a unique instances of their object for rendering reasons!!
				{c1, c2, c3, c4, c5, c6, c7 },
				{blank,  blank,   blank,  new LineLabel(LineLabel.NO_LINE), blank, bottom, blank },
				{bottom, blank,   blank,  new LineLabel(LineLabel.NO_LINE), fSlash, blank, bkSlash},
				{blank,  bkSlash, bottom, new LineLabel(LineLabel.BOT_LEFT_UP_RIGHT), blank, blank, blank },
				{blank,  blank,   blank,  new LineLabel(LineLabel.NO_LINE), blank, blank, blank },
				{blank,  blank,   blank,  new LineLabel(LineLabel.NO_LINE), blank, blank, blank },
			};


			ivjJTableCurve.setModel( new javax.swing.table.DefaultTableModel()
			{
				public boolean isCellEditable( int r, int c )
				{ return false; };
				
			});
			((javax.swing.table.DefaultTableModel)ivjJTableCurve.getModel()).setDataVector(  vals, cols  );


			javax.swing.table.JTableHeader th = new javax.swing.table.JTableHeader();
			ivjJTableCurve.setTableHeader( th );

			ivjJTableCurve.setDefaultRenderer( Object.class, new ExpressComCellRenderer() );
			ivjJTableCurve.getColumnModel().getColumn(0).setPreferredWidth(10);
			ivjJTableCurve.getColumnModel().getColumn(1).setPreferredWidth(10);
			ivjJTableCurve.getColumnModel().getColumn(2).setPreferredWidth(10);
			ivjJTableCurve.getColumnModel().getColumn(3).setPreferredWidth(23);
			ivjJTableCurve.getColumnModel().getColumn(4).setPreferredWidth(23);
			ivjJTableCurve.getColumnModel().getColumn(5).setPreferredWidth(10);
			ivjJTableCurve.getColumnModel().getColumn(6).setPreferredWidth(14);

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTableCurve;
}
/**
 * Return the JTextFieldDelatB property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldDeltaB() {
	if (ivjJTextFieldDeltaB == null) {
		try {
			ivjJTextFieldDeltaB = new javax.swing.JTextField();
			ivjJTextFieldDeltaB.setName("JTextFieldDeltaB");
			ivjJTextFieldDeltaB.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldDeltaB.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDeltaB;
}
/**
 * Return the JTextFieldDeltaD property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldDeltaD() {
	if (ivjJTextFieldDeltaD == null) {
		try {
			ivjJTextFieldDeltaD = new javax.swing.JTextField();
			ivjJTextFieldDeltaD.setName("JTextFieldDeltaD");
			ivjJTextFieldDeltaD.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldDeltaD.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDeltaD;
}
/**
 * Return the JTextFieldDeltaF property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldDeltaF() {
	if (ivjJTextFieldDeltaF == null) {
		try {
			ivjJTextFieldDeltaF = new javax.swing.JTextField();
			ivjJTextFieldDeltaF.setName("JTextFieldDeltaF");
			ivjJTextFieldDeltaF.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldDeltaF.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDeltaF;
}
/**
 * Return the JTextFieldMax property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldMax() {
	if (ivjJTextFieldMax == null) {
		try {
			ivjJTextFieldMax = new javax.swing.JTextField();
			ivjJTextFieldMax.setName("JTextFieldMax");
			ivjJTextFieldMax.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldMax.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldMax;
}
/**
 * Return the JTextFieldMin5 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldMin() {
	if (ivjJTextFieldMin == null) {
		try {
			ivjJTextFieldMin = new javax.swing.JTextField();
			ivjJTextFieldMin.setName("JTextFieldMin");
			ivjJTextFieldMin.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldMin.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldMin;
}
/**
 * Return the JTextFieldRand property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldRand() {
	if (ivjJTextFieldRand == null) {
		try {
			ivjJTextFieldRand = new javax.swing.JTextField();
			ivjJTextFieldRand.setName("JTextFieldRand");
			ivjJTextFieldRand.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldRand.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRand;
}
/**
 * Return the JTextFieldTa property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTa() {
	if (ivjJTextFieldTa == null) {
		try {
			ivjJTextFieldTa = new javax.swing.JTextField();
			ivjJTextFieldTa.setName("JTextFieldTa");
			ivjJTextFieldTa.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTa.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTa;
}
/**
 * Return the JTextFieldTb property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTb() {
	if (ivjJTextFieldTb == null) {
		try {
			ivjJTextFieldTb = new javax.swing.JTextField();
			ivjJTextFieldTb.setName("JTextFieldTb");
			ivjJTextFieldTb.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTb.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTb;
}
/**
 * Return the JTextFieldTc property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTc() {
	if (ivjJTextFieldTc == null) {
		try {
			ivjJTextFieldTc = new javax.swing.JTextField();
			ivjJTextFieldTc.setName("JTextFieldTc");
			ivjJTextFieldTc.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTc.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTc;
}
/**
 * Return the JTextFieldTd property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTd() {
	if (ivjJTextFieldTd == null) {
		try {
			ivjJTextFieldTd = new javax.swing.JTextField();
			ivjJTextFieldTd.setName("JTextFieldTd");
			ivjJTextFieldTd.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTd.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTd;
}
/**
 * Return the JTextFieldTe property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTe() {
	if (ivjJTextFieldTe == null) {
		try {
			ivjJTextFieldTe = new javax.swing.JTextField();
			ivjJTextFieldTe.setName("JTextFieldTe");
			ivjJTextFieldTe.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTe.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTe;
}
/**
 * Return the JTextFieldTf property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTf() {
	if (ivjJTextFieldTf == null) {
		try {
			ivjJTextFieldTf = new javax.swing.JTextField();
			ivjJTextFieldTf.setName("JTextFieldTf");
			ivjJTextFieldTf.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTf.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTf;
}
/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
/*	com.cannontech.database.data.device.lm.LMGroupVersacom group = null;
	
	if( o instanceof com.cannontech.database.data.multi.MultiDBPersistent )
	{
		group = (com.cannontech.database.data.device.lm.LMGroupVersacom)
					com.cannontech.database.data.multi.MultiDBPersistent.getFirstObjectOfType(
								com.cannontech.database.data.device.lm.LMGroupVersacom.class,
								(com.cannontech.database.data.multi.MultiDBPersistent)o );
	}	
	else if( o instanceof com.cannontech.database.data.multi.SmartMultiDBPersistent )
		group = (com.cannontech.database.data.device.lm.LMGroupRipple)
					((com.cannontech.database.data.multi.SmartMultiDBPersistent)o).getOwnerDBPersistent();
	
	if( o instanceof com.cannontech.database.data.device.lm.LMGroupVersacom || group != null )
	{
		if( group == null )
			group = (com.cannontech.database.data.device.lm.LMGroupVersacom) o;
		
		Integer utilityAddr = null;
		Object utilityAddressSpinVal = getUtilityAddressSpinner().getValue();
		if( utilityAddressSpinVal instanceof Long )
			utilityAddr = new Integer( ((Long)utilityAddressSpinVal).intValue() );
		else if( utilityAddressSpinVal instanceof Integer )
			utilityAddr = new Integer( ((Integer)utilityAddressSpinVal).intValue() );

		Integer sectionAddr = null;
		Object sectionAddressSpinVal = getSectionAddressSpinner().getValue();
		if( sectionAddressSpinVal instanceof Long )
			sectionAddr = new Integer( ((Long)sectionAddressSpinVal).intValue() );
		else if( sectionAddressSpinVal instanceof Integer )
			sectionAddr = new Integer( ((Integer)sectionAddressSpinVal).intValue() );
		
		Integer classAddr =  new Integer( getClassAddressSingleLineBitTogglePanel().getValue() );
		Integer divisionAddr = new Integer( getDivisionAddressSingleLineBitTogglePanel().getValue() );

		StringBuffer addressUsage = new StringBuffer();

		if( getUtilityAddressCheckBox().isSelected() )
			addressUsage.append('U');
		else
			addressUsage.append(' ');
		
		if( getSectionAddressCheckBox().isSelected() )
			addressUsage.append('S');
		else
			addressUsage.append(' ');
		
		if( getClassAddressCheckBox().isSelected() )
			addressUsage.append('C');
		else
			addressUsage.append(' ');
		
		if( getDivisionAddressCheckBox().isSelected() )
			addressUsage.append('D');			
		else
			addressUsage.append(' ');

		StringBuffer relayUsage = new StringBuffer();

		if( getRelay1CheckBox().isSelected() )
			relayUsage.append('1');
		else
			relayUsage.append(' ');
		
		if( getRelay2CheckBox().isSelected() )
			relayUsage.append('2');
		else
			relayUsage.append(' ');
		
		if( getRelay3CheckBox().isSelected() )
			relayUsage.append('3');
		else
			relayUsage.append(' ');

		if( getRelay4CheckBox().isSelected() )
			relayUsage.append('4');
		else
			relayUsage.append(' ');

		group.getLmGroupVersacom().setUtilityAddress(utilityAddr);
		group.getLmGroupVersacom().setSectionAddress(sectionAddr);
		group.getLmGroupVersacom().setClassAddress(classAddr);
		group.getLmGroupVersacom().setDivisionAddress(divisionAddr);
		
		group.getLmGroupVersacom().setAddressUsage(addressUsage.toString());
		group.getLmGroupVersacom().setRelayUsage(relayUsage.toString());

		if( getJCheckBoxSerialAddress().isSelected() )
			group.getLmGroupVersacom().setSerialAddress( getJTextFieldSerialAddress().getText() );
		else
			group.getLmGroupVersacom().setSerialAddress("0");
		
	}
*/
	return o;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	// user code end
	getJButtonFahrenheitCelsius().addActionListener(ivjEventHandler);
	getJButtonDeltasAbsolute().addActionListener(ivjEventHandler);
	getJTableCurve().addMouseListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMGroupExpressComEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(357, 389);

		java.awt.GridBagConstraints constraintsJPanelData = new java.awt.GridBagConstraints();
		constraintsJPanelData.gridx = 1; constraintsJPanelData.gridy = 1;
		constraintsJPanelData.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelData.weightx = 1.0;
		constraintsJPanelData.weighty = 1.0;
		constraintsJPanelData.insets = new java.awt.Insets(6, 5, 131, 16);
		add(getJPanelData(), constraintsJPanelData);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * This method must be implemented if a notion of data validity needs to be supported.
 * @return boolean
 */
public boolean isInputValid() 
{
/*	if( getJCheckBoxSerialAddress().isSelected() )
		if( getJTextFieldSerialAddress().getText() == null 
			 || getJTextFieldSerialAddress().getText().length() <= 0 )
		{
			setErrorString("A value for the Serial Address text field must be filled in");
			return false;
		}

	String idRange = com.cannontech.common.util.CtiProperties.getInstance().getProperty(
		com.cannontech.common.util.CtiProperties.KEY_UTILITYID_RANGE, "1-" +
		com.cannontech.common.util.CtiUtilities.MAX_UTILITY_ID );

	int res = java.util.Arrays.binarySearch( 
				com.cannontech.common.util.CtiUtilities.decodeUtilityIDString( idRange ),
				((Number)getUtilityAddressSpinner().getValue()).intValue() );

	if( res < 0 )
	{
		setErrorString("An invalid Utility ID was entered, the valid Utility ID range is: " + idRange );
		return false;
	}
*/
	return true;
}
/**
 * Comment
 */
public void jButtonDeltasAbsolute_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	if( getJButtonDeltasAbsolute().getText().equalsIgnoreCase("Deltas") )
	{
		getJButtonDeltasAbsolute().setText("Absolutes");
		getJCheckBoxDeltaB().setText("Abs B:");
		getJCheckBoxDeltaD().setText("Abs D:");
		getJCheckBoxDeltaF().setText("Abs F:");
		isAbsolute = true;
	}
	else
	{
		getJButtonDeltasAbsolute().setText("Deltas");
		getJCheckBoxDeltaB().setText("Delta B:");
		getJCheckBoxDeltaD().setText("Delta D:");
		getJCheckBoxDeltaF().setText("Delta F:");
		isAbsolute = false;
	}

	return;
}
/**
 * Comment
 */
public void jButtonFahrenheitCelsius_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	if( getJButtonFahrenheitCelsius().getText().equalsIgnoreCase("Fahrenheit") )
	{
		getJButtonFahrenheitCelsius().setText("Celsius");
		isCelsius = true;
	}
	else
	{
		getJButtonFahrenheitCelsius().setText("Fahrenheit");
		isCelsius = false;
	}
		
	
	return;
}
/**
 * Comment
 */
public void jTableCurve_MouseClicked(java.awt.event.MouseEvent mouseEvent) 
{

	int col = getJTableCurve().columnAtPoint( mouseEvent.getPoint() );

	if( col == 0 )
		getJCheckBoxTa().setSelected( true );
	else if( col == 1 )
		getJCheckBoxTb().setSelected( true );
	else if( col == 2 )
		getJCheckBoxTc().setSelected( true );
	else if( col == 3 || col == 4 )
		getJCheckBoxTd().setSelected( true );		
	else if( col == 5 )
		getJCheckBoxTe().setSelected( true );
	else if( col == 6 )
		getJCheckBoxTf().setSelected( true );
	
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame = new java.awt.Frame();
		LMGroupExpressComEditorPanel aGroupTypePanel;
		aGroupTypePanel = new LMGroupExpressComEditorPanel();
		frame.add("Center", aGroupTypePanel);
		frame.setSize(aGroupTypePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main()");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseClicked(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTableCurve()) 
		connEtoC4(e);
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseEntered(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseExited(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mousePressed(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseReleased(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
/*	if( o instanceof com.cannontech.database.data.device.lm.LMGroupVersacom )
	{
		com.cannontech.database.data.device.lm.LMGroupVersacom group = (com.cannontech.database.data.device.lm.LMGroupVersacom) o;

		Integer utilityAddr = group.getLmGroupVersacom().getUtilityAddress();
		Integer sectionAddr = group.getLmGroupVersacom().getSectionAddress();
		Integer classAddr = group.getLmGroupVersacom().getClassAddress();
		Integer divisionAddr = group.getLmGroupVersacom().getDivisionAddress();

		String addressUsage = group.getLmGroupVersacom().getAddressUsage();
		String relayUsage = group.getLmGroupVersacom().getRelayUsage();

		getUtilityAddressSpinner().setValue(utilityAddr);
		getSectionAddressSpinner().setValue(sectionAddr);
		getClassAddressSingleLineBitTogglePanel().setValue(classAddr.intValue());
		getDivisionAddressSingleLineBitTogglePanel().setValue(divisionAddr.intValue());

		getUtilityAddressCheckBox().setSelected(addressUsage.charAt(0) == 'U');
		getSectionAddressCheckBox().setSelected(addressUsage.charAt(1) == 'S');
		getClassAddressCheckBox().setSelected(addressUsage.charAt(2) == 'C');
		getDivisionAddressCheckBox().setSelected(addressUsage.charAt(3) == 'D');
		getRelay1CheckBox().setSelected(relayUsage.charAt(0) == '1');
		getRelay2CheckBox().setSelected(relayUsage.charAt(1) == '2');
		getRelay3CheckBox().setSelected(relayUsage.charAt(2) == '3');
		getRelay4CheckBox().setSelected(relayUsage.charAt(3) == '4');

		if( !group.getLmGroupVersacom().getSerialAddress().equalsIgnoreCase("0") )
		{
			getJCheckBoxSerialAddress().doClick();
			getJTextFieldSerialAddress().setText( group.getLmGroupVersacom().getSerialAddress() );
		}

	}
*/

}
}

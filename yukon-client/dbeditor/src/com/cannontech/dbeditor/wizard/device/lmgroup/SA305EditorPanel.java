package com.cannontech.dbeditor.wizard.device.lmgroup;

import com.cannontech.common.gui.unchanging.StringRangeDocument;
import com.cannontech.database.data.device.lm.LMGroupSA305;
/**
 * Insert the type's description here.
 * Creation date: (2/23/2004 5:33:06 PM)
 * @author: 
 */
public class SA305EditorPanel extends com.cannontech.common.gui.util.DataInputPanel {
	private javax.swing.JLabel ivjDivisionAddressLabel = null;
	private javax.swing.JLabel ivjGroupAddressLabel = null;
	private javax.swing.JCheckBox ivjJCheckBoxSerial = null;
	private javax.swing.JTextField ivjJTextDivisionAddress = null;
	private javax.swing.JTextField ivjJTextFieldIndividualAddress = null;
	private javax.swing.JTextField ivjJTextFieldSubAddress = null;
	private javax.swing.JTextField ivjJTextFieldUtilityAddress = null;
	private javax.swing.JLabel ivjRateFamilyLabel = null;
	private javax.swing.JLabel ivjRateHierachyLabel = null;
	private javax.swing.JLabel ivjRateMemberLabel = null;
	private javax.swing.JLabel ivjSubAddressLabel = null;
	private javax.swing.JLabel ivjUtilityAddressLabel = null;
	private javax.swing.JPanel ivjAddressPanel = null;
	private javax.swing.JPanel ivjAddressUsagePanel = null;
	private javax.swing.JCheckBox ivjJCheckBoxDivisionUsage = null;
	private javax.swing.JCheckBox ivjJCheckBoxGroupUsage = null;
	private javax.swing.JCheckBox ivjJCheckBoxRateUsage = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay1 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay2 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay3 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay4 = null;
	private javax.swing.JCheckBox ivjJCheckBoxSubUsage = null;
	private javax.swing.JCheckBox ivjJCheckBoxUtilityUsage = null;
	private javax.swing.JPanel ivjRelayUsagePanel = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JTextField ivjJTextFieldGroupAddress = null;
	private javax.swing.JTextField ivjJTextFieldRateHierarchy = null;
	private javax.swing.JPanel ivjRateAddressPanel = null;
	private javax.swing.JTextField ivjJTextFieldRate = null;
	private javax.swing.JLabel ivjRateLabel = null;
	private javax.swing.JLabel ivjFamilyField = null;
	private javax.swing.JLabel ivjMemberField = null;

class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == SA305EditorPanel.this.getJCheckBoxRelay1()) 
				connEtoC1(e);
			if (e.getSource() == SA305EditorPanel.this.getJCheckBoxRelay2()) 
				connEtoC2(e);
			if (e.getSource() == SA305EditorPanel.this.getJCheckBoxRelay3()) 
				connEtoC3(e);
			if (e.getSource() == SA305EditorPanel.this.getJCheckBoxRelay4()) 
				connEtoC4(e);
			if (e.getSource() == SA305EditorPanel.this.getJCheckBoxDivisionUsage()) 
				connEtoC5(e);
			if (e.getSource() == SA305EditorPanel.this.getJCheckBoxRateUsage()) 
				connEtoC6(e);
			if (e.getSource() == SA305EditorPanel.this.getJCheckBoxGroupUsage()) 
				connEtoC7(e);
			if (e.getSource() == SA305EditorPanel.this.getJCheckBoxSubUsage()) 
				connEtoC8(e);
			if (e.getSource() == SA305EditorPanel.this.getJTextFieldSubAddress()) 
				connEtoC13(e);
			if (e.getSource() == SA305EditorPanel.this.getJCheckBoxSerial()) 
				connEtoC9(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == SA305EditorPanel.this.getJTextFieldIndividualAddress()) 
				connEtoC10(e);
			if (e.getSource() == SA305EditorPanel.this.getJTextDivisionAddress()) 
				connEtoC14(e);
			if (e.getSource() == SA305EditorPanel.this.getJTextFieldGroupAddress()) 
				connEtoC15(e);
			if (e.getSource() == SA305EditorPanel.this.getJTextFieldUtilityAddress()) 
				connEtoC16(e);
			if (e.getSource() == SA305EditorPanel.this.getJTextFieldRateHierarchy()) 
				connEtoC17(e);
			if (e.getSource() == SA305EditorPanel.this.getJTextFieldRate()) 
				connEtoC11(e);
		};
	};
/**
 * SA305EditorPanel constructor comment.
 */
public SA305EditorPanel() {
	super();
	initialize();
}
/**
 * connEtoC1:  (JCheckBoxRelay1.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JTextFieldIndividualAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC11:  (JTextFieldRateFamily.caret.caretUpdate(javax.swing.event.CaretEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jTextFieldRate_CaretUpdate(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC12:  (JTextFieldRateMember.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC13:  (JTextSubAddress.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC13:  (JTextSubAddress.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC14:  (JTextDivisionAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC15:  (JTextFieldSubAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC15(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC16:  (JTextFieldUtilityAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC16(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC17:  (JTextField1.caret.caretUpdate(javax.swing.event.CaretEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC17(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JCheckBoxRelay2.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JCheckBoxRelay3.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JCheckBoxRelay4.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JCheckBoxDivisionUsage.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (JCheckBoxRateUsage.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JCheckBoxGroupUsage.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (JCheckBoxSubUsage.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC9:  (JCheckBoxSerial.action.actionPerformed(java.awt.event.ActionEvent) --> SA305EditorPanel.jCheckBoxSerial_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxSerial_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Return the JPanelAddress property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getAddressPanel() {
	if (ivjAddressPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Addressing");
			ivjAddressPanel = new javax.swing.JPanel();
			ivjAddressPanel.setName("AddressPanel");
			ivjAddressPanel.setPreferredSize(new java.awt.Dimension(338, 237));
			ivjAddressPanel.setBorder(ivjLocalBorder);
			ivjAddressPanel.setLayout(null);
			ivjAddressPanel.setComponentOrientation(java.awt.ComponentOrientation.UNKNOWN);
			getAddressPanel().add(getJTextFieldUtilityAddress(), getJTextFieldUtilityAddress().getName());
			getAddressPanel().add(getUtilityAddressLabel(), getUtilityAddressLabel().getName());
			getAddressPanel().add(getGroupAddressLabel(), getGroupAddressLabel().getName());
			getAddressPanel().add(getJTextFieldGroupAddress(), getJTextFieldGroupAddress().getName());
			getAddressPanel().add(getDivisionAddressLabel(), getDivisionAddressLabel().getName());
			getAddressPanel().add(getJTextDivisionAddress(), getJTextDivisionAddress().getName());
			getAddressPanel().add(getSubAddressLabel(), getSubAddressLabel().getName());
			getAddressPanel().add(getJTextFieldSubAddress(), getJTextFieldSubAddress().getName());
			getAddressPanel().add(getJTextFieldIndividualAddress(), getJTextFieldIndividualAddress().getName());
			getAddressPanel().add(getJCheckBoxSerial(), getJCheckBoxSerial().getName());
			getAddressPanel().add(getRateAddressPanel(), getRateAddressPanel().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddressPanel;
}
/**
 * Return the AddressUsagePanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getAddressUsagePanel() {
	if (ivjAddressUsagePanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder2.setTitle("Address Usage");
			ivjAddressUsagePanel = new javax.swing.JPanel();
			ivjAddressUsagePanel.setName("AddressUsagePanel");
			ivjAddressUsagePanel.setBorder(ivjLocalBorder2);
			ivjAddressUsagePanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxRateUsage = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRateUsage.gridx = 2; constraintsJCheckBoxRateUsage.gridy = 2;
			constraintsJCheckBoxRateUsage.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCheckBoxRateUsage.ipadx = 16;
			constraintsJCheckBoxRateUsage.ipady = -4;
			constraintsJCheckBoxRateUsage.insets = new java.awt.Insets(0, 1, 1, 16);
			getAddressUsagePanel().add(getJCheckBoxRateUsage(), constraintsJCheckBoxRateUsage);

			java.awt.GridBagConstraints constraintsJCheckBoxGroupUsage = new java.awt.GridBagConstraints();
			constraintsJCheckBoxGroupUsage.gridx = 1; constraintsJCheckBoxGroupUsage.gridy = 1;
			constraintsJCheckBoxGroupUsage.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCheckBoxGroupUsage.ipadx = 34;
			constraintsJCheckBoxGroupUsage.ipady = -4;
			constraintsJCheckBoxGroupUsage.insets = new java.awt.Insets(5, 3, 1, 0);
			getAddressUsagePanel().add(getJCheckBoxGroupUsage(), constraintsJCheckBoxGroupUsage);

			java.awt.GridBagConstraints constraintsJCheckBoxSubUsage = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSubUsage.gridx = 1; constraintsJCheckBoxSubUsage.gridy = 2;
			constraintsJCheckBoxSubUsage.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCheckBoxSubUsage.ipadx = 34;
			constraintsJCheckBoxSubUsage.ipady = -4;
			constraintsJCheckBoxSubUsage.insets = new java.awt.Insets(0, 3, 1, 0);
			getAddressUsagePanel().add(getJCheckBoxSubUsage(), constraintsJCheckBoxSubUsage);

			java.awt.GridBagConstraints constraintsJCheckBoxDivisionUsage = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDivisionUsage.gridx = 2; constraintsJCheckBoxDivisionUsage.gridy = 1;
			constraintsJCheckBoxDivisionUsage.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCheckBoxDivisionUsage.ipadx = 16;
			constraintsJCheckBoxDivisionUsage.ipady = -4;
			constraintsJCheckBoxDivisionUsage.insets = new java.awt.Insets(5, 1, 1, 16);
			getAddressUsagePanel().add(getJCheckBoxDivisionUsage(), constraintsJCheckBoxDivisionUsage);

			java.awt.GridBagConstraints constraintsJCheckBoxUtilityUsage = new java.awt.GridBagConstraints();
			constraintsJCheckBoxUtilityUsage.gridx = 1; constraintsJCheckBoxUtilityUsage.gridy = 3;
			constraintsJCheckBoxUtilityUsage.gridwidth = 2;
			constraintsJCheckBoxUtilityUsage.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCheckBoxUtilityUsage.ipadx = 62;
			constraintsJCheckBoxUtilityUsage.ipady = -4;
			constraintsJCheckBoxUtilityUsage.insets = new java.awt.Insets(1, 3, 19, 58);
			getAddressUsagePanel().add(getJCheckBoxUtilityUsage(), constraintsJCheckBoxUtilityUsage);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddressUsagePanel;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GF6FBABB2GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E15DFD8BFC945575BFEA502829C68D08B5EA54D853B6EA34D823220DEDECE325B576071556E8E9CBED5A4616EA6CAFDA7EF57202G8B8492C810G4BCBDE1BF7409082A4E48989D9C8000861E1E513DD1205CDF659EC489292781FFB6F1CBB3333331BCD147E69BF1F4F494C7D5EF34EBD675C475C1939F3D748DD9516191A16AB882919027877E92AA0E43CA588AF3DFE5D5F90EB90749AC176379AE811F0
	FEC7869C5BA04F7926DE13AD04DD4C0234955203BF54EB7260BCC7F868E2468F6144CBB989AFC056390F7E643B1C989716B31B26DBF404E981109D309020E982A93FCB17AF625110DEA01E93CACD930430D4425337A2DF062FCBE5FCCEB886826953884FF53A82B1BF91B042A3G1E1B46F8F5F01CC32D9BDBD5A9721D3CADC2C87E69ADE973C9D9B27DC8C122EC14F8548ACB53C8A05205B7776861D85DF236F3D7072D3B28435853E36BF11ABB3A0ACC6DE61345E9F39475DB860C8ED31149FC5E52E1AE32F6F7
	BAECFD762A2AA33565A5DB77D21696E30F592ACDA7365F3DA20B6A855B212CC80A652CA471B24179A0D0C8BA5A7F6A7CEA513E1033914234872F71EA7F0CF4E6F7EE06E43F75694B193199C4FFA42D8FA2578A69A0A0E6CB328EED494AC4DBFE38107056C03A8D484E719B33899E8869B02068CC34F1678634316D62D3C2CA7B63E98B3D58981F49ECCB4914ECBC99B7A5FD99EDB30681D26F953320DCA0ABD0B0D094D0BC50F25AD6E7DF588C475AF6E71D2D3B5B56D3EB376F311A9C87ECA633954E2B2AA0C744
	8E1BBBEC8E13A030769836C227E28FD262AC7736C808797639006DA7727023025379B0ED93CA5FA63E961CB6D35411BDDB72ADF0B6095B06D5A4EEA5F0CE64B61098D23C0E6213E5B82B2BE534AD10743AAC3D66549C0CF35B82344510710010DD7A3D3459AA36CC78E1C4DA68DCE643443912ADAC461F8C1298CF83FCA6D06EBC3DC687E4G324E43989F3AD0BEDC0C9B217DBBFA0C56A3FD6DF6234339274FE2B5199DE22C1F50790A359AB13918914B3138C4144B6BA861FBCF2846A5A1624E3440F9AC9EE173
	24383032BF70DAF64CBC4F3631005761B65AA7264CE3F5184E719A0ACF17612CEE63E85FA269E448EB534018C679AFACA278A48D63DF4D755CCE712C79924E745CCA7513F4AB641DDA2057307A0D9DA26322F5A168858A830A861A8A148C14150DF59CFA21584FFE54A22BDFA67B5940D2B81ADDCE0731312757E96C69B09FB5BAAC46F62B39D790F97EBDC0625A6EA657C17BF78714314F5CE3F6981D96DB8FE8B7F61B21B175B29E6B40A24263B0535CD6CB37998A68368B2857B910C37CB376BABF331B0CCE33
	4441728787C81BB8EFBC8A9AC18169B559A4DECF51B1F7A31C6B33B1D6FF3FC430D0C8CF64F1795F0145F0EC0246ED36D6D569AD9D448C236382365142D586B84691BD0B741A98206A4590E3206A9C3DE692D0F5AE24012A17409128F2A99C012A73A09F28BA9F46B42036E5D0AF4B30EF7F358D5B30FE7EA3026E3547D55BB0A157472CBD86FF2CEC430D5436E840278225G65AF0772015A00DCC093002201268225G6597C0BED09B108BE882D0B450D42014823C162FDAD9126AE987311D9C094FA49E641C78
	B6127ECB0844A7CA14A3B1C31C4450179C093BAA1EA761A446A4762AFCB95E75133A2D964B1F14674EC76A1A543B9B3644D3970BDD0FEA6CB608470562D830C06C4BA30D9DE947EB4573A5B2BCE79839B9DE7095327375826BF3EAFC73FD684E24FE3373D50A3CF9E2DC64D81E973F9689DF8AE40C4BDF2157D4G352E40BEDAF6D1AB5031EB0F31570C23D53383869A33C96A310C37F8104458FC5E5C63541B6D669E931C740AE34536C19287F19CBBED93F00C2926B8392E5541C0534B71BD030B988EBA6423A2
	666F2779C62753E1E96FF31A0F181DCECBCF27A4FF185A526BF6496C95FDB52692DF2D60E3GD08877750DC1D217B89E99EC3633FD76D6B2520A63DAF6A19943A200BFE68576576AECB2971F4E5375B4AD657FFCE11B0F7AA3F2A3ED071E6D7E0FBE4BC87F8A7A25B2AEAF2A91589819AE363B59E25B1EA7365105826B8B4B44BAD8A136C95257368215F3DD9328AEE125DE33912885488594869487B483A8FF15DED3835485948C948DB48DA8CB2B5714G35E9B13E633209D14359256C27EAB68E9707F2510F2F
	924BABC5AC96D3E9ACFC4581478AF9AC48D816270849F0652D96BC471B2B05D8DF7E791077316835A17531680DA175316837C33E471ABF8D290DB5ACEF4690298BDBFF0FEC6CFAFF084CFBBAECBDBDE6BA00F291015D837F351578E16931B8BF3718BA4D4EA31681B30CBBDAB2867D1C4E2D4640F9089667B37DEBF1BE33EE605BC24C17C12A77CD939E7AEEDA12160DB742EAE9BE43EC7A47A5B2A61A2D66EE88D41D2D2F47497019F45EA6623D6994BBD057C3E4B76E2F6BB2F71C5DE3F39DB6DB0D97CAF5C66A
	CD91BB34189D27ED0EEE33E9639963F9E311315FD9C4EB232816E66FA5671B3405053B344A9BF75DE90B435C58E36F93271D9BB79D5DD4425AF50EF0DD2ADA59E5D7326CD2AC7B35CBEAE517DF49324B306C0F0E2B15DDF1A54BAE47323B1B7A5C4B56DB4EDB480C7F33DEE32779CA1AD0A1208D791B4EA97C8716ABDE7ED6DE7E18158E7772771127CED75C00EDD87E06F43BFB79C77A5A2FF8691F3232B76A7BD9592DB0E656DB4CD6D3E30F891A00294FE82DB5199C665EDEDD874C541CC5743FA8CF8CF09575
	7643D0A95AD0C7F2C7E842F6517F4FB759A49B40F7AC77CA767BB2316C142AF3D25958762F346325653C6D9D3BFCCE91FFD9G2ED879D25F0BD95627A87FB32745EAF1DE3862B6C87DAF672853FB8C2EE8A3E065DF2A6BD514CF87007FC0AD3072DFBF5625A83F744A953A0D15F93D69EE4518E3F6D80C562FAD5CE75C75FED92BD0E8702EF18739B6EE93E37367CEE55BA09707860B59E1F4F4F4DD3862F13AFCB2C4257C2F2758B3EEBA3F2C13E9B378D2C78334155D6F062411391D9666FC95C00655F83F6B3A
	CC7271FED73C292F33D92DECDA8AF9D12B491CB3E8D52EEC9EE9DA4D5EB1AD6079514364CF9FA6BFDB6BBB3FFA187C2EE172C306490F99A6BFE9187C7C553E73752A79A9F0E479AF8EA37FF755FC4D9A14F72C71ADFF6FB079BF9DA67F9F2A79DADEFE7FDA5F728F2A66D72C41F6E896326158EBBE57E76E69B01387AECD668B780CDAD82C48BBEA3476C94F3E1D747E56AAFBD643704ED4757B196ED472FC66AC57FFAEF516C01EE1B31D6C7EAB4AC8F45A9D16EE236382F978A43EAB5DD0A8FFD75AG7613772A
	01F08C85E23291F94497E5B7B62CA572D39761FB540940BF99A8C95421DB4B624578C297A35F84C8C72D7546571203FC7110CE744A17110BFCD96B205E56F9630B66FCB5405366154F3A8479DC40936C15CF3B94792200A74EAB5F944E1788BC42FAEFFC01F94827851ECA203675EAFCCD794897827911C013D57996AEC3BE4DA7FA4D3ACF3C697B916753834FC92FFC7D9FA35FA07004F8655B321C378360198C1474099A5FDFB95F468DFACD8D50298D0CAFEC031C6F098264CB82BCE3A3783211711D5A4878A2
	B6923EBF70F761459C1BC931B7E68B420D99780E6FC0367CBD3E29B7DC75F982ADCF54AFECD23E7BFCA91D685582DE32897B79DFD2654FD7EBFBFBED9D967A6AC96C335FCC13BFEBE058FDE9F36188975FDEA75CF418DD586F9FCAA33612F7D3A2AC765D6FEE59A9F83EEBE3DD919FDF577553CBE42B2D4EE6B2B74050D1479F459C3518493D8E0B43D03DFCBD402405F7254D7392873D683FC99687ED5C14F4765E7F62EA0CFB78A6DC8B30F18DE2899CABDC0BD86EE644FE4DB143E69CE36E2AA27786EAEBA4BA
	2853C51DFD1622BE1822D7D5690DCEA31D3550E1C8E0BAEF234F31092E004D385E6039927ACE9452D3001200583B4F54459A11B7E30BDED33D85477CC9AD72B15D89F8A8D08C901B93F5ADAE036348E70AD80F311B9633FAD7CC3A30EE9E4829914B1E7C6883C275658155F590018B835226ECE1F5B2F30BD4B74E5F7CA8BD90087978A27731C127570C51210F13CB54FC0C56E1ECAE64205CE440B28AD16EDF45EAF25505A8D7180BF2AD0085F23972A65518F2395FF239A900E90AD06ED821D2CE8FF9DDC5A8B7
	EE894A8D82B6114BDDFBDCCDAE094BB5AEC5B92198465BE214B3F8440548590BD16E7FF039G40A6F139C7BD62C26412395C63F9A817D58263DD894A7D25DAAE6782BC8CA836845BDAFEBE994FC6B85D965F6DBB73314C2920AF3B944BFC2FDE2D4C06D2AC730D7C5136EFD6EE65B2AC77A4688C6165BE2CD3ABF7F2A946A8094BCD83AC3F8C65AA0A5464DA4AD0AE6CE314B381964A65A6142849CD61F22D4BD1AE91B0EDB94A0D7310EB033C41F20C4F334BC7DFA7F985D8E6B0680B63E5EA9B156D0758AAD4E0
	19178A3E5A18736421DDF07CEAF725D83FEFF09FF241BEC3857A90B9CBADEE815C07BDABC693B7E6FF495E9D447E515FB162BA2CB27975BFE65A842F577F8995ECCC0D2CD0DE7F9F49A45718B84093AA707A2FCDA76FD1707AFF982E38461ECE183173F7B669A486B0B797533FC8A765523939006F297FCC63B783F4EA3642BC87289A6864D6AC63D846306B29763AFC2C279A33FAA46B22863762FB4842B5A3118B66F2E5EBC7A2974E65FEB3A239E8AEB73ED0A9B7F92B748EFA1A6C1CDFC3695A2852D2521E13
	373235D133B93E13621AED924E5A7F0F68FC022457C1DE60B6ACFF76E2E579C95B5C4B4C7A54BD4D6416F84895A952BA059C6B933B0E12F6C167CA3246DFD5451FE90977F6CF385D5B69BFE56F783B60B878A94E455EEBA1ED1A3CCB8D799457B555E41139F78A24F3ABE17E8E54GE4858A840A2C44F6991121B6AFF5EF175EA625525A87960B17C79943DF8D9B4349156EF24C6F74D274FBFAA55663651C5159708D8FB9258D8D5B55EC58DA02B61C5A0EB614670E4E06DA8FB9258D312AB61CE9A2B610F9E682
	37610F2334617DE1ED2829F217E36D74D233DABBED83DEEB95365360C234B3208A6D3CFB49686C7C36071C524E44AA35D8BDFD1C58C06E77049DE8C3735251597005071C5286538EB59B2EAB41B88CF29B5273C6E743A28FB9258D53D4ED78C3B15A1042EDF8EA14B63CB82C8DA72B554640759B499825B286721982EBDB67CB555A1693F486D6E35BDA33937BE1D8B57AB310BFBAFF82BD64147EE46CD40B6966FD4486B2D7A95809B66CDAB6BA9B8C9EF2CA9BDAD5EDF8CB07B6D8398D6F0E5286616361EC88D7
	3561EC915AB0095B70AD8FDD7E59B0F1D89B12D5EDF80576B172DCC4338BEDB83EFCF4B6F4F948A9ED506FD29B938FF80C09643E60A4705AF7E13B1D4C4702C0EE670A0251593945C3EE25D24FAE35D8FD5E08314A580DB67CF614B67CEDD89B2AF72B59707BD9D92C4D892D3BF18EB3E68E4122A19D379B67AB1919240F63DC3D45E669A16F58D85E93196419394DE1693474A0769445BAEC8E3A5009E16F4E723E866B03D96AEB30BE1A253E86ABF3366F752073E7FBDB234556EE5EC91F41CD857F12019826DF
	03D8D68DE20DEB91AB6058BFB8D64231C768B5D6CF529C3B090E7503108E29417A7D144E0F23A19D8FB40363F594A76D14BC83A14FF9987ED209FCADA7111357618CC5DAC971436433B2FE67D606F2FD28F24D3012B20749DFC1F53E34F4A12D2F5EDEF3AF1D5812A711E25E9F1DCB841575EF870D5DE6815F776FDABCC764596B3455158AF8ADFBEF93696BAA57B259B7DFFF26F5C37C505462734D549692EFBD24CF82B9EB79FC6010F26DEC906405550A5F7454FA0FE71CA2AF8152B3941838D6B94BFBBFB814
	255E8FBE4FA27D2F57566768B0AB5B7A3F3372F91EF4175068B4F713900A6F3F283C536868B4FB74159EAA4F723C4977E7F96BCF2CFE52F26475D3465BD6D629B21E99FB741A7CBDACAE3ABD5E63D92348EB05F41782E3E5FF5F2DECE9DDF1D509326CC1108F96F5047BA8BBDA11B7995253D44BBE13ABAF3B0217EDEBD2161D8C72D9F5CCC701F8AC297334C12F405AA0ED2DD3ABFB6592F959E4ED8CEB6F5FEF4676BE268E5B7BCF0F50F1875271C009F5FC3DF42152CEC18F772EFAD65EC63D176FB7GEFD164
	19A06D522B59798BB7BB377198BDFF5C232F01FC1828E322CA59F100A5G4DD064E56C05B685245BAB61621A15257232BF65E587FA340D9A10ED95653B762A7BBD88F830A2AF9C5251FB557C2E4A1317DD494B7EF331326C49A0BFCD54116C256C2CFA3886553B6715C0DADF2FD676DF73664A4AAEAD413671E8A94EB95A6A31ED5CDACC5AC6B024A300E26A31EDEC582934F3EA3D77BEA327A4609376C93C39F03E9128FA1F32FE9E4FF733339CE3D43CCFBE1FE981B99310CB148F5A67E9875357374CCDDF856A
	7B3D5BB706E1A0BF91A8CE541360D55F260F5D74EDC5FD76A2393E99A01F51GED30C19C579A3C69FB53DD5FB654B725C42E2F8664DB013A008601023D6A3BED391B3ECF311E47B6637DF6F8835673C17A9EA62B916640C0150DD84F2F6FD056F3CB23787E920E2EC675BA8F82BCCC11B79152F10DEA6D3135C05E9736733EF032D16EF782484EG4A584FF46443D137DFCDDF7E8AB73FCBD1DF62AC0FFEAD4A374231EB3F17FE8DF8B0D038ACBF9A4EA7AB785935F06C9C72EC534553B75274858167A466DA424B
	2E27FBFBCC62E4193DDFFF144EBB9FCE93043169081D20734E4FC1781F29081D22F34C5E8CC1A8CDC3EC7EBA025D81FC97D2B18E3105E41EEDB5DE3075C19906A67A2E01BF3B1C867627GE9812FE8E2776F4C46477B4998F05AE16C064B78913B39C358E8A032779723EC8870C7G4581A582E599701D44BDF42EAAAEF52473ACF1ADFE7FA289270B1159DBE634752643E45EC3972A4BF2457B97376750F6A8AB40A045FE0241335E587366BEBA0F0BB430674DF3B8FEAD4563E4B8FB8EBD1B62A4BD9D729A8E60
	DCFD7DA1925BC8C847F02C07E2D3A0BD1DE37FC33199104EBA085889FAAFD9GE99D47628F615C3F06E31114AF9852919C5BDC0A65CE62D8CFA9169B4F31D7CA315C840E2D67654E60586243D8EEC6B3E2E6DEEEAB47CE16E039DD9C8BAB41F287B9164A4B8D64D8ECB1169B4A317199D8EE94472EF1E239C28BE237B5E139399CFB0DE29BA1DD4931AA83162B67D8821D4737C15A49317DFA34E58C47F44B79FD9747C29623AD53DBF05CFB36D95E66D2G579C125A19761037B6377DB8E9C39507D85B1A4771FD
	94EF15612C4D45533997C9BBA1EF6AA13469A96ACF75E118CB9DC66C1F94B3C15A49311374394E98C8CF60D8A5650B04F49C47F6D0AC8152C99C5B5C0C31900EA0461E8737C03A0BE3530E23AD039C5BF482ED896658ADA75016D00E9DACA3D89424E3B9F6E7995AB715E331A55CBE0E69DC5C3ED6444A294DAD10B6F1EC2899EDF6F16CBBA5E8F390477EDA02B607F12C3994ED0E6458C0895A974331735C3EA99CFB0F7763C40EE9CB50164A4F9053F0DB8C9CEB61361C625863A5E80B15E39B0A5016B19CBB46
	6BB204E3F6DE17919C7B892F4B144F30DDFF2F945B3566A80C7DC095C7D9DBEE006349235E5AF59DFDC7E7BF4A5AEF9E47BF27F8048C97571150F9A3C9CF033C504F79B3937ACC382DCD2F3137717EC731GC807F02C0CBE370D00F48C47CE6CC39F27F0EC3001E0A910569CC36CC50AE9A1DD41317AFDD8C6834774BBBC4B685E01761D64FC51BB30DCBB47BE54F11BB936FA11273E7D0BD0DF84679B378875CD62588DC528EF9A47DE5F6329CF28C3FD491C2F298E75E59DC76CAFA528CF4731EB77FB6A1BC231
	9A60E961FC5B1BF88CB8F6D3930F41F1ECCBB7B54B67D3A100C7GCD820A871AFEDCFDBE158238660462F9A324AB9498EBDFEF51F9E94389563E96F17CEF94F74AF0F18D8A45C9BA8C72F4A7517E8FF83DC6F3CCDFCD304910CE62D8B74504AFE03E7E85E23F59CDB09D249BB8B6F510E0A7A16D645866A10CD1A0471A68B71111100E65D8EFA3564DD40EBD36926DCB62580794937E8D677FC66C4CAAAC2300E3B7EBE99D12B447664EA6189552819C7BEC36273F17E6233F93B8DFC5BA7A9B4931FC6AC78C2463
	B9F6FC31E78C2EDB0C76CD67FC61B998032CAFF12DD0FA916EFBD4GD86B17B877ACBD65767E092C1D292A5A6730187698BB8DF4A64B6EE11AE8FFA172C1DF62BD4C852AB3965289C049DF62B72F2ECFF0EDE664379E908CE31ED05D2BE9DA6BDDE91AD3623317D3529A95BBDF1B7913E2AC538A79612788763E5BBAB5B217FDB50D3D0BE0799B5C56BE11F639C910679FF34BA776BE67A6FF33DBFE26CC1E797672FA74ED664BD1027549B02F7BD0A509BEE59B59B1AEBBDFC898971B4E6AE8960DE783641DB4E2
	3D7575536B9124C3B8164C2F4951C69C87AE3610F56CD96DFA4DBA209A20136D1897C873487A75A8F15DB9D9D34E7266376078C17855468AEF34CE644F124955A8F430B2BE61E5F85BDB439B61336BF405CE4F7B4DEABA8F686EB1F75BFAAC9D016DA4CEC7A856C1DADFBB5E9B0DBDC43EA7F01ADD4E496DE42F36DF115060F7C907489C305B6832F477F5530F38191EB4BAE74F6E007E5E01FA9CA5C44FE9DB0F13718452313E8172DB0142BB887647C3FA9F3E25ABA8GE488AD915B4E84B8A74F51BF7868230F
	D819BFAA2176D9FA94763DC14BCE827E94A051F7BA27A24F67571960BE197ABA13B4FDD1A60566D7C0DE0D89E58ED2BDD6C83BCC6843264343791069430788136483AB6396DA46C440E3F839E3A956C9FC6036D664C83632FB30191017E5C619F768B8D081699AB35A7AC846F0364E76E12B5D2C3475BB747EE81014494BFD06DE03AD4487B3360524A677B675F92EE4FB873DCF0A855EF84E7FDEA1999F5802C7323C4858E3A27D134AC6AE11E4FB693D53CC104BBA0DBE56AD9F4E47B9BEFC2CBC2D7471B9FA2D
	50835EF29A4717DF30F9AC2403B9D6C677C61C8869B80EBDBE0863D052E99CCFF653B54A551DB07EG8D82058245F4E27E811A9FACFEDFC23E9DA15F2DCC67793FBC62EBEF9422EF01289FB1540F69131D5E47B171D9064FB2F0FC110FB938AF07F2DC72D687B9427F9E779C0F2651FB011700B23A30AD541CF0EFBB2F106D43C49D8F1DD09F0F46526BC4AE6850F2BD0F1611B6E5F718CF1B9D8E3309EDC1A1729BE9398660ED637CEFA846AF936589007C60AEECEB354D3E5A1A3C5F930A81B9C26B4536B6854E
	D78B7271AB24D9FD7CFA1A16BD8D78133A301FAD207731FFG4A37601870EE1E54B71E23799BA12F4202BE1969BDED2F19FC8FE9B6B13EC10A117CD396547D930A59A1BD48313F53B1A8825293AD3C2F390673BF53077F53ADCA7F77B71336E56EA11F3D1930EE1AF1BEB3035B92C9310CB3F0FE86317F21763DC25A7E990C4712E5D2BCDCF40CB4C0DE9B17F9105DFFC0BA18E377D1EC9224634E201FF3079D63FD55F38A6859AB484714C6DAC646D9B8BF0B65327500AF927B4F227DED9FCB767F1A669BA02F0D
	4B34307BB1C887F36CDA5AD6A6C1BA6EAC5AFF034FF62A3CC6F958FFD6E97F8CDAC606954E2DB8567D1446371A24B96624FCD6C80F61588BF43C8F07F4B447EA8EFA4E795714605819E045312F113EE350F543D88CE4878A861A88B485A899A83BC72FA981EA83F276205C97D40EFC3F968CD8D48F7B66AD3E07FDA3B72307FDD3C73E3FA35F2411756B629A4362A8B816083A14F1A365352960F2A2F691FB3D655BFD64A1CD7403A7D80CC9B677792754F6B2C9D05BA30DBC47DEB20C4E79026F3D3606DBD7C1E8
	1E9FBCF384E95FB7B68E34B411F7A3C62B253307FCB9F78C7B0003BE034936C13D59F0CCCBABF59F271F23BCAD10FF12735C355FCDDF9B6AFB1CBED788823EB0A0767E40318F5F9F4483B69DA8438E6581696D286F0E864FF16ABB8DB80E1AB8DF824548AE3F0413713D47791CF66C33B6765C8752419C9B3F83FD0D3123ED2F6CC05B12G934E41758D28866854B914DBCB7B5C98C887F12CF7916A1AF48EF5C5AEC2DD09004D84AAF068B555C0A79DA897C54717C112665826BA54956DC0DD6DF528EBBAE0A9C0
	793D501F005AFAD1AE1F0E8FAEC88774E2FC7E325F7D5AFE113C0E926359550465CC6C45F26EEF626F05GCB864AF542758D2855495FD150EB039352019CCB28227776100E615809EAFC16B11DE35FD2F956728AFF56124279628BF02C5374A1767BBC4F67D61AFC9C43341C2FF0991DCFC27AE49F765569CB35E4AC00F490D084D09CD092D046F910852ABC0F3C6FD35E96C85B01024F336FED234E336FE46361B803739EDFBA864799D1B751B9DCFFA4C44A4373B8AFB291BEF4E9C5798CEE4B9037852FB77E0C
	8D8B84E90FB79CABC6BA9661FEF973F95BDAD30DEDAB3B9F5B626787493C3B4356ED37754098516C3040FF7AB1AF13B9C72FD155405F40E55E2ED61FFF0E277A8701AF10731EEC70BE7F4C2A21778E409B43797FB628BEE64D264F6F1200CFF0E13F289D42FED182189E488494G946EC2FD45656AF3CBA7FDE6968BFC71AE6C2B2174595FCCC8E7DDC0EC6ACA0CD965855439E815FB7F7D00BC96935F43DE338AEDB2813F8BE882D0B450D4AE7F0016FE8BEDF31849166764A6CF3C07244F8AD300AFE3GF9D78F
	29DF934A693341F540D7B90036BECCB193246D9C7B02BEAF8C05F4845719F0487D5AD1CBE3B18572278DE0EC3F39987D483E885781A0BD1089A860A26A7E99FDF6988E69280B585E67382D2F700718DC5EA865DAC6AC471ED1B751F7A0899759B36AD40E37D2BCD10633E7221779B351E448EB9B44B53789F45F7DC9101E8AB483A8EB88E288249F42B5388B66168843FCB354EA339B4C674DD65912D8665F6462516D6F7D42ECFC76B871196F8851571F727A4DFB5B909B33DC62715442FC0AB37FEC34BDC7C0DE
	ACD0A210F0892EBFC03ACB685F5139BA669F79BC3F5669B4F6F451AF7F51B972B13E8413C58B2C9D2EA8A2EBA05AED8E3A28112D0128A842F6D7837A5B00C200A2AE313535CCAE285FF36D44037DA897F3092D1D188A47A4D10E5D8F4C3BB0127B360C4BF0BD3F4C1E1110348E4E493A57B779FD5B40D1B246AAF6CF9467F259FD1EF9388FD9CE16E7DE3918373A4CB38F770EBAF3089CB714EE906BB82CDF7EFDE7655CFB3DFE5FD9F919552DC1BCD66C4997F53CF2C22EA37B1B01E929DEF4840832411725676F
	EC7C8BA13733B807ADA16B57FB4C7DDA7EF92D5E8255CE36DA5B78E909CEDBD636891FE90D79C4120BBD34C6A9D78F835446B5A60B51EA6BDC235302ECE949A636DFA9195F537909784774BDC83608967D7A2D865BFF41F79F94742F1FCADB6B452FD8511F5CB112DFA113AEE7B21D87B6C9B6BE6617EFE2DD15523AAA5BA05A56271374FCBC02983DDAA4494DBA6CEF0C18ECF231941B3CD2C94FEF0B7D77A334047AD10EFE6CAD1374BC6D179EA6F7FF05A4F7D346487C085DAA79714FED121E25CD7E7B71EA93
	7523827DD8D9A969F93550FFBF26D6C9F25A65A373E3CC352C2D6E1474BC3450FFBF7E546CB9E68AADB876994630B15384C7579876CD8213EB3C68B9E61E3A08F241E35818998147C9229C9BB36386C7728CE58A48A60E11464C19F07E8E0C177F64E36624EDE4BF904F5DBF513FB9ABF36479526E1CE2FEC36FA2F9BE6E1E49E3394135D41E6F3643A9725CDF3AC44EA3EE0208FA58777D4F2A6E4511F58D4673FF8BE9FBB2E1FB7A71AE29BE8BFD35272D65EE6DA9F937A4D7B2823916BD125C4A662FBEF67656
	C9676375126EFB7D3209712EBFC1E3624018BC3DD752D3D7663F1EBB4A687C5A51E7E6FA926AE5E30E2F31D391234AC6D9DFF50D2C2F1E58AF493A1AC99BBFED34761AF90CAEB5C97945FE59A43ECBE463E9A74668FE032447B6825FDEBAA4491D9D01DC55C5C96E0FFEDFF3196C9703D29B99B3A469394D57F5C0613F01795F0E7EBFF8C952D3D0643F9FBF3EAC499D9CC13FD913A649197C6EB76235AFDD723FABC352D3BD02BE725BD26F77439F52E7C585B046EC64634C4D051E637D83FC1DF06BB5EC3C3742
	F14CB56CFBC9A6B75560B95E7F4D00F29300B78AE8BAD00AA847467B6DA57EBC7347B1BF7BDA38B73CD69A6FAB617C3B90615778BA675D47C9195EF61CE5BCF71FA5E312FB0E4158EE360ABA86F610B1DF3ECFAB4B657DE6F029DB99F2CE64B9C777AED4EC7ACB550863797CDC5421E0E279631A493CDC5A2BD6EE5F091ADC3772A5AE167F3EF639DB3E472E4B221E378F394D7D593EB5E25E469DE4C18239DC4A57EF33EB55F3867935CAFFAD2B4F2EEBF12F1A67362B658F727CCBFA357CE01E9F37D8ADBF9C0E
	EA5793E66F0DBB35F0647D218E9FB09535B637FCD9EBE85CF770405E032D627CEE16A477493E2FF2ADE3BA62762FD6AF5B30373ED5AADC40EFAEA66C43F7ED5157625A219F6FD32E9DA2778FE4B24E72D376A9578E75274A73B7B7A8578E3D69A6FF32C139F628D014E7BE3C500057C0161E5B68FECD544F117C2D5C61EF4C987FA3BB7C299B961B77F7707710BCB6EB2BFD476633EAE5EC563B456606EAE5ECF63B49BFDD2D0C4D87E2BE73BDEC1E647B12C5A3737D26C57E7B7E0BC5687B466B50F7E131EF5F4B
	96ABFDF72FF753E25F3E0FDF6C5BF74DC2497717770C4C771ABA7FFD8F2CC35FCFF15F3FDF675B7744BA256F635C72BF567B765D20776DBB3DF590FDB93FFFE43EDFEE725F771FB4216F93386F6FB77976FD03C1697BA1377CE3865F3E5FEC7066BB337FC7AA77FD3F667BA544DF47668109F01CF99DFB174B645E2B721C874C656F53F28358BCC087471AGA64766A2817CDDC1DBGE27F22D8G2403B97681FDA7B48952F181786CF8EDBE6ACF86ACEBAC60C08DC0DDE351AE7DB2756772A769FB22C0608B613C
	6F537D8748356F00393B5D6C10DFFBEF4C473CFAE33745FAC11E772B76C5E29E5DC33C236B027B3C61692D649D31175D46C51EB0BA50129CF7598B038BBCE479F83C0178466C2119A23E3306604C8706336BEBE11E727ACA6AA1E6ACDEFFFF3ECFADFF8A4F8F1C25161F4873A3875572E772FC5DC5357C6C6BB1BF21D9ADFF5D75D8BF5B2B7D69DB2C8F9F4B117A70E3C56BD565E4AF210ABEBB58F430797303FC8C202E0872D3F67B18F717D7C07F7F144F5D6FDBA2497DEC509FB96F730B15C3A31BDFF48E61F8
	D2F9BD0EA76306FC0FA7BF997238063A65FFB0249CCF763A65EF39249CCF6E9764E3698FE56B49EE75AB9ECCEE73B2C96E41152B15F2EC8C2EA593D79802CB45A1D8647F5BCAFF5A890B59432BB0E6F69E3357D6790E59EC2DB2E66EF3326DDAE54C5EF313BF2BD546EC03DB4C02BF16FCAF27FDC2660B5566A8EA379ABB4EFAEFB77BE77B5FCF3E37DC125B146EFF7D7C32C0121BFF49FF3932D5125C41457EDEDBD9DD45AC463A0A60F57557E166C95A9CE5DD9DF34BBF1C633BFD876478EE5F1FE9A5FF96DE74
	A78E6CFD5BA17A4CDCDCC7A0BB9FDB64EBED68D7A5D6463DD7348C762E6E8FAB3C6FE11234C2FD8F13F7D7286F65133242776F2989AB3D7F1E5A6C15725FD3E36F9A57535FC71886EDE8A61076863D2682286186FC4FB8EEA5E91764D7F6BD5FB16EB5F512BDD448AF6BBA31FC57AA6F3EDEDEB57C6F71862EA26F5E5BEDCE272D1B68C77C16D5243E1CB6BB8599F647AA92A30725334B49D8C57CAEBA0ED94D27A94C5EA51F246F12C95BB401EF21B76077B54F517744FE6D875EEAF1DA4DFB68EC107541F03AE6
	096EA9FD837FCD7273249CCDA0DC2B012A83717B1E177B71DDF6ABE0C1013837D60E8B7BF1ECA06A28F5915E19104E3D916609B72A5D734F582D0631FE98CD2ACC2CDFB37DB6DE8FBACE5D08F53AD93B850EC70DE7BCF7F8873045E1331B9D4E8B8C253F98A16ABA35CE60B136EB57FB5381ADE3BF74796676B3668EE72B31135BB2FEBDF94EB5866C88850A811A8A148414F113DE138F24832A81EA83328385GCDG0A841A84948FB47DA674A3F143A69FFE089FC951866AB032BD38D8DDECEC413610823ACAEE
	463A3037E0FDF65D0CF5F1F9006EB58569E820781B31BE83AFE2FDA69279A05491FF916B33AD88F57C0B7286C3BA82A8A6E8247569206FD8197EF7691ABB42B7B588576E0E5BA888B86EDA8A350277F1373CD227ADAB7FF4937361270598076AEF68B54EEF208F0BF93B0E7C867A3040C0F827C3FAA6D06EAD98073C8398879DE026DB30DFF52ED9AF6FD716766E223E735DC546F6E791D924D8D5F5304FEAB50837C822EFDF9E4058055E0265FE036A1F8269A4200CDBC75C97683BE4F17F2B53DE763F2237994C
	06E43AE6180CE18537E2BC1237930C5CC70C615813FA4422B97651E2141DF1AB2E4D3947EDEF967F2FCB9F6E981D5C6B0BC6A7770D3A5149CDEE9A299CEBB7E93C8F368643F8980CB15C4F7BE0ECB03601CDD5F4BC04F46EEDB0C65C06ED2FEC8736BDBDE00337210E817E7CEC62ED28A30272A6C1BA63F63D2660F63C0F3AFB8477D1EFEC167A590B85BE7AD969566DB041A9AB5D44647E35C5121B1A670F9C7323B19F7D28389D67F87D794AB91E7BFC7A5B793E1F093C116F71CC44ED3EBEFF19F20EF7ACD5BE
	47DBDDA879D23A54FFDFCCF9B8EED9EF47FA4AECC0AC1EE3BF1805FD28628E44FEBF08FC93B856F19131199C4BE9C16CD48876BF6B50685AF5642A51493D6831CF34FFF34442555E67CD952B071FB76DDC4D56FFF71ADBAF5845FD68762C26FBCD1EBE5DEB667333FD2B33B956585BE26B3510DBFEE6FB7B306B7AE2C3543EA9358FAB275CDFD35C9F194ACD8B71EF1DF0B2703175025B68DCAAEB1CF29D61EE0A670ED32EA30CBB0F630496728246E15BF835FFF4F57C1BD14A653BC637EE72C9BA9FCC747077F9
	0AA7FB783B4F057E8A63611ABC9E67CBE756921D7C5E01CD6D44F6415E55115FCD067BCD4BGFD90F48498FBBAD97EF756FBEF1F0F2F9F3EFDBE33DEFDDE9F335EF3DE7F62FA75F97D4B6B6573FA06452FA7E3D4A74C755AB85FEB9CBB4631DFD31D847B5CE2F2F6F1FC9A350B608DE6D2A062EFD33B7AA956A6E2FF11E14770B72A5713BE86AEF759785E2D6F2F27EBFDADD62B38DFAB653174C017637178973551E2B74A6CCE7F8431E33C4D94350C2ECFD68FAB275EA77B28DC5CF87F7AE442F86C136F51F972
	0C714AB6BA1362B347AB5B685881EC23D9F76AB556BB31CF5EF2F1F4FDABF414F22F0DD80E796598A476475F297477A245936ED47A1BB1486F97A04FB0817D7DDF0FBDA523A0AFF6820B7F54891E75108418F0974C056EF24F5B8869EA2096994E4A0877785D8A7F5A50DB434A2937A1362E5CF417FFED48F5973621EB69BDC650DD4A185ECC7189F7A9E31AEB401806C3DE56B7795E5487C65796360CD24EB4E2B966D76AC1E23F751BCAFF67D25C75CD253FF770FB2DG48CB647EFEE0D036A1435DF03FFF37FA
	7C1DB2BCD0BC8F950FD1F00C3DDB2DADFC30DD6E63D460C98292C245F53CF05C982AA6770CDEAED78DBCADC0A611578547A0D5390C9C25CFE140B7D1419B976A69E302821B81690CFB741A7CFB147DA2EB14E36B52D10E2D4DD4CEF70FFF7D22669E6C9777507B1F56FB146D64DB94BFF50F321D94D7E1BB31C2DE7CBD58CEAAC7F9CFD9BFCA394BA316E3FE95D4937BAB6ED57A3B1E62B577AA7DFD145F879AA0AF6ADE74772047EFA478E737A5CF5976F26F0376FD1F385F41FD6A75578238C9116702F490D098
	50C4B10F15B137C1D9C69C64A708BCB33C141191866DB84CBDCF87699A20D6202EB0F999319E7BFB8EC2FE3048939E26DEC6B4601395F953A01D9C265697928715E5E45D8F7757770B7B865D2FDE069E70B6C51E9552E300C200A26E177B51F5D1D946A4480F97F9260B479405BE4D83F0DF7800BBD681698620138FA847027C96E599F660899079A60847C8053E98C8CFD1E009101E89147D2004333D5BE3F248BAC4CB0F5552E3A63FD4344F5CA3609E7BB174195BBA1029FE106F15F61EFEDF8CE9530358262B
	49CFEC0AB66F151D7F7C7C15FFD772477FC0994F3AA41FE2E56787DCD73E6C53D7348CD627C17499059D6AB31057736C817A3DA02423F8BDFFB0A0791EF6D1BA3FF9604A47A17CBFD006EBD072699A5979DC0F71646BAFFB6D95AD035569B25A1FA7C1FD4673FAEE2758F4C8A7F36CA7949342E1DC8FC72C18E2BAC857F04CC531D6C85BB9F6A35BA78652A19C8B14763D64586FA9DF8A24B58F71BDD129BEAD24ABB9D6C4B18324CD9C9BCF57E539A09D74905F434CA05557ED32730FBD6621DFFF5D157F874A18
	FDD072A9DBF6FE5701ABDF7693D7348CD6274B8F60FE8493F8BD1F26D8A424A7F16CE50A45C1BA11E32B683769E42F46199C5B30152EDB7B16DED372AD44AEEE45F62867D8BBFD0F528569C10EE5D7213EE00EE569503EF00E9D21D8B42463B8962D43B226F06CD72C2DC3DA73B0E22F6A318CAD47AEEE46B2AAB876E30AB510B44736EC41B2CC9CB350F283A19D4A31CFF2D0DF94474ED1AC9652D3B876CB0ACD03F4C684AFA3976D4B67583D3B31DC9D47FEC03F5DEF013409E3D93534FFC2FA8247CE53EBCCA4
	24E3B976B80D7DD4C8A7C5E0BFFE30CAEA5B1132732DD5D73E1D9F7C8F143126DA72E90B6CFC22479E7EDFFF59BF3B22E5087B1C66E11BCB61757CCB0AE93E8DF370EFA336A39F77955948313D745D8B5953341AE38D8D588EDBB8F6221437FF0E31FD3C82A19D4A3197593E56100E67D8FEB9ED07D046F40E699A384D9C6B271866BBE073F778BEAA8D5CE60E9D5D47ED661865G3719E37366F31BB926DBC0ED06F4A8477A96204DD19C0BD900B647F26C6DD9E83334976DC23A6F43D460C964FCCE3EF7ECB247
	D6EFC11B333E4B478ABA2FAF00340EE32FEEC21BEBB8766EE63445443139F4DDA3594756453193948B02F4A847E2065016880EAD3A0836CC62580BF4DFCE3A0FAD473E2BC1DB26F3ECB20DE9D6A454D1A4E2CBE82CCAA05D4231AE9EBF9347EE22653AA09D4C31B7A8968E69099C2B99C41BE3B816F904E0D3A01D4231E3C7508F4DA308B551BDA83510AE6158AD7D7C9A443147DCE8DF97474E33B99324C3B9D65562E9F387452200A706734535204D13B976C531274D5797234D53B8DF8D37B919E37D5C662CC7
	911B40ED56F12C4E4DE676BE7675A2720E43C916A911350382FE6376B7BA2F2B81D9432348EBBC1F093C823E5B559791D744F526AD6A3A1E257E8E021EC02EEB6500272E4EE2C9D789AD5FFD7F45FD94FB83A81A6B39D0643E474BCDA5120E370A54773F7987559387BA26F0BD7594F35FFB708B0A510F899FC33EDB0B3CFF9798C179330137007307953A6F6172FDBA57E8007C564770DB3E7B065D7F0EDC9F70DBBE657EF7812007FC64A96DD378E121677EDF85FC2F67E0EEDBF3117A5A7ECE4A9B8EFCD11CF7
	2F17F642E214GFC091C7711A64F3AFD046EEB40E474F47CA55FAC64C7214C508177FA0C176DDF703B8364BD63F93343E969B0DA49D2FEFC874D744D64EB0074D1783DC3831DF3BAA1BD061731EB6BA2191EDA5C2B075B55369575C4C561B79237EF65FBFA81168C147BB84C7F00DA9F67EDF03BE73C0337E35BF1BE0EB6EDE773D6C887F32CD4073108617A4E685CE3719E7949B5F15F22D7F4FC0FB560971E0079A9D08D5029A7D0FE06CA7D4F66EDF94C93D87607F40E9B8C69D00E05EFC6FBA6F3FDEFEEF637
	E779CE491EBDDB501E946057FC8F469BA0831075FBA85F217334E7C0077684FD8F4BEE4E4132C339ECE00EFB593BE45F6F3F13C35EA1F7599C1681E8126EAD036FDD150BF59A474BE925D88A24B3A6E2BDBF399B7D28G2C81288BA890A8E2A25A724B9ACFBF5E29C1BF62B85F2A5A9CB73B2416A63683BA7FA6FDE4AA179972B2F60E23E3E74613F07EA47246ED776CDF465DD27F1A1807F12C61B26F643947B120C662B751391E95F8DDCFE20C7A68DCAA9C52D19CBBC73184C8A7BE4977A3643FE11C7FFD28FB
	A0831095A8687BFCBF42B2157D88793E2E111CAF214CF75C7ED106F11B74FD34E99F1DAFA6C2BA19E31FB5207F5A27D077AD8D6E7EBFD1AB791FC97793B3GEF5BD32863B25B739052419C3B1D0EB313A09D77947A3FE6BEEF7F00E922A186C086A0EBB416DD3740537F638BF87B0FC67D77AEC07FC2B976A70A45C1FA8A577749ECF7DFDE5BA379F28F1BCFBE8D36BC0DBA765379E4A52475CF230E1D675D2FCBC7687C528E7903CF23EF091B5037C840E2002681894FC0DC1FC15D4B296E9AC89BB8361D4EA349
	1EE72EE778FE6BC36EB62754C9B67F09720783EF9457D1C567FA8910CE64583BF45E197BAC147FAC5A78C38D5A58821889A8GA89CA876D9AC7B7773BD637F61FC0C7FF44E27DB603B7D55737AC9FE96ED3A0DE25AC9D06F13D04F7D97557702FB1A7A5486FCD64E7B6EC545583AD70A0B054EEDA7GEFB867AFB8B27C1877699134B3FE925FF717E2B3A11D759C6AEAAFF6EF83AE36A7BB6457BC0771FD086F57E587ACGA89CA896E87AF3FC6FBDBA574CF89E4E1FC75D5FE8769D4B07793E4955DCE620C5B156
	57CB3178BB9D872D406BFA9E4BFD0C5A9B8E69A80ED9A816G6944675107DB388F79BF00FA82B2GD90102FE00F2AF3079B22423FF00EB243F59A0DDEBF61D77639B2A0ACDFCBC7E07ECDF12FFDE70D716717F3B089CB7F4635E9B4B8C122EF5FE6D3D41F81DC56E5F225B8ECAFAAE0DE0AF0EDF36C8F203A35C0B6383597EA765C51E7B33949C1172470D4026D5327DC1EEEA9AD9FCCF9C508A432F5FE53CB987719BC2F169F75191729FBFE169AD2A83563D0739BFC1327DC616EF9D59F7F7362D7E1645562EC6
	73796A749F60DA5F3737AA577A12F56E64A60D6567EFD32E757D4CADFF7FB665DA5F575C728737A9577A6277E24C0707373B37B9BA759373E6EE99D9BC9AF47E5413387F018EE3D1904377BFA8749D0B4F8A15313853AD7F06C25F31F83A50F7ACD6AA7ADF20ECAF885B66114562594D7E4722EB8B46221547E27C965F31085B220C057BFE889FEE719D8B1D4EF7ACEE53396F13F1BA477FBE38AAF7E4FDF03AEC5F095BF77B9BE7963BB7F6E36C02F86C6654780E5D0E9AE56C5C7751682E719D3B7BEAFC47AE23
	56BDF63F2CDF65BB9E647BE6B196B58B24D8BC34FDE463644BF97E5491AB27C3365FC5D5032FF13CD2AC0449DDAF7B7D1E1DA3107B2BEC0F096652E17CAAF32F638925D847313C0EFFDC2A2C6395EEF514D22A2C63475C72B717A96B384FAD7FE419320ED1BF736105B277BA1EDF6EFF9DAF15FDA37E78BEFFE248F82D8D7E576F76BC290CA63F4AE0F2A773A539FF9F70DF6EC732EF38BF520C2CFE9B66E37D4E6475FBFE3E6F7A0D182F2C5F9B5C72FFBD5FF77DEA96782E5FF38B5C6B7749857E576F5B32EF4C
	4F4E72BF06F3D6485A45E67F65F4ABA53965677D178B54CAF2AFEE9A59383BE0B356D9458BD8E7551BFD57D94FE60FF157ADBFEC336FBA7B45E6EFF5467C792EEC3FDC174F3D7B5C7BD54B107F7D6A67EB24B2E6797A7EDD916B3F2F15641EB9643F5C8159DE3E778D572F94F5142841BA3272BADABACC3FEA7068D76E7B878C8C532FA2677B6ED70B947D6A0B9174AB7B86A996377A552F3C6F9991FF517FBA3FE323A47761E1FF76BCE03C870F786F5B8B327D10EBFC6D7B2858DFE205CE123B365F0F76D1A635
	0F177B31FD04737671C13F6F7DA53638146DE32CDB7E97AEE57BF05FDF62D61732FD386FAFD1A37B7670EC337F31FE3EF9E4F34E0EA2291C43A308777532F7DEDBC7A077BB59BE51E7C7D8CF93F9BDA570FA7A5DB075146BD1CF0F3B65578FD3CF2EE16A6995593E5315FE5593DBB3715C56D1FEAB2D9B1DDC77165149CD5BBDBA39FBCAC7A7F7E07E6864F2B60FCE6E9D4D686462C779DD6453A316A393589CE1207CCFB0330CFCC748F48AF36B7BFA680FB8EACB6509B2F922DC1E28F08A3369CE7F64AC8B779F
	F58A99E4D7B12710C9B7B48501A3FD6D3DECDFACA7DC1B049CE9A3D12D38ABE8D52FC3D86C593AEBEF79556B11DF6AF3530434C6E1D6977DEA30D1486CA71F9F3A6C60G196957036CFC371E7E627DDB5F1E7C56515EF4E1D623300CBC50E5FB12DA864CA63D51E9BCEAF6906D75429C3B4D821900B78A993D7410596B3CE0B59B045C53074D677A4C3DCE3329963F766CF58ACB8C2424E2321BC9F10331370B7ED4548E031051E36C86179733EC2B31273318FD7A39035A19DA2B95489FF990AE003DB954DE2225
	08EB49F9F6617A557B27C7278BE97542DC2B4DE82AB7F6B8ED0EC6E10E338B0254E5331ADC765DB5D4D1969D33480DFDBA28DB4E5DA74E961107605C68332EFB0266A74E2FCF938417C3A8261C6419F29167B055F5999DD014595188E404A257713CEBD6BABF79593E3C13E9C22A6864B9611230508555CA838605AF24AA094BC575E03573576F3C74409B55B312C024DE48BCCF3E10050233A52E03FDE4A7396BA3472D1897B26DE6E2171D042717E84EF18A33CE539D6860C4CF1F21A2BE4769B076741E36B93A
	21D02D42E34C6206975D71D24938EFFFF81C9AAE09BA05D52C0AC0343853EC6BAE2EBDFD5A52E3668A203EC07D8A2E1E7094A9F8963BEEDB327F350F5A21FD6905746E12927A3F147EAFA37FCBA9D2CA1152B2283499024FBFE53E4BC5FCAEF0716892CB9A69472F534E17D7257F7E4174B4A1833A847B98989AAF7922979A2F037510F4274D4E5A1D58514945A61386F29E6FB51E29799EAD15200BBC1B9C0117504CBC42CECEBE6675C5D2ABE866AA7AFF4D683C5F6222526BC4903DC87B6F7222C272C2DE9742
	FF1797BBA5AFB402FFF531D5A5F5D579344F3DE68811E7EF1943FAF1957BF4C85DA7613F5927936EBE250B197F5575E4D677C92D1E2EAA3B3BDDD71FCD3DD721CD972EC21BAEDF05B60DF5394D3554F6527D711F9F5EFBFFE847E41847B58A73ECD2861D5F4C66BD065C022F99B62574BE550B7799BE3D67B3D5360F89E3A3AA3E2630841330ACF05F24B575213C6B32EFAD6FCB93326A499459EA6FB2B60A53EB03B02F1D4E7C4C8E60F58A595294174A427DC9DA875C3CAC17708E02335CA3F6E387390519E3B2
	BA4ED28D4406BBCF88F3CEBBBA5BE981CEA16DC47D89A81626C876DD86E12E330BECDDC96EA51CC21E243A05EC94A8E6303B9F61A3A0BB7D9BF18D7DBFED1F773BD4ACA423B6F92003A3F7A6C733C4CA95645727F7GB84CF970677A48E35A8C4EF38168BEDFA9700C5EE9C3AD4E976F193574171F6096DC7C8592385196F36036939A018873DBEC2730005E104B00C5F84FAE43F2243BF5992AA1377418061BFD369BF815960AE79B06834FBC3E89B941E79189F212D6D8C87F492A77940DB1F98A61D787BC25D6
	3D3711FFF7FCCD957D3C6BEA36AED6EA067F95531B495274063C9DA01D240AC7D34D6E2BAE62D354AF16233BDCFC6D567D7A2A36EE5AD5ED5D5BD735F5C9D775B8742EB48E912B2AD4D24A38267999D71CD24D365BFA1DFDF01121B93B8C13FFF6C5C6287FB33CA7DF0FDF6464C372EF661570A3F556D775636AE877298B7FBF71A35F1B9F3E273B4CEA0D3FFE54DCF1BFD62BCDFC7F8B7D582C70C3405FD95EF4D97E7B51A9E3AFFB7D8D6A68B7599EC4135F14FEE7196D456E223FAB147516DE336EAD5C9FB4EE
	87F9416EEDCF77A35DC62B55E9341E2D6DB1117D5D77DCF01A255F9D982AA67AFB11C74CE4F98155446EB3B2197F8BD0CB878859F68738ADBCGGAC5EGGD0CB818294G94G88G88GF6FBABB259F68738ADBCGGAC5EGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGE7BCGGGG
**end of data**/
}
/**
 * Return the DivisionAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getDivisionAddressLabel() {
	if (ivjDivisionAddressLabel == null) {
		try {
			ivjDivisionAddressLabel = new javax.swing.JLabel();
			ivjDivisionAddressLabel.setName("DivisionAddressLabel");
			ivjDivisionAddressLabel.setFont(new java.awt.Font("Arial", 1, 10));
			ivjDivisionAddressLabel.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjDivisionAddressLabel.setText("Division Address:");
			ivjDivisionAddressLabel.setBounds(17, 110, 106, 15);
			ivjDivisionAddressLabel.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDivisionAddressLabel;
}
/**
 * Return the JLabel1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getFamilyField() {
	if (ivjFamilyField == null) {
		try {
			ivjFamilyField = new javax.swing.JLabel();
			ivjFamilyField.setName("FamilyField");
			ivjFamilyField.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjFamilyField.setText("--");
			ivjFamilyField.setMaximumSize(new java.awt.Dimension(34, 17));
			ivjFamilyField.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjFamilyField.setPreferredSize(new java.awt.Dimension(34, 17));
			ivjFamilyField.setFont(new java.awt.Font("Arial", 1, 12));
			ivjFamilyField.setBounds(80, 66, 34, 17);
			ivjFamilyField.setMinimumSize(new java.awt.Dimension(34, 17));
			ivjFamilyField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFamilyField;
}
/**
 * Return the GroupAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getGroupAddressLabel() {
	if (ivjGroupAddressLabel == null) {
		try {
			ivjGroupAddressLabel = new javax.swing.JLabel();
			ivjGroupAddressLabel.setName("GroupAddressLabel");
			ivjGroupAddressLabel.setFont(new java.awt.Font("Arial", 1, 10));
			ivjGroupAddressLabel.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjGroupAddressLabel.setText("Group Address:");
			ivjGroupAddressLabel.setBounds(17, 75, 106, 15);
			ivjGroupAddressLabel.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGroupAddressLabel;
}
/**
 * Return the JCheckBoxDivisionUsage property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxDivisionUsage() {
	if (ivjJCheckBoxDivisionUsage == null) {
		try {
			ivjJCheckBoxDivisionUsage = new javax.swing.JCheckBox();
			ivjJCheckBoxDivisionUsage.setName("JCheckBoxDivisionUsage");
			ivjJCheckBoxDivisionUsage.setMnemonic('d');
			ivjJCheckBoxDivisionUsage.setText("Division");
			ivjJCheckBoxDivisionUsage.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxDivisionUsage.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxDivisionUsage.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxDivisionUsage.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDivisionUsage;
}
/**
 * Return the JCheckBoxGroupUsage property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxGroupUsage() {
	if (ivjJCheckBoxGroupUsage == null) {
		try {
			ivjJCheckBoxGroupUsage = new javax.swing.JCheckBox();
			ivjJCheckBoxGroupUsage.setName("JCheckBoxGroupUsage");
			ivjJCheckBoxGroupUsage.setMnemonic('g');
			ivjJCheckBoxGroupUsage.setText("Group");
			ivjJCheckBoxGroupUsage.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxGroupUsage.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxGroupUsage.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxGroupUsage.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxGroupUsage;
}
/**
 * Return the JCheckBoxRateUsage property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRateUsage() {
	if (ivjJCheckBoxRateUsage == null) {
		try {
			ivjJCheckBoxRateUsage = new javax.swing.JCheckBox();
			ivjJCheckBoxRateUsage.setName("JCheckBoxRateUsage");
			ivjJCheckBoxRateUsage.setMnemonic('r');
			ivjJCheckBoxRateUsage.setText("Rate");
			ivjJCheckBoxRateUsage.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxRateUsage.setSelected(true);
			ivjJCheckBoxRateUsage.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxRateUsage.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRateUsage.setEnabled(false);
			ivjJCheckBoxRateUsage.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRateUsage;
}
/**
 * Return the JCheckBoxRelay1 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay1() {
	if (ivjJCheckBoxRelay1 == null) {
		try {
			ivjJCheckBoxRelay1 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay1.setName("JCheckBoxRelay1");
			ivjJCheckBoxRelay1.setMnemonic('1');
			ivjJCheckBoxRelay1.setText("Function 1");
			ivjJCheckBoxRelay1.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay1.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay1.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay1;
}
/**
 * Return the JCheckBoxRelay2 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay2() {
	if (ivjJCheckBoxRelay2 == null) {
		try {
			ivjJCheckBoxRelay2 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay2.setName("JCheckBoxRelay2");
			ivjJCheckBoxRelay2.setMnemonic('2');
			ivjJCheckBoxRelay2.setText("Function 2");
			ivjJCheckBoxRelay2.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay2.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay2.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay2;
}
/**
 * Return the JCheckBoxRelay3 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay3() {
	if (ivjJCheckBoxRelay3 == null) {
		try {
			ivjJCheckBoxRelay3 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay3.setName("JCheckBoxRelay3");
			ivjJCheckBoxRelay3.setMnemonic('3');
			ivjJCheckBoxRelay3.setText("Function 3");
			ivjJCheckBoxRelay3.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay3.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay3.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay3;
}
/**
 * Return the JCheckBoxRelay4 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay4() {
	if (ivjJCheckBoxRelay4 == null) {
		try {
			ivjJCheckBoxRelay4 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay4.setName("JCheckBoxRelay4");
			ivjJCheckBoxRelay4.setMnemonic('4');
			ivjJCheckBoxRelay4.setText("Function 4");
			ivjJCheckBoxRelay4.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay4.setActionCommand("Relay 4");
			ivjJCheckBoxRelay4.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay4.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay4;
}
/**
 * Return the JCheckBoxSerial property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSerial() {
	if (ivjJCheckBoxSerial == null) {
		try {
			ivjJCheckBoxSerial = new javax.swing.JCheckBox();
			ivjJCheckBoxSerial.setName("JCheckBoxSerial");
			ivjJCheckBoxSerial.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxSerial.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCheckBoxSerial.setText("Individual Address:");
			ivjJCheckBoxSerial.setBounds(19, 187, 121, 17);
			ivjJCheckBoxSerial.setForeground(java.awt.Color.black);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSerial;
}
/**
 * Return the JCheckBoxSubUsage property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSubUsage() {
	if (ivjJCheckBoxSubUsage == null) {
		try {
			ivjJCheckBoxSubUsage = new javax.swing.JCheckBox();
			ivjJCheckBoxSubUsage.setName("JCheckBoxSubUsage");
			ivjJCheckBoxSubUsage.setMnemonic('b');
			ivjJCheckBoxSubUsage.setText("Substation");
			ivjJCheckBoxSubUsage.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxSubUsage.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxSubUsage.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxSubUsage.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSubUsage;
}
/**
 * Return the JCheckBoxUtilityUsage property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxUtilityUsage() {
	if (ivjJCheckBoxUtilityUsage == null) {
		try {
			ivjJCheckBoxUtilityUsage = new javax.swing.JCheckBox();
			ivjJCheckBoxUtilityUsage.setName("JCheckBoxUtilityUsage");
			ivjJCheckBoxUtilityUsage.setMnemonic('m');
			ivjJCheckBoxUtilityUsage.setText("Utility");
			ivjJCheckBoxUtilityUsage.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxUtilityUsage.setSelected(true);
			ivjJCheckBoxUtilityUsage.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxUtilityUsage.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxUtilityUsage.setEnabled(false);
			ivjJCheckBoxUtilityUsage.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxUtilityUsage;
}
/**
 * Return the JTextDivisionAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextDivisionAddress() {
	if (ivjJTextDivisionAddress == null) {
		try {
			ivjJTextDivisionAddress = new javax.swing.JTextField();
			ivjJTextDivisionAddress.setName("JTextDivisionAddress");
			ivjJTextDivisionAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextDivisionAddress.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTextDivisionAddress.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextDivisionAddress.setBounds(124, 110, 31, 17);
			// user code begin {1}
			ivjJTextDivisionAddress.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 63) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextDivisionAddress;
}
/**
 * Return the JTextFieldSubAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldGroupAddress() {
	if (ivjJTextFieldGroupAddress == null) {
		try {
			ivjJTextFieldGroupAddress = new javax.swing.JTextField();
			ivjJTextFieldGroupAddress.setName("JTextFieldGroupAddress");
			ivjJTextFieldGroupAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldGroupAddress.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTextFieldGroupAddress.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldGroupAddress.setBounds(124, 74, 31, 17);
			// user code begin {1}
			ivjJTextFieldGroupAddress.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 63) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldGroupAddress;
}
/**
 * Return the JTextFieldIndividualAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldIndividualAddress() {
	if (ivjJTextFieldIndividualAddress == null) {
		try {
			ivjJTextFieldIndividualAddress = new javax.swing.JTextField();
			ivjJTextFieldIndividualAddress.setName("JTextFieldIndividualAddress");
			ivjJTextFieldIndividualAddress.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldIndividualAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldIndividualAddress.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTextFieldIndividualAddress.setBounds(150, 187, 110, 17);
			ivjJTextFieldIndividualAddress.setEnabled(true);
			ivjJTextFieldIndividualAddress.setEditable(true);
			// user code begin {1}
			ivjJTextFieldIndividualAddress.setEnabled(false);
			ivjJTextFieldIndividualAddress.setDocument( new StringRangeDocument(15) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldIndividualAddress;
}
/**
 * Return the JTextFieldRate property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRate() {
	if (ivjJTextFieldRate == null) {
		try {
			ivjJTextFieldRate = new javax.swing.JTextField();
			ivjJTextFieldRate.setName("JTextFieldRate");
			ivjJTextFieldRate.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldRate.setComponentOrientation(java.awt.ComponentOrientation.UNKNOWN);
			ivjJTextFieldRate.setMaximumSize(new java.awt.Dimension(34, 17));
			ivjJTextFieldRate.setPreferredSize(new java.awt.Dimension(34, 17));
			ivjJTextFieldRate.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldRate.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTextFieldRate.setBounds(80, 44, 34, 17);
			ivjJTextFieldRate.setMinimumSize(new java.awt.Dimension(34, 17));
			// user code begin {1}
			ivjJTextFieldRate.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 127) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRate;
}
/**
 * Return the JTextField1 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRateHierarchy() {
	if (ivjJTextFieldRateHierarchy == null) {
		try {
			ivjJTextFieldRateHierarchy = new javax.swing.JTextField();
			ivjJTextFieldRateHierarchy.setName("JTextFieldRateHierarchy");
			ivjJTextFieldRateHierarchy.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldRateHierarchy.setComponentOrientation(java.awt.ComponentOrientation.UNKNOWN);
			ivjJTextFieldRateHierarchy.setMaximumSize(new java.awt.Dimension(34, 17));
			ivjJTextFieldRateHierarchy.setPreferredSize(new java.awt.Dimension(34, 17));
			ivjJTextFieldRateHierarchy.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTextFieldRateHierarchy.setBounds(80, 18, 34, 17);
			ivjJTextFieldRateHierarchy.setMinimumSize(new java.awt.Dimension(34, 17));
			// user code begin {1}
			ivjJTextFieldRateHierarchy.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 1) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRateHierarchy;
}
/**
 * Insert the method's description here.
 * Creation date: (2/24/2004 3:56:49 PM)
 * @return javax.swing.JTextField
 */
public javax.swing.JTextField getJTextFieldSubAddress() {
	if (ivjJTextFieldSubAddress == null) {
		try {
			ivjJTextFieldSubAddress = new javax.swing.JTextField();
			ivjJTextFieldSubAddress.setName("JTextFieldSubAddress");
			ivjJTextFieldSubAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldSubAddress.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTextFieldSubAddress.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldSubAddress.setBounds(124, 146, 31, 17);
			// user code begin {1}
			ivjJTextFieldSubAddress.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 1023) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSubAddress;
}
/**
 * Return the JTextFieldUtilityAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldUtilityAddress() {
	if (ivjJTextFieldUtilityAddress == null) {
		try {
			ivjJTextFieldUtilityAddress = new javax.swing.JTextField();
			ivjJTextFieldUtilityAddress.setName("JTextFieldUtilityAddress");
			ivjJTextFieldUtilityAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldUtilityAddress.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTextFieldUtilityAddress.setText("");
			ivjJTextFieldUtilityAddress.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldUtilityAddress.setBounds(124, 40, 31, 17);
			// user code begin {1}
			ivjJTextFieldUtilityAddress.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 15) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldUtilityAddress;
}
/**
 * Return the JLabel11 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMemberField() {
	if (ivjMemberField == null) {
		try {
			ivjMemberField = new javax.swing.JLabel();
			ivjMemberField.setName("MemberField");
			ivjMemberField.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjMemberField.setText("--");
			ivjMemberField.setMaximumSize(new java.awt.Dimension(34, 17));
			ivjMemberField.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjMemberField.setPreferredSize(new java.awt.Dimension(34, 17));
			ivjMemberField.setFont(new java.awt.Font("Arial", 1, 12));
			ivjMemberField.setBounds(80, 88, 34, 17);
			ivjMemberField.setMinimumSize(new java.awt.Dimension(34, 17));
			ivjMemberField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMemberField;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getRateAddressPanel() {
	if (ivjRateAddressPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Rate Address");
			ivjRateAddressPanel = new javax.swing.JPanel();
			ivjRateAddressPanel.setName("RateAddressPanel");
			ivjRateAddressPanel.setBorder(ivjLocalBorder1);
			ivjRateAddressPanel.setLayout(null);
			ivjRateAddressPanel.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjRateAddressPanel.setComponentOrientation(java.awt.ComponentOrientation.UNKNOWN);
			ivjRateAddressPanel.setMaximumSize(new java.awt.Dimension(159, 121));
			ivjRateAddressPanel.setPreferredSize(new java.awt.Dimension(159, 121));
			ivjRateAddressPanel.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjRateAddressPanel.setBounds(172, 40, 159, 121);
			ivjRateAddressPanel.setMinimumSize(new java.awt.Dimension(159, 121));
			getRateAddressPanel().add(getRateMemberLabel(), getRateMemberLabel().getName());
			getRateAddressPanel().add(getRateFamilyLabel(), getRateFamilyLabel().getName());
			getRateAddressPanel().add(getRateHierachyLabel(), getRateHierachyLabel().getName());
			getRateAddressPanel().add(getJTextFieldRateHierarchy(), getJTextFieldRateHierarchy().getName());
			getRateAddressPanel().add(getRateLabel(), getRateLabel().getName());
			getRateAddressPanel().add(getJTextFieldRate(), getJTextFieldRate().getName());
			getRateAddressPanel().add(getFamilyField(), getFamilyField().getName());
			getRateAddressPanel().add(getMemberField(), getMemberField().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRateAddressPanel;
}
/**
 * Return the RateFamilyLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getRateFamilyLabel() {
	if (ivjRateFamilyLabel == null) {
		try {
			ivjRateFamilyLabel = new javax.swing.JLabel();
			ivjRateFamilyLabel.setName("RateFamilyLabel");
			ivjRateFamilyLabel.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjRateFamilyLabel.setText("Family:");
			ivjRateFamilyLabel.setMaximumSize(new java.awt.Dimension(58, 14));
			ivjRateFamilyLabel.setPreferredSize(new java.awt.Dimension(58, 14));
			ivjRateFamilyLabel.setFont(new java.awt.Font("Arial", 2, 10));
			ivjRateFamilyLabel.setBounds(14, 67, 58, 14);
			ivjRateFamilyLabel.setEnabled(true);
			ivjRateFamilyLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjRateFamilyLabel.setMinimumSize(new java.awt.Dimension(58, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRateFamilyLabel;
}
/**
 * Return the RateHierachyLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getRateHierachyLabel() {
	if (ivjRateHierachyLabel == null) {
		try {
			ivjRateHierachyLabel = new javax.swing.JLabel();
			ivjRateHierachyLabel.setName("RateHierachyLabel");
			ivjRateHierachyLabel.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjRateHierachyLabel.setText("Hierarchy: ");
			ivjRateHierachyLabel.setMaximumSize(new java.awt.Dimension(58, 14));
			ivjRateHierachyLabel.setPreferredSize(new java.awt.Dimension(58, 14));
			ivjRateHierachyLabel.setFont(new java.awt.Font("Arial", 1, 10));
			ivjRateHierachyLabel.setBounds(14, 18, 58, 14);
			ivjRateHierachyLabel.setMinimumSize(new java.awt.Dimension(58, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRateHierachyLabel;
}
/**
 * Return the RateLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getRateLabel() {
	if (ivjRateLabel == null) {
		try {
			ivjRateLabel = new javax.swing.JLabel();
			ivjRateLabel.setName("RateLabel");
			ivjRateLabel.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjRateLabel.setText("Rate: ");
			ivjRateLabel.setMaximumSize(new java.awt.Dimension(58, 14));
			ivjRateLabel.setPreferredSize(new java.awt.Dimension(58, 14));
			ivjRateLabel.setFont(new java.awt.Font("Arial", 1, 10));
			ivjRateLabel.setBounds(14, 44, 58, 14);
			ivjRateLabel.setEnabled(true);
			ivjRateLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjRateLabel.setMinimumSize(new java.awt.Dimension(58, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRateLabel;
}
/**
 * Return the RateMemberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getRateMemberLabel() {
	if (ivjRateMemberLabel == null) {
		try {
			ivjRateMemberLabel = new javax.swing.JLabel();
			ivjRateMemberLabel.setName("RateMemberLabel");
			ivjRateMemberLabel.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjRateMemberLabel.setText("Member: ");
			ivjRateMemberLabel.setMaximumSize(new java.awt.Dimension(58, 14));
			ivjRateMemberLabel.setPreferredSize(new java.awt.Dimension(58, 14));
			ivjRateMemberLabel.setFont(new java.awt.Font("Arial", 2, 10));
			ivjRateMemberLabel.setBounds(14, 87, 58, 14);
			ivjRateMemberLabel.setEnabled(true);
			ivjRateMemberLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			ivjRateMemberLabel.setMinimumSize(new java.awt.Dimension(58, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRateMemberLabel;
}
/**
 * Return the RelayUsagePanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getRelayUsagePanel() {
	if (ivjRelayUsagePanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder3;
			ivjLocalBorder3 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder3.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder3.setTitle("Relays");
			ivjRelayUsagePanel = new javax.swing.JPanel();
			ivjRelayUsagePanel.setName("RelayUsagePanel");
			ivjRelayUsagePanel.setBorder(ivjLocalBorder3);
			ivjRelayUsagePanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxRelay1 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay1.gridx = 1; constraintsJCheckBoxRelay1.gridy = 1;
			constraintsJCheckBoxRelay1.ipadx = 24;
			constraintsJCheckBoxRelay1.ipady = -4;
			constraintsJCheckBoxRelay1.insets = new java.awt.Insets(5, 23, 1, 20);
			getRelayUsagePanel().add(getJCheckBoxRelay1(), constraintsJCheckBoxRelay1);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay2 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay2.gridx = 1; constraintsJCheckBoxRelay2.gridy = 2;
			constraintsJCheckBoxRelay2.ipadx = 24;
			constraintsJCheckBoxRelay2.ipady = -4;
			constraintsJCheckBoxRelay2.insets = new java.awt.Insets(2, 23, 0, 20);
			getRelayUsagePanel().add(getJCheckBoxRelay2(), constraintsJCheckBoxRelay2);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay3 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay3.gridx = 1; constraintsJCheckBoxRelay3.gridy = 3;
			constraintsJCheckBoxRelay3.ipadx = 24;
			constraintsJCheckBoxRelay3.ipady = -4;
			constraintsJCheckBoxRelay3.insets = new java.awt.Insets(0, 23, 1, 20);
			getRelayUsagePanel().add(getJCheckBoxRelay3(), constraintsJCheckBoxRelay3);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay4 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay4.gridx = 1; constraintsJCheckBoxRelay4.gridy = 4;
			constraintsJCheckBoxRelay4.ipadx = 24;
			constraintsJCheckBoxRelay4.ipady = -4;
			constraintsJCheckBoxRelay4.insets = new java.awt.Insets(2, 23, 12, 20);
			getRelayUsagePanel().add(getJCheckBoxRelay4(), constraintsJCheckBoxRelay4);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRelayUsagePanel;
}
/**
 * Return the SubAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getSubAddressLabel() {
	if (ivjSubAddressLabel == null) {
		try {
			ivjSubAddressLabel = new javax.swing.JLabel();
			ivjSubAddressLabel.setName("SubAddressLabel");
			ivjSubAddressLabel.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjSubAddressLabel.setText("Substation Address:");
			ivjSubAddressLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjSubAddressLabel.setFont(new java.awt.Font("Arial", 1, 10));
			ivjSubAddressLabel.setBounds(17, 146, 106, 15);
			ivjSubAddressLabel.setEnabled(true);
			ivjSubAddressLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSubAddressLabel;
}
/**
 * Return the UtilityAddressLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getUtilityAddressLabel() {
	if (ivjUtilityAddressLabel == null) {
		try {
			ivjUtilityAddressLabel = new javax.swing.JLabel();
			ivjUtilityAddressLabel.setName("UtilityAddressLabel");
			ivjUtilityAddressLabel.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjUtilityAddressLabel.setText("Utility Address:");
			ivjUtilityAddressLabel.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjUtilityAddressLabel.setFont(new java.awt.Font("Arial", 1, 10));
			ivjUtilityAddressLabel.setVerticalAlignment(javax.swing.SwingConstants.CENTER);
			ivjUtilityAddressLabel.setBounds(17, 42, 106, 15);
			ivjUtilityAddressLabel.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUtilityAddressLabel;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param o java.lang.Object
 */
public Object getValue(Object o) 
{
	LMGroupSA305 threeOhFive = null;
	
	if( o instanceof com.cannontech.database.data.multi.MultiDBPersistent )
	{
		threeOhFive = (LMGroupSA305)
			com.cannontech.database.data.multi.MultiDBPersistent.getFirstObjectOfType(
			LMGroupSA305.class,
			(com.cannontech.database.data.multi.MultiDBPersistent)o );
	}
	else if( o instanceof com.cannontech.database.data.multi.SmartMultiDBPersistent )
		threeOhFive = (LMGroupSA305)
			((com.cannontech.database.data.multi.SmartMultiDBPersistent)o).getOwnerDBPersistent();
		
	if( o instanceof LMGroupSA305 || threeOhFive != null )
	{
		if( threeOhFive == null )
			threeOhFive = (LMGroupSA305) o;
		
		String utilityAddress = getJTextFieldUtilityAddress().getText();
		String groupAddress = getJTextFieldGroupAddress().getText();
		String divisionAddress = getJTextDivisionAddress().getText();
		String subAddress = getJTextFieldSubAddress().getText();
		String rate = getJTextFieldRate().getText();
		String rateHierarchy = getJTextFieldRateHierarchy().getText();
		 	
		threeOhFive.getLMGroupSA305().setUtilityAddress(new Integer(utilityAddress));
		if(groupAddress.compareTo("") == 0)
			threeOhFive.getLMGroupSA305().setGroupAddress(new Integer(-1));
		else
			threeOhFive.getLMGroupSA305().setGroupAddress(new Integer(groupAddress));
		if(divisionAddress.compareTo("") == 0)
			threeOhFive.getLMGroupSA305().setDivisionAddress(new Integer(-1));
		else
			threeOhFive.getLMGroupSA305().setDivisionAddress(new Integer(divisionAddress));
		if(subAddress.compareTo("") == 0)
			threeOhFive.getLMGroupSA305().setSubstationAddress(new Integer(-1));
		else
			threeOhFive.getLMGroupSA305().setSubstationAddress(new Integer(subAddress));
		threeOhFive.getLMGroupSA305().setIndividualAddress(getJTextFieldIndividualAddress().getText());
		
		if(rate.compareTo("") == 0)
		{
			threeOhFive.getLMGroupSA305().setRateFamily(new Integer(0));
			threeOhFive.getLMGroupSA305().setRateMember(new Integer(0));
		}
		else
		{
			Integer temp = new Integer(rate);
			threeOhFive.getLMGroupSA305().setRateFamily(new Integer(temp.intValue() / 16));
			threeOhFive.getLMGroupSA305().setRateMember(new Integer(temp.intValue() % 16));
		}
		if(rateHierarchy.compareTo("") == 0)
			threeOhFive.getLMGroupSA305().setRateHierarchy(new Integer(0));
		else
			threeOhFive.getLMGroupSA305().setRateHierarchy(new Integer(rateHierarchy));
		
		StringBuffer addressUsage = new StringBuffer();
		addressUsage.append('U');
		if(getJCheckBoxGroupUsage().isSelected())
		{
			addressUsage.append('G');
		}
		if(getJCheckBoxDivisionUsage().isSelected())
		{
			addressUsage.append('D');
		}
		if(getJCheckBoxSubUsage().isSelected())
		{
			addressUsage.append('S');
		}
		if(getJCheckBoxRateUsage().isSelected())
		{
			addressUsage.append('R');
		}
		threeOhFive.getLMGroupSA305().setAddressUsage(addressUsage.toString());	
		
		StringBuffer relayUsage = new StringBuffer();
		if(getJCheckBoxRelay1().isSelected())
			relayUsage.append('1');	
		if(getJCheckBoxRelay2().isSelected())
			relayUsage.append('2');	
		if(getJCheckBoxRelay3().isSelected())
			relayUsage.append('3');	
		if(getJCheckBoxRelay4().isSelected())
			relayUsage.append('4');
		threeOhFive.getLMGroupSA305().setLoadNumber(relayUsage.toString());		
			

	}
	
	return o;
	
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getJCheckBoxRelay1().addActionListener(ivjEventHandler);
	getJCheckBoxRelay2().addActionListener(ivjEventHandler);
	getJCheckBoxRelay3().addActionListener(ivjEventHandler);
	getJCheckBoxRelay4().addActionListener(ivjEventHandler);
	getJCheckBoxDivisionUsage().addActionListener(ivjEventHandler);
	getJCheckBoxRateUsage().addActionListener(ivjEventHandler);
	getJCheckBoxGroupUsage().addActionListener(ivjEventHandler);
	getJCheckBoxSubUsage().addActionListener(ivjEventHandler);
	getJTextFieldIndividualAddress().addCaretListener(ivjEventHandler);
	getJTextFieldSubAddress().addActionListener(ivjEventHandler);
	getJTextDivisionAddress().addCaretListener(ivjEventHandler);
	getJTextFieldGroupAddress().addCaretListener(ivjEventHandler);
	getJTextFieldUtilityAddress().addCaretListener(ivjEventHandler);
	getJTextFieldRateHierarchy().addCaretListener(ivjEventHandler);
	getJCheckBoxSerial().addActionListener(ivjEventHandler);
	getJTextFieldRate().addCaretListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("SA305EditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(350, 360);

		java.awt.GridBagConstraints constraintsAddressPanel = new java.awt.GridBagConstraints();
		constraintsAddressPanel.gridx = 1; constraintsAddressPanel.gridy = 1;
		constraintsAddressPanel.gridwidth = 2;
		constraintsAddressPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsAddressPanel.weightx = 1.0;
		constraintsAddressPanel.weighty = 1.0;
		constraintsAddressPanel.ipadx = 341;
		constraintsAddressPanel.ipady = 234;
		constraintsAddressPanel.insets = new java.awt.Insets(4, 5, 5, 4);
		add(getAddressPanel(), constraintsAddressPanel);

		java.awt.GridBagConstraints constraintsAddressUsagePanel = new java.awt.GridBagConstraints();
		constraintsAddressUsagePanel.gridx = 1; constraintsAddressUsagePanel.gridy = 2;
		constraintsAddressUsagePanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsAddressUsagePanel.weightx = 1.0;
		constraintsAddressUsagePanel.weighty = 1.0;
		constraintsAddressUsagePanel.ipadx = -10;
		constraintsAddressUsagePanel.ipady = -3;
		constraintsAddressUsagePanel.insets = new java.awt.Insets(5, 8, 8, 1);
		add(getAddressUsagePanel(), constraintsAddressUsagePanel);

		java.awt.GridBagConstraints constraintsRelayUsagePanel = new java.awt.GridBagConstraints();
		constraintsRelayUsagePanel.gridx = 2; constraintsRelayUsagePanel.gridy = 2;
		constraintsRelayUsagePanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsRelayUsagePanel.weightx = 1.0;
		constraintsRelayUsagePanel.weighty = 1.0;
		constraintsRelayUsagePanel.ipadx = 14;
		constraintsRelayUsagePanel.ipady = -18;
		constraintsRelayUsagePanel.insets = new java.awt.Insets(5, 1, 9, 3);
		add(getRelayUsagePanel(), constraintsRelayUsagePanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
public boolean isInputValid() 
{
	String utilityAddress = getJTextFieldUtilityAddress().getText();
	if(utilityAddress.compareTo("") == 0)
	{
		setErrorString("Please specify a utility address.");
		return false;
	}
		
	String rate = getJTextFieldRate().getText();
	String rateHierarchy = getJTextFieldRateHierarchy().getText();
	if(rate.compareTo("") == 0 && getJCheckBoxRateUsage().isSelected())
	{
		setErrorString("Please fill in a value for the rate field.");
		return false;
	}
	
	if(rateHierarchy.compareTo("") == 0 && getJCheckBoxRateUsage().isSelected())
	{
		setErrorString("Please fill in a value for the rate hierarchy field");
		return false;
	}
	return true;
}
/**
 * Comment
 */
public void jCheckBoxSerial_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	if(getJCheckBoxSerial().isSelected())
	{
		getJTextFieldIndividualAddress().setEnabled(true);
		
		getJTextFieldGroupAddress().setEnabled(false);
		getJTextFieldSubAddress().setEnabled(false);
		getJTextDivisionAddress().setEnabled(false);
		getJTextFieldRate().setEnabled(false);
		getMemberField().setEnabled(false);
		getFamilyField().setEnabled(false);
		getJTextFieldRateHierarchy().setEnabled(false);
		getJCheckBoxGroupUsage().setEnabled(false);
		getJCheckBoxDivisionUsage().setEnabled(false);
		getJCheckBoxSubUsage().setEnabled(false);
		getJCheckBoxRateUsage().setEnabled(false);
		
		getJCheckBoxGroupUsage().setSelected(false);
		getJCheckBoxDivisionUsage().setSelected(false);
		getJCheckBoxSubUsage().setSelected(false);
		getJCheckBoxRateUsage().setSelected(false);
		
	}
	else
	{
		getJTextFieldIndividualAddress().setEnabled(false);
		
		getJTextFieldGroupAddress().setEnabled(true);
		getJTextFieldSubAddress().setEnabled(true);
		getJTextDivisionAddress().setEnabled(true);
		getJTextFieldRate().setEnabled(true);
		getMemberField().setEnabled(true);
		getFamilyField().setEnabled(true);
		getJTextFieldRateHierarchy().setEnabled(true);
		getJCheckBoxGroupUsage().setEnabled(true);
		getJCheckBoxDivisionUsage().setEnabled(true);
		getJCheckBoxSubUsage().setEnabled(true);
		getJCheckBoxRateUsage().setEnabled(false);
		
		getJCheckBoxRateUsage().setSelected(true);
	}
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jTextFieldRate_CaretUpdate(javax.swing.event.CaretEvent caretEvent) {
	
	if(getJTextFieldRate().getText().compareTo("") != 0)
	{
		Integer rate = new Integer(getJTextFieldRate().getText());
		
		getFamilyField().setText(new Integer(rate.intValue() / 16).toString());
		getMemberField().setText(new Integer(rate.intValue() % 16).toString());
	}
	
	fireInputUpdate();
	
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		SA305EditorPanel aSA305EditorPanel;
		aSA305EditorPanel = new SA305EditorPanel();
		frame.setContentPane(aSA305EditorPanel);
		frame.setSize(aSA305EditorPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (2/24/2004 3:56:49 PM)
 * @param newIvjJTextFieldSubAddress javax.swing.JTextField
 */
public void setJTextFieldSubAddress(javax.swing.JTextField newIvjJTextFieldSubAddress) {
	ivjJTextFieldSubAddress = newIvjJTextFieldSubAddress;
}
/**
 * This method was created in VisualAge.
 * @param o java.lang.Object
 */
public void setValue(Object o) 
{
	if(o instanceof LMGroupSA305)
	{
		LMGroupSA305 threeOhFive = (LMGroupSA305) o;
		
		Integer utilAdd = threeOhFive.getLMGroupSA305().getUtilityAddress();
		if(utilAdd.intValue() == -1)
			getJTextFieldUtilityAddress().setText("");
		else
			getJTextFieldUtilityAddress().setText(utilAdd.toString());
		Integer groupAdd = 	threeOhFive.getLMGroupSA305().getGroupAddress();
		if(groupAdd.intValue() == -1)
			getJTextFieldGroupAddress().setText("");
		else
			getJTextFieldGroupAddress().setText(groupAdd.toString());		
		Integer divAdd = threeOhFive.getLMGroupSA305().getDivisionAddress();
		if(divAdd.intValue() == -1)
			getJTextDivisionAddress().setText("");
		else
			getJTextDivisionAddress().setText(divAdd.toString());
		Integer subAdd = threeOhFive.getLMGroupSA305().getSubstationAddress();
		if(subAdd.intValue() == -1)
			getJTextFieldSubAddress().setText("");
		else
			getJTextFieldSubAddress().setText(subAdd.toString());
		getJTextFieldIndividualAddress().setText(threeOhFive.getLMGroupSA305().getIndividualAddress());

		//rate the fun
		Integer rateFam = threeOhFive.getLMGroupSA305().getRateFamily();
		Integer rateMem = threeOhFive.getLMGroupSA305().getRateMember();
		Integer rate = new Integer(-1);
		if(rateMem.intValue() != -1 && rateFam.intValue() != -1)
		{
			rate = new Integer(rateFam.intValue() * 16 + rateMem.intValue());
			getJTextFieldRate().setText(rate.toString());
			getFamilyField().setText(rateFam.toString());
			getMemberField().setText(rateMem.toString());
		}
		else
		{
			getJTextFieldRate().setText("");
			getMemberField().setText("--");
			getFamilyField().setText("--");
		}
		Integer rateHier = threeOhFive.getLMGroupSA305().getRateHierarchy();
		if(rateHier.intValue() == -1)
			getJTextFieldRateHierarchy().setText("");
		else
			getJTextFieldRateHierarchy().setText(rateHier.toString());
		
		String addressUsage = threeOhFive.getLMGroupSA305().getAddressUsage();
		if(addressUsage.indexOf('G') != -1 )
			getJCheckBoxGroupUsage().setSelected(true);
		if(addressUsage.indexOf('D') != -1 )
			getJCheckBoxDivisionUsage().setSelected(true);
		if(addressUsage.indexOf('S') != -1 )
			getJCheckBoxSubUsage().setSelected(true);
		if(addressUsage.indexOf('R') != -1 )
			getJCheckBoxRateUsage().setSelected(true);
		//make sure the panel correctly reflects the use of individual address instead of other addresses
		else
			this.getJCheckBoxSerial().doClick();
			
		String loadNumber = threeOhFive.getLMGroupSA305().getLoadNumber();
		if(loadNumber.indexOf('1') != -1 )
			getJCheckBoxRelay1().setSelected(true);
		if(loadNumber.indexOf('2') != -1 )
			getJCheckBoxRelay2().setSelected(true);
		if(loadNumber.indexOf('3') != -1 )
			getJCheckBoxRelay3().setSelected(true);
		if(loadNumber.indexOf('4') != -1 )
			getJCheckBoxRelay4().setSelected(true);	
			
		
	}

}

public void setFirstFocus() 
{
    // Make sure that when its time to display this panel, the focus starts in the top component
    javax.swing.SwingUtilities.invokeLater( new Runnable() 
        { 
        public void run() 
        { 
            getAddressPanel().requestFocus();
        } 
    });    
}

}

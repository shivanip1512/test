package com.cannontech.dbeditor.wizard.device.lmprogram;

/**
 * Insert the type's description here.
 * Creation date: (8/1/2002 11:56:33 AM)
 * @author: 
 */

import com.cannontech.common.util.StringUtils;
import com.cannontech.database.db.device.lm.LMProgramDirectGear;
 
public class TimeRefreshGearPanel extends GenericGearPanel {
	private javax.swing.JComboBox ivjJComboBoxGroupSelection = null;
	private javax.swing.JComboBox ivjJComboBoxHowToStop = null;
	private javax.swing.JComboBox ivjJComboBoxNumGroups = null;
	private javax.swing.JComboBox ivjJComboBoxWhenChange = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeDuration = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangePriority = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeTriggerNumber = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldPercentReduction = null;
	private javax.swing.JLabel ivjJLabelChangeDuration = null;
	private javax.swing.JLabel ivjJLabelChangePriority = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerOffset = null;
	private javax.swing.JLabel ivjJLabelGroupSelection = null;
	private javax.swing.JLabel ivjJLabelHowToStop = null;
	private javax.swing.JLabel ivjJLabelMinutesChDur = null;
	private javax.swing.JLabel ivjJLabelNumGroups = null;
	private javax.swing.JLabel ivjJLabelPercentReduction = null;
	private javax.swing.JLabel ivjJLabelSendRate = null;
	private javax.swing.JLabel ivjJLabelShedTime = null;
	private javax.swing.JLabel ivjJLabelWhenChange = null;
	private javax.swing.JPanel ivjJPanelChangeMethod = null;
	private javax.swing.JTextField ivjJTextFieldChangeTriggerOffset = null;
	private javax.swing.JComboBox ivjJComboBoxSendRateDigits = null;
	private javax.swing.JComboBox ivjJComboBoxSendRateUnits = null;
	private javax.swing.JComboBox ivjJComboBoxCycleCountSndType = null;
	private javax.swing.JLabel ivjJLabelCycleCntSndType = null;
	private javax.swing.JCheckBox ivjJCheckBoxRampIn = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampInPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampInInterval = null;
	private javax.swing.JLabel ivjJLabelRampInPercent = null;
	private javax.swing.JLabel ivjJLabelRampInPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampInSec = null;
	private javax.swing.JLabel ivjJLabelRampOutInterval = null;
	private javax.swing.JLabel ivjJLabelRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampOutPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampOutSec = null;
	private javax.swing.JTextField ivjJTextFieldRampInInterval = null;
	private javax.swing.JTextField ivjJTextFieldRampOutInterval = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JComboBox ivjJComboBoxShedTimeDigits = null;
	private javax.swing.JComboBox ivjJComboBoxShedTimeUnits = null;
	private javax.swing.JComboBox ivjJComboBoxStopOrder = null;
	private javax.swing.JLabel ivjJLabelStopOrder = null;

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == TimeRefreshGearPanel.this.getJCheckBoxRampIn()) 
				connEtoC1(e);
			if (e.getSource() == TimeRefreshGearPanel.this.getJComboBoxWhenChange()) 
				connEtoC2(e);
			if (e.getSource() == TimeRefreshGearPanel.this.getJComboBoxCycleCountSndType()) 
				connEtoC3(e);
		};
	};
/**
 * TimeRefreshGearPanel constructor comment.
 */
public TimeRefreshGearPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJComboBoxShedTimeDigits() || e.getSource() == getJComboBoxShedTimeUnits()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxNumGroups() || e.getSource() == getJComboBoxStopOrder() || e.getSource() == getJTextFieldRampOutInterval()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxSendRateDigits() || e.getSource() == getJComboBoxSendRateUnits()) 
		connEtoC7(e);
	if (e.getSource() == getJComboBoxGroupSelection()) 
		connEtoC8(e);
	if (e.getSource() == getJComboBoxHowToStop()) 
		connEtoC10(e);
	// user code begin {2}
	// user code end
}
	/**
	 * Called when the caret position is updated.
	 *
	 * @param e the caret event
	 */
public void caretUpdate(javax.swing.event.CaretEvent e) {}
/**
 * connEtoC1:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxRampIn_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JComboBoxHowToStop.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		rampItOut(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Time In") == 0
			|| getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Restore") == 0);
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> TimeRefreshGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxWhenChange_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JComboBoxCycleCountSndType.action.actionPerformed(java.awt.event.ActionEvent) --> TimeRefreshGearPanel.jComboBoxCycleCountSndType_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxCycleCountSndType_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JComboBoxShedTime.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JComboBoxNumGroups.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JComboBoxSendRate.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (JComboBoxGroupSelection.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G01DAA9B1GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8FDCD4D55ABF35540F5D354DB65B580D77FD2D6CDDAAEA315816B6AB5B2C970DB6ABB2AB36F063ADF723DD5A2828ACAFB0A623A8032222000E0A06B6A2A8A9A27EC1D186C5A5A42322550139406840CC43C531557ABD671CFB1EFB6F4C1DBF646E6F677279BC4CBC5F73BC67BC67B94FB9771CF34F3DA3942E98BDABAB3BD09032E689725F56ACC1C8FDC890AE5BDA1D4E311A68DC03207ADB89D4A0
	EC3591508AE98DFDC603C9E85E128BFC8770E5C70D06A570FD21704916F1374097BF650C0234BFE44F7DDB60F2DE18474B19CD79B9D29EFC4E87BA81D8B850E4A01330CAAA1271E860674B5F89E5E58BC2644DC4668B31C805975E4C641C709986D4F78B1159A1154869A9009119CC203CDB18EC99FC9A29F517555648F29DD7C58B99138EE74FA3E529726794AE6BC64B1FE6E18AF5C40E103974GFC56351C6A5959656A2B683275773B7AA5312B37425EA95A9D124BD3F146710D4DE32F300B279DDDE205334F
	6DF175F8ECFD3535ED0EBE31D56C7608833D0D224D53E26B971D02D0F4AB29C31818CB7307BAC019E3A816A9923FF540F789E8442D3C9E0F4F2B136D9CF5AADAC839315EEFBD265F4A6C4F0BD16A617E7527B963E2C87E5D34DD08DEB37061C04C165BA5EE0BF09B3765A7B6A2DB83FC8BD0AF621FF692BC8C78C820585B380DBBBE64B6367F63B7C2E667575979FEECCC380D5916FE1BE2E3D14E5559CBE96C1C4AA76DEF399D4A853283C5GC583A5G955318DDBBFFBDFC56F7CAFBDDFDFD2E7EFA37FB0F536E
	B964320BCE78DEDB8BA9B256AAF639BCF6C1E0F1F919E8513107D34A6D5A18A4446A76194063A82675F6C112FA32E76954AD6E29166C8CB90F5CDFA9F55B7DAB62B7E7B771DBB9FCA7FA449E068FD1BCDC053336FA1F46826123A0CD0865FEEE1F4FEDE9B65CA0182A8632E76B5892793B5EECFBAC3361DC2CE28B73713E826263E840A7GA583E5G950E4DB5D40F65BEF64F5F9C4C47CD508FBC7DB6675141CE374DA36D99F4B86D22C77635D38A64EBBDE2FA5F8CDB0F79A5FA333A0D126F74687AA5B97A336C
	16314C9F3DE3953F30326F74DBF644D85F58180FED18CD7BC454D85606B90867D1BCC60533369DC57B9665A14DFCC72E0149CF247261F7F84748D3AC7FBB3CE3644BCE9EA3F110D6F4E72E01356F0B8B4878F88E78C820D820842069C006B8100B63EDFC4F7C0DA1762396D57BB2DDA9FFB1FC0AC312475654BFA0597A3B44E3B60F435669948784D966FCBE312DD323F7A96D5FDDD0C62358AFFAEC1243558F395B7AC4882681A673637C82A26391E9AA99C52100BE3740733DBAFFA1FCBAED835227EE3BCD9295
	8916FEDDBE09095336E310A3E4C05ABA0E78AB0A0E39B5703DAD0E7B4AD4C8309860A720DF961B964067C188EE51D9DB5B6068A2E658BCE7F90CFAE81F1D8A72613F4EB5545C457B66DF5AF98CB64C3BCD30BC7535EE8C924A3C0B451369B75EB178AD4D3B8670F620215F70EB2A213BDDA71F1A3B7463D20F083D1AEB5E2F951E15D12ADB466CE174459CAFFE166ABB7377370BC87DA221DEF1C0C93F61BE7F44E4E6313847B6A07268BB620140916DCA8BB0594385645AA21E967B258651AD765B614B005C761F
	969815386CF6E14CFCC9F1B2CE6D054099C05CD6D040F048C39D65BC5DC153ED1264F1F48ECA62D1D1129C7DBD0A7E575416814D90B8A057B5ECB129EB9A5451908F63EBBC2F6BBB858BD571556CF21D9AF437111EA34769A4FABDAE87795D713C7DF3BB499C4B0E7C824AAB693F3069355DFCD9E7B863297F3179CE3FE5F8377B77AF6331CEBEC749116307614F3131916A928314047536F536FB49DF289D3EB6FDC34BD05B734FAC0345442B8B7C47F446827D18FEE701FECC8B8B8347EC6EC23D18E5E9798BC9
	9DDDE77AD5FD20F0A1998F3BDC7D7DA26D0828A230B972DF5AC8BD9C7D8E69B3073DC7140EBA3E91E19EFEB70965BB6918BB835A4BF4B79FA74F2C6663E459B7B78B630FB76B4E27A2EFBA155DFB37BC0739DB99A719CD0B8AC9BC08CE318F9C3557B558AFB13C180E67B2BE10C331570A7F1368169F585BABF61D5A639AEA05EBC5D33F45C6EBD341BEDAC4CF374B53A75A4BCF5ACE5BAAECE7248A5A9A9575B4F99F793E4E3CE143CE335E345EF2D21B7771FA2FCC1B7D673AFD5D31F515AC3E968AAB3E7BEF59
	D6D7DF278B727B2CD76C5F5BEB6B6F917F49767A64BFDC1B2B384DAB8F44E9ED5EFB364BA952C6B95AEFEFBB6B7E97196ED34CF0EB30090D53F7AE2173AB0831D820043B79B8FDEDA1C9676334FCB15A6BF2BAD9B700B44BEFC90C0F6DAED445ED4A5DEC4DBB9F537F90A45D5863AF1D59913E48C47A2B7875208853ACF221B8A81E65F325C58B3C520E591C034A9C6C6AC5F36153293A46B07C72457A7DE744E2F2DDB905790FDC7C01C066D2ACCF565FE3EDA4CF3747518717E4F25114576E53A4755ADD023A11
	F5FE82FCA683B15D7BBFA1F555EB5778FBC89E733B785ABE83F472G335C4372F15E43FC42641EC0B94338DCC389D05DB8A6F7EE1CDA6EE7F6AE1788F8AA1061DEA657F0AF130B3A17DEF3F1BD3E9131E994FB86867C4B8CFC1DF148245ED3308F58F547AE5A0EF27E9977FA2F3F269711FC8B6F4BB5145D47E3ED4E92751C20FEE04055652053DF393D6EDE229E5798F65F12B970596D708C40DA4CAE8E71B61F300458CA6647B2AC375B2D9F6D90FC677B7B68AE861FF26DBDC3FBC71BEBAFCC512D90B6FBF158
	BF66904F885C8F67772B77A44665FF1EBD570F9FEA6EE375EF3FCF71C3F27655594C266DC37B056F3B3FC2D7900EAE1F3D15030344D7E40FA472BE3EEF31AE1F447B8C608B6F071882E2EB282DDDF932FF9AGBBC752E81F3C37D85DA7636EE7F331E478E4E35EFFF6ED024F618FEB3CAD06ECBB6173422E9A3CADEED8381B47786DB788F55F556A6E3DC464B7E4275F4F5A20E83C529669C517E69B16DE1A4D7C71AE7A438EB2D16339BFDEAED27BA3897099C0668738BFBA6D97660F859DFB28BFAE742A445746
	775BF9BD2A41C667833C9E717B3D6BC15AF58C56E32DF8E17528DB5D242E4705DE22303FFD36C9BD6E0CCFE977BB6E44BF405AB671816FF1A7F199699753811F71G9FF7F6959528461DD6686960F438CA603C34A807DD8FE47E3522D97CFAA070B51D3104785474BB70B1D083D08750395F71B20616865DCB5AB794E0AF29E550FB5D9185F9477EAE703AE68224CF7512C983DEF8D00B31BD16E7CCA4DE8A9FE4FBAC7508E79790FC348AE77135110EA70437CC48B554BC4C57A3BB3A3C77109A9234651D706219
	5EC19F3D65DEFC38179E0B371D470A7978C982E928E2608C4C75EBEBF12EAB0F09994539F2ACC5A5703D0F6325645A1884FCBAD06EC4389E81D9016CC09193F97B7D4FD23D6B06367D7CDDB41475B42BE7167D7B79A75FC74F5BBF5193757C536374679F39074AF3174F4D6A394B7809ECDCC8054F4C09FC1FFC79D26EC353A45E5E8FFD4F7ABC9934BE56C9DABDE643DF77939B48357644A45E0E7F351CE01140C7CF62EDD636EC1E2ADF37389C7D927669471711B91D4B6368F174F3EC8A453ADC9E3A70E3D8C1
	097FB5E9D1097E1AF4F9097E1A342CA470BE0B25445F1A156D09F868B5BD9E6AB79908E18FD2AC9578CC449A4E902C649168130FF06C17DB89568C3C9D3137A9B6847CC844A6EFA3D89C70090F7076FD4194861FA9404FGAACA04FC015A00A420C820B82029C019C066C7A1EE006CC091C031C0C9C0B300CAFE8FE9C03DC061C051C09300D201F29F033E87E485F2820DG0A85CA824AF88C77008A08AD26493906CA2096A0B750C820D82049C069C02647A17DF1F6FDEE01CF7763EC5EBB92BEE301A683258319
	1EGB92016A758BC5B8D1FA301E201A6832583191E84992096A0B75048A739AD9F678B593EE3AE718929EB20F1190EE53FE7B2440F244EF49C7652A3FECEFA4CFFDE99F2DA6A6F75E5C83B68613DFE64B557045F333664FC241F3C3C0944C8A8F291F25ECE398E31B21F2463BB92A731DEFE485571CB114AC692EBA38278EE3E9C53EABED30EE3EFB99223A41E4BF472E331902F9B8BE47CD99D02AFBE12BF491836D57E3E54CB060CA93B8264D1AFFFD679C9AF70032F8B413E8F011628787C90F488053A97D9AA
	FFEE13BFD7481FABF5E4B7G6D7042B66B482977A857GED8FE203777E6DA2016EA37A481135B1992FBF76D30F9CE162E2629FB78C7D62G1D94B458A41B1C7632C4727559C7BCEC6B93853E17A4F599E519FD12EBEF1540E36C6DE27575B276C9960B93644F2972E75A13CA0C4A7B77257E2FE16ED27DEB5869D2923B832EC1CF1768FD1DBADFDA04E94AAC27C9927BC8B5643D952AAF59BCBD224FF56E8A2A4F527C697F2C545F35107928462E7651A6014FF5DEDFC77256196B5055B11BBFDCE54E95D8FF9012
	785A78F4BD194B5A01BF87B4AA090F712B17F21F47A4B13F0ECFD27C1B845F27A7E94784E65F8C0DFD1B318DB376737CE6001E69A998D31ED274EB60FB73D35A7C18BF46ACA7F36FA16423A9FF964B7B61A0598731B99DBD7DE4F764F3182FBFC56AF5BD1D9F1C006F52D3FCFD776CA01967B8EDE7DD03B0A12A19C264DE9BD44F7DD2C1B68FF07394E68B537B728CE9D337C76C96BD9E514E363865F2A4BA6788837991D3F8B977ED5558544EE52750F9C7BC48A5CE61FBE2E34F10312F5BE36B0366BA6A963B04
	11CF93D9D38D37EB86319330CA2096A077533C1C173791DDD0F4748D76D12BD8B9B369DCE6AA4825226C64BDA42F834D36CE51F934D73413DDB8DE3FBBDC7918F6F8302F51639AF48F48E9FF7E0C6CB1620CD9C91653CDDBD479C297EB35C9186F439F94E29A55BAAA4A5B27ACFD5D4EA56A3C35A2F29E371ED4EC333A4E34390ECAAE371CF64E3D9853E0D15D853EEE956D037286AD13596F50582FE4A127DF6BAE2669C75D0E7E7D8E51E9774908497D6E9B1A8F6DCDECF36210A8753A6CBC1F8D6BB4F5612EE8
	00F93644FD397578E2BD19CF7B0908AC53E2D926167159C360F2CE4BA22CBB93D20948B2D3F6AE55560D6CB49D991464AA22DC5DDC251D34A27218E3AD7213FE94C21C495C381F165586A32A3AA8FACE64344D09E50DB61B3C73BAAAF631B47B49C55EE9BE7A1B4E50F8506E1D49E9EBAA3475E86A676AAC5D12D364E323374C232B733D72G73647CBBD6AC71CAD339C11639333B485767A848E42E5A36D0BF9FB90F6FCEEAE3C96E2E1AD83A36EA311E0CA6166EBF2109FD927674C686CF0F7CD4292B1248764A
	5A8B54FBE52629ECCDDCBD156F25654C56CB37E23AE8515BEB6B40741B7A74745D18FE6610DEFAB8269FEF564BBF9253472D50530F4174EF4CFA6963B17D21C63D7C13B0FD12E60FF83A2CDF728CCF1F72091EFEA526EF504D3F81531FD826E7DFBB262768166F4474DD45FA7AE1187ECD23DE7AA8CC9F2FC90FFE0625CF4674A53A7A2918FE402A171E0969ABCB7552731E6569B3F54BB7E3FA37EE7955187E935DF4AB264FBA20673F8ECC9F5055F7E3FAFC31DE7B05E37A5F2BF4639353CF682647E03A58219B
	1F4F727D8AD3893946A7811F0A185BC130CC60F31F6358D38E3E57D10858BDD4578EFC44F3FC3E77B333FA1FB58A70D820894F49F36C67745713E9008B4910F73212DE1E6CAB4B76D33FBEC3661AF549ECBFF5896217D1DCD261EC1F759C1D1B92BE8652FA7F406D2F25FBF1E54F03CF1E6758A53D84EB835E09D8E2AF2FFB98E253F691ECB27053911B5BC84FA9GDF7482475E247B6596609B903352FD54F6605D087D3C1817910E58CA1ADF9270E9C0AB84361EA2987FE363EF7C2099BE719EG0C53EED7BF39
	8F50F62465F8FDF3D36361C37B8E3731FBG234F286F81544C793B5FFBGC28A73FF217C9933670772F9662A93E44F97578824505A5AC60F433E475653CCE745EC1DB0F8BAD74E3BB9052F93EEBCCD4F60G9F859417424FF38C2D657782E37E7B8621B94C23FBBEB9256D736CC4591E7494655E04A5676AEC4BB4F22EFC69DA45AFD1DB09DF7A45B3E674CD83DC5B7A49013E726A4ACD96F375664AF57E7D7A6A56157AFEED5E373FCDF12C4077D53754707A3A411668E984DB36CD5D7FC83EB7413F8A78E4694D
	1A7482D9DFC97FD613CEFC35C6239F2BC91F2552E7FEFDE48D776B0CC7E285672FCF78BD771DBECDEE6FBF4AFBE985BF4CEAFF6CD2592F519FAAFE494B8F452F72FA325B4FFA124E96185F2EAC607B514DFF647B643533B9960ED81405E363906B31F2AC83315B8FF14C72A247FE564CB1BBE22F2F407B99080D25EBDBB21FC9C2ECC6A3172BC9656B2DEF372C95D4771CCFB9FBAACEF6115D6A0AEEB2DBA3B787F06A4663A32B046763CE65F94FEB6565C5A3E6EF64771E737E17E346E2EE3F9B31A5A59C0BC66C
	F4B14FAF853131E8FF43CB5C7EB5651ABE2C348B4EEA196EDB28FB6EA51E5FE14462903B444A4BCDC32C3D14E3ADAFF3EC0B95F5917B8F4CAF8D310790AB1B4E313A833C3E9D085D52484B980558DF51871908DDD345FD5A71A70EDDDB454B980FD8D48747B27F44573C9F161073AC5D2EFE092D0BF7D03FD77EB957D077E7AE73FF9CC4C68267317E72C8B969AFA37ECC64539C8DBA7DCDBDA64C13BF89B9C10750A2391F064177D370795E4C19B3D9D9CF1410B9FB2F4B637886EC32B9C9133538869CEC3D4AEC
	FC155AC85ABA694F7CFA92CFE3DBF8852E332FF0EC6BAAFA1E9978E6446EDACDB0B77091083DC031A86063907B62903FCF1200581B340CE460539093CE52F2534047E99CEBBD492FF716B4BEF7B8F3066C6D1C83BE8AE882D0AA1061D51081EA83BA87948D1484147EAA577BB155B37D856645C0ADC0EE2011C031C013015201CCFF05743F32F3BECC6F527AD81D76A0655239622B5A794739B47FFB6106D7FD53D2E5F9D297EEAFCF33283E376968FA53B9158C33FD2C2E6DFC4F56FB5FB550595A39BA18D1D02E
	A7A48E55FB5773D45FC35947D66F1B3378DD5F65FF9F2C0B4E49DA201DBA7E4A7B5676A17D3D39DB683CAC82642200D8DFFB31B7D0DF1BAD5B40BF93C0AF99E80D5C5752617B27D9EC0F1A151D39CBFFEF4C341B4E75C0BEB71D5B392A51FF3D3653F12A92E46BD0FEDE317E7E5E9ABAFE75025CB914BDDE2C6F03B3D4B686644627F39F4496877241ACC1B907CCBE5352157106BE38779AABB38BFD70FC233E8F8E50BA6501FC51EB7CBE7250BA02B5GFF62B5FE9F792395647E4CB15BC95F53E2G36F8DCEE51
	A31DE5A8BDF9484FCC1F9E6EF3BCEC9D30042E8342DEE36B00AC444D949F2142597A6066537C3CF8A4244D403A5C3C1E4CDDCE7C8D5A81E894D08CD0A250743F713AC9ABAA05A0679A5ADC6EE6713468D45D32E6F333473ED44F45CD3F30E6F33B3C6BB563EF72B3E12FFBBF6B71DA4D77FB56690159FCDE98775BDB04784B4DFE4F5E5549E5F6481FD373FF18C5BE190FAE31909F0D0034E820C420D420CCA0D38677515F57DA180FC89357CB122D2B171EC0648EA207829518ECDE333A0DAAD0572D8C722B81EA
	86BA81A4E5783B1738EB36DAAF82642200E201A6GCD752BF73D056B25010C7086DCA75FD02DC761FB5D9BDADD79B9B52B3A3C961031838D810DG9A7D063F726EBC24560B83398420E420F4A0431B7E742EEB66FAC5A0E3815A2D12ED036F3DEF6A591939C2DD5EB9109989B4C6160D77DB5EDDE66F33D309A01BA24BE7686851D8FD8B2E35EFE953AA01EFF8CB4F36AC74E13B1C6ED449054177D13AFA9F14F03D6837FC6D988758E42054373C2F1F8BDA3D6B142912494B542F139970EA2FB4AB709DC06ECC6F
	B29C0D5EE5042BE4A27D14918378F82F34A46027E76A55FF3E661E668C10B13D1DEBA8832A81EAFE5BDF1B16205FCE48B212CAB6823EC781453E6DDD27FF94FB57E98248CC156552F44AA3A43C83FD699DEDDAB970F56F6855692EC6CDFF8299BB5010ACBB629DFFF51A01FA23F5E462GCBGCAFE473BCEC7B56525C33A61DD38263DAB1F2FFF57DFF917DB3DFD319BE45BE479DE9DBD5A6FG9F6915B6867878F775FC71D529CF5F833994D9B643CF9939B3206F4D706AFB40B74C50ABE33B5277E678666784AC
	8CE8548CEF3F5D2071DBB4240F831AAC4B256A644574A6E974B2C1AE6F3DDC0379BDA6DF7D1EBF3D7A83DC4FAA4BF428E45D70BD9CA872BDEFBBFF65538FE3C0E63CAC1724D39E2169004F70CAB33D8FFD6BFDBD9FE678740B9A15DC737B7AE51CGDC72CA0BGBE8AA876FD6FFA7C224A276F29E4267AA9A38DF0E126B62D90787219FA75082A62BE2E1353DBD4F2F678BE242BF7FD073ACDC7004CE820B8D9B6E1262FEDEC1DDCC90E9E4873CC3BE31560352F349F9638652B6C8E1B5355334AE22E34182BB62D
	E367DB3C776CD8FE4749D181F90EB3AD0F4FF1CAEE3DD1E8F85A1CCD4E92694DF112E57BAC029167D711711F66B03B8C2524BC55B6C945D172FF2F0BBE34AC8D507DC0398E0F19495900CE973BBF464E863C0467C26D107FB920B82084A0F23E0E699DDE65FB26C0DC4575D2C0161CA948044F3CAC35DE3AD3FFDD10CB4FF31601EC8D9013FDF3B51D475B063C6671734B68BEBE4839019876833A360F82BE9A75672D546E032CDEC97727A1BD85E5161C54DF53EC246BFDD33651D0864456A90E134176C5CA85E5
	2D5686FA3DC00BE47E1C7CDDD927B87A157B366C5EFA43A0FBBADC3E27FA4E6BBE36D688739159BDFA1A4FA1C77F20A48E6C6D85A91E5E3E473B1C960F4365F1C8E7D97A16E33A65F0A1AC27EF57D22FFC5ABC0E1E9E51F3F8302F131E77E1F2BB5A7C489D696E9E90157B6F0373083F149D3CC032DF35AD5733514BGA63B34D139572EBCD4A13777G3D876D7B4C05FC7F7761B35E771FC86CC6C05B497787BB3D6F1F1174A8CCBFDD22279F0B699F7A5C7FA36993947DC63D7C27E27A8DBE77B7C9FA9A26DF66
	F37F0E248BB9BCFDCA31777DC512DE086947DA754AAF477457566865DFC75269F8B631DA999FCF772E709E9F15FD772A2DB0B8EE5A3CCEF7ECE47A8F741A05607709FC7553F7799FEF53BED63E67EFD54A7A6DA7A57EED85CBAB57B19DFABBCA56F9E5D9207AD5EF89D63F3A62D06F57784F63A7455F57C72CBE3F582678635EDAA55FDF07D4B779FC60BA928BF8F60FED097067B85711F8A14FC943B551718D9D380E02E0FF0F7C7E8572F81DFCCDDE2B7A7E2B537E1E3B7FE790ABA361DFDA862B7F9D6B7D1F45
	3CFB3D7ED94C7B576BBFCF70507A404F38BF3A5E7FB36EC96B554F38333D101364082C1CEE7F086CA96A6EF955F7CA87A0860EF41E943B24B6DB8F6A1F29A3ED5B82FD5F89B492E88CD0BC904B73179F117991F9230A6F9E4ABEFB0F48A7A45C069FD97C7B6AAACB70F72F7C42C22E651DAEC9F275117CB9BE5AC25ADBF239A948301BAC4447F075681518280C5FCA6F59B945EE8A333D7FDB697D3EA428D7AA90431E277762B201B799B836115ECBA8833E9A31D1945B8DFCBBE24D2B783D84A7E247687D43F140
	A7A2F65C484BC8C16C960AE5GEF1845317CB93C8C93E2DF4E61E514A196EF6177BFA4448E1C673A91087D6CBCAFB78A31E967F9FE310825AD664F0E889FF06C8774FED9A170E5088D55737CEA90FB10E24D40F7A056B140ED69C5ACFA0017FB8E31C9F42E1788FCB2E29EACA39D31FBA9E618EDB4944E46FAC83C8CB3E29B86F99955085D514CFD950E582B9FF15DC84436D9F839B10805DBF8FE6391FB6CA07715A9975B0D458B705508BD636477322C082D6FA3D88770CE442E6C63E58CA1B6554CF59390E3F3
	5EE46053900B20D8A670A6A3478629FDE5406FC6EC920D71B6606D087D5A0965A2B61B5EB7CDGBE8531A2AB77DF86E2AF147A5E27DB3F1C6717BB074B7D8F1EA3E9C72C145E9FF4829F011827116BC6A1662277975200B74C65D89EED4BA260AB912B2677319B006FC06CB20A39010FD0645652F58570710825FFC2638F78D4447634F2DBB2917BA535451AE7B41C4863589374D9B689788844FECC6B9185FC9CE24994CBGBE85316554FF99401B66F14CC2654A002FC36CDB74CB8BE2FF20360C86BE9EB1F65F
	A69178E444AE27772848D91FF4449E2718E1BE7423799C5BC24FD711F3C2E644AE45B3D75508ED266D968E7CE8440ED17B6200CFC46C17E8F38AE209543E4AFC23411A4F31C5D42E83F889317FA86679C5A0B61DE2D14047A0F6085A928F7CE44476517CD20197CC984FD42E9078B244D270CCD58DE23B28DC84702391FB34116B46A1D638035B170058719D5C3EE444466F60E5CCC7ECA16DC7B585C6C3DB81472E4133D73D085DC14B0D87FEB2E23795F3DF25A2F6124AE5821F3B00E37368593092602B917BBB
	452C4037A37660AEDE2E9D31E8EADF9C7009083DCD31946053157C1A687DC7608B97F2AC095AD78EFC83E24B28EEBB6191CBC03F1CC3AC0E56A39178D4443E237DA393F8D3A147A6D32C8C78EA44BE26E34EEE605B91E367C11C40C7A076DF34FD23000FC1EC991E83980F58B9AAE7DAE4B414AF62D8AB4D2F8E78F6442CA5F85DC7EC9C2D47B86013903B0E7AE5BA7042E20E5D4D628A78B244D6D23F54G5F021807E2F660A5441EC67F05A1B60D66B799789444AE23F2994067AD6158940A19012FC4EC7BCE1E
	DF9DE26D742C4B886023913B371867B78E31DC7441E444DE2136180BE0FED04431FB50874D08BD5E4873BB01D809155BA7A1F61EE2E140C7A276A63B6F8CFC82E237228F1291FB99FD150ED88C155B3D945AF2A94796336B917061087514706BC7A4E2D368F89F83FC82E22FD552EBB27099086D2D426B60B20EDD75956D8B403B914B21F26140C7A2B60EE2B140CFC0EC5EA602CD85BE9DB1B34D4FD08CF31FE23CFED05DEA601B917B96EDB901D893550D85BE8131BB29DCB2701908C974BCD2DE8944E989479E
	6A40319331DDD4B78278510845D339B860A7A0769E7569D4605391BBCC7B3421944612D234251417E1860C2DCFD2F6107DBAB770A300E20192001201B200F2179B8DA5C015C0D62093C092D084D094D08C50F8202465FCBDB3E6B3F9F6525F39G79C0A9DD54F8EC6C59F3F63FFE7ECA7E6E4B691017F905D1BE5376F2A949CF6FBDB0BD030E0AC14961A46F53151C629EF9FBD6BE17F70C4E5F48BEE2BB64454E290653B2C6829F8DB49E0815FD45AAFED6E0AAE0A633D1BEB77654AA1E07554C7348D9CD4FA1G
	9F89948B64FF5FE145F23390FC5F016DAB0C5B25689DB994E0DFE17316CA0BF9DB65BAF9BF62055D0A5EAB66C0FA1BC12FE6AB578B5B2768E5DC509E3D7CAC55496F3FCF2337974577DEEEA42F81125B74BD7ABC9DD97FA6E09B3D55C9B032CE352C6458EDF8A6530E585F715CE214A207679105D59CFB060E0144169A44587507E0D1084D43B204559C3B2215E3B508152F6518FBB56FA35F5579DF43DFDE97FC8DFFE59D49D30435B7F9240BE1236A683B9B648DE1067D3C4E04D853GBFCDA8BF33D6205D771F
	CA576F51E0E35CEA3E6F7F468A7D7B9073689AAA9564B2D1F63FD9FBD67261C6A5B6EEB56B5FBFF8102D6D4A601AD6466F9FF42D8AF67F001FF152BBD7598B7974886A7B87FD3335757C815DC310C0AE2C0C5F9709B0727A4416717ABCE0545667CFD6D29FA6DFB3075B1D0CF6FB668433FBF6G3B7356988D7CBE96ABE39ADD9F9781DE36065BB9F01E175B02587D67396DE1EB38AD1967031D951B2D72E38C68294F0A0DDFE34433E22C0CC5749DE30900CFDD437D738B2B562F31F4BEE1D88B6367DAEE5B7575
	5C365DEB395E3375DA3F669DD07CFA59G2F1FF3AD2F4B7D83417CEA8C6057A848071F3FE765CFBB24357BAD3ACF928DF2F1E877F5E8F7AA5A1D64E57746030A5DF386395D268F395D8D03416C1E9B406E5D9F326B3352864F5175F9B3606D9FF2BB97DBF8396108F5DA386DF1E84BF516E071B0D7958FA99FEA63A163C36FF848247BA0C2B94C014B39FF561A35FE2D23FD3B86529B4A39ED39F4BF065C3F14D02F3ECF6B5756E612B5335B5D944C078B8378F0B414E154581D3512179F0365572E5416BFF8C840
	3C7FEB257E3D555F50FC26C29E29184F08037E4F095EC47DE5DA87F329F5DCFE5A8A2FB8247BC8D6C8EFDB475BAD51992C7E452AF6732EFFB864F3CAD0461D054272D27DB31FDB6835F1A448C72D63EDD5CF7BF38270C9E8CF7D72E0F134D0E50F30DE9BC7056B591CCEE90FB7591A86F04BFA6E176A927FFEE4FB936DA0EBDF4FED7AE1E33033414581E2E4A464B3D6E06F7BE065DFDE2C5F66E5344D23C0BE9AEDDD5D2C6F4F6D342FA601DC8A4A9EEC553F16F651B9C36EC7909B9FF15928D6FD9B62282C9564
	5AD07660DA7F7E325339C798480EC079592D7A576295B46FF810CB7C087B767356E06DEDD435770C0F346DED32988D7C7CA9AB7B3EE2FDFFCD21F32E9210AF37F0BB7F341F4DF19C92197AB0B901468BBDB700F2B7B46A7B7537D4568EF2C3A87BFA233EDF6752D89F83F231A87BF129FF3F3235D5B248CEC7793D0D7AFE7D126DC9EC003AED60FE3DA6E84C2A2FE96D9B34FEF5824F4F944B73F7BFFE4DE37B88A09F3E015BD9D72C9DF7DA296FE3A1FD5C865E77FFC57771487973B4541B5E2B9DA7A38F8B680F
	63F4CF131CEDAF2A60F57CF95067E354645DAF2D104F86CD9D8F8498973AE8BD5BC067C48537374FCFDCDCC65BE384480DC6DB6F8B589E4467CB847F63ECA264B3DBE36B0BFE4610F7292F2702FCAA5AE971F38E3F015AE95A886342C65EAE8F97F35B2D9B397E4CE2ED3B5CF3C4C0BB6CA57AF6303DB889728843FCBA82BC67B0C8ED098159F814DF6E757CD4B54DB3955253B7F23F3E9570390D9C592F7EE240DCE9B4DCB9F3664C55780C543192FDDF755332ADA0DFD349FD452EADF6605D086D5801EDDF494F
	E2BC5FC27C456CFDFAC730FE99485E44CAE53E416CDDEF756F533DF44C198ABA29155CDFB1C11F71D82A0AC3D315F6DCA82B720E4309FE46BB362FD98972F5D55CB7EC8C6E85DE2A62EDFCC923360D2F25FA23A1BD86E54AF6697733BA3A8F1E8CF269A8BB38CB9B2BD92D0A6F1F5D954C77CB83783EE413516052547DFE2B3EDDCFD33F1703FC5DA6EE1729C9EBD759D1258F8DB6697B708A3AD75F8BF9C8184FAB457E5B5BC0E3F4B4484620FC15579A2A1145842427EE62B171C240184C896217424D5EFD6891
	BF634D0BECAE8672164D5C3E1F156A7B70F6FA7DEB87B9A74A3EDC2A75E1E31B624366657ABE343377D3C29EE3B01F48GFDE6AC754FE410CDC6793B3C4621C46A675CEA2321301A7B30AA68194402GBEEC28763E5EDE6DE79C3A0B165D82729D555CBEC7007ADCCA6B93813223505663A5414600825598B03EDABB86A4D5FB0F81CF7A9983587D049410CFC3DB6F70B30F18C44706220F0D06320F396CE42F3161A51ADF8B24F720CC4D8E7D78E9E163B0480DC6599F6E50464F371FAAE343DF020E4B015AAF91
	4A78D26313CCAF5B6733FE87F229E8CF149F5B63286D05DBE0BE37054B3E6AE57B7547945BDBF78633BDBF006DEDDB3C2FA92E837E63A9025EDFBA81BA4EADFCDCFF29185B9B390547580A20B116AF781F6FCC58629DE359D67D98E377A9A703FCB25A13CA6D495D8A7DF3AB475EE964B66E5E4A2F4B2B4831B3B97FD1FE720FE177A3C1E7E8AB1EE78EB0CFDCCB7B6798100D453213E8594940CF5F4A7D73FE50B1B7D01B9555F80F978F7A99F31FE36792C03E32065B3F21C4BF6E76D15BBBC04EDD43ED9F496E
	3D829F0D7A2F6E77DF7F8F58199110CDC1795CAA7DF50B195EFB4A5BE6B41837F13FFCD195ACEEB8113CDB36E947A67BB66F75E074D77AFE99CF6F2339C17E5CB6EE6732AA5F75E0D595DF8FC6235C13D57A7EFB054A4603DCA24A16ED520F2BBAFADFB093648C35DCF66BD77E7D5AC26D2D8459BA145F6B472FDFD2BBFAC16EDCAD2E87837AD53DD7CBA82656EB3F3656BB5ECE78716B9035B3916427221D132A7C576BC5EA2BE13B51E05A4E65FF5C216F5F9B69FD49BA10EB594E6B155C91ACDE96296AF6EE3B
	36DEA337AB7BC5727C3F4A4F7C1F5A99857251E867E39D5AB17EFF29FDC9101E02B205FE66B796BA3FB15541752E0E4B0ADE731BFD1F13710955F3D2E9307102BF5F20B7DE34C099FD72F779F71DF6783FBF746E0E6077078CBB754FF84E5969FB46B3FF277E994FC5747C82BF634930E5BBC9FB74F89C76F614DB015867081551BC89761943AE75A23E1E5AC5F02BC88A64F8A5356B8C455AE56CE39576390C556EA47738204A3DAEFC97792E1D341D9DCEA76377D299C77F00A821BF2C54C6075B26327B90E21F
	8BFC8ED138B258F3579DF5C61D6724D6855573FE07BB537BB2281EB731E75EB369FD6C21BA23573370D974BEF6388AE77737FF34125F5F9E89E999F5C679DD99D72F7AFE3F45F97D7754FBF658FA2CDEE768BD77769D5E758D2338FD07F7FD0D2BF9FD5D1016340357B7FB4867F93E1DC6C373CE5626A7F69AF51F3513G0F70CA0B82BEF627DEAC4C6864F51CA027CFD5492541F7E1171E5E9DA5EA5F9402CCB9D01DAC5B324B57B626576573AC299DE407E47991BAFA04C6839E671516GFC323EED78ECE73A1C
	EE582D489541F74BEEBD3D67FD1E1F5C8DF2ED32EC2F7CF94ECBF7A470E33C30F8609301D2D4B8AB63811F67C0B3C0A6371E4915481F15755A7C9A00EF77421C4007810D2A77AEE30172BC3A1CB6CEA5B3993E27566B557F272DDCAFD3CE4F5B23481961FB759EBD3D8DEB5531E085198EA037AC9B3E4737CD59B5E9ED87FC152F15CF2C3870B39DE5E63370FD1E1B617A3BD705FAA604595F7615005FE30FAB799CB506DA97793E1DB1943B196C11B943337149930A0DEF5A949BF71D8F65D9A0A67B2373211649
	64271C7FFE6D404F50AC6DD2EC2E33ABB6C77405E2333C5F5F2D68B96B07579E71752137C75440705A631E9E25EE529C45466EE15AF847B0ECDCB9B8BC9B2F1D2B58785BBC4546BFFE94487FB5556A1859E099DE4C1C35DCD84C7CE11EE2B3DD6E723E35A2941B19DEC701227728F3F86D3122AF947BD9B95FADD04AA9DA993A5E8D8B953D138783552BEA9398D74D6B75D02122F7FFC0FFE875D6AED174EE8E599FCC3721C8E90F1E25CABE510D21177F23E50ADED2E9A86D68BFBE9EAFD66C49A8D1723D2DB874
	78D832DC516BE9DC6EDF2F26865494DF542ED04A7E4A2C6411559CFA9EE1AB953D9D66E04F357A3F46FD539AFA3C5D38CA51DB37B6002DDB36B2B74936BE3CDA517B5FCFC25173EF6F16568BB927A91F05ABD37C1F27FAB76B7F6C8FE41B5C74326C923A87ABF986C57F36BE5E983AEFB72A5EE53AB0E0EC13F719AAB158DA2E682D8C5817381EFFFBBD0D976E5B41F50AEFA357ABF9DF37BF74BA3D3DC1951F3D439BF79F8E69F9F2A6FB5AB13C6BE049C625EE732A949B8F866A7BDB48B424B2E0CCC78DA3CE58
	3BC95877231B15BC6604E48353BB2DFAFEFFD5F1A8FACC768FA1BD074E4A787947CA993534FEFE47D4B246EF7AD8FE76FE5C96C5EFC6F168FA2B37A9FAC9A1478C535DDF2B785431DD49672BE1587D508EC5AFF74770E236EDC768FE1D3ED331F56EEE254C9F05540E7E7BEDC53D126FA7FB14FCEF88A9DFF97E3AD751FBA760D82A551B2CBA4B1F356B4257FDC7F7056E4F576979FC7FF97D459AFADE0B2D0A5E44E1446E36A6C5AF5F9A3A5E68030A5E3810E30E69BE582C3477CB2AB32323C3325B3F3F9EAA8D
	5DDFC655D91F5356007340ED6AF92025C5519BD5923A5E95DFA8FA73CF8E4FDF31DFAA7EFAD235CF71474073D7CD79EFFE25686DA839307EDAF6DC31277104126F48E17457132A75FF53B02E9F8FF7A9FA0BC20EBB7FB153B30C716FCFF6255EC33DCA9EE77F89F6BCB28CBB2EF3A8F65CF7D249630EE1DCCF5F9B4675F45AA925BCFA3BC54EA3F6986D7DE13F22F7AC2476E632854398838F3814B2DE89381652760DBE37EA8C9AC61F1A68D1741E9B669818B62078B4FFD049673A106C769FC79DA5217BEB53E9
	D57C853CE6EA57D41F1ED174D216DD581AEAEB55054F7B070694DFDEF7D649BB33B274B51535AA781AAAFBD3683E3D6F9BC5EF51D7212FBF267DC351DBD9F501EB2AFF02EF8D67955F1E7AD649FBEFC836B13D1FFC2768B9BA3E5F5E89577FEDC7A8ED603FBEE38525BEC9D9CA3E56106C1257C186C56F35128B9F7B778EE35EF2143E121C7D76677805E42351516FF4740B64D7429BC5B248327BA06F53BD9A76FD76AA657B48157F7A77DE5D7C7F200C732B15BADD2E7A1E3F7ADFDFF6793F348C763CF95990BD
	177FFC2EA1F28F3EC307E2B1400FC36CD90AA5G1F02D88FFDFFCC8670263D9C7B8DFD9E3B8C78EA443661BBFE2C087DF9AEBDD78AFCACE28B3B28AE58B281317BCA39FDD391B3623BF652907B063D272241E8E8EB60584492EECBAFE287CE727C4EA1F64DC9DE5F11083D096F4708C26CB234A58DB176DE8E22AB6C63D855F26E2BBC44061A382F4C08C594232F90BB0A6F1E31A256D942FD950958C4F65E9F7884444694F37B12917BAB3EE3A59D312B9A392FF66F6718D042F55B90BBD8426B560BD8CC892F1B
	04180B669781FC8CE28FB6727A0EC7ECAD56B78931AB70FDB45391F314727A56B462BB9FE8FE4D40BB91E36721094DE108D550B898857C98442E36F21BE3915BDE4CED1E005865455C6629084DE964B627A1369E5F2DA1D8B9B629115B5C0298FB7F095666F56C375BC0A68C659A309E23903B925FA394ED553691E937CC44EEEE65FDA62F09E3E5EBF9FEE644DCEBF9FE55085D514A738BC72CE1AD2FEFA4E2FB87F8FEB1087D04E263011F0C586B780E3364A6FE7E71A89DB748EF05D88E60F318C35AF3DA2749
	F1A0FE1D9B52BF6FE7BCCB72E907BC6C184F371F78BF97F7AD9D1BC602EC944A7FFE15763CD9AA9D2B92A0BD69GBF8F5752976C1C187A1CDF32576F18988E9A8DEF4D1CB9F39E56A7ABCF7FBC5C52BCFAFE8D64CB8EF2DF6D25631F9578B644DEAE657E8BBB48EDB487FD46B3100DB1108F590C7A90ED3C4A4F595D1BE93F09877989E84F5FE88C2683BF8331011358464D7CEC704F49A5CCBEFBB76F54F04ECEFA5B5B5E4C4E24125FE1D2BF5BC04A33E3F96368F40725FFC1475F111096550C4F395371B78178
	A44446527EA99C02F17A90776D49004F44990358DA87793CAC37BFAB634754DFD6405B8E71B8CC89709C575B345F0791FB8EF1BB9FAD66750DC7BBBF88F8BEFCEE90BBD38FA9B120FE96B39D7099D8AE9B2BC8396507391FDFB0AAFEFE0ADDB3A06D44E1DE374B9B037FC6567534ACE25F08433C2CB4765EAF60A7A0F60456BB9D789907F93D4784FDDEEDF600FADB0E988D3F54344FCFE9AC55G5EF0844F91B7AE5454211E1FBE15F5BEC17B5DC7382DF9D66E2BA84CE71FD5BB4E511FFA117398472EC9A01B04
	F9580BF93EC28BBE67C9B18B70B508EDE64F4D816FEE41673E831E07B786714BE8486787609765396F57597C82707896DE1F5D814E6DFF4E1EAD8459F434332F117B246493EE67FF87FC0EF32E171DD650D35B59817CAEEE33AAC6FB8117BE6165BEC12FEB23010FC16C50DAEE4BD434657235414651C0BEB334FA772167E839A640CBDA518734DCAB70ED08B98738AD612D5C37B78DE8E3E58DBD03426C1CA3850B791CGF646363233157CF965054249A133906ABA10BE9A4577FCBE8938965F2C5E33BAB5DF51
	0BD9953A5E93A6C5EFC35F70763A5E20E7D95877A25539119BBBC3AFFF3B6A5C481D258176F52ABF566C9F3EBF0C35755F97A9F6DE32D8A96F73C07B6555151AFD4EBF2A4E096C8CF91FDF3E0FF6B2F4DBE7294E0D8C673EC7F929225757943A7F8F2A4E1B1C8F38C729557B25D951EB8C79DDD9CCF752CA25BDDED51D7F78BC70D983CD7926B2C56F6701762BB7C35CECD662A6F5987B631B57A8F69ED31D6938ACD0F9A4EED4656D9E463EED386A3C06BD20AF2AE5DFB0597846D0FE37C3EEB755590E62006DDD
	2D71F74EC70A5EA5433C97CE0F6E4A5F1BD467B0968D230E3DA15511492E9E463D85E705E2CFE5C87EE0327FA88E5D67D7EED44A1899704C0A56672F284E03AC9F66FD08251B951F57294EE60C9CC61B9FD71D375896685E4EE66D589C9E5259937FFB3917EED1EC3FC975DB8B5BDAC39F2F93D43F3730B45039B2AF5B6DEBC30F1DD7D43F01B0DFF546A3E9CD68F6D62B5EF138F5E0F857159F8C04EE6BE73BC9B9CB285E571F974255AC66D5E15600C7D860EBE37DCF1EF9BA66F8C3E136105DA4FC50CB1FB7EA
	92E61DA18FAE8D39E116F3BB50CF873E9668FD8346C9426CD6DB1F5B5C548FF94E53587F50759F3F14787C31019C6103A6E1A9598EB8AAFA682FBA0876861BE4BBA6FAC8297B85235B6500C4401B8443G7D18B5A01DF50A4DC2E1F72B787520B8A00976FA7EBB8683123028191434113C72F22355B650CB9F045C5EAC987AEDFD22A4ACE049CEDBFF4FC67663915B097DC2D6BD7506C067FCE06FC2EAAF492582F3D9F8CF7E1A1587D263F3046C7D429C274BE65FEF6B12DC1EA641A875FA4401DE1753BE645E45
	B24A25EFE124EFAF036C0A317A243295E4C906C61F9A7A0F9173264F5B1FAD88C39EE1A315A433508A14A03FD0630122C4CF93108D0AAC4334CB16CBEB9FEDDC5211ADE44915A40D704110DB92BE683675B91CE761CB830D965ABCF3A43056E36B9F68F6F97A40B23317E5BC898B2838FAE265B5B73F7385ADC0D11504954C15203A31C7F475ED2C6F6EF6740B1881789532AF456C09CC05174C02212B969DF8EAE6A744C1031053D7D9C97FD7517F1B487FAA0AD4D124EA93B8B7DD8878671DBE446BCC03876C49
	277610662F588FADA8BD7B6A449B1E2BCBCF035A6D97E61DA63FB7820DE0D224586F81DD9EF3CD695CD1A9BFA6ED64A621B2C4721DBF04B9129AB6514769D2CEEF2E4DF971461CEC41GDD05BDDE8841CB1E91046075301E13A3395CAC6E8436AC202FCC617D07F237D02ED8D09E6D2443A24A889A0EE87C94B532E5ADF272A2D7C7067CFD81A23D48FD865C814A99FCFA83C1F3FD431A40F998DC044B27228574FF61301B0AE8AD263AC568618F0730CEFC230A0C7E33A441345FB1A45A4DC7FB61DF9B8CD33512
	30F8355955EDEE7438865D8366FD362EDE1ED0C8FE215656EFB7370A83A27930C984DEC2C54DC7C52758C5B6C74C07C42957E5A78AD657993364B29F05E6B24385DC72381CG97B3053DB6372D4BA11D056C6C03CCF38D24AEE8953B49A8A05BF456ADD2108C01C786A5F30B686902113856AC89D9EBC8C00ADD95123090531B7A21EFC3G92018572402981E58D22DC4053D5194E25469EA12F772D3D789AF2275210E4D5BFC78E5059971F257B82D9CA7E34DDADC7D03ADA360E4CC5D537A35A3A1101A77B62EC
	05E32134C23C4F00C726DCB9BAB297D55DCE8CE92207540D4CFC0DE8B7996A5CBA5CC5D58B07D20BDC3996F4EF5ECFAD346D451FC4A6C7228DBAB2640FEC4B347B446BD9CD990A8C7EE9F25B2B43296365D702F73C6C56F05DBA9C57A70F9D9C70516F3E78DAAACCE9298F6416A25BF4F351EE326136A708EF9499DF0E9C9C3ACB073B283CF0056285036C8592BD33AFF63B2F9972093A6BB5F6EBDB0F3F8BA434563B28EABADA2969EC39261D023A377FDB44594DCAAD48F845634CDFAD48A8F9C6073B286AF427
	36E5C81D48267487FEEA210DC8DA93615FB2A26F570E1CA4A21D82EF4B0B4A520735239B9FA58CFE5AC4BD46E787ED937277EF9127CF7A0E710162747F678C01F33EF358DA41FBA5F1914EE1DF721DD310B9ACD918339FC1B6735F1606C5708765FD0E7E0AF5CA9A7FBDE8C84B17FFF7594CB6DA54887B5DE602105FD6A66BF126DE2BE94E9E9D6E22F2559B5A69BEBF9C14652796245BED70514852E89019720B2E26D902F651C6ECA6C1BD6B5F2A3D320C5A764A11EB612F3D48467EEA9F0DDC0D8611A95768DF
	2943DDD4DED82CF8013F661210A1E8ADAE62BA1915BA71D721921BF27D54027432559AAF701655DED64B83E870FE2027F1D17926C2FB69646D4DFE3BC9D877DD0D6C1E0E2B22054C4BF6E5730AF91F050968E36FDD0A12BF4D4214AC769BEA9574B72826821E5147FF6369DB9B39796B6F37220F76591CCE4966BCD55FEFBFE0BBED5BF3D692155F285E5CC9729F60B2F2227C8E3CCEE277C9154E7F85D0CB87883CB2E82C6BB7GG8C46GGD0CB818294G94G88G88G01DAA9B13CB2E82C6BB7GG8C46G
	G8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGA5B8GGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private String getChangeCondition( String change )
{

	if( change.equalsIgnoreCase("After a Duration") )
	{
		return LMProgramDirectGear.CHANGE_DURATION;
	}
	else if( change.equalsIgnoreCase("Priority Change") )
	{
		return LMProgramDirectGear.CHANGE_PRIORITY;
	}
	else if( change.equalsIgnoreCase("Above Trigger") )
	{
		return LMProgramDirectGear.CHANGE_TRIGGER_OFFSET;
	}	
	else
		return LMProgramDirectGear.CHANGE_NONE;

}
/**
 * Return the JCheckBoxRampIn property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRampIn() {
	if (ivjJCheckBoxRampIn == null) {
		try {
			ivjJCheckBoxRampIn = new javax.swing.JCheckBox();
			ivjJCheckBoxRampIn.setName("JCheckBoxRampIn");
			ivjJCheckBoxRampIn.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRampIn.setText("Ramp In");
			ivjJCheckBoxRampIn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRampIn;
}
/**
 * Return the JComboBoxCycleCountSndType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JComboBox getJComboBoxCycleCountSndType() {
	if (ivjJComboBoxCycleCountSndType == null) {
		try {
			ivjJComboBoxCycleCountSndType = new javax.swing.JComboBox();
			ivjJComboBoxCycleCountSndType.setName("JComboBoxCycleCountSndType");
			ivjJComboBoxCycleCountSndType.setPreferredSize(new java.awt.Dimension(146, 23));
			ivjJComboBoxCycleCountSndType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxCycleCountSndType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxCycleCountSndType.setMinimumSize(new java.awt.Dimension(146, 23));
			// user code begin {1}
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_FIXED_SHED ) );
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_DYNAMIC_SHED ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxCycleCountSndType;
}
/**
 * Return the JComboBoxGroupSelection property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGroupSelection() {
	if (ivjJComboBoxGroupSelection == null) {
		try {
			ivjJComboBoxGroupSelection = new javax.swing.JComboBox();
			ivjJComboBoxGroupSelection.setName("JComboBoxGroupSelection");
			ivjJComboBoxGroupSelection.setPreferredSize(new java.awt.Dimension(184, 23));
			ivjJComboBoxGroupSelection.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxGroupSelection.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxGroupSelection.setMinimumSize(new java.awt.Dimension(184, 23));
			// user code begin {1}
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LAST_CONTROLLED ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_ALWAYS_FIRST_GROUP ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LEAST_CONTROL_TIME ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGroupSelection;
}
/**
 * Return the JComboBoxHowToStop property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHowToStop() {
	if (ivjJComboBoxHowToStop == null) {
		try {
			ivjJComboBoxHowToStop = new javax.swing.JComboBox();
			ivjJComboBoxHowToStop.setName("JComboBoxHowToStop");
			ivjJComboBoxHowToStop.setPreferredSize(new java.awt.Dimension(184, 23));
			ivjJComboBoxHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxHowToStop.setMinimumSize(new java.awt.Dimension(184, 23));
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			ivjJComboBoxHowToStop.addItem( "Ramp Out / Time In");
			ivjJComboBoxHowToStop.addItem( "Ramp Out / Restore");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHowToStop;
}
/**
 * Return the JComboBoxNumGroups property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxNumGroups() {
	if (ivjJComboBoxNumGroups == null) {
		try {
			ivjJComboBoxNumGroups = new javax.swing.JComboBox();
			ivjJComboBoxNumGroups.setName("JComboBoxNumGroups");
			ivjJComboBoxNumGroups.setPreferredSize(new java.awt.Dimension(146, 23));
			ivjJComboBoxNumGroups.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxNumGroups.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxNumGroups.setMinimumSize(new java.awt.Dimension(146, 23));
			// user code begin {1}
			ivjJComboBoxNumGroups.addItem("All of Them");
			for( int i = 1; i < 26; i++ )
				ivjJComboBoxNumGroups.addItem( new Integer(i) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxNumGroups;
}
/**
 * Return the JComboBoxSendRate property value.
 * @return javax.swing.JComboBox
 */

/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSendRateDigits() {
	if (ivjJComboBoxSendRateDigits == null) {
		try {
			ivjJComboBoxSendRateDigits = new javax.swing.JComboBox();
			ivjJComboBoxSendRateDigits.setName("JComboBoxSendRateDigits");
			ivjJComboBoxSendRateDigits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxSendRateDigits.setMaximumSize(new java.awt.Dimension(67, 23));
			ivjJComboBoxSendRateDigits.setPreferredSize(new java.awt.Dimension(67, 23));
			ivjJComboBoxSendRateDigits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxSendRateDigits.setMinimumSize(new java.awt.Dimension(64, 23));
			ivjJComboBoxSendRateDigits.setEditable(true);
			// user code begin {1}
			NewComboBoxEditor ncb = new NewComboBoxEditor();
			ncb.getJTextField().setDocument( 
				  new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 1000) );
         	ivjJComboBoxSendRateDigits.setEditor( ncb );
			
			ivjJComboBoxSendRateDigits.addItem("0");
			ivjJComboBoxSendRateDigits.addItem("1");
			ivjJComboBoxSendRateDigits.addItem("2");
			ivjJComboBoxSendRateDigits.addItem("5");
			ivjJComboBoxSendRateDigits.addItem("8");
			ivjJComboBoxSendRateDigits.addItem("10");
			ivjJComboBoxSendRateDigits.addItem("15");
			ivjJComboBoxSendRateDigits.addItem("20");
			ivjJComboBoxSendRateDigits.addItem("30");
			ivjJComboBoxSendRateDigits.addItem("45");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSendRateDigits;
}
/**
 * Return the JComboBoxSendRate11 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSendRateUnits() {
	if (ivjJComboBoxSendRateUnits == null) {
		try {
			ivjJComboBoxSendRateUnits = new javax.swing.JComboBox();
			ivjJComboBoxSendRateUnits.setName("JComboBoxSendRateUnits");
			ivjJComboBoxSendRateUnits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxSendRateUnits.setMaximumSize(new java.awt.Dimension(102, 23));
			ivjJComboBoxSendRateUnits.setPreferredSize(new java.awt.Dimension(102, 23));
			ivjJComboBoxSendRateUnits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxSendRateUnits.setMinimumSize(new java.awt.Dimension(102, 23));
			// user code begin {1}
			ivjJComboBoxSendRateUnits.addItem("minutes");
			ivjJComboBoxSendRateUnits.addItem("hours");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSendRateUnits;
}
/**
 * Return the JComboBoxSendRateDigits1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxShedTimeDigits() {
	if (ivjJComboBoxShedTimeDigits == null) {
		try {
			ivjJComboBoxShedTimeDigits = new javax.swing.JComboBox();
			ivjJComboBoxShedTimeDigits.setName("JComboBoxShedTimeDigits");
			ivjJComboBoxShedTimeDigits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxShedTimeDigits.setMaximumSize(new java.awt.Dimension(67, 23));
			ivjJComboBoxShedTimeDigits.setPreferredSize(new java.awt.Dimension(67, 23));
			ivjJComboBoxShedTimeDigits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxShedTimeDigits.setMinimumSize(new java.awt.Dimension(64, 23));
			ivjJComboBoxShedTimeDigits.setEditable(true);
			// user code begin {1}
			
			NewComboBoxEditor ncb = new NewComboBoxEditor();
			ncb.getJTextField().setDocument( 
				  new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 1000) );
			ivjJComboBoxShedTimeDigits.setEditor( ncb );
			
			ivjJComboBoxShedTimeDigits.addItem("1");
			ivjJComboBoxShedTimeDigits.addItem("2");
			ivjJComboBoxShedTimeDigits.addItem("3");
			ivjJComboBoxShedTimeDigits.addItem("4");
			ivjJComboBoxShedTimeDigits.addItem("5");
			ivjJComboBoxShedTimeDigits.addItem("6");
			ivjJComboBoxShedTimeDigits.addItem("7");
			ivjJComboBoxShedTimeDigits.addItem("8");
			ivjJComboBoxShedTimeDigits.addItem("10");
			ivjJComboBoxShedTimeDigits.addItem("15");
			ivjJComboBoxShedTimeDigits.addItem("20");
			ivjJComboBoxShedTimeDigits.addItem("30");
			ivjJComboBoxShedTimeDigits.addItem("45");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxShedTimeDigits;
}
/**
 * Return the JComboBoxSendRateUnits1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxShedTimeUnits() {
	if (ivjJComboBoxShedTimeUnits == null) {
		try {
			ivjJComboBoxShedTimeUnits = new javax.swing.JComboBox();
			ivjJComboBoxShedTimeUnits.setName("JComboBoxShedTimeUnits");
			ivjJComboBoxShedTimeUnits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxShedTimeUnits.setMaximumSize(new java.awt.Dimension(102, 23));
			ivjJComboBoxShedTimeUnits.setPreferredSize(new java.awt.Dimension(102, 23));
			ivjJComboBoxShedTimeUnits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxShedTimeUnits.setMinimumSize(new java.awt.Dimension(102, 23));
			// user code begin {1}
			ivjJComboBoxShedTimeUnits.addItem("minutes");
			ivjJComboBoxShedTimeUnits.addItem("hours");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxShedTimeUnits;
}
/**
 * Return the JComboBoxStopOrder property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxStopOrder() {
	if (ivjJComboBoxStopOrder == null) {
		try {
			ivjJComboBoxStopOrder = new javax.swing.JComboBox();
			ivjJComboBoxStopOrder.setName("JComboBoxStopOrder");
			ivjJComboBoxStopOrder.setPreferredSize(new java.awt.Dimension(184, 23));
			ivjJComboBoxStopOrder.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxStopOrder.setMinimumSize(new java.awt.Dimension(184, 23));
			// user code begin {1}
			ivjJComboBoxStopOrder.addItem("Random");
			ivjJComboBoxStopOrder.addItem("First In First Out");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxStopOrder;
}
/**
 * Return the JComboBoxWhenChange property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxWhenChange() {
	if (ivjJComboBoxWhenChange == null) {
		try {
			ivjJComboBoxWhenChange = new javax.swing.JComboBox();
			ivjJComboBoxWhenChange.setName("JComboBoxWhenChange");
			ivjJComboBoxWhenChange.setPreferredSize(new java.awt.Dimension(170, 23));
			ivjJComboBoxWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxWhenChange.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJComboBoxWhenChange.addItem("Manually Only");
			ivjJComboBoxWhenChange.addItem("After a Duration");
			ivjJComboBoxWhenChange.addItem("Priority Change");
			ivjJComboBoxWhenChange.addItem("Above Trigger");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxWhenChange;
}
/**
 * Return the JCSpinFieldChangeDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeDuration() {
	if (ivjJCSpinFieldChangeDuration == null) {
		try {
			ivjJCSpinFieldChangeDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeDuration.setName("JCSpinFieldChangeDuration");
			ivjJCSpinFieldChangeDuration.setPreferredSize(new java.awt.Dimension(45, 20));
			ivjJCSpinFieldChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeDuration.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeDuration.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(3)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeDuration;
}
/**
 * Return the JCSpinFieldChangePriority property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangePriority() {
	if (ivjJCSpinFieldChangePriority == null) {
		try {
			ivjJCSpinFieldChangePriority = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangePriority.setName("JCSpinFieldChangePriority");
			ivjJCSpinFieldChangePriority.setPreferredSize(new java.awt.Dimension(35, 30));
			ivjJCSpinFieldChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangePriority.setMaximumSize(new java.awt.Dimension(40, 30));
			// user code begin {1}
			ivjJCSpinFieldChangePriority.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(9999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangePriority;
}
/**
 * Return the JCSpinFieldChangeTriggerNumber property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeTriggerNumber() {
	if (ivjJCSpinFieldChangeTriggerNumber == null) {
		try {
			ivjJCSpinFieldChangeTriggerNumber = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeTriggerNumber.setName("JCSpinFieldChangeTriggerNumber");
			ivjJCSpinFieldChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeTriggerNumber.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(1), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(1)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeTriggerNumber;
}
/**
 * Return the JCSpinFieldPercentReduction property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldPercentReduction() {
	if (ivjJCSpinFieldPercentReduction == null) {
		try {
			ivjJCSpinFieldPercentReduction = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldPercentReduction.setName("JCSpinFieldPercentReduction");
			ivjJCSpinFieldPercentReduction.setPreferredSize(new java.awt.Dimension(88, 22));
			ivjJCSpinFieldPercentReduction.setMaximumSize(new java.awt.Dimension(88, 22));
			ivjJCSpinFieldPercentReduction.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJCSpinFieldPercentReduction.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(100)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			ivjJCSpinFieldPercentReduction.setValue( new Integer(100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldPercentReduction;
}
/**
 * Return the JCSpinFieldRampInPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampInPercent() {
	if (ivjJCSpinFieldRampInPercent == null) {
		try {
			ivjJCSpinFieldRampInPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampInPercent.setName("JCSpinFieldRampInPercent");
			ivjJCSpinFieldRampInPercent.setPreferredSize(new java.awt.Dimension(66, 20));
			ivjJCSpinFieldRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampInPercent.setMaximumSize(new java.awt.Dimension(66, 20));
			ivjJCSpinFieldRampInPercent.setMinimumSize(new java.awt.Dimension(66, 20));
			// user code begin {1}
			ivjJCSpinFieldRampInPercent.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(100), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(100)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampInPercent;
}
/**
 * Return the JCSpinFieldRampOutPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampOutPercent() {
	if (ivjJCSpinFieldRampOutPercent == null) {
		try {
			ivjJCSpinFieldRampOutPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampOutPercent.setName("JCSpinFieldRampOutPercent");
			ivjJCSpinFieldRampOutPercent.setPreferredSize(new java.awt.Dimension(66, 20));
			ivjJCSpinFieldRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampOutPercent.setMaximumSize(new java.awt.Dimension(66, 20));
			ivjJCSpinFieldRampOutPercent.setMinimumSize(new java.awt.Dimension(66, 20));
			// user code begin {1}
			ivjJCSpinFieldRampOutPercent.setDataProperties(
						new com.klg.jclass.field.DataProperties(
							new com.klg.jclass.field.validate.JCIntegerValidator(
								null, new Integer(0), new Integer(100), null, true, 
								null, new Integer(1), "#,##0.###;-#,##0.###", false, 
								false, false, null, new Integer(100)), 
								new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
								new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
								new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampOutPercent;
}
/**
 * Return the JLabelChangeDuration property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeDuration() {
	if (ivjJLabelChangeDuration == null) {
		try {
			ivjJLabelChangeDuration = new javax.swing.JLabel();
			ivjJLabelChangeDuration.setName("JLabelChangeDuration");
			ivjJLabelChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeDuration.setText("Change Duration:");
			ivjJLabelChangeDuration.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeDuration.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeDuration;
}
/**
 * Return the JLabelChangePriority property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangePriority() {
	if (ivjJLabelChangePriority == null) {
		try {
			ivjJLabelChangePriority = new javax.swing.JLabel();
			ivjJLabelChangePriority.setName("JLabelChangePriority");
			ivjJLabelChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangePriority.setText("Change Priority:");
			ivjJLabelChangePriority.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangePriority.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangePriority;
}
/**
 * Return the JLabelChangeTriggerNumber property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerNumber() {
	if (ivjJLabelChangeTriggerNumber == null) {
		try {
			ivjJLabelChangeTriggerNumber = new javax.swing.JLabel();
			ivjJLabelChangeTriggerNumber.setName("JLabelChangeTriggerNumber");
			ivjJLabelChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerNumber.setText("Trigger Number:");
			ivjJLabelChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerNumber.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerNumber;
}
/**
 * Return the JLabelChangeTriggerOffset property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerOffset() {
	if (ivjJLabelChangeTriggerOffset == null) {
		try {
			ivjJLabelChangeTriggerOffset = new javax.swing.JLabel();
			ivjJLabelChangeTriggerOffset.setName("JLabelChangeTriggerOffset");
			ivjJLabelChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerOffset.setText("Trigger Offset:");
			ivjJLabelChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerOffset.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerOffset;
}
/**
 * Return the JLabelCycleCntSndType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCycleCntSndType() {
	if (ivjJLabelCycleCntSndType == null) {
		try {
			ivjJLabelCycleCntSndType = new javax.swing.JLabel();
			ivjJLabelCycleCntSndType.setName("JLabelCycleCntSndType");
			ivjJLabelCycleCntSndType.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCycleCntSndType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelCycleCntSndType.setText("Refresh Shed Type:");
			ivjJLabelCycleCntSndType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCycleCntSndType;
}
/**
 * Return the JLabelGroupSelection property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGroupSelection() {
	if (ivjJLabelGroupSelection == null) {
		try {
			ivjJLabelGroupSelection = new javax.swing.JLabel();
			ivjJLabelGroupSelection.setName("JLabelGroupSelection");
			ivjJLabelGroupSelection.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelGroupSelection.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelGroupSelection.setText("Group Selection Method:");
			ivjJLabelGroupSelection.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGroupSelection;
}
/**
 * Return the JLabelHowToStop property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHowToStop() {
	if (ivjJLabelHowToStop == null) {
		try {
			ivjJLabelHowToStop = new javax.swing.JLabel();
			ivjJLabelHowToStop.setName("JLabelHowToStop");
			ivjJLabelHowToStop.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelHowToStop.setText("How to Stop Control:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHowToStop;
}
/**
 * Return the JLabelMinutesChDur property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutesChDur() {
	if (ivjJLabelMinutesChDur == null) {
		try {
			ivjJLabelMinutesChDur = new javax.swing.JLabel();
			ivjJLabelMinutesChDur.setName("JLabelMinutesChDur");
			ivjJLabelMinutesChDur.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutesChDur.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelMinutesChDur.setText("(min.)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutesChDur;
}
/**
 * Return the JLabelNumGroups property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelNumGroups() {
	if (ivjJLabelNumGroups == null) {
		try {
			ivjJLabelNumGroups = new javax.swing.JLabel();
			ivjJLabelNumGroups.setName("JLabelNumGroups");
			ivjJLabelNumGroups.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelNumGroups.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelNumGroups.setText("# of Groups Each Time:");
			ivjJLabelNumGroups.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelNumGroups;
}
/**
 * Return the JLabelPercentReduction property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPercentReduction() {
	if (ivjJLabelPercentReduction == null) {
		try {
			ivjJLabelPercentReduction = new javax.swing.JLabel();
			ivjJLabelPercentReduction.setName("JLabelPercentReduction");
			ivjJLabelPercentReduction.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPercentReduction.setText("Group Capacity Reduction %:");
			ivjJLabelPercentReduction.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPercentReduction.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPercentReduction;
}
/**
 * Return the JLabelRampInInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInInterval() {
	if (ivjJLabelRampInInterval == null) {
		try {
			ivjJLabelRampInInterval = new javax.swing.JLabel();
			ivjJLabelRampInInterval.setName("JLabelRampInInterval");
			ivjJLabelRampInInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInInterval.setText("Ramp In Interval: ");
			ivjJLabelRampInInterval.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInInterval.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInInterval;
}
/**
 * Return the JLabelRampInPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercent() {
	if (ivjJLabelRampInPercent == null) {
		try {
			ivjJLabelRampInPercent = new javax.swing.JLabel();
			ivjJLabelRampInPercent.setName("JLabelRampInPercent");
			ivjJLabelRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercent.setText("Ramp In Percent: ");
			ivjJLabelRampInPercent.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercent.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercent;
}
/**
 * Return the JLabelRampInPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercentSign() {
	if (ivjJLabelRampInPercentSign == null) {
		try {
			ivjJLabelRampInPercentSign = new javax.swing.JLabel();
			ivjJLabelRampInPercentSign.setName("JLabelRampInPercentSign");
			ivjJLabelRampInPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercentSign;
}
/**
 * Return the JLabelRampInSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInSec() {
	if (ivjJLabelRampInSec == null) {
		try {
			ivjJLabelRampInSec = new javax.swing.JLabel();
			ivjJLabelRampInSec.setName("JLabelRampInSec");
			ivjJLabelRampInSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInSec;
}
/**
 * Return the JLabelRampOutInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutInterval() {
	if (ivjJLabelRampOutInterval == null) {
		try {
			ivjJLabelRampOutInterval = new javax.swing.JLabel();
			ivjJLabelRampOutInterval.setName("JLabelRampOutInterval");
			ivjJLabelRampOutInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutInterval.setText("Ramp Out Interval: ");
			ivjJLabelRampOutInterval.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutInterval.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutInterval;
}
/**
 * Return the JLabelRampOutPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercent() {
	if (ivjJLabelRampOutPercent == null) {
		try {
			ivjJLabelRampOutPercent = new javax.swing.JLabel();
			ivjJLabelRampOutPercent.setName("JLabelRampOutPercent");
			ivjJLabelRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercent.setText("Ramp Out Percent: ");
			ivjJLabelRampOutPercent.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercent.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercent;
}
/**
 * Return the JLabelRampOutPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercentSign() {
	if (ivjJLabelRampOutPercentSign == null) {
		try {
			ivjJLabelRampOutPercentSign = new javax.swing.JLabel();
			ivjJLabelRampOutPercentSign.setName("JLabelRampOutPercentSign");
			ivjJLabelRampOutPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercentSign;
}
/**
 * Return the JLabelRampOutSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutSec() {
	if (ivjJLabelRampOutSec == null) {
		try {
			ivjJLabelRampOutSec = new javax.swing.JLabel();
			ivjJLabelRampOutSec.setName("JLabelRampOutSec");
			ivjJLabelRampOutSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutSec;
}
/**
 * Return the JLabelSendRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSendRate() {
	if (ivjJLabelSendRate == null) {
		try {
			ivjJLabelSendRate = new javax.swing.JLabel();
			ivjJLabelSendRate.setName("JLabelSendRate");
			ivjJLabelSendRate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelSendRate.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelSendRate.setText("Command Resend Rate:");
			ivjJLabelSendRate.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSendRate;
}
/**
 * Return the JLabelShedTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelShedTime() {
	if (ivjJLabelShedTime == null) {
		try {
			ivjJLabelShedTime = new javax.swing.JLabel();
			ivjJLabelShedTime.setName("JLabelShedTime");
			ivjJLabelShedTime.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelShedTime.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelShedTime.setText("Fixed Shed Time:");
			ivjJLabelShedTime.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelShedTime;
}
/**
 * Return the JLabelStopOrder property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStopOrder() {
	if (ivjJLabelStopOrder == null) {
		try {
			ivjJLabelStopOrder = new javax.swing.JLabel();
			ivjJLabelStopOrder.setName("JLabelStopOrder");
			ivjJLabelStopOrder.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelStopOrder.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelStopOrder.setText("Stop Order:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStopOrder;
}
/**
 * Return the JLabelWhenChange property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelWhenChange() {
	if (ivjJLabelWhenChange == null) {
		try {
			ivjJLabelWhenChange = new javax.swing.JLabel();
			ivjJLabelWhenChange.setName("JLabelWhenChange");
			ivjJLabelWhenChange.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelWhenChange.setText("When to Change:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelWhenChange;
}
/**
 * Return the JPanelChangeMethod property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelChangeMethod() {
	if (ivjJPanelChangeMethod == null) {
		try {
			ivjJPanelChangeMethod = new javax.swing.JPanel();
			ivjJPanelChangeMethod.setName("JPanelChangeMethod");
			ivjJPanelChangeMethod.setLayout(new java.awt.GridBagLayout());
			ivjJPanelChangeMethod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanelChangeMethod.setMaximumSize(new java.awt.Dimension(360, 90));
			ivjJPanelChangeMethod.setPreferredSize(new java.awt.Dimension(330, 87));
			ivjJPanelChangeMethod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJPanelChangeMethod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelChangeDuration = new java.awt.GridBagConstraints();
			constraintsJLabelChangeDuration.gridx = 1; constraintsJLabelChangeDuration.gridy = 2;
			constraintsJLabelChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeDuration.ipadx = -5;
			constraintsJLabelChangeDuration.ipady = 6;
			constraintsJLabelChangeDuration.insets = new java.awt.Insets(1, 5, 3, 5);
			getJPanelChangeMethod().add(getJLabelChangeDuration(), constraintsJLabelChangeDuration);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeDuration.gridx = 2; constraintsJCSpinFieldChangeDuration.gridy = 2;
			constraintsJCSpinFieldChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeDuration.ipadx = 34;
			constraintsJCSpinFieldChangeDuration.ipady = 19;
			constraintsJCSpinFieldChangeDuration.insets = new java.awt.Insets(1, 5, 3, 1);
			getJPanelChangeMethod().add(getJCSpinFieldChangeDuration(), constraintsJCSpinFieldChangeDuration);

			java.awt.GridBagConstraints constraintsJLabelMinutesChDur = new java.awt.GridBagConstraints();
			constraintsJLabelMinutesChDur.gridx = 3; constraintsJLabelMinutesChDur.gridy = 2;
			constraintsJLabelMinutesChDur.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutesChDur.ipadx = 5;
			constraintsJLabelMinutesChDur.ipady = -2;
			constraintsJLabelMinutesChDur.insets = new java.awt.Insets(5, 1, 5, 2);
			getJPanelChangeMethod().add(getJLabelMinutesChDur(), constraintsJLabelMinutesChDur);

			java.awt.GridBagConstraints constraintsJLabelChangePriority = new java.awt.GridBagConstraints();
			constraintsJLabelChangePriority.gridx = 4; constraintsJLabelChangePriority.gridy = 2;
			constraintsJLabelChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangePriority.ipadx = -13;
			constraintsJLabelChangePriority.ipady = 6;
			constraintsJLabelChangePriority.insets = new java.awt.Insets(1, 3, 3, 2);
			getJPanelChangeMethod().add(getJLabelChangePriority(), constraintsJLabelChangePriority);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangePriority = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangePriority.gridx = 5; constraintsJCSpinFieldChangePriority.gridy = 2;
			constraintsJCSpinFieldChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangePriority.ipadx = 34;
			constraintsJCSpinFieldChangePriority.ipady = 19;
			constraintsJCSpinFieldChangePriority.insets = new java.awt.Insets(1, 3, 3, 8);
			getJPanelChangeMethod().add(getJCSpinFieldChangePriority(), constraintsJCSpinFieldChangePriority);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerNumber.gridx = 1; constraintsJLabelChangeTriggerNumber.gridy = 3;
			constraintsJLabelChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerNumber.ipadx = -45;
			constraintsJLabelChangeTriggerNumber.ipady = 6;
			constraintsJLabelChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 15, 5);
			getJPanelChangeMethod().add(getJLabelChangeTriggerNumber(), constraintsJLabelChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerOffset.gridx = 4; constraintsJLabelChangeTriggerOffset.gridy = 3;
			constraintsJLabelChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerOffset.ipadx = -63;
			constraintsJLabelChangeTriggerOffset.insets = new java.awt.Insets(8, 3, 17, 12);
			getJPanelChangeMethod().add(getJLabelChangeTriggerOffset(), constraintsJLabelChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJTextFieldChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJTextFieldChangeTriggerOffset.gridx = 5; constraintsJTextFieldChangeTriggerOffset.gridy = 3;
			constraintsJTextFieldChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldChangeTriggerOffset.weightx = 1.0;
			constraintsJTextFieldChangeTriggerOffset.ipadx = 31;
			constraintsJTextFieldChangeTriggerOffset.insets = new java.awt.Insets(4, 3, 15, 8);
			getJPanelChangeMethod().add(getJTextFieldChangeTriggerOffset(), constraintsJTextFieldChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeTriggerNumber.gridx = 2; constraintsJCSpinFieldChangeTriggerNumber.gridy = 3;
			constraintsJCSpinFieldChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeTriggerNumber.ipadx = 34;
			constraintsJCSpinFieldChangeTriggerNumber.ipady = 19;
			constraintsJCSpinFieldChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 15, 1);
			getJPanelChangeMethod().add(getJCSpinFieldChangeTriggerNumber(), constraintsJCSpinFieldChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelWhenChange = new java.awt.GridBagConstraints();
			constraintsJLabelWhenChange.gridx = 1; constraintsJLabelWhenChange.gridy = 1;
			constraintsJLabelWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelWhenChange.ipadx = 3;
			constraintsJLabelWhenChange.ipady = 4;
			constraintsJLabelWhenChange.insets = new java.awt.Insets(0, 5, 4, 5);
			getJPanelChangeMethod().add(getJLabelWhenChange(), constraintsJLabelWhenChange);

			java.awt.GridBagConstraints constraintsJComboBoxWhenChange = new java.awt.GridBagConstraints();
			constraintsJComboBoxWhenChange.gridx = 3; constraintsJComboBoxWhenChange.gridy = 1;
			constraintsJComboBoxWhenChange.gridwidth = 3;
			constraintsJComboBoxWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxWhenChange.weightx = 1.0;
			constraintsJComboBoxWhenChange.ipadx = 170;
			constraintsJComboBoxWhenChange.ipady = 23;
			constraintsJComboBoxWhenChange.insets = new java.awt.Insets(0, 3, 1, 8);
			getJPanelChangeMethod().add(getJComboBoxWhenChange(), constraintsJComboBoxWhenChange);
			// user code begin {1}
			jComboBoxWhenChange_ActionPerformed(null);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelChangeMethod;
}
/**
 * Return the JTextFieldChangeTriggerOffset property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldChangeTriggerOffset() {
	if (ivjJTextFieldChangeTriggerOffset == null) {
		try {
			ivjJTextFieldChangeTriggerOffset = new javax.swing.JTextField();
			ivjJTextFieldChangeTriggerOffset.setName("JTextFieldChangeTriggerOffset");
			ivjJTextFieldChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJTextFieldChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJTextFieldChangeTriggerOffset.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999.9999, 99999.9999, 4) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldChangeTriggerOffset;
}
/**
 * Return the JTextFieldRampInInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampInInterval() {
	if (ivjJTextFieldRampInInterval == null) {
		try {
			ivjJTextFieldRampInInterval = new javax.swing.JTextField();
			ivjJTextFieldRampInInterval.setName("JTextFieldRampInInterval");
			ivjJTextFieldRampInInterval.setPreferredSize(new java.awt.Dimension(66, 20));
			ivjJTextFieldRampInInterval.setMaximumSize(new java.awt.Dimension(66, 20));
			ivjJTextFieldRampInInterval.setMinimumSize(new java.awt.Dimension(66, 20));
			// user code begin {1}
			ivjJTextFieldRampInInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampInInterval;
}
/**
 * Return the JTextFieldRampOutInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampOutInterval() {
	if (ivjJTextFieldRampOutInterval == null) {
		try {
			ivjJTextFieldRampOutInterval = new javax.swing.JTextField();
			ivjJTextFieldRampOutInterval.setName("JTextFieldRampOutInterval");
			ivjJTextFieldRampOutInterval.setPreferredSize(new java.awt.Dimension(66, 20));
			ivjJTextFieldRampOutInterval.setMaximumSize(new java.awt.Dimension(66, 20));
			ivjJTextFieldRampOutInterval.setMinimumSize(new java.awt.Dimension(66, 20));
			// user code begin {1}
			ivjJTextFieldRampOutInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampOutInterval;
}
/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	com.cannontech.database.db.device.lm.LMProgramDirectGear gear = null;
	
	gear = (LMProgramDirectGear)o;
	
	if( getJComboBoxHowToStop().getSelectedItem() != null )
	{
		if(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Time In") == 0)
		{
			if(getJComboBoxStopOrder().getSelectedItem().toString().compareTo("First In First Out") == 0)
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_FIFO);
			else
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM);
			gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
			String interval = getJTextFieldRampOutInterval().getText();
			if(interval.compareTo("") == 0)
				gear.setRampOutInterval(new Integer(0));
			else
				gear.setRampOutInterval(new Integer(interval));
		}
		else if(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Restore") == 0)
		{
			if(getJComboBoxStopOrder().getSelectedItem().toString().compareTo("First In First Out") == 0)
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_FIFO_RESTORE);
			else
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM_RESTORE);
			gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
			String interval = getJTextFieldRampOutInterval().getText();
			if(interval.compareTo("") == 0)
				gear.setRampOutInterval(new Integer(0));
			else
				gear.setRampOutInterval(new Integer(interval));
		}
		else
			gear.setMethodStopType( 
				com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxHowToStop().getSelectedItem().toString() ) );
	}
	
	if(getJCheckBoxRampIn().isSelected())
	{
		gear.setRampInPercent(new Integer(((Number)getJCSpinFieldRampInPercent().getValue()).intValue()));
		gear.setRampInInterval(new Integer(getJTextFieldRampInInterval().getText()));
	}

	//This will need to be altered once serverside supports the strings for fixed shed times and dynamic shed times
	if(com.cannontech.common.util.StringUtils.removeChars( ' ', (String)getJComboBoxCycleCountSndType().getSelectedItem()).compareTo(LMProgramDirectGear.OPTION_DYNAMIC_SHED) == 0)
		gear.setMethodOptionType(LMProgramDirectGear.OPTION_COUNT_DOWN);
	else
		gear.setMethodOptionType(LMProgramDirectGear.OPTION_FIXED_COUNT);
	
	gear.setPercentReduction( new Integer( ((Number)getJCSpinFieldPercentReduction().getValue()).intValue() ) );
	
	gear.setChangeCondition( getChangeCondition(getJComboBoxWhenChange().getSelectedItem().toString()) );

	gear.setChangeDuration( new Integer( ((Number)getJCSpinFieldChangeDuration().getValue()).intValue() * 60 ) );
	gear.setChangePriority( new Integer( ((Number)getJCSpinFieldChangePriority().getValue()).intValue() ) );
	gear.setChangeTriggerNumber( new Integer( ((Number)getJCSpinFieldChangeTriggerNumber().getValue()).intValue() ) );
	
	if( getJTextFieldChangeTriggerOffset().getText() == null || getJTextFieldChangeTriggerOffset().getText().length() <= 0 )
		gear.setChangeTriggerOffset( new Double(0.0) );
	else
		gear.setChangeTriggerOffset( Double.valueOf(getJTextFieldChangeTriggerOffset().getText()) );

	com.cannontech.database.data.device.lm.TimeRefreshGear t = (com.cannontech.database.data.device.lm.TimeRefreshGear)gear;

	String shedTimeString = (String)(getJComboBoxShedTimeDigits().getSelectedItem()) + " " + (String)(getJComboBoxShedTimeUnits().getSelectedItem());	
	t.setShedTime( com.cannontech.common.util.CtiUtilities.getIntervalSecondsValue( shedTimeString ) );


	t.setNumberOfGroups( getJComboBoxNumGroups().getSelectedItem() );

	String sendRateString = (String)(getJComboBoxSendRateDigits().getSelectedItem()) + " " + (String)(getJComboBoxSendRateUnits().getSelectedItem());	
	t.setRefreshRate( com.cannontech.common.util.CtiUtilities.getIntervalSecondsValue( sendRateString ) );
		
	t.setGroupSelectionMethod( StringUtils.removeChars( ' ', getJComboBoxGroupSelection().getSelectedItem().toString() ) );
		
	return t;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJCSpinFieldChangeDuration().addValueListener(this);
	getJCSpinFieldChangePriority().addValueListener(this);
	getJCSpinFieldChangeTriggerNumber().addValueListener(this);
	getJCSpinFieldPercentReduction().addValueListener(this);
	getJCSpinFieldRampOutPercent().addValueListener(this);
	getJCSpinFieldRampInPercent().addValueListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	
	getJComboBoxShedTimeDigits().addActionListener(this);
	getJComboBoxShedTimeUnits().addActionListener(this);
	getJComboBoxNumGroups().addActionListener(this);
	getJComboBoxSendRateDigits().addActionListener(this);
	getJComboBoxSendRateUnits().addActionListener(this);
	getJComboBoxGroupSelection().addActionListener(this);
	getJComboBoxHowToStop().addActionListener(this);
	getJComboBoxStopOrder().addActionListener(this);
	getJTextFieldChangeTriggerOffset().addCaretListener(this);
	getJTextFieldRampOutInterval().addCaretListener(this);
	
	// user code end
	getJCheckBoxRampIn().addActionListener(ivjEventHandler);
	getJComboBoxWhenChange().addActionListener(ivjEventHandler);
	getJComboBoxCycleCountSndType().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("TimeRefreshGearPanel");
		setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
		setLayout(new java.awt.GridBagLayout());
		setPreferredSize(new java.awt.Dimension(402, 430));
		setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
		setSize(402, 466);
		setMinimumSize(new java.awt.Dimension(402, 430));

		java.awt.GridBagConstraints constraintsJLabelShedTime = new java.awt.GridBagConstraints();
		constraintsJLabelShedTime.gridx = 1; constraintsJLabelShedTime.gridy = 2;
		constraintsJLabelShedTime.ipadx = 51;
		constraintsJLabelShedTime.insets = new java.awt.Insets(7, 10, 5, 1);
		add(getJLabelShedTime(), constraintsJLabelShedTime);

		java.awt.GridBagConstraints constraintsJLabelNumGroups = new java.awt.GridBagConstraints();
		constraintsJLabelNumGroups.gridx = 1; constraintsJLabelNumGroups.gridy = 3;
		constraintsJLabelNumGroups.ipadx = 17;
		constraintsJLabelNumGroups.insets = new java.awt.Insets(7, 10, 5, 1);
		add(getJLabelNumGroups(), constraintsJLabelNumGroups);

		java.awt.GridBagConstraints constraintsJComboBoxNumGroups = new java.awt.GridBagConstraints();
		constraintsJComboBoxNumGroups.gridx = 2; constraintsJComboBoxNumGroups.gridy = 3;
		constraintsJComboBoxNumGroups.gridwidth = 2;
		constraintsJComboBoxNumGroups.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxNumGroups.weightx = 1.0;
		constraintsJComboBoxNumGroups.ipadx = 1;
		constraintsJComboBoxNumGroups.insets = new java.awt.Insets(2, 1, 3, 97);
		add(getJComboBoxNumGroups(), constraintsJComboBoxNumGroups);

		java.awt.GridBagConstraints constraintsJLabelSendRate = new java.awt.GridBagConstraints();
		constraintsJLabelSendRate.gridx = 1; constraintsJLabelSendRate.gridy = 4;
		constraintsJLabelSendRate.ipadx = 8;
		constraintsJLabelSendRate.insets = new java.awt.Insets(7, 9, 5, 2);
		add(getJLabelSendRate(), constraintsJLabelSendRate);

		java.awt.GridBagConstraints constraintsJLabelGroupSelection = new java.awt.GridBagConstraints();
		constraintsJLabelGroupSelection.gridx = 1; constraintsJLabelGroupSelection.gridy = 5;
		constraintsJLabelGroupSelection.ipadx = 12;
		constraintsJLabelGroupSelection.insets = new java.awt.Insets(7, 10, 5, 1);
		add(getJLabelGroupSelection(), constraintsJLabelGroupSelection);

		java.awt.GridBagConstraints constraintsJComboBoxGroupSelection = new java.awt.GridBagConstraints();
		constraintsJComboBoxGroupSelection.gridx = 2; constraintsJComboBoxGroupSelection.gridy = 5;
		constraintsJComboBoxGroupSelection.gridwidth = 2;
		constraintsJComboBoxGroupSelection.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxGroupSelection.weightx = 1.0;
		constraintsJComboBoxGroupSelection.ipadx = 1;
		constraintsJComboBoxGroupSelection.insets = new java.awt.Insets(3, 1, 2, 59);
		add(getJComboBoxGroupSelection(), constraintsJComboBoxGroupSelection);

		java.awt.GridBagConstraints constraintsJLabelHowToStop = new java.awt.GridBagConstraints();
		constraintsJLabelHowToStop.gridx = 1; constraintsJLabelHowToStop.gridy = 9;
		constraintsJLabelHowToStop.ipadx = 4;
		constraintsJLabelHowToStop.insets = new java.awt.Insets(9, 10, 3, 31);
		add(getJLabelHowToStop(), constraintsJLabelHowToStop);

		java.awt.GridBagConstraints constraintsJLabelPercentReduction = new java.awt.GridBagConstraints();
		constraintsJLabelPercentReduction.gridx = 1; constraintsJLabelPercentReduction.gridy = 13;
		constraintsJLabelPercentReduction.gridwidth = 2;
		constraintsJLabelPercentReduction.ipadx = 53;
		constraintsJLabelPercentReduction.ipady = 3;
		constraintsJLabelPercentReduction.insets = new java.awt.Insets(5, 10, 8, 9);
		add(getJLabelPercentReduction(), constraintsJLabelPercentReduction);

		java.awt.GridBagConstraints constraintsJComboBoxHowToStop = new java.awt.GridBagConstraints();
		constraintsJComboBoxHowToStop.gridx = 2; constraintsJComboBoxHowToStop.gridy = 9;
		constraintsJComboBoxHowToStop.gridwidth = 2;
		constraintsJComboBoxHowToStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHowToStop.weightx = 1.0;
		constraintsJComboBoxHowToStop.ipadx = 2;
		constraintsJComboBoxHowToStop.insets = new java.awt.Insets(4, 1, 1, 58);
		add(getJComboBoxHowToStop(), constraintsJComboBoxHowToStop);

		java.awt.GridBagConstraints constraintsJCSpinFieldPercentReduction = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldPercentReduction.gridx = 3; constraintsJCSpinFieldPercentReduction.gridy = 13;
		constraintsJCSpinFieldPercentReduction.ipadx = 88;
		constraintsJCSpinFieldPercentReduction.ipady = 20;
		constraintsJCSpinFieldPercentReduction.insets = new java.awt.Insets(5, 9, 5, 121);
		add(getJCSpinFieldPercentReduction(), constraintsJCSpinFieldPercentReduction);

		java.awt.GridBagConstraints constraintsJPanelChangeMethod = new java.awt.GridBagConstraints();
		constraintsJPanelChangeMethod.gridx = 1; constraintsJPanelChangeMethod.gridy = 14;
		constraintsJPanelChangeMethod.gridwidth = 3;
		constraintsJPanelChangeMethod.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelChangeMethod.weightx = 1.0;
		constraintsJPanelChangeMethod.weighty = 1.0;
		constraintsJPanelChangeMethod.ipadx = 10;
		constraintsJPanelChangeMethod.insets = new java.awt.Insets(5, 7, 14, 55);
		add(getJPanelChangeMethod(), constraintsJPanelChangeMethod);

		java.awt.GridBagConstraints constraintsJComboBoxSendRateDigits = new java.awt.GridBagConstraints();
		constraintsJComboBoxSendRateDigits.gridx = 2; constraintsJComboBoxSendRateDigits.gridy = 4;
		constraintsJComboBoxSendRateDigits.gridwidth = 2;
		constraintsJComboBoxSendRateDigits.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxSendRateDigits.weightx = 1.0;
		constraintsJComboBoxSendRateDigits.ipadx = 5;
		constraintsJComboBoxSendRateDigits.insets = new java.awt.Insets(3, 1, 2, 175);
		add(getJComboBoxSendRateDigits(), constraintsJComboBoxSendRateDigits);

		java.awt.GridBagConstraints constraintsJComboBoxSendRateUnits = new java.awt.GridBagConstraints();
		constraintsJComboBoxSendRateUnits.gridx = 3; constraintsJComboBoxSendRateUnits.gridy = 4;
		constraintsJComboBoxSendRateUnits.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxSendRateUnits.weightx = 1.0;
		constraintsJComboBoxSendRateUnits.insets = new java.awt.Insets(3, 42, 2, 74);
		add(getJComboBoxSendRateUnits(), constraintsJComboBoxSendRateUnits);

		java.awt.GridBagConstraints constraintsJComboBoxCycleCountSndType = new java.awt.GridBagConstraints();
		constraintsJComboBoxCycleCountSndType.gridx = 2; constraintsJComboBoxCycleCountSndType.gridy = 1;
		constraintsJComboBoxCycleCountSndType.gridwidth = 2;
		constraintsJComboBoxCycleCountSndType.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxCycleCountSndType.weightx = 1.0;
		constraintsJComboBoxCycleCountSndType.ipadx = 1;
		constraintsJComboBoxCycleCountSndType.insets = new java.awt.Insets(8, 1, 2, 97);
		add(getJComboBoxCycleCountSndType(), constraintsJComboBoxCycleCountSndType);

		java.awt.GridBagConstraints constraintsJLabelCycleCntSndType = new java.awt.GridBagConstraints();
		constraintsJLabelCycleCntSndType.gridx = 1; constraintsJLabelCycleCntSndType.gridy = 1;
		constraintsJLabelCycleCntSndType.ipadx = 22;
		constraintsJLabelCycleCntSndType.insets = new java.awt.Insets(11, 10, 6, 17);
		add(getJLabelCycleCntSndType(), constraintsJLabelCycleCntSndType);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampOutPercent.gridx = 2; constraintsJCSpinFieldRampOutPercent.gridy = 11;
		constraintsJCSpinFieldRampOutPercent.gridwidth = 2;
		constraintsJCSpinFieldRampOutPercent.ipadx = 3;
		constraintsJCSpinFieldRampOutPercent.insets = new java.awt.Insets(3, 1, 2, 175);
		add(getJCSpinFieldRampOutPercent(), constraintsJCSpinFieldRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercent.gridx = 1; constraintsJLabelRampOutPercent.gridy = 11;
		constraintsJLabelRampOutPercent.ipadx = -57;
		constraintsJLabelRampOutPercent.ipady = -111;
		constraintsJLabelRampOutPercent.insets = new java.awt.Insets(7, 10, 4, 22);
		add(getJLabelRampOutPercent(), constraintsJLabelRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercentSign.gridx = 3; constraintsJLabelRampOutPercentSign.gridy = 11;
		constraintsJLabelRampOutPercentSign.ipadx = 4;
		constraintsJLabelRampOutPercentSign.insets = new java.awt.Insets(7, 42, 2, 161);
		add(getJLabelRampOutPercentSign(), constraintsJLabelRampOutPercentSign);

		java.awt.GridBagConstraints constraintsJTextFieldRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampOutInterval.gridx = 2; constraintsJTextFieldRampOutInterval.gridy = 12;
		constraintsJTextFieldRampOutInterval.gridwidth = 2;
		constraintsJTextFieldRampOutInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampOutInterval.weightx = 1.0;
		constraintsJTextFieldRampOutInterval.ipadx = 3;
		constraintsJTextFieldRampOutInterval.insets = new java.awt.Insets(3, 1, 5, 175);
		add(getJTextFieldRampOutInterval(), constraintsJTextFieldRampOutInterval);

		java.awt.GridBagConstraints constraintsJLabelRampOutSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutSec.gridx = 3; constraintsJLabelRampOutSec.gridy = 12;
		constraintsJLabelRampOutSec.ipadx = 55;
		constraintsJLabelRampOutSec.insets = new java.awt.Insets(5, 42, 7, 98);
		add(getJLabelRampOutSec(), constraintsJLabelRampOutSec);

		java.awt.GridBagConstraints constraintsJLabelRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutInterval.gridx = 1; constraintsJLabelRampOutInterval.gridy = 12;
		constraintsJLabelRampOutInterval.ipadx = -57;
		constraintsJLabelRampOutInterval.ipady = -111;
		constraintsJLabelRampOutInterval.insets = new java.awt.Insets(5, 10, 9, 22);
		add(getJLabelRampOutInterval(), constraintsJLabelRampOutInterval);

		java.awt.GridBagConstraints constraintsJCheckBoxRampIn = new java.awt.GridBagConstraints();
		constraintsJCheckBoxRampIn.gridx = 1; constraintsJCheckBoxRampIn.gridy = 6;
		constraintsJCheckBoxRampIn.ipadx = 53;
		constraintsJCheckBoxRampIn.ipady = -2;
		constraintsJCheckBoxRampIn.insets = new java.awt.Insets(3, 9, 1, 23);
		add(getJCheckBoxRampIn(), constraintsJCheckBoxRampIn);

		java.awt.GridBagConstraints constraintsJLabelRampInInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampInInterval.gridx = 1; constraintsJLabelRampInInterval.gridy = 8;
		constraintsJLabelRampInInterval.insets = new java.awt.Insets(6, 10, 7, 28);
		add(getJLabelRampInInterval(), constraintsJLabelRampInInterval);

		java.awt.GridBagConstraints constraintsJTextFieldRampInInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampInInterval.gridx = 2; constraintsJTextFieldRampInInterval.gridy = 8;
		constraintsJTextFieldRampInInterval.gridwidth = 2;
		constraintsJTextFieldRampInInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampInInterval.weightx = 1.0;
		constraintsJTextFieldRampInInterval.ipadx = 3;
		constraintsJTextFieldRampInInterval.insets = new java.awt.Insets(3, 1, 4, 175);
		add(getJTextFieldRampInInterval(), constraintsJTextFieldRampInInterval);

		java.awt.GridBagConstraints constraintsJLabelRampInSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampInSec.gridx = 3; constraintsJLabelRampInSec.gridy = 8;
		constraintsJLabelRampInSec.ipadx = 45;
		constraintsJLabelRampInSec.insets = new java.awt.Insets(5, 42, 6, 108);
		add(getJLabelRampInSec(), constraintsJLabelRampInSec);

		java.awt.GridBagConstraints constraintsJLabelRampInPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercentSign.gridx = 3; constraintsJLabelRampInPercentSign.gridy = 7;
		constraintsJLabelRampInPercentSign.ipadx = 4;
		constraintsJLabelRampInPercentSign.insets = new java.awt.Insets(4, 42, 4, 161);
		add(getJLabelRampInPercentSign(), constraintsJLabelRampInPercentSign);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampInPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampInPercent.gridx = 2; constraintsJCSpinFieldRampInPercent.gridy = 7;
		constraintsJCSpinFieldRampInPercent.gridwidth = 2;
		constraintsJCSpinFieldRampInPercent.ipadx = 3;
		constraintsJCSpinFieldRampInPercent.insets = new java.awt.Insets(2, 1, 2, 175);
		add(getJCSpinFieldRampInPercent(), constraintsJCSpinFieldRampInPercent);

		java.awt.GridBagConstraints constraintsJLabelRampInPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercent.gridx = 1; constraintsJLabelRampInPercent.gridy = 7;
		constraintsJLabelRampInPercent.insets = new java.awt.Insets(6, 10, 4, 28);
		add(getJLabelRampInPercent(), constraintsJLabelRampInPercent);

		java.awt.GridBagConstraints constraintsJComboBoxShedTimeDigits = new java.awt.GridBagConstraints();
		constraintsJComboBoxShedTimeDigits.gridx = 2; constraintsJComboBoxShedTimeDigits.gridy = 2;
		constraintsJComboBoxShedTimeDigits.gridwidth = 2;
		constraintsJComboBoxShedTimeDigits.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxShedTimeDigits.weightx = 1.0;
		constraintsJComboBoxShedTimeDigits.ipadx = 5;
		constraintsJComboBoxShedTimeDigits.insets = new java.awt.Insets(3, 1, 2, 175);
		add(getJComboBoxShedTimeDigits(), constraintsJComboBoxShedTimeDigits);

		java.awt.GridBagConstraints constraintsJComboBoxShedTimeUnits = new java.awt.GridBagConstraints();
		constraintsJComboBoxShedTimeUnits.gridx = 3; constraintsJComboBoxShedTimeUnits.gridy = 2;
		constraintsJComboBoxShedTimeUnits.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxShedTimeUnits.weightx = 1.0;
		constraintsJComboBoxShedTimeUnits.insets = new java.awt.Insets(3, 42, 2, 74);
		add(getJComboBoxShedTimeUnits(), constraintsJComboBoxShedTimeUnits);

		java.awt.GridBagConstraints constraintsJComboBoxStopOrder = new java.awt.GridBagConstraints();
		constraintsJComboBoxStopOrder.gridx = 2; constraintsJComboBoxStopOrder.gridy = 10;
		constraintsJComboBoxStopOrder.gridwidth = 2;
		constraintsJComboBoxStopOrder.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxStopOrder.weightx = 1.0;
		constraintsJComboBoxStopOrder.ipadx = 2;
		constraintsJComboBoxStopOrder.insets = new java.awt.Insets(2, 1, 2, 58);
		add(getJComboBoxStopOrder(), constraintsJComboBoxStopOrder);

		java.awt.GridBagConstraints constraintsJLabelStopOrder = new java.awt.GridBagConstraints();
		constraintsJLabelStopOrder.gridx = 1; constraintsJLabelStopOrder.gridy = 10;
		constraintsJLabelStopOrder.ipadx = 54;
		constraintsJLabelStopOrder.insets = new java.awt.Insets(5, 10, 6, 31);
		add(getJLabelStopOrder(), constraintsJLabelStopOrder);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	rampItOut(false);
	rampItIn(false);
	
	getJComboBoxWhenChange().setSelectedItem( LMProgramDirectGear.CHANGE_NONE );
	getJComboBoxShedTimeDigits().setSelectedItem("1");
	getJComboBoxShedTimeUnits().setSelectedItem("hours");
	getJComboBoxSendRateDigits().setSelectedItem("30");
	getJComboBoxSendRateUnits().setSelectedItem("minutes");
		try
	{
		initConnections();
	}
	catch(Exception e)	{ }
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxRampIn_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	rampItIn(getJCheckBoxRampIn().isSelected());
	this.fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxCycleCountSndType_ActionPerformed(java.awt.event.ActionEvent actionEvent) {

	if(LMProgramDirectGear.OPTION_DYNAMIC_SHED.compareTo(com.cannontech.common.util.StringUtils.removeChars( ' ', (String)getJComboBoxCycleCountSndType().getSelectedItem())) == 0)
	{
		getJLabelShedTime().setText("Max Shed Time   ");
	}
	else
	{
		getJLabelShedTime().setText("Fixed Shed Time");
	}
	
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxWhenChange_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelChangeDuration().setVisible(false);
	getJCSpinFieldChangeDuration().setVisible(false);
	getJLabelMinutesChDur().setVisible(false);
	
	getJLabelChangePriority().setVisible(false);
	getJCSpinFieldChangePriority().setVisible(false);
	
	getJLabelChangeTriggerNumber().setVisible(false);
	getJCSpinFieldChangeTriggerNumber().setVisible(false);

	getJLabelChangeTriggerOffset().setVisible(false);
	getJTextFieldChangeTriggerOffset().setVisible(false);

	
	if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_NONE )
		 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Manually Only" ) )
	{
		//None
		return;
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_DURATION )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "After a Duration" ) )
	{
		//Duration
		getJLabelChangeDuration().setVisible(true);
		getJCSpinFieldChangeDuration().setVisible(true);
		getJLabelMinutesChDur().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_PRIORITY )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Priority Change" ) )
	{
		//Priority
		getJLabelChangePriority().setVisible(true);
		getJCSpinFieldChangePriority().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_TRIGGER_OFFSET )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Above Trigger" ) )
	{
		//TriggerOffset
		getJLabelChangeTriggerNumber().setVisible(true);
		getJCSpinFieldChangeTriggerNumber().setVisible(true);

		getJLabelChangeTriggerOffset().setVisible(true);
		getJTextFieldChangeTriggerOffset().setVisible(true);
	}
	else
		throw new Error("Unknown LMProgramDirectGear control condition found, the value = " + getJComboBoxWhenChange().getSelectedItem().toString() );


	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		TimeRefreshGearPanel aTimeRefreshGearPanel;
		aTimeRefreshGearPanel = new TimeRefreshGearPanel();
		frame.setContentPane(aTimeRefreshGearPanel);
		frame.setSize(aTimeRefreshGearPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
public void rampItIn(boolean rampOrNotToRamp)
{
	getJLabelRampInInterval().setVisible(rampOrNotToRamp);
	getJLabelRampInPercent().setVisible(rampOrNotToRamp);
	getJLabelRampInPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampInSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampInPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampInInterval().setVisible(rampOrNotToRamp);
}
public void rampItOut(boolean rampOrNotToRamp)
{
	getJLabelRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercent().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampOutSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampOutPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelStopOrder().setVisible(rampOrNotToRamp);
	getJComboBoxStopOrder().setVisible(rampOrNotToRamp);
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private void setChangeCondition(String change) 
{
	if( change == null )
		return;

	if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_NONE) )
	{
		getJComboBoxWhenChange().setSelectedItem("Manually Only");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_DURATION) )
	{
		getJComboBoxWhenChange().setSelectedItem("After a Duration");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_PRIORITY) )
	{
		getJComboBoxWhenChange().setSelectedItem("Priority Change");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_TRIGGER_OFFSET) )
	{
		getJComboBoxWhenChange().setSelectedItem("Above Trigger");
	}	
	
}
/**
* @return
*/

/**
* @param box
*/
public void setJComboBoxCycleCountSndType(javax.swing.JComboBox box) 
{
	ivjJComboBoxCycleCountSndType = box;
}
/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
	{
		return;
	}
	else
		gear = (LMProgramDirectGear)o;
	
	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_FIFO) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Time In" );
		getJComboBoxStopOrder().setSelectedItem( "First In First Out");
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Time In" );
		getJComboBoxStopOrder().setSelectedItem( "Random" );
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_FIFO_RESTORE) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Restore" );
		getJComboBoxStopOrder().setSelectedItem( "First In First Out");
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM_RESTORE) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Restore" );
		getJComboBoxStopOrder().setSelectedItem( "Random" );
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else
		getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getMethodStopType() ) );

	if(gear.getRampInPercent().intValue() != 0 && gear.getRampInInterval().intValue() != 0)
	{
		getJCheckBoxRampIn().setSelected(true);
		rampItIn(true);
		getJCSpinFieldRampInPercent().setValue(gear.getRampInPercent());
		getJTextFieldRampInInterval().setText(gear.getRampInInterval().toString());
	}

	getJCSpinFieldPercentReduction().setValue( gear.getPercentReduction() );
	
	setChangeCondition( gear.getChangeCondition() );
	getJCSpinFieldChangeDuration().setValue( new Integer( gear.getChangeDuration().intValue() / 60 ) );
	getJCSpinFieldChangePriority().setValue( gear.getChangePriority() );
	getJCSpinFieldChangeTriggerNumber().setValue( gear.getChangeTriggerNumber() );	
	getJTextFieldChangeTriggerOffset().setText( gear.getChangeTriggerOffset().toString() );

	com.cannontech.database.data.device.lm.TimeRefreshGear t = (com.cannontech.database.data.device.lm.TimeRefreshGear)gear;

	//This will need to be altered once serverside supports the strings for fixed shed times and dynamic shed times
	if(t.getMethodOptionType().compareTo(LMProgramDirectGear.OPTION_COUNT_DOWN) == 0)
	{
		getJLabelShedTime().setText("Max Shed Time   ");
		com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
			getJComboBoxShedTimeDigits(), getJComboBoxShedTimeUnits(), t.getShedTime().intValue() );
	}
	else
	{
		com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
			getJComboBoxShedTimeDigits(), getJComboBoxShedTimeUnits(), t.getShedTime().intValue() );
	}
	
	getJComboBoxNumGroups().setSelectedItem( t.getNumberOfGroups() );
	
	//This will need to be altered once serverside supports the strings for fixed shed times and dynamic shed times
	if(t.getMethodOptionType().compareTo(LMProgramDirectGear.OPTION_COUNT_DOWN) == 0)
		getJComboBoxCycleCountSndType().setSelectedItem(StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_DYNAMIC_SHED));
	else
		getJComboBoxCycleCountSndType().setSelectedItem(StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_FIXED_SHED));


	com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
			getJComboBoxSendRateDigits(), getJComboBoxSendRateUnits(), t.getRefreshRate().intValue() );
		
	getJComboBoxGroupSelection().setSelectedItem( StringUtils.addCharBetweenWords( ' ', t.getGroupSelectionMethod() ) );
	
	
}
/**
 * valueChanged method comment.
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
/**
 * valueChanging method comment.
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) {}
}

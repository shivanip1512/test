package com.cannontech.dbeditor.wizard.device.lmprogram;

/**
 * Insert the type's description here.
 * Creation date: (8/1/2002 11:56:33 AM)
 * @author: 
 */

import com.cannontech.common.util.StringUtils;
import com.cannontech.database.db.device.lm.LMProgramDirectGear;
 
public class TimeRefreshGearPanel extends GenericGearPanel {
	private javax.swing.JComboBox ivjJComboBoxGroupSelection = null;
	private javax.swing.JComboBox ivjJComboBoxHowToStop = null;
	private javax.swing.JComboBox ivjJComboBoxNumGroups = null;
	private javax.swing.JComboBox ivjJComboBoxShedTime = null;
	private javax.swing.JComboBox ivjJComboBoxWhenChange = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeDuration = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangePriority = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeTriggerNumber = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldPercentReduction = null;
	private javax.swing.JLabel ivjJLabelChangeDuration = null;
	private javax.swing.JLabel ivjJLabelChangePriority = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerOffset = null;
	private javax.swing.JLabel ivjJLabelGroupSelection = null;
	private javax.swing.JLabel ivjJLabelHowToStop = null;
	private javax.swing.JLabel ivjJLabelMinutesChDur = null;
	private javax.swing.JLabel ivjJLabelNumGroups = null;
	private javax.swing.JLabel ivjJLabelPercentReduction = null;
	private javax.swing.JLabel ivjJLabelSendRate = null;
	private javax.swing.JLabel ivjJLabelShedTime = null;
	private javax.swing.JLabel ivjJLabelWhenChange = null;
	private javax.swing.JPanel ivjJPanelChangeMethod = null;
	private javax.swing.JTextField ivjJTextFieldChangeTriggerOffset = null;
	private javax.swing.JComboBox ivjJComboBoxSendRateDigits = null;
	private javax.swing.JComboBox ivjJComboBoxSendRateUnits = null;
	private javax.swing.JComboBox ivjJComboBoxCycleCountSndType = null;
	private javax.swing.JLabel ivjJLabelCycleCntSndType = null;
	private javax.swing.JCheckBox ivjJCheckBoxRampIn = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampInPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampInInterval = null;
	private javax.swing.JLabel ivjJLabelRampInPercent = null;
	private javax.swing.JLabel ivjJLabelRampInPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampInSec = null;
	private javax.swing.JLabel ivjJLabelRampOutInterval = null;
	private javax.swing.JLabel ivjJLabelRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampOutPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampOutSec = null;
	private javax.swing.JTextField ivjJTextFieldRampInInterval = null;
	private javax.swing.JTextField ivjJTextFieldRampOutInterval = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == TimeRefreshGearPanel.this.getJCheckBoxRampIn()) 
				connEtoC1(e);
			if (e.getSource() == TimeRefreshGearPanel.this.getJComboBoxWhenChange()) 
				connEtoC2(e);
		};
	};
/**
 * TimeRefreshGearPanel constructor comment.
 */
public TimeRefreshGearPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJComboBoxShedTime()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxNumGroups()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxSendRateDigits() || e.getSource() == getJComboBoxSendRateUnits()) 
		connEtoC7(e);
	if (e.getSource() == getJComboBoxGroupSelection()) 
		connEtoC8(e);
	if (e.getSource() == getJComboBoxHowToStop()) 
		connEtoC10(e);
	if (e.getSource() == getJComboBoxCycleCountSndType()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}
	/**
	 * Called when the caret position is updated.
	 *
	 * @param e the caret event
	 */
public void caretUpdate(javax.swing.event.CaretEvent e) {}
/**
 * connEtoC1:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxRampIn_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JComboBoxHowToStop.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		rampItOut(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out") == 0);
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> TimeRefreshGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxWhenChange_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JComboBoxShedTime.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JComboBoxNumGroups.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JComboBoxSendRate.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (JComboBoxGroupSelection.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G02FD35B0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E15DFD8FDCD5D536BF1595D3CEE9B9B37C0AFAD4D6CCD003C5C50D1515B5D44C443C2C28F873E8E2DE4E8CD35678EB18B74E6B489FC5C5A52582C4387CD13110504894C9D1C0B1D199A5252211AB77GD7AF77DEAF8745FF53DBFB6F3356B9775CF3AF171C777B78FEFCBE0BFB77F72F35775AEB2F3D4F7EFB2E14DF9A11BDBBA3DF12E6E7CB6A5F2733A529AACE12DE16C25B90AB589215A1697E4A005E11
	2E5918851FD590577FD6D4C61E74E8E68E049BA0BC6E5F22B25E076FCB25784C566B610B1FFCAC90775C0B728B0173B976F74CE7AE8F7F22B297BE9781B582E6830A5942727F0F4A82958F0570A275BB2359106AF0A36339FAD3018E1F297235C1DCB7D071D646B3FBC5319ABF85B04613841FE90D02B78BF866F16DAE2E5F2072F50D0F14E6BED91231106525CB9F4936D548062A1F966996EE08CCA93D70F3E6337623FD1BFBDC83B5BDD6275365D4641E7E9A5BE159E6D7DC1E1A9376D3D60F2D46A69F377748
	B50E8137475567318E5457F7588764FDF22FC79E6C5FA1DBBD6DD6276C1024F4DE067BB6657074218C909E330DE1EB9B185D9A60FB8710E39B1663178B9BD4BDA79C0D14D2EEFA47EFB96237897D5336E965C83555E406B73174BFD8112B4AD5C35886A4F4712CC0DDD21AD017B3650C3720B9AA2396283599710E0D8C6F0670B05038E6547133D528E36769FB257443DBB3967B51B132D96816582C691872E1CBEEA1771D3F9EE2751F5B827982B58375830582C582AD63BE9B77778F60F36BE12549B5B060F2EE
	F53B37B9EC1E5DAE1B6C006F75759023E27B649E1747A6C942AF9F5CD4ED228F521496EF1FE4A44AF6D0C2BF0A5EF70724A81FE6E41B14AD76D9CB46B4B50D69ADDA590A37B33B5D4C6BB6873EB3B9A6AF70980EF76BF0D1D71FF21C059508CB5A0EF66EDC043A34E55DA8652DED62ED4E28CB58A39BB29AF6889DBAF6E83A889BBFEFE5B68E81BC9CA896A881A88DA83795ED1CF1686311EC3C935A0147E9F56C9FBA6C36FA14EDC3F607CD7628362EDD914856E6A464B60FDACE58A572E3FD9DA55F354D54AE49
	112BB22ADA05BD9ADBB53B083CCF784D3B3B5557B796D19D4E66EDC2E995F518C978820E0F516122EEAF64ED0B05A7C0DCBA10600F677CDDBB0DBE728C475DBB0DBE7255C67411B190B79DC8546FD08F6B9F5BBE073683948294869487B48DE87A67D8473B8FFD94E4BBEA57552F101D537D9EFC4A430A473A53B928D81DBD72812B47EEBD6C1087A515E7F1B7336BE1AF397CEE66FBBD10478E59A9FB2C0A5D6504542D83B2B8532060D95E7D8E637148BC167522104100DB42F4D7F4AF05CF07F5D07942ED33AA
	3246A16257F4B31FB8EEBDGA9C28270FD43AEE62FE7F91F1B835FABF7212DEE34B16C8C04A76CC23BC4F6AF014FDD605C32233E3E595E435430FACE220FC6B5B019C8606FE843F679DAA77ADF73425B256AE7371A7A9F231C5D2A5F6DB67A5FBDBC5DD6407BF763337433064ED136871F7EF617376FB21D3D5B5C01F34EA353904E56FD97F64E6BE53E9A8A651A88B4F5B75A7A15EE0B7041ED56C1993DEE2F879CC636E916973CA9D676CC110F4BCE25D9F64BCE9BFC99D46B7CD56BBC4D9FFBDD64ABFF60B86B
	1F1A40E186897F23759D01C39AFA6F46783F70F82B22F86C070794F93F2CA8F6E71FA61FF91869B26855758D2AE5DD52474A1A8CE51C891435874BBA7670D21DDF3539DCC7075C9D2C45287EF985FF8E97GFF6D9E2C7F39FC8C57C161F7F8D80B8FAD77D7F7CC66DC6AD4730F9B7C66E12C776F1E47AFB63232E3BFA93097B826C0B942293C5D9BBBF5FC671A3739AEA7F99E1986BF7EE7117005EFFB7C7B72A5BD663EBC36475C172F6A896C2B577418792A083B21071551F54229737DDBFAD87F5763F2BAE55E
	GC9C492E36257BAD8B96CCE3BF250EE6B13157D76D3B20CB977B09FCE63FD6CD4781E34877B46939558B7D61E7A31B465D0316978A96C66CD9935FB054FB66F557AC621532DB65626E407BCG06EAF28DB995015F4E7BEF959F4C64589B4B581446D275F9D33F5CF3F41BEBF89FBC9BF6BA2B2D3CB4B56223DD76743ABC83322D6A0875383546FAC2296135D13315C737306F2BADEB56EC36188D632B0FF827FDE82BA151B67F29EEDAFDE0F52D702F25D2693737283A3A868E3BA03D037D3233295F6A6C137F49
	7A7A24BFDA1D57E2DF5E524F6A4286F5B48CB4EEAF76EF2BE5960F7D1B5A09B7399C8E61C690B7F3AF7311698D793AFA0F5CAB66080BA8BE7FB3FF71A21F77FA7318BF4B4706E498F6308EF417FC92478E3DCB8CF1872C0EA1EDCC3222F781FCBAF4FD2F408B7A4C7D2B240F7537C7A97D723EB9929BDB08B4C5FB083132B45D9E7BGBC2A5843C41D4B5E3CC2BF17EDE807F98C1BFB4367C4A0A17B505FD8D94D2AAC64EFFC8CD90FF35D49A0B38DE8261ACE5D5F04CD845F534417G61D4202CFD022FF91F601B
	300F71E5B660DC6FA3420AB876BAF4FE57E561F8FAF71EFE6EEC9B2CB3ED330C1254745376996799276CAC5D5C7DB03E5D0FBE925E27FF86EE9D9CF4755879B0CF2D07DD7D7A76AC30767E797059EB778C421C43A68FE3DD9E68E73A32F1208A2B75917561E7126F3836054F56F10851F4027BF5072B8906222D608ECD545D9D304BA7A43443596D7A397764452BB3967831C36DFED17E767D1A9DA6423CD66834E9F83B74DD579178C8595E63330630F8A53395DB8B98379F676737AFE3FEBC9342399DB04E8592
	F3053AFA1CABB4G26G0936362EDC5F5622BB4458E39AFC0A7E695A7AF56C59B26A1E886BE2583A99BE4F2D37443A38F1E9A37A789DB7CA8D5F4EB7DDE388DD1C1FB13DC354C15E973A3AE8284B0D839276C8A7FBF4814F04AF509E4F8C6A6D1140F0200283E80FC31B4E4D9ECB3A36F1FB1CEBEFCCEB936B746DF4CACA155FF6DAFDC01D779EB036533F9FE5FE5485387BG3653DF763F23EB277B20E5001250DB5278451EA97AC5B5FC11BD9B7BC5891F9357BA18AD47C01A91C0F1C009C0B3A80F79C7C6DCE3
	E8998E3046103F52B8AE4DBB88BEFFB07038F783443799F83AA12C98B0B1775E381C4FDB8E0A3977A6428FF1BC27D34305DF5D455B9F8B07C21C6DAB9C3756579B57969A3B3C736BB20405DC2B0FDC09A19CE21093FE367940B26CEF189F8D578C1E00B1E1FDBD0D0954BE44DE1E2376F5E1DDB8A7FEE300BDCB92A11C861475CDD406852899289BE84CB7D8FFDF9EB16BE73D6B4FDFA72B4D37C4B97F6BBB5AA757E7CD4FE81F095F1859274F614FBEEA4BD41F616DA57AE77864EFC47F18821FB33F417553798A
	5AB0776FE84335AE06B5C338636FE82FFB0EAC543529F6175D29D0FB6AB94A4695AE0F3D4F6EC42C1FE3BDAE8F9F1C8B6CA6077FF943ED8E73F9C30C43FC5EF00FA3709C78C1073FF905182F2E674F9F9B146F8C1040AE6558B888CFA44CD64530F88827927669078CCB07F05EA1443E4731CA88B790563D06E15D909EBE04EDE94BF2E63731900E840A87CA854A6A86BF85EA84328105GCD841A8A148614EB053A836AGBA839481948FB49DA877B00C27005A019420F1C0B1C05300E6G657700BEBD183F4C73
	6F0470B0D098D09CD092D0BAD0018DF801BA01060142EC629992871FC9C069C085B270GF5828D8305814581A549E20C178E1F853D40835489B48C94560B795F37ACF136370F33B29A7BB9E6872633D99F48EC47BED97959A716D1D1ED00FC4C8EB613340D14265AFAA4BEC6E72C412FCB54293A0468526ED065638FF927E37113FF6EE1DFBCCB7507E075509373A1669791867948C33E69B19F1A9EC4BE29645B3545463AFD5F041F75811B7C24056BA2AB544FCF01B6CAE23C3FC647371667B7F2F9D9FF76EE10
	36A99B059DBFD4BF176A30D2C96B5B753C8B7D24315A84E36373E55F21DE99AD877A842842001B2D8331314B2AA0521C27261BA9BD719E2BB7B7F44172A0FFB0B6DB952B9A772A42EC6C33663247BAA0CB38D6F02CFE1E4A5322381A56CA788CF4166B1F01F13D425F92544F9475F3E62F66076A9A67007FE7C906537CD91263E4F5B1689A727448466745E2E78145E9CF7A1D0ABC400A214E33393CE2757449BE4F1BD2AEAF627C49D7B97DBD13040DBE59243751BA891F77FFDC4D52B6F95E739915F80E071664
	C822CD647461FC6A4496B61EF330B0D0F89F3653458A5ABC36CF6D0F7AB47BA6437799FD5E6DDE683F5E45460B43942E676113247F6E15EC2EEBF5587B1CEC867CA50CA17A199EB2FF2EE6417702FE1C0BDC3F120D8F9C56132EA1F8A04D64FCF72F24BDF688C7G4583A5770BF10B10BBDD456A406D11FBE50FC7360965BBB51F897CD95DE00F4AE835A37F1E8F3DF46AC45EDE7E3CD600AF540E6B9913CE3076578B73D6B06FFE375CA3359DE13C919F22DEF1401BG1486148BF155C7B01F93EB18AC885A8706
	8638D6A21FAB7998E08270C590EF62B6165667ED564332E3FF3FECE3ABA8E8439F3D476A10C6F2DA349AFF27EBB1496E999A5861F18D398755385F9DDC2217552255783C753AFC21496C33AA146F63F372A90ECB6D175525AF913FFA737B7A343DD954B4220EE83A353ACEF43876ABAE379AF7467D9E4541BC31876AE21FEC9BD29757844FF63B177EDA92E89B77B29E3F5FEDF7EE374B8E1BCFC2026F11D3BC9D5EBA4484F5372C743BEC184E1A55DEE5C1D3B44378D5C1DBFEFA68BDB31EAF1C0CC565E92FAE52
	73B41D6CF148FC79ED3F5356F152CD36F5D43FCBE597CCBA961567394D055EE5E32B8DFB07943508445730C02BA7EF96913F213540CF7CFEE8820267266DBC2F8E68A175D971BDF11885D3DE9116BCE3DA7B659E91E7BB722EB14EC7FE5D896E8F5E6BA7EA5C0A9A6FF26CF42238082F4EAC7051514873730A4506B4C0BDB57D2E52778DF1BAB328BCF77596785A1C98854F780DCB4D53D157FB6FDC2EDFF309BFA27A2A34A338A633EF11F1CD0645CBC7B17E7ACCB379FC0A9F5CECA6DFC5715D6B4D649BA8BE3D
	4AAC3E1D629F5FE1163E0D626FB7AD5FB0455FD1EA96BF16621FAAB7CBBF0262BB3C64E30F0A7869947FC019197CAC0A3F2E50ACBE4F0171971A46D7D2FCCC19197E9BA87EEC3919FEED941FECAA5FCD71CF971A45AB94DFD0240F8FF50878980A17CD6527D27C29A23378A40A3F2E4254BFA93E5EB4FFE9006CE31AFFBE451F154D622BA87E9107197D9AA8BE5BD47F76811CC3DF4C57F8EC90D6889B4F7769C2A19CC658DB1BF07EBD1130CFAB98B6934285CE9C7BFC3FC43F6ED68DF8A3D007D30CF77A1D6673
	1DB3000F831A280B0FB361956BEBC9EDEC5C1560946BEB6F931E4671AC17060BF53733FC1C46428D90176EC27DD7723519D8F7D4C6229B3113DFB3AC954233881B7AB516BD6F98E2CF2E63EB8F909E86AA1544DC05E17827BE17D7DA601316EB61D966F6B95912ED475E76C3DB5BF66E58333BE5CF07D82F0DB821DF2F5DB03F466FFA6D58E342B6916A67048595EAD9B72D42F3FCC99017674131575AEE36EEC7E3DC26CCFD7D8E0F5D364D5A5746C709E21CFB51AA5CEBEF7560B8F792CFB38442E1C0B19E5C3B
	9DDE097B9F51375CA83505ECB3BDFB185231BAA35E236E83F9347565199F3664D68D32B323D147B5FBD5FF486C6514CFD848E64DB0BEF33243BAD5F5356B2AADF59F572E76EF6F339F16195B3B2DE5FB07E6F08977C94ED4E3F99D204B44C1065DD62DEFB3AC5DEF60DF8DFC0A78E42F78F7D4F9ADFE519AFDBC33558AAF79C62F78EC1D3C306BD3AB502E331E0A119CF7577ABD5319B6286EE5A862336A45F2A9770FF52ADD6B07B53B0CDFD66C5F2E3555165A556ADC28574FDC08BF21054DFE3B1C590C0D47DB
	95DC677C5EA244C288FBB69331B842EE5B0C588C42FE349E312AA144BEDA0DD8B7E1FF5D01D898E1EFAC477555C442FED34AB0B6F649B90ED8C68572B90EE31B78477A1512EE5F6D28232F66C88FDB852D69E523953660CBC39774174BCBB11D0914764CB25CEBCBA6ECDAA1E20DA7903B2F90751FC8582BE508A59396DB0ED87EB0E2CB4B31CCED044DA9C2DDE20631CCAB2A3C5A39D6FFB4529332FBC9F6BA2597DE081865A4E2130AB05FCE4226D5A0B61930E3141E6594150D526BA4ACD6C6EC9CE1FFF6E0F9
	6389EB20FC2553B82F8BAFE77B6D3DAE27A266FEF70AE797443B09A7F29363D12030228DFC43264F5214530CFFE1C333C99BC21A2D6A1029D28448B0FAD70D0B056FC761732FEF3F7D36BA772DE0F318FE1747FE8AF432BA18095BDD03F6B16792BA5A392DD85D641C41E747CF78DAC29D04DB892B31B04C81619042EE673EB191421389FB0EE309901ECE588EDAC31FC558DFF89EF9E723B2ACE7917BE39F4F9742ED04357463332D7BACBE43FF554656AFE2A01C88148ED4708F60876A868A850A81CA864A7996
	46FA5F225C1BDC2E9942B620B1C0930126822582E505GAFD0B310ADC41CC390F297ED09B1298F16AFDFAF790777B8A0662C7FB5538D7F700DABD0B1D6965497633AF57C21A632C60A5171885D6FB4559D57A8179A70C067529618E073A46D99417CD03F5E2BDF77DCBC025E781C526B31D40A2B743F5673959F9B0D01FA9A9702ED6B465D666BCFB7727151E460CB8492ED6D252F8335353912F6160FFD4E82393C8B22B2D628ED2D923EFFB1DB2CCB0B3CDFDEE73E7E73E7BE8E2B857E068BF0FFED7EA95EAFC0
	B864825CDFFB404556148FD80F781E78G305D63F24B9E6524C07929A035FE372E7AEEE75577FEC73950D14B09316F0AAAB6C60B38C00CFDE793DE4371E89DAE46097752B8B18E620AAFC45BEDBA4D4F7FC3B89CA896A881A88DA867A234659CF72DB4425EEE074B5DA69F179D3A2DC3B136F97AEB7D98B76F1A82524B27DC9729E31A0B0CE721AF287EEE77G9E1E0B632A587BEF1362AE19B15B5FF91DAEB54FB36A671424F20E8B9BADBD4BEC948DF171C0E9C0D9E3200F842A9D03B61AF13CDA58083954D6C5
	31767473D3CBE8A0F610C80359E228A85BEB4B75E5EB0674BA019CC0A1C093467876D1C26E0AC5A89789BC130192F53C2970BD5DA0AB64DE4C546717FBB1BCAF006A00DA013AAE76175FCFB6231C9BF846G0569F823617B140B4D728BDF2F4FEF9A70CC871A8514F789744D17784B2FEE35DEEE83703581F583A9C021FE65B2DAD1AE9CF8E200266AF81360FB5AA5E6FA3E65D58F5225B0A7872A3AD470B6DC6AAF3F5F159A4F1D34832FCD659FB611E3B4967088C3DCAC0463AFB553EDEE856A162C464F5071E5
	0502AF061A490DABC5396AD0DFBD9A816BG6A8FB5BE637EDCE6AC539993F9A30D831E09863EB888A7G25786471C221B10F19BA1E1C6F7939E383F82DA12E99421D5FB3AB7F0305D8FE874407GCD5071C542774926F2E9E5FADFC8841ED420F4205C4B203DDC664F976E233D37BA1527D5475B855F5DC0E3AEB35A224067CCFD9870C42BFCD3CC7263ED8970690638D9904E3B5C2CCC8B0A74E52A841E8DC0EDAAEF77657E4A54C1F20A89CFA8E061C0B1179B4BF4C321BE3F29901F84142672C9E37D65F7CF11
	51967940DB2572B7184871B687384D90B78C6131E34DEC71C205B10F88600BD5F9637D64118C788CC3DC5677216DFD5FAC0F63E4376A6F7B265788D887D07F770DF6CB73325B99089F87B4D1650BB3C9CB75BDD9AF17GFCA9C0B3D57E1CAB7C497D1783650AD51EDA9DEFB3FC6F84F2DCE154F32BCFBD05G4F8415AF52A4BFC61381CFB44425C2B85D0009395C4F797DE2B19E3CF8D339E4D84F588E13302AF21B5D6AF07515D7DBEA2BADEB572D9667860CEBC5A23DD9ACA9F5EC70F2AE0E8D0A23EE121A1F1F
	B11B6D731B0D8DF22F943AF5DD290DCBF27BEBB205DEA195ACBF5D543BE6BF7B5F6462976114C13E8E05FB02A5EC0F76304B43B73A459E6D3F5119328910FEB4D0AAD07A15621C1010EB31786E6DF6D9D0AEEF1C585B2D024F06F1FA3948D673717BCBFC1E5E813C7D6310778FE5FC3CED9DB60C3733791CFB824B83C8E0EEBE7FCC00F09249AFA9751E2BD771F5132C7170FDBC724C6FB75FBBAE67F352C6606B980F73092E7E11666EECEC067377B1A097B6DE4C5D19FFC60F576671A2EF3BD35B9F93FB184DC3
	6246213AF7F54630DF684DC46948E2AF1427335B6E9CD2644126FE6042784EED46FC5ABDF617472E1C94716B8F186603CC144F4016C2C3BA9D9EFBDF1F6C59B3B4F0181F1390FC1FF578615B5B5BBBA8EB7B1CC38B595992EDD5A8906FB79DA5E6BA9A94903C05BB34BDCD6DG3308FBFF106F75791EEFD6777A566CB66ED57033F163F1AFE3CF25F12F0345A7D07C95BEFB9DACBE0562BFD8E696BF1362FF6233974562F32E4278DBFD76EAD8FCB145DFDDEE96DFCB713F29B46E853178E60A7FEA0DD97E1D947F
	DB1F3DA6966F00F8511F75E6EB7D23736BD2E37F282D772E7D94BA47F59F2FB66D9B057CFDDFDB241177ADFC65E7EC715F5FFEEF0E76BDFA2E16578DE5A32DCD2BE708CE31F253799EB1CD47FBBF2718ED583DB3687F6D27F8A35D8F0C4EBE71FC7A30CA12E8AE217B7E402AF33D5F9A08C49E4F7D0F66A14A5FFC5A7FF92DDD274D4FEB7D6D3479595F0327835F99BCF45A7F1D415E537ABB03E23E7CA5F785917F56E93646E33A8E8333624F217E779EBEA277A89D56BE126F1D476AB6847CBC9CE88A50B42069
	D761DCFB6399B696E0B752FD6759AD36BE999F3E28C371D97F362AB8BB725D756A336C39F55825A82E8116BE626B4E327AD6DCEE8E8A6C53334C4650D376AB02D545BFBB4B57FB65DE8E0B3558EC3EE61BF5B54CB52F467559195CF8D590EEA42C65AB7E3C06300D305BB86606F0A8E1073BF0EDB71C301B9761DAF19AE1195BD1D61A00585E6D18EFBEE157EC47742A887BF2811D41A66C8D3E6FB39642610449A518DE8CE1B19C1B8A61E9043DDB0A3A2490E6AD45FCE7927678E6ACC7738F48D6AE146DA42C51
	0D79BA883B5C0D690590F6FDAB16A311303B783ED4AA04E79276F3A7261773C3448AF83E45902EA66CAC69320130A7DC18EF9BE13B78BED7B80423893B5505F9CCA16CCD0ECD03F0AAE1875D18478C42EE2232E57D883142D634D587E1171520ECBFE14FD19D1DA12C0CECBF0E3017D6222DD288DB48E5E7C2B8AB0C4E9134627EC581E1ABB8D68D618642AEEB45BCDA894B3520EC98E187B9968D614904CD66D8BC04D388FBCD1CCB00F05E7F21FC1771BCA0DCC7582E964A17308FB8DF9804E388AB29C07BCDA5
	6C4EC25F3D190B48D6C944E761E3632AEB207DDEC3754B79BAA06CA6ACFE954A0EA16CADEE53E990CEA3AC055BDE3A96ECFAADE24B78183C9A424D04B9B85689E105300F394E21900EA06C62C24CB716B0AB174D8A0731CDB8E25BB8DFAD041B897B8B47BAA16CA62C0D6F5B0D01F0F83837FEB190CEA06CCAAE1B8261F442DEA6DDF22F23BBA3DC368B428AE14F0AF2C0F8A2E1BF667BE2F190CEA46CAF9CCB0570AC425A4AB10F3C6B29DFAB44BA6AA6AC1373A9909EC358737518DE98E1657CDCCCB404A793F6
	69A654A51E30E7687CCCB2E109225E7E857C6FDF9093FB30DD90D6887B8359A514B09B17CD02708C425AB9DFD68454DB84E2756518DEADE1624CCFB304BB887B9D473AA1BCCC58A5BC3D31900EA46CB14EB799428904FDC0E5CBA16CD14ED7FB83146D8632D5914AF691965E047A3989FB3589759BC3D8EBB375C3049D656925C0F896E14B357A3D515BFE5D909EA66C23F23455D84262B8DF8404E3884B6579CE05F0B2E15FF0EC8604251B90FB04744BA5AC096B5785E10530553CFF8905F098E1D7F0ECA204A7
	93564B75CB04F09AE162CC01B4913ECFC46C9865DBC9581B1CCF0170D8427E427B308888479156D649676D90CEA6EC924726C3D83A9931BBF8B972A1DCCBD88DCF2F99429D047D1C7C201F30A24E978761C4423E4F53CB0530F48B35AD2A37FC42E670F258A0FC0630031CEF9C04A3894B94FE856184420A783D5594882793F614E33937C27B38155A60D19A53E898BF23B08C61D042AA79FEE8B804E3899B62D8BC041388FBD14174D289FBF700E1F511D1996D11087D2A89533391361A6AF218B061637190CEA1
	6CF63241CC42FA0AB03D1C9FFB579B532F1830455C572AA05CC858CBBC3D8E883B89EBADC29B0CA16CC952AF0C30BBB95FF488CB37619E625479EC2DA69F4235C09DC08E209020B020E820A9C053005200322260D986D48D5488548EE4839A0E42717D56ACF617475F5E2DFA080D8F72BDD6F1EFD26CF1E617623B3446C2DAD323700C4C2B4BD9FAE6776D7B066CB5C30A5D415E4F27B864ED6A521CFA76E7B7FFEE33B524D9D1F8B66EB44F23AE9A46F4C036E83CD3BF46027B2BE7G0B0D46F3AD8996CCA3AD9A
	5378CF4EDBF9BB0C0900BAEE8FF41E704DC20BB4723CDC4C31FF132B49B5D485D88F78F8BD4C32B7562ED66766B90BB43999A50164BE86398D1F22DC6C92CD6E553EF3D91F95E9EC6C8F76ACDFF06B90B33688BD1FE730DA27365DAC1E4D879D37E39DDD4C7BC0FE260C304768FCD34E9D08D91721ECA3E17FC1F726A79276AB5E0F31CC1389FB329C31461FA0D63C02E4899B3F8631E442AC24DFFE8C369167BC7FF35A21F9A34FE97FB10F25A943DC14DD1BD06F6D4F63770E5545C001054E4BA3EC67A01EF692
	75D5DC623D663B0E0FDF5BC0474E98DC73DD7015799AF4851F3F0682DFB871F6FD65FD166BBF73B55FF878AB733563ADFC4E9B8FE9A447605A71492E11560EF1DD586C5CD76E24280CDB556FA20FDF70B9F481601513F08D3CFABB665BCE5870F6ACD348A454E55276C03AE42A794CD33FC7CF7256E54AA4E19BCD178B797CBB817024C9E8371CAC6FFAA84962E31DBB617B1D285B95A528DB631DA8773392EFFBAFE7EE23663339944B6738934BB2DCBA12DDB3A57FF68D07F4AA3C4A72BA1F53C7829ECBFAAEF7
	E33EA904595D28FB5EDD284B0D6E116C1A2933EB43DD5E3A345FE534EB69CEBEF6833C7FAE344F136B3D6D1A425787A630346EC25D5EF222EE09A477114B5B2E0D6FEBF63D4505651BC5E5793DEBA43B4E157C5B35BAB6AA834FA40B7C8F2F7656FB182FB9ECG3E66D854BB5105FAAB312877BC37375EBD851A5EA1D4AF913128777D816BC06F57E6FAA7460A7103D6875B783AC0B26053C94F3BCAB05F7C3B91FB1BFC3979EE54E5C3C05FC4DFC0FD5CF7FB6BB266EE23BFE4717979B840436FC67BD49A7A3BFA
	219B44CFA35DB2F999585EDA56BDA857506AED57CBD83155B32AB7340EE443F7825830769EF1B6DF537B938B665FC079BBAD5E797F18DD33D3FD65990B793E5F6FF9BA7D1006C269E487B8BFD8421FD191409B2D15FB19373D767167E79244275E0375F638E524723346136D277C79770AB33AF329BCDB17191F9B7C1267ED817E6AFB312EF67039CAA704ED7722BE570C68C76F687CE85C3D5E7ACC3CD773A3755EE31539BEFB79BAD18C70CF3E976D75E029FF7BBE4F7B636940BB13F47D77D501F44DD6ED0736
	B15A4E929715B1C9927766C57E8BCB4DFDE1854F3B9A78B744212EFFDAE9DE2E453C5D58004FCD3C6B4A4D47G1F73B1D19870C5936FC5657EED90AE56C000B71578BFAFB49F979C66E3303C7B6019FD9F5AAB3CF0243A1D2B33D747FD5E766A3FAF0A6E67083C074B4DEDB0CE2CA581FF48FD28671705E23CE5D758B0CC5DC76798FF6E935F12A2F3DBFDA0663C4017C83CBDC56675F51A734E823E1C7B35BA70EF57DDDC5FBA60EDA47EDB7C5875C12E338378C26EC73B2687346BBC497B7995F33F37DD27C238
	4C4B2E577B316BBDE20D847813C94F34C27F654A66F64879A9BCBBFE0A7CD34A4C4B1544578E9B012F03F81778715B8F389EE300AF6C27E8031E7211FCABDB57EFCC7D29378D12FEEAFC7EBC4A6D1C8A788C522748F09F22166BD1BCB9AA23EAB276E952A6542DF3B24AEDB45C11C8E0C3FBB51F18CDD86EB11331AC3F5BB4D21F0C7D31693D09495A59E3F5EE984077A45E87CF81198452772EC2F33BBF45ED128EFC398F202ED9C5A359FD29647F79316181232E274B4D5B5455E28D95785B9FC0BD7B8A4D7D74
	DB2E6799608BFDG6B25279CF50FA5F9F13FC52B17575936382A476C8AF3BD8A393DD2A00DB4CA673AGED609E2ECB4103508FBE087C4986BFFA136B568E71DD8F22DD370E6883CB837840D8C8674A375FFE3B026E4E3C6827CD0B3C4300FF6203E82BDD3C5DA6C2B81930471A286E9F42738FCB58B195F59CF528F9247B87817D60A163F9218B0B7C5B74DA2EDFB34834BF04762A9B317D3F2B4B7F4CC3DA7E8C9B7710518F337C746D45E25D8F78A39FC25BF4F29BCE03F04AC3D847CF97FA5771EF389F64CE09
	4AA81802BC954D666DEC93DF77EB853EAE62D51A3DFD7513D24D76AF0CE8FBFD590D368F05BCCEFB157DF5BF4F4039FC8CB78178A3C92F46E55EFAF5DA34B6F473B2F39BBE40531986E924D0BAE78374D1BF64764DFD98EC77B0727F5EE05F5942A7A03E7DE174095000F6192D5A45DF9B8AF95858066695193721B21E77D8608FA37D16D47AF9F671F17AD460CBA25E1ECA437C24CC33E1FC25398DD3F8BAD90F4077C7B01D47823419DFF19D9B00371578DBAA3CED78B56F5B94088FF984ED18BAE2BF34B8008D
	E39EB1362B359566B65C49731E8C7C71245F44G65F90017E7A670CA0F222E2F0D5887AC5635036AC73D7B0046C70D3A4E75538714723C5B003F73D11A637969DFAF91E395609BC73CC5C506F10498DBC2FCBC712CBDEA6EBFBB797EC9BA7065CEC55E8B0F9A661765DA5F706A51117A863DCDFC7AE548234F4BA62F4A5E3A7F156F5DB483DFBB6933C9B157FDBF5F2B89813E8944BBD6B10C0DAAB45D5FD0C652FDE1G5D27CCB5BED32A877C7BD38B5FB3CAG192429582F4FEDC6FD339EC39FEB8C5827E40E20
	D36DE3C69F3B500F0FDDA35AAB7037BE067ABCA766B5908EA1ECEC916A987D98BE17DF2F14A87D15FE7A604DE2ADGE4D29F433AF8B3C09F3C00374F3C4723B20A9F473C459D64D688F7BC0E76F9F944BEF7E1007EE24C63C67BBC61274FFD1967BD8E78439F47B57924797E57647FFD7E48EB7253671B1FB3FBED3E6FB933BF4EB7BFE7766779FCFE261EB39358FF4DE77E5067315BBA09AFF381E2DF921633E01E0A9D345B14FE4297AD182F622DB24B90717C85CC2F939C6BD431C29D76250A15ACE07B8AD064
	FE973D3B34E281EF47F607C304D7F19E3BF3D0D634F3F7DCC73B5B2A53FBADE1DFCAF43725F4247B01710F1B5D51A89CD14E787ED8A137EFC4B9A3093B192F733D4354470DF7B653B9BE63F1631D4D8BCAF1CFF19644F57F8C6FCFDFE679EEF7CD433E235CAFC7ADA74A65ACE37ACF7D19313CA7B81E78B3E3F925B2ACEFB244B546E3F96D3B0D67E9A7C2DCDC3C7AEE43F8733BA6A9004FB44465BC817D4793E63EF0D9A51631D60DEF5671F542F707295C13DE772AC200E782D0244ABB7989FF77EEFA17994B14
	883C29AAFF3A099C235CA723B2ACCFFA4755C13875C9B35DFECF77513A54F8370EEF8CFC8FB315FB4567EEDEB470CDD1F927291F538D3233A01C7714B7D689618DC0EDBADC6471344F1D37EE60D1D43ED075B35C10DE8C04279A30A4882781C98946BC4A68B73C725538AA9DCF83FCEFCFB0AB7F8F57201CCD0D9F56710D056F9126F2ABAA753E908BBC71C049AA6F0C845FBA954F4B87582BC355674D74AF4FFD9F3D7EAB0B74DD4E72237C012EE07761057EA9D592FD4F7CC0CBA73DA5501D043A7562CE0260ED
	5A9EEC1E027F4A6D5F2D0CF8A6A06AC3CD67DFD4EBBADF10990C4EC26E030FB439AFCB022DB7F5EEDA920C7E02770B525155476EDA2DEC6E351A0E3FF585DF9FF56E5155C7087B5C6A636AF51A4E8FFF2C695C34BE787AD83EDE13FB58B93A7AD8688A3EBE9EF00D2EBE9ABF554AD63DD95371DA5768F4FCF594BA7EA8687A93FA6D5D226968E954F47CB650F920359B6A74BE73E44968FC663D52F37319082D1A4E0FEE53F43EEEF9B0BA8B395296CD6E62565155C7D1EBB07A0BFC36ED5772E93384AFA76F5064
	DE2988D42E356BC039BAACD7E82BA6D734ACF839A7F4F74A363484EB8FA11B263B6F35B8C7CB670E726073DFB7CF133B35B018FA746F9FDF4C577489DF20257BE9E9707E71106ECC5D832BCA7C4BED58GE21AADFE3DD04BBBFB31164633AB03CF23AACF132BAB99694E1C7F673935BCF8FF5B750EA6D7D598C057759F8BB38598071CACBC1773FCC21F13CBF4F538D4D707C169A6F8AF65EB350AE7C8762F6B562260ED74106EDCDADEC05FE66FAF54FC69576FEAF2E3827AB64A79577759FF02ED335F57ECDBD5
	2025AD87251B6AAF051A5C75E541BC2B7D176975326FDEA62A4720FC5D3FCD1CC51ACD46AF53528D8D2AECC26E4D92CD6E297A51BDD35E5F940C7E0277E71BC6770CFF452215EDCE3926637800EDE9AD942DB6E0BB7F75A84EA82F2E50F4E8532D933684250310F32D50649EAA8BC6CE701E9AC5BFF855CAAD0F533CFCFE1F976C79356E1355C26EEE5DDC6E7E7260655E514D1BCA02FE5705102D534DE58E6A66B2F70EC26F3BEAB439F1CD2373596426606D7A5CC71A2EFF2E5572DCD27E5DFC905BED31EE7E30
	C5B7FF288CAADDA1F738CE13EB9D05BFBE211BF7C84D67BEFF5F579C3CBD53785C42FFDAA54B02CFEB71C6CD6E6BD1786E3AFACD6E09D1785C958D1A1C9C345D046C244F347A1E261BD33D9B145E811E9F15415B6BCFDBB4391B0A820EF1B76A4738C5DBB5390A40E3FAAF39533BB43907C759C7DC5F26596B615DDABA4BC721F76A9ECDAE619C5B6B5CF6CD1F8F7E26255BB60A763AFB1FA6F775A85AEBEC07A63768683937576E23417B4C73DFE8656E7DD2CB23C0B9F7BD0EA8416B713D2FB4BD223F5652F826
	A97867E949A87A29273B347C7E7A0D165F0D2328EF4BA1CDEEFAD0750DEDB3F8BD1B3A35BC92834FDB3D5AC62FD5137BEC94ED6A119ECD6E41D176013F31E9B64D695552B994145E62372626ACE593D53B53E1F74A6C1799F748CE8957337FAFBF63233EA7CC777DD21FF79E7EB3C96491717FA08F25CCAB53D95D77B9BE6FBF7C6767DD7ABF1A077A5E8BFE570D7D36C1564F717EE6B2478AA0DCC55856BD7C7CAF045B883B0B5FCD6B067099424A781E7DB888C790F6AB3DD3A11630691CAF6B97D199453FC06C
	86FEDE087D76C2ADE1D31621FE4D04ADA84674BA897B126F7DC7C2F88AE16A7EBB64B90D3015AD185EF4420E35E0F9E791762F24F34E53080512AE1D04BD338CE59D045595232D06897BF5B95AEAACE1BFACA4DB91D6CF77E9E3891B358AED15150818F8F7FD81046B889BDB087A359276BC3DA7200BB0717E84E62BE84244B9E8A6BB053076A2AC5BB442443B5FD959D2885B41531B896102DFA2F6AD15371A3077283C0D0405B421FE9D043DD808651DC8D88DCFAF8E42C9043DD10EBA279156406DA27DABFC7F
	D7722B8A543918306AC254391630930528F3B3E1EF16214E1D0455531DF687E1BFD803BACFA66C36CADF1DB770B61388BCE9445734864BA1BDC3777F57E09E79045D34826B4DC6586DEB304D8C9316DB09690DA56CE0A52697C1D87D9ACCEF86E18D15D85E2CE954760FE1FA85040D65D8B5049B88FB63986651BA8D4F5F5C4F7B92769E7030E9F806670F3B3D4FD3FD480EEF294F254EBD66E7015C3C7F198AE9A4D2BACF2E70FF966895EE2BD9401B73AC72EFB05CB55A435BEE9D44B7BE0BE7039E8CF8570825
	23BF574E5ECF2EFFC7399B5279535BEF3F3D104A73361F3BC66F73BE628C7007BE0B367A25687F18AE047DF6995AAF0DF4ACAF9E69CECFA09D8B1E0B4AE09B9A2BC8C7371FF364213C5DD482FF6DF3284FFC2ECF97047B895B5BC2F57C9C1E6F5A430E8629E764FE9B5026F3C750F7AA244974E33F31A0721BC4B6C9247C0E59A52A7BEF38EDE7C1DC4E732823B89BD68761C6429E9277D4A0BC7CBC3DD3B2605930F9A3689A89693C2A563FFAAF0A5F610AE569BF0FFED8D8615FEF57F1BD5300B71D743C3B904B
	DB19C467C8835E27D9B0021E6DC91A8F28F7BC44BBE1G6FCF42FCEB0AB05F89C9E86789C7B4BB3F486327C0DCC292166D6F65A37F7E45C91E9753AF1D721AAA5E757182785A8B08ED916F3D01F07F8BD86E9FB585F3BF4BDF3943A01DDB3D6AC73CA7E4A260B1AF5019637225DEE5580A27C4D519C324FFB269AA5EE942EC1573A226333F423B1F3B7728E63BA705BF82EF630B18469705182E0330880E05C1F8A2E1625DC90990CEFE916D723700E7200D772B0CF649FDA9AA63A2300BF63768C17EECA8G3C72
	A5AC4F5EG7DEDBF6FEF5B01376BA554533186ED927A926AF9731A117CD62FE76CCB5EFA46C3F80B243F831540731D86F88A657B9C4FB7B7991ED74908FDD2093AB4A723AE4E4A117A51C0B6F3A79B5BD08F4F778C6021142FAC7AF416A7E1C70E21AEB3125136B79D7376159759CFBA2A7DE70EA718FB6C7E74AC7EB7F1C68E6F15AD15FE395BA285BB575D6A14C8AEF2C540BD1F0F75F3D61BCB13FBAF605E32375C14E31A5C35235CDBFE053D168577AE94AD1D351541673FFAC8133BFBD90075033ACF3C568F
	246260ED5AF6DC5353F5C24B6FD8D1207CEA3D56B91EBA29499585EDA7415F5B923C2E2F1D5272099F45BAF17199CD6E79407B1FDE765FF2D6133BBC709E23175C355FEAF2B523DCA3F9D0526A636559DABAD70DC26F2CCCCD6E02C06BCE9F035FFC2C79CD42A87645D6E5E9FA6E553DAB7732C079B13F516557B20AF5AE0F6EFCC6C3C0DB542936D077064A03F95F394863873A339C8B8256F71D173D5F501D55D0025E0B9232793AF3971FAE52522998C5990F87D5C6357F29885E66326E9CC8D9D076903C0E42
	60ED9E2ABBB372EA60BDEBAF1B276A5E65D4B34A3D0539791A4DBF501DF1781700FD33F77E3B5F5364B62C99210D697A660B5684E3FF7F7B90EE5D99086BF5E7A0BE8B2403213FFED8F786E2F6E5703A370DE22FA9D5F7AEE12E6E1EF0C2C570FA76684EA5FCF2ECF44F158B0E852F6BA5FC2D78FDAE37F2DD82D8B57A8FD27620C7DA622B6356ABDEF8BE7AD0F3FE061431D31A534F6F0D6C1432CF308BA843EE98655C81F45560B1699FD4F512A24DE5BF9DED596904B497FA697F588D1F7CC7422F8E8CE6CAF3
	F6CA05ECB9E03F6C61EF8817ED4DD645FAC07630DC37CB735CAEBB7B716AD372CEA9EB10FFE48FAAA79DF21B145F3BCFBEB6A48FAA32EDAB3E93FBD0115EEDE3B9FD44DE9777D12BF5301F3F48E1D31B1465348E480A34C4C4BB2C4E3E0F440B48B7B17D2559DB9B39527C9C99683B146B4BD22921D4167EF4710A324FD363B2250C6D52FC074BEA5BEE6DD1DC1E1D52BC255FA38F763B9C36E1779611D04E8966457C178FA039E5D4FCD6589AB6A5A3250F8EDFB7F66174055B21CA06BD52C71C130DC2EB08033D
	595F83D9491E1DC0D648321262AEA8D1D67EFC477BDD9952EC35102C92668C3B95E9CE2FF5406EB889DF1A3937706A192F00369E2BF330576599G4DAC864DB00AB228397A095A9F7C78BF3F6299E8220AD4AACC89229F75492E010F3676765A1DB2A5GF6056417D3720C27464033E4F87C3B1FBF7B76E17003E6A9F32036167FDF4B7F2FE37F57F2E4ADC7562E83634E10827E996307314C5CF9C01F45DC9FD67DB55B218615977F70440DAFB54CC80352ED17320F33F757C3A564E9DC62F794AE097E41728593
	D2AEE7F564E62EB24C52DDB4CCA932926E645722D20EFFDC1F794ACD1999D296B495F1CD8C1C175D7582677508161329385C426F00587947773823E07BE10D72B69EDAA6E9575CF837685D46A874953075D368A004BE6721AC9F5FE6E80E2F13B2B817DC050596F356F7787F7CD19B1EC93D47E58B48DE1543D4A616AF9BBF31F391190AB4FFFF3FEC33F4C0F7D32FC86FD5D8DC3D169D9E5710FB5052E26D694708FC764BF6D6274D32CF9E145907D5E1707B1C5532DFF648BDEC114332DBD67ADDB6A6506ABAE1
	D1DC167DE0EE8BBC08950F4B8170B2A150E4F5DBFB6C4AC9C84EB6A4A4D7306C1BCE76B8E4E09FF2AA10A864435E3D8791CBF8F736F7C831344B1E9E68D56BAD0AB4FB85F3AE3927C61116D27CCEA734D3F0A64630C46D843DC0D502893F0371146879D7F175DA4531CAE38E4B1CF2011743DE6565300C58E66BFC931E732AEC4DDA5932F5E51B6327EC993A32E51C6FE55BE3DE3639671F26DF845294AD9C67D38B1BA4E33799F77E156D10EF595850EB9E694DA6C0EE1350F9D50AFE2D94D9EAA9781A261FD2F8
	5797FBFCE1FDE5197030BF76886C7412E06933C516EC939E7A73CAED0B0F07700727898F06FACDC201BD4CDB423CE748B461B92FEA73822DB659F590D61B6CCA01566B314962E7BEE5133C4A2671780658A252BDA621734A8AD7787AB4733039673B5EBF74561B554C8D123E1DF8579E72303F11EB6F3CAA698D5EFE4ACAF1582B247FAB7C6CB66F01AF7A193FD2301E7404C9683CAAD32C6F1810ADF84C71D30A7FEFBCF20A2FC7320D226C73CF531F197792D9FE6AC45F47E70CD8A76C6FFF051FCE736D63CD7C
	D41172440F9EDA7037A4E142B727EA406E2CD92D45616FBFC25CE275F796ADE201C00F085FE9E4887BADC5B67F946275DED97619044EAB4325EA0643C3B77C452AFECA41DCE30D0F44ECAF8946D3F57E1574F56F81BA5319B5066C7FDD75156EDDDF19EAA97C5597DBE52E7011487112E0BCD5DE72D71A044EA7AB4C4E562C002FACE314B5E2A94E63B2AD564A042F99E7BA6578A985EBE595DED6401A756E7A2B82C8E0BBB013B82FEC335C3BFB477AD6FFBFFA75379BD473F40D0F1452AFDECC6F06B61E6108FE
	CB7D9D7737345F0F963F1BB31E7F3E58AC408B7E046F90FBF9639A497F6FE56E9F30BA9C0A55F1F42B5376397538F55BC9C556FE27730775AC7DC164D1A3C55CF575CC6FA3BA197F86D0CB87883E0771CDF7B4GGD038GGD0CB818294G94G88G88G02FD35B03E0771CDF7B4GGD038GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG31B4GGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private String getChangeCondition( String change )
{

	if( change.equalsIgnoreCase("After a Duration") )
	{
		return LMProgramDirectGear.CHANGE_DURATION;
	}
	else if( change.equalsIgnoreCase("Priority Change") )
	{
		return LMProgramDirectGear.CHANGE_PRIORITY;
	}
	else if( change.equalsIgnoreCase("Above Trigger") )
	{
		return LMProgramDirectGear.CHANGE_TRIGGER_OFFSET;
	}	
	else
		return LMProgramDirectGear.CHANGE_NONE;

}
/**
 * Return the JCheckBoxRampIn property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRampIn() {
	if (ivjJCheckBoxRampIn == null) {
		try {
			ivjJCheckBoxRampIn = new javax.swing.JCheckBox();
			ivjJCheckBoxRampIn.setName("JCheckBoxRampIn");
			ivjJCheckBoxRampIn.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRampIn.setText("Ramp In");
			ivjJCheckBoxRampIn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRampIn;
}
/**
 * Return the JComboBoxCycleCountSndType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JComboBox getJComboBoxCycleCountSndType() {
	if (ivjJComboBoxCycleCountSndType == null) {
		try {
			ivjJComboBoxCycleCountSndType = new javax.swing.JComboBox();
			ivjJComboBoxCycleCountSndType.setName("JComboBoxCycleCountSndType");
			ivjJComboBoxCycleCountSndType.setPreferredSize(new java.awt.Dimension(146, 23));
			ivjJComboBoxCycleCountSndType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxCycleCountSndType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxCycleCountSndType.setMinimumSize(new java.awt.Dimension(146, 23));
			// user code begin {1}
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_FIXED_COUNT ) );
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_COUNT_DOWN ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxCycleCountSndType;
}
/**
 * Return the JComboBoxGroupSelection property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGroupSelection() {
	if (ivjJComboBoxGroupSelection == null) {
		try {
			ivjJComboBoxGroupSelection = new javax.swing.JComboBox();
			ivjJComboBoxGroupSelection.setName("JComboBoxGroupSelection");
			ivjJComboBoxGroupSelection.setPreferredSize(new java.awt.Dimension(184, 23));
			ivjJComboBoxGroupSelection.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxGroupSelection.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxGroupSelection.setMinimumSize(new java.awt.Dimension(184, 23));
			// user code begin {1}
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LAST_CONTROLLED ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_ALWAYS_FIRST_GROUP ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LEAST_CONTROL_TIME ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGroupSelection;
}
/**
 * Return the JComboBoxHowToStop property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHowToStop() {
	if (ivjJComboBoxHowToStop == null) {
		try {
			ivjJComboBoxHowToStop = new javax.swing.JComboBox();
			ivjJComboBoxHowToStop.setName("JComboBoxHowToStop");
			ivjJComboBoxHowToStop.setPreferredSize(new java.awt.Dimension(184, 23));
			ivjJComboBoxHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxHowToStop.setMinimumSize(new java.awt.Dimension(184, 23));
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RAMP_OUT) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHowToStop;
}
/**
 * Return the JComboBoxNumGroups property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxNumGroups() {
	if (ivjJComboBoxNumGroups == null) {
		try {
			ivjJComboBoxNumGroups = new javax.swing.JComboBox();
			ivjJComboBoxNumGroups.setName("JComboBoxNumGroups");
			ivjJComboBoxNumGroups.setPreferredSize(new java.awt.Dimension(146, 23));
			ivjJComboBoxNumGroups.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxNumGroups.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxNumGroups.setMinimumSize(new java.awt.Dimension(146, 23));
			// user code begin {1}
			ivjJComboBoxNumGroups.addItem("All of Them");
			for( int i = 1; i < 26; i++ )
				ivjJComboBoxNumGroups.addItem( new Integer(i) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxNumGroups;
}
/**
 * Return the JComboBoxSendRate property value.
 * @return javax.swing.JComboBox
 */

/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSendRateDigits() {
	if (ivjJComboBoxSendRateDigits == null) {
		try {
			ivjJComboBoxSendRateDigits = new javax.swing.JComboBox();
			ivjJComboBoxSendRateDigits.setName("JComboBoxSendRateDigits");
			ivjJComboBoxSendRateDigits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxSendRateDigits.setPreferredSize(new java.awt.Dimension(63, 23));
			ivjJComboBoxSendRateDigits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxSendRateDigits.setMinimumSize(new java.awt.Dimension(63, 23));
			ivjJComboBoxSendRateDigits.setEditable(true);
			// user code begin {1}
			NewComboBoxEditor ncb = new NewComboBoxEditor();
			ncb.getJTextField().setDocument( 
				  new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 1000) );
         	ivjJComboBoxSendRateDigits.setEditor( ncb );
			
			ivjJComboBoxSendRateDigits.addItem("0");
			ivjJComboBoxSendRateDigits.addItem("1");
			ivjJComboBoxSendRateDigits.addItem("2");
			ivjJComboBoxSendRateDigits.addItem("5");
			ivjJComboBoxSendRateDigits.addItem("8");
			ivjJComboBoxSendRateDigits.addItem("10");
			ivjJComboBoxSendRateDigits.addItem("15");
			ivjJComboBoxSendRateDigits.addItem("20");
			ivjJComboBoxSendRateDigits.addItem("30");
			ivjJComboBoxSendRateDigits.addItem("45");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSendRateDigits;
}
/**
 * Return the JComboBoxSendRate11 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSendRateUnits() {
	if (ivjJComboBoxSendRateUnits == null) {
		try {
			ivjJComboBoxSendRateUnits = new javax.swing.JComboBox();
			ivjJComboBoxSendRateUnits.setName("JComboBoxSendRateUnits");
			ivjJComboBoxSendRateUnits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxSendRateUnits.setMaximumSize(new java.awt.Dimension(102, 23));
			ivjJComboBoxSendRateUnits.setPreferredSize(new java.awt.Dimension(102, 23));
			ivjJComboBoxSendRateUnits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxSendRateUnits.setMinimumSize(new java.awt.Dimension(102, 23));
			// user code begin {1}
			ivjJComboBoxSendRateUnits.addItem("minutes");
			ivjJComboBoxSendRateUnits.addItem("hours");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSendRateUnits;
}
/**
 * Return the JComboBoxShedTime property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxShedTime() {
	if (ivjJComboBoxShedTime == null) {
		try {
			ivjJComboBoxShedTime = new javax.swing.JComboBox();
			ivjJComboBoxShedTime.setName("JComboBoxShedTime");
			ivjJComboBoxShedTime.setPreferredSize(new java.awt.Dimension(146, 23));
			ivjJComboBoxShedTime.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxShedTime.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxShedTime.setMinimumSize(new java.awt.Dimension(146, 23));
			// user code begin {1}
			ivjJComboBoxShedTime.addItem("5 minutes");
			ivjJComboBoxShedTime.addItem("7 minutes");
			ivjJComboBoxShedTime.addItem("10 minutes");
			ivjJComboBoxShedTime.addItem("15 minutes");
			ivjJComboBoxShedTime.addItem("20 minutes");
			ivjJComboBoxShedTime.addItem("30 minutes");
			ivjJComboBoxShedTime.addItem("45 minutes");
			ivjJComboBoxShedTime.addItem("1 hour");
			ivjJComboBoxShedTime.addItem("2 hours");
			ivjJComboBoxShedTime.addItem("3 hours");
			ivjJComboBoxShedTime.addItem("4 hours");
			ivjJComboBoxShedTime.addItem("6 hours");
			ivjJComboBoxShedTime.addItem("8 hours");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxShedTime;
}
/**
 * Return the JComboBoxWhenChange property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxWhenChange() {
	if (ivjJComboBoxWhenChange == null) {
		try {
			ivjJComboBoxWhenChange = new javax.swing.JComboBox();
			ivjJComboBoxWhenChange.setName("JComboBoxWhenChange");
			ivjJComboBoxWhenChange.setPreferredSize(new java.awt.Dimension(170, 23));
			ivjJComboBoxWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxWhenChange.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJComboBoxWhenChange.addItem("Manually Only");
			ivjJComboBoxWhenChange.addItem("After a Duration");
			ivjJComboBoxWhenChange.addItem("Priority Change");
			ivjJComboBoxWhenChange.addItem("Above Trigger");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxWhenChange;
}
/**
 * Return the JCSpinFieldChangeDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeDuration() {
	if (ivjJCSpinFieldChangeDuration == null) {
		try {
			ivjJCSpinFieldChangeDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeDuration.setName("JCSpinFieldChangeDuration");
			ivjJCSpinFieldChangeDuration.setPreferredSize(new java.awt.Dimension(45, 20));
			ivjJCSpinFieldChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeDuration.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeDuration.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(3)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeDuration;
}
/**
 * Return the JCSpinFieldChangePriority property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangePriority() {
	if (ivjJCSpinFieldChangePriority == null) {
		try {
			ivjJCSpinFieldChangePriority = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangePriority.setName("JCSpinFieldChangePriority");
			ivjJCSpinFieldChangePriority.setPreferredSize(new java.awt.Dimension(35, 30));
			ivjJCSpinFieldChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangePriority.setMaximumSize(new java.awt.Dimension(40, 30));
			// user code begin {1}
			ivjJCSpinFieldChangePriority.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(9999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangePriority;
}
/**
 * Return the JCSpinFieldChangeTriggerNumber property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeTriggerNumber() {
	if (ivjJCSpinFieldChangeTriggerNumber == null) {
		try {
			ivjJCSpinFieldChangeTriggerNumber = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeTriggerNumber.setName("JCSpinFieldChangeTriggerNumber");
			ivjJCSpinFieldChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeTriggerNumber.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(1), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(1)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeTriggerNumber;
}
/**
 * Return the JCSpinFieldPercentReduction property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldPercentReduction() {
	if (ivjJCSpinFieldPercentReduction == null) {
		try {
			ivjJCSpinFieldPercentReduction = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldPercentReduction.setName("JCSpinFieldPercentReduction");
			ivjJCSpinFieldPercentReduction.setPreferredSize(new java.awt.Dimension(88, 22));
			ivjJCSpinFieldPercentReduction.setMaximumSize(new java.awt.Dimension(88, 22));
			ivjJCSpinFieldPercentReduction.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJCSpinFieldPercentReduction.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(100)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			ivjJCSpinFieldPercentReduction.setValue( new Integer(100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldPercentReduction;
}
/**
 * Return the JCSpinFieldRampInPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampInPercent() {
	if (ivjJCSpinFieldRampInPercent == null) {
		try {
			ivjJCSpinFieldRampInPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampInPercent.setName("JCSpinFieldRampInPercent");
			ivjJCSpinFieldRampInPercent.setPreferredSize(new java.awt.Dimension(61, 20));
			ivjJCSpinFieldRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampInPercent.setMaximumSize(new java.awt.Dimension(61, 20));
			ivjJCSpinFieldRampInPercent.setMinimumSize(new java.awt.Dimension(61, 20));
			// user code begin {1}
			ivjJCSpinFieldRampInPercent.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(100), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(100)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampInPercent;
}
/**
 * Return the JCSpinFieldRampOutPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampOutPercent() {
	if (ivjJCSpinFieldRampOutPercent == null) {
		try {
			ivjJCSpinFieldRampOutPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampOutPercent.setName("JCSpinFieldRampOutPercent");
			ivjJCSpinFieldRampOutPercent.setPreferredSize(new java.awt.Dimension(61, 20));
			ivjJCSpinFieldRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampOutPercent.setMaximumSize(new java.awt.Dimension(61, 20));
			ivjJCSpinFieldRampOutPercent.setMinimumSize(new java.awt.Dimension(61, 20));
			// user code begin {1}
			ivjJCSpinFieldRampOutPercent.setDataProperties(
						new com.klg.jclass.field.DataProperties(
							new com.klg.jclass.field.validate.JCIntegerValidator(
								null, new Integer(0), new Integer(100), null, true, 
								null, new Integer(1), "#,##0.###;-#,##0.###", false, 
								false, false, null, new Integer(100)), 
								new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
								new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
								new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampOutPercent;
}
/**
 * Return the JLabelChangeDuration property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeDuration() {
	if (ivjJLabelChangeDuration == null) {
		try {
			ivjJLabelChangeDuration = new javax.swing.JLabel();
			ivjJLabelChangeDuration.setName("JLabelChangeDuration");
			ivjJLabelChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeDuration.setText("Change Duration:");
			ivjJLabelChangeDuration.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeDuration.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeDuration;
}
/**
 * Return the JLabelChangePriority property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangePriority() {
	if (ivjJLabelChangePriority == null) {
		try {
			ivjJLabelChangePriority = new javax.swing.JLabel();
			ivjJLabelChangePriority.setName("JLabelChangePriority");
			ivjJLabelChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangePriority.setText("Change Priority:");
			ivjJLabelChangePriority.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangePriority.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangePriority;
}
/**
 * Return the JLabelChangeTriggerNumber property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerNumber() {
	if (ivjJLabelChangeTriggerNumber == null) {
		try {
			ivjJLabelChangeTriggerNumber = new javax.swing.JLabel();
			ivjJLabelChangeTriggerNumber.setName("JLabelChangeTriggerNumber");
			ivjJLabelChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerNumber.setText("Trigger Number:");
			ivjJLabelChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerNumber.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerNumber;
}
/**
 * Return the JLabelChangeTriggerOffset property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerOffset() {
	if (ivjJLabelChangeTriggerOffset == null) {
		try {
			ivjJLabelChangeTriggerOffset = new javax.swing.JLabel();
			ivjJLabelChangeTriggerOffset.setName("JLabelChangeTriggerOffset");
			ivjJLabelChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerOffset.setText("Trigger Offset:");
			ivjJLabelChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerOffset.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerOffset;
}
/**
 * Return the JLabelCycleCntSndType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCycleCntSndType() {
	if (ivjJLabelCycleCntSndType == null) {
		try {
			ivjJLabelCycleCntSndType = new javax.swing.JLabel();
			ivjJLabelCycleCntSndType.setName("JLabelCycleCntSndType");
			ivjJLabelCycleCntSndType.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCycleCntSndType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelCycleCntSndType.setText("Cycle Count Send Type:");
			ivjJLabelCycleCntSndType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCycleCntSndType;
}
/**
 * Return the JLabelGroupSelection property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGroupSelection() {
	if (ivjJLabelGroupSelection == null) {
		try {
			ivjJLabelGroupSelection = new javax.swing.JLabel();
			ivjJLabelGroupSelection.setName("JLabelGroupSelection");
			ivjJLabelGroupSelection.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelGroupSelection.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelGroupSelection.setText("Group Selection Method:");
			ivjJLabelGroupSelection.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGroupSelection;
}
/**
 * Return the JLabelHowToStop property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHowToStop() {
	if (ivjJLabelHowToStop == null) {
		try {
			ivjJLabelHowToStop = new javax.swing.JLabel();
			ivjJLabelHowToStop.setName("JLabelHowToStop");
			ivjJLabelHowToStop.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelHowToStop.setText("How to Stop Control:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHowToStop;
}
/**
 * Return the JLabelMinutesChDur property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutesChDur() {
	if (ivjJLabelMinutesChDur == null) {
		try {
			ivjJLabelMinutesChDur = new javax.swing.JLabel();
			ivjJLabelMinutesChDur.setName("JLabelMinutesChDur");
			ivjJLabelMinutesChDur.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutesChDur.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelMinutesChDur.setText("(min.)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutesChDur;
}
/**
 * Return the JLabelNumGroups property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelNumGroups() {
	if (ivjJLabelNumGroups == null) {
		try {
			ivjJLabelNumGroups = new javax.swing.JLabel();
			ivjJLabelNumGroups.setName("JLabelNumGroups");
			ivjJLabelNumGroups.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelNumGroups.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelNumGroups.setText("# of Groups Each Time:");
			ivjJLabelNumGroups.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelNumGroups;
}
/**
 * Return the JLabelPercentReduction property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPercentReduction() {
	if (ivjJLabelPercentReduction == null) {
		try {
			ivjJLabelPercentReduction = new javax.swing.JLabel();
			ivjJLabelPercentReduction.setName("JLabelPercentReduction");
			ivjJLabelPercentReduction.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPercentReduction.setText("Group Capacity Reduction %:");
			ivjJLabelPercentReduction.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPercentReduction.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPercentReduction;
}
/**
 * Return the JLabelRampInInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInInterval() {
	if (ivjJLabelRampInInterval == null) {
		try {
			ivjJLabelRampInInterval = new javax.swing.JLabel();
			ivjJLabelRampInInterval.setName("JLabelRampInInterval");
			ivjJLabelRampInInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInInterval.setText("Ramp In Interval: ");
			ivjJLabelRampInInterval.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInInterval.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInInterval;
}
/**
 * Return the JLabelRampInPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercent() {
	if (ivjJLabelRampInPercent == null) {
		try {
			ivjJLabelRampInPercent = new javax.swing.JLabel();
			ivjJLabelRampInPercent.setName("JLabelRampInPercent");
			ivjJLabelRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercent.setText("Ramp In Percent: ");
			ivjJLabelRampInPercent.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercent.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercent;
}
/**
 * Return the JLabelRampInPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercentSign() {
	if (ivjJLabelRampInPercentSign == null) {
		try {
			ivjJLabelRampInPercentSign = new javax.swing.JLabel();
			ivjJLabelRampInPercentSign.setName("JLabelRampInPercentSign");
			ivjJLabelRampInPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercentSign;
}
/**
 * Return the JLabelRampInSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInSec() {
	if (ivjJLabelRampInSec == null) {
		try {
			ivjJLabelRampInSec = new javax.swing.JLabel();
			ivjJLabelRampInSec.setName("JLabelRampInSec");
			ivjJLabelRampInSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInSec;
}
/**
 * Return the JLabelRampOutInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutInterval() {
	if (ivjJLabelRampOutInterval == null) {
		try {
			ivjJLabelRampOutInterval = new javax.swing.JLabel();
			ivjJLabelRampOutInterval.setName("JLabelRampOutInterval");
			ivjJLabelRampOutInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutInterval.setText("Ramp Out Interval: ");
			ivjJLabelRampOutInterval.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutInterval.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutInterval;
}
/**
 * Return the JLabelRampOutPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercent() {
	if (ivjJLabelRampOutPercent == null) {
		try {
			ivjJLabelRampOutPercent = new javax.swing.JLabel();
			ivjJLabelRampOutPercent.setName("JLabelRampOutPercent");
			ivjJLabelRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercent.setText("Ramp Out Percent: ");
			ivjJLabelRampOutPercent.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercent.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercent;
}
/**
 * Return the JLabelRampOutPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercentSign() {
	if (ivjJLabelRampOutPercentSign == null) {
		try {
			ivjJLabelRampOutPercentSign = new javax.swing.JLabel();
			ivjJLabelRampOutPercentSign.setName("JLabelRampOutPercentSign");
			ivjJLabelRampOutPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercentSign;
}
/**
 * Return the JLabelRampOutSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutSec() {
	if (ivjJLabelRampOutSec == null) {
		try {
			ivjJLabelRampOutSec = new javax.swing.JLabel();
			ivjJLabelRampOutSec.setName("JLabelRampOutSec");
			ivjJLabelRampOutSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutSec;
}
/**
 * Return the JLabelSendRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSendRate() {
	if (ivjJLabelSendRate == null) {
		try {
			ivjJLabelSendRate = new javax.swing.JLabel();
			ivjJLabelSendRate.setName("JLabelSendRate");
			ivjJLabelSendRate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelSendRate.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelSendRate.setText("Command Resend Rate:");
			ivjJLabelSendRate.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSendRate;
}
/**
 * Return the JLabelShedTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelShedTime() {
	if (ivjJLabelShedTime == null) {
		try {
			ivjJLabelShedTime = new javax.swing.JLabel();
			ivjJLabelShedTime.setName("JLabelShedTime");
			ivjJLabelShedTime.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelShedTime.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelShedTime.setText("Shed Time:");
			ivjJLabelShedTime.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelShedTime;
}
/**
 * Return the JLabelWhenChange property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelWhenChange() {
	if (ivjJLabelWhenChange == null) {
		try {
			ivjJLabelWhenChange = new javax.swing.JLabel();
			ivjJLabelWhenChange.setName("JLabelWhenChange");
			ivjJLabelWhenChange.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelWhenChange.setText("When to Change:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelWhenChange;
}
/**
 * Return the JPanelChangeMethod property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelChangeMethod() {
	if (ivjJPanelChangeMethod == null) {
		try {
			ivjJPanelChangeMethod = new javax.swing.JPanel();
			ivjJPanelChangeMethod.setName("JPanelChangeMethod");
			ivjJPanelChangeMethod.setLayout(new java.awt.GridBagLayout());
			ivjJPanelChangeMethod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanelChangeMethod.setMaximumSize(new java.awt.Dimension(360, 90));
			ivjJPanelChangeMethod.setPreferredSize(new java.awt.Dimension(330, 87));
			ivjJPanelChangeMethod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJPanelChangeMethod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelChangeDuration = new java.awt.GridBagConstraints();
			constraintsJLabelChangeDuration.gridx = 1; constraintsJLabelChangeDuration.gridy = 2;
			constraintsJLabelChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeDuration.ipadx = -5;
			constraintsJLabelChangeDuration.ipady = 6;
			constraintsJLabelChangeDuration.insets = new java.awt.Insets(1, 5, 3, 5);
			getJPanelChangeMethod().add(getJLabelChangeDuration(), constraintsJLabelChangeDuration);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeDuration.gridx = 2; constraintsJCSpinFieldChangeDuration.gridy = 2;
			constraintsJCSpinFieldChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeDuration.ipadx = 34;
			constraintsJCSpinFieldChangeDuration.ipady = 19;
			constraintsJCSpinFieldChangeDuration.insets = new java.awt.Insets(1, 5, 3, 1);
			getJPanelChangeMethod().add(getJCSpinFieldChangeDuration(), constraintsJCSpinFieldChangeDuration);

			java.awt.GridBagConstraints constraintsJLabelMinutesChDur = new java.awt.GridBagConstraints();
			constraintsJLabelMinutesChDur.gridx = 3; constraintsJLabelMinutesChDur.gridy = 2;
			constraintsJLabelMinutesChDur.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutesChDur.ipadx = 5;
			constraintsJLabelMinutesChDur.ipady = -2;
			constraintsJLabelMinutesChDur.insets = new java.awt.Insets(5, 1, 5, 2);
			getJPanelChangeMethod().add(getJLabelMinutesChDur(), constraintsJLabelMinutesChDur);

			java.awt.GridBagConstraints constraintsJLabelChangePriority = new java.awt.GridBagConstraints();
			constraintsJLabelChangePriority.gridx = 4; constraintsJLabelChangePriority.gridy = 2;
			constraintsJLabelChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangePriority.ipadx = -13;
			constraintsJLabelChangePriority.ipady = 6;
			constraintsJLabelChangePriority.insets = new java.awt.Insets(1, 3, 3, 2);
			getJPanelChangeMethod().add(getJLabelChangePriority(), constraintsJLabelChangePriority);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangePriority = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangePriority.gridx = 5; constraintsJCSpinFieldChangePriority.gridy = 2;
			constraintsJCSpinFieldChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangePriority.ipadx = 34;
			constraintsJCSpinFieldChangePriority.ipady = 19;
			constraintsJCSpinFieldChangePriority.insets = new java.awt.Insets(1, 3, 3, 8);
			getJPanelChangeMethod().add(getJCSpinFieldChangePriority(), constraintsJCSpinFieldChangePriority);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerNumber.gridx = 1; constraintsJLabelChangeTriggerNumber.gridy = 3;
			constraintsJLabelChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerNumber.ipadx = -45;
			constraintsJLabelChangeTriggerNumber.ipady = 6;
			constraintsJLabelChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 15, 5);
			getJPanelChangeMethod().add(getJLabelChangeTriggerNumber(), constraintsJLabelChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerOffset.gridx = 4; constraintsJLabelChangeTriggerOffset.gridy = 3;
			constraintsJLabelChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerOffset.ipadx = -63;
			constraintsJLabelChangeTriggerOffset.insets = new java.awt.Insets(8, 3, 17, 12);
			getJPanelChangeMethod().add(getJLabelChangeTriggerOffset(), constraintsJLabelChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJTextFieldChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJTextFieldChangeTriggerOffset.gridx = 5; constraintsJTextFieldChangeTriggerOffset.gridy = 3;
			constraintsJTextFieldChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldChangeTriggerOffset.weightx = 1.0;
			constraintsJTextFieldChangeTriggerOffset.ipadx = 31;
			constraintsJTextFieldChangeTriggerOffset.insets = new java.awt.Insets(4, 3, 15, 8);
			getJPanelChangeMethod().add(getJTextFieldChangeTriggerOffset(), constraintsJTextFieldChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeTriggerNumber.gridx = 2; constraintsJCSpinFieldChangeTriggerNumber.gridy = 3;
			constraintsJCSpinFieldChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeTriggerNumber.ipadx = 34;
			constraintsJCSpinFieldChangeTriggerNumber.ipady = 19;
			constraintsJCSpinFieldChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 15, 1);
			getJPanelChangeMethod().add(getJCSpinFieldChangeTriggerNumber(), constraintsJCSpinFieldChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelWhenChange = new java.awt.GridBagConstraints();
			constraintsJLabelWhenChange.gridx = 1; constraintsJLabelWhenChange.gridy = 1;
			constraintsJLabelWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelWhenChange.ipadx = 3;
			constraintsJLabelWhenChange.ipady = 4;
			constraintsJLabelWhenChange.insets = new java.awt.Insets(0, 5, 4, 5);
			getJPanelChangeMethod().add(getJLabelWhenChange(), constraintsJLabelWhenChange);

			java.awt.GridBagConstraints constraintsJComboBoxWhenChange = new java.awt.GridBagConstraints();
			constraintsJComboBoxWhenChange.gridx = 3; constraintsJComboBoxWhenChange.gridy = 1;
			constraintsJComboBoxWhenChange.gridwidth = 3;
			constraintsJComboBoxWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxWhenChange.weightx = 1.0;
			constraintsJComboBoxWhenChange.ipadx = 170;
			constraintsJComboBoxWhenChange.ipady = 23;
			constraintsJComboBoxWhenChange.insets = new java.awt.Insets(0, 3, 1, 8);
			getJPanelChangeMethod().add(getJComboBoxWhenChange(), constraintsJComboBoxWhenChange);
			// user code begin {1}
			jComboBoxWhenChange_ActionPerformed(null);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelChangeMethod;
}
/**
 * Return the JTextFieldChangeTriggerOffset property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldChangeTriggerOffset() {
	if (ivjJTextFieldChangeTriggerOffset == null) {
		try {
			ivjJTextFieldChangeTriggerOffset = new javax.swing.JTextField();
			ivjJTextFieldChangeTriggerOffset.setName("JTextFieldChangeTriggerOffset");
			ivjJTextFieldChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJTextFieldChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJTextFieldChangeTriggerOffset.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999.9999, 99999.9999, 4) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldChangeTriggerOffset;
}
/**
 * Return the JTextFieldRampInInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampInInterval() {
	if (ivjJTextFieldRampInInterval == null) {
		try {
			ivjJTextFieldRampInInterval = new javax.swing.JTextField();
			ivjJTextFieldRampInInterval.setName("JTextFieldRampInInterval");
			ivjJTextFieldRampInInterval.setPreferredSize(new java.awt.Dimension(61, 20));
			ivjJTextFieldRampInInterval.setMaximumSize(new java.awt.Dimension(61, 20));
			ivjJTextFieldRampInInterval.setMinimumSize(new java.awt.Dimension(61, 20));
			// user code begin {1}
			ivjJTextFieldRampInInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampInInterval;
}
/**
 * Return the JTextFieldRampOutInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampOutInterval() {
	if (ivjJTextFieldRampOutInterval == null) {
		try {
			ivjJTextFieldRampOutInterval = new javax.swing.JTextField();
			ivjJTextFieldRampOutInterval.setName("JTextFieldRampOutInterval");
			ivjJTextFieldRampOutInterval.setPreferredSize(new java.awt.Dimension(61, 20));
			ivjJTextFieldRampOutInterval.setMaximumSize(new java.awt.Dimension(61, 20));
			ivjJTextFieldRampOutInterval.setMinimumSize(new java.awt.Dimension(61, 20));
			// user code begin {1}
			ivjJTextFieldRampOutInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampOutInterval;
}
/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	com.cannontech.database.db.device.lm.LMProgramDirectGear gear = null;
	
	gear = (LMProgramDirectGear)o;
	
	if( getJComboBoxHowToStop().getSelectedItem() != null )
	{
		gear.setMethodStopType( 
			com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxHowToStop().getSelectedItem().toString() ) );
	}
	
	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT) == 0)
	{
		gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
		gear.setRampOutInterval(new Integer(getJTextFieldRampOutInterval().getText()));
	}
		
	if(getJCheckBoxRampIn().isSelected())
	{
		gear.setRampInPercent(new Integer(((Number)getJCSpinFieldRampInPercent().getValue()).intValue()));
		gear.setRampInInterval(new Integer(getJTextFieldRampInInterval().getText()));
	}

	gear.setMethodOptionType((String)getJComboBoxCycleCountSndType().getSelectedItem());
	
	gear.setPercentReduction( new Integer( ((Number)getJCSpinFieldPercentReduction().getValue()).intValue() ) );
	
	gear.setChangeCondition( getChangeCondition(getJComboBoxWhenChange().getSelectedItem().toString()) );

	gear.setChangeDuration( new Integer( ((Number)getJCSpinFieldChangeDuration().getValue()).intValue() * 60 ) );
	gear.setChangePriority( new Integer( ((Number)getJCSpinFieldChangePriority().getValue()).intValue() ) );
	gear.setChangeTriggerNumber( new Integer( ((Number)getJCSpinFieldChangeTriggerNumber().getValue()).intValue() ) );
	
	if( getJTextFieldChangeTriggerOffset().getText() == null || getJTextFieldChangeTriggerOffset().getText().length() <= 0 )
		gear.setChangeTriggerOffset( new Double(0.0) );
	else
		gear.setChangeTriggerOffset( Double.valueOf(getJTextFieldChangeTriggerOffset().getText()) );

	com.cannontech.database.data.device.lm.TimeRefreshGear t = (com.cannontech.database.data.device.lm.TimeRefreshGear)gear;

	t.setShedTime( com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue( getJComboBoxShedTime() ) );

	t.setNumberOfGroups( getJComboBoxNumGroups().getSelectedItem() );

	String sendRateString = (String)(getJComboBoxSendRateDigits().getSelectedItem()) + " " + (String)(getJComboBoxSendRateUnits().getSelectedItem());	
	t.setRefreshRate( com.cannontech.common.util.CtiUtilities.getIntervalSecondsValue( sendRateString ) );
		
	t.setGroupSelectionMethod( StringUtils.removeChars( ' ', getJComboBoxGroupSelection().getSelectedItem().toString() ) );
		
	return t;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJCSpinFieldChangeDuration().addValueListener(this);
	getJCSpinFieldChangePriority().addValueListener(this);
	getJCSpinFieldChangeTriggerNumber().addValueListener(this);
	getJCSpinFieldPercentReduction().addValueListener(this);
	getJCSpinFieldRampOutPercent().addValueListener(this);
	getJCSpinFieldRampInPercent().addValueListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	
	getJComboBoxShedTime().addActionListener(this);
	getJComboBoxNumGroups().addActionListener(this);
	getJComboBoxSendRateDigits().addActionListener(this);
	getJComboBoxSendRateUnits().addActionListener(this);
	getJComboBoxGroupSelection().addActionListener(this);
	getJComboBoxHowToStop().addActionListener(this);
	getJTextFieldChangeTriggerOffset().addCaretListener(this);
	
	// user code end
	getJCheckBoxRampIn().addActionListener(ivjEventHandler);
	getJComboBoxWhenChange().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("TimeRefreshGearPanel");
		setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
		setLayout(new java.awt.GridBagLayout());
		setPreferredSize(new java.awt.Dimension(402, 430));
		setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
		setSize(402, 430);
		setMinimumSize(new java.awt.Dimension(0, 0));

		java.awt.GridBagConstraints constraintsJLabelShedTime = new java.awt.GridBagConstraints();
		constraintsJLabelShedTime.gridx = 0; constraintsJLabelShedTime.gridy = 0;
		constraintsJLabelShedTime.ipadx = 83;
		constraintsJLabelShedTime.insets = new java.awt.Insets(11, 10, 7, 1);
		add(getJLabelShedTime(), constraintsJLabelShedTime);

		java.awt.GridBagConstraints constraintsJComboBoxShedTime = new java.awt.GridBagConstraints();
		constraintsJComboBoxShedTime.gridx = 1; constraintsJComboBoxShedTime.gridy = 0;
		constraintsJComboBoxShedTime.gridwidth = 4;
		constraintsJComboBoxShedTime.weightx = 1.0;
		constraintsJComboBoxShedTime.ipadx = 1;
		constraintsJComboBoxShedTime.insets = new java.awt.Insets(10, 1, 1, 97);
		add(getJComboBoxShedTime(), constraintsJComboBoxShedTime);

		java.awt.GridBagConstraints constraintsJLabelNumGroups = new java.awt.GridBagConstraints();
		constraintsJLabelNumGroups.gridx = 0; constraintsJLabelNumGroups.gridy = 1;
		constraintsJLabelNumGroups.ipadx = 17;
		constraintsJLabelNumGroups.insets = new java.awt.Insets(6, 10, 5, 1);
		add(getJLabelNumGroups(), constraintsJLabelNumGroups);

		java.awt.GridBagConstraints constraintsJComboBoxNumGroups = new java.awt.GridBagConstraints();
		constraintsJComboBoxNumGroups.gridx = 1; constraintsJComboBoxNumGroups.gridy = 1;
		constraintsJComboBoxNumGroups.gridwidth = 4;
		constraintsJComboBoxNumGroups.weightx = 1.0;
		constraintsJComboBoxNumGroups.ipadx = 1;
		constraintsJComboBoxNumGroups.insets = new java.awt.Insets(2, 1, 2, 97);
		add(getJComboBoxNumGroups(), constraintsJComboBoxNumGroups);

		java.awt.GridBagConstraints constraintsJLabelSendRate = new java.awt.GridBagConstraints();
		constraintsJLabelSendRate.gridx = 0; constraintsJLabelSendRate.gridy = 3;
		constraintsJLabelSendRate.ipadx = 8;
		constraintsJLabelSendRate.insets = new java.awt.Insets(7, 8, 5, 1);
		add(getJLabelSendRate(), constraintsJLabelSendRate);

		java.awt.GridBagConstraints constraintsJLabelGroupSelection = new java.awt.GridBagConstraints();
		constraintsJLabelGroupSelection.gridx = 0; constraintsJLabelGroupSelection.gridy = 4;
		constraintsJLabelGroupSelection.ipadx = 12;
		constraintsJLabelGroupSelection.insets = new java.awt.Insets(7, 10, 5, 1);
		add(getJLabelGroupSelection(), constraintsJLabelGroupSelection);

		java.awt.GridBagConstraints constraintsJComboBoxGroupSelection = new java.awt.GridBagConstraints();
		constraintsJComboBoxGroupSelection.gridx = 1; constraintsJComboBoxGroupSelection.gridy = 4;
		constraintsJComboBoxGroupSelection.gridwidth = 4;
		constraintsJComboBoxGroupSelection.weightx = 1.0;
		constraintsJComboBoxGroupSelection.ipadx = 1;
		constraintsJComboBoxGroupSelection.insets = new java.awt.Insets(3, 1, 2, 59);
		add(getJComboBoxGroupSelection(), constraintsJComboBoxGroupSelection);

		java.awt.GridBagConstraints constraintsJLabelHowToStop = new java.awt.GridBagConstraints();
		constraintsJLabelHowToStop.gridx = 0; constraintsJLabelHowToStop.gridy = 8;
		constraintsJLabelHowToStop.ipadx = 4;
		constraintsJLabelHowToStop.insets = new java.awt.Insets(9, 10, 5, 31);
		add(getJLabelHowToStop(), constraintsJLabelHowToStop);

		java.awt.GridBagConstraints constraintsJLabelPercentReduction = new java.awt.GridBagConstraints();
		constraintsJLabelPercentReduction.gridx = 0; constraintsJLabelPercentReduction.gridy = 11;
		constraintsJLabelPercentReduction.gridwidth = 2;
		constraintsJLabelPercentReduction.ipadx = 53;
		constraintsJLabelPercentReduction.ipady = 3;
		constraintsJLabelPercentReduction.insets = new java.awt.Insets(7, 10, 4, 9);
		add(getJLabelPercentReduction(), constraintsJLabelPercentReduction);

		java.awt.GridBagConstraints constraintsJComboBoxHowToStop = new java.awt.GridBagConstraints();
		constraintsJComboBoxHowToStop.gridx = 1; constraintsJComboBoxHowToStop.gridy = 8;
		constraintsJComboBoxHowToStop.gridwidth = 4;
		constraintsJComboBoxHowToStop.weightx = 1.0;
		constraintsJComboBoxHowToStop.ipadx = 1;
		constraintsJComboBoxHowToStop.insets = new java.awt.Insets(4, 1, 3, 59);
		add(getJComboBoxHowToStop(), constraintsJComboBoxHowToStop);

		java.awt.GridBagConstraints constraintsJCSpinFieldPercentReduction = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldPercentReduction.gridx = 2; constraintsJCSpinFieldPercentReduction.gridy = 11;
		constraintsJCSpinFieldPercentReduction.gridwidth = 3;
		constraintsJCSpinFieldPercentReduction.ipadx = 88;
		constraintsJCSpinFieldPercentReduction.ipady = 20;
		constraintsJCSpinFieldPercentReduction.insets = new java.awt.Insets(5, 9, 3, 121);
		add(getJCSpinFieldPercentReduction(), constraintsJCSpinFieldPercentReduction);

		java.awt.GridBagConstraints constraintsJPanelChangeMethod = new java.awt.GridBagConstraints();
		constraintsJPanelChangeMethod.gridx = 0; constraintsJPanelChangeMethod.gridy = 12;
		constraintsJPanelChangeMethod.gridwidth = 5;
		constraintsJPanelChangeMethod.fill = java.awt.GridBagConstraints.VERTICAL;
		constraintsJPanelChangeMethod.weightx = 1.0;
		constraintsJPanelChangeMethod.weighty = 1.0;
		constraintsJPanelChangeMethod.ipadx = 10;
		constraintsJPanelChangeMethod.insets = new java.awt.Insets(3, 7, 8, 55);
		add(getJPanelChangeMethod(), constraintsJPanelChangeMethod);

		java.awt.GridBagConstraints constraintsJComboBoxSendRateDigits = new java.awt.GridBagConstraints();
		constraintsJComboBoxSendRateDigits.gridx = 1; constraintsJComboBoxSendRateDigits.gridy = 3;
		constraintsJComboBoxSendRateDigits.gridwidth = 3;
		constraintsJComboBoxSendRateDigits.weightx = 1.0;
		constraintsJComboBoxSendRateDigits.ipadx = 2;
		constraintsJComboBoxSendRateDigits.insets = new java.awt.Insets(3, 1, 2, 1);
		add(getJComboBoxSendRateDigits(), constraintsJComboBoxSendRateDigits);

		java.awt.GridBagConstraints constraintsJComboBoxSendRateUnits = new java.awt.GridBagConstraints();
		constraintsJComboBoxSendRateUnits.gridx = 4; constraintsJComboBoxSendRateUnits.gridy = 3;
		constraintsJComboBoxSendRateUnits.weightx = 1.0;
		constraintsJComboBoxSendRateUnits.ipadx = 16;
		constraintsJComboBoxSendRateUnits.insets = new java.awt.Insets(3, 1, 2, 59);
		add(getJComboBoxSendRateUnits(), constraintsJComboBoxSendRateUnits);

		java.awt.GridBagConstraints constraintsJComboBoxCycleCountSndType = new java.awt.GridBagConstraints();
		constraintsJComboBoxCycleCountSndType.gridx = 1; constraintsJComboBoxCycleCountSndType.gridy = 2;
		constraintsJComboBoxCycleCountSndType.gridwidth = 4;
		constraintsJComboBoxCycleCountSndType.weightx = 1.0;
		constraintsJComboBoxCycleCountSndType.ipadx = 1;
		constraintsJComboBoxCycleCountSndType.insets = new java.awt.Insets(3, 1, 2, 97);
		add(getJComboBoxCycleCountSndType(), constraintsJComboBoxCycleCountSndType);

		java.awt.GridBagConstraints constraintsJLabelCycleCntSndType = new java.awt.GridBagConstraints();
		constraintsJLabelCycleCntSndType.gridx = 0; constraintsJLabelCycleCntSndType.gridy = 2;
		constraintsJLabelCycleCntSndType.insets = new java.awt.Insets(6, 10, 6, 17);
		add(getJLabelCycleCntSndType(), constraintsJLabelCycleCntSndType);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampOutPercent.gridx = 1; constraintsJCSpinFieldRampOutPercent.gridy = 9;
		constraintsJCSpinFieldRampOutPercent.gridwidth = 2;
		constraintsJCSpinFieldRampOutPercent.insets = new java.awt.Insets(3, 1, 2, 0);
		add(getJCSpinFieldRampOutPercent(), constraintsJCSpinFieldRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercent.gridx = 0; constraintsJLabelRampOutPercent.gridy = 9;
		constraintsJLabelRampOutPercent.ipadx = -57;
		constraintsJLabelRampOutPercent.ipady = -111;
		constraintsJLabelRampOutPercent.insets = new java.awt.Insets(7, 10, 4, 22);
		add(getJLabelRampOutPercent(), constraintsJLabelRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercentSign.gridx = 3; constraintsJLabelRampOutPercentSign.gridy = 9;
		constraintsJLabelRampOutPercentSign.gridwidth = 2;
		constraintsJLabelRampOutPercentSign.ipadx = 10;
		constraintsJLabelRampOutPercentSign.insets = new java.awt.Insets(5, 1, 4, 161);
		add(getJLabelRampOutPercentSign(), constraintsJLabelRampOutPercentSign);

		java.awt.GridBagConstraints constraintsJTextFieldRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampOutInterval.gridx = 1; constraintsJTextFieldRampOutInterval.gridy = 10;
		constraintsJTextFieldRampOutInterval.gridwidth = 2;
		constraintsJTextFieldRampOutInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampOutInterval.weightx = 1.0;
		constraintsJTextFieldRampOutInterval.insets = new java.awt.Insets(3, 1, 4, 0);
		add(getJTextFieldRampOutInterval(), constraintsJTextFieldRampOutInterval);

		java.awt.GridBagConstraints constraintsJLabelRampOutSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutSec.gridx = 3; constraintsJLabelRampOutSec.gridy = 10;
		constraintsJLabelRampOutSec.gridwidth = 2;
		constraintsJLabelRampOutSec.ipadx = 61;
		constraintsJLabelRampOutSec.insets = new java.awt.Insets(5, 1, 6, 98);
		add(getJLabelRampOutSec(), constraintsJLabelRampOutSec);

		java.awt.GridBagConstraints constraintsJLabelRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutInterval.gridx = 0; constraintsJLabelRampOutInterval.gridy = 10;
		constraintsJLabelRampOutInterval.ipadx = -57;
		constraintsJLabelRampOutInterval.ipady = -111;
		constraintsJLabelRampOutInterval.insets = new java.awt.Insets(5, 10, 8, 22);
		add(getJLabelRampOutInterval(), constraintsJLabelRampOutInterval);

		java.awt.GridBagConstraints constraintsJCheckBoxRampIn = new java.awt.GridBagConstraints();
		constraintsJCheckBoxRampIn.gridx = 0; constraintsJCheckBoxRampIn.gridy = 5;
		constraintsJCheckBoxRampIn.ipadx = 53;
		constraintsJCheckBoxRampIn.ipady = -2;
		constraintsJCheckBoxRampIn.insets = new java.awt.Insets(3, 8, 1, 22);
		add(getJCheckBoxRampIn(), constraintsJCheckBoxRampIn);

		java.awt.GridBagConstraints constraintsJLabelRampInInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampInInterval.gridx = 0; constraintsJLabelRampInInterval.gridy = 7;
		constraintsJLabelRampInInterval.insets = new java.awt.Insets(6, 10, 7, 28);
		add(getJLabelRampInInterval(), constraintsJLabelRampInInterval);

		java.awt.GridBagConstraints constraintsJTextFieldRampInInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampInInterval.gridx = 1; constraintsJTextFieldRampInInterval.gridy = 7;
		constraintsJTextFieldRampInInterval.gridwidth = 2;
		constraintsJTextFieldRampInInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampInInterval.weightx = 1.0;
		constraintsJTextFieldRampInInterval.insets = new java.awt.Insets(3, 1, 4, 0);
		add(getJTextFieldRampInInterval(), constraintsJTextFieldRampInInterval);

		java.awt.GridBagConstraints constraintsJLabelRampInSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampInSec.gridx = 3; constraintsJLabelRampInSec.gridy = 7;
		constraintsJLabelRampInSec.gridwidth = 2;
		constraintsJLabelRampInSec.ipadx = 51;
		constraintsJLabelRampInSec.insets = new java.awt.Insets(5, 1, 6, 108);
		add(getJLabelRampInSec(), constraintsJLabelRampInSec);

		java.awt.GridBagConstraints constraintsJLabelRampInPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercentSign.gridx = 3; constraintsJLabelRampInPercentSign.gridy = 6;
		constraintsJLabelRampInPercentSign.gridwidth = 2;
		constraintsJLabelRampInPercentSign.ipadx = 10;
		constraintsJLabelRampInPercentSign.insets = new java.awt.Insets(4, 1, 4, 161);
		add(getJLabelRampInPercentSign(), constraintsJLabelRampInPercentSign);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampInPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampInPercent.gridx = 1; constraintsJCSpinFieldRampInPercent.gridy = 6;
		constraintsJCSpinFieldRampInPercent.gridwidth = 2;
		constraintsJCSpinFieldRampInPercent.insets = new java.awt.Insets(2, 1, 2, 0);
		add(getJCSpinFieldRampInPercent(), constraintsJCSpinFieldRampInPercent);

		java.awt.GridBagConstraints constraintsJLabelRampInPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercent.gridx = 0; constraintsJLabelRampInPercent.gridy = 6;
		constraintsJLabelRampInPercent.insets = new java.awt.Insets(6, 10, 4, 28);
		add(getJLabelRampInPercent(), constraintsJLabelRampInPercent);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	rampItOut(false);
	rampItIn(false);
	
	getJComboBoxWhenChange().setSelectedItem( LMProgramDirectGear.CHANGE_NONE );
	getJLabelSendRate().setText("Refresh/Resend Rate:");
	getJComboBoxShedTime().setSelectedItem("1 hour");
	getJComboBoxSendRateDigits().setSelectedItem("30");
	getJComboBoxSendRateUnits().setSelectedItem("minutes");
		try
	{
		initConnections();
	}
	catch(Exception e)	{ }
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxRampIn_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	rampItIn(getJCheckBoxRampIn().isSelected());
	this.fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxWhenChange_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelChangeDuration().setVisible(false);
	getJCSpinFieldChangeDuration().setVisible(false);
	getJLabelMinutesChDur().setVisible(false);
	
	getJLabelChangePriority().setVisible(false);
	getJCSpinFieldChangePriority().setVisible(false);
	
	getJLabelChangeTriggerNumber().setVisible(false);
	getJCSpinFieldChangeTriggerNumber().setVisible(false);

	getJLabelChangeTriggerOffset().setVisible(false);
	getJTextFieldChangeTriggerOffset().setVisible(false);

	
	if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_NONE )
		 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Manually Only" ) )
	{
		//None
		return;
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_DURATION )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "After a Duration" ) )
	{
		//Duration
		getJLabelChangeDuration().setVisible(true);
		getJCSpinFieldChangeDuration().setVisible(true);
		getJLabelMinutesChDur().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_PRIORITY )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Priority Change" ) )
	{
		//Priority
		getJLabelChangePriority().setVisible(true);
		getJCSpinFieldChangePriority().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_TRIGGER_OFFSET )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Above Trigger" ) )
	{
		//TriggerOffset
		getJLabelChangeTriggerNumber().setVisible(true);
		getJCSpinFieldChangeTriggerNumber().setVisible(true);

		getJLabelChangeTriggerOffset().setVisible(true);
		getJTextFieldChangeTriggerOffset().setVisible(true);
	}
	else
		throw new Error("Unknown LMProgramDirectGear control condition found, the value = " + getJComboBoxWhenChange().getSelectedItem().toString() );


	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		TimeRefreshGearPanel aTimeRefreshGearPanel;
		aTimeRefreshGearPanel = new TimeRefreshGearPanel();
		frame.setContentPane(aTimeRefreshGearPanel);
		frame.setSize(aTimeRefreshGearPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
public void rampItIn(boolean rampOrNotToRamp)
{
	getJLabelRampInInterval().setVisible(rampOrNotToRamp);
	getJLabelRampInPercent().setVisible(rampOrNotToRamp);
	getJLabelRampInPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampInSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampInPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampInInterval().setVisible(rampOrNotToRamp);
}
public void rampItOut(boolean rampOrNotToRamp)
{
	getJLabelRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercent().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampOutSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampOutPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampOutInterval().setVisible(rampOrNotToRamp);
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private void setChangeCondition(String change) 
{
	if( change == null )
		return;

	if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_NONE) )
	{
		getJComboBoxWhenChange().setSelectedItem("Manually Only");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_DURATION) )
	{
		getJComboBoxWhenChange().setSelectedItem("After a Duration");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_PRIORITY) )
	{
		getJComboBoxWhenChange().setSelectedItem("Priority Change");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_TRIGGER_OFFSET) )
	{
		getJComboBoxWhenChange().setSelectedItem("Above Trigger");
	}	
	
}
/**
* @return
*/

/**
* @param box
*/
public void setJComboBoxCycleCountSndType(javax.swing.JComboBox box) 
{
	ivjJComboBoxCycleCountSndType = box;
}
/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
	{
		return;
	}
	else
		gear = (LMProgramDirectGear)o;

	getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getMethodStopType() ) );
	
	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT) == 0)
	{
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
		
	if(gear.getRampInPercent().intValue() != 0 && gear.getRampInInterval().intValue() != 0)
	{
		getJCheckBoxRampIn().setSelected(true);
		getJCSpinFieldRampInPercent().setValue(gear.getRampInPercent());
		getJTextFieldRampInInterval().setText(gear.getRampInInterval().toString());
	}

	getJCSpinFieldPercentReduction().setValue( gear.getPercentReduction() );
	
	setChangeCondition( gear.getChangeCondition() );
	getJCSpinFieldChangeDuration().setValue( new Integer( gear.getChangeDuration().intValue() / 60 ) );
	getJCSpinFieldChangePriority().setValue( gear.getChangePriority() );
	getJCSpinFieldChangeTriggerNumber().setValue( gear.getChangeTriggerNumber() );	
	getJTextFieldChangeTriggerOffset().setText( gear.getChangeTriggerOffset().toString() );

	com.cannontech.database.data.device.lm.TimeRefreshGear t = (com.cannontech.database.data.device.lm.TimeRefreshGear)gear;

	com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
			getJComboBoxShedTime(), t.getShedTime().intValue() );

	getJComboBoxNumGroups().setSelectedItem( t.getNumberOfGroups() );
	
	getJComboBoxCycleCountSndType().setSelectedItem(t.getMethodOptionType());

	com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
			getJComboBoxSendRateDigits(), getJComboBoxSendRateUnits(), t.getRefreshRate().intValue() );
		
	getJComboBoxGroupSelection().setSelectedItem( StringUtils.addCharBetweenWords( ' ', t.getGroupSelectionMethod() ) );
	
	
}
/**
 * valueChanged method comment.
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
/**
 * valueChanging method comment.
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) {}
}

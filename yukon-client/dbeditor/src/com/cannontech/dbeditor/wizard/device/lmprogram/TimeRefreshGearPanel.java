package com.cannontech.dbeditor.wizard.device.lmprogram;

/**
 * Insert the type's description here.
 * Creation date: (8/1/2002 11:56:33 AM)
 * @author: 
 */

import com.cannontech.common.util.StringUtils;
import com.cannontech.database.db.device.lm.LMProgramDirectGear;
 
public class TimeRefreshGearPanel extends GenericGearPanel {
	private javax.swing.JComboBox ivjJComboBoxGroupSelection = null;
	private javax.swing.JComboBox ivjJComboBoxHowToStop = null;
	private javax.swing.JComboBox ivjJComboBoxNumGroups = null;
	private javax.swing.JComboBox ivjJComboBoxShedTime = null;
	private javax.swing.JComboBox ivjJComboBoxWhenChange = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeDuration = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangePriority = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeTriggerNumber = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldPercentReduction = null;
	private javax.swing.JLabel ivjJLabelChangeDuration = null;
	private javax.swing.JLabel ivjJLabelChangePriority = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerOffset = null;
	private javax.swing.JLabel ivjJLabelGroupSelection = null;
	private javax.swing.JLabel ivjJLabelHowToStop = null;
	private javax.swing.JLabel ivjJLabelMinutesChDur = null;
	private javax.swing.JLabel ivjJLabelNumGroups = null;
	private javax.swing.JLabel ivjJLabelPercentReduction = null;
	private javax.swing.JLabel ivjJLabelSendRate = null;
	private javax.swing.JLabel ivjJLabelShedTime = null;
	private javax.swing.JLabel ivjJLabelWhenChange = null;
	private javax.swing.JPanel ivjJPanelChangeMethod = null;
	private javax.swing.JTextField ivjJTextFieldChangeTriggerOffset = null;
	private javax.swing.JComboBox ivjJComboBoxSendRateDigits = null;
	private javax.swing.JComboBox ivjJComboBoxSendRateUnits = null;
	private javax.swing.JComboBox ivjJComboBoxCycleCountSndType = null;
	private javax.swing.JLabel ivjJLabelCycleCntSndType = null;
	private javax.swing.JCheckBox ivjJCheckBoxRampIn = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampInPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampInInterval = null;
	private javax.swing.JLabel ivjJLabelRampInPercent = null;
	private javax.swing.JLabel ivjJLabelRampInPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampInSec = null;
	private javax.swing.JLabel ivjJLabelRampOutInterval = null;
	private javax.swing.JLabel ivjJLabelRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampOutPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampOutSec = null;
	private javax.swing.JTextField ivjJTextFieldRampInInterval = null;
	private javax.swing.JTextField ivjJTextFieldRampOutInterval = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == TimeRefreshGearPanel.this.getJCheckBoxRampIn()) 
				connEtoC1(e);
		};
	};
/**
 * TimeRefreshGearPanel constructor comment.
 */
public TimeRefreshGearPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJComboBoxWhenChange()) 
		connEtoC1(e);
	if (e.getSource() == getJComboBoxShedTime()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxNumGroups()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxSendRateDigits() || e.getSource() == getJComboBoxSendRateUnits()) 
		connEtoC7(e);
	if (e.getSource() == getJComboBoxGroupSelection()) 
		connEtoC8(e);
	if (e.getSource() == getJComboBoxHowToStop()) 
		connEtoC10(e);
	if (e.getSource() == getJComboBoxCycleCountSndType()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}
	/**
	 * Called when the caret position is updated.
	 *
	 * @param e the caret event
	 */
public void caretUpdate(javax.swing.event.CaretEvent e) {}
/**
 * connEtoC1:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxRampIn_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JComboBoxHowToStop.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		rampItOut(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out") == 0);
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JComboBoxShedTime.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JComboBoxNumGroups.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JComboBoxSendRate.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (JComboBoxGroupSelection.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G68FD32B0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8FDCD5D536BF154D2346A6FBB173281C99D2EB28A8492867ABEB2C2C312297CD56D0D1D1C345CC3CE24AA926ECBC40650FA98A0A4A8552AB20220308080ACA050286C645889A9596D76EC12EDE6E3DDE8EFAAD4A5F5AFB1F3D4E9F4E7DC3B63F0F43673338F7FF77DAFB2F35765A7B6C3D4FBE678A05ABA33252B38A85A1BDCB107F36258BC2CA0CA05C7374095BB996776B2C9CC175378A28C0C85F
	E0024FC448CB6A484E499784EFAE24E7C33AF2E7F64EF2783EC44872D6DE81DFFC54A3C05EFF5DF2F72B7FFADC9D3C1E9C1A7E55708278DC881486D8E9C4D6CEBFD03EF04BF0110CB7C2FA217C1DD0FA06A054DCC9F81EAAA9D261D1B21F89720A00E6D11E0707CB65FCAF24894FB8781CF4A5631D861F7328F6676F2817793AAF0994E65F3FA2A30F5425AA1FD36984A65BA8FFDA042B29A3B205B473BE78ECE8BFF6647DDE57C0F52F5569F4B9A531373F5AF6D83459A517277A247D9B2B47D6ED93CF58FB45EA
	47005B63BA62318E6C5851E99F90770BFD9EF1307FC3516AE937BAC507A0C4CFA0B6E4166652724186C8B7CCA458B93544EF33A13DG529593399D8F67B548FA069D0B9492A7967834A3E4A253FF52C4450E180E0D191D13C879EF52F6A1F2C910DF8A9853E577F7DC1770C9DC17DF1A89EF9C241301042BB8EEABA6F89124EB00DA2E62BA3E37166B58756DFF8BE907F7E5AC7221E34FD5CC37502B949D63BF3AA547CCE3672DCE527EB3A0AF99E88E10656A2C1CC6209E20929A3337F42C074FDD0725A6574000
	4B394B6D5E6D30F9BEF659C487FC5F3183F2E4EC3F586B725884014565425AAA83FDB8F92F5646A4A1E65BE7820F23287DB7881234ADA34B403618C7AD99E365B2A22ED6EC0B3B1A786D2F34ED274377F459578C1FCB71425FA8B8EB2B7F20B8C9D7C0DE68EF381F3B96F2DD5ACC93047CCDCD99B9863A045FD51F11729B396FC4AA3AB09FBFFA1078388670B6A09B50B050F820E9115C47C26766C0BEEE05FE60F1DA9D9DC3075DD60F34FB486E30099E595742F77EFCEDC4F29B0DDA0E79A5F2333A0D92EE5AED
	6817044835997132BFD2D5FEE1F5FF68336E7CEBC64646C2EC43825AA7AA2E5137ED89456B2E51376DC4B3EF5BE6480B84E27C7114FF41357AF21E23F869357AF20E9673F22AA0EF9C90EB5F41AEB2BE4E06F47EF5B05683B58275G8D830D3B0E3771C71D9B036CC76D2A76E53226834B60D374CA9EEB2BF3D032BAFB4503D60F5DFA58A18E8AB2CF5E816257439A394587C86C75C29D9F0ACE51E3156CAEA714EE9D90A1188699CF490182426391E9AE99C521028137404BADBFG71A9B82C035281374DAA098A
	874B7F47819293A72C8721C4A8G3EA7DEC77C353A160CF35170BD76BA6E2B084F89D6918563DB94774B5587964367C7905C22E3470EE6FBAFD1436AB945E3742DDAF23DEB0F62FD7265AE9EFB4DF9578BD50F6EB20CBDC2F322D89C95DE2F0F3D2C4D244C066B79B574225A2ED17683BD35C799472C52572EBE63BAB27D64B17FAE7C1244E8B75865858A3F1E7B7859839696FB3B2D03A20F36CFBD90A822CD71B863FD7AA0391608A7C42754AC3AC5278D3E8C4AED7D7C41F9CA9C7639B0C6DE22B899171AA0D0
	86917F4B418206C3996A286679FF2379D6C972588F8FC9E207A8C9F66791C5BE7DB3224B20E6489B14ED4D6FA636C6030DB3016251568BBFDB220A27B6176B58103B137494B9AE3F22575F9460B75D405BFFF9B10907CACC2F22E9A57F9A332F36A3B2E75226CAFC5C65338EFF6DBE3ABA1E26F625E3BA1926DB50CEF7F117E05C17FE8CE2F5DCC06B78B1ECB2A296835FF5790E61B1DD46B1FCE117F18C0F6B729F2361DDC6B14A72FE5DC566AE2E13CED54CCF6AA263DD2F4B6994E947C391014D01DF6EA4F658
	1DF669B33B6D08A8F5583F91E10EF183095D86BA263A617B189B78F8F8321C0F07955FDCA3CC7F3A54F03E94FE554E0C84B9D6D3EFD046C32653D51F133EA4BA4481F0D413EB48A9B17CBABADE4B78E0A6457ED272ABA2DB392F29DF6CBD365B655D8F5702D6E71515DAD34DBE5AC5CF1F4BB3A05AAA0FDACFD82B2DA725EA5A9A553BE8769E72FD1DE5430677ADC653762A235A323F5E25AB344DF729BB579DDCD743474326C3442E7C49B03F87EA184C470835DF10FCBEC64883E1134B61E0CD82F99113093F37
	EEAED47930F3B2DBDFA9F1D678E5BEE9FB7178108817E4B248FCA41E625755AF976B728EDA9DC34A753A7C4B797069D00DCF8CDF56ED5C96255D242F9E4372AD5D5982396E32B2D96CC4DBC919EE0FFDG06F3B2604A6B3C216F546B3CE430032C899B2233F25A01186CEF7FC9ECB5EC0E9BC99966923E8E6C8719902008E8D6CEE2B473091772F55472754DC6440ED26CF198G4EB171B96447796A7522ED304EB0EE89CD3B11159FF723FEEE6D7D0A141B8A38B005376D655D6A71FF5760202B57CE27B632FFDB
	8F29E31AE11F9CFA87BE7B6C1EC118E75BC4AFEF234EC3C4D7B27711E1594F577D63BDE164DCEE8FDD21724BEB53C99A0F1D2EA618FE35C0B3B7E117BFE897CF8A5C8F5F6DD52FB727ADDA17B15F079F8A27B07B6B26A8FE988FEBB92653CE6FDE61072E1D696C505EBBE25D7C8C3DD612752FB4052FC99B1710780C07F4AAD06ECDD9B9ECFE3C3BE4016C9F8BE0DDC02C8F3DEDD67721F1B7316B6ED478E46349B5A535E4FC9D7568415B42EBFD9FBE4FEC4460EDB1E1C9232CE76C8D930406536F982E2BC39795
	E6445E445AE076CDCADB74EC3EAAC782125731356A781E1ED869B33E9BE3D8991DB17A786E6E2163BD60E3E2F8FCBFF428C0955F30660665409198BD705A77D5A69BA76474B9DFE571F1C2606362E5D652A661D0E68CD0ACD0921069E6DEC76E57815723FB3CFE5623C95F6967B295D0F67D4D7E67CAED105F236311A09D2A4358BAAD3610445B781B59BAEDA7622FD23C749685E771391746ADC90F07BC6FD4BE67E9A9512FC3BBEF5556675625195C4191F2ABF469B01D9C0B57778F1670FECAE252DBBDF89266
	93BBF66075D46EFBF54539729891F5ABDFBF3DF2180C41C91096EE4B4AA9822A836A82120042EF636D775957C66313367DFC8DCE4A9C1D553951C674188AE54F4472E33E4ED345E03B4B6E14B07E2CBD643A6472580F581D9C6B23D82F4BC3A7C28C3B526AFB0E96E9B51E235DE0B51E2345D87D2FB326D9FD4D61581AA07BFBE2E3BC58178A44304FA8E61A86FE1E4631BA01E08D106EC2EC0D19E08EC80FC14CCB31F0C8C7A376E98941E6C1BAE59A0F3D5F97923F8937433C822881288B488B94869483948FB4
	9B28688E68BFC0BDC0A1C01300E6822582957E96E4013A01C200A201E6GA5831926435C8728854886948A94B51D571FC66B0F05F48A5002BB33F22A005A009CC0E3012200E201D200965C8579C06DC0EE20F1C051C0F1C029C079F7E76554G3583396FE6F304F170998D9487148A14BF83F8E6707A5B164425EB7B8C31D1BFAE90BF901D0D468C62BB72C96CA71F5C46E459871C0F78A17E7640EBB5625FA2839D0CA8B5C8BEC21132AE33D5BA4C14659BF4FA057950B36437A3F192ABA12350C3CDA406C8DC94
	6A4AADB5281F44D037C17DFAA2714B5A766E91ED3B5C001F0C81BBFD144557082B654FEDC05B85B62F5C20625BC46B8BECAF994F1686691BD5237063BF644FA5AAEC2520DCAB543CF9BE4AD8E70011F9E0498FE8D7C26F82ED81AA5761D9863C64DA3FB608B2674965E68A77ADA36D6606A1D89C249712E62BE41573DE14080FC72CEFBF318E08F21BAE91CE174C13F976C82E26CD823F26EEAFD6DFD35BE748FDDA7E744A1FE3E7A8F1A86FA39D76FDAD91FA0D2FA5593D24AD86DDC31EDED1FF3D486BAD42BC65
	4A58AA0983448CF91DC665A52B875668FA79F729BC4B73A53F26577F3EC21D0D4CDF3C182E2769D36843F73FA7EB962B43FE44C9D6B21F4335EC86394EEC21572D88789EB3034F311D5F136B2F43FA4AB584837E38FB885F795F73B5E185249B00ECC05EFB587C1C49FDC463556D917BC48F2C1059D604DC0F0DDE8B6301BF699E4E7F1ED923D39767BDC02F077977423568DE3E5E3C71A4096FBED8FF00599DEE31D7C83E1770DEEC66FAF5C23A9FA894A892E8663D3C1E3E92A28B02760121812A952B67FBFA0D
	2D799D5873BB4E9B371B14352F4DFAD8F4F4740BB6324265BE7C2FE5248D7641AC69308BE6DECA361CBF453588E5BF999A7850639AF28F4AF9FF7EEC31DAD649167373372A6A05105CEF15305EFB338BB10FCAF5087256834BDF777EF2F559DA96390C6B0EAA3A3538CEF63ABAA417DB4E9BF6AF43BCD88375C2DB6C97EDC37266866359EB57682F9441FD63AE21799DEE3BF32FDDF458C69444786E7A0616C3570DCD7D309691BF9625FE170D1733E11D46966E0AE6189FCA5C175B3EDEE644F340C9D8E41E762A
	E2B5CF5329DE07C837C7BA1C364ED3EE742D23EAA95A4E18D4ACB24FE36F1B353611D56327C312ECA272B54CD75AC94B42726BDB0AFC64F7C097E0BC9377523ABAE184D2D7C56F67412A8C6B0A30646B4B6A90FBD91E6D68D2FD5E88795A13B49E346BE0B9EFF535560ED6A797E779D519C5A3F45473BCD83EC8D78628A7175F3DF239AECF65861967263E2211BEC7C646F34976A54665487BF1FB162A7792EC3FE3E3D5686F78DEC3DE01BAFF3C1CBF837347EEB2120F477CCB37984927E07E5CB2A3F9E1A64F7F
	F048A83F9073A78E9915DF097913579849B7E03E2D52A83F9D739FAAB6AA5F0679CF2ED467FBE7327CA878E47B0456956AFD4269F2FE92FC26E199372FB22AA37FBE1EBF49EC14DF0179679A6657E37E75E6A39B5BB03F285848069E4CBF5FD0DE427CBE43B68C457C5BB479636F13E388731FD9E598C3181FDAEE141F02792E9243983A1F673FECD8FFA166F7986ADF09795F9A66B7E07E0765C67EEB477CCEC3F95B7DFC9D5BCE77A53C108EC56C0AE6020D07F494E2429E3E861E0A58BCFAFD4EFDG5611C0AB
	85B6E7A6987FE363C05B77967844ADBB98735DAEA759366B7C347D6BDDED2D9FFE72711ECFBA59BEDB44C975BEDB7DBB553E77599E107759644F302CF2F9EFE87EE9FED6E7AC644DF8004FD1B675107D965C2BA14A6C58712147EE5BEDBD52C6E7D3EC2F2663F42EACBF6781BCDFC44B2C0B0558853245727BB55EB5FC3FB76A6A89C2DB48EE4373C5091D6BB206E36573AD314A3EE04AC73764A44412F3E1579CD37CD5E2A67EF20AA7AD6833E61847B8498D794A3A1A5AAACB5D661AF53E7D6DB02FB276F75B1E
	3D1D0A43853EAFFC2C185BEBF9B0AB276BC102DD266917245CC3702F9ABED97E831A7C82D9DE49FFDB13CFFC35DAA33FD153EF32D4724C2F8F2C66FE1D73C0346038394667392D088719BFE7481F15334A0419FF3ACA76EB7D0062170AA5253E7DDAD3E529D9476264B5FAEDB3585323D7B26633612544E7E45EBA67C19EDFC79C3E768265D90E6C6F6682AEDB773F7C9C595D1BB866C06C7EAD9C1B045856F20EA5A0767D90478A9F6258930835A176429A3E87B98631ABAA89C6668253904B267D1A2C61ACF15C
	366F372E91D477A30EB90ED49F6DA53BF655FD646ACF0C4429G0F2B4596DEDF9716735ABA9F3E25B3CEA6F7590ADCB9264645717E77138F6879BEC8AFF8982EBF8FF3DDE72F6277B49A90FB524C3188447E474CF5B17D1EE3C9E66E238644BEAD66180458B4B377D194E23FAC636565BF42EDDBDDD9EAEC9B4E44186C2BA85B7288AFEF99E2A1082D2D6075CEC56C6A920E154E62586AF214C56CC2ACEFAAE2D390CBC56CFB0C274AC7B97653B2DEC74F23FC5DF5041EAD68F3B9A536B67B0E7AE9866447A14F14
	E642A301312C6FFD69A4FD4F729861DF3E2759206F2A4717A572A7A181E488154BFD3E903E1381726D39F367B2DECB89D9E3743BBC76EFC0A72B0338385DB5E8E7EBA22663CE6AAB52B67D0F71BD77DC974142A09D7D985F7F3E4DC676FC8EDA0F0E3C7387E03B476596BD52A906523B3E727EC641699FF6CEEF658F146B9A351CFCFE12DE3B629EE377D052917FBB4593D438FCFE922F1F49105776876E3B6DEE52F723A19D8B1484B48728B49E66FB715C17A631C688F02F225365EE93CF40D2D6595AE7E37EC3
	DF2A2F7D791797E5F03D74F6354533313EABDEFF964CDDBCDA9F313A6F4C61571B18DB2F95267EA4B55D57FD5B31F21DD17267745F17D11C792840C3FC14GF9E9C0250FE765548135G75BC4EFD747231AA66A392D23BA4495A5BCF6FDEF387119B4A8ACCB6D318ED67ACD55BA6C1F921C063012201E6BCBEF2BF17493596F039F860C981921ED0F88B61FB6593DAD9A6B7F3133A3E8660E9873281F90146BE612B3E0736F039886009811A2962CD006F2906756DACD757E7FAB2AB2788288A28912873C9DF751D
	B724166B873EE120F1C01300267A14FB8665E201A791E8360AB7B7815AAF41C84F1756286B2B811EE620AE195711602B3E08CA7DFD5490608D1379A38D6488CD83BCCE17178469B4C35D6663FD4C85CF49FD63A9052F6EA9DF3AAD37F03996831EEE405CC0E3D4F972738AAB54B605C3FE9450F419EF16C1D90412811F83147F3412DF7174C8DEB6CEDD311F0CC775CF33F1EAB96213A96ED661EC7C9ACB678AA49D89F936E778BD0C3F2D527B5F1298789EC89D703468783AA16D869A132877C76208F3FF61AA1E
	A89F75CD87FC16AEAF9952F3920D5A788EB3EF2B7CE7E1AE84D47F2C4257762C2FB67E13D99D37BD40A78105820D870A76A95709E36A8C19A7DE451B825F0567E0CD7B1C5E97F70E70C5A570B448FC6D4F997B428638D717B79652914F9979E2C2195A269860198914A073269A5441645EC0B9539FC7729481D6855478C73DCDA51A7ABAA13F9FE8D8669BE7D096132B2A507BE29270CE1579E38D6488A582BEDB17171B8463D21211AF2EAB5157D183FC4DB2EFD712F19D8E40C3F4F9E1100EB42CE3BD0E51538C
	4A0B83AC89A8ADC96F370BB5FEDB70FCD60E85286EF94657723CAF3F7D37C62E9B785CC0E3E47EF01FF267211ED1B24FF4956FAC781E8CB467F93D1E634A74BE4CFF817A588B0C2F7E85E39F36815E234B13A09D2A43583C7881F2DCCC1E73DE5CDCA6685624FBE1C2DBD9E633DB9D2EA3E530AA2D32EC2ADD476EC16A577B2C3CB749EDA5F99E736C82BE0FA93DEE22507C0754F4BE07566BBCDE56AD6585E58E15F0F0E3A653EBFF8929CF350C296EA07F1BDC740185E9106EA5707BEBAEA20F773E5894191F29
	F411F5BEB97F8A76583F21C777BA0051F9C4FE9E6034003EB7894A770BCE1F6979FAFFA41F617F1756416C5F6D76FDAF3355EDFCAF73D33771391883EE7F77988F39FD1FDD363955E71759DC75E5F27BD14E1F6DA677658D57C0B0A35D87F170696123E22F54E9BD0272EFFDC35A3662C598A701ECC0DE2031AF72F96E3663A4364913B0A36738FBECC7C49ECCDC07E20FEFDF2D7284FEE6E63D075C2FBC6C12A457GA91F63B59E525E124BCDC106ED21EB8E0F7DC83F44D8E5FC27071E7F917BA84C76B94369DE
	CFA458B575C53E7779F1B741E2A11D04582FA81686695CE40EE552732905102EC26C362F78DEEAA3E2BD857CAC52B844A665F159C908256671FA27A236F3A1AFAF9631A72B79792452BFF16C993A47D48369C644FA367272BA913B0EE27D1076A2163F0D6BB286316EED3C5EF044DE58426DC8C6AC2B114B4EC14C3C1F571B7FE70E59767372AA90BB3A0E5BA1A1361F6ED904C2BA9C314BB3F9F9D108BDCF3169100EC3EC1F096B120058AFCC3C5ED425BC3AFF5678922CF9DE625867A6DE078D31C99473C2BA94
	31F9D93C0EB0448EE471BAA291FBFD087BAA8D3119D6AE3BA005E30507F93D96443EBE4C4B2BC36C0B6D5CD7E3904BD8CB79A09D09584F5B89B68D523390FB01E24910CEC36C23FF72BACC7F47313BAA39ECA7E2F9340D7AA16DC54CC331B1109E0F58983A9F938D69D844B653BD2EC4C827A256769E567BB2472650B66F0434833132926E3F9044424B38FEE10859AB517708D5533D49B4C8973E42311756F23ECA441CF4FF518B69F108B5507EB1895253901BCE77AC63A01D045887340E5CD46803299C3BE355
	C87DDE24D8A370F4A15F41CAEE1B833109AB89968269F1081576D3DDA0BD8DB1E7BF37A3AE152FFD2E5CCF66C3163FC05F876A878A850A840A83CA83323C1A15538664858AFB154B5DCC65E2A0BD8BE8B6D061EB90F3C01DC092D098D08C50AC20592FF1397F7CA05A601AC86A257325D73573A24BDFFC2F43A28D72C2E50C58427545B9280ABF4DCF39D8772B7AB9601D063A7333DFCBF4383FE71F669BE07364CFF2BDA667G546768546749968550FB2120BDA7475A3E0446FF61EC385E4C66716020D8A3243B
	912B20FB5AEEC807A2F6824F390EC74CCAE5D3A0ED7AAB47DAA9DF91242B904B207B410D106EC22C03E28EC80FC1ECBDADAF9C52B1081DC74B1BC95208BD0A3A4CC66CF2AA5B7CBA58713A164F8D6931085DCA7BD3842427A236004A46C2BA8931C3E53C0EB444842AF34B9BE0479B58E71B382C8331F9749EE9882447A166EC66750EC76C56E6BCBB0C983B5FA62441381046B156EEB510EEC953369B116DC6EC85150D02748C445E22E3E3BC24D3917B231917E77A9B0EF9D43688521508DDCA31BAC837A156C2
	6B6D0174B0E23F26650D03F484E26B51369844365172CCEF02EDEFF26CFF4A38EC8DE2EF6C607AB5A336FBA7572F8B3109BBF99DB64496D2FBE3A09D07582598AFC908DDC66B2DFB8BECFB8BB1B377D58FE23514CF02749844FAD83D100EC66CC60A4D0074AC4416B570FA93917B04DE53EA66C0DB4EC17FD12C9B528E44CC2B693585526390FB090E7113A0BD9D31C729FE33A01D0458962CB78D31BD54AFADEF03EDEFF36CC1FA0D14A0BD963195747D9991100EC66CBC0ACD0374AC44FEC54BCB0634696F9C1B
	4BE28852150845E39CB4A0B60D720D0574A444F6517226C2FA96E25B0B39ECB2E237D1FB6B67425CEBAE472E226DE60374B0E2D7333802F484E2E5340DE2A09D0B58A04592A11D0AD8BC46559C447E171657A6E467F483B16C27144F8D69D04492A8B69E52D1086D4276180A5865545E5C746C1C0AF40EC519F9F97508E5208F5A903B0F6AB29E52B1087D8EFDB093B1F6CF0F141700585BE5DC3FD4443E223A4C01F4E18647DE2365D5C23A99318B5187DD084DC4DFB9903B124D33A0BD8B082D87BF9FA6777812
	A1ED4A4C4E2984EA846A84F2G05G0581C582CD870A87CA8192CC2093D085D0BDD09B90DB0BFDF00A1C2376F5DFCEBE38C197119E2B7A19154CEFFD2FA35F79B670BAF2493744B69156FF6418A1430A3E254F4174758D0A38DEFD775BFC44DA87795DC736FFB2F92976FE69BDF48D598336B90064F3005D46E7FE0769BAF2BC70C5A36F4D5D5AFB2BDB3EA7179016D7FC48781CEEB8DDE7A6C09929C06CBE6C6F3F8AF49FD6CD7CBEAC19275073A1D959B93F113F33BAAE206B56AA406B019876E09E2F570618F9
	A137A9AC0B6B32FF21BFDD32E49DF2644F69A047F5A1F933A0DD1E4E1E9FE0F518B652FE8EF8CA96775B6B1B346D3000BE3BDA188DBAE4F35DAE584AF5EB4F66F2F7ED557A3B0B6ED3B17E6D5B38FD43595C1641ED017C4A6DB172EB9414437769D89D0B28CED3811F01FA3E7ECFECCF44F66F673ADBF238AE5F6E8F6457AC15DF5BF234FE6D49517B75D23A16F3G6E4D617E3117EB7DFA1A0EAF91109F1543F53BBB136B1600F2F3B235FE7DD6D07CBAE862766566F2DB2EB785726BBC833FF2DF56C3B97CEC92
	2B7F46A12D5E3F23EB70E660EB4F65FA1FEB62FA0764F23DEFB3E975FEB9DD513BB60B6B9D05FABB328269BD5FCFBCA46432B1D5090715A768359870592867DF2C3CDE4BBC0E3DF798E3F99E57654461C071B0DF958F43733471B08E52AECDBC1CC7779946839EB90F7B473CD66B570DF4AD9D877989489355EEBC5E4D20FB8F8B5E81FD5F613CEF37EB7DDDC05D446CB97C4FC03E4D73635BB628E31E4637AFD5727A3B307E0AF55A7A371361DF0E218B565167952CDE5D738AD732BD8FA8E39C16F3C5096FE7AE
	E2685CEC9A704EC47EFD95DABF7650F963EC48976673766CFDAF107DE6C199EF747657C0B947D46D3DC4382F5C78790BE7E91FEEG7E1679BC3EBEE273C9C807A0F6E79977DF946A98D299A86672D4BA444F5746DC8A2487B57DF60F45379F3FE2FBB9A0E3DA406B4F70DBFFCEA09FC1B9B78A6CB9AED67F792B0C5B7C17F42D59G7CAD8BF89BF6ECB57667B1BA26CB4097023CFFD8C1826B304BC39FB8E24F723C0C6736A301EFBAD09A50023CEC7A3CA613BBE899798C5000851F8182DE728CD083FC36EB647E
	6E438EF67E2C9FF825BC5E2E27E93F0800F4D49E577756155A780C236B15F848CFC21E4D7D4673110F683ED461C2189BAE646DF4FEFF20D8A6F3ADBE46F7011C83E8291C8ED9289F5F6DCE655988767CCA7390FBD3167C5C42306ED991AD9316A33267E0E8B99F5B1DC312B858548FDCBC3FEB373E1EF60F5D6531CB27D87E56030675F0A62CE76083332E1CCE0F7D48915173495040E1FA2FC6FE962B53875F277214D4669B4AA34F6DA9A78E7D719E6ADCE12423CE81F9FC7FD0F91E6533FE5149D8D95E72C17A
	1C87BF652AE44B4FF9246E571FC1A771B8965A0E6537D7684F30137C884C9FACB6120F417C7DA34E60137C19187FC519D1798918BFF644B386A4BF95734F99F1061E641B96717CB9E67D99FF12DF047907B69855DF0579A9A31EB1A0790D18BFDE52BFE3C172BB97717ED6DBE6FCDD5D477AB4708DA36FF9E53E47517114BF92F8E310FF270FE7GBB685AB19178E6AF62FD79A2F320B1FF1EEA4C2D48570E7975107E535C39F3153E6CADB39EC74731FDC060EF4F67FA7618591A4DAE11259C63BBC9B1BA27C1BE
	F331312FB6317D8A600BC05E234546E3653914B796786211F7179F3FFEC175B595E4676497F07E4BFD78F58A553981785A8B38DFD37C7AF51E201D830794E87D9AD6204CA565B9308F3F32BD0788600FC2BDD34C3E6D4A22FE08875EA464FFF81531DDFF2257497C45304EDF4CF94BFD446DCE2AC7A77075AF66BE104A8245D60E204CA74296EBFD908969359A9FAC571DE75EC0ED09813E690B79756F45A62EC7AA6AEC511DF16E266F74E57C7F554CEDACDD4275FE38B950750D6BECB8D705F252B5FA1FDB6C3B
	BD2E20B6F4010CEDC9F0E343B8601B043A1E9750470B0411F3A63E560A03F272B43AEE7151FFBE26FAA6GFFB26A393842B8A6575379EFE1A168D8485BE5C1B1573D2D104B6FA956368BFD04C75663DA9FFA5C451EFD02B246E0B9DF7B6947DE6A33E8601D067C371835F194CB7BEFB2644FAE64FE5D95B086969944G77EB45526C1C0BE1DCAC47336F1F949B7B2A0F5AD3837C8DCB392F1EE357GC8CB08D9F6E25B83467CB5019E9FE27A5E3AB350F863CF5FB8A873DDCD9C2CAE776D5377699AA381E41217F2
	FFDD9B70BAD2200A4342E5591A7AAB176963B03A4C387DE7327B83405F380C7B66AE767E97C8FB1771B6EEAD53367157D4EE9264C7A34F491D467D6CE236778CFC3311F766CEED2CE64DD7FC3F21A1106F8B7C785E32BCBB67BC0D6DE20531DE5F51FED5857C0D4BB116AB34FAD5AED07AD049EAE39FEE2677B09CD006974B497033D6AB21EB35C9409B0D7CA9BA7FE63018007C6465BCA65A7C7AA5B300DF0A0A74FD285B471AD722F5D7GFFCD9157AF29445807F368DA389B785C483B25D46B430F72949FDEDE
	EA6C43A9745E4BF8A8A3924B3959CF1F79DF2A63AC60CDC47EE5A5DA9FD6D15D961833F30A4C5C072F849C07167B71E10BD9FFADFA4447B874929D07BA013F474C756B72E34FF1EA4FD8608DC7DD5B0B830D814BD5E3408C33F68C08B76B47005F7B98837ECC7BF2927027222E534C46F64D22E3C3E9B12CDF0BB96F6D3A58FD044DDDA03F87F9367B989B7E4946E1601B043C976A468667C2E5ECF8A560386C2F7D62208E1746A74F6BF4FF0B6A1EGFC49284F849F3A5F4A6E5516E467D415F05E57F43ADF32C8
	513DAB603836540F6EDDA57AEB4A0DFE6269FE9ACFB610F11770F11D1D93A07A0EAF61B1E68E98E3FC7EE824534C92FD0CA57A0831B4F67F1668027A24D2FD9614C27FAC655813E5DC4766D2FEDD0EA14BEE3E36AFB7AE7FA2EA2F9BE406CBF9DB3C63E71ED8CE7BE7A47046E05DB7513A93A11DD24A7D730C5FF84B8C50E6256F6A470B29BE569DF1346ECA602FFB175F7B9B9876FD8FCF9A8EFC8F6F3BE1633320678D0FBC8B9ABAECFC9674E743745AA61F85E5582543A49E0EF86C36AE648BC76CF344FEC94B
	A458E7F61B540F78C42A9741DBC4D2A1472F21FA1D24D897FFBF1E8A7BDC46EE9AA67BFEE0F23F8B5F3DB7F51876E33B43A13F9F0F72581D0322047E38136AE8F7DBD5FA5F0B98511B45DB7E92A55EF6F51F4959F4D646255D96A170337F3E65A7FF956C336CCCFF7A0ADF797B4125CAB917652D545B22BC7B3DE97336AACB6D66F5B2EFD2DE30F5B27E1A05BF4C46548F181E2716A9BA0FDF2E686C5E9468F9F5A6F334D811695C9AEC1BB17E082D41684EF85B370D2EADAEAAD16C0AAED5F4FC7303605BA2EF7F
	685A62737DE756960F3C2B687C7A8AC567BF16855796FFD825487CACF3F4ED71C4E670EDF121E9F4ED71E6192ADF2CD6F47C58B4BA9DAFB3852FE3EB5668F4BC35C6558F56AABA5EEE7597AF5B362863A57770686225737019454BEFAB951D1FDB279A77568497AFCDB50A4C856DE7BE5EBE599E0CBD2C6E3ECD0ADC463A60658AB7ABF227CA7C354D26DAD038EE1D6C1FEDF50ADCE5C570F23F5A2A48B53E972C0F186C1D5B1476C92AD74A19D29CFC7DB9BB94390B4A020F457832B30B2D75BB955DBFEED0F4C8
	DC3B42378E75752002E23F7BBD250CCB5FD74A5834B578B2EE79C0115B33A2D0DC33E7F0172D643F2F5383F33AF0A0B60FFE71DD52C90C5EEBFEE448DEBDA4599D64373FA40738DB3EA5AA3FCB64ABFA1F112EE320AC76CE1031340E5C95B0DF852A87E2F57F5C425FDF508ED8A890AB63A98BAFE37A8ADE467CD504B78D5279ABE1DD37124F3B772A76BEBE2A7453661B3702555BEBF82C58D56B7D70157E64B603DC7DB6AEF74FA2C5AE3F7F4C4701437D410E03C67167BBA61713ED9639CD56F610FC22F863CA
	6E637F207BCAE46EBB8931EB715D578908DD006FB1A934F06C92FCBF0997313B69BA0968920D5854B20E952E62587655A80BD858860EC5A3D60E7AA5A3760844B1CBD9361F77D8D9036A4F4CCFBB96ABF2E6331F3E362D1E8D99FE5A72E8506FF3725DEE07683C1EFD8FA9D44AFEBFA85D64798C5D6B16BCC322EFDDDB0A037751C4557CFC255FF1153C730AA842646EDD2648F94D41487956773E9F4137FFDA2E78F601D9A9DB8CCAB7A637D1B5071F3C4A6F7CF8EBA01B04329FEE93AFE37F99DE3B762B667EB7
	3C2B14BB25E9F4734D3FB7852387633D21F9F4734D47D6AABA7E4D226818DF6627CFECA14B139A3F7DF5B46344DA553CFCDF39D2C6EA399F9D36EE12F5E0F283950ADC3F3F7E0C3AB35E72D174552F56A8F53CC76D73951F75E46ED43BC51E5F1E231A470779FB2F1DCE6EA955DCFAC5504F48B3D97A8AEF79BBFD8D00406F6384DF7F69EAC56E259D230B59EDBB03776B040D0A2E7728568221C135236F7E173CC9A9F73EEA3E7EB3FF656A622ADAB5DF3FEBD5B07AB0398BD573754E1DE7BE1739FA947E3C1E4E
	77FD1795D691FCD9F12A75C2624A60E367356D0A5C7D230839CFD5F37CF58D230BF90FEA1E7FF355BCBFB128BE675BDFCBCA037757D455BA6152F23F6B2B6D6A75558B0D0A5CEC7F6BB20D5C6EA6C5AEF614E304582C786B220F15F29E76BB8F51569F7D09A2D7DDFCE67D7511CF95FDDEEFD74A3DFC947D553CDF115B9A54B5CC1E8FF6AAF24BFE047E5ABF0A7EBA7100E2775C4F14B2CE7F88FABCBC8ABD4ABED774587305D2461523381E2618032F6F0AEE253EBB8EA975CD9BC5FBBF7B15A237AD2876E63C2F
	0EE2FEE26AD16AC876BB1F55760D35D6D5DB0E22CF1D572B72C550B140E42F36A9BE3DCFD44A8989CAEF766CF7694AC06F8F6C02B522BA4D64568714537F1E94136B8DA827A7766EB3016EF1C8E5593AF7BA4E23F8088AE7FBA27F39925F098CF929C02C7EABAC232D1F49DD7383651E9B359C336BB45D2769AC575B9BCA711EF23D3D852B383D8E480BAB6776D6F5685F79D3D7111D53D2415A343BA25B70FD81EE4047687242A19DD5E1948BE3AB380D53657CD9AA3EE478BE47D0EE32665D15792B33F3AA006A
	D7B35E3655A3F5E3F2BF9B715E2F9E6015E47ED083B9C263810F56654D00F47CEAA35DFE016F61CA117305B58ADFA1FC2FDCE3A4B7F344BB609A002FDD6635491FDE1D6CD8C8C7683098C84F84CAD0612C0E5BC73C33AB95F8CCEB99DF117CD935D6DBDEA324BBF5D8BF240701462D5557717EEAEE7FA4B9EF2A0AA7963EA72EB5327F328DDCEE361C1FDB29701542771ACAA3394A8AF5ACB483CF9710C3668D2974958B7192178B13F9A2D53C5360FB1CCE167D4E4F74A5E463526EF4581DE2937B05F1ACB35BA2
	6077C52A6F61AB7F756F683A717FC39D672FD2EC7A196A7B72916F0B7C716B2E791756A13F0F006E53A6C13B4F29644FEF7F1AE2796B32F3AC6BB8E66A24E782A15D0C58147574CCB124A544B6523D5BD0C807A3F6BF7EBEC094E21974DC5B9CC8972E6758C43A7FDA8969E644EEAF617AF5A13624141767C02C0A4ACE0374AC446EAD663AA4A336ED8F5A0B5839FB383D797F60589FD167D24422D19787E2EF15F05990443ACB392F46A276C69977D584E2371A39FEB10855627B92E6A2760A197B2A280AE35753
	722AA05D025865E62EDFB7E24F633BAF5C08DDD146FDB59D31BF236CAC443694F35B12917BC5B137EDB6E21F5372F2B7E467D4ED506AC76CEDC42C946D6DC44C5B44756BC76CF134F72AA24B5E51826994441EA963BA8B559CDBCF4FBB95C23A82310B4B394EB508B51A394E4D087D544CF56EC26C4DD5DCE787E2DB711D87A10831774F901D63903B53BCD2678374DEC49270889BB936FB83372390310BB670BAAA91CB459877A2963D0177193108AD2A6065C5A076C585AFAF86319D9BF8F9269A0EFDD0416DAD
	C22C7EB8AF2F8A3173A8568869F644120F73BA3A91FBC5627AC5A17673BEDE5EF444927B386CAC447ECC5F75D531A9BB27E193BF3BA6F678B833CC472CF66033A16FAD9D5AB307A9FDE47CE6F9A51DBE4EAC53F1EE9C14B19E4B39EF3D6F73F24F51B1F0A6704EC27E3D3A73365DF40C90EA33F396547273F34F86FC673D7A1DG8DA0C7089C4E2077AE617B9BF3674E4DC3FB0ACB0D4F4F555231289B787BEB71B94D8A5F76BCC25BBF8CF8A3EA71D972926E5BD854FFFDE9B06F917025FF9AFC5FA3305FA2E4BA
	B5D598374717D49F53E6981BB7F3FDDE21E3D08324DB906B5943F574EE6677E9971123F5729953B77D7ABBA7003E1320CC229F790D81D65F636813E82C2F56AE209F4F27FECF003CE45451424626BA70E19D47583B185AA05DD547FD5B6A77AC763CG3A06C2B9AF4A31416AA8227E8A83BC220E47408CBF4F32BC4546DA600DC7BD593DD6E22FE98B57F30E5FE7B166875033E60B928372337E345E8640DB3670FA179473FA25AD5C4F870EAAFE7EAD4D0F003C28AD5CB6F7D9605FFFE03FE3C1740B473A9EE34F
	62ED05D85B4A31BD6C19BBC837EC65F6DF5CB41A673674F6FB211C5FE85A073D63E78C60633662F352E5CBB4B66C62A39EFFCE8A751F063A6616F3DFA5E3B93B4A35E3207718623B29AC9E3701DD5BF899F6B3AF378D31980AF9A1BD8631F2763C932427ED63FE79B86099F4FFFEC901F24E131F7114E30E56118638291E5B63D86DBBEE4F2757569A60ED2867FA9E5B40FD52DF4F751C34A1D05C2A758C2B576A9989698F8475BBA24C345E984027E33D0F53FAD3A01D06D8FD855725E2BB5765F8C5B04FAE7A3C
	8EEC577721DEDAEFB7607D5BF93D7DECCC07F484E25663DC17386D785C69F1ED2CDCC1FEF2D09EBF679E9F4D3B0174FA4E594E76D866211EC5745DAA39BBE04E33036BF4C79F5729F187774F9BFD0146EDF5FFF36C50569B826983727BC9180D696F9BDFA74D6F133A4782FF788EFF67BC42BAACC2307B23F728FEDF6AB76B7D5E6F5F2C5E67CCF1AAF295FE4F50E965469ED7646E58F3666F8E1F6CD13E7FFED0A9FB335F73F9DA1D7EAAA9F2D3CA7C6CC357ED516CC3670E625ED25189C54F1D2A77279F74F75F
	252EC633DFBE6114A2770F20FD4778CF6E89DE57FB3ED16AC9AD89DEAE79DBC5AE457FF9980D7F67FF2748CD76FF66C4A3F76434A237E614774FAED445507569CAB96F0DC26F388CC56EE2FF77BDB6C35CECD6626609D15CE7F9ADD351F3D916D21F4BDFFDA4EED4752D9F45B98975FB02BE716B0BBA59970CF7C2D9B06F5BD7BFF34E648A7C36F71D465F374FD7649CC11F43E132098B94BFE6AED455BF8A9BEDC159A81F87AB8F5E67EBD4E7A73784658F75FD2160FC5E2AFA8E6B953F673334BE3FCAF58EF07D
	A86FE74DD41D59FBC9F5E66F16D13479C255D939ED9B8274B15558FC6E06E07C6F7BFE76A65519384EA2C507C6FFBA68466B132A33F4260A60F57FF494E7BCAEAFD6743C3DC4296FA1FF672FF4FA1AD54F09D49D9F5DF545FBBCF8DD9BD467553E36A8F5DE586777CCFA0D7ACC7A23FDE7562E672ED2F4382ACC51614AD5014E05AF27FCE12B23A19A227ECF489A74880BC7726E7A5963FF087A3A39B0C348E895327B6933EF2DC256C972901D578DB33E9B007EF3703870BD2AA6C8C28E79F9E9CB2B934A4C5378
	7D1EAB373C907B744141CCA13BD5B0136D1A8E51C3FF09C434B5DBA56BC151C3EA5DAB4CF33B6C64872E3F91DB8553A07D489A14CEB944B62130EF3FF8FCC89C14C45BAE7E5B9B031230340D5434119CD95F58E29D6C27AF1E5959A6181C5681D1929633EC0755F9E4A37B41131DC4FFA1FDD7A3D51A0E27206F922AAFA9259ACBD9F25B22552B76A5CD4D94B2768A6FB8DCD65BDEEB2F6472348A7324FE0FB8586FF2583C6E8FD8C139A7C9AB513789C2F1A5E8BEB1361AAC0BD169E35EDF0E4DCB4E5B8B17DD2F
	C758C8B949CA209AB9489B20BCD01568E98532C2159518F74E8AE94D039FAE6F4E9052E5A3C9A3E4FB5D12105DE79D30BBCE4117E69A6534F95E11C0DB0F55B95867728C00E6961DE6BC8BAB283E743E1A1FDF7366973482C5D492D6B2D7026846A322EBE0632E3EBE3BD34482402FD07C3BD8BC61295671AC76DE32F45F23F38FC39CB48B1983B5B5747FA67A3F167C5FC411CD9459D48B4ECD957C7E69733D5CE69ABC204FA22A8FE97E6A3D500252937FF75F04A79BD2D3403A3DC25689729BB95088798A97FB
	5F56CF22FE7E6E7C30441F12B6F213D07112F297FA31C4E2E1ABFD34B37144669D19FF1C1819A118202B30C7DDA1F849732A903C9E56F3B2A5171B46DD269CA4644CF506A43C5351AF5AAC1D506DF6C84232F20B2B4F722147B5649E346C317676730CC272AB0ED6274D32DF9C944907D5A270F24AEA69909DE2AF59F031FCACCA7DAE9B91E8F11D34C8AECB87D4EB018B2964F1B9GAEE182CDD6373557AE1D0262ECC3CCF2B5293E69D42FC38476A1278405C2BD643D3B103118F66BCF07A40B7C4371BBAC1210
	3E1AB8D96C2D1604A5184FFF5C1EB0AC1687838DA8CB9061821E0F055236B30D681C844D9D594B883CGE31D2496D156827A3FF05411C32416D159A2EC70EA96CF6402C4A6FBE4BF1CCC32676340C7C6538B10071FFDA007E75E518E0EE71FED750AEDD9AA5B32FD58162132AD63EC37ED3731EDB9E71F262D0A2659A3B4A5FF2495A6A3CF261CCF0E19E61E6D2D502158466BA5D334AC541BACE05C8629334A0AEE458A13DCAF29BF5B0795413497D98CF4E9F848EE9D5996B19970609F263E00C27BB175992476
	1DFDFEF3E8DB1F74431D9AAF90CFFDB2E2FCC9774143D3FD86A9AE1FB14253A3A5C28DC7344C334FFF43A3C78672501F92F7E4A93AFD047D199A7B894FFB8692640FECD75DE210BA2B3CF041485EC726CEB9E73B5E17E875A6AD738BC1BD761DC96B1DD5160E9FE969E79ACB7FAD626CAAEDEF63F1664B8AB2661FB4C81DD5B6CD564EDEC93D54BE9FD6E8A31237653FE1C45E26EDCBE285B9861FF576E9FA1771A8914C98EF8A58A6646F5FA2CE9F9AB94653D903D6EFC948E72F33367037044352B43BF2406E2C
	DE276471B7FBC35EA2798D5A963624D7A36C8D5C84A1EF49A6ABE5A63EC3D365910354D96538E7944771E3CC0452FDD8C1C2E3438809F40D846129BC7BAC7D33F6C1C7F4A69DA16B5F2B3DDE5336D726EC052F76A20B25729192399A8942D329113F58A0F5B6F9A1DDD03C40DFE4CC4894500A335826F7941B788BD069CBD1FCD8C1FAD939468B3CE53543FA259F895E8F0CA44EAA5F94E907F75E5E4AF216AC4B2EC59E7E2242DC8D8F7DE33F2D3E6EF43D6C506ECBA205347397E5F0D7684F2CD4F632E7AC9A64
	CF725B6A6CB7525268599DAF60E11D7CDD07AD9BB6883EFFFB3BE3406AF0C8D64731DDCE5BBE6B896B6ED312287C66775B9BC879031CC74EE4F926EA2277D1154C7F83D0CB87885544BFF929B3GG9435GGD0CB818294G94G88G88G68FD32B05544BFF929B3GG9435GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG63B3GGGG
**end of data**/
}


/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private String getChangeCondition( String change )
{

	if( change.equalsIgnoreCase("After a Duration") )
	{
		return LMProgramDirectGear.CHANGE_DURATION;
	}
	else if( change.equalsIgnoreCase("Priority Change") )
	{
		return LMProgramDirectGear.CHANGE_PRIORITY;
	}
	else if( change.equalsIgnoreCase("Above Trigger") )
	{
		return LMProgramDirectGear.CHANGE_TRIGGER_OFFSET;
	}	
	else
		return LMProgramDirectGear.CHANGE_NONE;

}
/**
 * Return the JCheckBoxRampIn property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRampIn() {
	if (ivjJCheckBoxRampIn == null) {
		try {
			ivjJCheckBoxRampIn = new javax.swing.JCheckBox();
			ivjJCheckBoxRampIn.setName("JCheckBoxRampIn");
			ivjJCheckBoxRampIn.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRampIn.setText("Ramp In");
			ivjJCheckBoxRampIn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRampIn;
}
/**
 * Return the JComboBoxCycleCountSndType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JComboBox getJComboBoxCycleCountSndType() {
	if (ivjJComboBoxCycleCountSndType == null) {
		try {
			ivjJComboBoxCycleCountSndType = new javax.swing.JComboBox();
			ivjJComboBoxCycleCountSndType.setName("JComboBoxCycleCountSndType");
			ivjJComboBoxCycleCountSndType.setPreferredSize(new java.awt.Dimension(136, 23));
			ivjJComboBoxCycleCountSndType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxCycleCountSndType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_FIXED_COUNT ) );
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_COUNT_DOWN ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxCycleCountSndType;
}
/**
 * Return the JComboBoxGroupSelection property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGroupSelection() {
	if (ivjJComboBoxGroupSelection == null) {
		try {
			ivjJComboBoxGroupSelection = new javax.swing.JComboBox();
			ivjJComboBoxGroupSelection.setName("JComboBoxGroupSelection");
			ivjJComboBoxGroupSelection.setPreferredSize(new java.awt.Dimension(175, 23));
			ivjJComboBoxGroupSelection.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxGroupSelection.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxGroupSelection.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LAST_CONTROLLED ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_ALWAYS_FIRST_GROUP ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LEAST_CONTROL_TIME ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGroupSelection;
}
/**
 * Return the JComboBoxHowToStop property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHowToStop() {
	if (ivjJComboBoxHowToStop == null) {
		try {
			ivjJComboBoxHowToStop = new javax.swing.JComboBox();
			ivjJComboBoxHowToStop.setName("JComboBoxHowToStop");
			ivjJComboBoxHowToStop.setPreferredSize(new java.awt.Dimension(175, 23));
			ivjJComboBoxHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RAMP_OUT) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHowToStop;
}
/**
 * Return the JComboBoxNumGroups property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxNumGroups() {
	if (ivjJComboBoxNumGroups == null) {
		try {
			ivjJComboBoxNumGroups = new javax.swing.JComboBox();
			ivjJComboBoxNumGroups.setName("JComboBoxNumGroups");
			ivjJComboBoxNumGroups.setPreferredSize(new java.awt.Dimension(137, 23));
			ivjJComboBoxNumGroups.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxNumGroups.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxNumGroups.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJComboBoxNumGroups.addItem("All of Them");
			for( int i = 1; i < 26; i++ )
				ivjJComboBoxNumGroups.addItem( new Integer(i) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxNumGroups;
}
/**
 * Return the JComboBoxSendRate property value.
 * @return javax.swing.JComboBox
 */

/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSendRateDigits() {
	if (ivjJComboBoxSendRateDigits == null) {
		try {
			ivjJComboBoxSendRateDigits = new javax.swing.JComboBox();
			ivjJComboBoxSendRateDigits.setName("JComboBoxSendRateDigits");
			ivjJComboBoxSendRateDigits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxSendRateDigits.setPreferredSize(new java.awt.Dimension(78, 23));
			ivjJComboBoxSendRateDigits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxSendRateDigits.setMinimumSize(new java.awt.Dimension(78, 23));
			ivjJComboBoxSendRateDigits.setEditable(true);
			// user code begin {1}
			NewComboBoxEditor ncb = new NewComboBoxEditor();
			ncb.getJTextField().setDocument( 
				  new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 1000) );
         	ivjJComboBoxSendRateDigits.setEditor( ncb );
			
			ivjJComboBoxSendRateDigits.addItem("0");
			ivjJComboBoxSendRateDigits.addItem("1");
			ivjJComboBoxSendRateDigits.addItem("2");
			ivjJComboBoxSendRateDigits.addItem("5");
			ivjJComboBoxSendRateDigits.addItem("8");
			ivjJComboBoxSendRateDigits.addItem("10");
			ivjJComboBoxSendRateDigits.addItem("15");
			ivjJComboBoxSendRateDigits.addItem("20");
			ivjJComboBoxSendRateDigits.addItem("30");
			ivjJComboBoxSendRateDigits.addItem("45");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSendRateDigits;
}
/**
 * Return the JComboBoxSendRate11 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSendRateUnits() {
	if (ivjJComboBoxSendRateUnits == null) {
		try {
			ivjJComboBoxSendRateUnits = new javax.swing.JComboBox();
			ivjJComboBoxSendRateUnits.setName("JComboBoxSendRateUnits");
			ivjJComboBoxSendRateUnits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxSendRateUnits.setMaximumSize(new java.awt.Dimension(102, 23));
			ivjJComboBoxSendRateUnits.setPreferredSize(new java.awt.Dimension(102, 23));
			ivjJComboBoxSendRateUnits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxSendRateUnits.setMinimumSize(new java.awt.Dimension(102, 23));
			// user code begin {1}
			ivjJComboBoxSendRateUnits.addItem("minutes");
			ivjJComboBoxSendRateUnits.addItem("hours");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSendRateUnits;
}
/**
 * Return the JComboBoxShedTime property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxShedTime() {
	if (ivjJComboBoxShedTime == null) {
		try {
			ivjJComboBoxShedTime = new javax.swing.JComboBox();
			ivjJComboBoxShedTime.setName("JComboBoxShedTime");
			ivjJComboBoxShedTime.setPreferredSize(new java.awt.Dimension(137, 23));
			ivjJComboBoxShedTime.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxShedTime.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxShedTime.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJComboBoxShedTime.addItem("5 minutes");
			ivjJComboBoxShedTime.addItem("7 minutes");
			ivjJComboBoxShedTime.addItem("10 minutes");
			ivjJComboBoxShedTime.addItem("15 minutes");
			ivjJComboBoxShedTime.addItem("20 minutes");
			ivjJComboBoxShedTime.addItem("30 minutes");
			ivjJComboBoxShedTime.addItem("45 minutes");
			ivjJComboBoxShedTime.addItem("1 hour");
			ivjJComboBoxShedTime.addItem("2 hours");
			ivjJComboBoxShedTime.addItem("3 hours");
			ivjJComboBoxShedTime.addItem("4 hours");
			ivjJComboBoxShedTime.addItem("6 hours");
			ivjJComboBoxShedTime.addItem("8 hours");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxShedTime;
}
/**
 * Return the JComboBoxWhenChange property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxWhenChange() {
	if (ivjJComboBoxWhenChange == null) {
		try {
			ivjJComboBoxWhenChange = new javax.swing.JComboBox();
			ivjJComboBoxWhenChange.setName("JComboBoxWhenChange");
			ivjJComboBoxWhenChange.setPreferredSize(new java.awt.Dimension(170, 23));
			ivjJComboBoxWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxWhenChange.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJComboBoxWhenChange.addItem("Manually Only");
			ivjJComboBoxWhenChange.addItem("After a Duration");
			ivjJComboBoxWhenChange.addItem("Priority Change");
			ivjJComboBoxWhenChange.addItem("Above Trigger");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxWhenChange;
}
/**
 * Return the JCSpinFieldChangeDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeDuration() {
	if (ivjJCSpinFieldChangeDuration == null) {
		try {
			ivjJCSpinFieldChangeDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeDuration.setName("JCSpinFieldChangeDuration");
			ivjJCSpinFieldChangeDuration.setPreferredSize(new java.awt.Dimension(45, 20));
			ivjJCSpinFieldChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeDuration.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeDuration.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(3)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeDuration;
}
/**
 * Return the JCSpinFieldChangePriority property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangePriority() {
	if (ivjJCSpinFieldChangePriority == null) {
		try {
			ivjJCSpinFieldChangePriority = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangePriority.setName("JCSpinFieldChangePriority");
			ivjJCSpinFieldChangePriority.setPreferredSize(new java.awt.Dimension(35, 30));
			ivjJCSpinFieldChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangePriority.setMaximumSize(new java.awt.Dimension(40, 30));
			// user code begin {1}
			ivjJCSpinFieldChangePriority.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(9999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangePriority;
}
/**
 * Return the JCSpinFieldChangeTriggerNumber property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeTriggerNumber() {
	if (ivjJCSpinFieldChangeTriggerNumber == null) {
		try {
			ivjJCSpinFieldChangeTriggerNumber = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeTriggerNumber.setName("JCSpinFieldChangeTriggerNumber");
			ivjJCSpinFieldChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeTriggerNumber.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(1), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(1)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeTriggerNumber;
}
/**
 * Return the JCSpinFieldPercentReduction property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldPercentReduction() {
	if (ivjJCSpinFieldPercentReduction == null) {
		try {
			ivjJCSpinFieldPercentReduction = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldPercentReduction.setName("JCSpinFieldPercentReduction");
			ivjJCSpinFieldPercentReduction.setPreferredSize(new java.awt.Dimension(88, 22));
			ivjJCSpinFieldPercentReduction.setMaximumSize(new java.awt.Dimension(88, 22));
			ivjJCSpinFieldPercentReduction.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJCSpinFieldPercentReduction.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(100)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			ivjJCSpinFieldPercentReduction.setValue( new Integer(100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldPercentReduction;
}
/**
 * Return the JCSpinFieldRampInPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampInPercent() {
	if (ivjJCSpinFieldRampInPercent == null) {
		try {
			ivjJCSpinFieldRampInPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampInPercent.setName("JCSpinFieldRampInPercent");
			ivjJCSpinFieldRampInPercent.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampInPercent.setMaximumSize(new java.awt.Dimension(61, 20));
			ivjJCSpinFieldRampInPercent.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJCSpinFieldRampInPercent.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(100), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(100)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampInPercent;
}

/**
 * Return the JCSpinFieldRampOutPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampOutPercent() {
	if (ivjJCSpinFieldRampOutPercent == null) {
		try {
			ivjJCSpinFieldRampOutPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampOutPercent.setName("JCSpinFieldRampOutPercent");
			ivjJCSpinFieldRampOutPercent.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampOutPercent.setMaximumSize(new java.awt.Dimension(61, 20));
			ivjJCSpinFieldRampOutPercent.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJCSpinFieldRampOutPercent.setDataProperties(
						new com.klg.jclass.field.DataProperties(
							new com.klg.jclass.field.validate.JCIntegerValidator(
								null, new Integer(0), new Integer(100), null, true, 
								null, new Integer(1), "#,##0.###;-#,##0.###", false, 
								false, false, null, new Integer(100)), 
								new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
								new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
								new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampOutPercent;
}

/**
 * Return the JLabelChangeDuration property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeDuration() {
	if (ivjJLabelChangeDuration == null) {
		try {
			ivjJLabelChangeDuration = new javax.swing.JLabel();
			ivjJLabelChangeDuration.setName("JLabelChangeDuration");
			ivjJLabelChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeDuration.setText("Change Duration:");
			ivjJLabelChangeDuration.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeDuration.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeDuration;
}
/**
 * Return the JLabelChangePriority property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangePriority() {
	if (ivjJLabelChangePriority == null) {
		try {
			ivjJLabelChangePriority = new javax.swing.JLabel();
			ivjJLabelChangePriority.setName("JLabelChangePriority");
			ivjJLabelChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangePriority.setText("Change Priority:");
			ivjJLabelChangePriority.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangePriority.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangePriority;
}
/**
 * Return the JLabelChangeTriggerNumber property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerNumber() {
	if (ivjJLabelChangeTriggerNumber == null) {
		try {
			ivjJLabelChangeTriggerNumber = new javax.swing.JLabel();
			ivjJLabelChangeTriggerNumber.setName("JLabelChangeTriggerNumber");
			ivjJLabelChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerNumber.setText("Trigger Number:");
			ivjJLabelChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerNumber.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerNumber;
}
/**
 * Return the JLabelChangeTriggerOffset property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerOffset() {
	if (ivjJLabelChangeTriggerOffset == null) {
		try {
			ivjJLabelChangeTriggerOffset = new javax.swing.JLabel();
			ivjJLabelChangeTriggerOffset.setName("JLabelChangeTriggerOffset");
			ivjJLabelChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerOffset.setText("Trigger Offset:");
			ivjJLabelChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerOffset.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerOffset;
}
/**
 * Return the JLabelCycleCntSndType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCycleCntSndType() {
	if (ivjJLabelCycleCntSndType == null) {
		try {
			ivjJLabelCycleCntSndType = new javax.swing.JLabel();
			ivjJLabelCycleCntSndType.setName("JLabelCycleCntSndType");
			ivjJLabelCycleCntSndType.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCycleCntSndType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelCycleCntSndType.setText("Cycle Count Send Type:");
			ivjJLabelCycleCntSndType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCycleCntSndType;
}
/**
 * Return the JLabelGroupSelection property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGroupSelection() {
	if (ivjJLabelGroupSelection == null) {
		try {
			ivjJLabelGroupSelection = new javax.swing.JLabel();
			ivjJLabelGroupSelection.setName("JLabelGroupSelection");
			ivjJLabelGroupSelection.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelGroupSelection.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelGroupSelection.setText("Group Selection Method:");
			ivjJLabelGroupSelection.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGroupSelection;
}
/**
 * Return the JLabelHowToStop property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHowToStop() {
	if (ivjJLabelHowToStop == null) {
		try {
			ivjJLabelHowToStop = new javax.swing.JLabel();
			ivjJLabelHowToStop.setName("JLabelHowToStop");
			ivjJLabelHowToStop.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelHowToStop.setText("How to Stop Control:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHowToStop;
}
/**
 * Return the JLabelMinutesChDur property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutesChDur() {
	if (ivjJLabelMinutesChDur == null) {
		try {
			ivjJLabelMinutesChDur = new javax.swing.JLabel();
			ivjJLabelMinutesChDur.setName("JLabelMinutesChDur");
			ivjJLabelMinutesChDur.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutesChDur.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelMinutesChDur.setText("(min.)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutesChDur;
}
/**
 * Return the JLabelNumGroups property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelNumGroups() {
	if (ivjJLabelNumGroups == null) {
		try {
			ivjJLabelNumGroups = new javax.swing.JLabel();
			ivjJLabelNumGroups.setName("JLabelNumGroups");
			ivjJLabelNumGroups.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelNumGroups.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelNumGroups.setText("# of Groups Each Time:");
			ivjJLabelNumGroups.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelNumGroups;
}
/**
 * Return the JLabelPercentReduction property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPercentReduction() {
	if (ivjJLabelPercentReduction == null) {
		try {
			ivjJLabelPercentReduction = new javax.swing.JLabel();
			ivjJLabelPercentReduction.setName("JLabelPercentReduction");
			ivjJLabelPercentReduction.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPercentReduction.setText("Group Capacity Reduction %:");
			ivjJLabelPercentReduction.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPercentReduction.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPercentReduction;
}
/**
 * Return the JLabelRampInInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInInterval() {
	if (ivjJLabelRampInInterval == null) {
		try {
			ivjJLabelRampInInterval = new javax.swing.JLabel();
			ivjJLabelRampInInterval.setName("JLabelRampInInterval");
			ivjJLabelRampInInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInInterval.setText("Ramp In Interval: ");
			ivjJLabelRampInInterval.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInInterval.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInInterval;
}
/**
 * Return the JLabelRampInPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercent() {
	if (ivjJLabelRampInPercent == null) {
		try {
			ivjJLabelRampInPercent = new javax.swing.JLabel();
			ivjJLabelRampInPercent.setName("JLabelRampInPercent");
			ivjJLabelRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercent.setText("Ramp In Percent: ");
			ivjJLabelRampInPercent.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercent.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercent;
}
/**
 * Return the JLabelRampInPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercentSign() {
	if (ivjJLabelRampInPercentSign == null) {
		try {
			ivjJLabelRampInPercentSign = new javax.swing.JLabel();
			ivjJLabelRampInPercentSign.setName("JLabelRampInPercentSign");
			ivjJLabelRampInPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercentSign;
}
/**
 * Return the JLabelRampInSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInSec() {
	if (ivjJLabelRampInSec == null) {
		try {
			ivjJLabelRampInSec = new javax.swing.JLabel();
			ivjJLabelRampInSec.setName("JLabelRampInSec");
			ivjJLabelRampInSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInSec;
}
/**
 * Return the JLabelRampOutInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutInterval() {
	if (ivjJLabelRampOutInterval == null) {
		try {
			ivjJLabelRampOutInterval = new javax.swing.JLabel();
			ivjJLabelRampOutInterval.setName("JLabelRampOutInterval");
			ivjJLabelRampOutInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutInterval.setText("Ramp Out Interval: ");
			ivjJLabelRampOutInterval.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutInterval.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutInterval;
}
/**
 * Return the JLabelRampOutPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercent() {
	if (ivjJLabelRampOutPercent == null) {
		try {
			ivjJLabelRampOutPercent = new javax.swing.JLabel();
			ivjJLabelRampOutPercent.setName("JLabelRampOutPercent");
			ivjJLabelRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercent.setText("Ramp Out Percent: ");
			ivjJLabelRampOutPercent.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercent.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercent;
}
/**
 * Return the JLabelRampOutPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercentSign() {
	if (ivjJLabelRampOutPercentSign == null) {
		try {
			ivjJLabelRampOutPercentSign = new javax.swing.JLabel();
			ivjJLabelRampOutPercentSign.setName("JLabelRampOutPercentSign");
			ivjJLabelRampOutPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercentSign;
}
/**
 * Return the JLabelRampOutSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutSec() {
	if (ivjJLabelRampOutSec == null) {
		try {
			ivjJLabelRampOutSec = new javax.swing.JLabel();
			ivjJLabelRampOutSec.setName("JLabelRampOutSec");
			ivjJLabelRampOutSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutSec;
}
/**
 * Return the JLabelSendRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSendRate() {
	if (ivjJLabelSendRate == null) {
		try {
			ivjJLabelSendRate = new javax.swing.JLabel();
			ivjJLabelSendRate.setName("JLabelSendRate");
			ivjJLabelSendRate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelSendRate.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelSendRate.setText("Command Resend Rate:");
			ivjJLabelSendRate.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSendRate;
}
/**
 * Return the JLabelShedTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelShedTime() {
	if (ivjJLabelShedTime == null) {
		try {
			ivjJLabelShedTime = new javax.swing.JLabel();
			ivjJLabelShedTime.setName("JLabelShedTime");
			ivjJLabelShedTime.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelShedTime.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelShedTime.setText("Shed Time:");
			ivjJLabelShedTime.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelShedTime;
}
/**
 * Return the JLabelWhenChange property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelWhenChange() {
	if (ivjJLabelWhenChange == null) {
		try {
			ivjJLabelWhenChange = new javax.swing.JLabel();
			ivjJLabelWhenChange.setName("JLabelWhenChange");
			ivjJLabelWhenChange.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelWhenChange.setText("When to Change:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelWhenChange;
}
/**
 * Return the JPanelChangeMethod property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelChangeMethod() {
	if (ivjJPanelChangeMethod == null) {
		try {
			ivjJPanelChangeMethod = new javax.swing.JPanel();
			ivjJPanelChangeMethod.setName("JPanelChangeMethod");
			ivjJPanelChangeMethod.setLayout(new java.awt.GridBagLayout());
			ivjJPanelChangeMethod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanelChangeMethod.setMaximumSize(new java.awt.Dimension(360, 90));
			ivjJPanelChangeMethod.setPreferredSize(new java.awt.Dimension(330, 87));
			ivjJPanelChangeMethod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJPanelChangeMethod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelChangeDuration = new java.awt.GridBagConstraints();
			constraintsJLabelChangeDuration.gridx = 1; constraintsJLabelChangeDuration.gridy = 2;
			constraintsJLabelChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeDuration.ipadx = -5;
			constraintsJLabelChangeDuration.ipady = 6;
			constraintsJLabelChangeDuration.insets = new java.awt.Insets(1, 5, 3, 5);
			getJPanelChangeMethod().add(getJLabelChangeDuration(), constraintsJLabelChangeDuration);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeDuration.gridx = 2; constraintsJCSpinFieldChangeDuration.gridy = 2;
			constraintsJCSpinFieldChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeDuration.ipadx = 34;
			constraintsJCSpinFieldChangeDuration.ipady = 19;
			constraintsJCSpinFieldChangeDuration.insets = new java.awt.Insets(1, 5, 3, 1);
			getJPanelChangeMethod().add(getJCSpinFieldChangeDuration(), constraintsJCSpinFieldChangeDuration);

			java.awt.GridBagConstraints constraintsJLabelMinutesChDur = new java.awt.GridBagConstraints();
			constraintsJLabelMinutesChDur.gridx = 3; constraintsJLabelMinutesChDur.gridy = 2;
			constraintsJLabelMinutesChDur.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutesChDur.ipadx = 5;
			constraintsJLabelMinutesChDur.ipady = -2;
			constraintsJLabelMinutesChDur.insets = new java.awt.Insets(5, 1, 5, 2);
			getJPanelChangeMethod().add(getJLabelMinutesChDur(), constraintsJLabelMinutesChDur);

			java.awt.GridBagConstraints constraintsJLabelChangePriority = new java.awt.GridBagConstraints();
			constraintsJLabelChangePriority.gridx = 4; constraintsJLabelChangePriority.gridy = 2;
			constraintsJLabelChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangePriority.ipadx = -13;
			constraintsJLabelChangePriority.ipady = 6;
			constraintsJLabelChangePriority.insets = new java.awt.Insets(1, 3, 3, 2);
			getJPanelChangeMethod().add(getJLabelChangePriority(), constraintsJLabelChangePriority);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangePriority = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangePriority.gridx = 5; constraintsJCSpinFieldChangePriority.gridy = 2;
			constraintsJCSpinFieldChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangePriority.ipadx = 34;
			constraintsJCSpinFieldChangePriority.ipady = 19;
			constraintsJCSpinFieldChangePriority.insets = new java.awt.Insets(1, 3, 3, 8);
			getJPanelChangeMethod().add(getJCSpinFieldChangePriority(), constraintsJCSpinFieldChangePriority);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerNumber.gridx = 1; constraintsJLabelChangeTriggerNumber.gridy = 3;
			constraintsJLabelChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerNumber.ipadx = -45;
			constraintsJLabelChangeTriggerNumber.ipady = 6;
			constraintsJLabelChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 15, 5);
			getJPanelChangeMethod().add(getJLabelChangeTriggerNumber(), constraintsJLabelChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerOffset.gridx = 4; constraintsJLabelChangeTriggerOffset.gridy = 3;
			constraintsJLabelChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerOffset.ipadx = -63;
			constraintsJLabelChangeTriggerOffset.insets = new java.awt.Insets(8, 3, 17, 12);
			getJPanelChangeMethod().add(getJLabelChangeTriggerOffset(), constraintsJLabelChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJTextFieldChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJTextFieldChangeTriggerOffset.gridx = 5; constraintsJTextFieldChangeTriggerOffset.gridy = 3;
			constraintsJTextFieldChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldChangeTriggerOffset.weightx = 1.0;
			constraintsJTextFieldChangeTriggerOffset.ipadx = 31;
			constraintsJTextFieldChangeTriggerOffset.insets = new java.awt.Insets(4, 3, 15, 8);
			getJPanelChangeMethod().add(getJTextFieldChangeTriggerOffset(), constraintsJTextFieldChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeTriggerNumber.gridx = 2; constraintsJCSpinFieldChangeTriggerNumber.gridy = 3;
			constraintsJCSpinFieldChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeTriggerNumber.ipadx = 34;
			constraintsJCSpinFieldChangeTriggerNumber.ipady = 19;
			constraintsJCSpinFieldChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 15, 1);
			getJPanelChangeMethod().add(getJCSpinFieldChangeTriggerNumber(), constraintsJCSpinFieldChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelWhenChange = new java.awt.GridBagConstraints();
			constraintsJLabelWhenChange.gridx = 1; constraintsJLabelWhenChange.gridy = 1;
			constraintsJLabelWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelWhenChange.ipadx = 3;
			constraintsJLabelWhenChange.ipady = 4;
			constraintsJLabelWhenChange.insets = new java.awt.Insets(0, 5, 4, 5);
			getJPanelChangeMethod().add(getJLabelWhenChange(), constraintsJLabelWhenChange);

			java.awt.GridBagConstraints constraintsJComboBoxWhenChange = new java.awt.GridBagConstraints();
			constraintsJComboBoxWhenChange.gridx = 3; constraintsJComboBoxWhenChange.gridy = 1;
			constraintsJComboBoxWhenChange.gridwidth = 3;
			constraintsJComboBoxWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxWhenChange.weightx = 1.0;
			constraintsJComboBoxWhenChange.ipadx = 170;
			constraintsJComboBoxWhenChange.ipady = 23;
			constraintsJComboBoxWhenChange.insets = new java.awt.Insets(0, 3, 1, 8);
			getJPanelChangeMethod().add(getJComboBoxWhenChange(), constraintsJComboBoxWhenChange);
			// user code begin {1}
			jComboBoxWhenChange_ActionPerformed(null);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelChangeMethod;
}


/**
 * Return the JTextFieldChangeTriggerOffset property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldChangeTriggerOffset() {
	if (ivjJTextFieldChangeTriggerOffset == null) {
		try {
			ivjJTextFieldChangeTriggerOffset = new javax.swing.JTextField();
			ivjJTextFieldChangeTriggerOffset.setName("JTextFieldChangeTriggerOffset");
			ivjJTextFieldChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJTextFieldChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJTextFieldChangeTriggerOffset.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999.9999, 99999.9999, 4) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldChangeTriggerOffset;
}
/**
 * Return the JTextFieldRampInInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampInInterval() {
	if (ivjJTextFieldRampInInterval == null) {
		try {
			ivjJTextFieldRampInInterval = new javax.swing.JTextField();
			ivjJTextFieldRampInInterval.setName("JTextFieldRampInInterval");
			ivjJTextFieldRampInInterval.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampInInterval.setMaximumSize(new java.awt.Dimension(61, 20));
			ivjJTextFieldRampInInterval.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJTextFieldRampInInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampInInterval;
}

/**
 * Return the JTextFieldRampOutInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampOutInterval() {
	if (ivjJTextFieldRampOutInterval == null) {
		try {
			ivjJTextFieldRampOutInterval = new javax.swing.JTextField();
			ivjJTextFieldRampOutInterval.setName("JTextFieldRampOutInterval");
			ivjJTextFieldRampOutInterval.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampOutInterval.setMaximumSize(new java.awt.Dimension(61, 20));
			ivjJTextFieldRampOutInterval.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJTextFieldRampOutInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampOutInterval;
}

/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	com.cannontech.database.db.device.lm.LMProgramDirectGear gear = null;
	
	gear = (LMProgramDirectGear)o;
	
	if( getJComboBoxHowToStop().getSelectedItem() != null )
	{
		gear.setMethodStopType( 
			com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxHowToStop().getSelectedItem().toString() ) );
	}
	
	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT) == 0)
	{
		gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
		gear.setRampOutInterval(new Integer(getJTextFieldRampOutInterval().getText()));
	}
		
	if(getJCheckBoxRampIn().isSelected())
	{
		gear.setRampInPercent(new Integer(((Number)getJCSpinFieldRampInPercent().getValue()).intValue()));
		gear.setRampInInterval(new Integer(getJTextFieldRampInInterval().getText()));
	}

	gear.setMethodOptionType((String)getJComboBoxCycleCountSndType().getSelectedItem());
	
	gear.setPercentReduction( new Integer( ((Number)getJCSpinFieldPercentReduction().getValue()).intValue() ) );
	
	gear.setChangeCondition( getChangeCondition(getJComboBoxWhenChange().getSelectedItem().toString()) );

	gear.setChangeDuration( new Integer( ((Number)getJCSpinFieldChangeDuration().getValue()).intValue() * 60 ) );
	gear.setChangePriority( new Integer( ((Number)getJCSpinFieldChangePriority().getValue()).intValue() ) );
	gear.setChangeTriggerNumber( new Integer( ((Number)getJCSpinFieldChangeTriggerNumber().getValue()).intValue() ) );
	
	if( getJTextFieldChangeTriggerOffset().getText() == null || getJTextFieldChangeTriggerOffset().getText().length() <= 0 )
		gear.setChangeTriggerOffset( new Double(0.0) );
	else
		gear.setChangeTriggerOffset( Double.valueOf(getJTextFieldChangeTriggerOffset().getText()) );

	com.cannontech.database.data.device.lm.TimeRefreshGear t = (com.cannontech.database.data.device.lm.TimeRefreshGear)gear;

	t.setShedTime( com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue( getJComboBoxShedTime() ) );

	t.setNumberOfGroups( getJComboBoxNumGroups().getSelectedItem() );

	String sendRateString = (String)(getJComboBoxSendRateDigits().getSelectedItem()) + " " + (String)(getJComboBoxSendRateUnits().getSelectedItem());	
	t.setRefreshRate( com.cannontech.common.util.CtiUtilities.getIntervalSecondsValue( sendRateString ) );
		
	t.setGroupSelectionMethod( StringUtils.removeChars( ' ', getJComboBoxGroupSelection().getSelectedItem().toString() ) );
		
	return t;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJCSpinFieldChangeDuration().addValueListener(this);
	getJCSpinFieldChangePriority().addValueListener(this);
	getJCSpinFieldChangeTriggerNumber().addValueListener(this);
	getJCSpinFieldPercentReduction().addValueListener(this);
	getJCSpinFieldRampOutPercent().addValueListener(this);
	getJCSpinFieldRampInPercent().addValueListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	
	getJComboBoxShedTime().addActionListener(this);
	getJComboBoxNumGroups().addActionListener(this);
	getJComboBoxSendRateDigits().addActionListener(this);
	getJComboBoxSendRateUnits().addActionListener(this);
	getJComboBoxGroupSelection().addActionListener(this);
	getJComboBoxHowToStop().addActionListener(this);
	getJTextFieldChangeTriggerOffset().addCaretListener(this);
	
	// user code end
	getJCheckBoxRampIn().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("TimeRefreshGearPanel");
		setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
		setLayout(new java.awt.GridBagLayout());
		setPreferredSize(new java.awt.Dimension(402, 430));
		setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
		setSize(402, 430);
		setMinimumSize(new java.awt.Dimension(0, 0));

		java.awt.GridBagConstraints constraintsJLabelShedTime = new java.awt.GridBagConstraints();
		constraintsJLabelShedTime.gridx = 1; constraintsJLabelShedTime.gridy = 1;
		constraintsJLabelShedTime.ipadx = 83;
		constraintsJLabelShedTime.insets = new java.awt.Insets(11, 10, 7, 1);
		add(getJLabelShedTime(), constraintsJLabelShedTime);

		java.awt.GridBagConstraints constraintsJComboBoxShedTime = new java.awt.GridBagConstraints();
		constraintsJComboBoxShedTime.gridx = 2; constraintsJComboBoxShedTime.gridy = 1;
		constraintsJComboBoxShedTime.gridwidth = 3;
		constraintsJComboBoxShedTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxShedTime.weightx = 1.0;
		constraintsJComboBoxShedTime.ipadx = 145;
		constraintsJComboBoxShedTime.ipady = 23;
		constraintsJComboBoxShedTime.insets = new java.awt.Insets(10, 1, 1, 99);
		add(getJComboBoxShedTime(), constraintsJComboBoxShedTime);

		java.awt.GridBagConstraints constraintsJLabelNumGroups = new java.awt.GridBagConstraints();
		constraintsJLabelNumGroups.gridx = 1; constraintsJLabelNumGroups.gridy = 2;
		constraintsJLabelNumGroups.ipadx = 17;
		constraintsJLabelNumGroups.insets = new java.awt.Insets(6, 10, 5, 1);
		add(getJLabelNumGroups(), constraintsJLabelNumGroups);

		java.awt.GridBagConstraints constraintsJComboBoxNumGroups = new java.awt.GridBagConstraints();
		constraintsJComboBoxNumGroups.gridx = 2; constraintsJComboBoxNumGroups.gridy = 2;
		constraintsJComboBoxNumGroups.gridwidth = 3;
		constraintsJComboBoxNumGroups.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxNumGroups.weightx = 1.0;
		constraintsJComboBoxNumGroups.ipadx = 145;
		constraintsJComboBoxNumGroups.ipady = 23;
		constraintsJComboBoxNumGroups.insets = new java.awt.Insets(2, 1, 2, 99);
		add(getJComboBoxNumGroups(), constraintsJComboBoxNumGroups);

		java.awt.GridBagConstraints constraintsJLabelSendRate = new java.awt.GridBagConstraints();
		constraintsJLabelSendRate.gridx = 1; constraintsJLabelSendRate.gridy = 4;
		constraintsJLabelSendRate.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelSendRate.ipadx = 8;
		constraintsJLabelSendRate.insets = new java.awt.Insets(7, 10, 5, 1);
		add(getJLabelSendRate(), constraintsJLabelSendRate);

		java.awt.GridBagConstraints constraintsJLabelGroupSelection = new java.awt.GridBagConstraints();
		constraintsJLabelGroupSelection.gridx = 1; constraintsJLabelGroupSelection.gridy = 5;
		constraintsJLabelGroupSelection.ipadx = 12;
		constraintsJLabelGroupSelection.insets = new java.awt.Insets(7, 10, 6, 1);
		add(getJLabelGroupSelection(), constraintsJLabelGroupSelection);

		java.awt.GridBagConstraints constraintsJComboBoxGroupSelection = new java.awt.GridBagConstraints();
		constraintsJComboBoxGroupSelection.gridx = 2; constraintsJComboBoxGroupSelection.gridy = 5;
		constraintsJComboBoxGroupSelection.gridwidth = 3;
		constraintsJComboBoxGroupSelection.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxGroupSelection.weightx = 1.0;
		constraintsJComboBoxGroupSelection.ipadx = 183;
		constraintsJComboBoxGroupSelection.ipady = 23;
		constraintsJComboBoxGroupSelection.insets = new java.awt.Insets(3, 1, 3, 61);
		add(getJComboBoxGroupSelection(), constraintsJComboBoxGroupSelection);

		java.awt.GridBagConstraints constraintsJLabelHowToStop = new java.awt.GridBagConstraints();
		constraintsJLabelHowToStop.gridx = 1; constraintsJLabelHowToStop.gridy = 6;
		constraintsJLabelHowToStop.ipadx = 4;
		constraintsJLabelHowToStop.insets = new java.awt.Insets(5, 11, 8, 30);
		add(getJLabelHowToStop(), constraintsJLabelHowToStop);

		java.awt.GridBagConstraints constraintsJLabelPercentReduction = new java.awt.GridBagConstraints();
		constraintsJLabelPercentReduction.gridx = 1; constraintsJLabelPercentReduction.gridy = 12;
		constraintsJLabelPercentReduction.gridwidth = 2;
		constraintsJLabelPercentReduction.ipadx = 53;
		constraintsJLabelPercentReduction.ipady = 3;
		constraintsJLabelPercentReduction.insets = new java.awt.Insets(6, 11, 4, 8);
		add(getJLabelPercentReduction(), constraintsJLabelPercentReduction);

		java.awt.GridBagConstraints constraintsJComboBoxHowToStop = new java.awt.GridBagConstraints();
		constraintsJComboBoxHowToStop.gridx = 2; constraintsJComboBoxHowToStop.gridy = 6;
		constraintsJComboBoxHowToStop.gridwidth = 3;
		constraintsJComboBoxHowToStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHowToStop.weightx = 1.0;
		constraintsJComboBoxHowToStop.ipadx = 57;
		constraintsJComboBoxHowToStop.insets = new java.awt.Insets(3, 1, 3, 61);
		add(getJComboBoxHowToStop(), constraintsJComboBoxHowToStop);

		java.awt.GridBagConstraints constraintsJCSpinFieldPercentReduction = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldPercentReduction.gridx = 3; constraintsJCSpinFieldPercentReduction.gridy = 12;
		constraintsJCSpinFieldPercentReduction.gridwidth = 2;
		constraintsJCSpinFieldPercentReduction.ipadx = 88;
		constraintsJCSpinFieldPercentReduction.ipady = 20;
		constraintsJCSpinFieldPercentReduction.insets = new java.awt.Insets(4, 9, 3, 121);
		add(getJCSpinFieldPercentReduction(), constraintsJCSpinFieldPercentReduction);

		java.awt.GridBagConstraints constraintsJPanelChangeMethod = new java.awt.GridBagConstraints();
		constraintsJPanelChangeMethod.gridx = 1; constraintsJPanelChangeMethod.gridy = 13;
		constraintsJPanelChangeMethod.gridwidth = 4;
		constraintsJPanelChangeMethod.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelChangeMethod.weightx = 1.0;
		constraintsJPanelChangeMethod.weighty = 1.0;
		constraintsJPanelChangeMethod.ipadx = 8;
		constraintsJPanelChangeMethod.insets = new java.awt.Insets(3, 5, 8, 59);
		add(getJPanelChangeMethod(), constraintsJPanelChangeMethod);

		java.awt.GridBagConstraints constraintsJComboBoxSendRateDigits = new java.awt.GridBagConstraints();
		constraintsJComboBoxSendRateDigits.gridx = 2; constraintsJComboBoxSendRateDigits.gridy = 4;
		constraintsJComboBoxSendRateDigits.gridwidth = 2;
		constraintsJComboBoxSendRateDigits.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxSendRateDigits.weightx = 1.0;
		constraintsJComboBoxSendRateDigits.ipadx = -12;
		constraintsJComboBoxSendRateDigits.insets = new java.awt.Insets(3, 1, 2, 1);
		add(getJComboBoxSendRateDigits(), constraintsJComboBoxSendRateDigits);

		java.awt.GridBagConstraints constraintsJComboBoxSendRateUnits = new java.awt.GridBagConstraints();
		constraintsJComboBoxSendRateUnits.gridx = 4; constraintsJComboBoxSendRateUnits.gridy = 4;
		constraintsJComboBoxSendRateUnits.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxSendRateUnits.weightx = 1.0;
		constraintsJComboBoxSendRateUnits.ipadx = 12;
		constraintsJComboBoxSendRateUnits.insets = new java.awt.Insets(3, 2, 2, 61);
		add(getJComboBoxSendRateUnits(), constraintsJComboBoxSendRateUnits);

		java.awt.GridBagConstraints constraintsJComboBoxCycleCountSndType = new java.awt.GridBagConstraints();
		constraintsJComboBoxCycleCountSndType.gridx = 2; constraintsJComboBoxCycleCountSndType.gridy = 3;
		constraintsJComboBoxCycleCountSndType.gridwidth = 3;
		constraintsJComboBoxCycleCountSndType.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxCycleCountSndType.weightx = 1.0;
		constraintsJComboBoxCycleCountSndType.ipadx = 19;
		constraintsJComboBoxCycleCountSndType.insets = new java.awt.Insets(3, 1, 2, 99);
		add(getJComboBoxCycleCountSndType(), constraintsJComboBoxCycleCountSndType);

		java.awt.GridBagConstraints constraintsJLabelCycleCntSndType = new java.awt.GridBagConstraints();
		constraintsJLabelCycleCntSndType.gridx = 1; constraintsJLabelCycleCntSndType.gridy = 3;
		constraintsJLabelCycleCntSndType.insets = new java.awt.Insets(6, 10, 6, 17);
		add(getJLabelCycleCntSndType(), constraintsJLabelCycleCntSndType);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampOutPercent.gridx = 2; constraintsJCSpinFieldRampOutPercent.gridy = 7;
		constraintsJCSpinFieldRampOutPercent.gridwidth = 2;
		constraintsJCSpinFieldRampOutPercent.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJCSpinFieldRampOutPercent.ipadx = 6;
		constraintsJCSpinFieldRampOutPercent.insets = new java.awt.Insets(3, 2, 2, 3);
		add(getJCSpinFieldRampOutPercent(), constraintsJCSpinFieldRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercent.gridx = 1; constraintsJLabelRampOutPercent.gridy = 7;
		constraintsJLabelRampOutPercent.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelRampOutPercent.ipadx = -57;
		constraintsJLabelRampOutPercent.ipady = -111;
		constraintsJLabelRampOutPercent.insets = new java.awt.Insets(7, 11, 4, 21);
		add(getJLabelRampOutPercent(), constraintsJLabelRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercentSign.gridx = 4; constraintsJLabelRampOutPercentSign.gridy = 7;
		constraintsJLabelRampOutPercentSign.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelRampOutPercentSign.ipadx = 14;
		constraintsJLabelRampOutPercentSign.insets = new java.awt.Insets(5, 2, 4, 150);
		add(getJLabelRampOutPercentSign(), constraintsJLabelRampOutPercentSign);

		java.awt.GridBagConstraints constraintsJTextFieldRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampOutInterval.gridx = 2; constraintsJTextFieldRampOutInterval.gridy = 8;
		constraintsJTextFieldRampOutInterval.gridwidth = 2;
		constraintsJTextFieldRampOutInterval.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJTextFieldRampOutInterval.weightx = 1.0;
		constraintsJTextFieldRampOutInterval.ipadx = 6;
		constraintsJTextFieldRampOutInterval.insets = new java.awt.Insets(3, 2, 2, 3);
		add(getJTextFieldRampOutInterval(), constraintsJTextFieldRampOutInterval);

		java.awt.GridBagConstraints constraintsJLabelRampOutSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutSec.gridx = 4; constraintsJLabelRampOutSec.gridy = 8;
		constraintsJLabelRampOutSec.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelRampOutSec.ipadx = 65;
		constraintsJLabelRampOutSec.insets = new java.awt.Insets(5, 2, 4, 87);
		add(getJLabelRampOutSec(), constraintsJLabelRampOutSec);

		java.awt.GridBagConstraints constraintsJLabelRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutInterval.gridx = 1; constraintsJLabelRampOutInterval.gridy = 8;
		constraintsJLabelRampOutInterval.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelRampOutInterval.ipadx = -57;
		constraintsJLabelRampOutInterval.ipady = -111;
		constraintsJLabelRampOutInterval.insets = new java.awt.Insets(5, 11, 6, 21);
		add(getJLabelRampOutInterval(), constraintsJLabelRampOutInterval);

		java.awt.GridBagConstraints constraintsJCheckBoxRampIn = new java.awt.GridBagConstraints();
		constraintsJCheckBoxRampIn.gridx = 1; constraintsJCheckBoxRampIn.gridy = 9;
		constraintsJCheckBoxRampIn.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJCheckBoxRampIn.ipadx = 60;
		constraintsJCheckBoxRampIn.ipady = -2;
		constraintsJCheckBoxRampIn.insets = new java.awt.Insets(2, 11, 3, 21);
		add(getJCheckBoxRampIn(), constraintsJCheckBoxRampIn);

		java.awt.GridBagConstraints constraintsJLabelRampInInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampInInterval.gridx = 1; constraintsJLabelRampInInterval.gridy = 11;
		constraintsJLabelRampInInterval.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelRampInInterval.insets = new java.awt.Insets(6, 11, 7, 27);
		add(getJLabelRampInInterval(), constraintsJLabelRampInInterval);

		java.awt.GridBagConstraints constraintsJTextFieldRampInInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampInInterval.gridx = 2; constraintsJTextFieldRampInInterval.gridy = 11;
		constraintsJTextFieldRampInInterval.gridwidth = 2;
		constraintsJTextFieldRampInInterval.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJTextFieldRampInInterval.weightx = 1.0;
		constraintsJTextFieldRampInInterval.ipadx = 6;
		constraintsJTextFieldRampInInterval.insets = new java.awt.Insets(3, 2, 4, 3);
		add(getJTextFieldRampInInterval(), constraintsJTextFieldRampInInterval);

		java.awt.GridBagConstraints constraintsJLabelRampInSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampInSec.gridx = 4; constraintsJLabelRampInSec.gridy = 11;
		constraintsJLabelRampInSec.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelRampInSec.ipadx = 55;
		constraintsJLabelRampInSec.insets = new java.awt.Insets(5, 2, 6, 97);
		add(getJLabelRampInSec(), constraintsJLabelRampInSec);

		java.awt.GridBagConstraints constraintsJLabelRampInPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercentSign.gridx = 4; constraintsJLabelRampInPercentSign.gridy = 10;
		constraintsJLabelRampInPercentSign.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelRampInPercentSign.ipadx = 14;
		constraintsJLabelRampInPercentSign.insets = new java.awt.Insets(6, 2, 4, 150);
		add(getJLabelRampInPercentSign(), constraintsJLabelRampInPercentSign);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampInPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampInPercent.gridx = 2; constraintsJCSpinFieldRampInPercent.gridy = 10;
		constraintsJCSpinFieldRampInPercent.gridwidth = 2;
		constraintsJCSpinFieldRampInPercent.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJCSpinFieldRampInPercent.ipadx = 6;
		constraintsJCSpinFieldRampInPercent.insets = new java.awt.Insets(4, 2, 2, 3);
		add(getJCSpinFieldRampInPercent(), constraintsJCSpinFieldRampInPercent);

		java.awt.GridBagConstraints constraintsJLabelRampInPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercent.gridx = 1; constraintsJLabelRampInPercent.gridy = 10;
		constraintsJLabelRampInPercent.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelRampInPercent.insets = new java.awt.Insets(8, 11, 4, 27);
		add(getJLabelRampInPercent(), constraintsJLabelRampInPercent);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	rampItOut(false);
	rampItIn(false);
	
	getJComboBoxWhenChange().setSelectedItem( LMProgramDirectGear.CHANGE_NONE );
	getJLabelSendRate().setText("Refresh/Resend Rate:");
	getJComboBoxShedTime().setSelectedItem("1 hour");
	getJComboBoxSendRateDigits().setSelectedItem("30");
	getJComboBoxSendRateUnits().setSelectedItem("minutes");
		try
	{
		initConnections();
	}
	catch(Exception e)	{ }
	// user code end
}


/**
 * Comment
 */
public void jCheckBoxRampIn_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	rampItIn(getJCheckBoxRampIn().isSelected());
	this.fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxWhenChange_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelChangeDuration().setVisible(false);
	getJCSpinFieldChangeDuration().setVisible(false);
	getJLabelMinutesChDur().setVisible(false);
	
	getJLabelChangePriority().setVisible(false);
	getJCSpinFieldChangePriority().setVisible(false);
	
	getJLabelChangeTriggerNumber().setVisible(false);
	getJCSpinFieldChangeTriggerNumber().setVisible(false);

	getJLabelChangeTriggerOffset().setVisible(false);
	getJTextFieldChangeTriggerOffset().setVisible(false);

	
	if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_NONE )
		 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Manually Only" ) )
	{
		//None
		return;
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_DURATION )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "After a Duration" ) )
	{
		//Duration
		getJLabelChangeDuration().setVisible(true);
		getJCSpinFieldChangeDuration().setVisible(true);
		getJLabelMinutesChDur().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_PRIORITY )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Priority Change" ) )
	{
		//Priority
		getJLabelChangePriority().setVisible(true);
		getJCSpinFieldChangePriority().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_TRIGGER_OFFSET )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Above Trigger" ) )
	{
		//TriggerOffset
		getJLabelChangeTriggerNumber().setVisible(true);
		getJCSpinFieldChangeTriggerNumber().setVisible(true);

		getJLabelChangeTriggerOffset().setVisible(true);
		getJTextFieldChangeTriggerOffset().setVisible(true);
	}
	else
		throw new Error("Unknown LMProgramDirectGear control condition found, the value = " + getJComboBoxWhenChange().getSelectedItem().toString() );


	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		TimeRefreshGearPanel aTimeRefreshGearPanel;
		aTimeRefreshGearPanel = new TimeRefreshGearPanel();
		frame.setContentPane(aTimeRefreshGearPanel);
		frame.setSize(aTimeRefreshGearPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
public void rampItIn(boolean rampOrNotToRamp)
{
	getJLabelRampInInterval().setVisible(rampOrNotToRamp);
	getJLabelRampInPercent().setVisible(rampOrNotToRamp);
	getJLabelRampInPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampInSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampInPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampInInterval().setVisible(rampOrNotToRamp);
}
public void rampItOut(boolean rampOrNotToRamp)
{
	getJLabelRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercent().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampOutSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampOutPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampOutInterval().setVisible(rampOrNotToRamp);
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private void setChangeCondition(String change) 
{
	if( change == null )
		return;

	if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_NONE) )
	{
		getJComboBoxWhenChange().setSelectedItem("Manually Only");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_DURATION) )
	{
		getJComboBoxWhenChange().setSelectedItem("After a Duration");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_PRIORITY) )
	{
		getJComboBoxWhenChange().setSelectedItem("Priority Change");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_TRIGGER_OFFSET) )
	{
		getJComboBoxWhenChange().setSelectedItem("Above Trigger");
	}	
	
}
/**
* @return
*/

/**
* @param box
*/
public void setJComboBoxCycleCountSndType(javax.swing.JComboBox box) 
{
	ivjJComboBoxCycleCountSndType = box;
}
/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
	{
		return;
	}
	else
		gear = (LMProgramDirectGear)o;

	getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getMethodStopType() ) );
	
	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT) == 0)
	{
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
		
	if(gear.getRampInPercent().intValue() != 0 && gear.getRampInInterval().intValue() != 0)
	{
		getJCheckBoxRampIn().setSelected(true);
		getJCSpinFieldRampInPercent().setValue(gear.getRampInPercent());
		getJTextFieldRampInInterval().setText(gear.getRampInInterval().toString());
	}

	getJCSpinFieldPercentReduction().setValue( gear.getPercentReduction() );
	
	setChangeCondition( gear.getChangeCondition() );
	getJCSpinFieldChangeDuration().setValue( new Integer( gear.getChangeDuration().intValue() / 60 ) );
	getJCSpinFieldChangePriority().setValue( gear.getChangePriority() );
	getJCSpinFieldChangeTriggerNumber().setValue( gear.getChangeTriggerNumber() );	
	getJTextFieldChangeTriggerOffset().setText( gear.getChangeTriggerOffset().toString() );

	com.cannontech.database.data.device.lm.TimeRefreshGear t = (com.cannontech.database.data.device.lm.TimeRefreshGear)gear;

	com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
			getJComboBoxShedTime(), t.getShedTime().intValue() );

	getJComboBoxNumGroups().setSelectedItem( t.getNumberOfGroups() );
	
	getJComboBoxCycleCountSndType().setSelectedItem(t.getMethodOptionType());

	com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
			getJComboBoxSendRateDigits(), getJComboBoxSendRateUnits(), t.getRefreshRate().intValue() );
		
	getJComboBoxGroupSelection().setSelectedItem( StringUtils.addCharBetweenWords( ' ', t.getGroupSelectionMethod() ) );
	
	
}
/**
 * valueChanged method comment.
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
/**
 * valueChanging method comment.
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) {}
}

package com.cannontech.dbeditor.wizard.device.lmgroup;
import javax.swing.JCheckBox;

//import com.cannontech.database.db.device.lm.IlmDefines;

/**
 * This type was created in VisualAge.
 */

public class DCUEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
	public static final String STRING_NEW = "(new)";
	private javax.swing.JLabel ivjJLabelFeedAddress = null;
	private javax.swing.JLabel ivjJLabelPROGAddress = null;
	private javax.swing.JLabel ivjJLabelSPID = null;
	private javax.swing.JLabel ivjJLabelSubAddress = null;
	private javax.swing.JLabel ivjJLabelUserAddress = null;
	private javax.swing.JLabel ivjJLabelZipAddress = null;
	private javax.swing.JPanel ivjJPanelAddress = null;
	private javax.swing.JTextField ivjJTextFieldFeedAddress = null;
	private javax.swing.JTextField ivjJTextFieldProgAddress = null;
	private javax.swing.JTextField ivjJTextFieldSPIDAddress = null;
	private javax.swing.JTextField ivjJTextFieldSubAddress = null;
	private javax.swing.JTextField ivjJTextFieldUserAddress = null;
	private javax.swing.JTextField ivjJTextFieldZipAddress = null;
	private javax.swing.JCheckBox ivjJCheckBoxFEED = null;
	private javax.swing.JCheckBox ivjJCheckBoxGEO = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay1 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay2 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay3 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay4 = null;
	private javax.swing.JCheckBox ivjJCheckBoxSPID = null;
	private javax.swing.JCheckBox ivjJCheckBoxSUB = null;
	private javax.swing.JPanel ivjJPanelAddressUsage = null;
	private javax.swing.JPanel ivjJPanelRelayUsage = null;
	private javax.swing.JCheckBox ivjJCheckBoxSerial = null;
	private javax.swing.JTextField ivjJTextFieldSerialAddress = null;
	private javax.swing.JPanel ivjJPanel1 = null;
	private javax.swing.JCheckBox ivjJCheckBoxSPID1 = null;
	
	private javax.swing.JPanel ivjCodepanel = null;
	private javax.swing.JLabel ivjJLabel1 = null;
	private javax.swing.JTextField ivjJTextField1 = null;
	private javax.swing.JTextField ivjJTextField11 = null;
	private javax.swing.JTextField ivjJTextField12 = null;
	private javax.swing.JLabel ivjTimeoutJLabel = null;
	private javax.swing.JComboBox ivjTimeoutTextField = null;
	private javax.swing.JLabel ivjHyphen1 = null;
	private javax.swing.JLabel ivjHyphen11 = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public DCUEditorPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJCheckBoxSerial()) 
		connEtoC12(e);
	if (e.getSource() == getJCheckBoxRelay4()) 
		connEtoC17(e);
	if (e.getSource() == getJCheckBoxRelay3()) 
		connEtoC18(e);
	if (e.getSource() == getJCheckBoxRelay2()) 
		connEtoC19(e);
	if (e.getSource() == getJCheckBoxRelay1()) 
		connEtoC20(e);
	if (e.getSource() == getJCheckBoxFEED()) 
		connEtoC25(e);
	if (e.getSource() == getJCheckBoxSUB()) 
		connEtoC26(e);
	if (e.getSource() == getJCheckBoxGEO()) 
		connEtoC27(e);
	// user code begin {2}

	// user code end
}

/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldZipAddress()) 
		connEtoC10(e);
	if (e.getSource() == getJTextFieldSPIDAddress()) 
		connEtoC1(e);
	if (e.getSource() == getJTextFieldFeedAddress()) 
		connEtoC8(e);
	if (e.getSource() == getJTextFieldProgAddress()) 
		connEtoC9(e);
	if (e.getSource() == getJTextFieldSerialAddress()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}

/**
 * connEtoC1:  (JTextFieldSPIDAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JTextFieldZipAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (JTextFieldSerialAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC12:  (JCheckBoxSerial.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jCheckBoxSerial_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxSerial_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC13:  (JCheckBoxRelay5.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC14:  (JCheckBoxRelay6.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC15:  (JCheckBoxRelay7.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC15(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC16:  (JCheckBoxRelay8.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC16(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC17:  (JCheckBoxRelay4.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC17(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC18:  (JCheckBoxRelay3.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC18(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC19:  (JCheckBoxRelay2.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC19(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC20:  (JCheckBoxRelay1.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC20(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC21:  (JCheckBoxSPLINTER.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC21(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC22:  (JCheckBoxPROG.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC22(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC23:  (JCheckBoxUSER.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC23(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC24:  (JCheckBoxZIP.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC24(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC25:  (JCheckBoxFEED.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC25(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC26:  (JCheckBoxSUB.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC26(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC27:  (JCheckBoxGEO.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC27(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JTextFieldGeoAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (JTextFieldFeedAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (JTextFieldProgAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * Insert the method's description here.
 * Creation date: (6/5/2002 10:46:06 AM)
 * @return com.cannontech.database.db.device.lm.LMGroupExpressComAddress
 * @param combo javax.swing.JComboBox
 * @param textField javax.swing.JTextField
 * @param type java.lang.String
 */
private com.cannontech.database.db.device.lm.LMGroupExpressComAddress createAddress(javax.swing.JComboBox combo, javax.swing.JTextField textField, String type) 
{
		
	if( textField.getText() == null || textField.getText().length() <= 0 )
	{
		return com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS;
	}
	else
	{
		Object item = combo.getSelectedItem();
		
		if( item != null )
		{
			com.cannontech.database.db.device.lm.LMGroupExpressComAddress address = null;
			
			if( item instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
			{
				address = (com.cannontech.database.db.device.lm.LMGroupExpressComAddress)item;
			}
			else   //a new address is created				
				address = new com.cannontech.database.db.device.lm.LMGroupExpressComAddress(type);
			
			Integer addValue = new Integer(textField.getText());
			
			if( address.equals(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS)
				 || addValue.equals(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS.getAddress()) )				
			{
				
				if( !addValue.equals(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS.getAddress()) )
				{
					//we have a none address selected but have a non zero id typed
					com.cannontech.database.db.device.lm.LMGroupExpressComAddress 
							addressTemp = new com.cannontech.database.db.device.lm.LMGroupExpressComAddress(type);
							
					addressTemp.setAddress( new Integer(textField.getText()) );
					addressTemp.setAddressName( textField.getText() ); //just use the address as the name
					
					return addressTemp;
				}
				else
					return com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS;				
				
			}
			else
			{
				address.setAddress( new Integer(textField.getText()) );

				address.setAddressName( 
						(item.toString().length() <= 0 || item.toString().equalsIgnoreCase(STRING_NEW) 
							? address.getAddress().toString() 
							: item.toString()) );
				
				return address;
			}
			
		}
		else
		{		
			com.cannontech.database.db.device.lm.LMGroupExpressComAddress addressTemp = new com.cannontech.database.db.device.lm.LMGroupExpressComAddress(type);
			addressTemp.setAddress( new Integer(textField.getText()) );
			addressTemp.setAddressName( textField.getText() ); //just use the address as the name

			return addressTemp;
		}

	}

}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G8DF46AAEGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8FD8D4D57ABF9595DBD634502E35FCF7AD592256DAEA2958220D0AB65C28E8170AADAA5A2CE82316B6AAAA5A6E40G03222220E222E2222291022112E122220222122222D2B1B283038E8C4220E8283F771CF35FF37F4C9DE686431F71BCAFF74E673C6FF95F775CF34FBD675C73C7481FBFA6C31716AF883A8CC17CDB2D9304102DBAC17F4C736B918BBA622793E4FF8B0026894F4C5343B594623C
	6F7457658AFB3EB3C0B88A424D3F70574D025FF942016F3C66022893BD4D9077493E53FDC36BE999C0BDD9B4FCD7E18EDC27GC583168CD4E375837D0F979608F8810427083F89695284A1157204CDA910615EA2DFB4DCA7GA5F5911E578B8B4578DA8837G0D838A6FE23C31F04D2656DD3C26CA64EB39BAC8C87E5B5E3449C417ACFD242AEEA65BA2DE0B0497E8C6248B17B75540353A71C847B7ED362E32B6E3F7372D5BEEEE331419CD1DF6DBEF1949FC2C334DDCE66DDA3326E17B16DEDBFF4FDEF3EF1F91
	18B7D106C6E337599A55CD6C7E579483CDD3907CA15CECA3580129A42FF261F789D00D8DEDFFF2F235E81B7F11A0A1FEEC3DD35B83EC4C66F01BE4FB6C370B52FBFAC87A53676608F282042B0018DF010BB7B8714BF4C8746CF867C9E32FC9F23003B837E6CD6D46BDB24F20BCD15F8E4CC55FC2FA5037AB52096EC4886B0F7A698A0FA25E24A7F8A5049B00CCC7516735CB5067669F6F96CCD91727CFF5627360D166EB60D14967065AC56933E979CBB8C14AD0BC4469FB7DF485C055C0ADC003C0F3E8399FBB30
	8C2E6B8F59B75A3A3AEC5D6BFBFAB6D8CD3D5BEDA63395FE2FD983B1A2364B5CE66BB58982AB5B2FCDA9553087493FD7D92E89B15F7689D896476D3ACDE83A6B72748C8D5FC21EEACE8B9253886B15FC8B69A3797656B412EFF10093398E42CF71E553891E52A7616C5E375232C54251F6BFDD4EG66F373943425C1FF0310DB71E3DA1606AD239F6CC92B7B1159507A23E48B4B6387FFA4F9BC8A70A020F020D820942002C14C63B7873EF4154775D066FA3B0D565D7D07FA0C3D768D7D1DD61339D74C6B0239C3
	653596B139459E4B31FC897AD2FE0F627EF4D2B3DF6202FEC82B9CE47951B0A8658B537D03D35D56C14732B1055FC39DFDA63C8659BDCC6778A40A7B4AF0F6EF7D6833C542E3A0CEFF4ACFACA3C59984371CE27CF3F8BA2BA89EA443D9BA87E87AA41CGF191277D447B5BFA0A5431E34E78694200E2009201F23C201E822A7642FBDCF5E2391B4FD1236C7EB25937CF4C042BF9405EEB2C6F6E339B3B5B4CFB0D3D1D46C3D6F31FA072FCF802646BA1055CA77479EE839DDB4C5D66DE233D53568D299B3B4CD018
	7A980F6164B44253EB2631CD1DDDE6D05055A3E03A39A77348BDB176597774180CF6334441628BCE12B2F14CC8AAF3C80014F5AF12DF7F23F5F88B7C9E70423C3A62B44122A11C4073456F64F438EE0342ED36C21D5959C64CB0761E40B21ABCAD8A2E29406FFD81646B05FE3A51C08597419528405BCF97G54F2B1248994F8091F2E69D2F8777A403B8E286597A0F3191F4E9F2868F2F88601AAC741F38854F08570DD692773814A3D8A5283AA72859E20722B7DF421C0B53F7453C581B57979696200DA7DC18F
	10759AF847828D7C8A5E5BC0BD3F067B8EE4998D71C03E57025E6BA0EDA07DEF7CF4DEC0A9C0BD81D8373C550C4FD06D64DB055227CEE8BEC30492825873A07C1F7A99AA1FCE72268470BAA08B108FD090D0A4D082106137D08E016A00ACC0BEC0C1C011C089C0065FC1BCD09D10854887A888A892A88148B08662016A00ACC0BEC0C1C011C089C0066BA19E288E488264839484948914GE4388162016A00ACC0BEC0C1C011C089C00631908FD487E4990B6D22762965692A7745E54ABA0164A94D1B0BD93EA2CE
	6E29A7751922FD602D14A577125CC3D206C839A277D7ADC34A98397F64B7A98F645A2362A365CDADC74AABA9F798A665CE4BA6D2DE491514C3E7F68F7CCA99C74AABA93B5416GD656C9B9A7E5F738F9435FF59732E7C1B36EAA76DC105F64F9A24F2A57EF9CF9493399A47ACB1E612174116707DCF3AE734CF6D2D73843C76A8472BC4709BE11FA05BC3B7C599BFD76F9C66AAE1A36777053AA3FFAE8D9D26731E7E7E52E7A59D92862B50A5799C0E6997E45D978B8CD955E87749D50FCA052FF5A23A1B39768DB
	7177F6713ADB4533D4C30E3C0FAAE46155CEECDAA2DE578DE177CED518F494570A3FC9FB70F3A0725E5EF216E500902977B7BA09DB8934CD7CCD5A0264DE36E97011F766D7626F49AE747DA0DE97F8E8E7061BFC0B006A01B60961C9C087E5717BFF02BCCB972FD34FA20D2FDD444F96E91A7051995246730177D0A0D044D8EC23BCFE32C820ED378D46BEB33656F676C2C34BEC12DAAC0C77519F092D66E366EEFB2D39475CED029FFDE2DB696FBF12B2A036635AED823631E2A9CE5A759B212155477197FE1C46
	F0C8C35EAA4478D7E93C51EE6F6DBC54EFB76FB65B6D1D5D9D127CDB5416BEC51721CF7475E30176114047E4A0FDA07AFAFC10BCDF589EEB30590E7477B4111626582EBBC67B2F8540DF9E08F5CE161E0CEBB47170B49A16622FCDEF9EA27F095C59149126630EA1F5241FC57A120E459915822BFFA68B2C4EA3F58C29C7C99DC71EB3D257AE924B9C292348333C124BD7D379C170B790A88AA899287077FE3ADAA0AB10BFD0985084201C9B212D8A54F2A366E32BBEFA889B31BE18A65A08F6297964F6AE510817
	5B6D6EB3F476F97B6BA1FD4B107112FBB9C9502E7F264A7C4F5608A779C14A7F9C99B6E384FDE34F5461D34E6B042327346B046327346B04D32706FE66AFBE25754C3338D127C8BE5A0EF74B6A102BCF117ED71B2D3B5BCCABB2AEA230712F371A089F1D5D1D76FD1D268E33FDF767C9E8B40C3B115485B326123A409BFE0F3E917BB54797E23F2678644DC2788FCDE9DA63B723FF5F1716F4A3FB6E75B7C97D9AE653AFCF133A49ECB5F7C1C6ED3475F75B99BE1A769FC53CAF1D59BFFF1048166CE6662FB719FA
	4DFDFD9BAD6636A39BEC83251DF6F3D79979375B8E1D570D96E3F70759D4F258F84CD8E6BCEEAF2377242C9E62B711DFCB0B3E78621BA2674313256D1D3D667A6E1EFE31B3DC32F46F528AE6C75D3A13548EFA374E3D95AB58F311A7AC28BEC56D286DBC5659777FA5C33E9450166C9F6D5416DDE62B71C445B9B4211269BF11A9533F629C6ADF49747BD54974FFF98E752FE27AAFED6D1774D71E4BE7220A17014D0B6F20B6ECC5753B4D3D1DC62BD8ACCB0D7429ADE317C6F3EF3B2D374B511875B45ABDF38EEB
	AA7AE13DCAC303F395DF03872B517ED54759733435896A684D1DE62BC969C09B344E6CE5743F68BFC9F8202C6FB8D44BE25A9BC96C30B3D34A4B662C5B14F9D95FED02475C54EF341EE5C6EE9A68213504132C1474F81A0F65E87B445C9BC45BEDDD07EC6476B456570E1055B28D1E5ADB0176FE249B2334F74B261DA3EBAEA870545A954C566B4CAADBF76F59B042D93BE7032736FE49EC7D24CED58EB6EF5AB4426500E870545ACAAC87758BD576B66E5A39E5E46DA59ABC35F7A55A3BE44B202A3EBA50597393
	D4D65AB6EBD4D7DFB1BB6EBB69D0EF4263F8AE8DD9456B4DD7FED4674996336DDC1A321A5931B6CB1DA71B4DE65339B4C4FA177CE379E915AD0D3D360EF3E9CB45D7E8CB2C5DEB245E316EDBD34EECF9FE79CDDA6D1511FD3FB29D9E3F2BAA447C3B6D780FCA1BE903EF6508582C15F5ABC4BB16AE5432E355B93363CB510EA339DAF62CBEE7F6D4E2FBED16169DD5674C0E15229DAFF5E959D1F94E6CD8A55A712220E54717674C0E55229D6D86ADBBD61CB3BB2AC4BB12F3346C28B8D7F62C78CA34232D6D142A
	4EEBEC285F5134E957B933241C3F17BEBEFDC2E94B083537346C2860F6B456286C58337B9C66478AEE477C2383CABB8E54B71EB3B344B67BBF0BD4F9B1E2EDF6ADA3AAF9DE3C182B4A0B116A67E819A10E69F4652BEC9829FE21168D62384EB5A7D47723E1677AF3F7BFD6737BD13E367B276DEBA827CCEA76AED0376E186DA76EDF38D60E6F31277628F51FEDBB5E35EEFCE77CB52B67A7EE373B56DDA17669CED5747E646DF4B73473B124059D577E14EDF3156A33EF0D231DDB17F77D146DADB732C86A6B7E35
	DFCB77305BD8EE68166A03AB2A34F48F3BDD6506EE29BF5BBDDDCB77305BD22EF52F78CAFAAF2DBC72533D9F5D500C7D0B264907FF3277219BEA79985373DDAA3DE7718EF4C36FAA1C1FD11EC63E8B965F64272B82EA3C8967AC641FA171B8E7C11C183151E63532EF029097F9931D8BBCBDDF103EC1DAEEE2EBAEC2604A6273733462F303B07E9A4D78E29EBFB3DFAB3E0A477FDAB33E0147974C500AEF657157EA465BF97C27B33562FDF87CEFB46383F8FC61AC2D78E09E7FFF1A7191BCFEDE01D6FCAC0F7F1D
	E6FCA20FAF1A2D95AF5C0C7157EB466773784FBE550AAF6171E3B56327707271040B780FDC44AF19B3F47CEE4D78EAEEDF0CE6FCA30F5FD3B8F47A9738083F55C57CBFDD44E74C9DBA3E42C57CF7AE62FF61A27ECE9771AF39081FBCEF68782FDC441BDD44DF6DA27EBE97712F3B081FB1FF687875AE623BDC44DF6BA27EE19771EF3B081FDBB4F4FC3D0B78FE9771573B08FF4CC57C87AE6297ADF0964F5EC3BAA1972EFD66237D666EB6B319B4374DFC8257D98853D5F1FB0D56FEE97DC6AE1D53E4154D37E3F8
	3ACEFBAECC360E4C31BB42531F2C4B9448BA8C16A61B3B93ECA4E97674F6F699FBCF108904625A41AB664A578E1A20FEA16B8C83619A8A445E71519B493A1621BA0726DBC8DAA7B2F00DE1B448A6G99EEE169555E42720671D5E7A2DFB004A3EFF14617447992A0AC7C4199DFE096729581CF15D33EE68372B583CF0FD33E1CEC6473851EA02048BFB0BE43B8B9DFB467EB825CBACE62D32667BD9179C681CF20D33E2AC9489781BCF1CE7992B9DFAA70645F6A0CEFCC8E72D582CF03D33E264948E7859EEF27FC
	06A9489788BCE19AFCF137923E5229382EF1B947B6D26C9DA818F3B2F06D5876DC79DA5312C7FF1F25B5BF0C5E575BD87A15372957541953C93ACD001BEE43B66025BA793C5575FDFD3636CE3A24C9FC0ED62549670EB16C6B3409F005A6E71F3D3E5BE49E40E7F1FD9A31152CF992E171F97A4367E4EE38FA8D97FBA4F0DA70466334F15BE45BE8B3196B60F15E4827566D6DB49F97F09D685F26E3FE8D5C06F367CEED162FE58D1BEACC1B64A4EF0245BC0916654D040D0B52D95A5B72B06D5CBF7A6998964531
	BA0EED4FC74C0BE30FF3AC14E3BBE7A0164431E80E1584A3766DCC44DAB976F70E0D66586ED908C5F3AC06E3065B915BD300D88D471E6658G47764DC6AC18E3319CCB60587ECF91AB3A83314B66A0564C31C90508795E016B002FDDC36635E92D83EE2305212C233F332C5F5EC99631996DC65A07E18BFFD91A6F53F953A42D48BBF0FD6FA3C524EE977E844F93D0B990DBEBF883DD03C8F86BG737A936F1FEC133FFFC2810F875207E01D1D1DC91EBD8FC7E144329D31F4BAFB96D45DAFFCEEEF482B9175C65D
	F603D0FDE6C31A561AE31F298DE985A1621A259029EC061785E68D3C0AEB2D4D19685FA8600988C17F1696E979179A0279B2BB8B65F26F7453555D497B9D95DAF2DEF7225CE3DC4E9F30A8AED7562E16535F857D053BD06E82834AD583E63F8B652A1B34740D63F2AB33D1AE9C3094AEF7539E39DC795DCC2E79EE3CFF8159E45C5F730EB456CFF7FE7B8DDC4FEE9C8B573BFE40FD3002FD01F7238F3B74EA9F620004D0747D5609A8178FD8C3A84A5D1E29A5674D650C13D0EEB4E051DCAEC8D34E70E7141B1103
	F20500B57D99651E52149B456546F339B10045F2396FAB55F239777869AA6FC139D3137933891857BD3C6F1C21A5974A65AA2620DC94E07AFBD16E4255DAF2557762BBE15F8A797BB2BC3ED5F3BEB52146FB4577763D6A77E5FD8629FB3CG773F975F17E1E9E49EB93EAFF7419B4A585DE1A56B4144B96B6924CCC27BD28CF753F57834FDA9601C7DA726FB32FEBC68DEDC87FC893DB7E1900E85CA82B20441F39706363D1B6EF2BD7C2601A15643B766F9E2D7DD982E2FF852A33996AE37AB5F93399EAE778F0F
	643C39DC538CCF64C6F33927BC129B4765764E74C4AE1C4BBD6311DC8C17EB1E6509DC82177B27C7F229DC6EC001A7F23977215CF39E4995F33916591E48D5F13967BD12EB60F25FFF6A09DCAB173BEA0EA7F2F6AE17DB68091C8F17CBF55893A260BEE9EDD8306CB7925B33616B8524EE0D380F6D59104571AD940F1361E2FB00363BC8B899621A7F027A03B2547A437E2254992B8A0B7B78B84815294B1ACA0E3D2F9715103E95EDD34A1AE8EB56C85F57D8FF5DEB013C3F1EFFBFDBFBD78557067B314D3AED9B
	36AFCD77E3BD9BC77B4881908E850A86CA844A8D77531582B506E3FDDB2B576A57A86BDBE71D9AE9CDA24B0BA319434B43938EF26ABC6C89D72DF327FE37969944B4FC4271BE4E4F9A1E8DDFB84829ED885734E1CF8566FDAC37619F433461A517B664BE2014E3E564F7FB55E50434ADCB00377A81ACA366F6343369813473D243706C3C46C1CEED67288734722A2F0958C05AB6015C062F3307E7C33D035CBCD5B86E812D676E1B3D245CEBBCF758F296EDFDE18F162DE4EE6BA74334F572C4D779D57A2056FD7D
	F3255633DF8B3C4D8F62FD7D051E58C97AE3BD8F221DFFF250671E1D8F3834B366C12D7B1A10C9ECA0EBB293398D9D1306E7C33F031C5A06460734ECF8115BE0F988ED1813B3BC9B16BA4829ED085234A1A78BED1840EDF8E218B6BC6F52063A882DB2931529D5E6DA01579E01E5661ACAACB323A2504E0BA68F4F4E2B9D6454F6A6C5E865556E8C344170B05A305AE15FB077EC5864A02736417A30168DFFDE0DB6F8BF0C6F4D42EC02A5C0B865E1FCC7DE2FA777947BCB0D364EEE32360F456D48A0E36F365E4E
	0E4EEE44F6D32C4D56CB975B3235732F52B1BF43DF7DF445FF45F42F4CF43EB6781ACC6D35413F4954DE9BFCFD66507B855C1C69EC6DB0332FA38F6D2B82E2D882479AB856190FD8AB477E4DB1BB470E4CC04C07E3099C8B60D857CC4402B9769647A2B8E61B05D8AC4712B8164831238508890FA076DF0E65F32CEFB6E2A59CCB66D8B5477ABFC52C11E3B74EC14C4431A505088DF0ACEF9E41C6C1F88C47D64DA7D88404639E41F23F1E36D505C8BFDDA1D0F5A4625BA9CE5E65E4DC000CE1086D0B222176BBC0
	A269E8612847199C531168160EACA7B899BF98EAAF113914E77CCC7A5E02E2EC6E230DCCB2FAAA463DE61FA1E82CCD5FE16CB28BFC6ECD46C411E7135D36114C95E36F78F71612BAD0639DAF5BE7B2F4813E5F1BA3F1CC36E8BE5DC78E42C1C0617CBEB4EE1357AF312A3CCB5448CBF10F0EAC674F771BD95A4F77BBD9242E693375773619554F7007D985BCCEEA0513553AA4DB44EF0686A2EFB776F6189D6A000906829E67CCBE4F602C1EE0F9FE832DFFF81E7372E2AE126711B01E65C93EF8AD996F18C7AC3D
	3DD972742AF8FA87AA6469D52B649B1D26B751A0CF0F4C53E2777B193DF83FCD6371FE1F2663F981908E810A9A0F777BF03BDC7784152E94273A7FE2D014478A74E520C91EDE4E5F1472C5902E842A1361AC3D5EECC5FAABB03D17774853EB9165FA442B775F1C5937EA22A23D5518B7EFD7E25E0C7E9B664D27F41CBE9A4289C0422318B7D76A5575C2814415BEAA0E7B0B5726C79DED302830C1887B2AB0E6673F15F6D6215FEFE62AF58702FC2818C61406CE24F8D5DCB2048DD1DA3AFFBBC9217BAB54BD41C1
	F7A148170BE954C6B9575D2C0A33C258CBD3772E9C39EE32B0C25CD3A7CB2D5B9F640344B44206509D2D0A1BG6194CD5D1913953AD7E25950E7E15948F98C4B46A47A0D2A9642ADC0764730ECDCD72936F394440DF90C698BF9CC5B4EC84063D4F1C99056BF2EE567BDCABBD7E19EB5E7B814CB10AF955328F9DCDBF7936096D55CA004FDB5F5F7CFD168DE0D3A7F325A21DC02FC2818C614935D7100A72B628CCF403B7989A5466A658559E49CEB00079751B0D98B405EF966750417556D1B3ACDE2A315FD0B7F
	1836BD6F53333DFC98F61A366D0EE430BD4598768945E6E74AB1AF5A361B8B58C59C5351F65C9C401E645805B3102FC207D8BAED475D8AFAF726A166CD31A701676DF444B2E8BB6E7AF436DF9B43AE215897A0FBADCFAF0B36631EC8E77B0EB14C07E24F81F6954732E9BB6E35F439FD17D16C9940667074A651365DD450310FE323A8F6B570DD4F317BE8FB6FA9405E65FEFCC35BFBEBC136BF8D4B4732F9245DEFB51E3075C35EFBBFC178564F1377474A81EB86320A77185D3B5B0F13EF7D6D3D46AEF8556E6E
	B137892D51749B7DFC140D827EF8A08170A2201AE87CEED83C093C6FD94BC61C0B4F4B6B3EA35355F1FB7A0C9DE60C7F533CDC9ECF27CC53D8D6266FDBA0FF4784013E30E829DCC6C7BB16E9B66E9AC35BD0932259386BAC0EA7D03C70C989E763310BA9CE42CD90177BF7ECA7F750B14DA88847F16C161958F6CE6258E09172557C83316AAABAC78442A60EDDDF0532BD9CBBDA0132619C3BD307FCB17F40FAADEE2FBCAF0AE3200F94A3795F9063ACAF7ECB5B972DB14C67EC0EFFC271C1994E72421B62A4BC9A
	62D2E350268B5A514E5627901BD101F65AB9F6D59372C5F06C5F0548974B31B4BA36D572B474B51EC62C01E20D90B6F16C43BD185EG477E7B996D53C0B800E37B96220E2027B14F5E2B1467D98A60B94FC879D4740C33BC3B1236BBAA1FD16759EFA85E780CBA4F0AB2B14F2C90977D8C5A94CC4745AAE321DD954B7BF794EB013015E38B68B844G04FDB9F695ED8F85C2B81CE377D3AC8A42F19C7BFC91AF0F9C5B3B12E0B57F04677C1F08CD4DC2DB2C9C5BCDB1AF887BF2ECB08BED8960588BABD1EFB0477E
	4575C6F02C0C6B4DFF9631CC2E3704E3DB395EEA0E75F13DF59CDBD905FADBB816DA421FA10E1D2AC23D619C7B126B0DF9D6699B511B40315FF33D499CDB46759A1E6369F13D059C3B086B35BE07E5AEDBB1FE6E85387FF3D2B98BFA4ED919BBC35BB3E14F3132B50963D7D0BCCE0633B2B70D62A41C8AF12DF1E8D398ADA391900E651830927DCE641811E2A9904EFD9E31A8BAC72D9842B59C5B494BDC93479EAB463C30F0AC007205C2B81AE3A7B35016899C7BCB865A1242317919E80B7E8544B62FC2DB8AB8
	D6100E3614F26C323DE8CB8D47EA535196DF0E452FC6DB82B9D6DC053604F26C62AA34A502E37E99E8CBAC47B2D623AD099C7BF4895AA23C0858CB2B50164697F1AED7C52B623B9B198B33E64D165ECE5386E3C783FDF333F6EF879D3BA1775D74A236FB2F19C77B0B908E810AFA9167E98CAC4639FB63EE3CC1E870BA29F98EC5FC13B1ED420B2C8C9A6225F99A2D35B8F76F4979283396628763693BC2B12F1A3C371FC9E3631BAC3EC2B1EF0A745D493E39D2FC1BA21E587B28C27E9AC5FC06CC1E797668A274
	AD7551E041FA274569999B9122CF8962356E5A93BA7F0F972533FB91C347DB0ADE023E6ECBF8FFEE7806E04D9036F2ECEA8D5EC75F177039FEF6BEF92E63A12C7F975481C0D5C04DC083C081C021C031C029C085AF235CDBD40E4CB7AE852C81488AB46AE5B637F85C4BEC4EF20FB867174C7FE2F225730361CA5253EA37137483C4DDFA8D1EC2A7F2C84DE2BC3119782445B360A28DB5117CE0369F243667B961A36DACB2A6B5C3509E1FF3B61E07B4C9D64E1C6D2B6AEAEFE2B5E58B589E75ABA2735A5BED5DF6
	4384D296FCD99B9072BB96480BE28F4C2C9DA22D8CD9FA049AC02695887D35436FAB607A897CB19DB75376E3A47C0E1900ED6A5DD5448E3BF9402EFF051C6553C11A4982539FDA65CAFF3A0C6ADED16AEFF9C52D7FBA5A0E33GEEFF85FD0C52395211A55391285291AA53411E29F7D8BD8DF86CAB781CBD7F850ECD27F2EC53F2FC760ADE457214B219B85F83E1DF20E020989E17B1054425C03860B5F8A6DFE3F371D95CE51335460FC9BA649AACDEE3DE154A396F2B6E17F926E32C260EF4998F16AFF95E392B
	035D1FDBE85B3B99FCB33D0677273442557D1117837F571477A7884257AB4AC0A8ED3707G9E4EF568663A52B1D926A3C925C31F60273BDA47F430B2BDFB8F498FF3B7D9DEE292FDAB5F036F1B5C84AC7BED94A3279B91CE46F712E2A43E98789836101629CA8857F0596C054A676616E952F3533DF0A8FF52D57E344A1EDBE2DFCF82EB03FD404B74E45A069A845CB7814B6FFFE83BA08442119C1B7C9516694484AC1B7E19245CD63F8E6F90A0BB106F6B98F7BD0DA3EBAC6244359BE41D073887B49F83A47C1E
	54F14DA2FF35CC4E2ECA0369D847F5E86DE1BC94E159CED725294E67BC318F5055ED6E32F5F736317B79CF5AB76A849A77BA5E4FC9994A7B79AFB21CA0269116C55E85DD46014E2E7EAE3AB1B0CBE7ABED2F05C19A11BC1D9BAB493DE5131A49B4A3E3370914D11AE6EE3E14665D731575FF82ED57A6C3BA423F7139583048D5B912577F6AF2D48E69D40865C85CBF310A7A51592D72638CADDF5540DF77EFAC73D5B45F4859G76FF23EF17E4AA732806289253E07D9BEF607565E9E451B6E99804A339CF9F3874
	A9EB881FD2E4BEB19D7B286D7AB760779B28F7B93505FCBB2B860C596AB3D332B50046B7C0DCB317791E36473DA16C7B865A1A3754152D99C3589A7E065A569BD9FF8F70D82E57C8EDE9A3BEA4222DFF18A5599AC36373A12EA891E5F653F49AA05C1C0836EEADF1E5EB7A90367AA42AED3D036A7087FCCCA256AFC5D9D88FC5F16C4203D88FA5F16C77ADD88F653F09754945F45E388942DEC02301020122F83C9F0DCFF8132D3D729657F4995E4278D9F44C1B4893FFD05E13BA8349CB546BD89F15D39D72F72A
	2775123CFE1AA4B85E03BCE1ED26E3FD748AFD764783153C05E560F1B29CAA4A3C1129DD7FDCC64BFE9548543E054F684BF5247E6969B5371BFBFB4DA6360D39487FAE6DF777G6F60DBD81686286EA088073C05E5E9C231A76DBEF5D91AG69EC9164754E3D195A754E43D4F7927027F2FB4652BA75E112977F413C487CD4FA9E6AE87ED5C1DC6DFFD046C66B199E888FF2ECBD6D1B87C1B864BF685775FB4F66F91EG69ECD2BCA3DDD4C7926029DCEFB6FDEE1EA076A7217DCB67C8765FC6632BA02EB689E56E
	23BE77C0F810E3E5747D9E846110A4343FE24959BC6393125476CF24BA12GCFCD42674CBA4F5333725878D1B69D5BAEF91B35DDF49C1FCE71CA994E4615FEB38F4F212C01384037F1CED28EBD935470DFBFDDB1D0B5D093109D48773FB8176816EC320F5A1073F81BECBD8D66E3E62BECFA90736F697943BB8B7001AC9C9B88396796A174129227EB96837F4B6A1688719A7F6B93744A7C7B9DDD131C8CF1396F7869AA019A00DA01865EC17F7ECB67DE12594850B4DDEF379B5BACF4B5A7BAC796D8CAB07908A2
	56938B48B719C336DEBA9102FD1349D8065FD5C6C17A01C071C0496F30F933CC6E4F5FB8FE4B097E8665F2127DF464DBCEB1DC2B1219CF2CBCAE2EF127BC62B3558832A62005E2F8GFE3F89E571FDDECF5C300314D54D1D2E842C8B3F1FC13ECBEEEDB09EB2DBC9BC62FDD3F3A53C7F10A84662F4F42D13ACDDD57C833D53382CEC07AB2EF374A425DDDABCB7CE1374CB3B0309F3F716AA752B6327DBE6A96D136FB6A5267F6A37E4ACC335A31498D7B90314ED76ED2BC2DC437F2FA97231AE6FE4F63F0312F1BD
	16FD1BD6FC980FFF7900565A3FE89EFF30CACBFE820F7FE733D6FCCAB25609E3C9B140F988B3BF03EB3779F891DF3237999A46A51F1940C7DB47E725C56525C59565CB71D99CF3DC3ED62CEAE23B5335E2B96F0AE30F62B564EFA7F47385B6E6E49070AFE91DA306ED7649647898D16FCBB9D887947EE12CD07BCCC95AC2A7FA1BC5FDC16FCAE31FE107972733B4BFDAA2797E37D51E797E44C1396F3957B526691C5890AF6ACE14592065BB3329ED29647387DFC8765D2CF357BE67E997AE17521B384F310EDA30
	8F6B1A2277D89DD58557067758B8A56349ACC39E53FB2CBE9A042B6FFB727A28E5392B7A085459D89F8501EC58FB6C7DC857E843EF729C3E4D6B23D7CA24FA01EC4F29FE669724C971FB7A4C3D6A7817E6AB6B8DAD1E2DB6A50FEC17BB016F576270AC13FC09FB8F1F352BE7EA45A77178BDDB35567F6A5F47E771228A697EE4D71C7D7D3EF105D4166CAB2534DFA8BC7B34FF3DCACAEF4B9EF2AF5B0D56BEE91E6455FBE89F35375F4C783D3F1278DF7DEC01367E7524B285759522FA51761B56C8322B339C4B6D
	2A157C7C7277D939AD07EBADD04B7B78EE3D7620633B3520CABDCF428B787D5F171765622FBC99F79B8732616FCB6F561877593B75F5DE16CF6ED53CBF582EF122EF397D0EF13857F51E41B18E771FDE3042B18E77ECCB52136B124AA5E2DE7E6DEBA9AF3DAB67296FC3EDA7B4E548B9BEA52B218C2CD831946FC145B7125C7CC56E169FA65B34CEAA0747EB24F4FA525D514FF8F7E6D1BF3EC4BF2EDBAF25730F156E7BB12AD612FB5AC3BF8CDBA5BFBE5FA62533D26F3E9F1B199FAB500F9D8DD2BA4B2A5C7763
	169D12DCD209E7FEBC36D372A329D1CA47BF53FDBF86189F9568C75EAED97970408FDB13A43744C3BFFE39C772634E3DD2BA173B65872B83F6E4E19D90AF569DA9F04DC97123735F99CF70C1F5BDD18C71D5A972FAA22C4513BEEDA3481AD2E4ED7094D6CF3C466B0916224972E71AB531C57FBEED481147ED59341361A1DB94786EBD9B987E7A9CC5DAE437C81ED6706CA9EABD95783E0B545CE340BB855FE751E9DA7123D3304ECD2567E2ADB1E199095DA75D2387520638C7AB3FD414110F1AA5395A216AAC15
	5C535F4A7495FBD636BE58A5152DC2D9997D13DBF6B35EFBB2287F07507FF5FB24F43EDE653E9F07E4E5FB72D0F526CA6EAF32FCBB3D57B37FDFBDA0791F5DA225335E2D7CE73CC5D5547F8E743F74BBA91DDFE4386F474E6FA5398FBD483793C6C9EE4A924F7C8FB8A479FFFF1B144EA7C35575DCBF9B6318CA1ACF626F82596F6B6739334EE53844F45CB322BA5878480CC267EBCD8A8B35571AFCD6283D162C24F068F3A64B8B1D1FB3393AD0FE4EA49B5F394AC46A26F1242E82CA8492BE705365FF00E3BB8F
	53B6707AC3DA63BA1BCC9DE42DCB1F5DC866B3B37E20394EFD7D635C19122FC42A4D3C5788CD59C3D6E93F3D5039E43C64104DEEA71B5A1179308C7F4BDCF23F6C369E8AB26C2139A40FFABBBBACF646AA6263691ECED6F3BB0559785D974BF24432D98E3ED9BE40B9C777CDA4E3F3EE6D9F5554E9371AB75096B51B93747967C48F5D2B66831C07741F35C4CFAC0413008C9F62BEB3A95F6078E191E04D9F62FA4F1AF5781D5777C3CC23FB9D610D04F0BCD08A10FBE3G5867782CDD9078FA2BF6A76B2DE8AF10
	59B01B6E87C772B277A3346B8F5B902B6358974B51DFAF0E7D328A79C2B9163B1FE064DD1A74910E13BEC13F55B725C2FE24E259CAD8C84E715EEBBC6C38E39B0050336CB1775ACFB0146E4AA81659C99672DE7605F44681C583A5G258265FF6C27AB812A86EA8432GF981798385810581C5814583A5FF0CF66CDA34F488BB4489E83420779A597AD2E647D172C9D6ACF36BCA96B9CB831E142D1075BB8F9DB637591B0C649BA5AB93757B30CC9A7E67272B799F665F557BB01F877E07E5E2599704B7984211C0
	717F43F2D5D60665AA853072CFB00DE3E5D82EAC1FE09A0114F78C04C30122BF7134DCBDC9361796571E74CCA171E4FCA2016B0C1C09D81160AFE2233622AF4D00B11B3FDF09FE7B829649F9EFDC093C024EDF3439BE0F70D6C1389148824456D227662957D2FBC1DCA0D0288E537B268A73A01A27E72DA26999527CF5C5C0D5C01E65C1B259D2DC3CFF4732500FC6C847A78D757EA58B7D88CFC33DCF9CA03CA9904ECD77571524A36F538751461AF4645537905E81887B828525FBEA632CAE69BEFDC23F55903E
	F02EB3AB9D31E23D3F788C7C5A643C5E7E2D49F53DFD13094DCD69B0B71D689157AB0EB35175576D6DFDE67EFE385D144B317A3EC6DBDFA719F9405E452FAFF3752D43876CF5FC073F6FD2CE3D7F04787D74F3A29728CA539905829F7BC654C66B72A888AB3F9DD9A99EAB43D9B9F9F7ADBE2393A02EAE43DF7CF6753FEFBC7D364364F2568DCFEE1347F24C2FFF517751388C353FEFD0BCB4C36D2FFD9D7A9B81F1A519686F3C29F27D23B2D93E0F912FA1F00D4C543A3F410AB53EF1A2CF12F855E7796B8A3234
	64D6AC174B152AF8EA329C6F3BF866F915DC2EC964330857C1387AEA6A1B31DF2BAD9928628D55509B254262A11C8CE4B0C8B8FBFEE25A49EF5E7EE32FC5B16EB93AEFA2B9939C5A6A1DA769B62B3B01313B03454F37B8FF4697DBDCBF634BAD5AED3315964736599A0BF65B2C46A2EF1BB1EC130554159D701EED66FCDBB9361FE3BBE91A845B57E932DBB83E075AC570BAB3D10878C1EA57F10AB50BD82B8C5BAFE2E68B292740E50B2D176F33E721731DBA2DD6F11FBD4A53598D55964F0FBEEAE3E70FD1E677
	G477673F231F35F706A356FDC4AE957EB3F22F20586776A35F28356EB3F25ED0CDA037AB93F09620D8675F3DE7E85BE67AD9097EE40673C32ECF8755306E14A7D68319C732BE0B9313FB8DB6D6F820A17E72B7D3D0537352AA1EECCB67A5B2F5863C4BF1165FB01F8AD05EB8DD053C469FEB03947947B70D94478C1716A8B57C020D087392B374A6522A62A6A0E094E6AB5534A611543DE17F25A6570769AA2172CE10F9699A6E1B93C0F36798AA7296F4BDFA9DEB2C9FDDFF66661FD2904385113300DB8ABDF3D
	1FFAAA449567C03BAF875BC2BB8D86515E469CECFF7DEF95C94F8742E300C2F370BEEF2C9ADEB90B27ED4E689C35BF2FD3BCAEC76DCFEF957A13GF18D13D17F20439EE46E5D3F4BDC4AE95F3F0728DC70E4776EDF44E43CFF9B8F52F650E4353F8D941FB0D96D6FD387505FA408EB1A027EBEF7F0F879BDC05B4F21D3547AAF20F84494357E09AD28BF9A62AA2722FE3D433E8223A1EE5CD4169F61D39D73A586308420D4D5DCEEAE14BB202ADC75331C132E5651GBC2DA21FBD57D1078FE081C0412A38888847
	82A54AF036DFCBF89E690BF7F6DBBB3B4DE42740AD66EE8177965AC247B004E9500682E258713584AB05F04DB44C0BCE7ADDCB2C8FE43FBFDABB72E3F4795F0C3C0E04F512CFEF4BFE1FDCB7723A7DC6D40738E6140E711075428D7CBE5FC1671537C23807E333B2F0AE6CA047263035BE900E6758A3FC8DF8B24752E93F52B09D4A52F444AC6918DEB147FC8E904C8EE19F0E55AF477482B836062FAD8D66981B0FC87804BC44FE2073C473A1DC4C3108B414AD6758C365F4DDA3047DB9361A0ED585C1B814E381
	940B00F082475E5E0FFAD3B9B6B593F56466A356CE47BBDAA1EC67589FA9668361A00E5DCA47F842A09C4331BBCA8916G6154FCFC6E823F104A622D325F2B3E9879F239739C681837DC72E9096CF7F059486B9EBF22BA58BD9DB5854B0DE186AF1B348FD48861D20EAD6D4432D445316FF2E93901F0G47CA6998DBB00423B9B6E1A66A184031E57459CE0130E1A6E2D76979BCF70E7D311EE0A6888FF0AC259EF50C62D850D654B106E3B7737D52C2B896C957086AE7796B8AE7A176A45D63249C42353330DCBF
	14A75D6BA8596FBDF9A3FF5F3BC7D4C7D29771F9C5BE1E4F5288BE37GE6016B60AC76EE761F056D4F5F6AF12CF05CACECFF6E21630A93A01C8A14DF00F95624585B3594701A8269DD5FD46058D6E06D1E5E55A4BDCB013FEA5F06B3947716612CBD24DF0D7BB60C01B87DEC547FEA15F41F7EA37BBDD0B572776C6A9155414A6933F45C56827EFA4D46323B0F3E2B7CA19C4473217E20647BAE596F678E0CFCBEA41F839D27DBA41FAE157D4EED99F95DCBC7D4873B270B59FBBB8E6AADFE1FED94A3FB9EC4F2AC
	066F3F9043318B6B68BB9A42299C0B22985987A177D34446503A116C03D04C31D97BF99D4F3103D4078F0483B896C8B132B7C2B0474AD8BB8A42319CBBCE31C48827F2AC0E354166786B0A66A036012EDB2904F09D47C6D12C8542839CFB0F3619C6C1B800E34779BE92419C3352BACBA8043A299031BBA9D682619AA0F16E7B67248E31134F26E48E0100EBCA0E51BEC7937035F25EAB57E6A02F00738956F48BDC66FB5AFE75857EGAEB3DE2FDC5F779D79FCAE4EB3AA4BB81B35A7D12003CC1C13563FAF5A66
	38C6371A3601C9FCAC70B3AC09E28990CE66F6FE1A2E34532BC73273CC7A592C71A91E6B2F7BDAE1676F8EB85AF957813433FCAE5A59CB5B5BB590EEGE236FCBB641ABC759C4EC110132FEB760530F27D7CB3342D9EGF850DC4C0BE3E94A3C98FBD44A0B67524EE62DE5AC68D824480BE74B9D73626DF24C0B895C269D7B15B67D15CC0F40F9CC7B49383845565BF9920A3051CAA6BE63D7ABAC1B0F6F47EFF849BCFFBF25F9DEBC4FDFD7BE8F73F7F166592C0FED05F426AA7CBB355551BF7F2D681FF59E7A77
	572DF98A9F56DBBBBB3A49CC8ED1A61EFF239D64B2917B341F5DB85AEF89823E904EBB3E547159FD3DCFFAF66F24ED6089401F44E51E33A873BC27DFAA87B51DE773CC944D7757CDD26413BD57B11FAE4F45FCAA1D0FB6ED1CB9F4BEFDB7937329FABE5E6749F4AFBC8B046DBC1D752AFAE979B149379B75E7D3AF854ED7BF6FFF2DF7746D79FA74AD185B39005F63F00EBDC931C488274C47B29ABE5F133514A5C54ABA209A42578B723D8DDE2C51AEC76F53FEC29D70B795E13EA5CCF7ACC73B4851FCE23B74E0
	BE0E53F903CCD891362147723371120B308D1DC0F9CB97C01F8328E58162FF1CC1F0BB04C78185AE40B65DD83D437E668B2476F47482E7ED6B712C2D3E40DFF54649D394CF1561228F94A7617C4F605D7B993EBF0F50F168B888A7F16CD7F43F737C057E3A12050865CE4277F143C234FDE03573BD93AE26F181409B869487144A65A6723DB1C7EE4F0405DC47486D1970F616F6994B26F9DAD88C79D70CE52C7B00E3996BA7DBF70AB2CD346D758A7191E4D87C6893D2FCBA6BA3C01C1D27F9ADED7F7519493966
	E693638B2E43F74218E2FC5ED2A9968261F00EBDC65B090990CEA946E730EC3FA76FE1F59DD13248DF351E39B753310E78C5A6BEB3150B5016FFD02C96420D0B5037CD34BD29DC7F5DC231670086B95F152AB64E3DA785FEFF5EC957DE8FBE093699C7C19A23F9BA7BAB9D7332279273B202730D2DF43EEE1C6D75968B3C93B87F64F4657E958B298F390B7DF5050BB15F2FF4395EBACB16776AFCEF00F4CEA9727DA23DE33EDF2747FCEFDE0C36C56935571BCF203C966033AF4632B86B14142FC7563A31BE28D2
	DA9F54F7C6123DD16F595A22DF89126C6EED4AB5CB7FCD13625ECF73AC5D99FAC97631834AF40FE6CAF1E5EE2FF9F0BEAF4A1F5C8EDC4F11AD7347C31B4373A4D9C3855A4C422F6CA7E949CF765CCD7E63B4593E320D1BF6B4ED5A4553AA1CA925151E69199D6BE6C932FF582A34637D2D73073623E15366A6B11D47BF15150BD24F4A54323912EC2845B37B374F13E4CBE6AA6D374FF45F7E1B0B24F466F9D82E2396C8324975CA9B2ABC484312E2A91D7F1BFF76E5F55BA2292C3EA7DBFF7B70F4F76F8FFB7F9A
	BDBA4BD0FAEF5B06A99764D4EE4CE26D6F482C3D54C25BE5A10BD9FBA91D636D940F10612C9D75D6BE4E3D0C01382AA5786D795219F49F48A50CFFAECF6737940F1761AC1DBBE97AA4DCDC622F4BDD0A6D2CFBE85D1B8A615CE508FD463F77D4AE43B65493D95A6703BCC771E6609B84A26BAB457B6130DF3C961D5D79A0A75D5261ECBFC16CDF8D759EA47B42B82EAF75B72857170E815F156BCB2F5861383E747EEC148B81FE32EEAC8A2E71E23E31F77312C91E3409D2C0B667F3FF3EEE2C88FE13C5CEE42DB4
	DB13F50B43F939C4D7A9703178718E675412789A9E7F2AD1AB3E09474F4B560A37FC0E6F71EAB2E5CD4C4BED875CFD264577FEA6DDAF540B6B05FE18A425F53C4E7DF5C70F544957A33334AE4C11523AE63E7BEB08DE1FA249CD5A6F599A221CDCC9F6CC26328D30FC1A94E7DE6D3EEFFD741C5CA5DD18C73BE47B232D76E0ED5625150EF954AFFB7F3F61417A3C3899125C918F5719FDA2EBA75C2ED76651E7323D17825C72CD5CB71B761B8B82595CF9D6F79C228D3226C03E3F8E8DCB714979C355ADC44E13F7
	06F67DB5F946D0BA524FA2FDC94795B32B84766EA57D0829825BB7153CE849CDA28DAB72CC127A033C0849188B59F4001CFF3C122791C8539804E7BA90A88AA8992830946ABCA0AB10BFD0985084201CAF7CF515C0ADC05EDFE0FE5EBBA3FE88DB65366549ECD37349EDDD2291AF379D312F4FB29FBD4F737706749577CE4531AD74DD4DA74F8B751EE504485A9CB297F72E8C534A3311A2769C6675B83E67DE5663FBEE5C976CBD97815758AFD83B081DAB7195BFA3B089F0FD193F2E98289648D406739ACF4E52
	DA7B628D7123B94F5FB334F802A1BE228C474D228CB8A698D706EBF3DE4B46B1367C657E3A0665483BFCA276413D1763D85AF774CC79B08847GA5AE77F41D4A9E3A4F98CB7FA55A5EA277DCDF0EBA85FEE62305E3F38FA1964531BDF41C0C1415728A4827DB88762F19787D5D9F30F1C0D1C0E47EE76DAD2C0EE2FC4DFA64B32C7057952DF046171301FCB540536C14AF1C738DG0F2FD3BEFBA6728583CF24D33E12AC64CBG9E61CBE7FCF11C2F88F82A001A3FE4FC06F1F23EB186649B7DA59B8BC4BEE5FA96
	A3376FCBB6EE284D370D7B9179A59BE35466AB65799C8F7181CE7956707CCB01785CCAE7FC1F27A3DFB97054B965FB1173D90047CB030F15FBF6EE929D2F831E58CAACDB6CACCC02672E44F2FF81652D03F0AB5040CA647DA193F9FD81E3FB38DF21E8C7123AC139C77C7D0AF847BD625FD644BB6E913FB04B599E714C26BBE6617C66C8EEFF7BFA5A48DB652FABGAADF0576CF4CC45E3AD5481B390470FAC1F8B4D070AAFCEFBDC96722C42EF2EFEEF09C17FB53611CDE775E9D9F8DD32E52615CDCD7447A0BCF
	523AADE915FA8E713394CFDD251EC35CB6914B0FE1B53C7BD773B9B38EE732C5C35C0455AC5FD2D6BB4F3F1CAAE5DC9104AB2B3466F7E7B874776A002FC5646D29F22E43DB95B79A4263B4F5FCF6C82DA39C78E2C45E04A1F4242A62F23F02F75AD7DABA8EE42BF5D481DF03485BAADE6DDFE94C09D6E181908ED6E162F3BE0B5CA7721CC4C0FC6AD758DFEB1D255EF30A745DAB5760986DA2BD191C58E66CB55B4B687FBDBDA6235DDCA29F9D22AB2B4AB612D8FAE466D2D16785FA54D98769F92DC11D17EF5052
	993A865F45ABB3D0AE8AB07D57A8D71325A5D77DB54A3D4E659A817361F21B53356442395C7FE522DC8CE0B955A8D76D202F9662AC55A877ED964A8D82964265AE4A5052174865B28CA8A72C05F756DA143BB9DD5DF7A6F2BDEB71DED88DE443AE36E7F5993BB41AFB5BED3DDDE6D3896F76303B311EC60B37C33C9F6339DEEFC8B3ECAD5AF3359171E440CA3FC15C4E734584D8G4777707B9A83D84EBA445BF87E5782B6388E7D8AF558A7060C8D05F03926F4140B84CC28C1B9E11B16DCD58D4A99389D8D00F9
	F339B7BB346442EA30EE1A16B13CBAF57EB0651ABD16E3F56E3BB4BF23EB54F5717F5899C0B56A3A78D27EAECF00380675682FA9F3F8F65FBDCBAE978C69C52C176A1658754E3E8D2F58C06CC8DC4F6C1B4371BA0A17EE10F0E637153E17C9588AF1F59B516E298A3B0BEB615E57CABA9BEA1D69BFC95F5D2D357E2A3313FC58BBDD06B37DB994A761B190275F04631E898647B93D5332F1CE2FE5935A798C9D53E23F63E53FBBA70E7C3C418BC7D4877359C05B02F670570767CD834582A0AC1D1DF5AB45468196
	4179DE24FB9B4492BE0EBD454F8ACB6558923AB7F443E66847EC66D8966A9D605811AC54AB1D95961505FAC7F13E4E5528F78C471E6267B105F06C5A5528D73F85315AC3283700E3BE07D02FF4B65A1B07D0EFA9677B73D7283706E355FCBDC793478A2BD0EFA0478633D1EFA8479E26D8940425736116CDC43DF11C6FCABA7FAE89425279F06FEDC3DBF26A10EFE0865AD2443168DDE8CBCF9D2FA3E7296B8C774E3D1F6FA0D7268AFB57A91FDB56861F42770E8860B6DC6AB8B745AD9B2EF110D35B9023E94303
	9B309F1048ED785A216EF64F06FA87B9358D4575DAB69C6779D0DD0FB67CE718B6FC6C52863B268D27525106D15C06318E6F9077EC385DC1CEEDC3044A86B60E5367B00EC35AC2F1401BD40F7D36BE1ED7062DE867BE07B51F6E59E9F610D35BD933D5AB2F6E21F59E691FB6F39BA69906E743EC87B9757AD4DFCD9B6253315C86F19B1E98268D4FBB482973A1FE2BD69F66574661697B3D031CDADF0A263E1343AC0FBEAE4BE36EB6ADFD8707D997F53A2C0BCAB475F58E7319BF6E72192F5926D506587922E4AC
	31F99B1621836943334162A02736A1CC5306555B500698EE4314E166FB214BFC2FEA5032215802B6B4B6208D9F512E9A2E0D16FEDF61F03E77CFC9CC470DA32A033D7F9F27E3E5A160EFE4833689FEF1064E4F0330301D2F1390306DD03C9D7326EAC325A01D03E8875C97487D7390F7D0F9B27E9C8CF2515B5998F392DCF3F7786B4AF7303164469DECACDB9047F8C9BF1C49772E0FD65FD7510ED4B74EABEC96ED43B031CB9E2FBEB71178B6A07AA147C35D50656CDCC5A479390D4C371B9DFC1BAC464DF6635E
	12B2ACBFF3F10EAADE7D8DA9DBE063306AEFC6B35C50656A5B24FCDE05FCAD9219775B33834B57319DB86F571FE3AF6F44B2973A836F395712214FA83A12469BF632F1EFB2C6CE4653CBF6227C74A5A3FFC65167CBC6720CA2769DE9008C710B5F5D7C329D672BD65036C99BD05DCE9CC37A5DA11C2FAA4E591F28BDC775E9AA5B8CF2A6AEBB39C1B91754C07BEC3E909F30936712A68EF9EE980ED760FC15A810A334D04463F77A73B375184E57F6E94F91ED243A9301BFE5A74E63ED64670995B7A276AEBB7799
	42B59C7BA56D73D9A1BC50486D9E724C9ED7F687B5CAF6B39D8F32F37FG8F67FA3BE8FF3103584D3119EDF43E9589FF0B583FE89F329242B55F22FD3B07DC23A437CD4B3E1EEF5576ED227D4FC140FD385EDBE899A21BBB06FC0B77BCAE9B4B8B6359CF7B1E91909F4DF9FE3FCD6BACBDF13EF183750F6858053EDCB54315AF99C378D235CB6D4BA7347FDA8BF863AE3429EE969908E933F5F7EF325BB6D61463F31927E8678F6ED23681FCF7B90EA931747E224F1627A7E0FA0FEC102797A84A070A57A8276975
	E64853DB4D53D36EF5932F12CFF61A5E62CCF9FAD5BC3D8B95EDB143EE25FC61EEE769BD2BC80F9C4EA06E0F1A01FD0D725D782DECAC9DA736C0588BE874EE3EBEC361CB30CAD704D35DD7E6A96EDD857AF23F22ED9B2B12CF043050642F4BEF12F0165E8603A23D95185EAB0A3CA991652A45EBE313B37BB23395692DC67CF123822F627316B29578D7087FD2AF47D7147339E0998AFCA55A6BDF29EE8B1A404681514ED19A76929A83F808AAAE9242F1AA0C693EBADD21FB956A2E5E26561D84727ABD621EDFFB
	34F51782DE230AEB0230E50F166ECD4A7CD84D57C6DB543A87C15ED7CCA350096ED04023D4F17190CE56547D4AAC47F91D29FC3E09E12FBF1D57D98457CAA0B296A15E2BB30E73DD6EBE03F28DFB59FC9793DC8776B23D2C8E1CBC64F94AD877E1BD68CB746F1566F50642EFF29E40BB7CBD79578D5239D6DBB66DD41CDBB5E60572DC2BADE61B984F3E17D8DB556752907FA27662771487F23562E3F9FCF23AD6FCA20F3FC3737B1B308F63FF1B26A51F4F631F500CAF01F8165FCDFC6ED075BEF61F1A60EA5947
	66A0B31E409D4863350F5D1351F09D37CFFECFBE5C69497A4B88100D5DA75D1344FD7E7C0C86E677C3CB343EC325F03FDEF1B89F014467B473F798BB9F001F21719B591A03988F4EB4F9FF3EA4B75E6DB3CD1C1F3575698269775A4F2434BF70601C138E55B9A72D8B25F43E9FEA3E2B4A3730C5B25FBC5C437F4545129FE9A5D2BAEFF8F06E0C77A16A87BFF706AE319063EE7B4A03F3E7BE17644ABDBC67641ED2490F67E5E702CD74603C168732299F7C9CA0C1F69658C55B5C7723C3F6C615F506E7FEDCA6BB
	0F6A56AF25F416985D51AFFE9B216D7DA2F8064A1B318FF963916CC356F26C058D48674F318B8A689AEF881B7E015FD0EEAB607DCF4E6747F59876A3964EF594F26C5AF46433F26C198E64735A0F6D24E0C53BA69A70897B25F7D44AFE47779B7B1EB90B4EBF48B9205E5F261862A587547B5B5C1C097B5B54C2DC50813EBF9277A767A04F9FAB7FCE44B156A7A4FCBD9C7BA55F3F491BE3FA6AF78C0493B83603E229904EEDC1AC1567CFB147CED13DD5902E63581B5C16A60E5DC547AB83A19C4A318FAB719BDD
	E29C5E3F05747BE39470CC60FC7F267BFD24C0B87FBB443CAB71DBD989475EA9C63D559CBBC2539B8561C00EFD3F0D5B42319B3621ADA94F23AD0FEEC3DB22B85FC35C16F80EED6536A4F36CCDEE0B61FB44C2AB5116E60EED3320ADD60EDDE5C1DBC2DFC0DBC2ADE80B9767FB29GED7167183D83ED896258F715E8CB9847164CC6DBF2FE407999458538D6298830669F703B0D35G3F5B787E00FD0827CF935EC88847832570B4DEBC03F39AF2DB21CC34E29ACB841CF368554A770F92687E17900E86CAE875F4
	DEEEB4990A947BB9E3DB713B0EE0C41DA93908D5F16CF3BDE2BD9CFB1DFFBF8B6258D3E948974F314CF41C53DBF0887D9D4C44BC9B84AC649072C6E4E21A0907505F0736935E62B6FFDDB5D0D39B26913583734C8AD8E09B26113F9373AC2E8D5358301370661B7CF525C035A6CF736C1D15D21EFDC83F2F933E96936AAC64FB6E071B30DD736E8665B852EEDA7F941B214EB6639841FDC7DC2DFB1AA44856021B157BB1584D52FE8C621A6B0DC4079760234CE84768829C5BE0BA9FAE70E48F08B0154EE8871DE1
	542FB8409338DF4F3874CB2E2720DD292334DD2D63C11A3FD5005736230E37BADC69106F37E2D769701169E04F76A3345E7787BC281D575DB6DA1FAF057B4C314E23D8AFA435633BEDEE966917743C6A2773858A860AF99547E91751381A8E508F64554166033338BFBA6CC1BBC5CC07DC0345EB4C2B52582B6F2B6E0F61B29D111ABA64E336D38465386DD06B8355446ECFA8AD83E34037F19DF8FF5E35FAD2867CDF73D35C1F388EF599E0E7DDA4G1E4CF55CBC64DEB2A41D29B29D4596E5992802706FF5727D
	CC6624BB2E69DF110E75C92D851FA9B3454C26CEBB61E4FC0394A3714D969CEBDC445678C3584EE57D2D4A3D94E612E1B131EF266FF255B7137B6330FF8C68A08DE3E9DC392A44F13C7CC57ADE9BCF4A97376902635A63638D349D908EFCD11C7737BB1C6F4D10C773A085F8751D188737D2FD65902E6E447BB6F14871F3F59D2476535A295E836365B95A63677E547E8160776676DCCA5BA78F937FB916CC31F088C7F1AC1135D9A02CBF0CD89F738542550751977D103E287B538E3EC0BACB8579B86FCBD447G
	605EDC2F1D36E31EA0B6F36CA50A05C3B80AE393E97BA485427AA3087D9FED5B14C3387A885AEC2FBC1BFD0A2CC754B6B7D23D8300FB9F413AEDD9417076B32FF2A9273D1F79D1AA97FC444D7D4C0F601A722D346D95FBC4BD7FF4B745A79CD14FBF0DBB4D77B30738A6AB7A7B4A19614DBFFDE718F2254270665B0EE76DC72B5A5F3FD3BC422A7677204077CF07384AAE74B728D52EFFF4974B77F162B59C2EB1DDDA777763DC39DC024813AADEF33B211F542DA5D72E186BD0A572B40857D6385AB5655ED20CFF
	7B28F8823A9D4B8B13FBB6CDB12EAF72C50857D838A6EA6A1B643067BBA14126644D37B96AADD1E15590EE84B249F071FB074B394E5A4F162FCBB96DE7EBBC159B5030D90BC6597059DACD5B68E3EC6A32D6C371F1B6F5D99B3F9D4BDAA8449576E0D97B7B0E61BDA37143141B3DF3F84F56DD341F6155237677FE0A0F6AD17BDB37937D9D8DF1295C5FCF16284BD06BD1A85FC7D97E7B9CF53C8F81008583C52862E2A11C88A4742A4B508207F21A8FBCA5A2DFF52F230EC640CCC0832A38D1909E8394A243D95B
	E60B6C1C6D6B0E1C7D3EA90FD48BBC6D056B24347B8B4EBE6D4DB5D25AB7EC10528E79896CFEF8231476024DD25A0FF61CFD5A35DB2474DE48F07C3E73AE1FE39A594B3E9B4443B539174DAFE2BC4BFA10A7270FFDB7A806EBD51F7C3B0157D1D7ED8652AE4436CEA3481A00E6086101BE765D608D7E5D607BAC75778EEACF9F7FEE2099BF1A4747EA2EDB9A5707FBF00C291772656FD64F46E89F121DF1BEFF3B144EA51DE7FF3FB66C10522BCF176FBFA14EF1C9D76E7F70DB595964C72DEE6CA5A25B7F688159
	594F6F294E211EA0BB2B7CC58F763948121D83FD4203F3285BE467B73F6661B954176C136E474D4D1E5AAD76DB36D17F79B954D17B25F4C2BD707FBF87A439F59E787F5EC1C96EA58F7D1F7D1D64FF356C9C683BBC707FF28B751F1FC37D438FD2BACF97386F47052D12DCE7077BF2AF9C12643E2D744CFF1DC9723F58AC257372D67777C37121633161D0BF447671BDB8CF5379D5FD7233F09A69BEFA6C77FE596FFF1D9E79F9309F1D839D2497093FE3E53F0D42486BBEB922BA44FDEFDA71FB0BE0477BDCC377
	054E374B4F4269AA6773FCB9DFBB9D7B36C35807E37953B03DG0EED24BA02A19C4E3120D6CCAF0AE32F50716C42FEF82776A336C50F6955CA987D2E565CAFBFDB474E3F35D9B85FBEBA3E928A61A80EE5707462B976877E7DAD19E3EF27F13D4790FB62B055FBCCFE36CE6AE12E17733DC1E5C3A19C4531AF28AD714764E76B9C20D892E079477999A47C7BD789478E72EFDD559CFB086D978A61B19C4B21E3FEA1900E61D8BC4D5384888B8308DD341D5E5F8179B98EEBF7C8E5FB336C77935B4F41F9D367C0C7
	58CE492707E53FF76C9CF95D9DA32A035D5385A5780D2F045F677547719B1FF40E436163780D2F1A732D25F32C9BA1EC625825BB703B5FG473EAE446FFE23B896EC4732B9C6AADFF3E83906307E84BF97E28EFE8BAC6058C6DA56CBA1DC4331D194EBBAA1BF47614F94B381B648793653F1BFDF8887F26C57948B05F08C47A6D359848827F02C0F1F6310F39231F5142F8542BD9C732118B70483CE62F734397CDBDCB0E089A7711B1619FF0BAB7A111F57ED237B9EC238874867C7CCE3D78F5FDF8530589FB10D
	6BFAF06CBCF7905308243CF590EE859A987474DB5C16F692E269DFC33FBB1031DF5FC17EAD4E00D8A44726723D1004D3FC0EF801763E52F753F6C2957055F25EDBCF4B7715E6FC89343E37830F97675BD72E7C5666DDFEB6632C41275467D41C52586B5E1F6FF59FF68A47FC5752F7D69404E339ED87DA155F9D8E13A95AE25F6E7E56339943B61CD65B192A31A7F5DE965A19FF9A6D6C21F5FEB1044BCF73F3C50EA8737072A13FA592192CA1ECEBBD2D5ED33FDB639B4F457C5B0D155BD6C6ED9B04304FE99CB7
	FF5065B7C739AD2127155F1B22CE2B3FE9FDCA754682BE017B7F6AE1257FF9AE7D9F6ADC097CB36AF3B352B47C1F4D7DAFBA03F65472BD3F453EE73A6B33B2C671EFE565E7B09FE3A9568AE16B994C475EA13F8D92FD130670A9600C7A2C0CE7B57662FE1B6F459D44FDDA18B1749990EBB3301E8865B26FE7EA5793D3E9F91EGFCC91C773A6D0E7544CE7A9EA3FB4E97F9E11EDCCB5FD965902E76C259A67AFED26E0DFEE4876627054B5ECD31C1887BF04CC45FE3A1908E7742BCFE44FEB67B4CA7F9293F31DD
	B747B10FEF1F03F91C4AED7908E2B99740FB7182DE77E86CB3FF146FB3DF4B79462A4ADC34133D659358BB9564DA392CC9E3EF799F795E7223B85FEDC36CAD7F88659F833C63B8FF31EAEF79B56C1905788997E0DEDFF6D6FB4B67DF285EDBFE2F46B35AA5BD239772F7D83A76F74F3BA9EFB970D5DF086D6105437CE6D0B14CEF8607291C65C2773E998CDE484F0726ED8C5F8B9D4E0726F840056AB1741DB6ECFB84C1DC4EC568EFF34F70467E5B07A977BB0F6518DF55C7097DBD97297D5DC471410B547EBE4E
	5BDABE9017487D3DCE318E25511B653BC93C8E40F5945098EF076FG0A3570A1E2FC24F80D03EB92107EE235DC3EC22E60E265FDAE3D58713E33F6471C9F85816B6D4BCE3BB11EA95B0F7E386CFC044AF24F46C22FBBAD497EA1D7B9467A1EA0452DEE75AC5D5932739116E5A9536D171DFF7075914F529D1DA14986284604133324385F7D845F90E651A90062B992327D269FBA6C194D3F4A11E44B394DD83713345CBFBB613FD32434EABD9C771EA15BF35A10213423A9437DFD7F0F4A7615BE3E5D5D324A785B
	CB68F8AB5F475BDF362F740A9D6E0F5BDE3843F10F6A3B73E579DC687E98EC1E6CCC09C03BE7E3302BE47BD0C74ED116477D332538E8374604992F0FEA9F6FC159D9959BBC58477B179A7BF87FEE0E14D65AD0EB9DD4F9F4C6F6EEC507077BF85FA0DB03622DFAE69FAE12256B41BE5E9750FEF88D54274D97E3BFBE1B4ECB34DEACBFCB7AA1FABEA27B9DA57B3D47F68E4E5CBD87BAB69C15FC5AA67B9D53B3723A5F9CD19D6C1E5E4E57A7F8717B3C064EB5753FD8FE16F4871FFF9A4879D6D359E4889BAEC14C
	0BE205902E66D81581F5B4F2ECA7CD4FF4097CAC69C12E434E79D65074A2A09C4B319F390EC40EFD4EF5881772743AB03D7CCB793CE4A77D2AE0DA5ECD405743F90BEC0E7DAAF61E6F98609947793EBD2A6CBB1FF6794DFA28BED05C256A3386F7E4B9364B4DFCDCA3015B716B2C217B193773BD1DD2AE45FE131166DB310F3F2E5C8753E9D7796367521F214613DAFD54E3A1759A7E34F2FF2CBEE8DBA037F710E3CD545EA0880778E0BF48EF48792B2E4E971C60A30D0F08E79749563DFD5C6DD9DBF1D909A4DB
	F654337643F6597A3641ACE57BA1B24B7D7643A532776DC68FED38D9763EBD2E3261DE8FEC48103D87FB3ABCFB1F15503DB7E6D159AB274F07867F38B7058C3B202B308BD3B6F78E18CDC5629A5BB5F6E162667EEE3ABBC2D125DD485AE5369ACF10DF927C25BC30C29E00648C351D47BA497B8F705D7D07408FBB8DE4EC6935757774758A1395A6BFFC7D4AD723DE585B17AEE4568B33C96FFC371964A37401CD35C63BF12F3917A436D9486E31F5C2A46075023E0FDEB27A6CA72C6686A13FFD1779E83F394FEE
	B62D375BFBBB8F755BA1A04CE8A01A16775BBB2D4B6B0CFD96BA477B6B86C15FED6CB25B0569AC5AEA6C6ED83E9B243ABB3E9EA0C77E6A5697114C92685618E0EF9E351724D246D3493BF76A2285DBA704268BE91B0509D61B51345958E63775568B59F68BE42345E6B58D742C2B2189990E63C0F6BAA4B7073BCF1CADA323EF5C68A3837FB7EAF242644D509399689516D3CED2E914F18E53C60B3197D419FB6B010C20321847DDB04F3E7831AD33DA52841D6864D1613410B350E3872BFA0D5DFDE46FDD3020C8
	E581C671044A7C4617DFF3730787E8C21228DD184F328CC417F718EDDD4B573737F7F61BF98210FF107CDC1EBC61A9D371CC9F38FA465627BEB984773BD6C86FAAAF277FAB687F9564FF85C5AAA8D23182B2B1C99872CF9DBF50C73C4E3533C28276CC2576105BDC36996E147D59B7475F70DCF5D2A2F837D948B8E634761BA133F3A52E9D7DDD074C3D170C3BE66EA47F784B493D68A1C582534DECB7F6F5DACF400FDA7A308D903CE800EBA21E57F777196DFD71473EDC137E725874B4C1DFAFE49E32596D36AE
	A83CD6F33B9D8AEFEFE707852E69F6DB8FADF799E26D6ECB8B8AC9F422C3E9A4689447E2C56069B4B21F7E1F65F126912959D4F68ED1C8FE4CD3FAD842B21654FD7A735B52651225E9B2CB75671F252BA4CBF11C1CF41C524EBFCB57CA16CE9173150C3EE6EBDA2AF3E229FE04AD65CF68F1B3F93698DB8D0A55AADDA09FC1B2298B3D42F4475E5B7AAB7F794C389FEA735304B4F8F6ADE67630E69C6FB459AD74F1A5721B4F3F9B55A8F9C946F048AB1F0CB130A2D52F30DB99BA2F3C58AFF92113F9A17C3C3CB8
	A4F9A188BF5BFBF1C47BDEE48C6145CA0D50F965D33F52A71D26CFDADE1C47BE1DD17A049F4CF4BFE71FFE216D1356FD4257BDE9C611FADD4FD1A2C53A268739A4B6E252C45EF4851AA14624C38FC66C95C16740AE646E01BEC0277D042C2BB405F6EAE440B46C7D4830BC299BA4C3F3F6996DE68CC3CA5B4D2455D9449A1FBCFEB3EDEB92CD3C0F35274F58815D174922A806A74978A1D6111C6C4636522C1FA21C3337F42B7A461250A672EF8B653BFE603CEAC3282C3BC9AA0099E2B19284E72D5E7344665B14
	ADF534B9737CFB3C6F546ED3E837544F135C8DD376AE064E5D7344660734CBF14679DCAF7C6D3C2E9722259CA57DA09CE9556E391DA7B6BF23FC5A50667330877F02729943FEF17A79DCDEDF99B81F2DFBE360675570FBC73B017E33EE4CFEAC79044D52DDCEFCF2E820C2D33441E6B431465EF95EE35499A4C773C43D3432992247F89EFAB1CD59FBC7AFE67F3C3C78D479A02197BF2F11945DC2490BEC1997DAA3A94E7B012A3EDD967B5034667C73364CF1G7BF261FCFCD16BD6BAB6604FD3CB2B35AD4DB87F
	AC5D28FD774F3F4F973A2DBF174F973AEF15758749D7690DF4FEB657F54DCA1B278972C6704F255123B3BA0E6065396545F96C5391C71F48741B1FF363D4572F6D1356FDA2BC64D9A7F3F37B857AAED54DA1B90FFBC23AB3677338026EE265EBAAD7CC633C2E28C6E95B1CF5BE5B6C27ED7379B7C62A3BCE3B61F2BE0F116A2ED7B6E1064E5D734466A0ED1B4F67B1D25D9FFFDE23BA3A3B359B83BF6B97678312CF8BC51F9A1D78F41E16227167759B71091F5FC83B6E691F4BC83B6EF9A7A36DECAFF9E16999F2
	B697A92BADD78789A997EFC943D90A6AB96111F70A6B8C45EB1170020EACA61AA6BCBE1FF8D4F0173F2E9208CCE24E93664DA77B9B6FB59EDE5F533341EA6A5DE46A345BFAA130E64D7AC3765DDDC62B55EE349ED95FED5AEABCE65CF042EE6E93581910F942BF6613747B10C70CE4F14F4EA7F69F16497CBFD0CB8788DEB043B847D0GG5CCA81GD0CB818294G94G88G88G8DF46AAEDEB043B847D0GG5CCA81G8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586G
	GGG81G81GBAGGG81D1GGGG
**end of data**/
}

/**
 * Return the JCheckBoxFEED property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxFEED() {
	if (ivjJCheckBoxFEED == null) {
		try {
			ivjJCheckBoxFEED = new javax.swing.JCheckBox();
			ivjJCheckBoxFEED.setName("JCheckBoxFEED");
			ivjJCheckBoxFEED.setMnemonic('d');
			ivjJCheckBoxFEED.setText("Division");
			ivjJCheckBoxFEED.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxFEED.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxFEED.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxFEED.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxFEED;
}

/**
 * Return the JCheckBoxGEO property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxGEO() {
	if (ivjJCheckBoxGEO == null) {
		try {
			ivjJCheckBoxGEO = new javax.swing.JCheckBox();
			ivjJCheckBoxGEO.setName("JCheckBoxGEO");
			ivjJCheckBoxGEO.setMnemonic('g');
			ivjJCheckBoxGEO.setText("Group");
			ivjJCheckBoxGEO.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxGEO.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxGEO.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxGEO.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxGEO;
}

/**
 * Return the JCheckBoxRelay1 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay1() {
	if (ivjJCheckBoxRelay1 == null) {
		try {
			ivjJCheckBoxRelay1 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay1.setName("JCheckBoxRelay1");
			ivjJCheckBoxRelay1.setMnemonic('1');
			ivjJCheckBoxRelay1.setText("Function 1");
			ivjJCheckBoxRelay1.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay1.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay1.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay1;
}

/**
 * Return the JCheckBoxRelay2 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay2() {
	if (ivjJCheckBoxRelay2 == null) {
		try {
			ivjJCheckBoxRelay2 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay2.setName("JCheckBoxRelay2");
			ivjJCheckBoxRelay2.setMnemonic('2');
			ivjJCheckBoxRelay2.setText("Function 2");
			ivjJCheckBoxRelay2.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay2.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay2.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay2;
}

/**
 * Return the JCheckBoxRelay3 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay3() {
	if (ivjJCheckBoxRelay3 == null) {
		try {
			ivjJCheckBoxRelay3 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay3.setName("JCheckBoxRelay3");
			ivjJCheckBoxRelay3.setMnemonic('3');
			ivjJCheckBoxRelay3.setText("Function 3");
			ivjJCheckBoxRelay3.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay3.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay3.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay3;
}

/**
 * Return the JCheckBoxRelay4 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay4() {
	if (ivjJCheckBoxRelay4 == null) {
		try {
			ivjJCheckBoxRelay4 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay4.setName("JCheckBoxRelay4");
			ivjJCheckBoxRelay4.setMnemonic('4');
			ivjJCheckBoxRelay4.setText("Function 4");
			ivjJCheckBoxRelay4.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay4.setActionCommand("Relay 4");
			ivjJCheckBoxRelay4.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay4.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay4;
}

/**
 * Return the JCheckBoxIndividual property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSerial() {
	if (ivjJCheckBoxSerial == null) {
		try {
			ivjJCheckBoxSerial = new javax.swing.JCheckBox();
			ivjJCheckBoxSerial.setName("JCheckBoxSerial");
			ivjJCheckBoxSerial.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxSerial.setText("Fixed Address:");
			// user code begin {1}
			
			ivjJCheckBoxSerial.setText("Serial Number:");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSerial;
}

/**
 * Return the JCheckBoxSPID property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSPID() {
	if (ivjJCheckBoxSPID == null) {
		try {
			ivjJCheckBoxSPID = new javax.swing.JCheckBox();
			ivjJCheckBoxSPID.setName("JCheckBoxSPID");
			ivjJCheckBoxSPID.setMnemonic('r');
			ivjJCheckBoxSPID.setText("Rate Family");
			ivjJCheckBoxSPID.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxSPID.setSelected(false);
			ivjJCheckBoxSPID.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxSPID.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxSPID.setEnabled(true);
			ivjJCheckBoxSPID.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSPID;
}

/**
 * Return the JCheckBoxSPID1 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSPID1() {
	if (ivjJCheckBoxSPID1 == null) {
		try {
			ivjJCheckBoxSPID1 = new javax.swing.JCheckBox();
			ivjJCheckBoxSPID1.setName("JCheckBoxSPID1");
			ivjJCheckBoxSPID1.setMnemonic('m');
			ivjJCheckBoxSPID1.setText("Member Number");
			ivjJCheckBoxSPID1.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxSPID1.setSelected(false);
			ivjJCheckBoxSPID1.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxSPID1.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxSPID1.setEnabled(true);
			ivjJCheckBoxSPID1.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSPID1;
}


/**
 * Return the JCheckBoxSUB property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSUB() {
	if (ivjJCheckBoxSUB == null) {
		try {
			ivjJCheckBoxSUB = new javax.swing.JCheckBox();
			ivjJCheckBoxSUB.setName("JCheckBoxSUB");
			ivjJCheckBoxSUB.setMnemonic('b');
			ivjJCheckBoxSUB.setText("Substation");
			ivjJCheckBoxSUB.setMaximumSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxSUB.setPreferredSize(new java.awt.Dimension(53, 22));
			ivjJCheckBoxSUB.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxSUB.setMinimumSize(new java.awt.Dimension(53, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSUB;
}

private javax.swing.JLabel getJLabel1() {
	if (ivjJLabel1 == null) {
		try {
			ivjJLabel1 = new javax.swing.JLabel();
			ivjJLabel1.setName("JLabel1");
			ivjJLabel1.setText("Code #");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel1;
}

private javax.swing.JTextField getJTextField1() {
	if (ivjJTextField1 == null) {
		try {
			ivjJTextField1 = new javax.swing.JTextField();
			ivjJTextField1.setName("JTextField1");
			// user code begin {1}
			ivjJTextField1.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 99) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextField1;
}
/**
 * Return the JTextField11 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextField11() {
	if (ivjJTextField11 == null) {
		try {
			ivjJTextField11 = new javax.swing.JTextField();
			ivjJTextField11.setName("JTextField11");
			// user code begin {1}
			ivjJTextField11.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 99) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextField11;
}
/**
 * Return the JTextField12 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextField12() {
	if (ivjJTextField12 == null) {
		try {
			ivjJTextField12 = new javax.swing.JTextField();
			ivjJTextField12.setName("JTextField12");
			// user code begin {1}
			ivjJTextField12.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(0, 99) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextField12;
}

private javax.swing.JPanel getCodepanel() {
	if (ivjCodepanel == null) {
		try {
			ivjCodepanel = new javax.swing.JPanel();
			ivjCodepanel.setName("Codepanel");
			ivjCodepanel.setLayout(new java.awt.GridBagLayout());
			ivjCodepanel.setVisible(true);

			java.awt.GridBagConstraints constraintsJLabel1 = new java.awt.GridBagConstraints();
			constraintsJLabel1.gridx = 1; constraintsJLabel1.gridy = 1;
			constraintsJLabel1.ipadx = 6;
			constraintsJLabel1.insets = new java.awt.Insets(40, 10, 7, 19);
			getCodepanel().add(getJLabel1(), constraintsJLabel1);

			java.awt.GridBagConstraints constraintsJTextField1 = new java.awt.GridBagConstraints();
			constraintsJTextField1.gridx = 2; constraintsJTextField1.gridy = 1;
			constraintsJTextField1.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextField1.fill = java.awt.GridBagConstraints.NONE;
			constraintsJTextField1.weightx = 1.0;
			constraintsJTextField1.ipadx = 24;
			constraintsJTextField1.ipady = -3;
			constraintsJTextField1.insets = new java.awt.Insets(38, 2, 6, 2);
			getCodepanel().add(getJTextField1(), constraintsJTextField1);

			java.awt.GridBagConstraints constraintsJTextField11 = new java.awt.GridBagConstraints();
			constraintsJTextField11.gridx = 3; constraintsJTextField11.gridy = 1;
			constraintsJTextField11.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextField11.fill = java.awt.GridBagConstraints.NONE;
			constraintsJTextField11.weightx = 1.0;
			constraintsJTextField11.ipadx = 24;
			constraintsJTextField11.ipady = -3;
			constraintsJTextField11.insets = new java.awt.Insets(38, 8, 6, 1);
			getCodepanel().add(getJTextField11(), constraintsJTextField11);

			java.awt.GridBagConstraints constraintsJTextField12 = new java.awt.GridBagConstraints();
			constraintsJTextField12.gridx = 5; constraintsJTextField12.gridy = 1;
			constraintsJTextField12.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextField12.fill = java.awt.GridBagConstraints.NONE;
			constraintsJTextField12.weightx = 1.0;
			constraintsJTextField12.ipadx = 24;
			constraintsJTextField12.ipady = -3;
			constraintsJTextField12.insets = new java.awt.Insets(38, 0, 6, 66);
			getCodepanel().add(getJTextField12(), constraintsJTextField12);

			java.awt.GridBagConstraints constraintsTimeoutTextField = new java.awt.GridBagConstraints();
			constraintsTimeoutTextField.gridx = 2; constraintsTimeoutTextField.gridy = 2;
			constraintsTimeoutTextField.gridwidth = 4;
			constraintsTimeoutTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsTimeoutTextField.weightx = 1.0;
			constraintsTimeoutTextField.ipadx = 5;
			constraintsTimeoutTextField.insets = new java.awt.Insets(7, 2, 30, 39);
			getCodepanel().add(getTimeoutTextField(), constraintsTimeoutTextField);

			java.awt.GridBagConstraints constraintsTimeoutJLabel = new java.awt.GridBagConstraints();
			constraintsTimeoutJLabel.gridx = 1; constraintsTimeoutJLabel.gridy = 2;
			constraintsTimeoutJLabel.ipadx = 16;
			constraintsTimeoutJLabel.insets = new java.awt.Insets(11, 10, 35, 2);
			getCodepanel().add(getTimeoutJLabel(), constraintsTimeoutJLabel);

			java.awt.GridBagConstraints constraintsHyphen1 = new java.awt.GridBagConstraints();
			constraintsHyphen1.gridx = 3; constraintsHyphen1.gridy = 1;
			constraintsHyphen1.anchor = java.awt.GridBagConstraints.WEST;
			constraintsHyphen1.fill = java.awt.GridBagConstraints.NONE;
			constraintsHyphen1.ipadx = 3;
			constraintsHyphen1.insets = new java.awt.Insets(39, 2, 8, 28);
			getCodepanel().add(getHyphen1(), constraintsHyphen1);

			java.awt.GridBagConstraints constraintsHyphen11 = new java.awt.GridBagConstraints();
			constraintsHyphen11.gridx = 4; constraintsHyphen11.gridy = 1;
			constraintsHyphen11.anchor = java.awt.GridBagConstraints.WEST;
			constraintsHyphen1.fill = java.awt.GridBagConstraints.NONE;
			constraintsHyphen11.ipadx = 3;
			constraintsHyphen11.insets = new java.awt.Insets(39, 2, 8, 0);
			getCodepanel().add(getHyphen11(), constraintsHyphen11);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCodepanel;
}


private javax.swing.JLabel getHyphen1() {
	if (ivjHyphen1 == null) {
		try {
			ivjHyphen1 = new javax.swing.JLabel();
			ivjHyphen1.setName("Hyphen1");
			ivjHyphen1.setText("-");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjHyphen1;
}

private javax.swing.JLabel getHyphen11() {
	if (ivjHyphen11 == null) {
		try {
			ivjHyphen11 = new javax.swing.JLabel();
			ivjHyphen11.setName("Hyphen11");
			ivjHyphen11.setText("-");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjHyphen11;
}
/**
 * Return the JLabelFeedAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelFeedAddress() {
	if (ivjJLabelFeedAddress == null) {
		try {
			ivjJLabelFeedAddress = new javax.swing.JLabel();
			ivjJLabelFeedAddress.setName("JLabelFeedAddress");
			ivjJLabelFeedAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelFeedAddress.setText("Division Address:");
			ivjJLabelFeedAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelFeedAddress;
}

/**
 * Return the JLabelPROGAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPROGAddress() {
	if (ivjJLabelPROGAddress == null) {
		try {
			ivjJLabelPROGAddress = new javax.swing.JLabel();
			ivjJLabelPROGAddress.setName("JLabelPROGAddress");
			ivjJLabelPROGAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelPROGAddress.setText("Member Number:");
			ivjJLabelPROGAddress.setEnabled(true);
			ivjJLabelPROGAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPROGAddress;
}

/**
 * Return the JLabelSPID property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSPID() {
	if (ivjJLabelSPID == null) {
		try {
			ivjJLabelSPID = new javax.swing.JLabel();
			ivjJLabelSPID.setName("JLabelSPID");
			ivjJLabelSPID.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSPID.setText("Utility Address:");
			ivjJLabelSPID.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSPID;
}

/**
 * Return the JLabelSubAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSubAddress() {
	if (ivjJLabelSubAddress == null) {
		try {
			ivjJLabelSubAddress = new javax.swing.JLabel();
			ivjJLabelSubAddress.setName("JLabelSubAddress");
			ivjJLabelSubAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSubAddress.setText("Group Address:");
			ivjJLabelSubAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSubAddress;
}

/**
 * Return the JLabelUserAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelUserAddress() {
	if (ivjJLabelUserAddress == null) {
		try {
			ivjJLabelUserAddress = new javax.swing.JLabel();
			ivjJLabelUserAddress.setName("JLabelUserAddress");
			ivjJLabelUserAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelUserAddress.setText("Rate Family:");
			ivjJLabelUserAddress.setEnabled(true);
			ivjJLabelUserAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelUserAddress;
}

/**
 * Return the JLabelZipAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelZipAddress() {
	if (ivjJLabelZipAddress == null) {
		try {
			ivjJLabelZipAddress = new javax.swing.JLabel();
			ivjJLabelZipAddress.setName("JLabelZipAddress");
			ivjJLabelZipAddress.setText("Substation Address:");
			ivjJLabelZipAddress.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjJLabelZipAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelZipAddress.setEnabled(true);
			ivjJLabelZipAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelZipAddress;
}

/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Rate Address");
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setBorder(ivjLocalBorder1);
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJLabelPROGAddress = new java.awt.GridBagConstraints();
			constraintsJLabelPROGAddress.gridx = 1; constraintsJLabelPROGAddress.gridy = 2;
			constraintsJLabelPROGAddress.ipadx = 5;
			constraintsJLabelPROGAddress.ipady = 4;
			constraintsJLabelPROGAddress.insets = new java.awt.Insets(2, 8, 13, 3);
			getJPanel1().add(getJLabelPROGAddress(), constraintsJLabelPROGAddress);

			java.awt.GridBagConstraints constraintsJLabelUserAddress = new java.awt.GridBagConstraints();
			constraintsJLabelUserAddress.gridx = 1; constraintsJLabelUserAddress.gridy = 1;
			constraintsJLabelUserAddress.ipadx = 29;
			constraintsJLabelUserAddress.ipady = 4;
			constraintsJLabelUserAddress.insets = new java.awt.Insets(3, 8, 4, 3);
			getJPanel1().add(getJLabelUserAddress(), constraintsJLabelUserAddress);

			java.awt.GridBagConstraints constraintsJTextFieldUserAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldUserAddress.gridx = 2; constraintsJTextFieldUserAddress.gridy = 1;
			constraintsJTextFieldUserAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldUserAddress.weightx = 1.0;
			constraintsJTextFieldUserAddress.ipadx = 80;
			constraintsJTextFieldUserAddress.ipady = -1;
			constraintsJTextFieldUserAddress.insets = new java.awt.Insets(3, 3, 2, 26);
			getJPanel1().add(getJTextFieldUserAddress(), constraintsJTextFieldUserAddress);

			java.awt.GridBagConstraints constraintsJTextFieldProgAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldProgAddress.gridx = 2; constraintsJTextFieldProgAddress.gridy = 2;
			constraintsJTextFieldProgAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldProgAddress.weightx = 1.0;
			constraintsJTextFieldProgAddress.ipadx = 80;
			constraintsJTextFieldProgAddress.ipady = -1;
			constraintsJTextFieldProgAddress.insets = new java.awt.Insets(2, 3, 11, 26);
			getJPanel1().add(getJTextFieldProgAddress(), constraintsJTextFieldProgAddress);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}

/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelAddress() {
	if (ivjJPanelAddress == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Addressing");
			ivjJPanelAddress = new javax.swing.JPanel();
			ivjJPanelAddress.setName("JPanelAddress");
			ivjJPanelAddress.setBorder(ivjLocalBorder);
			ivjJPanelAddress.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJTextFieldSPIDAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSPIDAddress.gridx = 2; constraintsJTextFieldSPIDAddress.gridy = 1;
			constraintsJTextFieldSPIDAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSPIDAddress.weightx = 1.0;
			constraintsJTextFieldSPIDAddress.ipadx = 70;
			constraintsJTextFieldSPIDAddress.ipady = -1;
			constraintsJTextFieldSPIDAddress.insets = new java.awt.Insets(3, 1, 4, 144);
			getJPanelAddress().add(getJTextFieldSPIDAddress(), constraintsJTextFieldSPIDAddress);

			java.awt.GridBagConstraints constraintsJLabelSPID = new java.awt.GridBagConstraints();
			constraintsJLabelSPID.gridx = 1; constraintsJLabelSPID.gridy = 1;
			constraintsJLabelSPID.ipadx = 32;
			constraintsJLabelSPID.ipady = 4;
			constraintsJLabelSPID.insets = new java.awt.Insets(3, 21, 5, 0);
			getJPanelAddress().add(getJLabelSPID(), constraintsJLabelSPID);

			java.awt.GridBagConstraints constraintsJLabelSubAddress = new java.awt.GridBagConstraints();
			constraintsJLabelSubAddress.gridx = 1; constraintsJLabelSubAddress.gridy = 2;
			constraintsJLabelSubAddress.ipadx = 29;
			constraintsJLabelSubAddress.ipady = 4;
			constraintsJLabelSubAddress.insets = new java.awt.Insets(6, 21, 4, 0);
			getJPanelAddress().add(getJLabelSubAddress(), constraintsJLabelSubAddress);

			java.awt.GridBagConstraints constraintsJTextFieldSubAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSubAddress.gridx = 2; constraintsJTextFieldSubAddress.gridy = 2;
			constraintsJTextFieldSubAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSubAddress.weightx = 1.0;
			constraintsJTextFieldSubAddress.ipadx = 70;
			constraintsJTextFieldSubAddress.ipady = -1;
			constraintsJTextFieldSubAddress.insets = new java.awt.Insets(4, 1, 4, 144);
			getJPanelAddress().add(getJTextFieldSubAddress(), constraintsJTextFieldSubAddress);

			java.awt.GridBagConstraints constraintsJLabelFeedAddress = new java.awt.GridBagConstraints();
			constraintsJLabelFeedAddress.gridx = 1; constraintsJLabelFeedAddress.gridy = 3;
			constraintsJLabelFeedAddress.ipadx = 18;
			constraintsJLabelFeedAddress.ipady = 4;
			constraintsJLabelFeedAddress.insets = new java.awt.Insets(6, 21, 2, 0);
			getJPanelAddress().add(getJLabelFeedAddress(), constraintsJLabelFeedAddress);

			java.awt.GridBagConstraints constraintsJTextFieldFeedAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldFeedAddress.gridx = 2; constraintsJTextFieldFeedAddress.gridy = 3;
			constraintsJTextFieldFeedAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldFeedAddress.weightx = 1.0;
			constraintsJTextFieldFeedAddress.ipadx = 70;
			constraintsJTextFieldFeedAddress.ipady = -1;
			constraintsJTextFieldFeedAddress.insets = new java.awt.Insets(4, 1, 2, 144);
			getJPanelAddress().add(getJTextFieldFeedAddress(), constraintsJTextFieldFeedAddress);

			java.awt.GridBagConstraints constraintsJLabelZipAddress = new java.awt.GridBagConstraints();
			constraintsJLabelZipAddress.gridx = 1; constraintsJLabelZipAddress.gridy = 4;
			constraintsJLabelZipAddress.ipadx = 7;
			constraintsJLabelZipAddress.ipady = 4;
			constraintsJLabelZipAddress.insets = new java.awt.Insets(5, 21, 5, 0);
			getJPanelAddress().add(getJLabelZipAddress(), constraintsJLabelZipAddress);

			java.awt.GridBagConstraints constraintsJTextFieldZipAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldZipAddress.gridx = 2; constraintsJTextFieldZipAddress.gridy = 4;
			constraintsJTextFieldZipAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldZipAddress.weightx = 1.0;
			constraintsJTextFieldZipAddress.ipadx = 70;
			constraintsJTextFieldZipAddress.ipady = -1;
			constraintsJTextFieldZipAddress.insets = new java.awt.Insets(3, 1, 5, 144);
			getJPanelAddress().add(getJTextFieldZipAddress(), constraintsJTextFieldZipAddress);

			java.awt.GridBagConstraints constraintsJTextFieldSerialAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSerialAddress.gridx = 2; constraintsJTextFieldSerialAddress.gridy = 6;
			constraintsJTextFieldSerialAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSerialAddress.weightx = 1.0;
			constraintsJTextFieldSerialAddress.ipadx = 200;
			constraintsJTextFieldSerialAddress.ipady = -1;
			constraintsJTextFieldSerialAddress.insets = new java.awt.Insets(9, 2, 14, 13);
			getJPanelAddress().add(getJTextFieldSerialAddress(), constraintsJTextFieldSerialAddress);

			java.awt.GridBagConstraints constraintsJCheckBoxSerial = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSerial.gridx = 1; constraintsJCheckBoxSerial.gridy = 6;
			constraintsJCheckBoxSerial.ipady = -4;
			constraintsJCheckBoxSerial.insets = new java.awt.Insets(9, 22, 14, 6);
			getJPanelAddress().add(getJCheckBoxSerial(), constraintsJCheckBoxSerial);

			java.awt.GridBagConstraints constraintsJPanel1 = new java.awt.GridBagConstraints();
			constraintsJPanel1.gridx = 1; constraintsJPanel1.gridy = 5;
			constraintsJPanel1.gridwidth = 2;
			constraintsJPanel1.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanel1.weightx = 1.0;
			constraintsJPanel1.weighty = 1.0;
			constraintsJPanel1.ipadx = 11;
			constraintsJPanel1.ipady = -8;
			constraintsJPanel1.insets = new java.awt.Insets(5, 21, 8, 91);
			getJPanelAddress().add(getJPanel1(), constraintsJPanel1);
			
			java.awt.GridBagConstraints constraintsCodepanel = new java.awt.GridBagConstraints();
			constraintsCodepanel.gridx = 1; constraintsCodepanel.gridy = 1;
			constraintsCodepanel.fill = java.awt.GridBagConstraints.VERTICAL;
			constraintsCodepanel.weightx = 1.0;
			constraintsCodepanel.weighty = 1.0;
			constraintsCodepanel.insets = new java.awt.Insets(45, 45, 49, 45);
			getJPanelAddress().add(getCodepanel(), constraintsCodepanel);	
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelAddress;
}

/**
 * Return the JPanelAddressTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelAddressTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelAddressTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelAddressTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelAddressTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelAddressTitleBorder.setTitle("Addressing");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelAddressTitleBorder;
}


/**
 * Return the JPanelAddressUsage property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelAddressUsage() {
	if (ivjJPanelAddressUsage == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder2.setTitle("Address Usage");
			ivjJPanelAddressUsage = new javax.swing.JPanel();
			ivjJPanelAddressUsage.setName("JPanelAddressUsage");
			ivjJPanelAddressUsage.setBorder(ivjLocalBorder2);
			ivjJPanelAddressUsage.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxSPID = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSPID.gridx = 2; constraintsJCheckBoxSPID.gridy = 2;
			constraintsJCheckBoxSPID.ipadx = 35;
			constraintsJCheckBoxSPID.ipady = -4;
			constraintsJCheckBoxSPID.insets = new java.awt.Insets(1, 1, 1, 20);
			getJPanelAddressUsage().add(getJCheckBoxSPID(), constraintsJCheckBoxSPID);

			java.awt.GridBagConstraints constraintsJCheckBoxGEO = new java.awt.GridBagConstraints();
			constraintsJCheckBoxGEO.gridx = 1; constraintsJCheckBoxGEO.gridy = 1;
			constraintsJCheckBoxGEO.ipadx = 34;
			constraintsJCheckBoxGEO.ipady = -4;
			constraintsJCheckBoxGEO.insets = new java.awt.Insets(5, 8, 1, 1);
			getJPanelAddressUsage().add(getJCheckBoxGEO(), constraintsJCheckBoxGEO);

			java.awt.GridBagConstraints constraintsJCheckBoxSUB = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSUB.gridx = 1; constraintsJCheckBoxSUB.gridy = 2;
			constraintsJCheckBoxSUB.ipadx = 34;
			constraintsJCheckBoxSUB.ipady = -4;
			constraintsJCheckBoxSUB.insets = new java.awt.Insets(1, 8, 1, 1);
			getJPanelAddressUsage().add(getJCheckBoxSUB(), constraintsJCheckBoxSUB);

			java.awt.GridBagConstraints constraintsJCheckBoxFEED = new java.awt.GridBagConstraints();
			constraintsJCheckBoxFEED.gridx = 2; constraintsJCheckBoxFEED.gridy = 1;
			constraintsJCheckBoxFEED.ipadx = 35;
			constraintsJCheckBoxFEED.ipady = -4;
			constraintsJCheckBoxFEED.insets = new java.awt.Insets(5, 1, 1, 20);
			getJPanelAddressUsage().add(getJCheckBoxFEED(), constraintsJCheckBoxFEED);

			java.awt.GridBagConstraints constraintsJCheckBoxSPID1 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSPID1.gridx = 1; constraintsJCheckBoxSPID1.gridy = 3;
			constraintsJCheckBoxSPID1.gridwidth = 2;
			constraintsJCheckBoxSPID1.ipadx = 62;
			constraintsJCheckBoxSPID1.ipady = -4;
			constraintsJCheckBoxSPID1.insets = new java.awt.Insets(1, 8, 33, 82);
			getJPanelAddressUsage().add(getJCheckBoxSPID1(), constraintsJCheckBoxSPID1);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelAddressUsage;
}

/**
 * Return the JPanelAddressUsageTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelAddressUsageTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelAddressUsageTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelAddressUsageTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelAddressUsageTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelAddressUsageTitleBorder.setTitle("Address Usage");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelAddressUsageTitleBorder;
}


/**
 * Return the JPanelRelayUsage property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelRelayUsage() {
	if (ivjJPanelRelayUsage == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder3;
			ivjLocalBorder3 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder3.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder3.setTitle("Function Usage");
			ivjJPanelRelayUsage = new javax.swing.JPanel();
			ivjJPanelRelayUsage.setName("JPanelRelayUsage");
			ivjJPanelRelayUsage.setBorder(ivjLocalBorder3);
			ivjJPanelRelayUsage.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxRelay1 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay1.gridx = 1; constraintsJCheckBoxRelay1.gridy = 1;
			constraintsJCheckBoxRelay1.ipadx = 24;
			constraintsJCheckBoxRelay1.ipady = -4;
			constraintsJCheckBoxRelay1.insets = new java.awt.Insets(5, 23, 1, 20);
			getJPanelRelayUsage().add(getJCheckBoxRelay1(), constraintsJCheckBoxRelay1);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay2 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay2.gridx = 1; constraintsJCheckBoxRelay2.gridy = 2;
			constraintsJCheckBoxRelay2.ipadx = 24;
			constraintsJCheckBoxRelay2.ipady = -4;
			constraintsJCheckBoxRelay2.insets = new java.awt.Insets(2, 23, 0, 20);
			getJPanelRelayUsage().add(getJCheckBoxRelay2(), constraintsJCheckBoxRelay2);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay3 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay3.gridx = 1; constraintsJCheckBoxRelay3.gridy = 3;
			constraintsJCheckBoxRelay3.ipadx = 24;
			constraintsJCheckBoxRelay3.ipady = -4;
			constraintsJCheckBoxRelay3.insets = new java.awt.Insets(0, 23, 1, 20);
			getJPanelRelayUsage().add(getJCheckBoxRelay3(), constraintsJCheckBoxRelay3);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay4 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay4.gridx = 1; constraintsJCheckBoxRelay4.gridy = 4;
			constraintsJCheckBoxRelay4.ipadx = 24;
			constraintsJCheckBoxRelay4.ipady = -4;
			constraintsJCheckBoxRelay4.insets = new java.awt.Insets(2, 23, 12, 20);
			getJPanelRelayUsage().add(getJCheckBoxRelay4(), constraintsJCheckBoxRelay4);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelRelayUsage;
}

/**
 * Return the JPanelRelayUsageTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelRelayUsageTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelRelayUsageTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelRelayUsageTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelRelayUsageTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelRelayUsageTitleBorder.setTitle("Relay Usage");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelRelayUsageTitleBorder;
}


/**
 * Return the JTextFieldFeedAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldFeedAddress() {
	if (ivjJTextFieldFeedAddress == null) {
		try {
			ivjJTextFieldFeedAddress = new javax.swing.JTextField();
			ivjJTextFieldFeedAddress.setName("JTextFieldFeedAddress");
			ivjJTextFieldFeedAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldFeedAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldFeedAddress;
}

/**
 * Return the JTextFieldProgAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldProgAddress() {
	if (ivjJTextFieldProgAddress == null) {
		try {
			ivjJTextFieldProgAddress = new javax.swing.JTextField();
			ivjJTextFieldProgAddress.setName("JTextFieldProgAddress");
			ivjJTextFieldProgAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldProgAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 254) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldProgAddress;
}

/**
 * Return the JTextFieldSPID511 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSerialAddress() {
	if (ivjJTextFieldSerialAddress == null) {
		try {
			ivjJTextFieldSerialAddress = new javax.swing.JTextField();
			ivjJTextFieldSerialAddress.setName("JTextFieldSerialAddress");
			ivjJTextFieldSerialAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldSerialAddress.setEnabled(false);
			ivjJTextFieldSerialAddress.setEditable(true);
			// user code begin {1}

			ivjJTextFieldSerialAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 999999999) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSerialAddress;
}

/**
 * Return the JTextFieldSPIDAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSPIDAddress() {
	if (ivjJTextFieldSPIDAddress == null) {
		try {
			ivjJTextFieldSPIDAddress = new javax.swing.JTextField();
			ivjJTextFieldSPIDAddress.setName("JTextFieldSPIDAddress");
			ivjJTextFieldSPIDAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldSPIDAddress.setText("1");
			// user code begin {1}

			ivjJTextFieldSPIDAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(1, 65534) );
			ivjJTextFieldSPIDAddress.setText("6");
			ivjJTextFieldSPIDAddress.setEnabled(false);
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSPIDAddress;
}

/**
 * Return the JTextFieldSubAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSubAddress() {
	if (ivjJTextFieldSubAddress == null) {
		try {
			ivjJTextFieldSubAddress = new javax.swing.JTextField();
			ivjJTextFieldSubAddress.setName("JTextFieldSubAddress");
			ivjJTextFieldSubAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldSubAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSubAddress;
}

/**
 * Return the JTextFieldUserAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldUserAddress() {
	if (ivjJTextFieldUserAddress == null) {
		try {
			ivjJTextFieldUserAddress = new javax.swing.JTextField();
			ivjJTextFieldUserAddress.setName("JTextFieldUserAddress");
			ivjJTextFieldUserAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldUserAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldUserAddress;
}

/**
 * Return the JTextFieldZipAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldZipAddress() {
	if (ivjJTextFieldZipAddress == null) {
		try {
			ivjJTextFieldZipAddress = new javax.swing.JTextField();
			ivjJTextFieldZipAddress.setName("JTextFieldZipAddress");
			ivjJTextFieldZipAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldZipAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 16777214) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldZipAddress;
}

private javax.swing.JLabel getTimeoutJLabel() {
	if (ivjTimeoutJLabel == null) {
		try {
			ivjTimeoutJLabel = new javax.swing.JLabel();
			ivjTimeoutJLabel.setName("TimeoutJLabel");
			ivjTimeoutJLabel.setText("Timeout");
			ivjTimeoutJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTimeoutJLabel;
}
/**
 * Return the JComboBox1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getTimeoutTextField() {
	if (ivjTimeoutTextField == null) {
		try {
			ivjTimeoutTextField = new javax.swing.JComboBox();
			ivjTimeoutTextField.setName("TimeoutTextField");

			// user code begin {1}
			ivjTimeoutTextField.addItem("7.5 minutes");
			ivjTimeoutTextField.addItem("15 minutes");
			ivjTimeoutTextField.addItem("30 minutes");
			ivjTimeoutTextField.addItem("60 minutes");
			ivjTimeoutTextField.addItem("2 hours");
			ivjTimeoutTextField.addItem("4 hours");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTimeoutTextField;
}

/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{

	return o;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Insert the method's description here.
 * Creation date: (6/5/2002 11:40:07 AM)
 */
private void initAddressJComboBoxes() 
{

}


/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	// user code end
	getJTextFieldZipAddress().addCaretListener(this);
	getJTextFieldSPIDAddress().addCaretListener(this);
	getJTextFieldFeedAddress().addCaretListener(this);
	getJTextFieldProgAddress().addCaretListener(this);
	getJTextFieldSerialAddress().addCaretListener(this);
	getJCheckBoxSerial().addActionListener(this);
	getJCheckBoxRelay4().addActionListener(this);
	getJCheckBoxRelay3().addActionListener(this);
	getJCheckBoxRelay2().addActionListener(this);
	getJCheckBoxRelay1().addActionListener(this);
	getJCheckBoxFEED().addActionListener(this);
	getJCheckBoxSUB().addActionListener(this);
	getJCheckBoxGEO().addActionListener(this);
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DCUEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(357, 363);

		java.awt.GridBagConstraints constraintsJPanelAddress = new java.awt.GridBagConstraints();
		constraintsJPanelAddress.gridx = 1; constraintsJPanelAddress.gridy = 1;
		constraintsJPanelAddress.gridwidth = 2;
		constraintsJPanelAddress.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelAddress.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelAddress.weightx = 1.0;
		constraintsJPanelAddress.weighty = 1.0;
		constraintsJPanelAddress.ipadx = -10;
		constraintsJPanelAddress.ipady = -5;
		constraintsJPanelAddress.insets = new java.awt.Insets(4, 5, 2, 6);
		add(getJPanelAddress(), constraintsJPanelAddress);

		java.awt.GridBagConstraints constraintsJPanelAddressUsage = new java.awt.GridBagConstraints();
		constraintsJPanelAddressUsage.gridx = 1; constraintsJPanelAddressUsage.gridy = 2;
		constraintsJPanelAddressUsage.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelAddressUsage.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelAddressUsage.weightx = 1.0;
		constraintsJPanelAddressUsage.weighty = 1.0;
		constraintsJPanelAddressUsage.ipadx = -10;
		constraintsJPanelAddressUsage.ipady = -13;
		constraintsJPanelAddressUsage.insets = new java.awt.Insets(3, 5, 4, 2);
		add(getJPanelAddressUsage(), constraintsJPanelAddressUsage);

		java.awt.GridBagConstraints constraintsJPanelRelayUsage = new java.awt.GridBagConstraints();
		constraintsJPanelRelayUsage.gridx = 2; constraintsJPanelRelayUsage.gridy = 2;
		constraintsJPanelRelayUsage.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelRelayUsage.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelRelayUsage.weightx = 1.0;
		constraintsJPanelRelayUsage.weighty = 1.0;
		constraintsJPanelRelayUsage.ipadx = -10;
		constraintsJPanelRelayUsage.ipady = -12;
		constraintsJPanelRelayUsage.insets = new java.awt.Insets(3, 2, 4, 6);
		add(getJPanelRelayUsage(), constraintsJPanelRelayUsage);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	initAddressJComboBoxes();
	
	// user code end
}

/**
 * This method must be implemented if a notion of data validity needs to be supported.
 * @return boolean
 */
public boolean isInputValid() 
{

	return true;
}


public boolean isRelaySelected()
{
	for( int i = 0; i < getJPanelRelayUsage().getComponentCount(); i++ )
		if( getJPanelRelayUsage().getComponent(i) instanceof JCheckBox )
		{
			JCheckBox bx = (JCheckBox)getJPanelRelayUsage().getComponent(i);
			
			if( bx.isSelected() )
				return true;
		}
		
	return false;
}


/**
 * Comment
 */
public void jCheckBoxSerial_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	for( int i = 0; i < getJPanelAddress().getComponentCount(); i++ )
	{
		java.awt.Component c = getJPanelAddress().getComponent(i);

		if( c.equals( getJTextFieldSerialAddress() ) )
		{
			c.setEnabled( getJCheckBoxSerial().isSelected() );
		}
		else if ( c.equals( getJCheckBoxSerial() ) )
		{
			//do nothing
		}
		else if( c instanceof javax.swing.JPanel )
		{
			javax.swing.JPanel p = (javax.swing.JPanel)c;
			for( int j = 0; j < p.getComponentCount(); j++ )
				p.getComponent(j).setEnabled( !(getJCheckBoxSerial().isSelected()) );

		}
		else
			c.setEnabled( !(getJCheckBoxSerial().isSelected()) );
	}


	
	fireInputUpdate();

	return;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame = new java.awt.Frame();
		LMGroupExpressComEditorPanel aGroupTypePanel;
		aGroupTypePanel = new LMGroupExpressComEditorPanel();
		frame.add("Center", aGroupTypePanel);
		frame.setSize(aGroupTypePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main()");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	if( o instanceof com.cannontech.database.data.device.lm.LMGroupExpressCom )
	{
	}


}

public void setDCUType(String type)
{
	if(type == "SA-305")
	{
		getCodepanel().setVisible(false);
		
		//Group Address
		ivjJLabelSubAddress.setText("Group Address");
		ivjJLabelSubAddress.setVisible(true);
		ivjJTextFieldSubAddress.setVisible(true);
		//Utility Address
		ivjJLabelSPID.setVisible(true);
		ivjJTextFieldSPIDAddress.setVisible(true);
		//Division Address
		ivjJLabelFeedAddress.setVisible(true);
		ivjJTextFieldFeedAddress.setVisible(true);
		//Substation Address
		ivjJLabelZipAddress.setVisible(true);
		ivjJTextFieldZipAddress.setVisible(true);
		
		getJPanelAddressUsage().setVisible(true);
		getJCheckBoxSerial().setVisible(true);
		getJTextFieldSerialAddress().setVisible(true);
		
		//Rate Address
		getJPanel1().setVisible(true);
		
		//Function Usage
		ivjJCheckBoxRelay4.setVisible(true);
		getJPanelRelayUsage().setVisible(true);
	}
	
	if(type == "SA-205")
		{
			getCodepanel().setVisible(false);
			
			//Group Address
			ivjJLabelSubAddress.setText("Operational Address");
			ivjJLabelSubAddress.setVisible(true);
			ivjJTextFieldSubAddress.setVisible(true);
			//Utility Address
			ivjJLabelSPID.setVisible(false);
			ivjJTextFieldSPIDAddress.setVisible(false);
			//Division Address
			ivjJLabelFeedAddress.setVisible(false);
			ivjJTextFieldFeedAddress.setVisible(false);
			//Substation Address
			ivjJLabelZipAddress.setVisible(false);
			ivjJTextFieldZipAddress.setVisible(false);
		
			getJPanelAddressUsage().setVisible(false);
			getJCheckBoxSerial().setVisible(false);
			getJTextFieldSerialAddress().setVisible(false);
		
			//Rate Address
			getJPanel1().setVisible(false);
			
			//Function Usage
			ivjJCheckBoxRelay4.setVisible(true);
			getJPanelRelayUsage().setVisible(true);
			
		}
		
		if(type == "SA Digital")
		{
			//Group Address
			ivjJLabelSubAddress.setText("Group Address");
			ivjJLabelSubAddress.setVisible(false);
			ivjJTextFieldSubAddress.setVisible(false);
			//Utility Address
			ivjJLabelSPID.setVisible(false);
			ivjJTextFieldSPIDAddress.setVisible(false);
			//Division Address
			ivjJLabelFeedAddress.setVisible(false);
			ivjJTextFieldFeedAddress.setVisible(false);
			//Substation Address
			ivjJLabelZipAddress.setVisible(false);
			ivjJTextFieldZipAddress.setVisible(false);
		
			getJPanelAddressUsage().setVisible(false);
			getJCheckBoxSerial().setVisible(false);
			getJTextFieldSerialAddress().setVisible(false);
				
			//Rate Address
			getJPanel1().setVisible(false);	
			ivjJTextField11.setVisible(false);
			ivjJTextField1.setText("");
			ivjJTextField12.setText("");
			getHyphen1().setVisible(false);
			getCodepanel().setVisible(true);
			
			//Function Usage
			ivjJCheckBoxRelay4.setVisible(true);
			getJPanelRelayUsage().setVisible(false);
			
			getTimeoutTextField().setVisible(true);
			getTimeoutJLabel().setVisible(true);
			
		}
		
		if(type == "Golay")
		{
			//Group Address
			ivjJLabelSubAddress.setVisible(false);
			ivjJTextFieldSubAddress.setVisible(false);
			//Utility Address
			ivjJLabelSPID.setVisible(false);
			ivjJTextFieldSPIDAddress.setVisible(false);
			//Division Address
			ivjJLabelFeedAddress.setVisible(false);
			ivjJTextFieldFeedAddress.setVisible(false);
			//Substation Address
			ivjJLabelZipAddress.setVisible(false);
			ivjJTextFieldZipAddress.setVisible(false);
		
			getJPanelAddressUsage().setVisible(false);
			getJCheckBoxSerial().setVisible(false);
			getJTextFieldSerialAddress().setVisible(false);
		
			//Rate Address
			getJPanel1().setVisible(false);
			
			ivjJTextField11.setVisible(true);
			ivjJTextField1.setText("");
			ivjJTextField12.setText("");
			getHyphen1().setVisible(true);
			getCodepanel().setVisible(true);
			
			//Function Usage
			ivjJCheckBoxRelay4.setVisible(false);
			getJPanelRelayUsage().setVisible(true);

		}
	
	
}

}
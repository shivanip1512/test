package com.cannontech.dbeditor.wizard.device.lmprogram;

/**
 * Insert the type's description here.
 * Creation date: (8/1/2002 3:39:47 PM)
 * @author: 
 */
import com.cannontech.common.util.StringUtils;
import com.cannontech.database.db.device.lm.LMProgramDirectGear;
 
  public class MasterCycleGearPanel extends GenericGearPanel {
	private javax.swing.JComboBox ivjJComboBoxHowToStop = null;
	private javax.swing.JComboBox ivjJComboBoxWhenChange = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeDuration = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangePriority = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeTriggerNumber = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldControlPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldCyclePeriod = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldPercentReduction = null;
	private javax.swing.JLabel ivjJLabelChangeDuration = null;
	private javax.swing.JLabel ivjJLabelChangePriority = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerOffset = null;
	private javax.swing.JLabel ivjJLabelControlPercent = null;
	private javax.swing.JLabel ivjJLabelCyclePeriod = null;
	private javax.swing.JLabel ivjJLabelHowToStop = null;
	private javax.swing.JLabel ivjJLabelMinutesChDur = null;
	private javax.swing.JLabel ivjJLabelPercentReduction = null;
	private javax.swing.JLabel ivjJLabelWhenChange = null;
	private javax.swing.JPanel ivjJPanelChangeMethod = null;
	private javax.swing.JTextField ivjJTextFieldChangeTriggerOffset = null;
	private javax.swing.JCheckBox ivjJCheckBoxRampIn = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampInPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampInInterval = null;
	private javax.swing.JLabel ivjJLabelRampInPercent = null;
	private javax.swing.JLabel ivjJLabelRampInPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampInSec = null;
	private javax.swing.JLabel ivjJLabelRampOutInterval = null;
	private javax.swing.JLabel ivjJLabelRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampOutPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampOutSec = null;
	private javax.swing.JTextField ivjJTextFieldRampInInterval = null;
	private javax.swing.JTextField ivjJTextFieldRampOutInterval = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == MasterCycleGearPanel.this.getJCheckBoxRampIn()) 
				connEtoC1(e);
		};
	};
/**
 * MasterCycleGearPanel constructor comment.
 */
public MasterCycleGearPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	if (e.getSource() == getJComboBoxWhenChange()) 
		jComboBoxWhenChange_ActionPerformed(e);
	if (e.getSource() == getJComboBoxHowToStop()) 
		connEtoC10(e);
	// user code end
	
	// user code begin {2}
	// user code end
}
/**
 * connEtoC1:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxRampIn_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JComboBoxHowToStop.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		rampItOut(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out") == 0);
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G18F635B0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8FDCD447353FE9C89FE9CCEBDB5A7872ECE363A6713D5804B6B46597E9EB9B1B1256B626B10DE9ED9EFDB50909A42589CDC8CB6AE581C505000A72D7DD17C5C191974584818D88A898D4229BC38CC9D85905DDDC58F539889A123CB3B3F74E7D435DE5C9DEFE9F4B67F3581D6F1CF3661CB3FF6E4C5C39F7055C2DB353D30C39021012AEC8FF2F258842341902E07FFF62C79CCB7A73AC2320785B86
	34CE78C1C39AFCE6AC1DE50C3C5AE04C91AE2F4B00F4B1C98F980CF970FD0370493A70EB61CB00F23AA1EFCDC46F0B414BA97571F2D6513431B893BEDF81B281568CB48DA8C7A8AC4E17F09724DF113E93CA812D1D0F931EB1CB3E82DFA471D5C0DE83D0B26559DFDCAC654F04B46109064F850FB35E2570391ADAF7CDED0D4457755559C262AF379833C8D98A7D1C1A1FE032AE6953A45CCA8311AA6CBBF28CBE6BBB4E779D6A718ED4765887873D03223347D569B867F438C52F3FF244FD596EF7D4BA1C975DBD
	4ECA4F004F6F6D735B87EAEB0F5B07C4273F69D20F47F954E977F758871D9EC1D87C847161E6CB86558FBEC05A71A40DCFA909DBB1FC2F86EAFF127B71E0D63DE4E7447959C25C2CF5817D187DA433FF4113329FCB9D1529E34B087E77E93D9039CCC8B783B1DBEEAD66364CDB46ED29B7935EA4A27754ACE359D39CCFADA1F88324BB01FCCFF19B8F6E60B6F6FE78C3A169DC23B1BB000D61CFB15BA21F12ED1CB1541BDAC05B4E77AE107A0F073C1C27E799ADC02DC0AE20F020A25AE6BD3E1D7059F8CEEC728E
	8CF8879BFD3E439E077F3857617440775ADA481130D34E9E2F5FA1882CDD5EE629503107534C2755ED1290736DED013723B9276E90C471B5E33A0EEFD18F1B0CD1120E5827E55F121EA6F17BB22D5BE570BDC50AB54327D33CFE390C333AB2D11C245BA1AFF2B90FF367AB5C1676341B051C2AA65A673436CC7FD90DB1B7DE6ABB7132ADAC46578D1198F782AE82CD85B2G4D87DA9A4FE3FC37EF5FC4B1EE03FE609F34FBCE8F1F73597D6261E137476174CB31F694870B359EB1B97F2465D8DCE66FD35651123B
	8E6B46E5496C9DC66199960F7CE764383032EF8FD8F64DB3635B46ABD80711342F34BF232D5BFBA85E750C36EE8F1BF95DFAA0EFA190639F21FD2B7AD92D1E2BA85E7C2CD64F6A922E4786F951C02CFE4B074978D87C17D9469A208EA097D0B81081A87AAF3C0ED3AE6C89319FF5A86A17495EF3E193FCBAC7C53F3DEDF0C8348F76B84F587DEE7BB90FF3C810F86E3DC062FACEA597CB7BF78F14F154B968745BC537F790345B871C501806984F039756919E3F13665A5C83CEA8E040A7F03D0FDE58C0E287236B
	DBBE07DDF44A9CAC7FCF97C81B38E8BF839AC181FC4FC8A0717AB19DF397037F09FF6131BAF311E06D106FC860F169722F074FB720F1BBBD35354D6E9EE2065DFF09375108D2F23D9BCD60FD7259CE5E761A333EABD4BC5C285B7688D97E4A5AD17DDF35ED6F5BD427632F7C9A3A3D34F3127DA094A2B64BFD6D754F250CD4691345F77E88E923E16057CC20F9FF65B13E41EFE2ED6F30FD4849DB5BC9BFB49427C30EB8630D98A2579267C56720586C74B9879D70E5C82A6B7F98DAAD3743DEAF36116FD01C0CCB
	CD50D006903FEDE89D43C10732D5737CBBE93EDD947D6EF343227334D3945D03FD327C8F29ADC32AA1EFC872753ED1626BE270B181C8F80E7B5AA0EED03427F62F777C304FC6FA0A54AEFFC62F3F3940DF719C2F7F3B4D24BDF4E0FA9ECD4B792D6649569D51B5393158BE69B2D2A7414B4A78280478150269FF23E99F7A19DD52A96877257F8BE2E51451B2A6E37BE4083501FD43015BF06D30FE9BEE9856EF43C7060337519343FAED14653DB5CC66AE5E11C1C51BBFBBCC463B9E6F602013F6BC9491589C78D9
	9B7143BD68965FF6BB7A1C62E977E5A74C951FA3ED77E1BA26CE076FF31E636361C8899F8FAD177FD31877C1316EFCE97AADF546346725EB717372F848ECFA77A269CBCE0FF3G8255649D9E9499EE276335048F2532F854FE1B48169DEBF2B9FB4E9F760E1E02EBC15BE0051DFAD349BEBA1C7EDE2FFF4069A86B37DF34D75AC744CADA9B150DB43B05FCAFB76D5EFD4824B7ED2F68D76B7E20D12334BD30563A72B365D6BE9E3EF40978D5837E3683B91E67E3449FAF12FCBEC6C883E1135763E1D582F9314F13
	F8BFD01A2B08615873ECFDA53733DF0E64103AF7DE98F642A5198CB2EFB8AF716B6A48FACD5E993BE7D83EDEBFBA3296BEBD0A7109618BC6756B623723242F1EC77D3F9BDDA9106BAE53495ACE241D6874795D83B01C1381D7DA67BDDA2CDC6765A4429C857CF04067A89013FDF99371D52FBAECFFA3BA22CB78BAF09A484C860A1574E47C0D45E4A6650B4735569E44D2CB8976A88CG572471B964719C65FA51B1D42D5BEE89AD1574A77DCDBB372E7C10684DFF8156CCAF703A6D38249C7F9B07063CBDEEBA35
	11623B621232CDB3AC6D729A786CF57B07E01E6DF00E72BADAF31958CA66BE92AC457976DD870571F339963AC265175726915A9EED5EA618FE35C2B5B7E117BF63F60E88BC8E9F9DD12EB7E3324B0DEB8344217E8566FF578BF29C3AE1AD47EC2A9BBDA2FC5A35B31D9D3AFB462D1B1BB613D891FBE63C00EB52B252BE97C1BA9EA86D45D9C6B6BF7E931D9F93DB0A81338131BE747582E59F1A7AA23B6EC641A79BCFDAADFB4978BA6951035745287D90FCFE36910357454D9B9AA4BB975CF133D07F499A5DF5F5
	F8F62EB176C5D68789AFAA6AA26C2DD491C8DA476ED5366FF9F1E5815BF7FD9253511124ED5F6BBFA27177GBEA509376FEBAE2FD334EFD8F343F2208FC68F3C76FD184A4689A97D5A0769FC1C907838F872E3D2A79120B392A896A88EC8F8091771638FA7DC0F360C86D90F36EE66EBBB93682C86EA856AFA097967FBE97C5C082D3D6A4A697C75A536765A0D78D90AAFD360521A0C36C512EE7FBB2C357E4167B1CF16E85716161755E5B6E852CC6EEF636436E8528E0D9CEB03074E94713EC75A59E86550884C
	91EAEB719AA97527DF96E4C87DFE6CE53EA63A6593B22EC6C1FAA150B22034FF42F886548C647AA72F132CB13DB1C7DDA701869CF95E4D4AFCDCA0F604036E69283FFFACCB512EBA3C6EC1915BD45EC764DA63753B7B5C039CAB26D80F57CFA7B78CFB7B6340732E77BF561FF7B9BE561FF775FF9CFC6D607FB8503C0C4D73BF20E357EC70EFBE9043DEA821EBD2C8A7A0F6AB3DDE252D18E54CDF41317B69752A9E52B6448A37934C8569A9ABF8BBEBACA7F3D983246783452FA0FC862395289D48839481948D34
	98A8894814E2B0B683F58305834D810A85DA8614E984D920F6A09F90AB231B16B18D5211C08B019200F2D2019728834887B48DA88AE891D0A2D0EE1A41D88DE483A257EA91BEA30022009681A582652673B2324B3AD3189F246CC0F36BD849DEE22BB60F7878D9666DA4EEA4061F471A00445C2A6397298FDE9791127D719A9BC83D05EB7C35CAF52BD716CFAA0754E53B0607453A1F461A0C513B0258DCA2307D7ED21D3C8D1FB19E243F25FF8EF1A6C44617F29D1C5C7FA07DF6B30D019C8FA54FC6202D9A0C4C
	BD32831435DB7A5C81142549A365248A77EFA232BE98D61CC3F4F0EC360BF6A96FC91114B7EE9DF642BE6094D87DEC9036D8D6CBBCAD2237298A6B70018265F522BA1D55F32B7459A5FD7A52657A1776BBBE89BCBE5E7D097E7898738971ED48BB6C6FF1EA4740FBBF4947BCF934EF931D83448DE9BDC165C53B9F5612DA790728BC4B8BA43F6413606B5F27691CE694534F5274A50C61454D24FC1F5F596B7443AA0BADE70518F4F20F6CABF40C8E036F530098FF16054C456D9EF75FA01921F7F25E2B69B8AD2C
	04F1EBA5677D1105DC03BC76CB5EE138D8CDDFC97896296EE9B58366811A32125585130BABD515718EAFA3090E7BF1401B88442E6D5F236B34DE18A7035B27FD4E9EA1EA95612D5A4E4BB1C13A9A4886A482C52C6276BD33124C330E355B4FB9BD90DF516F75401434870AE47946F452DF0EB51D7639870F381D9E071AC9EE072D1BB4FCE40186DCEE2F0373643F37CEAECB19AD655F5E1F0D792D5E911B77346875C9F9C75C6B29FE6F40B9AF4CD664ECA97F86DF113AFC4940D3CE47B0DBB1B33EB15FA6ACE39C
	0B4473334B34AC3A4EE8F2415C55F95CA93AE4BFCED9641811497C49E1D195B30FC593B3B5937A9BCE5B011E1E53D06D0CE716A5C74BF35A594372E2D8B9B668114AE268FD9818CDE3B90BAD9B35BA4671BCEF2131D72FD1243C4C528DAA7936C16E894B5FDE1ABF5EDFE4E2BC0D25F97ABA082B121E2E52EC8D8F38AA658D33B2D43E368DF2B7984F3452DC0DBC4FE76B3CDB4B156B3CE46883E41DE74AB0C86B404776A8732BB3D83E8B7377566A650FE1FE42EEBD7D53B07F63DDFA79864CAF77AA7323A57DF1
	18FFD709DE7909187F08D9CFFF46EA03116D31EC592A9CF70AD7337C8678342D66BA8C8775F4F8B03F5D2CE743944CFFE81B1EFC8466FFC957465918FF21D7199FA359389473CBF56513B07F7DC23D7C4CB5BCBFCA57FE9366B7646949D7E3FE162E7ED64CAFAF54333F8B73679668497BA01F4D611F206B2FB0C8C7A0B62D092E93A09D0D585F1A78DCFFBEE2C9D4B6F72D41D883548E44F634F89FDFDEE2024FC1670889379A1A5DF0F5A1B7454A2A2DFBABCC557B2C65ECEFE06608F2EF20E6CDE5403D01E9EB
	59F54BA0FDC62CAD21F3A4B2E6506B217447EC3851C2660CD8BE0C67BE6FA0596EE8EFB9E27B20313D6D680963ADA7EC82DF37D6F51335A72EDB09D0ED6DD13F5BF1585E57CE2F2AEC5D7AF7FA6DA576AD81BB58BED0993DE71E1B89B186EA86E23E0DEE677BD9F3EE3DD9E81FF2D8777CC41C2D5C581549FC1AA2FD12FD0F48215E54407EE5EFB7697BE7BB59A13B47ECFEFBBB37B98674A7E612EBF65D8EE57BA0BA5F03FF1570497287D4796BA4F9B97FA6D5BE7137D4A57F20AABFDDA14FE2732BD29E1B64DF
	C58A1E9FD8831EAD294FE2B16916BE4BFEEF96E2EB4FC8FBFD4F77668B3A7B8DF4F4E67E7F31BCC372E1FA961F4BFC7C6AF6C131C7F85E53D7595FC3D65D153DE458A79B96F81961FB009B2DFC8FB09974B04CDD4B316AD7B83623121767C16C873B78FE4742D7388DFD1EC0FBA5526CC3AA375B4B4B4848667A1EAE617A9A90FB05E2645AB61A4D4BF83EBCC0FC682C03491D594A6DDD124D5BF4171B1E374901B19D4817434B7843C1DEC6B8E2D71B39FD71082DB1F37BAC6BB876D3443A56F17BCA4B0A756D43
	ABB0131D5D4BE5A3D0DF17195B32G31EF94F24C3A1EE34B513E8844C672383E8508B597F2ACED83473A912BC76C3982DE0638014FEFDFAEA077A4FAE1524A664F9B285CE248DF0ABC37B5919E919CE3E366CB34ABD467927E4C66E61D362F6C1F2B24CFC239A0C3E82354E74A607BF978FCF9450A955278D0C8661FAE2F5FFD99EC32FBC8B8BB3CC3EEB67FE4B66E24B612FA984B65E356836FAA47631C9B7369BE236E192FDC569F23F28D1A3D5A65EB085EE50027EDB4C8FBEADBB2489A7F0C3DFF7C9D82GBB
	7CDE1F53AFDEE2A83DBBA42DAFD784BDBB25C7EC1FF4869D13ADD0BE371F6137D05C2A40597EE9E5A9BF23D68FF9B30118AF4519247F24EDB298CDC0B5C09DC0BE20291B38EFFD99D6E1027DC81B57578E0BDD0FE27B0E7937FE4727BBF77453D5FC7C0C3A673F0468AFA624843AD7B2F3932B1FF97CF33119624C3FBB3308FF89101719E7B0DA01DA013A0044BC6E5F1D99954CBFD2BD0D22E86FF151BBC65CB9F293C7064942107976BF655A7B786120F3C69E33A3B2CFFF5FE8BE600B01629579C2BE3477FC3D
	BD24C2AB0FDF99645783F5A8789C70FDD4D7EE30164BCD057C19C0D18A3ED8783EC4D76EB92B56278460CBABE03C79857ABED5G5EGE4D3643B607BD801DE99776CD23609E940E3G0A16F897681441641CDEAE97A771A4AAF8B38A8D46E2A0EB210CB1393F60DEFFF361F85D1D00F900260C135BD0220DC584704C1678E2F4F491DA8878D2CDDE9224B30B74E2716ED6E599A6602986EA15F83B0A744B70819E86B4DD11BFC707170D89B97D246F4FABE2E3C29E62960AA7A9F0B6D61C2357C6123696C3BBAD66
	FB47F1873571183D59E00C594C4ADD38D95F562500A7E972B23740F833C5AF9E61E6DED755D2FE2B022F8B3E7B004236E86BAA5B2CECD353A1FF8E50BC09EF5116C0ED6ABE155CB260CB864A594A78ADDB8349FD37174B5568703483568DA4EE555AB97E6CCFB8704C1078A2F5F4911A8F78E2CDDEBC248513DE8CEFAC5416118BFCE592EF3DC93F0C8E409D1A3CD1C8CF55ADA38163B6D34A0FD270454277A5C089A62D7FE3F94AF827EDB3987301AA36B13E06ED01625DD6281433811F8BE8CC621F96D04E09F2
	869D1EE84096G45ED535A79E201B606094013E1E6FC45E67D98DA81EF5664F5C25A2341587C68FD32741156BBE1CDE6C13326BC82931BB23343ED77F87B4C95A6EB0529EAEF39203BA6E47A2EA2CB92697A7927CCFE7DAC3EFD16507CC8C28A394F20F77D1CA2593650AC4FF3B2DD152952FED3A1A9CFB1F52DBCCD7EB7F96961D4F1082EB725EB6DB0192EC9FB438757107B993A73A138229E83FDA74F75BBFBC41B3D8FE592561072F17F19CD13243C9757906748D9A908077BB2BD66F19A98877BD8FD5DCC0A
	136A6EF645776A4F65AC263A2D9C7FDC4BE07E17E6863E1FD01129FFBFE1EF267E7D561A4C607B7C8D19014F399D4DD41EF3E3757E85FA1EA82344E034G3582F58179CA787C6A61CC523649296771F32B96C71F13B7A6DEFEF4D6E0DFFF12B571796858AC3267FF4EAB0A5E81221F633F49A275A5FAFD94146E0BE41198795DFDAE113172B3DBD974BC06331742ECDFA8EDA7412602DF06923ED774964522A19D0B58BD94DB8469F8449E24EB914182F3948B478CF4DDEA05F483E283B58433C15A0358CFEA70FE
	B4E24B73893690524B902B32727B60490825507D2D1CD2987FCBB9F63A097BD10F5837F19F2C8331B83A97B493525108DDD34B4BD80058625D5C66B844AC153C0CC4443C153C0C0C6D9C5BF700E01D1076A116DB45E543907B00E253A1BD9B3179940B027482448CBB68FD9DC8A7A316B6C2E33083669CBBB8F67B81EEF3B5E2AF9E607635A216C6779C26C3BA92318769DE47FCC8AFC26C7DD5F4CD88E9210CE3F7D2AC97529644F2B3F899D644463CBC26D3907B190F6B0BC0AC6B82171D0DD8DEAB4112A01DD3
	4E31265789E601F4BDE2ABE9DDF6C05A03588B05582E900B247EAE0474B24456D23EE4C8676E64587E92EEDF99E2D3A8D68F69F6449E27D8A724FD0835D0FDE1101E09588DF48FA38A5273911B71A637EFB1E291E584AB5B85FDE69747BE227D4886E997E249A65A06A0BD93318F4D63E3EA2058FC60D902FC39653CBE92907B8EADA32D82E2D04131BF3928AD10EEC0EC1F1B5BEC2B607366CD7DE48EE20074FC20F8204C5DB0678132810D8199009682A58365D7F2391DD42E86521DC023C0530122019683A581
	656F01B5BBD0A750689EAE67F2C76ADCC7C83974BA3FDBBD97B1D484BE4FD131FBFCDE260491DF383DB8AFD3700F6948EA4930DBBB6F3AC157F6FEFEC0FB9EA258597235BA58EA6913DC4348E4A5CF1127BCD790689C021256A93E333AB79E22E38554C3649E9CEBA9B69F520B900B26D89C2413904B20E3E826957A1315E355344F56C33A9D31C77AF87B6AC66CF12AAF925231085DC45B7592C8A7A176D88137AF330AE365B8861890E37B18BEC807A376F3AABB8352D108EDB7F37BE291335571B216A0F6D39D
	0FC182E2C2BDAFB79931BFD2FD6DFBE17E3017E353292C8F526108BDC53199101E03588954970D58FC3A271A318F465FFD9C3B7EA0672BC1AC0A169B8E6919087DC07697B1368F9C8B69B84496D1AC9152E9559CBBC0473C9CC817A176DB2A2F9E521D08DD26329EC80FA1B63F0E5BB78D315BA8DF9C2413900B217516399FFC5B0F5707A20255C03A95B1BF45EC1076A0B6C475CD01740C7DEA7BA2A1BD8F31EB1A39AD0B906B2765DADE05EB4B2B9CDBC57D6D00348731B634EF8AE2915856A2903B055A329452
	49087D085A12739A446FB50EFDBD0F5BD70F5875CD3C0C8E4496B77198B890BB00FE7890E37B5E73A03D9031F64A3794524908FD0BE2B9B5B0F728611831056B2BC0EC0C6A9B0374F4443EEC66FCF3904BE557D2C8679EC0DB4C68AFE285142F9E5236836A583BA0BD0A58836CDA8A699908FD176A0B04748244AC14AF8E5289083D0BF1C92B655833B476B6C8FBEA799E7172BC32F7BF8552B3006681AD860A87CA2B03719F28822881289348879486B49DE88ED08C50C22025F5FCBDF0DFAEB9B796E82FDC3AA9
	C99785FE3B72EC6A17B685DE97FCF553446B029BB7915F1CB01F37DD72C9E71EEE5AC44F3B76768EB9F17DE1581403D85B903F2B405643C5BB754F936D23F37EA470B1331E5F8F716CD45F8FF90804D3DA6FBF3813DC1F866C236E016181FAD20A69F90A6A29819D4D28E7D9E160F3D5A934FF7B00F78C7967EED55F2BF9104EDDE6C3FE94720455681F3D1AC1579ACB01AF89085D3B79DD4DC477EE14B46E5E4DC103717995ABD624206F46826ABBAC66553E975236D78D7C8DC08CBBCB57B49EC80F9E643667B7
	695BEEED62369BD0FE2C09574B22035C1F9FB48573A7DD32B3BD00BF42A1037183011DC5E4763CE8512F4BECFA46AC9378738FF1FB6E206B27E6C8F7A016D2496D9EC36CF8A537FB4EA1EE7797ABA732BBBD085D0B4759FD6C003E5D6768BAE8A970A720BD872B38BD452F73FA38D825EE5FAF944A6D7B8FD57A3A1F27FADAC1078D754C5D9138FDAF226B39A940BB95790BC6546D3B0A2E6F22A1FF7E6B5C5EC587F8CC93DF6771FB25F622F64CE32797BFCB034178122A9D9715683763FD74FAE8857E7A866C43
	3B54B67F132EA1DD10AFA24F70AA7D3165FA3A0EB4GDFB4725E37CA9D7B82F21BD93A573AABE3A2BF3302783934015DABCD41BA38052ECF93GCFEE6071DD6E63B615B57278DAAECC54BEC9397CBE2F2DD1DD2E2BD13EE749FC2CEC550F6F913A669501FFCAA30F475957755B1B1F2E0567GDFB472EE3684EEEF2F52B977D260CDC03F320A027935CAE06B12C07D2E78304158A33033522C7CDF14685B7A5F345D1481FF75E1EE2B39D0BF863574FA5E8DFC1E433CCE5EAF61F5920172B714285BC97DE6390FA6
	8730A31746E09E68D800FA3A02DC030629ADC9401B5644796FB02B5B7BFCBAA731C2FEFD930F6BDDEFCE54CE03455553444E842CC25E5B4B74E3F5AF5DB398857EB034AFE2AB396E1F737A69A1E9F61E78F6BC579789FC31C0C2B314594C1E39E0F29B360DBF073CF39B172BGDEF28E3999BEBBD5F2F34D7A31FE082D3500F72C9947DA367FG6928E6AE9F2D39267F06DE5363A0BF9EF912DC7A57459C3AA7D15CE2B0DADBF86C0F39A70ABD0973EA69FBB74809ADAC76A49D5E226D2B6EC14579E7FA5637F918
	3D0502655FB526BD7F2CE2C2BDCEF6E6186AB96E9E9C961DC3CDAE6062791D073565F4785DDE3FDB3C4472DFBD23DB8EE742F286DEAF506831795DFDFDCE7F096101F3F4EF1B719D348560BBA9CD9979395AAC523164D3BD41F85F33ED5133D1E3G63ADB8AA1FDBFE5B659CE42CACAFEF081EA766272964EC6919E6E73F760CA4E90F91AD7C8C65838D5AB31CA4FFB666070DBB23C972E3B0DFAC524BDF0879BD634E08127C25187F35F1E7B8C9FE9266DF9AF7C61564E79E6179AF95E84F0812FC9366B76816DF
	0D79F1A5FA7ADBB17F41A16DB9E2125FF504773702C37A576BAA3A9F63833EB0646DBF249E078DDB64F17801C37AE34313ECDF87F444201E2D3B830F43B5F48FE99970A6A27F9B967538E127E33B69A82C590E723160593E094602ECA170FC218B74FC8566C5A5F8B6AB79107EB81CCB2F45AE60970FF27B6EB687766781BAB64E845EB9C77958382A1047F6B15A5FD0B8513CA3DB88FC9DC9EBB560FBE524F37E81466A8436CE877E62D6EE7F12GEB19C43A16E985BEDBAB377DA45BF70174D444BE2A637E4434
	7233463FA037DC2539DCDEFDB05FD6CFD0B74BC067B615EF091A6B729ABAE7C884BE210D7BF4E71DFE3B7E8535558AFC4D48AB542B5B7553A659F66704362F8BE23B2FCD1E07CAEB0A5E40EDA5116E750D01CCF89BEF97060393350BF50AF69155A617CF30D8C82FD5157F2BG6D624F34DE9781FFDC9B2FD736571AF98C56FE47F82CEEB46B47757BD43E9978BA11F739D99D57AC33BCDEF484183739E8DD06010EE92867290240B1B3523E94833C31487FD5CD7BE0FB0F0910AF3C41637A073A09460BE075EAFD
	C3BBDE7C582C5F07FE477617013F758DEE5FC3057AB1DCCEFD9101AF9CF9ADC56A986EAF15E3F8ED11FE8C3FC377D322C047BC547325A0E354ACEAE3BC70A63DA147DC9D439534ADD85AE17E554EE3B8E3427330FC6E2597436EF66D7C6B2AG6B04FF27F171G7FE8BB37EFCBC9E0FFDEE3EB88600DEC67ED590F31DD02765FBE61184B1FBD5533BF6338F64C0D895037587EFAAE701B0EF37B978598F363E91C5B012F73B837BD066E9B07C1FA9AE2F7B7F1FF669D67E3EEA7B9AEAF0DDB9DC16BE67584F593FF
	DCBB660E942A5B4375EC3D84FCE9A738CFBD4D7A6D7AC33AC7DB8DFC2D489B552CEE57F3F748369734CCE47B5AA0360BA734E36E57032C7B66D0BF26004C54933CDD5CE21E28DD2CD5340B68936AB1F741896D183B2BD03FDDB4317367403F74842F57EB597579A4DC1FCF72D8D9830C972DD43E95783A10772AC2F5DC9FAB13470BA7825871CF2AA79CF4C4201E79C1468BF60FEB9E70AEC07EBACD7BF813358F48CF6B60F175CFB8DE842B576A8E6DF8119EE03C58CC4BEEG7E768E3EDF3FA2AF703E7B4A7C09
	775D3373754F63EC4C9FFF9E27B0DF7FBC0E091EF76167F124B3D179244D74795D0ECE645B0958BB086D21BA8976365BA13A905FCF6DA2F82B13944871BAEA578845BA7919A885760E043564133DGF059654577E29C4B27F56976F824F706D19E77A02C7FB09E27290DEE1FDDE1F7A7E2446E404FC59D5BE992A6FEAE0A355F141D325CFD749CDF00E7562A2A76D6182A2A4B25F30416DD325C3FEF8DDD6E3A5D321C3D66331CE714768CEAC2FD460D15FFC725005F9F5CA36B79691E50FDC8344AF2AF9C5E92D8
	2E3A26423457DA4EF90FB605EA2BB42EB605DE0FF9FBE53FEA774976ED2C8D45BEA677DE35AC776B5D217B15DFB9B93F9C15217BB5E53F6C572CD7E57B9E1A04FD362A504B7B7DEB0AF63DA374B671F20DAC7752455065FED8A74B5DF4A0547EA04D7F8FCC2E6DFFF0D00E65978EA97A612E506DFD2CC116BB356A3377DF432AC90CD507E57BADCD320E9F7A02593F7FGB406FD657C3E6205D04A9BEFEF426B2C5C234D328D7DAD328DB52F07E283133B7E08AC774D125065A20F4AF24B8B03357F832AFEED5EAA
	5B5CE212F58841F46C372AF4383649F2F34D450165C04CDAAE6DF71604DE3757A9562E3513388E5DD1A24BCDB507AEF70B623AD7D697EABBE632313B64F8AE2F10752404F49DE44F4FBC34153FBFFA9466D0119D7CD950A7B713FBC0FA6F6D6B9BF6D78E0BEECFED2D4DADFA1C07255B92527331C574ACA35D4F69604F2F3619C89926B78D469A208EA0D67629ED7CB9BF97E0B35F644FF45E380D6BD87CA65791CBF9F3CE990CE5C08D2778DA6815CA596F5565C17C5E37EFFF05292606473DCAF14D7DE630F8E9
	642E2F12659EF6FD76F1E707BB5431D3EFAC88BCBEC4526BB00B670CFE12CF66451D27F80CD7B6920C4CB5E3901B0B4F57A6A2F6FB91172DB80D75034F8ECFC36CFE3A1EA53644A2B6574C318A9B472CD846B44442F7F3AC9631BC8B470437B816A1920C4CEDEBG8B9C5356C32177770794F31417ABCCC17ACD8D69B7FB7717CB678794F314F2CB68F227945775DF75CD2E3F8F57487DFD7A81D94F9EF368654F2D15659EAA88B66E3E261A3BECA98CBD260F5549F6DA8F4A655D93D2F9CC6E34E2DEF077365065
	6EECD034031047D3469FD1973A0F3FED14FDBC50AC17B9B564B283375F47A6E1C7D70BECC718623A7C05032144AC7078F1DB2B2C7717ED325E7F1AC49DBEF3CC164BB0FFBAFB387C7D6650E31253AE4B7D22A0743E11F2C21673CE22CF3D57A14BC5CF729ABE65CDB94E33CE49FAAE06E4F760F8990BC20F57FD27E5B9D770394B81655C65A91BB24E214B353CAD4BDDEA1EDC3CDC1DF23C2EFBC756F343A46C3E632CACF7A8685CD3BD86DEBB09B17041F7E5BB933B64723E9F2C7F3C3ACF55FF725E1765CA72C2
	6FF7C35D325CD5A1BF2BA92D37A731567F26DD7671399E394C06106BB4F07B7DDAF368F6ECF44AF6B4754ABA2E7E14E38E9F83FB7BE43D573AE43DEF85532B2943B9EED96E5BA10D1D01E37241A45A5F837D325C4D13689B4F1D17658A022FFFD4F2A786E53913136C53973CF21CA3FC321E2DA1594D1E45F9F46BC46F6E703D2577EC7813934AE95F354C64CC26CF77AE149F5135505437346FC2390F62535F523E8B6524092F118C1017F106BFB755396D537D36D26F27143BE952F24CAF769BE21EB3DAFFDBA8
	BEFAC66B6FEFF0CD9886F94B505F6F74EB1FDBEEFF5BE06CFE1B552978367E73DB61004F5064C5C2FA7E5BFAEDE1EDA377F131149F2F6093BA8D465CCEBD39F92A677D4B00279E28C362F5F486FA5EBF32C86B53A870CE1578E76A48910A82BCD613378452893A365D046FBEC8FBC7FAAF4ABBB2DF85FCEFF8C7CF6EB7635EA9E083BE1744BBA6FDCE53489AA09D2D4196C0BA8EA8719D6D73F373463DDFA2632C41D8FC1671D9254F66331AF794C05A234126C0BA82E876D9ED997B31EEE2243C058A1E2570BD69
	2C1E7F576F66F2196FCA6F9AF8D7662B066F2D6F6A49952B5E115485BCBE20B009F77A3B015AC216486566C8BC73943C0BF464587B0267EDA0776F5C039E772033097D22966A3C57A46077850A6FEF19BE7F778C8C7EFFA86330D976698D4577C55BBE7F321F79DC4BE04FB75DCB77ED16C15D8BDD78CC56F9FA46G529644AED14C8A69D6449A8F932C8B5223086D217BEAD3A1BD8331B08FFF2EAA9231CCDA2E701E41187F9E474CF43F08BCE7DC01D8CC91372F8131D545DC1F8D31EEF6CE8352B108BDD248ED
	D9085806962EEFA9E26F37F0FF13907B89BE531676BEBE93083658905BDC4CE5DD08FDDC4CE3A5A2365542E3950E58578AB0D6083D0A4F20C5A236EBBF0F157081476EE667C0A0EDC56C0B855C3EE6449EAC607ABA917B361947EAB6E289A89B03D8DDA177EDA1E2B38A39EFCB90E36F65CB00F4EEB7BEB7EF667E16A116077E56A396A13FE721DBEDB371F7A6E2396CF9F8C8AFC26CFF4C5C66E5086D266DA0995219F60CF38937B99FB176EC95313982B1E78137398131FFE0FB36A1160C4F243A907B16195B9C
	0D580F8B465B5CCE6337GF816A15F8174A39931B0FCD6B2679C477ED0406B2D9BB143EE5EE7C444DE31F0FD61083DE3617AE6A056321B6B0BC7EC1F057BAB74E01F39407565A276BE454AA0DD03583D78BE06E644ACA237AF823146DE2EEFB6E2D3FB39ECCC8FBF87727BFE7D33AA4F5131A353E1B01A9C1CF757F975D91598F234DD1A63CFBB2FFFD6E5B69D535AC1C7A76A69BC9C782C4A85BA5E05816FB464BF32CDFDD6250B361798480FF57033AA7F61194CF3D6C9A0C7089C4E233F216BB498DFDC31E2C5
	967AD3522FFFD6250E46A59F78ADCEFE86688DBA26F6C03A8B31470BF87C421D5C46AD4521BCCB974846A850C3B68965E769C6821C497C8A6D0B7300FF815AA3D0FB12A01D564B317A96EEE3F5AF3F8F735F17C91DCA4FE086BD5735EA82FB3BFB5939AA727ECCD65EBFB0A69EAC4FB8A6E05D5FC647746910E7C09BDBE9DFD98869A5084D25FDB4238F7ACA9F0F6D71894F4F8533359974BCA955BFAB43C62F879D00F77571F6786BA0E72C1EE04F7383EFC49F37734E826E6FBC34F3D9C1B0BB57CEE0E7BC6829
	135A00F4BE1A161B84F81A0B174B1E63A665DADDBC4E259F49F17EB94D6F02BC170B7BB6E41E785D266C59F2E2DF841675A8BBDB86698508B5D03F13A01D6646331BC11FFFCD95546FE2557ADD8DFAEED3554F5FE9998D00373BF1FCB2EFD0795048C7B5C926856D9FF5F3DB571670D899D0CF33667935560F65584DE56F2A815EA5282329006B4D6867581759F34510EEC04C425E3DG6951FE9E178D931ED78F9617592067EA6979D0D646FD6C9A8E783CFEBC679964BCA5FB07C0BC70A6211D674CBCA61673B8
	3E86BDE339D6E3E747F9351D8EC86F97144FF72631E7AAG9FBB4F4B7DB53B4EC2BA8A3157AC5C16B83445E719E89C8D9633CC0FBC0E32B286E9397900DBBC3C5CAE766EA2C8F7A1D6FF015BB255034F4FDED03715731F1036426C7CFD50E7D3D3B52435B35A4376CCD6231D4769F5FEBE608B51267EDEEED3320747E7D6EFA84F1A737344E5836AF26BA1FD1D74BD709E666A73A6A154BD4CAFAB64DEBD9CECAF503ACF3997793D94D94E32ADF4B9FA9CD2129B75FC76F79C56254B5F5FDFA96B7EFEC368B6C5E5
	48F25FAB8A32FFCC0EA9A86ED5A4CF627E4FA32BE5BB7F3EC6AE2FAF68599E75391CB3D9325C2A16495DF3B85D923A2DE12F48652CAF8EDD6E36ECD9AE5792FA7CFF19A34B7DDB50FBDCEA396D0A77E56E1C64FEF8DB2EDC9F1E0D321EA3C177435565FFE513AC77E1307B8E7B2C2AF6F3DFC168B17DFE1EEC674379F2F943414AA36DE61FDC1EF59277B412946FA4F9B3E8AC2A25D8B05EDB4C213C97D4BA1BD8A4171199343E2BD5711E2BF8D6BDBC64FBEE52F909ADF29CD3CC0A31F292BEF60564A363B5CF62
	BC1CC5F15EAEBB24F8B05E338521477C28624CDDC25071DA9D73D996055CA46F3B5FD7AA477C296D321E3BA6D16719E532DCE530FB021ABEF6A924338C016FCB6EA917EDBF25B8BFD8924C864DF8BD2CB8B71FEA897D3AF24292FA5B19DEA15BB9D7F15E7E5E12506D4CD31CF1DFF5E1125715104E58CAE7552BE4DB4FA94EF63D5A9B2CBD9C582FBC53FBD56FE72B57EB689973BC1A7F62013F4248BF6799A1FD48AF2C9FDFF663179FFDE44E874D39C64158A62CF451E7BD5A047491725048288F4611BB003EA6
	8A2B480FE2195A86C1CB16AAEABF7F4E7EA796BCF6E6A8D5D859A69410CD1253CEBFFDDF3153C1FE0F700C53CF4AB9A22C76119FDDA5137FB6A1ED08FE248F0917BC4EF6A137779479A171A15169E864EF689D92050D74E70D7710C322FBDA6DC3AE11BCE1D357AE248D5A871C22301EE5FB6C03FDFB58EB116B0845C2CAE3838D873981A8003D9B283DC4CBA5EA59B0B73BF45B3125512902710830466335BB0E58FBC42F3FCDD8AD3A7C4EA117576398753D4E94E550F76D50E70DC0DD913ACF1C2DA48BD5B47A
	7C683726E6AD4BBA8215B06A9776D0CEB2B72FC48E725E83BF94657437815921C88B66DD35C55C7E6B23F9DDC6A1C5F27202703110BE6A93D9402070EC2A1238DCF9842C96FF7F4C7DB77F21BEA19EC40E886974E71021609C190B3DD9610BF33E31F9EDC45CF544AE9F894F90513CDA94D6765A875C1ECB70251936FD0E2F967D7641A1726B52D028C963B14FC243AB3FFE3F759B7F79773354F0D9D4943632AA8251BDFDCE6F401E465EDE77209395C0FD017A4D281E70D4EAF8560FFEF5633107D71C037655AC
	248ED82D74FF957D3F177C2F22C895C52A76C225A588C17F347923234467752398DDE2C99BFDF8A96E623E5A54BF4FCAB58AE950B95843DC50F84993D950F87D2C2F240ADE9FEDF790DCE10D54610D2210A37D5A21C97A313ADAD148223FDCE8E2BFDD88695CD66F08C9741A480F911AA4F6000B0E7A3D43G58FD769E37F84904BFB2E8AA055C7534A71E9C96D131C994D2CAC99BF176D40A42864C673FE0C79856C97DB70050FA1EAD4B5026C07E48CC592713CA9D5757883AEAFC27A170DA1A19C55849179CEC
	F1A43501E6EE247F73BFDD7D6D9E255264EDDCAB25FA20AFBA8D60851999DBD1A2CD2AB5B2C7D92343B3DE422810C88FA071AF9137036363C63CD8F5255B5DA25B1DAE591D29321B547ECD2A7AA2974BB344BE9D1E71A99205AA14679B78330152D4BCFBB1A5E0CC54F13B0223F8C60EE21A94C562654AGDEF40269A7F5D2D714CF5D32CF5D12BF648C38DC6BE4A77AEE1D54956505FBFC4D907BD686700234448363DABB715D284323CEDDD1FE8F2B7DA636FDD360FD6E0A32F4CCBD82F1CB538354891B5ACB5B
	2D935689797B17E827574AD1A01B453C1D268770020CA7A3BA29AB4A272F0F6FFB74C6C8GAF8277BDF5BD3FFE25773D1B747BDE7A15E7692D7FD7FDCF2FCE485F3FC4BB3DEB7C5C0D34D37555FB042CC4689B72CC7C45033008D8D9B6609E2CAC1773784B82A1AFDBFAA91F092D9D1588FB299FC1480B7748520509572A0A6C53C9DDD1013BF7D455B478490714GDE1026D1B2CE422812A0BCE5D71E273F995FD128377FDA7575083A3ED6CA1F416AEB0BCA02D006CA026C9C1629643F22133A222230D40E8239
	1944DBED5A04DEDC41BEBDAB7BC45E01CAEA165CG4C8860053AE6C994F84D2A97E5E52AD44938389983C8DCD131C9D6DF0EF9FD4BCBCC32E03D97F9D2247CA2C9897BCD3C72CF143F7D1BF4CDF6405FE2CF3C1A1D8D4F88537E766F8F697932E6403B43787B11129B48C6FC205F3ABBBDE077F8C43B67FC632063187D227D70A551A97F56DACCA351BF44F924CC16F7EFA3313BDFA1733FD0CB87884D6A9C2F06AEGG3820GGD0CB818294G94G88G88G18F635B04D6A9C2F06AEGG3820GG8CGGG
	GGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG40AEGGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private String getChangeCondition( String change )
{

	if( change.equalsIgnoreCase("After a Duration") )
	{
		return LMProgramDirectGear.CHANGE_DURATION;
	}
	else if( change.equalsIgnoreCase("Priority Change") )
	{
		return LMProgramDirectGear.CHANGE_PRIORITY;
	}
	else if( change.equalsIgnoreCase("Above Trigger") )
	{
		return LMProgramDirectGear.CHANGE_TRIGGER_OFFSET;
	}	
	else
		return LMProgramDirectGear.CHANGE_NONE;

}
/**
 * Return the JCheckBoxRampIn property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRampIn() {
	if (ivjJCheckBoxRampIn == null) {
		try {
			ivjJCheckBoxRampIn = new javax.swing.JCheckBox();
			ivjJCheckBoxRampIn.setName("JCheckBoxRampIn");
			ivjJCheckBoxRampIn.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRampIn.setText("Ramp In");
			ivjJCheckBoxRampIn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRampIn;
}
/**
 * Return the JComboBoxHowToStop property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHowToStop() {
	if (ivjJComboBoxHowToStop == null) {
		try {
			ivjJComboBoxHowToStop = new javax.swing.JComboBox();
			ivjJComboBoxHowToStop.setName("JComboBoxHowToStop");
			ivjJComboBoxHowToStop.setPreferredSize(new java.awt.Dimension(159, 23));
			ivjJComboBoxHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxHowToStop.setMinimumSize(new java.awt.Dimension(159, 23));
			ivjJComboBoxHowToStop.setMaximumSize(new java.awt.Dimension(159, 23));
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RAMP_OUT) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHowToStop;
}
/**
 * Return the JComboBoxWhenChange property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxWhenChange() {
	if (ivjJComboBoxWhenChange == null) {
		try {
			ivjJComboBoxWhenChange = new javax.swing.JComboBox();
			ivjJComboBoxWhenChange.setName("JComboBoxWhenChange");
			ivjJComboBoxWhenChange.setPreferredSize(new java.awt.Dimension(195, 23));
			ivjJComboBoxWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxWhenChange.addItem("Manually Only");
			ivjJComboBoxWhenChange.addItem("After a Duration");
			ivjJComboBoxWhenChange.addItem("Priority Change");
			ivjJComboBoxWhenChange.addItem("Above Trigger");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxWhenChange;
}
/**
 * Return the JCSpinFieldChangeDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeDuration() {
	if (ivjJCSpinFieldChangeDuration == null) {
		try {
			ivjJCSpinFieldChangeDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeDuration.setName("JCSpinFieldChangeDuration");
			ivjJCSpinFieldChangeDuration.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeDuration.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeDuration.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(3)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeDuration;
}
/**
 * Return the JCSpinFieldChangePriority property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangePriority() {
	if (ivjJCSpinFieldChangePriority == null) {
		try {
			ivjJCSpinFieldChangePriority = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangePriority.setName("JCSpinFieldChangePriority");
			ivjJCSpinFieldChangePriority.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJCSpinFieldChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangePriority.setMaximumSize(new java.awt.Dimension(40, 30));
			// user code begin {1}
			ivjJCSpinFieldChangePriority.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(9999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangePriority;
}
/**
 * Return the JCSpinFieldChangeTriggerNumber property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeTriggerNumber() {
	if (ivjJCSpinFieldChangeTriggerNumber == null) {
		try {
			ivjJCSpinFieldChangeTriggerNumber = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeTriggerNumber.setName("JCSpinFieldChangeTriggerNumber");
			ivjJCSpinFieldChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeTriggerNumber.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(1), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(1)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeTriggerNumber;
}
/**
 * Return the JCSpinFieldControlPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldControlPercent() {
	if (ivjJCSpinFieldControlPercent == null) {
		try {
			ivjJCSpinFieldControlPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldControlPercent.setName("JCSpinFieldControlPercent");
			ivjJCSpinFieldControlPercent.setPreferredSize(new java.awt.Dimension(48, 20));
			ivjJCSpinFieldControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setMaximumSize(new java.awt.Dimension(48, 20));
			// user code begin {1}
			ivjJCSpinFieldControlPercent.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(50)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldControlPercent;
}
/**
 * Return the JCSpinFieldCyclePeriod property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldCyclePeriod() {
	if (ivjJCSpinFieldCyclePeriod == null) {
		try {
			ivjJCSpinFieldCyclePeriod = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldCyclePeriod.setName("JCSpinFieldCyclePeriod");
			ivjJCSpinFieldCyclePeriod.setPreferredSize(new java.awt.Dimension(48, 20));
			ivjJCSpinFieldCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setMaximumSize(new java.awt.Dimension(48, 20));
			// user code begin {1}
			ivjJCSpinFieldCyclePeriod.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(60), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(30)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldCyclePeriod;
}
/**
 * Return the JCSpinFieldPercentReduction property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldPercentReduction() {
	if (ivjJCSpinFieldPercentReduction == null) {
		try {
			ivjJCSpinFieldPercentReduction = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldPercentReduction.setName("JCSpinFieldPercentReduction");
			ivjJCSpinFieldPercentReduction.setPreferredSize(new java.awt.Dimension(49, 20));
			ivjJCSpinFieldPercentReduction.setMaximumSize(new java.awt.Dimension(50, 20));
			ivjJCSpinFieldPercentReduction.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJCSpinFieldPercentReduction.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(100)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			ivjJCSpinFieldPercentReduction.setValue( new Integer(100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldPercentReduction;
}
/**
 * Return the JCSpinFieldRampInPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampInPercent() {
	if (ivjJCSpinFieldRampInPercent == null) {
		try {
			ivjJCSpinFieldRampInPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampInPercent.setName("JCSpinFieldRampInPercent");
			ivjJCSpinFieldRampInPercent.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampInPercent.setMaximumSize(new java.awt.Dimension(63, 20));
			ivjJCSpinFieldRampInPercent.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJCSpinFieldRampInPercent.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(100), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(100)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampInPercent;
}
/**
 * Return the JCSpinFieldRampOutPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampOutPercent() {
	if (ivjJCSpinFieldRampOutPercent == null) {
		try {
			ivjJCSpinFieldRampOutPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampOutPercent.setName("JCSpinFieldRampOutPercent");
			ivjJCSpinFieldRampOutPercent.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampOutPercent.setMaximumSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampOutPercent.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJCSpinFieldRampOutPercent.setDataProperties(
									new com.klg.jclass.field.DataProperties(
										new com.klg.jclass.field.validate.JCIntegerValidator(
											null, new Integer(0), new Integer(100), null, true, 
											null, new Integer(1), "#,##0.###;-#,##0.###", false, 
											false, false, null, new Integer(100)), 
											new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
											new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
											new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampOutPercent;
}
/**
 * Return the JLabelChangeDuration property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeDuration() {
	if (ivjJLabelChangeDuration == null) {
		try {
			ivjJLabelChangeDuration = new javax.swing.JLabel();
			ivjJLabelChangeDuration.setName("JLabelChangeDuration");
			ivjJLabelChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeDuration.setText("Change Duration:");
			ivjJLabelChangeDuration.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeDuration.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeDuration;
}
/**
 * Return the JLabelChangePriority property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangePriority() {
	if (ivjJLabelChangePriority == null) {
		try {
			ivjJLabelChangePriority = new javax.swing.JLabel();
			ivjJLabelChangePriority.setName("JLabelChangePriority");
			ivjJLabelChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangePriority.setText("Change Priority:");
			ivjJLabelChangePriority.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangePriority.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangePriority;
}
/**
 * Return the JLabelChangeTriggerNumber property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerNumber() {
	if (ivjJLabelChangeTriggerNumber == null) {
		try {
			ivjJLabelChangeTriggerNumber = new javax.swing.JLabel();
			ivjJLabelChangeTriggerNumber.setName("JLabelChangeTriggerNumber");
			ivjJLabelChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerNumber.setText("Trigger Number:");
			ivjJLabelChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerNumber.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerNumber;
}
/**
 * Return the JLabelChangeTriggerOffset property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerOffset() {
	if (ivjJLabelChangeTriggerOffset == null) {
		try {
			ivjJLabelChangeTriggerOffset = new javax.swing.JLabel();
			ivjJLabelChangeTriggerOffset.setName("JLabelChangeTriggerOffset");
			ivjJLabelChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerOffset.setText("Trigger Offset:");
			ivjJLabelChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerOffset.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerOffset;
}
/**
 * Return the JLabelControlPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlPercent() {
	if (ivjJLabelControlPercent == null) {
		try {
			ivjJLabelControlPercent = new javax.swing.JLabel();
			ivjJLabelControlPercent.setName("JLabelControlPercent");
			ivjJLabelControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelControlPercent.setText("Control Percent:");
			ivjJLabelControlPercent.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelControlPercent.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlPercent;
}
/**
 * Return the JLabelCyclePeriod property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCyclePeriod() {
	if (ivjJLabelCyclePeriod == null) {
		try {
			ivjJLabelCyclePeriod = new javax.swing.JLabel();
			ivjJLabelCyclePeriod.setName("JLabelCyclePeriod");
			ivjJLabelCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelCyclePeriod.setText("Cycle Period:");
			ivjJLabelCyclePeriod.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelCyclePeriod.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCyclePeriod;
}
/**
 * Return the JLabelHowToStop property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHowToStop() {
	if (ivjJLabelHowToStop == null) {
		try {
			ivjJLabelHowToStop = new javax.swing.JLabel();
			ivjJLabelHowToStop.setName("JLabelHowToStop");
			ivjJLabelHowToStop.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelHowToStop.setText("How to Stop Control:");
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHowToStop;
}
/**
 * Return the JLabelMinutesChDur property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutesChDur() {
	if (ivjJLabelMinutesChDur == null) {
		try {
			ivjJLabelMinutesChDur = new javax.swing.JLabel();
			ivjJLabelMinutesChDur.setName("JLabelMinutesChDur");
			ivjJLabelMinutesChDur.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutesChDur.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelMinutesChDur.setText("(min.)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutesChDur;
}
/**
 * Return the JLabelPercentReduction property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPercentReduction() {
	if (ivjJLabelPercentReduction == null) {
		try {
			ivjJLabelPercentReduction = new javax.swing.JLabel();
			ivjJLabelPercentReduction.setName("JLabelPercentReduction");
			ivjJLabelPercentReduction.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPercentReduction.setText("Group Capacity Reduction %:");
			ivjJLabelPercentReduction.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPercentReduction.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPercentReduction;
}
/**
 * Return the JLabelRampInInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInInterval() {
	if (ivjJLabelRampInInterval == null) {
		try {
			ivjJLabelRampInInterval = new javax.swing.JLabel();
			ivjJLabelRampInInterval.setName("JLabelRampInInterval");
			ivjJLabelRampInInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInInterval.setText("Ramp In Interval: ");
			ivjJLabelRampInInterval.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInInterval.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInInterval;
}
/**
 * Return the JLabelRampInPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercent() {
	if (ivjJLabelRampInPercent == null) {
		try {
			ivjJLabelRampInPercent = new javax.swing.JLabel();
			ivjJLabelRampInPercent.setName("JLabelRampInPercent");
			ivjJLabelRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercent.setText("Ramp In Percent: ");
			ivjJLabelRampInPercent.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercent.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercent;
}
/**
 * Return the JLabelRampInPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercentSign() {
	if (ivjJLabelRampInPercentSign == null) {
		try {
			ivjJLabelRampInPercentSign = new javax.swing.JLabel();
			ivjJLabelRampInPercentSign.setName("JLabelRampInPercentSign");
			ivjJLabelRampInPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercentSign;
}
/**
 * Return the JLabelRampInSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInSec() {
	if (ivjJLabelRampInSec == null) {
		try {
			ivjJLabelRampInSec = new javax.swing.JLabel();
			ivjJLabelRampInSec.setName("JLabelRampInSec");
			ivjJLabelRampInSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInSec;
}
/**
 * Return the JLabelRampOutInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutInterval() {
	if (ivjJLabelRampOutInterval == null) {
		try {
			ivjJLabelRampOutInterval = new javax.swing.JLabel();
			ivjJLabelRampOutInterval.setName("JLabelRampOutInterval");
			ivjJLabelRampOutInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutInterval.setText("Ramp Out Interval: ");
			ivjJLabelRampOutInterval.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutInterval.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutInterval;
}
/**
 * Return the JLabelRampOutPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercent() {
	if (ivjJLabelRampOutPercent == null) {
		try {
			ivjJLabelRampOutPercent = new javax.swing.JLabel();
			ivjJLabelRampOutPercent.setName("JLabelRampOutPercent");
			ivjJLabelRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercent.setText("Ramp Out Percent: ");
			ivjJLabelRampOutPercent.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercent.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercent;
}
/**
 * Return the JLabelRampOutPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercentSign() {
	if (ivjJLabelRampOutPercentSign == null) {
		try {
			ivjJLabelRampOutPercentSign = new javax.swing.JLabel();
			ivjJLabelRampOutPercentSign.setName("JLabelRampOutPercentSign");
			ivjJLabelRampOutPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercentSign;
}
/**
 * Return the JLabelRampOutSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutSec() {
	if (ivjJLabelRampOutSec == null) {
		try {
			ivjJLabelRampOutSec = new javax.swing.JLabel();
			ivjJLabelRampOutSec.setName("JLabelRampOutSec");
			ivjJLabelRampOutSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutSec;
}
/**
 * Return the JLabelWhenChange property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelWhenChange() {
	if (ivjJLabelWhenChange == null) {
		try {
			ivjJLabelWhenChange = new javax.swing.JLabel();
			ivjJLabelWhenChange.setName("JLabelWhenChange");
			ivjJLabelWhenChange.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelWhenChange.setText("When to Change:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelWhenChange;
}
/**
 * Return the JPanelChangeMethod property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelChangeMethod() {
	if (ivjJPanelChangeMethod == null) {
		try {
			ivjJPanelChangeMethod = new javax.swing.JPanel();
			ivjJPanelChangeMethod.setName("JPanelChangeMethod");
			ivjJPanelChangeMethod.setLayout(new java.awt.GridBagLayout());
			ivjJPanelChangeMethod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanelChangeMethod.setMaximumSize(new java.awt.Dimension(335, 88));
			ivjJPanelChangeMethod.setPreferredSize(new java.awt.Dimension(335, 88));
			ivjJPanelChangeMethod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJPanelChangeMethod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelChangeDuration = new java.awt.GridBagConstraints();
			constraintsJLabelChangeDuration.gridx = 1; constraintsJLabelChangeDuration.gridy = 2;
			constraintsJLabelChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeDuration.ipadx = -5;
			constraintsJLabelChangeDuration.ipady = 6;
			constraintsJLabelChangeDuration.insets = new java.awt.Insets(1, 5, 3, 5);
			getJPanelChangeMethod().add(getJLabelChangeDuration(), constraintsJLabelChangeDuration);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeDuration.gridx = 2; constraintsJCSpinFieldChangeDuration.gridy = 2;
			constraintsJCSpinFieldChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeDuration.ipadx = 34;
			constraintsJCSpinFieldChangeDuration.ipady = 19;
			constraintsJCSpinFieldChangeDuration.insets = new java.awt.Insets(1, 5, 3, 2);
			getJPanelChangeMethod().add(getJCSpinFieldChangeDuration(), constraintsJCSpinFieldChangeDuration);

			java.awt.GridBagConstraints constraintsJLabelMinutesChDur = new java.awt.GridBagConstraints();
			constraintsJLabelMinutesChDur.gridx = 3; constraintsJLabelMinutesChDur.gridy = 2;
			constraintsJLabelMinutesChDur.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutesChDur.ipadx = 5;
			constraintsJLabelMinutesChDur.ipady = -2;
			constraintsJLabelMinutesChDur.insets = new java.awt.Insets(5, 3, 5, 5);
			getJPanelChangeMethod().add(getJLabelMinutesChDur(), constraintsJLabelMinutesChDur);

			java.awt.GridBagConstraints constraintsJLabelChangePriority = new java.awt.GridBagConstraints();
			constraintsJLabelChangePriority.gridx = 4; constraintsJLabelChangePriority.gridy = 2;
			constraintsJLabelChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangePriority.ipadx = -13;
			constraintsJLabelChangePriority.ipady = 6;
			constraintsJLabelChangePriority.insets = new java.awt.Insets(1, 6, 3, 3);
			getJPanelChangeMethod().add(getJLabelChangePriority(), constraintsJLabelChangePriority);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangePriority = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangePriority.gridx = 5; constraintsJCSpinFieldChangePriority.gridy = 2;
			constraintsJCSpinFieldChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangePriority.ipadx = 29;
			constraintsJCSpinFieldChangePriority.ipady = 19;
			constraintsJCSpinFieldChangePriority.insets = new java.awt.Insets(1, 3, 3, 8);
			getJPanelChangeMethod().add(getJCSpinFieldChangePriority(), constraintsJCSpinFieldChangePriority);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerNumber.gridx = 1; constraintsJLabelChangeTriggerNumber.gridy = 3;
			constraintsJLabelChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerNumber.ipadx = -45;
			constraintsJLabelChangeTriggerNumber.ipady = 6;
			constraintsJLabelChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 16, 5);
			getJPanelChangeMethod().add(getJLabelChangeTriggerNumber(), constraintsJLabelChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerOffset.gridx = 4; constraintsJLabelChangeTriggerOffset.gridy = 3;
			constraintsJLabelChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerOffset.ipadx = -63;
			constraintsJLabelChangeTriggerOffset.insets = new java.awt.Insets(8, 6, 18, 13);
			getJPanelChangeMethod().add(getJLabelChangeTriggerOffset(), constraintsJLabelChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJTextFieldChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJTextFieldChangeTriggerOffset.gridx = 5; constraintsJTextFieldChangeTriggerOffset.gridy = 3;
			constraintsJTextFieldChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldChangeTriggerOffset.weightx = 1.0;
			constraintsJTextFieldChangeTriggerOffset.ipadx = 26;
			constraintsJTextFieldChangeTriggerOffset.insets = new java.awt.Insets(4, 3, 16, 8);
			getJPanelChangeMethod().add(getJTextFieldChangeTriggerOffset(), constraintsJTextFieldChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeTriggerNumber.gridx = 2; constraintsJCSpinFieldChangeTriggerNumber.gridy = 3;
			constraintsJCSpinFieldChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeTriggerNumber.ipadx = 34;
			constraintsJCSpinFieldChangeTriggerNumber.ipady = 19;
			constraintsJCSpinFieldChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 16, 2);
			getJPanelChangeMethod().add(getJCSpinFieldChangeTriggerNumber(), constraintsJCSpinFieldChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelWhenChange = new java.awt.GridBagConstraints();
			constraintsJLabelWhenChange.gridx = 1; constraintsJLabelWhenChange.gridy = 1;
			constraintsJLabelWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelWhenChange.ipadx = 3;
			constraintsJLabelWhenChange.ipady = 4;
			constraintsJLabelWhenChange.insets = new java.awt.Insets(0, 5, 4, 5);
			getJPanelChangeMethod().add(getJLabelWhenChange(), constraintsJLabelWhenChange);

			java.awt.GridBagConstraints constraintsJComboBoxWhenChange = new java.awt.GridBagConstraints();
			constraintsJComboBoxWhenChange.gridx = 2; constraintsJComboBoxWhenChange.gridy = 1;
			constraintsJComboBoxWhenChange.gridwidth = 4;
			constraintsJComboBoxWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxWhenChange.weightx = 1.0;
			constraintsJComboBoxWhenChange.ipadx = 69;
			constraintsJComboBoxWhenChange.insets = new java.awt.Insets(0, 5, 1, 27);
			getJPanelChangeMethod().add(getJComboBoxWhenChange(), constraintsJComboBoxWhenChange);
			// user code begin {1}
			jComboBoxWhenChange_ActionPerformed(null);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelChangeMethod;
}
/**
 * Return the JTextFieldChangeTriggerOffset property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldChangeTriggerOffset() {
	if (ivjJTextFieldChangeTriggerOffset == null) {
		try {
			ivjJTextFieldChangeTriggerOffset = new javax.swing.JTextField();
			ivjJTextFieldChangeTriggerOffset.setName("JTextFieldChangeTriggerOffset");
			ivjJTextFieldChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJTextFieldChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJTextFieldChangeTriggerOffset.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999.9999, 99999.9999, 4) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldChangeTriggerOffset;
}
/**
 * Return the JTextFieldRampInInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampInInterval() {
	if (ivjJTextFieldRampInInterval == null) {
		try {
			ivjJTextFieldRampInInterval = new javax.swing.JTextField();
			ivjJTextFieldRampInInterval.setName("JTextFieldRampInInterval");
			ivjJTextFieldRampInInterval.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampInInterval.setMaximumSize(new java.awt.Dimension(63, 20));
			ivjJTextFieldRampInInterval.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJTextFieldRampInInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampInInterval;
}
/**
 * Return the JTextFieldRampOutInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampOutInterval() {
	if (ivjJTextFieldRampOutInterval == null) {
		try {
			ivjJTextFieldRampOutInterval = new javax.swing.JTextField();
			ivjJTextFieldRampOutInterval.setName("JTextFieldRampOutInterval");
			ivjJTextFieldRampOutInterval.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampOutInterval.setMaximumSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampOutInterval.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJTextFieldRampOutInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampOutInterval;
}
/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	gear = (LMProgramDirectGear)o;
	
	if( getJComboBoxHowToStop().getSelectedItem() != null )
	{
		gear.setMethodStopType( 
			com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxHowToStop().getSelectedItem().toString() ) );
	}
	
	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT) == 0)
	{
		gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
		gear.setRampOutInterval(new Integer(getJTextFieldRampOutInterval().getText()));
	}
		
	if(getJCheckBoxRampIn().isSelected())
	{
		gear.setRampInPercent(new Integer(((Number)getJCSpinFieldRampInPercent().getValue()).intValue()));
		gear.setRampInInterval(new Integer(getJTextFieldRampInInterval().getText()));
	}

	gear.setPercentReduction( new Integer( ((Number)getJCSpinFieldPercentReduction().getValue()).intValue() ) );
	
	gear.setChangeCondition( getChangeCondition(getJComboBoxWhenChange().getSelectedItem().toString()) );
	
	gear.setChangeDuration( new Integer( ((Number)getJCSpinFieldChangeDuration().getValue()).intValue() * 60 ) );
	gear.setChangePriority( new Integer( ((Number)getJCSpinFieldChangePriority().getValue()).intValue() ) );
	gear.setChangeTriggerNumber( new Integer( ((Number)getJCSpinFieldChangeTriggerNumber().getValue()).intValue() ) );
	
	if( getJTextFieldChangeTriggerOffset().getText() == null || getJTextFieldChangeTriggerOffset().getText().length() <= 0 )
		gear.setChangeTriggerOffset( new Double(0.0) );
	else
		gear.setChangeTriggerOffset( Double.valueOf(getJTextFieldChangeTriggerOffset().getText()) );

	com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

	s.setControlPercent( new Integer( 
		((Number)getJCSpinFieldControlPercent().getValue()).intValue() ) );

	s.setCyclePeriodLength( new Integer( 
		((Number)getJCSpinFieldCyclePeriod().getValue()).intValue() * 60 ) );		
	return s;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJCSpinFieldChangeDuration().addValueListener(this);
	getJCSpinFieldChangePriority().addValueListener(this);
	getJCSpinFieldChangeTriggerNumber().addValueListener(this);
	getJCSpinFieldControlPercent().addValueListener(this);
	getJCSpinFieldCyclePeriod().addValueListener(this);
	getJCSpinFieldPercentReduction().addValueListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJTextFieldChangeTriggerOffset().addCaretListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxHowToStop().addActionListener(this);
	getJCSpinFieldRampOutPercent().addValueListener(this);
	getJCSpinFieldRampInPercent().addValueListener(this);
	
	// user code end
	getJCheckBoxRampIn().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("MasterCycleGearPanel");
		setPreferredSize(new java.awt.Dimension(402, 430));
		setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
		setLayout(new java.awt.GridBagLayout());
		setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
		setSize(402, 430);

		java.awt.GridBagConstraints constraintsJLabelControlPercent = new java.awt.GridBagConstraints();
		constraintsJLabelControlPercent.gridx = 1; constraintsJLabelControlPercent.gridy = 1;
		constraintsJLabelControlPercent.ipadx = -7;
		constraintsJLabelControlPercent.insets = new java.awt.Insets(14, 10, 6, 23);
		add(getJLabelControlPercent(), constraintsJLabelControlPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldControlPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldControlPercent.gridx = 2; constraintsJCSpinFieldControlPercent.gridy = 1;
		constraintsJCSpinFieldControlPercent.gridwidth = 2;
		constraintsJCSpinFieldControlPercent.ipadx = 47;
		constraintsJCSpinFieldControlPercent.ipady = 19;
		constraintsJCSpinFieldControlPercent.insets = new java.awt.Insets(10, 3, 4, 33);
		add(getJCSpinFieldControlPercent(), constraintsJCSpinFieldControlPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldCyclePeriod = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldCyclePeriod.gridx = 2; constraintsJCSpinFieldCyclePeriod.gridy = 2;
		constraintsJCSpinFieldCyclePeriod.gridwidth = 2;
		constraintsJCSpinFieldCyclePeriod.ipadx = 47;
		constraintsJCSpinFieldCyclePeriod.ipady = 19;
		constraintsJCSpinFieldCyclePeriod.insets = new java.awt.Insets(5, 3, 2, 33);
		add(getJCSpinFieldCyclePeriod(), constraintsJCSpinFieldCyclePeriod);

		java.awt.GridBagConstraints constraintsJLabelCyclePeriod = new java.awt.GridBagConstraints();
		constraintsJLabelCyclePeriod.gridx = 1; constraintsJLabelCyclePeriod.gridy = 2;
		constraintsJLabelCyclePeriod.ipadx = -4;
		constraintsJLabelCyclePeriod.insets = new java.awt.Insets(7, 10, 6, 20);
		add(getJLabelCyclePeriod(), constraintsJLabelCyclePeriod);

		java.awt.GridBagConstraints constraintsJLabelHowToStop = new java.awt.GridBagConstraints();
		constraintsJLabelHowToStop.gridx = 1; constraintsJLabelHowToStop.gridy = 6;
		constraintsJLabelHowToStop.ipadx = 4;
		constraintsJLabelHowToStop.insets = new java.awt.Insets(7, 10, 5, 12);
		add(getJLabelHowToStop(), constraintsJLabelHowToStop);

		java.awt.GridBagConstraints constraintsJComboBoxHowToStop = new java.awt.GridBagConstraints();
		constraintsJComboBoxHowToStop.gridx = 2; constraintsJComboBoxHowToStop.gridy = 6;
		constraintsJComboBoxHowToStop.gridwidth = 3;
		constraintsJComboBoxHowToStop.weightx = 1.0;
		constraintsJComboBoxHowToStop.insets = new java.awt.Insets(3, 19, 2, 86);
		add(getJComboBoxHowToStop(), constraintsJComboBoxHowToStop);

		java.awt.GridBagConstraints constraintsJCSpinFieldPercentReduction = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldPercentReduction.gridx = 3; constraintsJCSpinFieldPercentReduction.gridy = 9;
		constraintsJCSpinFieldPercentReduction.gridwidth = 2;
		constraintsJCSpinFieldPercentReduction.ipadx = 49;
		constraintsJCSpinFieldPercentReduction.ipady = 20;
		constraintsJCSpinFieldPercentReduction.insets = new java.awt.Insets(4, 5, 3, 168);
		add(getJCSpinFieldPercentReduction(), constraintsJCSpinFieldPercentReduction);

		java.awt.GridBagConstraints constraintsJLabelPercentReduction = new java.awt.GridBagConstraints();
		constraintsJLabelPercentReduction.gridx = 1; constraintsJLabelPercentReduction.gridy = 9;
		constraintsJLabelPercentReduction.gridwidth = 2;
		constraintsJLabelPercentReduction.ipadx = 53;
		constraintsJLabelPercentReduction.ipady = 3;
		constraintsJLabelPercentReduction.insets = new java.awt.Insets(6, 10, 4, 5);
		add(getJLabelPercentReduction(), constraintsJLabelPercentReduction);

		java.awt.GridBagConstraints constraintsJPanelChangeMethod = new java.awt.GridBagConstraints();
		constraintsJPanelChangeMethod.gridx = 1; constraintsJPanelChangeMethod.gridy = 10;
		constraintsJPanelChangeMethod.gridwidth = 4;
		constraintsJPanelChangeMethod.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelChangeMethod.weightx = 1.0;
		constraintsJPanelChangeMethod.weighty = 1.0;
		constraintsJPanelChangeMethod.insets = new java.awt.Insets(3, 5, 96, 62);
		add(getJPanelChangeMethod(), constraintsJPanelChangeMethod);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercent.gridx = 1; constraintsJLabelRampOutPercent.gridy = 7;
		constraintsJLabelRampOutPercent.ipadx = -57;
		constraintsJLabelRampOutPercent.ipady = -111;
		constraintsJLabelRampOutPercent.insets = new java.awt.Insets(6, 10, 4, 3);
		add(getJLabelRampOutPercent(), constraintsJLabelRampOutPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampOutPercent.gridx = 2; constraintsJCSpinFieldRampOutPercent.gridy = 7;
		constraintsJCSpinFieldRampOutPercent.gridwidth = 2;
		constraintsJCSpinFieldRampOutPercent.ipadx = 3;
		constraintsJCSpinFieldRampOutPercent.insets = new java.awt.Insets(2, 19, 2, 5);
		add(getJCSpinFieldRampOutPercent(), constraintsJCSpinFieldRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercentSign.gridx = 4; constraintsJLabelRampOutPercentSign.gridy = 7;
		constraintsJLabelRampOutPercentSign.ipadx = 16;
		constraintsJLabelRampOutPercentSign.insets = new java.awt.Insets(4, 3, 4, 150);
		add(getJLabelRampOutPercentSign(), constraintsJLabelRampOutPercentSign);

		java.awt.GridBagConstraints constraintsJLabelRampOutSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutSec.gridx = 4; constraintsJLabelRampOutSec.gridy = 8;
		constraintsJLabelRampOutSec.ipadx = 4;
		constraintsJLabelRampOutSec.insets = new java.awt.Insets(5, 3, 5, 150);
		add(getJLabelRampOutSec(), constraintsJLabelRampOutSec);

		java.awt.GridBagConstraints constraintsJTextFieldRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampOutInterval.gridx = 2; constraintsJTextFieldRampOutInterval.gridy = 8;
		constraintsJTextFieldRampOutInterval.gridwidth = 2;
		constraintsJTextFieldRampOutInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampOutInterval.weightx = 1.0;
		constraintsJTextFieldRampOutInterval.ipadx = 5;
		constraintsJTextFieldRampOutInterval.insets = new java.awt.Insets(3, 19, 3, 3);
		add(getJTextFieldRampOutInterval(), constraintsJTextFieldRampOutInterval);

		java.awt.GridBagConstraints constraintsJLabelRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutInterval.gridx = 1; constraintsJLabelRampOutInterval.gridy = 8;
		constraintsJLabelRampOutInterval.ipadx = -57;
		constraintsJLabelRampOutInterval.ipady = -111;
		constraintsJLabelRampOutInterval.insets = new java.awt.Insets(5, 10, 7, 3);
		add(getJLabelRampOutInterval(), constraintsJLabelRampOutInterval);

		java.awt.GridBagConstraints constraintsJCheckBoxRampIn = new java.awt.GridBagConstraints();
		constraintsJCheckBoxRampIn.gridx = 1; constraintsJCheckBoxRampIn.gridy = 3;
		constraintsJCheckBoxRampIn.ipadx = 53;
		constraintsJCheckBoxRampIn.ipady = -2;
		constraintsJCheckBoxRampIn.insets = new java.awt.Insets(2, 7, 2, 3);
		add(getJCheckBoxRampIn(), constraintsJCheckBoxRampIn);

		java.awt.GridBagConstraints constraintsJLabelRampInPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercent.gridx = 1; constraintsJLabelRampInPercent.gridy = 4;
		constraintsJLabelRampInPercent.insets = new java.awt.Insets(7, 10, 4, 9);
		add(getJLabelRampInPercent(), constraintsJLabelRampInPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampInPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampInPercent.gridx = 2; constraintsJCSpinFieldRampInPercent.gridy = 4;
		constraintsJCSpinFieldRampInPercent.gridwidth = 2;
		constraintsJCSpinFieldRampInPercent.ipadx = 3;
		constraintsJCSpinFieldRampInPercent.insets = new java.awt.Insets(3, 19, 2, 5);
		add(getJCSpinFieldRampInPercent(), constraintsJCSpinFieldRampInPercent);

		java.awt.GridBagConstraints constraintsJLabelRampInPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercentSign.gridx = 4; constraintsJLabelRampInPercentSign.gridy = 4;
		constraintsJLabelRampInPercentSign.ipadx = 16;
		constraintsJLabelRampInPercentSign.insets = new java.awt.Insets(5, 3, 4, 150);
		add(getJLabelRampInPercentSign(), constraintsJLabelRampInPercentSign);

		java.awt.GridBagConstraints constraintsJLabelRampInSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampInSec.gridx = 4; constraintsJLabelRampInSec.gridy = 5;
		constraintsJLabelRampInSec.ipadx = 4;
		constraintsJLabelRampInSec.insets = new java.awt.Insets(5, 3, 5, 150);
		add(getJLabelRampInSec(), constraintsJLabelRampInSec);

		java.awt.GridBagConstraints constraintsJTextFieldRampInInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampInInterval.gridx = 2; constraintsJTextFieldRampInInterval.gridy = 5;
		constraintsJTextFieldRampInInterval.gridwidth = 2;
		constraintsJTextFieldRampInInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampInInterval.weightx = 1.0;
		constraintsJTextFieldRampInInterval.ipadx = 5;
		constraintsJTextFieldRampInInterval.insets = new java.awt.Insets(3, 19, 3, 3);
		add(getJTextFieldRampInInterval(), constraintsJTextFieldRampInInterval);

		java.awt.GridBagConstraints constraintsJLabelRampInInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampInInterval.gridx = 1; constraintsJLabelRampInInterval.gridy = 5;
		constraintsJLabelRampInInterval.insets = new java.awt.Insets(6, 10, 6, 9);
		add(getJLabelRampInInterval(), constraintsJLabelRampInInterval);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	rampItOut(false);
	rampItIn(false);
	
	getJComboBoxWhenChange().setSelectedItem( LMProgramDirectGear.CHANGE_NONE );
	
	try
	{
		initConnections();
	}
	catch(Exception e)	{ }
	
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxRampIn_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	rampItIn(getJCheckBoxRampIn().isSelected());
	this.fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxWhenChange_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelChangeDuration().setVisible(false);
	getJCSpinFieldChangeDuration().setVisible(false);
	getJLabelMinutesChDur().setVisible(false);
	
	getJLabelChangePriority().setVisible(false);
	getJCSpinFieldChangePriority().setVisible(false);
	
	getJLabelChangeTriggerNumber().setVisible(false);
	getJCSpinFieldChangeTriggerNumber().setVisible(false);

	getJLabelChangeTriggerOffset().setVisible(false);
	getJTextFieldChangeTriggerOffset().setVisible(false);

	
	if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_NONE )
		 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Manually Only" ) )
	{
		//None
		return;
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_DURATION )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "After a Duration" ) )
	{
		//Duration
		getJLabelChangeDuration().setVisible(true);
		getJCSpinFieldChangeDuration().setVisible(true);
		getJLabelMinutesChDur().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_PRIORITY )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Priority Change" ) )
	{
		//Priority
		getJLabelChangePriority().setVisible(true);
		getJCSpinFieldChangePriority().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_TRIGGER_OFFSET )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Above Trigger" ) )
	{
		//TriggerOffset
		getJLabelChangeTriggerNumber().setVisible(true);
		getJCSpinFieldChangeTriggerNumber().setVisible(true);

		getJLabelChangeTriggerOffset().setVisible(true);
		getJTextFieldChangeTriggerOffset().setVisible(true);
	}
	else
		throw new Error("Unknown LMProgramDirectGear control condition found, the value = " + getJComboBoxWhenChange().getSelectedItem().toString() );


	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		MasterCycleGearPanel aMasterCycleGearPanel;
		aMasterCycleGearPanel = new MasterCycleGearPanel();
		frame.setContentPane(aMasterCycleGearPanel);
		frame.setSize(aMasterCycleGearPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.dbeditor.wizard.device.lmprogram.GenericGearPanel");
		exception.printStackTrace(System.out);
	}
}
public void rampItIn(boolean rampOrNotToRamp)
{
	getJLabelRampInInterval().setVisible(rampOrNotToRamp);
	getJLabelRampInPercent().setVisible(rampOrNotToRamp);
	getJLabelRampInPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampInSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampInPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampInInterval().setVisible(rampOrNotToRamp);
}
public void rampItOut(boolean rampOrNotToRamp)
{
	getJLabelRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercent().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampOutSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampOutPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampOutInterval().setVisible(rampOrNotToRamp);
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private void setChangeCondition(String change) 
{
	if( change == null )
		return;

	if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_NONE) )
	{
		getJComboBoxWhenChange().setSelectedItem("Manually Only");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_DURATION) )
	{
		getJComboBoxWhenChange().setSelectedItem("After a Duration");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_PRIORITY) )
	{
		getJComboBoxWhenChange().setSelectedItem("Priority Change");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_TRIGGER_OFFSET) )
	{
		getJComboBoxWhenChange().setSelectedItem("Above Trigger");
	}	
	
}
/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
	{
		return;
	}
	else
		gear = (LMProgramDirectGear)o;

	getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getMethodStopType() ) );

	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT) == 0)
	{
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
		
	if(gear.getRampInPercent().intValue() != 0 && gear.getRampInInterval().intValue() != 0)
	{
		getJCheckBoxRampIn().setSelected(true);
		getJCSpinFieldRampInPercent().setValue(gear.getRampInPercent());
		getJTextFieldRampInInterval().setText(gear.getRampInInterval().toString());
	}
		
	getJCSpinFieldPercentReduction().setValue( gear.getPercentReduction() );
	
	setChangeCondition( gear.getChangeCondition() );
	
	getJCSpinFieldChangeDuration().setValue( new Integer( gear.getChangeDuration().intValue() / 60 ) );
	getJCSpinFieldChangePriority().setValue( gear.getChangePriority() );
	getJCSpinFieldChangeTriggerNumber().setValue( gear.getChangeTriggerNumber() );	
	getJTextFieldChangeTriggerOffset().setText( gear.getChangeTriggerOffset().toString() );

	com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

	getJCSpinFieldControlPercent().setValue( s.getControlPercent() );

	getJCSpinFieldCyclePeriod().setValue( new Integer( s.getCyclePeriodLength().intValue() / 60 ) );
	
}
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
}

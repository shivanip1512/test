package com.cannontech.dbeditor.wizard.device.lmprogram;

/**
 * Insert the type's description here.
 * Creation date: (8/1/2002 3:39:47 PM)
 * @author: 
 */
import com.cannontech.common.util.StringUtils;
import com.cannontech.database.db.device.lm.LMProgramDirectGear;
 
  public class MasterCycleGearPanel extends GenericGearPanel {
	private javax.swing.JComboBox ivjJComboBoxHowToStop = null;
	private javax.swing.JComboBox ivjJComboBoxWhenChange = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeDuration = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangePriority = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeTriggerNumber = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldControlPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldCyclePeriod = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldPercentReduction = null;
	private javax.swing.JLabel ivjJLabelChangeDuration = null;
	private javax.swing.JLabel ivjJLabelChangePriority = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerOffset = null;
	private javax.swing.JLabel ivjJLabelControlPercent = null;
	private javax.swing.JLabel ivjJLabelCyclePeriod = null;
	private javax.swing.JLabel ivjJLabelHowToStop = null;
	private javax.swing.JLabel ivjJLabelMinutesChDur = null;
	private javax.swing.JLabel ivjJLabelPercentReduction = null;
	private javax.swing.JLabel ivjJLabelWhenChange = null;
	private javax.swing.JPanel ivjJPanelChangeMethod = null;
	private javax.swing.JTextField ivjJTextFieldChangeTriggerOffset = null;
	private javax.swing.JCheckBox ivjJCheckBoxRampIn = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampInPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampInInterval = null;
	private javax.swing.JLabel ivjJLabelRampInPercent = null;
	private javax.swing.JLabel ivjJLabelRampInPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampInSec = null;
	private javax.swing.JLabel ivjJLabelRampOutInterval = null;
	private javax.swing.JLabel ivjJLabelRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampOutPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampOutSec = null;
	private javax.swing.JTextField ivjJTextFieldRampInInterval = null;
	private javax.swing.JTextField ivjJTextFieldRampOutInterval = null;

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == MasterCycleGearPanel.this.getJCheckBoxRampIn()) 
				connEtoC1(e);
		};
	};
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
/**
 * MasterCycleGearPanel constructor comment.
 */
public MasterCycleGearPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	if (e.getSource() == getJComboBoxWhenChange()) 
		connEtoC1(e);
	if (e.getSource() == getJComboBoxHowToStop()) 
		connEtoC10(e);
	// user code end
	
	// user code begin {2}
	// user code end
}
/**
 * connEtoC1:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxRampIn_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JComboBoxHowToStop.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		rampItOut(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out") == 0);
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G0EF632B0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8BD8DC5535BF29511BDE53ABD63C6576C60B9AEDD45AD2CB3DE91B5B469AFBE31BEA744616365852CA95DBD4D43434266640C006A41090C28C2FA4939E4910G01C0A2A1A461B13C92E2E8B2A628288C4C84A699E6466110GA17ADFFB6F3357B9E7B8B38CFA7DFFA95F3718593F3D56DE0F7DB8FB6F334F99A1E7FBD8DAF2CA0EA0A42789525F1B490210FB1BA0F8C656DAB9969A13229794FFBB00
	B68A57B425426782480B8A526933041D596910DEC45267F57AAD70FD1330A7BB6BDF610B8FBDF1DF94046A740E0B7E75FC5D4D7568E9BAB3B583BE5783AD86AC96286A77A9203FB4B5D74253A13DDE7ACEA8B9C59012A84FD8C92E8297A53EE5709983B46F8F0427B135D04AEF04B4616901CF479F986FEC78DCC32D3B363ECE626B3DF101107853EDA919C41722FCCE3112EC7AD36C53A05CC5832193EA5A0E41E7C3770541A3832E614A810B5369F20A360121CAEB3F4DEA97DD1E4ACB76890B47DAE935DD348F
	58AA9D43EE0FEB50E3992E2FBFE19991ED1E167181072D5DE671F4DB1CB607A00CBDC5FC3835A41D168FBEC0BAB516E0EF141238AD02748A207827389F0FE5B6C8F606DCD8A0445C3151279F9D314CFEC72C6CC764693D3A42BF12726D34DE08DCB8644782B1DB3E1D4AED697BA337252E087006C2BA82E8A9622BA89E8369A4D266535C46433B380DBD177FCBC86AEFCA596043C663534C366E27E59B630F5F2F4F23ED2746C36AFFAE64C5GAD810A83CAFFA6C5EF84AA20ED76F977EE78EC6A97DBDC4343AEE7
	135B5D6C30FACE382CB687FC2F2F079C89BBE59BF0F9201730F6F9C7C93906BD1C9A1FD137C9C24C373382EFC761273EA908621BA9E99A3EC5BEE1C8B1CBE58CBDA37B967A8C095B3F523A1D835F1325D8B3BC0462518A1C55D5A145C9BA9E723A63F81CFB56F3DB3AD2EF97322ADBE8077436A57447F5A911F1D25F0913EDE1B14E94C90C13G4FF9B6C5DF8EE48232824DFE1647386E231A69E25C897D406334B8CE0F763BAD9E31F9546E305ABCD22CDD297EE22DC5CC6E4A0C65D8DC9654A86BA87ABB4D1AF1
	09DE30ABA56CD9960F054F4AF1E13A6F7729BB6A5929EDE3BD56E1B86D93714FFA576D7D94DF792CF75D9EA962F51B7127943D9B08710F9493FC451F3C4B39C27158BFF91713D64C4BC9043C1EBF27C8FD685ED1B2BEAE02F494D082D0FABC749FA093D0CFBC2F63EBBE5A9BE0BF6AD654AF13ED703C811F36B151E369F40E089667006D0C45E33774BBECA30244536AA1F16DD7499D237DFBGF4345B1CB60FC5343B1CD03AE558860DE904711C76ECA4BC9E9B4DB55B07ED20E058AD70F25F73EC02CF870C2EEF
	3B2D9651A6F3307C818FE99397ADE720C4A800340EF8922F6F53B1F78C3E074473D8C5DDA4D8BC24D31F63F1792DA79BBE0FC36336B96A6BCD7681E20645B34E5BE8F0A9395E65BE477B6473BD3C6D19B23FA114BF5124597688ADF90E352368673C5B5ED7E919294F73EBE8D1E94F8C7BC1A014AB69E5BA8EFDAEBAF452A70BEF5B98E923A560D7A3D05F73BC46F9A38656761AADA3B65E5ACEFA2021582CF244996F9BA2391658AE5A1C22496636B92D70E5C42A6B2D629A399D1EF3E19BA926B89917DA20210C
	A0DEA6EEE4B81421EC55BC3F1A66DBC451E36F9F95ED27ED22E8F78E4A728729ADA32AA1EFC47235E31C78BA86BE868305212FBF96B7A95AD3174BF5E154EDA6BDC5EA17BF27575FC860DF0675FFDF91E98F8918DEC453F23E29E826F5C74A1A59D87C7E0CF568E6404BF40C97933F12B1FD8DCDE73D407DDCD75CA3E877257F8BE2BACA280E1958BE93E2ED603B233E5B7022D16DB67C63D16DB63CF454FF9BDDBE2A55C6D95EAFC7495C45F54929E8735123E43C9BF0B91DB65A71D0C4E0F360674D448F3B53AE
	1E35DB87ED62E97B048D660AAF10367B989DD36B60FB578BFCBC3CD44C474312093B05459F96EA4E17C26FBC14B27F8569DA7C02BC9EB21B1E3CC87A124DE19B06C03538C61DA2431F226335040F68A856D6FFAB11B59EEB99328DDCE8F60D1D02EBC127335CC23D29E49F5DB64FB917E758E6B51E37DC34D4DAAE091534B6AA1BE8F6AB79DEE62828B8E2501A36171FD7177DE113D721DD3ECBBDD4F6262C0A0F0717A708DFD160EFBCD0EA829FA3BE3CC4727998A18D04ADAE0703D589648DA510F87F2CB4C791
	434284363E125BD957D89629FB5BC723B638A413C16638ED1CDFD747323D724ED89C2372757A3D31F57069D00CCF8CFFEBDC3BAE4C63242FDE4072FB46D78B643A4B4AE4EDA742C24AF4FB6C43B01C1381D7DA674526AA57F9916087D993263E18224F85E232FFFF03782AD59D09AF12B2A20B79BA308A529DC0C3AF32F2963C48E2527892610B433556DE44D6D16CD7B0GDC1B4A6710A732146BC56BC82DE63BA5B47BA5D6FE68CB5EF36B084B245C0500AFFD09576D63634A713FE9E444B5E027D39BA93E33A6
	14ED1AE157CD2C054FF3F64F884C332D36B1DEC7F3A7082DE46EA341D21C6F5DF3D818BA17EB25ABD4FEF9ED39C45B23595582532F8E2866966C72E76C36CB820F4315B665FAF351063214F5BE6290AD793FD2910788D84BB11B8E0D35891FF66DCCE7077601A96B663752C82C08BD8DAF73B569AB2D24FD0A101E8BB49F084D0F1F2473E3E24BA2409201D89F5ADD246CC365096C3AEB06CFB61E18CA761171F54623872F0BB14B91787CECA3862F0B5BB7B5CAF6AE7B666DC243A7EBB55755F3B664248CA532BA
	88CE146BC22C39D3BF87C8DA476ED3366F45B1C61F6DBBDAAAA3A1513BFD07DCA1714FF8A5C5EFF80537EF7D650D0A768DEBEED88E8C426801573E4BBAB6CEC8696FDDCE63630440474547BEA6F5D28BE5F6838D81858105210E4649E957232DE3FE56232753785AEEB1143982A88EE865AB4C3F2CD7274E0D585A2B221D4EDFDFE5EB2F8A443BA8BEC70133B6779AED0BA49D8FF9BDC9FC9E73D431775AF249DF55BAE33C52CC6E45A9F25B3C5229FFD34B31B6F864CC816FFB241D0DD50EDC02B9C2FDBDDEA325
	7EE4A9CA177AFD615F781AE817C046D5B3245DC0F3006683AD850A85CAFF0D57498D13DAE30E3ACEFC8DB8723C1B699CCCA6F698216CBAACBFFEB2D3512E3ADDF62708ED6ABF2E10EB0D4BE39F34BBB9F6AB4586DC9EBA39E1582FBE76BD6F0A79D8FB5E7574475A732E780F7D2F9D92BF76B5AFE3737C73F46C6AG7F2CC08C1B5BC45724108EC62C2119E073A13D90319F3490AC9A520908E51888163E927A62CA5E4EEA5A49DC5684E9AB50DC20882065C071C099FFCF51578275G0D810582AD860A8592DECF
	519B013A00060066G0583AD870A874ADA45F51C22BA2AA05D8D64868A860AGDA8E14300A582653D7811901C4209020C82095C009C064DA1D132C5357821901C4209020C8A026A3392DAF1979C1F47B1ADB8FC9764E5160A1BEFE16F9FB0494434FE3CDC0E23EDC4366D0C5DD54CA764F753201541B51CBF639D437DA3AC83D11CFD21771AB354618DE9AEBB2C66F71E3F33140767BCBB572B6FD46F8107E1676B944199099DF4AB4F0F27F03745B2DB486F2BC14BC1B0136FBE1E46E3141072E8A69F397D026D7
	9E5123939EFE03483AE1D8310D504151E491ADD25EB3A251B7E59D7616E558A6307A59A464172C11F8DAC5D7CBB5566139A265F5E28574A37299A7FD2E14BE33D2F4D87F52FE0760FBFC2C93344747A35437915728E74066BD86368A3918A70F761D22ED1838A12DA7283CE87140DA52DB7EEDAA4F72FC49FFA078DF7FBA1249B5F98C53EE1A9E47984ECAA37A5D9E5BB91B87D6D9ECB9AB742610FBE4DF25E3F489FC2F82E27CF7B411393845E19FF41299FA8F674D2363F498FC0FC45E534D649A64300C3BC661
	E2552DA3FC671B79DAA79678D68215GDE87C4661DCC6E7196150EF7380EBF51F1BF94F8430158357D5B17C89BBC8773E4F07B345BB6A0B8D289EF31096B09825EF8208C404B013AD239FD4F2DA6732CE3DD16FE1B8362ABFADC8E18128E00CA161F12C67A4B311653EE3B334DEEF3D855CC9843ED9DEFF87111859AF059DDD64E137B7EC6D917B2DB4A3F777C864C6FF0DDB23BCE0BAE371457E64F26653B067BDDB0DB1133257C2F388B547AA583CF592C23EC454C78A65DEF200EA9AC924F0FA728AE3A4EE899
	02392B6D04CD9C127DB8D5A2470CCC66CF0E0A2A18B9CA3CE226E6C2FF6750FB1BDA651C06EA175ADAC916B74FE95BG4BDB44741821C7AA55507BB0B01BC6BDD1A51B3D4B184273F2890D3DFA0DA265E514EED249F7BA39A7ACFFE7E96ED4FF110971B415EE51AE0338AA1553DB3A410B87DC1572C6198E152F1DCE6E866389AE4D71126779EC1D975A2EDC67C526327E96851FAC3FF50DB2BFDE4AB724717C28DA2D7CDA4CFF4C2DD5FE87662FB1EA6577E23E25DA196FCEE37921187F0D2DDA7A43B15F1A2FD5
	7EE248E7FBACCBF6A977D8D6C865A741E746EADE46175A344AA8417CDB7334EC28437CE3F9DA72DD187FDB4D7CBE4C7F164A87F1B54B1F077937E84AC7E0FEEC11D67E924CBF1E2FE5FF9466AF55ACBF9E739F524C9774E81F267DB9FA7F769BA11F4D612F5075D783243B903B7F90417AA06DC62C20014F75A7917B184AAE03F482D0EA3A8E26825D84625739A683FCBAED178C3855E0324355055C94B356D66DABB75456D415313D0130CB4A3D013A3515BE7786BA52599C22D77A8CC9AB26F3A4B2E6D065529F
	33212A194C99D1BF0C67EE1713ECF7F4353619BFEC6A6AECFF6BC46BDBE6012F1F3F5C4C4FA804C0794B5279B52F3A0F2CC9F1BDCB8A2B2FEF77582D4D1641AEFA35E56B59DF53EBB211CFDD2313760752DBC8198D10B683B900184FE3BB79BED778DD378BDDC14D1A67AAE24CE5A93357B0DF97C81FE4BFC4683ADF6F5B6FE413C15BEF7349EE59EDE673AA9337B9964AAFDCCB2E65952D4AF6C34AFC9F7ED512B8517C8FD5799BA5F9B97FC6D5BE7137D4A57F20AABFCDA14FE27333D29E1B15BF0B909C5F2D72
	F966443A1645E40E74E9DCD1A4C4BFFB27D4EFAF1F4B95B477A168284D7CFF34BDDD72E171DADE5F9F9F58A9A8768EAFB886AB4F8F1055F865B9F2B9A09B99F87961FB0313EB785EE049BA1DF436E543FE0E75A2764888579702D823116F03A42D63B68CBAFC6D21C83392C9EFE8B557D115414B0B5D4A4B9BC26CBF7389C62EF9E199DC474BE5BE62C3E7A3CCEE65AEEEEFEAA6EF53237D24CD8FC1BA88A8B4136BD85246F5C4A076C49E37AFE7BD47E665F17B3A905B1C4F31596B39FD2546C2ED7B704A4CE41F
	C659C5D85E0ABCEECBA2E285459C6B594031AF64F37B96A1368A6DCBC4ECA5E265D9288375DA33266A1D1745673DA1747E69B9184C32F975BDF46C94B64235F0A3677979A142A302E3ECACF513A939503B11706FEBB0E934FDE57F4C14BE89B5008C214DD21F69066F9760736F2BD62DE23AEEAEA27352A11747BE81B6D99CA41C5D2E91BB1B17B29BA3280D249E66EF64E356236FA947692C2F6626A47B68174BB7327E983DD16735075B3F0E141B158DEB83A036C63AB91D2C7D4FD84ECF3DF3GE037476536F9
	44F106523BC6523AB33479531D73396BD34A7DEE46F2EC3FF612DE833A40DF9EAF06DFCB719E854E2EC36BDB78F5488AF9CB01D86CEE4AA07D35FC13CE5F815487B486948A94390947723769D542B47B22E6173B8B965D8E45B6A273AF3575531DFFFAC04F476B486F5FA3AC3CAEA15957BD1B251B243D8169F37163C594E77E6DDCCF7C4B4D5169EB01FA005CC033016665F07FF62EA9E77E116650A40A1601A1FA670ABBC7EEA649B0D920B25FD634FB1FA70800B21764B0BB22F2F41A7BD771008B1BF57A1C4D
	F23E913EB7EC56E96CE54DDA4363578D79D620B1855FDC789E26A917331F4BC5C27ED220E885DF82FCCFFDC3CB6EFFC73CFD4A853EF20937718DED1F4C008F81CDAA7203617BFCCD9D2DC6E51BD888BC4B00E2A45EC48D9DCC6E16EAAE173E057194EE11F92B603B8928C701B139E737F2B9471629E58781968234E00ADCD83EF7AC96814FF209AFD623ACC2C900E7642A738C102E4D550AC532D1292383F8FA015C926F6CDCED9D21000783ADD6642F5060E5E3C259G697BF139ECCC580278E10A9B72E41C0D95
	1769351824FBA0AFA71F6FE1BF5C669D0F6510971B4F74A665EB5B1AD120539B8A54F935106EA8500A472F73F8DD75CA79EE855FEC789E8A94DE60DDD75765A95B54E248DF8194A7712DAC705526727315F2D905BAFD89D0DDA1636FAA74A577E7146B536091811B83B42F505B4EDF65CD99B300E709449725D19621F840052D6A3C9CC89B37EA4550D06C2D2381783AA5DE6BD6ED9DE3004F754A8B03F424260EFFC17F17CA79518A3E84781E3ACD274F5D666DFF2AAA5E65105F88E416780636790AF732CAEE92
	78020166CB7C8BFD4A7D8A6516E97044G1688143EFD7AFAAA841EAA094F34DDBB06BD00BB3C7202A09D62053179D88CD9EAC96B2BFB8E9589DEEB5BB618C8990B2CF60B43B5D8D4EE28AAB7D46FAB93B457262CBC9D191EC9574F5FE7706BE7613DF78826DFA6A4137B9DDA574F8512EDC95B65F9D574193DBAE6577F9491FD0A29F265E9723F45C58F490AA3F45DABDDEB7FC27533EBEA64DAF2DFC5F37E85D754E3D05E497E73368151EC99C41941F5C4BF6E0333E9191467DCC756F7644C964443BEC10F1B1C
	86C667A02B2FAF3488D8F757AB3E6734FC9EE7C255ED2562F355417C1F17617B3E469D995A77B56E4E503E6F7B2D8C7F779B7EAB4377F93B9FE6A84F5B31FACF5DC26A264A2053F7813901E683059A787C2AAB1334EDF27AFA6A5C2A55BAE8630D096B5F3B5E372F8756CFFFCE7B68FA325069F70922EB18140F77F256137A92DDEE8ACA6737571398F96C03C3A2E315706E7524FFB9EC67A84C7627DE256B7AC870EB19016FD935F790AC8652890805D3ECA524F3F6F06C75DAFA9EG52A6443AA9568369A1442E
	D492EC9252A108BDDA49774A96A0769D3A66C902F4D69147C257707B71A5089D234FC855C13A9B31F9595C8FABE24FE4F39DE308B9689E5DD2C847A036E7BF571108581FA7384D69459CFB73B257D1085897AEF39DD508D58F93AC885221083DB242E54391EB94893698524B913B13E25110CEC4EC161D6AA8016BF8894716D13DF5106EC06CE0A637399731EBB339FDEE446E2E21FAA19D05D8AF5DDB090774CA44FE380D2EC1CB611ADC4A318D5B69DEA8243B909337F39DBD08C5D67318AEC0ACF11417378831
	2397396CF244128688E65889F3161D9CDBC2635285E9ABE28235EF8C52A108FD2B985B95E28F537D07A4C8E76D625853F45DDE82698644FE1C4F6D6BC6AC3300E0D6C80B08F9A8968469D0445E206505C3FAA9E263F40FA39A527108F5F7F27B84A3470E9B88568D69A1440AE9FDCCC2BA98315B4BE89B0274D244F66C199A53E3940B871E54B20E198D3CBEF2913B096AA807F483E22FFA28AD109EC22CE38477354B783CF96FG1903AC03F4BCD04EEED88BG1901A6016683AD83CA82AA59837321BDDC2E054A
	75C1BA88A88CE8B1D08C10D08EF3EA20C620BE20A02030F2AEB72BBFC263BAC274526B7CEE75DC0458656B5AE35EBDB52FD64208AF5CDE1C17A97867EB48FA53325D5E732E88CD5B79B9866FF3997E4E382F534056C81F649AC6A6ABDB94F94A738D3E4EC3A8E923623BB48E523D4A45D08FD1653CBDB450EBC6BC24D7A2F69B4552AB208EABB87689BD3FDB8B69EE44224AE9FF02340858E197EFDFF390EB21FA23A01D00580B34BF25D6020ECA9CFB0A38FD35087D2808175701585FE81F8D05F484E2F64A3784
	5251085D12476DCBC06C57ADDCC76ADE0E151AF88CF2913B8E4FFA15A0D6CD479491523391AB23FC21100EC0EC02E2CBA03D82315FE1F9B10825D0BF2A2AE07C2D6258CB68EF9FE239D4EF842417A2F6DC76973157283F8910CE2F66D89715AD04F4B9E25F26D89D243B916B2365D9A19D0458E3343C90C84FC76CAC7A3130DA2DB7FD9F5465BE0EB553313B9652DD085DC431BEC83B91CB2258A424C3907B85ADEF812417A0768935AF8A52F108459E62362CC44CC84B6B2A01EBCB8D47EE257E0EC1BA8431A70B
	38FD8BEA5432243CC508ED23329935B016542A5BDA9D243B91AB486776D9913B3F056B98C3AC5944E3B09731FE0CE9E82D3A4E63A01D0458AE4A17319FEC594F31B10A55C13A8331A731BCB3E289343C7910DE0C581E924E37E23FDAEF4981380E9C60583B323F8754F5EE05746481F5DB8B06F45881F5DB8B077492441C2CAEA11D0858F256065E04BE78A66AC5BF4A91E36346A424C35E64FB447D3964DE4182C8AF810A83926A60BA86D48E5488E4869A828A828A858A87DA8C3482A896A889A863A0DF8FF4EC
	A66757FC6D4DCBB7C1692240E3D11E114D5862FBDD30E94B746B0242AD44B79B4C674D63EE696C550EAD745C6D39F3A3B6DCFF6C5C1205D867883F0B415643199D5A671ACA691C5FGBE569E6477DFBE68D05FFFB916AF88FC3D7FE08739BE8DDB466C432343744496AB67B7341CBEA8430165EC5E6F7BFCD7A51D0F07826FFC649F2CD55F9BFA0A72AC077CE864892954BE8396CE579A9975B056G31FBC5CFD7CEF72FC8C9D36E95C1B9AF2FDA35AA99FD7F69BA6ABBAC66553E7F012EE9FA01FF0868265883F4
	CD93826930FAEE3BA5DB5B7671ECEE7BB214FFA81B574BCA746775ECFF7E24C9F626797047F8C8277FD0E0E7A219BD57B4E85765FF5275D3AD70B79E627618E9DDB8A0BD06D84EE5EE77FC447AAEF33BD79C62F67F4765696CCE73E3375060EDF74730365DFDF4CD16817C398D5C1EEDA2374754406B612C28EE5F4385F27BDEA4EA173D02166306B2A6311CD03B6F767DED3A1EDBG3C11487F54E5F57B7EAB0DD58C6447233D7D19BC260507F97C66E5CE570EF96C34625785657CD5550E9757E83763A83AE66C
	81FE6BE1EE7308D1ED739769FAA2987267A14F935B34471667685AED997045A06F4E6D6A5887135B5A523D5D6B37CF67275E0F1F99C7583D59E42C03A7697AB4977012A3BC3EDBAFF21B3A0F70781E39B8DD7B54ABF4CF9E1175123C60A372BDCB6663862BF6FCF7D9096EF9403F60880F47EFFC343717E9FBDB81FCB1483BE51B6F76D6C5E31DF1945A7ED16E57CF0A7D792597583A44D73FB3C1B98382BB334D744764EB5B1AC42F655DC46FD1EE6B5F0B34E330194E2566GDF48D1DEA7FF4E67F5328865CB8A
	546DE4FC1B5CC73FD820ED47EDF45E9C87E5A4E2B995C53EE356C6679B06C6188FB4F27E60BCF5FB3F0B4EABFAA05F5A4863BA58B9DDBB75975710C6F686C10F3C7D866DD8CD5075FC98700723FD75C6F25D6FF7F968E1EDF62E799FC6BCEF8CFC89C046A65059441E7DE0F25FAB1BFA9EFAF99917B3B73173508E788CD249D976E847FA1C6EBF04826F7CA6DE0FD7283D4BA19D5D44656F719ABF965371A33D9966E14D1CA7F3C47B3AD8CA77A4CC4057534CE37F6148F431A7F1DEA3FD1F83F2731AD96CC9BA22
	593B2F5A1D0AF358744C31E9143D8D0365FFE7527B9C360A894B3131334B341C93F66728E89BE99982AE1E5F536C2D275BE3F7F96C62B84BBFF0C6D38FE7C2BD43C7733C4AB1FB6C0303B64FDB23437DF4EF1B719DB67B60BBA9CD9979795ECC724C03FC0A489F6F7B66EDDAB6FA9940F8735A657353E707ECCE46AA0DE3A374DCB3BF3DA5E7CB4FD6FFBC60FDD6133447C54D7CACE7D91D77D9D2123F9C738B0A3564E3B17FD54D7CA44CFFE44AD9DB121F514273CFCEB96BCA728D187F47A9E7CDC9FEAD66BFD1
	64FDD61564F7E07E26D2AD7D3D187F0BF22D725D18FF660277F9E612BF3B05773714F66D6BF5BE5D5F89853EF064BD5D2E9E07FF3FDD9E079736EB0F8D4BE9B9D1D0C6AC16736FA53E4761EF5175E6168966BCA64E7FC239FA5CC82B20FB1B10EFB67131406C1AEEAC60630056B8BC9B4A398166C545F8966C5DB66DF158C377290201FF9E5A171E6F5B1F9D74FA3694F8D7187858F8CB910F2D504A6D7FC551F4738E7EBC16167D652DEC5FD49E4BB696EA57C7D9A1DD27833F29155B9F64637A9CCA6DF4835FE4
	AB377DA7EC5F8552110869CC5C1F58D6FE66B9159CB11666F237187C7936E61A3A49EA5369F728FC6B48D737078F587E9570995B38CF0DA66DF65DC3ED6D81BE87725EE8D2376BDDC5326D2FCEEB7BBABF3607364973D0E9ACAC705DD67651B94BFC1009E8636DE20D5FF9DB1A241F370B68B675FCB481526BD47A777A18373553982E847E74F6DE2FEC2F3596520D6DBCD659795AF15DCD659D4097043C8379DEFB874572F83154079DB1ECAF884AD80865DC72B3EF8B26B64682EF827247F94D5BDE27ED363083
	5AC7870F2B53EF3D6A2629571E8E6F71A2BBDF3B8F3138D8015F5D416DFB27D8BB069F517970BC600BC05EFB0A55B1746C14E33821C4BB063B68989A8DE544E1B94F65790E61EAEAE3CEA7DC37BAF10C76BA1B9BCE635C8579BD1DBC062F9D1AAE069B7C44F0CE27777C6BE831F68C4F523804GFF985A77DDBFE36EA3EC8D813CD11D3CAD2F4658269E63769F1D36EFED90FC0F39D5473C475C7DBE5A7489EACF8370F79C8BEC4C9501AF6898375D447A842497A2763B966ECF5CB1BE665ECC36C524F1EBFC5AF1
	4BDF5D649C779EF377FA0D392D54A68370159F67BE9D71B1661E21E3EEAF70391177862FB1B749A85B1EB82D6D9B7D58BE6F3877182B77B3669A68183BGE4A20F73F651DCB2DD3B5828E897B14755E3EE6271190D39C2974CA73BF83DDE437651A1ED6A8AEC4CF5835F6CAEDFE3EE81F9ADE7C0E3EE841431884B39564F18FBAB35B18EF893117F992FB1776FF44CB51C0076F102477523E947DCFF755AFB42FB3CC877B1669A28BFC340AF1E607B7597F3FD6F3BDF491DFE5F7D3ADC6D73B8F3F3271E4739B1D7
	7BBC4ED7F269B5D2BA0FA31D094AA5EDE650E33776A05FED083D0358DD34CC021D35DB45A1444329DD846F3091059C3F0F5AF509E2BD7CCC1482FB073F67AC176C85004BC3AEFCBF47833934AE6D8E87CBBFC4F96CCED87FE1BCFECAED343BAD8A3B9FC50C586D7BB92C068E03B07DF3D82C7D9E59A34B3DDCCB4A74716CDCF5753EF2C3F5ED19F40E50D2AE4B354EC06E3FABE5390FAABF4BF9C6D646031501BEEBA71D27A42F4362E7A12B65F20CEB8277E167BED96EE876B65FF235F56506FDD5E51CB7B8BBD0
	DB99FFF4F66075E82E117D3AD4AB5B77035AC06CE3F2DF5DAF4B45CC846E571E4BB3736B5265407D7A6F8332DFB1EF4A76C53A8337EF3F98383EAD87E59D976D0137097AFAD96E014B014BA5B648F2951901768746BF1EB93336BF6F089C4B9F9D1575466F1AC15BEF16656E5B76597BEF6A76406B2633C5365FE1124BF8F6541F7D7B8FC2E328A913F8EBAF8622EF2A3D89C7195E9BDAE59B6EEB13ED781E98088DCC6E09F6D9AEF8EB60F277A9760366977BEB7F87D57DBA462098730A64B2FED364270C7DD52A
	B2F6AA56169D79053E65C02C2ACC5A7BAA18C15D1648652FAB8A3CBDBACAE5B9E7DE60F2BD0A6B1729B350F64CE4AFD748713CD5F1BD7BFAC07D08BDBFB3EE646F318E03B9D454897E6C69B3DB49BDA02D77878E0E5AABC7C53B233E5EEC979D36E669360474BC6E83F42F1F6E673C451F17FD016A6800F49F509890531DD4461F738B86EC69DB78BC70EEDE06F01217615CCDF86BA05D8DB4F4122F059E58AB7B5DE97063F7CD4D7EF2C3DD9D0FFBEC15ACB7479838DCE30DAC77A74FE79FF79AC6829DBB354682
	5F6343G3D7632F8FE171E3BA573622013BC46FDF584A3F34DD844CE95F32C301BE395A5DC560CD89ABE773B90316B68DA01581200D8E1BE474C7F60D8866AD8085831D20EA5A016D941B163A90EFD698241485C368FB05FB12DEE8F3C3FDF2718EB08A586BF7D260E741BFD7B4B185C5D87E4391F1787AE1726382ED73BE6565F0D75F2FFBFFEC8AEE7D6DE607A1D0A6B3C5D6F387B26EA6E92D994F8CCEFBCAC5B99F5C45677C1C07A185CEB0AF9C1C5DE60F2E7957302C7DAE6B60F498F683D91CC4F04E28E70
	7BD6D967D653E79F93DCB330A335DD36233CD3AE631900E26DFB7CB8F9CCAE57F3DCAE37F186F5F8F317AC9794D09D7A0EC9D3FE60B1D9F8C216FB3BE886FD7A24AC771399742934D3325C71006BDF6A532795FD5AAC171399105D3E63B527B870F80D3FAD4B7D4C7F5C6520F26EB26F0CACA77A1FAB296412FAE43928001FA51476395E1563F564BD391C4A7C4075DBFAE53947E7B086EE1DC1CCE73FAF5B79758FE4FDFE474083B52A7E73538FE539FBE7B086D6774BF2774CF08CFC35A5F09F4D83320F91B6D9
	E7417F4198B8BC03B170FF4F49F63CBAA817E1A879ECE3E01EDDAE37613CDC6E499954610797E4397F1FE360979C325C408C7A661D43325CC3B3988B125D325CDBB39C83CBBE12635C6ED13423006CE64F62FCE21C6E5D9D2127341E8D7F5234F25E6FFCE6F2BF19D6EE0AFE7A9E03813A6609BC657DAE948745971F72FE974AABC63EC6DA86F9D52779F3D32F17FD3AF738E46C7EF4F22DB316E3FE7D012E5BC2CEFB7B7BE70A071D7676D75C0D3F1386F9D9E66E6F77873C1FDB96A1EF0E195569BC337673DB91
	00AF714A0B02F43CD92BAD586A380F425BACBF67ED45FBCF60FB435BDAF2E7D56F896F869EAB501844BB77EDDF4F7B6FAB7176A98CF8A3A57E259AF2042281CF704ACBBD2353671E5132EDAD3ED320DC4AEFD47019617B10265C75D3FEFFE6927802A55E795267C2AF59E5100E714292A11DFE96567CE73D1F1F5BB1651DA5D540E31278FA24CF47D9F5F9C1108E714296C0FA915072A9BAB6E25D44CAF9C98A1E0C9E1D5E5023657F49D2AED7AB65F7A878FA613BDBD3AE3BC25996E683CFA8D038443B3847D7DB
	787285AE37C26209D3702E5410E36FADDE3C095C3F33BB9DF6272D057D329716E9A7DBB852F70F627BEB464F7FBD83B9E51F3F0E385D32CFAFAA3ECF6C7E7CF55F74396AE04FB7C553FD1B2CF7F4FA63BB7C19278AFA1E3C8152DD08FD19E2BD10F6A3F614BE8FB79B52E108BD4A1EB306749244DE9779F3D5D1083DEFA11871DD1D3E71DD0ECD527DA2721C3199314192EE5F90E27761F3E413085D494EE9C0BA96B1E7B137A58931AFB57072B25E4367CA9B383F86448E9E46E74190B323AD1308FD2D044B86A3
	A61472D84DC30CBDC7CEE29501583EA20C95E20F225EA844D20AF92C0C3D786CB6BB8782699E44EA0B38FD8E44BE4167BB0390CB46D8ADC76C9BA89B0BD8D29177AD8931F70A39EF296F63F373747EFCAE249B9053213F5D085D3F037BEBC5AC851F299CC36CCBC55C5F250885316761A13D923116FCEEF356879C7BB776BCA124EB91FBB91F5B5C085813BB384DE6440CC55C66A144CC7B384D1308ED4367840391FBA71F5B9C0358D70B265A4C1E79CC841E2C8FB9960EFE14A07617FC2E238E31E70BF83D4DC1
	6CDCA96FB37390E37B1A243C8844FAAAF8F9CB900BAF61656574617345955CDFA3E2EBA7F8F98D083DCD31EEC877A1767D892E4301585D9738FD0B905B6F6265ADC76CFAFC0EBB360F1F83F9F9C07B2C4ABABA9655DAF47A8E8B67B5D955E7D5DC1749D84D726E36EA1FD5F90016A3C299C1D84E19C33E4F2A38E8DB8D875E05487FF4197A2C4ACABA7E45C2FE02051FD559BCBA13672C8C7DB08E81111BBDE40EDA8B5F7F32EA552ACC74C734E81FD519CB4754C6606F6A67E7006E24E36A9824E7A396DC426397
	514FEDFCF85AF3CA7EEC0C066FE403F2975A38484779A076BE4FB860CFC4FB3EC27B04E1C027AF9F60587D8D5C465E81FE9F664B1324CE193D5D0727FB86491F3DF3865839AA723ECE6999930CC9886A7B6E95816B3E0C76334510378CEDFC093D9B0470DBB9769E6D23D510EE30627322FEEDDDB30D2D8EA86799297E190EBDB4DEE3004F3672F6D867678C63BF5819AC60DD04F63EDF447D0DC3BB7F5D6F3971F5535819E353698FC9EDC0F9264CGF8390D6B7D856A6D3171B8C7FDAC47798B5437591097EC63
	3E7DA4EF7AF7297E1EDE9F68EF01212EF25656A01D08586F6838EFB887B61D63FE67CDFB76D46F476FDEA8676B2A7A391F7AB88438F80E7B70153CCDAA9F1A7828461F6BC47B434EF1DB9D79BCD64B301CBB3D4E643D76099C3BC2FA7EB089F8D387712CAA3EE3368A31FFD02C9752C3088D536BDC88244386F9DC76CFFBF652DFDC16C3B957C84F07CAF5CB7D0986BCEE107BF33458F73B6D21EDA1E7884A9D62F6BE01B1699A62F62EAF182E5DAA6D9C9BD25BB997527BF9DDD29D59D4EFA86073D16F8D347FAF
	07F4B4E287AA38AD69F6EE0B2BA210E7BEFD0E75F6F99C151EEB24FA9B816F32F33D27285EB1C84FC62CE6025B92E96731F5CC285B4AB6FA3B1B59795844CC1EE17736B3464E76CC56201D0F536BFCBC60C9E8135D45EDAAB94F63F33B5FE7EB7878421F6168BE2F56EB05747552F75FFB18C5D60390689EE6D30AACD7FB485FDEE0D50DF2AF522A1365161485AE37B8CD16FBC97C6C6FB8FCEA357CFDF53ADCF6C6DD60B6752E1565FA7D6DE713E38A0AFB95DFAF89BC4E1F2C136D3CBDC356773A3FFD6EDA7539
	1C57574BF2339AE6F64F61678D015B3AA3CB5693B2839FCD9BE5399F7A3DD7240E7FE036AC374B6FFE34DA6E119CD96E4143B35B8FFFF133DC9FB9DB64F23E6DF7BFDE2D7F4DDCD92E4CDFBD56D4295A0DB8037B7C6F6649F6DED13CAFE45FF46D26C656775C8C7405A95E59B05FEFACEA25D8B05E243CC05E8B4AF468374ABA6E5D91088E693C0D62CC5C2B75B32B6F6B8CF29C6F5EA117B3BA839F178664A3633DE686771116A94E69BD9ED0BC24FB25813D0B1569F821D856F1F0DF60B1BF23F8C6AAFB06771C
	46F749B11FE7144B3941EF9FD76B7FD119ACF7DBFE60FDACBE20787B3EAF79075D326DE90A7303897E6EAFFA0D57468AD9AE25A2706B4A090A405B4E71CA59CE27621C5E774A833773894559785747E7F6DDB9B691382DC97BE4DB8D0A33DD3BDD7E5A43417D4AB33DC12E4FD62FAD74DC79961A7FD0BD398A04BFA7240DF8046C293A1B7E6DD73F8C7F501413A224F48A2B0768339E1DC25AA5725048189BE6E15F847A32A868490FF399BA1DD0CA26AAEA8F5D367F69E53FBDB32293D6F78AF9E41364344DC35F
	D7EC33125FC5BCE37390BDED429AB77971D7B2796F94D2C768C75A08B86E30F589B967CE119FB49F91ED56A67E065E91D158CCFFDEF9AFB9A43A3743B2B2A412A7EC8EF58929CE4B30CD9432D93643629C5C4BDE0BFC08D8ACA4B7B552F0509988583B095ACBCA2944D2B67DE0C3690EE3318BF5C2CA1B30566132D85BAC83224B53A92C9107BC3611A11743BA66BE4A8ACA3FC4E2CC1F6F04628A50FD62ECA5D92822519746EE191B99175986934EB10F3017F21239F9A5F210779EF8C0154D5389E48115A518B7
	EB1B3873676DDBFAD304E449490F040F0534B1374882864AB750A2094B15EDE035786B679E3E7DB78D8971A052A624511FE38645D9B297FB3342F561B7EFDD9792F3BD314BCD42B3C2CADEA38A2B4FD9066D0EF178E222ED1F63EBC40F45B9C2FE659A149A3CBC66D9E8F865CD8FD75DFC775F5E25064B2222301DD591086E9D34390677B61DBBE7F75A30G28AFA8FEAB96CFF8AA3DF83247EE5CFC6C09D57D503ECC02EE382A0A7E2F267F77117F55942926C875BE283484416F1FF77E589871B9FB8C23CBAC69
	248FAF45DC2C2957BDF507AEC5C8054E419E660246CB1E4802466BE1FDC5A73A5C345D114E3BD67ACC9105AC69D7978D520F66550BC2A67D85C5837B89C5C867F438AE99C417017CA822C1E28738205D639A854062368C5845F1837E58212194F233E9CFBCB9AAE24186D1C8AEA5ED44B6D0A98A1BB01F7F129EE158A875DF9FC259BCDB1621CD017C119939DBA3251B5257882A1F5AE9883C0EE6E692F672A58BDB9CC9ED22191B697F5CCFD7FF95E3D41A4C9ED7CB75C0DFF46A438B7A72EE14C815EA4DC0A4B5
	F826CAA4ABA452FCC87CD3446D309C37B4A9EE448B7D55EEF76BD43B09CD2B51EED27BDFC39E3283C0D6E0E749F78D1E29A99205EA14679B788B00D2D5BC7BB0A5E0CC54F13B0A23F8C60EE22A9445B4D59455DE740069A7B5D2D715CFFD32CFFD12BF646C388E6DA6BB7E77EB242EAAAF6CD3EB0658375A079724A59E1C525A096FA99ABC6A54D56577285AEFE25BD7845E672EAACBA735ADCD1B26CE68F66B34F5C27E7EA95A699727DEF7F52AA8283DA06349A50D54D56553CDD37B9E592CCE7761056F3E273E
	D29C3D5A7B5E5734DB746A2B4F523B542DEE3A3EC73C516EFBDAF5C27E7EA95A69F764A8109BB53C1D2A2F5E1748CA043EA14F40DFBC880B085546E13B3332CC4E63AF8B043C8D52CB798CEC6D28C458CB7D88C2DE3CC716AECC3CDE25F2D0A3F5D5856EC1B9F0FCE2C7FFBD57079724E994CF11C8D1C9909E63556769A36AE9B2FA7B4FD5DF3FD457976F727E6AEB1BCA02D03ACA026C9C9AD572B7E8242E2AA8444AD1A0B72FF82BCD1D560B2B582767E51F48GCDEA161C95C87761053AE6C994F84D2AAF35C6
	D52AF8CA5CD2FCC8DCD531D9293E9C737A161718E4417AA072A4CB7985D2A16CB7714ABED17E56F052359BFC7EA6FC61ACF6B63CEA1677EF8DCF505FE3F7GBEE796FFBF52CF1B48463F2F5F3ABBBDECF1B8C40B63C21353FA4CF25152BCAE5A645FDA7B241914BF42F924CC693DC94D446E738A197F87D0CB8788A738A4C7E5AEGGC021GGD0CB818294G94G88G88G0EF632B0A738A4C7E5AEGGC021GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGG
	G81G81GBAGGG1FAEGGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private String getChangeCondition( String change )
{

	if( change.equalsIgnoreCase("After a Duration") )
	{
		return LMProgramDirectGear.CHANGE_DURATION;
	}
	else if( change.equalsIgnoreCase("Priority Change") )
	{
		return LMProgramDirectGear.CHANGE_PRIORITY;
	}
	else if( change.equalsIgnoreCase("Above Trigger") )
	{
		return LMProgramDirectGear.CHANGE_TRIGGER_OFFSET;
	}	
	else
		return LMProgramDirectGear.CHANGE_NONE;

}
/**
 * Return the JCheckBoxRampIn property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRampIn() {
	if (ivjJCheckBoxRampIn == null) {
		try {
			ivjJCheckBoxRampIn = new javax.swing.JCheckBox();
			ivjJCheckBoxRampIn.setName("JCheckBoxRampIn");
			ivjJCheckBoxRampIn.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRampIn.setText("Ramp In");
			ivjJCheckBoxRampIn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRampIn;
}
/**
 * Return the JComboBoxHowToStop property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHowToStop() {
	if (ivjJComboBoxHowToStop == null) {
		try {
			ivjJComboBoxHowToStop = new javax.swing.JComboBox();
			ivjJComboBoxHowToStop.setName("JComboBoxHowToStop");
			ivjJComboBoxHowToStop.setPreferredSize(new java.awt.Dimension(159, 23));
			ivjJComboBoxHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxHowToStop.setMinimumSize(new java.awt.Dimension(159, 23));
			ivjJComboBoxHowToStop.setMaximumSize(new java.awt.Dimension(159, 23));
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RAMP_OUT) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHowToStop;
}
/**
 * Return the JComboBoxWhenChange property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxWhenChange() {
	if (ivjJComboBoxWhenChange == null) {
		try {
			ivjJComboBoxWhenChange = new javax.swing.JComboBox();
			ivjJComboBoxWhenChange.setName("JComboBoxWhenChange");
			ivjJComboBoxWhenChange.setPreferredSize(new java.awt.Dimension(195, 23));
			ivjJComboBoxWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxWhenChange.addItem("Manually Only");
			ivjJComboBoxWhenChange.addItem("After a Duration");
			ivjJComboBoxWhenChange.addItem("Priority Change");
			ivjJComboBoxWhenChange.addItem("Above Trigger");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxWhenChange;
}
/**
 * Return the JCSpinFieldChangeDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeDuration() {
	if (ivjJCSpinFieldChangeDuration == null) {
		try {
			ivjJCSpinFieldChangeDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeDuration.setName("JCSpinFieldChangeDuration");
			ivjJCSpinFieldChangeDuration.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeDuration.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeDuration.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(3)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeDuration;
}
/**
 * Return the JCSpinFieldChangePriority property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangePriority() {
	if (ivjJCSpinFieldChangePriority == null) {
		try {
			ivjJCSpinFieldChangePriority = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangePriority.setName("JCSpinFieldChangePriority");
			ivjJCSpinFieldChangePriority.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJCSpinFieldChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangePriority.setMaximumSize(new java.awt.Dimension(40, 30));
			// user code begin {1}
			ivjJCSpinFieldChangePriority.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(9999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangePriority;
}
/**
 * Return the JCSpinFieldChangeTriggerNumber property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeTriggerNumber() {
	if (ivjJCSpinFieldChangeTriggerNumber == null) {
		try {
			ivjJCSpinFieldChangeTriggerNumber = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeTriggerNumber.setName("JCSpinFieldChangeTriggerNumber");
			ivjJCSpinFieldChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeTriggerNumber.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(1), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(1)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeTriggerNumber;
}
/**
 * Return the JCSpinFieldControlPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldControlPercent() {
	if (ivjJCSpinFieldControlPercent == null) {
		try {
			ivjJCSpinFieldControlPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldControlPercent.setName("JCSpinFieldControlPercent");
			ivjJCSpinFieldControlPercent.setPreferredSize(new java.awt.Dimension(48, 20));
			ivjJCSpinFieldControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setMaximumSize(new java.awt.Dimension(48, 20));
			// user code begin {1}
			ivjJCSpinFieldControlPercent.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(50)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldControlPercent;
}
/**
 * Return the JCSpinFieldCyclePeriod property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldCyclePeriod() {
	if (ivjJCSpinFieldCyclePeriod == null) {
		try {
			ivjJCSpinFieldCyclePeriod = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldCyclePeriod.setName("JCSpinFieldCyclePeriod");
			ivjJCSpinFieldCyclePeriod.setPreferredSize(new java.awt.Dimension(48, 20));
			ivjJCSpinFieldCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setMaximumSize(new java.awt.Dimension(48, 20));
			// user code begin {1}
			ivjJCSpinFieldCyclePeriod.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(60), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(30)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldCyclePeriod;
}
/**
 * Return the JCSpinFieldPercentReduction property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldPercentReduction() {
	if (ivjJCSpinFieldPercentReduction == null) {
		try {
			ivjJCSpinFieldPercentReduction = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldPercentReduction.setName("JCSpinFieldPercentReduction");
			ivjJCSpinFieldPercentReduction.setPreferredSize(new java.awt.Dimension(49, 20));
			ivjJCSpinFieldPercentReduction.setMaximumSize(new java.awt.Dimension(50, 20));
			ivjJCSpinFieldPercentReduction.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJCSpinFieldPercentReduction.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(100)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			ivjJCSpinFieldPercentReduction.setValue( new Integer(100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldPercentReduction;
}
/**
 * Return the JCSpinFieldRampInPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampInPercent() {
	if (ivjJCSpinFieldRampInPercent == null) {
		try {
			ivjJCSpinFieldRampInPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampInPercent.setName("JCSpinFieldRampInPercent");
			ivjJCSpinFieldRampInPercent.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampInPercent.setMaximumSize(new java.awt.Dimension(63, 20));
			ivjJCSpinFieldRampInPercent.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJCSpinFieldRampInPercent.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(100), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(100)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampInPercent;
}
/**
 * Return the JCSpinFieldRampOutPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampOutPercent() {
	if (ivjJCSpinFieldRampOutPercent == null) {
		try {
			ivjJCSpinFieldRampOutPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampOutPercent.setName("JCSpinFieldRampOutPercent");
			ivjJCSpinFieldRampOutPercent.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampOutPercent.setMaximumSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampOutPercent.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJCSpinFieldRampOutPercent.setDataProperties(
									new com.klg.jclass.field.DataProperties(
										new com.klg.jclass.field.validate.JCIntegerValidator(
											null, new Integer(0), new Integer(100), null, true, 
											null, new Integer(1), "#,##0.###;-#,##0.###", false, 
											false, false, null, new Integer(100)), 
											new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
											new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
											new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampOutPercent;
}
/**
 * Return the JLabelChangeDuration property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeDuration() {
	if (ivjJLabelChangeDuration == null) {
		try {
			ivjJLabelChangeDuration = new javax.swing.JLabel();
			ivjJLabelChangeDuration.setName("JLabelChangeDuration");
			ivjJLabelChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeDuration.setText("Change Duration:");
			ivjJLabelChangeDuration.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeDuration.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeDuration;
}
/**
 * Return the JLabelChangePriority property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangePriority() {
	if (ivjJLabelChangePriority == null) {
		try {
			ivjJLabelChangePriority = new javax.swing.JLabel();
			ivjJLabelChangePriority.setName("JLabelChangePriority");
			ivjJLabelChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangePriority.setText("Change Priority:");
			ivjJLabelChangePriority.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangePriority.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangePriority;
}
/**
 * Return the JLabelChangeTriggerNumber property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerNumber() {
	if (ivjJLabelChangeTriggerNumber == null) {
		try {
			ivjJLabelChangeTriggerNumber = new javax.swing.JLabel();
			ivjJLabelChangeTriggerNumber.setName("JLabelChangeTriggerNumber");
			ivjJLabelChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerNumber.setText("Trigger Number:");
			ivjJLabelChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerNumber.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerNumber;
}
/**
 * Return the JLabelChangeTriggerOffset property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerOffset() {
	if (ivjJLabelChangeTriggerOffset == null) {
		try {
			ivjJLabelChangeTriggerOffset = new javax.swing.JLabel();
			ivjJLabelChangeTriggerOffset.setName("JLabelChangeTriggerOffset");
			ivjJLabelChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerOffset.setText("Trigger Offset:");
			ivjJLabelChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerOffset.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerOffset;
}
/**
 * Return the JLabelControlPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlPercent() {
	if (ivjJLabelControlPercent == null) {
		try {
			ivjJLabelControlPercent = new javax.swing.JLabel();
			ivjJLabelControlPercent.setName("JLabelControlPercent");
			ivjJLabelControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelControlPercent.setText("Control Percent:");
			ivjJLabelControlPercent.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelControlPercent.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlPercent;
}
/**
 * Return the JLabelCyclePeriod property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCyclePeriod() {
	if (ivjJLabelCyclePeriod == null) {
		try {
			ivjJLabelCyclePeriod = new javax.swing.JLabel();
			ivjJLabelCyclePeriod.setName("JLabelCyclePeriod");
			ivjJLabelCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelCyclePeriod.setText("Cycle Period:");
			ivjJLabelCyclePeriod.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelCyclePeriod.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCyclePeriod;
}
/**
 * Return the JLabelHowToStop property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHowToStop() {
	if (ivjJLabelHowToStop == null) {
		try {
			ivjJLabelHowToStop = new javax.swing.JLabel();
			ivjJLabelHowToStop.setName("JLabelHowToStop");
			ivjJLabelHowToStop.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelHowToStop.setText("How to Stop Control:");
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHowToStop;
}
/**
 * Return the JLabelMinutesChDur property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutesChDur() {
	if (ivjJLabelMinutesChDur == null) {
		try {
			ivjJLabelMinutesChDur = new javax.swing.JLabel();
			ivjJLabelMinutesChDur.setName("JLabelMinutesChDur");
			ivjJLabelMinutesChDur.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutesChDur.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelMinutesChDur.setText("(min.)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutesChDur;
}
/**
 * Return the JLabelPercentReduction property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPercentReduction() {
	if (ivjJLabelPercentReduction == null) {
		try {
			ivjJLabelPercentReduction = new javax.swing.JLabel();
			ivjJLabelPercentReduction.setName("JLabelPercentReduction");
			ivjJLabelPercentReduction.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPercentReduction.setText("Group Capacity Reduction %:");
			ivjJLabelPercentReduction.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPercentReduction.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPercentReduction;
}
/**
 * Return the JLabelRampInInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInInterval() {
	if (ivjJLabelRampInInterval == null) {
		try {
			ivjJLabelRampInInterval = new javax.swing.JLabel();
			ivjJLabelRampInInterval.setName("JLabelRampInInterval");
			ivjJLabelRampInInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInInterval.setText("Ramp In Interval: ");
			ivjJLabelRampInInterval.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInInterval.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInInterval;
}
/**
 * Return the JLabelRampInPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercent() {
	if (ivjJLabelRampInPercent == null) {
		try {
			ivjJLabelRampInPercent = new javax.swing.JLabel();
			ivjJLabelRampInPercent.setName("JLabelRampInPercent");
			ivjJLabelRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercent.setText("Ramp In Percent: ");
			ivjJLabelRampInPercent.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercent.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercent;
}
/**
 * Return the JLabelRampInPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercentSign() {
	if (ivjJLabelRampInPercentSign == null) {
		try {
			ivjJLabelRampInPercentSign = new javax.swing.JLabel();
			ivjJLabelRampInPercentSign.setName("JLabelRampInPercentSign");
			ivjJLabelRampInPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercentSign;
}
/**
 * Return the JLabelRampInSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInSec() {
	if (ivjJLabelRampInSec == null) {
		try {
			ivjJLabelRampInSec = new javax.swing.JLabel();
			ivjJLabelRampInSec.setName("JLabelRampInSec");
			ivjJLabelRampInSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInSec;
}
/**
 * Return the JLabelRampOutInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutInterval() {
	if (ivjJLabelRampOutInterval == null) {
		try {
			ivjJLabelRampOutInterval = new javax.swing.JLabel();
			ivjJLabelRampOutInterval.setName("JLabelRampOutInterval");
			ivjJLabelRampOutInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutInterval.setText("Ramp Out Interval: ");
			ivjJLabelRampOutInterval.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutInterval.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutInterval;
}
/**
 * Return the JLabelRampOutPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercent() {
	if (ivjJLabelRampOutPercent == null) {
		try {
			ivjJLabelRampOutPercent = new javax.swing.JLabel();
			ivjJLabelRampOutPercent.setName("JLabelRampOutPercent");
			ivjJLabelRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercent.setText("Ramp Out Percent: ");
			ivjJLabelRampOutPercent.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercent.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercent;
}
/**
 * Return the JLabelRampOutPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercentSign() {
	if (ivjJLabelRampOutPercentSign == null) {
		try {
			ivjJLabelRampOutPercentSign = new javax.swing.JLabel();
			ivjJLabelRampOutPercentSign.setName("JLabelRampOutPercentSign");
			ivjJLabelRampOutPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercentSign;
}
/**
 * Return the JLabelRampOutSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutSec() {
	if (ivjJLabelRampOutSec == null) {
		try {
			ivjJLabelRampOutSec = new javax.swing.JLabel();
			ivjJLabelRampOutSec.setName("JLabelRampOutSec");
			ivjJLabelRampOutSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutSec;
}
/**
 * Return the JLabelWhenChange property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelWhenChange() {
	if (ivjJLabelWhenChange == null) {
		try {
			ivjJLabelWhenChange = new javax.swing.JLabel();
			ivjJLabelWhenChange.setName("JLabelWhenChange");
			ivjJLabelWhenChange.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelWhenChange.setText("When to Change:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelWhenChange;
}
/**
 * Return the JPanelChangeMethod property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelChangeMethod() {
	if (ivjJPanelChangeMethod == null) {
		try {
			ivjJPanelChangeMethod = new javax.swing.JPanel();
			ivjJPanelChangeMethod.setName("JPanelChangeMethod");
			ivjJPanelChangeMethod.setLayout(new java.awt.GridBagLayout());
			ivjJPanelChangeMethod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanelChangeMethod.setMaximumSize(new java.awt.Dimension(335, 88));
			ivjJPanelChangeMethod.setPreferredSize(new java.awt.Dimension(335, 88));
			ivjJPanelChangeMethod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJPanelChangeMethod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelChangeDuration = new java.awt.GridBagConstraints();
			constraintsJLabelChangeDuration.gridx = 1; constraintsJLabelChangeDuration.gridy = 2;
			constraintsJLabelChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeDuration.ipadx = -5;
			constraintsJLabelChangeDuration.ipady = 6;
			constraintsJLabelChangeDuration.insets = new java.awt.Insets(1, 5, 3, 5);
			getJPanelChangeMethod().add(getJLabelChangeDuration(), constraintsJLabelChangeDuration);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeDuration.gridx = 2; constraintsJCSpinFieldChangeDuration.gridy = 2;
			constraintsJCSpinFieldChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeDuration.ipadx = 34;
			constraintsJCSpinFieldChangeDuration.ipady = 19;
			constraintsJCSpinFieldChangeDuration.insets = new java.awt.Insets(1, 5, 3, 2);
			getJPanelChangeMethod().add(getJCSpinFieldChangeDuration(), constraintsJCSpinFieldChangeDuration);

			java.awt.GridBagConstraints constraintsJLabelMinutesChDur = new java.awt.GridBagConstraints();
			constraintsJLabelMinutesChDur.gridx = 3; constraintsJLabelMinutesChDur.gridy = 2;
			constraintsJLabelMinutesChDur.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutesChDur.ipadx = 5;
			constraintsJLabelMinutesChDur.ipady = -2;
			constraintsJLabelMinutesChDur.insets = new java.awt.Insets(5, 3, 5, 5);
			getJPanelChangeMethod().add(getJLabelMinutesChDur(), constraintsJLabelMinutesChDur);

			java.awt.GridBagConstraints constraintsJLabelChangePriority = new java.awt.GridBagConstraints();
			constraintsJLabelChangePriority.gridx = 4; constraintsJLabelChangePriority.gridy = 2;
			constraintsJLabelChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangePriority.ipadx = -13;
			constraintsJLabelChangePriority.ipady = 6;
			constraintsJLabelChangePriority.insets = new java.awt.Insets(1, 6, 3, 3);
			getJPanelChangeMethod().add(getJLabelChangePriority(), constraintsJLabelChangePriority);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangePriority = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangePriority.gridx = 5; constraintsJCSpinFieldChangePriority.gridy = 2;
			constraintsJCSpinFieldChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangePriority.ipadx = 29;
			constraintsJCSpinFieldChangePriority.ipady = 19;
			constraintsJCSpinFieldChangePriority.insets = new java.awt.Insets(1, 3, 3, 8);
			getJPanelChangeMethod().add(getJCSpinFieldChangePriority(), constraintsJCSpinFieldChangePriority);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerNumber.gridx = 1; constraintsJLabelChangeTriggerNumber.gridy = 3;
			constraintsJLabelChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerNumber.ipadx = -45;
			constraintsJLabelChangeTriggerNumber.ipady = 6;
			constraintsJLabelChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 16, 5);
			getJPanelChangeMethod().add(getJLabelChangeTriggerNumber(), constraintsJLabelChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerOffset.gridx = 4; constraintsJLabelChangeTriggerOffset.gridy = 3;
			constraintsJLabelChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerOffset.ipadx = -63;
			constraintsJLabelChangeTriggerOffset.insets = new java.awt.Insets(8, 6, 18, 13);
			getJPanelChangeMethod().add(getJLabelChangeTriggerOffset(), constraintsJLabelChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJTextFieldChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJTextFieldChangeTriggerOffset.gridx = 5; constraintsJTextFieldChangeTriggerOffset.gridy = 3;
			constraintsJTextFieldChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldChangeTriggerOffset.weightx = 1.0;
			constraintsJTextFieldChangeTriggerOffset.ipadx = 26;
			constraintsJTextFieldChangeTriggerOffset.insets = new java.awt.Insets(4, 3, 16, 8);
			getJPanelChangeMethod().add(getJTextFieldChangeTriggerOffset(), constraintsJTextFieldChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeTriggerNumber.gridx = 2; constraintsJCSpinFieldChangeTriggerNumber.gridy = 3;
			constraintsJCSpinFieldChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeTriggerNumber.ipadx = 34;
			constraintsJCSpinFieldChangeTriggerNumber.ipady = 19;
			constraintsJCSpinFieldChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 16, 2);
			getJPanelChangeMethod().add(getJCSpinFieldChangeTriggerNumber(), constraintsJCSpinFieldChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelWhenChange = new java.awt.GridBagConstraints();
			constraintsJLabelWhenChange.gridx = 1; constraintsJLabelWhenChange.gridy = 1;
			constraintsJLabelWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelWhenChange.ipadx = 3;
			constraintsJLabelWhenChange.ipady = 4;
			constraintsJLabelWhenChange.insets = new java.awt.Insets(0, 5, 4, 5);
			getJPanelChangeMethod().add(getJLabelWhenChange(), constraintsJLabelWhenChange);

			java.awt.GridBagConstraints constraintsJComboBoxWhenChange = new java.awt.GridBagConstraints();
			constraintsJComboBoxWhenChange.gridx = 2; constraintsJComboBoxWhenChange.gridy = 1;
			constraintsJComboBoxWhenChange.gridwidth = 4;
			constraintsJComboBoxWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxWhenChange.weightx = 1.0;
			constraintsJComboBoxWhenChange.ipadx = 69;
			constraintsJComboBoxWhenChange.insets = new java.awt.Insets(0, 5, 1, 27);
			getJPanelChangeMethod().add(getJComboBoxWhenChange(), constraintsJComboBoxWhenChange);
			// user code begin {1}
			jComboBoxWhenChange_ActionPerformed(null);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelChangeMethod;
}
/**
 * Return the JTextFieldChangeTriggerOffset property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldChangeTriggerOffset() {
	if (ivjJTextFieldChangeTriggerOffset == null) {
		try {
			ivjJTextFieldChangeTriggerOffset = new javax.swing.JTextField();
			ivjJTextFieldChangeTriggerOffset.setName("JTextFieldChangeTriggerOffset");
			ivjJTextFieldChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJTextFieldChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJTextFieldChangeTriggerOffset.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999.9999, 99999.9999, 4) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldChangeTriggerOffset;
}
/**
 * Return the JTextFieldRampInInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampInInterval() {
	if (ivjJTextFieldRampInInterval == null) {
		try {
			ivjJTextFieldRampInInterval = new javax.swing.JTextField();
			ivjJTextFieldRampInInterval.setName("JTextFieldRampInInterval");
			ivjJTextFieldRampInInterval.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampInInterval.setMaximumSize(new java.awt.Dimension(63, 20));
			ivjJTextFieldRampInInterval.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJTextFieldRampInInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampInInterval;
}
/**
 * Return the JTextFieldRampOutInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampOutInterval() {
	if (ivjJTextFieldRampOutInterval == null) {
		try {
			ivjJTextFieldRampOutInterval = new javax.swing.JTextField();
			ivjJTextFieldRampOutInterval.setName("JTextFieldRampOutInterval");
			ivjJTextFieldRampOutInterval.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampOutInterval.setMaximumSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampOutInterval.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJTextFieldRampOutInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampOutInterval;
}
/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	gear = (LMProgramDirectGear)o;
	
	if( getJComboBoxHowToStop().getSelectedItem() != null )
	{
		gear.setMethodStopType( 
			com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxHowToStop().getSelectedItem().toString() ) );
	}
	
	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT) == 0)
	{
		gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
		gear.setRampOutInterval(new Integer(getJTextFieldRampOutInterval().getText()));
	}
		
	if(getJCheckBoxRampIn().isSelected())
	{
		gear.setRampInPercent(new Integer(((Number)getJCSpinFieldRampInPercent().getValue()).intValue()));
		gear.setRampInInterval(new Integer(getJTextFieldRampInInterval().getText()));
	}

	gear.setPercentReduction( new Integer( ((Number)getJCSpinFieldPercentReduction().getValue()).intValue() ) );
	
	gear.setChangeCondition( getChangeCondition(getJComboBoxWhenChange().getSelectedItem().toString()) );
	
	gear.setChangeDuration( new Integer( ((Number)getJCSpinFieldChangeDuration().getValue()).intValue() * 60 ) );
	gear.setChangePriority( new Integer( ((Number)getJCSpinFieldChangePriority().getValue()).intValue() ) );
	gear.setChangeTriggerNumber( new Integer( ((Number)getJCSpinFieldChangeTriggerNumber().getValue()).intValue() ) );
	
	if( getJTextFieldChangeTriggerOffset().getText() == null || getJTextFieldChangeTriggerOffset().getText().length() <= 0 )
		gear.setChangeTriggerOffset( new Double(0.0) );
	else
		gear.setChangeTriggerOffset( Double.valueOf(getJTextFieldChangeTriggerOffset().getText()) );

	com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

	s.setControlPercent( new Integer( 
		((Number)getJCSpinFieldControlPercent().getValue()).intValue() ) );

	s.setCyclePeriodLength( new Integer( 
		((Number)getJCSpinFieldCyclePeriod().getValue()).intValue() * 60 ) );		
	return s;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJCSpinFieldChangeDuration().addValueListener(this);
	getJCSpinFieldChangePriority().addValueListener(this);
	getJCSpinFieldChangeTriggerNumber().addValueListener(this);
	getJCSpinFieldControlPercent().addValueListener(this);
	getJCSpinFieldCyclePeriod().addValueListener(this);
	getJCSpinFieldPercentReduction().addValueListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJTextFieldChangeTriggerOffset().addCaretListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxHowToStop().addActionListener(this);
	getJCSpinFieldRampOutPercent().addValueListener(this);
	getJCSpinFieldRampInPercent().addValueListener(this);
	
	// user code end
	getJCheckBoxRampIn().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("MasterCycleGearPanel");
		setPreferredSize(new java.awt.Dimension(402, 430));
		setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
		setLayout(new java.awt.GridBagLayout());
		setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
		setSize(402, 430);

		java.awt.GridBagConstraints constraintsJLabelControlPercent = new java.awt.GridBagConstraints();
		constraintsJLabelControlPercent.gridx = 1; constraintsJLabelControlPercent.gridy = 1;
		constraintsJLabelControlPercent.ipadx = -7;
		constraintsJLabelControlPercent.insets = new java.awt.Insets(14, 10, 6, 23);
		add(getJLabelControlPercent(), constraintsJLabelControlPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldControlPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldControlPercent.gridx = 2; constraintsJCSpinFieldControlPercent.gridy = 1;
		constraintsJCSpinFieldControlPercent.gridwidth = 2;
		constraintsJCSpinFieldControlPercent.ipadx = 47;
		constraintsJCSpinFieldControlPercent.ipady = 19;
		constraintsJCSpinFieldControlPercent.insets = new java.awt.Insets(10, 3, 4, 32);
		add(getJCSpinFieldControlPercent(), constraintsJCSpinFieldControlPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldCyclePeriod = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldCyclePeriod.gridx = 2; constraintsJCSpinFieldCyclePeriod.gridy = 2;
		constraintsJCSpinFieldCyclePeriod.gridwidth = 2;
		constraintsJCSpinFieldCyclePeriod.ipadx = 47;
		constraintsJCSpinFieldCyclePeriod.ipady = 19;
		constraintsJCSpinFieldCyclePeriod.insets = new java.awt.Insets(5, 3, 1, 32);
		add(getJCSpinFieldCyclePeriod(), constraintsJCSpinFieldCyclePeriod);

		java.awt.GridBagConstraints constraintsJLabelCyclePeriod = new java.awt.GridBagConstraints();
		constraintsJLabelCyclePeriod.gridx = 1; constraintsJLabelCyclePeriod.gridy = 2;
		constraintsJLabelCyclePeriod.ipadx = -4;
		constraintsJLabelCyclePeriod.insets = new java.awt.Insets(7, 10, 5, 20);
		add(getJLabelCyclePeriod(), constraintsJLabelCyclePeriod);

		java.awt.GridBagConstraints constraintsJLabelHowToStop = new java.awt.GridBagConstraints();
		constraintsJLabelHowToStop.gridx = 1; constraintsJLabelHowToStop.gridy = 3;
		constraintsJLabelHowToStop.ipadx = 4;
		constraintsJLabelHowToStop.insets = new java.awt.Insets(6, 10, 5, 12);
		add(getJLabelHowToStop(), constraintsJLabelHowToStop);

		java.awt.GridBagConstraints constraintsJComboBoxHowToStop = new java.awt.GridBagConstraints();
		constraintsJComboBoxHowToStop.gridx = 2; constraintsJComboBoxHowToStop.gridy = 3;
		constraintsJComboBoxHowToStop.gridwidth = 3;
		constraintsJComboBoxHowToStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHowToStop.weightx = 1.0;
		constraintsJComboBoxHowToStop.insets = new java.awt.Insets(2, 18, 2, 87);
		add(getJComboBoxHowToStop(), constraintsJComboBoxHowToStop);

		java.awt.GridBagConstraints constraintsJCSpinFieldPercentReduction = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldPercentReduction.gridx = 3; constraintsJCSpinFieldPercentReduction.gridy = 9;
		constraintsJCSpinFieldPercentReduction.gridwidth = 2;
		constraintsJCSpinFieldPercentReduction.ipadx = 49;
		constraintsJCSpinFieldPercentReduction.ipady = 20;
		constraintsJCSpinFieldPercentReduction.insets = new java.awt.Insets(4, 5, 3, 168);
		add(getJCSpinFieldPercentReduction(), constraintsJCSpinFieldPercentReduction);

		java.awt.GridBagConstraints constraintsJLabelPercentReduction = new java.awt.GridBagConstraints();
		constraintsJLabelPercentReduction.gridx = 1; constraintsJLabelPercentReduction.gridy = 9;
		constraintsJLabelPercentReduction.gridwidth = 2;
		constraintsJLabelPercentReduction.ipadx = 53;
		constraintsJLabelPercentReduction.ipady = 3;
		constraintsJLabelPercentReduction.insets = new java.awt.Insets(6, 10, 4, 5);
		add(getJLabelPercentReduction(), constraintsJLabelPercentReduction);

		java.awt.GridBagConstraints constraintsJPanelChangeMethod = new java.awt.GridBagConstraints();
		constraintsJPanelChangeMethod.gridx = 1; constraintsJPanelChangeMethod.gridy = 10;
		constraintsJPanelChangeMethod.gridwidth = 4;
		constraintsJPanelChangeMethod.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelChangeMethod.weightx = 1.0;
		constraintsJPanelChangeMethod.weighty = 1.0;
		constraintsJPanelChangeMethod.insets = new java.awt.Insets(3, 5, 96, 62);
		add(getJPanelChangeMethod(), constraintsJPanelChangeMethod);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercent.gridx = 1; constraintsJLabelRampOutPercent.gridy = 4;
		constraintsJLabelRampOutPercent.ipadx = -57;
		constraintsJLabelRampOutPercent.ipady = -111;
		constraintsJLabelRampOutPercent.insets = new java.awt.Insets(6, 10, 4, 3);
		add(getJLabelRampOutPercent(), constraintsJLabelRampOutPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampOutPercent.gridx = 2; constraintsJCSpinFieldRampOutPercent.gridy = 4;
		constraintsJCSpinFieldRampOutPercent.gridwidth = 2;
		constraintsJCSpinFieldRampOutPercent.ipadx = 3;
		constraintsJCSpinFieldRampOutPercent.insets = new java.awt.Insets(2, 18, 2, 5);
		add(getJCSpinFieldRampOutPercent(), constraintsJCSpinFieldRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercentSign.gridx = 4; constraintsJLabelRampOutPercentSign.gridy = 4;
		constraintsJLabelRampOutPercentSign.ipadx = 16;
		constraintsJLabelRampOutPercentSign.insets = new java.awt.Insets(4, 3, 4, 151);
		add(getJLabelRampOutPercentSign(), constraintsJLabelRampOutPercentSign);

		java.awt.GridBagConstraints constraintsJLabelRampOutSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutSec.gridx = 4; constraintsJLabelRampOutSec.gridy = 5;
		constraintsJLabelRampOutSec.ipadx = 4;
		constraintsJLabelRampOutSec.insets = new java.awt.Insets(5, 3, 4, 151);
		add(getJLabelRampOutSec(), constraintsJLabelRampOutSec);

		java.awt.GridBagConstraints constraintsJTextFieldRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampOutInterval.gridx = 2; constraintsJTextFieldRampOutInterval.gridy = 5;
		constraintsJTextFieldRampOutInterval.gridwidth = 2;
		constraintsJTextFieldRampOutInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampOutInterval.weightx = 1.0;
		constraintsJTextFieldRampOutInterval.ipadx = 5;
		constraintsJTextFieldRampOutInterval.insets = new java.awt.Insets(3, 18, 2, 3);
		add(getJTextFieldRampOutInterval(), constraintsJTextFieldRampOutInterval);

		java.awt.GridBagConstraints constraintsJLabelRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutInterval.gridx = 1; constraintsJLabelRampOutInterval.gridy = 5;
		constraintsJLabelRampOutInterval.ipadx = -57;
		constraintsJLabelRampOutInterval.ipady = -111;
		constraintsJLabelRampOutInterval.insets = new java.awt.Insets(5, 10, 6, 3);
		add(getJLabelRampOutInterval(), constraintsJLabelRampOutInterval);

		java.awt.GridBagConstraints constraintsJCheckBoxRampIn = new java.awt.GridBagConstraints();
		constraintsJCheckBoxRampIn.gridx = 1; constraintsJCheckBoxRampIn.gridy = 6;
		constraintsJCheckBoxRampIn.ipadx = 61;
		constraintsJCheckBoxRampIn.ipady = -2;
		constraintsJCheckBoxRampIn.insets = new java.awt.Insets(2, 10, 3, 3);
		add(getJCheckBoxRampIn(), constraintsJCheckBoxRampIn);

		java.awt.GridBagConstraints constraintsJLabelRampInPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercent.gridx = 1; constraintsJLabelRampInPercent.gridy = 7;
		constraintsJLabelRampInPercent.insets = new java.awt.Insets(8, 10, 4, 9);
		add(getJLabelRampInPercent(), constraintsJLabelRampInPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampInPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampInPercent.gridx = 2; constraintsJCSpinFieldRampInPercent.gridy = 7;
		constraintsJCSpinFieldRampInPercent.gridwidth = 2;
		constraintsJCSpinFieldRampInPercent.ipadx = 3;
		constraintsJCSpinFieldRampInPercent.insets = new java.awt.Insets(4, 18, 2, 5);
		add(getJCSpinFieldRampInPercent(), constraintsJCSpinFieldRampInPercent);

		java.awt.GridBagConstraints constraintsJLabelRampInPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercentSign.gridx = 4; constraintsJLabelRampInPercentSign.gridy = 7;
		constraintsJLabelRampInPercentSign.ipadx = 16;
		constraintsJLabelRampInPercentSign.insets = new java.awt.Insets(6, 3, 4, 151);
		add(getJLabelRampInPercentSign(), constraintsJLabelRampInPercentSign);

		java.awt.GridBagConstraints constraintsJLabelRampInSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampInSec.gridx = 4; constraintsJLabelRampInSec.gridy = 8;
		constraintsJLabelRampInSec.ipadx = 4;
		constraintsJLabelRampInSec.insets = new java.awt.Insets(5, 3, 6, 151);
		add(getJLabelRampInSec(), constraintsJLabelRampInSec);

		java.awt.GridBagConstraints constraintsJTextFieldRampInInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampInInterval.gridx = 2; constraintsJTextFieldRampInInterval.gridy = 8;
		constraintsJTextFieldRampInInterval.gridwidth = 2;
		constraintsJTextFieldRampInInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampInInterval.weightx = 1.0;
		constraintsJTextFieldRampInInterval.ipadx = 5;
		constraintsJTextFieldRampInInterval.insets = new java.awt.Insets(3, 18, 4, 3);
		add(getJTextFieldRampInInterval(), constraintsJTextFieldRampInInterval);

		java.awt.GridBagConstraints constraintsJLabelRampInInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampInInterval.gridx = 1; constraintsJLabelRampInInterval.gridy = 8;
		constraintsJLabelRampInInterval.insets = new java.awt.Insets(6, 10, 7, 9);
		add(getJLabelRampInInterval(), constraintsJLabelRampInInterval);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	rampItOut(false);
	rampItIn(false);
	
	getJComboBoxWhenChange().setSelectedItem( LMProgramDirectGear.CHANGE_NONE );
	
	try
	{
		initConnections();
	}
	catch(Exception e)	{ }
	
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxRampIn_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	rampItIn(getJCheckBoxRampIn().isSelected());
	this.fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxWhenChange_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelChangeDuration().setVisible(false);
	getJCSpinFieldChangeDuration().setVisible(false);
	getJLabelMinutesChDur().setVisible(false);
	
	getJLabelChangePriority().setVisible(false);
	getJCSpinFieldChangePriority().setVisible(false);
	
	getJLabelChangeTriggerNumber().setVisible(false);
	getJCSpinFieldChangeTriggerNumber().setVisible(false);

	getJLabelChangeTriggerOffset().setVisible(false);
	getJTextFieldChangeTriggerOffset().setVisible(false);

	
	if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_NONE )
		 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Manually Only" ) )
	{
		//None
		return;
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_DURATION )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "After a Duration" ) )
	{
		//Duration
		getJLabelChangeDuration().setVisible(true);
		getJCSpinFieldChangeDuration().setVisible(true);
		getJLabelMinutesChDur().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_PRIORITY )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Priority Change" ) )
	{
		//Priority
		getJLabelChangePriority().setVisible(true);
		getJCSpinFieldChangePriority().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_TRIGGER_OFFSET )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Above Trigger" ) )
	{
		//TriggerOffset
		getJLabelChangeTriggerNumber().setVisible(true);
		getJCSpinFieldChangeTriggerNumber().setVisible(true);

		getJLabelChangeTriggerOffset().setVisible(true);
		getJTextFieldChangeTriggerOffset().setVisible(true);
	}
	else
		throw new Error("Unknown LMProgramDirectGear control condition found, the value = " + getJComboBoxWhenChange().getSelectedItem().toString() );


	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		MasterCycleGearPanel aMasterCycleGearPanel;
		aMasterCycleGearPanel = new MasterCycleGearPanel();
		frame.setContentPane(aMasterCycleGearPanel);
		frame.setSize(aMasterCycleGearPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.dbeditor.wizard.device.lmprogram.GenericGearPanel");
		exception.printStackTrace(System.out);
	}
}

public void rampItIn(boolean rampOrNotToRamp)
{
	getJLabelRampInInterval().setVisible(rampOrNotToRamp);
	getJLabelRampInPercent().setVisible(rampOrNotToRamp);
	getJLabelRampInPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampInSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampInPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampInInterval().setVisible(rampOrNotToRamp);
}
public void rampItOut(boolean rampOrNotToRamp)
{
	getJLabelRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercent().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampOutSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampOutPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampOutInterval().setVisible(rampOrNotToRamp);
}

/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private void setChangeCondition(String change) 
{
	if( change == null )
		return;

	if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_NONE) )
	{
		getJComboBoxWhenChange().setSelectedItem("Manually Only");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_DURATION) )
	{
		getJComboBoxWhenChange().setSelectedItem("After a Duration");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_PRIORITY) )
	{
		getJComboBoxWhenChange().setSelectedItem("Priority Change");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_TRIGGER_OFFSET) )
	{
		getJComboBoxWhenChange().setSelectedItem("Above Trigger");
	}	
	
}
/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
	{
		return;
	}
	else
		gear = (LMProgramDirectGear)o;

	getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getMethodStopType() ) );

	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT) == 0)
	{
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
		
	if(gear.getRampInPercent().intValue() != 0 && gear.getRampInInterval().intValue() != 0)
	{
		getJCheckBoxRampIn().setSelected(true);
		getJCSpinFieldRampInPercent().setValue(gear.getRampInPercent());
		getJTextFieldRampInInterval().setText(gear.getRampInInterval().toString());
	}
		
	getJCSpinFieldPercentReduction().setValue( gear.getPercentReduction() );
	
	setChangeCondition( gear.getChangeCondition() );
	
	getJCSpinFieldChangeDuration().setValue( new Integer( gear.getChangeDuration().intValue() / 60 ) );
	getJCSpinFieldChangePriority().setValue( gear.getChangePriority() );
	getJCSpinFieldChangeTriggerNumber().setValue( gear.getChangeTriggerNumber() );	
	getJTextFieldChangeTriggerOffset().setText( gear.getChangeTriggerOffset().toString() );

	com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

	getJCSpinFieldControlPercent().setValue( s.getControlPercent() );

	getJCSpinFieldCyclePeriod().setValue( new Integer( s.getCyclePeriodLength().intValue() / 60 ) );
	
}
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
}

package com.cannontech.dbeditor.wizard.device.lmprogram;

/**
 * Insert the type's description here.
 * Creation date: (8/1/2002 3:39:47 PM)
 * @author: 
 */
import com.cannontech.common.util.StringUtils;
import com.cannontech.database.db.device.lm.LMProgramDirectGear;
 
  public class MasterCycleGearPanel extends GenericGearPanel {
	private javax.swing.JComboBox ivjJComboBoxHowToStop = null;
	private javax.swing.JComboBox ivjJComboBoxWhenChange = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeDuration = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangePriority = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeTriggerNumber = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldControlPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldCyclePeriod = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldPercentReduction = null;
	private javax.swing.JLabel ivjJLabelChangeDuration = null;
	private javax.swing.JLabel ivjJLabelChangePriority = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerOffset = null;
	private javax.swing.JLabel ivjJLabelControlPercent = null;
	private javax.swing.JLabel ivjJLabelCyclePeriod = null;
	private javax.swing.JLabel ivjJLabelHowToStop = null;
	private javax.swing.JLabel ivjJLabelMinutesChDur = null;
	private javax.swing.JLabel ivjJLabelPercentReduction = null;
	private javax.swing.JLabel ivjJLabelWhenChange = null;
	private javax.swing.JPanel ivjJPanelChangeMethod = null;
	private javax.swing.JTextField ivjJTextFieldChangeTriggerOffset = null;
	private javax.swing.JCheckBox ivjJCheckBoxRampIn = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampInPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampInInterval = null;
	private javax.swing.JLabel ivjJLabelRampInPercent = null;
	private javax.swing.JLabel ivjJLabelRampInPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampInSec = null;
	private javax.swing.JLabel ivjJLabelRampOutInterval = null;
	private javax.swing.JLabel ivjJLabelRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampOutPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampOutSec = null;
	private javax.swing.JTextField ivjJTextFieldRampInInterval = null;
	private javax.swing.JTextField ivjJTextFieldRampOutInterval = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == MasterCycleGearPanel.this.getJCheckBoxRampIn()) 
				connEtoC1(e);
		};
	};
	private javax.swing.JComboBox ivjJComboBoxStopOrder = null;
	private javax.swing.JLabel ivjJLabelStopOrder = null;
/**
 * MasterCycleGearPanel constructor comment.
 */
public MasterCycleGearPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	if (e.getSource() == getJComboBoxWhenChange()) 
		jComboBoxWhenChange_ActionPerformed(e);
	if (e.getSource() == getJComboBoxHowToStop()) 
		connEtoC10(e);
	if (e.getSource() == getJComboBoxStopOrder() || e.getSource() == getJTextFieldRampOutInterval())
		this.fireInputUpdate();
	// user code end
	
	// user code begin {2}
	// user code end
}
/**
 * connEtoC1:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxRampIn_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JComboBoxHowToStop.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		rampItOut(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Time In") == 0
			|| getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Restore") == 0);
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GACDBA9B1GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8DF8945555BFD57A0AADED539ADBDA2926C8B5EA342925B52D697B50CAFD316655542222C68D9AA5EA2C3172EAD41449E6A18B8489A1E8A8DF0B848D92C23E48978172310484838492C240A4E4131DE4B7EC324BE68381037E4F3DF74E1D194D6CC7347E9F4A739CE66F6F1EF36FB9671E39DFF3E7A2E4EE8AD91C2C4B9404644502742FB4D9902CB789C2E869F712911B74F02ADED07C5B8C34CA28
	5CC040A910177539C11FAEBCDCED00F4982473AD867D8770FB3570F8754877610717FA1AA0EFFE4F169F7B2E671FB5D8CFAACD5F39BF8D2E6F810583B6874878C8AA547F577DD9921E8458FB52EFC249BAC10827BC79E7329438659146978957E820490F921E67762F177273A1CDF86A615A7EA863F543F5A9556E5B95E592DF7B8FC30585FFBD2CDBC16AD2140FB4C712CD122EC661916A089421286EA0DCAB1B4E746D6DF18C64751887879D03EE31471AE76996ADB6374315F75EF6516C3264D944F3369EB14F
	BE60F4B97ADC66010A0AC366A137682A3D50E3978F08E6D713F9D034C35B4DA5B6341EB150724186C8AF205883E7085F426077AC201839E8475FD6D4CAFA861F8995E2EF2C76EAC759E3CC7F7647E4BB1C3FBD1E1276B8A97F3D3AB4C9EEAA644F8112F429C3DD1A9EC7DD922D04F79224C300A2B8FE170D6051100E87921EC09D77FC0CBA36FDFE171054FDD637520B0ED9CFB05D2A1E10F54CCA39C63716464E97A6527E23109782B483E8AED092D0D6CC2AFE9D0D59725ACF60DA5D6D2EF58C8CB8862B1D4E9A
	3B45F548E1916D703B2282F2A46C185863F0D984014565E7E7F2B574C14A0FD147A4A1E65B898163A86C589D025B5D27DB2CE15B0C071BF4A6290C36985936C9B144EFB5F6623791781DAC791A610D940FD2602C2D6650D8A06998482BFA927D5C769E6A52281FA624978C69D2B5F41972E72BEE7A13523D73242C8B73F1DB9D71F1BC607A27D2756B010A01DA005CCF210F2F2CAD72676386388FDC03E6FB73F037536CF2578C5B6C9651A579BA334E172F350849FDB8EEB9661750A2E59B457C46256917185093
	3A202718BFC21F127DA24507573AE7BFB5B6B65E63EDE82177C44CD31EEDBBC8710427BC5B76F5AB366DC2486BFABAD54F78377793FC56531E656C22781C27BD4B79238D4B09033C7A58D4BDEB5F578F107EB18C523301E20112003266C1BB83554F43B6FE20F6E70077D11322FD196CD5267761AA0E38DD660641A137F930C7ECB53BEC66EE3BB8A4C8BCC1A66257EE155C35747E6E01BA8E0803224B6C36B98621F473008841B444F82EB72DA2BCAE1166365886C428E040A9E039B719D643558E3D6BF127456C
	96E58E16FF07094444B9F3AB148885107BE19E71170B7639D678BDF19E7AEACB8341E2A03D007BE55B7E8C38FE8A41AD5AABAACC369E220659F581E3345ECE46BB43B3F8CF7E238DE34F3462F6A17761331A31C77B08E7D89CC5BD6399FB47E8198B1E41B17471B3ED633C8F82A103D4AF2B6335EF240E94694A7CBB75A009514CE7E14E815474AC7A58325F48E22F46BCA4E2349DF1C120089659630C57DCC74692711CB868B609CEF15082BF0624363656AD1563305741E3E4106224DF2A05C09962383BEE9543
	218CE5D4E37EA84DB73B5DAEDB7730DBEC965DEE5BE01FACBF116AB2246A7206A4DB2F7F1458EA859BA7G85F1DBD79CD82D0827C607634C3033055CA99817F47C1D8E7C114FE27B775BC8BC4472341B26657C055671369DA9EBFCFD719A5BF86BC89987AF2B23201F58154C533BE9DA08C3BB6F21BAE85DCB7F8EE2F54450BA46237BF8084500D06FBD06D36B35E3F8C53DF68C2F2E779D236B6A35E21465FDD8CF66AE0E73030A187F381E74F7BD0E41C1115EF8DCC4E0F360FF3490BBEC03B677891B25CFF4B7
	5BAE0AB0D70CA331FBB56DD3F360F7E59C76076737E0FF18FD7196E16669C64D795214DF1E518547C9E3F11C5C9FB21DF29A483DA45A4581F0D42DE3F8504D70BC5ADFCB78D08A456AAA2EA732B987EB2DE24F199A4748B1988B9A86F34D541ABCF6E992DD3D8E5700E84969B71FB367194F3B73E8EB64D5536C7D6477B6630E9DFB0DDA53765CFEF559272BBD8AED74DE6A6EED2D5B7231BF7CDBA331EBB6589B8334A08E7B08DB9BC8BE7691D2C7D86B305BD913C0DE5BF3445FD75AB395BECCFB0E2D2F64B81B
	F6B01D343DF8F6D804A119F4B21F0A9724F1751603999EF92DE67B30BCDE7F7A60F2385A957D934327FF2A5D9637FECA6E55B33C7CBBBEDDA210F1171549E2A75CCC4AF43AEC83501D138ED7DA67DDDD27DC6705009DE4CD38G2E0667D375CC761D77092DDA4D9177BCA9435E0F6BC0A3244B005A1EE765CCF91E79A4FFBE618B61EB2D1D9C3B0BE22FC08770F3BD4EA18F25AB570B16A10BE65C92F24FE765CF1A6FB937DEF218149B8AF844FCEC5B1CC6E57FDFBDB464683151290D645FC79B15B14D301846E5
	F06D353906E01EED91C7300D1EE9A43A12390F84CBFE3EED7B9EE16CDCEEBFDD216270DAFB1E46E30B239626DF75504C357C16EF35096785744325BA65FAB3F265C95DF2AFFE08126CCFD078A1C6F70D0E6934FB24CE782AEBE7BABB34750CD9B73FC647CA22CFEEBC2EC9576EA371E90174A8D0B0901B9FDFCB674DC417B040620058BDD4D5283C07563F4046DD93DCD9FF32303F10742F636EBD30ADC64CFB617A75FA8CEC0BE92B2B5057F7CC93AA3F2C50DCD7CFDAE952353D405AE0428BF2DBA4E6DD21532F
	3DC2A72DE38B1571BDB3364DEBFCC7C9E5443E60995FAF9EA17EDF88F87A0B985F9D07D6A9629B565C309C68035E83E3F679619456CFC869150797E3BFA1E03F7871D152A659D0E695D09B1093A80857716343FE57237BC7FC2CC713785AAE9C4A1C85B497A861C5E61F7052583991DBFB592A687C75A53676AA6078F7A8BEC10133185BC4E3112493A0EF64E51C47DC576F3936543F222E536811E6F2370C115B6811B6F94831985C5B3A8E6FBD92E7A3F9C367E10ED0D14147C869FEBADFE8106E7B76D7F0CDF4
	699869D703A19D8EB49BA88E4810182A4F862ACF44B6F96E30D61F23EE93EF9D0EBC6FE6F57E31192E4D206C91DEFE4D11950A38EAF258865DBC26DEB9C2469A074B56E79BC4EC8145FA9CAEBA39E1584E235E67DDA5C73567DD15C73567DDB5C7FD2F9D8E9E75B6AFE3737C1587080D13403E69C08CCB5BCD3088C8C7F3AC12E2F110CE6258531584DB7FAA2C61DFC5ACFF8F416AA15D75AA4619232A8B2E93A1BD9DA88AA891A87D1F297ADC20C6A0B7509420882039C042EB502EC0D5C0D62049C021C0330192
	00529700ACD0931093E872822CAB0856958669A8208420347F83DE20C6A0BB50E420B020E820C4207457E19D88548464FC1D0D59C1F08D870A86CA84CAFF83F8001A001CEFE0DDDB77CDC8561EDF93BB68187CCF7F6B9BE2172FFC6233A64946FF577CBF5BCB1D0D8AFD096F27C8E952E6F4CC75A2172B211B6047AE522EA48EC8DC4CD67066CAB12064A56D1F6E0125CBED4F5AE2125736D8A3DDD7856017ADFE72C9BF36C3E0FD693F2BAD56F941D7AAFEEF9068FA0D7741647A3197396D9A58DABFBAEC92D8FF
	CB46442D8A1C74F59FF8701267AB4BBDB018E650F96C86DA46FD6F935D1D50CD09C33433B5195DE6A9EF3E1B344718F55DE17300A8553FDAF828FF2944335F6D28AD90F05C99ADD40EBBC1EF30F818AEDDA324EB549BF21CC87B02473C77375FBF265D5F869FA3368FB906DDBD22E71FFA5D31AC1EA70F9E8DEEF10018A12DCF283C5B6C023529277CEDD41E65F9131FF14C77FA7A4F4DE40C9F6169FBE97A827761C787C87DCE1758AB3AE055461647C2D69269237751BEBF967C1470864EAF376CA6F3FB335D56
	B7C8E67CED487BD35A6F3743EFE792727EFDB799536C668B0EE1987C96D03E97F72B56CE004D860AC9E2ED4164DE2FD455F1926BF80F0E9915EFC2BF77A62E33FEFD1E44D8AF4C3B416CE62758A3243FC5F88F6C41FAC601B788A89CA89AA871CD546F65A5E45EF630515CAD5A413FEE17438ED35C9E2812656B96137B61E0ED3353B6D8E7936D96B59357F7E37D7B9EFCE44187DCB60785F932BAD649F5A933257C5B7AD7727CFA477996C7335B6114726AEC9934FC47C03783E6BFF236147F9367BAF57D120247
	C44BB0DB01B33ED1677B3C0EB1AC924F1FAF523A683A25568AF3E1711068364AF69C4B16FDC69687C7065DAA1F5933BDFC26E66276CE4A4E72D2CEB3B4BB6339B1BB5D1327D96CE1F9112C1E9638A315555067BAB0BB67754C4DDE63D946981E5732296F55EB9EA9AFED6BEA15FC43A0DAA25DBFDB33465A4B1998CF75568F344BA026CA6534EFDD69418326CAF9432C8E152D8D03E88663895A1A69A12F4E0F5EA417CFE2076E52C8653F30C995DFF23634EFB337CA3966ECFB0B2DB9C75F42B569378A1479C1D2
	7EAC1E2F4F534A1F4B731F7CDC2B7C841EEF5B2115AF3C0D79F927147919EF337CCA1EFFD70BD67DCDBC3F38D52BFC8B64337D1E5B7214FD5608D47ED4380673B22AADDAE54C66793FAA5752A106675FA2EA49A7727C0995DA797A05187FD411B2BFEBA14B2F6279439DDA72ADBCBF3ED8AB5F4A737FD422257FA84F6FAD55128F6279CD1A7E194E73DBC5AD7DA3F87E031A7E096279B76C564A0F657957D835E2E441C2DC0FDCC3571206F7D275D96FA056FB11E039102E64587D97F15DD24F31AB0A89B6855211
	C0516F10F3A6B71D92F87F123C5B8857C1713C11EF1B18ECB0321187FCB9457905394662227CEDEC1FA3643CF21F23ECD92757FD0E4CF7591819A3DD43EA2ECE5EA430791FC1107FB19D42F71379982F9F6EF527E310EC5DB46E2FEBB9DD5D58F06070217D07DB84DC0397F411F5B4DF0393210A0A83AE1B25465C57C8C7F43686CF27EBBB22DF573B38273537126CA3CC01F4B8506CF7F1EFFD64A35C1B8B3BE91A50B84125F996A4366524AED632C93FC85E4349CD39C6675D3E2DFB0C5A76359CE9124DE3BA8F
	6CC11D2B207C11C584BB3AD7999F244C8E78AF0FE8CD732FD4652F1264657C5F2A72093DDBD57273D5790B95724CB777EFC55FAC3CBFDC307F364B6BB9191912CF6224EB552A2B135B9E3CC25A37FC2DB7CB505CBB21BDBF33FFA5BDCBC5ECD8AF9824F95497A59F890A7D4EB3763E3C7E9E32031057CB069C32794207B85C4F0CA8407D4C89D08E43F667A19641314CD12CAF11E3A1BBF06F26A599F56833FB5B7711C6A629DE719456B1B9994B7BC78B16B70BE3E7DA89C6463D053C0E5736F9718F1D71B039E7
	73D05FAE1DC10A69348EFA3E8152B18453E19DA3962CA3AD8531674BD1BFA747E2C554AF14E3F7D7A0961B027AED4DD92F2D9F9F7D196C1AE2144D52E3F9E19D28CB9347B66DC2EC864712CAD03F2C45087D3C944BEB6258D59644A6F16CFB5C0E199CDB520BF5A4F16C115DFCEFEE89E2FF35A2968C983BEFEFADA44FE1FAE1E24D6678B3E9BF9C8579F3B94F250B04478D8EE0FD6B3D6D640E49C9A567821F39E85238C71477F12AF4A5E4G99C2EB24FBEBBD7CBE8357F796ADDA446A7AE9B119A3DB9DAE5BC5
	5049ECA7EEEFF28C59589C1969B8037A1E34179364597D7B60E74AFEBB7DE7753AE4AF776FD410A157D069AA6FCFC750760B81BC89082D57DEBAC556692D667E31CFC5GECF2B91C224BFD0121740998BE7F2E9C6FD9A436B7FCA76D3B338C86BD6A4F703BA91E2D40591E3129924F6565C3DEB090336505CEF21FA5C1BAF329C11F8BE48232GCDD80A3695FF16AF785903EDF1B89BE1C1EED7ECD9B27BF276FE3533D6FFCA45FEF6469FEE95A27E4B687579D070D256BEB3246B5C15D7A713AB33EF340B589787
	F942B203BE9B28922889483A8C6D9B7DAC1759C71A275A6DB677D869D3B2B40EBC3812E132F8154E1FD5FB1EDD9805B20316B1BD26CBD7CF0AGBC8AA8D6113FGFE9B162B79D99DFFACC07F2D077CFCA013022F8DFE5BB5652A72D0EE8264878305AA78A261F734265C53DFF85A9487FCC992EFDA1A36CDC6400B016A95796D705B1926D547AFF7A8E3E2A270CC818A13F8E7EA54A11DD7B905F2F3A41EF8856FC2781D3E825AF8050CC9E710DAD02EEC4558329B816B82F20F11F336FA7AE29270CC157842B54A
	A2B48B70399EF98910965E5372C5FC1E320ECC6049812A14F81B5E532E4382788850E4C5FE0886AF6B93E652B1F146FB2CCF780063F3A81E2040D9DF11C1F1124EDE89F18A44F43DE471744754F403BEBC1D55BBABDDDB573900A7F864892B203FD925650F174A312DF2247CCA85DF937C36G0D2C72EC2B67C4E5CCCD067C902099925F6CD55EE2EAE605D2AE8678920174990CBFAB431B5C3F0AD1AED703278A3096A0EB06271E3F6E9853E7GCF1044B7DD23ACC29100C7F96445C2FAC106168F33F7F956E1D8
	ED502FDF4DF873D7EB57E1823C4DA34F8E69892B356AF827846D8F1672C395FC1170BB9AA8EE35277D53CA157ECE027C34CC035E1849780AB33D79FB32C5A9D78FFC6DC0CE09FF22D7399F7138182241938658CC20B9191EFAAE6F7574E1BC70AC14785257E87BB09B70B20F3CC6C8F72D517261933B15B63901E79250D409B7DC238EA677209565E6C9BCF3953C8970DBF8DFAD4B66E35BFB6127348EBBF571C341E32DDB8793291C8FADB6335D5177E12EB1BF57D8D0380DBDCB70DC4B31728E77115FEC3C1E17
	0663757A5BEE94CC0F9AF564590B66FAD8524D723EBC2F1A92F1BC0569F5FFB129CFB1254EEBA67F57BA6881E07790DD87CBE3FB0D15544C4670E59D64B907667C8BC67003D05E116EFE31475DE26E63B2FF6CA07573BDF9B6AD1372E651FD98F29E8D7CE13BC80F52B48363E09FEB0388E22E549EFFD27CBED879CD1CF7D537FF4FB7DA87337F1F1D5E1F313C59297D0CE5D12776B36D4527FDBF7BD8F15A7BD9424C534A33042C5D0F58C85BCC057809G0A81CA8452FF007339E927C9EC131365E367F27BADFD
	A28693567F6DAE6F36CE6E72FF867D5AAE729C245B61F6BB86C8797C39D297E9AF3743C9C10605F4919F39ECFDD6B7E3457366DD647E320B3D94E67BD5A5F47DEF843B4A0098F695459AA15D4E31840AD9A1BD01E32B695AA79852619C7B71C9024D02749C0E5D59CE30F8C843E2C242749D38F7164931849341AC109E65581C82BCEB9044316BBA69B9E3C8C7F26C65CE34A31AE3E527310EB80EBDC9571445EB8D7A4635081D4843BA3AB836A68FF5F6F34C1C07F5CC62D8D89E56B115E33F25FB928910567F8B
	3164AFD1B60BE30D944B05F4A547FECD31FAC8F7F16C3A9384F3C3BA08E34FD1ECBA24E7F0AC5F04BA4F66582889750B61D8B35DEF49DD87737CF508C5D22C8D52D60EE51EA558A82403B9A6D2AC9452919C7B6BD92CE396473EF58AFD1A399E31AEAB161743315B2CA8DB4931F3F47FE6B22427F3ECA245A2A09D4D31E547697992C88B9B902BB94E630AE329F46F478269D10E5DC57902A09D4A319F3522FE119CFB12E251100E156B203ECF0034FEA3E2D7D23EACC897F3EC86456AA15D463101FA544F3ED19D
	C311101E4331E5BBE9DBC2FAA1472E4E27B134896A58041821F02CCF8BA85686BCCE4E37A59F5BE3A247AAA9B68552219C5BF80E6A8269B99CF31EC31D63B761BC7D5E8EB2BFA8B302EDC09300C200E682458325EF067E8448829484943699659E27F2D110CEGCA7B50204F85EA843283CD868A830A82CAGCA5B02F2D99D619A638829170E731B55F311B223765C0950CC0D3C9089A336203EFCCE2660CF5F6C3DDCDE77E64FF95E81CD5D71CC46EA8F5C5779FD4FB3940416CAD7B206113DAC65590B950A5FAB
	FD140B24BC6F425A7E863A6F178B6DE05A027110C831B6C8DBB9F61C6E853AA1BD19E34EB20205C0BA12E39914AF9A52319CFB70984657820E35D1BED3B60CC1590869689E29935213B9F6D1C47DC2B87697914B1B413107A9265F8AEB142D082D276565C33A1EE38B39FE6D9CFB7BB8566164D8DDAB7AE0A247EEEE45FA03B876A82DA39652099C9B26FD197EA35065A3446E25D8BE242BB8361D77E50D9CAB20E36ED4C8C7F04C4A4752A80E3DCA474D759FC3DF71B1E20F95F1FBB976F7AA5B8EE9B7473269D8
	BA0924B9F6B59BF3A19D49313BE89D5110CE605891DA1E1083FDC08EE2E907D13FEC0E2D246539A1BD19E3F5F4FFBA8452919C7B894522A09D433105940B0734308D3153E602E5C2BA1FE333282FCC10EE61585DCD280B15E35D5DF4EC01F4B447B2699EF89C2405CF903B3D9B754B64D8D2B7161743319AAABB8269A00E3DCD7926C3BA12E33FAFC57D22B9F657D12CA30EE33AE36803A40E7570FBC63F9D319B69FD5982E98B47EE25FCA3108E62585B941B8E69999C6BEA4672E6F26C96FAAF2467C29F1D4BFD
	D00EFCD59C3B197285C1BA14E3734B393D9C5BC11F8DC4C3BA1EE3DFD0ECA12453F6A076AC4532A01D4F319C0A19A05D45319394F3C3FAA2472E61774C940E7D1CBEFF080734100758BFA9168969EC0EDD15CC30B2C8B7F1ECAE45AC10F6F3EC0F8E6B1840316769BCA69A52899C7BA945041DB0675B09580BFC3E134B31BA7A8CF2945241BBF14F7C76FE72ACA394523300620104FC08BB20DC20AA2096A0AB508420A9C0E1C0B30166G4581A581259560FA651ABEF25E4E5B338369E1AEDD34384C4A7349A7EC
	5E57AD1DB67F6B16BE9B31CD0475C64B8527F4CE4DEE23E71EFBFB07C43EBEBAEBCB67D84390BEE5E16B75C3555AE740C436F6819B0B8B70795075556A67C3571223BD52FEC4CA8D99BF874CA336016181FA3A0D15332E06145385E558F9B91F94FBBF8BD74B1E71836FF44EFF7BC975332BFB68BAA89A72E3B84FFD6D5A6765665175D1DA21C1EF84E24F3256F578FB1625A44FE7D9CDD04EEB0B96ADCA16ED5FCFED378DFA5A3E1F767F40EF85E258BB34DF8F06F4C8A16AFEE727366EFF6DC45D23387C7B2731
	DD96F2FB0E1C76E54FE2C94F45DE6C49A9B268CF8B6C7CAA53E7C121F6DB2651B12E98782B0AD01F89F4FEED077488477666215E53B9761DBC54FBCE916A7DC01EBF3D977B50DBA87654BB6A14365EF1F43D14867CD945284FA7DF22BE26E2EC071EAF55719DB1A047776CAF354B0E2565B8210CD1DE4E1DA73C47777DF4FD938A3CB3B87F42936A784EE823739A48CF607A1EB421CF576FC27FDDE372974768BBAD7FB5C2B9EF2A6238FF07F69CDF41562F40EF5905BA7FFD07DA6797A8CF9064CF65BC5B4FEA77
	AD35F4CD9B85FC311CF7742C5A77CF8C925FB3BB671D75E7678A9FF6261530E747493C8DEE25711085F8F6897A77EAAB6A54D4027E7D3355DFFC12FA713977E809DCAF498BAA111F61B29B3F57226D5FDF527969D4608FADC1FFDC57229DEF3F213CF300AF1673EEBE6EBD5EAA68181DD68AF61622DDA70F7B320B5803B6E87953846574886C0C39F4AE37D5DB5792BAE7EF827E76D2547501635ABEF81E6AB9897802CB31CD6EEE45B60964728BDA55F1722EC33EC7CF1E505663AC3D6762210C853C1C1F35FA77
	59EFE83D46B2188F14A17F7D2D6AF81F4756A810EFA9C33FCE2C7797273E7C9ADC464EC824F2FB6E495376559334AF8D817EB02E5F661DE45C6FF63073246C8CF859CEBCCFB9977892091E6586FDA590F95F064905640FBDBBFED7BE4A35GAFB9BBEE076B8415DC3D17B1220B6E0FCC815E6965580E0DF4AFA49A52B16528EFF33E5A1FB64AE32800F9D885726CBA27BDAE9E22FBA6A660EB2BC05FDFF54E1F6F495A9D5F291884F2D3AB186FC9BA3C4273DE358DAA4E2C53735926E176A592167F1BD14FB36BAA
	A6DE0E484EF953F28E5986075D62D02D9538B03F2D46331EA6174D613239AF307C12D64DFA100957B330EF2DC7B9ADAEDBDF1F68BABCBC50CD775E995F1E96AFFCC724A9A31E05DEC15E8F11CFC379626DE85928252307820CF76D81792C79892BB848D8D95E87C3748CB81EC21333257351EBBABD4F1E12F80CA4F1C07345E24F3333743DB21E7FFC0116FC1C1CDF24151F447303461C4DA579E93BB1FFCE37163C11675FBA66ECAE49AF66794BFABD4F66127CFA1E5F5F21D5FFBB4FCF9DF3B61864BBF97E13BD
	1EE7F3C97E445DF83F7D4E22BDDEBFC0573ED300AF0C73260A6AFE38772C5C8F5BC56D3EE1A2DD4B4E05B262F8B9D715F96F07C3689ED7FAA54CF9AA11FF1B286EB776317DA848EF29443E6079E37E7A02D502777942C4A86787B0AF5A424F2AB9C46DFE78AA36B6877E29DC3F35955E6DA9247BD53301F7CEA5760DB70A68DBE18F6A9FA37A1BF72C923C0FA339FB583E2E5C17A5F8E98FBDDD6317813FE98F6ADFD421ED6B27ECFF9078C677206EDB29FCA824E7F0AC3B956D09830C454655247B1166F27F5D6A
	4B3625FE5AA6FD2FC13FD9E55BBFAA54712027FB8F6B01AFE7AF5AB439C5BB2E275339D49B7059B96F13AD6A388E9B12F52F71B9EFDAAA307DE6EF3ACF59AB4FC325B15447BA58CC574153C1A6FCAF464517BE572D0B257AB1AEE2762A67230910DE2E2A5F60E58CB752B1FCA1115F076D2A237A94C33AEA9F7A6A458EED3F6A683A558EFC93B86F6ECE35DF9FF74B7DC5C827369E91341CB0A8A3021773C001F71F4D27EB6BB860CD647C3D9D6A789825FB286B2B4027D56857AD077D75973E5A352D4A333F7828
	D37B9E5ACB6D31G3F338A756B58256D43E13A8FBB957842B96F9D3B54BE540D48BEDCDD226D436D748CF28C14914F4BB9E7766E439F303D5EEA035ED80D7CCF942BFD78AA0D05C648EF2BC69FBE54644F07B87752726124EA4F795705EEED9F7E106E758683FF8857EFFB29F7FBCCF49FB88AF867D6E3ACBF520D3E5557207EABFB7C5DDBCB856FFDEEFE0DE71FFB32544BDA046AD3897C75B528FFC60F362D1F7450BDD8601BD0033ABFC36543A09D41315823E8CFFC8D7639DB4954D06A37AE7A9C8F177AE91B
	4CDA4FBE778F96F5BCC45379019178F2EB5126BF9D530E6B47687EF8BB70B9B9EFC633BA2EA7DD14F5BF5F6CCF7765BEF41FDA6B59674E943D474AE3F4AC8E851999359897334A7D4545F2C5DC44562A7B5C85351EFD6EFFFB990B9F21F58BA603BE4D046D1ACE475CB2C81BCC68ABD32F36DF5B69D86C843E091C775ADE35DFEF7BDC60FA3C552B2DC7C69FA9A79C4A0864656C6B756E33B6DAEFBC70AE607C033D6A7818C8F90C7BA1BE7623DFEF75B9162678E957767D1E7D450C5D5A77D0941D8FD8015F3D9F
	75DBDA2956EF93FD37AA847243B84F75495AFE7E9DFDE69183FC091C7715E4351F9F98156337C5674F4E15BE6CDCDF67E967BBD66FED71BEFD9E1083B245F528DB38D55B0E59F43F2B8B785CF558A649B6FF31CEF4457D0910BAF52C4F0074032A7D440EBD5AEDB2CC1F494C847E28BAFC067227FE6F4FC2E6777BFF967237FE6DB3DC0F760FBD4395532FFD066B19FEBAEF114EF0B1ECFEBF312D4FE523E72799164031139CFB1516C93093B60B5B4A71B728DE842F97C905083FC375BACF31B689531D11311378
	5D3FB3E4FF86CC36BA7877EA524E507835596DAC1DCEF9EC0330A6677ED8F30668E8F31A95FA7F0BE3C4EF6F6F780DD69B857F6F7831D8FF7512ACE720E7BF3D3CFFD9D0D018EBACA85EA61DBD4D7CD2167B6E4940651C49325CCD6DDF678CACABA329BD5077B5D97D5768847E7BF7A9F2B9160240ED08534BF2C11D9B3D4B9517659A8B7337A16F3C4EC0F5E57CBBCE875E0E29CBE43BBEC915751B3FA3907D185CA103AC37ACAFF03B0E670D4F2EDF6485EE17F329EC574D4BE47DE6FE9E38FE55DF86DE5F434B
	95EDFBA27018205B51125C636310ABCD176532CD015E8F0C5FE99ADF6C1FDAA57B72D206DCEF630E4075FDACD351DF1C7D7A776F293301374D42B5327E1BBE104BB8EE75257F2EF2880622ED38D63586D25FD8FD937731FAEB32E49D4435328E97DA8251C11A9F7FCB167B59B864EEDBA74B159E77957F652A7B7A0175324E2FEE104B8873D5462EFCD599191BE4392C56755E65C0ACFF9B63FB28B57036ADB54A650F34869E0F27B64BF2370CC32EAEC716FB22A650B8E63264AB10787BA71F4865FCBFAF107A59
	BBDEDDBB713B6EC9B0074ABF006FB54F5FC08A577A1EE65F30ADEF58ED33D7D434585CF631C6FAD4A43D6B9DCA4F44124155FAG5F45FE04569182698820E8A0D677537978AEEABCE046FAFC6F786382AC232D9E4BB8DEC0F803A09D8AB4339E5727FF582E0807FC9FF697956D4AB51615215F1F4C15658A46A1D73ED3164BB877757B9D4B39C07BCE2D3E40FB7F50CEDE55155A24116E9711F971DC6E63297CFD744A8644B6706FB33AE52C98E543B876BFA54817FE903165F40F0168D24F31F9964442B8D65D4B
	E5BFC56CE67E1EF9BD477672775BA7F0AC1316C7A6959100F97769F316406F77AF8BE4B9314C68633EA9A377CD612EEDCCEEDA21AC17AA86AE77EE31ACF74F31715D6F1BCB647B7DC829DC4E0F4A832F5FD5A64BB9C4DF7DEE29EA6E7287B1F01F7E3EDC56B326C22EEFD5C5A075B139C53BE539498169A9BDBF5AAB4B3DF2FCFC73185D6398A72E5EA75B78DC35DC272D656B7789F737842E47AFAF4AFA4CD66C4BF4F48462B36F7D47CB23F239EB3F104BFD20A8703628D42C4D5A3E22BE7CF9EFE760BE5921D8
	5B059584FEEFB469E4B9D3C760F2E10AF518F0F8FC7774630BE5BF3F33C4AEE7CBE1A075FB775764DD017B4B28D8EF3518FD4E9D4A15F3175A25325C6FFD2F59D5F2B7A856B63FEA9A1F3F7E1C26386F94EB1D69A50157EFD8A94BCD6B8E3C8FFC39BBF01FEECF1775BC3CCA2EAF51D7FDA5C52A7B672CE2ED54D09A78FDB7D731B63A6D68787A40B70E86EE635B0AF5D0F716DC6775810FEB5E63B771D860FAFCFB2D2CC728E2CDB32D7C6B7501772F134B7D47FA395C98DF65FA34612A0D325C1D810DE35EFDB2
	549B38CF0A956B248D3D015F9BA70C32DC63B864FE7321ACF7D54063AE13FDE40B6C67F7957372ABF687DE7FA9453C7C73642F9FFF7F1B9C382FAF654B7A07A866135F77399FD0D64C56545EF5F87AEB6E915CD3A86B75FC11DC6E5F83520B3D97573B535FF7FB92BF557A26015B2F1C673765195C6DFE65BC09FD4364A0DDCB26B5FAFE87291962D90D1E5FC10A5909EB4FEC481B54086FB0BE177F557E165CEBDFD1AE37602B59FB9FDD8FA70C3177A10AA70D3177338234D7FF8856D307505E231D1E5F900802
	3C58C32CCD979C52FE1752F05820DFFFD81D178FE953E12DD878857FC6CA1B14EFD770CD005F411AF29F2A3E8B9D8ABC11C05192EF5CE1EF5F457830585326A460CDBBA2FDE7620836CD450057FB6435C35AF9C4CB37A87E5D1309D27E9485DF987C1E29A9175E63295B9C600B17F897CA5774A635ECB6244BBC30C6C8F781391BBC5FE5FDFE4C77F9A6814FD409AFDC3A4E72A8EFAE2493BCB06128C11F8914F354330E3ADE343FD24AEBD270D8607748D1AD7B4378B7CBA6CB79A18A3E9970FB3626DC2D6AFBB1
	B140138824BFA6FD1F671837D8D84B3F9713AB71D4A9F8DBB46458774CE72EA613CB5B205DB6A856323FA0484BEC227DBD7BFDD2717B191D5F7CB7BF5E7E7FD047038532CDF3953F4D855FFC5D973F51BA583BFCC3F4BF4C8AEDBF6198FF8F15E241101E4E31ED749D29F0C84F66584714AF8652C99C5B435E2FEA06BE319931DF513F33C45EA14C675895743D2789A44D31883A3FC65E798F63587F9421FEB3B916D10C654D6158C4FA86AD3B45202FECC12C3C90F5E962186EA216E76158210BE86F88476E605F
	4A1D48B1D3B14A4E61588F0AD1B61EE30945682B859CFB79B47A4AF09C31CB455CD79C3B7D887795474A3B51D793B876AC5DF78C06F4B8477A3AD13FD99C3B133F6FBB17E39BCA51D7B92D08957620ECA547AE7520EDCD9CFB2A87EDEB675889DA1E9352419C3B2D946D8D65582DBDE8EFA447CEDFC27D22B9F6CD995AEBBC0158FE3A5FD98C69960E99C454594A31E60A0DC2FAB247A2C454F98A475EAAC31D4364BA4AD167199C0B31204EF3B8F61C3FFB9C4FB1E3856ADC56463F93A00E5539036E79B6820F15
	732D6AC5BBC6B9464E9E51F773B9562D43F60B6558BDD63CE796F06CE7A5D81E61A4E24F15E0F96BB9F6CBB716E7675829D234F78247720FE2F9419C7B1CE221100E6098BBB3C73F2BA24BDAD03F4CD3BC7E4A303C9C0ED94BD03672941E3379CE2776B91BE9340F198CFCA11C77890F3330CBF7113E1A65D51D56BE1755C66F49A8A8E3AEAFE7EF277733C0A7E83D7A4F8C7A744F103F25D3FD6E291F72D4C2FE7DE7F886685EC6FF6715146F940E009CA1726DAEB2C71D8C3F5FD834E8518AEE4FCF0B344FG7D
	1A7615D300FF7AE7F85EED9E6DE322A19D433144A2741F219DF55CD66C6F1C12AF9D0B211C7D02723D516BBA3C3CEBC77B69AA60EFECC7FD3AE9BFBD8269099C5BFE91F51C510E4F37F2691EBF5377AFBE3F1D1B6AC75F58F6F60610FCBB1755B7D00C75A5707A58F385163F161E9D4E6AB06833BB78FB43747BD4CD10EE6758CDEC8C03F4F087BF6FF8445FF9CBDF3A4E02F266CB6DAF790B5E37510047F4E09C3ED562BDEED753FB5A50897357CE54B3289B6D2D6AC4BD6F6B762567F2BFFA5A211C5DD28C30BA
	6A58F7A5G1F486B7D2C876B8D6FC4BF3367B0ACBF157697B110975F494FBE167A7F2E715534AE22DF66E92CEB8E452AA05D48313F537AC7A0BD71B45AFD6E123F7BB355075DB3201C1BD56D93C97B321900C71DC69B5AAD2BD5B6D4E32FA6491C33207EC9DC578291FD155D056574FB3CA3F4ED396C3BF9143F89F85B3B300CAD65D86EA40E8DD2EC8624E7F2ECB115CD00F4D2977A456E771C30AF3F64188D7AAB25330B2C0E86BAC69683DEE5C6FB5CBE4E41FE0F0E01F6609DB1231E953D681369E654F32857
	DF5CAA750CB62B750C0374AEC179AE73F769B81B8878C2DEEF829DE7F33A8D7A62EE446EA9C1DD3A3AD11705A57E7AD1DFBE1B5CAD77232C0E0768FDBA8570693C5EABE9DCC7C3BA06E3A70F22AEE9BD685B9F9DD5474ACB74B9A253730D237EE2BE45071EE5BDEC4FE4A95773A40DDF9360CDBD28D3DD996AB45A435F37A973671F94C1BEBB9F5A232EB792525F15FEFB5FAB7C7DB81E0F3D37C716DB5F69EBAFB03FC83947DA29F836DAB88E39A9D5325C0D0DDF7FFB23F7D74B3F1F2A114B2E77798CCA2DD332
	C9160B7475CC139C7FD0BC83CAAD8E5C4F597BE5BD8F5449755DD7606B4C147A3C530D75325C6B974677AC2766E2603A5E5BA057B3F19CB6AEB8A84BBDF3BAF07FFF50A84B394651EEF79D1665FEF1E41C4FDA0F486DE1B8AA17B3647359213A7E6D47E439F6DF4F720A72D5F1F373B81E9D9EEE1675BC5BA257F7172F7AC85C94497539FA822FAF7838DCC7E329AFDF94CB3E104EB01686720DDE295DDA65BAEE6889248EA6377A24AC57FCE9FC6DDDF2CA7663494F64F2AAAC015B78BDCBA0B6CA7D4FB84E480C
	364B7A3CD29638BE9565017B7C068E390E3F85E43374DC7734AC5750BCBE1FEFB44BBE2F6E164B19A586DE3F25C716DB529B78BDF6B42067235E1F17DDE511F57FD51F2C43A1DFE7D7BC7A6B072C325C8FCA829FD79EAF89BCF67E4FA66B19F5C62E6FC5DF75F9687925621BC45963BCA3609C4799010C63322E3B94FDC0064F18AF5F25BCAB5DD176755A356D84C9FDC073CD6FBF818B2B30170545C3AEA1E3EC5D555FFF6C51305326CC1D20EB9016D869BBB48D42627364E51C91A74C9B6EG7A11DBC8A5FF34
	4F58B088252CD0F96DAF3F5875FC54D32DC3A9421286E1AD59A4E996DD745B6122057C3D54D651C56A299316BA499F19A6137F86C1BFC4AF0B075C976CE2231059FBCCBCBBAC8E39C5CBB5FEADFB48AD2C21FF46FDA7B9FC3B335EBCE4F513B717F6B78A7AC173006896B2D8365DBC583713FD22FCB751D8C82E2E226E20A7E7C05F55D4DFD2CA9EAFE5755DAB37EEBE989711A2686A04E5F60759D2E76EF1BBDC8D42D23755A58ED99DF64B08F39FAB48F01E78183ED787452D636693E37348C215ABFDE6646713
	D7442F285341F45AA56C241CE4EE1E47B948B7BEDCD01568EAGB2C31559BC6FDB9B5D9F7D6F018F5AF5C232E464D9618BE17108534D9C86152F24C59213736AC0EB7763AF5FB76D094A44849029939653BF7B8E95274BDC6CABA27F95F66D066541315FA5FAB909FB06C849CB5D505D1887EC768B7043C4E39F7125EE17F9F02857619A00CA0D9E96E396D7BC6F1A7B722F3D652DD3D4F1D954ADECE2CD8422BB7BC447404E6A5EDE5B20488B00760262B7706289CF1E87CF46488F579CFCF8D1B74417C9C89948
	4F277F97507F8B497F8594A920C8C1A1B4DA2260731FE77E488831B9E304FB17E852C0DF8A0BBDD7D411726C0DA9BAC18FB787FBC98E02173C6986416BE277CA0A5B6124F1C7CE53AD13EEF81DDBC8177E9A2BD17AE31A95EEE1857D4B2AC67627D5A11DD96FB8EFF4BB0C64AFDA9AA5F600579DF0B90681B0BB4DBDB67785A37FA328462D101BC16F44A343EEDE3051ADA4EFA5B1A27664390555BC9F7F42A6E1D8A55D3FDE04B2B0DBA9331C6AC57F54E6858D8C720FAC611C9A2914B1F79EC1D3475EC284DECE
	B3D790F672A31D479FC92D2619EB687FD9DF2DB573C628B4B99B35C4EA957A89E2AFD61073E379DCC2AF35A1B9283ECC03E72C04CEA131580B44FF045F760E759B31A275F2573BEEC455FA4BA41DE43DC96B5F40F948568299BA49781C2241B3B6C53CD04065F1BBBF14542762A964A9017BC46D374B580BA746FA11D839440B95ED207A910D54E5E513D936E93FE48F595511DB1D3C077BBB0D54E5E5C57F581621DB56DE2CA011D82E6A1D7887EEB4F854294B4A6EF3A3AAAB08EEBF66F6DFD61ADE12B5458DCE
	2269E2AFED42A67A52662B5FB6A17F7EA36274BB32974856B14669E2AFD6107E643CC66A3232A9F86C3DC79F0BF831A250FBEF5F65FE6F05286DD6C774E525694D7F2EFBCF2BCD483F7F08B81DB1F66EC662F449652EF764D83D49B38E397548CCACE24C9DC566EEBAB58FD9F3516FDE9A71F32230DCDA12B3E09B4C5BA66761A7C0A1EF257429CDA3DBA5AB917629CE02104FE912C59A93D7AF047AB4D21715F39F98D105BD1E71C876E285897BADE3A4F4AA894213F379D97A5858CE00DA7B1F55DE4F285BEB09
	F47555DE9BD592048CAA8932C71A23127F01C66A327242AB329748EBE59835FA3FD6DC46B63DA95BC4DEF3A3ADCBCEC5983CD821EED96285ECD97502B3C7155AB246EFBAAF921713EF12D355D38DECEFF979CC3A77FBB8CF3214CFDFD7137E8E6736AF15FF5FBC695B7BF40B856D3F43597EB9BB836F7C5C736F1B97EDA4D60781BE7BF37C3E56159BF6885E7F3EE6730059EEF71B6DE72A87AD874D674CB5975C227C779D4BB612720710C74AE4F97BB6923D7B95B27F8FD0CB8788F14C6747B6B0GG1026GG
	D0CB818294G94G88G88GACDBA9B1F14C6747B6B0GG1026GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGF0B0GGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private String getChangeCondition( String change )
{

	if( change.equalsIgnoreCase("After a Duration") )
	{
		return LMProgramDirectGear.CHANGE_DURATION;
	}
	else if( change.equalsIgnoreCase("Priority Change") )
	{
		return LMProgramDirectGear.CHANGE_PRIORITY;
	}
	else if( change.equalsIgnoreCase("Above Trigger") )
	{
		return LMProgramDirectGear.CHANGE_TRIGGER_OFFSET;
	}	
	else
		return LMProgramDirectGear.CHANGE_NONE;

}
/**
 * Return the JCheckBoxRampIn property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRampIn() {
	if (ivjJCheckBoxRampIn == null) {
		try {
			ivjJCheckBoxRampIn = new javax.swing.JCheckBox();
			ivjJCheckBoxRampIn.setName("JCheckBoxRampIn");
			ivjJCheckBoxRampIn.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRampIn.setText("Ramp In");
			ivjJCheckBoxRampIn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRampIn;
}
/**
 * Return the JComboBoxHowToStop property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHowToStop() {
	if (ivjJComboBoxHowToStop == null) {
		try {
			ivjJComboBoxHowToStop = new javax.swing.JComboBox();
			ivjJComboBoxHowToStop.setName("JComboBoxHowToStop");
			ivjJComboBoxHowToStop.setPreferredSize(new java.awt.Dimension(159, 23));
			ivjJComboBoxHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxHowToStop.setMinimumSize(new java.awt.Dimension(159, 23));
			ivjJComboBoxHowToStop.setMaximumSize(new java.awt.Dimension(159, 23));
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			ivjJComboBoxHowToStop.addItem( "Ramp Out / Time In");
			ivjJComboBoxHowToStop.addItem( "Ramp Out / Restore");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHowToStop;
}
/**
 * Return the JComboBoxStopOrder property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxStopOrder() {
	if (ivjJComboBoxStopOrder == null) {
		try {
			ivjJComboBoxStopOrder = new javax.swing.JComboBox();
			ivjJComboBoxStopOrder.setName("JComboBoxStopOrder");
			ivjJComboBoxStopOrder.setPreferredSize(new java.awt.Dimension(184, 23));
			ivjJComboBoxStopOrder.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxStopOrder.setMinimumSize(new java.awt.Dimension(184, 23));
			// user code begin {1}
			ivjJComboBoxStopOrder.addItem("Random");
			ivjJComboBoxStopOrder.addItem("First In First Out");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxStopOrder;
}
/**
 * Return the JComboBoxWhenChange property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxWhenChange() {
	if (ivjJComboBoxWhenChange == null) {
		try {
			ivjJComboBoxWhenChange = new javax.swing.JComboBox();
			ivjJComboBoxWhenChange.setName("JComboBoxWhenChange");
			ivjJComboBoxWhenChange.setPreferredSize(new java.awt.Dimension(195, 23));
			ivjJComboBoxWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxWhenChange.addItem("Manually Only");
			ivjJComboBoxWhenChange.addItem("After a Duration");
			ivjJComboBoxWhenChange.addItem("Priority Change");
			ivjJComboBoxWhenChange.addItem("Above Trigger");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxWhenChange;
}
/**
 * Return the JCSpinFieldChangeDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeDuration() {
	if (ivjJCSpinFieldChangeDuration == null) {
		try {
			ivjJCSpinFieldChangeDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeDuration.setName("JCSpinFieldChangeDuration");
			ivjJCSpinFieldChangeDuration.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeDuration.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeDuration.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(3)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeDuration;
}
/**
 * Return the JCSpinFieldChangePriority property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangePriority() {
	if (ivjJCSpinFieldChangePriority == null) {
		try {
			ivjJCSpinFieldChangePriority = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangePriority.setName("JCSpinFieldChangePriority");
			ivjJCSpinFieldChangePriority.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJCSpinFieldChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangePriority.setMaximumSize(new java.awt.Dimension(40, 30));
			// user code begin {1}
			ivjJCSpinFieldChangePriority.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(9999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangePriority;
}
/**
 * Return the JCSpinFieldChangeTriggerNumber property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeTriggerNumber() {
	if (ivjJCSpinFieldChangeTriggerNumber == null) {
		try {
			ivjJCSpinFieldChangeTriggerNumber = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeTriggerNumber.setName("JCSpinFieldChangeTriggerNumber");
			ivjJCSpinFieldChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeTriggerNumber.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(1), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(1)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeTriggerNumber;
}
/**
 * Return the JCSpinFieldControlPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldControlPercent() {
	if (ivjJCSpinFieldControlPercent == null) {
		try {
			ivjJCSpinFieldControlPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldControlPercent.setName("JCSpinFieldControlPercent");
			ivjJCSpinFieldControlPercent.setPreferredSize(new java.awt.Dimension(48, 20));
			ivjJCSpinFieldControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setMaximumSize(new java.awt.Dimension(48, 20));
			// user code begin {1}
			ivjJCSpinFieldControlPercent.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(50)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldControlPercent;
}
/**
 * Return the JCSpinFieldCyclePeriod property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldCyclePeriod() {
	if (ivjJCSpinFieldCyclePeriod == null) {
		try {
			ivjJCSpinFieldCyclePeriod = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldCyclePeriod.setName("JCSpinFieldCyclePeriod");
			ivjJCSpinFieldCyclePeriod.setPreferredSize(new java.awt.Dimension(48, 20));
			ivjJCSpinFieldCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setMaximumSize(new java.awt.Dimension(48, 20));
			// user code begin {1}
			ivjJCSpinFieldCyclePeriod.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(60), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(30)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldCyclePeriod;
}
/**
 * Return the JCSpinFieldPercentReduction property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldPercentReduction() {
	if (ivjJCSpinFieldPercentReduction == null) {
		try {
			ivjJCSpinFieldPercentReduction = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldPercentReduction.setName("JCSpinFieldPercentReduction");
			ivjJCSpinFieldPercentReduction.setPreferredSize(new java.awt.Dimension(49, 20));
			ivjJCSpinFieldPercentReduction.setMaximumSize(new java.awt.Dimension(50, 20));
			ivjJCSpinFieldPercentReduction.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJCSpinFieldPercentReduction.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(100)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			ivjJCSpinFieldPercentReduction.setValue( new Integer(100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldPercentReduction;
}
/**
 * Return the JCSpinFieldRampInPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampInPercent() {
	if (ivjJCSpinFieldRampInPercent == null) {
		try {
			ivjJCSpinFieldRampInPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampInPercent.setName("JCSpinFieldRampInPercent");
			ivjJCSpinFieldRampInPercent.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampInPercent.setMaximumSize(new java.awt.Dimension(63, 20));
			ivjJCSpinFieldRampInPercent.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJCSpinFieldRampInPercent.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(100), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(100)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampInPercent;
}
/**
 * Return the JCSpinFieldRampOutPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampOutPercent() {
	if (ivjJCSpinFieldRampOutPercent == null) {
		try {
			ivjJCSpinFieldRampOutPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampOutPercent.setName("JCSpinFieldRampOutPercent");
			ivjJCSpinFieldRampOutPercent.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampOutPercent.setMaximumSize(new java.awt.Dimension(57, 20));
			ivjJCSpinFieldRampOutPercent.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJCSpinFieldRampOutPercent.setDataProperties(
									new com.klg.jclass.field.DataProperties(
										new com.klg.jclass.field.validate.JCIntegerValidator(
											null, new Integer(0), new Integer(100), null, true, 
											null, new Integer(1), "#,##0.###;-#,##0.###", false, 
											false, false, null, new Integer(100)), 
											new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
											new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
											new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampOutPercent;
}
/**
 * Return the JLabelChangeDuration property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeDuration() {
	if (ivjJLabelChangeDuration == null) {
		try {
			ivjJLabelChangeDuration = new javax.swing.JLabel();
			ivjJLabelChangeDuration.setName("JLabelChangeDuration");
			ivjJLabelChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeDuration.setText("Change Duration:");
			ivjJLabelChangeDuration.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeDuration.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeDuration;
}
/**
 * Return the JLabelChangePriority property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangePriority() {
	if (ivjJLabelChangePriority == null) {
		try {
			ivjJLabelChangePriority = new javax.swing.JLabel();
			ivjJLabelChangePriority.setName("JLabelChangePriority");
			ivjJLabelChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangePriority.setText("Change Priority:");
			ivjJLabelChangePriority.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangePriority.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangePriority;
}
/**
 * Return the JLabelChangeTriggerNumber property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerNumber() {
	if (ivjJLabelChangeTriggerNumber == null) {
		try {
			ivjJLabelChangeTriggerNumber = new javax.swing.JLabel();
			ivjJLabelChangeTriggerNumber.setName("JLabelChangeTriggerNumber");
			ivjJLabelChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerNumber.setText("Trigger Number:");
			ivjJLabelChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerNumber.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerNumber;
}
/**
 * Return the JLabelChangeTriggerOffset property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerOffset() {
	if (ivjJLabelChangeTriggerOffset == null) {
		try {
			ivjJLabelChangeTriggerOffset = new javax.swing.JLabel();
			ivjJLabelChangeTriggerOffset.setName("JLabelChangeTriggerOffset");
			ivjJLabelChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerOffset.setText("Trigger Offset:");
			ivjJLabelChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerOffset.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerOffset;
}
/**
 * Return the JLabelControlPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlPercent() {
	if (ivjJLabelControlPercent == null) {
		try {
			ivjJLabelControlPercent = new javax.swing.JLabel();
			ivjJLabelControlPercent.setName("JLabelControlPercent");
			ivjJLabelControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelControlPercent.setText("Control Percent:");
			ivjJLabelControlPercent.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelControlPercent.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlPercent;
}
/**
 * Return the JLabelCyclePeriod property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCyclePeriod() {
	if (ivjJLabelCyclePeriod == null) {
		try {
			ivjJLabelCyclePeriod = new javax.swing.JLabel();
			ivjJLabelCyclePeriod.setName("JLabelCyclePeriod");
			ivjJLabelCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelCyclePeriod.setText("Cycle Period:");
			ivjJLabelCyclePeriod.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelCyclePeriod.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCyclePeriod;
}
/**
 * Return the JLabelHowToStop property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHowToStop() {
	if (ivjJLabelHowToStop == null) {
		try {
			ivjJLabelHowToStop = new javax.swing.JLabel();
			ivjJLabelHowToStop.setName("JLabelHowToStop");
			ivjJLabelHowToStop.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelHowToStop.setText("How to Stop Control:");
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHowToStop;
}
/**
 * Return the JLabelMinutesChDur property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutesChDur() {
	if (ivjJLabelMinutesChDur == null) {
		try {
			ivjJLabelMinutesChDur = new javax.swing.JLabel();
			ivjJLabelMinutesChDur.setName("JLabelMinutesChDur");
			ivjJLabelMinutesChDur.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutesChDur.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelMinutesChDur.setText("(min.)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutesChDur;
}
/**
 * Return the JLabelPercentReduction property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPercentReduction() {
	if (ivjJLabelPercentReduction == null) {
		try {
			ivjJLabelPercentReduction = new javax.swing.JLabel();
			ivjJLabelPercentReduction.setName("JLabelPercentReduction");
			ivjJLabelPercentReduction.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPercentReduction.setText("Group Capacity Reduction %:");
			ivjJLabelPercentReduction.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPercentReduction.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPercentReduction;
}
/**
 * Return the JLabelRampInInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInInterval() {
	if (ivjJLabelRampInInterval == null) {
		try {
			ivjJLabelRampInInterval = new javax.swing.JLabel();
			ivjJLabelRampInInterval.setName("JLabelRampInInterval");
			ivjJLabelRampInInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInInterval.setText("Ramp In Interval: ");
			ivjJLabelRampInInterval.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInInterval.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInInterval;
}
/**
 * Return the JLabelRampInPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercent() {
	if (ivjJLabelRampInPercent == null) {
		try {
			ivjJLabelRampInPercent = new javax.swing.JLabel();
			ivjJLabelRampInPercent.setName("JLabelRampInPercent");
			ivjJLabelRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercent.setText("Ramp In Percent: ");
			ivjJLabelRampInPercent.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercent.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercent;
}
/**
 * Return the JLabelRampInPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercentSign() {
	if (ivjJLabelRampInPercentSign == null) {
		try {
			ivjJLabelRampInPercentSign = new javax.swing.JLabel();
			ivjJLabelRampInPercentSign.setName("JLabelRampInPercentSign");
			ivjJLabelRampInPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercentSign;
}
/**
 * Return the JLabelRampInSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInSec() {
	if (ivjJLabelRampInSec == null) {
		try {
			ivjJLabelRampInSec = new javax.swing.JLabel();
			ivjJLabelRampInSec.setName("JLabelRampInSec");
			ivjJLabelRampInSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInSec;
}
/**
 * Return the JLabelRampOutInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutInterval() {
	if (ivjJLabelRampOutInterval == null) {
		try {
			ivjJLabelRampOutInterval = new javax.swing.JLabel();
			ivjJLabelRampOutInterval.setName("JLabelRampOutInterval");
			ivjJLabelRampOutInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutInterval.setText("Ramp Out Interval: ");
			ivjJLabelRampOutInterval.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutInterval.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutInterval;
}
/**
 * Return the JLabelRampOutPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercent() {
	if (ivjJLabelRampOutPercent == null) {
		try {
			ivjJLabelRampOutPercent = new javax.swing.JLabel();
			ivjJLabelRampOutPercent.setName("JLabelRampOutPercent");
			ivjJLabelRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercent.setText("Ramp Out Percent: ");
			ivjJLabelRampOutPercent.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercent.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercent;
}
/**
 * Return the JLabelRampOutPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercentSign() {
	if (ivjJLabelRampOutPercentSign == null) {
		try {
			ivjJLabelRampOutPercentSign = new javax.swing.JLabel();
			ivjJLabelRampOutPercentSign.setName("JLabelRampOutPercentSign");
			ivjJLabelRampOutPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercentSign;
}
/**
 * Return the JLabelRampOutSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutSec() {
	if (ivjJLabelRampOutSec == null) {
		try {
			ivjJLabelRampOutSec = new javax.swing.JLabel();
			ivjJLabelRampOutSec.setName("JLabelRampOutSec");
			ivjJLabelRampOutSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutSec;
}
/**
 * Return the JLabelStopOrder property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStopOrder() {
	if (ivjJLabelStopOrder == null) {
		try {
			ivjJLabelStopOrder = new javax.swing.JLabel();
			ivjJLabelStopOrder.setName("JLabelStopOrder");
			ivjJLabelStopOrder.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelStopOrder.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelStopOrder.setText("Stop Order:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStopOrder;
}
/**
 * Return the JLabelWhenChange property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelWhenChange() {
	if (ivjJLabelWhenChange == null) {
		try {
			ivjJLabelWhenChange = new javax.swing.JLabel();
			ivjJLabelWhenChange.setName("JLabelWhenChange");
			ivjJLabelWhenChange.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelWhenChange.setText("When to Change:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelWhenChange;
}
/**
 * Return the JPanelChangeMethod property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelChangeMethod() {
	if (ivjJPanelChangeMethod == null) {
		try {
			ivjJPanelChangeMethod = new javax.swing.JPanel();
			ivjJPanelChangeMethod.setName("JPanelChangeMethod");
			ivjJPanelChangeMethod.setLayout(new java.awt.GridBagLayout());
			ivjJPanelChangeMethod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanelChangeMethod.setMaximumSize(new java.awt.Dimension(335, 88));
			ivjJPanelChangeMethod.setPreferredSize(new java.awt.Dimension(335, 88));
			ivjJPanelChangeMethod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJPanelChangeMethod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelChangeDuration = new java.awt.GridBagConstraints();
			constraintsJLabelChangeDuration.gridx = 1; constraintsJLabelChangeDuration.gridy = 2;
			constraintsJLabelChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeDuration.ipadx = -5;
			constraintsJLabelChangeDuration.ipady = 6;
			constraintsJLabelChangeDuration.insets = new java.awt.Insets(1, 5, 3, 5);
			getJPanelChangeMethod().add(getJLabelChangeDuration(), constraintsJLabelChangeDuration);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeDuration.gridx = 2; constraintsJCSpinFieldChangeDuration.gridy = 2;
			constraintsJCSpinFieldChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeDuration.ipadx = 34;
			constraintsJCSpinFieldChangeDuration.ipady = 19;
			constraintsJCSpinFieldChangeDuration.insets = new java.awt.Insets(1, 5, 3, 2);
			getJPanelChangeMethod().add(getJCSpinFieldChangeDuration(), constraintsJCSpinFieldChangeDuration);

			java.awt.GridBagConstraints constraintsJLabelMinutesChDur = new java.awt.GridBagConstraints();
			constraintsJLabelMinutesChDur.gridx = 3; constraintsJLabelMinutesChDur.gridy = 2;
			constraintsJLabelMinutesChDur.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutesChDur.ipadx = 5;
			constraintsJLabelMinutesChDur.ipady = -2;
			constraintsJLabelMinutesChDur.insets = new java.awt.Insets(5, 3, 5, 5);
			getJPanelChangeMethod().add(getJLabelMinutesChDur(), constraintsJLabelMinutesChDur);

			java.awt.GridBagConstraints constraintsJLabelChangePriority = new java.awt.GridBagConstraints();
			constraintsJLabelChangePriority.gridx = 4; constraintsJLabelChangePriority.gridy = 2;
			constraintsJLabelChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangePriority.ipadx = -13;
			constraintsJLabelChangePriority.ipady = 6;
			constraintsJLabelChangePriority.insets = new java.awt.Insets(1, 6, 3, 3);
			getJPanelChangeMethod().add(getJLabelChangePriority(), constraintsJLabelChangePriority);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangePriority = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangePriority.gridx = 5; constraintsJCSpinFieldChangePriority.gridy = 2;
			constraintsJCSpinFieldChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangePriority.ipadx = 29;
			constraintsJCSpinFieldChangePriority.ipady = 19;
			constraintsJCSpinFieldChangePriority.insets = new java.awt.Insets(1, 3, 3, 8);
			getJPanelChangeMethod().add(getJCSpinFieldChangePriority(), constraintsJCSpinFieldChangePriority);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerNumber.gridx = 1; constraintsJLabelChangeTriggerNumber.gridy = 3;
			constraintsJLabelChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerNumber.ipadx = -45;
			constraintsJLabelChangeTriggerNumber.ipady = 6;
			constraintsJLabelChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 16, 5);
			getJPanelChangeMethod().add(getJLabelChangeTriggerNumber(), constraintsJLabelChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerOffset.gridx = 4; constraintsJLabelChangeTriggerOffset.gridy = 3;
			constraintsJLabelChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerOffset.ipadx = -63;
			constraintsJLabelChangeTriggerOffset.insets = new java.awt.Insets(8, 6, 18, 13);
			getJPanelChangeMethod().add(getJLabelChangeTriggerOffset(), constraintsJLabelChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJTextFieldChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJTextFieldChangeTriggerOffset.gridx = 5; constraintsJTextFieldChangeTriggerOffset.gridy = 3;
			constraintsJTextFieldChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldChangeTriggerOffset.weightx = 1.0;
			constraintsJTextFieldChangeTriggerOffset.ipadx = 26;
			constraintsJTextFieldChangeTriggerOffset.insets = new java.awt.Insets(4, 3, 16, 8);
			getJPanelChangeMethod().add(getJTextFieldChangeTriggerOffset(), constraintsJTextFieldChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeTriggerNumber.gridx = 2; constraintsJCSpinFieldChangeTriggerNumber.gridy = 3;
			constraintsJCSpinFieldChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeTriggerNumber.ipadx = 34;
			constraintsJCSpinFieldChangeTriggerNumber.ipady = 19;
			constraintsJCSpinFieldChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 16, 2);
			getJPanelChangeMethod().add(getJCSpinFieldChangeTriggerNumber(), constraintsJCSpinFieldChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelWhenChange = new java.awt.GridBagConstraints();
			constraintsJLabelWhenChange.gridx = 1; constraintsJLabelWhenChange.gridy = 1;
			constraintsJLabelWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelWhenChange.ipadx = 3;
			constraintsJLabelWhenChange.ipady = 4;
			constraintsJLabelWhenChange.insets = new java.awt.Insets(0, 5, 4, 5);
			getJPanelChangeMethod().add(getJLabelWhenChange(), constraintsJLabelWhenChange);

			java.awt.GridBagConstraints constraintsJComboBoxWhenChange = new java.awt.GridBagConstraints();
			constraintsJComboBoxWhenChange.gridx = 2; constraintsJComboBoxWhenChange.gridy = 1;
			constraintsJComboBoxWhenChange.gridwidth = 4;
			constraintsJComboBoxWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxWhenChange.weightx = 1.0;
			constraintsJComboBoxWhenChange.ipadx = 69;
			constraintsJComboBoxWhenChange.insets = new java.awt.Insets(0, 5, 1, 27);
			getJPanelChangeMethod().add(getJComboBoxWhenChange(), constraintsJComboBoxWhenChange);
			// user code begin {1}
			jComboBoxWhenChange_ActionPerformed(null);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelChangeMethod;
}
/**
 * Return the JTextFieldChangeTriggerOffset property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldChangeTriggerOffset() {
	if (ivjJTextFieldChangeTriggerOffset == null) {
		try {
			ivjJTextFieldChangeTriggerOffset = new javax.swing.JTextField();
			ivjJTextFieldChangeTriggerOffset.setName("JTextFieldChangeTriggerOffset");
			ivjJTextFieldChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJTextFieldChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJTextFieldChangeTriggerOffset.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999.9999, 99999.9999, 4) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldChangeTriggerOffset;
}
/**
 * Return the JTextFieldRampInInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampInInterval() {
	if (ivjJTextFieldRampInInterval == null) {
		try {
			ivjJTextFieldRampInInterval = new javax.swing.JTextField();
			ivjJTextFieldRampInInterval.setName("JTextFieldRampInInterval");
			ivjJTextFieldRampInInterval.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampInInterval.setMaximumSize(new java.awt.Dimension(63, 20));
			ivjJTextFieldRampInInterval.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJTextFieldRampInInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampInInterval;
}
/**
 * Return the JTextFieldRampOutInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampOutInterval() {
	if (ivjJTextFieldRampOutInterval == null) {
		try {
			ivjJTextFieldRampOutInterval = new javax.swing.JTextField();
			ivjJTextFieldRampOutInterval.setName("JTextFieldRampOutInterval");
			ivjJTextFieldRampOutInterval.setPreferredSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampOutInterval.setMaximumSize(new java.awt.Dimension(57, 20));
			ivjJTextFieldRampOutInterval.setMinimumSize(new java.awt.Dimension(57, 20));
			// user code begin {1}
			ivjJTextFieldRampOutInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampOutInterval;
}
/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	gear = (LMProgramDirectGear)o;
	
	if( getJComboBoxHowToStop().getSelectedItem() != null )
	{
		if(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Time In") == 0)
		{
			if(getJComboBoxStopOrder().getSelectedItem().toString().compareTo("First In First Out") == 0)
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_FIFO);
			else
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM);
			gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
			String interval = getJTextFieldRampOutInterval().getText();
			if(interval.compareTo("") == 0)
				gear.setRampOutInterval(new Integer(0));
			else
				gear.setRampOutInterval(new Integer(interval));
		}
		else if(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Restore") == 0)
		{
			if(getJComboBoxStopOrder().getSelectedItem().toString().compareTo("First In First Out") == 0)
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_FIFO_RESTORE);
			else
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM_RESTORE);
			gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
			String interval = getJTextFieldRampOutInterval().getText();
			if(interval.compareTo("") == 0)
				gear.setRampOutInterval(new Integer(0));
			else
				gear.setRampOutInterval(new Integer(interval));
		}
		else
			gear.setMethodStopType( 
				com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxHowToStop().getSelectedItem().toString() ) );
	}
	
	if(getJCheckBoxRampIn().isSelected())
	{
		gear.setRampInPercent(new Integer(((Number)getJCSpinFieldRampInPercent().getValue()).intValue()));
		gear.setRampInInterval(new Integer(getJTextFieldRampInInterval().getText()));
	}

	gear.setPercentReduction( new Integer( ((Number)getJCSpinFieldPercentReduction().getValue()).intValue() ) );
	
	gear.setChangeCondition( getChangeCondition(getJComboBoxWhenChange().getSelectedItem().toString()) );
	
	gear.setChangeDuration( new Integer( ((Number)getJCSpinFieldChangeDuration().getValue()).intValue() * 60 ) );
	gear.setChangePriority( new Integer( ((Number)getJCSpinFieldChangePriority().getValue()).intValue() ) );
	gear.setChangeTriggerNumber( new Integer( ((Number)getJCSpinFieldChangeTriggerNumber().getValue()).intValue() ) );
	
	if( getJTextFieldChangeTriggerOffset().getText() == null || getJTextFieldChangeTriggerOffset().getText().length() <= 0 )
		gear.setChangeTriggerOffset( new Double(0.0) );
	else
		gear.setChangeTriggerOffset( Double.valueOf(getJTextFieldChangeTriggerOffset().getText()) );

	com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

	s.setControlPercent( new Integer( 
		((Number)getJCSpinFieldControlPercent().getValue()).intValue() ) );

	s.setCyclePeriodLength( new Integer( 
		((Number)getJCSpinFieldCyclePeriod().getValue()).intValue() * 60 ) );		
	return s;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJCSpinFieldChangeDuration().addValueListener(this);
	getJCSpinFieldChangePriority().addValueListener(this);
	getJCSpinFieldChangeTriggerNumber().addValueListener(this);
	getJCSpinFieldControlPercent().addValueListener(this);
	getJCSpinFieldCyclePeriod().addValueListener(this);
	getJCSpinFieldPercentReduction().addValueListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJTextFieldChangeTriggerOffset().addCaretListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxHowToStop().addActionListener(this);
	getJCSpinFieldRampOutPercent().addValueListener(this);
	getJCSpinFieldRampInPercent().addValueListener(this);
	getJComboBoxStopOrder().addActionListener(this);
	getJTextFieldRampOutInterval().addCaretListener(this);
	
	// user code end
	getJCheckBoxRampIn().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("MasterCycleGearPanel");
		setPreferredSize(new java.awt.Dimension(402, 430));
		setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
		setLayout(new java.awt.GridBagLayout());
		setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
		setSize(402, 430);

		java.awt.GridBagConstraints constraintsJLabelControlPercent = new java.awt.GridBagConstraints();
		constraintsJLabelControlPercent.gridx = 1; constraintsJLabelControlPercent.gridy = 1;
		constraintsJLabelControlPercent.ipadx = -7;
		constraintsJLabelControlPercent.insets = new java.awt.Insets(14, 10, 6, 23);
		add(getJLabelControlPercent(), constraintsJLabelControlPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldControlPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldControlPercent.gridx = 2; constraintsJCSpinFieldControlPercent.gridy = 1;
		constraintsJCSpinFieldControlPercent.gridwidth = 2;
		constraintsJCSpinFieldControlPercent.ipadx = 47;
		constraintsJCSpinFieldControlPercent.ipady = 19;
		constraintsJCSpinFieldControlPercent.insets = new java.awt.Insets(10, 3, 4, 33);
		add(getJCSpinFieldControlPercent(), constraintsJCSpinFieldControlPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldCyclePeriod = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldCyclePeriod.gridx = 2; constraintsJCSpinFieldCyclePeriod.gridy = 2;
		constraintsJCSpinFieldCyclePeriod.gridwidth = 2;
		constraintsJCSpinFieldCyclePeriod.ipadx = 47;
		constraintsJCSpinFieldCyclePeriod.ipady = 19;
		constraintsJCSpinFieldCyclePeriod.insets = new java.awt.Insets(5, 3, 2, 33);
		add(getJCSpinFieldCyclePeriod(), constraintsJCSpinFieldCyclePeriod);

		java.awt.GridBagConstraints constraintsJLabelCyclePeriod = new java.awt.GridBagConstraints();
		constraintsJLabelCyclePeriod.gridx = 1; constraintsJLabelCyclePeriod.gridy = 2;
		constraintsJLabelCyclePeriod.ipadx = -4;
		constraintsJLabelCyclePeriod.insets = new java.awt.Insets(7, 10, 6, 20);
		add(getJLabelCyclePeriod(), constraintsJLabelCyclePeriod);

		java.awt.GridBagConstraints constraintsJLabelHowToStop = new java.awt.GridBagConstraints();
		constraintsJLabelHowToStop.gridx = 1; constraintsJLabelHowToStop.gridy = 6;
		constraintsJLabelHowToStop.ipadx = 4;
		constraintsJLabelHowToStop.insets = new java.awt.Insets(7, 10, 4, 12);
		add(getJLabelHowToStop(), constraintsJLabelHowToStop);

		java.awt.GridBagConstraints constraintsJComboBoxHowToStop = new java.awt.GridBagConstraints();
		constraintsJComboBoxHowToStop.gridx = 2; constraintsJComboBoxHowToStop.gridy = 6;
		constraintsJComboBoxHowToStop.gridwidth = 3;
		constraintsJComboBoxHowToStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHowToStop.weightx = 1.0;
		constraintsJComboBoxHowToStop.insets = new java.awt.Insets(3, 19, 1, 86);
		add(getJComboBoxHowToStop(), constraintsJComboBoxHowToStop);

		java.awt.GridBagConstraints constraintsJCSpinFieldPercentReduction = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldPercentReduction.gridx = 3; constraintsJCSpinFieldPercentReduction.gridy = 10;
		constraintsJCSpinFieldPercentReduction.gridwidth = 2;
		constraintsJCSpinFieldPercentReduction.ipadx = 49;
		constraintsJCSpinFieldPercentReduction.ipady = 20;
		constraintsJCSpinFieldPercentReduction.insets = new java.awt.Insets(4, 5, 3, 168);
		add(getJCSpinFieldPercentReduction(), constraintsJCSpinFieldPercentReduction);

		java.awt.GridBagConstraints constraintsJLabelPercentReduction = new java.awt.GridBagConstraints();
		constraintsJLabelPercentReduction.gridx = 1; constraintsJLabelPercentReduction.gridy = 10;
		constraintsJLabelPercentReduction.gridwidth = 2;
		constraintsJLabelPercentReduction.ipadx = 53;
		constraintsJLabelPercentReduction.ipady = 3;
		constraintsJLabelPercentReduction.insets = new java.awt.Insets(6, 10, 4, 5);
		add(getJLabelPercentReduction(), constraintsJLabelPercentReduction);

		java.awt.GridBagConstraints constraintsJPanelChangeMethod = new java.awt.GridBagConstraints();
		constraintsJPanelChangeMethod.gridx = 1; constraintsJPanelChangeMethod.gridy = 11;
		constraintsJPanelChangeMethod.gridwidth = 4;
		constraintsJPanelChangeMethod.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelChangeMethod.weightx = 1.0;
		constraintsJPanelChangeMethod.weighty = 1.0;
		constraintsJPanelChangeMethod.insets = new java.awt.Insets(3, 5, 69, 62);
		add(getJPanelChangeMethod(), constraintsJPanelChangeMethod);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercent.gridx = 1; constraintsJLabelRampOutPercent.gridy = 8;
		constraintsJLabelRampOutPercent.ipadx = -57;
		constraintsJLabelRampOutPercent.ipady = -111;
		constraintsJLabelRampOutPercent.insets = new java.awt.Insets(7, 10, 4, 3);
		add(getJLabelRampOutPercent(), constraintsJLabelRampOutPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampOutPercent.gridx = 2; constraintsJCSpinFieldRampOutPercent.gridy = 8;
		constraintsJCSpinFieldRampOutPercent.gridwidth = 2;
		constraintsJCSpinFieldRampOutPercent.ipadx = 3;
		constraintsJCSpinFieldRampOutPercent.insets = new java.awt.Insets(3, 19, 2, 5);
		add(getJCSpinFieldRampOutPercent(), constraintsJCSpinFieldRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercentSign.gridx = 4; constraintsJLabelRampOutPercentSign.gridy = 8;
		constraintsJLabelRampOutPercentSign.ipadx = 16;
		constraintsJLabelRampOutPercentSign.insets = new java.awt.Insets(7, 3, 2, 150);
		add(getJLabelRampOutPercentSign(), constraintsJLabelRampOutPercentSign);

		java.awt.GridBagConstraints constraintsJLabelRampOutSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutSec.gridx = 4; constraintsJLabelRampOutSec.gridy = 9;
		constraintsJLabelRampOutSec.ipadx = 4;
		constraintsJLabelRampOutSec.insets = new java.awt.Insets(5, 3, 5, 150);
		add(getJLabelRampOutSec(), constraintsJLabelRampOutSec);

		java.awt.GridBagConstraints constraintsJTextFieldRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampOutInterval.gridx = 2; constraintsJTextFieldRampOutInterval.gridy = 9;
		constraintsJTextFieldRampOutInterval.gridwidth = 2;
		constraintsJTextFieldRampOutInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampOutInterval.weightx = 1.0;
		constraintsJTextFieldRampOutInterval.ipadx = 5;
		constraintsJTextFieldRampOutInterval.insets = new java.awt.Insets(3, 19, 3, 3);
		add(getJTextFieldRampOutInterval(), constraintsJTextFieldRampOutInterval);

		java.awt.GridBagConstraints constraintsJLabelRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutInterval.gridx = 1; constraintsJLabelRampOutInterval.gridy = 9;
		constraintsJLabelRampOutInterval.ipadx = -57;
		constraintsJLabelRampOutInterval.ipady = -111;
		constraintsJLabelRampOutInterval.insets = new java.awt.Insets(5, 10, 7, 3);
		add(getJLabelRampOutInterval(), constraintsJLabelRampOutInterval);

		java.awt.GridBagConstraints constraintsJCheckBoxRampIn = new java.awt.GridBagConstraints();
		constraintsJCheckBoxRampIn.gridx = 1; constraintsJCheckBoxRampIn.gridy = 3;
		constraintsJCheckBoxRampIn.ipadx = 53;
		constraintsJCheckBoxRampIn.ipady = -2;
		constraintsJCheckBoxRampIn.insets = new java.awt.Insets(2, 10, 2, 3);
		add(getJCheckBoxRampIn(), constraintsJCheckBoxRampIn);

		java.awt.GridBagConstraints constraintsJLabelRampInPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercent.gridx = 1; constraintsJLabelRampInPercent.gridy = 4;
		constraintsJLabelRampInPercent.insets = new java.awt.Insets(7, 10, 4, 9);
		add(getJLabelRampInPercent(), constraintsJLabelRampInPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampInPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampInPercent.gridx = 2; constraintsJCSpinFieldRampInPercent.gridy = 4;
		constraintsJCSpinFieldRampInPercent.gridwidth = 2;
		constraintsJCSpinFieldRampInPercent.ipadx = 3;
		constraintsJCSpinFieldRampInPercent.insets = new java.awt.Insets(3, 19, 2, 5);
		add(getJCSpinFieldRampInPercent(), constraintsJCSpinFieldRampInPercent);

		java.awt.GridBagConstraints constraintsJLabelRampInPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercentSign.gridx = 4; constraintsJLabelRampInPercentSign.gridy = 4;
		constraintsJLabelRampInPercentSign.ipadx = 16;
		constraintsJLabelRampInPercentSign.insets = new java.awt.Insets(5, 3, 4, 150);
		add(getJLabelRampInPercentSign(), constraintsJLabelRampInPercentSign);

		java.awt.GridBagConstraints constraintsJLabelRampInSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampInSec.gridx = 4; constraintsJLabelRampInSec.gridy = 5;
		constraintsJLabelRampInSec.ipadx = 4;
		constraintsJLabelRampInSec.insets = new java.awt.Insets(5, 3, 5, 150);
		add(getJLabelRampInSec(), constraintsJLabelRampInSec);

		java.awt.GridBagConstraints constraintsJTextFieldRampInInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampInInterval.gridx = 2; constraintsJTextFieldRampInInterval.gridy = 5;
		constraintsJTextFieldRampInInterval.gridwidth = 2;
		constraintsJTextFieldRampInInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampInInterval.weightx = 1.0;
		constraintsJTextFieldRampInInterval.ipadx = 5;
		constraintsJTextFieldRampInInterval.insets = new java.awt.Insets(3, 19, 3, 3);
		add(getJTextFieldRampInInterval(), constraintsJTextFieldRampInInterval);

		java.awt.GridBagConstraints constraintsJLabelRampInInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampInInterval.gridx = 1; constraintsJLabelRampInInterval.gridy = 5;
		constraintsJLabelRampInInterval.insets = new java.awt.Insets(6, 10, 6, 9);
		add(getJLabelRampInInterval(), constraintsJLabelRampInInterval);

		java.awt.GridBagConstraints constraintsJLabelStopOrder = new java.awt.GridBagConstraints();
		constraintsJLabelStopOrder.gridx = 1; constraintsJLabelStopOrder.gridy = 7;
		constraintsJLabelStopOrder.insets = new java.awt.Insets(5, 10, 6, 66);
		add(getJLabelStopOrder(), constraintsJLabelStopOrder);

		java.awt.GridBagConstraints constraintsJComboBoxStopOrder = new java.awt.GridBagConstraints();
		constraintsJComboBoxStopOrder.gridx = 2; constraintsJComboBoxStopOrder.gridy = 7;
		constraintsJComboBoxStopOrder.gridwidth = 3;
		constraintsJComboBoxStopOrder.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxStopOrder.weightx = 1.0;
		constraintsJComboBoxStopOrder.ipadx = -25;
		constraintsJComboBoxStopOrder.insets = new java.awt.Insets(2, 19, 2, 86);
		add(getJComboBoxStopOrder(), constraintsJComboBoxStopOrder);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	rampItOut(false);
	rampItIn(false);
	
	getJComboBoxWhenChange().setSelectedItem( LMProgramDirectGear.CHANGE_NONE );
	
	try
	{
		initConnections();
	}
	catch(Exception e)	{ }
	
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxRampIn_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	rampItIn(getJCheckBoxRampIn().isSelected());
	this.fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxWhenChange_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelChangeDuration().setVisible(false);
	getJCSpinFieldChangeDuration().setVisible(false);
	getJLabelMinutesChDur().setVisible(false);
	
	getJLabelChangePriority().setVisible(false);
	getJCSpinFieldChangePriority().setVisible(false);
	
	getJLabelChangeTriggerNumber().setVisible(false);
	getJCSpinFieldChangeTriggerNumber().setVisible(false);

	getJLabelChangeTriggerOffset().setVisible(false);
	getJTextFieldChangeTriggerOffset().setVisible(false);

	
	if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_NONE )
		 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Manually Only" ) )
	{
		//None
		return;
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_DURATION )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "After a Duration" ) )
	{
		//Duration
		getJLabelChangeDuration().setVisible(true);
		getJCSpinFieldChangeDuration().setVisible(true);
		getJLabelMinutesChDur().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_PRIORITY )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Priority Change" ) )
	{
		//Priority
		getJLabelChangePriority().setVisible(true);
		getJCSpinFieldChangePriority().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_TRIGGER_OFFSET )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Above Trigger" ) )
	{
		//TriggerOffset
		getJLabelChangeTriggerNumber().setVisible(true);
		getJCSpinFieldChangeTriggerNumber().setVisible(true);

		getJLabelChangeTriggerOffset().setVisible(true);
		getJTextFieldChangeTriggerOffset().setVisible(true);
	}
	else
		throw new Error("Unknown LMProgramDirectGear control condition found, the value = " + getJComboBoxWhenChange().getSelectedItem().toString() );


	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		MasterCycleGearPanel aMasterCycleGearPanel;
		aMasterCycleGearPanel = new MasterCycleGearPanel();
		frame.setContentPane(aMasterCycleGearPanel);
		frame.setSize(aMasterCycleGearPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.dbeditor.wizard.device.lmprogram.GenericGearPanel");
		exception.printStackTrace(System.out);
	}
}
public void rampItIn(boolean rampOrNotToRamp)
{
	getJLabelRampInInterval().setVisible(rampOrNotToRamp);
	getJLabelRampInPercent().setVisible(rampOrNotToRamp);
	getJLabelRampInPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampInSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampInPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampInInterval().setVisible(rampOrNotToRamp);
}
public void rampItOut(boolean rampOrNotToRamp)
{
	getJLabelRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercent().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampOutSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampOutPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelStopOrder().setVisible(rampOrNotToRamp);
	getJComboBoxStopOrder().setVisible(rampOrNotToRamp);
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private void setChangeCondition(String change) 
{
	if( change == null )
		return;

	if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_NONE) )
	{
		getJComboBoxWhenChange().setSelectedItem("Manually Only");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_DURATION) )
	{
		getJComboBoxWhenChange().setSelectedItem("After a Duration");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_PRIORITY) )
	{
		getJComboBoxWhenChange().setSelectedItem("Priority Change");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_TRIGGER_OFFSET) )
	{
		getJComboBoxWhenChange().setSelectedItem("Above Trigger");
	}	
	
}
/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
	{
		return;
	}
	else
		gear = (LMProgramDirectGear)o;

	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_FIFO) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Time In" );
		getJComboBoxStopOrder().setSelectedItem( "First In First Out");
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Time In" );
		getJComboBoxStopOrder().setSelectedItem( "Random" );
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_FIFO_RESTORE) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Restore" );
		getJComboBoxStopOrder().setSelectedItem( "First In First Out");
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM_RESTORE) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Restore" );
		getJComboBoxStopOrder().setSelectedItem( "Random" );
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else
		getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getMethodStopType() ) );

	if(gear.getRampInPercent().intValue() != 0 && gear.getRampInInterval().intValue() != 0)
	{
		getJCheckBoxRampIn().setSelected(true);
		rampItIn(true);
		getJCSpinFieldRampInPercent().setValue(gear.getRampInPercent());
		getJTextFieldRampInInterval().setText(gear.getRampInInterval().toString());
	}
		
	getJCSpinFieldPercentReduction().setValue( gear.getPercentReduction() );
	
	setChangeCondition( gear.getChangeCondition() );
	
	getJCSpinFieldChangeDuration().setValue( new Integer( gear.getChangeDuration().intValue() / 60 ) );
	getJCSpinFieldChangePriority().setValue( gear.getChangePriority() );
	getJCSpinFieldChangeTriggerNumber().setValue( gear.getChangeTriggerNumber() );	
	getJTextFieldChangeTriggerOffset().setText( gear.getChangeTriggerOffset().toString() );

	com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

	getJCSpinFieldControlPercent().setValue( s.getControlPercent() );

	getJCSpinFieldCyclePeriod().setValue( new Integer( s.getCyclePeriodLength().intValue() / 60 ) );
	
}
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
}

package com.cannontech.dbeditor.wizard.device.lmprogram;

/**
 * Insert the type's description here.
 * Creation date: (8/1/2002 3:39:47 PM)
 * @author: 
 */
import com.cannontech.common.util.StringUtils;
import com.cannontech.database.db.device.lm.LMProgramDirectGear;
 
  public class MasterCycleGearPanel extends GenericGearPanel {
	private javax.swing.JComboBox ivjJComboBoxHowToStop = null;
	private javax.swing.JComboBox ivjJComboBoxWhenChange = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeDuration = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangePriority = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeTriggerNumber = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldControlPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldCyclePeriod = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldPercentReduction = null;
	private javax.swing.JLabel ivjJLabelChangeDuration = null;
	private javax.swing.JLabel ivjJLabelChangePriority = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerOffset = null;
	private javax.swing.JLabel ivjJLabelControlPercent = null;
	private javax.swing.JLabel ivjJLabelCyclePeriod = null;
	private javax.swing.JLabel ivjJLabelHowToStop = null;
	private javax.swing.JLabel ivjJLabelMinutesChDur = null;
	private javax.swing.JLabel ivjJLabelPercentReduction = null;
	private javax.swing.JLabel ivjJLabelWhenChange = null;
	private javax.swing.JPanel ivjJPanelChangeMethod = null;
	private javax.swing.JTextField ivjJTextFieldChangeTriggerOffset = null;
	private javax.swing.JCheckBox ivjJCheckBoxRampIn = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampInPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampInInterval = null;
	private javax.swing.JLabel ivjJLabelRampInPercent = null;
	private javax.swing.JLabel ivjJLabelRampInPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampInSec = null;
	private javax.swing.JLabel ivjJLabelRampOutInterval = null;
	private javax.swing.JLabel ivjJLabelRampOutPercent = null;
	private javax.swing.JLabel ivjJLabelRampOutPercentSign = null;
	private javax.swing.JLabel ivjJLabelRampOutSec = null;
	private javax.swing.JTextField ivjJTextFieldRampInInterval = null;
	private javax.swing.JTextField ivjJTextFieldRampOutInterval = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JComboBox ivjJComboBoxStopOrder = null;
	private javax.swing.JLabel ivjJLabelStopOrder = null;
	private javax.swing.JComboBox ivjJComboBoxGroupSelection = null;
	private javax.swing.JLabel ivjJLabelGroupSelection = null;

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == MasterCycleGearPanel.this.getJCheckBoxRampIn()) 
				connEtoC1(e);
		};
	};
/**
 * MasterCycleGearPanel constructor comment.
 */
public MasterCycleGearPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	if (e.getSource() == getJComboBoxWhenChange()) 
		jComboBoxWhenChange_ActionPerformed(e);
	if (e.getSource() == getJComboBoxHowToStop()) 
		connEtoC10(e);
	if (e.getSource() == getJComboBoxStopOrder() || e.getSource() == getJTextFieldRampOutInterval())
		this.fireInputUpdate();
	// user code end
	
	// user code begin {2}
	// user code end
}
/**
 * connEtoC1:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxRampIn_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JComboBoxHowToStop.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		rampItOut(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Time In") == 0
			|| getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Restore") == 0);
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G44F9C7B1GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E15DFD8DDCD45735AFC9CDC29B1B1016A42441149A5312162634A50DCD3D7752DE5BEB93FACBDA1A18D7EFCB9A6E0DEDC942EBECC3DEE8BC402098D1D19179E60C282008A8E88822722502C11D88AAA6A4BAB283B3B2B0434C61C3C5FDEB6FFD56BE678C678CC3533E1FFD7CFE0B197D5FEB6D7531BF4E5E7B6CF3C648A98D4BC8CD4B9104548CC17AFBB7D5903A9F9304F30FC644A036B0B357A0A87EB681
	2D95CA3690F0B164F5FFAF5710AD7CE9B89352A9106EF9A85730913E2F97DE9F6E3A973E686829043CDB7625DAFD6B396D846AD9CE53873B3260F3B5E1D811EBA883F22DA07A4FF465C9F89B24D7CB5F89252689C25D5B04A732A8CF01C7C9FCD910E784DAC4F9063B0A247CGC8931E90780CF81B714E074F95543A5B6A6BA43E1EFB4205A5CF1DC8DBC5F4A94AC7AADB49E45B24CF2370AC8DC43AD0F36498FCB618867A8F76BA872BFA4DC3C34EA1515AEB2B32DC34DA6C2253DDB5E63FE2F6DB2AAC56D1FB2F
	354AB168F2BB7B5D66417A7A63E60FE8F537DC6EF5D80FDA4DEE13F9486A900439AB098F4F96E552724187C837E6916CC4B109DB8A24F3A0DD1905FEBC332AC132B3F8A0DC08FF38C9570F40ACE6FFC4166C0758FD771A1ED5247CAF51FAA1F20910DF86983365F7DDE8CB58AA3445D5C0F897C2BA89A8F3B5626F96925C8869BAA053EA347140B634317B6A93C272456134B5BAB65AD6B35B02D64BB666ECBC1311CF5B4EDA93297F9848CB82B22C49B51483358159008AE91B0DB9319DBE1BAE0AAD4E41C167D0
	134B556C30380FBBADD687FC2F2F079C89BBE56DF53AAD02405A652F0BAAB56CC18AD823EE130418EFE785ECC791279E93C431BFADC3433728DF19520225B24257483EADDCC36276A3DA378B60FB2A94EB0647D03CA8DB46D9DDF5D11C24ABA1AFA89B635C3D9AED69B04C9632F7FB5216EB589272A3DB5A12EC296F2C15EDE1B17E6387A446F500F781B900E6G4D811A3F96E31CFB32E62A9837C3BFF08F199D1DA397DDE63758BCE2F7D82CEEA956E1DD3EE22DC5CC6E31E94B31380457A86BE851F75D1AF1D9
	94FEB6ADDE0AC732A2AECC77CB3A3A7356CDEE9B2BF99DA6503ED2394E3BEEDF21F843BA6F3A9DAD403A6D003CC8A0467F8D5A37F256FB1773B8454B56FB17F320904B29053C90A0D63F1F6DA463E38A2473F2F28D55C0EDC0B62099C0A1B9D84766133B7C6CC7A6C57DB25982D3AEFCDA47C53739FD48A31A07FA2DE74CEE3B7922436A91A41E4DA692570BAA39F25A3FFBC147D16B1055ED966D4EA1A85DBCE8054664E1BC3BCDEB890F5BCAF33B6C03D6D0B06892305C77CC6B615381236BE91745ACDAE58E16
	5FE4A2EDE254FC86CA0482607B629CFA7D23E36EDC789E1703317A9E9D7BAAB74078368163B24F348EBE5F0746EDF55457375AFB0999E677E5EC238B0A49752EFB837649D73A316D352E7A26D0792BE14D36C748104B5AD1D12EF75B7B85AD33B5972F219F96F7CF339F78C344E6392FF97EA1BA5225CF965F32B3240DDA402FG2030DC0C716BA6A3EBFB4DE60F95DB5BC9B7B4942BC50EB863DD72813916D8C72DC3E22B55E59D3240970FD457EFFE30C2EE07FDCE5EC6D2CF911C0CCBAD50D0BC9CDFFEEAAD43
	218CE52B467CB5B45FAC0AEE7B4591515AE995C57BD03FAC3F71943145239A72BC122FDB4F92DF67020F31C0715C5730D36B956D2943699C98F1F5111EA2354B37E89BDC827CD99B317E7FD0C05AC3B5CFAF21E9B9FF22E03AF5C74A1A5ED8FC6F34F524CF03176978F6A171AB1527FFC053A66EE7CBE137205D177E9E44F474D09D5331FDBA445A4097BB755B7017BA355BF0D827F69B7EEA276FB67AD827D69BE5F90FF712390BF3ECC851661F6CA463DD2FF3E848CABB9E9791589C7815AE6207FD48AE1E35DB
	7A2DE2277D8A2C8842B612363B2218345DF178BEF3A30E07E31BF1BCAC3B722890FD3EC3F33E947248C0DA0254A613B74A63A1336987F42EEAF5D887A1D0AD4E11A11161BF24FDC542BD6994BBD27F9011ADBF56E233768EB4BB47CF413520FD2852CC3D29E29FA62B3B4F699E34DA4AAF19C74DD566B1310A56C6D5934DBECC3ED798F76EBCE8541A36D7DED217FD3E492B508E7DD277D71C2928467170DCB771ABAF8F6677C02DF9B8C69CB8CD72F10C108642962743412A84724273C83C53CBF294B16C49E36B
	AB391DEDBF13CD6A5EBABCE205CBB299E45E37DE466B6A19F5DEF9E74C0E9179FA7D5E19157069D00CCF8C2FBC2BDD97FB4E123EBA404B5FF7F619C02E3B2CCC56F6A24D24CC175BBE8843B999F025F55E06534AF5DE9278C156042D7930D685E232FF4DA53EEAD5C7ED81A9A331905701AE1089848A4FE765AC4EE7B18920FC46E2DC5F6C62583B94FB958600D9861CC39E4FD62E97AD9E0BE63BA5B43F00153F3040FBEEFD57B9D2EEB2601905D83711E71563FF1347636C3553290D945F735D4AB64DB0CB775B
	7059E7F7FBE01EED310EE39DDD6AA63612390F84CBF17E460E834264395CE13AC2454BEB4B98ED0FDD4E9618FE35C1B53770AEFF46EE9D93B08E570EA8571B73561CCBDB29930722C266FFC321E23D13FBA6035934FF7C0870372E1D696C505EBBE95DFC63B4099531E72290572477D71076998569982084A0B6BF5ED014A545A785305AA2E89F348F052B7A102308DDF70361130DA793C5FB4878BA6D51836BE25CFC90BEBF5D0801F5B1FBFD23E4E74CE33305069B751A6B6A40B52DE961C52C8EE20B643AA85F
	F9B82381C8DA476ED1366F6878EE5D76DDD44C4A28AE76EE5F6E0FC87CBBG3FD00C6D7B3F3B57AA5AB72C39E1B9506F3072B1690B675259B8A1256FBF1701630400636237FAC81D08D0E690D0B8D0B4D0BC57D17261146B514363BE5623B3CE635ACEA849B564G1583B514B07FCCA51367C6EC6D35F4BB1D3F16303557DE0E3F33036E0FA8F05666E65136C8529D253906E4A34EE38AA76DBD4CF9C72DB35AAB4D64AAA64915F825933C64D89BBCF826907B9EE9E763D51EB118A3545773EB24541FFEDB12A975
	7B14F7F0CD14718999D7EBB7679ACCC0B62099C061C0730196EF46BA997CD0EB4CD157095E00A34F3B194E4367099D19E530E6AD43721F7AF01522DD191C76A1113729310F4835466936775B07901B20D82F53CDA7B78CFB22C7FF5E752FBD5A732E79BD5A732E27FAFC2F9DFE5123B7AFE3737C876958D58E7E3582B16CF3DB88568DE997476A3792EC8624C3B87671B6024D03F49C479E2358E2C88BDB301DE56C3041E79924DB019CC0C1C011C0B1C009C0B9DBF38DF5C05DC063C0E1C073016201B237413C84
	288D4886B493A892A886A889A83B9C7201BA009C6528331C6A8C02F4A4D0ACD092D0F6C52E219A488464828A820A820A83DA8214339D46E4202E6D6C5AAD42E7B0D094D09C5092201C9D40835485A482856FC01D8FD70425CAF307ED7E2FEB88913F15E9629B094F5FFB5ECFE225CCA7CABAB0567E14512A30EB26061F24AEAA95F84C94FEB8A41B42A47DE5BA7C249D10B6026D20C3129BD7589DA449BAB44AA0ED0634B3D6D72B37E3DD6D1CE68CB7F825F7886C5A7F772E2BDDDE69B552A7695745FE16112178
	3ECDA3FF37406E17E0FA5594656D15BE7325CF3D75E929C0469EC1588C348528C642B7AAF8D6C81F4BB564ABE89DB1BF53051F66925FDDB06CD9BDF470EEB50BE6A96FA511544724F562897320D532EF3DF02AE80544F3D8F4366C9670BA16D0223C0EC56DE0EDE6017439C87ACC5AA137A5E9BF66937D71BB77936D713B689392DB0FF3445DEB759E23B7FF124773642BD13BE89DA4EEC86B9DAAAF1A5D305675162F2172ACCFCF3E61935F6B73E367491CE11C27CF5074E59E436F1CA67ADDEEEB1F558D2BC036
	5C969AAA49187FB43D06984877CA1C2FFEE58BD9AB189D767EA1320268C65E0D74BA92G5F03B96F87DB49B552E13E6C9C010BE95ECE42E75B2ADC0B4D875EC4A0E1A72B8BA6A7EED369B807BAE652EB50856095F7623A6D5BE3240F7641BC9E5C6EF4D9FB055AAA427B63ED28A78CF82300620016G65D421FDAFAFA37340E39D660BD68744D7F4BB9DB0E56E8515ACBF0D5EA7BA565269328F9D31DB9D96B593373724AD570B0FACA0014B6E34A0CF5E47EBE5DD4AECA97F9B1756707CB667D81733D3F43A243C
	A376F534FC6760C5A74C2664ECA97FFED721DA3FE460A92BE5042D68253506AB176B1844A2717C688A55C557C1ADB618DBDB0FDBC51B6C4729B2B9E6E431F1F2C4D4454CD16695B3B59377B730ACCF271CCE28F64673F0D936B7CF273517654DE3FA3A20C7AA55507BC4B05B67FA9616ED70AEE3924FEBE5B4766AB514141735E53DCA3EFD88BDE179DB3764CD7617B3B11E26AD9B354BA02ECA6574ECD96345832ECAF9A3CC074A5776A1F4037184ED497112D76747164A651336C3F7FD2472FFDF2AEADFF23614
	5F57A817FD546D9CF1F5DA252DA2169F5038D1A92FE61176125CBB146B6009AA368E8E2B42F57239A6E5FE14143F18675FBB2A151F42731FAF57AABFFB9766FF3CD9AB3F0C67DFABD366576DE27997F8FE3ED1CB3F4873FFD322D5FEA06433BD2887CA1463DE28D4FEB4FC4671B2F69E54AAA311674FE95632C128467C2AD2AD799C1E9F2D19DF4E73A3D5BEB6D433FC8B4F6F53149F6779AB0DDA79B3F97E6E1DDA7607717CBF95EB49C7717CA80BD67E821EFF1FD54B7EC5BCBFD6537EA41E7F17FC2DFC43EE4C
	7794E83511BC1E7FFD4D72ABF97EF70CDA720D3BF10D75A6DD9FF7C15A423114FA3A678D69C00E197763DAAC18E30F1492AC815219FBF28DC5FB4859192ABE010FF1B7369861F348BAE664DBC12DF6383A121B16653555FBAA0D35B55595EC6FA6ECCC39F7D37776A73AFBB79776306B36A8FDDA02B673B9E226A07FB19B2A3612B9A9578F63054BB9C43623BA8E9F69BA5F5451FE74447143A73A845CD758FD016C8D70FD85A2D4DFFF54ED37B41B7BBB682C026DAB5CC5679E443E08BD38CFB7EFAB599BC900F4
	8AD0CE8D5EAF985F0A7B0D91DF1DADF48438B54F3744F71DCB2B2C1176EBEA94FBDC9B4FE4687B7770B62336FFDDA7CD32FB4C66BFEEC31BE7C27973EB8876F35598C64A7C987ED541A74BCF2DD0662F1564657C9AD5BE71F70BCA5E2A4A4FD0483358BC3D85E31372F42460F87C026E591F2CDAE94FCE7ACC7EE433907462E1E9AF76353EBCC1F3BF08DEC1187F0F6E4814FC305562DC6E7A3E2D02E28FF74051DFF529176C0AD475114B9E59D06217D95C238DEAA26590BBE3EA710CD14CA8E255FB914B2EC0FD
	419C8B5E0C7BD149FB5106FE075EDE16F4F51374C615615EF075BEAC4FE44472EC9C5BC07BA53976066DC39D2FD56844074E3A185CB3A5E82F61DDEC53217D24CD5BA09DG9472AE6A309CC49D119C7BF5B35A17D3071835946D6B60586B9C1BD10776EDA9AF52360F4FC0186CCB5C5FF93C3CD95C5FA59CEBB6A2567D9EE2361DE85FBC0ED5707D41A59C7B2385314AFA44FEE6C54C423165DCC7A847F696A01F309F312FF32C0EE3C925E80B0BE33FB7A2963E9F578B6BCA49BD28BED8843075C8B9150B077CC4
	4E33FEBF6191A1D0EC8CBEC1362B04068642BF3E3FD523AFA97B7B8A6913D09148905AA07541EA78BEG1FFFDD3AF429B487AEA573F91B53ED3F82B6199D24FACCCE0F1D4D67190D4FD19BC93D4EE840B170679FA947776CAF3525256A74734886563F67B5F86F4DB75AC939C900E79D40BDD4CF9F59B3B9E33EB4790E9000A63753E5F50B1799CA6F86CA6B75AFEE1D6EB9AC36AFDE3D0D1E05BA407645D3B97E9E456B94B85BAF7F51D6BC13588AF96187F08FFA7892690FD987E1AE845488548DB48E94FC101F
	53692B962658FF6EF23ABA2C2330341237EB19FFDFAD7F5B4E197DF0B90E47D1CFFEDD18FB3BD1775ED878C1E90FC37A8C7AF8B34519FF868771AF9972F28E41FC944884E4811AB8047E997AAB19FF24FA1AC4515CEB23F78851B9F253CE0649C2DBBAC337437B5CC69014B9679033E36EA16DBD3F9840630116A872B39B213DB7EA5D17383749DBC735022F35D1DBC7B7608E2F3CGC887EB6AF8E654DBC73802EF1E0E0ED840933C7212A11D552425E3C305378EA37055CA3CEDCD5ABAFAGF7814DD064074077
	88CD9D8FECD63635E8600983DAAC7126E868E0F25FAFC3396CE6E93F36D9662D036F9DC097949813BBEDC4B931F9F25901000582C5CE12ABA8750E45FC60D9A871A5EA14C5C8E801B65C224EAB07F4C30BD6AC1EADD16AB0810F85E8DC621D59222DA38C70A820850A7CC59A3CEC2CB1594818125442461A0D9C37D03C3CD5465998B41BDE43C97A8264959D46FDEB7BC16FF8AC043C4443CC2FF0C45B569C404B3D729AA0EDBA22950F78E62CAB0B14BF2E601B895F4300220EF8575525D2E51BDAG790B0012A4
	BE43D13DB61522124B833ECA20C6093FCBD7AE1137A91B864F84E0C1C0F30EFA5BB9FBD21B1A8BBCB192DF3CC6D90416G1E59264EAB02F4F51BD68C0F9A3DF53482DF37446BE8535691GF830D7DEB82467E96A985C097E47CA79898A3EE4781E551EEBB036FB7BDF255A772E057CB6209E094F552E976FA40BD2EE867005GC5C87C513AF23F3022DC1C864FE240D200320FF95B19B5A906E540D3A771F59C530E618540C52F3CC0C8079E530A611E8225CF1140B39FE821441B28210349FD0B4B896FB31E1C77
	E55EF2785E703E163EBF2B5A3A89F8ACC063C0B301425E5753778AEF6BD14033GE81102B7893E9BBA3C5AA61DD7BEBDCCCCE47340247AF7842F357D911890163FE3311B9D4E7EF7AA0D5515465DFBAA844D35B9AB6F95F25BC11AF73C1005730E22EFBCAC34BEE7CCA377FB34669DF912ED368EF9FE987A515DEB18DD2F1492FD0AA5C4D5A7795F62240738C58FDD77CBF3145F11DB9652BD0AAF58483DA54DF9A44CC40EC1F9A7AFDE32760ADD66FEAEF358CE74737BA0ECFAA965F558493A171CA904F8582F50
	63D01D40B8544F6AE09F3905A65547A1457785DB7F91E71655757F42BFD487737F4AA57D7BDA37DC523E2FF547A56DF3891F3F647BFE533D17744F0306DED21E87E5757E2AC86AA68C5A4FBC20F820A5C01947F1DE3AFD0034ED72F44064B969E1CB3F959B936ADF655077B547B175F384458EF26F6922D3941D0324FCFEAF4FC16ACBF43AA8A8BDDF60A0B1F25B7BEDA2E31570AA8769DF8EEB9F05597EDCAC5D6FA8833F9A0E631E5D26CA0219A0FD01E337D34C8169999CFB78830205C0BA0AE39FAEA75882C8
	AF64D84CA602A5C25AF0823112F7F02FB00FE33FCAA3188D52819CFB22896D8B66D89A5DC38807F4B4471E5F0A67CA62B83654CDF5C0DAB80958879E541B433128958433C0FA02E32F0D225EA00E9D9CA3589CC84F635860986A0D65589A917DCD605826B1541B4C3197AE235EB693E26FD6205E9E0E5DCAB1972483B8769245E6C2FA0E4CC74F8F4D05F49C47CC7B28DEC8A7F3EC7FE134AF6B83446EB80C7699B9B6C877BDDC108E64D8A45D1B8A05F48447FA8E91AC9A528BB976CD0AA5C2BA05E33B0E230E4C
	D3084516E17C3AB956D50C65B9B87665E2148D6058CF69DEC8ACC9F3AC186E2324C0BA2793B18765AB07F4AB474A8A303CEE0E7D086EC904C3BA1AE37579840B03F4A2479ACA51BE210B470FE2B910AE63D8A2452AA15D4631B3343C9EC80FF36CF99A5319108E6558118134AF12E3AE5A6E055350E7CEA316CC6B2892520D9C9B237EDAA0BD4E313FEC1A9C53D25A87C301A70A735D3D856BE381473EC54BDB8469C499237BAC429930658CE2291750664AB338FEB8E3A3730889C807824D87CAGB21C859E20AE
	208920F020B8202433A8F7094AE5F743FC97488464828A820A840A85CA824ABE8779C026F3A8975E9F29F13DA1FA695C762CFA4EB2F1C67F2C10616C643C84091F780276E2DE2562FB17062CB7CD1C751EFFBE27E9BB1ED7D96F057BFAD6C36BFC901EFFA157BA32F727BC9B23BC073346C739C8EB955FD95D5FC977FADDD08F016730BDAC22D8A824A3B856C4470539100E6558496D749E9124058F913B05367F9CC817F1EC4795ECDFF59C8B23FC01108E63586B341FC4C1BA16E3FF4EC77B92B856484700E40E
	6551365E7691DC7BBEC26C8F14CF0474CC0E5DD20A7605F16C767D28A30AE34F6C4798AC60581E86549B473175D4EFD9CF2E2136070F8BD4368D5297B8361D4A0A101E41313BF9F9C19CCB277DBD9E52A99CFB007B1B7DB13F0FC77D38G69F10E3D184F7D6558FC4A978669399C5BC0ED0E0174A20EDD2158E2C88B1F70B31AACD6102E6658D3D4C7AB243BB876EAA35AE763589FA85FDCC847F24CCEF5A4C0BA05E3CFD2AC7BBCDC3F4E73710D462092522D9C4B256D259B52A247D65076928869900EFD175F4B
	0C6058C92AA38552B997901BC16F9714C33A15E32F6621FD5D9CE35791D21E03E327EB89B68F52F19C0BE2FAA1AD1891BBDC027665F0AC72AA6AA867581BD7B1868D9C6B19C03DED9CDBCE6FD304C0BA1CE3366B5496C847F16C7B94DB8C69E40E155C40728C97917BBDAD2F8B52AE0EAD61EDF286471AE87C62A01D4831DF67F3FFFB912B22FCB9102E64588D0AB5C25A4431840A75C0DA64180B3671C0C84F61D88CEDFFF3A13D00E3B55C3EC59C3B0B16D7E9013A34A056CE4B6B06340DE3775076B28169E00E
	7D0E4DC9A1BD17E3C7DBD047FC0E7D041617E3053EE065F3A5EADFAB24FBB876D6A94A3AB896C9E523A13D10E3D95466C4C827F06C0F348DE577C15B6863F3966AEF8324BBB876950AF5C35A45315764FA63D8866DC7F110CE6258B78BD056500F589B8528B70FE32D05FCCE40310F294D93108E6E47FB9D47C749BD28F0C84FA7FCC0028D5ABBD0A5D0A3D097108DA8GA884A882A89AA88EA881A899A84B0E6B339A8FB95329F74FC73AD9CF97E9EE3372CC7D6B227EBA6DADF16AF55A7291621B9556D7DD17DD
	52D9482C91FACE3F2F4FE3656B4135A3599CEB77605DB136BF71528E6DF306CB69DA4D88BE565A713EDEDD257A3E5EDEF224D25AFF19D5C966810366F17B6048A0BDC1494AF91C2E65AEC0998EDE4E139F681F377CA5DB67816F9C4EBF3CDCFD4F718E3A6E0B057CC51C6745CD5AE7B25F246DA96B920C55C06C9E645EF7263A8729A46FFB10A6A8673525CB1726F25F9369BD29C17B10176F06F4BAE6G3F0D6826D8FC9346B578925A1E5F2C9D3B5D341FC783DF8C17CF23E7A612A1ED98C079DC0F366FD59E74
	3DFAGFD37F9FC791EA1791421637B058179FEA2537D748AED5FDF246BDC87700F8F206DC5E3687B9CEE7B69B1ED5F59DAB7967896F1797BA81669003E6AC02CCEC49F9B9D68E35D58D4BEE67870516510FDE4BA5E26F341894083395E8B9568CB1483FDF920C25DBF3AAF4B7D632D8AEDBFF369FCB49E4AC8144BB92F5FBF3EC3575DF903B0D79DC47E7EFD6A7EF10D2E43CD105FB30876DA8EE31CE68EE21C9EBABCD5BF4098E945E99E1473062A9F4CA851EE8B21F4CE31G7863384D7F31D9ED73FF51F529B0
	84636A9072F88EE90FCDF752F9FD837019B86F7CC36A58DF3DC20AE3FE9EB9BE151FEBFC78B9B1444E8C486D618D3A0F9088F870904677DAB15A94BD04717DDE71D46D1068DDAE69CD9C12755217C2B93D7BDA3CD1BB3E49749A17857CF9CE0C47B78A345B5B3F536BE6AB7019B86FE70C7A6DAD14DDBF01B75009FE6DAF70659771E7230F7E95B5492F67CB35ED7D5FEC6F8378E3382D9F64EB4740CE67F64940E7F0E11D3033BE24CE2ADDA87FD0293A1DBCF4D56E2369C6EDBB8A595C8F4A3071F2867375E316
	C5758683EF9867CF72EA6F4BE89B0A017C05AE0C6B4783D335D3DFF14D9CE6E7E316F3FF6EE8560E551769F5A587780D43E85F1AD2B2EF3868E4E71E59F38ADBCB713CEE8770D900C201A2075933E5CC6EAE6364679B9EB1225C8260A54FB744436792155C3EF734E3FD026E93E53921AD3B319E6752FD22D6C81B5CA87F9323BA1E0BD8BB057CC019472EFDDD7C8D5DCF1A8BFCB1EE0CFD5E2529E2CF660EF8B6A9856432BDAC76A4DD6671EE5376A145F395749902569176769D167F5D896F67AAD4CC3C9CABFB
	960116F35CBEB4A2DABDADB660427C6EE6EFBDA6375D69360B1725B81F515403CCDC4F6021FC2FF23A5C767EFE2B7B444860C5FA2F02719D685261BBA9CDB9713C7EAA728C13FCDA4E976F47DDA5DAB6FA99A04D150E4A4FC31C35D90798AB4B5B68214FA960A9C5B9DBBAFF7F084D7BECB2E90F559EBC1B7C03CD5EE733C9FEAB4F7FCA0116FCB74F8FF1E865BBF83E39D42B7CG1E7F73C9E72FC9FEB04F7F0FC9E72BC9FEB84F5FD260FD761B644F63796E6DDA7AE3F97E2B131E8FA07989BCBFF7587B6CB649
	CF76E0FF1BFDD07BFA7DA45D1B4B92E13C91117735036AF1F859B5F99C6EBE24BDB63868F53F834A68666574ED579F07EF5039558C608D627CA1836AF163B13AC7B38F729708B896B4DF19EAACD8AF684F9712211C3BE1DE34191FD1FCE2C0FB9C7EB955ED98016FA3E85F6A96FDFF3651B5FE8370360D6058D8D2003195C7507E33BE2F4F99127DFA571130916F31EC174EF571A89DF3A300FFAE37BF35D05B57FC3AB6CFG3EA4EE7B5769F532E8B457D0BE0A58377623BF5D23F8063F62BAE99B4C377686DF3E
	2D1822EEE6C0191BD43EED773A0EB4D21F0200AFF414DF3B77EB376BCC3AFF9183FC711C3729C15D2EBBEE4836FFF5CA5BB77830BDEBCC1E07B2DD851B745BCA8DDD776601CC5998360B48A95B854EBDC97926B175FC54B24676BBE47D6BF55A458E9AC39770CF0CE13DE651F69A8E6928B10C552FCB35637A9ABBD38CFCCBB8EF25D19DD7F2179E6D38C7470EC7299D4671DCC365B8167363D27D187D066A6D86DE8B67FFA1DF5DBEDE27734CA0488F9D4738AEEB1AEA3C70D52FB1635E63C5EA01CE9F22B1DC88
	7C895C3EG23F68CC3589E75E5287F4B487B0CD78C6FCF17E338EF134EFC0C36A3931451434B59B9209FC3F6AFB190F803B93F31D99D43FDECDF8372E3AEE38C1F1A72DC78CA9FB1CC396CBDE675692C152E5338E4DE49B564DCC17B9E5C296FCF945DF3EF845E0EAB58167372B13663D7507E8F72276ADBAB857DB1F74E95EF7B9D355A75B1036E63C7827FBCEE7F537BF576E0587EBE70AD61368F51353871AA74092B08BDFF957D69390AE36E13743D434CB74F44D463162F3A893C6ABD6616D8556D21166E69
	8783DF58D5746946F56DF6FDBF3DCF908BFC891CB7763A3ADD97AF13ED5FFBE3AA5BD77930BDFB42FB4C957A745BCAFE9F3D1E01CC7984360B158726EA972B946D22EBC2BD665AA63C5BC5374ED867226DDA847E00892CD7839DAFA2A0BDF782E3F5D8E73CE07B648940174CF96F739AAF3A174B63451BBAF62C2763C559B518D7DF43F26EA8500FD998353187F8ED1C7FC52FE7CC5EE06BE9488F3B06F1BD6673DA1ABEC53D46DE730E6BA3BA63453F307388403F185BF721C0ED5FA83B4FF29D66375711A73CD9
	BB4E51F46CB3811F05733E516C35F715A9375FCFDA2672F32D8FBF032EFB7B79DFBE6A62AF540FD0108967364D5739C6AF22F59287FC0B2FE31DECB0CE5556092D38BF11F3C35D564BA17DF355FE62FF68DC87FFCB6D2C857E469BE867E62FF95CFB345E9C10BF4EF9529A34FDA9207338F0601B47F9BB3D66F18F2D105B7E5C866DFD05D8F6BF8B4AC83901B1F95BE77FCFD744C32B7EAA833C6B2F48471CEFAF6DFBF5A0539A00E3403385E8130BE36F94223FE181E867C705D3555DF2052DB1816A3A0B1FE427
	28531FE632FB08401F9C405F0BBC2AFF9F4CB6BA75FD3061D16D730AE323134FABCE0CEA1FD73C151E4143730A52794FD162DB3F5BEE6966FCB3B9F60EE37750B289F656EE91ED9C3F1F5AC570B6ABD10878ACEA5798453AA5EC3682BBA7E1DF9BA597B2F05966646F570A98256D5C6EF0C86FBA24BC76A10FD56471F81C5AE8F71995F6BF49B1E2377E733B3915C6E16A67F7D91F78615B32DC488724CC1DE72BF76F5ED3E95CDDDBA11D33CED8A94B1DDC6E3FDC63EAD9AEFA5327B96F4D4AD8770E3F4FE2B37D
	3D2419CA5FEF4F164BE9E8724787467BFA137F71FDF42D2C63BF3716686B58873E6E292EC05BE25649F2CB5C7E48C9F3834F7462716AFAB99E6BB648BA47C77D57D9B366FFBC06F2E59D97477C0F47BD9BE5B903683FEDA7456945E3DD3E9C0F3D85324EF9657E6B9C2B70BF9E5D05320E31737E77232BC5325C61FD7E4B75144AF23B8E7B5B7F987F5543530B658D239C4B591BE43D0D1B7D37772D4D321C6950279FAFE69F723FEEB6ED116DEF5DAA1751DE6C4B7E3D6FC1E3284131A238589FFD136DCDBA4474
	76EF13ED78DC39EC43E78B7C310149FD33C216CBA975DFAEF63BAC17DF60FFDFFDED07ECF36ECEC5FB4B773F0C772AE4399F16785F77A6CA7D2F5F1EDD320E77737DEF13B72AE5397F1CC6DB9EF8D7162B9F7037ADB3593B6A6418FE7BBD391C0992FF7433E7B6CF1462EFDF145D12EB6839855F1370D2B1E9A0DA6F9C6E9F31D70D08F6C7FDFD17DDF4D81B25DB0B523BA36E236B87B2DF8C3E855F6DB01F6A0801F482D04AAD78DE611F997119751CDBF38D9D377277CAEC42B2E65C0AE534ECA23C73A09D8714
	F8AB6EE744554BFE4F5862436F1A1A3D15463ABA0C7B6B7BE539B9C67F65BA8F4AF28F5BBF7D5873E73B3F632756F820BFC60C9E92F81DAC3211FCB249B1FC86E37CA79AE37ABE8F0EAD646F0F8863584F9DA83B10E3A17C3D9A8DB390DBC6E509ADA2475879C302AD64D88F5751F09BE20FEEC7CC645856B244A2B8F61C7E6E9619CFA7G269F53E78E7A5F5F7FD53177513A5D68235F5411FE33E7EF8513FBA1D3169B9D70DF6E00E20EDCFAE5FA7DFDC6165C5F3F36CAAE670EE67F75BF2518EB7F4157587B6E
	BE55983A37407F183E2C18CFE7AB663A3F75F53D607A185C7B0A396E5AD27F653E16A34BDD59BF3D394CCF767B6F63D39BE49FF7644BBAFF6637CE7D76DB5A603F9DA78AE4BB069573463BFCDE1BEB2418690F9F970B65F2EFAB114BDD6873FADD232A0BF0453C325DD79D7A3087655FB67A9F13A423AC77F0297FFDE37DBB325C3F657BAF67AC1365DEEC1CDE1F7E02E2BE7938E2BEF9E709BF7A7563752DE944EB61B6D9EE65004F3943FB4A394B1B0A3967DB3E574AAA3933BBE4392F795DDF186C15CAB9DE33
	9473481C1D7E6B0FD64CA393727C9F83F7657B9F5397F749F6AE5BAD6BFBF43F7FE3D9459ED96ED7457E4B5DD6AB4B4D39BA3DB1B0692A7FBE066F15FDB45449BAFB2EFF7AB170316B7E5B316DBD590EE30A79606F9B7C09197E98B838DFAEB728C1AEB7562F6BA6137B6E81D96E3BFEDD4774E3A2CE23CFBF2B1827DAFD2E8B55FD630DC3325C8FFD2E8B55F29F9E136536B5CC2FCFDFFBDF0EF3D807DC4E733E57DFAA7DA9A7E4395B1ABFFD7BFB2E597FD8171AE47BBF7CC0AEE3364F78555532F5353E8D2F79
	35EE55EF3F57CEA9625AA9179B6A17DDCCEE57D9D96E37FF07394DEE3F66B67A72AFB5CCEF3F69D4379C0311F30A3A7159A7B0860C776582FFF5B27E778ABFDD3D05FCA85B7C030FE41BBB7D3219BD875CD5BA55FB590AEE57FA574B45A9653CFFB70549BDB8251CB731F7C95551BD003A5B3D5FF357C471565B3D5FF377D4A96E9918A0AF6AF6FCE67B1746696A175ED172B74A95EC7A5B7CFD026EE3645D616DEFB4454B6E707637FD937ADB8DF941F7203FAF583C5F2D128CF9D901523BEA82351F9D2F853C4D
	AB2F87522EC02D3670BA77F106149F22600B006F511AF27F25FABFD19C70AC86CA11F833BF2B773E20B84724F7A781EF1D445F21A1C768826022D7DEA024C3BF2BE55BAC5ECEA3257C798A3E0570BDD1D3EE65245FF094BE17EB48799C63AD17BE9BBE2716B5C15A62050DC3FAA6D058673C1F5DCF1F746E28A860D9A071AD12BE133C4AB35C19EB483BD30DD5C23A91286BCEEF9DE6DEB7B6A9EFC24193845F675C29657FE35BD1EE2E149F23600B076FCBB465F614A95BC2664CDCC391D075CC465BBAD32FAD1C
	9AC639EE094721608D5010E33F2D913D1EEC0C58079C76A1EB8B7BF5DCDEA65D96626FBA133F47CEFA375A5F13180E5F7FBF5071AF1BE41FFE2278FEF253BFDE376D9F2AC3FA9F81FD3EA3986ABEE2A6FF4F8B4522A19D4B316FD3EC912417F0AC1A3E97A073733906324F73772830F39510EE63588F787356BD9CFB047E5EF1842467F3ECB5FD1E053C63E4A1477EDA0876A5F22C2D884B936EC2EC181E15B0C15A4631A585E84B8447FEF18D4B8B62D871F574F78E472EDFC79D119C7B0B83E5053B79337303A8
	1B4331590398ABA3476EEA45D855F2ECAD372F0DE377B771D8F10CBD6BCEE2954131A8763C972497F1ECFEBE5A174431B57C5D9206A07EEE1AD20CD59747583B0F092C0DE36385685B84471EAFC05F82B996C14B8B05F4B44784A37A9B4731D55C5F459CDB530C7625F06C3F73515F0EFB903B485E078169G0EEDB1224D419CE3E77B42A1BD17E33FB2224D736572725166059C7BE6BE5A1C48315325E8337085442E72F7D064F06C05D2345942B1760E8C354DAC266340934C79EEADC5BF42B9764B6D28E39E47
	B237E03DE5FD91319FEF47BEE364D8FD9916D74B315B4A303CB60EBD329D4B8B61D8F3997A9B41318343D8DEB44782A9968769840E3DBC0CBA12B8E69FC67B9A03F99B6F43723AB8763BBE143585633932823B769934BD6C19B4600B613C83F67599345F741031DA5ADB30EB1F3FDCCC4BC906B28C77E2B94FB56A1F99CB2263DDB570B6F07E41CD6A33F41F21631F8D7245FB713C58AF26BC1728FCF6F88E4891A21B18E40EBA973E3F3EF46952D55C1FF9C55A6745626838B89F78E36F4573EB6F52B1B5855219
	77A136358863D7FB9F5AF83EE82AB3ED3EEC3CG659C9658EF0BB19B83F54E3C0631330640BF4E6DA926E37C9CC8C7F26C4DEBE8E37CFDF8DFB27593D2274C5EFB2F7B32F7799476E65D1FEBA07611F723B3FD250328AF6FFE54D7F6DE60F57FB44DEF05BC537DE86393F4CC1F00F4A0476AE97F0E02F4747D985B47FCBE7330E28ADB13201C17247AE7BA5C6CDDEA00E70670F36DBE1E55E06F922A855E4690347365FC74579102F6EE75794C4B4AA96C8C01F276CBED006958C46BFA8E6011DC6F1982543BA884
	63FC74029C67B45A96B29F00317581746D5F7DF8EF7DEF78FB6B9B9FC0DD952C2DC1FA1CE37B287EB9100EFC007B5DBC1DF3275EFE47C3B9DFD3554FEA2AA39170E46E43655275AA9F1AF0D413E43E486DAF7B925AFA420831B2FD091F8F77BAE7FE49AC476EAD76DCAF708672B26E4C47F223B876AC4562A11D48316BD4FF5E03B017FB906372851F4F192C18A2AEDDD04EE724B34A523BA128FD97GF7BC087E5C6D630CF5B80DE388704EF9906D7CC6A946A4165B79076DD335DB251DA98F2A6D4C8E4DB56C95
	146FAC58CD2F33C5001707225ED76835328B5297B856DB06364C8CC5DBC24B7CB99B2CBB56074A63A853711FD46FFC40E3395E812AB785521933906B9BC6DB6AE6E1EC3FBC2CEEAB1F3FC85B8A3553601E2A4D277B3053B20B6D192C60F6FE016AF781BE41ED0A6EC31B42E7E1FC5E681BAABE69027C6CF85CAC355E45103ED37A2E3F1F59EEB78A7E6EB3C7764AF20FB77A5A8B2C2ED16E0D7F52A24B3D3F49FF39DD7D325C37DABE7DFB18AF59646F1F374BE5BFB48D1B16DC12657ED46863FE8AB9362338F7F7
	20487FB8EFF448F6568F4A7AE6783A27DE2BBE2BF61FD3167B4935695D03DBB70DFBDF5FF749FA768D7AAF37C8710E6D4F347A9F7F25EED9EE194F7DE835DC4008ACF7E753746E8FBDBCAA5747CF4664F2DAFD5E47D06B7F3D621DD65F77F57F2EC6FDF650B00DF3AFD9D7E4BBF7A95EBF729DDF7AC83B2911758DCEC35F2989D947D7FC462236C6F9D67D4FFE3D3BDC3AE722F8FEBF4DE7FD572A627D4C8DD9AE5D6F7BF1D29FD70C99C586391C335370716BFE79A85D9F1D46FD55C3998AFBFC5E1FD45BB3BB5F
	7F18DFDCA66BB866174F52D9B64519B467B44FD53C30C20E39C1F1C66D37FE79A85D074F126546FC5D6B766AE38B367B93FF7D7BE547D649368F2E16EDB83D5D7F71BAE80DAC372B4C7F6B4A15B27F5B4EF733E5BB1FD51C0B7B45E67F6D5C23B85F36FBF8FA5715EB437E5BFADAF13EEDDC71FC464CBEDF6D613D3D4A7B264F75FD3AFAFD10BE5F3111663FD07CB2FC09F8D948703805F513F5B75D757CF39167DBF3520434F6E1190DBEEF55AEE40C11873746619A197A985097C4E1B97981D9E37B901432CA95
	359FFFE56F7F447C660CA7DDD856AE6413CD12CE2B1B7E260255C2FE3B7B0C55CD749C91D6381CF6727336D72C6D0241C3BFB2BC62E50735C34869BBE59D9E31FAC42B2589FFC540A38A9BBA0826DD6450742EB63347A612275C76F78806A17320D5945631EC07F928FF977B69067D44E2A1352911060376AA30F7BD351714D245CBD97F03B5DBB69DCB181BAE249D915EF6B84D16A366DE5169EE97D608B63755E3F3BAAC632EC32C20CC7A1EBD7ACCB794D7485DA74ED61105AAB7FAE0FC564CD50BD79DC9034A
	F78B3BA8A7191BD7F18E72AE9FB728323A5B014C20320C675DD2A2EE7D59510DBDE9C22A646430F0DD4898F709ACE020FC8DAD1238DCF5842C967F574BBF1D7D6B0624C490B9A2E40C12DF38G4559B297FBDB506D9177962F8C0E3F135865A261711012D7084232BE73205DF1993E3452360F788A51ED9E7274B95D0320546865B1E6F1432B3E78536AFB9F7DBF9FD243E5D1D1A8E5D584223B7A2D4E41DDCDFDFD76A1ABAFG6A8B0AAF6645931EAAAF1EF56377ECB8762B259721FD358A69035555747FEE7AFF
	8F793F1BA23BA932FB8FD4DA1260734FBBFFFC1C783CEE1CC717D852CE9FA00C9F2D29CFFF716174B441G1D03BDD0890D17BC95890D574D7ACA3A68F451F687419548E6A699C9D3C5A1DB7AE5F02374434E7522300A7E4A37117D4CB724F35A1CE3C651E9A43F2EEC145881AE243F16ECECB13B4C3DF67132117FA037F18B642E23BD716408488BB60AC26A9652C62C3DD522301E67632FBD930635D27F5591DA0759CA191554AE7A334F20F7A3330A7F0833117D88F8BDEDB2026437CBA315BE29CF92F479644E
	C56015B4F395E1A7DF32F94BA42975B4F3837D1F773755732EF1AACDCE7FAE136A0BDC8CD66BF8C12E9A8D9AA9A2EF104AA0A72E5F1ED24237FC060E44BFC5CC1B6418E6CAB1A5972765B73B5D6D632A3AA0F6EFD459CDD2DF66BCE4C302549739E11B2E41B3B9252E6FF4C9BE1468732B3D7CD3547E071323C8667A4BF43C0068251E54C85DD4BED9E41FAAA4FF4839D03956496A6EFB9A291B4A0B4149B5C3EF1C68F8C15ADE8717A0D733E552E73A860FBAF5D379FDF9DC658521195C6F1B4A52G59528C0525
	6A2B4121C9A34864BAB924137A27E8271F1723C0B61C311DE668F8C17246B4D2B715CF77CF6EFB24E6166BF8717FCD5FFBD86D373AC55FD416FE5D1F3EA75709FE5F532A937277CF51CE1F18BC9FA6DEAC3B596D7E3749F69F971435C7E6E2F3A775A8B2F7CB53603929FC7B69E45FB2FC78A6C8FC648994031A072CC2699BFF0D78A2E5D848ADAB9F348FD5D548F97872E348DBA33DE45848768D1488FBC9B1C1480B04493215092B97007D9A291BAA383F16031BAE4827DED2F53CA01DE173A409B4158461A93F
	79BC7D9F75G473D7D672A2FD7557535CC7A74D5DFA5AA89C219AA8932EBDC2E123FDBA3F5D3C5A1C50E82598C47D6EB18520B1B572754E532CFE48B0454AC39A1112963053AE6C99430E6550B69F2D5EA7324382569C85CD43149D1CF23303E8555707E6F1CA7D54AAF148AE13F59DCF123CE0AE24FBD61C272ED0752B2846D5FEC8E7D9EFBAEA072FB72EFB6335F065AC0FF5BB591704CA7707DF456AD6481E23D5FE26E9CB4BB9C2259B150B4E4B9E69EB5B7DF962D72EF8197ECA565FB10C74AE4F91B36923B
	AFA9E47EAFD0CB8788C9AF9E9E5BB1GG002EGGD0CB818294G94G88G88G44F9C7B1C9AF9E9E5BB1GG002EGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG95B2GGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private String getChangeCondition( String change )
{

	if( change.equalsIgnoreCase("After a Duration") )
	{
		return LMProgramDirectGear.CHANGE_DURATION;
	}
	else if( change.equalsIgnoreCase("Priority Change") )
	{
		return LMProgramDirectGear.CHANGE_PRIORITY;
	}
	else if( change.equalsIgnoreCase("Above Trigger") )
	{
		return LMProgramDirectGear.CHANGE_TRIGGER_OFFSET;
	}	
	else
		return LMProgramDirectGear.CHANGE_NONE;

}
/**
 * Return the JCheckBoxRampIn property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRampIn() {
	if (ivjJCheckBoxRampIn == null) {
		try {
			ivjJCheckBoxRampIn = new javax.swing.JCheckBox();
			ivjJCheckBoxRampIn.setName("JCheckBoxRampIn");
			ivjJCheckBoxRampIn.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRampIn.setText("Ramp In");
			ivjJCheckBoxRampIn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRampIn;
}
/**
 * Return the JComboBoxGroupSelection property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGroupSelection() {
	if (ivjJComboBoxGroupSelection == null) {
		try {
			ivjJComboBoxGroupSelection = new javax.swing.JComboBox();
			ivjJComboBoxGroupSelection.setName("JComboBoxGroupSelection");
			ivjJComboBoxGroupSelection.setPreferredSize(new java.awt.Dimension(184, 23));
			ivjJComboBoxGroupSelection.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxGroupSelection.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxGroupSelection.setMinimumSize(new java.awt.Dimension(184, 23));
			// user code begin {1}
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LAST_CONTROLLED ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_ALWAYS_FIRST_GROUP ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LEAST_CONTROL_TIME ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGroupSelection;
}
/**
 * Return the JComboBoxHowToStop property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHowToStop() {
	if (ivjJComboBoxHowToStop == null) {
		try {
			ivjJComboBoxHowToStop = new javax.swing.JComboBox();
			ivjJComboBoxHowToStop.setName("JComboBoxHowToStop");
			ivjJComboBoxHowToStop.setPreferredSize(new java.awt.Dimension(159, 23));
			ivjJComboBoxHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxHowToStop.setMinimumSize(new java.awt.Dimension(159, 23));
			ivjJComboBoxHowToStop.setMaximumSize(new java.awt.Dimension(159, 23));
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			ivjJComboBoxHowToStop.addItem( "Ramp Out / Time In");
			ivjJComboBoxHowToStop.addItem( "Ramp Out / Restore");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHowToStop;
}
/**
 * Return the JComboBoxStopOrder property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxStopOrder() {
	if (ivjJComboBoxStopOrder == null) {
		try {
			ivjJComboBoxStopOrder = new javax.swing.JComboBox();
			ivjJComboBoxStopOrder.setName("JComboBoxStopOrder");
			ivjJComboBoxStopOrder.setPreferredSize(new java.awt.Dimension(184, 23));
			ivjJComboBoxStopOrder.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxStopOrder.setMinimumSize(new java.awt.Dimension(184, 23));
			// user code begin {1}
			ivjJComboBoxStopOrder.addItem("Random");
			ivjJComboBoxStopOrder.addItem("First In First Out");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxStopOrder;
}
/**
 * Return the JComboBoxWhenChange property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxWhenChange() {
	if (ivjJComboBoxWhenChange == null) {
		try {
			ivjJComboBoxWhenChange = new javax.swing.JComboBox();
			ivjJComboBoxWhenChange.setName("JComboBoxWhenChange");
			ivjJComboBoxWhenChange.setPreferredSize(new java.awt.Dimension(195, 23));
			ivjJComboBoxWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxWhenChange.addItem("Manually Only");
			ivjJComboBoxWhenChange.addItem("After a Duration");
			ivjJComboBoxWhenChange.addItem("Priority Change");
			ivjJComboBoxWhenChange.addItem("Above Trigger");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxWhenChange;
}
/**
 * Return the JCSpinFieldChangeDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeDuration() {
	if (ivjJCSpinFieldChangeDuration == null) {
		try {
			ivjJCSpinFieldChangeDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeDuration.setName("JCSpinFieldChangeDuration");
			ivjJCSpinFieldChangeDuration.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeDuration.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeDuration.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(3)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeDuration;
}
/**
 * Return the JCSpinFieldChangePriority property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangePriority() {
	if (ivjJCSpinFieldChangePriority == null) {
		try {
			ivjJCSpinFieldChangePriority = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangePriority.setName("JCSpinFieldChangePriority");
			ivjJCSpinFieldChangePriority.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJCSpinFieldChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangePriority.setMaximumSize(new java.awt.Dimension(40, 30));
			// user code begin {1}
			ivjJCSpinFieldChangePriority.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(9999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangePriority;
}
/**
 * Return the JCSpinFieldChangeTriggerNumber property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeTriggerNumber() {
	if (ivjJCSpinFieldChangeTriggerNumber == null) {
		try {
			ivjJCSpinFieldChangeTriggerNumber = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeTriggerNumber.setName("JCSpinFieldChangeTriggerNumber");
			ivjJCSpinFieldChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeTriggerNumber.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(1), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(1)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeTriggerNumber;
}
/**
 * Return the JCSpinFieldControlPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldControlPercent() {
	if (ivjJCSpinFieldControlPercent == null) {
		try {
			ivjJCSpinFieldControlPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldControlPercent.setName("JCSpinFieldControlPercent");
			ivjJCSpinFieldControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setMaximumSize(new java.awt.Dimension(60, 20));
			ivjJCSpinFieldControlPercent.setPreferredSize(new java.awt.Dimension(60, 20));
			ivjJCSpinFieldControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setMinimumSize(new java.awt.Dimension(60, 20));
			// user code begin {1}
			ivjJCSpinFieldControlPercent.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(50)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldControlPercent;
}
/**
 * Return the JCSpinFieldCyclePeriod property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldCyclePeriod() {
	if (ivjJCSpinFieldCyclePeriod == null) {
		try {
			ivjJCSpinFieldCyclePeriod = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldCyclePeriod.setName("JCSpinFieldCyclePeriod");
			ivjJCSpinFieldCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setMaximumSize(new java.awt.Dimension(60, 20));
			ivjJCSpinFieldCyclePeriod.setPreferredSize(new java.awt.Dimension(60, 20));
			ivjJCSpinFieldCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setMinimumSize(new java.awt.Dimension(60, 20));
			// user code begin {1}
			ivjJCSpinFieldCyclePeriod.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(60), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(30)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldCyclePeriod;
}
/**
 * Return the JCSpinFieldPercentReduction property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldPercentReduction() {
	if (ivjJCSpinFieldPercentReduction == null) {
		try {
			ivjJCSpinFieldPercentReduction = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldPercentReduction.setName("JCSpinFieldPercentReduction");
			ivjJCSpinFieldPercentReduction.setPreferredSize(new java.awt.Dimension(60, 20));
			ivjJCSpinFieldPercentReduction.setMaximumSize(new java.awt.Dimension(60, 20));
			ivjJCSpinFieldPercentReduction.setMinimumSize(new java.awt.Dimension(60, 20));
			// user code begin {1}
			ivjJCSpinFieldPercentReduction.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(100)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			ivjJCSpinFieldPercentReduction.setValue( new Integer(100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldPercentReduction;
}
/**
 * Return the JCSpinFieldRampInPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampInPercent() {
	if (ivjJCSpinFieldRampInPercent == null) {
		try {
			ivjJCSpinFieldRampInPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampInPercent.setName("JCSpinFieldRampInPercent");
			ivjJCSpinFieldRampInPercent.setPreferredSize(new java.awt.Dimension(76, 20));
			ivjJCSpinFieldRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampInPercent.setMaximumSize(new java.awt.Dimension(76, 20));
			ivjJCSpinFieldRampInPercent.setMinimumSize(new java.awt.Dimension(76, 20));
			// user code begin {1}
			ivjJCSpinFieldRampInPercent.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(100), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(100)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampInPercent;
}
/**
 * Return the JCSpinFieldRampOutPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldRampOutPercent() {
	if (ivjJCSpinFieldRampOutPercent == null) {
		try {
			ivjJCSpinFieldRampOutPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldRampOutPercent.setName("JCSpinFieldRampOutPercent");
			ivjJCSpinFieldRampOutPercent.setPreferredSize(new java.awt.Dimension(76, 20));
			ivjJCSpinFieldRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldRampOutPercent.setMaximumSize(new java.awt.Dimension(76, 20));
			ivjJCSpinFieldRampOutPercent.setMinimumSize(new java.awt.Dimension(76, 20));
			// user code begin {1}
			ivjJCSpinFieldRampOutPercent.setDataProperties(
									new com.klg.jclass.field.DataProperties(
										new com.klg.jclass.field.validate.JCIntegerValidator(
											null, new Integer(0), new Integer(100), null, true, 
											null, new Integer(1), "#,##0.###;-#,##0.###", false, 
											false, false, null, new Integer(100)), 
											new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
											new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
											new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldRampOutPercent;
}
/**
 * Return the JLabelChangeDuration property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeDuration() {
	if (ivjJLabelChangeDuration == null) {
		try {
			ivjJLabelChangeDuration = new javax.swing.JLabel();
			ivjJLabelChangeDuration.setName("JLabelChangeDuration");
			ivjJLabelChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeDuration.setText("Change Duration:");
			ivjJLabelChangeDuration.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeDuration.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeDuration;
}
/**
 * Return the JLabelChangePriority property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangePriority() {
	if (ivjJLabelChangePriority == null) {
		try {
			ivjJLabelChangePriority = new javax.swing.JLabel();
			ivjJLabelChangePriority.setName("JLabelChangePriority");
			ivjJLabelChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangePriority.setText("Change Priority:");
			ivjJLabelChangePriority.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangePriority.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangePriority;
}
/**
 * Return the JLabelChangeTriggerNumber property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerNumber() {
	if (ivjJLabelChangeTriggerNumber == null) {
		try {
			ivjJLabelChangeTriggerNumber = new javax.swing.JLabel();
			ivjJLabelChangeTriggerNumber.setName("JLabelChangeTriggerNumber");
			ivjJLabelChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerNumber.setText("Trigger Number:");
			ivjJLabelChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerNumber.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerNumber;
}
/**
 * Return the JLabelChangeTriggerOffset property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerOffset() {
	if (ivjJLabelChangeTriggerOffset == null) {
		try {
			ivjJLabelChangeTriggerOffset = new javax.swing.JLabel();
			ivjJLabelChangeTriggerOffset.setName("JLabelChangeTriggerOffset");
			ivjJLabelChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerOffset.setText("Trigger Offset:");
			ivjJLabelChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerOffset.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerOffset;
}
/**
 * Return the JLabelControlPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlPercent() {
	if (ivjJLabelControlPercent == null) {
		try {
			ivjJLabelControlPercent = new javax.swing.JLabel();
			ivjJLabelControlPercent.setName("JLabelControlPercent");
			ivjJLabelControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelControlPercent.setText("Control Percent:");
			ivjJLabelControlPercent.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelControlPercent.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlPercent;
}
/**
 * Return the JLabelCyclePeriod property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCyclePeriod() {
	if (ivjJLabelCyclePeriod == null) {
		try {
			ivjJLabelCyclePeriod = new javax.swing.JLabel();
			ivjJLabelCyclePeriod.setName("JLabelCyclePeriod");
			ivjJLabelCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelCyclePeriod.setText("Cycle Period:");
			ivjJLabelCyclePeriod.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelCyclePeriod.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCyclePeriod;
}
/**
 * Return the JLabelGroupSelection property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGroupSelection() {
	if (ivjJLabelGroupSelection == null) {
		try {
			ivjJLabelGroupSelection = new javax.swing.JLabel();
			ivjJLabelGroupSelection.setName("JLabelGroupSelection");
			ivjJLabelGroupSelection.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelGroupSelection.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelGroupSelection.setText("Group Selection Method:");
			ivjJLabelGroupSelection.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGroupSelection;
}
/**
 * Return the JLabelHowToStop property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHowToStop() {
	if (ivjJLabelHowToStop == null) {
		try {
			ivjJLabelHowToStop = new javax.swing.JLabel();
			ivjJLabelHowToStop.setName("JLabelHowToStop");
			ivjJLabelHowToStop.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelHowToStop.setText("How to Stop Control:");
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHowToStop;
}
/**
 * Return the JLabelMinutesChDur property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutesChDur() {
	if (ivjJLabelMinutesChDur == null) {
		try {
			ivjJLabelMinutesChDur = new javax.swing.JLabel();
			ivjJLabelMinutesChDur.setName("JLabelMinutesChDur");
			ivjJLabelMinutesChDur.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutesChDur.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelMinutesChDur.setText("(min.)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutesChDur;
}
/**
 * Return the JLabelPercentReduction property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPercentReduction() {
	if (ivjJLabelPercentReduction == null) {
		try {
			ivjJLabelPercentReduction = new javax.swing.JLabel();
			ivjJLabelPercentReduction.setName("JLabelPercentReduction");
			ivjJLabelPercentReduction.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPercentReduction.setText("Group Capacity Reduction %:");
			ivjJLabelPercentReduction.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPercentReduction.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPercentReduction;
}
/**
 * Return the JLabelRampInInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInInterval() {
	if (ivjJLabelRampInInterval == null) {
		try {
			ivjJLabelRampInInterval = new javax.swing.JLabel();
			ivjJLabelRampInInterval.setName("JLabelRampInInterval");
			ivjJLabelRampInInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInInterval.setText("Ramp In Interval: ");
			ivjJLabelRampInInterval.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInInterval.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInInterval;
}
/**
 * Return the JLabelRampInPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercent() {
	if (ivjJLabelRampInPercent == null) {
		try {
			ivjJLabelRampInPercent = new javax.swing.JLabel();
			ivjJLabelRampInPercent.setName("JLabelRampInPercent");
			ivjJLabelRampInPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercent.setText("Ramp In Percent: ");
			ivjJLabelRampInPercent.setMaximumSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setPreferredSize(new java.awt.Dimension(119, 14));
			ivjJLabelRampInPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercent.setMinimumSize(new java.awt.Dimension(119, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercent;
}
/**
 * Return the JLabelRampInPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInPercentSign() {
	if (ivjJLabelRampInPercentSign == null) {
		try {
			ivjJLabelRampInPercentSign = new javax.swing.JLabel();
			ivjJLabelRampInPercentSign.setName("JLabelRampInPercentSign");
			ivjJLabelRampInPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInPercentSign;
}
/**
 * Return the JLabelRampInSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampInSec() {
	if (ivjJLabelRampInSec == null) {
		try {
			ivjJLabelRampInSec = new javax.swing.JLabel();
			ivjJLabelRampInSec.setName("JLabelRampInSec");
			ivjJLabelRampInSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampInSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampInSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampInSec;
}
/**
 * Return the JLabelRampOutInterval property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutInterval() {
	if (ivjJLabelRampOutInterval == null) {
		try {
			ivjJLabelRampOutInterval = new javax.swing.JLabel();
			ivjJLabelRampOutInterval.setName("JLabelRampOutInterval");
			ivjJLabelRampOutInterval.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutInterval.setText("Ramp Out Interval: ");
			ivjJLabelRampOutInterval.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutInterval.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutInterval.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutInterval;
}
/**
 * Return the JLabelRampOutPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercent() {
	if (ivjJLabelRampOutPercent == null) {
		try {
			ivjJLabelRampOutPercent = new javax.swing.JLabel();
			ivjJLabelRampOutPercent.setName("JLabelRampOutPercent");
			ivjJLabelRampOutPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercent.setText("Ramp Out Percent: ");
			ivjJLabelRampOutPercent.setMaximumSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setPreferredSize(new java.awt.Dimension(182, 125));
			ivjJLabelRampOutPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercent.setMinimumSize(new java.awt.Dimension(182, 125));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercent;
}
/**
 * Return the JLabelRampOutPercentSign property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutPercentSign() {
	if (ivjJLabelRampOutPercentSign == null) {
		try {
			ivjJLabelRampOutPercentSign = new javax.swing.JLabel();
			ivjJLabelRampOutPercentSign.setName("JLabelRampOutPercentSign");
			ivjJLabelRampOutPercentSign.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutPercentSign.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutPercentSign.setText("%");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutPercentSign;
}
/**
 * Return the JLabelRampOutSec property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRampOutSec() {
	if (ivjJLabelRampOutSec == null) {
		try {
			ivjJLabelRampOutSec = new javax.swing.JLabel();
			ivjJLabelRampOutSec.setName("JLabelRampOutSec");
			ivjJLabelRampOutSec.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRampOutSec.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRampOutSec.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRampOutSec;
}
/**
 * Return the JLabelStopOrder property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStopOrder() {
	if (ivjJLabelStopOrder == null) {
		try {
			ivjJLabelStopOrder = new javax.swing.JLabel();
			ivjJLabelStopOrder.setName("JLabelStopOrder");
			ivjJLabelStopOrder.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelStopOrder.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelStopOrder.setText("Stop Order:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStopOrder;
}
/**
 * Return the JLabelWhenChange property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelWhenChange() {
	if (ivjJLabelWhenChange == null) {
		try {
			ivjJLabelWhenChange = new javax.swing.JLabel();
			ivjJLabelWhenChange.setName("JLabelWhenChange");
			ivjJLabelWhenChange.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelWhenChange.setText("When to Change:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelWhenChange;
}
/**
 * Return the JPanelChangeMethod property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelChangeMethod() {
	if (ivjJPanelChangeMethod == null) {
		try {
			ivjJPanelChangeMethod = new javax.swing.JPanel();
			ivjJPanelChangeMethod.setName("JPanelChangeMethod");
			ivjJPanelChangeMethod.setLayout(new java.awt.GridBagLayout());
			ivjJPanelChangeMethod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanelChangeMethod.setMaximumSize(new java.awt.Dimension(335, 88));
			ivjJPanelChangeMethod.setPreferredSize(new java.awt.Dimension(335, 88));
			ivjJPanelChangeMethod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJPanelChangeMethod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelChangeDuration = new java.awt.GridBagConstraints();
			constraintsJLabelChangeDuration.gridx = 1; constraintsJLabelChangeDuration.gridy = 2;
			constraintsJLabelChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeDuration.ipadx = -5;
			constraintsJLabelChangeDuration.ipady = 6;
			constraintsJLabelChangeDuration.insets = new java.awt.Insets(1, 5, 3, 5);
			getJPanelChangeMethod().add(getJLabelChangeDuration(), constraintsJLabelChangeDuration);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeDuration.gridx = 2; constraintsJCSpinFieldChangeDuration.gridy = 2;
			constraintsJCSpinFieldChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeDuration.ipadx = 34;
			constraintsJCSpinFieldChangeDuration.ipady = 19;
			constraintsJCSpinFieldChangeDuration.insets = new java.awt.Insets(1, 5, 3, 2);
			getJPanelChangeMethod().add(getJCSpinFieldChangeDuration(), constraintsJCSpinFieldChangeDuration);

			java.awt.GridBagConstraints constraintsJLabelMinutesChDur = new java.awt.GridBagConstraints();
			constraintsJLabelMinutesChDur.gridx = 3; constraintsJLabelMinutesChDur.gridy = 2;
			constraintsJLabelMinutesChDur.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutesChDur.ipadx = 5;
			constraintsJLabelMinutesChDur.ipady = -2;
			constraintsJLabelMinutesChDur.insets = new java.awt.Insets(5, 3, 5, 5);
			getJPanelChangeMethod().add(getJLabelMinutesChDur(), constraintsJLabelMinutesChDur);

			java.awt.GridBagConstraints constraintsJLabelChangePriority = new java.awt.GridBagConstraints();
			constraintsJLabelChangePriority.gridx = 4; constraintsJLabelChangePriority.gridy = 2;
			constraintsJLabelChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangePriority.ipadx = -13;
			constraintsJLabelChangePriority.ipady = 6;
			constraintsJLabelChangePriority.insets = new java.awt.Insets(1, 6, 3, 3);
			getJPanelChangeMethod().add(getJLabelChangePriority(), constraintsJLabelChangePriority);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangePriority = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangePriority.gridx = 5; constraintsJCSpinFieldChangePriority.gridy = 2;
			constraintsJCSpinFieldChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangePriority.ipadx = 29;
			constraintsJCSpinFieldChangePriority.ipady = 19;
			constraintsJCSpinFieldChangePriority.insets = new java.awt.Insets(1, 3, 3, 8);
			getJPanelChangeMethod().add(getJCSpinFieldChangePriority(), constraintsJCSpinFieldChangePriority);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerNumber.gridx = 1; constraintsJLabelChangeTriggerNumber.gridy = 3;
			constraintsJLabelChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerNumber.ipadx = -45;
			constraintsJLabelChangeTriggerNumber.ipady = 6;
			constraintsJLabelChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 16, 5);
			getJPanelChangeMethod().add(getJLabelChangeTriggerNumber(), constraintsJLabelChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerOffset.gridx = 4; constraintsJLabelChangeTriggerOffset.gridy = 3;
			constraintsJLabelChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerOffset.ipadx = -63;
			constraintsJLabelChangeTriggerOffset.insets = new java.awt.Insets(8, 6, 18, 13);
			getJPanelChangeMethod().add(getJLabelChangeTriggerOffset(), constraintsJLabelChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJTextFieldChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJTextFieldChangeTriggerOffset.gridx = 5; constraintsJTextFieldChangeTriggerOffset.gridy = 3;
			constraintsJTextFieldChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldChangeTriggerOffset.weightx = 1.0;
			constraintsJTextFieldChangeTriggerOffset.ipadx = 26;
			constraintsJTextFieldChangeTriggerOffset.insets = new java.awt.Insets(4, 3, 16, 8);
			getJPanelChangeMethod().add(getJTextFieldChangeTriggerOffset(), constraintsJTextFieldChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeTriggerNumber.gridx = 2; constraintsJCSpinFieldChangeTriggerNumber.gridy = 3;
			constraintsJCSpinFieldChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeTriggerNumber.ipadx = 34;
			constraintsJCSpinFieldChangeTriggerNumber.ipady = 19;
			constraintsJCSpinFieldChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 16, 2);
			getJPanelChangeMethod().add(getJCSpinFieldChangeTriggerNumber(), constraintsJCSpinFieldChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelWhenChange = new java.awt.GridBagConstraints();
			constraintsJLabelWhenChange.gridx = 1; constraintsJLabelWhenChange.gridy = 1;
			constraintsJLabelWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelWhenChange.ipadx = 3;
			constraintsJLabelWhenChange.ipady = 4;
			constraintsJLabelWhenChange.insets = new java.awt.Insets(0, 5, 4, 5);
			getJPanelChangeMethod().add(getJLabelWhenChange(), constraintsJLabelWhenChange);

			java.awt.GridBagConstraints constraintsJComboBoxWhenChange = new java.awt.GridBagConstraints();
			constraintsJComboBoxWhenChange.gridx = 2; constraintsJComboBoxWhenChange.gridy = 1;
			constraintsJComboBoxWhenChange.gridwidth = 4;
			constraintsJComboBoxWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxWhenChange.weightx = 1.0;
			constraintsJComboBoxWhenChange.ipadx = 69;
			constraintsJComboBoxWhenChange.insets = new java.awt.Insets(0, 5, 1, 27);
			getJPanelChangeMethod().add(getJComboBoxWhenChange(), constraintsJComboBoxWhenChange);
			// user code begin {1}
			jComboBoxWhenChange_ActionPerformed(null);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelChangeMethod;
}
/**
 * Return the JTextFieldChangeTriggerOffset property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldChangeTriggerOffset() {
	if (ivjJTextFieldChangeTriggerOffset == null) {
		try {
			ivjJTextFieldChangeTriggerOffset = new javax.swing.JTextField();
			ivjJTextFieldChangeTriggerOffset.setName("JTextFieldChangeTriggerOffset");
			ivjJTextFieldChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJTextFieldChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJTextFieldChangeTriggerOffset.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999.9999, 99999.9999, 4) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldChangeTriggerOffset;
}
/**
 * Return the JTextFieldRampInInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampInInterval() {
	if (ivjJTextFieldRampInInterval == null) {
		try {
			ivjJTextFieldRampInInterval = new javax.swing.JTextField();
			ivjJTextFieldRampInInterval.setName("JTextFieldRampInInterval");
			ivjJTextFieldRampInInterval.setPreferredSize(new java.awt.Dimension(76, 20));
			ivjJTextFieldRampInInterval.setMaximumSize(new java.awt.Dimension(76, 20));
			ivjJTextFieldRampInInterval.setMinimumSize(new java.awt.Dimension(76, 20));
			// user code begin {1}
			ivjJTextFieldRampInInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampInInterval;
}
/**
 * Return the JTextFieldRampOutInterval property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldRampOutInterval() {
	if (ivjJTextFieldRampOutInterval == null) {
		try {
			ivjJTextFieldRampOutInterval = new javax.swing.JTextField();
			ivjJTextFieldRampOutInterval.setName("JTextFieldRampOutInterval");
			ivjJTextFieldRampOutInterval.setPreferredSize(new java.awt.Dimension(63, 20));
			ivjJTextFieldRampOutInterval.setMaximumSize(new java.awt.Dimension(63, 20));
			ivjJTextFieldRampOutInterval.setMinimumSize(new java.awt.Dimension(63, 20));
			// user code begin {1}
			ivjJTextFieldRampOutInterval.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999, 99999) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRampOutInterval;
}
/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	gear = (LMProgramDirectGear)o;
	
	if( getJComboBoxHowToStop().getSelectedItem() != null )
	{
		if(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Time In") == 0)
		{
			if(getJComboBoxStopOrder().getSelectedItem().toString().compareTo("First In First Out") == 0)
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_FIFO);
			else
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM);
			gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
			String interval = getJTextFieldRampOutInterval().getText();
			if(interval.compareTo("") == 0)
				gear.setRampOutInterval(new Integer(0));
			else
				gear.setRampOutInterval(new Integer(interval));
		}
		else if(getJComboBoxHowToStop().getSelectedItem().toString().compareTo("Ramp Out / Restore") == 0)
		{
			if(getJComboBoxStopOrder().getSelectedItem().toString().compareTo("First In First Out") == 0)
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_FIFO_RESTORE);
			else
				gear.setMethodStopType(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM_RESTORE);
			gear.setRampOutPercent(new Integer(((Number)getJCSpinFieldRampOutPercent().getValue()).intValue()));
			String interval = getJTextFieldRampOutInterval().getText();
			if(interval.compareTo("") == 0)
				gear.setRampOutInterval(new Integer(0));
			else
				gear.setRampOutInterval(new Integer(interval));
		}
		else
			gear.setMethodStopType( 
				com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxHowToStop().getSelectedItem().toString() ) );
	}
	
	if(getJCheckBoxRampIn().isSelected())
	{
		gear.setRampInPercent(new Integer(((Number)getJCSpinFieldRampInPercent().getValue()).intValue()));
		gear.setRampInInterval(new Integer(getJTextFieldRampInInterval().getText()));
	}

	gear.setPercentReduction( new Integer( ((Number)getJCSpinFieldPercentReduction().getValue()).intValue() ) );
	
	gear.setChangeCondition( getChangeCondition(getJComboBoxWhenChange().getSelectedItem().toString()) );
	
	gear.setChangeDuration( new Integer( ((Number)getJCSpinFieldChangeDuration().getValue()).intValue() * 60 ) );
	gear.setChangePriority( new Integer( ((Number)getJCSpinFieldChangePriority().getValue()).intValue() ) );
	gear.setChangeTriggerNumber( new Integer( ((Number)getJCSpinFieldChangeTriggerNumber().getValue()).intValue() ) );
	
	if( getJTextFieldChangeTriggerOffset().getText() == null || getJTextFieldChangeTriggerOffset().getText().length() <= 0 )
		gear.setChangeTriggerOffset( new Double(0.0) );
	else
		gear.setChangeTriggerOffset( Double.valueOf(getJTextFieldChangeTriggerOffset().getText()) );

	com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

	s.setControlPercent( new Integer( 
		((Number)getJCSpinFieldControlPercent().getValue()).intValue() ) );

	s.setCyclePeriodLength( new Integer( 
		((Number)getJCSpinFieldCyclePeriod().getValue()).intValue() * 60 ) );
		
	s.setGroupSelectionMethod( StringUtils.removeChars( ' ', getJComboBoxGroupSelection().getSelectedItem().toString() ) );
			
	return s;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJCSpinFieldChangeDuration().addValueListener(this);
	getJCSpinFieldChangePriority().addValueListener(this);
	getJCSpinFieldChangeTriggerNumber().addValueListener(this);
	getJCSpinFieldControlPercent().addValueListener(this);
	getJCSpinFieldCyclePeriod().addValueListener(this);
	getJCSpinFieldPercentReduction().addValueListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJTextFieldChangeTriggerOffset().addCaretListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxHowToStop().addActionListener(this);
	getJCSpinFieldRampOutPercent().addValueListener(this);
	getJCSpinFieldRampInPercent().addValueListener(this);
	getJComboBoxStopOrder().addActionListener(this);
	getJTextFieldRampOutInterval().addCaretListener(this);
	
	// user code end
	getJCheckBoxRampIn().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("MasterCycleGearPanel");
		setPreferredSize(new java.awt.Dimension(402, 430));
		setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
		setLayout(new java.awt.GridBagLayout());
		setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
		setSize(402, 430);

		java.awt.GridBagConstraints constraintsJLabelControlPercent = new java.awt.GridBagConstraints();
		constraintsJLabelControlPercent.gridx = 1; constraintsJLabelControlPercent.gridy = 1;
		constraintsJLabelControlPercent.ipadx = -7;
		constraintsJLabelControlPercent.insets = new java.awt.Insets(14, 10, 6, 34);
		add(getJLabelControlPercent(), constraintsJLabelControlPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldControlPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldControlPercent.gridx = 2; constraintsJCSpinFieldControlPercent.gridy = 1;
		constraintsJCSpinFieldControlPercent.gridwidth = 2;
		constraintsJCSpinFieldControlPercent.insets = new java.awt.Insets(10, 6, 4, 18);
		add(getJCSpinFieldControlPercent(), constraintsJCSpinFieldControlPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldCyclePeriod = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldCyclePeriod.gridx = 2; constraintsJCSpinFieldCyclePeriod.gridy = 2;
		constraintsJCSpinFieldCyclePeriod.gridwidth = 2;
		constraintsJCSpinFieldCyclePeriod.insets = new java.awt.Insets(5, 6, 4, 18);
		add(getJCSpinFieldCyclePeriod(), constraintsJCSpinFieldCyclePeriod);

		java.awt.GridBagConstraints constraintsJLabelCyclePeriod = new java.awt.GridBagConstraints();
		constraintsJLabelCyclePeriod.gridx = 1; constraintsJLabelCyclePeriod.gridy = 2;
		constraintsJLabelCyclePeriod.ipadx = -4;
		constraintsJLabelCyclePeriod.insets = new java.awt.Insets(7, 10, 8, 31);
		add(getJLabelCyclePeriod(), constraintsJLabelCyclePeriod);

		java.awt.GridBagConstraints constraintsJLabelHowToStop = new java.awt.GridBagConstraints();
		constraintsJLabelHowToStop.gridx = 1; constraintsJLabelHowToStop.gridy = 7;
		constraintsJLabelHowToStop.ipadx = 4;
		constraintsJLabelHowToStop.insets = new java.awt.Insets(7, 10, 4, 23);
		add(getJLabelHowToStop(), constraintsJLabelHowToStop);

		java.awt.GridBagConstraints constraintsJComboBoxHowToStop = new java.awt.GridBagConstraints();
		constraintsJComboBoxHowToStop.gridx = 2; constraintsJComboBoxHowToStop.gridy = 7;
		constraintsJComboBoxHowToStop.gridwidth = 3;
		constraintsJComboBoxHowToStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHowToStop.weightx = 1.0;
		constraintsJComboBoxHowToStop.insets = new java.awt.Insets(3, 6, 1, 88);
		add(getJComboBoxHowToStop(), constraintsJComboBoxHowToStop);

		java.awt.GridBagConstraints constraintsJCSpinFieldPercentReduction = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldPercentReduction.gridx = 3; constraintsJCSpinFieldPercentReduction.gridy = 11;
		constraintsJCSpinFieldPercentReduction.gridwidth = 2;
		constraintsJCSpinFieldPercentReduction.insets = new java.awt.Insets(4, 6, 3, 156);
		add(getJCSpinFieldPercentReduction(), constraintsJCSpinFieldPercentReduction);

		java.awt.GridBagConstraints constraintsJLabelPercentReduction = new java.awt.GridBagConstraints();
		constraintsJLabelPercentReduction.gridx = 1; constraintsJLabelPercentReduction.gridy = 11;
		constraintsJLabelPercentReduction.gridwidth = 2;
		constraintsJLabelPercentReduction.ipadx = 53;
		constraintsJLabelPercentReduction.ipady = 3;
		constraintsJLabelPercentReduction.insets = new java.awt.Insets(6, 10, 4, 5);
		add(getJLabelPercentReduction(), constraintsJLabelPercentReduction);

		java.awt.GridBagConstraints constraintsJPanelChangeMethod = new java.awt.GridBagConstraints();
		constraintsJPanelChangeMethod.gridx = 1; constraintsJPanelChangeMethod.gridy = 12;
		constraintsJPanelChangeMethod.gridwidth = 4;
		constraintsJPanelChangeMethod.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelChangeMethod.weightx = 1.0;
		constraintsJPanelChangeMethod.weighty = 1.0;
		constraintsJPanelChangeMethod.insets = new java.awt.Insets(3, 5, 41, 62);
		add(getJPanelChangeMethod(), constraintsJPanelChangeMethod);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercent.gridx = 1; constraintsJLabelRampOutPercent.gridy = 9;
		constraintsJLabelRampOutPercent.ipadx = -57;
		constraintsJLabelRampOutPercent.ipady = -111;
		constraintsJLabelRampOutPercent.insets = new java.awt.Insets(7, 10, 4, 14);
		add(getJLabelRampOutPercent(), constraintsJLabelRampOutPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampOutPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampOutPercent.gridx = 2; constraintsJCSpinFieldRampOutPercent.gridy = 9;
		constraintsJCSpinFieldRampOutPercent.gridwidth = 2;
		constraintsJCSpinFieldRampOutPercent.insets = new java.awt.Insets(3, 6, 2, 2);
		add(getJCSpinFieldRampOutPercent(), constraintsJCSpinFieldRampOutPercent);

		java.awt.GridBagConstraints constraintsJLabelRampOutPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutPercentSign.gridx = 4; constraintsJLabelRampOutPercentSign.gridy = 9;
		constraintsJLabelRampOutPercentSign.ipadx = 16;
		constraintsJLabelRampOutPercentSign.insets = new java.awt.Insets(7, 2, 2, 140);
		add(getJLabelRampOutPercentSign(), constraintsJLabelRampOutPercentSign);

		java.awt.GridBagConstraints constraintsJLabelRampOutSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutSec.gridx = 4; constraintsJLabelRampOutSec.gridy = 10;
		constraintsJLabelRampOutSec.ipadx = 4;
		constraintsJLabelRampOutSec.insets = new java.awt.Insets(5, 2, 5, 140);
		add(getJLabelRampOutSec(), constraintsJLabelRampOutSec);

		java.awt.GridBagConstraints constraintsJTextFieldRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampOutInterval.gridx = 2; constraintsJTextFieldRampOutInterval.gridy = 10;
		constraintsJTextFieldRampOutInterval.gridwidth = 2;
		constraintsJTextFieldRampOutInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampOutInterval.weightx = 1.0;
		constraintsJTextFieldRampOutInterval.ipadx = 13;
		constraintsJTextFieldRampOutInterval.insets = new java.awt.Insets(3, 6, 3, 2);
		add(getJTextFieldRampOutInterval(), constraintsJTextFieldRampOutInterval);

		java.awt.GridBagConstraints constraintsJLabelRampOutInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampOutInterval.gridx = 1; constraintsJLabelRampOutInterval.gridy = 10;
		constraintsJLabelRampOutInterval.ipadx = -57;
		constraintsJLabelRampOutInterval.ipady = -111;
		constraintsJLabelRampOutInterval.insets = new java.awt.Insets(5, 10, 7, 14);
		add(getJLabelRampOutInterval(), constraintsJLabelRampOutInterval);

		java.awt.GridBagConstraints constraintsJCheckBoxRampIn = new java.awt.GridBagConstraints();
		constraintsJCheckBoxRampIn.gridx = 1; constraintsJCheckBoxRampIn.gridy = 4;
		constraintsJCheckBoxRampIn.ipadx = 53;
		constraintsJCheckBoxRampIn.ipady = -2;
		constraintsJCheckBoxRampIn.insets = new java.awt.Insets(1, 10, 2, 14);
		add(getJCheckBoxRampIn(), constraintsJCheckBoxRampIn);

		java.awt.GridBagConstraints constraintsJLabelRampInPercent = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercent.gridx = 1; constraintsJLabelRampInPercent.gridy = 5;
		constraintsJLabelRampInPercent.insets = new java.awt.Insets(7, 10, 4, 20);
		add(getJLabelRampInPercent(), constraintsJLabelRampInPercent);

		java.awt.GridBagConstraints constraintsJCSpinFieldRampInPercent = new java.awt.GridBagConstraints();
		constraintsJCSpinFieldRampInPercent.gridx = 2; constraintsJCSpinFieldRampInPercent.gridy = 5;
		constraintsJCSpinFieldRampInPercent.gridwidth = 2;
		constraintsJCSpinFieldRampInPercent.insets = new java.awt.Insets(3, 6, 2, 2);
		add(getJCSpinFieldRampInPercent(), constraintsJCSpinFieldRampInPercent);

		java.awt.GridBagConstraints constraintsJLabelRampInPercentSign = new java.awt.GridBagConstraints();
		constraintsJLabelRampInPercentSign.gridx = 4; constraintsJLabelRampInPercentSign.gridy = 5;
		constraintsJLabelRampInPercentSign.ipadx = 16;
		constraintsJLabelRampInPercentSign.insets = new java.awt.Insets(5, 2, 4, 140);
		add(getJLabelRampInPercentSign(), constraintsJLabelRampInPercentSign);

		java.awt.GridBagConstraints constraintsJLabelRampInSec = new java.awt.GridBagConstraints();
		constraintsJLabelRampInSec.gridx = 4; constraintsJLabelRampInSec.gridy = 6;
		constraintsJLabelRampInSec.ipadx = 4;
		constraintsJLabelRampInSec.insets = new java.awt.Insets(5, 2, 5, 140);
		add(getJLabelRampInSec(), constraintsJLabelRampInSec);

		java.awt.GridBagConstraints constraintsJTextFieldRampInInterval = new java.awt.GridBagConstraints();
		constraintsJTextFieldRampInInterval.gridx = 2; constraintsJTextFieldRampInInterval.gridy = 6;
		constraintsJTextFieldRampInInterval.gridwidth = 2;
		constraintsJTextFieldRampInInterval.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldRampInInterval.weightx = 1.0;
		constraintsJTextFieldRampInInterval.insets = new java.awt.Insets(3, 6, 3, 2);
		add(getJTextFieldRampInInterval(), constraintsJTextFieldRampInInterval);

		java.awt.GridBagConstraints constraintsJLabelRampInInterval = new java.awt.GridBagConstraints();
		constraintsJLabelRampInInterval.gridx = 1; constraintsJLabelRampInInterval.gridy = 6;
		constraintsJLabelRampInInterval.insets = new java.awt.Insets(6, 10, 6, 20);
		add(getJLabelRampInInterval(), constraintsJLabelRampInInterval);

		java.awt.GridBagConstraints constraintsJLabelStopOrder = new java.awt.GridBagConstraints();
		constraintsJLabelStopOrder.gridx = 1; constraintsJLabelStopOrder.gridy = 8;
		constraintsJLabelStopOrder.insets = new java.awt.Insets(5, 10, 6, 77);
		add(getJLabelStopOrder(), constraintsJLabelStopOrder);

		java.awt.GridBagConstraints constraintsJComboBoxStopOrder = new java.awt.GridBagConstraints();
		constraintsJComboBoxStopOrder.gridx = 2; constraintsJComboBoxStopOrder.gridy = 8;
		constraintsJComboBoxStopOrder.gridwidth = 3;
		constraintsJComboBoxStopOrder.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxStopOrder.weightx = 1.0;
		constraintsJComboBoxStopOrder.ipadx = -25;
		constraintsJComboBoxStopOrder.insets = new java.awt.Insets(2, 6, 2, 88);
		add(getJComboBoxStopOrder(), constraintsJComboBoxStopOrder);

		java.awt.GridBagConstraints constraintsJLabelGroupSelection = new java.awt.GridBagConstraints();
		constraintsJLabelGroupSelection.gridx = 1; constraintsJLabelGroupSelection.gridy = 3;
		constraintsJLabelGroupSelection.insets = new java.awt.Insets(5, 10, 6, 5);
		add(getJLabelGroupSelection(), constraintsJLabelGroupSelection);

		java.awt.GridBagConstraints constraintsJComboBoxGroupSelection = new java.awt.GridBagConstraints();
		constraintsJComboBoxGroupSelection.gridx = 2; constraintsJComboBoxGroupSelection.gridy = 3;
		constraintsJComboBoxGroupSelection.gridwidth = 3;
		constraintsJComboBoxGroupSelection.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxGroupSelection.weightx = 1.0;
		constraintsJComboBoxGroupSelection.insets = new java.awt.Insets(4, 6, 0, 63);
		add(getJComboBoxGroupSelection(), constraintsJComboBoxGroupSelection);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	rampItOut(false);
	rampItIn(false);
	
	getJComboBoxWhenChange().setSelectedItem( LMProgramDirectGear.CHANGE_NONE );
	
	try
	{
		initConnections();
	}
	catch(Exception e)	{ }
	
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxRampIn_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	rampItIn(getJCheckBoxRampIn().isSelected());
	this.fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxWhenChange_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelChangeDuration().setVisible(false);
	getJCSpinFieldChangeDuration().setVisible(false);
	getJLabelMinutesChDur().setVisible(false);
	
	getJLabelChangePriority().setVisible(false);
	getJCSpinFieldChangePriority().setVisible(false);
	
	getJLabelChangeTriggerNumber().setVisible(false);
	getJCSpinFieldChangeTriggerNumber().setVisible(false);

	getJLabelChangeTriggerOffset().setVisible(false);
	getJTextFieldChangeTriggerOffset().setVisible(false);

	
	if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_NONE )
		 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Manually Only" ) )
	{
		//None
		return;
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_DURATION )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "After a Duration" ) )
	{
		//Duration
		getJLabelChangeDuration().setVisible(true);
		getJCSpinFieldChangeDuration().setVisible(true);
		getJLabelMinutesChDur().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_PRIORITY )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Priority Change" ) )
	{
		//Priority
		getJLabelChangePriority().setVisible(true);
		getJCSpinFieldChangePriority().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_TRIGGER_OFFSET )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Above Trigger" ) )
	{
		//TriggerOffset
		getJLabelChangeTriggerNumber().setVisible(true);
		getJCSpinFieldChangeTriggerNumber().setVisible(true);

		getJLabelChangeTriggerOffset().setVisible(true);
		getJTextFieldChangeTriggerOffset().setVisible(true);
	}
	else
		throw new Error("Unknown LMProgramDirectGear control condition found, the value = " + getJComboBoxWhenChange().getSelectedItem().toString() );


	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		MasterCycleGearPanel aMasterCycleGearPanel;
		aMasterCycleGearPanel = new MasterCycleGearPanel();
		frame.setContentPane(aMasterCycleGearPanel);
		frame.setSize(aMasterCycleGearPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.dbeditor.wizard.device.lmprogram.GenericGearPanel");
		exception.printStackTrace(System.out);
	}
}
public void rampItIn(boolean rampOrNotToRamp)
{
	getJLabelRampInInterval().setVisible(rampOrNotToRamp);
	getJLabelRampInPercent().setVisible(rampOrNotToRamp);
	getJLabelRampInPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampInSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampInPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampInInterval().setVisible(rampOrNotToRamp);
}
public void rampItOut(boolean rampOrNotToRamp)
{
	getJLabelRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercent().setVisible(rampOrNotToRamp);
	getJLabelRampOutPercentSign().setVisible(rampOrNotToRamp);
	getJLabelRampOutSec().setVisible(rampOrNotToRamp);
	getJCSpinFieldRampOutPercent().setVisible(rampOrNotToRamp);
	getJTextFieldRampOutInterval().setVisible(rampOrNotToRamp);
	getJLabelStopOrder().setVisible(rampOrNotToRamp);
	getJComboBoxStopOrder().setVisible(rampOrNotToRamp);
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private void setChangeCondition(String change) 
{
	if( change == null )
		return;

	if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_NONE) )
	{
		getJComboBoxWhenChange().setSelectedItem("Manually Only");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_DURATION) )
	{
		getJComboBoxWhenChange().setSelectedItem("After a Duration");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_PRIORITY) )
	{
		getJComboBoxWhenChange().setSelectedItem("Priority Change");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_TRIGGER_OFFSET) )
	{
		getJComboBoxWhenChange().setSelectedItem("Above Trigger");
	}	
	
}
/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
	{
		return;
	}
	else
		gear = (LMProgramDirectGear)o;

	if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_FIFO) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Time In" );
		getJComboBoxStopOrder().setSelectedItem( "First In First Out");
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Time In" );
		getJComboBoxStopOrder().setSelectedItem( "Random" );
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_FIFO_RESTORE) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Restore" );
		getJComboBoxStopOrder().setSelectedItem( "First In First Out");
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else if(gear.getMethodStopType().compareTo(LMProgramDirectGear.STOP_RAMP_OUT_RANDOM_RESTORE) == 0)
	{
		getJComboBoxHowToStop().setSelectedItem( "Ramp Out / Restore" );
		getJComboBoxStopOrder().setSelectedItem( "Random" );
		getJCSpinFieldRampOutPercent().setValue(gear.getRampOutPercent());
		getJTextFieldRampOutInterval().setText(gear.getRampOutInterval().toString());
	}
	else
		getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getMethodStopType() ) );

	if(gear.getRampInPercent().intValue() != 0 && gear.getRampInInterval().intValue() != 0)
	{
		getJCheckBoxRampIn().setSelected(true);
		rampItIn(true);
		getJCSpinFieldRampInPercent().setValue(gear.getRampInPercent());
		getJTextFieldRampInInterval().setText(gear.getRampInInterval().toString());
	}
		
	getJCSpinFieldPercentReduction().setValue( gear.getPercentReduction() );
	
	setChangeCondition( gear.getChangeCondition() );
	
	getJCSpinFieldChangeDuration().setValue( new Integer( gear.getChangeDuration().intValue() / 60 ) );
	getJCSpinFieldChangePriority().setValue( gear.getChangePriority() );
	getJCSpinFieldChangeTriggerNumber().setValue( gear.getChangeTriggerNumber() );	
	getJTextFieldChangeTriggerOffset().setText( gear.getChangeTriggerOffset().toString() );

	com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

	getJCSpinFieldControlPercent().setValue( s.getControlPercent() );

	getJCSpinFieldCyclePeriod().setValue( new Integer( s.getCyclePeriodLength().intValue() / 60 ) );
	
	getJComboBoxGroupSelection().setSelectedItem( StringUtils.addCharBetweenWords( ' ', s.getGroupSelectionMethod() ) );
	
}
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
}

package com.cannontech.dbeditor.wizard.device.lmprogram;

/**
 * Insert the type's description here.
 * Creation date: (8/1/2002 3:43:26 PM)
 * @author: 
 */
import java.awt.Dimension;

import javax.swing.border.EtchedBorder;

import com.cannontech.common.util.CtiUtilities;
import com.cannontech.common.util.StringUtils;
import com.cannontech.database.db.device.lm.LMProgramDirectGear;
 
public class SmartCycleGearPanel extends GenericGearPanel {
	private javax.swing.JComboBox ivjJComboBoxCycleCountSndType = null;
	private javax.swing.JComboBox ivjJComboBoxHowToStop = null;
	private javax.swing.JComboBox ivjJComboBoxMaxCycleCount = null;
	private javax.swing.JComboBox ivjJComboBoxPeriodCount = null;
	private javax.swing.JComboBox ivjJComboBoxWhenChange = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeDuration = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangePriority = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeTriggerNumber = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldControlPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldCyclePeriod = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldPercentReduction = null;
	private javax.swing.JLabel ivjJLabelChangeDuration = null;
	private javax.swing.JLabel ivjJLabelChangePriority = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerOffset = null;
	private javax.swing.JLabel ivjJLabelControlPercent = null;
	private javax.swing.JLabel ivjJLabelCycleCntSndType = null;
	private javax.swing.JLabel ivjJLabelCyclePeriod = null;
	private javax.swing.JLabel ivjJLabelHowToStop = null;
	private javax.swing.JLabel ivjJLabelMaxCycleCnt = null;
	private javax.swing.JLabel ivjJLabelMin = null;
	private javax.swing.JLabel ivjJLabelMinutesChDur = null;
	private javax.swing.JLabel ivjJLabelPercentReduction = null;
	private javax.swing.JLabel ivjJLabelPeriodCount = null;
	private javax.swing.JLabel ivjJLabelSendRate = null;
	private javax.swing.JLabel ivjJLabelWhenChange = null;
	private javax.swing.JPanel ivjJPanelChangeMethod = null;
	private javax.swing.JTextField ivjJTextFieldChangeTriggerOffset = null;
	private javax.swing.JComboBox ivjJComboBoxSendRateDigits = null;
	private javax.swing.JComboBox ivjJComboBoxSendRateUnits = null;
	private javax.swing.JCheckBox jCheckBoxNoRamp = null;
/**
 * SmartCycleGearPanel constructor comment.
 */
public SmartCycleGearPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	if (e.getSource() == getJComboBoxWhenChange()) 
		connEtoC1(e);
	if (e.getSource() == getJComboBoxPeriodCount()) 
		connEtoC6(e);
	if (e.getSource() == getJComboBoxSendRateDigits() || e.getSource() == getJComboBoxSendRateUnits()) 
		connEtoC7(e);
	if (e.getSource() == getJComboBoxHowToStop()) 
		connEtoC10(e);
	if (e.getSource() == getJComboBoxCycleCountSndType()) 
		connEtoC11(e);
	if (e.getSource() == getJComboBoxMaxCycleCount()) 
		connEtoC12(e);
    if (e.getSource() == getJCheckBoxNoRamp())
        this.fireInputUpdate();
	// user code end
	
	// user code begin {2}
	// user code end
}
/**
 * connEtoC1:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxWhenChange_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JComboBoxHowToStop.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC11:  (JComboBoxCycleCountSndType.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC12:  (JComboBoxCycleCountSndType1.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (JComboBoxPeriodCount.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JComboBoxSendRate.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G95CBE4AFGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E15DFD8DDCD4D57A3F3BCBADDBFE4AB65A4C9F7D164AB6EA5942222422964B4A0A4ACA0B4A7A51E6C59B6E5A469690658586C5DE849545F7C7C5C3A5C465BDAA5EFCC1A7A5A565E55C981881C607195919D151D87DBD671C7B1CFB6FF0E7986A377FCF7B6773F918FB3E4F731C73BC4FF94E39675EFB6E0C103FBEA8BDA5B5DF90D25285712FB2C59034178B4279C371EFA0D67A0744CCC1763781E83170DE
	1986BE6B00B7D8191419A73C11158165D6A8C794A6E5964071D2A1B6CBFF968EBC34D3863C034E254FF9EFE76692ECE781ADF7E6E54367A220B6400600268165894E2C95A29E8465C562B12114D4C1983C1D4884362F10615937B3B9237829390348DC1135C664C782CEE4220162EE176ADCC82D3B2426CAAC6B2F8A96621FD81D1AC35A12550F243B03695A45CF2DF0938DC41AF04726E6782CEDB95577E50FED202447E0355A2CAED3CFFF09315BE4B43BEC0E1233667386073144E8BAE36EB115D8866C8EDB1F
	43B0D0D3F3F44060F0B51E6B311876198C0E960355E4013AE2288F8F35E7507A85A1984A4C5EE7F3EAC5FB82CE858BB1B7AD72E8EFE1A833F3FF28E4EFCBF3FAFAC2A829FBB20DBF517307F2A490EBF3DE9636D9BB89F2E09241E63691D9979C0F851AB889ED7962D334256D7B49C2C2771729399EEC916EE4B6945DA959D2BC3DA1EBA54D85C3BE69CFA3707C018201A201E200043B92B3D7539CDC33F49BFC56F73B9AED8383B6EB3D5D5EE0B1BA3E3699CD96B82E29810E089DB175589CC6C1E0F976D8FB310A
	BDC8AB6ED26618149747854C0B10A3378BAED7D9EA3A0AEFE1B35726960BF5545DA579467C7AF899712B8B70A120G209020A820B86ED76F525DA379558C3964309AACC7CFF75BA1D99ACE1BADC613C3746F01ACEF7E299153FBF254FAACAE413B65F119F557D7298BD462B2AB38B0B5A3CC0CC71894975636A65BD35BF5E1437B030E6DB012074D6DA48FDB61B8C54CD1069F25F8308CE7B97E8A4DDBD28E875E1A3BB1EF5B96218FBA4D0DC25E4EBAD59F46BFD41EBA66EEE64F783B5D7B762582B23FCC85BC86
	A881A86F1E444CD2A09DD057BD583F13166E70B1EFDBE4FD4BF4CF66AF07CF53204BE1E836BADD86EB0F691841E1B6F4DBCCCEC114F166935B3B95FA03F4BC75C09B7BCCD6134360B25B2CD03BE140840964E4B2BF4BDFCCE49CA64AEDB58F182001813B00757EAAFFA9FCDA8CCE5737F62341E512A4987F2AFC924BB306E3D0A3D4G47217710183FC6672CB1F09C8844E2B5FFA54162211CBD9963123DEC89FC9E0444B6D9EAEA1A4CBD448C03639C36BFFFB919CBCCE7CCD6D71349EE329A6140A972F216AF14
	6252EB63B6AF25B899A30DE0381363AB17AFE6B854A10FB272B7D03E4165F2183BCF3BCCC7CDAE17595AA769EF2536B895434FA908E3FCA549B1AD78D585341F7BF7677225B27FF4B65B295376D652F3E21CD6E7131868C15EB5994F09075B49B9F27CE44C533F34E11EB6657CC1A81E7925EA1E928A1F4C72F37AE4773156CE6B145AF83D2D4DBD4FA72B0F399FC22C0D24E1ED247D9F55CF08455D3E1A44BD81EC4F8FCF4CAC8B47384FD92EE5632D4160B46188BB6C009EB39925ACE332EF94F84E31BF972867
	585C82759C7B2040FB8EFDD22016C30C173E021CDBECE72D321C4CDC31040EE12B55C40D66AA82DBF37C25154442ECB53B0E1B0DFDA657D173F99374F3B8492D3F53B12803632EF04C25331BB0178A4F5FAAC4FE37D275FCB67E662A5470F0168FD161D2AEB11B32E82E1BAC268188D4236D3455457045F4FC0B38B83F242DD217DD380A6463A953B9D1AEE755FC014CA31653A66EDB28A10B4458E1063551B9B2E045F55F2EEC793AAF8E6CA3EB443AFB93B3DB01186EF5974838D3DBD5313C39F58D314B8272E3
	00465F0BF9732BD5ABE563D5CC18C61B4542424F7B654C6ABC520F26FF1EB641F4CC8674C16E4B3FD6AFF1639D937DE27CCBD6933FAC723960DE62D7F6872E39483902E11BA876D788D6CE9A1EFB3F4E132FD50D4E1D2AFDC8A87EDE56F79977391F37DEDBCB6AAD823C6ABE749D96D7B25F6B1DCEDB0F191E96447E78FCF02F70C35737748CE46E11ADEE59BAB3104EFFE43E505D076B4C9DDF133E7103F2A0D098376F0EB54373ABEC8D394868B5BB1C30BEB21A86B146772DA131A267AD9146755CAEF96CA2E3
	B6FB0CDD14983318E131ABDCCF6CC886BC6FFE342DFC6DE2D96CE06D892769BE68D934670D35E9AC5F45725BEB53B15F851CAFEF606B21427BD91BD577CBF3326E7E6173B3DB77B49EA2716A3A1F2DFBBE6578F7948F1761ECBDD4CE63CB4AF99130CEF9G4F4F2B3444AF7F87E1BCBC08FE8D2D4B117955E2B3DBDD5C272D6B491835B94CFDE6ABE2A5940315B71D4458B9AE1C76F1B054B99508E15F9FA0D8B41463B816FC10E0F9FFCC4CAC7AA31E271A8F69086FD036G85G0583CD871A8B149F1918D98B24
	879A8394849489B48BA899C8BB8578C0FAA0BF2060A9D82F09569B8565B8206C0792B30B01F4C0962031C0A1C0D1C0F1C0598F839FC887E4879A87948AB49DE8AED05ED42C77732FCBD3BC1F33083D72F2D06470BEA5F692FF311C2CA2A3A7629B9E0F91FD47F230482B1D22DE870921D605E77963F0ACC085530FE09BD238CC1774DD2D58CF4A7542E5DEE3176BD6AED01159ACA85798EBC730EB136CF8191857D87ED47C5C60C1170C0B75AAF83A8A36C085DB6AC35C88AD149DE751B831358FE2EC5C2D5712B1
	BE484B1BE8791C980F2542B35944DE3B4354EBF240990DAD93047E29E45C455271D98A4735C0CC7E578748B836984E59CE13817F8811DBF0D0FE5E8D815999C031D3D9BF32F34424334446DE1873E159F354EE6A91E6D15D25BA545D8FE5BD5090D0A0D044A358661C797970F9C0E768B6D99A614C6230D9DACC0E9E186C99BFB51D78FD2071285DEC5DEBB6D90CCAA16E6B3A7D4B5D64488AG244CB6A34ADC7F79C25E5657E47A927195A796CBB64855C47E9B1B17A9790DD657D12B31751C5D44E52EBD3C0A36
	EF9B6836B558861998D97AF0C1A6F721C2EA6BEB43A0D6476BB934F1393C9EAEC22AC21927E5F5B0D3C536483FECB0DFDE07CC047173AA96F17D233074BD8257F8287B50F9320EB9C04F570D7DF0BEB3FDEDF275CBB19C32AF1737CD7A600849F8DADCA8B1195F1F4C65B27BEDE7DBEDC7DDB63B485BEBDEA237CDE2E39C6D2B157DB82C91A6B7393AC0DE8F3A518467A5D847B319672A172B49FCEBA5A2027ED11223410772E579DD78A83BA65B8F1F0C3F21C04E1FA87223B9FFCF119ABF0E73BF69D02BDFF88C
	793F2CD66367F37ED93D9A3F087323957557BE4678C64EBF2C5A7EA067EF69D4539F4B790FF5296987F17EBB97557443B87F382A7EB46033F57D079765734BACD1DF1886B11806F5DC5B2ED6C7B1673FDA21462F637CF915EAB636F2FEEB25DA9F76F3FEC8051A7E90676728724781FF62B4F2BFBC0D1CD6441C349F50422755F4D6FB52F046D0E2B86BAAE9B2435A165CC8A9AAAB5DD52CAD5BDD3A152DDB034E4A572DD5195BBD2EDBE3273179B8D97C1C8DE784B6B76F6CA2772A687A9D9B04053943ECECB074
	6968CC4F56641F51F598293B6CF1DC13F79E2457CBD076838AFC9C2FA78737603D5F105F5DA86846FC25FA9FBA26F5CBEA58634C1E68472575F45D7406AC56E6358E5B4CFF8256BFCF902CCFA70FA509598978D7821F0CFF1D023FD8541778CFAA78445E4D8A7D0F957CF419BE736D494D68DB72132102656E4FBC5EE38FF8027994AEFE8EBE33CA081A30B30B457D7D5E9572388F16B84F42493126064D0A4C7FEB8EE708BE4CFD82E37B2F3D72FB7C9139DBD233BC345F7AA4EB577524945B394FB4086DDF2858
	A2482E5BCED97ACACE76103B96A53DE4D685C324A9962F4B5A8A08BD243D30A7711940D091E2F19CAB6FA49819638B2390FB309AFD7167586DFA2E9B055768FD16556AF141D9DA34A51736C1E2D2789456F7E9875627675889AE974031CF3AD0AE0AE3DA8165B4CFA3F685172BFD9A6DFBFF2B07FE23E7C42637C3C0DFDDCF63D8397EDFE42CC4C3F9AED046B35846536D98ABAD4772AB5196BF0ED5D461B5F18447AE67F2719CFB23826BAB1E0ED89345C81E0E1B0EF974CC27FC6E481B30ACB545C39E45CFE779
	A3BC6BFE4D3BF2AB29378C7016E7715AF07F275B6173186124F867FA8F3D87C0EF368158623059CD8E57B90652BBA062BAFF574151BEF3E057334F50B9487EAC3B1ECD61F8B44507E4B83B4EB59C644F36009777ACDE679E58C67A3565B938568372838A840AG0AFE8EFD3B6A53D2E1047B752DB63B4EF48616BE521DBC665F173A9F76CCE54A829C6FE1775DA604DFBAA74553F80FFB0E75CF76736CB36F69D594E77E3D3A1D66AD705A00060082000201A21FC77FDE7A341879C73A275E65B27474533BAA685C
	B133692C841305BC73ED42E177FB3AB3204ED8510E6467552F8773E6A4E69682D54D105D4F00632E99CAF9E67F3E4F483C6C825EB820E020C8201899E87B2622911F156D9974722C6CC481760FB0935696C0C5B3A5BBEA6138E52652AE267733A254B382FF90E82CCCAE880E43D475EABA5DE3C6E81AA8BBEB2607EBF340B5AFA4E62EF8C1629743F15D8BEAEDBCDC6D5EC6AB48750B32C3AF2837B18E7009C061B2FE949C472836F117DE1E5771A01371E2E2669A20D22026970737417472BBD12F8DE4ACC0E3E4
	32819E75AE6F1037978CF291C05301E683A5F8546B666DE5C7A7E6EA014A22A5597D511E74528C727674A0E78772839A8F9462D1EF3300FA11A0B383A8D6A61B6CD16F6AAEF9FBF9AF4198812A825281F53D64C92FCC1077358B647C0182C579D095BDC2D3810F860A13710517BD5DD37C668219BB73DFE6F3EA8147CD945749F0B6575EC44FF9246C873C3AD770FE58736D6EF9198C3C3CD92C5D42D96A36D6812EF363F5C159B5CBADAFD7D64A63688FB201C021226CD415B644FBF5D52897AD4A4449E405D7BD
	690D636D652B489481D68B54A263B13D588A77D898C519C115FA104682AF480D9F8665E9C033063551BC2C0D39220C66B54FED2CGDE319B3F8E4A2DEE981B1FFBCBC8F858DCFC2A085CF3D3DD8340B4FCG16CD073BCF1AFADC2D06BE2E33EEAB290BBFA3E3CB831137F9AB197B4973AC3341E2BECF9FBF9C85C1EB9F73EF66C1017B7A1A6C386F205A9C7BFFC52C0DB17F56B6187FC737F9FE965931CD7DD9E457B675E7113D5B3CBF0B34EE737CAC7274B67933C8566F4E9D24EF7AA1A77C000201A200263F06
	6765346D9B85FADED6D9CF6CB176199AEDF477028B5BFFEB3BE7DF67EC9FF94F43875B49331FEE1B4BE59BA075A31E3C1D74174BE627A043D20AC90C9C663EFE979395718545E4DDEBB175D218BD07082057E2F1601766FF7059C4CE8B41D6C03908E38E0A15C1D9473106E3846B027290473AAF92EC9C1403B8F6E9B74142209C453168EEFC7E9143319375745EECCCE2667E980C73614FBC476D58E76AB9227FCCBDC73ABF733EA76264E71EF2085967AA40E7BB7A983479A1FA7DE70732BF4772EBB026019C7B
	2E867D8D65583E658493DE07F54F6B080DAF42B60AB9F668A2462F0EE393AEE29B2D9CFB73A236514F31AAFAFD958E65699C5353EB4759D00E6758940A89FF82DB7E0458D55466E2A86F67D8B63D3655C3594231108E34EF8C4792BA5016G0E8DD05D59D0CE66581B5568C75E9B08FDCE5BAD04F2994702A8D68765B60EFDCB6B33C0591FE36D343EC0A807F0EC7B8534AF12E3E7AF20FDB3B8360C35BB9B4EE93391FB0236518265AE0E79F5224DAE0EBDC3B1FFA80F67D8199E5B1D4831B1FAECB71CE35BBB31
	4FB35EC4AC3092F557F0AC36925BAD65586EAA2C2F09E3B7525887C0F9A24766F420EEB8472AE83BD1D01E45316BBB315DD80E3D5309EDA4F36C9C37D97796E2CFF31B3BB89674850F95475E7D826B736758AA83FDC68A65D80E3D3D95F513B936EB9B55FD9B563AEFA3F66DB6EC3718E3EFEC43B66AB8D6AB204D63B87649B15EC79CBBF01C470AE3579C477A22B8F69B3D0F32A6965A0D654FF5394DF59C5BC7EDE9053211E3A15CE6BB4792384DFE9CBBC6ED1E8165D80E4DCCA1D876BB9003F790EBCDA3D893
	14759C3B19E2F6A87BF32C3B83E3904831E5B47621D00E64D87D965AAE1463B8F6759634CF78B32EF90FDFA06B4396A85B0146830583C583896F4279832885E888A898E86A3B28F70A6A4D0632A68E2E85001A000CC0FEC0930126824D86524C817E9C543B75DF2142707584E917FC12F664F84B1FBD2F8323D5F861A2C6FCC1FB799AD9F6DC742E67FAF95B6F3A2FD723D5ED4767256E4FC83D6D9F4BD2417059A9D94B1067F672E746B932E377E74BEA34D8F64C7A1E6D2FA27955B48773210E66D29B147BB9F6
	B345DCD09E4B314769FD3AA0A8C7F0ECAD2DEFBA14E3B8B6500679954F31F92C5D3FC0DE7F8531D2BA4F5821BC06E38FFC0F7685F0ACE30866BA1443B9B6B004EDCC655811AA9C9379FF656775766163695DF63EE7034B5DC2ED9904F2G476E65F2419CCB25F289D04E1B0B58C6BA0796C23916E319D42E854A7D9C6B2458901483B966C75B8805F29447ACB44EB1D0CE60580395E8CB76FB087D1C6A6A216C62581D65747C8565C00E1D223A21D01E4631080A61363CC931D9A013406522E9DFE67F8D466E5F90
	5B4663D2453143D4579F4AC1FF43B55F77BBBC2F79FE3EE364357265BBC81DA6D86312A7508C9B37036E5F696DF51A781A7C1A9DF99CEBF636581CE6F285461ED7BDFF182C3761322C4FCA56766D38FF60DD3ADE8E83DB277D8D1F659736507D26E094FB6ED531D3907039572FDA48D89DB08C1A87CE8F501D882C1E9B68FABA9E6A905E47FA5A0FF95E3760206729E2102D627267AE12F6FBEDD6971339122E7F0C4037F3196B3B95FE34E1FDF75375F790480581E9628976576EA6AFF3C23A007B9E984D86BDC2
	E42E21772161787DF9736625F05FDD7554F73840D57ABE162E73F550E69B90432E27EBEBBFA80F0BC75BDF2AD6377D3DEA34BD026BFFD1037D92970F7E1C2971664F42917CD97177444C6F8436B70659730F656AFDF9062E638BC13E746FE84F943A0E5713B2474EDEC43B83B87670C534FB6A5F516E640BA3593D400B5DF30759FD38CA5D6EBEBA6FA503FC468798F3E727B2175BF7C9399C5D29DE4FDCBA0F15C19DF53C1E609A4F39BC05761585E487397CA63DB2172B69BAF9A270C3BF40D84D6C407845FC00
	314A6D74A5E76709FF6E314A7BB0B1F38360EF82B1BB7C746AB99BC86DD98372C59F22BD0BF84E35FE08FE9C29D1466FD73B2578CD2ED10F5FB3341EB1D047D8DE0FC56FB9FE17D0DB42C1F6AA1737D7AB63F7A99DA3F3011F4C6DED3D0071ABCE4078DDF1E12478F94BB5BD541328987345B56A71EB22BE76033CAB81EDFE5D2D4FBF24FE8581BFA481ED7EC3A746F89657FB4BADC75FAB93F8ECCE6851470CC47471DA7DC8BEAE7462E3955433C1BC9663C8EDEA823CA5916DFC24925B9D625862AA34BD045BF2
	204A1BAD8B5C46F7F422E48B31B3AED1320B45625E8EE58C1F21E3A401341704F6AC67B1ACCB42989EF60BE1FE059443C7BB51172EA434DB98B106D9DEE2B88E6AE9D64470C65AC6A060415C4E8FF98CE7F06C71AF50F64DC7E8CB6A17A345B0CB9643520F14B1EC7A48BD06BB8D4A986E2357C3ADA0277F886D485B06F60C7D88E3583CCD99434ACAA906115B5017F0EEF7523611E21863A50631D0CF39A206A6FAED988F38100CF6FEFA1C0FF10EB90F236D7AE434A56478C8B14C114550BFD9994340E47798CE
	69D24670C5FAED9C8CF2E15C0E4DBC063313B1067FF00B212DCA0A61CC9E433C0F79FC3FFD249866FA09E19D5433D8E17700C056055DB6873B91C877EF7A8938B7CB8772C620C020500F591EE8269717B2FC4FE8DAAA6ACD83D932E7B486BE6395FA27525457153F20576A591F40B57DA7A89B1126FE3E18C1E5F5A05776894676F2BA6E7D20BC0E6B973B65F5834D6B8860CF63B2EDDB5457D8F6FA2D1FGF25973B07637ED99A976A44EB8175602DE4BBC96FB7A5E62BCE94F82EB5BEC156D0125FBAE1BCE33B7
	77987F2EA177BD308AA1DE0F096D5D447D2D27DDA6E7E3BFC8A13F2D413D1D96075966B03B4EB1FE45B155F6D0C84A152FD63A55536AB07775199C07CE8FF45374E1F2DF34FA10BBACDEFE08F227F3481E6D832D107C32E655E5CF342ED333514DGA63BF2DF9EEF7FF83F494AC4992F4039D4106D8D1558623E505FDDF05FD3C85F831807FB7E222A5D778C923E9F67F78F5BF7C97863B97F32CEB5FE88679F9D36A71170A3B93FD2357E991CFFE9039ABF16735BB4F2FE72BC46AF9412C47E5375EA6DD7F17EEB
	EDEA756BB87F6DF677BD11045F85FCB62E56F560B8F781467A64F807F28E7CF535407BBD2243439C405642D0C7882FA72642731AB111DEE7C7036CECAEDF562E1C9F8E306B7314244CB5C0EC4C7B350DB466178A52F5147BFC2B03FACE8952F9E429303CC3FDFDD8426EA5013CB1856D5BD729346F84DD9F0C83FEE08A46732D6FB11ED1DCEF7D10B21ECF5610F80A7E8C0D644FE2414BB5AE3431D0101F033F27EBBCCDEAD2E6DEAA46AC35E3246B3745321855021E7C5C5A82E57CCE81664F03151E7B75C59A93
	BD6874737627370F543E37BE8B00FA887F91FECD3432D2BD87F732759A480724E26C2BBB557B779B3A5E0BA63EF2598D156A6742EADAEFDEDAD2E6E19A4ABA683C50E39B305B2CA0FB58E1067F74B4A05ED3E0774DC0DE4FF57E2B5DF35C42E82E8700EC90177FC5057A39703F685809823918B40C714C0A1156CF39323C4F53A87B38904A578A6C5DC75676F56D6AF11BC46DAC8579DA8D5A79F8B93B3FE5F6115BDECCAE06E274BC4B65FEDE219E5F89549F974879F359E4AFF347B276DC87E4A3397CDF5B54E3
	35005A9B87F2C2BA462A5EEBBEE6894AB5DBE93AB2D6CDD03ED9912B5E8A75D8DD20FE35003C9EE83D18678443BF715D1A96ADFC72FD680D18D4A52D07DB3E2B57B56FBB74751EC32DEC6EF056CAFA1547C81D9E76306F5C392BD83B33EC2B4074FE730524F77C226FFADB9BA43D735D9B5D757642E4D83451E8B6D8ECFD9B0B3525203AEBABFBB7CB5D57286E8D6A3E6A766CED151C95546BE0B6FD33079C33FD1B2FE7633E4DB53F3FC9E8FAF1CE8AF92FCCED5F269F7481791CA1FE127D35033A74F4D667C7FB
	A59BB5853E47E75DFEC9EFF275BA4FFAE5D5455ADD25DBD1B6234657B8B079569A5FF3243ED90A157100E4DFD111977B4ACBC57B185EAF8FCAFA0D97FD776B0A0B23736B650B3E7BF51BCE726B292FA57BDE6F705D2F0F8EC9FA111523686796C9AFC56F3B5E79A312DED0072F63C73C266B70B5162C2D6B0FCA7109EC155ABDD96D0B3DCC36F494F9F669B1290D832308498347A53DC3BE5946744EF6C8FA6BAF0CAE1627AE0CAE1693BA25D8B61C105A6D98051F7F7D1D24B758B9BAFB27F67A528F62F38D7D68
	FC1B52A579B65BA059F8155771303B828652EE4C13D915239B67C5D53E78B3FC4E1F7B9533F3C10FE4F30FC9BE76C797574FC69157D7BBC79757CBFBA59BEF6D13ECFCF894F1DDD4B53A3846FC7163627AE23FE47343B64966D7360EAE2E1FEE73BD2EAFEE9BDDDC5F32CBB6AEF4C8B63E6FF57D230C6B1747C797574B0E7F383896BBA51B2FBEAD59BCF714F12D9DC5DC63C69957FB4E903B589E7290813F27ABFBFED2E693903B9EFBFBAD18227A3DA3FD274DA527DDE6CBCDCD2B59E5B1B560ADCB76AED4BC0D
	89D9078DC1DD6C5D2C0DA9240DB0A8C7814D86E2EDEFCF45F7051281ABDB10A43ECF65CC45BAAC8B300E9B286CC4D2861A31405B3AFAC21AAF31E331F8692C24F73CC36BB92F4ACAC9871516EEE5FA490312DE2641CBBE6E5EDDDE2C2D2E44F3C35B7712DE79169F3F2E7E65169F3E2E1E7B1567BC3EF4C860FD7AAAFDDEC72E0D62F89F255167E8E4AD5E120158F59D0879F3EC8AFFD7B112E31771776A8A97A2E6253A4496BD479EE8C0ACF2A1666566A2457B34527B017C6EA5533DD2435B48447A529B9053F3
	ECD9BBE2819CE3774648B5F3D4A6DEE716F7781ED3377ECB6A1F87ABFCDFB7C4DD107416347B2E27AD17748CED3E669453ED2C10662B5ECA291E48D1587D106CBE61246FC7B74FFD7C3D6FF1FD33C632B5C3F6BDBC59EB2CF66FE667834F393E7D8B295EC3DFCA755E5E6E6D7A27DAF1FDF126CE2A633AFA290E024E912ED1AA24BAA2E4575CD7D6F8EB9B744ACB3D4E8BAD153E4775FF9AA53DB36D5BD575E4B73A585452FA783BA34D7B76370A36CF5FA34BC12F39D3D96E29BFD07F4E0A9FB327B1FB5E5FAB75
	47F25935FAF0799A4F36C1D8CB37B2398F4B693DDB47E913E7BBA7D5789E636AE6C96F29369F971FF56DBFBEBE7A83D2FCAE4A2E796FED9BA9BE6C3D14819D39172649CA4A5482B58169016CC07EC001C021C0D301E6814583E5E4A7E52E81AA852A83EA856A87E2FB60FE33072CB7BC3D57ACFEE182FD1945E1E05F074576325EA90C745E6FD0F6124A7BEB11A36A2D93065FCBDDACA40E2867CE6C9D3E5F50B550F830C5799E75EFA9BED1063335D1D18A2E0DC201171F13A46EBB5E197A433EF3762B9F28B7B8
	EABD665732B4E27FE00E3B3F6BA86E17636E6FADFCADB88EF8715C5FBFDDF0FF7F2BEDD1D226E5916B53B10B12D477BF87G9E6C460B007274C5EA3910D103BE4E967989B2396CDC4871DCB53D7FD63CABDB86B27B0174222CBDF738EDCC6F51E16FA67B016CF8D1BEC4C50FD0A460B35CF831D0CED6356DCA7E3EE4DE9E639766C9F2D5F02C4BD353F3F6385B5685F2AED156DF7C8CF4538D0572D4B7AC9A4AF1C04262A4377D678FB53837118FB2C522DC2D785932D8D91F914A03EE58D8A88781058DEBA3C003
	7ECF93F933E4B2F361D833C44D7F4C8654DBA1720BE5F2F5F05C2A2A37CA71DD577DA0B384B4CE141D3844D3AEEC62B994AE4AC449E4E3D474446F9056F95E1B6C2F9BF9EF72D5BA7577782E558DFF0FAFD0277E9E5F0D747BE370BDBE065D22A36B74BE182F5B38DC88475AB9B60956C93063E6232B1F631329DD845FEFA28DA27EG356BAC455AC46CA19956AEE20F6948FE98F0395F66C05DA89DFDFEEB36D8D8F9BA15B1DB1DA6970F47CCEA2359EE10597DB247085DE40FC41A9039B4076ADA4CD6D3A37B16
	E75E1701E47A920FEF169D17247C7B5F135D777F200D55E912CF053263BF247E7B5BFE745F5A86FB87C0C377C04743184BDE1A046F76D1CC8B65D20E5DC731DAA837F26C37ECDFA9147DB896CF77000E07F2B0474672F758A2B8B6074AE567A7E59666A3361E56C75E85296218C10F7669B896425F636B6258AF681E5BD0A8CF63585D9DE84BAC0E5D5A0E754D65D8FCBB7A2BD946E3405F214C63D8ECA76AF6F1EC379EF5DD9C8B50E32C46F06C198A0CD5G47A63473D8F16C897E9ECE8447DABAB1D6594B917B
	9D3D1F2005F2AD47F2BB503E960EF5F0BF0C9C2B66318A6358B5DCF79A47E2BA5037D99C2B6FC45FE2B9F6125A128CE5ED81E28FD6223FE59C3B117B3B1FE3D7F3FF759C7B26837D8D615886FA9FA3924AB19C1B5D00B647F3ECC7A341B2D6A4E52ED8417B2391EDAE64587DC634390AE373CDE8330EE3D757234DDD9CAB4BC51BDD9CFBE5BB5ABC15E3EBB543ED7EBD4522C1A61E4B75723C4AD80958A4BEE656F0AC4F047DE6D9290C8B99B3E3B83651087585F0EC40087585F36C41FA2CAF01E3BBF99FE52FC2
	AC3D8D6B53F22C05E2E5D0EE62585D3CAFDBB8D6435FF98C6258548A2CAF0CE3391528BBED955EFFDAFDD1FD8F45EEBA972DD81D14D93C9AE5AD97157B0E1A8F11391A711E3D283E07669DDACF9B54E164755C63655D89762E40B8108D6472D9A7147B24B61CA0B25300BFE3B56E4138496BFB92249E793BB01AB52087C43E6F023E8B83479F4E1BB7AF077B23B9213E87E38DED3B9064CB57609E2D7D54E6BDA9F36CB2BD46AFE08D5A787008FB4C3D5998894764E608745E4B04EA75185FC9671EA8100F66763C
	C6F3C433B6A9B3EFADE24F35230DF500094FC48F13BEE576DA3C6E73DAB0023D9628135877B144D5FCDF0047E41037B701BE87E77C8758BBB1408B65B6A630F76F209C4B3107295D796BE02C2C43583E6EF59F1F7B3BD06E3636C0BDEF0B7D4F5AE06FFF6B816FDF07F9780017FDEAAF503195G32C16B504E2A8E74B70A5B79CF2FB14D9A414E842867F3B187D89B5D342FB56B21DF57E33B8F72F6EB57E31C9F78C60A73C96ADBBF70DC6B51371FD51235BDACEE4D67E11C99AC6436B73EB108FA6C1DFDE2DF90
	EF6BED0AC5C1B91AE3CF527E51E841A6AD7AFD1B577EC993146F61387BDD87755C22681F7354C79D60EDDA74212AE1294207FA1C55C41DA38DE83F1F96ED4DE944D80572FA76B6AA673918A3329C257233C0B61657B15B087566EFC0EC87BD0F54C1D9473188FAAE9804325F860C4B415C513C8B679E17B0286797627BC92C8D8D7D8E14C84023B620BF8FE9BC676DAB74DC19C06C5908F6DE5909B1A95D08F6CE73BA3FE63959295F2834538EE5653B9D55B4BEC3007B73F68F507E8903F2A4478E9A5116B8EE0B
	1FF1B46FF48D1B6BB7C97328184334DF8A81AF5D046DF630F708C919E3A5EDE84B78CD985B3EB6E52E2451FDB24C4E2891F3BE4D0B1DD3B731FBD58B391DBDB4672783BE0B5BB42782ED4AA84478EC299CA9BEE902749EC3D921325D7DD07E2DF86C79DE7101D16C335A722D2497D0636D9EF569EE79731FE659FE20F73C6E13D16A5D5CA6690D71F91F0C677D01535A2563F7E5FB066E703A57C8E953A23D24F7CC6F65998CF92CAB5B7FF6035E77B86FBCA159597A8F293DBD5E763315A977335D5FA569DD5FBE
	3AE7EE6F347BEE6BEB32FDC2C52370B125C7521B6A75F910B27E05C6C96FCA2F4F7514FAE3FAA53D87C7798C7476BE29BF1E6D176A29703AFFC759FE3CD95253F86B475D250A3CB9BC0A674A8527A4BBEBACD2FB39A3654DEE293D1923E86F44005446F7DEE3D136DB3E1770AEAAABFBBCDFF2147C472FA2F35267D458EFD6290DEB3D76F719A25E2F4B76DF7CF2147D2DB9AF4571D359FE0C658D3E7BE8EE7045C7A6DB5868FB4C8F8CC976049AFD3767A3236FB19F106DCF702F77BD660FDF144D8539230BF91C
	EC1E4ECD156AD922713D7DDDE912DE2737676AEEE36CF7BE6D7D737C2C74DB0DE47B6F67CBB6CC2A77FD3EFEFA0124D7E0747D3C52ED74BDF75E4B106C4C4F145A1B52663B1D76ECC9AF7178684EABFB5AFC37756A9C4956FB96C9ED5E6B6DDC312B34DC3E37CF63539E874F7D7A92F904A2305F59556C88DDA288A1F304F427C3D8B23C6D7AABDEFAB1643B267CD4A135D9185FCF1FB9B48B69E749430BC1BB1C6FEE877A35CB4893FF9FC5AB7EEEC60DCB18DFB4E03616ECF541B58C79A991AD7BBD90E0ACE7E5
	7A4BA0DA726B98DA72BDB140487B5AB02815B1096CD11741C13E86D0D4670CFC72054C8650BDE2F212AA48AFECG3CFA1F43F65A2EEDB4588DBDE657B9AD7F7D8E6DE622345FF6D66B32E949AFFFE8C50BEB1C7F946886A43A7A343B159CC20EA2899E39217C2D28570EB95304794D42CAF24F67A858C53EBE54E4ECB2387037A9778A8B6D64772B4835CC3320F1520FF4276B1C45249372FB0F105FEBF33ACC46FA7C32C327CBD826A3AD6DA0FB8CF76CB7B87B695BC51F6B840D157C0A26300431AD86EB5F8E76
	AD251F138E90D26A6B283DB401415E2554DED2CB892FE5697D391BB79C189D1EA6246E95B2ADB603F12F2147E5F3B48B8BDD7D8E13335FE6B18E5A3FE295E51CA5A9C33FCEG2ADB4D5DA74E16106BEEEE7429416B476644666CA53F126C90F6D0C9F229D142A548EB328EE84A64E8F611DF8535B98AB96FE76BDCDB1E5AD720CF95D2C4A7C968F3876D10BA3D068133659C9CB451A1C7BBE5298B2CF5982C4EDE1BE3GAC533AD906AC5EC049550F17DEF3EBD287EDC0D2F5896BD9A8C1F5C71F49B630233E3757
	ECB5718AA02ED07DDADEBD11A9F113D9B2F8553283B367F5C39EB489E9832525747FCE7AFF97793F13A2BBA932F39784F72E60754F1DBF08BE536481FBF229BD247BCB76C28F3ADE1E73780D2F544E0D836F768A6974575D209372A4A976D27225A1572C4D8A08391C74111D244AA02937E01057C8BCEC264F84E34E6C2EC9FB632634D4C183E31DBDA30564A58FBAA1F99DEC6827415021F9C7CE88E432A54FF173BC0CA1724EE0A9AD954211C6F40DE8E6ABE4F6F950C815E924FB50D09B352414B3ECEC90F471
	70A4A770B21EEA2434020A2E227F570E3A630856FA2A3B0147FB67A077C971B72297BFE11FBE17FC42DCA0FB19967C546DEE146CCE976DCED358CD4E0C7E0A9CA419CBAE1652FEFA5E68A4EF96085E1071117E1F694D377FDF754DBFC67286AE7AD346711281CA07FFFADE74C9DE74081EFC4963CD7E7EA3E6AB3B64854918CCD1F67ECF5D6EC1496E05225DE4972CC6B1A2AED178C66448AD4DD44599F3A717A1B9C83EA9E702229E3231DCBA2B122F1DABD22C025436C4BF7A67DB765C90589385EB10E6A14BA6
	B1588AC1E1639D43C66DC4C11EC5820F343A46FC51ABB78DF269C13FC0C50B5FCBA33F74C09EFE178C70F2456FEC513275119CE15F79C290723DAC64C20129ABAF917AD4CABF291439E6D051557860B6450397A4B9B68D5350A8B472E9BA7C64BC8DD2CE307868A07DBF2B3FEED5769712377EDA2750A0FD152150A0B7BE0A947AD72A14FED2D138C70A82FE75844D43913D78897B94A979C4A6B452D7443E8C8FDEA8FB16C481FBD62310A9D214B68D0B1B460346CFAAB6CFABCF48437B1BC46CA9AE13A2C8DF8F
	24E15F053175227C376692AE497678BB159115ECBF7174CA693BB0587B9C3174FBDB322B12B20B2A701D0C2A724F844F3FB3F3F440E031388C16D375D6A3794D1906F3AE13749B97F34AC97DCE1491190C97DFCE6CBEA95379DFD0CB878899D4525D18A9GGC80BGGD0CB818294G94G88G88G95CBE4AF99D4525D18A9GGC80BGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG52A9GGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private String getChangeCondition( String change )
{

	if( change.equalsIgnoreCase("After a Duration") )
	{
		return LMProgramDirectGear.CHANGE_DURATION;
	}
	else if( change.equalsIgnoreCase("Priority Change") )
	{
		return LMProgramDirectGear.CHANGE_PRIORITY;
	}
	else if( change.equalsIgnoreCase("Above Trigger") )
	{
		return LMProgramDirectGear.CHANGE_TRIGGER_OFFSET;
	}	
	else
		return LMProgramDirectGear.CHANGE_NONE;

}
/**
 * Return the JComboBoxCycleCountSndType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxCycleCountSndType() {
	if (ivjJComboBoxCycleCountSndType == null) {
		try {
			ivjJComboBoxCycleCountSndType = new javax.swing.JComboBox();
			ivjJComboBoxCycleCountSndType.setName("JComboBoxCycleCountSndType");
			ivjJComboBoxCycleCountSndType.setPreferredSize(new java.awt.Dimension(120, 23));
			ivjJComboBoxCycleCountSndType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxCycleCountSndType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_FIXED_COUNT ) );
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_COUNT_DOWN ) );
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_LIMITED_COUNT_DOWN ) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxCycleCountSndType;
}
/**
 * Return the JComboBoxHowToStop property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHowToStop() {
	if (ivjJComboBoxHowToStop == null) {
		try {
			ivjJComboBoxHowToStop = new javax.swing.JComboBox();
			ivjJComboBoxHowToStop.setName("JComboBoxHowToStop");
			ivjJComboBoxHowToStop.setPreferredSize(new java.awt.Dimension(75, 23));
			ivjJComboBoxHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHowToStop;
}
/**
 * Return the JComboBoxMaxCycleCount property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxMaxCycleCount() {
	if (ivjJComboBoxMaxCycleCount == null) {
		try {
			ivjJComboBoxMaxCycleCount = new javax.swing.JComboBox();
			ivjJComboBoxMaxCycleCount.setName("JComboBoxMaxCycleCount");
			ivjJComboBoxMaxCycleCount.setPreferredSize(new java.awt.Dimension(136, 23));
			ivjJComboBoxMaxCycleCount.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxMaxCycleCount.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxMaxCycleCount.addItem( com.cannontech.common.util.CtiUtilities.STRING_NONE );
			for( int i = 1; i <= 63; i++ )
				ivjJComboBoxMaxCycleCount.addItem( new Integer(i) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxMaxCycleCount;
}
/**
 * Return the JComboBoxPeriodCount property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxPeriodCount() {
	if (ivjJComboBoxPeriodCount == null) {
		try {
			ivjJComboBoxPeriodCount = new javax.swing.JComboBox();
			ivjJComboBoxPeriodCount.setName("JComboBoxPeriodCount");
			ivjJComboBoxPeriodCount.setPreferredSize(new java.awt.Dimension(136, 23));
			ivjJComboBoxPeriodCount.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxPeriodCount.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			for( int i = 1; i <= 63; i++ )
				ivjJComboBoxPeriodCount.addItem( new Integer(i) );

			//default value
			ivjJComboBoxPeriodCount.setSelectedItem( new Integer(8) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxPeriodCount;
}

/**
 * Return the JComboBoxSendRateDigits property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSendRateDigits() {
	if (ivjJComboBoxSendRateDigits == null) {
		try {
			ivjJComboBoxSendRateDigits = new javax.swing.JComboBox();
			ivjJComboBoxSendRateDigits.setName("JComboBoxSendRateDigits");
			ivjJComboBoxSendRateDigits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxSendRateDigits.setComponentOrientation(java.awt.ComponentOrientation.LEFT_TO_RIGHT);
			ivjJComboBoxSendRateDigits.setPreferredSize(new java.awt.Dimension(75, 23));
			ivjJComboBoxSendRateDigits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxSendRateDigits.setMinimumSize(new java.awt.Dimension(0, 0));
			ivjJComboBoxSendRateDigits.setEditable(true);
			// user code begin {1}
			NewComboBoxEditor ncb = new NewComboBoxEditor();
			ncb.getJTextField().setDocument( 
				  new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 1000) );
         	ivjJComboBoxSendRateDigits.setEditor( ncb );
			
			ivjJComboBoxSendRateDigits.addItem("0");
			ivjJComboBoxSendRateDigits.addItem("1");
			ivjJComboBoxSendRateDigits.addItem("2");
			ivjJComboBoxSendRateDigits.addItem("5");
			ivjJComboBoxSendRateDigits.addItem("8");
			ivjJComboBoxSendRateDigits.addItem("10");
			ivjJComboBoxSendRateDigits.addItem("15");
			ivjJComboBoxSendRateDigits.addItem("20");
			ivjJComboBoxSendRateDigits.addItem("30");
			ivjJComboBoxSendRateDigits.addItem("45");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSendRateDigits;
}
/**
 * Return the JComboBoxSendRateUnits property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSendRateUnits() {
	if (ivjJComboBoxSendRateUnits == null) {
		try {
			ivjJComboBoxSendRateUnits = new javax.swing.JComboBox();
			ivjJComboBoxSendRateUnits.setName("JComboBoxSendRateUnits");
			ivjJComboBoxSendRateUnits.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxSendRateUnits.setComponentOrientation(java.awt.ComponentOrientation.LEFT_TO_RIGHT);
			ivjJComboBoxSendRateUnits.setPreferredSize(new java.awt.Dimension(75, 23));
			ivjJComboBoxSendRateUnits.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxSendRateUnits.setMinimumSize(new java.awt.Dimension(0, 0));
			// user code begin {1}
			ivjJComboBoxSendRateUnits.addItem("minutes");
			ivjJComboBoxSendRateUnits.addItem("hours");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSendRateUnits;
}
/**
 * Return the JComboBoxWhenChange property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxWhenChange() {
	if (ivjJComboBoxWhenChange == null) {
		try {
			ivjJComboBoxWhenChange = new javax.swing.JComboBox();
			ivjJComboBoxWhenChange.setName("JComboBoxWhenChange");
			ivjJComboBoxWhenChange.setPreferredSize(new java.awt.Dimension(205, 23));
			ivjJComboBoxWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			ivjJComboBoxWhenChange.addItem("Manually Only");
			ivjJComboBoxWhenChange.addItem("After a Duration");
			ivjJComboBoxWhenChange.addItem("Priority Change");
			ivjJComboBoxWhenChange.addItem("Above Trigger");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxWhenChange;
}
/**
 * Return the JCSpinFieldChangeDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeDuration() {
	if (ivjJCSpinFieldChangeDuration == null) {
		try {
			ivjJCSpinFieldChangeDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeDuration.setName("JCSpinFieldChangeDuration");
			ivjJCSpinFieldChangeDuration.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeDuration.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeDuration.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(3)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeDuration;
}
/**
 * Return the JCSpinFieldChangePriority property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangePriority() {
	if (ivjJCSpinFieldChangePriority == null) {
		try {
			ivjJCSpinFieldChangePriority = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangePriority.setName("JCSpinFieldChangePriority");
			ivjJCSpinFieldChangePriority.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJCSpinFieldChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangePriority.setMaximumSize(new java.awt.Dimension(40, 30));
			// user code begin {1}
			ivjJCSpinFieldChangePriority.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(9999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangePriority;
}
/**
 * Return the JCSpinFieldChangeTriggerNumber property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeTriggerNumber() {
	if (ivjJCSpinFieldChangeTriggerNumber == null) {
		try {
			ivjJCSpinFieldChangeTriggerNumber = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeTriggerNumber.setName("JCSpinFieldChangeTriggerNumber");
			ivjJCSpinFieldChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(35, 20));
			ivjJCSpinFieldChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJCSpinFieldChangeTriggerNumber.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(1), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(1)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeTriggerNumber;
}
/**
 * Return the JCSpinFieldControlPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldControlPercent() {
	if (ivjJCSpinFieldControlPercent == null) {
		try {
			ivjJCSpinFieldControlPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldControlPercent.setName("JCSpinFieldControlPercent");
			ivjJCSpinFieldControlPercent.setPreferredSize(new java.awt.Dimension(48, 20));
			ivjJCSpinFieldControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldControlPercent.setMaximumSize(new java.awt.Dimension(50, 20));
            ivjJCSpinFieldControlPercent.setMinimumSize(new java.awt.Dimension(48, 20));
			// user code begin {1}
			ivjJCSpinFieldControlPercent.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(50)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldControlPercent;
}
/**
 * Return the JCSpinFieldCyclePeriod property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldCyclePeriod() {
	if (ivjJCSpinFieldCyclePeriod == null) {
		try {
			ivjJCSpinFieldCyclePeriod = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldCyclePeriod.setName("JCSpinFieldCyclePeriod");
			ivjJCSpinFieldCyclePeriod.setPreferredSize(new java.awt.Dimension(48, 20));
			ivjJCSpinFieldCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJCSpinFieldCyclePeriod.setMaximumSize(new java.awt.Dimension(50, 20));
            ivjJCSpinFieldCyclePeriod.setMinimumSize(new java.awt.Dimension(48, 20));
			// user code begin {1}
			ivjJCSpinFieldCyclePeriod.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(1), new Integer(945), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(30)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldCyclePeriod;
}
/**
 * Return the JCSpinFieldPercentReduction property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldPercentReduction() {
	if (ivjJCSpinFieldPercentReduction == null) {
		try {
			ivjJCSpinFieldPercentReduction = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldPercentReduction.setName("JCSpinFieldPercentReduction");
			ivjJCSpinFieldPercentReduction.setPreferredSize(new java.awt.Dimension(49, 20));
			ivjJCSpinFieldPercentReduction.setMaximumSize(new java.awt.Dimension(50, 60));
			ivjJCSpinFieldPercentReduction.setMinimumSize(new java.awt.Dimension(40, 50));
			// user code begin {1}
			ivjJCSpinFieldPercentReduction.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(100)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			ivjJCSpinFieldPercentReduction.setValue( new Integer(100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldPercentReduction;
}
/**
 * Return the JLabelChangeDuration property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeDuration() {
	if (ivjJLabelChangeDuration == null) {
		try {
			ivjJLabelChangeDuration = new javax.swing.JLabel();
			ivjJLabelChangeDuration.setName("JLabelChangeDuration");
			ivjJLabelChangeDuration.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeDuration.setText("Change Duration:");
			ivjJLabelChangeDuration.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeDuration.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeDuration;
}
/**
 * Return the JLabelChangePriority property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangePriority() {
	if (ivjJLabelChangePriority == null) {
		try {
			ivjJLabelChangePriority = new javax.swing.JLabel();
			ivjJLabelChangePriority.setName("JLabelChangePriority");
			ivjJLabelChangePriority.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangePriority.setText("Change Priority:");
			ivjJLabelChangePriority.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangePriority.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangePriority;
}
/**
 * Return the JLabelChangeTriggerNumber property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerNumber() {
	if (ivjJLabelChangeTriggerNumber == null) {
		try {
			ivjJLabelChangeTriggerNumber = new javax.swing.JLabel();
			ivjJLabelChangeTriggerNumber.setName("JLabelChangeTriggerNumber");
			ivjJLabelChangeTriggerNumber.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerNumber.setText("Trigger Number:");
			ivjJLabelChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerNumber.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerNumber;
}
/**
 * Return the JLabelChangeTriggerOffset property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerOffset() {
	if (ivjJLabelChangeTriggerOffset == null) {
		try {
			ivjJLabelChangeTriggerOffset = new javax.swing.JLabel();
			ivjJLabelChangeTriggerOffset.setName("JLabelChangeTriggerOffset");
			ivjJLabelChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelChangeTriggerOffset.setText("Trigger Offset:");
			ivjJLabelChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerOffset.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerOffset;
}
/**
 * Return the JLabelControlPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlPercent() {
	if (ivjJLabelControlPercent == null) {
		try {
			ivjJLabelControlPercent = new javax.swing.JLabel();
			ivjJLabelControlPercent.setName("JLabelControlPercent");
			ivjJLabelControlPercent.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelControlPercent.setText("Control Percent:");
			ivjJLabelControlPercent.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelControlPercent.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelControlPercent.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlPercent;
}
/**
 * Return the JLabelCycleCntSndType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCycleCntSndType() {
	if (ivjJLabelCycleCntSndType == null) {
		try {
			ivjJLabelCycleCntSndType = new javax.swing.JLabel();
			ivjJLabelCycleCntSndType.setName("JLabelCycleCntSndType");
			ivjJLabelCycleCntSndType.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCycleCntSndType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelCycleCntSndType.setText("Cycle Count Send Type:");
			ivjJLabelCycleCntSndType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCycleCntSndType;
}
/**
 * Return the JLabelCyclePeriod property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCyclePeriod() {
	if (ivjJLabelCyclePeriod == null) {
		try {
			ivjJLabelCyclePeriod = new javax.swing.JLabel();
			ivjJLabelCyclePeriod.setName("JLabelCyclePeriod");
			ivjJLabelCyclePeriod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelCyclePeriod.setText("Cycle Period:");
			ivjJLabelCyclePeriod.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCyclePeriod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelCyclePeriod.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCyclePeriod;
}
/**
 * Return the JLabelHowToStop property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHowToStop() {
	if (ivjJLabelHowToStop == null) {
		try {
			ivjJLabelHowToStop = new javax.swing.JLabel();
			ivjJLabelHowToStop.setName("JLabelHowToStop");
			ivjJLabelHowToStop.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelHowToStop.setText("How to Stop Control:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHowToStop;
}
/**
 * Return the JLabelMaxCycleCnt property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxCycleCnt() {
	if (ivjJLabelMaxCycleCnt == null) {
		try {
			ivjJLabelMaxCycleCnt = new javax.swing.JLabel();
			ivjJLabelMaxCycleCnt.setName("JLabelMaxCycleCnt");
			ivjJLabelMaxCycleCnt.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMaxCycleCnt.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelMaxCycleCnt.setText("Max Cycle Count:");
			ivjJLabelMaxCycleCnt.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxCycleCnt;
}
/**
 * Return the JLabelMin property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMin() {
	if (ivjJLabelMin == null) {
		try {
			ivjJLabelMin = new javax.swing.JLabel();
			ivjJLabelMin.setName("JLabelMin");
			ivjJLabelMin.setText("(min.)");
			ivjJLabelMin.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelMin.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelMin.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMin.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelMin.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMin;
}
/**
 * Return the JLabelMinutesChDur property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutesChDur() {
	if (ivjJLabelMinutesChDur == null) {
		try {
			ivjJLabelMinutesChDur = new javax.swing.JLabel();
			ivjJLabelMinutesChDur.setName("JLabelMinutesChDur");
			ivjJLabelMinutesChDur.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutesChDur.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelMinutesChDur.setText("(min.)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutesChDur;
}
/**
 * Return the JLabelPercentReduction property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPercentReduction() {
	if (ivjJLabelPercentReduction == null) {
		try {
			ivjJLabelPercentReduction = new javax.swing.JLabel();
			ivjJLabelPercentReduction.setName("JLabelPercentReduction");
			ivjJLabelPercentReduction.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPercentReduction.setText("Group Capacity Reduction %:");
			ivjJLabelPercentReduction.setMaximumSize(new java.awt.Dimension(160, 14));
			ivjJLabelPercentReduction.setPreferredSize(new java.awt.Dimension(160, 14));
			ivjJLabelPercentReduction.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPercentReduction.setMinimumSize(new java.awt.Dimension(160, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPercentReduction;
}
/**
 * Return the JLabelPeriodCount property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPeriodCount() {
	if (ivjJLabelPeriodCount == null) {
		try {
			ivjJLabelPeriodCount = new javax.swing.JLabel();
			ivjJLabelPeriodCount.setName("JLabelPeriodCount");
			ivjJLabelPeriodCount.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPeriodCount.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPeriodCount.setText("Starting Period Count:");
			ivjJLabelPeriodCount.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPeriodCount;
}
/**
 * Return the JLabelSendRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSendRate() {
	if (ivjJLabelSendRate == null) {
		try {
			ivjJLabelSendRate = new javax.swing.JLabel();
			ivjJLabelSendRate.setName("JLabelSendRate");
			ivjJLabelSendRate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelSendRate.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelSendRate.setText("Command Resend Rate:");
			ivjJLabelSendRate.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSendRate;
}
/**
 * Return the JLabelWhenChange property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelWhenChange() {
	if (ivjJLabelWhenChange == null) {
		try {
			ivjJLabelWhenChange = new javax.swing.JLabel();
			ivjJLabelWhenChange.setName("JLabelWhenChange");
			ivjJLabelWhenChange.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelWhenChange.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelWhenChange.setText("When to Change:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelWhenChange;
}
/**
 * Return the JPanelChangeMethod property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelChangeMethod() {
	if (ivjJPanelChangeMethod == null) {
		try {
			ivjJPanelChangeMethod = new javax.swing.JPanel();
			ivjJPanelChangeMethod.setName("JPanelChangeMethod");
			ivjJPanelChangeMethod.setLayout(new java.awt.GridBagLayout());
			ivjJPanelChangeMethod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanelChangeMethod.setMaximumSize(new java.awt.Dimension(300, 75));
			ivjJPanelChangeMethod.setPreferredSize(new java.awt.Dimension(300, 75));
            ivjJPanelChangeMethod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJPanelChangeMethod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelChangeDuration = new java.awt.GridBagConstraints();
			constraintsJLabelChangeDuration.gridx = 1; constraintsJLabelChangeDuration.gridy = 2;
			constraintsJLabelChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeDuration.ipadx = -5;
			constraintsJLabelChangeDuration.ipady = 6;
			constraintsJLabelChangeDuration.insets = new java.awt.Insets(1, 5, 3, 5);
			getJPanelChangeMethod().add(getJLabelChangeDuration(), constraintsJLabelChangeDuration);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeDuration.gridx = 2; constraintsJCSpinFieldChangeDuration.gridy = 2;
			constraintsJCSpinFieldChangeDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeDuration.ipadx = 34;
			constraintsJCSpinFieldChangeDuration.ipady = 19;
			constraintsJCSpinFieldChangeDuration.insets = new java.awt.Insets(1, 5, 3, 4);
			getJPanelChangeMethod().add(getJCSpinFieldChangeDuration(), constraintsJCSpinFieldChangeDuration);

			java.awt.GridBagConstraints constraintsJLabelMinutesChDur = new java.awt.GridBagConstraints();
			constraintsJLabelMinutesChDur.gridx = 3; constraintsJLabelMinutesChDur.gridy = 2;
			constraintsJLabelMinutesChDur.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutesChDur.ipadx = 5;
			constraintsJLabelMinutesChDur.ipady = -2;
			constraintsJLabelMinutesChDur.insets = new java.awt.Insets(5, 5, 5, 3);
			getJPanelChangeMethod().add(getJLabelMinutesChDur(), constraintsJLabelMinutesChDur);

			java.awt.GridBagConstraints constraintsJLabelChangePriority = new java.awt.GridBagConstraints();
			constraintsJLabelChangePriority.gridx = 4; constraintsJLabelChangePriority.gridy = 2;
			constraintsJLabelChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangePriority.ipadx = -13;
			constraintsJLabelChangePriority.ipady = 6;
			constraintsJLabelChangePriority.insets = new java.awt.Insets(1, 3, 3, 3);
			getJPanelChangeMethod().add(getJLabelChangePriority(), constraintsJLabelChangePriority);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangePriority = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangePriority.gridx = 5; constraintsJCSpinFieldChangePriority.gridy = 2;
			constraintsJCSpinFieldChangePriority.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangePriority.ipadx = 29;
			constraintsJCSpinFieldChangePriority.ipady = 19;
			constraintsJCSpinFieldChangePriority.insets = new java.awt.Insets(1, 4, 3, 8);
			getJPanelChangeMethod().add(getJCSpinFieldChangePriority(), constraintsJCSpinFieldChangePriority);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerNumber.gridx = 1; constraintsJLabelChangeTriggerNumber.gridy = 3;
			constraintsJLabelChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerNumber.ipadx = -45;
			constraintsJLabelChangeTriggerNumber.ipady = 6;
			constraintsJLabelChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 21, 5);
			getJPanelChangeMethod().add(getJLabelChangeTriggerNumber(), constraintsJLabelChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerOffset.gridx = 4; constraintsJLabelChangeTriggerOffset.gridy = 3;
			constraintsJLabelChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelChangeTriggerOffset.ipadx = -63;
			constraintsJLabelChangeTriggerOffset.insets = new java.awt.Insets(8, 3, 23, 13);
			getJPanelChangeMethod().add(getJLabelChangeTriggerOffset(), constraintsJLabelChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJTextFieldChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJTextFieldChangeTriggerOffset.gridx = 5; constraintsJTextFieldChangeTriggerOffset.gridy = 3;
			constraintsJTextFieldChangeTriggerOffset.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldChangeTriggerOffset.weightx = 1.0;
			constraintsJTextFieldChangeTriggerOffset.ipadx = 26;
			constraintsJTextFieldChangeTriggerOffset.insets = new java.awt.Insets(4, 4, 21, 8);
			getJPanelChangeMethod().add(getJTextFieldChangeTriggerOffset(), constraintsJTextFieldChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeTriggerNumber.gridx = 2; constraintsJCSpinFieldChangeTriggerNumber.gridy = 3;
			constraintsJCSpinFieldChangeTriggerNumber.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldChangeTriggerNumber.ipadx = 34;
			constraintsJCSpinFieldChangeTriggerNumber.ipady = 19;
			constraintsJCSpinFieldChangeTriggerNumber.insets = new java.awt.Insets(4, 5, 21, 4);
			getJPanelChangeMethod().add(getJCSpinFieldChangeTriggerNumber(), constraintsJCSpinFieldChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelWhenChange = new java.awt.GridBagConstraints();
			constraintsJLabelWhenChange.gridx = 1; constraintsJLabelWhenChange.gridy = 1;
			constraintsJLabelWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelWhenChange.ipadx = 3;
			constraintsJLabelWhenChange.ipady = 4;
			constraintsJLabelWhenChange.insets = new java.awt.Insets(4, 5, 4, 5);
			getJPanelChangeMethod().add(getJLabelWhenChange(), constraintsJLabelWhenChange);

			java.awt.GridBagConstraints constraintsJComboBoxWhenChange = new java.awt.GridBagConstraints();
			constraintsJComboBoxWhenChange.gridx = 2; constraintsJComboBoxWhenChange.gridy = 1;
			constraintsJComboBoxWhenChange.gridwidth = 4;
			constraintsJComboBoxWhenChange.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxWhenChange.weightx = 1.0;
			constraintsJComboBoxWhenChange.ipadx = 79;
			constraintsJComboBoxWhenChange.insets = new java.awt.Insets(4, 5, 1, 17);
			getJPanelChangeMethod().add(getJComboBoxWhenChange(), constraintsJComboBoxWhenChange);
            ivjJPanelChangeMethod.setBorder(new EtchedBorder());
			// user code begin {1}
			jComboBoxWhenChange_ActionPerformed(null);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelChangeMethod;
}
/**
 * Return the JTextFieldChangeTriggerOffset property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldChangeTriggerOffset() {
	if (ivjJTextFieldChangeTriggerOffset == null) {
		try {
			ivjJTextFieldChangeTriggerOffset = new javax.swing.JTextField();
			ivjJTextFieldChangeTriggerOffset.setName("JTextFieldChangeTriggerOffset");
			ivjJTextFieldChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(30, 20));
			ivjJTextFieldChangeTriggerOffset.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTextFieldChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}
			ivjJTextFieldChangeTriggerOffset.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999.9999, 99999.9999, 4) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldChangeTriggerOffset;
}
/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	gear = (LMProgramDirectGear)o;
	
	if( getJComboBoxHowToStop().getSelectedItem() != null )
	{
		gear.setMethodStopType( 
			com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxHowToStop().getSelectedItem().toString() ) );
	}

	gear.setPercentReduction( new Integer( ((Number)getJCSpinFieldPercentReduction().getValue()).intValue() ) );

	gear.setChangeCondition( getChangeCondition(getJComboBoxWhenChange().getSelectedItem().toString()) );
	
	gear.setChangeDuration( new Integer( ((Number)getJCSpinFieldChangeDuration().getValue()).intValue() * 60 ) );
	gear.setChangePriority( new Integer( ((Number)getJCSpinFieldChangePriority().getValue()).intValue() ) );
	gear.setChangeTriggerNumber( new Integer( ((Number)getJCSpinFieldChangeTriggerNumber().getValue()).intValue() ) );
	
	if( getJTextFieldChangeTriggerOffset().getText() == null || getJTextFieldChangeTriggerOffset().getText().length() <= 0 )
		gear.setChangeTriggerOffset( new Double(0.0) );
	else
		gear.setChangeTriggerOffset( Double.valueOf(getJTextFieldChangeTriggerOffset().getText()) );

	com.cannontech.database.data.device.lm.SmartCycleGear s = (com.cannontech.database.data.device.lm.SmartCycleGear)gear;

	s.setControlPercent( new Integer( 
		((Number)getJCSpinFieldControlPercent().getValue()).intValue() ) );

	s.setCyclePeriodLength( new Integer( 
			((Number)getJCSpinFieldCyclePeriod().getValue()).intValue() * 60 ) );

	s.setStartingPeriodCnt( (Integer)getJComboBoxPeriodCount().getSelectedItem() );

	String sendRateString = (String)(getJComboBoxSendRateDigits().getSelectedItem()) + " " + (String)(getJComboBoxSendRateUnits().getSelectedItem());	
	s.setResendRate( com.cannontech.common.util.CtiUtilities.getIntervalSecondsValue( sendRateString ) );
	

	if( getJComboBoxMaxCycleCount().getSelectedItem() == null
			|| getJComboBoxMaxCycleCount().getSelectedItem() instanceof String )
	{
		s.setMethodOptionMax( new Integer(0) );
	}
	else
		s.setMethodOptionMax( (Integer)getJComboBoxMaxCycleCount().getSelectedItem() );

	s.setMethodOptionType( StringUtils.removeChars( ' ', getJComboBoxCycleCountSndType().getSelectedItem().toString() ) );
	
	if(getJCheckBoxNoRamp().isSelected())
		s.setFrontRampOption("NoRamp");
	
	return s;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {
    System.out.print(exception.getMessage());
	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJCSpinFieldChangeDuration().addValueListener(this);
	getJCSpinFieldChangePriority().addValueListener(this);
	getJCSpinFieldChangeTriggerNumber().addValueListener(this);
	getJCSpinFieldControlPercent().addValueListener(this);
	getJCSpinFieldCyclePeriod().addValueListener(this);
	getJCSpinFieldPercentReduction().addValueListener(this);
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxPeriodCount().addActionListener(this);
	getJComboBoxSendRateDigits().addActionListener(this);
	getJComboBoxSendRateUnits().addActionListener(this);
	getJComboBoxHowToStop().addActionListener(this);
	getJComboBoxCycleCountSndType().addActionListener(this);
	getJComboBoxMaxCycleCount().addActionListener(this);
	getJTextFieldChangeTriggerOffset().addCaretListener(this);
    getJCheckBoxNoRamp().addActionListener(this);

	// user code end
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try 
    {
		setName("SmartCycleGearPanel");
        setPreferredSize(new java.awt.Dimension(410, 350));
        
		java.awt.GridBagConstraints constraintJLabelControlPercent = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJCSpinFieldControlPercent = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJCSpinFieldCyclePeriod = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints consGridBagConstraints142 = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJLabelCycleCntSndType = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJLabelCyclePeriod = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJLabelMaxCycleCnt = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJComboBoxMaxCycleCount = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJComboBoxCycleCountSndType = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJLabelPeriodCount = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJComboBoxPeriodCount = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJPanelChangeMethod = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJLabelPercentReduction = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJLabelHowToStop = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJLabelSendRate = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJCSpinFieldPercentReduction = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJComboBoxHowToStop = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJComboBoxSendRateDigits = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJComboBoxSendRateUnits = new java.awt.GridBagConstraints();
		java.awt.GridBagConstraints constraintJCheckBoxNoRamp = new java.awt.GridBagConstraints();
        
//      constraint for "(min)" label, no one knows why he is here? so we won't paint him for now.
        
//        consGridBagConstraints142.ipady = -14;
//        consGridBagConstraints142.ipadx = -112;
//        consGridBagConstraints142.gridheight = -1;
//        consGridBagConstraints142.gridwidth = -1;
//        consGridBagConstraints142.gridy = 1;
//        consGridBagConstraints142.gridx = 1;
        
        constraintJCheckBoxNoRamp.insets = new java.awt.Insets(0,0,5,0);
        constraintJCheckBoxNoRamp.ipady = -3;
        constraintJCheckBoxNoRamp.ipadx = 200;
        constraintJCheckBoxNoRamp.gridwidth = 3;
        constraintJCheckBoxNoRamp.anchor = java.awt.GridBagConstraints.WEST;
        constraintJCheckBoxNoRamp.gridy = 1;
        constraintJCheckBoxNoRamp.gridx = 1;
        
        constraintJLabelControlPercent.insets = new java.awt.Insets(0,0,5,5);
        constraintJLabelControlPercent.anchor = java.awt.GridBagConstraints.WEST;
        constraintJLabelControlPercent.gridy = 2;
        constraintJLabelControlPercent.gridx = 1;
        
        constraintJCSpinFieldControlPercent.insets = new java.awt.Insets(0,0,5,5);
        constraintJCSpinFieldControlPercent.anchor = java.awt.GridBagConstraints.WEST;
        constraintJCSpinFieldControlPercent.gridy = 2;
        constraintJCSpinFieldControlPercent.gridx = 2;
        
        constraintJLabelCyclePeriod.insets = new java.awt.Insets(0,0,5,5);
        constraintJLabelCyclePeriod.anchor = java.awt.GridBagConstraints.WEST;
        constraintJLabelCyclePeriod.gridy = 3;
        constraintJLabelCyclePeriod.gridx = 1;

        constraintJCSpinFieldCyclePeriod.insets = new java.awt.Insets(0,0,5,5);
        constraintJCSpinFieldCyclePeriod.anchor = java.awt.GridBagConstraints.WEST;
        constraintJCSpinFieldCyclePeriod.gridy = 3;
        constraintJCSpinFieldCyclePeriod.gridx = 2;
        
        constraintJLabelCycleCntSndType.insets = new java.awt.Insets(0,0,5,5);
        constraintJLabelCycleCntSndType.anchor = java.awt.GridBagConstraints.WEST;
        constraintJLabelCycleCntSndType.gridy = 4;
        constraintJLabelCycleCntSndType.gridx = 1;
        
        constraintJComboBoxCycleCountSndType.insets = new java.awt.Insets(0,0,5,5);
        constraintJComboBoxCycleCountSndType.anchor = java.awt.GridBagConstraints.WEST;
        constraintJComboBoxCycleCountSndType.gridwidth = 2;
        constraintJComboBoxCycleCountSndType.gridy = 4;
        constraintJComboBoxCycleCountSndType.gridx = 2;
        
        constraintJLabelMaxCycleCnt.insets = new java.awt.Insets(0,0,5,5);
        constraintJLabelMaxCycleCnt.anchor = java.awt.GridBagConstraints.WEST;
        constraintJLabelMaxCycleCnt.gridy = 5;
        constraintJLabelMaxCycleCnt.gridx = 1;

        constraintJComboBoxMaxCycleCount.insets = new java.awt.Insets(0,0,5,5);
        constraintJComboBoxMaxCycleCount.anchor = java.awt.GridBagConstraints.WEST;
        constraintJComboBoxMaxCycleCount.gridwidth = 2;
        constraintJComboBoxMaxCycleCount.gridy = 5;
        constraintJComboBoxMaxCycleCount.gridx = 2;
        
        constraintJLabelPeriodCount.insets = new java.awt.Insets(0,0,5,5);
        constraintJLabelPeriodCount.anchor = java.awt.GridBagConstraints.WEST;
        constraintJLabelPeriodCount.gridy = 6;
        constraintJLabelPeriodCount.gridx = 1;
        
        constraintJComboBoxPeriodCount.insets = new java.awt.Insets(0,0,5,5);
        constraintJComboBoxPeriodCount.anchor = java.awt.GridBagConstraints.WEST;
        constraintJComboBoxPeriodCount.gridwidth = 2;
        constraintJComboBoxPeriodCount.gridy = 6;
        constraintJComboBoxPeriodCount.gridx = 2;
        
        constraintJLabelSendRate.insets = new java.awt.Insets(0,0,5,5);
        constraintJLabelSendRate.anchor = java.awt.GridBagConstraints.WEST;
        constraintJLabelSendRate.gridwidth = 1;
        constraintJLabelSendRate.gridy = 7;
        constraintJLabelSendRate.gridx = 1;
        
        constraintJComboBoxSendRateDigits.insets = new java.awt.Insets(0,0,5,5);
        constraintJComboBoxSendRateDigits.anchor = java.awt.GridBagConstraints.WEST;
        constraintJComboBoxSendRateDigits.gridy = 7;
        constraintJComboBoxSendRateDigits.gridx = 2;
        
        constraintJComboBoxSendRateUnits.insets = new java.awt.Insets(0,0,5,5);
        constraintJComboBoxSendRateUnits.anchor = java.awt.GridBagConstraints.WEST;
        constraintJComboBoxSendRateUnits.gridy = 7;
        constraintJComboBoxSendRateUnits.gridx = 3;
        
        constraintJLabelHowToStop.insets = new java.awt.Insets(0,0,5,5);
        constraintJLabelHowToStop.anchor = java.awt.GridBagConstraints.WEST;
		constraintJLabelHowToStop.gridy = 8;
		constraintJLabelHowToStop.gridx = 1;
        
        constraintJComboBoxHowToStop.insets = new java.awt.Insets(0,0,5,5);
        constraintJComboBoxHowToStop.anchor = java.awt.GridBagConstraints.WEST;
        constraintJComboBoxHowToStop.gridy = 8;
        constraintJComboBoxHowToStop.gridx = 2;

        constraintJLabelPercentReduction.insets = new java.awt.Insets(0,0,5,5);
        constraintJLabelPercentReduction.anchor = java.awt.GridBagConstraints.WEST;
        constraintJLabelPercentReduction.gridy = 9;
        constraintJLabelPercentReduction.gridx = 1;
        
		constraintJCSpinFieldPercentReduction.insets = new java.awt.Insets(0,0,5,5);
        constraintJCSpinFieldPercentReduction.anchor = java.awt.GridBagConstraints.WEST;
		constraintJCSpinFieldPercentReduction.gridy = 9;
		constraintJCSpinFieldPercentReduction.gridx = 2;
        
		constraintJPanelChangeMethod.insets = new java.awt.Insets(0,0,5,5);
        constraintJPanelChangeMethod.anchor = java.awt.GridBagConstraints.WEST;
        constraintJPanelChangeMethod.gridwidth = 3;
		constraintJPanelChangeMethod.gridy = 10;
		constraintJPanelChangeMethod.gridx = 1;
        
		setLayout(new java.awt.GridBagLayout());
		this.add(getJLabelControlPercent(), constraintJLabelControlPercent);
		this.add(getJCSpinFieldControlPercent(), constraintJCSpinFieldControlPercent);
		this.add(getJCSpinFieldCyclePeriod(), constraintJCSpinFieldCyclePeriod);
		//this.add(getJLabelMin(), consGridBagConstraints142);
		this.add(getJLabelCyclePeriod(), constraintJLabelCyclePeriod);
		this.add(getJLabelCycleCntSndType(), constraintJLabelCycleCntSndType);
		this.add(getJComboBoxCycleCountSndType(), constraintJComboBoxCycleCountSndType);
		this.add(getJLabelMaxCycleCnt(), constraintJLabelMaxCycleCnt);
		this.add(getJComboBoxMaxCycleCount(), constraintJComboBoxMaxCycleCount);
		this.add(getJLabelPeriodCount(), constraintJLabelPeriodCount);
		this.add(getJComboBoxPeriodCount(), constraintJComboBoxPeriodCount);
		this.add(getJLabelSendRate(), constraintJLabelSendRate);
		this.add(getJPanelChangeMethod(), constraintJPanelChangeMethod);
		this.add(getJLabelPercentReduction(), constraintJLabelPercentReduction);
		this.add(getJLabelHowToStop(), constraintJLabelHowToStop);
		this.add(getJComboBoxHowToStop(), constraintJComboBoxHowToStop);
		this.add(getJCSpinFieldPercentReduction(), constraintJCSpinFieldPercentReduction);
		this.add(getJComboBoxSendRateDigits(), constraintJComboBoxSendRateDigits);
		this.add(getJComboBoxSendRateUnits(), constraintJComboBoxSendRateUnits);
		this.add(getJCheckBoxNoRamp(), constraintJCheckBoxNoRamp);
		setSize(402, 430);
    } 
    catch (java.lang.Throwable ivjExc) 
    {
        handleException(ivjExc);
    }
	// user code begin {2}
	getJComboBoxWhenChange().setSelectedItem( LMProgramDirectGear.CHANGE_NONE );
	getJLabelSendRate().setText("Command Resend Rate:");
	getJComboBoxSendRateDigits().setSelectedItem("1");
	getJComboBoxSendRateUnits().setSelectedItem("hours");
	getJComboBoxHowToStop().removeItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );		
	getJComboBoxHowToStop().addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_STOP_CYCLE ) );		
	getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_STOP_CYCLE ) );
	try
	{
		initConnections();
	}
	catch(Exception e)	{ }
	// user code end
}
/**
 * Comment
 */
public void jComboBoxWhenChange_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelChangeDuration().setVisible(false);
	getJCSpinFieldChangeDuration().setVisible(false);
	getJLabelMinutesChDur().setVisible(false);
	
	getJLabelChangePriority().setVisible(false);
	getJCSpinFieldChangePriority().setVisible(false);
	
	getJLabelChangeTriggerNumber().setVisible(false);
	getJCSpinFieldChangeTriggerNumber().setVisible(false);

	getJLabelChangeTriggerOffset().setVisible(false);
	getJTextFieldChangeTriggerOffset().setVisible(false);

	
	if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_NONE )
		 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Manually Only" ) )
	{
		//None
		return;
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_DURATION )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "After a Duration" ) )
	{
		//Duration
		getJLabelChangeDuration().setVisible(true);
		getJCSpinFieldChangeDuration().setVisible(true);
		getJLabelMinutesChDur().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_PRIORITY )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Priority Change" ) )
	{
		//Priority
		getJLabelChangePriority().setVisible(true);
		getJCSpinFieldChangePriority().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_TRIGGER_OFFSET )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Above Trigger" ) )
	{
		//TriggerOffset
		getJLabelChangeTriggerNumber().setVisible(true);
		getJCSpinFieldChangeTriggerNumber().setVisible(true);

		getJLabelChangeTriggerOffset().setVisible(true);
		getJTextFieldChangeTriggerOffset().setVisible(true);
	}
	else
		throw new Error("Unknown LMProgramDirectGear control condition found, the value = " + getJComboBoxWhenChange().getSelectedItem().toString() );


	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		SmartCycleGearPanel aSmartCycleGearPanel;
		aSmartCycleGearPanel = new SmartCycleGearPanel();
		frame.setContentPane(aSmartCycleGearPanel);
		frame.setSize(aSmartCycleGearPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.dbeditor.wizard.device.lmprogram.GenericGearPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private void setChangeCondition(String change) 
{
	if( change == null )
		return;

	if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_NONE) )
	{
		getJComboBoxWhenChange().setSelectedItem("Manually Only");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_DURATION) )
	{
		getJComboBoxWhenChange().setSelectedItem("After a Duration");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_PRIORITY) )
	{
		getJComboBoxWhenChange().setSelectedItem("Priority Change");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_TRIGGER_OFFSET) )
	{
		getJComboBoxWhenChange().setSelectedItem("Above Trigger");
	}	
	
}
/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
	{
		return;
	}
	else
		gear = (LMProgramDirectGear)o;

	getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getMethodStopType() ) );

	getJCSpinFieldPercentReduction().setValue( gear.getPercentReduction() );
	
	setChangeCondition( gear.getChangeCondition() );
	
	getJCSpinFieldChangeDuration().setValue( new Integer( gear.getChangeDuration().intValue() / 60 ) );
	getJCSpinFieldChangePriority().setValue( gear.getChangePriority() );
	getJCSpinFieldChangeTriggerNumber().setValue( gear.getChangeTriggerNumber() );	
	getJTextFieldChangeTriggerOffset().setText( gear.getChangeTriggerOffset().toString() );

	com.cannontech.database.data.device.lm.SmartCycleGear s = (com.cannontech.database.data.device.lm.SmartCycleGear)gear;

	getJCSpinFieldControlPercent().setValue( s.getControlPercent() );

	getJCSpinFieldCyclePeriod().setValue( new Integer( s.getCyclePeriodLength().intValue() / 60 ) );

	getJComboBoxPeriodCount().setSelectedItem( s.getStartingPeriodCnt() );
			
	com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( getJComboBoxSendRateDigits(), getJComboBoxSendRateUnits(), s.getResendRate().intValue() );

	if( s.getMethodOptionMax().intValue() > 0 )
		getJComboBoxMaxCycleCount().setSelectedItem( s.getMethodOptionMax() );
	else
		getJComboBoxMaxCycleCount().setSelectedItem( com.cannontech.common.util.CtiUtilities.STRING_NONE );
	
		getJComboBoxCycleCountSndType().setSelectedItem( StringUtils.addCharBetweenWords( ' ', s.getMethodOptionType() ) );
	
	if(s.getFrontRampOption().compareTo(CtiUtilities.STRING_NONE) != 0)
		getJCheckBoxNoRamp().setSelected(true);
		
	
}
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
	/**
	 * This method initializes jCheckBoxNoRamp
	 * 
	 * @return javax.swing.JCheckBox
	 */
	private javax.swing.JCheckBox getJCheckBoxNoRamp() {
		if(jCheckBoxNoRamp == null) {
			jCheckBoxNoRamp = new javax.swing.JCheckBox();
			jCheckBoxNoRamp.setText("No Ramp (Expresscom Only)");
            jCheckBoxNoRamp.setPreferredSize(new Dimension (165,23));
						
		}
		return jCheckBoxNoRamp;
	}
}

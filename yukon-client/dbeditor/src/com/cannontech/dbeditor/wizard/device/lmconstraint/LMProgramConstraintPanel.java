package com.cannontech.dbeditor.wizard.device.lmconstraint;

import com.cannontech.common.gui.util.TextFieldDocument;
import com.cannontech.database.data.lite.LiteSeasonSchedule;
import com.cannontech.database.db.device.lm.LMProgramConstraint;
import com.cannontech.common.util.CtiUtilities;
/**
 * Insert the type's description here. 
 * Creation date: (3/2/2004 10:09:59 AM)
 * @author: 
 */
public class LMProgramConstraintPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener {
	private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser ivjJCheckBoxDayChooser = null;
	private javax.swing.JComboBox ivjJComboBoxHoliday = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxDailyOps = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursDaily = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursMonthly = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursSeasonal = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinRestart = null;
	private javax.swing.JLabel ivjJLabelAnnually = null;
	private javax.swing.JLabel ivjJLabelDaily = null;
	private javax.swing.JLabel ivjJLabelDailyOps = null;
	private javax.swing.JLabel ivjJLabelHoliday = null;
	private javax.swing.JLabel ivjJLabelMaxActivate = null;
	private javax.swing.JLabel ivjJLabelMinActivate = null;
	private javax.swing.JLabel ivjJLabelMonthly = null;
	private javax.swing.JLabel ivjJLabelRestart = null;
	private javax.swing.JLabel ivjJLabelSeasonal = null;
	private javax.swing.JPanel ivjJPanelMaxHours = null;
	private javax.swing.JPanel ivjJPanelMaxValues = null;
	private javax.swing.JPanel ivjJPanelMinTimes = null;
	private javax.swing.JLabel ivjJLabelConstraintName = null;
	private javax.swing.JTextField ivjJTextFieldConstraintName = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JLabel ivjJLabelSeasonChooser = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursAnnually = null;
	private javax.swing.JLabel ivjJLabelMaxActSeconds = null;
	private javax.swing.JLabel ivjJLabelMinReSeconds = null;
	private javax.swing.JLabel ivjJLabelMinReSeconds1 = null;
	private javax.swing.JComboBox ivjJComboBoxSeasonSchedule = null;
	private javax.swing.JLabel ivjJLabelHolidayUsage = null;
	private javax.swing.JRadioButton ivjJRadioButtonExclude = null;

class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJCheckBoxDayChooser()) 
				connEtoC6(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJComboBoxHoliday()) 
				connEtoC7(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJComboBoxSeasonSchedule()) 
				connEtoC2(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJRadioButtonExclude()) 
				connEtoC3(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJRadioButtonForce()) 
				connEtoC4(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJTextFieldConstraintName()) 
				connEtoC1(e);
		};
	};
	private javax.swing.JRadioButton ivjJRadioButtonForce = null;
/**
 * LMProgramConstraintPanel constructor comment.
 */
public LMProgramConstraintPanel() {
	super();
	initialize();
}
/**
 * connEtoC1:  (JTextFieldConstraintName.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JComboBoxSeasonSchedule.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jComboBoxSeasonSchedule_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxSeasonSchedule_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JRadioButtonExclude.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jRadioButtonExclude_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jRadioButtonExclude_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JRadioButton1.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jRadioButton1_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jRadioButtonForce_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (JCheckBoxDayChooser.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jCheckBoxDayChooser_Action(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxDayChooser_Action(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JComboBoxHoliday.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.addDataInputPanelListener(Lcom.cannontech.common.gui.util.DataInputPanelListener;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxHoliday_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G88F27EB0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8FDC156575386D4BB67B4EEDEE334DED54C8D9D1D1E39BABABDBD636D931326F5852F2C50BA96535AF157BE60579F2AF88A8888266BF102BE2E2910222A2B0C5C14542F2CA4DCA0B6B3DAFF071F26F6D5E97C1C57D1D674FF95E775E7BDEAE68584FBE9D5F77B94FB967B967BC67797F3C972930A4A2BD55D8A8C92969927FEFC72AA439FFAAC94F7E66DB86449D8EB718A44DFFEB8116CAD73D1586
	4FB648CB5ABE4714A7DD5B1989E9855207574EB1AD07778269564E29E17092241CA848EB2FCC58B1F0B9D3D7E0B999B4FDC7FAB6BC17G7481AE1C148F10A7BD163E0263A7C1FA89FFA710EA142458EB894D8B26959AFC79350CEEA4BC4381A6DCC7E9520BF8FE8A608A8127G0C3C0E51C640B30BEA77755A9ACEF77CFBD1525C07AB0CB924AC0DFC8469E70C3714BF4D526D5491A6292D7CC3F8569FBE55314B6A6A2E30DA1CCE17D3112D1D953613324D2E38BC953D7633960F2D42A61F36DB658AC7375B636A
	70D83AEBEBDB8E9DE62F0DAE27D771D86CCE653045A9BBA4E94C4F089DF9E919348C508F526688029B19C6FCB78D5249G1991E84B63B975DC57B12722240471EB035AE20B60BE0BD0EDD132639757DCCF6497AC4C66FCD3A0DF829C33F3FF71BF07EA27D5D8B510295C564F97222D7D57232D534F93DDE2A19D8710A870919788BE855205638C2672F16803FFECC49F9CBBF707B46F64BF0D39C1FC50B40E596E98277AA0EF51DC63CA9A1F47D711980B023CB8008400347186D3A9C09340EA5AAE162FFC871EFB
	CEAA0D2E6EEE17F30F5B3D57E1739CF259E4873C5756C28E479D112DAE0FCD12D86CAFCBAB5751876178F85F38A740EC7B1704319AFD64B6C9D18E9853F5EC0B7DD325514DE5040DD7EDCB9ECF7C56C75BDDA43C27723649705F23786AC8954FE261BBB456C8FA84640D7AB97A7958925425A5ED1C14D7F5541821234B587B1B0DE3EFE0BA445C206A42FC3C3D0878F886606781645DE8B01581B483F45E08BE362C5C9A4A4787A186BDCE0B63E84FC93745236C6D31BBEC32077BFA654201FC2D870CEF63107918
	DF2236EA6BE8462F0F687AE5C6548EE3580D4C9F61B72AFEE1E53785ADFB620D013131C45461A15AA6265E486A50A4707F2278848D1E556DB334EDD1BA48EB0D027E04522F38C870932298FD0E10331162E7E870CC4E8DD4BEC9CBB799CC8EGD63F7145248F1E866939G59B7C37B81E882E883D0EE46BA0EDE39F9106D683026FE992F3C6AADF84AFD501F9C04DE4562344A1FD8BCF64BC9076C15B80DF395716BC99FBEAFED5FD6A863006C14BD96456EF202F4CB378C4164E5B47D2B16929A0FCCF3DB6D5DB2
	94506D16D0EE582A82F8BAACDE65E3374D2248AA854B9F350A4444E94BA7A09184407B641B093F4AE91FBE865EE3EEC6DF251690DC66AD503F5D02FE49D81D8F4F8FA038E5C7EDED135DCA5430F84EE00CDEC8EFA0ED9668A782B8228D264ADB8D26D8007A5B8C2649G4D3F007E8B20B5867AB0G47AF212D81CC781541647E3541D4940B6D7945E39837CDB937CA65FF7A27EE5C92080BE5B118986B9F37BF227AE47F867AE30096G8740A800E800B8G83C0766D108F508260G9885908D9087E0389D6787E3
	52C861D8A65159DF8FE28331F9A8ED14G71039E1E780CBC098FE9DB3B05BDE3EF7525A7FEA5BE5513C17C596AA71F78F9A0FD1AB532C8DDBAB436B2DFBC61630B55BAB20AB96DD0FD31BC88BEC7D27BB472CC674F45FEF439B4CE75E510B1E3199F2EA404BECBB56F24DFDA29C933F662B2133EA67B8E98ABG1A6F403632F735D922FD48DE0BD746DE63A38FB4F85926369CC63B3B0868AD1F161DCA136C161DB6F87172B63B3F08584C7B13F61704ED3D0562497852888D5EAB70C70A16B23CCCE6B3EA6F0479
	1F51FC0B22F86CA7FB9479282CA8F6E7074AFF126A6275993A3C5C562F5692DB5B4046BE0011425659C5446758AF3438DC27FA5C2D2447637DCBAF1DC70583FD6C9D581E0EDEA0736FE9A2FD0226557C3F1DBFB6C03D903E21461696D899EF8ED80669B2642BE52C39C87A75D49E2BB99C1F45E30F513CC7E9D240265289508F81A8G61G13A720BF22AF34C93E7D9F4AC139217489956B2A4E3F27E5E96D47F2522541356B416843E267696260317F37E27D581FDD2C9F7BAF958F9C5B2F956B45B64B1356905B
	DC3DCECDDBC9DFC346BBD8B2B8E55AE0850B44569FAF3692BB6CCE3B72AF3B2DC3D60E5A4F4A30AC3D1344FCA39DD38DD0FF521DB826752E47B12D746CCD5224AF4BF5674BE3FF7E0171581DFCADF027BA26B11D961610B6A8BB64EEF0D4232B4729B0FCB69D2FB95EEB2238578B7B89EF597B2D60437DF659E1D3D7BA9F424C225C8A5D04D2C17FE5B30632AE4BE9CBDF0537977CD6C1AB252211646EA32F1B4C6F3D374B9CEC55D45EEE7748871D6E9E94356913CD15CC0F9B37DD4F74E86C142D27763A7A1AAC
	E79ABBDDAE2F6CA937D04FD63047E159536E72F44BB62AC70525D761CA6C2159035122AB300CAF99F7D9CBF021F5206CB69E738552226E89DCDFD777C99748EAF6B96CB64B19FF3B32961B2D4922D82857A826456ED548742F2C45EFC1EB25B3510A0E9EFBC50FE2F7D4683391B336B39BE6C93D7F999BF42AFDBB7723E1950F3F4623EE3B138660A1CB9F91FD1A4FCE4B3BDDBDDE39027E5B6830DBCF85EAF20864DD22A2BB189E3F6B8854436E7C8F6AD14374F85A5D27630FA60B5DF166A337F718F55849F4F0
	64866AE0F79EA16B840FB24CAAD4717EE06F9767F47C506C6A71F829B306DB0DAA9E1F69AB4F87536390343B4E6157E40B68F366AF3F90CC172332458B33C547F0AB3395F579D6CED0DD76B81DBD964770BB269AF5991975AB5FFE0CF9632835D33675B864E198BFF44B61E308DAC00841C478B27B431B197EC7ACB63BEBEF0F22GD51F5551E39B865D834B982A5E426FDF567FACC06F2AE15538EA283AD6ED633A766E0C7C4F0CF5DDFE858CD5636DEC9D95390E4C61C6415CAE82E0421D380E9AD9C272F19D45
	970B0DAE0703CDBFA12F68AEB237FCA23DD0B3DF1CFAA7BB2FD8A272CD8B874E5F9CA27F7390795F8C117F6B90794F0448DF1CB1F07E0E90795690795F8D11FFF7087CD9A1728BB2874E5F9DA27FD450FC96A7BD66BCF8FA652FFAE427D5A68B6D8F64B338C7E84E774B7B446268D1779E434CE49D67502C51993EF72D7E3A627CDA32AEBFA564DF35F621C4769019CC368E0A319019EE0F3D5B62B9C3B69D783958F796EA4F45ECE09BB9C30B0467043B708C67D77504A6D80B335DCD6B73A21E1DCD853EA4004C
	3B192C263B19DF985D5B925245C0FA8A00015315CF54523DA06894400F82081E48688CBEF43725A2DD4DBD8653E1G77BD0CAE669EAD1D4708F4E93FB5180AG6AFF4B687AFF2B255BEEC23AB840A7EA68526EE5F4AD77923A4F44995BE6017B0A622643627B6BE93837FFA8CFFBD6E873B6692EA7890C6672A36F75BF73183E1E481D8C7878FB319FFAE32DF6BFE70F576B325A6916B30F151B57E9571A8C770BF50B6089C339D7B9880B78BE0C375F2CA33A12BDE90E66B1F34B3B7F108277587751D3BB5CAEEB
	6C25BDE72B2B51E5131BA1E49B45D27C933BCC56B74C8F6777EB4F99A7666EB4AE8E6207A4EEFF66A4558F71D9F30DCC279F5712339D3D73C43F65D7ED2D6F7A0B1F974E237BDCC42766C9F8AE387DA0E9D7A3A0BD96A086001DD10C22E797245CA900136E033821ED7F66DAED5B2F390F6D193541130DF52FDCA4B1B14405BB777964CD792C0E7C26DB6847F1858D981F370D136AAF2E52BD2B9C19DBEAD46E63E7C57729FE8CABFE4EB896005977110476A5810D79FE30037689BF6C527689476EE776C542F342
	7DE8636D9219978FFD704658DA3FFBA7BCAFF9A7C042F32402D434E1AA681679G56D134CF9DB5BC40EC68FCG75BF1BFAF97AFF3BEEB7557F32A69B5C06A7048D7DC4CFE1437B8774ECB0889BF699AF4F06574D7B35B6DC56EC9A6B6327C634C51A8C6DE8B25A72C11D569677E4E6CB78E43445E83ABCDB1E346DA536DC766C9A6D785204F644000EC9420E5B4F6A59E1FE90474A1C5375FEFA8CF54E4C4F6D37E8470DC989B5C1470D6A87D97BEEFE50FF5C38E783696BEC006FFB90470D4A75CBB56346916829
	AD4E8E18E1083D5E7524BEE0AE4153FFDDCF4A25F389894FD3DEFF1B78E094480C821884B08DE01EA843DE9A727CFDDF5FG676F7345D9760A5FB11B4AFF271EA5B440FB2BA6CD001DB57F230B54D9676F58D973EA01BFCA71D19ABC2B63FA5A6F13F49264CD7EBD6E63FF7F227FD9FA44945F72A67A2599DFC4GDF05DFBA410F0F454C06B2B26720E31AE608282DD57704595875ECEDA6AFEB5E94BC837E1C72D6BEE4B035G58GC6GC482CC82C8FC886BE4C2295ED86EDBA74186F275FC0A597931F4E97E31
	86702D71CB27BD2C671F086ADDD268B15FE96D04D0E60E8B9CD6703E5023DDB87E97BD0C637FEBBBC99C34C25A819076B046414A54CB33F3E3G1F3F1D613AF6F6B8D66B478176505C0667C49C448ADD7FF2093A4E8E292B41CFD72643D587D00734C7D0076B0D172643AF82787CF528FFC44FDFEF6DDD236FAFCD6F0B7AFE2D8E6B3DD568AB1BAECDDFEFG1F3F3E239E5173591C33683348C7307D7EF493414D00346191EC2B4BB61033B96C238F3BE025A5E17FFC7F863236F3F96C9069087BBD45D9DD9EFAB0
	46F0460D414F6C32B66A1F5965EE54BF33DB36F160736A620D414E745859F2E18631B1856CDB91877DAC454D4EA338F2C8B7885C14FCBADEC13ADF601EAFA03888C8CF0843FAEB6C2A06E79C248DG19FFB018CA819AG5AG42GA2GA682A4GC80FC2BB87E8F89479BF257CE46DC95615ED008F8308FC142DDBA7136723ECAD197D982CCB9FE36BC53296E47CFB8FCE752BEFFFA0FA11A751E7A0BAFF8863744416CC7ECEF477270B0B8B44C91CAE412FCCE2F7049FEEA2CF17EA704C36D8FBA85B70DE47E04E
	0F35104B1F0BA575FCFA258E1D5E19BE5EB9713F9B32DA723D7F31C4D26F16E4E9F045D46EC3EF6552B876FAE5AF9D6C488A11674DD216C9BA67486488D6427D5607AEE6F11AFD0A2B31CA78ECE6AD7687AD0F8556CB9B6094BFBC3F07D6963C0DBA4A745B28270C785D6B6A71D8E57FF6F826EC0548D3C76F030A5CCD4CE0B4DF237C0A4553A18734632BA9BF4B8B467F7D32E0ED1D79E814247551F66123BFF6210FC602AF427D7C91836949FEB8B6F76B2E2577169FE3F337D401BFCD71099ABC1B53AD580977
	1013A12FF5AA2EAF8E27EA755AA174CA22F5B7816862268656DD028E0E49ABB4EA65ED91723EF100481B8BFC190F8772966960183CE9BE72368AF95F2CA372AAB9DF93FF9E63CFC7D0F961A62D3CEAA16F65335A31EB84679F431FD1BA72D83DC7ECA2BE6D9369C81ABEA34AFBB70344155BA3374B9E0FECE357AC24390F13BAE9227D7FC4F81F7238D86FADA5E31643F246558303DB647F50BBC8CBF15F21865207817AGC67D8FDBE331B17F173D247FE877D83AA16C0E3AE52BB4620FF43FBA9FF98DC0AF814E
	8C50G5076C7ACD3AAA43C40E86F6E69269AB27D9EADA47ACD813AF8C17BD98D69C774A612ACDF294923793E6BFF16776D9A22477BF45B898F6550CF4D97091F5EEF311C149D1CC978F0DCCE2148733D8542723F5EC1EC8CF6D30451CCAA4855164DB716D95E9E2DDEF6F6B9954BFE2AF339569E5F3DGCEF32625C0684788FCFD5278F13E3FED9FFBAD9DB216310C6ED96A1C32717C1EB5CB7D72773B20AB13709B0EB39B357BD2D2BC0B0BD2F85644637AFCC629F6FDFE1853A8A27F56A63D7C11713877753575
	FAE50443B3C6507C39CB0FE68ABCE708F216EF50ABE72E48DFD92F171F79A71C774C2F45B9D311409514627C28D2601EDA057323918277C297720E9138AF3289AE8A5293854E338565A588DCF4A541D57E59E0EA7EB34EF73C351268BF7AB56F6935835D4D3BDC60F77306358CE673826A6B63E02F72E774C3FB9D7AF004407DF2B37AEB0C40DDCB57C10910CE913834E6FAAF7B89084DA790F763EA642D91386BE899A3A19DAEF033A8AE865213842E23076062A11DA8F0D3FAD0DE3240E51DC35E06E90833ACC6
	5ED6013BFFB1723681AEE69A7976AA2CD2927DD0C21E991ECE3957ACB62A1A202FF0128B69E5DB37D5161B37EE2F5C447629A2FA357BD4B50BF6855D271ABB0D6F6BCF67679CBD0ED4B6E67FECA90E598D1057B79D7B7A2AB61FFD9122C8ED6D810F5D36575251C2C78E362E1A35B4137347CC47B57D32FCA2B389525213306EF8926F77753D0D679051B70C13DAC69C517D5EA921F5273172C926E76B136A3EDA692239C6D6E6FA8116B99A7227BCC9F0DB8B34ED1A78F223096D8131FC59A71F74F5641CC04D7F
	11CFBE51779E23B67FA11FFC6223CD1C1F5976488634AD65119849711B06205FF265BD45EC2A664F1AA6C72A610F4F99D9ACC4EED1E3E165414144822B2FD7B62D10F45763F444E1FE7B65C662B7FA3E799456D57AEE7AFD9124A78244BF05757FCAFB90F9F404E1728AB6601A5AGFC8C175804EB7D5299083BEBBD16FBFC8616BB76A4A9F78C242381A68B5AA52710F606201DF30250967E855603GCDFFC15A8FB7E0D947856EF0BD6AB486F0EC0E71B6ED57F1101E86D073B4413DD35AB4C05F144E6BG1FE9
	403382E0994715BF4D66AA24FED999E9340F998178D1CFE33985541689101E7CB44EEDFA32495C6B244BC3A77FEC6EB5AA9B4734E4204BFC86EC84B8768CBB23E57ADE3DE5A0FDCD5C8F997C5D8D3CE14FB0FDC9FA6CB36ADC1D6971C0257EFC6CA9BA86C582FD4CB32873DBF504D6F1399C2DF6B71981C9ACD6171029AD677BAE75718C60C9FA86F51E32B9140F714EB4A927B0415747E5102E7351B976003E9E7F35CDEDB32B1B034F052B6958D08DF29B92D0475F2E8E25E33AC6C7071F0EA3A0DD652363EF28
	9F3CB23913A25BD839F1F5F8DEBDAA81FD7AE69D39B7506EF2AA0C467DA97D86G7223844D4DD6C22300214C4E9B4812CEE2FABF5393CA6F9CDEA601951A78A53ACE03B2C87E2B8B96ACE065EF2163D7A2601393F0DCFAE807DA5E74458315179122BC73338653E2DE9E6BAF9F7BDCBBF6657D244C087169AF3B7CD95ECFBE6BFF46F2F78D51598178114F627E5DC3156F427393CBD76009B9A08FFBDCEE59231CE1D8BAC167F31D1FAF3D346F8EFFFD09FC06A17331357755F4EC0DFA56FFCD7EFD0A0FFD56FFCD
	3EBA9F4777C910D77AD75C7BB46CA4FD4EC8C8C782CC840887188B10779C7AB23F0ACCCC86BC37E8F539DB645332C333B5496CDBD4F0E95FE35E170163E86CDDB7CB933EA1853D2BD07A9CDF177367543D0ED472E476DD2C237BA910B79AA096A08EA081E01E306F332AF2E69F8907BD0AE231F6529B9BE89C39C4212249021759F67BC634ADBB9146A8006AC4F56D5E8C6F47937576D32E21E32DBB115551D2013F016243B5F8D6F70BA91E2427C0DE6B5FF0CD30E203563789FFE3E54D654F4C19017B880C6F79
	A664AB821ACACE57441F4702725D3B9E799CC0B382E00C06B68A5EA74E5433B75BCA3FEF1D496CDAAC702BA8BED903E776DEC76784A41DB78B568333505E02D3D87EB44099G24A4353CC2F8AFCB52ABDF7E02482BCF727FAED6217836A47F6FE2DFB9015F4506C1DEF2127896CB787B787386137BF97E2DB6FF0EFDBE185FBE2E5756D3B4271B441F71BAFC2C5FDDCF0E8B79F812D9CA3ECB8AB2872C2A5ED9EE5ED23909FE3BC4567719927E173CBB9007729348119EEFEF4FE6E3FBAB3AE53C547404E4DCAF85
	399B44752DF9C16D0743F36397B319ED8D2A4E727A41684C476EBDAA5F516C817836D643FC37E67BA6DED7315978AD349B7409FA81672D77ACA2FD56206EA8355A95073C174E44585CB1052E53091C0497F06EF9EF95A9E745ECE8AFG4DG0373F572EEBEE66FD57D9E31CF35F5464E41584A789E582F725D30F9A05FEE5B863E5D2A9F8FCC564C832ABE078E2AF243D7DF1E5CD9AED556F3F4EE23F8FAE416D7F2DA4D7B3CE71DFFB97B21024A56596C96072BE3DD3999CC2F2A5E04BA6E6DD5753D6E0CAA6763
	45C31393F716703231618C793C026F256654EC10024C97E084F89FE4FFF4328B66F22D168E41B3096E6509FDF8B60D4073409A32CEA45F3C019E763374DA60D1A0F4F630BE613BE41B0E778FE3B56FEB7307FFBF27F6D84BE0767FFDE770F315141D7A67AA46DA7D334F4C5A013FD74C2B8D7E3D6272DA6D770A2C5E3F51CF6A268D5AF0BFC084C0AC401459B89F78F9AD09A9726B8501F301FD368E196E79DA4801B0237FC1DDF0DBFFD2977AF78E465711BB21A7DD0A626AA67291FFD39D29AF456526C8063B2D
	0E7848E36F68D498A94747523505C3EE27E8364774070D38FF16B89B771DDEAAA238F9104EB608BDB07A5BC11510EE923862AE5C1F6A94387ACE5C171CE040B171273B4D700C03F4B2C0669C18DB82B4G9C878883081EA33E4D253471101E8BD078A24C17GDA819400B1G31AFA26D525DA360C9787D636BB817194973C83924BC220318936A70DDFAFB29263A646A6467C8ECDE06E7293816757FA6785F218B2B034DF42FA39E7C1478A256CBE5B72DD3C8E77EAF622E69467AAB94B8E99F4603CD6022685EF5
	9F24C78ADC25152EC1A19D2D4A33223C8982776775A8AFB399F1ED747B5AA2C8D78ADCF8AF4135C23AD360D61FC1F92384AE7DB45DBB00745CE40C03FCABE92B19AF01BC00D6G85E074CB18EF2679B1101E8A108C1077B2503E0C7911A735FD9D619B2C3FDBB92D424B764F4F94BA5C63D3067FEFAD040AAF0C11F41DFC132877F7CE212F8F3F0C7EBA54CEFD8869BE016B206B77F0C847885C4CFE74F53C40CDD25057252F209D273EA0EB259AC89F83D0G4281A681A4881A3314C61A8B73A2008600B60091G
	91F311663593EDBA3690B96419401F47DED1FD9A7ECA70FA295164A91AF7D6D66197FAE5E19D607D882DEF87EA0F5AF62B7DFE1F792C0B363DC9E0670C396847DF5076138CE9696F089BEFA338C2C8178ADC26AC4E0D844EC177A8C7C0FA34407D400AE7851182B7CF343D183F633ABD71BC5907117E4FE0AA82E8GB88660G8883988B908DB089E09AC0B2C05A2B86538A00F200FA0043G36D7F14C5B301B6CE3875BAF619B7E6AE127707FDD59215677FD2F6A5D5F1A92124F7FBE9763CB4DA1FCE3DE9DDCBB
	0EFA95FF9BE96B96B2FF1F782A7FFEC9BD45CFF955FF3F6441AA5CAF09073C1AF968276F74879F6B2F698FBD56DFC75B228CE3F46B99B73F4FB13E1F5EA7EBEF774AE2CE91551FA7F0873D07DDDEBB19C132BD3A7F2363FAB86894B58F7788B30B837713CB0AF1BFB9FE9E5BCFB640D3FA0D5D37627B141D01F7G62BA11EF45EB6C8EC0A5BC1BB89F5B872C6E8A358F1DAB297B504701577D1A3A8F9D761A6AEFE613CC679623819F7E9A6A36739F742CBD48574F0C6677ABC9DBE72791944D5785951FAE11FC4F
	49AD8EDCB3FC1A2F1E7F738F18A54C6B49D37970A3DE4C5BF5EC153EBEC2885FFB7EF235BE1DD00451F5958521938533F36A445D5AB327A93C9ED2DE43F36C77CA7C4F31C9FE5E6B187F0DDDFA7925A2FF1CEEFE0D482F68524BEF9179CB95BD7D5AC47E1293FA790A483F25DAAFFF646B98877BB7786E119F277DF0B864C7891A835D3EFB6413AECA926ED9C7F7070AD51C33696E11C39978FD8FABFF931DC7A582BED914FF6FAADF9D7FC4470522B78C2632B7040EFE7B784FC99A9D2D21F4B48D206331B7180E
	D9C24785F4EEE6833CDB145FDB9258C7FC27845BFA789B2C0F08056714B7589DCC46776B5E40BE6261DE64CBF80375917360191D427818CDDB4E043209748FF826D28A3CB5A9EA9F5112424E0BE7AFD8300069D1F4DA7F2C2A1A4E9B0F813DAD85F5AEEC8CEC2B5ADF3240367A3C632DGBA7C258924F9064E71F9FF210A91FD46DF8A55BE431FB76F7D82BF5E2332556534F9F95B7E586A9F7B44FF23D330ED14566965C70A7C575F71EF1BA4FF02483F462A179FA772FF592D171F1002E717C7693CF3AE242579
	68DBDBFBE09C1DEB47F8A81F4F4FAE61F9ECBE3B474B78AE1C8B0C23EB4EA11FFBBE0B2311708C67FCAC0E667707BA635246D1AC70CE192F46510C79EC2C19AD4E381E27F35FA4404F95B63D6A5654317A23A7220ECFEDD1478C7EABA0A2AFEC3FFF2C797EEA8A521D7DECD9G1D3F2C239F66EB75B8A2E338707C516F946866D771F80A79423FBE099F4DEFE2FD3F512917DFAD72DF6E740FB7125FAC72DF6C504BBFAE7223F76B49F70B7C12E63D7C30B7319E2E5A907C5C76A7345F9F8B3411027EF7FE7D6E8C
	5A6FCE057C990266AE1BEF3F3B5088C95E6F1648217AA80CAB3DFEB7FB81DB73E4097A7B2FFADFFDFECC6778AB002EF4811E27EEB22965675AC215BF50F9EAAB485C405F593CF15E796073538567C34FCFB3AF686FC5AD39903897D5F0C1FFAFEA65856DDE94432D39C07C58816B08E302EE3D40FDAAF0E5D4A6417D4BEED3BA853E026AC5704DB2A9907155D42FDE0ABB46F1BBB538CFB9EE5785527700491DAE71FDC6A37DAD3DF63B43415287A80D5D89D3EE610F962A235DED51687DCF01A3FA333B6B138AF2
	A82F436E149B592F13CA38EEDC11C37C5186F55537G57F4872A88EE9424A396603AF9A73D73433FEF503CBFD2B57CFB420943DA860B7B9662EE5ECEE69605BA7758318D4FF88E946399CFB478AAF1815E7179EEB11E5394C9F378B94D6C8E7A9D99249DGE1GCC465CCEDC4F0583AE9E00492837639D326CD41451E5A734CD10BE8E20G8C6D2C47C5BF3DE56F5FDF285A1C34EBB0B6337E66427637A54D7955A9C7C7C517156C0AD734131103FC10A606917C36E9F5837AE3D4AA5AE7AB41FBD013856E1EDD08
	CB91386982D7EDC41C5C05B80740B5ABD8C624406DBB013899827757EA44951A6670FE6F25AC5597255DEB7DFD414EED76C00764D8D7EE2E027F37EC92FE245746797B0EECD54E352B86BA2F5A32832454607959F5CBB465DB07D67EFD39EA7909F92A1C0FCB86AAFF87B93F5B02F1FCFB8946F18B78A44C043EFA3384FDB55104B1787CE9C2BB975259E9F3CC25E99847AF77E29C5783CEC9C39935FD984751E9A823330FFE1F8169940042742146F1C63EEAB31DF6F01B4F1D9C0C4DCC2FD1D6342DBC9DF57D3C
	8EF1B6012BFA97E3ADDC60622C080B973824EE44E5AF4438BAD4286A3637FD7075B13E9D6B2389E475AF44B2E63723FE318B511731E7892D8152E999F3CCC599D89F771C437A28861CA383E52477E3FDC4E6200C2D7D74F738A1BD97A0BBF3287561DE2656478F5ED2ED1EFAE27075B16B8B74DFE9A66A3A450E38638237490EBE98A3F09BBA9197A7F04F6DC65E34AC44FD520C387AAC2C235B172B7AC68E214D2EDB23727D48B634B63B2FC475D779BAD54EB7075876BFDA2F72EE4EA11D18C22E8C909E896726
	8768982F003DA3G986D97D569C8ABE4F9CAA589475CC3451736F77AF9C8BE7D3D53B114AF86749B4C18BD9968589E6917F46C1C86E95F3D53CE0ACF5460D91BF829C3FC7F85F92D0B6670794D6B1D17F6C7AE53FEE9FCFB064C476CFA1A0E7F9396795BBB0B62A7AF723757EDC7FB27C2DE75E234575CC04A9F3BD85F5F51BAF846E7AF516ABD09534573E7D2D03E7BF7E979D2B8DDDEB6FB16E68763FB5A072F06533570E7DBD03E2EAEAD1F4269C672E7F8D03EC38A0DC31DFC9AF7C1795EBFC178268561B384
	651BD5CD78249CFD3EC29DBC631BD8F2E96D736110FC7A6D53E4A6FCE5C17474077A9CEC1FA7681C60F00EFF3C36D37C719C7FF87D5F53982F1D1097170371BA2F77525A59423ECB635BBDE4BEE6578CBA2F29DC62EF6F5FA83EFE093F3D4EBE343799722217203D5F33127273F2757DDD2A03E7FCED74FB501AA0FCADC179363F2B35370D53A97CB9B2A85F63D6ADDFB8270B614F49C17966F4EB7926F1BA83FFCAF94178EEEA3F34383FA3A41FFE5CA7D33EC29DFD7420AC8F633E0C4E3D6A737C63200A621B73
	7C63602E3398872D10B7A18F636001F317963F0FDFA25F227ECB0B7B9B697C31E8293F3DB194DF36545F5E1D7DE2EE8AF9E317223D06AFFC460925FC1C486763C4FE30385861B31E56F03A967EEC8B4AD7C179941DFC9A77C1795E21730570A0FCB1C17912F6EB751C4C69267127A1A85F674DDABE2900519572E7D9C1A09F1B53BDCA166AFCFED8D7B55839A55B873A056EE154036CD6G0673F690DCA7247B8B304EE432954675F4EA5EDF6D987E3D213C4E7F407E13DD35E90E667D34FD784B7E6E3016416AF4
	875D1B99897599A16A59560877BA2285EE845D8BC801F4F6A16252E9BC18A1DDA9F0DD9D48DBAFF0EC8F07700E92389A419BA1F0BF963C518277F7411BA2F01385EF5EB24431B5A061AD92382B68BE1183527D8277E3FA8FE9B424A3846E4DF322DC0133A901FE793602F4A9024EF2A2106E3FCFA0DD4BDB220C6AC03A0D5B10AEDC502DB2E33BB3885CD7749CD1DABE47D4389C5B1D35D70DC507667D6F2707BFAE17748EFF99FF6DD3ED1A2DF9D77A063F6CEF8FEB997CFEA35DC3B2C3FD56AC47FA4E35E1BCB4
	89DCEF9D520D9138E9F5C897A1F00768BED5B2242595089BCB633590522582B7DF44F02540A5D911F704401D4BC25EB182B7A3CB14ABF0E9CE4A8BE9E9A5627667D2DEC8178A5CAD3922DC014B6840D89FA1F07574F73046C0BAEAA546FA45B9357EF7E85EA71D9D7ED8187E9FA86356FE55265BB56F3B7B073F6CE343DA862BD3531724CEE3C99D0BFA1E19CAF053A01DA4F09F98B1C6668A5C07F664EDDA0538EFE6A16FB101CB9231E99338FD0C9752F18297EDC73AE982372793694AD6A3EE1C98CF2A85EE41
	EE0C75B0154ECD4FFEA19DA5F099DFA1EF2C40F9685EE3DA917461C5081B65A238B2C85788DC0BDB7481C538DFF7FF317E5E5E13F40EB68668A2846DFFF7846E6D3D341144944B7F30C17F9B65C2B27563E73F679A87736DB942D4A81BG590CA4F37AC4F8A7171CB60AB2FFD462FB76FCAB1DCBA483DD0A503B284377ACFC47BB2ABED7F58C658E123FBE6545F3CC6F41F30138E7E12475D8837826E25C877E6CDD353C18814B4B88D11E82B2F3FC4ADBC34B9B8178D1223C7365EAF9751DC3B96B77AFEFA2484C
	6265B1DF0E6D727577EDF49EB48568620B515FB167FC7D9D711E2A4F32816F35E40450A7ED8D7BBB4FC49FA6AFD2994CB76C4164652DD16309493B7E44C0723224016B27A8C05E2EED21648D24DF19C69E73F7A31D43D5833EE18D7AFB646940F679C005A45A483DD67DF6B9F333DAAFEF8FF8A7433FDD3A21EC82F8A7A38C5E2DDCCFA6BB2BCA157D3FF5C329A3FF5923B53279DD2CF7FDE370AC1D1F0483DD147049AF945F98AC5F226AD3B8606F877837F9FFFD26417BCAC9FBB7F2A91DDBA582BEF98D36C16F
	D6353CD7320652867D4BB31730390A7ABB8B2B1D3E76D751F9D2B9505514207DA7F2FD6D7FE1352A4F7D39C369037C756904B25E75313F124E3594400F90659FBD9B9813F7EAFE2BE255173EB6D452F1BC8678A78A9973D3FDED1821798D0813464B29C3C3892B4379229F6D25E377BC402719318E97E8FE83E241E555E1B548DC4D4BE3369D376B3749F5BB55B29F30DFCE1BEC00B2DD1236CD6E2BD5E55FB96038902ACD36E8E4B37F1551357EB1405B4CD8FFF73AFD6B2F33CEADFF4DD7C399877C4B9F83E560
	7DE4D656554D3E7174B3BAA70AG3AE8214F1BAEDFFD3ED52F6AE3F5DFCE1B18215107FF933CCB0D750E0E416E0F857FEEFDD1037A3E33C9157DDA7B503E85BE3ECF15B36100AA273CE3E8F2E6B62BF276FE204A19B0C4B9F20BAA673E8FD5B95FBEB7B4B9099F29F2B27E293E3FF3C4FDBFF4D4FD3F69E335AC79746557CF5CA76A7B6B7FD25FBFBF2916B3CA990CCDDB04CD972C2A1CA7E5D50EABEBE8F266372BF2ECF6D5CEED6E506E84FC33CB15731CC315D3F9F6E8F2F6EB3E17FFB2F5E836DC73152A43CB
	DED54E39A17A2430C7153363347A7E19661B7B5BB55F5C7F50BDB49B271FD565ECBB2F4AF94AB5B4B947481F5B233FC3DCA07DA577EA68F02267C869DE0F149FF80FE44FF726BF917DE5D321D1B29E1496F6523B20872574DEF229344F8D3DD3A740975E2FA4AA132594290C7FE426594BFFF5535C6315EDE645E516592FE41A2D202047659892E9867F09CDC5CA27BF260925CA645E52B520FF2E507FA03DFC1AF0FAEB2D693971A62314864A334B388725B4F22396EC70B0DBCC0A4BCDAC11488DC352191391A5
	5FCFB62620C526365294DECBCA631CA69D9AF473CF850709F310D907B1880DD60F05E0D50ECF2DBEF87D3619F1CFFF62B5C98B8FCAAB4960F4D476505FC610699FF77DC47610FA5BAFE539490F2D130B5FE03217BE523D4A9987740E056DC7489F6C72AA32ED8F7E9A00D7111651BF6631197C1A4766E60B37D3A1B71A6BDA24B427259B1C1E4F329D96E747E676938CF554EF29FB5A2895E4D013C05F822AAF7D3331C2CA415D399B563E1FB841A49977CB0B9CAE0BED3F452A38BC8725AC2553A3FBBBDD8EDB1F
	FBF7839514C93FF3265F9201385542FCE2EC8519578825CF75DDBBAAA7A9E73FD1127ABC52E6CAC946628AC1E1EB6C34F820A859F3904082C5160A3C2B56A8EF7F61407263C6A9159BC92A20304F2DC88B5BAD5DF64799F8E922ED1DD64E8A853475D81CDE7237CFC0B3331FE618A58A287841C315575C747AE734G15D511CA18AB01F5F3076C6A5E3C273D5D6E1405G70AB08AF966289CD059FCDFE5F77163D7F2785A7A18E1AA4D3F7E5A57D370A7E3B057CDBC5B1D594D335851C1BAC8D781FFFFE9F5ACC03
	C734AED27D957B218615A767BCB46E297AE483D837DFCA27FFD685AAA1CF257A30277B246C79C674B5450B47A4FC0B54111B04CA9F11DB5497500A0C22956587C495413E95989E843DCAD492C995D352927A6F3AA11BCC38CAA96F5BC253F2DFCDC98BA673E993B4886C3A703705EB4D0A34D47D3857CCFE4A186258870BBEF43948CCFFD63856ACBA038FFC3A1865125A4598F5E8182B18E368A9F590D725793A8A6BF6A13B5D4FCCA6BC7FDE9FB670F4ED1FCF6F36027BB1D398C44C38F8B98611D49D79679F43
	E341BEDF8B482DD1B201AF949610B9614D020644B229B632CB1521C3234FD1467D920C630A7752D155CBD99AAFE5DE49BAFF96981BC477050A1453C45A364C7F9C6A15EC43C9D86B679F32741949E74F66BD8E072B17FC1524C8EF93E4A779965AECA1D859D6EEBEABFBDC66EE9946913353E5F6583B6D8AD114FCF0D98BA39CFEDC8D6F197C03EC0246EF29615D84C295E977A1768129D9013922D969144DEE76B7B54D5DBDDE45FCD2B6DB7837FBB6C84010A51B6D0A596EB5FBE1426516ED0A34AF2484CE6A4B
	2F0A35F4505FD0D8049F8912FEF5B1B5447C115BCBD2E9DE59DAC1B4A6F4D9028ECC639F8C56DEC906F0ED6963CA8E37F3FDBE5DD6AAEFB68B2F3C417BEB2A26A6DEAE79AF7D4A5374EADFCD09BF532ECCCDC72B1A66E9FCFA85CE5DFE642BA97A54A430F82FEF057034F670A6DFA3AF9458DC8D56F8A5374E6BFDA3C96296658BEC21861B26EB497F17DAC37DEF729D10715B2202ABCF5398D55365280F645BE6D5CD2F10683843573B98A14B2EE41DFF5BF765557DE4550F5A1E648A0C52C7D4CDD7EAB4D57BBB
	1324AEEDFDFB89446A7792D7C8F4447B36C2DCADE7DC49BABF256A1C215119781C7D0E70260B5A5FF31F77751220FF0B24FC873BCF5D401F6A6F3977ADA7727B81BFF6479C7E3BDBD35EA2CB52E03F4FFA349B26780A45F1EA0F53C6FE2BF56F99C5D6FF9F747CF2A25F0BB4BC136505ADA7FAF7E9F87E9FD0CB87880A3479EE8EACGG181BGGD0CB818294G94G88G88G88F27EB00A3479EE8EACGG181BGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GG
	GG81G81GBAGGGC8ACGGGG
**end of data**/
}
/**
 * Return the JCheckBoxDayChooser property value.
 * @return com.cannontech.common.gui.unchanging.JCheckBoxDayChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser getJCheckBoxDayChooser() {
	if (ivjJCheckBoxDayChooser == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder.setTitle("Day Selection");
			ivjJCheckBoxDayChooser = new com.cannontech.common.gui.unchanging.JCheckBoxDayChooser();
			ivjJCheckBoxDayChooser.setName("JCheckBoxDayChooser");
			ivjJCheckBoxDayChooser.setPreferredSize(new java.awt.Dimension(340, 86));
			ivjJCheckBoxDayChooser.setBorder(ivjLocalBorder);
			ivjJCheckBoxDayChooser.setMinimumSize(new java.awt.Dimension(340, 86));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDayChooser;
}
/**
 * Return the JComboBoxHoliday property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHoliday() {
	if (ivjJComboBoxHoliday == null) {
		try {
			ivjJComboBoxHoliday = new javax.swing.JComboBox();
			ivjJComboBoxHoliday.setName("JComboBoxHoliday");
			ivjJComboBoxHoliday.setToolTipText("Holiday schedule used to exclude control");
			ivjJComboBoxHoliday.setPreferredSize(new java.awt.Dimension(155, 23));
			// user code begin {1}
			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List holidaySch = cache.getAllHolidaySchedules();
				for( int i = 0; i < holidaySch.size(); i++ )
					ivjJComboBoxHoliday.addItem( holidaySch.get(i) );
			}
			getJComboBoxHoliday().addItem(CtiUtilities.STRING_NONE);
			getJComboBoxHoliday().setSelectedItem(CtiUtilities.STRING_NONE);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHoliday;
}
/**
 * Return the JComboBoxSeasonSchedule property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSeasonSchedule() {
	if (ivjJComboBoxSeasonSchedule == null) {
		try {
			ivjJComboBoxSeasonSchedule = new javax.swing.JComboBox();
			ivjJComboBoxSeasonSchedule.setName("JComboBoxSeasonSchedule");
			ivjJComboBoxSeasonSchedule.setToolTipText("Season schedule used to exclude control");
			ivjJComboBoxSeasonSchedule.setPreferredSize(new java.awt.Dimension(155, 23));
			// user code begin {1}
			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List seasonSch = cache.getAllSeasonSchedules();
				for( int i = 0; i < seasonSch.size(); i++ )
					ivjJComboBoxSeasonSchedule.addItem( seasonSch.get(i) );
			}
			getJComboBoxSeasonSchedule().addItem(CtiUtilities.STRING_NONE);
			getJComboBoxSeasonSchedule().setSelectedItem(CtiUtilities.STRING_NONE);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSeasonSchedule;
}
/**
 * Return the JCSpinFieldMaxActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxActivateTime() {
	if (ivjJCSpinFieldMaxActivateTime == null) {
		try {
			ivjJCSpinFieldMaxActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxActivateTime.setName("JCSpinFieldMaxActivateTime");
			ivjJCSpinFieldMaxActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMaxActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxActivateTime;
}
/**
 * Return the JCSpinFieldMaxDailyOps property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxDailyOps() {
	if (ivjJCSpinFieldMaxDailyOps == null) {
		try {
			ivjJCSpinFieldMaxDailyOps = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxDailyOps.setName("JCSpinFieldMaxDailyOps");
			ivjJCSpinFieldMaxDailyOps.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMaxDailyOps.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxDailyOps;
}
/**
 * Return the JCSpinFieldMaxHoursAnnually property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursAnnually() {
	if (ivjJCSpinFieldMaxHoursAnnually == null) {
		try {
			ivjJCSpinFieldMaxHoursAnnually = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursAnnually.setName("JCSpinFieldMaxHoursAnnually");
			ivjJCSpinFieldMaxHoursAnnually.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursAnnually.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(99999), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(0)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursAnnually;
}
/**
 * Return the JCSpinFieldMaxHoursDaily property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursDaily() {
	if (ivjJCSpinFieldMaxHoursDaily == null) {
		try {
			ivjJCSpinFieldMaxHoursDaily = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursDaily.setName("JCSpinFieldMaxHoursDaily");
			ivjJCSpinFieldMaxHoursDaily.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursDaily.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursDaily;
}
/**
 * Return the JCSpinFieldMaxHoursMonthly property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursMonthly() {
	if (ivjJCSpinFieldMaxHoursMonthly == null) {
		try {
			ivjJCSpinFieldMaxHoursMonthly = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursMonthly.setName("JCSpinFieldMaxHoursMonthly");
			ivjJCSpinFieldMaxHoursMonthly.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursMonthly.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursMonthly;
}
/**
 * Return the JCSpinFieldMaxHoursSeasonal property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursSeasonal() {
	if (ivjJCSpinFieldMaxHoursSeasonal == null) {
		try {
			ivjJCSpinFieldMaxHoursSeasonal = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursSeasonal.setName("JCSpinFieldMaxHoursSeasonal");
			ivjJCSpinFieldMaxHoursSeasonal.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursSeasonal.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursSeasonal;
}
/**
 * Return the JCSpinFieldMinActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinActivateTime() {
	if (ivjJCSpinFieldMinActivateTime == null) {
		try {
			ivjJCSpinFieldMinActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinActivateTime.setName("JCSpinFieldMinActivateTime");
			ivjJCSpinFieldMinActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMinActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinActivateTime;
}
/**
 * Return the JCSpinFieldMinRestart property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinRestart() {
	if (ivjJCSpinFieldMinRestart == null) {
		try {
			ivjJCSpinFieldMinRestart = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinRestart.setName("JCSpinFieldMinRestart");
			ivjJCSpinFieldMinRestart.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMinRestart.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinRestart;
}
/**
 * Return the JLabelAnnually property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelAnnually() {
	if (ivjJLabelAnnually == null) {
		try {
			ivjJLabelAnnually = new javax.swing.JLabel();
			ivjJLabelAnnually.setName("JLabelAnnually");
			ivjJLabelAnnually.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelAnnually.setText("Annually:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelAnnually;
}
/**
 * Return the JLabelConstraintName property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelConstraintName() {
	if (ivjJLabelConstraintName == null) {
		try {
			ivjJLabelConstraintName = new javax.swing.JLabel();
			ivjJLabelConstraintName.setName("JLabelConstraintName");
			ivjJLabelConstraintName.setPreferredSize(new java.awt.Dimension(127, 18));
			ivjJLabelConstraintName.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelConstraintName.setText("Constraint Name: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelConstraintName;
}
/**
 * Return the JLabelDaily property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDaily() {
	if (ivjJLabelDaily == null) {
		try {
			ivjJLabelDaily = new javax.swing.JLabel();
			ivjJLabelDaily.setName("JLabelDaily");
			ivjJLabelDaily.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelDaily.setText("Daily:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDaily;
}
/**
 * Return the JLabelDailyOps property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDailyOps() {
	if (ivjJLabelDailyOps == null) {
		try {
			ivjJLabelDailyOps = new javax.swing.JLabel();
			ivjJLabelDailyOps.setName("JLabelDailyOps");
			ivjJLabelDailyOps.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelDailyOps.setText("Daily Ops: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDailyOps;
}
/**
 * Return the JLabelHoliday property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHoliday() {
	if (ivjJLabelHoliday == null) {
		try {
			ivjJLabelHoliday = new javax.swing.JLabel();
			ivjJLabelHoliday.setName("JLabelHoliday");
			ivjJLabelHoliday.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelHoliday.setText("Holiday Schedule: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHoliday;
}
/**
 * Return the JLabelHolidayUsage property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHolidayUsage() {
	if (ivjJLabelHolidayUsage == null) {
		try {
			ivjJLabelHolidayUsage = new javax.swing.JLabel();
			ivjJLabelHolidayUsage.setName("JLabelHolidayUsage");
			ivjJLabelHolidayUsage.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelHolidayUsage.setText("Holiday Usage: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHolidayUsage;
}
/**
 * Return the JLabelMaxActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxActivate() {
	if (ivjJLabelMaxActivate == null) {
		try {
			ivjJLabelMaxActivate = new javax.swing.JLabel();
			ivjJLabelMaxActivate.setName("JLabelMaxActivate");
			ivjJLabelMaxActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMaxActivate.setText("Activate: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxActivate;
}
/**
 * Return the JLabelMaxActSeconds property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxActSeconds() {
	if (ivjJLabelMaxActSeconds == null) {
		try {
			ivjJLabelMaxActSeconds = new javax.swing.JLabel();
			ivjJLabelMaxActSeconds.setName("JLabelMaxActSeconds");
			ivjJLabelMaxActSeconds.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMaxActSeconds.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxActSeconds;
}
/**
 * Return the JLabelMinActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinActivate() {
	if (ivjJLabelMinActivate == null) {
		try {
			ivjJLabelMinActivate = new javax.swing.JLabel();
			ivjJLabelMinActivate.setName("JLabelMinActivate");
			ivjJLabelMinActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinActivate.setText("Activate:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinActivate;
}
/**
 * Return the JLabelMinReSeconds property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinReSeconds() {
	if (ivjJLabelMinReSeconds == null) {
		try {
			ivjJLabelMinReSeconds = new javax.swing.JLabel();
			ivjJLabelMinReSeconds.setName("JLabelMinReSeconds");
			ivjJLabelMinReSeconds.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMinReSeconds.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinReSeconds;
}
/**
 * Return the JLabelMinReSeconds1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinReSeconds1() {
	if (ivjJLabelMinReSeconds1 == null) {
		try {
			ivjJLabelMinReSeconds1 = new javax.swing.JLabel();
			ivjJLabelMinReSeconds1.setName("JLabelMinReSeconds1");
			ivjJLabelMinReSeconds1.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMinReSeconds1.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinReSeconds1;
}
/**
 * Return the JLabelMonthly property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMonthly() {
	if (ivjJLabelMonthly == null) {
		try {
			ivjJLabelMonthly = new javax.swing.JLabel();
			ivjJLabelMonthly.setName("JLabelMonthly");
			ivjJLabelMonthly.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelMonthly.setText("Monthly:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMonthly;
}
/**
 * Return the JLabelRestart property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRestart() {
	if (ivjJLabelRestart == null) {
		try {
			ivjJLabelRestart = new javax.swing.JLabel();
			ivjJLabelRestart.setName("JLabelRestart");
			ivjJLabelRestart.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRestart.setText("Restart:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRestart;
}
/**
 * Return the JLabelSeasonal property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonal() {
	if (ivjJLabelSeasonal == null) {
		try {
			ivjJLabelSeasonal = new javax.swing.JLabel();
			ivjJLabelSeasonal.setName("JLabelSeasonal");
			ivjJLabelSeasonal.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelSeasonal.setText("Seasonal:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonal;
}
/**
 * Return the JLabelSeasonChooser property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonChooser() {
	if (ivjJLabelSeasonChooser == null) {
		try {
			ivjJLabelSeasonChooser = new javax.swing.JLabel();
			ivjJLabelSeasonChooser.setName("JLabelSeasonChooser");
			ivjJLabelSeasonChooser.setPreferredSize(new java.awt.Dimension(127, 18));
			ivjJLabelSeasonChooser.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelSeasonChooser.setText("Season Schedule: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonChooser;
}
/**
 * Return the JPanelMaxHours property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxHours() {
	if (ivjJPanelMaxHours == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder1.setTitle("Max Hour Allowance");
			ivjJPanelMaxHours = new javax.swing.JPanel();
			ivjJPanelMaxHours.setName("JPanelMaxHours");
			ivjJPanelMaxHours.setPreferredSize(new java.awt.Dimension(340, 75));
			ivjJPanelMaxHours.setBorder(ivjLocalBorder1);
			ivjJPanelMaxHours.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxHours.setMinimumSize(new java.awt.Dimension(340, 75));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursDaily = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursDaily.gridx = 2; constraintsJCSpinFieldMaxHoursDaily.gridy = 1;
			constraintsJCSpinFieldMaxHoursDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursDaily.ipadx = 63;
			constraintsJCSpinFieldMaxHoursDaily.ipady = 19;
			constraintsJCSpinFieldMaxHoursDaily.insets = new java.awt.Insets(6, 1, 2, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursDaily(), constraintsJCSpinFieldMaxHoursDaily);

			java.awt.GridBagConstraints constraintsJLabelDaily = new java.awt.GridBagConstraints();
			constraintsJLabelDaily.gridx = 1; constraintsJLabelDaily.gridy = 1;
			constraintsJLabelDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelDaily.ipadx = 22;
			constraintsJLabelDaily.ipady = -1;
			constraintsJLabelDaily.insets = new java.awt.Insets(5, 11, 3, 0);
			getJPanelMaxHours().add(getJLabelDaily(), constraintsJLabelDaily);

			java.awt.GridBagConstraints constraintsJLabelSeasonal = new java.awt.GridBagConstraints();
			constraintsJLabelSeasonal.gridx = 3; constraintsJLabelSeasonal.gridy = 1;
			constraintsJLabelSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSeasonal.ipadx = 6;
			constraintsJLabelSeasonal.ipady = -1;
			constraintsJLabelSeasonal.insets = new java.awt.Insets(5, 24, 3, 4);
			getJPanelMaxHours().add(getJLabelSeasonal(), constraintsJLabelSeasonal);

			java.awt.GridBagConstraints constraintsJLabelMonthly = new java.awt.GridBagConstraints();
			constraintsJLabelMonthly.gridx = 1; constraintsJLabelMonthly.gridy = 2;
			constraintsJLabelMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelMonthly.ipadx = 4;
			constraintsJLabelMonthly.ipady = -1;
			constraintsJLabelMonthly.insets = new java.awt.Insets(3, 11, 16, 0);
			getJPanelMaxHours().add(getJLabelMonthly(), constraintsJLabelMonthly);

			java.awt.GridBagConstraints constraintsJLabelAnnually = new java.awt.GridBagConstraints();
			constraintsJLabelAnnually.gridx = 3; constraintsJLabelAnnually.gridy = 2;
			constraintsJLabelAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelAnnually.ipadx = 11;
			constraintsJLabelAnnually.ipady = -1;
			constraintsJLabelAnnually.insets = new java.awt.Insets(3, 24, 16, 4);
			getJPanelMaxHours().add(getJLabelAnnually(), constraintsJLabelAnnually);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursMonthly = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursMonthly.gridx = 2; constraintsJCSpinFieldMaxHoursMonthly.gridy = 2;
			constraintsJCSpinFieldMaxHoursMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursMonthly.ipadx = 63;
			constraintsJCSpinFieldMaxHoursMonthly.ipady = 19;
			constraintsJCSpinFieldMaxHoursMonthly.insets = new java.awt.Insets(5, 1, 12, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursMonthly(), constraintsJCSpinFieldMaxHoursMonthly);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursSeasonal = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursSeasonal.gridx = 4; constraintsJCSpinFieldMaxHoursSeasonal.gridy = 1;
			constraintsJCSpinFieldMaxHoursSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursSeasonal.ipadx = 63;
			constraintsJCSpinFieldMaxHoursSeasonal.ipady = 19;
			constraintsJCSpinFieldMaxHoursSeasonal.insets = new java.awt.Insets(6, 4, 2, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursSeasonal(), constraintsJCSpinFieldMaxHoursSeasonal);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursAnnually = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursAnnually.gridx = 4; constraintsJCSpinFieldMaxHoursAnnually.gridy = 2;
			constraintsJCSpinFieldMaxHoursAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursAnnually.ipadx = 63;
			constraintsJCSpinFieldMaxHoursAnnually.ipady = 19;
			constraintsJCSpinFieldMaxHoursAnnually.insets = new java.awt.Insets(2, 4, 15, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursAnnually(), constraintsJCSpinFieldMaxHoursAnnually);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxHours;
}
/**
 * Return the JPanelMaxValues property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxValues() {
	if (ivjJPanelMaxValues == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder2.setTitle("Max");
			ivjJPanelMaxValues = new javax.swing.JPanel();
			ivjJPanelMaxValues.setName("JPanelMaxValues");
			ivjJPanelMaxValues.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMaxValues.setBorder(ivjLocalBorder2);
			ivjJPanelMaxValues.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxValues.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxActivateTime.gridx = 2; constraintsJCSpinFieldMaxActivateTime.gridy = 1;
			constraintsJCSpinFieldMaxActivateTime.ipadx = 49;
			constraintsJCSpinFieldMaxActivateTime.ipady = 19;
			constraintsJCSpinFieldMaxActivateTime.insets = new java.awt.Insets(18, 0, 3, 2);
			getJPanelMaxValues().add(getJCSpinFieldMaxActivateTime(), constraintsJCSpinFieldMaxActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxDailyOps = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxDailyOps.gridx = 2; constraintsJCSpinFieldMaxDailyOps.gridy = 2;
			constraintsJCSpinFieldMaxDailyOps.ipadx = 49;
			constraintsJCSpinFieldMaxDailyOps.ipady = 19;
			constraintsJCSpinFieldMaxDailyOps.insets = new java.awt.Insets(4, 0, 20, 2);
			getJPanelMaxValues().add(getJCSpinFieldMaxDailyOps(), constraintsJCSpinFieldMaxDailyOps);

			java.awt.GridBagConstraints constraintsJLabelMaxActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMaxActivate.gridx = 1; constraintsJLabelMaxActivate.gridy = 1;
			constraintsJLabelMaxActivate.ipadx = 12;
			constraintsJLabelMaxActivate.insets = new java.awt.Insets(19, 12, 6, 3);
			getJPanelMaxValues().add(getJLabelMaxActivate(), constraintsJLabelMaxActivate);

			java.awt.GridBagConstraints constraintsJLabelDailyOps = new java.awt.GridBagConstraints();
			constraintsJLabelDailyOps.gridx = 1; constraintsJLabelDailyOps.gridy = 2;
			constraintsJLabelDailyOps.ipadx = 3;
			constraintsJLabelDailyOps.insets = new java.awt.Insets(5, 12, 23, 0);
			getJPanelMaxValues().add(getJLabelDailyOps(), constraintsJLabelDailyOps);

			java.awt.GridBagConstraints constraintsJLabelMaxActSeconds = new java.awt.GridBagConstraints();
			constraintsJLabelMaxActSeconds.gridx = 3; constraintsJLabelMaxActSeconds.gridy = 1;
			constraintsJLabelMaxActSeconds.ipadx = 21;
			constraintsJLabelMaxActSeconds.insets = new java.awt.Insets(21, 3, 6, 0);
			getJPanelMaxValues().add(getJLabelMaxActSeconds(), constraintsJLabelMaxActSeconds);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxValues;
}
/**
 * Return the JPanelMinTimes property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMinTimes() {
	if (ivjJPanelMinTimes == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder3;
			ivjLocalBorder3 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder3.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder3.setTitle("Min");
			ivjJPanelMinTimes = new javax.swing.JPanel();
			ivjJPanelMinTimes.setName("JPanelMinTimes");
			ivjJPanelMinTimes.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMinTimes.setBorder(ivjLocalBorder3);
			ivjJPanelMinTimes.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMinTimes.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJLabelMinActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMinActivate.gridx = 1; constraintsJLabelMinActivate.gridy = 1;
			constraintsJLabelMinActivate.ipadx = 12;
			constraintsJLabelMinActivate.ipady = -2;
			constraintsJLabelMinActivate.insets = new java.awt.Insets(19, 12, 8, 1);
			getJPanelMinTimes().add(getJLabelMinActivate(), constraintsJLabelMinActivate);

			java.awt.GridBagConstraints constraintsJLabelRestart = new java.awt.GridBagConstraints();
			constraintsJLabelRestart.gridx = 1; constraintsJLabelRestart.gridy = 2;
			constraintsJLabelRestart.ipadx = 13;
			constraintsJLabelRestart.ipady = -2;
			constraintsJLabelRestart.insets = new java.awt.Insets(5, 12, 25, 1);
			getJPanelMinTimes().add(getJLabelRestart(), constraintsJLabelRestart);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinActivateTime.gridx = 2; constraintsJCSpinFieldMinActivateTime.gridy = 1;
			constraintsJCSpinFieldMinActivateTime.ipadx = 55;
			constraintsJCSpinFieldMinActivateTime.ipady = 19;
			constraintsJCSpinFieldMinActivateTime.insets = new java.awt.Insets(18, 1, 3, 3);
			getJPanelMinTimes().add(getJCSpinFieldMinActivateTime(), constraintsJCSpinFieldMinActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinRestart = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinRestart.gridx = 2; constraintsJCSpinFieldMinRestart.gridy = 2;
			constraintsJCSpinFieldMinRestart.ipadx = 55;
			constraintsJCSpinFieldMinRestart.ipady = 19;
			constraintsJCSpinFieldMinRestart.insets = new java.awt.Insets(4, 1, 20, 3);
			getJPanelMinTimes().add(getJCSpinFieldMinRestart(), constraintsJCSpinFieldMinRestart);

			java.awt.GridBagConstraints constraintsJLabelMinReSeconds = new java.awt.GridBagConstraints();
			constraintsJLabelMinReSeconds.gridx = 3; constraintsJLabelMinReSeconds.gridy = 2;
			constraintsJLabelMinReSeconds.ipadx = 7;
			constraintsJLabelMinReSeconds.insets = new java.awt.Insets(7, 4, 23, 6);
			getJPanelMinTimes().add(getJLabelMinReSeconds(), constraintsJLabelMinReSeconds);

			java.awt.GridBagConstraints constraintsJLabelMinReSeconds1 = new java.awt.GridBagConstraints();
			constraintsJLabelMinReSeconds1.gridx = 3; constraintsJLabelMinReSeconds1.gridy = 1;
			constraintsJLabelMinReSeconds1.ipadx = 7;
			constraintsJLabelMinReSeconds1.insets = new java.awt.Insets(20, 4, 7, 6);
			getJPanelMinTimes().add(getJLabelMinReSeconds1(), constraintsJLabelMinReSeconds1);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMinTimes;
}
/**
 * Return the JRadioButtonExclude property value.
 * @return javax.swing.JRadioButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JRadioButton getJRadioButtonExclude() {
	if (ivjJRadioButtonExclude == null) {
		try {
			ivjJRadioButtonExclude = new javax.swing.JRadioButton();
			ivjJRadioButtonExclude.setName("JRadioButtonExclude");
			ivjJRadioButtonExclude.setSelected(true);
			ivjJRadioButtonExclude.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJRadioButtonExclude.setText("Exclude");
			// user code begin {1}
			ivjJRadioButtonExclude.setEnabled(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJRadioButtonExclude;
}
/**
 * Return the JRadioButton1 property value.
 * @return javax.swing.JRadioButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JRadioButton getJRadioButtonForce() {
	if (ivjJRadioButtonForce == null) {
		try {
			ivjJRadioButtonForce = new javax.swing.JRadioButton();
			ivjJRadioButtonForce.setName("JRadioButtonForce");
			ivjJRadioButtonForce.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJRadioButtonForce.setText("Force");
			// user code begin {1}
			ivjJRadioButtonForce.setEnabled(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJRadioButtonForce;
}
/**
 * Return the JTextFieldConstraintName property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldConstraintName() {
	if (ivjJTextFieldConstraintName == null) {
		try {
			ivjJTextFieldConstraintName = new javax.swing.JTextField();
			ivjJTextFieldConstraintName.setName("JTextFieldConstraintName");
			ivjJTextFieldConstraintName.setPreferredSize(new java.awt.Dimension(149, 20));
			ivjJTextFieldConstraintName.setMinimumSize(new java.awt.Dimension(149, 20));
			// user code begin {1}
			ivjJTextFieldConstraintName.setDocument(
					new TextFieldDocument(
						TextFieldDocument.MAX_DEVICE_NAME_LENGTH,
						TextFieldDocument.INVALID_CHARS_LMCONSTRAINTS) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldConstraintName;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param o java.lang.Object
 */
public Object getValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	 
	if(con == null)
		con = new LMProgramConstraint();
	
	con.setConstraintName(getJTextFieldConstraintName().getText());
	
	con.setMaxHoursDaily( new Integer( ((Number)getJCSpinFieldMaxHoursDaily().getValue()).intValue() ) );
	con.setMaxHoursMonthly( new Integer( ((Number)getJCSpinFieldMaxHoursMonthly().getValue()).intValue() ) );
	con.setMaxHoursSeasonal( new Integer( ((Number)getJCSpinFieldMaxHoursSeasonal().getValue()).intValue() ) );
	con.setMaxHoursAnnually( new Integer( ((Number)getJCSpinFieldMaxHoursAnnually().getValue()).intValue() ) );
	con.setMinActivateTime( new Integer( ((Number)getJCSpinFieldMinActivateTime().getValue()).intValue() ) );
	con.setMinRestartTime( new Integer( ((Number)getJCSpinFieldMinRestart().getValue()).intValue() ) );
	con.setMaxActivateTime( new Integer( ((Number)getJCSpinFieldMaxActivateTime().getValue()).intValue() ) );
	con.setMaxDailyOps( new Integer( ((Number)getJCSpinFieldMaxDailyOps().getValue()).intValue() ) );
	
	String dayString = getJCheckBoxDayChooser().getSelectedDays7Chars();
	if( getJComboBoxHoliday().getSelectedItem() != CtiUtilities.STRING_NONE )
	{
		con.setHolidayScheduleID( new Integer(((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getSelectedItem()).getHolidayScheduleID() ));
		if(getJRadioButtonForce().isSelected())
			dayString = dayString + "F";
		else
			dayString = dayString + "E";
	}				
	else
	{
		con.setHolidayScheduleID( new Integer(0) );
		dayString = dayString + "N";
	}
	
	con.setAvailableWeekdays( dayString );
	
	if( getJComboBoxSeasonSchedule().getSelectedItem() instanceof LiteSeasonSchedule )
		con.setSeasonScheduleID( new Integer(((LiteSeasonSchedule)getJComboBoxSeasonSchedule().getSelectedItem()).getScheduleID() ));
	else
		con.setSeasonScheduleID( new Integer(0) ); //may be null or have "(none)" selected


	return con;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	getJCSpinFieldMaxHoursAnnually().addValueListener( this );
	getJCSpinFieldMaxHoursDaily().addValueListener( this );
	getJCSpinFieldMaxHoursMonthly().addValueListener( this );
	getJCSpinFieldMaxHoursSeasonal().addValueListener( this );
	getJCSpinFieldMinActivateTime().addValueListener( this );
	getJCSpinFieldMinRestart().addValueListener( this );
	getJCSpinFieldMaxDailyOps().addValueListener( this );
	getJCSpinFieldMaxActivateTime().addValueListener( this );
	// user code end
	getJTextFieldConstraintName().addCaretListener(ivjEventHandler);
	getJCheckBoxDayChooser().addActionListener(ivjEventHandler);
	getJComboBoxHoliday().addActionListener(ivjEventHandler);
	getJComboBoxSeasonSchedule().addActionListener(ivjEventHandler);
	getJRadioButtonExclude().addActionListener(ivjEventHandler);
	getJRadioButtonForce().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMProgramConstraintPanel");
		setPreferredSize(new java.awt.Dimension(350, 360));
		setLayout(new java.awt.GridBagLayout());
		setSize(350, 403);
		setMinimumSize(new java.awt.Dimension(350, 360));

		java.awt.GridBagConstraints constraintsJCheckBoxDayChooser = new java.awt.GridBagConstraints();
		constraintsJCheckBoxDayChooser.gridx = 1; constraintsJCheckBoxDayChooser.gridy = 4;
		constraintsJCheckBoxDayChooser.gridwidth = 3;
		constraintsJCheckBoxDayChooser.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJCheckBoxDayChooser.weightx = 1.0;
		constraintsJCheckBoxDayChooser.weighty = 1.0;
		constraintsJCheckBoxDayChooser.insets = new java.awt.Insets(3, 4, 1, 6);
		add(getJCheckBoxDayChooser(), constraintsJCheckBoxDayChooser);

		java.awt.GridBagConstraints constraintsJComboBoxHoliday = new java.awt.GridBagConstraints();
		constraintsJComboBoxHoliday.gridx = 2; constraintsJComboBoxHoliday.gridy = 5;
		constraintsJComboBoxHoliday.gridwidth = 2;
		constraintsJComboBoxHoliday.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHoliday.weightx = 1.0;
		constraintsJComboBoxHoliday.ipadx = 29;
		constraintsJComboBoxHoliday.insets = new java.awt.Insets(2, 4, 3, 54);
		add(getJComboBoxHoliday(), constraintsJComboBoxHoliday);

		java.awt.GridBagConstraints constraintsJPanelMaxHours = new java.awt.GridBagConstraints();
		constraintsJPanelMaxHours.gridx = 1; constraintsJPanelMaxHours.gridy = 7;
		constraintsJPanelMaxHours.gridwidth = 3;
		constraintsJPanelMaxHours.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelMaxHours.weightx = 1.0;
		constraintsJPanelMaxHours.weighty = 1.0;
		constraintsJPanelMaxHours.insets = new java.awt.Insets(2, 4, 23, 6);
		add(getJPanelMaxHours(), constraintsJPanelMaxHours);

		java.awt.GridBagConstraints constraintsJLabelHoliday = new java.awt.GridBagConstraints();
		constraintsJLabelHoliday.gridx = 1; constraintsJLabelHoliday.gridy = 5;
		constraintsJLabelHoliday.ipadx = 7;
		constraintsJLabelHoliday.insets = new java.awt.Insets(8, 24, 6, 3);
		add(getJLabelHoliday(), constraintsJLabelHoliday);

		java.awt.GridBagConstraints constraintsJLabelConstraintName = new java.awt.GridBagConstraints();
		constraintsJLabelConstraintName.gridx = 1; constraintsJLabelConstraintName.gridy = 1;
		constraintsJLabelConstraintName.ipadx = 7;
		constraintsJLabelConstraintName.ipady = 4;
		constraintsJLabelConstraintName.insets = new java.awt.Insets(20, 22, 6, 7);
		add(getJLabelConstraintName(), constraintsJLabelConstraintName);

		java.awt.GridBagConstraints constraintsJTextFieldConstraintName = new java.awt.GridBagConstraints();
		constraintsJTextFieldConstraintName.gridx = 2; constraintsJTextFieldConstraintName.gridy = 1;
		constraintsJTextFieldConstraintName.gridwidth = 2;
		constraintsJTextFieldConstraintName.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldConstraintName.weightx = 1.0;
		constraintsJTextFieldConstraintName.ipadx = 1;
		constraintsJTextFieldConstraintName.insets = new java.awt.Insets(18, 4, 6, 59);
		add(getJTextFieldConstraintName(), constraintsJTextFieldConstraintName);

		java.awt.GridBagConstraints constraintsJPanelMaxValues = new java.awt.GridBagConstraints();
		constraintsJPanelMaxValues.gridx = 1; constraintsJPanelMaxValues.gridy = 3;
		constraintsJPanelMaxValues.gridwidth = 2;
		constraintsJPanelMaxValues.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelMaxValues.weightx = 1.0;
		constraintsJPanelMaxValues.weighty = 1.0;
		constraintsJPanelMaxValues.ipadx = 4;
		constraintsJPanelMaxValues.ipady = -11;
		constraintsJPanelMaxValues.insets = new java.awt.Insets(7, 4, 2, 45);
		add(getJPanelMaxValues(), constraintsJPanelMaxValues);

		java.awt.GridBagConstraints constraintsJPanelMinTimes = new java.awt.GridBagConstraints();
		constraintsJPanelMinTimes.gridx = 2; constraintsJPanelMinTimes.gridy = 3;
		constraintsJPanelMinTimes.gridwidth = 2;
		constraintsJPanelMinTimes.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelMinTimes.weightx = 1.0;
		constraintsJPanelMinTimes.weighty = 1.0;
		constraintsJPanelMinTimes.ipady = -11;
		constraintsJPanelMinTimes.insets = new java.awt.Insets(7, 40, 2, 3);
		add(getJPanelMinTimes(), constraintsJPanelMinTimes);

		java.awt.GridBagConstraints constraintsJComboBoxSeasonSchedule = new java.awt.GridBagConstraints();
		constraintsJComboBoxSeasonSchedule.gridx = 2; constraintsJComboBoxSeasonSchedule.gridy = 2;
		constraintsJComboBoxSeasonSchedule.gridwidth = 2;
		constraintsJComboBoxSeasonSchedule.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxSeasonSchedule.weightx = 1.0;
		constraintsJComboBoxSeasonSchedule.ipadx = 24;
		constraintsJComboBoxSeasonSchedule.insets = new java.awt.Insets(6, 4, 6, 59);
		add(getJComboBoxSeasonSchedule(), constraintsJComboBoxSeasonSchedule);

		java.awt.GridBagConstraints constraintsJLabelSeasonChooser = new java.awt.GridBagConstraints();
		constraintsJLabelSeasonChooser.gridx = 1; constraintsJLabelSeasonChooser.gridy = 2;
		constraintsJLabelSeasonChooser.ipadx = 3;
		constraintsJLabelSeasonChooser.ipady = 4;
		constraintsJLabelSeasonChooser.insets = new java.awt.Insets(8, 22, 9, 7);
		add(getJLabelSeasonChooser(), constraintsJLabelSeasonChooser);

		java.awt.GridBagConstraints constraintsJLabelHolidayUsage = new java.awt.GridBagConstraints();
		constraintsJLabelHolidayUsage.gridx = 1; constraintsJLabelHolidayUsage.gridy = 6;
		constraintsJLabelHolidayUsage.ipadx = 18;
		constraintsJLabelHolidayUsage.insets = new java.awt.Insets(6, 24, 6, 9);
		add(getJLabelHolidayUsage(), constraintsJLabelHolidayUsage);

		java.awt.GridBagConstraints constraintsJRadioButtonExclude = new java.awt.GridBagConstraints();
		constraintsJRadioButtonExclude.gridx = 2; constraintsJRadioButtonExclude.gridy = 6;
		constraintsJRadioButtonExclude.ipadx = 6;
		constraintsJRadioButtonExclude.ipady = -5;
		constraintsJRadioButtonExclude.insets = new java.awt.Insets(3, 4, 1, 2);
		add(getJRadioButtonExclude(), constraintsJRadioButtonExclude);

		java.awt.GridBagConstraints constraintsJRadioButtonForce = new java.awt.GridBagConstraints();
		constraintsJRadioButtonForce.gridx = 3; constraintsJRadioButtonForce.gridy = 6;
		constraintsJRadioButtonForce.ipadx = 5;
		constraintsJRadioButtonForce.ipady = -5;
		constraintsJRadioButtonForce.insets = new java.awt.Insets(3, 3, 1, 57);
		add(getJRadioButtonForce(), constraintsJRadioButtonForce);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
		//	default day of week and season check boxes to all!
	  	getJCheckBoxDayChooser().setSelectedCheckBoxes( "YYYYYYYN" );
	  	getJCheckBoxDayChooser().setHolidayVisible(false);
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxDayChooser_Action(java.awt.event.ActionEvent e) 
{
	fireInputUpdate();
	
	return;
}
/**
 * Comment
 */
public void jComboBoxHoliday_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	enableHolidayUsage(getJComboBoxHoliday().getSelectedItem() != CtiUtilities.STRING_NONE );
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxSeasonSchedule_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jRadioButtonForce_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	getJRadioButtonExclude().setSelected(! getJRadioButtonForce().isSelected());
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jRadioButtonExclude_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	getJRadioButtonForce().setSelected(! getJRadioButtonExclude().isSelected());
	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		LMProgramConstraintPanel aLMProgramConstraintPanel;
		aLMProgramConstraintPanel = new LMProgramConstraintPanel();
		frame.setContentPane(aLMProgramConstraintPanel);
		frame.setSize(aLMProgramConstraintPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * This method was created in VisualAge.
 * @param o java.lang.Object
 */
public void setValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	if(con == null)
		con = new LMProgramConstraint();
	else
	{
	
		getJTextFieldConstraintName().setText(con.getConstraintName());
	
		getJCheckBoxDayChooser().setSelectedCheckBoxes( con.getAvailableWeekdays() );
		getJCheckBoxDayChooser().setHolidaySelected(false);
		
		getJCSpinFieldMaxHoursDaily().setValue( con.getMaxHoursDaily() );
		getJCSpinFieldMaxHoursMonthly().setValue( con.getMaxHoursMonthly() );
		getJCSpinFieldMaxHoursSeasonal().setValue( con.getMaxHoursSeasonal() );
		getJCSpinFieldMaxHoursAnnually().setValue( con.getMaxHoursAnnually() );
		getJCSpinFieldMinActivateTime().setValue( con.getMinActivateTime() );
		getJCSpinFieldMinRestart().setValue( con.getMinRestartTime() );
		getJCSpinFieldMaxActivateTime().setValue( con.getMaxActivateTime() );
		getJCSpinFieldMaxDailyOps().setValue( con.getMaxDailyOps() );
	
		getJComboBoxHoliday().removeItem(CtiUtilities.STRING_NONE);
		for( int i = 0; i < getJComboBoxHoliday().getItemCount(); i++ )
			if( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getItemAt(i)).getHolidayScheduleID()
				== con.getHolidayScheduleID().intValue() )
			{
				getJComboBoxHoliday().setSelectedIndex(i);
				break;
			}
		getJComboBoxHoliday().addItem(CtiUtilities.STRING_NONE);
		if(con.getHolidayScheduleID().compareTo(new Integer(0)) == 0)
		{
			getJComboBoxHoliday().setSelectedItem(CtiUtilities.STRING_NONE);
		}
		String holidayInfo = con.getAvailableWeekdays();
		enableHolidayUsage(true);
		if(holidayInfo.charAt(7) == 'E')
		{
			getJRadioButtonExclude().setSelected(true);
		}
		else if(holidayInfo.charAt(7) == 'F')
		{
			getJRadioButtonForce().doClick();
		}
		else
		{
			enableHolidayUsage(false);
			getJComboBoxHoliday().setSelectedItem(CtiUtilities.STRING_NONE);
		}
		
		getJComboBoxSeasonSchedule().removeItem(CtiUtilities.STRING_NONE);
		for( int i = 0; i < getJComboBoxSeasonSchedule().getItemCount(); i++ )
			if( ((com.cannontech.database.data.lite.LiteSeasonSchedule)getJComboBoxSeasonSchedule().getItemAt(i)).getScheduleID()
				== con.getSeasonScheduleID().intValue() )
			{
				getJComboBoxSeasonSchedule().setSelectedIndex(i);
				break;
			}
		
		getJComboBoxSeasonSchedule().addItem(CtiUtilities.STRING_NONE);
		if(con.getSeasonScheduleID().compareTo(new Integer(0)) == 0)
		{
			getJComboBoxSeasonSchedule().setSelectedItem(CtiUtilities.STRING_NONE);
		}
	}
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}

public void enableHolidayUsage(boolean val)
{
	getJRadioButtonExclude().setEnabled(val);
	getJRadioButtonForce().setEnabled(val);
}
}

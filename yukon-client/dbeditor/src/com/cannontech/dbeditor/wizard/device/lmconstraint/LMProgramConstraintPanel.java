package com.cannontech.dbeditor.wizard.device.lmconstraint;

import com.cannontech.common.gui.util.TextFieldDocument;
import com.cannontech.database.db.device.lm.LMProgramConstraint;
/**
 * Insert the type's description here. 
 * Creation date: (3/2/2004 10:09:59 AM)
 * @author: 
 */
public class LMProgramConstraintPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener {
	private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser ivjJCheckBoxDayChooser = null;
	private com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooser ivjJCheckBoxSeasonChooser = null;
	private javax.swing.JComboBox ivjJComboBoxHoliday = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxDailyOps = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursDaily = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursMonthly = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursSeasonal = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinRestart = null;
	private javax.swing.JLabel ivjJLabelAnnually = null;
	private javax.swing.JLabel ivjJLabelDaily = null;
	private javax.swing.JLabel ivjJLabelDailyOps = null;
	private javax.swing.JLabel ivjJLabelHoliday = null;
	private javax.swing.JLabel ivjJLabelMaxActivate = null;
	private javax.swing.JLabel ivjJLabelMinActivate = null;
	private javax.swing.JLabel ivjJLabelMonthly = null;
	private javax.swing.JLabel ivjJLabelRestart = null;
	private javax.swing.JLabel ivjJLabelSeasonal = null;
	private javax.swing.JPanel ivjJPanelMaxHours = null;
	private javax.swing.JPanel ivjJPanelMaxValues = null;
	private javax.swing.JPanel ivjJPanelMinTimes = null;
	private javax.swing.JLabel ivjJLabelConstraintName = null;
	private javax.swing.JTextField ivjJTextFieldConstraintName = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JLabel ivjJLabelSeasonChooser = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursAnnually = null;

class IvjEventHandler implements com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooserListener, java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJCheckBoxDayChooser()) 
				connEtoC6(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJComboBoxHoliday()) 
				connEtoC7(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJTextFieldConstraintName()) 
				connEtoC1(e);
		};
		public void JCheckBoxFallAction_actionPerformed(java.util.EventObject newEvent) {
			if (newEvent.getSource() == LMProgramConstraintPanel.this.getJCheckBoxSeasonChooser()) 
				connEtoC5(newEvent);
		};
		public void JCheckBoxSpringAction_actionPerformed(java.util.EventObject newEvent) {
			if (newEvent.getSource() == LMProgramConstraintPanel.this.getJCheckBoxSeasonChooser()) 
				connEtoC4(newEvent);
		};
		public void JCheckBoxSummerAction_actionPerformed(java.util.EventObject newEvent) {
			if (newEvent.getSource() == LMProgramConstraintPanel.this.getJCheckBoxSeasonChooser()) 
				connEtoC3(newEvent);
		};
		public void JCheckBoxWinterAction_actionPerformed(java.util.EventObject newEvent) {
			if (newEvent.getSource() == LMProgramConstraintPanel.this.getJCheckBoxSeasonChooser()) 
				connEtoC2(newEvent);
		};
	};
/**
 * LMProgramConstraintPanel constructor comment.
 */
public LMProgramConstraintPanel() {
	super();
	initialize();
}
/**
 * connEtoC1:  (JTextFieldConstraintName.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JCheckBoxSeasonChooser.JCheckBoxSeasonChooser.JCheckBoxWinterAction_actionPerformed(java.util.EventObject) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 java.util.EventObject
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.util.EventObject arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JCheckBoxSeasonChooser.JCheckBoxSeasonChooser.JCheckBoxSummerAction_actionPerformed(java.util.EventObject) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 java.util.EventObject
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.util.EventObject arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JCheckBoxSeasonChooser.JCheckBoxSeasonChooser.JCheckBoxSpringAction_actionPerformed(java.util.EventObject) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 java.util.EventObject
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.util.EventObject arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JCheckBoxSeasonChooser.JCheckBoxSeasonChooser.JCheckBoxFallAction_actionPerformed(java.util.EventObject) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 java.util.EventObject
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.util.EventObject arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (JCheckBoxDayChooser.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jCheckBoxDayChooser_Action(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxDayChooser_Action(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JComboBoxHoliday.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.addDataInputPanelListener(Lcom.cannontech.common.gui.util.DataInputPanelListener;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G51D8E4B0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8FDCD56579385B58FE7E3E33FE36593E3479DD4EE8DAD1334DB636D9B1200D8A7F346922222232C51BADDA2CD8DA9E61DEC481C104C4213A7E8D0B90958D11D4048C6D2A14ACD9DFAAAE5C83774A615E5B3D873D264B5F737EF95EF36E3D67026068E31F9E4FF91F77F95E674F7B3C7F5FF311CADE1BE4DE12D5A2C9CB4C927F6F6DA51214F419A425F95E590338B9D74719A45DFF6BGD6CADB5692
	E4AA64A5D4451B0A24C7BD39104E00741C72F853EAF8DFA5BD6119F396DE4248198AF97B26DD717341657C318765AC25696CCD7970DC811089380AC9F1A687C011D43E290C6377C3FA85FFA730A4CB12EAFFC4E8FA9DE5BAFCB4274B053C8A003A4904E657268A1EFF8EF093GB2GF2A7B3DA8BBC17D16D3ED9DF4769BA2E18AAE55C75EAD6811125AB9FE18C670D42B2249FD3C7E4CB1DD5C76159505A573B375B5DDF5DEDF3395CAED56EF6D45B3BE43BD3F5FB2BCFBB3F30F96D55F6791433DB2ED67ABDDEF7
	2F5756DFDFEFBD524ADE1B5CAE1F6A35B9DDEA2B4DA5AB606EEB089D17B9F2298CC9CA813913A84E6CA43EEB07F78F4058EB5016FB8A9A382E937A26CA29572C8CEB4B7CEB384F22B4DBA62E4CDC9E93C54A7F0C568D61EB017498GE66741D7BE982E1D5D422A41CC6536CE590436AE0AC2DB2FFB0768D2FBED1C498AE03F96711E3D84FF8E5293G222FC59F3C73BA7A207D6CAF244C2E462C42B0BEC83816593E60DA4D87D147AA4CEBE8FCF651982B7CB14885688408G0882C8GA8276D62155EB760595825
	B6397B7B5D2EC60F6700E2779EF15BE5855E6B6BA10763BE143B5DDE3BA431587F0E234AC09F04149F8746BD81E65B8989E3B57A431BA4D5FDBB4BECE05B74F9162CF4DE06E90AE61BE78A715B5FE96CEC0477A53CEDB27C0A1384BFDD07E73110C769C9DA1A9AE74A3F8E7D5C3E82F5311AA6CBC55B1A32169A689299D717D5F6BD532166FACD976663061344479D0077830C87188A108810F6BD7A3837F747D0BEBE84B168F559146383DD9E1BD7BDB060D46C32177BDA5EB4182F0D007179064D477CB2F5073E
	0ED2FEF64050AFA9D3DF4FB25D407CD1F1036697A6BBBA2C6C069BC2E3E3052843D7E81BE83D0155E136403FCE711DBABC2B5B1F5036C569A0EFAEG234F2074F5510C3ED014E35AC74B5161D9B927A8BDC90F05BC530DF1A6D63F777711BEF88C24A782CC87C882D8G10FB937455B7E19D7F34F76B853623D6DD7DB25EBE474B70147D501F9C02DE45666A16BF32F91D36AEC576C91CC6F5903FF685701D216D3B9BE43CA73BE42FCDF53ADDD03A2DDF06E072B11A2FBBD6929A2FCCF35B1C7DB2886877C8D86E
	FFB9D641D3317954FFFA6CB6D556A8D87EF79CA4A6CE59BE029221GC2FB936D53E81F5EG6F6DB7212F1676935CB4C8A78A3F94B80B6179BE84372C5457B7BB3B099AB66F990C51054E7DA416005E7E93A8F7DA1CE9860063E6F87FE91CA996A062E7606B695036G4AEE01FAG307C9C5A99C06DAF006697581E7F5A0EF15BDCF023D4B52F51B0EEE9FB0FE1B1E80F890E5B1213C41FF1000F86C882D8G107F4BB8D3950095C0819887908D108430GA07FD7108FE085D0FE05730315CEA2FC28B6C7EC9CCE9B
	A5C06C8E46911F919F11F762B372AC62E5935F66CE57F84A388F4315BFB5CC9E299BA3BC2993AA8F72C9DD466A74E33EE83BA0DF948E538F84DEB3406581147277157CD9401FE69A179A6DEA5E9642157FCA987C32B078B5BA3BC93F34AEA8EF25B460A2FD4DB8081329G093F4236526234C8348FB9E0734958EB9C73C203176DDA4BE1346F1EA43E12CF49AE35D97648AEBB3C78F81B351EA43A717E2447ADE1DB7F1062497852848D5EA7706DA7D7B23CCCE6B3DA6F04791DB45F262ADEE75700AA9F17D55569
	6A55789DD497DF40506563361EF693DBD34146CC005CDF232D4F1CA4F5007D02556D6E9B7034119E0F77AF71F49ED58174353F467634E1AF19FF370B74DBB42D655F72CE7BA075C878069BDBFAE0B2E68DAAA37BA24A57E43C30170CB9B84E19B9FE990F6B82C137FC9F21BB87F6C581A481E4GD44C08B3B583A8B350AF6776FA06A86FE2F49E5C169FD05961640E243DDF8830981B5F973E0D7C254F380DBC53E75CC61E6F9B3C8DAC6EB3EA83ACAFC7A1363BCF3BF4EDAACFA163A2ACADDCB2ED5802C5E26B14
	3F3691BB1CAE27FA42E96F1555634EAFE468FFE7103691CB475E8970BEF5860EFD27B7605837710B6B24584FAA8C675511576E4912EEE56D2064D6ED6CE3BA65771336AAABF2BFB82A49BD60D2993E180E6B9C6F4B263897CA4E915E4A43ED604303CED931EBAB2223B083296A066EC42D267F3219C565C95BA91B3F5AF79A7CD6CDAB253A09643ECBDE37D85EFAEB2FA55C6A2A2A4769158F39BC83D854160F3654B0BD629AFE4874E8F2485DFD875C7E63324D67F6B5B95CEE1F6C2DB2C6D78B7489A719F8B752
	AA784CC69F2D3237476D6D176DD4616A815529D4D39D0FF51D043A9A3E265BD87C2F1212F7DF142E47877A7BC7DB576D28EB07FCF13AFA3CD04D232B6B8E54756D420997236BC11B220C2E2635CC4FA9BBFF9428E7336D8CAA49A4D79BAAE0BB2D728643543C1096F3B2D446E70C3B529A3E50BD206CCE897D3A3CBF066B6B6E6FF2C3D9ADEE45E9371D790FABEB335B1BED2A0DFA0DE22CCE1FCA16B4155620CD1AEE3A3A2A6E9DF032EAB1E6A3E66CE2B6BCA11D7EEAECB02876DD5C0F8B56723E326938476922
	1D65911B1F94FD0A2F382A7A5D83BE391A7E5B24B83B7BC2B5B9C272C628485BCC0F5F76066A61F4FD05FA54B1BD9E72788D7C51ECF3AAE70EF9FC232C43EE2603D2982A035375A1D97BFA55D1D6E19B9F3B8EFCFA56408FAD6E812F0FBAE33455584663533C665F6174B8826D4EB17A1AEC97FD4E0B2B3F8C278B6B3EED4AE8ABA34615EF9704552551659A00E1E3549DD30BEB466BBDF48F9966ECADG1D3762BA6A72FE120F6BA83ED8ECF2AB8A1BD6C2DE422DE44E58F632C4B78F745F4A4EABD6087CB1C364
	C78F111FBCC43E294FA8BF7F36B8934B7F26E13E46FF7390798F8E113FCC99BCFF67907936A172AF9BA27F17C364BFBEC47E4A7E41735F891B4F62642C2B082CCF644F87E4D737CC965A6F4BE7F00F50D59C147711CD9950769E7F4BC556EB0AEE0D4E707FF69B2F973E61A66B72BED17E7FF167C8E48F11154956B753EC24CC18A5765B3CE7482683BF973BFF137EDC4C8271C14E50BA61295E06E7B8BFEDA0B4615A1165F6D2CE63BEBCBB9B87FCD1A44EF8D9526DFC5DC369CC7B11CE01F48440545B0D684E5A
	11AEB71651D9E20D685E1311EE8C270BB424DB5503F4191C2E68B7C6F48F8BBA8F640F850866F48BFE23273B269769EA6362CCD6GA5AE303C68B8C2F72FB80B5BAAF0FF253887E0F17ECD931E819CA9521FA95AFD35066BC98269F17C1CA6BE78EC64614FC9399B81DF9B0F7D55920FFE5F275167F3F7BB6956B40F29E99E7DDA1361EE71AC07A7F40FBE7590AC627D98173F7690DD495EB5C773583A614DF724503D78F769699EEE2BB51D26DDF21B3B49ED17DBA0341B44D27CA327CC660C4C8F7FBE28BF0F1C
	D138A5ABAF0C9FDA387D8E1D9F9C47AA4C6CDCF0CF9F7AFDEABC4671D57564DC4868ACB2E81ADBDF9FB84F65E70D4D1BF3391E2971F826F8D9BEE913E589F1269A0096GF63EF1121EFB90391D000BCC40FEF777E6FD3FB1A7016D37E542130D01776CA3F1B24C45BC2F0704AD452C5E0206B5746D64D57B395C241BA6CB8D67179B1EF30EADAC494A3F037934768E4D37B5CFADB7B783B07B123B513EB1C09383407A134B3A757DC97A9D4C3E7D3F0DB3357D96ED5CE7BF8E4FD158AA60E7CBD1F654CD8119D1C2
	EE1EFCA1F2C7306C67F2BDB24ACD8119A53FC33977DE185C61AF61395C069E14EB851991C26EB5BD9FDC005CE1AF47A5BC434B6DC539B3C0E6466FB086469668E320AA1145009F1E6392D1B7F7AF19038EFFD108FD4E06FD3B61B962D53730A1C95890853A25A4E2BB7D7AB1FDBBAD39135950F0A76A3F43B1D27D79397CF6FDFF9F1BDA99363FEF3D131FA95D995C5F477BC8FFB48670936E447EFE5767ABF57D7D07D0DFB6D7AF4CA0449E6D67C4FF18AB70F45A67C4AE1DABC8B8771586086DD3214C84009400
	8C00123BD0065BBB64797A3B7EC14E5777778D671C3C76AE5CD7BF349979DA6EE23E6838CBBBE37040FB04AECDF1748CFAE7812963483B5899F4294037D0FC128E4FE2623B34CFA7E969EE987F6FC6791EFD41FA37A7854AD303520C6F4B903E6A20F4E4909F0B71CD15E40EC147ABDD77DFDF2F6D8133F149C347A5A2EBDA921E8DFFF40A7026C15AB4936626GF5G9DGFE0009B331AEEF739A0D5D01F599EE60564E2D181D8FF50F4CBF8BC278027DB3E32611FF9EF7B5CAC30F672EEE87B48166B8432ED042
	3BC4F7F4631CE16ECC9C5FBFD0C8AC644F0AB3ED84E8180531F03DFDE436460470855B5AB64B086F14BCB2F991A1FC417294C3F987FAC6A62FB504AFD8DE04213C953DA313D7914277EAD0FA62AC235819D43BF70431238DB598B73185B8AF1CBE8B63E676D192B78BA0ED1A8D6DEFB6464D6FC7E8E7EA88DF30DFEBE79B59592B14CB06FD886E4FF29BFEF98C7B906BEC6CC33EF71A60A2A0BDE1B6769765BEF20E0863CB2B9BA6E9920EAD09BE326EF4FB1D60B1444D2438EE37179E46B1DC6EC078F342428163
	F342528163F3427201414F52B78C04BBC7E4675EA768BAA18A6C0B85E038CE5A1F4E05F43A401D27F5EC1A93E7AA1B03380EC2FAA78752ED82776FA20273C3FA7C9C2C73BD8515C4862493GD2819611F26E01BE992083E08C40C40018FB1067A865A16BCF3236CC867CA2000A5F3335B5D93FB640FBA7C0446F11672A7CC93A7AA7E5696321A3A82D07BA2E832609FEC6F4E5DC4FF06584835A0B69A8611304GDDCB037886BB27AE1034BBA6AB247077C2722440FBA7C3811E17E31A0C832F50671DAF537BEC90
	F6320F8E06E4F548731ED0CBA503F3E5F2A4AB613E6614FD4BB84D3B2A3BE91B04EDFAC04CE722FE9F6A539840A58561797D10D3615BCF6FA9637653FF0A784D679E70F64B41EDC4BDD5A67234517D10AA7793B3785E9365D7ED5EDEB9240DC5D0FE16970E7F32D3615AA173D129DD6F236D42C7F7054C8D7410EA60B7B6373B030E5B993FE7F33BA582BF0B6225BFE8F8B667BB21607D65FC48737C8167790F846835C368FB232C47578A7C199EBDDEBB5BFB37D70F5FA56C3B23G6D1B8BB2537E90E84FA2C897
	4DB51A53B69D23F7F267865BE725781A3941764DBB0A76B5C05E2439E85FB207DE2F3705DE379DA3FA1966C1BFB5AF5447D586B8D64FBFB8CDE478C57AEA1ABEA361F8A4B72E9031722E4B4E879036AF6622FD716BA6C93AC6786D74E692F79E2F5CA3FB3D321DDD4B107C73887DF85ACF6F07F76BBC3467FB85E43CD1ECE75C83D0EE659F69FD6495389E1D81F4F38196917EBF32B59D536B6653243F68715A7AA1AC0FFB64EE49F4AF617595A22F8768A3G22G92G667F91E5CEA8A23C40686C9F68279AB27D
	3AD6927D2CD0CE7B3DC87BF19D69130CA693ACDF2DAB2279012727AC6F32BA2247E13AA50587A36827167344CF072D36AED961CC4207138BCAC4DE602D91167F4DDEE2E3381BA50CE6F35D4BD2383D8414933B2AD02F9F5F54E6F90DFA5D1D6CE2AC723D7A6AAA21DFE041ECBF6165257A7D0408FBD93DCD05670CFBF13DFE459A7DFAFDAE274994792FA8C679794938E7E16AB712E1A17902663965C6B4D6486FCCC6B9B76FB41263CF467941B8B13798A7F087DDB80F18A4F09FAC47F9C43A40BD520DF4267BF0
	9C3D1BFC8A415B6CDC5D7BA74AE07766AE96781AE4D4E5B01BD38A50DFED77219F76F4901C83526784AE3BC978D060CEACA138F4C8675EAF76900EE9BE7AD0777E40515177D746284AE0B64F2373788A303776FE74C3C3AB7AF03F404D320839AB60226EA75FDF1DA7472F588F95D8606912CFDB44E6D6B334D9973914DE39E3E7CD15E5472E1AADECAFEB52E97DDED65D726A30FBD9E97733F1E391FF263C34160FCFBBD66078D47BG6878G764B5BBA8376C008A275756FF91D768336DEAB6D65597A656C0ADC
	4E9F7500788E08161982698C007C943C3B675F0CE78C51BF1EACD9479CB07C66A935EDCB56469426E7CB0A367796A34E982EAAC4199110BFA30560FED728EF7F441777E431359A4B7FC7C0BE1993117DFEAD7F4DA2FDBE517756G7ECF8272090F36F0FEE65B5D1B5036C5F7CF1314DBEA42FE4FE5FA1059D4491F1E19EB2548EB724CAC962E1634D87064DFC8AC307AFAF6CB19E4385E24BDBF735B512544EFE44C6CFC906B6A2693F40F8E5253G929F447AFF36A7CCF9F434E065A52E4135EBAA70B1DC1B02EB
	7232079057500FF2DB9FC239F5A6A2F7ACC98344885A6ABC241DA3E8FBF288ED6E43B0AEG54BD0C34E9BBD1FEAB605858FF8B6D6747C2FA82C04643346EDC4D0334DFB377B7C2AC704C85A865F9E98FEBF3BAA6638BBAC6B4244619DAD2D1C6E677D0B274F2D4609B1B4AE41074C4F8BF824FE796AFDE4CE418E93B1A8A786929B8077930034C313A5CDE3A88E0F3ACE7870E0D29C01789D07B88687588BBC3E53A2DED9ACC37ECDEDF28DFA7702A0FE8760FFDC4331F6961DAE2BC6F7A966D77A7G7D24C7D067
	8547882D6AF6ABEDCE8F1969C8AC4E17E5C9421FB26DA71300A779915479F14BD07E4C53795374E8E01D15C1FA8F5719354F597F2B6FAB0B3EDF1605B685173D71D17E8D5C23417B7E8B33081EF6400FF99477E5923EFC931E9F59CE061E3E8232556B7648DE758C435209999F13F62F985937EE6F0D10EF4C307978F7EA05246DCDFAB4F83D331962239F8DDE6F7CC40CA7B110D771986EE9D519C81C0E0174C40069GC9G8BGF2670BEF284E57C8C36C093739BDD6D800AB3AADA7E65F8F8BC7768D60EF16E2
	3FBD7DD757CBB15FCADF926E5C3BE2BE0B07867E4CCDDACB714C3E5B4D44BE85724682C483A4GA483248B7B7EF93E0A59C74221D1D5ED5D8EFA7A0F461183F98DCD96C34C3663CB51B6536330AE8428FADCDB876E077736470D562AFB5BC9DDB89EE7F534D2600FD17C849D1E555DF4BA9610F4AC64D97F04F33719EB743ECD7E937F9617BF25A7C257240C6FDF8A7215GCDA527EB604F5630FC0D7D48E7879ABF40B89D6DA4F81F7E04113D51F4CCC9FC025935CC60FFC97173F5F8E66FDE0A27F11096E73227
	213DBB72D0FEA260D2G5253B4F926A7218E1EB412FFBF9D272A1E8C167F844537BC99ACDF49C179F648CBFC9265BF35D36F6F2ABFB3D97B79336D4F21FEE3FD6A75041D7751FBDC64FB31B0F307ED353B2BAC5BEB3650EF4A489AB0D7427F52770562307C1994455A4DA37958EEAAEE38C6EA3EB7FD4906B06D4641750D7933561FA614E4AEE7E53E3DDC5359537D1F53B9FD9FAB5F1D27693F3AC013D553B1082C9D35B0372A5B05677CD7F460373769E0C365DFF00EF46BF252DFDD503D16B6272A488768484D
	66AE7F20E748741E4ADFF01E53FA004E45A0BD8DA091E0F836362E50EC7595EA367E746805584A783ED7247145DB862B0F1DBB21BEF6985787AB6B1724AB617DE38F39A24377260EE4ED12420C19508B9E86D96C46C31B2DD770C85944B8310F4906D21E37B41B4C4D49B7C4CE1B627C02DE33BA2E12DB9D7CFBBA6A8B76DE25FB3FE545682FBDE70D2A8CE67FCED378FD698613713E7481137139CE0BE9706F3FDACD613F7FBAE152FF7F456A5D370A54CDAA4472A2G4B82181F8234AC40B171F153FA090E0986
	63613B76DE196E095948DEA5BF6BB20737F536F9686F4B134D244369F22B2A3B1F140F78074C243ED43707A2996EB1B3711157596BD099A947BFE9A6312E48BD944D5675A71762DA5F3EG577AE756533DA4C80F9338A5FB68376310CE9038B18D38A710A6F009153807D277940E8B4D6D96F8DAA16D81988B9085908B1082E07AAB4C8B7E0A347F2434ED10D681A6GCC87188B1081D072B4544353C87B2B93E360C97803630B14CB4AA43268B84765D91F521DADBD954AB7727672A05545689C8A4F1F702CC83F
	86C01AF0E7D24385D68773697A368D7CE4FF9A6BE5FFB12DD3C80F9538EB0B317EA6881CC741F818AFF0171B88AE93523969087B99DD6FD6C03ACA604A72313CBA01EB6F4772468A1C290B60A6C2FA1A402DDDC769A01DA6F0D72D4772721FC1DCAD3DFF5A81E975990C031F1AC867BF965253G6682E4083C5BE9DE515F62CCB5G2DG1E3F0938B40D340FA3B248B3034B8C4E9FAB64FFB2E29998AF38468D4E4F9675FDB88FFDBC7EEF228DF752F3EAC847885C01F202CB01F43A40A5D5200FCB1E95FB238E74
	317DD934A3B50778518F69C80069GA9A26FA91AA7E5C0BF89309F20B383733CB9616CA7E550367A2C66BF7F330337494820FCA6635BE1E568FD28775BE0B202FD4DE3F6973DBB87F60D4FC0BFD575D09FC3FA3A40DD51037E0C4D40B564BDA5E4CF20686F50D6GDA819CG67GA6GCC851881B087A08DC0FA8E6A8220922081408A508920BE07E3CF71B2320797EE6D4EB7BB35C39961277F6E98EA2DB976B9A37FDEBBA4DF709D9A4677120F70C5BDF7E17DEC4CF3785BB089F4BE1974DC705AFDA645A7BF97
	3CF67F68G2E5D67C3DE4B736827332B420F39DFDFB574187B6DD5742EBB0C15EDE7BC7CDCFA7CAAFAE7252747A70B317D4AD5C582F748576A76B949CC0E6D91FD170E2F5120D34C733837B4FEFD68FE581475389FB67FF9369F36881EC5196CAE8763AB5B93FAD639F58F72D5E632334A7D70EC63FCECCF6A3F9B065AC7AB1034FDB485F847E4EAFBD293B20377911F21E37CA440C7E722EE3B5F21E702E13E14E3B43FDBC346BD3693CB51FC3EDE7D2F95D260F91ECD41397C3F0A35F3CA7E311B04F983C59A9F
	FE7005F9FB5B579A6BA38AE1F4651F159B5389C5985D490AB0F4C2B07F4E28DD3F5F1E4C6BA17F9FF85E77699B4167FDA45FA2724D8DC67935A27FB7DB0D72DBC47E922BD1FE07483FC3B5524FA3722D85C67991A27F9345A8BF729F98878B5710EF0BFA4049ACD6D62E25718F79B10266C4B121D121713175560D24A9CAACD6E7948F952B7A7D53393ABDEF921FE9A0833FD1E0722F2273198C40CBAF207CEBCD01BA7E1A4EEF2AA03FCE505C159728631C551A0EDB730752B1FB909D9DAFB09D17899D3FC667C8
	AA6047887965DD21FD4476AEEC6B51AF30BEA2811E49AF303BDD0CEF5B3A50BE22E59D72253F407A085C05F1260A050C0F59B4ED7DD0B6AD55759135405B32D03329E3A1BBABFBF2716245CC0F77BD46FB6D5DF47E66GFAF5A16ADC52945AD675DFBDE3DBFDD2F9B9048E3FCAC61A0769DC1B7797DAB1224FF830C46BB3B4DE965B4F1A02E31B78E752C20C7DE75FB74A1FAE7227EF88EEFBA4BFD164EF4EB64ACFD908E7C0BEBA0FCB0774A2611B711D86E3C52768739731B8588F4F36C56CFE9F6FB74BC36340
	D30EFC4AA2968791700C64FCAC8E9E2B986A7C82FFB70940B460CDD82445C172A2B6D6BCA94E032A68DCF2BE60539721EE4FFBF4F524FD60AE6A28EF3B566773AF3EC5DE444160D8897CC29E693E7838B404CEAB0B55473A254175C17CD071A2565707E6237C9A116FB187478349EF96798BBFB14AEFFFD13471DD017D50B6BA47D4A05FAFE81AFA827B2183EB34FEE8EA4FD0EDD6FFF6975C8FCD8599240D125F3F62FB9AA56167CB8BCA061EAF7D3D44F80FE2E1C9689E05D4EA3CC711D32A5F23603F45D3CA6C
	6805F9ED3B20AB9238FF89DCA9AD1360CEB86D2AC3604BCB17F3FC0BCC84A2FEDDA9516BB44535F35CE69D6EDF9C77E6A9E9CBE03243AD6EA45714523AF3AA8ACB57D29A278B2600429F3B290ECE0FCD2777DE01A3FA33BB21312B8AA82F62F449CD6C5782A5DCF7142A449F53212E12DE44B5C6F2A34125C2BA63C5DCE75DF5C012F05E7D875DFB4701515FAB9C98D599AC6EE5526C719CF77DD07B42EF6F44BD70596BF18FDCFA89467717708CFE75865C47763C047B58C76B896DD4C84782A43F045FE61E5803
	6B0BF440D5AE46B22E5E0377B9BA97E399B3A9EDA4242781A4AE9E6EDE78D892A65C669BAAB41B2FB8F1A1B633767E652E4D12EEFF3FCF692DBE59CDF6CB2BFBC8CFC8AE730BEE913FC9C8E8C7FF248A7B2EFC836FA914C971F8A722C15CDD90384C2D089BABF0F5D644458A5CA295E5E48A5CB78A90D73384F1939444B9G47FC7174FA4D9735456B02FDF190BA514A750D50A1A96B2BAC5B607F6DDB049F0BB7EABE5D39C9AB679B26414E89363F8D2554617942952FEBFCD37206A77F76CACD7E23DB34F27EE1
	9BCC7E5B64FCE3BB467147DD98471340A74942D7133B50D7C5D971BC86FBAD745C8E521DGFEG7E3D69BA0C637100CB4C42B2E256E19CCB59D8461FA8ED9D24DB819CG430B63B5EFEAB6B7D4E9B6178F6AF3341969750699ED9B130D3A3EE1C5DC0C407DE58346DA3A40FD120D38CA9346502DEF697A104E8B777D6CCE74FDA71495E9C2992BED284B9C937A6D7F2D25F7FE4C71A68BC01D99FD9FD90E3EEF855CD8B31611DA0E3E0FB5E399EBAA88EDA6240BF262CD15B94375FDEA35667B6C9A4D66C3B9976E
	7B7625683F7DB9286B7FB5A34EAFF0D3C49DCD93386D1FA2AEAD87FDBFFF3B260725E7F86DE7E92D46DB2512B1DEA5471204C742B5D4B36DDBACCB63CDD5G0C7669C6B3520A325EA0D76C7938B5EF7D4876439E9B124FF8BF2CE283616BG7DAEE45C73G9D5B770A2363D284248377436E267871BABC0B3536FA0C350910A7654663DE741E115D41699BA1DF54307918DD0D8DC4FFFBEE303D07A95E139BEC6F9F4478FC8E72D2053DF73693794D4B0C7D5DEE00E7FC5FFFC32F3742694670670430FC0D8DFA3E
	291CEE86FF4E894B7762D6BD5FFCCE17491F794B43713DE35573D9B8DDADFF360465DBB2C06350A01F56C1D83E31745B1308B0FC11E1792E2277E92243704506656B6C9AD97BF48D49E75CBE27D03E39E1748C06346558BE9F20636D22654171BA1F62F3730263355F0271DA82F97EBC0C57D36BC6564EA2C648F76B307918DD9F53B9F5CADE303D5D941F96E26F82B16F48003C76FC34F72B19481F11EF6C6FB986F84EC763FEFE983E4C30FC699B74766697B0BA8BFF569604636B4A567335F03A8E7E7404651B
	57B94271E5C83EB0630B0D36CF83FD0CA032G63B71B4ECD228B026BB31F62E38A026B734A35D81F8910D739826B730765A30B43689172BDBEECBEE657E5F4FEB5EEC5303D5F2378489541763ED60176C6C1DEEE2198CF176A65AB05FC1C604F8905616262F2F340B84169E670671C30FC5114EF3EC1BE0D7B30FCEFFFCA78720B0C79AC86F83E66A11F7771F9D7D263054E59589E458EBAA72F05322DG8C77475D845789E93588FD18D8AF89BD6F513DFFDCBF7A7B963E2FC046FB8D1ACD2D3A777B760C3E6C3F
	0D2A8CD62729F45FE08C54E7242867028EBC830F92381B69DEC28624CDAB91F75DD902AB03F425402DB8073C3582575E003C9182B72D8CF9A385EE659AA1D760CAEA10B7C3606E7E82F9F30B91D7F5D65C039038B63A5634C3DA9538B99B69F79A100E94381D1B04DC01AB9B8875CB63G52E5883A2B8BC269928B102EF91530D789253BCF9177F7845DEDDD586E668B5C532F517BBB104EAF41F67708C50B45BF6B5EFD16510F4BF1DF010C4E751ACDCE5D7B5F560D3E6C3C75235F6E8E52F5F79954E7CD895673
	0DE60C078601BBE8C53AF182B7450AF41182371446F59A24B3852E02FEE71ADF9AEF2AA8C55C574437271582F7A69BF97D8237B59BF947895C78ECA1D760F658B0DE5384EEB5BDB3DE84692217B1DE1715EBF5D82CFB7F415A512F4F69DF010C6FD6E8B6CD543DEF2A98FD59FBC7D5862BD3156EA7D5C0FDD63D0C75DCCA772E76C33AD5603E10B0C6BA846EDAB372C68B5C6973489BABF0496711B7C96062996F6AF8D36DEA51DF67A05DFE01BB7AA9520D97381FFC0AF493D7631E52618D467BCFDDF43E33G68
	B2856DD33BC3771F26134F39781C6A79F663EF4C6EA5BFD5474F78B6F68C679B404AB298CB81701B0686F8BF8F4F57054C44B7824F9C9F2263F28B503515215E31E7834F9CDF28577459F4EEB8F79F02750900F732893BD81C8FFF0D0E6D6381BF318C778ADFE95064D52E99CC5E52A164A541FBC1003CF768FCA0997073053C7D6FE8721A4E8E67CCB5D8DE491AF8FA8FE231388751E78D747757E85FEB813A2AB5686FA7B6867A3BFB2F260FF553D0768F26CF479A7677B509BE2C3C760161FC6F99DC1EE30D96
	CF2C3C078B86ABEF599075230614172E8CD55EE07A0D5115477C7D841D8F0D83FC2470F70EA534DDFEEB1FA45A48A7E663F6F9D333D6AF896661344BC410CDG4F5ED3603D1B6B494A3E67DD2D6C5B2C432923603253F4E5B3FBDE5D98980335F42C4FGBAE9AD7AE407ABB086B38EEA7AC48E7A9DF2F01B8F562786E42C1174F732A633F9G60DB56E29BDC5D22491B12BD1CB698AC4F3F164D99B4F99DF40E91817871425E6A3521B1D0FFC80B01EFAF8D74590F6878958B7CC9220CAAA950E71F9C56EC38C23A
	981FAD62BEFBD174DB3368B816DB9EEFAAA9C71F65D9B5F9CF1F3F981FB5C31965DC9E336D7EB0ED207A08A6531AF3B1ED2095E43A835A4087C73532FF7B694534010E1032EFEC556A762E5D973A17917E1B42B99FE86FD5EDDA597FF3F63DF159F6A85A5D8B0557C06135DB107758BF35F2EEB8211593D5B63CF2E635EB659C7DDF2D1C5B3F98DEB91FF7E865A4FF2A151330F1F865AC7CCCAB67D51B765E58253DBB6D5A7BF7FBB5D90F3DF6717573F30776FE1FD3FB5F29E8F20ADC97E253F6E1D3FB3FD64E6D
	EE2D1C8D5943AB67D10FD64EDE1FD6CE5E5A611D0BFEFFC063DDA68DCF0738AFB59D36AC514A69BBBF3CF22CD9DAB96EEC6D7DBB24EB14585F763E2964CFC512947D14E476F92562503367464B6F3BB77A336612ACA96B10146320F72F8EC966536492179FFC35846AF249273E4FA52AB3CB29D2A57F59AA0B2F5BA15B879459B260136D9655ED117D5D4A00DD36F40362DE37020C92390DF7A528D0A8D4B8C46FEB251E5AD11F7D58B559D9128964337BEB07A493390486EAF819BA592A5B63473F53C74697B2C9
	AD8EAA1B24C83F14456948FD3AACC17391A05B848D49A7CEA27746328DE850FFBF909CF88B177C9ADC16AA9523830EF38754DBD4E925765D07057C9A974195333B6C1663B27F2BA37596A1617DG1D4C06BAB19A2FD4909092F77CE8671F129E7A4817AD659C1256101172386C259F324A742FC5713FC8FBD0DA66A1BF5AC66EG03D3FD74E17629E79459AA1574FCC87E2A05CF156D0D786926CF15CA690FF1EFA51FA0EFED31799CAA39E63847AA19DC64EF67CA45ACDB3139FA37326FE577301AE95CCF75253B
	75206FAA6D7748C5A92BFEDD38E95D6179B159D256C1E9396236598F5A3AD537771034CCF5F8E51F432D587D1EFD2C20DC7A0326E4A0B4C1F16542FCE2ECB599940552FD7E7F99D710D6F090AA5E6F1536D2CAB2B128969476A6074D8B22E46FA1157CADE037F723487B5A2B6A66196F2D6E481216F0A3096BDF76FBD4A907DDC594D1CB0C2EBE88FA2B77BFF56764879A5297G53C149CCFF119BC497E9D4C7877A3BE46F37222FFCA5EFC26A3709E69EE2962D5635AA586B3539FC64974821F0CB10ED18A5D42C
	7E6E1DB5D7DE774247D4C50DD515DEE315812CDBFBE5F77F56461E9E27CB9685C04DC0712F086289CDF590CD317F0A52437396F7C1A4B5CB597DB5B5745FED745F6D645FED94330DE236ED076AC917867DAFB85F0FB653702309D7C92CA0BA2747566FD44E40CBB36D657C847F16DFB48B529C4AF8D93922D910AF434F53D4C9C87091ECD9E89491F4857947C27ED9C749B650FFB78F5BA642D52959C2DE5E8C34E027BF2033F919B76E92E14107G5787F4AFA4BFDA52B7FE0D461863CD7EB46238C47DF2A030E6
	09DFC8071D2BCA854D24BB45EE72D23661B04C480B0F587C9672911225D1D15C27491DECD55ACC108E72E51245C630323D4A72056CF5DB7AE5E8EE96175B22B87B1DAAA90DFC7ED08F9D81FE6A846F397C73A80246AF1B60BD9B8AD525FDC758679C9695C6EE0B6A10AD9E7697FEAC7D83BE5552A5DBEC7CA63E9D925032E50BD335B8FD969F0C1D9E592ECA6F8ED982A78D64570A357552AF9A176315FFB23C65D1C3AC47BCBE124ABEC28816898230095F7B2F3FF4AC3814A32BD3EB9DB80DA1FDDF0ECE67CEDA
	96D908C9E1F44E7E4FEA5AE928E92FBF20A74A631C66CBCFD3D72026441F26CBD35381CD53A21DCF33AFBDCD4F85EA0ABE4D96D83C34D1A6BC0DB1CD68487784B982DB2843E6DD4A2D73DB0111C47EA3374B73822CC62C4950122F28560C753FBCF46CA5F664DFFA1ADE698F080E17B92779D20E0E097ECB4F0F13B5BF66F2DFDE22B5FE1D26A979C01174AA2437B08734B802A11F578436B8441A70F746361C577FEEE366B78B437E46ED6EDB6C7ED585FFEA3F5BE8215F863483DEFDAB1E7F2601E7ADB9BF8B77
	9BD4477BE142265A143EC6171D7C9E5501B32A2C7D865226F2D23E8FE9F8A64B2BAAA7FA1F54717CFFD0CB87882BF147D91FA8GG740DGGD0CB818294G94G88G88G51D8E4B02BF147D91FA8GG740DGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG59A8GGGG
**end of data**/
}
/**
 * Return the JCheckBoxDayChooser property value.
 * @return com.cannontech.common.gui.unchanging.JCheckBoxDayChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser getJCheckBoxDayChooser() {
	if (ivjJCheckBoxDayChooser == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder.setTitle("Day Selection");
			ivjJCheckBoxDayChooser = new com.cannontech.common.gui.unchanging.JCheckBoxDayChooser();
			ivjJCheckBoxDayChooser.setName("JCheckBoxDayChooser");
			ivjJCheckBoxDayChooser.setPreferredSize(new java.awt.Dimension(340, 86));
			ivjJCheckBoxDayChooser.setBorder(ivjLocalBorder);
			ivjJCheckBoxDayChooser.setMinimumSize(new java.awt.Dimension(340, 86));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDayChooser;
}
/**
 * Return the JCheckBoxSeasonChooser property value.
 * @return com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooser getJCheckBoxSeasonChooser() {
	if (ivjJCheckBoxSeasonChooser == null) {
		try {
			ivjJCheckBoxSeasonChooser = new com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooser();
			ivjJCheckBoxSeasonChooser.setName("JCheckBoxSeasonChooser");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSeasonChooser;
}
/**
 * Return the JComboBoxHoliday property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHoliday() {
	if (ivjJComboBoxHoliday == null) {
		try {
			ivjJComboBoxHoliday = new javax.swing.JComboBox();
			ivjJComboBoxHoliday.setName("JComboBoxHoliday");
			ivjJComboBoxHoliday.setToolTipText("Holiday schedule used to exclude control");
			ivjJComboBoxHoliday.setPreferredSize(new java.awt.Dimension(155, 23));
			// user code begin {1}
			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List holidaySch = cache.getAllHolidaySchedules();
				for( int i = 0; i < holidaySch.size(); i++ )
					ivjJComboBoxHoliday.addItem( holidaySch.get(i) );
			}

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHoliday;
}
/**
 * Return the JCSpinFieldMaxActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxActivateTime() {
	if (ivjJCSpinFieldMaxActivateTime == null) {
		try {
			ivjJCSpinFieldMaxActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxActivateTime.setName("JCSpinFieldMaxActivateTime");
			ivjJCSpinFieldMaxActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMaxActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxActivateTime;
}
/**
 * Return the JCSpinFieldMaxDailyOps property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxDailyOps() {
	if (ivjJCSpinFieldMaxDailyOps == null) {
		try {
			ivjJCSpinFieldMaxDailyOps = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxDailyOps.setName("JCSpinFieldMaxDailyOps");
			ivjJCSpinFieldMaxDailyOps.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMaxDailyOps.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxDailyOps;
}
/**
 * Return the JCSpinFieldMaxHoursAnnually property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursAnnually() {
	if (ivjJCSpinFieldMaxHoursAnnually == null) {
		try {
			ivjJCSpinFieldMaxHoursAnnually = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursAnnually.setName("JCSpinFieldMaxHoursAnnually");
			ivjJCSpinFieldMaxHoursAnnually.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursAnnually.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(99999), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(0)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursAnnually;
}
/**
 * Return the JCSpinFieldMaxHoursDaily property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursDaily() {
	if (ivjJCSpinFieldMaxHoursDaily == null) {
		try {
			ivjJCSpinFieldMaxHoursDaily = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursDaily.setName("JCSpinFieldMaxHoursDaily");
			ivjJCSpinFieldMaxHoursDaily.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursDaily.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursDaily;
}
/**
 * Return the JCSpinFieldMaxHoursMonthly property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursMonthly() {
	if (ivjJCSpinFieldMaxHoursMonthly == null) {
		try {
			ivjJCSpinFieldMaxHoursMonthly = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursMonthly.setName("JCSpinFieldMaxHoursMonthly");
			ivjJCSpinFieldMaxHoursMonthly.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursMonthly.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursMonthly;
}
/**
 * Return the JCSpinFieldMaxHoursSeasonal property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursSeasonal() {
	if (ivjJCSpinFieldMaxHoursSeasonal == null) {
		try {
			ivjJCSpinFieldMaxHoursSeasonal = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursSeasonal.setName("JCSpinFieldMaxHoursSeasonal");
			ivjJCSpinFieldMaxHoursSeasonal.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursSeasonal.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursSeasonal;
}
/**
 * Return the JCSpinFieldMinActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinActivateTime() {
	if (ivjJCSpinFieldMinActivateTime == null) {
		try {
			ivjJCSpinFieldMinActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinActivateTime.setName("JCSpinFieldMinActivateTime");
			ivjJCSpinFieldMinActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMinActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinActivateTime;
}
/**
 * Return the JCSpinFieldMinRestart property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinRestart() {
	if (ivjJCSpinFieldMinRestart == null) {
		try {
			ivjJCSpinFieldMinRestart = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinRestart.setName("JCSpinFieldMinRestart");
			ivjJCSpinFieldMinRestart.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMinRestart.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinRestart;
}
/**
 * Return the JLabelAnnually property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelAnnually() {
	if (ivjJLabelAnnually == null) {
		try {
			ivjJLabelAnnually = new javax.swing.JLabel();
			ivjJLabelAnnually.setName("JLabelAnnually");
			ivjJLabelAnnually.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelAnnually.setText("Annually:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelAnnually;
}
/**
 * Return the JLabelConstraintName property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelConstraintName() {
	if (ivjJLabelConstraintName == null) {
		try {
			ivjJLabelConstraintName = new javax.swing.JLabel();
			ivjJLabelConstraintName.setName("JLabelConstraintName");
			ivjJLabelConstraintName.setPreferredSize(new java.awt.Dimension(127, 18));
			ivjJLabelConstraintName.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelConstraintName.setText("Constraint Name: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelConstraintName;
}
/**
 * Return the JLabelDaily property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDaily() {
	if (ivjJLabelDaily == null) {
		try {
			ivjJLabelDaily = new javax.swing.JLabel();
			ivjJLabelDaily.setName("JLabelDaily");
			ivjJLabelDaily.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelDaily.setText("Daily:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDaily;
}
/**
 * Return the JLabelDailyOps property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDailyOps() {
	if (ivjJLabelDailyOps == null) {
		try {
			ivjJLabelDailyOps = new javax.swing.JLabel();
			ivjJLabelDailyOps.setName("JLabelDailyOps");
			ivjJLabelDailyOps.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelDailyOps.setText("Daily Ops: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDailyOps;
}
/**
 * Return the JLabelHoliday property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHoliday() {
	if (ivjJLabelHoliday == null) {
		try {
			ivjJLabelHoliday = new javax.swing.JLabel();
			ivjJLabelHoliday.setName("JLabelHoliday");
			ivjJLabelHoliday.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelHoliday.setText("Holiday Schedule: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHoliday;
}
/**
 * Return the JLabelMaxActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxActivate() {
	if (ivjJLabelMaxActivate == null) {
		try {
			ivjJLabelMaxActivate = new javax.swing.JLabel();
			ivjJLabelMaxActivate.setName("JLabelMaxActivate");
			ivjJLabelMaxActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMaxActivate.setText("Activate: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxActivate;
}
/**
 * Return the JLabelMinActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinActivate() {
	if (ivjJLabelMinActivate == null) {
		try {
			ivjJLabelMinActivate = new javax.swing.JLabel();
			ivjJLabelMinActivate.setName("JLabelMinActivate");
			ivjJLabelMinActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinActivate.setText("Activate:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinActivate;
}
/**
 * Return the JLabelMonthly property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMonthly() {
	if (ivjJLabelMonthly == null) {
		try {
			ivjJLabelMonthly = new javax.swing.JLabel();
			ivjJLabelMonthly.setName("JLabelMonthly");
			ivjJLabelMonthly.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelMonthly.setText("Monthly:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMonthly;
}
/**
 * Return the JLabelRestart property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRestart() {
	if (ivjJLabelRestart == null) {
		try {
			ivjJLabelRestart = new javax.swing.JLabel();
			ivjJLabelRestart.setName("JLabelRestart");
			ivjJLabelRestart.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRestart.setText("Restart:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRestart;
}
/**
 * Return the JLabelSeasonal property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonal() {
	if (ivjJLabelSeasonal == null) {
		try {
			ivjJLabelSeasonal = new javax.swing.JLabel();
			ivjJLabelSeasonal.setName("JLabelSeasonal");
			ivjJLabelSeasonal.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelSeasonal.setText("Seasonal:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonal;
}
/**
 * Return the JLabelSeasonChooser property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonChooser() {
	if (ivjJLabelSeasonChooser == null) {
		try {
			ivjJLabelSeasonChooser = new javax.swing.JLabel();
			ivjJLabelSeasonChooser.setName("JLabelSeasonChooser");
			ivjJLabelSeasonChooser.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelSeasonChooser.setText("Season Selection: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonChooser;
}
/**
 * Return the JPanelMaxHours property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxHours() {
	if (ivjJPanelMaxHours == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder1.setTitle("Max Hour Allowance");
			ivjJPanelMaxHours = new javax.swing.JPanel();
			ivjJPanelMaxHours.setName("JPanelMaxHours");
			ivjJPanelMaxHours.setPreferredSize(new java.awt.Dimension(340, 75));
			ivjJPanelMaxHours.setBorder(ivjLocalBorder1);
			ivjJPanelMaxHours.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxHours.setMinimumSize(new java.awt.Dimension(340, 75));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursDaily = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursDaily.gridx = 2; constraintsJCSpinFieldMaxHoursDaily.gridy = 1;
			constraintsJCSpinFieldMaxHoursDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursDaily.ipadx = 63;
			constraintsJCSpinFieldMaxHoursDaily.ipady = 19;
			constraintsJCSpinFieldMaxHoursDaily.insets = new java.awt.Insets(6, 1, 2, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursDaily(), constraintsJCSpinFieldMaxHoursDaily);

			java.awt.GridBagConstraints constraintsJLabelDaily = new java.awt.GridBagConstraints();
			constraintsJLabelDaily.gridx = 1; constraintsJLabelDaily.gridy = 1;
			constraintsJLabelDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelDaily.ipadx = 22;
			constraintsJLabelDaily.ipady = -1;
			constraintsJLabelDaily.insets = new java.awt.Insets(5, 11, 3, 0);
			getJPanelMaxHours().add(getJLabelDaily(), constraintsJLabelDaily);

			java.awt.GridBagConstraints constraintsJLabelSeasonal = new java.awt.GridBagConstraints();
			constraintsJLabelSeasonal.gridx = 3; constraintsJLabelSeasonal.gridy = 1;
			constraintsJLabelSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSeasonal.ipadx = 6;
			constraintsJLabelSeasonal.ipady = -1;
			constraintsJLabelSeasonal.insets = new java.awt.Insets(5, 24, 3, 4);
			getJPanelMaxHours().add(getJLabelSeasonal(), constraintsJLabelSeasonal);

			java.awt.GridBagConstraints constraintsJLabelMonthly = new java.awt.GridBagConstraints();
			constraintsJLabelMonthly.gridx = 1; constraintsJLabelMonthly.gridy = 2;
			constraintsJLabelMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelMonthly.ipadx = 4;
			constraintsJLabelMonthly.ipady = -1;
			constraintsJLabelMonthly.insets = new java.awt.Insets(3, 11, 16, 0);
			getJPanelMaxHours().add(getJLabelMonthly(), constraintsJLabelMonthly);

			java.awt.GridBagConstraints constraintsJLabelAnnually = new java.awt.GridBagConstraints();
			constraintsJLabelAnnually.gridx = 3; constraintsJLabelAnnually.gridy = 2;
			constraintsJLabelAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelAnnually.ipadx = 11;
			constraintsJLabelAnnually.ipady = -1;
			constraintsJLabelAnnually.insets = new java.awt.Insets(3, 24, 16, 4);
			getJPanelMaxHours().add(getJLabelAnnually(), constraintsJLabelAnnually);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursMonthly = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursMonthly.gridx = 2; constraintsJCSpinFieldMaxHoursMonthly.gridy = 2;
			constraintsJCSpinFieldMaxHoursMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursMonthly.ipadx = 63;
			constraintsJCSpinFieldMaxHoursMonthly.ipady = 19;
			constraintsJCSpinFieldMaxHoursMonthly.insets = new java.awt.Insets(5, 1, 12, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursMonthly(), constraintsJCSpinFieldMaxHoursMonthly);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursSeasonal = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursSeasonal.gridx = 4; constraintsJCSpinFieldMaxHoursSeasonal.gridy = 1;
			constraintsJCSpinFieldMaxHoursSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursSeasonal.ipadx = 63;
			constraintsJCSpinFieldMaxHoursSeasonal.ipady = 19;
			constraintsJCSpinFieldMaxHoursSeasonal.insets = new java.awt.Insets(6, 4, 2, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursSeasonal(), constraintsJCSpinFieldMaxHoursSeasonal);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursAnnually = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursAnnually.gridx = 4; constraintsJCSpinFieldMaxHoursAnnually.gridy = 2;
			constraintsJCSpinFieldMaxHoursAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursAnnually.ipadx = 63;
			constraintsJCSpinFieldMaxHoursAnnually.ipady = 19;
			constraintsJCSpinFieldMaxHoursAnnually.insets = new java.awt.Insets(2, 4, 15, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursAnnually(), constraintsJCSpinFieldMaxHoursAnnually);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxHours;
}
/**
 * Return the JPanelMaxValues property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxValues() {
	if (ivjJPanelMaxValues == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder2.setTitle("Max");
			ivjJPanelMaxValues = new javax.swing.JPanel();
			ivjJPanelMaxValues.setName("JPanelMaxValues");
			ivjJPanelMaxValues.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMaxValues.setBorder(ivjLocalBorder2);
			ivjJPanelMaxValues.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxValues.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxActivateTime.gridx = 2; constraintsJCSpinFieldMaxActivateTime.gridy = 1;
			constraintsJCSpinFieldMaxActivateTime.ipadx = 49;
			constraintsJCSpinFieldMaxActivateTime.ipady = 19;
			constraintsJCSpinFieldMaxActivateTime.insets = new java.awt.Insets(11, 0, 3, 40);
			getJPanelMaxValues().add(getJCSpinFieldMaxActivateTime(), constraintsJCSpinFieldMaxActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxDailyOps = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxDailyOps.gridx = 2; constraintsJCSpinFieldMaxDailyOps.gridy = 2;
			constraintsJCSpinFieldMaxDailyOps.ipadx = 49;
			constraintsJCSpinFieldMaxDailyOps.ipady = 19;
			constraintsJCSpinFieldMaxDailyOps.insets = new java.awt.Insets(4, 0, 12, 40);
			getJPanelMaxValues().add(getJCSpinFieldMaxDailyOps(), constraintsJCSpinFieldMaxDailyOps);

			java.awt.GridBagConstraints constraintsJLabelMaxActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMaxActivate.gridx = 1; constraintsJLabelMaxActivate.gridy = 1;
			constraintsJLabelMaxActivate.ipadx = 12;
			constraintsJLabelMaxActivate.insets = new java.awt.Insets(12, 22, 6, 3);
			getJPanelMaxValues().add(getJLabelMaxActivate(), constraintsJLabelMaxActivate);

			java.awt.GridBagConstraints constraintsJLabelDailyOps = new java.awt.GridBagConstraints();
			constraintsJLabelDailyOps.gridx = 1; constraintsJLabelDailyOps.gridy = 2;
			constraintsJLabelDailyOps.ipadx = 3;
			constraintsJLabelDailyOps.insets = new java.awt.Insets(5, 22, 15, 0);
			getJPanelMaxValues().add(getJLabelDailyOps(), constraintsJLabelDailyOps);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxValues;
}
/**
 * Return the JPanelMinTimes property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMinTimes() {
	if (ivjJPanelMinTimes == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder3;
			ivjLocalBorder3 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder3.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder3.setTitle("Min");
			ivjJPanelMinTimes = new javax.swing.JPanel();
			ivjJPanelMinTimes.setName("JPanelMinTimes");
			ivjJPanelMinTimes.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMinTimes.setBorder(ivjLocalBorder3);
			ivjJPanelMinTimes.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMinTimes.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJLabelMinActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMinActivate.gridx = 1; constraintsJLabelMinActivate.gridy = 1;
			constraintsJLabelMinActivate.ipadx = 12;
			constraintsJLabelMinActivate.ipady = -2;
			constraintsJLabelMinActivate.insets = new java.awt.Insets(12, 15, 8, 3);
			getJPanelMinTimes().add(getJLabelMinActivate(), constraintsJLabelMinActivate);

			java.awt.GridBagConstraints constraintsJLabelRestart = new java.awt.GridBagConstraints();
			constraintsJLabelRestart.gridx = 1; constraintsJLabelRestart.gridy = 2;
			constraintsJLabelRestart.ipadx = 13;
			constraintsJLabelRestart.ipady = -2;
			constraintsJLabelRestart.insets = new java.awt.Insets(5, 16, 17, 2);
			getJPanelMinTimes().add(getJLabelRestart(), constraintsJLabelRestart);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinActivateTime.gridx = 2; constraintsJCSpinFieldMinActivateTime.gridy = 1;
			constraintsJCSpinFieldMinActivateTime.ipadx = 55;
			constraintsJCSpinFieldMinActivateTime.ipady = 19;
			constraintsJCSpinFieldMinActivateTime.insets = new java.awt.Insets(11, 2, 3, 38);
			getJPanelMinTimes().add(getJCSpinFieldMinActivateTime(), constraintsJCSpinFieldMinActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinRestart = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinRestart.gridx = 2; constraintsJCSpinFieldMinRestart.gridy = 2;
			constraintsJCSpinFieldMinRestart.ipadx = 55;
			constraintsJCSpinFieldMinRestart.ipady = 19;
			constraintsJCSpinFieldMinRestart.insets = new java.awt.Insets(4, 2, 12, 38);
			getJPanelMinTimes().add(getJCSpinFieldMinRestart(), constraintsJCSpinFieldMinRestart);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMinTimes;
}
/**
 * Return the JTextFieldConstraintName property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldConstraintName() {
	if (ivjJTextFieldConstraintName == null) {
		try {
			ivjJTextFieldConstraintName = new javax.swing.JTextField();
			ivjJTextFieldConstraintName.setName("JTextFieldConstraintName");
			ivjJTextFieldConstraintName.setPreferredSize(new java.awt.Dimension(149, 20));
			ivjJTextFieldConstraintName.setMinimumSize(new java.awt.Dimension(149, 20));
			// user code begin {1}
			ivjJTextFieldConstraintName.setDocument(
					new TextFieldDocument(
						TextFieldDocument.MAX_DEVICE_NAME_LENGTH,
						TextFieldDocument.INVALID_CHARS_PAO) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldConstraintName;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param o java.lang.Object
 */
public Object getValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	 
	if(con == null)
		con = new LMProgramConstraint();
	
	con.setConstraintName(getJTextFieldConstraintName().getText());
	
	con.setAvailableSeasons( getJCheckBoxSeasonChooser().getSelectedSeasons4Chars() );
	con.setAvailableWeekdays( getJCheckBoxDayChooser().getSelectedDays8Chars() );

	con.setMaxHoursDaily( new Integer( ((Number)getJCSpinFieldMaxHoursDaily().getValue()).intValue() ) );
	con.setMaxHoursMonthly( new Integer( ((Number)getJCSpinFieldMaxHoursMonthly().getValue()).intValue() ) );
	con.setMaxHoursSeasonal( new Integer( ((Number)getJCSpinFieldMaxHoursSeasonal().getValue()).intValue() ) );
	con.setMaxHoursAnnually( new Integer( ((Number)getJCSpinFieldMaxHoursAnnually().getValue()).intValue() ) );
	con.setMinActivateTime( new Integer( ((Number)getJCSpinFieldMinActivateTime().getValue()).intValue() ) );
	con.setMinRestartTime( new Integer( ((Number)getJCSpinFieldMinRestart().getValue()).intValue() ) );
	con.setMaxActivateTime( new Integer( ((Number)getJCSpinFieldMaxActivateTime().getValue()).intValue() ) );
	con.setMaxDailyOps( new Integer( ((Number)getJCSpinFieldMaxDailyOps().getValue()).intValue() ) );
	
	if( getJComboBoxHoliday().getSelectedItem() != null )
		con.setHolidayScheduleID( new Integer(((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getSelectedItem()).getHolidayScheduleID() ));
	else
		con.setHolidayScheduleID( new Integer(0) );
	
	con.setSeasonScheduleID(new Integer(0));
	
	return con;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	getJCSpinFieldMaxHoursAnnually().addValueListener( this );
	getJCSpinFieldMaxHoursDaily().addValueListener( this );
	getJCSpinFieldMaxHoursMonthly().addValueListener( this );
	getJCSpinFieldMaxHoursSeasonal().addValueListener( this );
	getJCSpinFieldMinActivateTime().addValueListener( this );
	getJCSpinFieldMinRestart().addValueListener( this );
	getJCSpinFieldMaxDailyOps().addValueListener( this );
	getJCSpinFieldMaxActivateTime().addValueListener( this );
	// user code end
	getJTextFieldConstraintName().addCaretListener(ivjEventHandler);
	getJCheckBoxSeasonChooser().addJCheckBoxSeasonChooserListener(ivjEventHandler);
	getJCheckBoxDayChooser().addActionListener(ivjEventHandler);
	getJComboBoxHoliday().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMProgramConstraintPanel");
		setPreferredSize(new java.awt.Dimension(350, 360));
		setLayout(new java.awt.GridBagLayout());
		setSize(350, 360);
		setMinimumSize(new java.awt.Dimension(350, 360));

		java.awt.GridBagConstraints constraintsJCheckBoxDayChooser = new java.awt.GridBagConstraints();
		constraintsJCheckBoxDayChooser.gridx = 1; constraintsJCheckBoxDayChooser.gridy = 4;
		constraintsJCheckBoxDayChooser.gridwidth = 2;
		constraintsJCheckBoxDayChooser.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJCheckBoxDayChooser.weightx = 1.0;
		constraintsJCheckBoxDayChooser.weighty = 1.0;
		constraintsJCheckBoxDayChooser.insets = new java.awt.Insets(3, 4, 1, 6);
		add(getJCheckBoxDayChooser(), constraintsJCheckBoxDayChooser);

		java.awt.GridBagConstraints constraintsJComboBoxHoliday = new java.awt.GridBagConstraints();
		constraintsJComboBoxHoliday.gridx = 2; constraintsJComboBoxHoliday.gridy = 5;
		constraintsJComboBoxHoliday.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHoliday.weightx = 1.0;
		constraintsJComboBoxHoliday.ipadx = 29;
		constraintsJComboBoxHoliday.insets = new java.awt.Insets(2, 7, 3, 54);
		add(getJComboBoxHoliday(), constraintsJComboBoxHoliday);

		java.awt.GridBagConstraints constraintsJPanelMaxHours = new java.awt.GridBagConstraints();
		constraintsJPanelMaxHours.gridx = 1; constraintsJPanelMaxHours.gridy = 6;
		constraintsJPanelMaxHours.gridwidth = 2;
		constraintsJPanelMaxHours.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJPanelMaxHours.weightx = 1.0;
		constraintsJPanelMaxHours.weighty = 1.0;
		constraintsJPanelMaxHours.insets = new java.awt.Insets(3, 4, 5, 6);
		add(getJPanelMaxHours(), constraintsJPanelMaxHours);

		java.awt.GridBagConstraints constraintsJLabelHoliday = new java.awt.GridBagConstraints();
		constraintsJLabelHoliday.gridx = 1; constraintsJLabelHoliday.gridy = 5;
		constraintsJLabelHoliday.ipadx = 7;
		constraintsJLabelHoliday.insets = new java.awt.Insets(8, 24, 6, 0);
		add(getJLabelHoliday(), constraintsJLabelHoliday);

		java.awt.GridBagConstraints constraintsJLabelConstraintName = new java.awt.GridBagConstraints();
		constraintsJLabelConstraintName.gridx = 1; constraintsJLabelConstraintName.gridy = 1;
		constraintsJLabelConstraintName.ipadx = 7;
		constraintsJLabelConstraintName.ipady = 4;
		constraintsJLabelConstraintName.insets = new java.awt.Insets(20, 22, 1, 4);
		add(getJLabelConstraintName(), constraintsJLabelConstraintName);

		java.awt.GridBagConstraints constraintsJTextFieldConstraintName = new java.awt.GridBagConstraints();
		constraintsJTextFieldConstraintName.gridx = 2; constraintsJTextFieldConstraintName.gridy = 1;
		constraintsJTextFieldConstraintName.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldConstraintName.weightx = 1.0;
		constraintsJTextFieldConstraintName.insets = new java.awt.Insets(18, 7, 1, 60);
		add(getJTextFieldConstraintName(), constraintsJTextFieldConstraintName);

		java.awt.GridBagConstraints constraintsJCheckBoxSeasonChooser = new java.awt.GridBagConstraints();
		constraintsJCheckBoxSeasonChooser.gridx = 2; constraintsJCheckBoxSeasonChooser.gridy = 2;
		constraintsJCheckBoxSeasonChooser.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJCheckBoxSeasonChooser.weightx = 1.0;
		constraintsJCheckBoxSeasonChooser.weighty = 1.0;
		constraintsJCheckBoxSeasonChooser.ipadx = 38;
		constraintsJCheckBoxSeasonChooser.ipady = -8;
		constraintsJCheckBoxSeasonChooser.insets = new java.awt.Insets(2, 1, 2, 15);
		add(getJCheckBoxSeasonChooser(), constraintsJCheckBoxSeasonChooser);

		java.awt.GridBagConstraints constraintsJPanelMaxValues = new java.awt.GridBagConstraints();
		constraintsJPanelMaxValues.gridx = 1; constraintsJPanelMaxValues.gridy = 3;
		constraintsJPanelMaxValues.gridwidth = 2;
		constraintsJPanelMaxValues.weightx = 1.0;
		constraintsJPanelMaxValues.weighty = 1.0;
		constraintsJPanelMaxValues.ipadx = 4;
		constraintsJPanelMaxValues.ipady = -12;
		constraintsJPanelMaxValues.insets = new java.awt.Insets(3, 4, 3, 172);
		add(getJPanelMaxValues(), constraintsJPanelMaxValues);

		java.awt.GridBagConstraints constraintsJPanelMinTimes = new java.awt.GridBagConstraints();
		constraintsJPanelMinTimes.gridx = 2; constraintsJPanelMinTimes.gridy = 3;
		constraintsJPanelMinTimes.weightx = 1.0;
		constraintsJPanelMinTimes.weighty = 1.0;
		constraintsJPanelMinTimes.ipady = -12;
		constraintsJPanelMinTimes.insets = new java.awt.Insets(3, 43, 3, 3);
		add(getJPanelMinTimes(), constraintsJPanelMinTimes);

		java.awt.GridBagConstraints constraintsJLabelSeasonChooser = new java.awt.GridBagConstraints();
		constraintsJLabelSeasonChooser.gridx = 1; constraintsJLabelSeasonChooser.gridy = 2;
		constraintsJLabelSeasonChooser.ipadx = 5;
		constraintsJLabelSeasonChooser.ipady = 16;
		constraintsJLabelSeasonChooser.insets = new java.awt.Insets(8, 22, 6, 2);
		add(getJLabelSeasonChooser(), constraintsJLabelSeasonChooser);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
		// user code begin {2}
		//	default day of week and season check boxes to all!
	  	getJCheckBoxSeasonChooser().setSelectedSeasons( "YYYY" );
	  	getJCheckBoxDayChooser().setSelectedCheckBoxes( "YYYYYYYN" );
	  	getJComboBoxHoliday().setEnabled(false);
	 
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxDayChooser_Action(java.awt.event.ActionEvent e) 
{
	
	getJComboBoxHoliday().setEnabled( getJCheckBoxDayChooser().isHolidaySelected() );   
	fireInputUpdate();
	
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		LMProgramConstraintPanel aLMProgramConstraintPanel;
		aLMProgramConstraintPanel = new LMProgramConstraintPanel();
		frame.setContentPane(aLMProgramConstraintPanel);
		frame.setSize(aLMProgramConstraintPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * This method was created in VisualAge.
 * @param o java.lang.Object
 */
public void setValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	if(con == null)
		con = new LMProgramConstraint();
	else
	{
	
		getJTextFieldConstraintName().setText(con.getConstraintName());
	
		getJCheckBoxSeasonChooser().setSelectedSeasons( con.getAvailableSeasons() );
		getJCheckBoxDayChooser().setSelectedCheckBoxes( con.getAvailableWeekdays() );
		getJCSpinFieldMaxHoursDaily().setValue( con.getMaxHoursDaily() );
		getJCSpinFieldMaxHoursMonthly().setValue( con.getMaxHoursMonthly() );
		getJCSpinFieldMaxHoursSeasonal().setValue( con.getMaxHoursSeasonal() );
		getJCSpinFieldMaxHoursAnnually().setValue( con.getMaxHoursAnnually() );
		getJCSpinFieldMinActivateTime().setValue( con.getMinActivateTime() );
		getJCSpinFieldMinRestart().setValue( con.getMinRestartTime() );
		getJCSpinFieldMaxActivateTime().setValue( con.getMaxActivateTime() );
		getJCSpinFieldMaxDailyOps().setValue( con.getMaxDailyOps() );
	
		getJComboBoxHoliday().setEnabled(getJCheckBoxDayChooser().isHolidaySelected());
		
		for( int i = 0; i < getJComboBoxHoliday().getItemCount(); i++ )
			if( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getItemAt(i)).getHolidayScheduleID()
				== con.getHolidayScheduleID().intValue() )
			{
				getJComboBoxHoliday().setSelectedIndex(i);
				break;
			}
	}
}

/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}

/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}


}

package com.cannontech.dbeditor.wizard.device.lmconstraint;

import com.cannontech.common.gui.util.TextFieldDocument;
import com.cannontech.database.db.device.lm.LMProgramConstraint;
/**
 * Insert the type's description here. 
 * Creation date: (3/2/2004 10:09:59 AM)
 * @author: 
 */
public class LMProgramConstraintPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener {
	private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser ivjJCheckBoxDayChooser = null;
	private com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooser ivjJCheckBoxSeasonChooser = null;
	private javax.swing.JComboBox ivjJComboBoxHoliday = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxDailyOps = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursDaily = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursMonthly = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursSeasonal = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinRestart = null;
	private javax.swing.JLabel ivjJLabelAnnually = null;
	private javax.swing.JLabel ivjJLabelDaily = null;
	private javax.swing.JLabel ivjJLabelDailyOps = null;
	private javax.swing.JLabel ivjJLabelHoliday = null;
	private javax.swing.JLabel ivjJLabelMaxActivate = null;
	private javax.swing.JLabel ivjJLabelMinActivate = null;
	private javax.swing.JLabel ivjJLabelMonthly = null;
	private javax.swing.JLabel ivjJLabelRestart = null;
	private javax.swing.JLabel ivjJLabelSeasonal = null;
	private javax.swing.JPanel ivjJPanelMaxHours = null;
	private javax.swing.JPanel ivjJPanelMaxValues = null;
	private javax.swing.JPanel ivjJPanelMinTimes = null;
	private javax.swing.JLabel ivjJLabelConstraintName = null;
	private javax.swing.JTextField ivjJTextFieldConstraintName = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JLabel ivjJLabelSeasonChooser = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursAnnually = null;

class IvjEventHandler implements com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooserListener, java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJCheckBoxDayChooser()) 
				connEtoC6(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJComboBoxHoliday()) 
				connEtoC7(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJTextFieldConstraintName()) 
				connEtoC1(e);
		};
		public void JCheckBoxFallAction_actionPerformed(java.util.EventObject newEvent) {
			if (newEvent.getSource() == LMProgramConstraintPanel.this.getJCheckBoxSeasonChooser()) 
				connEtoC5(newEvent);
		};
		public void JCheckBoxSpringAction_actionPerformed(java.util.EventObject newEvent) {
			if (newEvent.getSource() == LMProgramConstraintPanel.this.getJCheckBoxSeasonChooser()) 
				connEtoC4(newEvent);
		};
		public void JCheckBoxSummerAction_actionPerformed(java.util.EventObject newEvent) {
			if (newEvent.getSource() == LMProgramConstraintPanel.this.getJCheckBoxSeasonChooser()) 
				connEtoC3(newEvent);
		};
		public void JCheckBoxWinterAction_actionPerformed(java.util.EventObject newEvent) {
			if (newEvent.getSource() == LMProgramConstraintPanel.this.getJCheckBoxSeasonChooser()) 
				connEtoC2(newEvent);
		};
	};
	private javax.swing.JLabel ivjJLabelMaxActSeconds = null;
	private javax.swing.JLabel ivjJLabelMinReSeconds = null;
	private javax.swing.JLabel ivjJLabelMinReSeconds1 = null;
/**
 * LMProgramConstraintPanel constructor comment.
 */
public LMProgramConstraintPanel() {
	super();
	initialize();
}
/**
 * connEtoC1:  (JTextFieldConstraintName.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JCheckBoxSeasonChooser.JCheckBoxSeasonChooser.JCheckBoxWinterAction_actionPerformed(java.util.EventObject) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 java.util.EventObject
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.util.EventObject arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JCheckBoxSeasonChooser.JCheckBoxSeasonChooser.JCheckBoxSummerAction_actionPerformed(java.util.EventObject) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 java.util.EventObject
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.util.EventObject arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JCheckBoxSeasonChooser.JCheckBoxSeasonChooser.JCheckBoxSpringAction_actionPerformed(java.util.EventObject) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 java.util.EventObject
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.util.EventObject arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JCheckBoxSeasonChooser.JCheckBoxSeasonChooser.JCheckBoxFallAction_actionPerformed(java.util.EventObject) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 java.util.EventObject
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.util.EventObject arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (JCheckBoxDayChooser.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jCheckBoxDayChooser_Action(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxDayChooser_Action(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JComboBoxHoliday.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.addDataInputPanelListener(Lcom.cannontech.common.gui.util.DataInputPanelListener;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G3DDB4FB0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8DDCD4571538E9ED57ED5956EEC8EBD35A1844E6EDE2F7ED6B2626B57D53ACED4D5624B6A5DB3A3509C920B189E9ECE393121078E4C0D1C1C7C04588BA28C10C84D1D1895F4807E05090A0BA9812B8B08FE6F418194CBCE4D09B775C0FF35F1B19B740E8695F7CF2FC6F1EFB4EBD9F775C6F7B86A9E77B743495A9B91234A2CD627F9DD9A1C9ADB7CAD2C54EEB29081B7FC83CC1527CD7G30C17A5A
	C6C29087F9651FA4980C12FCAE9D5209104E79A84130995E3325F367722E40CB88B94BBE1524776F7F428B234BA92BC0B92BE87A04AB831E6BG1692D90F469B4E8200FCD7AE4717C3FA9DFFA730A2C5120A97939AE7D52E86BF0353C9101783D07A982119644A63798A60A2G9281244798EDAEBCD7D36DBED7D14E69FA3EB2D3DA765FA5A919C41626FC849F670D62CF13F4B7F504C1BADBFC921ED56D6787EA7ADC03A5FD96275365D464BEDB0935D7365A951727E458FE51623116D8658B76BE3944B1687638
	86BC16410A0A36936D6C35416574AA9E0B5D2934DB1C32C312B29EA7F6C4D625D39912948BF227D1DCC6B571DDBB3C5BGA6BD0E367CBA330A6B9AF9FE26347876021036ACFA1C7B6C895516F8EBDA5A6CA7C8795F21F5C3786AA06D83E0F6B6673F972E1DFD422A51CC65367E590536AEFB82ED75D692DD0A63638D0DGBD71082F28A2F8855291GB3625187553B518766CBBF1412FA5FCBD99F42877362196D71712A8F12FEE9C95BC263B33A124418A98164821881AE83C4814C8358CA5B45250AB761D95F2B
	B4388687DD4EFA377B28436AB961324A8EF82F28009C0E6B107BDC9E2BA431587FFAD5310EBE8831897EF1CF0059F6DA42D81D55716F12229CCBC95331ED4E4325A9CBF89949892AED36BF923FA55358490377953CEDB27C469A021F254133D8482274A41D84F929CB504F66F528CBDB6AED12F1FFE74AAA9DDD265D5712E2FC0A69D074142A8B73714D554447DD00F783CC81188E908D3078A974714FAA8E0E6563D608C10F5362689C6AF5DBBC4A51A13B43AAFB382F7F43B51A2F7500715D9BB69F734B4C035A
	BADA74038EDD3FAC1AF9A4A5197BA367E955AFCC768BA1E517BD9D9C9B6BC49DBEC95BCA4B532C8E8D827FE70AB7EB702CEEC7A81E52C15E82GC67F935A36CA1FE1746BC5B98FD23CD903E76554D1BCC9CF023CE4GD63F6535248F76A5469BA281E68144G4483C84FC2DF7DAC563131F25FB85BD13B26FE996F7D151B60A97B20BFE905DE45626C13CFD9BCF6CB2FC376CA1C6621CA6257DEBF3E5F52765D87B20E49CE59E3D16CAEA714EE9914A1183C0CE6F16586C26311E9EE17FDD0868103EE894BDDD219
	8DCF07452B3C6F36DA94D925E079CBABC9CCDC301C029221GF837BECB7CB51B7669E5705E7EAC7ACA2EA33819100E96FEB9DF15854FF7A038E5C7C5C5233D0F28E1710CE00C26545441B39668FB7E94EFC8FFAE5EB087606CD2F87FF33CE1AE40653F002F1F073685E0DC8675G107BD7E8E7G45AFG4D8B581E7FE44638ED4C7C2ED47C70FB3AF1CB73DFE4B15873E2E05CEE257ACC867C8C009800F8005424F843AE00C6GAB40E40099GB1G71G29AFC1BEC0A30075A51C9F64D69361E335B9E2E3B8ED14
	G31BB90C7FCC6FCC45E094F48B31D17CDFCABBD2F7298398FC315BFBDC49E299BBDBC2993AA8F72C9DD4E556847FC714138FC31BECCBF90582E03DB8B30113FEF604FCC7ECC23F12952EE66EDA1D47979A1702BC36037E86CA67DD2C1C05E8669B775242F198CF1B29DA07AA5ECABF7D419A45A079C35F8E56CB55E75C003172DEA4BE13437D793DF4997E42752A83BE52795DE3C3C4D5ED9CDF4637DC93FCB4236BE1B62497852G8D5EAB70F7D7EFE0F8194CE6545E8973FFC273AD0A6231778EA9F2272CA8F6
	67004A7FF32A0B57EF6872F2DB9FBECAEC0D839B1782C8AF232D6F5610BA40FE214D65BABF646EA2BD9E6FDFB25D24AF49817A621731BDBDDBC9665F6DA27DA2CD2B79D7AA4D2354A3618BB7363440E4CC9BD506619A4AD7E544D411B1874739B40EDF4D63BAD35045D2BA856C0A820881C88448F9A55ED085E0FD857D52DC659E233CEB51F9F4DBE4AABB145C2BE96F638196E3C7EBC3371156DA7DB672EE2DFE9BF93FF674B670E12DDE9BE0F956DAE23BEB5829E9D376DAB2AE425242A95306ADD8A436CE79D3
	9731436E34AB276D5681D96934DF14217FFD05340DDF5031B7825E273F02E35F70CE9C7BF6DD7C0E947DF1316E3CFA5A375FC9C9FA0535030CE4F56CE3BA1D2BA3EDD5F648036028865710D3E1F8B79D57B95EEB203817F3AE935E2263DD6043E63B6C302AAB2213B083A96E036EC4A9217F3219C551B94B850B2F44BB8CFEAB2115D252C0F21B486B9E53DBEF5518C22D2E0A7B6D9E3955699E4222761C5AD34A74382F6ADBCC0F861B5CF77E284B57A9DB3CAEE7034D65724A1EE2FDF409C01F361309F7BD2D02
	0FAD7451AEFB7ADD1EC159CA95AE99D26C0E922A633B3D67202E4257F4BF0B7FECA96E6DEB5235F3E8F0F022F5BD003A764857262B5B8355BC313A9EC4DD0F2C0F3A96DD1BAD8E4744EADA46747C37C3377A6B59E899C1A5196492DD85AC438AEFB0CC4D713418F341B2BEE65CC5ED218B2D84E58FC96857B503F3393E2E41DE97145562F2582D16113F3B32962B355122D82857A8264D6ED548122628ADE013260F2E2ECA86066C2CDA7459089907198DCFCA437F989BF42A7DB077E3626B3C2FEC68F45B1D3433
	BCE1711122AF7095D77120EB48AB1750FF9B9C763E73411A1CA0F9D729489126474F87027530BB7F01FA14B3BD9EF17BF47C51E831BBC65EF5FBA7D80737198E0E7541BA581D9DE46D6BD1A6D8057DFC6CBA7A51A59DBF343806BCDE6A0C09D6E3BF0F4F34ADFF8B254789E8F7360957640068F3DE5D7CE9A8DDD877EDF1CC34B2E2DC79E2E6C8DD6A1D4EA198B6A65CB1E538E6CCEF24FB48B0E72B83B0A763BAAA310E6463BA0AAF969BDC8E871BD6C25E3CE4B2E77C20A6C7B38FF4A733730AF5A27F1F46487F
	4198790F0E113F36D6AFBF7555F8834B0F504DD779670E119FBFC63E31EE747C2AB172EDE364C70E119FBDC6FE62987939752367B7064CE7F1723BFAA3D91F481F8C494EBE19AC345F11C7F00F30BEABA06F1445B1246EBDAE29A76BB507E60D4E703FBF2A3FDEF86CA8D9171F9765A79CDDA911BDC4D6A6DB5F4C3610B2E116B8E8710C10CD87FEAE364B2DBD974B0578A0E7E8E6F8BADE45B31C6F533333D06DA877B59AEF55F8F6B6997822C81C713212DE6567E7146EC1C1E70574E500692F69515DDC03F452
	F2C6173BDC0F2E3F9669FC1CEE2AAEDD4EBE24DB4A695225849D3A45024E867913GE6F03AF8F82AF4B3CA112EF8C5022191403A423F3C99AB485968A362ACEE1F407D15621E034579B7D3718C6004D1FB26E875B66A2EA789ACD94174C866CF75EC243A09141B1712E0A886E03170F103F65F275E6BF575596956B40F29F50D5A35A643E5B72E01A7F40FDE25959671BE0C4BAD0DC4D732F74D51BC366E5ADBAD856F45B75153BD5CD6EB9826DDF2172B41E515DBA0349B44D27C14DDA6F3C666073FB5EB4FA367
	2DFFBBE5ED88BF5425B07B4F2628FE1877CBCB9ABB97BCDA0BFE1F8E79CC4F2F53F3A13D334800E9EEC5057FBC171FB5FE096E1191BD6320CCF62678DF97C81BB49A928CC5GF5G6CFC230C1E019139E640CD85E07D462D595AFEE3BE6049FE5AD2F832B1709B55A4CE42DC4C73FA085913456AADE0D8C35F5E16DD4765AE78775B242AAB2F6B1EF3CED93FABA5B5157934B8D5635BC56DE98B8118FDAF8A7BFCC0B39B0075A76586EDFF32A41559D71E16E0E8CBC39BBF2A69046784EC957033257F2AC15D2CA0
	B3CA48FD33F6BCF22FE2594F65FE39966546024C0C15A8770571498DFF894F65D66FC3390DA0733210BBE35FFB63109B76F2DC42B33C5525A8F78E48CCDC09B17013E1ED8C6CDA45E2408D4F492BD0B7F7A91903063FA844BEE7E76D5B703C6AD537306181E1C39468963B8A5B69C617361DE624B39B4A52D17F0A2A2B551F1F4B9F507677510B4BC37677AD692C8D76248776778547C8FF6483FCC4BA7677110D9BB47DFD87541745B9GB38831C75BC474073982CFB7B79139F42EA0615C772396E27BF4A8F39E
	C0ACC0A2C046EA1471C05318676BCD3ED14E570F5506F3CEDE8CF2995F0DEE642BDB4DFC51451FF43C06774B1AB44551B3687343240E27C29E716FC6017F1462E3B4F896937753BE1D2413A0EF469A14DFD19D28F77BDAFFF90E00B463EB8962AB89C8CF8D60E3B17EC69119E35071CA537DD7D428FB40ECDC0A4BCE6732E6C2B92C8E6734925E4510CE864849C8B01482F4813881A2B330AE731A7546EE7F3A8CB5F02B67D64C4ED72F52BFEBEB46724F1C8CBD7FA4B86B253147F3E71F8D1AGF31CEED7A861DD
	A23781678C8BB2F0FCBF3E1544C2EAE602A18F20AC93E3617EA01D47E76BEF473435ADD30F6F2620B6B3BEF9378771854A336A4AEB58F7F5725E8B628B14F7D9D75E7A522B13179F4437ADA09D192997BB534BEA2EB2F6542186636605E11C974E4A443869F512380907F4B2C04EBA0C1B5FD5DE1D1DCF8671857A35F81D1E1D830E2D12EE9F027B335C06B69776A10D6B308FD9F61C60AEC3BAE29D7697A34D649C914717F697CC52A49CDB8A0F11F5274BE3870FA1EEAF457539BC74B00E617ADBC21F938E3668
	1F93FADB744F89C7DAC6BFCB3F21A554B9A2BB777E082E9322403E39G8CF7A71D67AF00749201DB6EA338E4C89B57A3EE52C5FAA78752ED82F76BA502F3C3FA4AFA2C73CF060B088CC84F830883D886E0B4C21F8C50856083088418EDC41E4914072CBF495AF2A160178164ECC820EBEB32FEAD03F7B340658D48732B8B53B575CF4A5246C3D7C0DA8B25DC87CC937D74680CDC4FD06584825A0B69A86113177DF45D9840B75AB9F526245EB1D9A7053E9732D6723FF7B29660F9B92649B810CF1F77EFDACFE34C
	6B153DF4B0A42BC31E772432D152B9D7A6C732926EEBFEC26F01901AA6455530DF42B67D07ECEC53D19B02FDBA9BF0B181F8FEBF24B5F47B79D92BFE7B79E5AB711B57B5646913835B48C32D39A2CF9D5DDB95F9101841771EA83FE2718C48C1ED6CF14A4F72C271BF539A2A9DB29F1555E8FDF4C078E848B05ADCB1CE47EFECEE57D8C07A5F448DECEE37C260CFD0FC12864F66FC6DDB717EF2EAD60241160573FC29D62B57C1216F82BFFC1940DF5C27452BE7FB4D25DA7CE1E15FAB43E85F821039B84B5F1EE5
	10CE4F561B537E8F9DDF7232836DFB14620B32836D33B9513EB2481B160D76992B34FA9D91FA3DC76F13A6831DB1A758473BF4F02C1EDFBACEE478C47AD51A9E11F0BC126B5709D8E9F2DA79G42764506E8DF3CBBD512EE97FE7B291B441D5BA3774B9E0FECE557B2A4F78E217FDF5ACF1743FBE38E5A33E9040CB78E4B08EB884ACD5FC8683EB822DD0F4E815AC5GCB398DCC2F6F8D137E225FE39904306CF44BFDD2BC657D5AC564ED073495E0B2408C00180DA8F36EA5428B0C764121C12AA153EFA19D8B0A
	B7A5984AB7A16D19F252A769CDA6D83ED2EE24797E2727AC6FDF4A099E476916949E0C201FDA2E90BF9DEF33744A8E4EA4FCF8DBE60E48733FB54272BFB7C0EC8CF53304519416EF12C26DA5201C686C75DA7D7826B64B2B576AEEE797E311EF5B36EC211FFF41ECBFE163A6ED7DD9B731357894F8C6ED42757A03D95A757A9CCE93A7723FFADAAFBFF1936ED9FC36C0CF063499465C4DC8B35821C7D38C79F51BD14E19EABDB9664DB8BFD8160DF38B0740B56D40F944A4017B4DD61CC7AC943888835245EF46F1
	74B8396E485BEC27667D5456516E4DDDABB0992E891541EC4E72213F4AF2518F0B3D845782699E01BB36DB78D060CCA984379052CBF251DF0B1C2A0F92B46FCE67447B6B1FA6D4863359C6677149E0EF4E9674432FDC68C313407DE6957A2B8CF01381A4698FE43B103749E5BE93BC1D7230C9ECE6B5C21BF512CB69C5878F15961B8E9EAE5D437632268FEB77324A5754045C4B1A3F0575390B78B362ADAB7F9EEA7FD93F3D8EA23022621847EEBDEA99E8233DB9DB27FCEFA41D171D73BA2E359E9DA1E3DB9B24
	2DG178118DE3EC2BCCB18F547EDD25B248E5DEF1B96F73D1D9279BA53E76E6B6A9EDB4682BCCB3877A24ADC867945DBC95F7E4CC5EDBBA7BE7BF58ADB13317C7CCB5AFCB277A17B7AEA7E3BFE79C45FFB7D78EF704BA7BE5A437919ED3FFC83EDCB7E65EC49711FF5A13F5BD236B21B267127A939EF452E9B5FCBE3F51E5E2556799D9746D3672C3E1E5F13AB692EABE98F4F7CF6E293719B999B97EE453A9A59CD6AAABD8FE29120BC8F4FE61E6F8FD19E9D95D8F9E9E21F2B9D78986E015338761EA2F0BFAEC0
	3951F9A8778C5D1BCF0234B1BF41D0140F345F6EC05A3AFC240D266787BEC8CF8518A9E83FD20D7223814746787C9C02CB02F46AB6083FED84573323F114F61A467D0DD08ABC0DG9BF91EF91BBAF7E3B21269D8B08B70F3050C5B8DE349504A09871EA4AE0324B336A798CE40734F4B17AFE7B2AAE9BF1B8B78DD5BF12E7222174C25FADD9EBA59E7F329F50A188F811D8DE086405C6D6C2C146976516E51F4B3707AC27D9682EF7CF6557E246D2A7D7C3EE10A7E7C6ABF69F818EA02F7936AFC45C5E895174B51
	E5F713990D44625C733EA47C19C47B43AA60E9B1214ECF2F9A4B1FEBB57ED4CC7EF5B6855215DCE756BEFF750136CFB45EDC1402B685169DE9E26DF23AA9F0FF5FFA0A68998B7825A65CFF595131971E27AC6702CFD981596EF139E50FB24230F48246471E3BC7427DB60D2DA7BAAF52734D0240F5C68F456795842EB392C6F01DD184F991853817F453E992B7CBA11D3183E28C208A2087403783EDBB5FD1AA0D31975D65F23741425721596AE1765DF7716A3E3D7B69AA6CC7677C68CEE96E672510674D91BBD8
	7D4C624F39AF772DA0CFE6DFD1B731EF9164A581646D04F1952085606CCE346F879D454CBED2BD750AE2693351D3F7B40E9C042BE83288E136F5ECC25B94A8EB8AC054CEF57DB59B5EE3F66A2D91D79751EFC1F632BA5AA0702FD3FC6AAE954F6A6E8A6D1BC93A9472666D42B9531AEC2DEFDB5E6067D17C69FEA3F8AD48789EBA0DFC1301E69A271B451F51A179228B10AF96E816GA4EBE80D0590BF05FA76BEC87B7872C2E657DA01DFC471E68D1E59FB1662C95A87F90B8A515EBBBB44B9536E84C39700ED37
	AA6FB23CCF5D2DA73F1C16B7E3B71313A97047A8FE3E864F647F1C0EB3A41D88F966A2147FD53FF31418A2A6AB0EBF930B027D467A386C8FC8C47373499D64BB2D90E3797E32370BCD87CA7750EF39485AABDD427F16568663307C43BD12E8B70FE5E03B493B6BF6297137D24A4E906DC65A4374ED5F2319DB5952787CE37A072A4EDB8DFFBF1D1756327263BED2751FF4D6157530F794D9874BE02ED3FE984F578FAB784D6B9430A1FA8F4ED96EDDC37A2BF15DA76932AB8E79A89DC959DC62D30568CA473BBDB8
	6F08AC245F503E897D8640D90070EC3D47225A3A28D7353549B99EDB995F72BE15EF7E2A516A6350A1280F037A75414A5AC136EAF87F78AB7A4E3FFFFB7F8DA94498863D60F11045EE9AF4D986840F7D94099D31FF4806B61E67BEC5664A645B9D3B45E13FC82FB7F5AA64B685EBCF5D9709EC765E2BF9FFE6E46257FC2997A7D286337FDB27C36F87FF7B347EFE70DD27754FD33EF7FA746F2E6EB99D7A3B2B68535A6F2ED83DBF59CF6A4687319C89B097E0814062B7F1CCBCE95EA151B1D1E7BCEC328E48F4AF
	4AC27688997D7E6E503616F70F7DDDF7FDB7395B566BD29457A0A99F71473AC9FDA9AEB7C5B2DCDBB7711147BEE0D398A947F7F413D8F7487D944D565376CD3846CEFE935758399584E75C8B6355DE44D5B6533D8BC877885C0F0E093D8B01FBF2976EDDAC5C0B63427AA293BC63A11DDE8C6BA700AAGB30082908590D30C34A6CA1B88690C37E04D8A508660G08G18853060AD247D5C6EC970A47C01712570B2CDBCAF1D4BA3BAA0CD158E5F55371719D4973D739FBC7741B39A6D1C9CE9C21D85058B2C8E8A
	68FAB3917C147C9656CB8A5DB7B11600CFCA90B7A076D20A856E2953988F17852ED0A63829101EAEF09B0688EE8E24E3846E42901637D060FEDBA076F076A16E16F4CA876996017B9FB30DCDC8CF9238173A313C9982B745C6F04BA01DD10AF190CB6FF41BA05D8260G08G18A9729F277973A13D84A0FDBF2C2381DA76E3FEFF2D362FA3FC6375370353C6F0590179A6214395BF99EB430CAF0C11B41DFC0328771FF6202FED7B51DFFBFA68D9B824278A5C37FBE95DC1FA3E404D6FC3DFA78A5CE383686B2A83
	E8C7CDADD9AF34C35A8D9081B087A08EA0C9501C20B43987938C65GE6G9F40B400398711E6C14DD99DDBC8B96419441F6E832ACF679C88DDAF6D1A3C884DBB3F0320AB8B6BC07B3D7FF85A23365DEA4FDD194F3ECB77DA62404EA587510FAFD05FA6C3BA238CF19FD8515F39E53856EC3211353C8D521381E682C4834482A482C807928CB9GC5GF5GE6G8740A400C80099GF381969C42B16AD28F59FB8B3566661B146A210970D715B2561AF471A13D3B9E4747648B3C634278BECB79128F0D2F5D998FA7
	705FEEC9276B3EDD078357789BA83E74F0609A7F66C2DC63D7C15E74436827677AC30F4DAF740FBDB6AF6F27F751E1CC6D9AF173F3635481FA27243F5FAB0BB9406A81234035FA5BDDDEBB1971313D1DFF2563F06A91F8BF02FBC27BAA0277311AABF09F2B6A885B476AA24FA36C2E85636BE88EBECB34B7A35FA420A5E7095360B90B73313D24DF9F9BEB7FABD3D2773FE200B76E083A1714F8A4F07F4F78865DE384FCEAB96A76B67D9D24D0DF32B11ADFECA1ED136D20D2B41F5717F42F137C4F5BAC8E1C73F7
	E72967087CE3B48973060CAA9FFE1005F9B566577575910570B55E47DB756904A20C6EDCDE88BAA1181D37190B347B6425653C9E4A71BC2E38B070BC0E647BC4FE13C9AFBFC2642F736865CF9779CB776B654F9179F38775741BAF722B953D7CC5A2BF3DDBAFFF29080372EC726DCFBFB819454AC9BAE7C9FD9B5E5FC61AAD2B880D820D0F2D4B8A4EC1D2E2317A69287B1E04DF3B6F5928592B263F7586B2709B82A6BF0B4EBF5AGEF96722BE5FF9DBB69BCE8B264CF95B4C5C37EBAB61ED7F57C172131F4B40C
	22E3B457F13550D122672D8BG9FA7645F1D9E5CC7BC100EEDBD35027591F970AC85A0F72F985F336660BEA235BB703EC18B7074D430FE1959E4BCB316CD2BB4FD04823CD3AAD41B22AA589957B34B17AFE7FA5CE2535FA37FA11D674D847AB99528F3CEC3F0DB55FE150CED75A94726A0BA7CEA98E99E25F3F25EDF284508BE638FB9EA1F9148EBBC1E9D405BA977391CD6AFEF5BFD8783E31F78FDF185360DF7576A65AF9379D38B825BA649CF2F447CCBEDFA79F9A25F5C2E17DFDA09E7BFCF53F9E2A3245BAB
	5137F5BD41F1F43A876361F2A50B23C8F84E2CE47777985F3C5E60B87ACDEFE09CC583CFEC25B60E9E6D9B6B5C82FF9709C0A270CAD5EA9C65D431316699F18E3406460B897045D5629C482D29E37583F6D147678F28E3867F22DB64CDEE8E0CB57FAF60453D29B39B0368824B6ABC19255523C346F06179D35F4C564D5F4F636933350175C97CEF2E427AFEA8DFAF5FA1726F4A8F0CB712BFC964DFCC534B0F94791F6816BFD364F75568654F9375702BEA7FFEB4014E1197C27EA2C113E9756FC76FA2BF1549E3
	45E39D2B4F511E9986762399558986524710CBA6EC9E56ED8BBD5FBBEB9BFB3EE737696F4538EC41FBB10ACDFFAF6622CD3B9743F0D7EC440E8118171B855DE4016B9638FF26E5925CE93BD531897C1729DE845FA29301083F096AB5CCF1E60E3BD9036B6638DBEC24AD0349B6173873BC43C66B4E6EF03074CCCAE3F74294D678633BD4C73B5B22517B7B82C774E6F7CE2333B3A92F436E149B582F91CA38EE3A196EAB67C2DD15D6639AA92F1076D310B6D7633AF15DEEC942F543E64D7B7442095F933DE7C2E5
	3038FFF0D01230DF482C98EB7F7B48A15C6BF7D660DE3F95FC95D50DE77FF7D760FEFDECB56E57CFE9A23499B58906DDGD5B5786D67D71AF1FD548538089AAC63F74DF80FA426864BD8F50C50A6C3BA27967A5C5AF0777C7FCC2A1E5B1C63D6ED6E59BD9E1BD9FB7F74F02124B947B86F98A8B957C7F605CB7AC9CFCCBE96905DB2FE737065A274C7E3AD5A57D70877A3AE8B5CE593626688DC1387F10982377BG62F655A16E39C11451A3F00AB8B70994385AEE44AD28433BCC668B2AAFDED8D990680BE668C4
	0BF654C3076458D1EC5A8F7F9F58A37CF8E9D8756937FCEAB9DB65514EC38E9C01D24A719C65650BAADF5AD0F87273AF2B726B7E26169319BE1A7CA3649C67G4671DF53B10ED36BA1B66B51D7552B51D7CABD4660CEB37D9DDFC847GAC9234EFF60BFBCF02565CCDFF9763A80C8DGBDC7430D5761CFD55BEE3E225AD6DDBB9E5B18DEB79F94B69CC5DDBF3F96F133846E978598D37182777DB64465B5A06E4B6D086BEA4078593AC255EDDB4F787DFE25877D9E81E54588993F68C17D129B5017FF31905A3246
	84C39B003591E9DF6AC53FDFEEC45A5DFD04F68E2497G44B7066B771A94556F9603EA5B6DB563777B0FEA51CF49C257555B90D7560438477351D60740FDAF8DF1B384EEE6BE72AE9238AF56A0AE27996B027E1C855777693E705A123CCA657D1EC246FB059C45929E8957037753BE258D64191BF19EF530B08DE9C5D9D328DB599826D4DC5D5E5EE74664535F5B7BB1651B52BC3E3D3D28E65C5BCB26E3546C66403D3DB4BAC64DEB8E5C5B7BD2930EDD73A12F78984E973E56FCF53F097D6D2B64FBA4ECBEE657
	A5BA1ECEBD96E86FE40A0FBA96E8EF66B134F7A664E534203D11C5C43E3BC55F5F13F5700C4FD62855FB9A271B451F51A179EEB0E979E2B95D927ECC8E49F75C2365B336B23ADD7CD95E9A0A2F7800162F0D531D65CFA5A45F32C19A07BA79B46EC2720D503D6959A178E2C272B5F6933E3890FC09A179DEC93F3A7639FA7555354F2314CFBABE3E7619F39C5B67576858DBF4BCB0DE27D3FC597140F85DE346F82D033C9947B1DE77F5DFDDFBD9C0477374F78265BFCC71B96F844A7F289B651BA0EF72BBA87F16
	03C47E12F7746DCF5641B33EAF2EA5FC46B6FD3EDDBAF8FE6ED52035371C533571675910FCBFEC5372A91CEE8AFFC605640BEC57724D66F4B17C9997126FF3BDD79707B70E49279F078BA8DFE288FF8602F48263303F1756770940B8F0D13C69C4E09CA4D9B08E0AA1EF6A890C0357FA2FAE8E3FC167B74B02644F20F869E4207C377AD0FE866439CF227C7F67773DFB6CC95E0F72E77249D07534EE1BDFBF7AAE6FC779337C5DD0FCCF66933EB61DFC9A07A1796ECEA3FCCA883EA9A1793E1B2F55B30A534D664F
	1810FCD37DFEF7A00E53A57227549E6ACE61F3E4AB8477EB8B47BB77E27B8E8F51B5F38E14DD5C0EFB91C67A9BD5F5106EEA47BACBE916041EEBB56F11CD933F97715DFF000C9B0E29B6FDC1731EFDEC62E597CF288CD627F7513D0033D01FBED14FF1FB71DCFE3240DD217B8331100E97383F50737BA4C8273F0738DE99F9F384EE1A89F92D8257E1C4DE1F407D40A8648A1C45033C318217B10C3CCB84EEF098F91789DC835D17E86C00F86DC05CE7687D9C9B24FD8277243833B3D96056BA037DD266C43AD8C1
	B7D589263BC7C13ADD1D622EC3F7B05DE4F137C791F45D2B315D45885CDD74BED29C2493BB315DFD532C46629D1A77FD66090F4B16FF000C073AD51BFE2FF937F6CF3C6C3FCD288CD627F753FD10A428CFE39756F3FE9946C31E405D3696699C82E748C0BA1F40BDC177CB66C3BACE601EBFCF6F40C1BAD9604C8E64CDFF9FF18F36A12FD9601AA464F5885C9D1210ABF0F7517D1779100E93B8B37DF6B391524982F7EF0A10FBCA685C0331EE96380B96FAA6G69C927B0569D3DEA7D8FE95EDF33CCFCACEC6E1D
	F899377629B65D29F9BF58B771325BA6D4863F57C8771EA220BE23C4BDEF21634EECC8C78B5CBD4D98A38B846E0DED481BF79AF1490548DBAAF09F0AEF082B846EB53AC79581699982A7EFC33A598277C09A52C9E644152CC43A8C010B4947D86F913885745E139B521384EE7FG72C6885C3F513D31C510CE94386769D8A9F5C39F50AD5ACE3F68833AF1BF6B298A7D3D2F9515342DG1DCF506EEE8A5E7B4A2253F016FFDF117EB7F607483194BFEBFCEEEFB85FC04E845984709B12F970CEB607F78B19DFAD74
	BF7B1CC56BEFBE50458A3DD74B7EE71F66F52ABEA3F2B8F7C88275C9BD13E0F88B1E4B45B979CF69FC4488783CB338CFF9E93DAA6F3F0D2349DBB5063CB6A8B353CF5E97689C468CF82B1077AD23AAEF72F0B8E73B0172A24F307BA44B45FD12B3877C7D6D26732069C0B76B8C7A7B6B81F7F6FE3AC1556735D16F6C2C9AC31FC5E7585F91A57A30725EF106733DEBE0F9CB4E2871444ADB280CD65E6AB16AE7D9D0F95F689E2B3C517413BED04BE37E7E8C1D43E5GBE77837477FD27035BE5BC3992415B488387
	755BE5C62EDAAFE5E561344B40BBGAD20CB9F5713153DEF0BDA766B996154D1E059DD1A3219BDAF97784720115E5BBA8BF48E6113B58E7F986CF8DD5547653816FBE3D19F307B446A5D3697699CE7A66067FC00EDF0E82BAA6FDE69DA6ED744FF4066AA6AF74F77357B5B9FC767C9CB01AED9586FCA7137FFDA1E2ACFECCAB8FDD020BE45BD89063DFE76E7FCC86417833E318765FF45929C13BF4ED7E37259DAFF9B8C74EF9BA940BFC914D1DA64EF03FD3BEA434266EB294359BD2C8EDF957D68C9BAF64F837C
	7C9E2C438813AACF99735B75516AB029075D05FED574239B376937497FA8D0E5DE5EF6ADEDB275438403CB52364907F628E5B72D3C16B6E954144D7C77AC1D3F64813E68C32C3FA77A7D6B6F2FBBD579AD83610C8301724D9F2A77CB192C1F547847D3AC1D93D9014EAD74D99320CF6E9B2ABE2E7EEBE99353B57A3032155DEA2C27B60DF7FFAC74B736DFABD25FDFFBD3AD7B0F569D7AE5DB21E857G94DE8A05176DC1DE3ABD4E5FEFADD14BE9B606D7CE4CBE351C3D8754F22461704AB9F9D0AD674EC3EAB997
	0642AB6721A3EAB9FFADD75FF3AB54774ACA75DD2ED1E55DF2BA3C3363A935EAB9A3D6757D61FE354CA74F0FC77F83C27F2481351C2EF3EAB9EFCB6115B3FCDEAD67B71A3BCEEDA961597802D3AD677408DA0E5392DEB9BF392472E69605E74BE31A7BAE551ABBA1CB8B43AB672C269DFDF6057AFE07666E837DE9A2DEFEF4FFF8B63E31D2AD6706F4CD8C486115B303FEC23F1972CEDD3F999A532CE725B42FC74A8A3E03D17F255F7DF656470DB9A9D2CA2B3452C66F9936CAE9436442224F8DBD118D60A36FA7
	923DD743D20AD444FF824E646D334956A107EC9A724AD61362B2493EBE4710D5B67501029E178399A5F27374A6D0E13DD021155ECDDCFC61E00561095B8DA9D2AA48E7F7B5DB25D4F261925470B0F58C0A4B6D433FF9C97AD0725BGD981E51394F1FE8A27A37DE80A20B98548AEC1C347B5G62F0038E8D7A6F9B024340A513DFD6CCD124ACF4C0A7F7C005C911B6285FE81948AF5B91DC967B6E4454A9733F60D3E192925E7153A9CDD7A7C66311B27D2A7EE7379E7A6302C7CEF98D524AD6E98B992DBAE58F7D
	B8DD26FFF90D7FF567E6E9351B7CGA2392F8FCE7552C71AD799F148EDD2CEFF87798BB1DEC53656636758DEC55AC8FF58FE9F79D901FDAD962FCDA1D7EAAB5B24D4A779BB54D2964BF6D81C837B58B770152CE66A6B283E74548C744DD6FF5BDF14127D6375EF949C0F1FEBA0A7B2EB9CAE0B3559522738BC2D52EA4566113DB617436AF35732025269E6B9195C24C2F1DB0579445892B25191CA1F77FDB3A2F3C9E6B3D43C4FA36D2314E4F0AE919456861B458322E4CF2BC27E2E364B33CB645D30CDA9FC6058
	661E94E985B71238FE134F2DC8AB7BAD03F647883CB4528E01D64A6B10E457F1C5B493E714B403BD4A7FBEFB7FED3F2FDA1A8805B5CBE974D76FC1A523CAF5F2E830D776FCFE56CD79EBA397FF11E86CA666E2492BA1FA1CDE72AB7FD038A940E64C922A175CF8FF69CD5FF9798CD5DDE5D5246D2C1200F55F006C9A5CD75F5FEFF74A22G28B1A8BEDF94CFE8CA82E832FCDF59F87C61653D90E10D12E13034147E3B1F7EFB007C3B1FE276D34C7E83D0EDCB25D17F8B4C77214DB4ACE9220044100F3CED7309E6
	C11AC3AE67C9974D022CCA2F50D4CED07091ECEEF09491F41E28CB125ACE7E59C97E59C5198A693FFB423604F06D8D3060004F2F3359449BF70E30208360CE3FCE0B644F12340DDF255167A04BA7C3880E6B54AF357EB53B09DB122EC8190D24BB45EE72FA3661982C3232CED8FCA6724120295E61F08D136F8F942910A0ED64ABC21305E0E5EB3169226CF11986E5E8D6A6274B64308F5A9522A879D429829ABCFE16886F697CD3C602462F90615DG05AAD26D89766915C901115B2458E4131B7D35AC536010D7
	B1754AA68B7F6A458A89E84132492E186CDE139746CE37ECD52426B1CB60247E7CEA3116817A75719A7C3C068CEFEB29A126F75DDE12CA754AFDA5C4E3C237DA5001E97CD31B0A6B49902EADFDDC4F61F656675768C9F7C2BA44159A1D4FD2EE3A9D9DC2E7C3304EFFBFCD4F7274002A29014BA57F25DDFF1ABA7DB5A57ECC3DBEB59DD2B5B5EAFCEA387EB43D6C2FA97A54A030F823AAD7F8DABB74110D5515823BDE03CD391EDB67677DA3C96296E589EC0E861B2AEB497F17DAC37D3F64BFA063578559571F26
	B7291AEEC6FDA47FB62BEAFA1DC4C7143FF7B1C2B6DE4FBA5F6E3B7E6A7EBB2A9F53A535A7398E23F4362A69960D26EAFFE710547DE67FDE82317A3D44F5929D777837C25C31D8F5BD6B9C2D6A3CCA23F38E7F2D49BDD7343F251B74396DA1FFDF7C72A76C9E6B54CF82FFCB77CB6C7759G3F64937C3D1AC7B612B37DD03FC358B98893FC4562B8DF6F34125FA4BCBA22486A6F605D3809146FC59A1E493F895EC474BE276179BFD0CB87887123606566A9GGF013GGD0CB818294G94G88G88G3DDB4FB0
	7123606566A9GGF013GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGA0AAGGGG
**end of data**/
}
/**
 * Return the JCheckBoxDayChooser property value.
 * @return com.cannontech.common.gui.unchanging.JCheckBoxDayChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser getJCheckBoxDayChooser() {
	if (ivjJCheckBoxDayChooser == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder.setTitle("Day Selection");
			ivjJCheckBoxDayChooser = new com.cannontech.common.gui.unchanging.JCheckBoxDayChooser();
			ivjJCheckBoxDayChooser.setName("JCheckBoxDayChooser");
			ivjJCheckBoxDayChooser.setPreferredSize(new java.awt.Dimension(340, 86));
			ivjJCheckBoxDayChooser.setBorder(ivjLocalBorder);
			ivjJCheckBoxDayChooser.setMinimumSize(new java.awt.Dimension(340, 86));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDayChooser;
}
/**
 * Return the JCheckBoxSeasonChooser property value.
 * @return com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooser getJCheckBoxSeasonChooser() {
	if (ivjJCheckBoxSeasonChooser == null) {
		try {
			ivjJCheckBoxSeasonChooser = new com.cannontech.common.gui.unchanging.JCheckBoxSeasonChooser();
			ivjJCheckBoxSeasonChooser.setName("JCheckBoxSeasonChooser");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSeasonChooser;
}
/**
 * Return the JComboBoxHoliday property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHoliday() {
	if (ivjJComboBoxHoliday == null) {
		try {
			ivjJComboBoxHoliday = new javax.swing.JComboBox();
			ivjJComboBoxHoliday.setName("JComboBoxHoliday");
			ivjJComboBoxHoliday.setToolTipText("Holiday schedule used to exclude control");
			ivjJComboBoxHoliday.setPreferredSize(new java.awt.Dimension(155, 23));
			// user code begin {1}
			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List holidaySch = cache.getAllHolidaySchedules();
				for( int i = 0; i < holidaySch.size(); i++ )
					ivjJComboBoxHoliday.addItem( holidaySch.get(i) );
			}

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHoliday;
}
/**
 * Return the JCSpinFieldMaxActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxActivateTime() {
	if (ivjJCSpinFieldMaxActivateTime == null) {
		try {
			ivjJCSpinFieldMaxActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxActivateTime.setName("JCSpinFieldMaxActivateTime");
			ivjJCSpinFieldMaxActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMaxActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxActivateTime;
}
/**
 * Return the JCSpinFieldMaxDailyOps property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxDailyOps() {
	if (ivjJCSpinFieldMaxDailyOps == null) {
		try {
			ivjJCSpinFieldMaxDailyOps = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxDailyOps.setName("JCSpinFieldMaxDailyOps");
			ivjJCSpinFieldMaxDailyOps.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMaxDailyOps.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxDailyOps;
}
/**
 * Return the JCSpinFieldMaxHoursAnnually property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursAnnually() {
	if (ivjJCSpinFieldMaxHoursAnnually == null) {
		try {
			ivjJCSpinFieldMaxHoursAnnually = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursAnnually.setName("JCSpinFieldMaxHoursAnnually");
			ivjJCSpinFieldMaxHoursAnnually.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursAnnually.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(99999), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(0)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursAnnually;
}
/**
 * Return the JCSpinFieldMaxHoursDaily property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursDaily() {
	if (ivjJCSpinFieldMaxHoursDaily == null) {
		try {
			ivjJCSpinFieldMaxHoursDaily = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursDaily.setName("JCSpinFieldMaxHoursDaily");
			ivjJCSpinFieldMaxHoursDaily.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursDaily.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursDaily;
}
/**
 * Return the JCSpinFieldMaxHoursMonthly property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursMonthly() {
	if (ivjJCSpinFieldMaxHoursMonthly == null) {
		try {
			ivjJCSpinFieldMaxHoursMonthly = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursMonthly.setName("JCSpinFieldMaxHoursMonthly");
			ivjJCSpinFieldMaxHoursMonthly.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursMonthly.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursMonthly;
}
/**
 * Return the JCSpinFieldMaxHoursSeasonal property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursSeasonal() {
	if (ivjJCSpinFieldMaxHoursSeasonal == null) {
		try {
			ivjJCSpinFieldMaxHoursSeasonal = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursSeasonal.setName("JCSpinFieldMaxHoursSeasonal");
			ivjJCSpinFieldMaxHoursSeasonal.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursSeasonal.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursSeasonal;
}
/**
 * Return the JCSpinFieldMinActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinActivateTime() {
	if (ivjJCSpinFieldMinActivateTime == null) {
		try {
			ivjJCSpinFieldMinActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinActivateTime.setName("JCSpinFieldMinActivateTime");
			ivjJCSpinFieldMinActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMinActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinActivateTime;
}
/**
 * Return the JCSpinFieldMinRestart property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinRestart() {
	if (ivjJCSpinFieldMinRestart == null) {
		try {
			ivjJCSpinFieldMinRestart = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinRestart.setName("JCSpinFieldMinRestart");
			ivjJCSpinFieldMinRestart.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMinRestart.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinRestart;
}
/**
 * Return the JLabelAnnually property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelAnnually() {
	if (ivjJLabelAnnually == null) {
		try {
			ivjJLabelAnnually = new javax.swing.JLabel();
			ivjJLabelAnnually.setName("JLabelAnnually");
			ivjJLabelAnnually.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelAnnually.setText("Annually:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelAnnually;
}
/**
 * Return the JLabelConstraintName property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelConstraintName() {
	if (ivjJLabelConstraintName == null) {
		try {
			ivjJLabelConstraintName = new javax.swing.JLabel();
			ivjJLabelConstraintName.setName("JLabelConstraintName");
			ivjJLabelConstraintName.setPreferredSize(new java.awt.Dimension(127, 18));
			ivjJLabelConstraintName.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelConstraintName.setText("Constraint Name: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelConstraintName;
}
/**
 * Return the JLabelDaily property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDaily() {
	if (ivjJLabelDaily == null) {
		try {
			ivjJLabelDaily = new javax.swing.JLabel();
			ivjJLabelDaily.setName("JLabelDaily");
			ivjJLabelDaily.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelDaily.setText("Daily:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDaily;
}
/**
 * Return the JLabelDailyOps property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDailyOps() {
	if (ivjJLabelDailyOps == null) {
		try {
			ivjJLabelDailyOps = new javax.swing.JLabel();
			ivjJLabelDailyOps.setName("JLabelDailyOps");
			ivjJLabelDailyOps.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelDailyOps.setText("Daily Ops: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDailyOps;
}
/**
 * Return the JLabelHoliday property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHoliday() {
	if (ivjJLabelHoliday == null) {
		try {
			ivjJLabelHoliday = new javax.swing.JLabel();
			ivjJLabelHoliday.setName("JLabelHoliday");
			ivjJLabelHoliday.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelHoliday.setText("Holiday Schedule: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHoliday;
}
/**
 * Return the JLabelMaxActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxActivate() {
	if (ivjJLabelMaxActivate == null) {
		try {
			ivjJLabelMaxActivate = new javax.swing.JLabel();
			ivjJLabelMaxActivate.setName("JLabelMaxActivate");
			ivjJLabelMaxActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMaxActivate.setText("Activate: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxActivate;
}
/**
 * Return the JLabelMaxActSeconds property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxActSeconds() {
	if (ivjJLabelMaxActSeconds == null) {
		try {
			ivjJLabelMaxActSeconds = new javax.swing.JLabel();
			ivjJLabelMaxActSeconds.setName("JLabelMaxActSeconds");
			ivjJLabelMaxActSeconds.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMaxActSeconds.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxActSeconds;
}
/**
 * Return the JLabelMinActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinActivate() {
	if (ivjJLabelMinActivate == null) {
		try {
			ivjJLabelMinActivate = new javax.swing.JLabel();
			ivjJLabelMinActivate.setName("JLabelMinActivate");
			ivjJLabelMinActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinActivate.setText("Activate:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinActivate;
}
/**
 * Return the JLabelMinReSeconds property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinReSeconds() {
	if (ivjJLabelMinReSeconds == null) {
		try {
			ivjJLabelMinReSeconds = new javax.swing.JLabel();
			ivjJLabelMinReSeconds.setName("JLabelMinReSeconds");
			ivjJLabelMinReSeconds.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMinReSeconds.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinReSeconds;
}
/**
 * Return the JLabelMinReSeconds1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinReSeconds1() {
	if (ivjJLabelMinReSeconds1 == null) {
		try {
			ivjJLabelMinReSeconds1 = new javax.swing.JLabel();
			ivjJLabelMinReSeconds1.setName("JLabelMinReSeconds1");
			ivjJLabelMinReSeconds1.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMinReSeconds1.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinReSeconds1;
}
/**
 * Return the JLabelMonthly property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMonthly() {
	if (ivjJLabelMonthly == null) {
		try {
			ivjJLabelMonthly = new javax.swing.JLabel();
			ivjJLabelMonthly.setName("JLabelMonthly");
			ivjJLabelMonthly.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelMonthly.setText("Monthly:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMonthly;
}
/**
 * Return the JLabelRestart property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRestart() {
	if (ivjJLabelRestart == null) {
		try {
			ivjJLabelRestart = new javax.swing.JLabel();
			ivjJLabelRestart.setName("JLabelRestart");
			ivjJLabelRestart.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRestart.setText("Restart:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRestart;
}
/**
 * Return the JLabelSeasonal property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonal() {
	if (ivjJLabelSeasonal == null) {
		try {
			ivjJLabelSeasonal = new javax.swing.JLabel();
			ivjJLabelSeasonal.setName("JLabelSeasonal");
			ivjJLabelSeasonal.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelSeasonal.setText("Seasonal:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonal;
}
/**
 * Return the JLabelSeasonChooser property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonChooser() {
	if (ivjJLabelSeasonChooser == null) {
		try {
			ivjJLabelSeasonChooser = new javax.swing.JLabel();
			ivjJLabelSeasonChooser.setName("JLabelSeasonChooser");
			ivjJLabelSeasonChooser.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelSeasonChooser.setText("Season Selection: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonChooser;
}
/**
 * Return the JPanelMaxHours property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxHours() {
	if (ivjJPanelMaxHours == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder1.setTitle("Max Hour Allowance");
			ivjJPanelMaxHours = new javax.swing.JPanel();
			ivjJPanelMaxHours.setName("JPanelMaxHours");
			ivjJPanelMaxHours.setPreferredSize(new java.awt.Dimension(340, 75));
			ivjJPanelMaxHours.setBorder(ivjLocalBorder1);
			ivjJPanelMaxHours.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxHours.setMinimumSize(new java.awt.Dimension(340, 75));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursDaily = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursDaily.gridx = 2; constraintsJCSpinFieldMaxHoursDaily.gridy = 1;
			constraintsJCSpinFieldMaxHoursDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursDaily.ipadx = 63;
			constraintsJCSpinFieldMaxHoursDaily.ipady = 19;
			constraintsJCSpinFieldMaxHoursDaily.insets = new java.awt.Insets(6, 1, 2, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursDaily(), constraintsJCSpinFieldMaxHoursDaily);

			java.awt.GridBagConstraints constraintsJLabelDaily = new java.awt.GridBagConstraints();
			constraintsJLabelDaily.gridx = 1; constraintsJLabelDaily.gridy = 1;
			constraintsJLabelDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelDaily.ipadx = 22;
			constraintsJLabelDaily.ipady = -1;
			constraintsJLabelDaily.insets = new java.awt.Insets(5, 11, 3, 0);
			getJPanelMaxHours().add(getJLabelDaily(), constraintsJLabelDaily);

			java.awt.GridBagConstraints constraintsJLabelSeasonal = new java.awt.GridBagConstraints();
			constraintsJLabelSeasonal.gridx = 3; constraintsJLabelSeasonal.gridy = 1;
			constraintsJLabelSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSeasonal.ipadx = 6;
			constraintsJLabelSeasonal.ipady = -1;
			constraintsJLabelSeasonal.insets = new java.awt.Insets(5, 24, 3, 4);
			getJPanelMaxHours().add(getJLabelSeasonal(), constraintsJLabelSeasonal);

			java.awt.GridBagConstraints constraintsJLabelMonthly = new java.awt.GridBagConstraints();
			constraintsJLabelMonthly.gridx = 1; constraintsJLabelMonthly.gridy = 2;
			constraintsJLabelMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelMonthly.ipadx = 4;
			constraintsJLabelMonthly.ipady = -1;
			constraintsJLabelMonthly.insets = new java.awt.Insets(3, 11, 16, 0);
			getJPanelMaxHours().add(getJLabelMonthly(), constraintsJLabelMonthly);

			java.awt.GridBagConstraints constraintsJLabelAnnually = new java.awt.GridBagConstraints();
			constraintsJLabelAnnually.gridx = 3; constraintsJLabelAnnually.gridy = 2;
			constraintsJLabelAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelAnnually.ipadx = 11;
			constraintsJLabelAnnually.ipady = -1;
			constraintsJLabelAnnually.insets = new java.awt.Insets(3, 24, 16, 4);
			getJPanelMaxHours().add(getJLabelAnnually(), constraintsJLabelAnnually);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursMonthly = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursMonthly.gridx = 2; constraintsJCSpinFieldMaxHoursMonthly.gridy = 2;
			constraintsJCSpinFieldMaxHoursMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursMonthly.ipadx = 63;
			constraintsJCSpinFieldMaxHoursMonthly.ipady = 19;
			constraintsJCSpinFieldMaxHoursMonthly.insets = new java.awt.Insets(5, 1, 12, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursMonthly(), constraintsJCSpinFieldMaxHoursMonthly);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursSeasonal = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursSeasonal.gridx = 4; constraintsJCSpinFieldMaxHoursSeasonal.gridy = 1;
			constraintsJCSpinFieldMaxHoursSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursSeasonal.ipadx = 63;
			constraintsJCSpinFieldMaxHoursSeasonal.ipady = 19;
			constraintsJCSpinFieldMaxHoursSeasonal.insets = new java.awt.Insets(6, 4, 2, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursSeasonal(), constraintsJCSpinFieldMaxHoursSeasonal);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursAnnually = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursAnnually.gridx = 4; constraintsJCSpinFieldMaxHoursAnnually.gridy = 2;
			constraintsJCSpinFieldMaxHoursAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursAnnually.ipadx = 63;
			constraintsJCSpinFieldMaxHoursAnnually.ipady = 19;
			constraintsJCSpinFieldMaxHoursAnnually.insets = new java.awt.Insets(2, 4, 15, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursAnnually(), constraintsJCSpinFieldMaxHoursAnnually);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxHours;
}
/**
 * Return the JPanelMaxValues property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxValues() {
	if (ivjJPanelMaxValues == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder2.setTitle("Max");
			ivjJPanelMaxValues = new javax.swing.JPanel();
			ivjJPanelMaxValues.setName("JPanelMaxValues");
			ivjJPanelMaxValues.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMaxValues.setBorder(ivjLocalBorder2);
			ivjJPanelMaxValues.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxValues.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxActivateTime.gridx = 2; constraintsJCSpinFieldMaxActivateTime.gridy = 1;
			constraintsJCSpinFieldMaxActivateTime.ipadx = 49;
			constraintsJCSpinFieldMaxActivateTime.ipady = 19;
			constraintsJCSpinFieldMaxActivateTime.insets = new java.awt.Insets(18, 0, 3, 2);
			getJPanelMaxValues().add(getJCSpinFieldMaxActivateTime(), constraintsJCSpinFieldMaxActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxDailyOps = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxDailyOps.gridx = 2; constraintsJCSpinFieldMaxDailyOps.gridy = 2;
			constraintsJCSpinFieldMaxDailyOps.ipadx = 49;
			constraintsJCSpinFieldMaxDailyOps.ipady = 19;
			constraintsJCSpinFieldMaxDailyOps.insets = new java.awt.Insets(4, 0, 20, 2);
			getJPanelMaxValues().add(getJCSpinFieldMaxDailyOps(), constraintsJCSpinFieldMaxDailyOps);

			java.awt.GridBagConstraints constraintsJLabelMaxActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMaxActivate.gridx = 1; constraintsJLabelMaxActivate.gridy = 1;
			constraintsJLabelMaxActivate.ipadx = 12;
			constraintsJLabelMaxActivate.insets = new java.awt.Insets(19, 12, 6, 3);
			getJPanelMaxValues().add(getJLabelMaxActivate(), constraintsJLabelMaxActivate);

			java.awt.GridBagConstraints constraintsJLabelDailyOps = new java.awt.GridBagConstraints();
			constraintsJLabelDailyOps.gridx = 1; constraintsJLabelDailyOps.gridy = 2;
			constraintsJLabelDailyOps.ipadx = 3;
			constraintsJLabelDailyOps.insets = new java.awt.Insets(5, 12, 23, 0);
			getJPanelMaxValues().add(getJLabelDailyOps(), constraintsJLabelDailyOps);

			java.awt.GridBagConstraints constraintsJLabelMaxActSeconds = new java.awt.GridBagConstraints();
			constraintsJLabelMaxActSeconds.gridx = 3; constraintsJLabelMaxActSeconds.gridy = 1;
			constraintsJLabelMaxActSeconds.ipadx = 21;
			constraintsJLabelMaxActSeconds.insets = new java.awt.Insets(21, 3, 6, 0);
			getJPanelMaxValues().add(getJLabelMaxActSeconds(), constraintsJLabelMaxActSeconds);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxValues;
}
/**
 * Return the JPanelMinTimes property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMinTimes() {
	if (ivjJPanelMinTimes == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder3;
			ivjLocalBorder3 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder3.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder3.setTitle("Min");
			ivjJPanelMinTimes = new javax.swing.JPanel();
			ivjJPanelMinTimes.setName("JPanelMinTimes");
			ivjJPanelMinTimes.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMinTimes.setBorder(ivjLocalBorder3);
			ivjJPanelMinTimes.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMinTimes.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJLabelMinActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMinActivate.gridx = 1; constraintsJLabelMinActivate.gridy = 1;
			constraintsJLabelMinActivate.ipadx = 12;
			constraintsJLabelMinActivate.ipady = -2;
			constraintsJLabelMinActivate.insets = new java.awt.Insets(19, 12, 8, 1);
			getJPanelMinTimes().add(getJLabelMinActivate(), constraintsJLabelMinActivate);

			java.awt.GridBagConstraints constraintsJLabelRestart = new java.awt.GridBagConstraints();
			constraintsJLabelRestart.gridx = 1; constraintsJLabelRestart.gridy = 2;
			constraintsJLabelRestart.ipadx = 13;
			constraintsJLabelRestart.ipady = -2;
			constraintsJLabelRestart.insets = new java.awt.Insets(5, 12, 25, 1);
			getJPanelMinTimes().add(getJLabelRestart(), constraintsJLabelRestart);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinActivateTime.gridx = 2; constraintsJCSpinFieldMinActivateTime.gridy = 1;
			constraintsJCSpinFieldMinActivateTime.ipadx = 55;
			constraintsJCSpinFieldMinActivateTime.ipady = 19;
			constraintsJCSpinFieldMinActivateTime.insets = new java.awt.Insets(18, 1, 3, 3);
			getJPanelMinTimes().add(getJCSpinFieldMinActivateTime(), constraintsJCSpinFieldMinActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinRestart = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinRestart.gridx = 2; constraintsJCSpinFieldMinRestart.gridy = 2;
			constraintsJCSpinFieldMinRestart.ipadx = 55;
			constraintsJCSpinFieldMinRestart.ipady = 19;
			constraintsJCSpinFieldMinRestart.insets = new java.awt.Insets(4, 1, 20, 3);
			getJPanelMinTimes().add(getJCSpinFieldMinRestart(), constraintsJCSpinFieldMinRestart);

			java.awt.GridBagConstraints constraintsJLabelMinReSeconds = new java.awt.GridBagConstraints();
			constraintsJLabelMinReSeconds.gridx = 3; constraintsJLabelMinReSeconds.gridy = 2;
			constraintsJLabelMinReSeconds.ipadx = 7;
			constraintsJLabelMinReSeconds.insets = new java.awt.Insets(7, 4, 23, 6);
			getJPanelMinTimes().add(getJLabelMinReSeconds(), constraintsJLabelMinReSeconds);

			java.awt.GridBagConstraints constraintsJLabelMinReSeconds1 = new java.awt.GridBagConstraints();
			constraintsJLabelMinReSeconds1.gridx = 3; constraintsJLabelMinReSeconds1.gridy = 1;
			constraintsJLabelMinReSeconds1.ipadx = 7;
			constraintsJLabelMinReSeconds1.insets = new java.awt.Insets(20, 4, 7, 6);
			getJPanelMinTimes().add(getJLabelMinReSeconds1(), constraintsJLabelMinReSeconds1);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMinTimes;
}
/**
 * Return the JTextFieldConstraintName property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldConstraintName() {
	if (ivjJTextFieldConstraintName == null) {
		try {
			ivjJTextFieldConstraintName = new javax.swing.JTextField();
			ivjJTextFieldConstraintName.setName("JTextFieldConstraintName");
			ivjJTextFieldConstraintName.setPreferredSize(new java.awt.Dimension(149, 20));
			ivjJTextFieldConstraintName.setMinimumSize(new java.awt.Dimension(149, 20));
			// user code begin {1}
			ivjJTextFieldConstraintName.setDocument(
					new TextFieldDocument(
						TextFieldDocument.MAX_DEVICE_NAME_LENGTH,
						TextFieldDocument.INVALID_CHARS_PAO) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldConstraintName;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param o java.lang.Object
 */
public Object getValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	 
	if(con == null)
		con = new LMProgramConstraint();
	
	con.setConstraintName(getJTextFieldConstraintName().getText());
	
	con.setAvailableWeekdays( getJCheckBoxDayChooser().getSelectedDays8Chars() );

	con.setMaxHoursDaily( new Integer( ((Number)getJCSpinFieldMaxHoursDaily().getValue()).intValue() ) );
	con.setMaxHoursMonthly( new Integer( ((Number)getJCSpinFieldMaxHoursMonthly().getValue()).intValue() ) );
	con.setMaxHoursSeasonal( new Integer( ((Number)getJCSpinFieldMaxHoursSeasonal().getValue()).intValue() ) );
	con.setMaxHoursAnnually( new Integer( ((Number)getJCSpinFieldMaxHoursAnnually().getValue()).intValue() ) );
	con.setMinActivateTime( new Integer( ((Number)getJCSpinFieldMinActivateTime().getValue()).intValue() ) );
	con.setMinRestartTime( new Integer( ((Number)getJCSpinFieldMinRestart().getValue()).intValue() ) );
	con.setMaxActivateTime( new Integer( ((Number)getJCSpinFieldMaxActivateTime().getValue()).intValue() ) );
	con.setMaxDailyOps( new Integer( ((Number)getJCSpinFieldMaxDailyOps().getValue()).intValue() ) );
	
	if( getJComboBoxHoliday().getSelectedItem() != null )
		con.setHolidayScheduleID( new Integer(((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getSelectedItem()).getHolidayScheduleID() ));
	else
		con.setHolidayScheduleID( new Integer(0) );
	
	con.setSeasonScheduleID(new Integer(0));
	
	return con;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	getJCSpinFieldMaxHoursAnnually().addValueListener( this );
	getJCSpinFieldMaxHoursDaily().addValueListener( this );
	getJCSpinFieldMaxHoursMonthly().addValueListener( this );
	getJCSpinFieldMaxHoursSeasonal().addValueListener( this );
	getJCSpinFieldMinActivateTime().addValueListener( this );
	getJCSpinFieldMinRestart().addValueListener( this );
	getJCSpinFieldMaxDailyOps().addValueListener( this );
	getJCSpinFieldMaxActivateTime().addValueListener( this );
	// user code end
	getJTextFieldConstraintName().addCaretListener(ivjEventHandler);
	getJCheckBoxSeasonChooser().addJCheckBoxSeasonChooserListener(ivjEventHandler);
	getJCheckBoxDayChooser().addActionListener(ivjEventHandler);
	getJComboBoxHoliday().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMProgramConstraintPanel");
		setPreferredSize(new java.awt.Dimension(350, 360));
		setLayout(new java.awt.GridBagLayout());
		setSize(350, 360);
		setMinimumSize(new java.awt.Dimension(350, 360));

		java.awt.GridBagConstraints constraintsJCheckBoxDayChooser = new java.awt.GridBagConstraints();
		constraintsJCheckBoxDayChooser.gridx = 1; constraintsJCheckBoxDayChooser.gridy = 4;
		constraintsJCheckBoxDayChooser.gridwidth = 2;
		constraintsJCheckBoxDayChooser.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJCheckBoxDayChooser.weightx = 1.0;
		constraintsJCheckBoxDayChooser.weighty = 1.0;
		constraintsJCheckBoxDayChooser.insets = new java.awt.Insets(3, 4, 1, 6);
		add(getJCheckBoxDayChooser(), constraintsJCheckBoxDayChooser);

		java.awt.GridBagConstraints constraintsJComboBoxHoliday = new java.awt.GridBagConstraints();
		constraintsJComboBoxHoliday.gridx = 2; constraintsJComboBoxHoliday.gridy = 5;
		constraintsJComboBoxHoliday.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHoliday.weightx = 1.0;
		constraintsJComboBoxHoliday.ipadx = 29;
		constraintsJComboBoxHoliday.insets = new java.awt.Insets(2, 7, 3, 54);
		add(getJComboBoxHoliday(), constraintsJComboBoxHoliday);

		java.awt.GridBagConstraints constraintsJPanelMaxHours = new java.awt.GridBagConstraints();
		constraintsJPanelMaxHours.gridx = 1; constraintsJPanelMaxHours.gridy = 6;
		constraintsJPanelMaxHours.gridwidth = 2;
		constraintsJPanelMaxHours.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJPanelMaxHours.weightx = 1.0;
		constraintsJPanelMaxHours.weighty = 1.0;
		constraintsJPanelMaxHours.insets = new java.awt.Insets(3, 4, 5, 6);
		add(getJPanelMaxHours(), constraintsJPanelMaxHours);

		java.awt.GridBagConstraints constraintsJLabelHoliday = new java.awt.GridBagConstraints();
		constraintsJLabelHoliday.gridx = 1; constraintsJLabelHoliday.gridy = 5;
		constraintsJLabelHoliday.ipadx = 7;
		constraintsJLabelHoliday.insets = new java.awt.Insets(8, 24, 6, 0);
		add(getJLabelHoliday(), constraintsJLabelHoliday);

		java.awt.GridBagConstraints constraintsJLabelConstraintName = new java.awt.GridBagConstraints();
		constraintsJLabelConstraintName.gridx = 1; constraintsJLabelConstraintName.gridy = 1;
		constraintsJLabelConstraintName.ipadx = 7;
		constraintsJLabelConstraintName.ipady = 4;
		constraintsJLabelConstraintName.insets = new java.awt.Insets(20, 22, 1, 4);
		add(getJLabelConstraintName(), constraintsJLabelConstraintName);

		java.awt.GridBagConstraints constraintsJTextFieldConstraintName = new java.awt.GridBagConstraints();
		constraintsJTextFieldConstraintName.gridx = 2; constraintsJTextFieldConstraintName.gridy = 1;
		constraintsJTextFieldConstraintName.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldConstraintName.weightx = 1.0;
		constraintsJTextFieldConstraintName.insets = new java.awt.Insets(18, 7, 1, 60);
		add(getJTextFieldConstraintName(), constraintsJTextFieldConstraintName);

		java.awt.GridBagConstraints constraintsJCheckBoxSeasonChooser = new java.awt.GridBagConstraints();
		constraintsJCheckBoxSeasonChooser.gridx = 2; constraintsJCheckBoxSeasonChooser.gridy = 2;
		constraintsJCheckBoxSeasonChooser.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJCheckBoxSeasonChooser.weightx = 1.0;
		constraintsJCheckBoxSeasonChooser.weighty = 1.0;
		constraintsJCheckBoxSeasonChooser.ipadx = 38;
		constraintsJCheckBoxSeasonChooser.ipady = -8;
		constraintsJCheckBoxSeasonChooser.insets = new java.awt.Insets(2, 1, 2, 15);
		add(getJCheckBoxSeasonChooser(), constraintsJCheckBoxSeasonChooser);

		java.awt.GridBagConstraints constraintsJPanelMaxValues = new java.awt.GridBagConstraints();
		constraintsJPanelMaxValues.gridx = 1; constraintsJPanelMaxValues.gridy = 3;
		constraintsJPanelMaxValues.gridwidth = 2;
		constraintsJPanelMaxValues.weightx = 1.0;
		constraintsJPanelMaxValues.weighty = 1.0;
		constraintsJPanelMaxValues.ipadx = 4;
		constraintsJPanelMaxValues.ipady = -11;
		constraintsJPanelMaxValues.insets = new java.awt.Insets(3, 4, 2, 172);
		add(getJPanelMaxValues(), constraintsJPanelMaxValues);

		java.awt.GridBagConstraints constraintsJPanelMinTimes = new java.awt.GridBagConstraints();
		constraintsJPanelMinTimes.gridx = 2; constraintsJPanelMinTimes.gridy = 3;
		constraintsJPanelMinTimes.weightx = 1.0;
		constraintsJPanelMinTimes.weighty = 1.0;
		constraintsJPanelMinTimes.ipady = -11;
		constraintsJPanelMinTimes.insets = new java.awt.Insets(3, 43, 2, 3);
		add(getJPanelMinTimes(), constraintsJPanelMinTimes);

		java.awt.GridBagConstraints constraintsJLabelSeasonChooser = new java.awt.GridBagConstraints();
		constraintsJLabelSeasonChooser.gridx = 1; constraintsJLabelSeasonChooser.gridy = 2;
		constraintsJLabelSeasonChooser.ipadx = 5;
		constraintsJLabelSeasonChooser.ipady = 16;
		constraintsJLabelSeasonChooser.insets = new java.awt.Insets(8, 22, 6, 2);
		add(getJLabelSeasonChooser(), constraintsJLabelSeasonChooser);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
		//	default day of week and season check boxes to all!
	  	getJCheckBoxSeasonChooser().setSelectedSeasons( "YYYY" );
	  	getJCheckBoxDayChooser().setSelectedCheckBoxes( "YYYYYYYN" );
	  	getJComboBoxHoliday().setEnabled(false);
	 
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxDayChooser_Action(java.awt.event.ActionEvent e) 
{
	
	getJComboBoxHoliday().setEnabled( getJCheckBoxDayChooser().isHolidaySelected() );   
	fireInputUpdate();
	
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		LMProgramConstraintPanel aLMProgramConstraintPanel;
		aLMProgramConstraintPanel = new LMProgramConstraintPanel();
		frame.setContentPane(aLMProgramConstraintPanel);
		frame.setSize(aLMProgramConstraintPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * This method was created in VisualAge.
 * @param o java.lang.Object
 */
public void setValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	if(con == null)
		con = new LMProgramConstraint();
	else
	{
	
		getJTextFieldConstraintName().setText(con.getConstraintName());
	
		getJCheckBoxDayChooser().setSelectedCheckBoxes( con.getAvailableWeekdays() );
		getJCSpinFieldMaxHoursDaily().setValue( con.getMaxHoursDaily() );
		getJCSpinFieldMaxHoursMonthly().setValue( con.getMaxHoursMonthly() );
		getJCSpinFieldMaxHoursSeasonal().setValue( con.getMaxHoursSeasonal() );
		getJCSpinFieldMaxHoursAnnually().setValue( con.getMaxHoursAnnually() );
		getJCSpinFieldMinActivateTime().setValue( con.getMinActivateTime() );
		getJCSpinFieldMinRestart().setValue( con.getMinRestartTime() );
		getJCSpinFieldMaxActivateTime().setValue( con.getMaxActivateTime() );
		getJCSpinFieldMaxDailyOps().setValue( con.getMaxDailyOps() );
	
		getJComboBoxHoliday().setEnabled(getJCheckBoxDayChooser().isHolidaySelected());
		
		for( int i = 0; i < getJComboBoxHoliday().getItemCount(); i++ )
			if( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getItemAt(i)).getHolidayScheduleID()
				== con.getHolidayScheduleID().intValue() )
			{
				getJComboBoxHoliday().setSelectedIndex(i);
				break;
			}
	}
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
}

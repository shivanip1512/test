package com.cannontech.dbeditor.wizard.device.lmconstraint;

import com.cannontech.common.gui.util.TextFieldDocument;
import com.cannontech.database.data.lite.LiteSeasonSchedule;
import com.cannontech.database.db.device.lm.LMProgramConstraint;
import com.cannontech.common.util.CtiUtilities;
/**
 * Insert the type's description here. 
 * Creation date: (3/2/2004 10:09:59 AM)
 * @author: 
 */
public class LMProgramConstraintPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener {
	private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser ivjJCheckBoxDayChooser = null;
	private javax.swing.JComboBox ivjJComboBoxHoliday = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxDailyOps = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursDaily = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursMonthly = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursSeasonal = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinRestart = null;
	private javax.swing.JLabel ivjJLabelAnnually = null;
	private javax.swing.JLabel ivjJLabelDaily = null;
	private javax.swing.JLabel ivjJLabelDailyOps = null;
	private javax.swing.JLabel ivjJLabelHoliday = null;
	private javax.swing.JLabel ivjJLabelMaxActivate = null;
	private javax.swing.JLabel ivjJLabelMinActivate = null;
	private javax.swing.JLabel ivjJLabelMonthly = null;
	private javax.swing.JLabel ivjJLabelRestart = null;
	private javax.swing.JLabel ivjJLabelSeasonal = null;
	private javax.swing.JPanel ivjJPanelMaxHours = null;
	private javax.swing.JPanel ivjJPanelMaxValues = null;
	private javax.swing.JPanel ivjJPanelMinTimes = null;
	private javax.swing.JLabel ivjJLabelConstraintName = null;
	private javax.swing.JTextField ivjJTextFieldConstraintName = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JLabel ivjJLabelSeasonChooser = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursAnnually = null;
	private javax.swing.JLabel ivjJLabelMaxActSeconds = null;
	private javax.swing.JLabel ivjJLabelMinReSeconds = null;
	private javax.swing.JLabel ivjJLabelMinReSeconds1 = null;
	private javax.swing.JComboBox ivjJComboBoxSeasonSchedule = null;
	private javax.swing.JLabel ivjJLabelHolidayUsage = null;
	private javax.swing.JRadioButton ivjJRadioButtonExclude = null;
	private javax.swing.JRadioButton ivjJRadioButtonForce = null;

class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJCheckBoxDayChooser()) 
				connEtoC6(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJComboBoxHoliday()) 
				connEtoC7(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJComboBoxSeasonSchedule()) 
				connEtoC2(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJRadioButtonExclude()) 
				connEtoC3(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJRadioButtonForce()) 
				connEtoC4(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJTextFieldConstraintName()) 
				connEtoC1(e);
		};
	};
/**
 * LMProgramConstraintPanel constructor comment.
 */
public LMProgramConstraintPanel() {
	super();
	initialize();
}
/**
 * connEtoC1:  (JTextFieldConstraintName.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JComboBoxSeasonSchedule.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jComboBoxSeasonSchedule_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxSeasonSchedule_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JRadioButtonExclude.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jRadioButtonExclude_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jRadioButtonExclude_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JRadioButton1.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jRadioButton1_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jRadioButtonForce_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (JCheckBoxDayChooser.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jCheckBoxDayChooser_Action(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxDayChooser_Action(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JComboBoxHoliday.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.addDataInputPanelListener(Lcom.cannontech.common.gui.util.DataInputPanelListener;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxHoliday_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
public void enableHolidayUsage(boolean val)
{
	getJRadioButtonExclude().setEnabled(val);
	getJRadioButtonForce().setEnabled(val);
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G53E6AAB1GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DBD8FDCD4D556EEDB2D15FD59E62D6D5237D664E2D1D9D159461635D66EC66536D6D8D4EC0BC5093BD4EC19597A00C1D179A7621F9257B1C9A191C5B111B0D11020D0C94848D0991987B3BA4CCCB38F05C27D4E7DF36EFBB3730681DC7A6C57713DFB6EB9671EF36E397F6F9B241C1523D29213F2A4A9B1C5627FEDCD14A4DB10A49D39F9476B08CB9D1AE110B47F2D82D8A8D5D69264B2488BDA1DE948
	1256ADCE05F4A1248D99190625703EC85A38B86282F871D3CEB064D54C5CFFF76F65BCD005654C256924EDE9704CG588838C600D1GD952875B16F1FC9724B378BB0144A43069A2C2635A30CC030F61F495105788603C1850EC59164B7343G9781D088780A0B99ED93BC67D16DAEA8AB65F44D1707C889FF5E1B14CE4A5248C79847F9237853A8BDCD9D11AC35946E05E7F97D71764FDA9D9DC52DA63B5DE1D764D6CB117928EC36AA8ED751C96B8FA6173948AC1F30364AC5368E274B516EB2F51415556D29E7
	2F158E3BDBF1192CF6255EE417ED12D4F78931E36406D4DA86389F52119417351178EEB83C07G0C3F84ED79CBFAB957F5447190A97A7A1DFEED499D46FDB6CC35A56A0E2F136307917907E95D903EA1109E87406C2CDE71D5FF6DEC95D675E6AA37F574B6343564D23455D4C0F431C17AFC00A0014F7F186043A09D8190F3A97AE07BDA74C1530FF7CBB30EFE1F1469478733AEE536677D0F6A03E549D7A43DCF63F3CFB509319648BB9FE0A4C0B8C09440AC006534DD246E7E981EBB0FAA150E0E8E07FD275339
	4BE6F66DF118E59B3C1715C18E476D17DB9DAE33A431583FE6C3210EBE88B917F946BD81E65BB79246EA687EDBA4C5E9CFCA5131AD6C297A24FCAE237CB25536504B085F520A095F1A611D702DA632A8FE8D4547EB70AC961650D8A3690A619906664B514FCD9928CB1D61BAA92B581DB4D7C717118FDA123AFE49F4987ECBD597666335B5444761000F840887C83DA243108FD0F3857AF87F6E4D01FCDC8BB168321BEC8D1DC71DA617322B53EAB34BAE6EEB73365EFC2D870C4F55EFBE6617104D5ABA0A3A4325
	6B172810EF124CD7B0FF74DC217A0515FD135F32032E700D0D8CD107CF5136B2768AD60749827FA2450F5760D95D36D3BCC9CF023C12919986C6BF0A362D11A398FD3A10F3AB4507EB70CCCE914513F4B46455DD19E1E0757BD0AD690347C1FAB2C09C00612A8CC39EC085C063D5D847576C5E5047F6D42F29DF46FB20FA89BC65AE68CFEA21D7B159DB6583A61755F454A63BA5CEF3241A787528871F19366FD6A863F359AE3BCC0A55E18769268E9902494DE8BA2A97929A17CCF39B2D9DB294506114D0EEE775
	A2F85ACCEE65EB27592448AA854BBFD5CDE2620469GC88481709EFC9571D7986D5395F89FFE957A6A0DAF88AE9652522F50AFB32A336179A58437ECABAB2B323692B5CC2EEE0C516C62AAF866GFD90C05DC810FDF506E184C06E2FB38C41G793F01BA85A88902F182206E9AE8EBGA37FB743D07FDB684BGC2C7E11B7EC79346EED57A4DD261D35F6B46AE9DAB2FE5F128DC6B9D3B05D427A0400783C4814C82483DAE43D08E508C50839084908E9085B08BA077FA4887E8866881883A9E6789399B33927918
	F6B5AB0B58CA1ED9BCCDECA1F608316D577AED449B027BC8278562BBFFF9444775DC8FD297F51C1678373F6590403A4B60F5CC6A4F330FEA953ED94071A9125A9711678A094D3F10AF3D0FE5E78EC05F653D64AD86D829517DFD7E3EFAG65E4D05BC97BE06F247FDA2A49E36D29250E76D590C711GB32E47B63579F323C47B1ADDA6370C3D4BBE97F48C32D9EDE10CF6E38D7103FCC236ABD532D3361B61454D5B76569A62E35E6F34B9A46C9336D3BC9907AA21E3F08BFCE54DC20617492CC76D45B07FCB1AEF
	D2941775E827A2B7480AE235372B7C8DD4973747906766369E5DC3EC4D8A06768ED09A0C36C655909FE17FD167F09C6FF4B6121E1177C38F5279D69D501B03313DBDD7C06669C3C5FAAACD2B799D85CD3D548B619BC8FDFA4675053D1611FC967255B2C6FFCC7AFF52371136134E7173F81CB21ABBA9CDA858B499E096C05E8D502E81149B509FA59F37C81EFDA44AC1390174D959879AD656BEDA1656FEACA7055384125397FDD86CBCD16BBF761F2E550F7D28DA7D58FF29367758FE2DD6AF36D95E6B3544B647
	C93B262D3CD5CB46C5D8DA58E55AE0850B4456A97FE8A4F6D86DD6659B2B39DDD69A2CBF4812B4618692730F5231B7885E475E00635E4955B86E657DB0C69AFF24CEF7DEBD720663C92923D9FC670ED647BD26535BDF10B6A85B648EF0D42523532EB07CFBF4DC67F8F7B2454D4C69A13C79DFB4028F2B2D324D2C2E0876428C2430953A8925087E4BE6967947CCA7CCDDC56E136037A2DAA9C515A4F7B7F9ADB02EDF7F19515F6A2A304D6A12EB6D4ECE94D5F020E0A35363F7DB2EE5FAD4DA6456633B9CDDD526
	6ECA0B436116DD05A66A59A2762817DDED8ED707EC26FA9419CEAADC091DB43BAFDA9C73AD6388634E2F73AF74D3D0F68B0F79C5527C0EF1DCDFC747D187482AF1582CE6D377FFDDD91359DCE5D2CC54EB94D3E7F5ABE41A18DF673570ED25B3562276CEEBD127E23595693391B3BEE1B63CA21D7CE9EC502976CF389F63BE6071D75960345AE9G6EB1F59151A778AC3630435169160B683F15B6EB6BF1DFCD76103C81AA32156971F03B2F9ED67BCF28C7A9536385E7170EBF2ACCD6DB77BE27FB10F55846F430
	E57A6AE0356FA76B8917B248AA94737EE057619FF57CD06368F43929B386DB0DE29E1FA96F1F7227479EE8F7164157E41368F35EDBFA5A1FAE8D32498D33C55BE0AB3399F539A45D2FAEBB6D76CE13ED709DD3023A8C1DF73BE7BF463C5150EA114D1DB6F990468F5DF27898229690E0B0913ECC5BFBA353FF3F49ECF56C6AD494206AEA35F51A87C1F75FB27A2B37707B11725F7A68DDBC289A9777D75762ADDC57135B02FF1A316E18D7817D55180F4D177DF03D0FEF2B9D2E56410D080178172D7B2E5CCB661C
	65B0972D87300C46F5DF7717A49F57FDFCF1DB69305958F49972A2C61339F0C7F10EE6FEBBE4B4BB07499079D78748FFA8C07E6B8172D7EC6ABD3FB6C0FEE7007CEB8364BF96A07F1DG799FED6EBD7F2BG792782640F89107FD4007C44125E73577B4DE7F154D61785CF377CFD27ECEF1549464117F2B76E0D56E5FB659DB059BA55BD574EBA32AE35E9769C985E32C7FF1DE45FC376990E8B792EBDF3A432F74AE432F55DD8931169F4D9BBCC2EEE3209424F8327EC531E87667CAE43C04E8E9B61E9799D1EDD
	5DDECEE87CB5481C90A2E75A47F8E6B88478C6820C633292FE477761A85DAD6B102E8552DDGC1A10CAEAAC4CB67AAC43A3CB19906F20066B10CAEE80C166E1375C8978BF869468C0371C6C657F22316EE26208B83FC84C09C27AB3CC9CBF7DF915275GFE44CDAADD982713C2895DCB62ECF103403DC3F1D366CA528586BC53581325BDA3B53B4D3A6BE382D5217CFCB5547B2C6729FDC4EE97600706E2BF9537C73BBF35536DF634DA69D6BB0F155F6C552E1D99EE545E7970042909DB29351B65AE0C3751FB09
	2EE4AF1E23F94C5C34EE3B64FB36301B1ED66276DF65C95A37B6BAAA9DE63986C236D2ECAD9C304AE43D467CF02ADAFB3E9A1E79ED5282BFFE88627607EB7C9015F4C59253696AB2F22625F70E6A351CACAB73DCCF72F3524A32D42E532CD0BC8FBD78A5E9D7A5B7E7986AG4CG6CECA6E7DD9A77C58F6042GD85BDF35DA5B7663EEE6FB00B937E49858D87863BA92937D5C0860BE1FD0104D6A48EB7A08FE3CEED185AFB762166B2472B3E53AE734C3B32B1272EFE17E2B3FC575E37C3273128C6F1F17446CFB
	C6589784B41381D81FF026CE5BA7245D4A6CEB02276DD6347133C2B24F6F7F580E3135FA47B6F88EF8E7C34273335F94228D6703EE6137E29DDD17282D2384EEC36ED854BFE97D5969FF6927BB287EE7B5F962B69CD90FB6EC847DACE3510661EEBD9BC6899B9EBECB9BE69A2B35B61C556AG6BE3F5915A9286FA4689DB7ED92E35A56FB6E6CB7DEDE84B45C5E7E74B3366DD441633DEAD209D2F88BB4C20E350EDE8473AB5FAF6CC3E8D474AAB0BAB3C74203360FEEA416FACEC520E9D63231B7C0E9D313731B6
	BE6BB66F31631E2FC8FF376CF69867EE4731E3553E051A31E3BF7456A6FBBB4CB2F0BCF8F69F299318CF70748B7BC839F4BEA1619951DB7B099FAAC0E6B30082B08CA0D414A157873CFB303B2B173B87B5E5F80E9FF1BB33A97AF675FCA4815ED36F70BCAF61F7B16859D56E9D6C1CFD394017D3FC33864F6A3905767DA49D84F9DDE1F8B67141BA6FFB840DF7FA166774CAB33EFC9F3EA22F7488AFBE96B79F6513F9879D57B443C4D9193A4F4D462F2655293C2C50BB717C3B2E117046C0DA3AAB43308C208420
	89C08198F99756C9D83D5EF86ED9A77E86F3754C0D59797CG7DB34D076FBFDE69F1F76979E7D449E7D260F15F5EEA01D0E60E739DDA702E545DF5B88718F4974E817EA911B8C83D9B660FG25F7E39CDCDBB8B0BBEF75617336337EEEBDBB5BED4B7563GFBE9EE4314C40C830B50D5DEBFB0DD5DBEFC5E3A0E7252156970089BF598A7F4A8A89A188EDBFD783CF50857755712DD7F5177172687C6FD57EC47FACF9D077ACE9F203E6F865437E21C1E4F0E2EC11FB50D4376BB6CEB029B8E69D163302DAE7C0A1C
	B7E29FDD6F005516047D73FDDF11751D43E505C8C75C9FA92E55612207FD8C776F7D7E4FA1D39A744FA197B4681FC3AEEC687D8C7E7D86FF67146C3C7C881DF70F857BA2G986E5EBD84978D6984019BC957BA4B6E49B0EC3C87F1775493DCA324ED77E03D95561540F38824C7810483C482A4G647C9E5AAFC0A30093E084C09840E400045FA37FAE4ACF561FE4ED19F3AF70GB45D4B562EDD708C3A172DA74743B37ADE36E6A46BC1465F7665A42F7A76862297F992FDFA237306D2CE1F406DA26F13F5E48C39
	4797974669C6F851A7F0FFF844B5CFC7EA6470BB1681ED433BB2FD3D930300F7E396C86A197B7BBAF4FA7794701E4AE2AF7CF2095DE9516270FE4BBC8DEE85157B27A519B40E5DEE59CD87BB32CA64F92FA80BA51D33F1F22CAC619E72D76B66F11A5D0A2332D8786C50EA6C8F24F05FFA4981DC3E971E5F41EB745FC68FB56A375156C662F7372393A6165E6D70D863B211270E5E350A5CC14CE0B4EE4A2F18DC6D32CFBB7E017233BCFF7CBFEF745756190FF28A35BE7AC478A83C8EFDD48E3E287772079952DD
	DEB8B6F7EBCDA4E37330F0B6F7CB94F89B450F5460591C6EDF925E418E063C54BF609AA352C32F2DC22F979209DEB6209B72875F3A9B2103E3720256EB65ED9272A25CC4DE8870056B70CE72AB2F25C8ABEF331037EEBB11974379E670E75AFDFC2EFF1FBFF9F99B3472CA043C76B55A312B04735770E7330EBCD66F17FFCDFC5AA552D752F437A86FC49909AB27CBEE13DDAE594C2E0EC8A17711BA390C767FCEF86F398F6B63C93ACFE9B3F5BBBAE1F0EB3A1F50FD3E97779E62004EG38C2000A7B59BA0B0D79
	371DA47DC71B4B5481E1576014DB251271740E6DBE649D8574E1G138192GF246E319136A89AFB0DABBBABB2806CC3F7F256B249E209BAAE88F1612FEC4EFA249721552AC1A6F39874072AEADA5FAFCC1371E7020917DD4F30678690BBA53D1594619048F2FCB4F91F91EB7DBD87E856D44C6FF37DF984D78C5195A327966B24B5B29554B4AAE66E2594FD916EA6D715C8F60B45DF50B04FE0C4053A715DFE7FB5B76355B54AEE3990BD7D1FE5FF5BA4F6F7C4FC22FFC3AFE16707B1542D55A3D293071ACAEA261
	99B79E576831795AB53A6181C6137FG66EFEC564BAFFFG773FDEBC26D7C6BD2193B44F5A74E8FAA0FF38A8A739DE2F1C90112F2C504B8FFFG67BD4AEA1CB3CD923818EE1C9F4588DC5BAA1C9F15BC08383F56A1EF0D40ADABA438E6C8BB854EF08C650D90B8391C60E2A0BD6BC11C6FD8C9D3477B7D1A77F7255E6E9B1EAD30B2F29287338CE6733F68FAAA6B0F90A7FFC4BFB4A7218FCB846E2DED682F9A017BBBDD870D0474D8017BC2A138F0C8C78A5C0CDC640D9338DDF4CDD2BE8162EB8262AE21B8B324
	95015BF6126006C2FA24407D7AA44A8B963853EB10B7C1603626A3EF6AC3E21E1D0E3CB900B3BFC43EBB6BEC16C4BFB4F60F911EF67924D1ECD4D5C1DFE1A7177173B7EF59D8E85C7C49468236CFB56A24F61F2AF47EE13F7BD4A18F713DFD7E8CEE39A4110D590E3DB8E6A7C0DE614358579737F86C0B90C54A4ABEF7D94D3BCC6DF5F46460EBFAFA5EC1784D8F631AFEAA15998469B0000807714EE2579ABC0B889DFD1DD4B744257B2DD7F46337C9B18FB3BDD39FD177558A132FC8E2E532F39942D78579BD0F
	7836F9624B3549EC8F0865EF7148A7FD9DB9ABD0735BBD72093EFFC85266DF6D11CFFCD4407919ED0FFE04364DFAF42CE43B33456FF7EC9338CD317CD93A61124426A74ECBE231F065E1B59636FF5917D8E07575E641B2C9F7BD4EAE75D13F19E9FFC546E163C42C2B6AC3242E1AA06D8498BA916B7F4DB6BF72688843642DAC40B575A860E33876E6DC6BC78A5C5263D8EE561F305CF75AC939B510EE81687A9352E6F7A06DF0C1BB55CDE8A7C2BA9AE00620AD2B4732327E0C381BD620CEB500E3F30CEBE8FFBE
	845243G627ECCF06FF6D77552B72570BA4067B86009GD84CF151FFE6F395D23FFC1EC5FDDB72A84C199E45F2E751314086692EC7F1EE3321104C3D0EBADCF4724F66DE5505B8268583DDB8408C003488F6CE4B74DDFE2CB7FD13399F667277BC60AD0DE07A12F4DD04BAD7E7FA74146B4F47C650B12889684D9128F39ABDB3D49C8EDB2355C9E6C0920B5559C7A4E17F85344F9E8EBCC19128F3FAD9A09F63BDF0D24E4488CF9FC7C17AD38F1DE73A757500052420B1A97E6742BF5031A19664A6889DB3D78452
	B1C5232371B1CF9DCBA0DD6C216337F48CF14B645E0AECE665BA376319F545E368536B36133B83ED8E3B42E85EB1901AFA48EF96B4974804C681C3191D3FBACA6CE4FA5FF6B2105E693CCC82911A78A53A8E03B2C87E5B33E74FE6657F0E0EDFA3819F7C980ECB3FEFD54B3BB53D37726686A8EFB248DC404BE37D65935FE9472E2CDF57A4E1FCFA4B0EFE0C7513F10FF91F31041A094E4647E18E79B86E5F7D3EF99DBC8F180E791E1A83325E65F04AAE251BE169841D4FF5BA778E6C1B4B1F8F10AF3C5FFCEC6D
	7D6DBEFA1E7238771A7CA845DB9E77DE13CF93633B82F9110F635E6773B26D5F1F48B0B481B881068204GCCF882FD19FCE82394605C2251612C13CF48B64D56A4336F59FD837B96750139B80E067D7EC6E95C05C63F7795A21F606BF27E1C347E12C472E476B969FAADFFD206218A4082B084E084C068A4346F4BC3054CBE928EBB954554EA2137B650B8F211C2C51385AF1F132FC25B46032C49G311354357BACF84F7A0B5EFE4A53F42C4D7B8B2B2305827F8A4557EB702C6E6AA81E24FBA0AF75C9DC936495
	E8FDBB62C9D6D688FF06BF693B0F4078EC4D48B789E8E2B85D8C7ECC7B2BBF3E5C6348E7841A92009A8DEDB33CBB7F2AE7EF070568FF7EDF19DD8B847EC70A8F5660193D33691C0024A7C0DE7EE434F7E98716BF8CF023G42A62B65CD04772849FA659FD2687761133D3F8936D1FC4ED35E5F84CFF363B7412510977C94163F239E4B4FFABA431077B41F3771E75D537E7CB6F605361EDAB81D421FC3F578D83FBB4FCADA829B8326F413EF2D7C4C810BCB36959AB7EDAC205FE31175FD2A047F456F7045217C07
	0F11F7565E7E16066DAD77266B252AE70CC9647BC65D7BC1DC5F382755FE58F0775749CCE635CD557941E3FD511971D9BBD43E7442DE78B61740FC37741382DED776C27C8EBC6F9998B31F41F96B9F6613BE2BCF77149A2D0ACD5EC5E7E2EC6EF897DD2793B9A31E413967D7D6D2CE8424E3GE681744D5771BB18FD436C2A5FEFF52836BEA97545D646773CD3651B362DB75FEE59823E5D2C9F8FCC1664D27521DB47DC6E745C3313FB31224A7A851D5BA82ECE19652DB829662DBF7921F7B955D0C1799F1A2DA6
	1B237D43C2A318DEDCD200BAD6F4297A867D204AD9175EBFB977134FC47858E0A31F7060D9DD6BC7121F79820CGDF006CFDC70F41DC2E5154AEF8EEB31378977B70EC9A4173461949BA11FC4787FAD8FF20D7839B00505E4E7A04A37BC8596C5D22F9FFFD6F606F674C5FB718E5B07BDF167D1F2BCC17754FD55E14754FBE5F11FB7F86B3314D7FB71829ED5AEFB0D93DF71FA2F5139319E158885088E0816809447940D5EDA42648AFB7784E85F61B5BE53A67EBA287427C4EFA3BFFDB0734877E0D070B5A493D
	50238EC5F1F49079083F0C460A62F0D2A4430DE8A7BEF2D95BAD8AA36578DF3753B5265CC651EC0FE948AA5CBF9B99097BCE478E93DCA824478BDC70F7F43F9152B384EE75A15C1F4A1D0238356BF0DF52B685474428C3C6F88EA1B4G61G11G89GD94F425A932065D9F156CFE907C2BA84E0A2C0ACC06AF3B0468354GD81EC35A7D0706401370FB47D79617C94AA269E0DE5E10A9AAED6494DF3E013717CE2A0B5E6F8A24CBECDE06E7293816757E4E793F218B2B03CF69DE4BD07053486730DE1C4534CEA1
	9DAEF0CF95E37DCD94381FB7E3BCAC0BC2DC77DA7A1BD910AE9738B5EC8D8A6996013B440072EC823779B84A8B97382B16905CA4C84788DCF08A4125BE8F31743C082F39A82FC2602E4D23FB87108EF99E6340EDA1EDB59C52B1G29AFC02CGD43D0079BF2379E6C81F8F908CB081A0C66427D834FD9D616B2B3FD3B9ADA90F146D1D9FAEF47C0FC7998B7AA89F638BE3A4C5A7BFD954FBD1877A5A70A27A6B3505540710AE943836D3346EA0ED963829275157C3854E3882FD9D79A25A512A1035D29C24532241
	4FG75G8A4008E824F1D11AB0C8CF86C8G48799B2C85G9A7F06B42F3BDBF4ECA1F248F384FF26C52BBE2D0F76DFAFC49FFC4F5750313252943D32308E70FE0456373D35C7ED3B557EA6817359813A4F28001D437FA64EEA6819C2B0244384AE291A60A6C2BAD2605A2B45391140BDC26B2064A508671790E717712C20C9607EAAA32F79A5DC37BFF31A6C4304C1FA92C082C05A5FB38CC600D200BA0096G85E098C0B040B8008800E800F8GC38C7483B1B866ADB8CE76317D6D17708DFF7530D378DF7139E7
	678D05B1FA77374E8B4867FD1F0B715DCB79EAE27A560E1BE370F7219E2273F7E70C77FE4963945F93633DDF720D9577CB06C2DE1C70534FCE799F6B071E8ABC56DFCE5B278CE3F4E337135F67386A943DCF56566616451C62B72732842E56DD6FF0DB498C126D510D2163FA7DD4D86FCC45BD421F9D765DCF9EF998771307CEE57B49236099B6155D37E2FC77FE67FB8760496F10AFE2AA3B8390834F991C0F6D83169D8A348F1DA9297B50D9AF43FA79E5F59F3A74E5555F4C26FABA372882FC7D4B285B366D74
	2C5D4F975D0C661177C9DBE72791944D5785C55FE6C81E6764A61B581B4DD64F7F79C7599266F5E629FC78E1B266FD5674013EBEC28823DBFEE439BE1DD004519D4B75C3A78A665F6A9D561EB9753C4C6AE16C4BF80EFD4D8E6FF3EC12BFC164A76B66C70A7C50A3FA79F1A2FF61AA3DFC69954C2FED5653AFC7645F192F171FAF723B9DFA79652FE09C6CAF705CA33750B9D0BD64B78B1ADF94FB6E115FA1117FD82C4695870AD51C33696E11C399780D8FABBF144E23C682BED814BFFC2D270E23693CEA9264C7
	891A6D86CF9D1FCED4F53C4E90C84764DEF4CC0BE5BA4E93BAB6533959B2406745E279B7AF716DA3A6AC4136DE9F4B7A888BBCFBE2599DCC5EC724687491A948B7A216759121709C4F79F89FB1B710CD24FF40B315C8600D0BE5B6913C74AABBAF1EB6FB76EC264738BC7D332AC9F45E1886744BDEC51DF3AAFD5B2A7657B9302D3EEADB62C3073F1E01B4AF52B9BE6FAFD4B1224FF8BEC76DB33CF9333ED864455BA037BA6CE6B7EF5BF7D93CE31F782F6AD5EC9B97D56865B7097CB15FF837CD12EF93791D963D
	7CA1A2FF03CBAFFF442BF8F6798D1DF706C0BACC78B6B15BB70E16E5E3BCC43F4A4FAE6119769A3B474B78CE1D720D23912710AF6FB596C765702C67FCAC0EE61D8EF446250DA38B70763C264651705758D8B3CD1CF15552F9D79060C3DEC35D5EF6EA6AD87DA197D14747B729E3867FE59311F7FE35F72CF97E928C527DF0F0318F1D372C063D59DABD764B98AEBCFF78470BF4730BF9BC05A85E75C97CB879B52C6F7B776B65470A7C587D5E71C672E7097C4DAB75723326E17E773A7273C47E45EE3D7C52E9D8
	8F9D757E4FEDAF24736FBA20ED9274BD391E7D6EAF69FC7CFC489FAEE85E2F766CF75FC9A25D8B0B2D5355017AA80CAB3DFEF77CB4366619A76A6F05951E7AA450D80BG3A48E9F81ECAD566653FA687AA3F37735454388C43C77C1D4D9B271D76BFBFFD63F46079693B27757722924F786EC54DB9233F9715F6C63B97453FDFB8C37C588E6B08A6C137C4603E953865D4A641FDE3B5AB9601DFF5E6BE47574824C0442F25FA1D2438A60EAB54603E653862B3246F8113AD8E71FD46A7E7E8DDD9EDB616AE23B4D6
	BBCC3905BFF6D09D2DCE13C66FAA01A3FA333B6B639725D3DE1B55AED732DFE615F05D78A4BDCF48013AAA0C43B55D948B41D5C03AB18E574D0F52739E76BED973FE48BA78FB42A786358C9677BB68EF2F735F02B99C685CE36B96BC6399FF984FF8DA40D7A363700ECF6A91BC2719940767B42F9F245F11CD0735B0C069F47C16FC66F7381E2B875C5069A8E3D7B35EA19BBF9DE5B81B896D8CC8E77D8366297F686FD94FD192C65C668B662AB6979C6A0B4D2C3FB97D499AC9F3FEF55C56DEF42C156C0A973511
	1103FC10A606917C362979B07A23629FE85F649DF88F2ACB604A84EE2C407D7D8862E2852EE695620C7FC45C10E6AC23C960627291B7DC6046BA90B7711F586F454CD7FDE1AEDE656D8BF6EE3393BAA45B070546E278FFD30170635CB455279F272BF26CEBFBBB2F5A349524146279590519AA5F87067E15BFA6CBADBFE221AA6712A53D153F151C5FED42B80EDB02F1AC45C3EC46232FCA16222F1C71A20E8D04B684526389AEDE44F18A46F1BC6072DF97F1BC87633865F59147F3687799109E8BB071757E4671
	BF33D51B33F3D41B7F525E971B19DE53ADE8DB3450F5FC8562163D013868EFB0566A85AE54023821825766C25C78B7B02E36ACD6F5FBF1E15F6B23A29B6BE386485A78A616B1B49B75333C093E3C2307500E0274B800C9EFE2FD041F427A08851CB181E598CEE3FDB4A5200CCD27695FBE00F4884078047E56C7539235BEFEDC2A5ABC515D777AF8D1C17FC58ADD5F5A0F382CFFA1EEE5837A20C6600E2DC45C90018B913C63846E8171DDEA7C3F300E46ACD375BD586B9933E71B1D3FD265FBEBF77F5A6CFA236A
	2F1C552A1C23F27F64EC4DD3F9DF255FB0A9644AG6111F0EE1A381E581C7FD6062164AD1CF746DBD210D648BAC826EBFC4CFD78704076CEA78764535FBBCDBFC2784CEF75ED6F346BAD5CBB156958B96CAD6F3DD3BB450FFC4BFB6F746D03627BAF48CBFD9B67B7D2F3A03D7567A69983647B3C5FFC4C2E98BA7E5B5E7636F7BA45F73D6DED6F09E63477FC480B95761AE8BD554D5077F70B8E1E71CD592155DB61F4C379B348AF5F8E8F3E311CEE82FFC67A650BBD22650B63F452BB7C7B59F77C716DD925654B
	67F4657CD96F176F82DAAFE61DFC9AF7FE79DE4FA7FC437C700D724BF72703700579611B68176F0DA583EB1F525201354FED14AF4A0F1E5E907F0EE81FF4CEE0186953BEA9BEEB26CF7BB4E03C66C25E101922FD4E99E07B9CA05F677D66636D134EEBE2FC6C1DCE7171BE761E1803764E023C16F7515EB7AC247C896F6A7BBBD2874F789E2AA0FCF1FE7824D97E7826FE2335B707536573E739DF3E5BACDA3EFACEE7664FAE3FFC47DDDA3EE11CEE94FF0679652B4E9ED85CB78664530F7BCBA95FC49DFD74A0EA
	96467DDABA770A1F659D879BA9FE56AC6FB838278763A0753D8C036DBD0C0387CF8DACFEA78D10EF5E6901457DE8BAFF1C741E373D37D2FC54FB5E76161E96F3D3482B7BB75A9B23F80C937F666384FFC67E5BDFDC3C3B5FE31C60F452ECBECE4C76471757C07872F572E95C7B65F32CA4FC75FE784CFE79EE7650330B538D634FD1FE799EF6EB7942B85DC47E0C5261E3F33A3B5692B730B95FE3163E4EAD59BED09EDDF747036CD4A9936F649CA438DCC8EF8460ED79BBC96829E85E5FBBB878FBC3CB3E9B7CB2
	DEEBD6EDFAD3735E53BC78E5DFB928E530BA6D22FBB365D01F0D221EEFB0613D0E96010B27FBB3E3A1BDDE606A69DAF2B224E3846ECEF127A7DE608E885E0AC44495D5A0EF2340DDD6A14A953859C710F72C40CD5D0D3C93842EDA5CE319A4F06CFBC2E39244EB92627653B339AAC8B78A5C5DF922DC018BEA76754BC34DC8B7D650259678529597A01D140C388807AF5D3F9CC8D7AF686A17E23B9BA5F05D740EDB9824A7A60BF61722462222F9FF4F7093343B141F205D4DD1EDFAD3735EB367A7E8F703DA862B
	53F9D69A43D01FF1221E1DD60C07998297D501F4B58644ED5F09F40D82B70B6ED385C3BACC607E7EA13D6F8569C8012BD9AD6EFB895CC48B721624A0EE72D6642D9138AD2522DC01BB0F6EFB85C3BACC6046D21DA7C2BAD260968B1DE384AEB89BE33DE48E62BE6DA1389AC8B74F41D8DFFFCA2D7FCFB46F77778CFEACC47E84E5041ED6ED3AD3737E596941AF7B1BC1AD0355693BF4EF4F827559A56AF98E0D07E1108E923863A2C6C284AE3B81F9E7885C6D95481BB697F10B846FB2017B1471C2FA0840DD5700
	F443846E4215C897A5F02F2CC43AD8011B309FE33DB495F1E974DC378E524D82773D78BD870B40BDCF779E47C1FA22406DDDCEF0D1100E9338BB160BBEGF0EC6E7669917D3D3D86BAB6564C03B1E59E528EBF683B37B7A51F44944B3F6C307EB74AF3491FDD65E73F61263EFCFB0EF0BE14CDG3F4B9A896FE76039D614B93742736CF9852D3FE0209BAB74EEBF6DF9967E71BAD51F08DE6FD9F85FC17256A79A5E5743F33638E7F1064EC762GBF8300153727D0ADEFF4C520EF09FBABAFFFFEA67DF6D9ADAF3F
	055E2785FC45FCAC4F39DEAD6FD03F4E7A3D4BF3024CF93CBC664B9FD7F97A7BF2BA8F6A813A2173515F56BCCFFFDFD1246A73F8DEA07BFB53E75CFC76B72E09BECCDED4F3DF3EE177A7EF42FCB51E183C1A025E644D13FA2F1FC9BE72521C01647526DF14C69E73F7B71D434582BEC178FB384137DD5EC5FFA21E659B2D7A6DF24AC635DEFEE16DCF3B4CDB10E9A000F7B2CA613D156B49E44FAAD6E5B76E6CCF9DF94B2E5248E676ACEA720C4102A6FAB792681A9720CFE6FE689903ABB72B7A9CD95D1FB66F2D
	4FB0F8FFDF525E0DFC1D4EF1C682BEF88136413692353C3A527E34C16F72A6AFE0F39575F7962EF6F95AFFAB1DA7C583DD1C307F118ACF7BAF5A226AD358EBFDF877C15E7A6426E59A56F9587F981DEB65833EA48D4B5F5F639B13211F28B1195D69E9C3FEA711E186FE271031E227278DCFECD5EDB82FD79B82556128B4D6076F09FE140D6721009F1706F578C629DA5E47814B6B2D8EE3C166F2DE9E77CF03FE1BDCDC2616F9CF4359344984A853A1E95BE469272A6CFF2FBC1BB6A9252B32197F265379CB9A60
	1725E37D2D4E752C3F6F4A5572076676E79C70AE3F864A407B492C2C8437E7BC4D277342C620EB917A484BBD75B93DDD55674F4B4F26CD8C576843E4CF5D2146FA47413E6E0F797FEEBDF5277A3EF537AA3B6AF47F3E85BED82D4A392BC61573E1C57F64CC29D565EC29D365CC595DBFB9CDFBD4B9E17BD4B955F97D1373CC3DAAE766D76A7B0A86753D22D1FD8FBA20291FBE5F0B71DFBF77FF233E3F54243ED7362A65BC73E1DFEC5AA4ECEAB32BF29EEBD365CC5C5ABFB9716D2A1C3AE32A1C600A7E5D89F09C
	D765BC2A796D028DBD7D1333D673CD7F4CBE451DEA4BA94DB77CB11A6F6EC777D34E5C932A1C0FCF2A6FFBB45F5C0F51FCF3AF65764F46089FD5B91BCF2BF2F6AD6F1F1C83E47AC7FF07F811745B720B2043891DAE2538DDD2366FBD121D7FB3651950A3D5B9C9D2D22DB447C26F0256CAA9A7492552AE70F9228560307BFB096A43D20A144FFFB25368663F3AE96CF44BE62362B04A6CD7B20D2D20204BE16B9769DC7E931B0A14C2FFCC93CB15481D2AABC17FCC21FFAD3DFC9AFDE2F3D9725F2FCFCE128C20BC
	3B0CDBAB99480DDA304145ECC9D69CCEE209C4F66DC8E7CEC634ECAF591802961E58C8D3F8AD4940B913F5E8504D3F919C491C034CDA127C50E8751883D625FB546AC357EEF9B96205836EE4E9CE2D74BE991C9AE4977DED84197E415A83320B54DB35B44FC9FEEC1DDC7C86135D741162D63AEDF21D1453361F7C51AE37A21BF7622F813895E9B17DE39E9B482FF9EC28B139AD8A39517CE91DE4301BBA406959AC5BE63237EFE0BF4170A975DB624E96EA859954A450F79155177EA9DCA1E5513D199F2D7AA2E6
	DC3214D4AD4D37B9CC66EAD32B62F055CA73940BCBF6DB9CB6F317F3C7859514CAFF8F12FECB8462168B730931C5E4DEA314BE5EF54D307458746AA4C96AF2C99BA8A5990B0B84053952E2F2C1D1322B964084C566093C1F7DC7D9735867CB1B1324C4EEA429021CAE27A24DE9B3F5D8ED5D70D2C55BBA2D1CE58AE86BB2595D64EF1F00E6C6AF4DB0CB94D0F4451FB6DEB9E666C1DA004A2AC8AB19AB01F5C33B6C685830332D4DEA1705G70AB08DFA144931AA2AF1A6C2E4B97FF71546C239087D5D2F247460D
	745FE27A6FA672EFB14594D3CC71A6F0EE3C546BFF5E79DDE8B38D9E513AC87597D5C38DAA4FCE7F53F54F15474701F555D28A7D33AAD089D9AA555E4E0E23326B4250ABD7AC9891FD8929A3A78915AEA2B7374B2795A509D6146D93D5843B44B7BC887A83D1C9A43502122E247FFE58EF1389D79E65DDA3B4AD74541434E072A71F1221C1E057053FADDCE6D424056A473DC672D3469447BED874204BC4E67A3342E5C65199FC695145AC1554AEA6C90706390AB9061ED27BF1154153D5D837F3586DFEE6B26179
	6F7A3002274B3ABCFA37E55C0F2942A0E2461933B10824BEA57FEC9F9C8BF6FBDAC0EE101289FC0E30E0BF400D020644B229B632EBB6D707C61FA31F7B459F47B96F258655CB73B4DECABD17F5BE689B1BC477B90A14DEC55A364C7FE46A39EC43D1D86BE76FB1F59949E74F461DB61B63A479AAC91156902405FC8BEDB4912CECAEB47EA03B9C468E994691235DE134D9BB2C8AD114FCF0D986A39CFEDC8D6F297C03EC0246EF2961BD9904AA520EBD6C83D22382F3C523E2110DCE76F7B50D9D1DEE45F8D4B61A
	7837FBE6C84010A59B2D0A516AB63AE14265144D0A34BB2084CE6A492F0AB535535FD0180F9F8912FEF581B544384F69A6A903DBEEADA29A933AF9028ECC639F8C161DCB06F0ED6963DC8E379F3BBC3A2DC45EEC661CFB0377F92A26493CDC72DF4A392769C51E1A92FF9A4ECDCD072B1AE6E9FCFA8ECE5DFE6529A97AB4D9E071DE5FB261E96D60CD3EC61EA330199AEC52395CBA2F750CA409DB14AD30B99A2CC157127F17DAC37D47F88E4878ED5122F3CF53312A26CBD19F49334D2A1A1EA351F13727F7B1C2
	961F4BBA5F57F56E557D84550F5A1E649C0C52C7D5CD5F57E82A76F749123A34756CA5902B5FCB1CA351B159339562EAF96E392C73F32A4EF3B5BA931F335F91AEB8237DBD7799976C707B37C822D7E7323F33471F6A6F3917D591799B73B28DF5F9197CF737AE2EA4CBD2FF3F4F5A5081D3FC45E4BB3E53EEA63F553A2BDB11555F875DD1C5643B1106E7323C6AAA2277B18D4F7F81D0CB878874FF366DACACGG141CGGD0CB818294G94G88G88G53E6AAB174FF366DACACGG141CGG8CGGGGG
	GGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGE6ACGGGG
**end of data**/
}
/**
 * Return the JCheckBoxDayChooser property value.
 * @return com.cannontech.common.gui.unchanging.JCheckBoxDayChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser getJCheckBoxDayChooser() {
	if (ivjJCheckBoxDayChooser == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder.setTitle("Day Selection");
			ivjJCheckBoxDayChooser = new com.cannontech.common.gui.unchanging.JCheckBoxDayChooser();
			ivjJCheckBoxDayChooser.setName("JCheckBoxDayChooser");
			ivjJCheckBoxDayChooser.setPreferredSize(new java.awt.Dimension(340, 86));
			ivjJCheckBoxDayChooser.setBorder(ivjLocalBorder);
			ivjJCheckBoxDayChooser.setMinimumSize(new java.awt.Dimension(340, 86));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDayChooser;
}
/**
 * Return the JComboBoxHoliday property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHoliday() {
	if (ivjJComboBoxHoliday == null) {
		try {
			ivjJComboBoxHoliday = new javax.swing.JComboBox();
			ivjJComboBoxHoliday.setName("JComboBoxHoliday");
			ivjJComboBoxHoliday.setToolTipText("Holiday schedule used to exclude control");
			ivjJComboBoxHoliday.setPreferredSize(new java.awt.Dimension(155, 23));
			// user code begin {1}
			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List holidaySch = cache.getAllHolidaySchedules();
				for( int i = 0; i < holidaySch.size(); i++ )
					ivjJComboBoxHoliday.addItem( holidaySch.get(i) );
			}
			getJComboBoxHoliday().addItem(CtiUtilities.STRING_NONE);
			getJComboBoxHoliday().setSelectedItem(CtiUtilities.STRING_NONE);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHoliday;
}
/**
 * Return the JComboBoxSeasonSchedule property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSeasonSchedule() {
	if (ivjJComboBoxSeasonSchedule == null) {
		try {
			ivjJComboBoxSeasonSchedule = new javax.swing.JComboBox();
			ivjJComboBoxSeasonSchedule.setName("JComboBoxSeasonSchedule");
			ivjJComboBoxSeasonSchedule.setToolTipText("Holiday schedule used to exclude control");
			ivjJComboBoxSeasonSchedule.setPreferredSize(new java.awt.Dimension(155, 23));
			// user code begin {1}
			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List seasonSch = cache.getAllSeasonSchedules();
				for( int i = 0; i < seasonSch.size(); i++ )
					ivjJComboBoxSeasonSchedule.addItem( seasonSch.get(i) );
			}
			getJComboBoxSeasonSchedule().addItem(CtiUtilities.STRING_NONE);
			getJComboBoxSeasonSchedule().setSelectedItem(CtiUtilities.STRING_NONE);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSeasonSchedule;
}
/**
 * Return the JCSpinFieldMaxActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxActivateTime() {
	if (ivjJCSpinFieldMaxActivateTime == null) {
		try {
			ivjJCSpinFieldMaxActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxActivateTime.setName("JCSpinFieldMaxActivateTime");
			ivjJCSpinFieldMaxActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMaxActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxActivateTime;
}
/**
 * Return the JCSpinFieldMaxDailyOps property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxDailyOps() {
	if (ivjJCSpinFieldMaxDailyOps == null) {
		try {
			ivjJCSpinFieldMaxDailyOps = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxDailyOps.setName("JCSpinFieldMaxDailyOps");
			ivjJCSpinFieldMaxDailyOps.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMaxDailyOps.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxDailyOps;
}
/**
 * Return the JCSpinFieldMaxHoursAnnually property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursAnnually() {
	if (ivjJCSpinFieldMaxHoursAnnually == null) {
		try {
			ivjJCSpinFieldMaxHoursAnnually = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursAnnually.setName("JCSpinFieldMaxHoursAnnually");
			ivjJCSpinFieldMaxHoursAnnually.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursAnnually.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(99999), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(0)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursAnnually;
}
/**
 * Return the JCSpinFieldMaxHoursDaily property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursDaily() {
	if (ivjJCSpinFieldMaxHoursDaily == null) {
		try {
			ivjJCSpinFieldMaxHoursDaily = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursDaily.setName("JCSpinFieldMaxHoursDaily");
			ivjJCSpinFieldMaxHoursDaily.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursDaily.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursDaily;
}
/**
 * Return the JCSpinFieldMaxHoursMonthly property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursMonthly() {
	if (ivjJCSpinFieldMaxHoursMonthly == null) {
		try {
			ivjJCSpinFieldMaxHoursMonthly = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursMonthly.setName("JCSpinFieldMaxHoursMonthly");
			ivjJCSpinFieldMaxHoursMonthly.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursMonthly.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursMonthly;
}
/**
 * Return the JCSpinFieldMaxHoursSeasonal property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursSeasonal() {
	if (ivjJCSpinFieldMaxHoursSeasonal == null) {
		try {
			ivjJCSpinFieldMaxHoursSeasonal = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursSeasonal.setName("JCSpinFieldMaxHoursSeasonal");
			ivjJCSpinFieldMaxHoursSeasonal.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursSeasonal.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursSeasonal;
}
/**
 * Return the JCSpinFieldMinActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinActivateTime() {
	if (ivjJCSpinFieldMinActivateTime == null) {
		try {
			ivjJCSpinFieldMinActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinActivateTime.setName("JCSpinFieldMinActivateTime");
			ivjJCSpinFieldMinActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMinActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinActivateTime;
}
/**
 * Return the JCSpinFieldMinRestart property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinRestart() {
	if (ivjJCSpinFieldMinRestart == null) {
		try {
			ivjJCSpinFieldMinRestart = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinRestart.setName("JCSpinFieldMinRestart");
			ivjJCSpinFieldMinRestart.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMinRestart.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinRestart;
}
/**
 * Return the JLabelAnnually property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelAnnually() {
	if (ivjJLabelAnnually == null) {
		try {
			ivjJLabelAnnually = new javax.swing.JLabel();
			ivjJLabelAnnually.setName("JLabelAnnually");
			ivjJLabelAnnually.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelAnnually.setText("Annually:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelAnnually;
}
/**
 * Return the JLabelConstraintName property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelConstraintName() {
	if (ivjJLabelConstraintName == null) {
		try {
			ivjJLabelConstraintName = new javax.swing.JLabel();
			ivjJLabelConstraintName.setName("JLabelConstraintName");
			ivjJLabelConstraintName.setPreferredSize(new java.awt.Dimension(127, 18));
			ivjJLabelConstraintName.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelConstraintName.setText("Constraint Name: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelConstraintName;
}
/**
 * Return the JLabelDaily property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDaily() {
	if (ivjJLabelDaily == null) {
		try {
			ivjJLabelDaily = new javax.swing.JLabel();
			ivjJLabelDaily.setName("JLabelDaily");
			ivjJLabelDaily.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelDaily.setText("Daily:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDaily;
}
/**
 * Return the JLabelDailyOps property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDailyOps() {
	if (ivjJLabelDailyOps == null) {
		try {
			ivjJLabelDailyOps = new javax.swing.JLabel();
			ivjJLabelDailyOps.setName("JLabelDailyOps");
			ivjJLabelDailyOps.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelDailyOps.setText("Daily Ops: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDailyOps;
}
/**
 * Return the JLabelHoliday property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHoliday() {
	if (ivjJLabelHoliday == null) {
		try {
			ivjJLabelHoliday = new javax.swing.JLabel();
			ivjJLabelHoliday.setName("JLabelHoliday");
			ivjJLabelHoliday.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelHoliday.setText("Holiday Schedule: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHoliday;
}
/**
 * Return the JLabelHolidayUsage property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHolidayUsage() {
	if (ivjJLabelHolidayUsage == null) {
		try {
			ivjJLabelHolidayUsage = new javax.swing.JLabel();
			ivjJLabelHolidayUsage.setName("JLabelHolidayUsage");
			ivjJLabelHolidayUsage.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelHolidayUsage.setText("Holiday Usage: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHolidayUsage;
}
/**
 * Return the JLabelMaxActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxActivate() {
	if (ivjJLabelMaxActivate == null) {
		try {
			ivjJLabelMaxActivate = new javax.swing.JLabel();
			ivjJLabelMaxActivate.setName("JLabelMaxActivate");
			ivjJLabelMaxActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMaxActivate.setText("Activate: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxActivate;
}
/**
 * Return the JLabelMaxActSeconds property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxActSeconds() {
	if (ivjJLabelMaxActSeconds == null) {
		try {
			ivjJLabelMaxActSeconds = new javax.swing.JLabel();
			ivjJLabelMaxActSeconds.setName("JLabelMaxActSeconds");
			ivjJLabelMaxActSeconds.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMaxActSeconds.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxActSeconds;
}
/**
 * Return the JLabelMinActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinActivate() {
	if (ivjJLabelMinActivate == null) {
		try {
			ivjJLabelMinActivate = new javax.swing.JLabel();
			ivjJLabelMinActivate.setName("JLabelMinActivate");
			ivjJLabelMinActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinActivate.setText("Activate:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinActivate;
}
/**
 * Return the JLabelMinReSeconds property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinReSeconds() {
	if (ivjJLabelMinReSeconds == null) {
		try {
			ivjJLabelMinReSeconds = new javax.swing.JLabel();
			ivjJLabelMinReSeconds.setName("JLabelMinReSeconds");
			ivjJLabelMinReSeconds.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMinReSeconds.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinReSeconds;
}
/**
 * Return the JLabelMinReSeconds1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinReSeconds1() {
	if (ivjJLabelMinReSeconds1 == null) {
		try {
			ivjJLabelMinReSeconds1 = new javax.swing.JLabel();
			ivjJLabelMinReSeconds1.setName("JLabelMinReSeconds1");
			ivjJLabelMinReSeconds1.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMinReSeconds1.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinReSeconds1;
}
/**
 * Return the JLabelMonthly property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMonthly() {
	if (ivjJLabelMonthly == null) {
		try {
			ivjJLabelMonthly = new javax.swing.JLabel();
			ivjJLabelMonthly.setName("JLabelMonthly");
			ivjJLabelMonthly.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelMonthly.setText("Monthly:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMonthly;
}
/**
 * Return the JLabelRestart property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRestart() {
	if (ivjJLabelRestart == null) {
		try {
			ivjJLabelRestart = new javax.swing.JLabel();
			ivjJLabelRestart.setName("JLabelRestart");
			ivjJLabelRestart.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRestart.setText("Restart:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRestart;
}
/**
 * Return the JLabelSeasonal property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonal() {
	if (ivjJLabelSeasonal == null) {
		try {
			ivjJLabelSeasonal = new javax.swing.JLabel();
			ivjJLabelSeasonal.setName("JLabelSeasonal");
			ivjJLabelSeasonal.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelSeasonal.setText("Seasonal:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonal;
}
/**
 * Return the JLabelSeasonChooser property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonChooser() {
	if (ivjJLabelSeasonChooser == null) {
		try {
			ivjJLabelSeasonChooser = new javax.swing.JLabel();
			ivjJLabelSeasonChooser.setName("JLabelSeasonChooser");
			ivjJLabelSeasonChooser.setPreferredSize(new java.awt.Dimension(127, 18));
			ivjJLabelSeasonChooser.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelSeasonChooser.setText("Season Schedule: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonChooser;
}
/**
 * Return the JPanelMaxHours property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxHours() {
	if (ivjJPanelMaxHours == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder1.setTitle("Max Hour Allowance");
			ivjJPanelMaxHours = new javax.swing.JPanel();
			ivjJPanelMaxHours.setName("JPanelMaxHours");
			ivjJPanelMaxHours.setPreferredSize(new java.awt.Dimension(340, 75));
			ivjJPanelMaxHours.setBorder(ivjLocalBorder1);
			ivjJPanelMaxHours.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxHours.setMinimumSize(new java.awt.Dimension(340, 75));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursDaily = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursDaily.gridx = 2; constraintsJCSpinFieldMaxHoursDaily.gridy = 1;
			constraintsJCSpinFieldMaxHoursDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursDaily.ipadx = 63;
			constraintsJCSpinFieldMaxHoursDaily.ipady = 19;
			constraintsJCSpinFieldMaxHoursDaily.insets = new java.awt.Insets(6, 1, 2, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursDaily(), constraintsJCSpinFieldMaxHoursDaily);

			java.awt.GridBagConstraints constraintsJLabelDaily = new java.awt.GridBagConstraints();
			constraintsJLabelDaily.gridx = 1; constraintsJLabelDaily.gridy = 1;
			constraintsJLabelDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelDaily.ipadx = 22;
			constraintsJLabelDaily.ipady = -1;
			constraintsJLabelDaily.insets = new java.awt.Insets(5, 11, 3, 0);
			getJPanelMaxHours().add(getJLabelDaily(), constraintsJLabelDaily);

			java.awt.GridBagConstraints constraintsJLabelSeasonal = new java.awt.GridBagConstraints();
			constraintsJLabelSeasonal.gridx = 3; constraintsJLabelSeasonal.gridy = 1;
			constraintsJLabelSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSeasonal.ipadx = 6;
			constraintsJLabelSeasonal.ipady = -1;
			constraintsJLabelSeasonal.insets = new java.awt.Insets(5, 24, 3, 4);
			getJPanelMaxHours().add(getJLabelSeasonal(), constraintsJLabelSeasonal);

			java.awt.GridBagConstraints constraintsJLabelMonthly = new java.awt.GridBagConstraints();
			constraintsJLabelMonthly.gridx = 1; constraintsJLabelMonthly.gridy = 2;
			constraintsJLabelMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelMonthly.ipadx = 4;
			constraintsJLabelMonthly.ipady = -1;
			constraintsJLabelMonthly.insets = new java.awt.Insets(3, 11, 16, 0);
			getJPanelMaxHours().add(getJLabelMonthly(), constraintsJLabelMonthly);

			java.awt.GridBagConstraints constraintsJLabelAnnually = new java.awt.GridBagConstraints();
			constraintsJLabelAnnually.gridx = 3; constraintsJLabelAnnually.gridy = 2;
			constraintsJLabelAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelAnnually.ipadx = 11;
			constraintsJLabelAnnually.ipady = -1;
			constraintsJLabelAnnually.insets = new java.awt.Insets(3, 24, 16, 4);
			getJPanelMaxHours().add(getJLabelAnnually(), constraintsJLabelAnnually);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursMonthly = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursMonthly.gridx = 2; constraintsJCSpinFieldMaxHoursMonthly.gridy = 2;
			constraintsJCSpinFieldMaxHoursMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursMonthly.ipadx = 63;
			constraintsJCSpinFieldMaxHoursMonthly.ipady = 19;
			constraintsJCSpinFieldMaxHoursMonthly.insets = new java.awt.Insets(5, 1, 12, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursMonthly(), constraintsJCSpinFieldMaxHoursMonthly);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursSeasonal = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursSeasonal.gridx = 4; constraintsJCSpinFieldMaxHoursSeasonal.gridy = 1;
			constraintsJCSpinFieldMaxHoursSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursSeasonal.ipadx = 63;
			constraintsJCSpinFieldMaxHoursSeasonal.ipady = 19;
			constraintsJCSpinFieldMaxHoursSeasonal.insets = new java.awt.Insets(6, 4, 2, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursSeasonal(), constraintsJCSpinFieldMaxHoursSeasonal);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursAnnually = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursAnnually.gridx = 4; constraintsJCSpinFieldMaxHoursAnnually.gridy = 2;
			constraintsJCSpinFieldMaxHoursAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursAnnually.ipadx = 63;
			constraintsJCSpinFieldMaxHoursAnnually.ipady = 19;
			constraintsJCSpinFieldMaxHoursAnnually.insets = new java.awt.Insets(2, 4, 15, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursAnnually(), constraintsJCSpinFieldMaxHoursAnnually);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxHours;
}
/**
 * Return the JPanelMaxValues property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxValues() {
	if (ivjJPanelMaxValues == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder2.setTitle("Max");
			ivjJPanelMaxValues = new javax.swing.JPanel();
			ivjJPanelMaxValues.setName("JPanelMaxValues");
			ivjJPanelMaxValues.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMaxValues.setBorder(ivjLocalBorder2);
			ivjJPanelMaxValues.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxValues.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxActivateTime.gridx = 2; constraintsJCSpinFieldMaxActivateTime.gridy = 1;
			constraintsJCSpinFieldMaxActivateTime.ipadx = 49;
			constraintsJCSpinFieldMaxActivateTime.ipady = 19;
			constraintsJCSpinFieldMaxActivateTime.insets = new java.awt.Insets(18, 0, 3, 2);
			getJPanelMaxValues().add(getJCSpinFieldMaxActivateTime(), constraintsJCSpinFieldMaxActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxDailyOps = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxDailyOps.gridx = 2; constraintsJCSpinFieldMaxDailyOps.gridy = 2;
			constraintsJCSpinFieldMaxDailyOps.ipadx = 49;
			constraintsJCSpinFieldMaxDailyOps.ipady = 19;
			constraintsJCSpinFieldMaxDailyOps.insets = new java.awt.Insets(4, 0, 20, 2);
			getJPanelMaxValues().add(getJCSpinFieldMaxDailyOps(), constraintsJCSpinFieldMaxDailyOps);

			java.awt.GridBagConstraints constraintsJLabelMaxActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMaxActivate.gridx = 1; constraintsJLabelMaxActivate.gridy = 1;
			constraintsJLabelMaxActivate.ipadx = 12;
			constraintsJLabelMaxActivate.insets = new java.awt.Insets(19, 12, 6, 3);
			getJPanelMaxValues().add(getJLabelMaxActivate(), constraintsJLabelMaxActivate);

			java.awt.GridBagConstraints constraintsJLabelDailyOps = new java.awt.GridBagConstraints();
			constraintsJLabelDailyOps.gridx = 1; constraintsJLabelDailyOps.gridy = 2;
			constraintsJLabelDailyOps.ipadx = 3;
			constraintsJLabelDailyOps.insets = new java.awt.Insets(5, 12, 23, 0);
			getJPanelMaxValues().add(getJLabelDailyOps(), constraintsJLabelDailyOps);

			java.awt.GridBagConstraints constraintsJLabelMaxActSeconds = new java.awt.GridBagConstraints();
			constraintsJLabelMaxActSeconds.gridx = 3; constraintsJLabelMaxActSeconds.gridy = 1;
			constraintsJLabelMaxActSeconds.ipadx = 21;
			constraintsJLabelMaxActSeconds.insets = new java.awt.Insets(21, 3, 6, 0);
			getJPanelMaxValues().add(getJLabelMaxActSeconds(), constraintsJLabelMaxActSeconds);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxValues;
}
/**
 * Return the JPanelMinTimes property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMinTimes() {
	if (ivjJPanelMinTimes == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder3;
			ivjLocalBorder3 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder3.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder3.setTitle("Min");
			ivjJPanelMinTimes = new javax.swing.JPanel();
			ivjJPanelMinTimes.setName("JPanelMinTimes");
			ivjJPanelMinTimes.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMinTimes.setBorder(ivjLocalBorder3);
			ivjJPanelMinTimes.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMinTimes.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJLabelMinActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMinActivate.gridx = 1; constraintsJLabelMinActivate.gridy = 1;
			constraintsJLabelMinActivate.ipadx = 12;
			constraintsJLabelMinActivate.ipady = -2;
			constraintsJLabelMinActivate.insets = new java.awt.Insets(19, 12, 8, 1);
			getJPanelMinTimes().add(getJLabelMinActivate(), constraintsJLabelMinActivate);

			java.awt.GridBagConstraints constraintsJLabelRestart = new java.awt.GridBagConstraints();
			constraintsJLabelRestart.gridx = 1; constraintsJLabelRestart.gridy = 2;
			constraintsJLabelRestart.ipadx = 13;
			constraintsJLabelRestart.ipady = -2;
			constraintsJLabelRestart.insets = new java.awt.Insets(5, 12, 25, 1);
			getJPanelMinTimes().add(getJLabelRestart(), constraintsJLabelRestart);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinActivateTime.gridx = 2; constraintsJCSpinFieldMinActivateTime.gridy = 1;
			constraintsJCSpinFieldMinActivateTime.ipadx = 55;
			constraintsJCSpinFieldMinActivateTime.ipady = 19;
			constraintsJCSpinFieldMinActivateTime.insets = new java.awt.Insets(18, 1, 3, 3);
			getJPanelMinTimes().add(getJCSpinFieldMinActivateTime(), constraintsJCSpinFieldMinActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinRestart = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinRestart.gridx = 2; constraintsJCSpinFieldMinRestart.gridy = 2;
			constraintsJCSpinFieldMinRestart.ipadx = 55;
			constraintsJCSpinFieldMinRestart.ipady = 19;
			constraintsJCSpinFieldMinRestart.insets = new java.awt.Insets(4, 1, 20, 3);
			getJPanelMinTimes().add(getJCSpinFieldMinRestart(), constraintsJCSpinFieldMinRestart);

			java.awt.GridBagConstraints constraintsJLabelMinReSeconds = new java.awt.GridBagConstraints();
			constraintsJLabelMinReSeconds.gridx = 3; constraintsJLabelMinReSeconds.gridy = 2;
			constraintsJLabelMinReSeconds.ipadx = 7;
			constraintsJLabelMinReSeconds.insets = new java.awt.Insets(7, 4, 23, 6);
			getJPanelMinTimes().add(getJLabelMinReSeconds(), constraintsJLabelMinReSeconds);

			java.awt.GridBagConstraints constraintsJLabelMinReSeconds1 = new java.awt.GridBagConstraints();
			constraintsJLabelMinReSeconds1.gridx = 3; constraintsJLabelMinReSeconds1.gridy = 1;
			constraintsJLabelMinReSeconds1.ipadx = 7;
			constraintsJLabelMinReSeconds1.insets = new java.awt.Insets(20, 4, 7, 6);
			getJPanelMinTimes().add(getJLabelMinReSeconds1(), constraintsJLabelMinReSeconds1);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMinTimes;
}
/**
 * Return the JRadioButtonExclude property value.
 * @return javax.swing.JRadioButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JRadioButton getJRadioButtonExclude() {
	if (ivjJRadioButtonExclude == null) {
		try {
			ivjJRadioButtonExclude = new javax.swing.JRadioButton();
			ivjJRadioButtonExclude.setName("JRadioButtonExclude");
			ivjJRadioButtonExclude.setSelected(true);
			ivjJRadioButtonExclude.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJRadioButtonExclude.setText("Exclude");
			// user code begin {1}
			ivjJRadioButtonExclude.setEnabled(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJRadioButtonExclude;
}
/**
 * Return the JRadioButton1 property value.
 * @return javax.swing.JRadioButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JRadioButton getJRadioButtonForce() {
	if (ivjJRadioButtonForce == null) {
		try {
			ivjJRadioButtonForce = new javax.swing.JRadioButton();
			ivjJRadioButtonForce.setName("JRadioButtonForce");
			ivjJRadioButtonForce.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJRadioButtonForce.setText("Force");
			// user code begin {1}
			ivjJRadioButtonForce.setEnabled(false);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJRadioButtonForce;
}
/**
 * Return the JTextFieldConstraintName property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldConstraintName() {
	if (ivjJTextFieldConstraintName == null) {
		try {
			ivjJTextFieldConstraintName = new javax.swing.JTextField();
			ivjJTextFieldConstraintName.setName("JTextFieldConstraintName");
			ivjJTextFieldConstraintName.setPreferredSize(new java.awt.Dimension(149, 20));
			ivjJTextFieldConstraintName.setMinimumSize(new java.awt.Dimension(149, 20));
			// user code begin {1}
			ivjJTextFieldConstraintName.setDocument(
					new TextFieldDocument(
						TextFieldDocument.MAX_DEVICE_NAME_LENGTH,
						TextFieldDocument.INVALID_CHARS_LMCONSTRAINTS) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldConstraintName;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param o java.lang.Object
 */
public Object getValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	 
	if(con == null)
		con = new LMProgramConstraint();
	
	con.setConstraintName(getJTextFieldConstraintName().getText());
	
	con.setMaxHoursDaily( new Integer( ((Number)getJCSpinFieldMaxHoursDaily().getValue()).intValue() ) );
	con.setMaxHoursMonthly( new Integer( ((Number)getJCSpinFieldMaxHoursMonthly().getValue()).intValue() ) );
	con.setMaxHoursSeasonal( new Integer( ((Number)getJCSpinFieldMaxHoursSeasonal().getValue()).intValue() ) );
	con.setMaxHoursAnnually( new Integer( ((Number)getJCSpinFieldMaxHoursAnnually().getValue()).intValue() ) );
	con.setMinActivateTime( new Integer( ((Number)getJCSpinFieldMinActivateTime().getValue()).intValue() ) );
	con.setMinRestartTime( new Integer( ((Number)getJCSpinFieldMinRestart().getValue()).intValue() ) );
	con.setMaxActivateTime( new Integer( ((Number)getJCSpinFieldMaxActivateTime().getValue()).intValue() ) );
	con.setMaxDailyOps( new Integer( ((Number)getJCSpinFieldMaxDailyOps().getValue()).intValue() ) );
	
	String dayString = getJCheckBoxDayChooser().getSelectedDays7Chars();
	if( getJComboBoxHoliday().getSelectedItem() != CtiUtilities.STRING_NONE )
	{
		con.setHolidayScheduleID( new Integer(((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getSelectedItem()).getHolidayScheduleID() ));
		if(getJRadioButtonForce().isSelected())
			dayString = dayString + "F";
		else
			dayString = dayString + "E";
	}				
	else
	{
		con.setHolidayScheduleID( new Integer(0) );
		dayString = dayString + "N";
	}
	
	con.setAvailableWeekdays( dayString );
	
	if( getJComboBoxSeasonSchedule().getSelectedItem() instanceof LiteSeasonSchedule )
		con.setSeasonScheduleID( new Integer(((LiteSeasonSchedule)getJComboBoxSeasonSchedule().getSelectedItem()).getScheduleID() ));
	else
		con.setSeasonScheduleID( new Integer(0) ); //may be null or have "(none)" selected


	return con;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	getJCSpinFieldMaxHoursAnnually().addValueListener( this );
	getJCSpinFieldMaxHoursDaily().addValueListener( this );
	getJCSpinFieldMaxHoursMonthly().addValueListener( this );
	getJCSpinFieldMaxHoursSeasonal().addValueListener( this );
	getJCSpinFieldMinActivateTime().addValueListener( this );
	getJCSpinFieldMinRestart().addValueListener( this );
	getJCSpinFieldMaxDailyOps().addValueListener( this );
	getJCSpinFieldMaxActivateTime().addValueListener( this );
	// user code end
	getJTextFieldConstraintName().addCaretListener(ivjEventHandler);
	getJCheckBoxDayChooser().addActionListener(ivjEventHandler);
	getJComboBoxHoliday().addActionListener(ivjEventHandler);
	getJComboBoxSeasonSchedule().addActionListener(ivjEventHandler);
	getJRadioButtonExclude().addActionListener(ivjEventHandler);
	getJRadioButtonForce().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMProgramConstraintPanel");
		setPreferredSize(new java.awt.Dimension(350, 360));
		setLayout(new java.awt.GridBagLayout());
		setSize(350, 403);
		setMinimumSize(new java.awt.Dimension(350, 360));

		java.awt.GridBagConstraints constraintsJCheckBoxDayChooser = new java.awt.GridBagConstraints();
		constraintsJCheckBoxDayChooser.gridx = 1; constraintsJCheckBoxDayChooser.gridy = 4;
		constraintsJCheckBoxDayChooser.gridwidth = 3;
		constraintsJCheckBoxDayChooser.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJCheckBoxDayChooser.weightx = 1.0;
		constraintsJCheckBoxDayChooser.weighty = 1.0;
		constraintsJCheckBoxDayChooser.insets = new java.awt.Insets(3, 4, 1, 6);
		add(getJCheckBoxDayChooser(), constraintsJCheckBoxDayChooser);

		java.awt.GridBagConstraints constraintsJComboBoxHoliday = new java.awt.GridBagConstraints();
		constraintsJComboBoxHoliday.gridx = 2; constraintsJComboBoxHoliday.gridy = 5;
		constraintsJComboBoxHoliday.gridwidth = 2;
		constraintsJComboBoxHoliday.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHoliday.weightx = 1.0;
		constraintsJComboBoxHoliday.ipadx = 29;
		constraintsJComboBoxHoliday.insets = new java.awt.Insets(2, 4, 3, 54);
		add(getJComboBoxHoliday(), constraintsJComboBoxHoliday);

		java.awt.GridBagConstraints constraintsJPanelMaxHours = new java.awt.GridBagConstraints();
		constraintsJPanelMaxHours.gridx = 1; constraintsJPanelMaxHours.gridy = 7;
		constraintsJPanelMaxHours.gridwidth = 3;
		constraintsJPanelMaxHours.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelMaxHours.weightx = 1.0;
		constraintsJPanelMaxHours.weighty = 1.0;
		constraintsJPanelMaxHours.insets = new java.awt.Insets(2, 4, 23, 6);
		add(getJPanelMaxHours(), constraintsJPanelMaxHours);

		java.awt.GridBagConstraints constraintsJLabelHoliday = new java.awt.GridBagConstraints();
		constraintsJLabelHoliday.gridx = 1; constraintsJLabelHoliday.gridy = 5;
		constraintsJLabelHoliday.ipadx = 7;
		constraintsJLabelHoliday.insets = new java.awt.Insets(8, 24, 6, 3);
		add(getJLabelHoliday(), constraintsJLabelHoliday);

		java.awt.GridBagConstraints constraintsJLabelConstraintName = new java.awt.GridBagConstraints();
		constraintsJLabelConstraintName.gridx = 1; constraintsJLabelConstraintName.gridy = 1;
		constraintsJLabelConstraintName.ipadx = 7;
		constraintsJLabelConstraintName.ipady = 4;
		constraintsJLabelConstraintName.insets = new java.awt.Insets(20, 22, 6, 7);
		add(getJLabelConstraintName(), constraintsJLabelConstraintName);

		java.awt.GridBagConstraints constraintsJTextFieldConstraintName = new java.awt.GridBagConstraints();
		constraintsJTextFieldConstraintName.gridx = 2; constraintsJTextFieldConstraintName.gridy = 1;
		constraintsJTextFieldConstraintName.gridwidth = 2;
		constraintsJTextFieldConstraintName.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldConstraintName.weightx = 1.0;
		constraintsJTextFieldConstraintName.ipadx = 1;
		constraintsJTextFieldConstraintName.insets = new java.awt.Insets(18, 4, 6, 59);
		add(getJTextFieldConstraintName(), constraintsJTextFieldConstraintName);

		java.awt.GridBagConstraints constraintsJPanelMaxValues = new java.awt.GridBagConstraints();
		constraintsJPanelMaxValues.gridx = 1; constraintsJPanelMaxValues.gridy = 3;
		constraintsJPanelMaxValues.gridwidth = 2;
		constraintsJPanelMaxValues.fill = java.awt.GridBagConstraints.VERTICAL;
		constraintsJPanelMaxValues.weightx = 1.0;
		constraintsJPanelMaxValues.weighty = 1.0;
		constraintsJPanelMaxValues.ipadx = 4;
		constraintsJPanelMaxValues.ipady = -11;
		constraintsJPanelMaxValues.insets = new java.awt.Insets(7, 4, 2, 45);
		add(getJPanelMaxValues(), constraintsJPanelMaxValues);

		java.awt.GridBagConstraints constraintsJPanelMinTimes = new java.awt.GridBagConstraints();
		constraintsJPanelMinTimes.gridx = 2; constraintsJPanelMinTimes.gridy = 3;
		constraintsJPanelMinTimes.gridwidth = 2;
		constraintsJPanelMinTimes.fill = java.awt.GridBagConstraints.VERTICAL;
		constraintsJPanelMinTimes.weightx = 1.0;
		constraintsJPanelMinTimes.weighty = 1.0;
		constraintsJPanelMinTimes.ipady = -11;
		constraintsJPanelMinTimes.insets = new java.awt.Insets(7, 40, 2, 3);
		add(getJPanelMinTimes(), constraintsJPanelMinTimes);

		java.awt.GridBagConstraints constraintsJComboBoxSeasonSchedule = new java.awt.GridBagConstraints();
		constraintsJComboBoxSeasonSchedule.gridx = 2; constraintsJComboBoxSeasonSchedule.gridy = 2;
		constraintsJComboBoxSeasonSchedule.gridwidth = 2;
		constraintsJComboBoxSeasonSchedule.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxSeasonSchedule.weightx = 1.0;
		constraintsJComboBoxSeasonSchedule.ipadx = 24;
		constraintsJComboBoxSeasonSchedule.insets = new java.awt.Insets(6, 4, 6, 59);
		add(getJComboBoxSeasonSchedule(), constraintsJComboBoxSeasonSchedule);

		java.awt.GridBagConstraints constraintsJLabelSeasonChooser = new java.awt.GridBagConstraints();
		constraintsJLabelSeasonChooser.gridx = 1; constraintsJLabelSeasonChooser.gridy = 2;
		constraintsJLabelSeasonChooser.ipadx = 3;
		constraintsJLabelSeasonChooser.ipady = 4;
		constraintsJLabelSeasonChooser.insets = new java.awt.Insets(8, 22, 9, 7);
		add(getJLabelSeasonChooser(), constraintsJLabelSeasonChooser);

		java.awt.GridBagConstraints constraintsJLabelHolidayUsage = new java.awt.GridBagConstraints();
		constraintsJLabelHolidayUsage.gridx = 1; constraintsJLabelHolidayUsage.gridy = 6;
		constraintsJLabelHolidayUsage.ipadx = 18;
		constraintsJLabelHolidayUsage.insets = new java.awt.Insets(6, 24, 6, 9);
		add(getJLabelHolidayUsage(), constraintsJLabelHolidayUsage);

		java.awt.GridBagConstraints constraintsJRadioButtonExclude = new java.awt.GridBagConstraints();
		constraintsJRadioButtonExclude.gridx = 2; constraintsJRadioButtonExclude.gridy = 6;
		constraintsJRadioButtonExclude.ipadx = 6;
		constraintsJRadioButtonExclude.ipady = -5;
		constraintsJRadioButtonExclude.insets = new java.awt.Insets(3, 4, 1, 2);
		add(getJRadioButtonExclude(), constraintsJRadioButtonExclude);

		java.awt.GridBagConstraints constraintsJRadioButtonForce = new java.awt.GridBagConstraints();
		constraintsJRadioButtonForce.gridx = 3; constraintsJRadioButtonForce.gridy = 6;
		constraintsJRadioButtonForce.ipadx = 5;
		constraintsJRadioButtonForce.ipady = -5;
		constraintsJRadioButtonForce.insets = new java.awt.Insets(3, 3, 1, 57);
		add(getJRadioButtonForce(), constraintsJRadioButtonForce);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
		//	default day of week and season check boxes to all!
	  	getJCheckBoxDayChooser().setSelectedCheckBoxes( "YYYYYYYN" );
	  	getJCheckBoxDayChooser().setHolidayVisible(false);
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxDayChooser_Action(java.awt.event.ActionEvent e) 
{
	fireInputUpdate();
	
	return;
}
/**
 * Comment
 */
public void jComboBoxHoliday_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	enableHolidayUsage(getJComboBoxHoliday().getSelectedItem() != CtiUtilities.STRING_NONE );
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxSeasonSchedule_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jRadioButtonExclude_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	getJRadioButtonForce().setSelected(! getJRadioButtonExclude().isSelected());
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jRadioButtonForce_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	getJRadioButtonExclude().setSelected(! getJRadioButtonForce().isSelected());
	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		LMProgramConstraintPanel aLMProgramConstraintPanel;
		aLMProgramConstraintPanel = new LMProgramConstraintPanel();
		frame.setContentPane(aLMProgramConstraintPanel);
		frame.setSize(aLMProgramConstraintPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * This method was created in VisualAge.
 * @param o java.lang.Object
 */
public void setValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	if(con == null)
		con = new LMProgramConstraint();
	else
	{
	
		getJTextFieldConstraintName().setText(con.getConstraintName());
	
		getJCheckBoxDayChooser().setSelectedCheckBoxes( con.getAvailableWeekdays() );
		getJCheckBoxDayChooser().setHolidaySelected(false);
		
		getJCSpinFieldMaxHoursDaily().setValue( con.getMaxHoursDaily() );
		getJCSpinFieldMaxHoursMonthly().setValue( con.getMaxHoursMonthly() );
		getJCSpinFieldMaxHoursSeasonal().setValue( con.getMaxHoursSeasonal() );
		getJCSpinFieldMaxHoursAnnually().setValue( con.getMaxHoursAnnually() );
		getJCSpinFieldMinActivateTime().setValue( con.getMinActivateTime() );
		getJCSpinFieldMinRestart().setValue( con.getMinRestartTime() );
		getJCSpinFieldMaxActivateTime().setValue( con.getMaxActivateTime() );
		getJCSpinFieldMaxDailyOps().setValue( con.getMaxDailyOps() );
	
		getJComboBoxHoliday().removeItem(CtiUtilities.STRING_NONE);
		for( int i = 0; i < getJComboBoxHoliday().getItemCount(); i++ )
			if( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getItemAt(i)).getHolidayScheduleID()
				== con.getHolidayScheduleID().intValue() )
			{
				getJComboBoxHoliday().setSelectedIndex(i);
				break;
			}
		getJComboBoxHoliday().addItem(CtiUtilities.STRING_NONE);
		if(con.getHolidayScheduleID().compareTo(new Integer(0)) == 0)
		{
			getJComboBoxHoliday().setSelectedItem(CtiUtilities.STRING_NONE);
		}
		String holidayInfo = con.getAvailableWeekdays();
		enableHolidayUsage(true);
		if(holidayInfo.charAt(7) == 'E')
		{
			getJRadioButtonExclude().setSelected(true);
		}
		else if(holidayInfo.charAt(7) == 'F')
		{
			getJRadioButtonForce().doClick();
		}
		else
		{
			enableHolidayUsage(false);
			getJComboBoxHoliday().setSelectedItem(CtiUtilities.STRING_NONE);
		}
		
		getJComboBoxSeasonSchedule().removeItem(CtiUtilities.STRING_NONE);
		for( int i = 0; i < getJComboBoxSeasonSchedule().getItemCount(); i++ )
			if( ((com.cannontech.database.data.lite.LiteSeasonSchedule)getJComboBoxSeasonSchedule().getItemAt(i)).getScheduleID()
				== con.getSeasonScheduleID().intValue() )
			{
				getJComboBoxSeasonSchedule().setSelectedIndex(i);
				break;
			}
		
		getJComboBoxSeasonSchedule().addItem(CtiUtilities.STRING_NONE);
		if(con.getSeasonScheduleID().compareTo(new Integer(0)) == 0)
		{
			getJComboBoxSeasonSchedule().setSelectedItem(CtiUtilities.STRING_NONE);
		}
	}
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
}

package com.cannontech.dbeditor.wizard.device.lmconstraint;

import com.cannontech.common.gui.util.TextFieldDocument;
import com.cannontech.database.db.device.lm.LMProgramConstraint;
import com.cannontech.common.util.CtiUtilities;
/**
 * Insert the type's description here. 
 * Creation date: (3/2/2004 10:09:59 AM)
 * @author: 
 */
public class LMProgramConstraintPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener {
	private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser ivjJCheckBoxDayChooser = null;
	private javax.swing.JComboBox ivjJComboBoxHoliday = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxDailyOps = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursDaily = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursMonthly = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursSeasonal = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinActivateTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMinRestart = null;
	private javax.swing.JLabel ivjJLabelAnnually = null;
	private javax.swing.JLabel ivjJLabelDaily = null;
	private javax.swing.JLabel ivjJLabelDailyOps = null;
	private javax.swing.JLabel ivjJLabelHoliday = null;
	private javax.swing.JLabel ivjJLabelMaxActivate = null;
	private javax.swing.JLabel ivjJLabelMinActivate = null;
	private javax.swing.JLabel ivjJLabelMonthly = null;
	private javax.swing.JLabel ivjJLabelRestart = null;
	private javax.swing.JLabel ivjJLabelSeasonal = null;
	private javax.swing.JPanel ivjJPanelMaxHours = null;
	private javax.swing.JPanel ivjJPanelMaxValues = null;
	private javax.swing.JPanel ivjJPanelMinTimes = null;
	private javax.swing.JLabel ivjJLabelConstraintName = null;
	private javax.swing.JTextField ivjJTextFieldConstraintName = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JLabel ivjJLabelSeasonChooser = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldMaxHoursAnnually = null;
	private javax.swing.JLabel ivjJLabelMaxActSeconds = null;
	private javax.swing.JLabel ivjJLabelMinReSeconds = null;
	private javax.swing.JLabel ivjJLabelMinReSeconds1 = null;
	private javax.swing.JComboBox ivjJComboBoxSeasonSchedule = null;

class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJCheckBoxDayChooser()) 
				connEtoC6(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJComboBoxHoliday()) 
				connEtoC7(e);
			if (e.getSource() == LMProgramConstraintPanel.this.getJComboBoxSeasonSchedule()) 
				connEtoC2(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == LMProgramConstraintPanel.this.getJTextFieldConstraintName()) 
				connEtoC1(e);
		};
	};
/**
 * LMProgramConstraintPanel constructor comment.
 */
public LMProgramConstraintPanel() {
	super();
	initialize();
}
/**
 * connEtoC1:  (JTextFieldConstraintName.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMProgramConstraintPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JComboBoxSeasonSchedule.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jComboBoxSeasonSchedule_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxSeasonSchedule_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (JCheckBoxDayChooser.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.jCheckBoxDayChooser_Action(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxDayChooser_Action(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JComboBoxHoliday.action.actionPerformed(java.awt.event.ActionEvent) --> LMProgramConstraintPanel.addDataInputPanelListener(Lcom.cannontech.common.gui.util.DataInputPanelListener;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GDAF658B0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DBD8DDCD4D5766E2E961515153616D4E4D4E8D6D6D434D9D1CB26C5292D6E1A3A9B95A5EC6CAE7B5F7EAD5B5276E4C0B13FC8D1C7C19D959515903F91D1799245D0797AAB15A6A373E0A60719E966A183E17D4F3D771D7B5E4C3C614316FE766B785EBD771CF34FB9775C6F7B86A1FDCDD04A2C24F4C11815A2487F6D1DA58851578BC26B3882BD62626D31BAC1755FDA004F04CD9712C942912BCBCC0C
	552589552BD3A1198E69C131313A65703EC4B8355A51CE105A659C053CAD465A173BAE675CB2ACE78ECD6F4D1F8F4F05GFA40958284B8C879A77375B23E81528B65F782331284216EBBC233F52BDE050F146932A12F90205EC9E83E4D4F14738381978A108E78ECA723AD0267DC2A5D0002FC196E4CCDA14287AF67A6ADA0E52964A384493C917253A0BCC19D21939AF2CE4033306AC27341C6FBCBEE2351E6335BA431511CEBBAAF1AAC125D195BE669B0BACD39A6712225D14C3536B81C76E6273125202072F8
	95FBAD355BDC1253E831C9D5C61BE89504DDAEDA9FDBD3E9990210886506D35C782D44F7EEF89F849062C2DBA6ADA814F59DFCA1C4083AE72DDFDB12A559E712E2CB7A4AF97326CAC47EAD34EE881F9952C1G4C4E72D5553D353311DB551529322D537351564CD634F5F08651258E52D6007E9C7FF5A64187C2BA94A03295FDF0E0937A207E7BA705047355C90B7C78A03A1559BE7F22628347B4E34A8A9A1F6FAFA7B1F694722CG7DG0281A2G2281B2E83B38EF5996F8961F17CA6DADADF6DB3143D1E2B5B9
	0F5BCD22955E8B8AA0C74655080DF627C990D86C1F5A1A23218FC262C54F38A740ECBBADE02C0E2AF9C81024A3C9A99A3605CE49CBCAEBE3B2325A945B7A37913F8D49A1FEAB03F742C76CE07887A8FE1C8A4FE2E1820DB512CEF5036DEE74F37DC25425B2F93810363DB6E90E06AEC3DFB81A945E4EF4185A2E6842FC7C628A6263640ED81D81A09F208A4081B02883FD9C3FECE7F7BE2E0098F45A0C565A56738E23D3AAE935D8CD22D37675ED79DD79DA8B985F7D3D66E3FE8959292E23990F55E87AE5C6485E
	24D19DF2FF52217805159D65376C688E5F58D8486BB0153609048ED607BA0EDFCC71295FABF8D637375336C552FA486B84E07493A8FD14CCBF174B19C17109AABC13E324F81256F7029CGD63F0D99248F0E02F4A2C07A25D8DD8EC0A5009920739256717E655BFA580E2AD4754BF8BFD83E8C1E229B7A138A68D50C36C6711451E9B11E370AAEC12679F8B9716BF98F3EA4BD093DC6A86308E8931DC649E23701F4E30B884164E2B473741F919A27C8F36BACADA294506290D06E927D92F8DA0DAE697F9CA623A4
	AA94ACBFC3CFFCF251F88AA402GF80F3CC47C55C27B74C0F88F3B043E9A14C9F0E9BF409875837A65D67DE2F8FE8141ADDA8B8A4AAC0DC48D23339DE3F4D84EAEF89682FD840074A33421FE313AB1GE53F00BE91206A17313A49GE7FE952B0B81107A4358BCG5B70DF6BB1D64B96BCA864CC29560CD582618364B6BC40BBD69F21BA88D7C19B86A882E8G68879084908E9085A0DC8D79GC5G8DG7D2E46F940142D9365B208FE34BD7C204438B0C0F9A736F5557E083D6AB45A0EE9E23B96DF59AFFC7105
	BFF4DD16B7905F933F1F11EDE0364D4FC15B164B4F9495CF066AFDEEB77297F925BF23712124D77861DB2001537542AE34E59E40D2D5D91F897FD9C55AFC905463980099D7E34CCE529B845A16CB0CAE91DB6FC9A7B4BC5124C4B023FDED8531CB3CA85A24B251A15ACC7062125B4E149544A7F23BEE328B586626D3BC6967CB216139B87E2D951FB13CC8E695CAAF017931B45FA8C9CE4B79D6C92C95A549E2EBD6787FCEF5F1F98CA1AE59D6E18D31758330F1FEC02CAEB3GED6DD8C96AG5BE7255DFE2155D1
	C7FA9E391D7F134EE772007EE8G467B42CCB28F3672341E26157C200C7AAE6A027075266E346A72B36129AE4B68EDFCE817B1A5B3CDE0FD49BCB98E67703C37E95EA030A58CA08AA0759A343FB933DE706C036648CF147353F56BC74BD05B096DAFC5D55E65820B0D168C7F31ADE5E847F6C706F6EC774B68BAF683B234E217655D18C1EC323759D4EDE1F08699D7E0EAEE93E90364AC821B677F350E58E131D9245396D333A855DABAC41871DDC3E23ABF9D3B72603D6C9A9CC75A5663B81255B1C288BF1723B9
	AF9DFA6F97C9015730789DFD0DB20EB01D0650B904E895DB40D12576D61B4470436838A863DDBA0A7BA83D1370E69F2B839F16DBC42BC9D9D11C0091BC27913A81A9177E4BC6666CEF0D970D6EDCD79B78AD17D6CAEEA949BDCCDEB79BBE7F7C20415F6AA427496294ABEC0ED69435795466BC26477D3B6FE6FA141A45468BA5F6F719313D54EC373BC4E70E11FAB617BD2AC4E7135D59A21A289E3946B6C9D62218E677C40BEFFD4BB8473833AB7D8B5D8F4A6E16E3FD0970E9CB182C2F3D653C9DE49D35DBADA6
	E37BFFDDD92349D4E6140C54EB94D3E9F1C9E41A15DD6935F0EC24B33E5C66D6CBEE2BE43166EA3391B376B09BE68AEDBF0F8D9A553EC776E35CCAB97ECAEB9D969B8D4063C6B791FDD11E85663458DBDDE2AE7D3754EAE93C602B49F112F7190A6CE5FA0CED765543E27B997548E7FA7C49615670C71951E2EDBF69F075318E7B188E56C53EBAD8ECB5E4BE6E147AD8056DF2FFD0724D779AFEB8EAEFF53A28B37ADA0D6DF2FC262C3864CF0F63506E4CFD2F498E5E67FC3C7C87FF3A540AC6974C862DFD2D4CCE
	54653A85FEF5A93659DA0D563EF74CAE54A5E06E231E7D9873C6ED23D9B435DA45BE98BFB44B1147902500EE86131DB87F5FE9A06375C498472381922F41B97172D5A49F674472443F54EE3532298664B5DCCB6691FF4DC9D74D8D522FE5FB408BF97E4A4F3B4EAF6FA65F59CD7E1D5D643F5CCD7E075D642F4B6DBA7FC4B7799D5D645F57CD7E6B5D647F47EFBE2B476455E40E6E923FEB95ED0DA2D954FCA136633E486A45DEF9270C56D6E53FE549EAB2D7372A56C38CBFFB0D769CEF7E9A32863A4065272D19
	AD10FD93A6134DC9C79B09CC075352824BC73240134F82966ED31F8504009D645CA0861E0957623E7523050446DF5388390E48D9368A4F8B52A11D83D0F99D1395F09D738B23FB0353FDG697983E3F5F983991DE3201A6E0E55C897867809G718335649957A0DD5E7530CE84B0DF4F68C22EE7F40957933AE17C9CE09B47BDCAF1FF03854B9D49387FF8BCCDFD1EE1F215E94E4589945D4064575D603DAFEBDECB64CA006FFF83366BEB5728573A45AE173D51C23745643A5DE7D04F53996E2061D3F8C2B76812
	AAE081644678A8B390DD493E190C166B78012D87845FFD404374E4813792CA5BE8DFD4E7AF351B442390E225FC99F34AA21239A1734325F275D94818C57B1266797143D0597EB0159FF6CDB326B01DEEABA07B4FDAE79EDED35702824F392BFC26615E17AA6B14F0831EDDE4D510F610F7A354B7C083G5BC7BDC477D4C839EE400DA6F9342D6E30295BEA4C0DECBFA1EDD02C0E0DA5772DA2B1514BC50F6C73084D0BD99DF98DD5684761CB0A64F2A39F9AAE947E38D273BCA5E0D1D6D256A0663F4AC10A9F4F3C
	DF1562GE076A52DC67B06824DC4G5606579CD33761541B18FDF570B45F04B6DAD613B9C56FC7C50C2D750776417332D7D1826EF50F65B674835D42EE42BA7A24C0DDC771328D7A1BD17F4F57DC2E7E2C5CEB57E039B9A053F4B316FB29D92B5CC0DE6EBF377CB43FFDE4A827FE7BEF4C9E78B9568EF59F959E156F370F9AFD333CA7FC33F79FD5391E342BA840FFF0B376D14F99BED375D1B550AB98ED4DB07A70BD193544A7B04E48696F5612F269B8A3603C661AAC624F54DBE2F5D9G05GF5G52ADD8C642
	5AEE4F238E3B3BB80F3A348F4FF6865FA20F8337A8FBFAE360FD62AD1EFBFC6C6CA51276995137303317259C7FA6456B87ABF896AFDBA81E24ABA1AFE1B06E2F9DDE65FD3694BC44333CF02FB4632B75614B75CAC7FB71317859101D097D272ABBAAA8D076EED8BFE931254AE5A58E41B311B7B7905EDD37466A2AG4CG7D81C2GA2GE2EE45BAB932CEEB5C702C93FF030632CF4C6CCCDDFDF97ED96643375AAB1D7AEBAD7F846DBAA8F4BF3E589A4D904A4CF13EDD981E1F1FBE06E30D6157B856D49610B828
	073483A0605798871117E967B49FBE6FB888523433591A219D87583348B66C590FF19046F53DF54B65699A6C4367DDA771DE3AB29DC21BD1075421980BEBB691DC91242B06E25C852FA37B51585FD459E1C6A9E0DFD33D1E4CE16DCE8B549A62CED1DC235DC9B7E3996E26AC7F7B44C3333477096F4C525EA78E4E6A7A8CE4D4163FFDE4F6DEB1184ED59A403ECEG06331FA438C1108E66384AEA029B8769A80EEB29A138645BE2F51937E13D3DDE118D4FBCC8D781D88182G0281A2GE2G12EF0F5599G4AEE
	C71EF7A94FFCF94EEC82FCGC0486DECCEBE8E1EF13733F9F25AB064492B88D255A11165BD0E78835443A073907D346802E5DDFBAA976D45F49E7749579E3AAE6D21BC82A45696894A391F3FB343F982BB9F6C29DC6FB38FB2C62E224F714B9651F8F239C4976DC0498CD74E1BA9AD95B44E9048763B00FB9C1D2B664AB407A5FB69F6815B254D066DB2EF182FCF4BGD76F05174F70B678EFAB719B345B4A079B085FDC76D6E723685D9EBE5E2067F94A08D0A109AD448CF94D3A1170CBC6E73368531E96EC5473
	BCFF7C4BB67AEBF34CC707D62BFD34077B684CB1741195FC514F4B9F03A19DB2CCEB1E90CE7B7BB14358FCE096470F2778F1AABC1BA7549460DD2F4910179F0873C65D9A35DEFB39DE7B77933D8201EEF420EF5DC5E860183CD73728656D60721EEAA6722682DF1C862FF007AF0E79B5EB9351594D5359B45D4E4BFBE09F29B707D3EC921DCE51440E30044ABB084D91341FCB07F7439DE86FD5A7C95FECB5365BDB2193CF24F47FBE096B12C1108E81188890FD871BE333F16D11B6525E1A1C46962856DA0758A8
	CC3D1370B6D6A3EF99246B815CGC381426E44B27B5790DEE034343436D08D19FEB535C4BF43DD50675D0534DF6513F62FB57833FCA9BF0D66FB1E0A303C6B73099E47683294B7BC51CFC7FFA4FEBAD6E9BCAFDAE5A66E43618B52F91E67899B4B9F50CCEC74F78A47E84217ACD217ADEF94313CE235DE96F641864B1EEEDE2E3647F35DA15334D7AE617AB1827489DBD73A8E2A571575F731FA6B0467203BF07DF44221DEBF0548B411BC7F78CA2D7C283BF06DEA53EB157181BCD30310E633C50B46G793B0230
	1C3FD5E915D39904636BG9B0E4D8D9CB7ED850E43924715DAF19C0E60B857B1641D4AF13AF2020B0334F0B7621E1D0B7232B8AE77845D8B0274403BF18C9BDBA07076BBC175DEDF50553D021F8A2C0C6F7A348CE6F38D1D0386013DE15C8FCF6DC79FC6F05C7D29682F299CB7114E9D3307476A0A06A3EE2F1960AAA1ED6638778EA2EFA7418DA7F726D3F3855E76CCA78D703409ED863E24AE0376E1A3974932F76E4E4BB16C5C1337192D27035A546B697CCF8F7ADDCF275DA35F8B151F010E8B3358B8303E8A
	4701B310B7789E6C5F36B7F82C5F08A28585C71C96D3093139127616EC4EFC21AAD5660F3C87579E37D1194941B0A78458950C77855C9BF1EFEE54FD43054AFEB51A7714236A76A5D586B3BD9D412AFB2C530CA92C4CEB2A314CD1109F9DCCF0CFD62B5B91716524A436C6E179319E79E4ECA6FBE7CAFEC60DBA1F687B0C877FF10FFC62234DB2BF336D158DE8DB62AB23856B63C5FE6FE0675C4BEC2A121FF907AE4C0A383BBA0545C2F61E928BF3AAFA928B2C3E7E31D9AFE82E33E8AF4B7C76G0DBDB276845C
	0BF555320954D5B8242782445F0B757F0FA6BF72E82F4B648DF0707552FDD04F9457FFA52EC50BB86EBEBD166B3E8F4BFD6F94A9F7B4244781C4F1DA2385E993B86DEF2B693E697D50B782B45C0F349B2B31ACB76058987A906DAFC7C3FA8CC0E688417DFDC5D997EDBFC576B7C28C70A582AC157352C258D8CC6A1215E125FD2D89700E90ACB710763501108E894131FBE5B919DB1C37BB6964114DAD36176318B0996862G32C7446A8AC730B385266F1439DD692B13EDC63D6B0057BC0269CB6A22F304B257E3
	FA9CBE21BD5FB8CB7B78G209FBC026F376EA734125DEE2D33B84888AF30383C19CC63E53E37E91F988EBC11A3D067E7D33B7371BC150F93C6F87AF87E48D85DFE8F1DE7B6EB6BB1E72752BECE187D4F751AE95F2B8739D9A3D1470F8FF62723BA962AC6FA6AE80274F6D9C75666A7FC2D6EFF53EE4FCEC23FFB4BF60CE4ED3DF32477FE663FF652F885FC64C85CDFB81E3B951E270C5F7A1E04G324AE9F708CE291DE16944CA9EA3B7D7DD5E1D773D17496768B59FDB13AC206DB9EE2477DAE59945A70C74DE2B
	5C4547286487A0569F403D19AD3BC9DB0A04F48C00B0AAD627874887289B456FD267128E354BBD42BA3B23929617D6555689336F066A4B7B966079B9B896047EE62490F61560778C4ABCCA5EFF101F638EDC18C51E4C3EE776907B42A0EFB2C082C05A03904FG058F22FDFF4A4DE17611F0A816A4E323191E4421F164F0CCC113058A33ED74C1342D8AE419G5C8FAAEB2E01709E742056BA73E3BADE04BE486A68B30EDF18CD3F9DD061D95D39A8BDC94FFF8856C18F61DC72DA075A37D98F33327265E765433E
	6BBF46F74DCA64EBG9AC9268B101F01FE799E50A35FE82009G182A220D03F7E134163DDF1DA67A270FE6F64D63F8B3456FD261193DF1F4DCA369BA488B9B0D76B6D9307C4CC7E2F5F9GE50FA86555433B75912D72775790F97D9EE165AC6078E3949F2C4233724753B6C45263A0EF5723D87ED69E4BC1008BFDD40EB779B963D1DF3F317E76946962647EF6420AB5025F794876DD7BF28CBB72B68BEB8436D715AA60FF7107FCF1A83F1D9C4F496D662D7958EEB29F38C7A87B0310345ECF3B091775ADFACC69
	CF8BD74D1B47E4DE5A2F68DC2D6F094E0CAF28D061CBB85C855F4EDDB0774A5F33D97679176578BD0D9B74997D984E211E791474BDBDBAC32E33C8D631044E94585C66EE3ACEA3F2E29E43F9503C39249CC3A874F1GD5GBD73F57CA1E65F9B87943FA79ED4EC5DD65093DB995F63A58ADFE0EAD73E5D3D9BFC3BD3BB9E182C29250ABE7FAED364CEBF7853642EA6C717F29F7A8AFDE7FD6597BBB788FE46D568A90FC1D9A74FFFABB6CAF546E64E731F1DA43E78BE9E9BEE653C14DDE4CDC06ECBDB0CD6CB873D
	96D18B0436E6566616104FA6657EA7D375FEEFD55F2F171F6D53B2187DBBF77B5F17AD582D3DAFDB34DB7B8C23FCF757F75DCF6C76FF577D7FF62B6F3A33FA1FFA04540D995AC8FF009000B1G93C3F15CFCE777BA010E1B9AE366E1D333C877340C64E007510F5D635F56D777F47FAD5A6F7710BBB1676D12E4EFA17291BFE38F29AF496E20C8791B16BD44C7CECB33D9E224B2FE669E926BD631092259FE42CB87F1FFA2AE947798EE4821ED6271D8DD7A63087BA76DCF72A1DD49F1970F62DE0403631C965C77
	89FF9C478EDD36811E13A11DG1076C42CAE8760A80089E0A0C06893C81BCEE9E7C0BA91A073C9182BG1C81688488849873A45236EF6A87CF426F9DDFA6D9E61A1CC74AA565919D10A6C7036F725BCBA055457BFBAB828B84B6FF41339275DA86E93A7B0E2B27406A60EE3A2E1E81FE0AFB926B451CCB6BB48C5E439077EAAE56DFA647852D44F830F25C142F882E9F2487F15CB17A0DD2B024C3B96E61FC14974EF1AF68D1DE5AD308BB5ECAF0D9104E67380A9202BB83E987470DABC5F903B9EE62D2020B06F4
	62D398878D27C9DBCD7B8D4883B8835089B074B718EF2379E1101E8A10G20FF9AE81F467C7FB9256E6B88DFCF7DFDC6266D144B764ECF63BA4CBB2DAEE3DEAF638BE3A4C5A3DF476B7D1285FDDD7FB47A6B1B8E5A66A15D0F6356B7513A03F498478DEFC6DF4F60381003686B1CB1E8C7F18DD9D394C13A812093A098E09CC08C272922B4294F446A32810E82188182GC21EC11A89558D9A3690B96499A3BF9B46A8BE8D9E633FDE0AD4F91D2AF7D6561FB54B42BA40EF43543E6D2ABD2A5B2D7A7C13792C041D
	F1031D514F209F591ED68224D31FC55C46B2024B04F48E47DDD706F5107FAC2ED177D41009CDG2403814681C481FCGB07F39D81D81E09740D10086GB740C000A000D000880029GF14F6138756CBE326F68EFEFC05E20D58EE4388F4F15F737169542356ED234F44B67FD3702715DC779B243FB56967342719B749F699C37AC5CFBEFA000622B423D7786BE1B4B772FA1AFBC9C7D94F5447FF8BD73C87763F57C91FA2F9546593AF607FC267B3FC7685D0E26A6174867859F9DC963388AD7155DE5A133C03687
	95CF5BDF5673305EFB9E77576E4D715D939C1303FB02E71EE7FB0292BC831EE777A0985F42A33E67149B0EA0DF50736C1CB28C1E11B29F5B733A7EE8F7FB098B84E55FAB9AF8931ED77692673F20781B59B40C76D1FA40E73D003A6DBBC04F837DFC7D42E8DEDAC15AAB5BBD26E8F92E1F7B65C24173AC4FE845F540170B15B3CA7983968173DA5394BE7C0883738E562F5456078BE1F49967B2346938A20C6E5BCCBFF43CE0F616D7192DBEA328FA0155C37F97702C6F49F35EE7FDA4FFA84FBF64564A9F4573A3
	37E86507737C29F62D7C49BC7F1E4DDA7A45707C83E7357293F9FE5DC62D7C345FE29C04B948FD7EA6F0B20B155768BCA68B7273B84D0F3904C60246A76FAFFCC13A9E962B51395D452AFA8FB9D135CFCF6233814A40BB4A2C7C71345F36825E4D4B0F7B4AD347242F69D88A7923B90DB15FD34776CAC54731795D69286BC247A8D94739DC4777697CAA8E70893CFCD32BEF9F71FDAB36752C8856C7944233AA025D0DE2FC8DA53EFDC4DB897219A3D89F518F1E03E5BEE6531B255D59B4C755C70C825E7088250F
	189C414E775E7F6413CF643D7B255A678D1F5039DF9451BF82F5CEAF75ED2B6AAF99312D46DA177950611706C873A61D274B7D05A2067799FFCCD77A8CEF5E34E3CB3CF8EB45C63B4D64125B76BD273DE31F78CF7FA2360DCD6B3472F3F87E79FA6F36C9720BF87E1FCDDA79F5BC5FE1514AB73F0867CF7751FE39935281AF22EFDBBBFC63E8E08746C3680BAC0EA2619975A23BDF47788A1AFC63283A897992DEE4F114B6964600310C0F4551D34D5D1D2F4CD1350DC2602D9A2B4411E9AC9BEBC89CB11BA65171
	5381784E317CDE3BC3D5474AC72F3C0EAF6CD0468C79ABD01E573F5CBB56BC3F1AC53A0E2F167A50F94B2ABD31D82DC70D0861A2678F5A32C4B3FF3B9CCFD755F857A771E348D82C6F6FEB357247707C50DA6FF8A37993F97E46D5DA7951BCBFCBD3FE824FFF2CC9ABFF7ECBD88FDFD67BBFFBF352B93481E8F3B87D30151E7D6EA334EF2E07FC9327B9D066596F869E07245C6F8EAF6B2E0FD21F5DF9773B03DFE26B9652CF31F95B318A7F73436A0A6E6707DFD5E86F67B4D4786E6708955A7BB997AA547BB98C
	6728A0F6B443BC3E1E5335F25C179C57C1E5925CE90BC9B2F3FCBF2A97419F95C901083F0A6A55C6F175B26EBA956ECB99B7280234FDB059EC67F71507D4503A33D82DACFD9B253158E04A4B7DF1A7555162B02A743E0763085E6C7EE87812851457EA3109256CD71884DCFBBDC3772802202E42DE42B555AD742ECDA42423DE423567GFADCA01F51295E174F6D7BFD553CBEAD03457DF3A784817B11DF65F437B73FF7B71EC3C46760B9C49C78AAEB9C5E1348799C4F924E0C433304B2FAE6B1985223GA24661
	37E8470F60FAEA86605247230CA1C7704ECD65F8FEAF03527607F4A0C068785E1EC73CFDD260B627D4ABB6D7ED6A094D2C3D7F30E72320BAE339E0ED4E7D36116CAC67B6111E1BFCE8403BF13C677F2BEC74C7A4376F2F6770AECB724B083B68C6DCA1476936A2CE6238C57C9E4CA80E1B36994B0866B869AC62B2DFC15CF59B91D7778A5E872BBB2D7862CC6EDAEFDF14C3A71A3D2E98BAA46B3A9C43F678FF47E66E4736FA452737FF2948F9792B2E4ED4F66C85A979F8467361578A5F417C5E157F79D9257C2A
	EF94B9A52DDD153F171CB16D40B83E279563F8A078A4027B6A7DD674D562AB9803379653F358C818878118A2B10E6FAA41B86E84DCE8A44A18D902F19C9709B21616925A2CD7E1CE8DD077EAEF63F852B94566CF9A941B471F6A094DF23C1CC65B2C2F222E5F2CC3DCB0475DD60F31B60363560A08CBFF8DF177DB90D7799A46553A730AEE359DBD2F0F508E2C0F7EA0EB8CAFA33183757B60B57425C3A434B993E2F5E5GE7A6E0FD34B7E1FDC8009BB581E5BC5F047591BD81E57C0D52E6CE849A004A093D2D0F
	430DCAFD18CD0A4D77D5773CBE1E29C17F19A6222E0F56A2AE10635E2FC59FCC6638332B90B7FF92623E663CE59C7767A644F5CE42BA3ACED474EDDF5973B6EBB5ABFCAB4BFA57E6EF34A83C134B4900AA1163E842A3601CAE0E0E4D2120E778A41C2F0DCCCDC1DAAE6B51EF85016F5B66DC5E1EE3C237FC5AFB0E5BBFA7FC7113FA3667187CBA6EB9065131D07F3A771E6373941F753A771E6331F20C65BC489B7CBA4ECBEA0FDC5EBDAA63E5725D5EEBBEE6575E23741E150F3DC5941F7CBBEFFB4773B9C19A64
	C93FC3FB833269B79C3F5376F71C861E717D631CDAEFE1B223CB171F59137D71FD6FD673954AF4D572536417AF5563F7F75DB25DC079996417AF5D630ED228CCB7CEFE4E704B7766E69A079A79B46E267863EBBFCB78749A7984F27C728D5AC8780A7C705579659B51FAF96D7349EE79345B2761A461B37B51539BBA27E07B7C140E650326F8476B920A8F1C629D2F0145982FA110B77F77982F7716DCDEBBFB6CB27962FA4D476C3A064EC79C3F773677E60A6F7C3D373D9925E8EFG6445F1FB5FBCCD4A2F7A03
	363FCD9AF84657380E70397D708D744BF7E73D5A5EA019AED4FE0E734B37D1D4734D10696265E772D4FFFC23ACEABE3DCC17A3BF0B7C727D26637262FEDC37FC5AF1BF6BFB42D727210F961827E25CC75339D467D46FB8788B4587CC750E030BA24641E048CB180AF170E35365456F751749B73657FC4C2E46E6227F19B73C6D35D23C798DEFFB7FD719D3C25E54B7505E97EABC4609E972B8A1BFCD537C454513359E6304CCB7D0FE8679650B27FC219A79B46E7D721D273F2DB0438FDF3CDF3E868FBD1327B3BA
	3D7C4C196E0F6FEF9E75D2A4535549CF33869F1B532DE801D7F9FEF8F5EA0F6716F47F66A85DFB6884590327631ECE64E1028B01741869D8E74F52FBFA6C7DA555FBD5F95F6F69D8FE06B28E9CD5ECAAD73DCFB85277E54774E9992CCE6F22FBAA6320BE2314FA5E0A77A162B86E538602AB1C816B3A99088BAE2277DEA06D603839457CBBB90E3B590D3C119CF776EB640D6238E73F6665F25C1A2D48DB78C7447D10063CD59C77E69A721E61382DF4FFE7942447F0DCA455EFA22423B8EEFB89AF1763BE5C6C6B
	17B5DB102E70CF089BF456176E2933C8B710535D3F5117EE62C6FE7707536DBD096DAE67CD44AD21BA97C13A6ECDECF7E9A5CAAC2ED03D8FAF6E7B38FC7AE7A86346D24526212A773525FDDFF6C11F16A147975DB7EA007AF473FABEDB0F71501F63BA56A15DE40E1B3E8E6922B86EF14A1B97952BAB0AC25C5D142E8E52A60E1B3D1E5F9D653883A27206F35C35FB11F7B2473D3F17174BF13F257BD5F9EFC139EFA1EEDD8165053409632EAE6065F21C7EFB0C75F00ECBB0915CE4C8473C05317EE7D1297FFF28
	5EBB453E0F05A1BFC39916E645A6276A7D5FCDFDDFF6FAF35F477A9BF4CF6E83284F6437F99FCE4F0875104E6638F778B7563BB86E35DA646D4FF1CFF25E219C27BF043C419CB7270E72C2FA7EBB083355A11D1E635AD7A11D1963262DC2BA09635AEAB156A3B86E929D9326C2BA06635E666344879CB71B5E73AC0B06BEBC9AF10F51FB61E6C83BB9CE4F5BD87FE85C2FBB7739765EDE9B1D23CD863AA8CE7B4EE15F3D3DC29B09A9167FC4367677196748D5FF794C761D2D3D796EB66DDD608140EFFE32607DC7
	F8EE62E52EED70BCC35ECB6792F9C0D778AE6A7DF411679972AF9D0ABE06625E5C5D7156478A6F1F437393FEBF61E9BA9FF1833E7F3B38FFFB6FF7CAF9D33E6E2A3CB95D14978A6F8BBC4ABBCA67B06124ACDE5EB827D25E07E93DB9A377AEAF71DDF60F6793FE0F27446BBED7BD1D87253E972BCBFF0F47C931273F5FF7A97A9CAD694E7E2E74A9FB0F7D9DBA228F1337E7CBEF3E5F7516D7751E92CFCC5E4433DD491B5BCD7D1C7111B7F3E3F7723A524F2C12477C5DC067F092607BF1FFEFA976ED1751B486D8
	7E02FABF5FCDCBCA3DC8753DE9172321EC82F817A2825E9BE5BD196CAD2D0A6C7FD9571BBA7216BDD1A51B5993D96F9903EF5379498C200B61BE89DB67990347AFAA7A2CDA5F1BB66F2D0FFEA63B472D5CA9EC22F31CAC40674D44B6786FB6253C24EE6F87F6E5FF43CCB6D7D13E031FE67134BF1E4E132CC0671E496F5F96F85A3F3ADD51674E025E74C15E7A04C099DBBD6CAF26F32DD04007737297093EB1D95C2144E4FC0D278D336978978F7C09DC4610031EB6183ED7EC78284B6F763B2B431C98D6079F73
	FE741F347CFC401745E09DDE5D2914376D50CF29C3A9065DC17F1877232B6B345B6448CBCA19836AFECA1B6C87E55A85F51BFC7587C5765FD77D14B6B9D0A51B79AF087AEFA86003E3307E86EF712C3F789F15727F55E53F6DBD8EF817BFB9C639574B4ADA556C99CFBB691CA88A686238BEAF6F7154E749ACD57D6E7DA9EDA2B3D6510749366B14D88FBF5C537DB17F5FC45F1C2C3C7FEB36A2FBE851BAED59A690EDEF8661F9A0FC57E66425FFC2C7FE8F7CD411D37DF56F64BCB7CF111331D01163CC6B1D9CFA
	658EE3FF314AE7453D13736A92C5CEFC3A727E56B265BDD92F3CB72CD44A1AD37C536B67068C657D11CC65FD419A251CA16BFAE2538EEED31EC111B3F01DA267073D3D137370FAC54E3C0D0A1CE5853D3B93103BC911F363F6C5CE1C29F7F25ED77DDE0B73E06FECD938DB51615B3D0A1C87FAA9677AFCC54E68FD4A7B6F8A1477ED8794795FED691D0DB58795B98F95A9F26E5F53BBB9130A89AF7B5B4B8B453390FC237EA224381C42E25F7B9F45B73C7107D1674A521304248AE136195E612C90D25A48E5D0B7
	2CF9E619813EF1FDA750F10025A4A1DB7E29BF03CB7EC5BDC32BCBB499A43BC1F4B7DADBCD22219194F45A2D3DA045B28452920700360B383695740AE854451D853AF76E51A5894920AA3BB2DBA1A413FB2F203113E92E136C8E2237C07ABB527F115FF0D86CA59BD327401ABA1AA25433E48E722E5320C1278E639CBA19037C6CE6129F9A359E33A5E1B13A83FF0B3040A0891FA99F5A9948CF9FD29C7BF8C8C5478B7842C36D94CD35990DD3D86091B2AF5E3D7B3D48BF1DF269045995428AB272550ACE7A2383
	A27D0BDB72DF9AAD9766BA482F91135B5860E197FD243824F62BD8A924B755103F5C6112C4D3B1FEE66F12042574375B37111F2158F65468B2CB641A737ECAA159C67EA62A3018E5DB0D3666ED6C378D7653EA1AD5CC83DD20A7F0206F922AAF7DDBDEDC4A122797EDD8FBACBACCA7A4158B1FDA6DC6D33931D132BBAB04391259A93A4CF62B496DB844842536110E160CB449A0AE031BCF0C4DA513A62E7485779D839744ACA8CF023537D358C6A949C01F4BA9CC25E623930A921D9592799B2FF6E7964F7B45EA
	E9632BC7161FC992E649C692576B5D8EC9184D2EC27390A6C66716035E52343F0C9FBE3DB0BE8E184A05947A4B71D0F41AC2F52235653C683CEA5410D57386C7DDC7B4F39033E835E6CAE02F53E8F3119F4B876186AF5BB00B2B18FB4B783CA1A3BE7A0A2A2830CA429AD699403A2DD93437ECABEEEA3258C4AEGEA86442F626289CD2E974DE277CDCB0FCD7964BCC4D21920EB494B237FEE277F6EA07FEE27186D9433FD87D4CF3C5065FF5E79EE3419069FCD98C82CA0FAF6133145E2ED0717B25ADB3B89FE1B
	5B235D6965B61A4A1B8519AD7CC8D34BFC020FE0D77AC691C12FA67F2CA37F2C27E49B683F593D3609F0EDD1ECA1AF1FFBDA3057538222A53D1049AD28819849E912845678C791BA8D9AED0EEC59AF7EB82EF8AF9DD63CB4D76525D4C9D8D0C67AD6D17EF3D1D7328D47E17D36783851EDA01F009A0A2DD6FB9B79C2C492B6922419FC97EAB0922CE84AB1F408CE3B21C50446E730598DD6CB0BC5A2524847E78550AD600726701EAAFF1CCA5078DDA93C6BC028A49CBA4EBE26B3C8B07E9BA433E8F0303FE9E4E8
	E9F5C906732241A8FF47E4028434F351E0118C96174185432AC3B4C94261EEA548241E7C0AD8E3B37D1E7CD37CE00A0CF57328A106138E97C9A53B4446DC22B1211B4B6940B479632902AB4990D9DB7A3812432D496D518550DDA90059AA1D9B28AC3AB07323336E3F2BE9032626AD0A26BA39DC72DF4A1527296429A971E772152969770A26E9AA1F6A2EBCCDFF6929A97AD44731F8D7CB4FBD2D9E884992FDB647AED2E1132E6456B950B312845922459C1B2E42A6EBDA72B3551A367E03BD27AD781D4712ABCF
	53E10A264BD19F41334DAA1ADEA151B15C533B98A1CB2FE41DC7382F3C3AFFD871E32A2074A4D7E014BE21E83AC22529525F6984E5A75B3317C02CF6AFF105C447F31E2D9077AF66DC49BA0FD5F41E235219781C7D6E68669F553F631CB0E00D7F3F1D7931FCE776E36F5FF1DECDFF93FC9060C7FD0C3FC1E43BC06E8B787B3D495A961862CBC66B05E21B097C76E4C93BA4AA3FF7385ECA643B10C64EE4F9DB2CC46FEFD5BC7F8FD0CB8788F3F92B479EA9GG8C0EGGD0CB818294G94G88G88GDAF658B0
	F3F92B479EA9GG8C0EGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGD8A9GGGG
**end of data**/
}
/**
 * Return the JCheckBoxDayChooser property value.
 * @return com.cannontech.common.gui.unchanging.JCheckBoxDayChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser getJCheckBoxDayChooser() {
	if (ivjJCheckBoxDayChooser == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder.setTitle("Day Selection");
			ivjJCheckBoxDayChooser = new com.cannontech.common.gui.unchanging.JCheckBoxDayChooser();
			ivjJCheckBoxDayChooser.setName("JCheckBoxDayChooser");
			ivjJCheckBoxDayChooser.setPreferredSize(new java.awt.Dimension(340, 86));
			ivjJCheckBoxDayChooser.setBorder(ivjLocalBorder);
			ivjJCheckBoxDayChooser.setMinimumSize(new java.awt.Dimension(340, 86));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDayChooser;
}
/**
 * Return the JComboBoxHoliday property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHoliday() {
	if (ivjJComboBoxHoliday == null) {
		try {
			ivjJComboBoxHoliday = new javax.swing.JComboBox();
			ivjJComboBoxHoliday.setName("JComboBoxHoliday");
			ivjJComboBoxHoliday.setToolTipText("Holiday schedule used to exclude control");
			ivjJComboBoxHoliday.setPreferredSize(new java.awt.Dimension(155, 23));
			// user code begin {1}
			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List holidaySch = cache.getAllHolidaySchedules();
				for( int i = 0; i < holidaySch.size(); i++ )
					ivjJComboBoxHoliday.addItem( holidaySch.get(i) );
			}

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHoliday;
}
/**
 * Return the JComboBoxSeasonSchedule property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSeasonSchedule() {
	if (ivjJComboBoxSeasonSchedule == null) {
		try {
			ivjJComboBoxSeasonSchedule = new javax.swing.JComboBox();
			ivjJComboBoxSeasonSchedule.setName("JComboBoxSeasonSchedule");
			ivjJComboBoxSeasonSchedule.setToolTipText("Holiday schedule used to exclude control");
			ivjJComboBoxSeasonSchedule.setPreferredSize(new java.awt.Dimension(155, 23));
			// user code begin {1}
			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List seasonSch = cache.getAllSeasonSchedules();
				for( int i = 0; i < seasonSch.size(); i++ )
					ivjJComboBoxSeasonSchedule.addItem( seasonSch.get(i) );
			}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSeasonSchedule;
}
/**
 * Return the JCSpinFieldMaxActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxActivateTime() {
	if (ivjJCSpinFieldMaxActivateTime == null) {
		try {
			ivjJCSpinFieldMaxActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxActivateTime.setName("JCSpinFieldMaxActivateTime");
			ivjJCSpinFieldMaxActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMaxActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxActivateTime;
}
/**
 * Return the JCSpinFieldMaxDailyOps property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxDailyOps() {
	if (ivjJCSpinFieldMaxDailyOps == null) {
		try {
			ivjJCSpinFieldMaxDailyOps = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxDailyOps.setName("JCSpinFieldMaxDailyOps");
			ivjJCSpinFieldMaxDailyOps.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMaxDailyOps.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxDailyOps;
}
/**
 * Return the JCSpinFieldMaxHoursAnnually property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursAnnually() {
	if (ivjJCSpinFieldMaxHoursAnnually == null) {
		try {
			ivjJCSpinFieldMaxHoursAnnually = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursAnnually.setName("JCSpinFieldMaxHoursAnnually");
			ivjJCSpinFieldMaxHoursAnnually.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursAnnually.setDataProperties(
								new com.klg.jclass.field.DataProperties(
									new com.klg.jclass.field.validate.JCIntegerValidator(
									null, new Integer(0), new Integer(99999), null, true, 
									null, new Integer(1), "#,##0.###;-#,##0.###", false, 
									false, false, null, new Integer(0)), 
									new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
									new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
									new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursAnnually;
}
/**
 * Return the JCSpinFieldMaxHoursDaily property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursDaily() {
	if (ivjJCSpinFieldMaxHoursDaily == null) {
		try {
			ivjJCSpinFieldMaxHoursDaily = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursDaily.setName("JCSpinFieldMaxHoursDaily");
			ivjJCSpinFieldMaxHoursDaily.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursDaily.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursDaily;
}
/**
 * Return the JCSpinFieldMaxHoursMonthly property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursMonthly() {
	if (ivjJCSpinFieldMaxHoursMonthly == null) {
		try {
			ivjJCSpinFieldMaxHoursMonthly = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursMonthly.setName("JCSpinFieldMaxHoursMonthly");
			ivjJCSpinFieldMaxHoursMonthly.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursMonthly.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursMonthly;
}
/**
 * Return the JCSpinFieldMaxHoursSeasonal property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMaxHoursSeasonal() {
	if (ivjJCSpinFieldMaxHoursSeasonal == null) {
		try {
			ivjJCSpinFieldMaxHoursSeasonal = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMaxHoursSeasonal.setName("JCSpinFieldMaxHoursSeasonal");
			ivjJCSpinFieldMaxHoursSeasonal.setToolTipText("Max hours allowed, zero means no limit");
			// user code begin {1}
			ivjJCSpinFieldMaxHoursSeasonal.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMaxHoursSeasonal;
}
/**
 * Return the JCSpinFieldMinActivateTime property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinActivateTime() {
	if (ivjJCSpinFieldMinActivateTime == null) {
		try {
			ivjJCSpinFieldMinActivateTime = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinActivateTime.setName("JCSpinFieldMinActivateTime");
			ivjJCSpinFieldMinActivateTime.setToolTipText("Minimum time the program must be activated before it is stopped");
			// user code begin {1}
			ivjJCSpinFieldMinActivateTime.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinActivateTime;
}
/**
 * Return the JCSpinFieldMinRestart property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldMinRestart() {
	if (ivjJCSpinFieldMinRestart == null) {
		try {
			ivjJCSpinFieldMinRestart = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldMinRestart.setName("JCSpinFieldMinRestart");
			ivjJCSpinFieldMinRestart.setToolTipText("Minimum time the program must be stopped before it is activated again");
			// user code begin {1}
			ivjJCSpinFieldMinRestart.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldMinRestart;
}
/**
 * Return the JLabelAnnually property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelAnnually() {
	if (ivjJLabelAnnually == null) {
		try {
			ivjJLabelAnnually = new javax.swing.JLabel();
			ivjJLabelAnnually.setName("JLabelAnnually");
			ivjJLabelAnnually.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelAnnually.setText("Annually:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelAnnually;
}
/**
 * Return the JLabelConstraintName property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelConstraintName() {
	if (ivjJLabelConstraintName == null) {
		try {
			ivjJLabelConstraintName = new javax.swing.JLabel();
			ivjJLabelConstraintName.setName("JLabelConstraintName");
			ivjJLabelConstraintName.setPreferredSize(new java.awt.Dimension(127, 18));
			ivjJLabelConstraintName.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelConstraintName.setText("Constraint Name: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelConstraintName;
}
/**
 * Return the JLabelDaily property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDaily() {
	if (ivjJLabelDaily == null) {
		try {
			ivjJLabelDaily = new javax.swing.JLabel();
			ivjJLabelDaily.setName("JLabelDaily");
			ivjJLabelDaily.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelDaily.setText("Daily:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDaily;
}
/**
 * Return the JLabelDailyOps property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDailyOps() {
	if (ivjJLabelDailyOps == null) {
		try {
			ivjJLabelDailyOps = new javax.swing.JLabel();
			ivjJLabelDailyOps.setName("JLabelDailyOps");
			ivjJLabelDailyOps.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelDailyOps.setText("Daily Ops: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDailyOps;
}
/**
 * Return the JLabelHoliday property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHoliday() {
	if (ivjJLabelHoliday == null) {
		try {
			ivjJLabelHoliday = new javax.swing.JLabel();
			ivjJLabelHoliday.setName("JLabelHoliday");
			ivjJLabelHoliday.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelHoliday.setText("Holiday Schedule: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHoliday;
}
/**
 * Return the JLabelMaxActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxActivate() {
	if (ivjJLabelMaxActivate == null) {
		try {
			ivjJLabelMaxActivate = new javax.swing.JLabel();
			ivjJLabelMaxActivate.setName("JLabelMaxActivate");
			ivjJLabelMaxActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMaxActivate.setText("Activate: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxActivate;
}
/**
 * Return the JLabelMaxActSeconds property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxActSeconds() {
	if (ivjJLabelMaxActSeconds == null) {
		try {
			ivjJLabelMaxActSeconds = new javax.swing.JLabel();
			ivjJLabelMaxActSeconds.setName("JLabelMaxActSeconds");
			ivjJLabelMaxActSeconds.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMaxActSeconds.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxActSeconds;
}
/**
 * Return the JLabelMinActivate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinActivate() {
	if (ivjJLabelMinActivate == null) {
		try {
			ivjJLabelMinActivate = new javax.swing.JLabel();
			ivjJLabelMinActivate.setName("JLabelMinActivate");
			ivjJLabelMinActivate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinActivate.setText("Activate:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinActivate;
}
/**
 * Return the JLabelMinReSeconds property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinReSeconds() {
	if (ivjJLabelMinReSeconds == null) {
		try {
			ivjJLabelMinReSeconds = new javax.swing.JLabel();
			ivjJLabelMinReSeconds.setName("JLabelMinReSeconds");
			ivjJLabelMinReSeconds.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMinReSeconds.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinReSeconds;
}
/**
 * Return the JLabelMinReSeconds1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinReSeconds1() {
	if (ivjJLabelMinReSeconds1 == null) {
		try {
			ivjJLabelMinReSeconds1 = new javax.swing.JLabel();
			ivjJLabelMinReSeconds1.setName("JLabelMinReSeconds1");
			ivjJLabelMinReSeconds1.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelMinReSeconds1.setText("sec.");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinReSeconds1;
}
/**
 * Return the JLabelMonthly property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMonthly() {
	if (ivjJLabelMonthly == null) {
		try {
			ivjJLabelMonthly = new javax.swing.JLabel();
			ivjJLabelMonthly.setName("JLabelMonthly");
			ivjJLabelMonthly.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelMonthly.setText("Monthly:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMonthly;
}
/**
 * Return the JLabelRestart property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRestart() {
	if (ivjJLabelRestart == null) {
		try {
			ivjJLabelRestart = new javax.swing.JLabel();
			ivjJLabelRestart.setName("JLabelRestart");
			ivjJLabelRestart.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelRestart.setText("Restart:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRestart;
}
/**
 * Return the JLabelSeasonal property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonal() {
	if (ivjJLabelSeasonal == null) {
		try {
			ivjJLabelSeasonal = new javax.swing.JLabel();
			ivjJLabelSeasonal.setName("JLabelSeasonal");
			ivjJLabelSeasonal.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelSeasonal.setText("Seasonal:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonal;
}
/**
 * Return the JLabelSeasonChooser property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSeasonChooser() {
	if (ivjJLabelSeasonChooser == null) {
		try {
			ivjJLabelSeasonChooser = new javax.swing.JLabel();
			ivjJLabelSeasonChooser.setName("JLabelSeasonChooser");
			ivjJLabelSeasonChooser.setPreferredSize(new java.awt.Dimension(127, 18));
			ivjJLabelSeasonChooser.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelSeasonChooser.setText("Season Schedule: ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSeasonChooser;
}
/**
 * Return the JPanelMaxHours property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxHours() {
	if (ivjJPanelMaxHours == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder1.setTitle("Max Hour Allowance");
			ivjJPanelMaxHours = new javax.swing.JPanel();
			ivjJPanelMaxHours.setName("JPanelMaxHours");
			ivjJPanelMaxHours.setPreferredSize(new java.awt.Dimension(340, 75));
			ivjJPanelMaxHours.setBorder(ivjLocalBorder1);
			ivjJPanelMaxHours.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxHours.setMinimumSize(new java.awt.Dimension(340, 75));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursDaily = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursDaily.gridx = 2; constraintsJCSpinFieldMaxHoursDaily.gridy = 1;
			constraintsJCSpinFieldMaxHoursDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursDaily.ipadx = 63;
			constraintsJCSpinFieldMaxHoursDaily.ipady = 19;
			constraintsJCSpinFieldMaxHoursDaily.insets = new java.awt.Insets(6, 1, 2, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursDaily(), constraintsJCSpinFieldMaxHoursDaily);

			java.awt.GridBagConstraints constraintsJLabelDaily = new java.awt.GridBagConstraints();
			constraintsJLabelDaily.gridx = 1; constraintsJLabelDaily.gridy = 1;
			constraintsJLabelDaily.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelDaily.ipadx = 22;
			constraintsJLabelDaily.ipady = -1;
			constraintsJLabelDaily.insets = new java.awt.Insets(5, 11, 3, 0);
			getJPanelMaxHours().add(getJLabelDaily(), constraintsJLabelDaily);

			java.awt.GridBagConstraints constraintsJLabelSeasonal = new java.awt.GridBagConstraints();
			constraintsJLabelSeasonal.gridx = 3; constraintsJLabelSeasonal.gridy = 1;
			constraintsJLabelSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSeasonal.ipadx = 6;
			constraintsJLabelSeasonal.ipady = -1;
			constraintsJLabelSeasonal.insets = new java.awt.Insets(5, 24, 3, 4);
			getJPanelMaxHours().add(getJLabelSeasonal(), constraintsJLabelSeasonal);

			java.awt.GridBagConstraints constraintsJLabelMonthly = new java.awt.GridBagConstraints();
			constraintsJLabelMonthly.gridx = 1; constraintsJLabelMonthly.gridy = 2;
			constraintsJLabelMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelMonthly.ipadx = 4;
			constraintsJLabelMonthly.ipady = -1;
			constraintsJLabelMonthly.insets = new java.awt.Insets(3, 11, 16, 0);
			getJPanelMaxHours().add(getJLabelMonthly(), constraintsJLabelMonthly);

			java.awt.GridBagConstraints constraintsJLabelAnnually = new java.awt.GridBagConstraints();
			constraintsJLabelAnnually.gridx = 3; constraintsJLabelAnnually.gridy = 2;
			constraintsJLabelAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelAnnually.ipadx = 11;
			constraintsJLabelAnnually.ipady = -1;
			constraintsJLabelAnnually.insets = new java.awt.Insets(3, 24, 16, 4);
			getJPanelMaxHours().add(getJLabelAnnually(), constraintsJLabelAnnually);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursMonthly = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursMonthly.gridx = 2; constraintsJCSpinFieldMaxHoursMonthly.gridy = 2;
			constraintsJCSpinFieldMaxHoursMonthly.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursMonthly.ipadx = 63;
			constraintsJCSpinFieldMaxHoursMonthly.ipady = 19;
			constraintsJCSpinFieldMaxHoursMonthly.insets = new java.awt.Insets(5, 1, 12, 24);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursMonthly(), constraintsJCSpinFieldMaxHoursMonthly);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursSeasonal = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursSeasonal.gridx = 4; constraintsJCSpinFieldMaxHoursSeasonal.gridy = 1;
			constraintsJCSpinFieldMaxHoursSeasonal.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursSeasonal.ipadx = 63;
			constraintsJCSpinFieldMaxHoursSeasonal.ipady = 19;
			constraintsJCSpinFieldMaxHoursSeasonal.insets = new java.awt.Insets(6, 4, 2, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursSeasonal(), constraintsJCSpinFieldMaxHoursSeasonal);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxHoursAnnually = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxHoursAnnually.gridx = 4; constraintsJCSpinFieldMaxHoursAnnually.gridy = 2;
			constraintsJCSpinFieldMaxHoursAnnually.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldMaxHoursAnnually.ipadx = 63;
			constraintsJCSpinFieldMaxHoursAnnually.ipady = 19;
			constraintsJCSpinFieldMaxHoursAnnually.insets = new java.awt.Insets(2, 4, 15, 26);
			getJPanelMaxHours().add(getJCSpinFieldMaxHoursAnnually(), constraintsJCSpinFieldMaxHoursAnnually);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxHours;
}
/**
 * Return the JPanelMaxValues property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMaxValues() {
	if (ivjJPanelMaxValues == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder2.setTitle("Max");
			ivjJPanelMaxValues = new javax.swing.JPanel();
			ivjJPanelMaxValues.setName("JPanelMaxValues");
			ivjJPanelMaxValues.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMaxValues.setBorder(ivjLocalBorder2);
			ivjJPanelMaxValues.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMaxValues.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxActivateTime.gridx = 2; constraintsJCSpinFieldMaxActivateTime.gridy = 1;
			constraintsJCSpinFieldMaxActivateTime.ipadx = 49;
			constraintsJCSpinFieldMaxActivateTime.ipady = 19;
			constraintsJCSpinFieldMaxActivateTime.insets = new java.awt.Insets(18, 0, 3, 2);
			getJPanelMaxValues().add(getJCSpinFieldMaxActivateTime(), constraintsJCSpinFieldMaxActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMaxDailyOps = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMaxDailyOps.gridx = 2; constraintsJCSpinFieldMaxDailyOps.gridy = 2;
			constraintsJCSpinFieldMaxDailyOps.ipadx = 49;
			constraintsJCSpinFieldMaxDailyOps.ipady = 19;
			constraintsJCSpinFieldMaxDailyOps.insets = new java.awt.Insets(4, 0, 20, 2);
			getJPanelMaxValues().add(getJCSpinFieldMaxDailyOps(), constraintsJCSpinFieldMaxDailyOps);

			java.awt.GridBagConstraints constraintsJLabelMaxActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMaxActivate.gridx = 1; constraintsJLabelMaxActivate.gridy = 1;
			constraintsJLabelMaxActivate.ipadx = 12;
			constraintsJLabelMaxActivate.insets = new java.awt.Insets(19, 12, 6, 3);
			getJPanelMaxValues().add(getJLabelMaxActivate(), constraintsJLabelMaxActivate);

			java.awt.GridBagConstraints constraintsJLabelDailyOps = new java.awt.GridBagConstraints();
			constraintsJLabelDailyOps.gridx = 1; constraintsJLabelDailyOps.gridy = 2;
			constraintsJLabelDailyOps.ipadx = 3;
			constraintsJLabelDailyOps.insets = new java.awt.Insets(5, 12, 23, 0);
			getJPanelMaxValues().add(getJLabelDailyOps(), constraintsJLabelDailyOps);

			java.awt.GridBagConstraints constraintsJLabelMaxActSeconds = new java.awt.GridBagConstraints();
			constraintsJLabelMaxActSeconds.gridx = 3; constraintsJLabelMaxActSeconds.gridy = 1;
			constraintsJLabelMaxActSeconds.ipadx = 21;
			constraintsJLabelMaxActSeconds.insets = new java.awt.Insets(21, 3, 6, 0);
			getJPanelMaxValues().add(getJLabelMaxActSeconds(), constraintsJLabelMaxActSeconds);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMaxValues;
}
/**
 * Return the JPanelMinTimes property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMinTimes() {
	if (ivjJPanelMinTimes == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder3;
			ivjLocalBorder3 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder3.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder3.setTitle("Min");
			ivjJPanelMinTimes = new javax.swing.JPanel();
			ivjJPanelMinTimes.setName("JPanelMinTimes");
			ivjJPanelMinTimes.setPreferredSize(new java.awt.Dimension(170, 82));
			ivjJPanelMinTimes.setBorder(ivjLocalBorder3);
			ivjJPanelMinTimes.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMinTimes.setMinimumSize(new java.awt.Dimension(170, 82));

			java.awt.GridBagConstraints constraintsJLabelMinActivate = new java.awt.GridBagConstraints();
			constraintsJLabelMinActivate.gridx = 1; constraintsJLabelMinActivate.gridy = 1;
			constraintsJLabelMinActivate.ipadx = 12;
			constraintsJLabelMinActivate.ipady = -2;
			constraintsJLabelMinActivate.insets = new java.awt.Insets(19, 12, 8, 1);
			getJPanelMinTimes().add(getJLabelMinActivate(), constraintsJLabelMinActivate);

			java.awt.GridBagConstraints constraintsJLabelRestart = new java.awt.GridBagConstraints();
			constraintsJLabelRestart.gridx = 1; constraintsJLabelRestart.gridy = 2;
			constraintsJLabelRestart.ipadx = 13;
			constraintsJLabelRestart.ipady = -2;
			constraintsJLabelRestart.insets = new java.awt.Insets(5, 12, 25, 1);
			getJPanelMinTimes().add(getJLabelRestart(), constraintsJLabelRestart);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinActivateTime = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinActivateTime.gridx = 2; constraintsJCSpinFieldMinActivateTime.gridy = 1;
			constraintsJCSpinFieldMinActivateTime.ipadx = 55;
			constraintsJCSpinFieldMinActivateTime.ipady = 19;
			constraintsJCSpinFieldMinActivateTime.insets = new java.awt.Insets(18, 1, 3, 3);
			getJPanelMinTimes().add(getJCSpinFieldMinActivateTime(), constraintsJCSpinFieldMinActivateTime);

			java.awt.GridBagConstraints constraintsJCSpinFieldMinRestart = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldMinRestart.gridx = 2; constraintsJCSpinFieldMinRestart.gridy = 2;
			constraintsJCSpinFieldMinRestart.ipadx = 55;
			constraintsJCSpinFieldMinRestart.ipady = 19;
			constraintsJCSpinFieldMinRestart.insets = new java.awt.Insets(4, 1, 20, 3);
			getJPanelMinTimes().add(getJCSpinFieldMinRestart(), constraintsJCSpinFieldMinRestart);

			java.awt.GridBagConstraints constraintsJLabelMinReSeconds = new java.awt.GridBagConstraints();
			constraintsJLabelMinReSeconds.gridx = 3; constraintsJLabelMinReSeconds.gridy = 2;
			constraintsJLabelMinReSeconds.ipadx = 7;
			constraintsJLabelMinReSeconds.insets = new java.awt.Insets(7, 4, 23, 6);
			getJPanelMinTimes().add(getJLabelMinReSeconds(), constraintsJLabelMinReSeconds);

			java.awt.GridBagConstraints constraintsJLabelMinReSeconds1 = new java.awt.GridBagConstraints();
			constraintsJLabelMinReSeconds1.gridx = 3; constraintsJLabelMinReSeconds1.gridy = 1;
			constraintsJLabelMinReSeconds1.ipadx = 7;
			constraintsJLabelMinReSeconds1.insets = new java.awt.Insets(20, 4, 7, 6);
			getJPanelMinTimes().add(getJLabelMinReSeconds1(), constraintsJLabelMinReSeconds1);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMinTimes;
}
/**
 * Return the JTextFieldConstraintName property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldConstraintName() {
	if (ivjJTextFieldConstraintName == null) {
		try {
			ivjJTextFieldConstraintName = new javax.swing.JTextField();
			ivjJTextFieldConstraintName.setName("JTextFieldConstraintName");
			ivjJTextFieldConstraintName.setPreferredSize(new java.awt.Dimension(149, 20));
			ivjJTextFieldConstraintName.setMinimumSize(new java.awt.Dimension(149, 20));
			// user code begin {1}
			ivjJTextFieldConstraintName.setDocument(
					new TextFieldDocument(
						TextFieldDocument.MAX_DEVICE_NAME_LENGTH,
						TextFieldDocument.INVALID_CHARS_PAO) );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldConstraintName;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.Object
 * @param o java.lang.Object
 */
public Object getValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	 
	if(con == null)
		con = new LMProgramConstraint();
	
	con.setConstraintName(getJTextFieldConstraintName().getText());
	
	con.setAvailableWeekdays( getJCheckBoxDayChooser().getSelectedDays8Chars() );

	con.setMaxHoursDaily( new Integer( ((Number)getJCSpinFieldMaxHoursDaily().getValue()).intValue() ) );
	con.setMaxHoursMonthly( new Integer( ((Number)getJCSpinFieldMaxHoursMonthly().getValue()).intValue() ) );
	con.setMaxHoursSeasonal( new Integer( ((Number)getJCSpinFieldMaxHoursSeasonal().getValue()).intValue() ) );
	con.setMaxHoursAnnually( new Integer( ((Number)getJCSpinFieldMaxHoursAnnually().getValue()).intValue() ) );
	con.setMinActivateTime( new Integer( ((Number)getJCSpinFieldMinActivateTime().getValue()).intValue() ) );
	con.setMinRestartTime( new Integer( ((Number)getJCSpinFieldMinRestart().getValue()).intValue() ) );
	con.setMaxActivateTime( new Integer( ((Number)getJCSpinFieldMaxActivateTime().getValue()).intValue() ) );
	con.setMaxDailyOps( new Integer( ((Number)getJCSpinFieldMaxDailyOps().getValue()).intValue() ) );
	
	if( getJComboBoxHoliday().getSelectedItem() != null )
		con.setHolidayScheduleID( new Integer(((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getSelectedItem()).getHolidayScheduleID() ));
	else
		con.setHolidayScheduleID( new Integer(0) );
	
	if( getJComboBoxSeasonSchedule().getSelectedItem() == "(none)" )
		con.setSeasonScheduleID( new Integer(0) );
	else
		con.setSeasonScheduleID( new Integer(((com.cannontech.database.data.lite.LiteSeasonSchedule)getJComboBoxSeasonSchedule().getSelectedItem()).getScheduleID() ));
	
	return con;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	getJCSpinFieldMaxHoursAnnually().addValueListener( this );
	getJCSpinFieldMaxHoursDaily().addValueListener( this );
	getJCSpinFieldMaxHoursMonthly().addValueListener( this );
	getJCSpinFieldMaxHoursSeasonal().addValueListener( this );
	getJCSpinFieldMinActivateTime().addValueListener( this );
	getJCSpinFieldMinRestart().addValueListener( this );
	getJCSpinFieldMaxDailyOps().addValueListener( this );
	getJCSpinFieldMaxActivateTime().addValueListener( this );
	// user code end
	getJTextFieldConstraintName().addCaretListener(ivjEventHandler);
	getJCheckBoxDayChooser().addActionListener(ivjEventHandler);
	getJComboBoxHoliday().addActionListener(ivjEventHandler);
	getJComboBoxSeasonSchedule().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMProgramConstraintPanel");
		setPreferredSize(new java.awt.Dimension(350, 360));
		setLayout(new java.awt.GridBagLayout());
		setSize(350, 360);
		setMinimumSize(new java.awt.Dimension(350, 360));

		java.awt.GridBagConstraints constraintsJCheckBoxDayChooser = new java.awt.GridBagConstraints();
		constraintsJCheckBoxDayChooser.gridx = 1; constraintsJCheckBoxDayChooser.gridy = 4;
		constraintsJCheckBoxDayChooser.gridwidth = 2;
		constraintsJCheckBoxDayChooser.fill = java.awt.GridBagConstraints.VERTICAL;
		constraintsJCheckBoxDayChooser.weightx = 1.0;
		constraintsJCheckBoxDayChooser.weighty = 1.0;
		constraintsJCheckBoxDayChooser.insets = new java.awt.Insets(3, 4, 1, 6);
		add(getJCheckBoxDayChooser(), constraintsJCheckBoxDayChooser);

		java.awt.GridBagConstraints constraintsJComboBoxHoliday = new java.awt.GridBagConstraints();
		constraintsJComboBoxHoliday.gridx = 2; constraintsJComboBoxHoliday.gridy = 5;
		constraintsJComboBoxHoliday.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxHoliday.weightx = 1.0;
		constraintsJComboBoxHoliday.ipadx = 29;
		constraintsJComboBoxHoliday.insets = new java.awt.Insets(2, 4, 3, 54);
		add(getJComboBoxHoliday(), constraintsJComboBoxHoliday);

		java.awt.GridBagConstraints constraintsJPanelMaxHours = new java.awt.GridBagConstraints();
		constraintsJPanelMaxHours.gridx = 1; constraintsJPanelMaxHours.gridy = 6;
		constraintsJPanelMaxHours.gridwidth = 2;
		constraintsJPanelMaxHours.fill = java.awt.GridBagConstraints.VERTICAL;
		constraintsJPanelMaxHours.weightx = 1.0;
		constraintsJPanelMaxHours.weighty = 1.0;
		constraintsJPanelMaxHours.insets = new java.awt.Insets(3, 4, 5, 6);
		add(getJPanelMaxHours(), constraintsJPanelMaxHours);

		java.awt.GridBagConstraints constraintsJLabelHoliday = new java.awt.GridBagConstraints();
		constraintsJLabelHoliday.gridx = 1; constraintsJLabelHoliday.gridy = 5;
		constraintsJLabelHoliday.ipadx = 7;
		constraintsJLabelHoliday.insets = new java.awt.Insets(8, 24, 6, 3);
		add(getJLabelHoliday(), constraintsJLabelHoliday);

		java.awt.GridBagConstraints constraintsJLabelConstraintName = new java.awt.GridBagConstraints();
		constraintsJLabelConstraintName.gridx = 1; constraintsJLabelConstraintName.gridy = 1;
		constraintsJLabelConstraintName.ipadx = 7;
		constraintsJLabelConstraintName.ipady = 4;
		constraintsJLabelConstraintName.insets = new java.awt.Insets(20, 22, 6, 7);
		add(getJLabelConstraintName(), constraintsJLabelConstraintName);

		java.awt.GridBagConstraints constraintsJTextFieldConstraintName = new java.awt.GridBagConstraints();
		constraintsJTextFieldConstraintName.gridx = 2; constraintsJTextFieldConstraintName.gridy = 1;
		constraintsJTextFieldConstraintName.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldConstraintName.weightx = 1.0;
		constraintsJTextFieldConstraintName.ipadx = 1;
		constraintsJTextFieldConstraintName.insets = new java.awt.Insets(18, 4, 6, 59);
		add(getJTextFieldConstraintName(), constraintsJTextFieldConstraintName);

		java.awt.GridBagConstraints constraintsJPanelMaxValues = new java.awt.GridBagConstraints();
		constraintsJPanelMaxValues.gridx = 1; constraintsJPanelMaxValues.gridy = 3;
		constraintsJPanelMaxValues.gridwidth = 2;
		constraintsJPanelMaxValues.fill = java.awt.GridBagConstraints.VERTICAL;
		constraintsJPanelMaxValues.weightx = 1.0;
		constraintsJPanelMaxValues.weighty = 1.0;
		constraintsJPanelMaxValues.ipadx = 4;
		constraintsJPanelMaxValues.ipady = -11;
		constraintsJPanelMaxValues.insets = new java.awt.Insets(7, 4, 2, 172);
		add(getJPanelMaxValues(), constraintsJPanelMaxValues);

		java.awt.GridBagConstraints constraintsJPanelMinTimes = new java.awt.GridBagConstraints();
		constraintsJPanelMinTimes.gridx = 2; constraintsJPanelMinTimes.gridy = 3;
		constraintsJPanelMinTimes.fill = java.awt.GridBagConstraints.VERTICAL;
		constraintsJPanelMinTimes.weightx = 1.0;
		constraintsJPanelMinTimes.weighty = 1.0;
		constraintsJPanelMinTimes.ipady = -11;
		constraintsJPanelMinTimes.insets = new java.awt.Insets(7, 40, 2, 3);
		add(getJPanelMinTimes(), constraintsJPanelMinTimes);

		java.awt.GridBagConstraints constraintsJComboBoxSeasonSchedule = new java.awt.GridBagConstraints();
		constraintsJComboBoxSeasonSchedule.gridx = 2; constraintsJComboBoxSeasonSchedule.gridy = 2;
		constraintsJComboBoxSeasonSchedule.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxSeasonSchedule.weightx = 1.0;
		constraintsJComboBoxSeasonSchedule.ipadx = 24;
		constraintsJComboBoxSeasonSchedule.insets = new java.awt.Insets(6, 4, 6, 59);
		add(getJComboBoxSeasonSchedule(), constraintsJComboBoxSeasonSchedule);

		java.awt.GridBagConstraints constraintsJLabelSeasonChooser = new java.awt.GridBagConstraints();
		constraintsJLabelSeasonChooser.gridx = 1; constraintsJLabelSeasonChooser.gridy = 2;
		constraintsJLabelSeasonChooser.ipadx = 3;
		constraintsJLabelSeasonChooser.ipady = 4;
		constraintsJLabelSeasonChooser.insets = new java.awt.Insets(8, 22, 9, 7);
		add(getJLabelSeasonChooser(), constraintsJLabelSeasonChooser);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
		//	default day of week and season check boxes to all!
	  	getJCheckBoxDayChooser().setSelectedCheckBoxes( "YYYYYYYN" );
	  	getJComboBoxHoliday().setEnabled(false);
	 
	// user code end
}
/**
 * Comment
 */
public void jCheckBoxDayChooser_Action(java.awt.event.ActionEvent e) 
{
	
	getJComboBoxHoliday().setEnabled( getJCheckBoxDayChooser().isHolidaySelected() );   
	fireInputUpdate();
	
	return;
}
/**
 * Comment
 */
public void jComboBoxSeasonSchedule_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	fireInputUpdate();
	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		LMProgramConstraintPanel aLMProgramConstraintPanel;
		aLMProgramConstraintPanel = new LMProgramConstraintPanel();
		frame.setContentPane(aLMProgramConstraintPanel);
		frame.setSize(aLMProgramConstraintPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * This method was created in VisualAge.
 * @param o java.lang.Object
 */
public void setValue(Object o) 
{
	LMProgramConstraint con = (LMProgramConstraint)o;
	if(con == null)
		con = new LMProgramConstraint();
	else
	{
	
		getJTextFieldConstraintName().setText(con.getConstraintName());
	
		getJCheckBoxDayChooser().setSelectedCheckBoxes( con.getAvailableWeekdays() );
		getJCSpinFieldMaxHoursDaily().setValue( con.getMaxHoursDaily() );
		getJCSpinFieldMaxHoursMonthly().setValue( con.getMaxHoursMonthly() );
		getJCSpinFieldMaxHoursSeasonal().setValue( con.getMaxHoursSeasonal() );
		getJCSpinFieldMaxHoursAnnually().setValue( con.getMaxHoursAnnually() );
		getJCSpinFieldMinActivateTime().setValue( con.getMinActivateTime() );
		getJCSpinFieldMinRestart().setValue( con.getMinRestartTime() );
		getJCSpinFieldMaxActivateTime().setValue( con.getMaxActivateTime() );
		getJCSpinFieldMaxDailyOps().setValue( con.getMaxDailyOps() );
	
		getJComboBoxHoliday().setEnabled(getJCheckBoxDayChooser().isHolidaySelected());
		
		for( int i = 0; i < getJComboBoxHoliday().getItemCount(); i++ )
			if( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getItemAt(i)).getHolidayScheduleID()
				== con.getHolidayScheduleID().intValue() )
			{
				getJComboBoxHoliday().setSelectedIndex(i);
				break;
			}
		for( int i = 0; i < getJComboBoxSeasonSchedule().getItemCount(); i++ )
			if( ((com.cannontech.database.data.lite.LiteSeasonSchedule)getJComboBoxSeasonSchedule().getItemAt(i)).getScheduleID()
				== con.getSeasonScheduleID().intValue() )
			{
				getJComboBoxSeasonSchedule().setSelectedIndex(i);
				break;
			}
		getJComboBoxSeasonSchedule().addItem(CtiUtilities.STRING_NONE);
		
		if(con.getSeasonScheduleID().compareTo(new Integer(0)) == 0)
			getJComboBoxSeasonSchedule().setSelectedItem(CtiUtilities.STRING_NONE);
	}
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}
/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
}

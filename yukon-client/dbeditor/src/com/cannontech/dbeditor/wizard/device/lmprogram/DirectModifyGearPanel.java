package com.cannontech.dbeditor.wizard.device.lmprogram;
/**
 * This type was created in VisualAge.
 */
import java.awt.Dimension;
import com.cannontech.database.db.device.lm.LMProgramDirectGear;
import com.cannontech.common.util.StringUtils;

public class DirectModifyGearPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener, java.awt.event.ActionListener, javax.swing.event.CaretListener {
	private String gearType = null;
	private java.util.Hashtable paoHashTable = null;
	private javax.swing.JComboBox ivjJComboBoxHowToStop = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldPercentReduction = null;
	private javax.swing.JLabel ivjJLabelHowToStop = null;
	private javax.swing.JLabel ivjJLabelPercentReduction = null;
	private javax.swing.JPanel ivjJPanelHolder = null;
	private javax.swing.JComboBox ivjJComboBoxWhenChange = null;
	private javax.swing.JLabel ivjJLabelWhenChange = null;
	private javax.swing.JComboBox ivjJComboBoxGroupSelection = null;
	private javax.swing.JComboBox ivjJComboBoxNumGroups = null;
	private javax.swing.JComboBox ivjJComboBoxSendRate = null;
	private javax.swing.JComboBox ivjJComboBoxShedTime = null;
	private javax.swing.JLabel ivjJLabelGroupSelection = null;
	private javax.swing.JLabel ivjJLabelNumGroups = null;
	private javax.swing.JLabel ivjJLabelSendRate = null;
	private javax.swing.JLabel ivjJLabelShedTime = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldControlPercent = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldCyclePeriod = null;
	private javax.swing.JLabel ivjJLabelControlPercent = null;
	private javax.swing.JLabel ivjJLabelCyclePeriod = null;
	private javax.swing.JLabel ivjJLabelMin = null;
	private javax.swing.JComboBox ivjJComboBoxPeriodCount = null;
	private javax.swing.JLabel ivjJLabelPeriodCount = null;
	private javax.swing.JLabel ivjJLabelGearName = null;
	private javax.swing.JTextField ivjJTextFieldGearName = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeDuration = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangePriority = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeDuration = null;
	private javax.swing.JLabel ivjJLabelChangePriority = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerNumber = null;
	private javax.swing.JLabel ivjJLabelChangeTriggerOffset = null;
	private javax.swing.JLabel ivjJLabelMinutesChDur = null;
	private javax.swing.JPanel ivjJPanelChangeMethod = null;
	private javax.swing.JTextField ivjJTextFieldChangeTriggerOffset = null;
	private javax.swing.JComboBox ivjJComboBoxGearType = null;
	private javax.swing.JLabel ivjJLabelGearType = null;
	private javax.swing.JComboBox ivjJComboBoxControlStartState = null;
	private javax.swing.JLabel ivjJLabelControlStartState = null;
	private javax.swing.JComboBox ivjJComboBoxCycleCountSndType = null;
	private javax.swing.JLabel ivjJLabelCycleCntSndType = null;
	private javax.swing.JComboBox ivjJComboBoxMaxCycleCount = null;
	private javax.swing.JLabel ivjJLabelMaxCycleCnt = null;
	private com.cannontech.dbeditor.wizard.device.lmgroup.LMGroupExpressStatEditorPanel statEditorPanel = null;
	private boolean thermoWasLast = false;
	private javax.swing.JPanel ivjJPanel1 = null;
	private javax.swing.JScrollPane ivjJScrollPane1 = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public DirectModifyGearPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJComboBoxWhenChange()) 
		connEtoC1(e);
	if (e.getSource() == getJComboBoxGearType()) 
		connEtoC2(e);
	if (e.getSource() == getJComboBoxShedTime()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxNumGroups()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxPeriodCount()) 
		connEtoC6(e);
	if (e.getSource() == getJComboBoxSendRate()) 
		connEtoC7(e);
	if (e.getSource() == getJComboBoxGroupSelection()) 
		connEtoC8(e);
	if (e.getSource() == getJComboBoxHowToStop()) 
		connEtoC10(e);
	if (e.getSource() == getJComboBoxControlStartState()) 
		connEtoC9(e);
	if (e.getSource() == getJComboBoxCycleCountSndType()) 
		connEtoC11(e);
	if (e.getSource() == getJComboBoxMaxCycleCount()) 
		connEtoC12(e);
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldGearName()) 
		connEtoC3(e);
	if (e.getSource() == getJTextFieldChangeTriggerOffset()) 
		connEtoC13(e);
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  (JComboBoxWhenChange.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxWhenChange_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxWhenChange_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JComboBoxHowToStop.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (JComboBoxCycleCountSndType.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC12:  (JComboBoxCycleCountSndType1.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC13:  (JTextFieldChangeTriggerOffset.caret.caretUpdate(javax.swing.event.CaretEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (JComboBoxGearType.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.jComboBoxGearType_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxGearType_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JTextFieldGearName.caret.caretUpdate(javax.swing.event.CaretEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JComboBoxShedTime.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (JComboBoxNumGroups.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (JComboBoxPeriodCount.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JComboBoxSendRate.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (JComboBoxGroupSelection.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (JComboBoxLatchCommand.action.actionPerformed(java.awt.event.ActionEvent) --> DirectModifyGearPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GCDDD78ACGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8FDC14C57AB815F9D4D4E6E4D454D9F105C905E59DF6F4C71EF5D8F6D9C7E9E5C5659557D1F9C5C59D658B222E4A1FD517BFA65AD6DAD8042028E8288828202824247867FE32328B3B3A6CEE4BA278A77DBDB373BE737E59F717BF6577E3FEBE0F6F4E73EF1EF9E66619F9E7669D8443E7C32727269984A1F53AA07EDB13AA88418F884208A56FDE0B387843D5BAC1766FF30039C26E5769701C8234
	508555BA3D705DCF04A93D39CA1710D62D4B035F730595BFCD3C85FE7848A792E84F96055C65BF1F7736E1BEB3E9FA66668CF8E68168A02FA200EEG3D705966FC915FG69AC71B70154B4C128B4911E447CFC99BEDA64B3G2D90E0B265D93739C02487C21A708C0567C893639D874FD9543A0B57150BFC072E8A96129E4DCD4BA4F94974A3949DE1328D6253A85CC49DB1CD78FD73F6F8D6B49CEB5B5062ECAFEEB1B99CCE074752E2ADB69F3118ED9E273B384BF65264B6971BAD47EDAD16E2FB3B4B6DECF31B
	5A572D2B3139ADAD1E9DCE332D7544D60B495DE0F2D86CC24C91D206F98BF4D4BF14815275AD84F769826237F478DDGD0560265F8B233C234B378D83090FF6BAC1F659854426C9F59A21523FE2AF31A59CC743750FAA1F2C9C0AF829C33E578E634A55C0C36DC14C9F863A11DCCE4AD085F16C57005102E84E832200D6B3FC69B1BCE5DAA4454C524E77B3051E5E13605D8A49B03A68CCBDFC05B4E8575247E6300168C1051DA25AB81E8GF081AC24ED36E27BB7705CF444D36DECEFF7BAB639DCD5F6339B7CEC
	31436FF56B00A262F6DBDA1CEE33A030F6193720C8439E0440D6E51BA4404A36CF40F694317BFA21B2613F5327EB14ED645379E921220E48D629EC7AB662373D1F923F0D87BC11A365E0F8BB45B736C9F8D6D703E8DBA069E020392C686726AC3425BE7D8AC1DF7AFD5ACC8DDBC2C61724555B188DE61BE48B7371411D444703G9F81B086E092C08AC041D17471406DABFB72F19D74833743E45F53F944E5F2FB2ABAEDF63345AD7A5A36591F2F350049F575D90E79A5FC253C0EA65D3BCE53AF1342BFCBABBFAA
	76752312DFD85E11BE73F69D75EE9BD93C8EBF20FDE540D1D60753B8BE157615E0991E556DA5141F24430026BB86B84A1F1BCD7076E36AB6D2C471914754ED24A18B5BC8A250E26DD5BAD63F9F6EA271B12C9D7AB740C400A9GFA8774F900CA875671135B1777329FB5486A1749DEDA1F8BCFCB3747ED2AF3F4F8CC0E964BDE135BE6BAE237F488A24F5575442FC794F2A134FF37C09EDBAD8E0B5B6431B99D205D54EE01465441F8EE2E1FCBF85C96CAED3435DBA003F61700FA07554FA7FEB2F5F8FEF419CD9E
	0B444168A36AC91BB8EE5A8B9AC181E96B8E622FE29AF31B6177E9877A6A2B9F88AE8E52095CAFC5BB6641F3BBB4EE0B1DC47196E20649FD825B6821CF4BC813F3421883E0F6413884E07D89F4G385CD53AA400539DB0D6FA2AF4C1G791DB0C6F5E29FFE2B895BEACD66F5C25153EBB55BAA9D170E33F6D7F3DC5DD65D5486BB6003GA2G4681A482E4F4C1BD835483588102GA2G4681A4F66198BDE441F80D7CC899345AB9319DFF67F7EA7390DF485344AFDAFC44B744DF44BFDE7D4C2D44A54A6CA13EA4
	4FA00F371CA0664D4A7638E6596678685B8BE53F977860192ECA4F7441C75A6DAC5A063CE9592AF4266CF70E784C53101BA633ED2E903C1B74790CEE188F8154F6E31BED5BE194E8DF2EB2F5D830776EF2C347331825964CF84DBB09AD1663960727466232B84C7023C36CBB47F6927B45FE5D6A94304F7DC471A44ED7C3476B60782E1DF3999EF4482384524FD23A4963F15B0EF4FAACFBAC9E0F4D51A6497F0E5A522198C2BA44328E59C34A5A8CE56C868864E5556FA27E457ED96FF49E6BF4B51248A376733F
	5179CCA8700F6C46767EF1A61923CE646919D9A4AD512F4CEC72D1273F84C8FED23B8CBFA7F9E07BE0F994E4133800634DF491CF6AEE0E5866324576B9D7ECF7F9E25BE272AB28FC9258DDF022CAD783E08788860886188C10F1926626G07G86GC4G441DC4BF6E4D9A5F0B7C670AB648737F357D72EB82AB5B6534ECBD15ABC7AC9B16EB612FE4433982562726B5780E89339B34E3023EC1BBA664B6786F730B9B347ABC23ADEDA03EF5F6B9E4B1641B86B29E37B89D8E8B8DE4DCC4E06FE8EFB512F2589CB6
	4FBE1B394D6259E3BBE99104A527C8AC58CC477C94E81F7AD3B87EF6FD09636F12135788B1078DE9DA737910BF2CCC331EE27D7774A9E97CE5B6FD7B8309CD963B259D9CD56D6CF4F8983E144EA7C4FC47B40A4B1BF3BB11AD5C86732CA34EAAE777BE2B45D1EDB5B95AACC5A6DA22E276E83038DB1D6EF60B397028693829585465A926B5D23C0912B7135F4B0C5FFD37412879EAD9F454BB03431BD41A6BFD2B7EFE595EE5A58233797676DB15B613DC9ACF384E1545283E2F76160A76EE7A2203595B886DF40B
	4DE2B7930DBBE1DED95482031327187E4F660B54566E620EAEE8152256EAC26D515AD64056B9DC1D288772DFA166EFDA502974579E2B45CCA6263F2E3FB4ACD8A946247942A51B0EABED5859593E556D6CF4F51CF3A34A5006370EF6ABED004CECCEB36DA1675C0AD54C063A9CF5DDC0BC5B8DBC675C00553CAE1E786A142A7F100A58830101AABF67162C916D085F23EA93354E2EC6679E0F53F54ECDD80B3E681AF6C6E9C3355361F1BB6DFBBC907F613F7F030AA9C7DBEEABBB2B3265C40B5DC21B679E077957
	8FF09A3614E20C2D2BD635119DA619B9675E8E0C1D555DE7D531130D9D0DEEDBDB1B453D2B35354362B937E134F405B8679F5BC84655D098EFA381E2CF611C7F4E9F889D677C620BCD3553AE76A720951DA6637D5D1F9AE4E3F87CA9367E1C45694F77C01F3950BFFDE58F7443BD50AF6B017E479E682F76C04FAE70CF7F3E87FADB8F742BFB207F45A71D5563753B75E46EE779295362E8311017366D1693386E33FB1E0A3657E46F145613066DA6F3ED3B6CFD0F61C377E84F45EE59C35E710EF17D376D19A110
	F5A126134D9DA3CDC4274BEDEB0757E37282AB6EC33C38D93E8F61013211BD0B11700C85E07D666743E49E4B5A38343E9F7EB311F7E6639EC5BC70A783647F4CF4B47D4C7C4178D66A11AF895299E7A43E22B3F23E57B9DFB7608781C41EE1FC098A3EBB66A2DF4659AA5D92001A33DAFC0EF948B7G6821BE793E180FFC51C00F7349778C67CB82FAC600AF3EEB8C48D7C4F8FC725565A01F99F8CE7B647B187305824FC81FFCA3F211AF8EF89281B2AE50626B4CC33EFA201BAF704537AC1F7B8F6821G51AA3E
	648B885FA13E4F331C63BAA86EEDF8019C1B0E6B57BB74723D2A462D2FE86EB1902838D0DC3F3ED03D2E7F490FC42F8B708197E25CB4B64A57CAB6F5F4B8DBECF4D9D56CBBCFB44A5FD798AE2EF1B6BCA1CAF7F86A60C5309B7B5FF30D44D6326EAA2245BEB47C5B750277BA72E63ABB06CBD155DDF4D8E8F4D6BB4D16DA6842557CF5EE2F4D52A5209FFE5EA25F6B0A4E7EBCED0E8FBF840B659FA973C34304E1694C266B5611F931563EDD8BB532382D53D65C69311185DE1347C407A3797EDC6D966297523F13
	AE443D2F05A5A44EB4DDD425F381848230F578903ABECF729D8A3809GAC96DE38DA9E8B75832AF465G0786E07C181A3D821EFD9F66516F738ED54173173F74216FEF19DFA95ABA6E2EAB040A33E9E9DAFBF8015999E92E81629E5EG4977A91F8CCB57CF9D164EFCF2C80FBE198CBC859723CF9CEB54BEA1EBF00DC0E7E52A22B67C5257C2E603FEAE5AE0857DC3398DD7E748ED18F8B133C198087552B5177455BE4EF744BA9933EC9E6BBB2A998E6E597C035BE4007C6A8722CDC179EA3F8CGDAB837E95D3C
	7E3695166F3573B05FE850194473BD592E15EF516F30EDEF1F0FF215006B7E9D4A25E6E949C5F23929DCEE8C60D2385C26B9DAF2E501A877E7834A5582AEA0105BD92DA59745655CB9A8B78EF06917205C658755F295C0EB3E84653E4AC5B98F60A2385C74F22D7CA6F3396738DCB260CAAEC539873335642C17E2BDEE4A7BE575F8D39E66FB9AF40E6479A6FB75AB12EF6225E86F6EFC1493AE03B8F4994A8D4BD277859223DC17213D23727B539744FD739572B1ADA65E28394EC647504B44F8F219FACCCB5EC7
	6270C84047DE06E35A0FBF1275C59C53F643A882C18FE603B8CEE56DA536433CCFCC4F5BCB722573BE8177D1D66DA7651E84BA138174C1D53AC2005AA04C633A3DBD6EFFEF6E76337F3DE38BD96B3786C9FBD5276177A0D9DA8B42009E2562998769F8950E6D8BDFC9472324A036AFBC0763EF24F84365921E35014FA91E244B0096F2B92E595F142D5E77CE39DC19DF7E954AB4130B7012DB2CCAD72864D80CEC33939F5331D9560C562D636F41629C3C71D3799C3C718A56F73B6199F4851EDD99359A67D7E1D7
	601E6EE587485CEC9224138174D7C2DB87E8G30838C3A926BB8E12F563CC5D9473EA6AD52BE97734591FD7FFC687212D37BB072CA259CAB779F5668C49D31D7E2BD664E6D1F8DCB3C640AD5E9E110D6BDAEADAC502EC73E0E40ECFDB483ED4D9F0436BE5BCFDBDF6F515686152D2CADCDDA2F55162C40FBFA9036253F66E3DB8A66F65EB82FFFF68E7712D35BB9EE10D63D0EE8C79BA6F39BFE185FBF9B8EFB4929EDA838CA4B0672AC34216CAA34C1EF681F8D0B3D6454B658B5ED681E03B68C60B60C69278DCF
	75E8C334268DA32A5106B8EEC3F7CE7FEC9868A52736A1E330D63BAD2DD3375BA540D78BF0E8B0365BB187091DF48EB3986DAC4A6D1F1D6B3C6454F6C68C5672D5C5B97AEA8C37A13E1FB63C55238DA91AB6A4E5238D062B5106303C7E59F00F171C5A067A2B35ECD84E7DE066B6B465774F06D6AFB9358D211AB644E7E13C9DF9B50E090F51B6128869142BF17C5B3C0F6CDB63BC2A41E9F3F8841CC3FD3C0F2C15B95D36B61B83F1E9CD845762F4534DD906DB3F5F773EF14DFE6DFD63ED7B35770D9B767BBFCB
	52345F573EB2BB7761246F6C994150C7G986E990AAB01F48D475DDBCBF0D6C887F0DCFA9D4185C3BA12639EDFCEF0E3A0BD09631EAEA138A91056DD033877CB892E8852B557E01DDFD3C26617CD1076G8483C4820C6774DBA9BD619A3616279B42567E16703E73F50956D9912207BCBD57C8759EA97EEE3AC65996880C5740C96D2BD2B38FBC5BA4BF73B4CBFCCE536077F52EEA91659F1B1BCD6B34234352C1A7D3E435C5243D6E4991B4767549262D007BB5CFE74F92F9B6FB1C5525824EBD5EDDC66222465C
	03AE6230FE9074A9299752468B07609ACE9CBDFB998469B00068A1686FBF2F76F76EB4EE08379FD91B3C66006F769FFAC03B7D5FF2005854616CF437D854EDFC5801FCCE13E61BF59ECBBBF18B6339074AFBCC6EB60BD79F99C565994D177C68833E7A917379F5FA394FD77076F2479A390F9240A7A9B23F682F7576915337E32EDC5FCA2E6F098C393EA5A0DFAE53D16FD31FFE1EDC9FB92F446A5B30C1A7365566EB313EFFC75785C2A09D8990FBAD56F72CD7EC15C33C4F3C6394F92F62E5393F5D1F3EA41F7A
	82674B752D667A56E77953278B7125EF2BC12EEF8D5777739CFF7A8AFC6A7B2FC2DF39D45EEAFF7ACAFC6A3BBBE736CCDFE9894EF3864F174FF3EAC2581A1C8B1E83C2F01EE32B437E9C9A02753BE0BD29DF613AAADDBEC049F5D83FE38F2A6D2B3DCE326950F53E6CEB491517F7ADAF6F26F2FF65F57954171727A8EFA96A7B506B5DD98E83FC6AFBDE29EF856AAB73EBDF08CFFDD766AB742DC4FD7F646DAFC2C3B686F0F1AABC0BAD638F12B507EE1E0E236993BC3F01DB48F861F1BA6D0DB697F9CF94922EA3
	5F948DB8A2F01EB73710F9065DF44259899312106B69783C955BC79124EBG6CG815733F642649E2DA5E5B159EDED8E321B31DF900CB79059D768F89F8F3CC957A36F42BA520EDCEECB2B456D36185911B1113F0C36B3B37CF65D007C1317ABF4B7A1EF8A1DA304426F489BF08DFBC497A9E32B5B548EE1F50F4B52A2F8C26937CDA5D806F860CD82B0G3E8C20B1947349DCC1E4C150565E59CE2DE279ACDDC17209863ED84E3BAE0F685AD6EFBAE23163E9A75E0E0F12F5E86F53D0C8BF39D3A9CB965911F667
	89B2BEF81D7C6275D3BA037439EDFBDA5CCE3B1D0C3725ECADF1E209FCADB1A91455CD7E0D38567854CCADFA510D58E72F7AD4BE9F2984FCA30075C67FEBE684CE834FA099DF18068CDB9B8B245FCCC45D48564672B8BE146227487062BAAF1DAF10F461CDD53A49B771F960EA1C878E7DBD629E22EBB2D3A02D9B0A38CC7ABED0G69B20EEBAAC759DA0EFBAD83E5C3B8EEC5A64AC6F05C4F19A89BB3947D36E0033C6F6BEF06F9A4C0794D4C8775B77B72453DF48D3B79E6D666EFB97EC90A0F116119AFAE27E3
	A9C99BEF29521D3E95EDFAA99FED1A9846674E6D08AB7C83629A3390574DF141F390974BF10FD7A3AE7FB66CD3ED1B491CD1E33EA735C28167810F4E47F90075B69CA7CE57925B07C2BA8AE07CED68BBC71DFA8E1CG34145B7C37B97D6D60635B15BC65102ED76118BF2F22E3D4736D4C1F199CBF14628748704C4F1FD1BCC907834D900EFE09276FF081108E6138291B50D791615E6DAB056374FA44558FC35CF64E974AF1A9340E92A12D3B0367318A798AB8AE0F7259A1BD608EBCD77B44C179FA3F7EFAFD9A
	A91756FAFF489D4CCFE1F7C86B7D2C6CC5DB719B4509C0538F477AAFEDD62CB512DD12F56B363AED66AAD3DBBD9DA9D85DBF35D5A74A578E473A97E85D87C0BA84A0F2B85A5B7D956EB5C75CF605D09F30CE733B4A78464F53E207B3BB9307CB768E1DB0AC7DB3011D7516FF944BE2640735C6F8728D9D0825AE2703EC13B46EEAB83C293EEE6B4E9D1BF7B6B2BB06F6497DD6BE7BAB1F7BA40591AC7F8A71997A6FAF4471B341AC65BDFAB9495BE169B2727CEBECB0EA110F218AD7162CACB2162EADDB665B7631
	A51FEB5BDE3FF9CB23E4BC6FEF73CA51679E30ABA20260AACB65311E68FDF99ADB3FE0F43702CE469B523FA5FA1802CE7C7423C27E99851D786BEBD11E79743125D837A90F058A767B8AFDFEB31BA47AB27FCE76ACF9608BA1FA1BEB9A736B6ED649AF1FACDF6C5B2F25A56056923EB77FEE2B0F77D3BA62B23FE5D33F11713E61CE1C634E52A1AE70CE3EDEC15FE3E3A09D47F1AB8A88AE995299F7A1AEFA11F7FC78A74515GCFA5672B3491DCA3246D9CB75806FDBC60AE0C0DD750B960F8C8CF81483F9B4694
	00A600G00F00071GA9G0511B0A70BC439DB281C995283G42G46GCC86C89F81F1F384BBAFD383CF7388F6B6CADCAF4C0C54289F12AF2D473B1531155865ABBEB75D6DCDAB97F124ACE8AF5282E47C619A32EA98AF63E136E7E7E9590EEBA96A6F413456D1903456D3F07D0534AD7CE686E9726F48545F18E941DC596F2891F4DE3A3A468F7FF4515ED962F3G4804G64083488787D21A0FD73B3DFB8E1531EAB3FC167C742BDB0265D03F358A14734676C2B6958D483FCCDG4CCEE7F9CFF6222D54CE108B
	81D80AF6426F91221DAC0F6CCC34A78A00618EE6E23E89BC5F604C5E788741F02FB25FC2C87FA115654B7ADA89DD27A883FC7D3D587FAE2438E6C8FBB8AE351260C2A09D49F13BAB311F0E39977B4D28DC920B8DA3617D972081408590849089B09EA091A063BE18EB83B482F48304GC4820C871882E0383FCAD781508C908890FEBF6A1FC0750F3B1F1DA7A4E785936FE7E777B27E88BA7F484E7B5543538E90849081B08EA0710F6C4CE0C694BB1BD794454E5E55C73133F5CC7F55B98D29BD375B5EGA9A76D
	637731B248E92E11BD77EBB9142878A3E5E90368CF624BF0B19F62DBB93FC115FF10A8BF7EBEEDBBC2C4BC2D13112C0E34781A6F7746B748EC2B90694C37EF7CEA3E4538C166864BD434D9FD54257E1ED69E43D8DCE0B16EDB911723627FD215461879190F7C709BBCB247A0B152577706DFEB60645F7AAE951FACAE3C1F6FAFAE4C9424EF8549538EEDBEA0CA0A1B41707B7929D32726F2FD135BFB52B7DD26F728CA5FC8787D1EC25F312C1E74E54A7445287445F9699BBE27A7FD593272462B74A5F917373AA7
	FDF3E57A04D1CAFD06D112BEF1BDD9315FED84FA99C06DA8569F8E0D72759EBC053E9F38C6296FEF78083DB70CD25F5FF0E1AD5E5FB088E8C923B0B68F226BC6CD8FC09CFCGF1595B89EE902443B92E196222A1BD1163CE9B68FB9724537F04383F9B78FBB0473D1DC3F09510EE7C93464FEB695986AB2483GC281E2G92GF45148F39B65A1E7428A81D78BE00DE6672A49F9AF4633F4FD334ABFC40FBCED9575933D08CB7813F61C8A700197771E3C72D24710E932B62A6E67BD4593E5AC9938DFFB0EB16B90
	71E5A014A5B49A477A5C2A3E4CB1E22315E37DA4C87FCFE0E3FDEF66ACB385966BF0EE15902DEC63A9105E215077353EA7FD338429CF6B9ED46AAB00743B0ABEF824C77B664874952A74D54874B1DF4F4F763D2EDAC47767EBC12671C16EEF3FF3CFF95E84829ED44EBD03A17D23A01FFB566A697A2929DB35FEDAC957AB0682FF440338A7BE153E5B31F56A58A3248E771A0EEA1EDE5F862FF03B0E9C3534F89ACDED3C8D8F5A5A3FBBEEEE6A275C04BE4B31B8662171EA6203AC0E25F27C4F94BFD906E771EDC6
	AD2E41CCA1F575E77457E7D692C322A09D871088107E97189382D47E055F4D50D2A274F0262E51692A379C3758E5DB7CCCFFB5FBAF85DDAE2E2F2965DBDF758248863753E5F1FBCEB0AC7DDA886FFAAA6D5FBDC28F4D44F503118F8C912286A6247A7A7EE050DF44791A780C0D7A0262D9D9220E92DF4583AD85409883F196209E409C03E57B4ED244FCC54C5F647118DA2C74AB8CF49479B0C2C2130D84D6B60322EC5D20AF88E0A840C80058986F384B6432F4F239C940B785A07DA198DFG0A9E7235C7746827
	E4BF660853CDB71A59FE4C4B7CECE6A548B5818C8288FB080DA762770D855E7BB84D85A8977D905B470903E702C2AEE59179EE2B556970303EBBEFB1FDCF9B8DF36E5148334F47BB261336218A60EB980DB1E6184DDF0C41F7DB0C6B81A097BC1A45F4D26F61707BBF0A98E7F31035A7361243BE382869E4B799B17A3D27C99B58D63D47E5F348BE27C4A62E47F2F29E573343666874D8BA2A2D40057426AAF5BE8DEE1B53ED731CE07455FBB573C1A61ECF7B4685AABD62171DBBBB5B0F5033830CEFFD238FBE76
	85A8676B4CA473E83FDF0BF25E7FB5AE5632D1E5G63DD30D54F7317BEE69177D1BB668B32BDA909ACFEF778C216FAEF0934271123F16F6958DAB9BDF6B42327F07AFD65DA727A3FA2FD17A6FD892757E6EA69AF6774591A7655F37AB2CD7D4D1C7E449AAD7D9ECE0FDA23A59F88F46FF55EA99B3556FE59FA67DDF6C140D878F28646420261D78AB59392D23F9434E3E168DF4575713FCA6B63E5DFA7CF773D461CDA5E5BB5E65FBAF6149B35F5A856587BD67EAF9D127E2FB2FBEBA363F7E776579E1677962714
	77568D5A716DB0DDA7DAB2866AF78C46426BB6F84759488D98E72DE3D81C8D00E7709876DD88134B2F541E971750B52688600D9903B154D659D38C153F6BA6021C703094C38D707BA5C58C9DDFC564D8DF472BB210F6ED2EE27FD9A20B74B7764D135379AD97C83F47194DF5CBC4C6DB36A1CFAE2B3C15C164F9E40694F7158C62792355B25B452BA5B06F1CEA256D1C0CE79BE43A45EB909AAC6E96F0BF2327CDD747F48593573338B6D745C7AE8EE017EDA0CF7E7F66CAF94949A27D466FE789327107637F3EDA
	1213DD5F416917F69B64E51431B0FA740CBCF599252B9EC49D95D91F4AF5F83309FC2FAE4DD116211ADF54406D39F617D2177AC68764BBA3AB973FEAC1D62E1DDF644A75A8EEE3406F5B8B7254F11674A763437CFB33DCADFA99275F35C80BDE4B69CB8CDA74C31C7E7F76EB51DD1CBE73BB75B8C16883B87D9B0396BD04536F4E54529F4169E52B3568B11C3EDDD3BECE324FEB1CA37484CE5F6CB5CE92FA8A2737FB0DF3042EFF242F635C99F21D244658023178661F7C538FF77827DF6871CF7F833922C65C8F
	F80D1ED7D882E528FF046F519970BCC8B347859970BC080763EE4C43B52240C7F09D677DDAFA579DCF8BF5A4CD3EF7E16940DAFF775091393E3CB7E93FEB5C6CB78FFF7BDF3D8156DFEF2F739E777E4C3F17C8FC040DFB69FF03771B3F316FFD44F1FD3B763837012E4B15GEF4D5F7837405BFD2FE78C227CAE60BD4D792FB6E80F5B43E95D0583DFB4GBB8F76CF833795F0C2AC449100CA0066D854B7A3D77BBC5862DC3A578BFCC11C5736171E4B22A720EB1D643D1A61079F1546C3FE7D0F6843532EDCC196
	6B4998335BE26E94AFD591632B0B3C2F4A469AAFC6463745269817252C70DC82FB5F217631497B8E0B47CA86A45637CB3355FD1B54D9D4AC76FD27A6FD9C274FEFD647B6C20F0F550A8DE8D352A62370CB66EC7FA057AB7969676FF77927AFB8611F9EF01224586FDBCF496CDE6567ACC2D9C911F185B90B60DB6F2453125E59E7A43D772C690DDE5647CF5692B9767BA2596F8C3FFD7F170238D6FDCE73E06BB305D65FE77B17DB354F762F32EAFF5B723D557F1D0855D65FF7A2EE33FA5F09D8EB4B126BE3CBDF
	A2ED170D7483F29F228D8251C93A683087989DEDECED6A39B3041E847DC2BF9666A6G35G0746623A540B36AF843AAE2531A635595CC63ECBA0B7BEFBB03F070E7A76D36C511E6F09FE72A80919C71C9E0F331D68C77C0423242EA100D0A443CDBACA7C6B3635D9BD0CD5443FF2141EC73334D2B49B9B3F2567EB3A21DC01E3F13CBCE243F1B51463C6D2DCA424E3B86E6CB19CEB47F15C78E3B85646F35CD2FADE2764D1085B0FA26E56E64C2311635E26B8AB243BB92E5104F98C60385F1BB00F10C7715B7DD9
	8BF13FA981F0464770CC5C6B0B48BE2C569DA75265A60DB60F5DD2A5AE5D096735FED80867351A9E43B3F2E7E99E03A09D8E907398669DD8404F6381CEBF8E4FA9BDDF404F590DC39D3396517DB2C807GC48230787262F4A93E1451362508AFDB406842AF4C50D61DEDDF949949B92A951A310B6F67587A3FF620B5A7441818C11A9BFECB120D5F9A440EC3FF1FD97D155C5F476CED45C7DBC8AFAFEEA523A279001D8F1128671635C48F11AFFA9CFD17C84F36104C4C9CB7301CFF5B40F1E7B3D1D678BB62B651
	FD8C92CB4AB92E399CF1219CB7231C4BBE01383779B76365CF601A7EC7B349FB3D8B52C1G11G31G13G12GF4632BF485GA5G35G4DG9E00C000D00088009800387198BBBE3113B669EB3DDEBC30C983085B443EB774DD4F47B774361ED9DB1D38815BEA8258E3FC924BED5C485B7B1358D6F7EE246D9D5261046FC9FFF3042D15C6EDBB7A314E04ED6D65D9D2DB5B130775B2115BBCA697F17A2790474E7291DCAD479DB4A0AE00632E590FEDA90A63B6FC076D21609F08B399905748F12FE522EC90479D
	DB0D38A99CF7F9A6665B984773606DBA0863CE73EFD147F0DC98EF07A9F1B8F77DF8BEE90FD6275BF6924201494E0EF5D7195C8DCE3B2D05CC12583CF78135F9A3C05953F8E64BE640F3DC9E0E3B4F006738421E46B52C11F9BD2DE161998B72FBBC48CDFE1A6DB512F4B27CDE84BF36CE63F1E89D61E77359D2318D3ED607EDB07D9918FFBE03E5AE5E464F48BE03ED7050B67AF79DA0BD86E052B37E5A600F5BFB5386D95B4A1EA3497DE4A0F23E4E822FADAFB2162DA971F396F83421EFE7016764E0B9131E41
	3340EBF354E701EFD51C65BD26204F9565A57A0D8ABA69B80B9472CFA86853E5724C9F6C93B1F1EF29420FBF4ACAD600BFD615ACE3E53152B10064D7B4816B71B60AA3739DB347EDEB46FE94BB816360ABE7FC4F097EF52667B951BBE708CE8B4CE5488A9643FDF006FE13ADEE30B0DC4A99BD4755F5B4B8BBEC52BAE5D529F29F2D094E070409D53A0C0958CF2E32E15F291808FD71B19B117300014CFF4D246B0B7D6F2EE3582F6C9331DF3DFE2CB7EB4388A132F319241EC2C04FFCC13E07DF21D35A3D1B4E31
	4200AF125BBD2E996D0E67F64FB0A96D3EA2CB327BE7935A2DFF966D3E5F54135D537D58DD81FAF0BFC4BC833C3027BD675AE7353E73DF54231C7ACE98712E7D9E655440767D5F25F3BD73336A73GA9946FFAD6FD9E6062059853CE83AD7ED9DCC73A2E20FF6798EE6F27DCFC1F6544F38EF4DEDA731C3A3C83A93E61B9F5F93397E1F98F81AD66B97E1DD53656BB671267D91D16BF2F3DEED68F78E6954D83694067355A426DEB7D15B194E4A2B5657E23787EF30C48B3D1FCA6EA584664AEAB57AA13B009719B
	A6E91729907095AADA83244D1334EC9B10692FCC5DA09324A937A5CB4B3621A26FC871992B121D8469A9AADC7A8BD53AFC002297546776AD1A652F94799A45277585253E53109E244205C1BA8AE01CD79EF37CFE1B9B8F7CC9AFE815BFC9713D3D6EC546D3A0BECBDE74F5A7C1164E775813236BF96CD92C53FE9FDF2273FE9FDF2653FE9FDF2E133F0FB3DC99FD0FEA03F700A64E37166376F35C862A136076594C9EAB4757D03B883E56C2B2647709D03B3AA82E8957C0E4387DA22ED1C746CFA8B2CCB3D1F6BF
	9BEBECF6BBCB7F0F72589CB01CF2FF9C21B65ADCA6195DED9C371F57570B9B7A9757927BA937F4E37F6261E87A6ED37322BA9EBEC6718DAF2A63E163C69E8F019673A23F57C6F1C74E121744B8A8BE6BDF7295F346AA6E77E99679BC62B350275C9B0B64F221A2DF24789C63D32ED9F17F53C411AFD1FC8A713E642E5F2F959B8CA2FF21069C018A40B728E8E6C8F747EB75716A6F7C55E190488C5514EB753A53CA8EA3C1A6D6D36E5F1AFF03E81248BB45C71952DF0678793212D684694A173572F02D564A23D1
	64353E2C1D47E9408FD25142A09D251947E04518B2CE6409971FC99AF9087ED644E25DABE2CC951FA52F78123BC0F19FC70D4857A4BE6DBE6506A9E2F8004897ACBE43B56458DC3644C06EDD115F32A97B523938F6576E3A833BF6B6EE2ABF3C27FA772E7A7A2ACD3B8F6F5C3CF773EE148F6875FB9B639F1CE754667F85EB9CA348B004B12E2EFFB16E23FE4A2D5C563F58B81E3E13C73F220E0D4FD2FC6CAB6A58F8E49B4646B820153F4A6F4B733A6F2DF7F637AB6E858985FD11GE3DE9567F32F7AEAE7433D
	66260940ABCC9667F113FD4C63GDF2122B5C05ABCD92B4F6DEA76BB0F8319A0159CEB87A5E45BCFECE7FBFB3D7E4B7843FB3D564B789FBE561BF64C6CF213E6AB5A38A0CF32715A663E5978EAF35FEC8CB6755E468A32C5AC5E1795B31F3C085B9CF61B43D24D7E02A62F1B8F97CAFDAD2DC07AFD5942F33F979776FF1047C50B24B28549FE67ACBA77F9971F53BC583E4F77F4DDE9A8741F48493897B4146222A19D47F1C71A88AE8152697FC45C07748E1AFCC897F2DC58C15CC72A60382B689D90C1108E6338
	BF2FC53EA80EAB25FC64EE875DEB08532D45BC8AB86E2995E8F389472DDC49736538BB4B11AF08633256E259C2B86E22ECACDB84473D3C9A730D6138D37C8E3EB80EFBF1B516ED496B083B015F15D24EF16C4E8BD236C00E33E621FD219CB7B68B6D8B6738CF68BD9851100E67385D2B5166A40E3BBE8BED56A5A0EED4935AD240F1333351E6BB475DCC574683A0BD1463FEC7ED9E8969B19C47761008FD63B9EEC1B65AB719634C5C27499CF7E2955A1771AFDE675C27C60EABAFC77BDC9C37BD4B5B3EAF78BDA2
	83B85F8B996867B80E1BD30E79A6F0DCAEDD13CC01F4469B3CFECBD1DF7E9B7C3E360DD21FFFD2767B4046F35F7FBB4EE99E625D15F48F488A656D66FED852C57D8F69D00E3B248BFD934EF171F42FA899523AFFA36EDD7A7EDDG69A20EEB1A457B83472552EFAB82A19D42F1436D84978169E80E9B62C659D80E6B22FBAC790990F79291F771A9022B00F4BD473DF18AE51BB8AE1A6ED105C3BA0A63BEBFC0F0E3A0BD09633EE2ED815299EF723BAF56931C9152A59CF7418C4C230663EE20FF8FA59852919CF7
	60BB640B6138BD958427FF8B4A71963FE709FFFBD941F183D90C01F49847E5527E908569D80EF3D3DC9C2493B9EE9B15955E067E7FB662165178D48269CA0E9B358F73ED6438B62AAF8C52519CB7186A9B8F69F80E7B006292A11DBE05FFEBCA734807F49947B5527EDF8B69A60E9BDB0C795AB96E8D2AAF9A52F19CB70C6ACB00F4B247FDC4E3DB46FF20EC7FC15C617D282F10638E507E5F8D69C00E3B015D1F8669880E93F8AC0A6238906A835DBB90935EC1DCA14D238852959CF7B94F371663E2E8CC8D01F4
	B84719E83B0A0674B80EFB04471D096FE05CF9E61B94EBDE127D36EEBB77F16702F31A87AB73GBABE943E8BB161DD7403137A105CA3D34FF1B194578CE99747ADBD007EBA4DF10FE7236CB80E4B277309F8C8CF61381FA9AE855206A49E0B683DDF05102E6138A67A37121AA0ED6538C72CBCDF0EFB110EB763A0BD1963DA1B11AF19634E2653367FDE152E79BD5CB75A1D2D5CB71ACC362245397A9F33353FA7FD02165383BA82381E93CD3E4F0A8E26FDA482F823B83F3EC4394F7595ED771301BE65BD5C237A
	5341BE6DD1496EE621771C3CDF257BE06A5429193CBC61FA6D7324B134BE0A003F7CFD4C7B6935FD7996DA1D379974348B6CCE8516C7B34D438578536F63BEDEA91D8706C3FA647BF8DEE8A6FD17E1B63C525C1BBB91FC59B099F41272FE8CBEE03A3F216FC6AC6FB5EC6E8BBCA95C1E88569FBE00F8798162E65378518CE97B87681B41A57E6C1A5503DD212067F531DED89EB3E99E61009F497338476F3DB3F3FA48A39E747C20703F07465FC440A7FF003E5E31C87247BBB446AEC906F1B5995BE84EEA32DFA0
	1D4BA09F7D61AEB37FDE080E934416C3496833D394978869E00E7BAB559F8369F149D84671CD3DB913612B0CA92067F6059FD7527A53FD88F165C3ACC3541A790AB2EC425359224CD3EB507ECAAEF3D339B2A63896CBFE4A216D468E3C5D9FE2592A32D1C79847DDCEF163A1BD0963EE21E32F6EA3306FA374C1ED0FED491F8FEAC04FC56237D5AC8F932D6786409F62F92C6D716EA4FFF984FE246E4BB368BCA09870C3BF42321551FC47C1FA62C768476FCA15FE3C7AB329EF8FAE6D53398115CD3A7F32B19A6F
	CE18AF8C4CD34653D0BA27B6G1F713FE84F77DDCAFB6EB7CA768C6D6A4BB7EE81327BCD08BD8D10476D027C9C438739CAFBB229BD07004F4A6D19BDCBB576FCAE59631C551B586F4B1E107FCA6793446F4196AB6DA926F37FB0600B64760C36AB6D197925E44F1D6E1E6C196B471E787F32B30712BDD79814760431BBD000AF195B93FACAE94FB7CBA4FBD2CF77E4CF369FFB8AD32AF4F395767CE33FB22F9D642807C8ABBF20BD8FE820F320B250D51902B62FAF75BD8F58CB6718F6606D667CF56B15FEB8CC5F
	EF42009E19027DB7E4C6DF4E2EF9799E74ECD614751E9F3567810F52F726C460CF66F97F74DDEFE2072F3C17FCDC255BA530584172BEDA216D4B8B69FBD88970D7FC4C6FDEB37469FE90D55ED62F3CEFDC2D1D77FDF43C72GFF4047D8AFCB32146D6154D7D2FB38A4CBDB4F4DF40C0BA076F3BD26553E5B43C91A6FE4601D4279ABB3156DE1AF3B877893F8177A040F1B7BFAB3E6782A13A650732462FB5CB3D95A6DE188AD0F9978DD1F20FD43D6AB7DF2535712DF3256E87B65ABBA4606020EF02E27AB534F37
	D5344CF1409B4F790F2DD27A6582BA16E6CC05F74229681778E2FFFE115FF7256517DA5063D478A5F50D36DF965072B482FF73D434AFC6D5EF4F50B28481BD04734CD54518078A096F186D4777775447B37D54E9AC6431CA5147FFAAD75A4356916300AF1E5BF34FF2557833CC32A74F6F3C04497B36C7AFD46BD6AA6C39BBCBE94F4334ED95GDFA1G635928724F4CEFA5FB42FA744FACBF76B4C19E1FAB6C1930C6E94F1B34CE4D40676276F42B66AF2B0AA4FBDE68F17EB247CFDB9B8AF9E4AA6C39A1DBE94F
	88BAFF0CG3EA8G063B093E0713BB2B92380D93D4BEEB7ACE32316240AFB963E800D772D9027C4E4C7733B1FFE3AA663FDC2F4CFFE031404B946C63BE26887AAED88FBA1A381E7CEA5F7120142E8D8CG5EC11C5F39C0692F0B69DAC1B450E38144BA3276697DC2D57EE450F3CCD1C76FE5E84703CC5A5753532AF57AB44C7BE73F6F2EDEF3EE757952B41637B4F68DC9577665DDECCD83789B81D89D8CDBAE55413EA6B26976F9EFB1398F3AEC19388FBA21C412FBEBF96F654A16C8F2A187FB3BFF4AE46955DB
	626F0BE5E36C4E353D4FBF7CEBC947E305B2DB4AFB73BDA313DB712DA477480A3E156147A2A97F6E6FA4BD5D593DAF43ED32FE734C6A5E4BFDD9AA49B9CB7AE6771695125D3615121EEFB3FB1FFFE41924639F2BA49DEFE6765E776F2F16645EDD65AF6FB2B1EF463B157AC9FECEE68F799FBFD16C20FB703847DFAE65F1E5D6EF72903F41DDA7495D5954B77F5E753D641BA7ABA4BDC356743E0C7FDA537BB2CEDDAF651165376DA973581F5D7BBC3E58A8656168D5DDB13968AAC9EEE99F5B69CB55129F47EF16
	74D476219E5F5DA269482D15F45C502BEF1E19DC60B6C9EEF6E95F4AF07FF6A97F15BBA5BD79DDFD53E35AA569097DC152733A2EEFFA7E3DDB52E37DD15273FBFB5F748C59AB69F927C952F362D45F74988FC8FA2A8FCAFA96167A2B63529572BAEEBDA449FD3D3E77F26F4A6E796F1C51B73BF32D125DEBED121EB70AFA1F7F2123120E3347A49D19065E374DDB6C120E075BA59D037B9007939C125CC63FE310527EDC17A437586F5821147B59AD0B2D7B7A6677619DD2F91F75C8FA727AE0774C63125C0FFD30
	7B1BAEC92E4EEF8CD44A0DBAA949BDD85C3772CEBAA515F76AE9C9CFF19F6CEEBDAB493D554731ACD810721FBBCD52F365723E69A9CB17743CB1C352D3303FEFFA681F9D92FFDFBADBD60FFD0C4BF74E11744C4A127434745A9E46FF5FFE23505BF3FDC55932BE2E6F3D5C813DA477FED59F7A59DCC9EE47025E4B3DBDDF12FB405AB73FAE4A117CDA19AB337BF06F73F764C9BA2E4A17F4388E76A62665D15EEF0D37C16E91EF8A53A1C8F43805F95EA21B2EF8F6C244619AC31A10D6A74C30524FC66A0469DD64
	7B13EE925AC643CB59720E1F04B3745D0CB4365920A91BEB2A23DF0C449FDF39EE5A2B37CECB9352C18D7B0226CEC8A71F4100B6B753BA4D63F4D11DF81218FC3D2A233AC947C893583F8B49EF0ECD15E1D395D8244C7542AED2E890E4D8ED8D5AD825867246CA368426F3ACFE3B39DCB337458A3D5ED8ACFFA16779CC6615F4950FDB48D4B43D07EFDE755A389777F6CC93E654898B48CA409E0B1BDEFAE2B113BFB43B5762A6353BC51865A2FF5D183CB3C3F5F45047748E4F893B25DEB0346E367C54E96970D8
	4C1B70BA158E0F10D3CFF2DACEEE51D8DEEB6A30FA48A7D25F578B698ED33B45A34CE3E43B4951361C5D2D72BD2B53CD1534147413E330F7BE3517E8A966DA667FA9FB69675BA6C7CD93523688336DCE13F90B294563F4578933BCD63725436A341B3BDD9B19A29DBD70C59712C05DC2DEFCD258E2329B4B0DBE56FDE3D0E6C26696E8C05DEEE1B965A40BB2451C03DC3E6A062CAC6EBAG93E4390453AED86C796A712DF9075204D431104475395DAE8FD865B6B9BADA1D6EF630402832GC9DCD17155E3CB2E99
	7651812AC89275881FB117016872B60B33FD792656D61B434295007FC07DA22E1E70942BF866F5DF15336D6929C7203EEB04E96DA5A5747FD27A7F8A72FFA94514D2CC698AF06294416FBFB53D1BB638CFBD2C11709ECE2A39F88B54146739B7475E72FC4514C4A85D96E17AF1F26D8EB8DBAFF131ABED87C6DC33E8CEF07CE524AEDC24C9205E992D26F61B7D847C2821C1331B603F69662D1F3C96101521DCC59F43B53AAF64FDA2759900ABF80AC428419EE1B679F30DC672279E57E102FCC13E0E6B427EBD1D
	77D703D73BA558FC6F86C850851438187E7FF91F5DCB243E2432CBC90664C7215297EBA4DF10924F90A5271DFF16EE10AC1DA133948699BD3B5D4C08B7BEC3CD4CA8EC37B90A17C9B43C2599E85962ED48C656F66498F61BB241109B0F0D9E271109133AA577229A49452810487D5268ECB5321BCE0D1BCDADD6A464D11C115FE0EAE4D72E8145C0EEE8B7B94C465D168E8BF918BCC4C0AFDE45E994AFF983D4A63D8653486E791417A5175E578931CF249969D519CCB7D3C2990C74C6CFE2A5D3C4390C64EAD456
	B4BDC2568ED337D1A4B285354EAED2DAF2FD1CD1D48668052CB455A6172985FCE764B75099172E63C385194135E9244E2B46F3C0594CF1A3A0D543EE64C9756211864E732AEC66EEC560A2939A127F745FD68D35ABEB8837C1FA2A2185BEEA88A52E54C81DD765BEA1151BCC4530E52677D80A7338CC97C9E5A2DB0033443CF59AF64B27204AF21F273D6DF229EC84303EF4671F2541122564B5E206E8693C734F529B14BEC5CBE71CFF165E721B31F41836254AD1412511BA2FCAF1CF6FCB0193ED3252C3A2CE1A
	0F975ED499E8717CE6FC9323748DA973929F3E794D1469D1E51948DCA647C7194EAB3B1F72FE0D125A69F9E569331225B92225443E19671F25713F991F3E2E1C0193CBC994BA8FDF225FD2DACAD6295788D87B3F19A87101F2E6B3D774F93A065D98C9885FF502573B827E6D1DE5E765FF93BE796219BE7FA6FC7C02EAF6670978A4FFFB075D6D1AD9C81CD072E9352E9EC03C5F68EBF2B845575F395B53EE325BBDA67B31CD8EB3791BF7D5A7BC96690E6AF905C4FF877208C4C6DBD0C86CBEAA13797FD0CB8788
	5637209DAAB4GG3C3AGGD0CB818294G94G88G88GCDDD78AC5637209DAAB4GG3C3AGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGE4B4GGGG
**end of data**/
}


/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private String getChangeCondition( String change )
{

	if( change.equalsIgnoreCase("After a Duration") )
	{
		return LMProgramDirectGear.CHANGE_DURATION;
	}
	else if( change.equalsIgnoreCase("Priority Change") )
	{
		return LMProgramDirectGear.CHANGE_PRIORITY;
	}
	else if( change.equalsIgnoreCase("Above Trigger") )
	{
		return LMProgramDirectGear.CHANGE_TRIGGER_OFFSET;
	}	
	else
		return LMProgramDirectGear.CHANGE_NONE;

}


/**
 * Insert the method's description here.
 * Creation date: (2/8/2002 5:37:00 PM)
 * @return java.lang.String
 */
public java.lang.String getGearType() {
	return gearType;
}


/**
 * Return the JComboBoxLatchCommand property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxControlStartState() {
	if (ivjJComboBoxControlStartState == null) {
		try {
			ivjJComboBoxControlStartState = new javax.swing.JComboBox();
			ivjJComboBoxControlStartState.setName("JComboBoxControlStartState");
			// user code begin {1}

			ivjJComboBoxControlStartState.addItem("OPEN  (RawState: 0)");
			ivjJComboBoxControlStartState.addItem("CLOSE (RawState: 1)");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxControlStartState;
}


/**
 * Return the JComboBoxCycleCountSndType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxCycleCountSndType() {
	if (ivjJComboBoxCycleCountSndType == null) {
		try {
			ivjJComboBoxCycleCountSndType = new javax.swing.JComboBox();
			ivjJComboBoxCycleCountSndType.setName("JComboBoxCycleCountSndType");
			// user code begin {1}

			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_FIXED_COUNT ) );
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_COUNT_DOWN ) );
			ivjJComboBoxCycleCountSndType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.OPTION_LIMITED_COUNT_DOWN ) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxCycleCountSndType;
}


/**
 * Return the JComboBoxGearType property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGearType() {
	if (ivjJComboBoxGearType == null) {
		try {
			ivjJComboBoxGearType = new javax.swing.JComboBox();
			ivjJComboBoxGearType.setName("JComboBoxGearType");
			ivjJComboBoxGearType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJComboBoxGearType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}

			ivjJComboBoxGearType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.CONTROL_TIME_REFRESH ) );
			ivjJComboBoxGearType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.CONTROL_ROTATION ) );
			ivjJComboBoxGearType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.CONTROL_MASTER_CYCLE ) );
			ivjJComboBoxGearType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.CONTROL_SMART_CYCLE ) );
			ivjJComboBoxGearType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.CONTROL_LATCHING ) );
			ivjJComboBoxGearType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.THERMOSTAT_PRE_OPERATE ) );
			ivjJComboBoxGearType.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.THERMOSTAT_SETBACK ) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGearType;
}


/**
 * Return the JComboBoxGroupSelection property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGroupSelection() {
	if (ivjJComboBoxGroupSelection == null) {
		try {
			ivjJComboBoxGroupSelection = new javax.swing.JComboBox();
			ivjJComboBoxGroupSelection.setName("JComboBoxGroupSelection");
			// user code begin {1}

			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LAST_CONTROLLED ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_ALWAYS_FIRST_GROUP ) );			
			ivjJComboBoxGroupSelection.addItem( StringUtils.addCharBetweenWords( ' ', com.cannontech.database.db.device.lm.LMProgramDirectGear.SELECTION_LEAST_CONTROL_TIME ) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGroupSelection;
}


/**
 * Return the JComboBoxHowToStop property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHowToStop() {
	if (ivjJComboBoxHowToStop == null) {
		try {
			ivjJComboBoxHowToStop = new javax.swing.JComboBox();
			ivjJComboBoxHowToStop.setName("JComboBoxHowToStop");
			ivjJComboBoxHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}

			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
			ivjJComboBoxHowToStop.addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHowToStop;
}



/**
 * Return the JComboBoxCycleCountSndType1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxMaxCycleCount() {
	if (ivjJComboBoxMaxCycleCount == null) {
		try {
			ivjJComboBoxMaxCycleCount = new javax.swing.JComboBox();
			ivjJComboBoxMaxCycleCount.setName("JComboBoxMaxCycleCount");
			// user code begin {1}

			ivjJComboBoxMaxCycleCount.addItem( com.cannontech.common.util.CtiUtilities.STRING_NONE );
			for( int i = 1; i <= 16; i++ )
				ivjJComboBoxMaxCycleCount.addItem( new Integer(i) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxMaxCycleCount;
}


/**
 * Return the JComboBoxNumGroups property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxNumGroups() {
	if (ivjJComboBoxNumGroups == null) {
		try {
			ivjJComboBoxNumGroups = new javax.swing.JComboBox();
			ivjJComboBoxNumGroups.setName("JComboBoxNumGroups");
			// user code begin {1}

			ivjJComboBoxNumGroups.addItem("All of Them");
			for( int i = 1; i < 26; i++ )
				ivjJComboBoxNumGroups.addItem( new Integer(i) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxNumGroups;
}


/**
 * Return the JComboBoxCycleCount property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxPeriodCount() {
	if (ivjJComboBoxPeriodCount == null) {
		try {
			ivjJComboBoxPeriodCount = new javax.swing.JComboBox();
			ivjJComboBoxPeriodCount.setName("JComboBoxPeriodCount");
			// user code begin {1}

			for( int i = 1; i < 49; i++ )
				ivjJComboBoxPeriodCount.addItem( new Integer(i) );

			//default value
			ivjJComboBoxPeriodCount.setSelectedItem( new Integer(8) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxPeriodCount;
}


/**
 * Return the JComboBoxSendRate property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSendRate() {
	if (ivjJComboBoxSendRate == null) {
		try {
			ivjJComboBoxSendRate = new javax.swing.JComboBox();
			ivjJComboBoxSendRate.setName("JComboBoxSendRate");
			// user code begin {1}

			ivjJComboBoxSendRate.addItem("1 minute");
			ivjJComboBoxSendRate.addItem("2 minutes");
			ivjJComboBoxSendRate.addItem("5 minutes");
			ivjJComboBoxSendRate.addItem("10 minutes");
			ivjJComboBoxSendRate.addItem("15 minutes");
			ivjJComboBoxSendRate.addItem("20 minutes");
			ivjJComboBoxSendRate.addItem("30 minutes");
			ivjJComboBoxSendRate.addItem("45 minutes");
			ivjJComboBoxSendRate.addItem("1 hour");
			ivjJComboBoxSendRate.addItem("2 hours");
			ivjJComboBoxSendRate.addItem("3 hours");
			ivjJComboBoxSendRate.addItem("4 hours");
			ivjJComboBoxSendRate.addItem("5 hours");
			ivjJComboBoxSendRate.addItem("6 hours");
			ivjJComboBoxSendRate.addItem("7 hours");
			ivjJComboBoxSendRate.addItem("8 hours");

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSendRate;
}


/**
 * Return the JComboBoxShedTime property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxShedTime() {
	if (ivjJComboBoxShedTime == null) {
		try {
			ivjJComboBoxShedTime = new javax.swing.JComboBox();
			ivjJComboBoxShedTime.setName("JComboBoxShedTime");
			// user code begin {1}

			ivjJComboBoxShedTime.addItem("5 minutes");
			ivjJComboBoxShedTime.addItem("7 minutes");
			ivjJComboBoxShedTime.addItem("10 minutes");
			ivjJComboBoxShedTime.addItem("15 minutes");
			ivjJComboBoxShedTime.addItem("20 minutes");
			ivjJComboBoxShedTime.addItem("30 minutes");
			ivjJComboBoxShedTime.addItem("45 minutes");
			ivjJComboBoxShedTime.addItem("1 hour");
			ivjJComboBoxShedTime.addItem("2 hours");
			ivjJComboBoxShedTime.addItem("3 hours");
			ivjJComboBoxShedTime.addItem("4 hours");
			ivjJComboBoxShedTime.addItem("6 hours");
			ivjJComboBoxShedTime.addItem("8 hours");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxShedTime;
}


/**
 * Return the JComboBoxWhenChange property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxWhenChange() {
	if (ivjJComboBoxWhenChange == null) {
		try {
			ivjJComboBoxWhenChange = new javax.swing.JComboBox();
			ivjJComboBoxWhenChange.setName("JComboBoxWhenChange");
			// user code begin {1}

			ivjJComboBoxWhenChange.addItem("Manually Only");
			ivjJComboBoxWhenChange.addItem("After a Duration");
			ivjJComboBoxWhenChange.addItem("Priority Change");
			ivjJComboBoxWhenChange.addItem("Above Trigger");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxWhenChange;
}


/**
 * Return the JCSpinFieldChangeDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeDuration() {
	if (ivjJCSpinFieldChangeDuration == null) {
		try {
			ivjJCSpinFieldChangeDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeDuration.setName("JCSpinFieldChangeDuration");
			ivjJCSpinFieldChangeDuration.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}

			ivjJCSpinFieldChangeDuration.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(3)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeDuration;
}


/**
 * Return the JCSpinFieldChangePriority property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangePriority() {
	if (ivjJCSpinFieldChangePriority == null) {
		try {
			ivjJCSpinFieldChangePriority = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangePriority.setName("JCSpinFieldChangePriority");
			ivjJCSpinFieldChangePriority.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}

			ivjJCSpinFieldChangePriority.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(9999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangePriority;
}


/**
 * Return the JCSpinFieldChangeTriggerNumber property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldChangeTriggerNumber() {
	if (ivjJCSpinFieldChangeTriggerNumber == null) {
		try {
			ivjJCSpinFieldChangeTriggerNumber = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldChangeTriggerNumber.setName("JCSpinFieldChangeTriggerNumber");
			ivjJCSpinFieldChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}

			ivjJCSpinFieldChangeTriggerNumber.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(99999), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(0)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldChangeTriggerNumber;
}


/**
 * Return the JCSpinFieldControlPercent property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldControlPercent() {
	if (ivjJCSpinFieldControlPercent == null) {
		try {
			ivjJCSpinFieldControlPercent = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldControlPercent.setName("JCSpinFieldControlPercent");
			ivjJCSpinFieldControlPercent.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}

			ivjJCSpinFieldControlPercent.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(50)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldControlPercent;
}


/**
 * Return the JCSpinFieldCyclePeriod property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldCyclePeriod() {
	if (ivjJCSpinFieldCyclePeriod == null) {
		try {
			ivjJCSpinFieldCyclePeriod = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldCyclePeriod.setName("JCSpinFieldCyclePeriod");
			ivjJCSpinFieldCyclePeriod.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}

			ivjJCSpinFieldCyclePeriod.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(5), new Integer(60), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(30)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldCyclePeriod;
}


/**
 * Return the JCSpinFieldPercentReduction property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldPercentReduction() {
	if (ivjJCSpinFieldPercentReduction == null) {
		try {
			ivjJCSpinFieldPercentReduction = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldPercentReduction.setName("JCSpinFieldPercentReduction");
			ivjJCSpinFieldPercentReduction.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}

			ivjJCSpinFieldPercentReduction.setDataProperties(
					new com.klg.jclass.field.DataProperties(
						new com.klg.jclass.field.validate.JCIntegerValidator(
						null, new Integer(0), new Integer(100), null, true, 
						null, new Integer(1), "#,##0.###;-#,##0.###", false, 
						false, false, null, new Integer(100)), 
						new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, 
						new Integer(0)), new com.klg.jclass.field.JCInvalidInfo(true, 2, 
						new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));

			ivjJCSpinFieldPercentReduction.setValue( new Integer(100) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldPercentReduction;
}


/**
 * Return the JLabelChangeDuration property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeDuration() {
	if (ivjJLabelChangeDuration == null) {
		try {
			ivjJLabelChangeDuration = new javax.swing.JLabel();
			ivjJLabelChangeDuration.setName("JLabelChangeDuration");
			ivjJLabelChangeDuration.setText("Change Duration:");
			ivjJLabelChangeDuration.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangeDuration.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeDuration.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeDuration;
}


/**
 * Return the JLabelChangePriority property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangePriority() {
	if (ivjJLabelChangePriority == null) {
		try {
			ivjJLabelChangePriority = new javax.swing.JLabel();
			ivjJLabelChangePriority.setName("JLabelChangePriority");
			ivjJLabelChangePriority.setText("Change Priority:");
			ivjJLabelChangePriority.setMaximumSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setPreferredSize(new java.awt.Dimension(103, 14));
			ivjJLabelChangePriority.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangePriority.setMinimumSize(new java.awt.Dimension(103, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangePriority;
}


/**
 * Return the JLabelChangeTriggerNumber property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerNumber() {
	if (ivjJLabelChangeTriggerNumber == null) {
		try {
			ivjJLabelChangeTriggerNumber = new javax.swing.JLabel();
			ivjJLabelChangeTriggerNumber.setName("JLabelChangeTriggerNumber");
			ivjJLabelChangeTriggerNumber.setText("Trigger Number:");
			ivjJLabelChangeTriggerNumber.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerNumber.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerNumber.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerNumber;
}


/**
 * Return the JLabelChangeTriggerOffset property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelChangeTriggerOffset() {
	if (ivjJLabelChangeTriggerOffset == null) {
		try {
			ivjJLabelChangeTriggerOffset = new javax.swing.JLabel();
			ivjJLabelChangeTriggerOffset.setName("JLabelChangeTriggerOffset");
			ivjJLabelChangeTriggerOffset.setText("Trigger Offset:");
			ivjJLabelChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
			ivjJLabelChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelChangeTriggerOffset.setMinimumSize(new java.awt.Dimension(143, 14));
			ivjJLabelChangeTriggerOffset.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelChangeTriggerOffset;
}


/**
 * Return the JLabelControlPercent property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlPercent() {
	if (ivjJLabelControlPercent == null) {
		try {
			ivjJLabelControlPercent = new javax.swing.JLabel();
			ivjJLabelControlPercent.setName("JLabelControlPercent");
			ivjJLabelControlPercent.setText("Control Percent:");
			ivjJLabelControlPercent.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelControlPercent.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelControlPercent.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlPercent;
}


/**
 * Return the JLabelLatchCommand property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelControlStartState() {
	if (ivjJLabelControlStartState == null) {
		try {
			ivjJLabelControlStartState = new javax.swing.JLabel();
			ivjJLabelControlStartState.setName("JLabelControlStartState");
			ivjJLabelControlStartState.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelControlStartState.setText("Control Start State:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelControlStartState;
}


/**
 * Return the JLabelCycleCntSndType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCycleCntSndType() {
	if (ivjJLabelCycleCntSndType == null) {
		try {
			ivjJLabelCycleCntSndType = new javax.swing.JLabel();
			ivjJLabelCycleCntSndType.setName("JLabelCycleCntSndType");
			ivjJLabelCycleCntSndType.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCycleCntSndType.setText("Cycle Count Send Type:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCycleCntSndType;
}


/**
 * Return the JLabelCyclePeriod property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCyclePeriod() {
	if (ivjJLabelCyclePeriod == null) {
		try {
			ivjJLabelCyclePeriod = new javax.swing.JLabel();
			ivjJLabelCyclePeriod.setName("JLabelCyclePeriod");
			ivjJLabelCyclePeriod.setText("Cycle Period:");
			ivjJLabelCyclePeriod.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelCyclePeriod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelCyclePeriod.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCyclePeriod;
}


/**
 * Return the JLabelGearName property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGearName() {
	if (ivjJLabelGearName == null) {
		try {
			ivjJLabelGearName = new javax.swing.JLabel();
			ivjJLabelGearName.setName("JLabelGearName");
			ivjJLabelGearName.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelGearName.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelGearName.setText("Gear Name:");
			ivjJLabelGearName.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGearName;
}


/**
 * Return the JLabelGearType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGearType() {
	if (ivjJLabelGearType == null) {
		try {
			ivjJLabelGearType = new javax.swing.JLabel();
			ivjJLabelGearType.setName("JLabelGearType");
			ivjJLabelGearType.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelGearType.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJLabelGearType.setText("Gear Type:");
			ivjJLabelGearType.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGearType;
}


/**
 * Return the JLabelGroupSelection property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGroupSelection() {
	if (ivjJLabelGroupSelection == null) {
		try {
			ivjJLabelGroupSelection = new javax.swing.JLabel();
			ivjJLabelGroupSelection.setName("JLabelGroupSelection");
			ivjJLabelGroupSelection.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelGroupSelection.setText("Group Selection Method:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGroupSelection;
}


/**
 * Return the JLabelHowToStop property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHowToStop() {
	if (ivjJLabelHowToStop == null) {
		try {
			ivjJLabelHowToStop = new javax.swing.JLabel();
			ivjJLabelHowToStop.setName("JLabelHowToStop");
			ivjJLabelHowToStop.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHowToStop.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelHowToStop.setText("How to Stop Control:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHowToStop;
}



/**
 * Return the JLabelCycleCntSndType1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMaxCycleCnt() {
	if (ivjJLabelMaxCycleCnt == null) {
		try {
			ivjJLabelMaxCycleCnt = new javax.swing.JLabel();
			ivjJLabelMaxCycleCnt.setName("JLabelMaxCycleCnt");
			ivjJLabelMaxCycleCnt.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMaxCycleCnt.setText("Max Cycle Cnt:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMaxCycleCnt;
}


/**
 * Return the JLabelMin property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMin() {
	if (ivjJLabelMin == null) {
		try {
			ivjJLabelMin = new javax.swing.JLabel();
			ivjJLabelMin.setName("JLabelMin");
			ivjJLabelMin.setText("(min.)");
			ivjJLabelMin.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelMin.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelMin.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMin.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMin;
}


/**
 * Return the JLabelMinutesChDur property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutesChDur() {
	if (ivjJLabelMinutesChDur == null) {
		try {
			ivjJLabelMinutesChDur = new javax.swing.JLabel();
			ivjJLabelMinutesChDur.setName("JLabelMinutesChDur");
			ivjJLabelMinutesChDur.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutesChDur.setText("(min.)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutesChDur;
}


/**
 * Return the JLabelNumGroups property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelNumGroups() {
	if (ivjJLabelNumGroups == null) {
		try {
			ivjJLabelNumGroups = new javax.swing.JLabel();
			ivjJLabelNumGroups.setName("JLabelNumGroups");
			ivjJLabelNumGroups.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelNumGroups.setText("# of Groups Each Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelNumGroups;
}


/**
 * Return the JLabelPercentReduction property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPercentReduction() {
	if (ivjJLabelPercentReduction == null) {
		try {
			ivjJLabelPercentReduction = new javax.swing.JLabel();
			ivjJLabelPercentReduction.setName("JLabelPercentReduction");
			ivjJLabelPercentReduction.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelPercentReduction.setText("Group Capacity Reduction %:");
			ivjJLabelPercentReduction.setMaximumSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setPreferredSize(new java.awt.Dimension(112, 14));
			ivjJLabelPercentReduction.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPercentReduction.setMinimumSize(new java.awt.Dimension(112, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPercentReduction;
}



/**
 * Return the JLabelCycleCount property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPeriodCount() {
	if (ivjJLabelPeriodCount == null) {
		try {
			ivjJLabelPeriodCount = new javax.swing.JLabel();
			ivjJLabelPeriodCount.setName("JLabelPeriodCount");
			ivjJLabelPeriodCount.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelPeriodCount.setText("Starting Period Count:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPeriodCount;
}


/**
 * Return the JLabelSendRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSendRate() {
	if (ivjJLabelSendRate == null) {
		try {
			ivjJLabelSendRate = new javax.swing.JLabel();
			ivjJLabelSendRate.setName("JLabelSendRate");
			ivjJLabelSendRate.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelSendRate.setText("Command Resend Rate:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSendRate;
}


/**
 * Return the JLabelShedTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelShedTime() {
	if (ivjJLabelShedTime == null) {
		try {
			ivjJLabelShedTime = new javax.swing.JLabel();
			ivjJLabelShedTime.setName("JLabelShedTime");
			ivjJLabelShedTime.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelShedTime.setText("Shed Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelShedTime;
}


/**
 * Return the JLabelWhenChange property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelWhenChange() {
	if (ivjJLabelWhenChange == null) {
		try {
			ivjJLabelWhenChange = new javax.swing.JLabel();
			ivjJLabelWhenChange.setName("JLabelWhenChange");
			ivjJLabelWhenChange.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelWhenChange.setText("When to Change:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelWhenChange;
}


/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());
			ivjJPanel1.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanel1.setPreferredSize(new java.awt.Dimension(398, 470));
			ivjJPanel1.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJPanel1.setBounds(0, 0, 398, 465);
			ivjJPanel1.setMinimumSize(new java.awt.Dimension(402, 450));

			java.awt.GridBagConstraints constraintsJPanelHolder = new java.awt.GridBagConstraints();
			constraintsJPanelHolder.gridx = 1; constraintsJPanelHolder.gridy = 1;
			constraintsJPanelHolder.gridwidth = 2;
			constraintsJPanelHolder.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJPanelHolder.weightx = 1.0;
			constraintsJPanelHolder.weighty = 1.0;
			constraintsJPanelHolder.ipadx = -17;
			constraintsJPanelHolder.insets = new java.awt.Insets(4, 3, 5, 34);
			getJPanel1().add(getJPanelHolder(), constraintsJPanelHolder);

			java.awt.GridBagConstraints constraintsJLabelHowToStop = new java.awt.GridBagConstraints();
			constraintsJLabelHowToStop.gridx = 1; constraintsJLabelHowToStop.gridy = 2;
			constraintsJLabelHowToStop.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelHowToStop.ipadx = 4;
			constraintsJLabelHowToStop.insets = new java.awt.Insets(7, 17, 5, 55);
			getJPanel1().add(getJLabelHowToStop(), constraintsJLabelHowToStop);

			java.awt.GridBagConstraints constraintsJLabelPercentReduction = new java.awt.GridBagConstraints();
			constraintsJLabelPercentReduction.gridx = 1; constraintsJLabelPercentReduction.gridy = 3;
			constraintsJLabelPercentReduction.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelPercentReduction.ipadx = 53;
			constraintsJLabelPercentReduction.insets = new java.awt.Insets(4, 17, 7, 6);
			getJPanel1().add(getJLabelPercentReduction(), constraintsJLabelPercentReduction);

			java.awt.GridBagConstraints constraintsJCSpinFieldPercentReduction = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldPercentReduction.gridx = 2; constraintsJCSpinFieldPercentReduction.gridy = 3;
			constraintsJCSpinFieldPercentReduction.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldPercentReduction.ipadx = 53;
			constraintsJCSpinFieldPercentReduction.ipady = 19;
			constraintsJCSpinFieldPercentReduction.insets = new java.awt.Insets(1, 7, 4, 153);
			getJPanel1().add(getJCSpinFieldPercentReduction(), constraintsJCSpinFieldPercentReduction);

			java.awt.GridBagConstraints constraintsJComboBoxHowToStop = new java.awt.GridBagConstraints();
			constraintsJComboBoxHowToStop.gridx = 2; constraintsJComboBoxHowToStop.gridy = 2;
			constraintsJComboBoxHowToStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxHowToStop.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxHowToStop.weightx = 1.0;
			constraintsJComboBoxHowToStop.ipadx = 46;
			constraintsJComboBoxHowToStop.insets = new java.awt.Insets(5, 7, 0, 35);
			getJPanel1().add(getJComboBoxHowToStop(), constraintsJComboBoxHowToStop);

			java.awt.GridBagConstraints constraintsJPanelChangeMethod = new java.awt.GridBagConstraints();
			constraintsJPanelChangeMethod.gridx = 1; constraintsJPanelChangeMethod.gridy = 4;
			constraintsJPanelChangeMethod.gridwidth = 2;
			constraintsJPanelChangeMethod.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJPanelChangeMethod.weightx = 1.0;
			constraintsJPanelChangeMethod.weighty = 1.0;
			constraintsJPanelChangeMethod.ipadx = -8;
			constraintsJPanelChangeMethod.insets = new java.awt.Insets(5, 5, 78, 22);
			getJPanel1().add(getJPanelChangeMethod(), constraintsJPanelChangeMethod);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}


/**
 * Return the JPanelChangeMethod property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelChangeMethod() {
	if (ivjJPanelChangeMethod == null) {
		try {
			ivjJPanelChangeMethod = new javax.swing.JPanel();
			ivjJPanelChangeMethod.setName("JPanelChangeMethod");
			//ivjJPanelChangeMethod.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjJPanelChangeMethod.setLayout(new java.awt.GridBagLayout());
			ivjJPanelChangeMethod.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJPanelChangeMethod.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJPanelChangeMethod.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelChangeDuration = new java.awt.GridBagConstraints();
			constraintsJLabelChangeDuration.gridx = 1; constraintsJLabelChangeDuration.gridy = 2;
			constraintsJLabelChangeDuration.ipadx = -5;
			constraintsJLabelChangeDuration.ipady = 6;
			constraintsJLabelChangeDuration.insets = new java.awt.Insets(1, 13, 3, 1);
			getJPanelChangeMethod().add(getJLabelChangeDuration(), constraintsJLabelChangeDuration);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeDuration.gridx = 2; constraintsJCSpinFieldChangeDuration.gridy = 2;
			constraintsJCSpinFieldChangeDuration.ipadx = 54;
			constraintsJCSpinFieldChangeDuration.ipady = 19;
			constraintsJCSpinFieldChangeDuration.insets = new java.awt.Insets(1, 1, 3, 1);
			getJPanelChangeMethod().add(getJCSpinFieldChangeDuration(), constraintsJCSpinFieldChangeDuration);

			java.awt.GridBagConstraints constraintsJLabelMinutesChDur = new java.awt.GridBagConstraints();
			constraintsJLabelMinutesChDur.gridx = 3; constraintsJLabelMinutesChDur.gridy = 2;
			constraintsJLabelMinutesChDur.ipadx = 5;
			constraintsJLabelMinutesChDur.ipady = -2;
			constraintsJLabelMinutesChDur.insets = new java.awt.Insets(5, 2, 5, 8);
			getJPanelChangeMethod().add(getJLabelMinutesChDur(), constraintsJLabelMinutesChDur);

			java.awt.GridBagConstraints constraintsJLabelChangePriority = new java.awt.GridBagConstraints();
			constraintsJLabelChangePriority.gridx = 4; constraintsJLabelChangePriority.gridy = 2;
			constraintsJLabelChangePriority.ipadx = -13;
			constraintsJLabelChangePriority.ipady = 6;
			constraintsJLabelChangePriority.insets = new java.awt.Insets(1, 9, 3, 1);
			getJPanelChangeMethod().add(getJLabelChangePriority(), constraintsJLabelChangePriority);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangePriority = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangePriority.gridx = 5; constraintsJCSpinFieldChangePriority.gridy = 2;
			constraintsJCSpinFieldChangePriority.ipadx = 40;
			constraintsJCSpinFieldChangePriority.ipady = 19;
			constraintsJCSpinFieldChangePriority.insets = new java.awt.Insets(1, 1, 3, 25);
			getJPanelChangeMethod().add(getJCSpinFieldChangePriority(), constraintsJCSpinFieldChangePriority);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerNumber.gridx = 1; constraintsJLabelChangeTriggerNumber.gridy = 3;
			constraintsJLabelChangeTriggerNumber.ipadx = -45;
			constraintsJLabelChangeTriggerNumber.ipady = 6;
			constraintsJLabelChangeTriggerNumber.insets = new java.awt.Insets(4, 13, 31, 1);
			getJPanelChangeMethod().add(getJLabelChangeTriggerNumber(), constraintsJLabelChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJLabelChangeTriggerOffset.gridx = 4; constraintsJLabelChangeTriggerOffset.gridy = 3;
			constraintsJLabelChangeTriggerOffset.ipadx = -63;
			constraintsJLabelChangeTriggerOffset.insets = new java.awt.Insets(8, 9, 33, 11);
			getJPanelChangeMethod().add(getJLabelChangeTriggerOffset(), constraintsJLabelChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJTextFieldChangeTriggerOffset = new java.awt.GridBagConstraints();
			constraintsJTextFieldChangeTriggerOffset.gridx = 5; constraintsJTextFieldChangeTriggerOffset.gridy = 3;
			constraintsJTextFieldChangeTriggerOffset.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldChangeTriggerOffset.weightx = 1.0;
			constraintsJTextFieldChangeTriggerOffset.ipadx = 42;
			constraintsJTextFieldChangeTriggerOffset.insets = new java.awt.Insets(4, 1, 31, 20);
			getJPanelChangeMethod().add(getJTextFieldChangeTriggerOffset(), constraintsJTextFieldChangeTriggerOffset);

			java.awt.GridBagConstraints constraintsJCSpinFieldChangeTriggerNumber = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldChangeTriggerNumber.gridx = 2; constraintsJCSpinFieldChangeTriggerNumber.gridy = 3;
			constraintsJCSpinFieldChangeTriggerNumber.ipadx = 54;
			constraintsJCSpinFieldChangeTriggerNumber.ipady = 19;
			constraintsJCSpinFieldChangeTriggerNumber.insets = new java.awt.Insets(4, 1, 31, 1);
			getJPanelChangeMethod().add(getJCSpinFieldChangeTriggerNumber(), constraintsJCSpinFieldChangeTriggerNumber);

			java.awt.GridBagConstraints constraintsJLabelWhenChange = new java.awt.GridBagConstraints();
			constraintsJLabelWhenChange.gridx = 1; constraintsJLabelWhenChange.gridy = 1;
			constraintsJLabelWhenChange.ipadx = 3;
			constraintsJLabelWhenChange.ipady = 4;
			constraintsJLabelWhenChange.insets = new java.awt.Insets(8, 13, 4, 1);
			getJPanelChangeMethod().add(getJLabelWhenChange(), constraintsJLabelWhenChange);

			java.awt.GridBagConstraints constraintsJComboBoxWhenChange = new java.awt.GridBagConstraints();
			constraintsJComboBoxWhenChange.gridx = 2; constraintsJComboBoxWhenChange.gridy = 1;
			constraintsJComboBoxWhenChange.gridwidth = 4;
			constraintsJComboBoxWhenChange.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxWhenChange.weightx = 1.0;
			constraintsJComboBoxWhenChange.ipadx = 124;
			constraintsJComboBoxWhenChange.insets = new java.awt.Insets(8, 1, 1, 20);
			getJPanelChangeMethod().add(getJComboBoxWhenChange(), constraintsJComboBoxWhenChange);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelChangeMethod;
}


/**
 * Return the JPanelHolder property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelHolder() {
	if (ivjJPanelHolder == null) {
		try {
			ivjJPanelHolder = new javax.swing.JPanel();
			ivjJPanelHolder.setName("JPanelHolder");
			ivjJPanelHolder.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJPanelHolder.setLayout(new java.awt.GridBagLayout());
			ivjJPanelHolder.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJLabelShedTime = new java.awt.GridBagConstraints();
			constraintsJLabelShedTime.gridx = 1; constraintsJLabelShedTime.gridy = 1;
			constraintsJLabelShedTime.gridwidth = 2;
			constraintsJLabelShedTime.ipadx = 83;
			constraintsJLabelShedTime.insets = new java.awt.Insets(18, 6, 7, 1);
			getJPanelHolder().add(getJLabelShedTime(), constraintsJLabelShedTime);

			java.awt.GridBagConstraints constraintsJComboBoxShedTime = new java.awt.GridBagConstraints();
			constraintsJComboBoxShedTime.gridx = 3; constraintsJComboBoxShedTime.gridy = 1;
			constraintsJComboBoxShedTime.gridwidth = 2;
			constraintsJComboBoxShedTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxShedTime.weightx = 1.0;
			constraintsJComboBoxShedTime.ipadx = -19;
			constraintsJComboBoxShedTime.insets = new java.awt.Insets(17, 1, 1, 0);
			getJPanelHolder().add(getJComboBoxShedTime(), constraintsJComboBoxShedTime);

			java.awt.GridBagConstraints constraintsJComboBoxNumGroups = new java.awt.GridBagConstraints();
			constraintsJComboBoxNumGroups.gridx = 3; constraintsJComboBoxNumGroups.gridy = 2;
			constraintsJComboBoxNumGroups.gridwidth = 3;
			constraintsJComboBoxNumGroups.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxNumGroups.weightx = 1.0;
			constraintsJComboBoxNumGroups.ipadx = -6;
			constraintsJComboBoxNumGroups.insets = new java.awt.Insets(2, 1, 1, 29);
			getJPanelHolder().add(getJComboBoxNumGroups(), constraintsJComboBoxNumGroups);

			java.awt.GridBagConstraints constraintsJLabelNumGroups = new java.awt.GridBagConstraints();
			constraintsJLabelNumGroups.gridx = 1; constraintsJLabelNumGroups.gridy = 2;
			constraintsJLabelNumGroups.gridwidth = 2;
			constraintsJLabelNumGroups.ipadx = 17;
			constraintsJLabelNumGroups.insets = new java.awt.Insets(6, 6, 4, 1);
			getJPanelHolder().add(getJLabelNumGroups(), constraintsJLabelNumGroups);

			java.awt.GridBagConstraints constraintsJComboBoxGroupSelection = new java.awt.GridBagConstraints();
			constraintsJComboBoxGroupSelection.gridx = 3; constraintsJComboBoxGroupSelection.gridy = 8;
			constraintsJComboBoxGroupSelection.gridwidth = 2;
			constraintsJComboBoxGroupSelection.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxGroupSelection.weightx = 1.0;
			constraintsJComboBoxGroupSelection.ipadx = -19;
			constraintsJComboBoxGroupSelection.insets = new java.awt.Insets(2, 1, 1, 0);
			getJPanelHolder().add(getJComboBoxGroupSelection(), constraintsJComboBoxGroupSelection);

			java.awt.GridBagConstraints constraintsJLabelGroupSelection = new java.awt.GridBagConstraints();
			constraintsJLabelGroupSelection.gridx = 1; constraintsJLabelGroupSelection.gridy = 8;
			constraintsJLabelGroupSelection.gridwidth = 2;
			constraintsJLabelGroupSelection.ipadx = 12;
			constraintsJLabelGroupSelection.insets = new java.awt.Insets(6, 6, 4, 1);
			getJPanelHolder().add(getJLabelGroupSelection(), constraintsJLabelGroupSelection);

			java.awt.GridBagConstraints constraintsJLabelSendRate = new java.awt.GridBagConstraints();
			constraintsJLabelSendRate.gridx = 1; constraintsJLabelSendRate.gridy = 7;
			constraintsJLabelSendRate.gridwidth = 2;
			constraintsJLabelSendRate.ipadx = 8;
			constraintsJLabelSendRate.insets = new java.awt.Insets(5, 6, 4, 1);
			getJPanelHolder().add(getJLabelSendRate(), constraintsJLabelSendRate);

			java.awt.GridBagConstraints constraintsJComboBoxSendRate = new java.awt.GridBagConstraints();
			constraintsJComboBoxSendRate.gridx = 3; constraintsJComboBoxSendRate.gridy = 7;
			constraintsJComboBoxSendRate.gridwidth = 2;
			constraintsJComboBoxSendRate.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxSendRate.weightx = 1.0;
			constraintsJComboBoxSendRate.ipadx = -19;
			constraintsJComboBoxSendRate.insets = new java.awt.Insets(1, 1, 1, 0);
			getJPanelHolder().add(getJComboBoxSendRate(), constraintsJComboBoxSendRate);

			java.awt.GridBagConstraints constraintsJLabelControlPercent = new java.awt.GridBagConstraints();
			constraintsJLabelControlPercent.gridx = 1; constraintsJLabelControlPercent.gridy = 3;
			constraintsJLabelControlPercent.gridwidth = 2;
			constraintsJLabelControlPercent.ipadx = 34;
			constraintsJLabelControlPercent.insets = new java.awt.Insets(5, 6, 4, 1);
			getJPanelHolder().add(getJLabelControlPercent(), constraintsJLabelControlPercent);

			java.awt.GridBagConstraints constraintsJCSpinFieldControlPercent = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldControlPercent.gridx = 2; constraintsJCSpinFieldControlPercent.gridy = 3;
			constraintsJCSpinFieldControlPercent.gridwidth = 2;
			constraintsJCSpinFieldControlPercent.ipadx = 39;
			constraintsJCSpinFieldControlPercent.ipady = 19;
			constraintsJCSpinFieldControlPercent.insets = new java.awt.Insets(2, 15, 1, 9);
			getJPanelHolder().add(getJCSpinFieldControlPercent(), constraintsJCSpinFieldControlPercent);

			java.awt.GridBagConstraints constraintsJCSpinFieldCyclePeriod = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldCyclePeriod.gridx = 5; constraintsJCSpinFieldCyclePeriod.gridy = 3;
			constraintsJCSpinFieldCyclePeriod.ipadx = 39;
			constraintsJCSpinFieldCyclePeriod.ipady = 19;
			constraintsJCSpinFieldCyclePeriod.insets = new java.awt.Insets(2, 1, 1, 1);
			getJPanelHolder().add(getJCSpinFieldCyclePeriod(), constraintsJCSpinFieldCyclePeriod);

			java.awt.GridBagConstraints constraintsJLabelCyclePeriod = new java.awt.GridBagConstraints();
			constraintsJLabelCyclePeriod.gridx = 4; constraintsJLabelCyclePeriod.gridy = 3;
			constraintsJLabelCyclePeriod.gridwidth = 2;
			constraintsJLabelCyclePeriod.ipadx = -24;
			constraintsJLabelCyclePeriod.insets = new java.awt.Insets(5, 9, 4, 36);
			getJPanelHolder().add(getJLabelCyclePeriod(), constraintsJLabelCyclePeriod);

			java.awt.GridBagConstraints constraintsJLabelMin = new java.awt.GridBagConstraints();
			constraintsJLabelMin.gridx = 6; constraintsJLabelMin.gridy = 3;
			constraintsJLabelMin.ipadx = -73;
			constraintsJLabelMin.insets = new java.awt.Insets(5, 2, 4, 21);
			getJPanelHolder().add(getJLabelMin(), constraintsJLabelMin);

			java.awt.GridBagConstraints constraintsJLabelPeriodCount = new java.awt.GridBagConstraints();
			constraintsJLabelPeriodCount.gridx = 1; constraintsJLabelPeriodCount.gridy = 6;
			constraintsJLabelPeriodCount.gridwidth = 2;
			constraintsJLabelPeriodCount.ipadx = 26;
			constraintsJLabelPeriodCount.insets = new java.awt.Insets(5, 6, 3, 1);
			getJPanelHolder().add(getJLabelPeriodCount(), constraintsJLabelPeriodCount);

			java.awt.GridBagConstraints constraintsJComboBoxPeriodCount = new java.awt.GridBagConstraints();
			constraintsJComboBoxPeriodCount.gridx = 3; constraintsJComboBoxPeriodCount.gridy = 6;
			constraintsJComboBoxPeriodCount.gridwidth = 3;
			constraintsJComboBoxPeriodCount.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxPeriodCount.weightx = 1.0;
			constraintsJComboBoxPeriodCount.ipadx = -6;
			constraintsJComboBoxPeriodCount.insets = new java.awt.Insets(1, 1, 0, 29);
			getJPanelHolder().add(getJComboBoxPeriodCount(), constraintsJComboBoxPeriodCount);

			java.awt.GridBagConstraints constraintsJLabelControlStartState = new java.awt.GridBagConstraints();
			constraintsJLabelControlStartState.gridx = 1; constraintsJLabelControlStartState.gridy = 9;
			constraintsJLabelControlStartState.gridwidth = 2;
			constraintsJLabelControlStartState.ipadx = 25;
			constraintsJLabelControlStartState.insets = new java.awt.Insets(7, 6, 21, 20);
			getJPanelHolder().add(getJLabelControlStartState(), constraintsJLabelControlStartState);

			java.awt.GridBagConstraints constraintsJComboBoxControlStartState = new java.awt.GridBagConstraints();
			constraintsJComboBoxControlStartState.gridx = 3; constraintsJComboBoxControlStartState.gridy = 9;
			constraintsJComboBoxControlStartState.gridwidth = 4;
			constraintsJComboBoxControlStartState.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxControlStartState.weightx = 1.0;
			constraintsJComboBoxControlStartState.ipadx = 38;
			constraintsJComboBoxControlStartState.insets = new java.awt.Insets(2, 1, 19, 47);
			getJPanelHolder().add(getJComboBoxControlStartState(), constraintsJComboBoxControlStartState);

			java.awt.GridBagConstraints constraintsJLabelCycleCntSndType = new java.awt.GridBagConstraints();
			constraintsJLabelCycleCntSndType.gridx = 1; constraintsJLabelCycleCntSndType.gridy = 4;
			constraintsJLabelCycleCntSndType.gridwidth = 2;
			constraintsJLabelCycleCntSndType.ipadx = 16;
			constraintsJLabelCycleCntSndType.insets = new java.awt.Insets(5, 6, 3, 1);
			getJPanelHolder().add(getJLabelCycleCntSndType(), constraintsJLabelCycleCntSndType);

			java.awt.GridBagConstraints constraintsJComboBoxCycleCountSndType = new java.awt.GridBagConstraints();
			constraintsJComboBoxCycleCountSndType.gridx = 3; constraintsJComboBoxCycleCountSndType.gridy = 4;
			constraintsJComboBoxCycleCountSndType.gridwidth = 3;
			constraintsJComboBoxCycleCountSndType.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxCycleCountSndType.weightx = 1.0;
			constraintsJComboBoxCycleCountSndType.ipadx = -7;
			constraintsJComboBoxCycleCountSndType.insets = new java.awt.Insets(1, 1, 0, 30);
			getJPanelHolder().add(getJComboBoxCycleCountSndType(), constraintsJComboBoxCycleCountSndType);

			java.awt.GridBagConstraints constraintsJLabelMaxCycleCnt = new java.awt.GridBagConstraints();
			constraintsJLabelMaxCycleCnt.gridx = 1; constraintsJLabelMaxCycleCnt.gridy = 5;
			constraintsJLabelMaxCycleCnt.ipadx = 6;
			constraintsJLabelMaxCycleCnt.insets = new java.awt.Insets(3, 6, 5, 15);
			getJPanelHolder().add(getJLabelMaxCycleCnt(), constraintsJLabelMaxCycleCnt);

			java.awt.GridBagConstraints constraintsJComboBoxMaxCycleCount = new java.awt.GridBagConstraints();
			constraintsJComboBoxMaxCycleCount.gridx = 3; constraintsJComboBoxMaxCycleCount.gridy = 5;
			constraintsJComboBoxMaxCycleCount.gridwidth = 3;
			constraintsJComboBoxMaxCycleCount.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxMaxCycleCount.weightx = 1.0;
			constraintsJComboBoxMaxCycleCount.ipadx = -7;
			constraintsJComboBoxMaxCycleCount.insets = new java.awt.Insets(1, 1, 0, 30);
			getJPanelHolder().add(getJComboBoxMaxCycleCount(), constraintsJComboBoxMaxCycleCount);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelHolder;
}


/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPane1() {
	if (ivjJScrollPane1 == null) {
		try {
			ivjJScrollPane1 = new javax.swing.JScrollPane();
			ivjJScrollPane1.setName("JScrollPane1");
			ivjJScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			ivjJScrollPane1.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJScrollPane1.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			getJScrollPane1().setViewportView(getJPanel1());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPane1;
}


/**
 * Return the JTextFieldChangeTriggerOffset property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldChangeTriggerOffset() {
	if (ivjJTextFieldChangeTriggerOffset == null) {
		try {
			ivjJTextFieldChangeTriggerOffset = new javax.swing.JTextField();
			ivjJTextFieldChangeTriggerOffset.setName("JTextFieldChangeTriggerOffset");
			ivjJTextFieldChangeTriggerOffset.setPreferredSize(new java.awt.Dimension(40, 20));
			ivjJTextFieldChangeTriggerOffset.setMaximumSize(new java.awt.Dimension(40, 20));
			// user code begin {1}

			ivjJTextFieldChangeTriggerOffset.setDocument( new com.cannontech.common.gui.unchanging.DoubleRangeDocument(-99999.9999, 99999.9999, 4) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldChangeTriggerOffset;
}


/**
 * Return the JTextFieldGearName property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldGearName() {
	if (ivjJTextFieldGearName == null) {
		try {
			ivjJTextFieldGearName = new javax.swing.JTextField();
			ivjJTextFieldGearName.setName("JTextFieldGearName");
			ivjJTextFieldGearName.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTextFieldGearName.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldGearName;
}


/**
 * Insert the method's description here.
 * Creation date: (6/18/2001 5:46:52 PM)
 * @return java.util.Hashtable
 */
private java.util.Hashtable getPAOHashTable() 
{
	//store the references to our cached PAOs and points in this class
	if( paoHashTable == null )
		paoHashTable = com.cannontech.database.cache.functions.PAOFuncs.getAllLitePAOWithPoints();

	return paoHashTable;
}


/**
 * Insert the method's description here.
 * Creation date: (7/15/2002 1:48:13 PM)
 * @return com.cannontech.dbeditor.wizard.device.lmgroup.LMGroupExpressStatEditorPanel
 */
public com.cannontech.dbeditor.wizard.device.lmgroup.LMGroupExpressStatEditorPanel getStatEditorPanel() {
	if(statEditorPanel == null)
		statEditorPanel = new com.cannontech.dbeditor.wizard.device.lmgroup.LMGroupExpressStatEditorPanel();
	
	return statEditorPanel;
}


/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
		gear = LMProgramDirectGear.createGearFactory( getGearType() );
	else
	{		
		gear = (LMProgramDirectGear)o;
	}

	gear.setGearName( getJTextFieldGearName().getText() );
	gear.setControlMethod( getGearType() );

	if( getJComboBoxHowToStop().getSelectedItem() != null )
	{
		gear.setMethodStopType( 
			com.cannontech.common.util.StringUtils.removeChars( ' ', getJComboBoxHowToStop().getSelectedItem().toString() ) );
	}

	gear.setPercentReduction( new Integer( ((Number)getJCSpinFieldPercentReduction().getValue()).intValue() ) );
	
	gear.setChangeCondition( getChangeCondition(getJComboBoxWhenChange().getSelectedItem().toString()) );

	gear.setChangeDuration( new Integer( ((Number)getJCSpinFieldChangeDuration().getValue()).intValue() * 60 ) );
	gear.setChangePriority( new Integer( ((Number)getJCSpinFieldChangePriority().getValue()).intValue() ) );
	gear.setChangeTriggerNumber( new Integer( ((Number)getJCSpinFieldChangeTriggerNumber().getValue()).intValue() ) );
	
	if( getJTextFieldChangeTriggerOffset().getText() == null || getJTextFieldChangeTriggerOffset().getText().length() <= 0 )
		gear.setChangeTriggerOffset( new Double(0.0) );
	else
		gear.setChangeTriggerOffset( Double.valueOf(getJTextFieldChangeTriggerOffset().getText()) );

	if( gear instanceof com.cannontech.database.data.device.lm.SmartCycleGear )
	{
		com.cannontech.database.data.device.lm.SmartCycleGear s = (com.cannontech.database.data.device.lm.SmartCycleGear)gear;

		s.setControlPercent( new Integer( 
			((Number)getJCSpinFieldControlPercent().getValue()).intValue() ) );

		s.setCyclePeriodLength( new Integer( 
			((Number)getJCSpinFieldCyclePeriod().getValue()).intValue() * 60 ) );

		s.setStartingPeriodCnt( (Integer)getJComboBoxPeriodCount().getSelectedItem() );

		s.setResendRate( com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue( getJComboBoxSendRate() ) );

		if( getJComboBoxMaxCycleCount().getSelectedItem() == null
			 || getJComboBoxMaxCycleCount().getSelectedItem() instanceof String )
		{
			s.setMethodOptionMax( new Integer(0) );
		}
		else
			s.setMethodOptionMax( (Integer)getJComboBoxMaxCycleCount().getSelectedItem() );

		s.setMethodOptionType( StringUtils.removeChars( ' ', getJComboBoxCycleCountSndType().getSelectedItem().toString() ) );
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.MasterCycleGear )
	{
		com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

		s.setControlPercent( new Integer( 
			((Number)getJCSpinFieldControlPercent().getValue()).intValue() ) );

		s.setCyclePeriodLength( new Integer( 
			((Number)getJCSpinFieldCyclePeriod().getValue()).intValue() * 60 ) );		
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.TimeRefreshGear )
	{
		com.cannontech.database.data.device.lm.TimeRefreshGear t = (com.cannontech.database.data.device.lm.TimeRefreshGear)gear;

		t.setShedTime( com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue( getJComboBoxShedTime() ) );

		t.setNumberOfGroups( getJComboBoxNumGroups().getSelectedItem() );

		t.setRefreshRate( com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue( getJComboBoxSendRate() ) );
		
		t.setGroupSelectionMethod( StringUtils.removeChars( ' ', getJComboBoxGroupSelection().getSelectedItem().toString() ) );
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.RotationGear )
	{
		com.cannontech.database.data.device.lm.RotationGear r = (com.cannontech.database.data.device.lm.RotationGear)gear;

		r.setShedTime( com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue( getJComboBoxShedTime() ) );

		r.setNumberOfGroups( getJComboBoxNumGroups().getSelectedItem() );

		r.setSendRate( com.cannontech.common.util.CtiUtilities.getIntervalComboBoxSecondsValue( getJComboBoxSendRate() ) );
		
		r.setGroupSelectionMethod( StringUtils.removeChars( ' ', getJComboBoxGroupSelection().getSelectedItem().toString() ) );
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.LatchingGear )
	{
		com.cannontech.database.data.device.lm.LatchingGear l = (com.cannontech.database.data.device.lm.LatchingGear)gear;

		l.setStartControlState( new Integer(getJComboBoxControlStartState().getSelectedIndex()) );
	}

	else if( gear instanceof com.cannontech.database.data.device.lm.ThermostatPreOperateGear )
	{
		gear = (com.cannontech.database.db.device.lm.LMThermostatGear)gear;
		
		com.cannontech.database.data.device.lm.ThermostatPreOperateGear tp = (com.cannontech.database.data.device.lm.ThermostatPreOperateGear)gear;

		if(getStatEditorPanel().getJCheckBoxDeltaB().isSelected())
			tp.setValueB(Integer.valueOf(getStatEditorPanel().getJTextFieldDeltaB().getText()));
		if(getStatEditorPanel().getJCheckBoxDeltaD().isSelected())
			tp.setValueD(Integer.valueOf(getStatEditorPanel().getJTextFieldDeltaD().getText()));
		if(getStatEditorPanel().getJCheckBoxDeltaF().isSelected())
			tp.setValueF(Integer.valueOf(getStatEditorPanel().getJTextFieldDeltaF().getText()));
		if(getStatEditorPanel().getJCheckBoxRand().isSelected())
			tp.setRandom(Integer.valueOf(getStatEditorPanel().getJTextFieldRand().getText()));
		if(getStatEditorPanel().getJCheckBoxMax().isSelected())
			tp.setMaxValue(Integer.valueOf(getStatEditorPanel().getJTextFieldMax().getText()));
		if(getStatEditorPanel().getJCheckBoxMin().isSelected())
			tp.setMinValue(Integer.valueOf(getStatEditorPanel().getJTextFieldMin().getText()));
		if(getStatEditorPanel().getJCheckBoxTa().isSelected())
			tp.setValueTa(Integer.valueOf(getStatEditorPanel().getJTextFieldTa().getText()));
		if(getStatEditorPanel().getJCheckBoxTb().isSelected())
			tp.setValueTb(Integer.valueOf(getStatEditorPanel().getJTextFieldTb().getText()));
		if(getStatEditorPanel().getJCheckBoxTc().isSelected())
			tp.setValueTc(Integer.valueOf(getStatEditorPanel().getJTextFieldTc().getText()));
		if(getStatEditorPanel().getJCheckBoxTd().isSelected())
			tp.setValueTd(Integer.valueOf(getStatEditorPanel().getJTextFieldTd().getText()));
		if(getStatEditorPanel().getJCheckBoxTe().isSelected())
			tp.setValueTe(Integer.valueOf(getStatEditorPanel().getJTextFieldTe().getText()));
		if(getStatEditorPanel().getJCheckBoxTf().isSelected())
			tp.setValueTf(Integer.valueOf(getStatEditorPanel().getJTextFieldTf().getText()));

		if(getStatEditorPanel().isAbsolute)
			tp.getSettings().setCharAt(0, 'A');
		else
			tp.getSettings().setCharAt(0, 'D');

		if(getStatEditorPanel().isCelsius)
			tp.getSettings().setCharAt(1, 'C');
		else
			tp.getSettings().setCharAt(1, 'F');

		if(getStatEditorPanel().getJCheckBoxHeatMode().isSelected())
			tp.getSettings().setCharAt(2, 'H');
		else
			tp.getSettings().setCharAt(2, '-');

		if(getStatEditorPanel().getJCheckBoxCoolMode().isSelected())
			//I for "icy goodness"
			tp.getSettings().setCharAt(3, 'I');
		else
			tp.getSettings().setCharAt(3, '-');

				
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.ThermostatSetbackGear )
	{
		com.cannontech.database.data.device.lm.ThermostatSetbackGear ts = (com.cannontech.database.data.device.lm.ThermostatSetbackGear)gear;

		if(getStatEditorPanel().getJCheckBoxDeltaB().isSelected())
			ts.setValueB(Integer.valueOf(getStatEditorPanel().getJTextFieldDeltaB().getText()));
		if(getStatEditorPanel().getJCheckBoxDeltaD().isSelected())
			ts.setValueD(Integer.valueOf(getStatEditorPanel().getJTextFieldDeltaD().getText()));
		if(getStatEditorPanel().getJCheckBoxDeltaF().isSelected())
			ts.setValueF(Integer.valueOf(getStatEditorPanel().getJTextFieldDeltaF().getText()));
		if(getStatEditorPanel().getJCheckBoxRand().isSelected())
			ts.setRandom(Integer.valueOf(getStatEditorPanel().getJTextFieldRand().getText()));
		if(getStatEditorPanel().getJCheckBoxMax().isSelected())
			ts.setMaxValue(Integer.valueOf(getStatEditorPanel().getJTextFieldMax().getText()));
		if(getStatEditorPanel().getJCheckBoxMin().isSelected())
			ts.setMinValue(Integer.valueOf(getStatEditorPanel().getJTextFieldMin().getText()));
		if(getStatEditorPanel().getJCheckBoxTa().isSelected())
			ts.setValueTa(Integer.valueOf(getStatEditorPanel().getJTextFieldTa().getText()));
		if(getStatEditorPanel().getJCheckBoxTb().isSelected())
			ts.setValueTb(Integer.valueOf(getStatEditorPanel().getJTextFieldTb().getText()));
		if(getStatEditorPanel().getJCheckBoxTc().isSelected())
			ts.setValueTc(Integer.valueOf(getStatEditorPanel().getJTextFieldTc().getText()));
		if(getStatEditorPanel().getJCheckBoxTd().isSelected())
			ts.setValueTd(Integer.valueOf(getStatEditorPanel().getJTextFieldTd().getText()));
		if(getStatEditorPanel().getJCheckBoxTe().isSelected())
			ts.setValueTe(Integer.valueOf(getStatEditorPanel().getJTextFieldTe().getText()));
		if(getStatEditorPanel().getJCheckBoxTf().isSelected())
			ts.setValueTf(Integer.valueOf(getStatEditorPanel().getJTextFieldTf().getText()));

		if(getStatEditorPanel().isAbsolute)
			ts.getSettings().setCharAt(0, 'A');
		else
			ts.getSettings().setCharAt(0, 'D');

		if(getStatEditorPanel().isCelsius)
			ts.getSettings().setCharAt(1, 'C');
		else
			ts.getSettings().setCharAt(1, 'F');

		if(getStatEditorPanel().getJCheckBoxHeatMode().isSelected())
			ts.getSettings().setCharAt(2, 'H');
		else
			ts.getSettings().setCharAt(2, '-');

		if(getStatEditorPanel().getJCheckBoxCoolMode().isSelected())
			//I for "icy goodness"
			ts.getSettings().setCharAt(3, 'I');
		else
			ts.getSettings().setCharAt(3, '-');

	}
	
	return gear;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Insert the method's description here.
 * Creation date: (7/15/2002 2:01:07 PM)
 * @return java.awt.GridBagConstraints
 */
private java.awt.GridBagConstraints holderConstraints() {
	/* This is annoying, but if getJPanel1 is changed, then this should reflect those
	changes
	*/
	java.awt.GridBagConstraints constraintsLMGroupExpressStatEditor = new java.awt.GridBagConstraints();
			constraintsLMGroupExpressStatEditor.gridx = 1; constraintsLMGroupExpressStatEditor.gridy = 1;
			constraintsLMGroupExpressStatEditor.gridwidth = 2;
			constraintsLMGroupExpressStatEditor.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsLMGroupExpressStatEditor.weightx = 1.0;
			constraintsLMGroupExpressStatEditor.weighty = 1.0;
			constraintsLMGroupExpressStatEditor.ipadx = -17;
			constraintsLMGroupExpressStatEditor.insets = new java.awt.Insets(4, 3, 5, 34);
	return constraintsLMGroupExpressStatEditor;
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJCSpinFieldChangeDuration().addValueListener(this);
	getJCSpinFieldChangePriority().addValueListener(this);
	getJCSpinFieldChangeTriggerNumber().addValueListener(this);
	getJCSpinFieldControlPercent().addValueListener(this);
	getJCSpinFieldCyclePeriod().addValueListener(this);
	getJCSpinFieldPercentReduction().addValueListener(this);

	// user code end
	getJComboBoxWhenChange().addActionListener(this);
	getJComboBoxGearType().addActionListener(this);
	getJTextFieldGearName().addCaretListener(this);
	getJComboBoxShedTime().addActionListener(this);
	getJComboBoxNumGroups().addActionListener(this);
	getJComboBoxPeriodCount().addActionListener(this);
	getJComboBoxSendRate().addActionListener(this);
	getJComboBoxGroupSelection().addActionListener(this);
	getJComboBoxHowToStop().addActionListener(this);
	getJComboBoxControlStartState().addActionListener(this);
	getJComboBoxCycleCountSndType().addActionListener(this);
	getJComboBoxMaxCycleCount().addActionListener(this);
	getJTextFieldChangeTriggerOffset().addCaretListener(this);
}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DirectGearPanel");
		setToolTipText("");
		setLayout(new java.awt.GridBagLayout());
		setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
		setPreferredSize(new java.awt.Dimension(303, 194));
		setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
		setSize(426, 496);
		setMinimumSize(new java.awt.Dimension(10, 10));

		java.awt.GridBagConstraints constraintsJLabelGearName = new java.awt.GridBagConstraints();
		constraintsJLabelGearName.gridx = 1; constraintsJLabelGearName.gridy = 1;
		constraintsJLabelGearName.anchor = java.awt.GridBagConstraints.NORTHWEST;
		constraintsJLabelGearName.ipadx = 9;
		constraintsJLabelGearName.insets = new java.awt.Insets(3, 6, 3, 0);
		add(getJLabelGearName(), constraintsJLabelGearName);

		java.awt.GridBagConstraints constraintsJTextFieldGearName = new java.awt.GridBagConstraints();
		constraintsJTextFieldGearName.gridx = 2; constraintsJTextFieldGearName.gridy = 1;
		constraintsJTextFieldGearName.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldGearName.anchor = java.awt.GridBagConstraints.NORTHWEST;
		constraintsJTextFieldGearName.weightx = 1.0;
		constraintsJTextFieldGearName.ipadx = 210;
		constraintsJTextFieldGearName.insets = new java.awt.Insets(1, 0, 1, 130);
		add(getJTextFieldGearName(), constraintsJTextFieldGearName);

		java.awt.GridBagConstraints constraintsJLabelGearType = new java.awt.GridBagConstraints();
		constraintsJLabelGearType.gridx = 1; constraintsJLabelGearType.gridy = 2;
		constraintsJLabelGearType.anchor = java.awt.GridBagConstraints.NORTHWEST;
		constraintsJLabelGearType.ipadx = 17;
		constraintsJLabelGearType.insets = new java.awt.Insets(5, 6, 6, 0);
		add(getJLabelGearType(), constraintsJLabelGearType);

		java.awt.GridBagConstraints constraintsJComboBoxGearType = new java.awt.GridBagConstraints();
		constraintsJComboBoxGearType.gridx = 2; constraintsJComboBoxGearType.gridy = 2;
		constraintsJComboBoxGearType.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxGearType.anchor = java.awt.GridBagConstraints.NORTHWEST;
		constraintsJComboBoxGearType.weightx = 1.0;
		constraintsJComboBoxGearType.ipadx = 88;
		constraintsJComboBoxGearType.insets = new java.awt.Insets(2, 0, 2, 130);
		add(getJComboBoxGearType(), constraintsJComboBoxGearType);

		java.awt.GridBagConstraints constraintsJScrollPane1 = new java.awt.GridBagConstraints();
		constraintsJScrollPane1.gridx = 1; constraintsJScrollPane1.gridy = 3;
		constraintsJScrollPane1.gridwidth = 2;
		constraintsJScrollPane1.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJScrollPane1.weightx = 1.0;
		constraintsJScrollPane1.weighty = 1.0;
		constraintsJScrollPane1.ipadx = 398;
		constraintsJScrollPane1.ipady = 419;
		constraintsJScrollPane1.insets = new java.awt.Insets(2, 1, 4, 5);
		add(getJScrollPane1(), constraintsJScrollPane1);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	getJComboBoxGearType().setSelectedItem( LMProgramDirectGear.CONTROL_TIME_REFRESH );
	getJComboBoxWhenChange().setSelectedItem( LMProgramDirectGear.CHANGE_NONE );

	// user code end
}


/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	if( getJTextFieldGearName().getText() == null
		 || getJTextFieldGearName().getText().length() <= 0 )
	{
		setErrorString("A name for this gear must be specified");
		return false;
	}
	
	return true;
}


/**
 * Comment
 */
public void jComboBoxGearType_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxGearType().getSelectedItem() != null )
	{
		setGearType( getJComboBoxGearType().getSelectedItem().toString() );

		fireInputUpdate();
	}
	
	return;
}


/**
 * Comment
 */
public void jComboBoxWhenChange_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelChangeDuration().setVisible(false);
	getJCSpinFieldChangeDuration().setVisible(false);
	getJLabelMinutesChDur().setVisible(false);
	
	getJLabelChangePriority().setVisible(false);
	getJCSpinFieldChangePriority().setVisible(false);
	
	getJLabelChangeTriggerNumber().setVisible(false);
	getJCSpinFieldChangeTriggerNumber().setVisible(false);

	getJLabelChangeTriggerOffset().setVisible(false);
	getJTextFieldChangeTriggerOffset().setVisible(false);

	
	if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_NONE )
		 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Manually Only" ) )
	{
		//None
		return;
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_DURATION )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "After a Duration" ) )
	{
		//Duration
		getJLabelChangeDuration().setVisible(true);
		getJCSpinFieldChangeDuration().setVisible(true);
		getJLabelMinutesChDur().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_PRIORITY )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Priority Change" ) )
	{
		//Priority
		getJLabelChangePriority().setVisible(true);
		getJCSpinFieldChangePriority().setVisible(true);
	}
	else if( getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( LMProgramDirectGear.CHANGE_TRIGGER_OFFSET )
				 || getJComboBoxWhenChange().getSelectedItem().toString().equalsIgnoreCase( "Above Trigger" ) )
	{
		//TriggerOffset
		getJLabelChangeTriggerNumber().setVisible(true);
		getJCSpinFieldChangeTriggerNumber().setVisible(true);

		getJLabelChangeTriggerOffset().setVisible(true);
		getJTextFieldChangeTriggerOffset().setVisible(true);
	}
	else
		throw new Error("Unknown LMProgramDirectGear control condition found, the value = " + getJComboBoxWhenChange().getSelectedItem().toString() );


	fireInputUpdate();
	return;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		DirectModifyGearPanel aDirectModifyGearPanel;
		aDirectModifyGearPanel = new DirectModifyGearPanel();
		frame.setContentPane(aDirectModifyGearPanel);
		frame.setSize(aDirectModifyGearPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * Insert the method's description here.
 * Creation date: (2/12/2002 12:36:14 PM)
 * @param change java.lang.String
 */
private void setChangeCondition(String change) 
{
	if( change == null )
		return;

	if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_NONE) )
	{
		getJComboBoxWhenChange().setSelectedItem("Manually Only");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_DURATION) )
	{
		getJComboBoxWhenChange().setSelectedItem("After a Duration");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_PRIORITY) )
	{
		getJComboBoxWhenChange().setSelectedItem("Priority Change");
	}
	else if( change.equalsIgnoreCase(LMProgramDirectGear.CHANGE_TRIGGER_OFFSET) )
	{
		getJComboBoxWhenChange().setSelectedItem("Above Trigger");
	}	
	
}


/**
 * Insert the method's description here.
 * Creation date: (2/8/2002 5:37:00 PM)
 * @param newGearType java.lang.String
 */
public void setGearType(java.lang.String newGearType) 
{
	gearType = StringUtils.removeChars( ' ', newGearType );

	if( getGearType() == null )
		return;

	if( thermoWasLast )
	{
		getJPanel1().remove(getStatEditorPanel().getJPanelData());
		getJPanel1().add(getJPanelHolder(), holderConstraints());
		thermoWasLast = false;
	}

	getJComboBoxHowToStop().setVisible(true);
	getJLabelHowToStop().setVisible(true);
	getJPanelChangeMethod().setVisible(true);
	getJLabelControlStartState().setVisible(false);
	getJComboBoxControlStartState().setVisible(false);
	
	getJLabelCycleCntSndType().setVisible(false);
	getJComboBoxCycleCountSndType().setVisible(false);
	getJLabelMaxCycleCnt().setVisible(false);
	getJComboBoxMaxCycleCount().setVisible(false);

	getJComboBoxHowToStop().removeAllItems();
	getJComboBoxHowToStop().addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );	
	getJComboBoxHowToStop().addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_RESTORE ) );
	getJComboBoxHowToStop().setSelectedItem( StringUtils.removeChars( ' ', LMProgramDirectGear.STOP_TIME_IN ) );
	
	if( getGearType().equalsIgnoreCase(LMProgramDirectGear.CONTROL_LATCHING) )
	{
		//Latching
		getJLabelShedTime().setVisible(false);
		getJComboBoxShedTime().setVisible(false);
		getJLabelNumGroups().setVisible(false);
		getJComboBoxNumGroups().setVisible(false);
		getJLabelSendRate().setVisible(false);
		getJComboBoxSendRate().setVisible(false);
		getJLabelGroupSelection().setVisible(false);
		getJComboBoxGroupSelection().setVisible(false);
		getJLabelPeriodCount().setVisible(false);
		getJComboBoxPeriodCount().setVisible(false);
		getJLabelControlPercent().setVisible(false);
		getJCSpinFieldControlPercent().setVisible(false);
		getJLabelCyclePeriod().setVisible(false);
		getJCSpinFieldCyclePeriod().setVisible(false);
		getJLabelMin().setVisible(false);
		getJComboBoxHowToStop().setVisible(false);
		getJLabelHowToStop().setVisible(false);
		getJPanelChangeMethod().setVisible(false);

		getJLabelControlStartState().setVisible(true);
		getJComboBoxControlStartState().setVisible(true);
	}
	else if( getGearType().equalsIgnoreCase(LMProgramDirectGear.CONTROL_MASTER_CYCLE) )
	{
		//MasterCycle
		getJLabelShedTime().setVisible(false);
		getJComboBoxShedTime().setVisible(false);
		getJLabelNumGroups().setVisible(false);
		getJComboBoxNumGroups().setVisible(false);
		getJLabelPeriodCount().setVisible(false);
		getJComboBoxPeriodCount().setVisible(false);
		getJLabelSendRate().setVisible(false);
		getJComboBoxSendRate().setVisible(false);
		getJLabelGroupSelection().setVisible(false);
		getJComboBoxGroupSelection().setVisible(false);

		getJLabelControlPercent().setVisible(true);
		getJCSpinFieldControlPercent().setVisible(true);
		getJLabelCyclePeriod().setVisible(true);
		getJCSpinFieldCyclePeriod().setVisible(true);
		getJLabelMin().setVisible(true);		
	}
	else if( getGearType().equalsIgnoreCase(LMProgramDirectGear.CONTROL_ROTATION) )
	{
		//Rotation
		getJLabelPeriodCount().setVisible(false);
		getJComboBoxPeriodCount().setVisible(false);
		getJLabelControlPercent().setVisible(false);
		getJCSpinFieldControlPercent().setVisible(false);
		getJLabelCyclePeriod().setVisible(false);
		getJCSpinFieldCyclePeriod().setVisible(false);
		getJLabelMin().setVisible(false);

		getJLabelShedTime().setVisible(true);
		getJComboBoxShedTime().setVisible(true);
		getJLabelNumGroups().setVisible(true);
		getJComboBoxNumGroups().setVisible(true);
		getJLabelSendRate().setVisible(true);
		getJLabelSendRate().setText("Send Rate:");
		getJComboBoxSendRate().setVisible(true);
		getJLabelGroupSelection().setVisible(true);
		getJComboBoxGroupSelection().setVisible(true);

		getJComboBoxShedTime().setSelectedItem("1 hour");
		getJComboBoxNumGroups().setSelectedItem(new Integer(1));
		getJComboBoxSendRate().setSelectedItem("10 minutes");
	}
	else if( getGearType().equalsIgnoreCase(LMProgramDirectGear.CONTROL_SMART_CYCLE) )
	{
		//SmartCycle
		getJLabelShedTime().setVisible(false);
		getJComboBoxShedTime().setVisible(false);
		getJLabelNumGroups().setVisible(false);
		getJComboBoxNumGroups().setVisible(false);
		getJLabelGroupSelection().setVisible(false);
		getJComboBoxGroupSelection().setVisible(false);

		getJLabelPeriodCount().setVisible(true);
		getJComboBoxPeriodCount().setVisible(true);
		getJLabelSendRate().setVisible(true);		
		getJComboBoxSendRate().setVisible(true);
		getJLabelSendRate().setText("Command Resend Rate:");		
		getJLabelControlPercent().setVisible(true);
		getJCSpinFieldControlPercent().setVisible(true);
		getJLabelCyclePeriod().setVisible(true);
		getJCSpinFieldCyclePeriod().setVisible(true);
		getJLabelMin().setVisible(true);
		getJLabelCycleCntSndType().setVisible(true);
		getJComboBoxCycleCountSndType().setVisible(true);
		getJLabelMaxCycleCnt().setVisible(true);
		getJComboBoxMaxCycleCount().setVisible(true);

		getJComboBoxSendRate().setSelectedItem("1 hour");
		getJComboBoxHowToStop().removeItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_TIME_IN ) );		
		getJComboBoxHowToStop().addItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_STOP_CYCLE ) );		
		getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', LMProgramDirectGear.STOP_STOP_CYCLE ) );
	}
	else if( getGearType().equalsIgnoreCase(LMProgramDirectGear.CONTROL_TIME_REFRESH) )
	{
		//TimeRefresh
		getJLabelPeriodCount().setVisible(false);
		getJComboBoxPeriodCount().setVisible(false);
		getJLabelControlPercent().setVisible(false);
		getJCSpinFieldControlPercent().setVisible(false);
		getJLabelCyclePeriod().setVisible(false);
		getJCSpinFieldCyclePeriod().setVisible(false);
		getJLabelMin().setVisible(false);

		getJLabelShedTime().setVisible(true);
		getJComboBoxShedTime().setVisible(true);
		getJLabelNumGroups().setVisible(true);
		getJComboBoxNumGroups().setVisible(true);
		getJLabelSendRate().setVisible(true);
		getJLabelSendRate().setText("Refresh/Resend Rate:");
		getJComboBoxSendRate().setVisible(true);
		getJLabelGroupSelection().setVisible(true);
		getJComboBoxGroupSelection().setVisible(true);

		getJComboBoxShedTime().setSelectedItem("1 hour");
		getJComboBoxSendRate().setSelectedItem("30 minutes");
	}

	else if( getGearType().equalsIgnoreCase(LMProgramDirectGear.THERMOSTAT_PRE_OPERATE) )
	{
		//Thermostat Pre-operate
		
	 	getJPanel1().remove(getJPanelHolder());	
		getJPanel1().add(getStatEditorPanel().getJPanelData(), holderConstraints());
		thermoWasLast = true;

	}

	else if( getGearType().equalsIgnoreCase(LMProgramDirectGear.THERMOSTAT_SETBACK) )
	{
		//Thermostat Setback
		getJPanel1().remove(getJPanelHolder());	
		getJPanel1().add(getStatEditorPanel().getJPanelData(), holderConstraints());
		thermoWasLast = true;
	}
	else
		throw new Error("Unknown LMProgramDirectGear " +
			"type found, the value = " + getGearType() );

	return;
}


/**
 * Insert the method's description here.
 * Creation date: (7/15/2002 2:54:59 PM)
 * @param newStatEditorPanel javax.swing.JPanel
 */
public void setStatEditorPanel(com.cannontech.dbeditor.wizard.device.lmgroup.LMGroupExpressStatEditorPanel newStatEditorPanel) {
	statEditorPanel = newStatEditorPanel;
}


/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	LMProgramDirectGear gear = null;
	
	if( o == null )
	{
		return;
	}
	else
		gear = (LMProgramDirectGear)o;

	getJComboBoxGearType().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getControlMethod() ) );

	getJTextFieldGearName().setText( gear.getGearName() );

	getJComboBoxHowToStop().setSelectedItem( StringUtils.addCharBetweenWords( ' ', gear.getMethodStopType() ) );

	getJCSpinFieldPercentReduction().setValue( gear.getPercentReduction() );
	
	setChangeCondition( gear.getChangeCondition() );
	getJCSpinFieldChangeDuration().setValue( new Integer( gear.getChangeDuration().intValue() / 60 ) );
	getJCSpinFieldChangePriority().setValue( gear.getChangePriority() );
	getJCSpinFieldChangeTriggerNumber().setValue( gear.getChangeTriggerNumber() );	
	getJTextFieldChangeTriggerOffset().setText( gear.getChangeTriggerOffset().toString() );

	if( gear instanceof com.cannontech.database.data.device.lm.SmartCycleGear )
	{
		com.cannontech.database.data.device.lm.SmartCycleGear s = (com.cannontech.database.data.device.lm.SmartCycleGear)gear;

		getJCSpinFieldControlPercent().setValue( s.getControlPercent() );

		getJCSpinFieldCyclePeriod().setValue( new Integer( s.getCyclePeriodLength().intValue() / 60 ) );

		getJComboBoxPeriodCount().setSelectedItem( s.getStartingPeriodCnt() );
			
		com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( getJComboBoxSendRate(), s.getResendRate().intValue() );

		if( s.getMethodOptionMax().intValue() > 0 )
			getJComboBoxMaxCycleCount().setSelectedItem( s.getMethodOptionMax() );
		else
			getJComboBoxMaxCycleCount().setSelectedItem( com.cannontech.common.util.CtiUtilities.STRING_NONE );
		
		getJComboBoxCycleCountSndType().setSelectedItem( StringUtils.addCharBetweenWords( ' ', s.getMethodOptionType() ) );
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.MasterCycleGear )
	{
		com.cannontech.database.data.device.lm.MasterCycleGear s = (com.cannontech.database.data.device.lm.MasterCycleGear)gear;

		getJCSpinFieldControlPercent().setValue( s.getControlPercent() );

		getJCSpinFieldCyclePeriod().setValue( new Integer( s.getCyclePeriodLength().intValue() / 60 ) );
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.TimeRefreshGear )
	{
		
		com.cannontech.database.data.device.lm.TimeRefreshGear t = (com.cannontech.database.data.device.lm.TimeRefreshGear)gear;

		com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
			getJComboBoxShedTime(), t.getShedTime().intValue() );

		getJComboBoxNumGroups().setSelectedItem( t.getNumberOfGroups() );

		com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( 
			getJComboBoxSendRate(), t.getRefreshRate().intValue() );
		
		getJComboBoxGroupSelection().setSelectedItem( StringUtils.addCharBetweenWords( ' ', t.getGroupSelectionMethod() ) );
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.RotationGear )
	{
		com.cannontech.database.data.device.lm.RotationGear r = (com.cannontech.database.data.device.lm.RotationGear)gear;

		com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( getJComboBoxShedTime(), r.getShedTime().intValue() );

		getJComboBoxNumGroups().setSelectedItem( r.getNumberOfGroups() );

		com.cannontech.common.util.CtiUtilities.setIntervalComboBoxSelectedItem( getJComboBoxSendRate(), r.getSendRate().intValue() );
		
		getJComboBoxGroupSelection().setSelectedItem( StringUtils.addCharBetweenWords( ' ', r.getGroupSelectionMethod() ) );
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.LatchingGear )
	{
		com.cannontech.database.data.device.lm.LatchingGear l = (com.cannontech.database.data.device.lm.LatchingGear)gear;

		getJComboBoxControlStartState().setSelectedIndex( l.getStartControlState().intValue() );
	}
	
	//thermostats look long and messy due to all the little boxes/vars from the ExpressStat panel
	else if( gear instanceof com.cannontech.database.data.device.lm.ThermostatPreOperateGear )
	{
		com.cannontech.database.data.device.lm.ThermostatPreOperateGear tp = (com.cannontech.database.data.device.lm.ThermostatPreOperateGear)gear;
				
		
		if(tp.getValueB().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxDeltaB().setSelected(true);
			getStatEditorPanel().getJTextFieldDeltaB().setText(tp.getValueB().toString());
		}
		if(tp.getValueD().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxDeltaD().setSelected(true);
			getStatEditorPanel().getJTextFieldDeltaD().setText(tp.getValueD().toString());
		}
		
		if(tp.getValueF().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxDeltaF().setSelected(true);
			getStatEditorPanel().getJTextFieldDeltaF().setText(tp.getValueF().toString());
		}

		if(tp.getRandom().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxRand().setSelected(true);
			getStatEditorPanel().getJTextFieldRand().setText(tp.getRandom().toString());
		}

		if(tp.getMaxValue().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxMax().setSelected(true);
			getStatEditorPanel().getJTextFieldMax().setText(tp.getMaxValue().toString());
		}

		if(tp.getMinValue().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxMin().setSelected(true);
			getStatEditorPanel().getJTextFieldMin().setText(tp.getMinValue().toString());
		}
			
		if(tp.getValueTa().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTa().setSelected(true);
			getStatEditorPanel().getJTextFieldTa().setText(tp.getValueTa().toString());
		}
		
		if(tp.getValueTb().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTb().setSelected(true);
			getStatEditorPanel().getJTextFieldTb().setText(tp.getValueTb().toString());
		}
		
		if(tp.getValueTc().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTc().setSelected(true);
			getStatEditorPanel().getJTextFieldTc().setText(tp.getValueTc().toString());
		}

		if(tp.getValueTd().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTd().setSelected(true);
			getStatEditorPanel().getJTextFieldTd().setText(tp.getValueTd().toString());
		}

		if(tp.getValueTe().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTe().setSelected(true);
			getStatEditorPanel().getJTextFieldTe().setText(tp.getValueTe().toString());
		}

		if(tp.getValueTf().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTf().setSelected(true);
			getStatEditorPanel().getJTextFieldTf().setText(tp.getValueTf().toString());
		}
		
		if(tp.getSettings().charAt(0) == 'A')
		{
			getStatEditorPanel().getJButtonDeltasAbsolute().setText("Absolutes");
			getStatEditorPanel().getJCheckBoxDeltaB().setText("Abs B:");
			getStatEditorPanel().getJCheckBoxDeltaD().setText("Abs D:");
			getStatEditorPanel().getJCheckBoxDeltaF().setText("Abs F:");
			getStatEditorPanel().isAbsolute = true;
		}
		else
		{
			getStatEditorPanel().getJButtonDeltasAbsolute().setText("Deltas");
			getStatEditorPanel().getJCheckBoxDeltaB().setText("Delta B:");
			getStatEditorPanel().getJCheckBoxDeltaD().setText("Delta D:");
			getStatEditorPanel().getJCheckBoxDeltaF().setText("Delta F:");
			getStatEditorPanel().isAbsolute = false;
		}
		
		if(tp.getSettings().charAt(1) == 'C')
		{
			getStatEditorPanel().getJButtonFahrenheitCelsius().setText("Celsius");
			getStatEditorPanel().isCelsius = true;
		}
		else
		{
			getStatEditorPanel().getJButtonFahrenheitCelsius().setText("Fahrenheit");
			getStatEditorPanel().isCelsius = false;
		}
		
		getStatEditorPanel().getJCheckBoxHeatMode().setSelected(tp.getSettings().charAt(2) == 'H');

		//I for "icy goodness"
		getStatEditorPanel().getJCheckBoxCoolMode().setSelected(tp.getSettings().charAt(3) == 'I');
	
	}
	else if( gear instanceof com.cannontech.database.data.device.lm.ThermostatSetbackGear )
	{
		com.cannontech.database.data.device.lm.ThermostatSetbackGear ts = (com.cannontech.database.data.device.lm.ThermostatSetbackGear)gear;

		if(ts.getValueB().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxDeltaB().setSelected(true);
			getStatEditorPanel().getJTextFieldDeltaB().setText(ts.getValueB().toString());
		}
		if(ts.getValueD().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxDeltaD().setSelected(true);
			getStatEditorPanel().getJTextFieldDeltaD().setText(ts.getValueD().toString());
		}
		
		if(ts.getValueF().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxDeltaF().setSelected(true);
			getStatEditorPanel().getJTextFieldDeltaF().setText(ts.getValueF().toString());
		}

		if(ts.getRandom().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxRand().setSelected(true);
			getStatEditorPanel().getJTextFieldRand().setText(ts.getRandom().toString());
		}

		if(ts.getMaxValue().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxMax().setSelected(true);
			getStatEditorPanel().getJTextFieldMax().setText(ts.getMaxValue().toString());
		}

		if(ts.getMinValue().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxMin().setSelected(true);
			getStatEditorPanel().getJTextFieldMin().setText(ts.getMinValue().toString());
		}
			
		if(ts.getValueTa().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTa().setSelected(true);
			getStatEditorPanel().getJTextFieldTa().setText(ts.getValueTa().toString());
		}
		
		if(ts.getValueTb().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTb().setSelected(true);
			getStatEditorPanel().getJTextFieldTb().setText(ts.getValueTb().toString());
		}
		
		if(ts.getValueTc().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTc().setSelected(true);
			getStatEditorPanel().getJTextFieldTc().setText(ts.getValueTc().toString());
		}

		if(ts.getValueTd().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTd().setSelected(true);
			getStatEditorPanel().getJTextFieldTd().setText(ts.getValueTd().toString());
		}

		if(ts.getValueTe().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTe().setSelected(true);
			getStatEditorPanel().getJTextFieldTe().setText(ts.getValueTe().toString());
		}

		if(ts.getValueTf().intValue() != 0)
		{
			getStatEditorPanel().getJCheckBoxTf().setSelected(true);
			getStatEditorPanel().getJTextFieldTf().setText(ts.getValueTf().toString());
		}
		
		if(ts.getSettings().charAt(0) == 'A')
		{
			getStatEditorPanel().getJButtonDeltasAbsolute().setText("Absolutes");
			getStatEditorPanel().getJCheckBoxDeltaB().setText("Abs B:");
			getStatEditorPanel().getJCheckBoxDeltaD().setText("Abs D:");
			getStatEditorPanel().getJCheckBoxDeltaF().setText("Abs F:");
			getStatEditorPanel().isAbsolute = true;
		}
		else
		{
			getStatEditorPanel().getJButtonDeltasAbsolute().setText("Deltas");
			getStatEditorPanel().getJCheckBoxDeltaB().setText("Delta B:");
			getStatEditorPanel().getJCheckBoxDeltaD().setText("Delta D:");
			getStatEditorPanel().getJCheckBoxDeltaF().setText("Delta F:");
			getStatEditorPanel().isAbsolute = false;
		}
		
		if(ts.getSettings().charAt(1) == 'C')
		{
			getStatEditorPanel().getJButtonFahrenheitCelsius().setText("Celsius");
			getStatEditorPanel().isCelsius = true;
		}
		else
		{
			getStatEditorPanel().getJButtonFahrenheitCelsius().setText("Fahrenheit");
			getStatEditorPanel().isCelsius = false;
		}
		
		getStatEditorPanel().getJCheckBoxHeatMode().setSelected(ts.getSettings().charAt(2) == 'H');

		//I for "icy goodness"
		getStatEditorPanel().getJCheckBoxCoolMode().setSelected(ts.getSettings().charAt(3) == 'I');
	
	}
	
	else
		throw new Error("Unknown LMProgramDirectGear " +
			"type found, the value = " + getGearType() );
}


/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent arg1) 
{
	//fire this event for all JCSpinFields!!
	this.fireInputUpdate();
}


/**
 * Method to handle events for the JCValueListener interface.
 * @param arg1 com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent arg1) 
{
}
}
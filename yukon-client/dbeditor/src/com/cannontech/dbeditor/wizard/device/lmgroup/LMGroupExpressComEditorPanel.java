package com.cannontech.dbeditor.wizard.device.lmgroup;
/**
 * This type was created in VisualAge.
 */
import com.cannontech.common.gui.util.LineLabel;

public class LMGroupExpressComEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
	public static final String STRING_NEW = "(new)";
	private javax.swing.JLabel ivjJLabelFeedAddress = null;
	private javax.swing.JLabel ivjJLabelGEOAddress = null;
	private javax.swing.JLabel ivjJLabelPROGAddress = null;
	private javax.swing.JLabel ivjJLabelSPID = null;
	private javax.swing.JLabel ivjJLabelSplinter = null;
	private javax.swing.JLabel ivjJLabelSubAddress = null;
	private javax.swing.JLabel ivjJLabelUserAddress = null;
	private javax.swing.JLabel ivjJLabelZipAddress = null;
	private javax.swing.JPanel ivjJPanelAddress = null;
	private javax.swing.JTextField ivjJTextFieldFeedAddress = null;
	private javax.swing.JTextField ivjJTextFieldGeoAddress = null;
	private javax.swing.JTextField ivjJTextFieldProgAddress = null;
	private javax.swing.JTextField ivjJTextFieldSPIDAddress = null;
	private javax.swing.JTextField ivjJTextFieldSplinter = null;
	private javax.swing.JTextField ivjJTextFieldSubAddress = null;
	private javax.swing.JTextField ivjJTextFieldUserAddress = null;
	private javax.swing.JTextField ivjJTextFieldZipAddress = null;
	private javax.swing.JComboBox ivjJComboBoxFEED = null;
	private javax.swing.JComboBox ivjJComboBoxGEO = null;
	private javax.swing.JComboBox ivjJComboBoxPROG = null;
	private javax.swing.JComboBox ivjJComboBoxSPID = null;
	private javax.swing.JComboBox ivjJComboBoxSUB = null;
	private javax.swing.JCheckBox ivjJCheckBoxFEED = null;
	private javax.swing.JCheckBox ivjJCheckBoxGEO = null;
	private javax.swing.JCheckBox ivjJCheckBoxPROG = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay1 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay2 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay3 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay4 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay5 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay6 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay7 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay8 = null;
	private javax.swing.JCheckBox ivjJCheckBoxSPID = null;
	private javax.swing.JCheckBox ivjJCheckBoxSPLINTER = null;
	private javax.swing.JCheckBox ivjJCheckBoxSUB = null;
	private javax.swing.JCheckBox ivjJCheckBoxUSER = null;
	private javax.swing.JCheckBox ivjJCheckBoxZIP = null;
	private javax.swing.JPanel ivjJPanelAddressUsage = null;
	private javax.swing.JPanel ivjJPanelRelayUsage = null;
	private javax.swing.JCheckBox ivjJCheckBoxSerial = null;
	private javax.swing.JTextField ivjJTextFieldSerialAddress = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public LMGroupExpressComEditorPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJComboBoxSPID()) 
		connEtoC2(e);
	if (e.getSource() == getJComboBoxGEO()) 
		connEtoC3(e);
	if (e.getSource() == getJComboBoxSUB()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxFEED()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxPROG()) 
		connEtoC6(e);
	if (e.getSource() == getJCheckBoxSerial()) 
		connEtoC12(e);
	if (e.getSource() == getJCheckBoxRelay5()) 
		connEtoC13(e);
	if (e.getSource() == getJCheckBoxRelay6()) 
		connEtoC14(e);
	if (e.getSource() == getJCheckBoxRelay7()) 
		connEtoC15(e);
	if (e.getSource() == getJCheckBoxRelay8()) 
		connEtoC16(e);
	if (e.getSource() == getJCheckBoxRelay4()) 
		connEtoC17(e);
	if (e.getSource() == getJCheckBoxRelay3()) 
		connEtoC18(e);
	if (e.getSource() == getJCheckBoxRelay2()) 
		connEtoC19(e);
	if (e.getSource() == getJCheckBoxRelay1()) 
		connEtoC20(e);
	if (e.getSource() == getJCheckBoxSPLINTER()) 
		connEtoC21(e);
	if (e.getSource() == getJCheckBoxPROG()) 
		connEtoC22(e);
	if (e.getSource() == getJCheckBoxUSER()) 
		connEtoC23(e);
	if (e.getSource() == getJCheckBoxZIP()) 
		connEtoC24(e);
	if (e.getSource() == getJCheckBoxFEED()) 
		connEtoC25(e);
	if (e.getSource() == getJCheckBoxSUB()) 
		connEtoC26(e);
	if (e.getSource() == getJCheckBoxGEO()) 
		connEtoC27(e);
	// user code begin {2}

	// user code end
}


/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldZipAddress()) 
		connEtoC10(e);
	if (e.getSource() == getJTextFieldSPIDAddress()) 
		connEtoC1(e);
	if (e.getSource() == getJTextFieldGeoAddress()) 
		connEtoC7(e);
	if (e.getSource() == getJTextFieldFeedAddress()) 
		connEtoC8(e);
	if (e.getSource() == getJTextFieldProgAddress()) 
		connEtoC9(e);
	if (e.getSource() == getJTextFieldSerialAddress()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  (JTextFieldSPIDAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JTextFieldZipAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (JTextFieldSerialAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC12:  (JCheckBoxSerial.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jCheckBoxSerial_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxSerial_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC13:  (JCheckBoxRelay5.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC14:  (JCheckBoxRelay6.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC15:  (JCheckBoxRelay7.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC15(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC16:  (JCheckBoxRelay8.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC16(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC17:  (JCheckBoxRelay4.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC17(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC18:  (JCheckBoxRelay3.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC18(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC19:  (JCheckBoxRelay2.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC19(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (JComboBoxSPID.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxSPID_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxSPID_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC20:  (JCheckBoxRelay1.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC20(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC21:  (JCheckBoxSPLINTER.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC21(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC22:  (JCheckBoxPROG.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC22(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC23:  (JCheckBoxUSER.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC23(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC24:  (JCheckBoxZIP.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC24(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC25:  (JCheckBoxFEED.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC25(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC26:  (JCheckBoxSUB.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC26(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC27:  (JCheckBoxGEO.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC27(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JComboBoxGEO.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxGEO_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxGEO_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JComboBoxSUB.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxSUB_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxSUB_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (JComboBoxFEED.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxFEED_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxFEED_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (JComboBoxPROG.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxPROG_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxPROG_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JTextFieldGeoAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (JTextFieldFeedAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (JTextFieldProgAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * Insert the method's description here.
 * Creation date: (6/5/2002 10:46:06 AM)
 * @return com.cannontech.database.db.device.lm.LMGroupExpressCommAddress
 * @param combo javax.swing.JComboBox
 * @param textField javax.swing.JTextField
 * @param type java.lang.String
 */
private com.cannontech.database.db.device.lm.LMGroupExpressCommAddress createAddress(javax.swing.JComboBox combo, javax.swing.JTextField textField, String type) 
{
		
	if( textField.getText() == null || textField.getText().length() <= 0 )
	{
		return com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS;
	}
	else
	{
		Object item = combo.getSelectedItem();
		
		if( item != null )
		{
			com.cannontech.database.db.device.lm.LMGroupExpressCommAddress address = null;
			
			if( item instanceof com.cannontech.database.db.device.lm.LMGroupExpressCommAddress )
			{
				address = (com.cannontech.database.db.device.lm.LMGroupExpressCommAddress)item;
			}
			else   //a new address is created				
				address = new com.cannontech.database.db.device.lm.LMGroupExpressCommAddress(type);
			
			Integer addValue = new Integer(textField.getText());
			
			if( address.equals(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS)
				 || addValue.equals(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS.getAddress()) )				
			{
				

				if( !addValue.equals(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS.getAddress()) )
				{
					//we have a none address selected but have a non zero id typed
					com.cannontech.database.db.device.lm.LMGroupExpressCommAddress 
							addressTemp = new com.cannontech.database.db.device.lm.LMGroupExpressCommAddress(type);
							
					addressTemp.setAddress( new Integer(textField.getText()) );
					addressTemp.setAddressName( textField.getText() ); //just use the address as the name
					
					return addressTemp;
				}
				else
					return com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS;				
				
			}
			else
			{
				address.setAddress( new Integer(textField.getText()) );

				address.setAddressName( 
						(item.toString().length() <= 0 || item.toString().equalsIgnoreCase(STRING_NEW) 
							? address.getAddress().toString() 
							: item.toString()) );
				
				return address;
			}
			
		}
		else
		{		
			com.cannontech.database.db.device.lm.LMGroupExpressCommAddress addressTemp = new com.cannontech.database.db.device.lm.LMGroupExpressCommAddress(type);
			addressTemp.setAddress( new Integer(textField.getText()) );
			addressTemp.setAddressName( textField.getText() ); //just use the address as the name

			return addressTemp;
		}

	}

}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G39F56BACGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E16DFD8BF8D45535FFDAD123260AEDFA7F21B757C625CAFB29CDEF71CAAD363425EDDA53EB2CD8F3EDD4ECD1E3C50B95DBD4FABDF9C0A6AF98A0BCB4090417848DA1C0A0CFA11084928C90A0C0402819E4A64940A493B393B201G7F3577BEEB1D471C49E4C2616A775DFC5F4AB97B3776DA6B379FE71F57BEFB242CD59173939233A4A9E13EA47F15A4C8D241A312547147B157A1E60AA9B7C92A3F55A00B
	25B7DB12E13B92F4ADF7D4184CD264D61629G524DDF29B02D007D25527155F98F400E0FB8F327C8D2D777457B070FF353FC0C13425385E7B3E03B90248830A610889033D4F3F6250CFBA03DD05EE71210A8C9AD8F33BC4B8F2ED461B365FCC5202B81E9799D4B7369599CD9BF9E30A9A0AB81AF781D48DB835BD44E6E5A72D2B9DF4B2D21521C5FACCF4CE431D47ED1464B36D172B6CF3A0DD7C412F4D3D395ECAB9B4FF46EECF7F69736DBFAFA1CBDEEDBFBD7214DEAF7BB7B8A2D363376F6DB21233B3C3C6140
	3EBEE7FF6FF1DB1F4B8219EBF906C6CB0F4DD17A8863DDF95044FD429F2427F1EC52C1D6D7C3309F8AB27191647EF0E6254CAD74CC28B4634ED41F5CCD53856702698A7762077E1198B71D798F66ED416C9C109E8FA24A55FD3051C7392CEDF249866C67ACFDD625001D2CF0D44ADACFEF1F4D652AB6A8E74CD9ACE75E23D84E37CB990FE6C8770284937EB447A3A0BD99A466D1AC7F879B307C4D676F14247089090BFC14BF7ED1D1EE736F1572C7BE752D4437F8DFDC11427AD38368FAC14600CCG0982098749
	6647406F663F875B5DEDEEA8CC3733E7F7EF6F9E07356F0053EAF340FEF9B9E8E46C082D5D59E715A4514FF79FACB06003A2BD266D63CCC459CEC858AFA79E790694B3781585738D4AB669511509D9320F7C47143245BF466AAD221155DB9D6CB33B8FD9BDF07C3FB8DE902B60229F5C4F7B99CBC703AE7F8FD84F4D8B11CBC3724D12F9CBC5E20A8117301F95A50EF9C2F088FFC261A26A78E5932B63A840E7024C8349FA325CD48C5274A456F14E02ED7E6A389E7ADFDF0F45F1343F2D5752675E53EFF7D8EDFD
	F2DD5FFCF6383AB692E1979E301D2817895B54ED947703F243FA091B30AA3177C9D19F41CFAA75A2E2BF6AB37604A73D7B46C2EA431B79B1B165C95106C90407F1BCDA050B364D63B8CF032E6AA9685BBC7F31F2060FFFCA64AFA1BF039C4F192160424FF35C8FCB07022E710F65A6513E37243171B6E3A6749B10AA10E6908FC8A848041958461D8BB60F70B8EAD4352F304DCBD98EDB1B475DE7296FF139ADBD6D366316BE3B254DE1F3C9F21E0DA92CDE5BB4F6057C78EE07987BECBD36BE0B5B6E6C816F16EE
	9BF4A61748D3123218656933F1ED133D5B86813AFBA5743BABE5A9EC9D96177BD82F556236A9B904FEDF8A6B93E7ADECE0878730BFF7A62B2FE6BE1EC7417E4C19D8D7D35299D6798C747DE730DEFE1632049DFB5039ED0E72729AFBBB23E1699B44BEFAD7E3A8EC3BA07FEC904F3365266467E02C82C90E07AD0869F99833C01A7E8CF1DFA8B7CD85F14C02735E0B0003F8DE027372DF4ACDA1A0D93361FC8BD270B20C29A00E3F161B66008C3D827E66C09E102CD74BCD61A06B7E86679C10523F03CF103A3965
	26E81026574ACD312F619871D2B39E8BB519632402C74B8C0F85FE1EFDDD74EB776B7AE3E1BAAFE3B860D3C062C06601643CD1EE2A84E9819982898719829287B28FA4E79E68C1DAC006C042C1260044014C8349798768C1DAC006C042C1260044014C8349799F500334008C010403CC81098319871273A6DE33CCBD5818B87C38406A8977D99D317A44B4EB3BC04698353036E66D4476D91D33B6E76D4C5AD11D0F3517BFDF2C1F60BE6BA72CAF0D0483EBFB3FF9DE907D855333F5E50ED245AEF8D959E7FD541F
	6FA803BC2CBF337E2A46D8BF467D90150E75E7F68C7872DF2AABDF042AEE59F1467ABB797D0BB83658F1430E3D5136ABBB16C45FBAF148DF5F5A255A5F8732CD15CE9AE5FCA66C785DA46F33F3BF3B06DC8632C1172FE2843E962B76593DC34A88B9D40FA08F9BBBBFD025676B74CBD57B6F2B76F3C760FB15813696E43B8E5B225AAFD16D17C962BE47177F5D3A74C655FEBAC83DAA3DDE92679CF61EDCF4996DDAAB5759E2693DCCF64E2E04F12C994473A61EF37E1112A771F3719E0B4B06E75FC3FDF06234D9
	15B310487B3A09F1311D357538EBEC3D369EAB6C3864F3DFC2AA6BC372F93943A961B9B305636CBA2D9ACE1CAE42B3D3978B9CFC284F7228DF467596373B4F5E566F369D35395D761ECE45BEB715F1F1E9AE81DDF2D9CB9632320E05B2CEG19CCE53DAB15758FBC3FB6B81DE77AFB1B581503FC1E1E456FC722A17FCC9A6FC3CB59BD2BC92A105337713422FF3734F9187AE7F623EDBBA6A2462EE1E3DC4EF12F4478285CA17B1AAFE329F23FE4F516A977C356A6ECCCE0E3438A39EF313AE54797BBFED87FDFAB
	775F8A390F3363F0135C17593143462C6D9477920FDB8475548C9284B281A486E4AEC8DEC205298E2497A48CE4AAC8BC08B93142D48A528A928C9289928BA2A5D51872C19AC1BCA091A0D1A033C1D6A6D7182A12319DDFAC0DCCD06ACFDFE6F5F9170E303C9B7C14B710B1747FE4383E5AD2B6DC5B295BADF3046D36EC18F6D30F716AB17B7FA4B091E37038B45F671008B463F348DDE946671009E9431FA3A625991DA3046EC7E92C5FB887FAD4671C29E96C7E2B5D5953E363A7BEB211443330171AD8B96CBDF6
	77893B355366BEEABFE70373CCB2FBE66A6477F8DD30BF84A26E078656627D503AF3DF1726FE1A15E8747CA66CDB5B9227A70B73C43C3CE577C30253CF5359394C6630F5C3C5D5BB7BFB5C827F953FFF14F1D79247EEDDB544EC730F8A7A3B2DD67E642D4B56FEE60F53D3E0F75B3A8B593F23EE38F92D6E3274F45A2C7927ADE7AD051681F7A1EF1342FA5057323D0DF91BB66D4C737D283220435EE72B6F696D17EF0673B79E5F38C570285BF50E73602DF575D9EC956342D2E9F565854E2346FE566E7ADF2910
	ED92F2C9BD6F66DC0E589C1641ADD711C23108BF38C095FF6BD50C3FDD447FDA29AA7E362B98FF0708FFFDEB3F923F78EA9E93255487763E7B9F1C43FE8CFF5456E737B864EED9E061C7ED2158B45A7ABA1CFD5D5EE4F6F37548681CB68C7469EEDD04865FA1AA2084A548FF4700B81E76B741983D57EEF3D83585E8072BF9F7A17FAF171FB976943A86E0D816FDD7B36D28ABD3294B6614FB34F5D95FE305435C5AEFF1DCE6C59A3E30D02AD20993E8BD96A177B4739DB2F7E7F71B13B5CFE3FD4D95E22D0A90A8
	5FAD48770D0488AD5FFD35072EACDD8890A85B2D026BB7ECBA2EC70F6D3942D5FBECCF20DC37892EEF56697A415E5A5AAB5C8FD804C05996E3BF28DF2B635BF864503EAB4B17C588146FF6643BE15F10EE3CBAE56F7DA78CD6461C8D062BB2416301F3DE63A69C0ED713488E9AB71FB92F2F13FDB6675524D2A2F8FC10222F133DB61B75EA92D14EA50FEC3E28635258676C3C1ADC3614A117D8F75015BA470E1CCD11607244663B0D2ED72E6C79D5448878DC35C52E3FFB864EEBB9738B3E6DD70433D155ED15F9
	ECDCEB44E347D56331CD66F146EC4423642A71A8466B3595C6BCCA2F9A0F6DB20F273B0DF894DFB59EBBE49ECFC9C6BC36DDB59EA5B20F8E13910F2DD70DC7294CE3CE06910FADD70B4756B219C7FB7B855D185758D0FF30297648D5E3D2C46725FFDC9C54F239E257DBC6BC36900F46AA9D0FE3C72FE2FDECA59E2BBE73E8F91C2AEF3CEAB464EB767F4E535545953BE6B7A2D1CCF57114D9D797D76ABE4708067CCC27BBCB4761CA5D979AF158A15E751DDE441E0F1A66D718F2C00AC14473516A8C2647F7FD72
	8B4DEA2743A11E0D02EE62FC765C3678F0166AD9EC83E0EC9EEA98EC057EDEC37D9C526FB8E224B7ADC07DFD067A9C52179EB55297117E07067A9A5217B799691BC97FA3C33D037415470C74C124FF40D09FCA7A1D470D7493C87F93C37D9452FFF842C89FC37AE8C37DCC529FE8B6524FA57DFF996AB3D2D0FF682411FEA1750F73FE74F77B51BF62C77F2621BE0F78851DB2529713BE6123617DEF7223BF69C79FD9BD3CBE4E0F5ED4B33C3E580F3E550FBE440FFE329F7DCCBFFAF36D707ACABF7AAEBF7AD01F
	FAB10E95E51AE16B32FD56EF6BE93731498A9F5A86F13EE266921D6E3845512F4C035C15495E07BAD4739C847E41C263F7CA558B595C06B364FF5F4285921B4FA8FC0AF7E011966633374F5EED699BE493B7647978C9836A7978F550BF595C7DE05806030873C5CCB51B9FBA5CC86FB631BAF9349C676DCF825BE810D9323F8213F8BFA6720D2B40FCD3A19DEBD2724D5564BBD009792AD2ABCC4D29CABECF2ABADF4287648F70D8D53E391AFC77D23E2AB47017267217264EE75FC97EG0F85191BA67295272B73
	956C42FCCD00BB52FD651BC179C2G9F6FB3DFE895661B86F81C4FFCF53BB15FBC4033B2FC651BC7790AA1CF034FFC11FBB01F83720C81991FA1724D4CD0673BD40D790AB2ABCCF519CABE2D3FEDB5182F8B7284794C779C650B00BC13FD667B57DA4C978BF9E67B4CF7E8AF66B3AF2CB065AF7415AFE99F662B03BC2DBE735DC77902A0CF184FFCE76AB05FE4489363B35F2AFA4CB79B721896794A7788654B07BCD5BE73FDF5BF66EB05BC9E1F7976FE087942A0CF244FFC2FD33E9848936FB35FBD8D184FE42E
	B06519FD65EBBBC0479B64E9B64867B133FC5751F7B31B897BB70E7D8A8632E349B8E77F00D97D3DCF531ADE436FAA18CCB18B7FB1E6653D3C386E7C0E19791D8D3834982FB9FF3AD0BD3FEC374B65EC3773296472385B3BC87D4EDEE07D0B52E08B9738AEF7FD0F556641317B7CA246154DB517E1F97C7D7777597CC77D5CF9B10462743D6A81FEE15D642CF6DAEDF5B07CD753140663F65BG580B6FEF4E9C467A4ADA0CF396AE6CD5FFCFB4E5516A44F49FF55330D85409E331D2B76E273E15A8FC4FA25F93C1
	AF306EA3084DA46CA542F216A066BC0AD893E133898BA16C33A644269176D742669166BA06D871D244669066A02C7FB8E263897B9BE1F104FD798455DB96E2C94D08B590B60630B1044DBF09589442F61CC2EC8EE17791D6302CC27E96EBDCB91BCFE074ADD6BB6F8C051D7D7642FE371DFDBCE0F1DB789D93BF2D4A6D5DBDE0127B1195FC0A6F2A461DE3578261101E84928DA23E71789F7E6D874BBB93301C65F83D19DB243EDEE982FC88A4E2B91E63ED956CFEBD701BC06C5FC7D7337EF7B96FADC5BF3EE3E9
	154CB17A1E1B254ACB09065F0585AF4AC81C34DC745F3865CABFEECA39AB318BC454454FAA30AE72D740B83F826B620592233A88DB016DD5EA2DD017A570171A7277B6E7ABB17EC470BD136217F598454FD909713F5D2F099F780BCAB97EFB9FE07CA2705D35926357AEB26C8B94FF61E71A369C453BC7917FC90ABF89FC4F227813969A45DF7796463FF725A67EA85EA50A78DF5D0971CB41F76FDB983FA8D59DFF42DBA2FE4CDBF8AC3C36131D0782FCE3A39F8753B6AE9167855D038F7C866B58AEBABEA1DE4E
	5B48E97EE1A3CECDEF63F11DDA05F6DD00C510DD134948AE166C9EA03BD9002D4BC63B8B06F550120DF61F6DC63BDE40A6105D1D69C6F6B348EE7D9E341B83D8C18E5A059A5AD9F3506E3F494E83D8A459BD23310B4F91F666DCEC2B8F2BAFEF5C3A7770CE5E57AE67AD96366D04EAAC43BA605712CB4FDA2A75E588855D64DCACFBCB8D5AC583167C8E5A6D4FB6322BFC876D4C35E85788D8B059456CB1321BCAF65348EEBAE0992B506E745BC6F6B52B504E33976D1A819BCBF6DFB3340BA23B02FDE89787D8D6
	9E5A3DE14833A18F6DE610DDABE0E1E4374830DEE248AE340E0EB140F2D6934FDAA33B2655E8D7D7CF4798E091E4F7CD295EAE96F47348EE9E59195740FD519A34EBB09B59852DC13B9F6DC73BD04022492E4D2B3FB03B6435E8677C906DD6825638966D7E5BB0DEB0592DEDC03BF04026135D7306654BD807F60F11DD9EE04D6B283F98469BCBF6B79DC03B718CA33BCF3C5A0159E52D47EB5993DB555779D3E764994E3F6577C76B45393FF23D7EBA7F66A56C1A2999F047FA3C4ECFB033F947F81DFF842E2CAD
	BD1D8E1B04576E5FB333B1650CEDD0CE7F404C627267A8924EE16FBD9C487746C190DB70F9F0A9ABF3A824A3C122C0E600C86FA2377245FE3F1F2E758C737D744B81714AFB973F2768BB9208DDB1593D9210DD9D59390F86E257C2F62F86E457CBF6E71B82319BC3F6FF8F48AE0C6CBC4782311BC8F62F85E4B7156C4E9D8F44EEBA59ADB89108DDBC59DD9F105DBC32B3B587E2E75E00F6B784E4370E6C52CE86E2D7CAF695278231EBA03BA981593512DD5F005E4E3DC17976ACD835CFED413F714FBC4F6F7FC0
	4F464594425F6278A495AE4662EF727BC5160E86DDD1BE46CF2E50478F4D57460C5425055D92AF3BF774FDCDE7A72E37BA9DEC3C6377422A4B6972F21A1BA8BF17BEF2DE7DDCFA9678E25F6E19B742B56CC63C57EEAAB249FCAAB762B83BFA99FB66640674D81089A053C062C1125F2BB0653F07636D8D0B0D1E47E847DBDF8FE314EF9EC5DDC40D328EFF6F378E6B5E535A09F22FA945F2373E076DB8D4B9BA8EB7FA5969B90499F2686DC08E114421680351F15869E5276790EF48E1E891F2105EC78EB3C74961
	2FFEB9143EEF44610505482111B8046D9C9D073B3C6C8AF56960770D0E2975792C4F9B9CD3B497D1F06DCC4567C891447523DD2363EA773253F30DB52C2F4A43D8DF330943222A51F148753253F348AFB062F013896B212AGB97CFC149C9E764B41E348E1923545D862B030FBF49C2E753253F308B26470F8BAF218C19C5E5FB3BA8EE5DEF6FA8EABB799F1F810F3E0577DC51B1043D323647022171D7E986E5AE4F47C6CBC6E6B1CA4BF95103966E4E05F8DA22E77D40F0E6B94AFBBFDFDCD56F19567453AEC23
	73E28C641D39091E07D7A34FF944332DE6F4BCFB3D6C74BC0B8B0D5A75CB5948212190B9AC2F9D9D07F5DEF6FA8EE38CB924D0BD0493075F0C12C32CDF8E538DB95C7EB6766FD94461625E51F188713253F3D837590843EF08C365E66430F55F68B8D4F95969B9388DB9EC253688A18E4F0E12439C3F9C2699F258CBFDB20EB8FC23EEF49CA6F85969B9E4959936C5ADF2A8A8C28E876BC74721454BCE4F41DAE4B406D417980DA1C310F7EC910EA17753B56684621939FFF4BC333D6C74BCE7985655B5E664B017
	B87CF4149C9E724B21E80B9107F154EF6B36A0077E8FC747619AAFBBBD07A0C38E664548A10CB8ECEC989D0792AFBBBD0798C38EF9E548A11EB8BCB1CA8EAF7865103755F0AC257ED03A95B95CFAE0F49C3E69E5276750EB48616BF47C86EF45FBCE4BF206CD05F44CD63C3FFCF6B1DB43821FB5B6BA6DBD6CBBEA217B5A92B6BF4B59E76F3477A0964631F6E79FDF58C02CEBF3BD3FD61E81BE67115FC7167ADE07617125466BB04CD8EA3C8E4333CB07DF4B6725253E56E9907CCCC7101FF9DB05C9E0B790360E
	303423081592F693E18D04E5B4A156CA58D788F393367098E241045DC2D8B8E1666308C592F6ABE153884BBD01D8ACE13791B60B30D54D08C94508C59016C5586A13086593F66494E21504BDC2D8A3E1B770F77DD6C8FB886B98E4D8B824A795E33FDF4A1F7344C2FA8EC856F644D7F11C3F83DCAD5EEF887CDB6706DB0B880579B142B10EAFBB916347A30A61EBDDB1DC934617DDAE4F736B650BF81FF539ECAE7E00064D1810F54F3917C9866B009C34F45BA41CFFDFD111AA6729F5BB793BC3F18F704AC6F6CE
	B43887D02DFBFB63F9BC760B3663BC0C26C32C3E3BA09D8492C66DF032C8BD3EC46A6AF59A24E3F518B8665EDF667B785E3A4C7878AEDD46469A17333F2F5D26BF06F7ADDBC9BA658996DB9901D50B48D3476D5D163ECE1B5798F0085B8B1DAF7B66E53E468979FBE9CD1DEF237E3221D4DDC733F475A16D00FE3DC30B89FFBF28D47BABA6FF7D9DEAFF79BA5BCAC8B79A7A6B7CC06DCFD9636ACB0B547E2CBADB8F24C38C7DE56FD47B5BC17EE6AFD47B0B5059CE02F414213F07F626297CEDA9C2FF0ED4353FB8
	1D6D6C9D5E472B707755DDEAFEDB085FEE4DBB246492E13FD25E961478723737CA6D2F047C0DB5297DD5696C1BFC7AFBDD632F147C7DD0D35EAE1D7D10CFFF776CD67BABA3FFCF252B7D0D55590F77692FED0F26BD36203F980D3F49BA7BE8C84FG192342053F65559AFFDB515F6A8C35BFD329304B1137C5253E78BD2375378D2FDD02687E272694472FC9FC6E419024C3C1A61652FBA52F679353C097AB471C65B376389ACD6CE2AC4BF559FAFFD2999C5FE542CFFE19AFFF87EAB57E36233F8CAFFE156023D1
	76E37569AFE12F465F8EFA767A365E1F87FC0448FEA2646D24B2FD5B5D2B75D7C2779BDE7E2240B6CE361FADEF134B757E6C7BB47ECA693A5D2B3CAB4136C0362FAA77D55E5CBA0D3FB2747721D7FBB4010FAE594F10CFFF8FEB7CED253168A12F67A3E34147F8594FE41F7E2E2D57785B02FD75FC89765568F26C2B6333D9DFCD2E28B0650094D7E0DF7DC929BEF68368DAABC4CCF7052F58B57BB53169388BB66B7D85030FF059CF24CFFFF3357E36213F5B3C0FA57091AB7B1965535F448FB57E68D8DA36586B
	D82A04E329D2BE16AAFD79EBED507823E3E9FD19573184BE9AE5BFD61F7E328EE87CA94712D77DF940C7086CA742273FA82DBFBA163E615537A6010FA859CF1C01BFF1DD52311C3D8375D07AB4CF336FC045B51FEDB76F9F7C5A263647AA5F240979673771FB2F8712453A0F82DB456FED4E4C97EB468AAC02E3EFADD0E32B793DCDAEE05790F687473281FB183035CD18EFCB82E263B976DD08FBA89131757C5E66E14873F292E2F7F16C76A431363040B670FB1BCDE0BB0E7CCD6058C3C9E2CDD9019573FB1BBF
	GF68BE177F26C39A4B53F9D7C5E66B14032495FFD9CDB84B1CE90D64A6FF7EE05FC3793E66777B60F8276AA15634F9C7BGEC7B93314DA38658FD2F43B2686C073AEF79004720EF12E6C35B1AGAB822979C0BC2792ED777D81B63F3D234F528D171AC7FBED6DD269CEBE2FF190ED47C37E49A031A0F3C1D66E44B9036BEA59752E383217576720BEF8624C923D6E184B52E923EB4FF74C24671F3AF32D6827371CD77753A008973AD3691B93F6FA77D3F95DFF7E1B8ED3F60AF7761B891F4C71F53B94DC3C4BBF
	456FB9D8BA84F4265DF81F584B5F070F5983F17750BD75D63CF71CC058D8BE364E05F4C6B5E2BB79733EBCC89791B6550C36B504BDE9E3D8A824A79096425F85CF01F4B4E13F48C75B99047D193FABAD2A81FFB5080571F7384D106ED23053E8BBC458C9EE9B8D69990425F05BB910CE2E2567G925A2EA4ACFE87DF639152C304DD435F3F0D05F484E1E665BE1B30664318AFF9AFE26B79731E15104EA76C4665E8DBCC585DA6349DC3186DAC668BA3AC06384493166541FC73887BDBBA66EB5807D85DF94C57CA
	58F314AF1230984AB70D30AA1EAF2B8E4AD1C765903FEFG69C642CAB3501F15303517986601F4B0E14117B0C6E89D1E1B2F55DCE74CE4F96B1463A0235E57B1D143672866550B3E3F1870E39CEFD061726F1F706BD8167600AEF9BFBD6F614FEF47C2FABCE10FF2ECB2242388AB2FC16E53897B37EC34DD77A1E2CFE723EDA9E1FBF268B8A1ECAD458DA52C1362CEA0AC2A1A7A9CE18F3C0D36498D08A57038ABA11DCFD8C7B675B942A27831BD86529104BDCB7EA692769E371D8A699842EEA1FFF104CD5B4330
	028395263A83089D2432B59176D50EF5C15AC358ABD436B10435D11DCEA76C2EEC340DA7AC056AF48EE14F5622ED4DC144B66FC55BE642466EC5DB6BC16C07C1A56AFEB889702803CA5F0BBB682B9F966730FEB57B203E9F56F2BC67103E9FFEA79B7BE19D68269FC2CE3F6763EBEBE305495DC84F9379B375E0C80791B6268C390FA76C1BE6341DC3589CDEE72643B04E9D26B1126AEC9DE177D6D3DC42DE2BC65BE042CED17F8FA52C003FF71849520475F2AC6388DC039F2163E9B15A6693D6D906369E42024A
	302DC288FB1A4A9BC65883E6340DA7ACE1B15A4EA32C0D621A0EA2767DDA34EDA66C55DA34F590F61C7A0867A84ED7FEEA00359DEB4FA84024A67C9EE5CB2BE6FE8D7B8E203CFCDF1F5D3A475259402FDC44BD4B86BEE6B37B52A63CE7B966E1BEFBA19D8C925104F31CBD6F6277FA936F3AD9EA88AAB77C7D2F99CD2B93A7B749573972164DF11EC65F6B5DB908B1D79E03B17B983B86FAF8D0BD3F1ADD375C1EA85EEF88FD52B9351E75D536BE36225F2E51B33E8FEA6CBBB57A79AAFBD1368757E35966BD98AE
	B96E4D77795BE6E147C41926485B99772D11463F7DBF097238404FD9F3C0E7BA0E6D76078BFCBC02F495E127683CE3BDCE6B7DB73630639C5231A033C1B2CE407DB2C89DC897C8B048C410A810F890D3B368C19AC03AC002C1A60244004C82B11D2CB065011402B41D44B8BF66F158375F3D000DBDA93E6F0E04ED8C486C1362BBEE73A9719DF991EC9BC1FAC14602C41E925FEFB7485FDD33EF665977704D72F76C6C9BF5912775D0EF02F77D2925CEAE93634A520C232F3C85F259B4635D89D1CF7C3CFCC2EC23
	CEE873649978E4F5EC9AA6960F277293FB5CF75E60E65F3A98D9D76AA756C8E5225C668D325FAED56CAE192F7CFC41EF5DE74A475186B93DF9183C6CDEF42D8ED37F5ECA2A3CDD264B733E01AFF6EC7BDB5BBEDD35BF5C7B1561FE83E53D3C5D64A756C805FDEF4D5E1D626F3B28FF4385FFB7C5DE7F39082DED51616CF1E7FC443F8B6777B8B1F05C44010C61585A2DB54344CA15FD21B4020D95E42DDC9F1E0F44FB5C840AF9B73F06E23F1248965F90F1FF4CB1260F7E886FA30F15EA391D616778B8580F7F88
	39BDE67647ED7EB05CD63668393DEA73661651015C5635A037BBBB345CFE487394033E2A853945657B6316B28C37DEAFEE890B3C392DDC045C06085B7796E9397D02678981FD98F17B5EE9FF5CD207619665452DF721B7376B97A23769446D9D9D37E24EEDA668E793376FCB7E38AD9A06DB5E47FAEEEF6E7066361C7ADB4147484DF9D84BEDA23FEF2C84FD5D4748ED4360F05CD87CF4D51F73FC2C659682696F4176CD7893B12E65773FE1000FA79E154B998F374D631E8E18A45D478EE3C9443FFD393F78C92A
	6D4ACF34718BBE51470F617750250057FC02E59CBA6BAF46FCD58C37AEC630D70C57F8BD06829EC1B15E77780B21BEF6E3F4B1E6FA45D8456F21E783BE0FE2FCFA5EDF0CC52A98851FEAE3D4FD2A0FE166B19AGEF7E94E3BCB7EC0C94C90C4598A3D897A39C525D89A2067CFCAC1D5958FAD8CF35CAA2EECFBADE03CE78947B486D695EFDFAF2BA7669A910CFE0964EB99A5231E4DBFEC95B3F7E720E523F3EF9E93872A4694AE3D59DFB0C1F293542444EE12FC1F94435E3B83F0F4A82BC3F952FA7176772FA04
	F4ABE1E35F21FB59D63CA65BDF1B875B69101E8D12E1819FA0B5A02DA0C3A0E1961AE74F7346486B48344A6B5354496B63CC16573591F927568441F6C87645FC284B58AA27D9BC96F7A4675B69FE7265DB3C75024B1FB897568F53A5F10D234E13294ABB5C35053E0D0653277A30D9AA7D035F47F577583A1DBD76F651FF6E677732E7C0A6D9307F4C2A56761FA5F9CA7FB9DCB3127189C55FFF26C10C3FC35FE17BA27EAFF97F69E6ED8BBA916F58EAA55E491C110CD53E624D700A57404B4B66FE4C22F8572ED1
	62BDD56DAFDE4AB07166F945934F0EBE83B135E17D2E4C56566F8F56AA71AFE40FE45C7495FFE51B92DF443A2F0475B171E1BF7BD44B52E30534087B46BA09F8AE626DE087D9C7BCF76BF8EEFCD761797DE1F9A67961D96C45738FFBFC7334ECD0F88E70766B8429A21E17F235BCEF49D7F8268D5BDF137C34E7E31B3EBDEF62754466C33534E17F095A2844FBE7587E2ABEF79B45F3F8454B624FD95AC1BC946F057714F8F76F7597EF3863B1D895CF0C537F2F84477350B69A4F4BF0BC1FCC58574B69D9E79B0E
	3B65B9F930ADE807F19924954483928AB291A49AA43E9D73FE4873A6DB453AD6EC8D2CF8F9EDAD133CE697DB0FCB640D4C8E02AD33E5E58AEDD7465A68F66D386BE977BDCE379A686AE4EC22012EC00789AE0FF0AEB80E2B6F8D753FD7E9B48E2BFD999D5B6AF342F0E33E6877AF16FA0F67493C2D1E83D9E74563E3C7197678601F024B7D67DF4BAEE73CA90698EFE87AEB94FF7678B4C89545CF4F5146BF3BC9095F6BF7FC9F7678740A7FA49F9FDEGE9316271B22ED00977195F73573047A778FCD3B3EE6D48
	75EE03E37C396A2B2CBFD29DDC3FD8DB87D3B6AB1CE6AD3E1CF3EA30D5399F9271ED3C8F7C96A4146AE06D96A55E5CE15B5C5F58BD5EAA1E6B2A4EF1E66CF31194EF6FD6A55E60306573B786CF851F191AF80F736B1807C022A91EFD1B922F5B6F18B8DC9B47296209E37E992FEF4C7D0930FBE514F6851EC06D44BB158D036CD9F93CD53CD3C9A03C0863F3D438F8DE7F11871F57CBB628839B4E47BFD14C66GC4C1FAA648BC102C0E8AD3B1C8E3874E237F4BF236DE7B305FFFB7B9FB9BECE7ED8E5554F8795B
	1F41C04BA71E0B7FB4851F0BCF3A7FDF24495745A778DA234F5AA1466EB17256731FEBB8AE4A77676D2CFC13C09783B287A423934EC1A0251DD83E12958522FCEC09415DEE37253D0B2FDE0805E38B8AAAB01BC0A10E73874E337998ED4EBEBE89D84C4718CE5F62B700FFABC8B8C8E427D80BC9587D750277BC0E540BE89755A966F14C006D9C59CE9E4F7C5E4F297BFBC6971433CB74F516AE067DF1B01E3DC17727F79CE44FCD8DFF31C742B16F13E5EC1E517E86CB1B4D4174087FF20F1970FD3507E4B3210B
	581A25712B7C7A0E503B96A936C77B5BB43A04E22D2DDE7F533E45E42B7AB59D629B162EAD13D11E3B96AB7115DFCB923A27B6EA636B752B93157847DC36BE3D6F275F5246B74A73CC3E6203AD58265757AFDC2854CF2F435E63E67DCB683E755692ED7D68747B1D5A782ADF79A17FCB3AD6E8FD28FFFDC74E736CE1F60D237BD59CFC2E7AA91F9324DE3F10FC5F6F4AD06B20EB887CEF27B47851E3FB845EF5C8630B2D1FC73E4E1C5068D8D5C93826747D2D6A77EAD5DD729AE9DD38EE5271B4A33D07740FADB0
	520710FEFB0A519AEC91249FE7B2321FC47AB6C3FD9469EFB35447115E3540A87EEC523FB55F48BE590E7AFB8C4B371274F999C67E8B6CF80E5D4E06DFFCC634155DB477588672E8E9373D4E9EF77E9AAB7489E7671A023C22023CADC59BF16C0E98D02FC9D51A762E4FB5292A6C727BB7F95B707C9A7EFE03BD17B2C978B7FB17B706770B5FE4CB1348F11F4E40F3C64E3F5FA255BC961F0067F9FD5C90B9DE1CDDF9CFEC7D579B960872BEDA422F5F7A7AEDA24611BDCADDCCB20F34AE04EDFF35E23B36C36BF7
	71DEC577437C407C966FD3ECB7AF527AFD29DE51051C8E4C6F3FFC28585E36D06B57F4D051DDA38566777DC30A6DA6DD7DCEB82C68DE730C542FD1BF917E9EBC22740F8D47945FEFAD8F2C9FBF74113A9F1B3FE1CE44EBAAFDFF4ABAAD772353CAFF724D6F16638A3FA7AFA97CCE1E3D7C32E7A4A83E3B12945F26FFC23D5E142C787E6B8245771673176FBB4F24787E4FB4457734FF026F19690A3FEB5359D854E1F138146F5C9ECA5776470605CA7E9517D69B475F4DCE0890FE0B9CDE666EDC24585ED362FDFD
	788BDA1322693438BEF440B66834787ED0BEBE4A3C2F8FF76522DD58E9F1FD98895BE9321D38BE7C0FF782395F0D835B5927156B4364B3952697615A70F93ABEBCF7DCF38DA0FE2DCAAE1B395FDB073F8B3754642D435FEADB3D55DB073F1FD6166F2D435FB4CB3B602D435F99DB13612D435F7E7A76FB5EBA7CBD2E072B59F643768DF25BFD552C345D9359DC3783F577AED6F46D422E84F5FFDA22687E71B65715220E1F06E55D3B42E7B16A8A17AB3A1B054FED28BB3CC2515DA16C36226E52CAC5777EDE2E5B
	023A6F325B9E6CEB34F601790C68EB79302DBCA33EF795F9EA4A28BF1E917D4A815BA0B90F68D7934B8339478E835B09E714FEB5D56ED7AFD03FEA494BD43709667A716D068C350E2E9FA76D5360F47D78FC364617667A7121739A1BD3750D82EFBD3CD89BDF7C7A99593DFCD163D33E6E943A3F8FE9F46CD742A43CA63DA647E82D4E68B3F8DCE7735FCA5D604236FA76ED259D1F626BE9EE68C55DE3B90A6ED551B77AD177FA2E22F3AC663AF3284BDD256806C43C8E54D565297A29D94B25FD3522FB39166BBA
	D1F79DFFE7A26E67B78DAA7BBBD47B964FC83EE79E2D485F59DD519862D9C0EB316FEF0ABB0B0D3FA96EAEB6DEB340D56C6BDBDF79778FF8AC17E609D20C7565E2F6CCB98778928772330C63EBD97F1A817DE99EC81E2342D48CD267406798666D2C21F63799BD432835F632EF1ADDEE8B7BEEC764FFE53B6F323E3EFD39D2D6E655EEBBEE01D3DE1BC3796D1D249D6CC45D66F43B598F5C306FBE841E3A0335175B594BC101AD5C416A284F5E596596D9E5BC0B4F67F058BAB8AC1ED57D4790BE2B32C259429DB8
	377439DCF61EB57AEDG65C7811A6CEE07ED0FFC4A153F0FFBFD885F39CFF760DC537C8BACC6C6F705E99DC8E5B74EEB5DF291E3B78196520DEB3C8CDEC49F533A51475DBC6FBCC8E775403D9348486EDD703A64F97ECECE7E263E4347B7757CA90060F0220D79E075D853033C3E12065890E18BD3901BC41803E3FCEDF34244FC9116EF1D9331F19CE3E3DC8BE10FF20CDDC4CDA56CBB8B505FDC429A67E33E22DE441ED9007E3A88BB110136513D789C7276758CCB7E8C7A75E7581F4FD532F9FC47AD273DFF81
	844046BEE72F2D4FBDA8D07E2BD072F172443B6C9CD085FEDAC002C042C0A602CC8309851985A275417DB0C891C88DC8B30883E488E4AC4878BE64B173030D437010A7B773032B4FA256AE91BC2A793BC961634C31753EFC4051399F1A7CD05BE9DB3B3B49425EF70A3E78E2B676454940E5F69F565F769C6C0B79AE6C0B6DFC0EFDAB24BDA0E3DD581FBBF351478440E638504777F25147CAB77AF80267ED04F497C810BB507EFCA7FFB7AAF3AF4138E160A746CD5CCBB12E291F3817323CD510EE86696DC76E0E
	B274918C5854FE74B1298CFD4CA59FFF64F90B4E42F88852FAB6D06E3F646FD965751CF2309FFB4EE29F78E42D6F315236567FD85933D64C716934B58D764AEBC138567235EDBABADCB69A13BDEB4D04553B9A1DAEBBFBCBAE4EFF1307C6770E61172334FBB3E0BB718EA21C0F2D11E7756FA63E4571A9E7756FA68AAF50378420AB9840F741A597C7473BF614F697833693654A3E44780F9D5017F79D47438774657DAE1DE3A600AE430365EDE9D3476F75486FB564ED98ECA7FA0C5ED3FFB5CDEDB7D54EB3DD5E
	4643F61E215D5294351DF9D064D9A7EFCBE15BB0E838AE16A6DE2BAE0FFB50577C28C7B5EBDC844B794265EDA4EC2799463B4DE4F45D972B4BBB4BA02EF4CE0BE5C1BA9F24D2050B980FEB38B54AFA2B3C7540B684A4424B6EFB8BB45FCA6962C51D73D5974766EB56A311734D16374967615C84D2F0DE9F6F4F8B0C6A226A3CB6CE53F96F38DDBAEC8852E3C146FB45E8512C25B1D9E797ED60DB0CDDF72DE77BF43DABCE49326E3B6B59352B3D8706B30B43FE0E7FE458D1485853A974AF3F6BFBFC1D7B2E7F71
	B5E1037135E84A866FEB510C8D465722CBB6282FC58536E2833BCE6904F3FCB3654BA16CA4E12B39CF061D30DB5DDD04EF603C98DEE7E381915F44F98DF02C9957ACD2E1A7E52CE483BBC7C0113B1CFDE8DB39014FED36BB9CA2DD457358FB6014C175D14BB95AFBADAA5E7B89BBC9ED7D0A575A96A39BAB93F2C6E7D79E301D98CB9F6357B7B34E6B4758999C1FF5DEBF465AF3F00C1D8B3A16A19CE33BF3C7477B7CA86DA685ECA74AF5789D46FF6A103E3C27B89EBD24AF6F1F68BAAF96F415976837A7CAC659
	3EDE6B040C30FD8336135B17DF83C6DC70EADF0ECF3C60553E25F4ED8C3A1C0B749B81DE6BF30C0CF750A86DFE98301DA857F17E5BF3C19775657D1463A19775650D27EB61B0504D23727E049FCF2D1714B1598D7B41F2BA9C3611170C4E29F7DC10E87F5FD57B45972E7CF31C83D7A1466ACBCA195ED36D7F6062150F9DFDC5E308B919AE7EAC002DB3B06D924E537C5AC60645C2BA1E30399BF16E669C425E605FF05484417DD690E25FCEC3FF8E427A79B725C1109ECB586334B6C2B8E12F71E78B33A0ADFD09
	3E19CFC1FFD904BD443F3F4D07F4A9E1456750DF8DE10F73E78621101EC058C162B705307F9CC05B9842E651BA92F9DFC66CDA4E399852B5047D194A51C8589ADEAF91101EC458D46EAF8A5231042D6779E6C25AF48DE267E8DD0A9C421E2798C504FD197B8B02F4A8E18FF2EC82242388FB194A91C7D8AD2F3F59101646A0769DDA07A30330DF7067B0AD106EA5ECA12F53B1109ECF58AF97E00C4904C53A51DFB4E10E79D436EB917B1457FD91242B881BC66D51C01809478807F4A4E107094BB442B2F8FF0905
	F4BCE10919D84FF388BB1809DCCC57511CE57A26B90730F37C7B99872403887BF9BA56F3A8E1AEDA2FE382E11554EED32E2375FBF314B164D9553EB3674A0FA741D7A14609F714B2352A761F4F3D7231935F3972B11EA8D5351FEA5FD9FA955A6FAA44E8A9D74AE4D36D3FD4F665E32714DF79735D6F79B3390C6BE1DC3F1E5684614FB0597A954504F5F10C2DDFD1C758EFF371F8EEA2AC114FAB9E8F6949576377F5617C1C9A8D69586B711D5DF7B6EA67F24FE10F246539470B5E3B1C6FB1CC4195A676AC9267
	DF437DE71A7777029B79F90F69330211676FB8368E52C54148B3643C16679A553C7B17077D2E515F9C69D60831CC4353EC7266394104BC9D4473A89F5307A09DCCBC1F9D54722CADD4F89EBFF7B9F347A7870BF7898A4F1797F873B425A04FE944F3005767F4C84F8846F75E3F9D9849378AD8EF669B345F022E3BC17F3D69B2FEFDD084F8658DD897613AB6F3293E93C8983A1CF97B0E9B443CF625AE4AD23D6B22B1956B42C31C9EB3E9B97D8B1B7AAD7B28CCE54FE13A1CFD76F34E9E374541A6106293EA1C2F
	FFA2951F4D875F0075FBA747A6C3FA5A8DD83F125F72258FD33EB9B708FD25FC638C7AE4A475C969C6AC5F9F79B12714E137435E59435E144AB67368770E4CB7A27F37453763102EA3BFAD3AFEBCCD754DC574305F15B37B4CE14A660198691A32454D77AE5BAB7331ECE308537A854317ED973D338B25327D05E3D3A19DFDA3364D2F5C7E7AFE262A6F4F3BD15B774DB7697B7E57B9579C4073EFC22EE7873475771C6A9B12BF8CFB6CB1FB751A817A7AEB3EC9DC33A975374AE09C5831G6B4FFA935645B92A9F
	B771DC1B22651946165016FD3C1F09FDBD02FC8CF0AC8652F1B7E1FDEE72BBEFFF71B065498829B015E94AF32B41F7659368FB7115A148E5967DE6D5BEE1617CFA3789522DA1486F285FEF6B972B5AFBEC08363D4707A86DAD783D484F55AE1B43566E36D965EF55F211DFA4F1B94031DF337E9702730EB7EDD77A41DFF2AF677C9A93A27A01727D56DB355E75D6D40BED98C79CEEE04BF24BB657EF8CEC7E5F44D24536AACDBB2FF0E30522331F8F4C6F8955FC6C1DA62D5F9F6FD4F4BF9F8C4C6F533B945BD5A9
	DA3F9F2866BDFFE7607267E176723945E27F0F87945F03815605D9B51738B395B90BF4CFAA73257E7579236CBFCEFDF195D6574AF33D042F81555C63A78264710DA30A6D2FCCDA9ECBD3D78D4F2321F6EF136CA7C1B5C739AC4076DBF7DC31CDDB2065F0FC4148B9CCBF2978996F3E7C36CE7CC8E96BCFBED6FC9F9D882CFCDF7AC431BD20AB5F2DA3AA1F483BA7B330FE915F2A2A57G67G2737A936BFC957F2CE4A98F91BBCE6D57C947D9366C13FEED37CE567EAF9D9F3791CBFAB4DA36CD4726E2BD54F19DE
	41312063FF4F02516EC5E93EDBCA586216D24497C2653047675866ED273D9D34D7C2FB2534D7BC6C5EB65A5BCAFB904D04F3B65DD2B21B1E899BB69353ADA51D2AEF04841B868A09234776407FFD3507DCFDD226265EFEF17B76E7231FBC6ECA129654CBEF31E50284FF7BB91B157DCA4AF1DB1F8B2EEA77CA293DEC256B230057CB49AE3E196FF28FBAEC8DD2D647915BE77DB6971C63F663BBCF17DBDA5640A2EDE65351B657D9DCDDFCD1170A86A9394752EDF3CBCB045AE169695CACDE00D6F8FA21CA93F667
	714662F35F016FD24E17F9A9A4AFCBFF34E87D6A7DB3A7A7C909FB25B40753E25DEBE9F7BB7B6A25D4F7D71F4D5565F4D8BD3D3B2A38A353G4EE2C982F759D4FCD658C2F669CE244FF87EADA4B3BEF3AFDBFC3ACF5A4CF332AB1EC24AE12D6E3274C1A8DBDFBD0885C22EA35D175EF13F7B5BFDABDA92258439101FC99725E51EDE3734204352EDF78C42CE8D6F25AE26F94B8DEC7BACBD2E8EE7DFB7B04B53B1C39585A87C5A2F0B3E7E6D57CF71G0A29DBDAA52A92CCB7F75A1C5D1BF7F7F458FBEC64G6A95
	5C6712FB1627D017E7096756E57B9FFD338D7AC10D1454DDD4447FEF617F37327FDBB83205A3DB36C2654E16067D536BBDD8E65EF9004FA24E07B5FF61DEE8C17763AF7E7A0EBFD44E1E85255BAB4DBF4B5E19C3A31815DC877B3B5BECFD57CD7CFAEEFA680C1BD89B75322E62E1FEF3BD641115301E3F821EF1F6DBF9521F6ECCCA14126B25856215B8F4DE76DE9BBAAFFF6DDDAFA5391D3D225F4907795B3C23B027CB3DFAA3C3D7F8F7AB86E7D3633254BBBCEB9E7F3FB6602AE2D66B396D86AAE121284077F4
	CC93BFFFCC379BB3CD787CB12D7C42B02D7E42B05D2FE50AECBF07CC8F9BB37D9C9E7B4D46CCBF07477E27DF18566F7842B06DD618264979FC9F7B89BE18A6EB196249F80118E4A5A2B21BABD38437368869F25E84C2599F2E9D14E408CA1A6672C6672B50C48D4A1EF518B4E8028A15B45106C795E68CC9E4556A151721598122DA3F383E07B66FC851C43954ECA6DCB221AC5F9299CD542078D4AB51ADE5328F507264658F6086A683EE9854C9380BD0A5B3593D05DA8DF79CEAB53B8FD127596D09AA1D0AF7AE
	301F4C82DFCEF7E629FE76EF604A745FF1CA7F45A77289122FD3456704F304B1E76313466704735D461CBF070372BD011CBEBEA735FBEFA0357BB961BC658B4879678A67C43F1C7FD7FB71EF942612748569458FFF81FBC46C9726C7BCB5DC0F50DFF5A4496B03EC3C24DE9FE46E35A9BE57390938C37ECD4CBB1475C144B702FF7B184F6983BC63CE7C56EC6F47EC72062FEF850FF6DB9C8E3745F1E6F70F15FDB738E750EDD33EA9FE63E3665F05F9E42550A5FE42F81FD6597CFFD0CB8788317928E132B5GG
	D453GGD0CB818294G94G88G88G39F56BAC317928E132B5GGD453GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG6CB5GGGG
**end of data**/
}

/**
 * Return the JCheckBoxFEED property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxFEED() {
	if (ivjJCheckBoxFEED == null) {
		try {
			ivjJCheckBoxFEED = new javax.swing.JCheckBox();
			ivjJCheckBoxFEED.setName("JCheckBoxFEED");
			ivjJCheckBoxFEED.setMnemonic('f');
			ivjJCheckBoxFEED.setText("FEED");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxFEED;
}


/**
 * Return the JCheckBoxGEO property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxGEO() {
	if (ivjJCheckBoxGEO == null) {
		try {
			ivjJCheckBoxGEO = new javax.swing.JCheckBox();
			ivjJCheckBoxGEO.setName("JCheckBoxGEO");
			ivjJCheckBoxGEO.setMnemonic('g');
			ivjJCheckBoxGEO.setText("GEO");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxGEO;
}


/**
 * Return the JCheckBoxPROG property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxPROG() {
	if (ivjJCheckBoxPROG == null) {
		try {
			ivjJCheckBoxPROG = new javax.swing.JCheckBox();
			ivjJCheckBoxPROG.setName("JCheckBoxPROG");
			ivjJCheckBoxPROG.setMnemonic('p');
			ivjJCheckBoxPROG.setText("PROG");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxPROG;
}


/**
 * Return the JCheckBoxRelay1 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay1() {
	if (ivjJCheckBoxRelay1 == null) {
		try {
			ivjJCheckBoxRelay1 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay1.setName("JCheckBoxRelay1");
			ivjJCheckBoxRelay1.setMnemonic('1');
			ivjJCheckBoxRelay1.setText("Relay 1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay1;
}


/**
 * Return the JCheckBoxRelay2 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay2() {
	if (ivjJCheckBoxRelay2 == null) {
		try {
			ivjJCheckBoxRelay2 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay2.setName("JCheckBoxRelay2");
			ivjJCheckBoxRelay2.setMnemonic('2');
			ivjJCheckBoxRelay2.setText("Relay 2");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay2;
}


/**
 * Return the JCheckBoxRelay3 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay3() {
	if (ivjJCheckBoxRelay3 == null) {
		try {
			ivjJCheckBoxRelay3 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay3.setName("JCheckBoxRelay3");
			ivjJCheckBoxRelay3.setMnemonic('3');
			ivjJCheckBoxRelay3.setText("Relay 3");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay3;
}


/**
 * Return the JCheckBoxRelay4 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay4() {
	if (ivjJCheckBoxRelay4 == null) {
		try {
			ivjJCheckBoxRelay4 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay4.setName("JCheckBoxRelay4");
			ivjJCheckBoxRelay4.setMnemonic('4');
			ivjJCheckBoxRelay4.setText("Relay 4");
			ivjJCheckBoxRelay4.setActionCommand("Relay 4");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay4;
}


/**
 * Return the JCheckBoxRelay5 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay5() {
	if (ivjJCheckBoxRelay5 == null) {
		try {
			ivjJCheckBoxRelay5 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay5.setName("JCheckBoxRelay5");
			ivjJCheckBoxRelay5.setMnemonic('5');
			ivjJCheckBoxRelay5.setText("Relay 5");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay5;
}


/**
 * Return the JCheckBoxRelay6 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay6() {
	if (ivjJCheckBoxRelay6 == null) {
		try {
			ivjJCheckBoxRelay6 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay6.setName("JCheckBoxRelay6");
			ivjJCheckBoxRelay6.setMnemonic('6');
			ivjJCheckBoxRelay6.setText("Relay 6");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay6;
}


/**
 * Return the JCheckBoxRelay7 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay7() {
	if (ivjJCheckBoxRelay7 == null) {
		try {
			ivjJCheckBoxRelay7 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay7.setName("JCheckBoxRelay7");
			ivjJCheckBoxRelay7.setMnemonic('7');
			ivjJCheckBoxRelay7.setText("Relay 7");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay7;
}


/**
 * Return the JCheckBoxRelay8 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay8() {
	if (ivjJCheckBoxRelay8 == null) {
		try {
			ivjJCheckBoxRelay8 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay8.setName("JCheckBoxRelay8");
			ivjJCheckBoxRelay8.setMnemonic('8');
			ivjJCheckBoxRelay8.setText("Relay 8");
			ivjJCheckBoxRelay8.setActionCommand("Relay 4");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay8;
}


/**
 * Return the JCheckBoxIndividual property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSerial() {
	if (ivjJCheckBoxSerial == null) {
		try {
			ivjJCheckBoxSerial = new javax.swing.JCheckBox();
			ivjJCheckBoxSerial.setName("JCheckBoxSerial");
			ivjJCheckBoxSerial.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxSerial.setText("Serial:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSerial;
}


/**
 * Return the JCheckBoxSPID property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSPID() {
	if (ivjJCheckBoxSPID == null) {
		try {
			ivjJCheckBoxSPID = new javax.swing.JCheckBox();
			ivjJCheckBoxSPID.setName("JCheckBoxSPID");
			ivjJCheckBoxSPID.setSelected(true);
			ivjJCheckBoxSPID.setMnemonic('d');
			ivjJCheckBoxSPID.setText("SPID");
			ivjJCheckBoxSPID.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSPID;
}


/**
 * Return the JCheckBoxSPLINTER property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSPLINTER() {
	if (ivjJCheckBoxSPLINTER == null) {
		try {
			ivjJCheckBoxSPLINTER = new javax.swing.JCheckBox();
			ivjJCheckBoxSPLINTER.setName("JCheckBoxSPLINTER");
			ivjJCheckBoxSPLINTER.setMnemonic('s');
			ivjJCheckBoxSPLINTER.setText("SPLINTER");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSPLINTER;
}


/**
 * Return the JCheckBoxSUB property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSUB() {
	if (ivjJCheckBoxSUB == null) {
		try {
			ivjJCheckBoxSUB = new javax.swing.JCheckBox();
			ivjJCheckBoxSUB.setName("JCheckBoxSUB");
			ivjJCheckBoxSUB.setMnemonic('s');
			ivjJCheckBoxSUB.setText("SUB");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSUB;
}


/**
 * Return the JCheckBoxUSER property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxUSER() {
	if (ivjJCheckBoxUSER == null) {
		try {
			ivjJCheckBoxUSER = new javax.swing.JCheckBox();
			ivjJCheckBoxUSER.setName("JCheckBoxUSER");
			ivjJCheckBoxUSER.setMnemonic('u');
			ivjJCheckBoxUSER.setText("USER");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxUSER;
}


/**
 * Return the JCheckBoxZIP property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxZIP() {
	if (ivjJCheckBoxZIP == null) {
		try {
			ivjJCheckBoxZIP = new javax.swing.JCheckBox();
			ivjJCheckBoxZIP.setName("JCheckBoxZIP");
			ivjJCheckBoxZIP.setMnemonic('z');
			ivjJCheckBoxZIP.setText("ZIP");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxZIP;
}


/**
 * Return the JComboBoxFEED property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxFEED() {
	if (ivjJComboBoxFEED == null) {
		try {
			ivjJComboBoxFEED = new javax.swing.JComboBox();
			ivjJComboBoxFEED.setName("JComboBoxFEED");
			ivjJComboBoxFEED.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxFEED.setEditable(true);
			// user code begin {1}

			ivjJComboBoxFEED.addItem( STRING_NEW );
			ivjJComboBoxFEED.addItem( com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxFEED;
}


/**
 * Return the JComboBoxGEO property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGEO() {
	if (ivjJComboBoxGEO == null) {
		try {
			ivjJComboBoxGEO = new javax.swing.JComboBox();
			ivjJComboBoxGEO.setName("JComboBoxGEO");
			ivjJComboBoxGEO.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxGEO.setEditable(true);
			// user code begin {1}

			ivjJComboBoxGEO.addItem( STRING_NEW );
			ivjJComboBoxGEO.addItem( com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGEO;
}


/**
 * Return the JComboBoxPROG property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxPROG() {
	if (ivjJComboBoxPROG == null) {
		try {
			ivjJComboBoxPROG = new javax.swing.JComboBox();
			ivjJComboBoxPROG.setName("JComboBoxPROG");
			ivjJComboBoxPROG.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxPROG.setEditable(true);
			// user code begin {1}

			ivjJComboBoxPROG.addItem( STRING_NEW );
			ivjJComboBoxPROG.addItem( com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxPROG;
}


/**
 * Return the JComboBoxSPID property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSPID() {
	if (ivjJComboBoxSPID == null) {
		try {
			ivjJComboBoxSPID = new javax.swing.JComboBox();
			ivjJComboBoxSPID.setName("JComboBoxSPID");
			ivjJComboBoxSPID.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxSPID.setEditable(true);
			// user code begin {1}

			ivjJComboBoxSPID.addItem( STRING_NEW );
			//ivjJComboBoxSPID.addItem( com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSPID;
}


/**
 * Return the JComboBoxSUB property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSUB() {
	if (ivjJComboBoxSUB == null) {
		try {
			ivjJComboBoxSUB = new javax.swing.JComboBox();
			ivjJComboBoxSUB.setName("JComboBoxSUB");
			ivjJComboBoxSUB.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxSUB.setEditable(true);
			// user code begin {1}

			ivjJComboBoxSUB.addItem( STRING_NEW );
			ivjJComboBoxSUB.addItem( com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSUB;
}


/**
 * Return the JLabelFeedAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelFeedAddress() {
	if (ivjJLabelFeedAddress == null) {
		try {
			ivjJLabelFeedAddress = new javax.swing.JLabel();
			ivjJLabelFeedAddress.setName("JLabelFeedAddress");
			ivjJLabelFeedAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelFeedAddress.setText("FEED Address:");
			ivjJLabelFeedAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelFeedAddress;
}


/**
 * Return the JLabelGEOAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGEOAddress() {
	if (ivjJLabelGEOAddress == null) {
		try {
			ivjJLabelGEOAddress = new javax.swing.JLabel();
			ivjJLabelGEOAddress.setName("JLabelGEOAddress");
			ivjJLabelGEOAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelGEOAddress.setText("GEO Address:");
			ivjJLabelGEOAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGEOAddress;
}


/**
 * Return the JLabelPROGAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPROGAddress() {
	if (ivjJLabelPROGAddress == null) {
		try {
			ivjJLabelPROGAddress = new javax.swing.JLabel();
			ivjJLabelPROGAddress.setName("JLabelPROGAddress");
			ivjJLabelPROGAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelPROGAddress.setText("PROG Address:");
			ivjJLabelPROGAddress.setEnabled(true);
			ivjJLabelPROGAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPROGAddress;
}


/**
 * Return the JLabelSPID property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSPID() {
	if (ivjJLabelSPID == null) {
		try {
			ivjJLabelSPID = new javax.swing.JLabel();
			ivjJLabelSPID.setName("JLabelSPID");
			ivjJLabelSPID.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSPID.setText("SPID Address:");
			ivjJLabelSPID.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSPID;
}


/**
 * Return the JLabelSplinter property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSplinter() {
	if (ivjJLabelSplinter == null) {
		try {
			ivjJLabelSplinter = new javax.swing.JLabel();
			ivjJLabelSplinter.setName("JLabelSplinter");
			ivjJLabelSplinter.setText("SPLINTER:");
			ivjJLabelSplinter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjJLabelSplinter.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSplinter.setEnabled(true);
			ivjJLabelSplinter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSplinter;
}


/**
 * Return the JLabelSubAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSubAddress() {
	if (ivjJLabelSubAddress == null) {
		try {
			ivjJLabelSubAddress = new javax.swing.JLabel();
			ivjJLabelSubAddress.setName("JLabelSubAddress");
			ivjJLabelSubAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSubAddress.setText("SUB Address:");
			ivjJLabelSubAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSubAddress;
}


/**
 * Return the JLabelUserAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelUserAddress() {
	if (ivjJLabelUserAddress == null) {
		try {
			ivjJLabelUserAddress = new javax.swing.JLabel();
			ivjJLabelUserAddress.setName("JLabelUserAddress");
			ivjJLabelUserAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelUserAddress.setText("USER Address:");
			ivjJLabelUserAddress.setEnabled(true);
			ivjJLabelUserAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelUserAddress;
}


/**
 * Return the JLabelZipAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelZipAddress() {
	if (ivjJLabelZipAddress == null) {
		try {
			ivjJLabelZipAddress = new javax.swing.JLabel();
			ivjJLabelZipAddress.setName("JLabelZipAddress");
			ivjJLabelZipAddress.setText("ZIP Address:");
			ivjJLabelZipAddress.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjJLabelZipAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelZipAddress.setEnabled(true);
			ivjJLabelZipAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelZipAddress;
}


/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelAddress() {
	if (ivjJPanelAddress == null) {
		try {
			ivjJPanelAddress = new javax.swing.JPanel();
			ivjJPanelAddress.setName("JPanelAddress");
			//ivjJPanelAddress.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjJPanelAddress.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJTextFieldSPIDAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSPIDAddress.gridx = 2; constraintsJTextFieldSPIDAddress.gridy = 1;
			constraintsJTextFieldSPIDAddress.gridwidth = 2;
			constraintsJTextFieldSPIDAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSPIDAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSPIDAddress.weightx = 1.0;
			constraintsJTextFieldSPIDAddress.ipadx = 87;
			constraintsJTextFieldSPIDAddress.ipady = -1;
			constraintsJTextFieldSPIDAddress.insets = new java.awt.Insets(3, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldSPIDAddress(), constraintsJTextFieldSPIDAddress);

			java.awt.GridBagConstraints constraintsJLabelSPID = new java.awt.GridBagConstraints();
			constraintsJLabelSPID.gridx = 1; constraintsJLabelSPID.gridy = 1;
			constraintsJLabelSPID.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSPID.ipadx = 9;
			constraintsJLabelSPID.ipady = 4;
			constraintsJLabelSPID.insets = new java.awt.Insets(3, 11, 3, 1);
			getJPanelAddress().add(getJLabelSPID(), constraintsJLabelSPID);

			java.awt.GridBagConstraints constraintsJLabelGEOAddress = new java.awt.GridBagConstraints();
			constraintsJLabelGEOAddress.gridx = 1; constraintsJLabelGEOAddress.gridy = 2;
			constraintsJLabelGEOAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelGEOAddress.ipadx = 10;
			constraintsJLabelGEOAddress.ipady = 4;
			constraintsJLabelGEOAddress.insets = new java.awt.Insets(2, 11, 3, 1);
			getJPanelAddress().add(getJLabelGEOAddress(), constraintsJLabelGEOAddress);

			java.awt.GridBagConstraints constraintsJTextFieldGeoAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldGeoAddress.gridx = 2; constraintsJTextFieldGeoAddress.gridy = 2;
			constraintsJTextFieldGeoAddress.gridwidth = 2;
			constraintsJTextFieldGeoAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldGeoAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldGeoAddress.weightx = 1.0;
			constraintsJTextFieldGeoAddress.ipadx = 87;
			constraintsJTextFieldGeoAddress.ipady = -1;
			constraintsJTextFieldGeoAddress.insets = new java.awt.Insets(2, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldGeoAddress(), constraintsJTextFieldGeoAddress);

			java.awt.GridBagConstraints constraintsJLabelSubAddress = new java.awt.GridBagConstraints();
			constraintsJLabelSubAddress.gridx = 1; constraintsJLabelSubAddress.gridy = 3;
			constraintsJLabelSubAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSubAddress.ipadx = 12;
			constraintsJLabelSubAddress.ipady = 4;
			constraintsJLabelSubAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelSubAddress(), constraintsJLabelSubAddress);

			java.awt.GridBagConstraints constraintsJTextFieldSubAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSubAddress.gridx = 2; constraintsJTextFieldSubAddress.gridy = 3;
			constraintsJTextFieldSubAddress.gridwidth = 2;
			constraintsJTextFieldSubAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSubAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSubAddress.weightx = 1.0;
			constraintsJTextFieldSubAddress.ipadx = 87;
			constraintsJTextFieldSubAddress.ipady = -1;
			constraintsJTextFieldSubAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldSubAddress(), constraintsJTextFieldSubAddress);

			java.awt.GridBagConstraints constraintsJLabelFeedAddress = new java.awt.GridBagConstraints();
			constraintsJLabelFeedAddress.gridx = 1; constraintsJLabelFeedAddress.gridy = 4;
			constraintsJLabelFeedAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelFeedAddress.ipadx = 6;
			constraintsJLabelFeedAddress.ipady = 4;
			constraintsJLabelFeedAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelFeedAddress(), constraintsJLabelFeedAddress);

			java.awt.GridBagConstraints constraintsJTextFieldFeedAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldFeedAddress.gridx = 2; constraintsJTextFieldFeedAddress.gridy = 4;
			constraintsJTextFieldFeedAddress.gridwidth = 2;
			constraintsJTextFieldFeedAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldFeedAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldFeedAddress.weightx = 1.0;
			constraintsJTextFieldFeedAddress.ipadx = 87;
			constraintsJTextFieldFeedAddress.ipady = -1;
			constraintsJTextFieldFeedAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldFeedAddress(), constraintsJTextFieldFeedAddress);

			java.awt.GridBagConstraints constraintsJLabelZipAddress = new java.awt.GridBagConstraints();
			constraintsJLabelZipAddress.gridx = 1; constraintsJLabelZipAddress.gridy = 5;
			constraintsJLabelZipAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelZipAddress.ipadx = 17;
			constraintsJLabelZipAddress.ipady = 4;
			constraintsJLabelZipAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelZipAddress(), constraintsJLabelZipAddress);

			java.awt.GridBagConstraints constraintsJTextFieldZipAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldZipAddress.gridx = 2; constraintsJTextFieldZipAddress.gridy = 5;
			constraintsJTextFieldZipAddress.gridwidth = 2;
			constraintsJTextFieldZipAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldZipAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldZipAddress.weightx = 1.0;
			constraintsJTextFieldZipAddress.ipadx = 87;
			constraintsJTextFieldZipAddress.ipady = -1;
			constraintsJTextFieldZipAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldZipAddress(), constraintsJTextFieldZipAddress);

			java.awt.GridBagConstraints constraintsJLabelUserAddress = new java.awt.GridBagConstraints();
			constraintsJLabelUserAddress.gridx = 1; constraintsJLabelUserAddress.gridy = 6;
			constraintsJLabelUserAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelUserAddress.ipadx = 5;
			constraintsJLabelUserAddress.ipady = 4;
			constraintsJLabelUserAddress.insets = new java.awt.Insets(1, 11, 2, 1);
			getJPanelAddress().add(getJLabelUserAddress(), constraintsJLabelUserAddress);

			java.awt.GridBagConstraints constraintsJTextFieldUserAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldUserAddress.gridx = 2; constraintsJTextFieldUserAddress.gridy = 6;
			constraintsJTextFieldUserAddress.gridwidth = 2;
			constraintsJTextFieldUserAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldUserAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldUserAddress.weightx = 1.0;
			constraintsJTextFieldUserAddress.ipadx = 87;
			constraintsJTextFieldUserAddress.ipady = -1;
			constraintsJTextFieldUserAddress.insets = new java.awt.Insets(1, 1, 0, 3);
			getJPanelAddress().add(getJTextFieldUserAddress(), constraintsJTextFieldUserAddress);

			java.awt.GridBagConstraints constraintsJLabelPROGAddress = new java.awt.GridBagConstraints();
			constraintsJLabelPROGAddress.gridx = 1; constraintsJLabelPROGAddress.gridy = 7;
			constraintsJLabelPROGAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelPROGAddress.ipadx = 3;
			constraintsJLabelPROGAddress.ipady = 4;
			constraintsJLabelPROGAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelPROGAddress(), constraintsJLabelPROGAddress);

			java.awt.GridBagConstraints constraintsJLabelSplinter = new java.awt.GridBagConstraints();
			constraintsJLabelSplinter.gridx = 1; constraintsJLabelSplinter.gridy = 8;
			constraintsJLabelSplinter.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSplinter.ipadx = 28;
			constraintsJLabelSplinter.ipady = 4;
			constraintsJLabelSplinter.insets = new java.awt.Insets(1, 11, 2, 1);
			getJPanelAddress().add(getJLabelSplinter(), constraintsJLabelSplinter);

			java.awt.GridBagConstraints constraintsJTextFieldSplinter = new java.awt.GridBagConstraints();
			constraintsJTextFieldSplinter.gridx = 2; constraintsJTextFieldSplinter.gridy = 8;
			constraintsJTextFieldSplinter.gridwidth = 2;
			constraintsJTextFieldSplinter.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSplinter.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSplinter.weightx = 1.0;
			constraintsJTextFieldSplinter.ipadx = 87;
			constraintsJTextFieldSplinter.ipady = -1;
			constraintsJTextFieldSplinter.insets = new java.awt.Insets(1, 1, 0, 3);
			getJPanelAddress().add(getJTextFieldSplinter(), constraintsJTextFieldSplinter);

			java.awt.GridBagConstraints constraintsJTextFieldProgAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldProgAddress.gridx = 2; constraintsJTextFieldProgAddress.gridy = 7;
			constraintsJTextFieldProgAddress.gridwidth = 2;
			constraintsJTextFieldProgAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldProgAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldProgAddress.weightx = 1.0;
			constraintsJTextFieldProgAddress.ipadx = 87;
			constraintsJTextFieldProgAddress.ipady = -1;
			constraintsJTextFieldProgAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldProgAddress(), constraintsJTextFieldProgAddress);

			java.awt.GridBagConstraints constraintsJTextFieldSerialAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSerialAddress.gridx = 3; constraintsJTextFieldSerialAddress.gridy = 9;
			constraintsJTextFieldSerialAddress.gridwidth = 2;
			constraintsJTextFieldSerialAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSerialAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSerialAddress.weightx = 1.0;
			constraintsJTextFieldSerialAddress.ipadx = 182;
			constraintsJTextFieldSerialAddress.ipady = -1;
			constraintsJTextFieldSerialAddress.insets = new java.awt.Insets(1, 0, 10, 26);
			getJPanelAddress().add(getJTextFieldSerialAddress(), constraintsJTextFieldSerialAddress);

			java.awt.GridBagConstraints constraintsJCheckBoxSerial = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSerial.gridx = 1; constraintsJCheckBoxSerial.gridy = 9;
			constraintsJCheckBoxSerial.gridwidth = 2;
			constraintsJCheckBoxSerial.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSerial.ipadx = 22;
			constraintsJCheckBoxSerial.ipady = -4;
			constraintsJCheckBoxSerial.insets = new java.awt.Insets(1, 11, 10, 0);
			getJPanelAddress().add(getJCheckBoxSerial(), constraintsJCheckBoxSerial);

			java.awt.GridBagConstraints constraintsJComboBoxSPID = new java.awt.GridBagConstraints();
			constraintsJComboBoxSPID.gridx = 4; constraintsJComboBoxSPID.gridy = 1;
			constraintsJComboBoxSPID.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxSPID.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxSPID.weightx = 1.0;
			constraintsJComboBoxSPID.ipadx = 12;
			constraintsJComboBoxSPID.insets = new java.awt.Insets(3, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxSPID(), constraintsJComboBoxSPID);

			java.awt.GridBagConstraints constraintsJComboBoxGEO = new java.awt.GridBagConstraints();
			constraintsJComboBoxGEO.gridx = 4; constraintsJComboBoxGEO.gridy = 2;
			constraintsJComboBoxGEO.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxGEO.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxGEO.weightx = 1.0;
			constraintsJComboBoxGEO.ipadx = 12;
			constraintsJComboBoxGEO.insets = new java.awt.Insets(2, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxGEO(), constraintsJComboBoxGEO);

			java.awt.GridBagConstraints constraintsJComboBoxSUB = new java.awt.GridBagConstraints();
			constraintsJComboBoxSUB.gridx = 4; constraintsJComboBoxSUB.gridy = 3;
			constraintsJComboBoxSUB.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxSUB.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxSUB.weightx = 1.0;
			constraintsJComboBoxSUB.ipadx = 12;
			constraintsJComboBoxSUB.insets = new java.awt.Insets(1, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxSUB(), constraintsJComboBoxSUB);

			java.awt.GridBagConstraints constraintsJComboBoxFEED = new java.awt.GridBagConstraints();
			constraintsJComboBoxFEED.gridx = 4; constraintsJComboBoxFEED.gridy = 4;
			constraintsJComboBoxFEED.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxFEED.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxFEED.weightx = 1.0;
			constraintsJComboBoxFEED.ipadx = 12;
			constraintsJComboBoxFEED.insets = new java.awt.Insets(1, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxFEED(), constraintsJComboBoxFEED);

			java.awt.GridBagConstraints constraintsJComboBoxPROG = new java.awt.GridBagConstraints();
			constraintsJComboBoxPROG.gridx = 4; constraintsJComboBoxPROG.gridy = 7;
			constraintsJComboBoxPROG.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxPROG.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxPROG.weightx = 1.0;
			constraintsJComboBoxPROG.ipadx = 12;
			constraintsJComboBoxPROG.insets = new java.awt.Insets(1, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxPROG(), constraintsJComboBoxPROG);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelAddress;
}

/**
 * Return the JPanelAddressTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelAddressTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelAddressTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelAddressTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelAddressTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelAddressTitleBorder.setTitle("Addressing");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelAddressTitleBorder;
}


/**
 * Return the JPanelAddressUsage property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelAddressUsage() {
	if (ivjJPanelAddressUsage == null) {
		try {
			ivjJPanelAddressUsage = new javax.swing.JPanel();
			ivjJPanelAddressUsage.setName("JPanelAddressUsage");
			//ivjJPanelAddressUsage.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjJPanelAddressUsage.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxSPID = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSPID.gridx = 1; constraintsJCheckBoxSPID.gridy = 1;
			constraintsJCheckBoxSPID.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSPID.ipadx = 3;
			constraintsJCheckBoxSPID.insets = new java.awt.Insets(3, 11, 0, 1);
			getJPanelAddressUsage().add(getJCheckBoxSPID(), constraintsJCheckBoxSPID);

			java.awt.GridBagConstraints constraintsJCheckBoxGEO = new java.awt.GridBagConstraints();
			constraintsJCheckBoxGEO.gridx = 1; constraintsJCheckBoxGEO.gridy = 2;
			constraintsJCheckBoxGEO.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxGEO.ipadx = 6;
			constraintsJCheckBoxGEO.insets = new java.awt.Insets(0, 11, 0, 1);
			getJPanelAddressUsage().add(getJCheckBoxGEO(), constraintsJCheckBoxGEO);

			java.awt.GridBagConstraints constraintsJCheckBoxSUB = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSUB.gridx = 1; constraintsJCheckBoxSUB.gridy = 3;
			constraintsJCheckBoxSUB.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSUB.ipadx = 6;
			constraintsJCheckBoxSUB.insets = new java.awt.Insets(0, 11, 0, 1);
			getJPanelAddressUsage().add(getJCheckBoxSUB(), constraintsJCheckBoxSUB);

			java.awt.GridBagConstraints constraintsJCheckBoxFEED = new java.awt.GridBagConstraints();
			constraintsJCheckBoxFEED.gridx = 1; constraintsJCheckBoxFEED.gridy = 4;
			constraintsJCheckBoxFEED.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxFEED.ipadx = 2;
			constraintsJCheckBoxFEED.insets = new java.awt.Insets(0, 11, 7, 1);
			getJPanelAddressUsage().add(getJCheckBoxFEED(), constraintsJCheckBoxFEED);

			java.awt.GridBagConstraints constraintsJCheckBoxZIP = new java.awt.GridBagConstraints();
			constraintsJCheckBoxZIP.gridx = 2; constraintsJCheckBoxZIP.gridy = 1;
			constraintsJCheckBoxZIP.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxZIP.ipadx = 12;
			constraintsJCheckBoxZIP.insets = new java.awt.Insets(3, 2, 0, 27);
			getJPanelAddressUsage().add(getJCheckBoxZIP(), constraintsJCheckBoxZIP);

			java.awt.GridBagConstraints constraintsJCheckBoxSPLINTER = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSPLINTER.gridx = 2; constraintsJCheckBoxSPLINTER.gridy = 4;
			constraintsJCheckBoxSPLINTER.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSPLINTER.ipadx = -3;
			constraintsJCheckBoxSPLINTER.insets = new java.awt.Insets(0, 2, 7, 4);
			getJPanelAddressUsage().add(getJCheckBoxSPLINTER(), constraintsJCheckBoxSPLINTER);

			java.awt.GridBagConstraints constraintsJCheckBoxPROG = new java.awt.GridBagConstraints();
			constraintsJCheckBoxPROG.gridx = 2; constraintsJCheckBoxPROG.gridy = 3;
			constraintsJCheckBoxPROG.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxPROG.ipadx = -3;
			constraintsJCheckBoxPROG.insets = new java.awt.Insets(0, 2, 0, 27);
			getJPanelAddressUsage().add(getJCheckBoxPROG(), constraintsJCheckBoxPROG);

			java.awt.GridBagConstraints constraintsJCheckBoxUSER = new java.awt.GridBagConstraints();
			constraintsJCheckBoxUSER.gridx = 2; constraintsJCheckBoxUSER.gridy = 2;
			constraintsJCheckBoxUSER.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxUSER.ipadx = -1;
			constraintsJCheckBoxUSER.insets = new java.awt.Insets(0, 2, 0, 27);
			getJPanelAddressUsage().add(getJCheckBoxUSER(), constraintsJCheckBoxUSER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelAddressUsage;
}

/**
 * Return the JPanelAddressUsageTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelAddressUsageTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelAddressUsageTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelAddressUsageTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelAddressUsageTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelAddressUsageTitleBorder.setTitle("Address Usage");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelAddressUsageTitleBorder;
}


/**
 * Return the JPanelRelayUsage property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelRelayUsage() {
	if (ivjJPanelRelayUsage == null) {
		try {
			ivjJPanelRelayUsage = new javax.swing.JPanel();
			ivjJPanelRelayUsage.setName("JPanelRelayUsage");
			//ivjJPanelRelayUsage.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjJPanelRelayUsage.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxRelay1 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay1.gridx = 1; constraintsJCheckBoxRelay1.gridy = 1;
			constraintsJCheckBoxRelay1.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay1.ipadx = -5;
			constraintsJCheckBoxRelay1.insets = new java.awt.Insets(3, 7, 0, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay1(), constraintsJCheckBoxRelay1);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay2 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay2.gridx = 1; constraintsJCheckBoxRelay2.gridy = 2;
			constraintsJCheckBoxRelay2.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay2.ipadx = -5;
			constraintsJCheckBoxRelay2.insets = new java.awt.Insets(0, 7, 0, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay2(), constraintsJCheckBoxRelay2);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay3 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay3.gridx = 1; constraintsJCheckBoxRelay3.gridy = 3;
			constraintsJCheckBoxRelay3.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay3.ipadx = -5;
			constraintsJCheckBoxRelay3.insets = new java.awt.Insets(0, 7, 1, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay3(), constraintsJCheckBoxRelay3);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay4 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay4.gridx = 1; constraintsJCheckBoxRelay4.gridy = 4;
			constraintsJCheckBoxRelay4.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay4.ipadx = -5;
			constraintsJCheckBoxRelay4.insets = new java.awt.Insets(2, 7, 5, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay4(), constraintsJCheckBoxRelay4);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay5 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay5.gridx = 2; constraintsJCheckBoxRelay5.gridy = 1;
			constraintsJCheckBoxRelay5.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay5.ipadx = -5;
			constraintsJCheckBoxRelay5.insets = new java.awt.Insets(3, 9, 0, 14);
			getJPanelRelayUsage().add(getJCheckBoxRelay5(), constraintsJCheckBoxRelay5);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay6 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay6.gridx = 2; constraintsJCheckBoxRelay6.gridy = 2;
			constraintsJCheckBoxRelay6.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay6.ipadx = -5;
			constraintsJCheckBoxRelay6.insets = new java.awt.Insets(0, 9, 0, 14);
			getJPanelRelayUsage().add(getJCheckBoxRelay6(), constraintsJCheckBoxRelay6);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay7 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay7.gridx = 2; constraintsJCheckBoxRelay7.gridy = 3;
			constraintsJCheckBoxRelay7.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay7.ipadx = -5;
			constraintsJCheckBoxRelay7.insets = new java.awt.Insets(0, 9, 1, 14);
			getJPanelRelayUsage().add(getJCheckBoxRelay7(), constraintsJCheckBoxRelay7);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay8 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay8.gridx = 2; constraintsJCheckBoxRelay8.gridy = 4;
			constraintsJCheckBoxRelay8.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay8.ipadx = -5;
			constraintsJCheckBoxRelay8.insets = new java.awt.Insets(2, 9, 5, 14);
			getJPanelRelayUsage().add(getJCheckBoxRelay8(), constraintsJCheckBoxRelay8);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelRelayUsage;
}

/**
 * Return the JPanelRelayUsageTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelRelayUsageTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelRelayUsageTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelRelayUsageTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelRelayUsageTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelRelayUsageTitleBorder.setTitle("Relay Usage");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelRelayUsageTitleBorder;
}


/**
 * Return the JTextFieldFeedAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldFeedAddress() {
	if (ivjJTextFieldFeedAddress == null) {
		try {
			ivjJTextFieldFeedAddress = new javax.swing.JTextField();
			ivjJTextFieldFeedAddress.setName("JTextFieldFeedAddress");
			ivjJTextFieldFeedAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldFeedAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldFeedAddress;
}


/**
 * Return the JTextFieldGeoAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldGeoAddress() {
	if (ivjJTextFieldGeoAddress == null) {
		try {
			ivjJTextFieldGeoAddress = new javax.swing.JTextField();
			ivjJTextFieldGeoAddress.setName("JTextFieldGeoAddress");
			ivjJTextFieldGeoAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldGeoAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldGeoAddress;
}


/**
 * Return the JTextFieldProgAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldProgAddress() {
	if (ivjJTextFieldProgAddress == null) {
		try {
			ivjJTextFieldProgAddress = new javax.swing.JTextField();
			ivjJTextFieldProgAddress.setName("JTextFieldProgAddress");
			ivjJTextFieldProgAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldProgAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 254) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldProgAddress;
}


/**
 * Return the JTextFieldSPID511 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSerialAddress() {
	if (ivjJTextFieldSerialAddress == null) {
		try {
			ivjJTextFieldSerialAddress = new javax.swing.JTextField();
			ivjJTextFieldSerialAddress.setName("JTextFieldSerialAddress");
			ivjJTextFieldSerialAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldSerialAddress.setEnabled(false);
			ivjJTextFieldSerialAddress.setEditable(true);
			// user code begin {1}

			ivjJTextFieldSerialAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 999999999) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSerialAddress;
}


/**
 * Return the JTextFieldSPIDAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSPIDAddress() {
	if (ivjJTextFieldSPIDAddress == null) {
		try {
			ivjJTextFieldSPIDAddress = new javax.swing.JTextField();
			ivjJTextFieldSPIDAddress.setName("JTextFieldSPIDAddress");
			ivjJTextFieldSPIDAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldSPIDAddress.setText("1");
			// user code begin {1}

			ivjJTextFieldSPIDAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(1, 65534) );
			ivjJTextFieldSPIDAddress.setText("1");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSPIDAddress;
}


/**
 * Return the JTextFieldSplinter property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSplinter() {
	if (ivjJTextFieldSplinter == null) {
		try {
			ivjJTextFieldSplinter = new javax.swing.JTextField();
			ivjJTextFieldSplinter.setName("JTextFieldSplinter");
			ivjJTextFieldSplinter.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldSplinter.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 254) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSplinter;
}


/**
 * Return the JTextFieldSubAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSubAddress() {
	if (ivjJTextFieldSubAddress == null) {
		try {
			ivjJTextFieldSubAddress = new javax.swing.JTextField();
			ivjJTextFieldSubAddress.setName("JTextFieldSubAddress");
			ivjJTextFieldSubAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldSubAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSubAddress;
}


/**
 * Return the JTextFieldUserAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldUserAddress() {
	if (ivjJTextFieldUserAddress == null) {
		try {
			ivjJTextFieldUserAddress = new javax.swing.JTextField();
			ivjJTextFieldUserAddress.setName("JTextFieldUserAddress");
			ivjJTextFieldUserAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldUserAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldUserAddress;
}


/**
 * Return the JTextFieldZipAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldZipAddress() {
	if (ivjJTextFieldZipAddress == null) {
		try {
			ivjJTextFieldZipAddress = new javax.swing.JTextField();
			ivjJTextFieldZipAddress.setName("JTextFieldZipAddress");
			ivjJTextFieldZipAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldZipAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 16777214) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldZipAddress;
}


/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	com.cannontech.database.data.device.lm.LMGroupExpressComm group = null;
	
	if( o instanceof com.cannontech.database.data.multi.MultiDBPersistent )
	{
		group = (com.cannontech.database.data.device.lm.LMGroupExpressComm)
					com.cannontech.database.data.multi.MultiDBPersistent.getFirstObjectOfType(
								com.cannontech.database.data.device.lm.LMGroupExpressComm.class,
								(com.cannontech.database.data.multi.MultiDBPersistent)o );
	}
	else if( o instanceof com.cannontech.database.data.multi.SmartMultiDBPersistent )
		group = (com.cannontech.database.data.device.lm.LMGroupExpressComm)
					((com.cannontech.database.data.multi.SmartMultiDBPersistent)o).getOwnerDBPersistent();
	
	
	if( o instanceof com.cannontech.database.data.device.lm.LMGroupExpressComm || group != null )
	{
		if( group == null )
			group = (com.cannontech.database.data.device.lm.LMGroupExpressComm) o;

		group.setServiceProviderAddress( createAddress(
				getJComboBoxSPID(), 
				getJTextFieldSPIDAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_SERVICE) );

		group.setFeederAddress( createAddress(
				getJComboBoxFEED(), 
				getJTextFieldFeedAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_FEEDER) );
		
		group.setSubstationAddress( createAddress(
				getJComboBoxSUB(), 
				getJTextFieldSubAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_SUBSTATION) );

		group.setGeoAddress( createAddress(
				getJComboBoxGEO(), 
				getJTextFieldGeoAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_GEO) );

		group.setProgramAddress( createAddress(
				getJComboBoxPROG(), 
				getJTextFieldProgAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_PROGRAM) );


		if( getJTextFieldSplinter().getText() != null && getJTextFieldSplinter().getText().length() > 0 )
			group.getLMGroupExpressComm().setSplinterAddress( new Integer(getJTextFieldSplinter().getText()) );

		if( getJTextFieldUserAddress().getText() != null && getJTextFieldUserAddress().getText().length() > 0 )			
			group.getLMGroupExpressComm().setUdAddress( new Integer(getJTextFieldUserAddress().getText()) );

		if( getJTextFieldZipAddress().getText() != null && getJTextFieldZipAddress().getText().length() > 0 )		
			group.getLMGroupExpressComm().setZipCodeAddress( new Integer(getJTextFieldZipAddress().getText()) );

		if( getJCheckBoxSerial().isSelected() 
			 && getJTextFieldSerialAddress().getText() != null 
			 && getJTextFieldSerialAddress().getText().length() > 0 )
		{
			group.getLMGroupExpressComm().setSerialNumber( getJTextFieldSerialAddress().getText() );
		}

		StringBuffer addressUsage = new StringBuffer("        ");  //8 possible locations
		StringBuffer relayUsage = new StringBuffer("        ");  //8 for now

		//get our address usage
		addressUsage.setCharAt( 0, (getJCheckBoxSPID().isSelected() ? 'S' : ' ') );		
		addressUsage.setCharAt( 1, (getJCheckBoxGEO().isSelected()  ? 'G' : ' ') );
		addressUsage.setCharAt( 2, (getJCheckBoxSUB().isSelected()  ? 'B' : ' ') );
		addressUsage.setCharAt( 3, (getJCheckBoxFEED().isSelected() ? 'F' : ' ') );
		addressUsage.setCharAt( 4, (getJCheckBoxZIP().isSelected()  ? 'Z' : ' ') );
		addressUsage.setCharAt( 5, (getJCheckBoxUSER().isSelected() ? 'U' : ' ') );
		addressUsage.setCharAt( 6, (getJCheckBoxPROG().isSelected() ? 'P' : ' ') );
		addressUsage.setCharAt( 7, (getJCheckBoxSPLINTER().isSelected() ? 'R' : ' ') );


		//get our relay usage
		relayUsage.setCharAt( 0, (getJCheckBoxRelay1().isSelected() ? '1' : ' ') );		
		relayUsage.setCharAt( 1, (getJCheckBoxRelay2().isSelected() ? '2' : ' ') );
		relayUsage.setCharAt( 2, (getJCheckBoxRelay3().isSelected() ? '3' : ' ') );
		relayUsage.setCharAt( 3, (getJCheckBoxRelay4().isSelected() ? '4' : ' ') );
		relayUsage.setCharAt( 4, (getJCheckBoxRelay5().isSelected() ? '5' : ' ') );
		relayUsage.setCharAt( 5, (getJCheckBoxRelay6().isSelected() ? '6' : ' ') );
		relayUsage.setCharAt( 6, (getJCheckBoxRelay7().isSelected() ? '7' : ' ') );
		relayUsage.setCharAt( 7, (getJCheckBoxRelay8().isSelected() ? '8' : ' ') );

		group.getLMGroupExpressComm().setAddressUsage( addressUsage.toString() );
		group.getLMGroupExpressComm().setRelayUsage( relayUsage.toString() );
	}

	
	return o;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Insert the method's description here.
 * Creation date: (6/5/2002 11:40:07 AM)
 */
private void initAddressJComboBoxes() 
{
	//init SPIDS
	com.cannontech.database.db.device.lm.LMGroupExpressCommAddress[] addresses = 
		com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.getAllExpressCommAddressWithNames();

	for( int i = 0; i < addresses.length; i++ )
		if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_SERVICE) )
			getJComboBoxSPID().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_GEO) )
			getJComboBoxGEO().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_SUBSTATION) )
			getJComboBoxSUB().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_FEEDER) )
			getJComboBoxFEED().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress.TYPE_PROGRAM) )
			getJComboBoxPROG().addItem( addresses[i] );
		else
		{
			com.cannontech.clientutils.CTILogger.info("********************************");

			com.cannontech.clientutils.CTILogger.info("*** Found an ExpressCommAddress that is not recognized '" 
						+ addresses[i].getAddressType() + "' in " + this.getClass().getName() );
			
			com.cannontech.clientutils.CTILogger.info("********************************");
		}

}


/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	// user code end
	getJComboBoxSPID().addActionListener(this);
	getJComboBoxGEO().addActionListener(this);
	getJComboBoxSUB().addActionListener(this);
	getJComboBoxFEED().addActionListener(this);
	getJComboBoxPROG().addActionListener(this);
	getJTextFieldZipAddress().addCaretListener(this);
	getJTextFieldSPIDAddress().addCaretListener(this);
	getJTextFieldGeoAddress().addCaretListener(this);
	getJTextFieldFeedAddress().addCaretListener(this);
	getJTextFieldProgAddress().addCaretListener(this);
	getJTextFieldSerialAddress().addCaretListener(this);
	getJCheckBoxSerial().addActionListener(this);
	getJCheckBoxRelay5().addActionListener(this);
	getJCheckBoxRelay6().addActionListener(this);
	getJCheckBoxRelay7().addActionListener(this);
	getJCheckBoxRelay8().addActionListener(this);
	getJCheckBoxRelay4().addActionListener(this);
	getJCheckBoxRelay3().addActionListener(this);
	getJCheckBoxRelay2().addActionListener(this);
	getJCheckBoxRelay1().addActionListener(this);
	getJCheckBoxSPLINTER().addActionListener(this);
	getJCheckBoxPROG().addActionListener(this);
	getJCheckBoxUSER().addActionListener(this);
	getJCheckBoxZIP().addActionListener(this);
	getJCheckBoxFEED().addActionListener(this);
	getJCheckBoxSUB().addActionListener(this);
	getJCheckBoxGEO().addActionListener(this);
}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMGroupExpressComEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(357, 336);

		java.awt.GridBagConstraints constraintsJPanelAddress = new java.awt.GridBagConstraints();
		constraintsJPanelAddress.gridx = 1; constraintsJPanelAddress.gridy = 1;
		constraintsJPanelAddress.gridwidth = 2;
		constraintsJPanelAddress.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelAddress.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelAddress.weightx = 1.0;
		constraintsJPanelAddress.weighty = 1.0;
		constraintsJPanelAddress.ipadx = -52;
		constraintsJPanelAddress.ipady = -3;
		constraintsJPanelAddress.insets = new java.awt.Insets(4, 5, 2, 6);
		add(getJPanelAddress(), constraintsJPanelAddress);

		java.awt.GridBagConstraints constraintsJPanelAddressUsage = new java.awt.GridBagConstraints();
		constraintsJPanelAddressUsage.gridx = 1; constraintsJPanelAddressUsage.gridy = 2;
		constraintsJPanelAddressUsage.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelAddressUsage.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelAddressUsage.weightx = 1.0;
		constraintsJPanelAddressUsage.weighty = 1.0;
		constraintsJPanelAddressUsage.ipadx = -10;
		constraintsJPanelAddressUsage.ipady = -11;
		constraintsJPanelAddressUsage.insets = new java.awt.Insets(2, 5, 11, 17);
		add(getJPanelAddressUsage(), constraintsJPanelAddressUsage);

		java.awt.GridBagConstraints constraintsJPanelRelayUsage = new java.awt.GridBagConstraints();
		constraintsJPanelRelayUsage.gridx = 2; constraintsJPanelRelayUsage.gridy = 2;
		constraintsJPanelRelayUsage.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelRelayUsage.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelRelayUsage.weightx = 1.0;
		constraintsJPanelRelayUsage.weighty = 1.0;
		constraintsJPanelRelayUsage.ipadx = -10;
		constraintsJPanelRelayUsage.ipady = -12;
		constraintsJPanelRelayUsage.insets = new java.awt.Insets(2, 18, 11, 6);
		add(getJPanelRelayUsage(), constraintsJPanelRelayUsage);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	initAddressJComboBoxes();
	
	// user code end
}


/**
 * This method must be implemented if a notion of data validity needs to be supported.
 * @return boolean
 */
public boolean isInputValid() 
{
	if( getJTextFieldSPIDAddress().getText() == null 
		 || getJTextFieldSPIDAddress().getText().length() <= 0
		 || Integer.parseInt(getJTextFieldSPIDAddress().getText()) <= 0 )
	{
		setErrorString("The SPID address must be 1 or greater");
		return false;
	}

	return true;
}


/**
 * Comment
 */
public void jCheckBoxSerial_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	for( int i = 0; i < getJPanelAddress().getComponentCount(); i++ )
	{
		java.awt.Component c = getJPanelAddress().getComponent(i);

		if( c.equals( getJTextFieldSerialAddress() ) )
		{
			c.setEnabled( getJCheckBoxSerial().isSelected() );
		}
		else if ( c.equals( getJCheckBoxSerial() ) )
		{
			//do nothing
		}
		else
			c.setEnabled( !(getJCheckBoxSerial().isSelected()) );
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxFEED_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxFEED().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressCommAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressCommAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress)getJComboBoxFEED().getSelectedItem();

		getJTextFieldFeedAddress().setText( selected.getAddress().toString() );

		getJComboBoxFEED().setEditable(false);
	}
	else
	{
		getJComboBoxFEED().setEditable(true);
		getJComboBoxFEED().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxGEO_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxGEO().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressCommAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressCommAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress)getJComboBoxGEO().getSelectedItem();

		getJTextFieldGeoAddress().setText( selected.getAddress().toString() );
		
		getJComboBoxGEO().setEditable(false);
	}
	else
	{
		getJComboBoxGEO().setEditable(true);
		getJComboBoxGEO().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxPROG_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxPROG().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressCommAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressCommAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress)getJComboBoxPROG().getSelectedItem();

		getJTextFieldProgAddress().setText( selected.getAddress().toString() );

		getJComboBoxPROG().setEditable(false);
	}
	else
	{
		getJComboBoxPROG().setEditable(true);
		getJComboBoxPROG().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxSPID_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxSPID().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressCommAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressCommAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress)getJComboBoxSPID().getSelectedItem();

		getJTextFieldSPIDAddress().setText( selected.getAddress().toString() );
		
		getJComboBoxSPID().setEditable(false);
	}
	else
	{
		getJComboBoxSPID().setEditable(true);
		getJComboBoxSPID().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxSUB_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxSUB().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressCommAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressCommAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressCommAddress)getJComboBoxSUB().getSelectedItem();

		getJTextFieldSubAddress().setText( selected.getAddress().toString() );

		getJComboBoxSUB().setEditable(false);
	}
	else
	{
		getJComboBoxSUB().setEditable(true);
		getJComboBoxSUB().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame = new java.awt.Frame();
		LMGroupExpressComEditorPanel aGroupTypePanel;
		aGroupTypePanel = new LMGroupExpressComEditorPanel();
		frame.add("Center", aGroupTypePanel);
		frame.setSize(aGroupTypePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main()");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	if( o instanceof com.cannontech.database.data.device.lm.LMGroupExpressComm )
	{
		com.cannontech.database.data.device.lm.LMGroupExpressComm group = (com.cannontech.database.data.device.lm.LMGroupExpressComm) o;

		getJComboBoxSPID().setSelectedItem( group.getServiceProviderAddress() );
		getJTextFieldSPIDAddress().setText( group.getServiceProviderAddress().getAddress().toString() );

		getJComboBoxGEO().setSelectedItem( group.getGeoAddress() );
		getJTextFieldGeoAddress().setText( group.getGeoAddress().getAddress().toString() );

		getJComboBoxFEED().setSelectedItem( group.getFeederAddress() );
		getJTextFieldFeedAddress().setText( group.getFeederAddress().getAddress().toString() );

		getJComboBoxSUB().setSelectedItem( group.getSubstationAddress() );
		getJTextFieldSubAddress().setText( group.getSubstationAddress().getAddress().toString() );

		getJComboBoxPROG().setSelectedItem( group.getProgramAddress() );
		getJTextFieldProgAddress().setText( group.getProgramAddress().getAddress().toString() );


		getJTextFieldZipAddress().setText( group.getLMGroupExpressComm().getZipCodeAddress().toString() );

		getJTextFieldUserAddress().setText( group.getLMGroupExpressComm().getUdAddress().toString() );

		getJTextFieldSplinter().setText( group.getLMGroupExpressComm().getSplinterAddress().toString() );

		
		Integer serial = new Integer(group.getLMGroupExpressComm().getSerialNumber());
		if( serial.intValue() > 0 )
		{
			getJCheckBoxSerial().doClick();
			getJTextFieldSerialAddress().setText( serial.toString() );
		}

		//set our address usage
		String addUsage = group.getLMGroupExpressComm().getAddressUsage();
		getJCheckBoxSPID().setSelected( addUsage.indexOf("S") >= 0 );
		getJCheckBoxGEO().setSelected( addUsage.indexOf("G") >= 0 );
		getJCheckBoxSUB().setSelected( addUsage.indexOf("B") >= 0 );
		getJCheckBoxFEED().setSelected( addUsage.indexOf("F") >= 0 );
		getJCheckBoxZIP().setSelected( addUsage.indexOf("Z") >= 0 );
		getJCheckBoxUSER().setSelected( addUsage.indexOf("U") >= 0 );
		getJCheckBoxPROG().setSelected( addUsage.indexOf("P") >= 0 );
		getJCheckBoxSPLINTER().setSelected( addUsage.indexOf("R") >= 0 );


		//set our relay usage
		String relayUsage = group.getLMGroupExpressComm().getRelayUsage();
		getJCheckBoxRelay1().setSelected( relayUsage.indexOf("1") >= 0 );
		getJCheckBoxRelay2().setSelected( relayUsage.indexOf("2") >= 0 );
		getJCheckBoxRelay3().setSelected( relayUsage.indexOf("3") >= 0 );
		getJCheckBoxRelay4().setSelected( relayUsage.indexOf("4") >= 0 );
		getJCheckBoxRelay5().setSelected( relayUsage.indexOf("5") >= 0 );
		getJCheckBoxRelay6().setSelected( relayUsage.indexOf("6") >= 0 );
		getJCheckBoxRelay7().setSelected( relayUsage.indexOf("7") >= 0 );
		getJCheckBoxRelay8().setSelected( relayUsage.indexOf("8") >= 0 );
	}


}
}
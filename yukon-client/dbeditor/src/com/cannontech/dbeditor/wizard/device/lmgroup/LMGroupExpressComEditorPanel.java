package com.cannontech.dbeditor.wizard.device.lmgroup;

import com.cannontech.database.db.device.lm.LMGroupExpressComAddress;
/**
 * This type was created in VisualAge.
 */

public class LMGroupExpressComEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
	public static final String STRING_NEW = "(new)";
	private javax.swing.JLabel ivjJLabelFeedAddress = null;
	private javax.swing.JLabel ivjJLabelGEOAddress = null;
	private javax.swing.JLabel ivjJLabelPROGAddress = null;
	private javax.swing.JLabel ivjJLabelSPID = null;
	private javax.swing.JLabel ivjJLabelSplinter = null;
	private javax.swing.JLabel ivjJLabelSubAddress = null;
	private javax.swing.JLabel ivjJLabelUserAddress = null;
	private javax.swing.JLabel ivjJLabelZipAddress = null;
	private javax.swing.JPanel ivjJPanelAddress = null;
	private javax.swing.JTextField ivjJTextFieldFeedAddress = null;
	private javax.swing.JTextField ivjJTextFieldGeoAddress = null;
	private javax.swing.JTextField ivjJTextFieldProgAddress = null;
	private javax.swing.JTextField ivjJTextFieldSPIDAddress = null;
	private javax.swing.JTextField ivjJTextFieldSplinter = null;
	private javax.swing.JTextField ivjJTextFieldSubAddress = null;
	private javax.swing.JTextField ivjJTextFieldUserAddress = null;
	private javax.swing.JTextField ivjJTextFieldZipAddress = null;
	private javax.swing.JComboBox ivjJComboBoxFEED = null;
	private javax.swing.JComboBox ivjJComboBoxGEO = null;
	private javax.swing.JComboBox ivjJComboBoxPROG = null;
	private javax.swing.JComboBox ivjJComboBoxSPID = null;
	private javax.swing.JComboBox ivjJComboBoxSUB = null;
	private javax.swing.JCheckBox ivjJCheckBoxFEED = null;
	private javax.swing.JCheckBox ivjJCheckBoxGEO = null;
	private javax.swing.JCheckBox ivjJCheckBoxPROG = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay1 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay2 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay3 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay4 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay5 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay6 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay7 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay8 = null;
	private javax.swing.JCheckBox ivjJCheckBoxSPID = null;
	private javax.swing.JCheckBox ivjJCheckBoxSPLINTER = null;
	private javax.swing.JCheckBox ivjJCheckBoxSUB = null;
	private javax.swing.JCheckBox ivjJCheckBoxUSER = null;
	private javax.swing.JCheckBox ivjJCheckBoxZIP = null;
	private javax.swing.JPanel ivjJPanelAddressUsage = null;
	private javax.swing.JPanel ivjJPanelRelayUsage = null;
	private javax.swing.JCheckBox ivjJCheckBoxSerial = null;
	private javax.swing.JTextField ivjJTextFieldSerialAddress = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public LMGroupExpressComEditorPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJComboBoxSPID()) 
		connEtoC2(e);
	if (e.getSource() == getJComboBoxGEO()) 
		connEtoC3(e);
	if (e.getSource() == getJComboBoxSUB()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxFEED()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxPROG()) 
		connEtoC6(e);
	if (e.getSource() == getJCheckBoxSerial()) 
		connEtoC12(e);
	if (e.getSource() == getJCheckBoxRelay5()) 
		connEtoC13(e);
	if (e.getSource() == getJCheckBoxRelay6()) 
		connEtoC14(e);
	if (e.getSource() == getJCheckBoxRelay7()) 
		connEtoC15(e);
	if (e.getSource() == getJCheckBoxRelay8()) 
		connEtoC16(e);
	if (e.getSource() == getJCheckBoxRelay4()) 
		connEtoC17(e);
	if (e.getSource() == getJCheckBoxRelay3()) 
		connEtoC18(e);
	if (e.getSource() == getJCheckBoxRelay2()) 
		connEtoC19(e);
	if (e.getSource() == getJCheckBoxRelay1()) 
		connEtoC20(e);
	if (e.getSource() == getJCheckBoxSPLINTER()) 
		connEtoC21(e);
	if (e.getSource() == getJCheckBoxPROG()) 
		connEtoC22(e);
	if (e.getSource() == getJCheckBoxUSER()) 
		connEtoC23(e);
	if (e.getSource() == getJCheckBoxZIP()) 
		connEtoC24(e);
	if (e.getSource() == getJCheckBoxFEED()) 
		connEtoC25(e);
	if (e.getSource() == getJCheckBoxSUB()) 
		connEtoC26(e);
	if (e.getSource() == getJCheckBoxGEO()) 
		connEtoC27(e);
	// user code begin {2}

	// user code end
}


/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldZipAddress()) 
		connEtoC10(e);
	if (e.getSource() == getJTextFieldSPIDAddress()) 
		connEtoC1(e);
	if (e.getSource() == getJTextFieldGeoAddress()) 
		connEtoC7(e);
	if (e.getSource() == getJTextFieldFeedAddress()) 
		connEtoC8(e);
	if (e.getSource() == getJTextFieldProgAddress()) 
		connEtoC9(e);
	if (e.getSource() == getJTextFieldSerialAddress()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  (JTextFieldSPIDAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JTextFieldZipAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (JTextFieldSerialAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC12:  (JCheckBoxSerial.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jCheckBoxSerial_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxSerial_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC13:  (JCheckBoxRelay5.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC14:  (JCheckBoxRelay6.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC15:  (JCheckBoxRelay7.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC15(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC16:  (JCheckBoxRelay8.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC16(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC17:  (JCheckBoxRelay4.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC17(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC18:  (JCheckBoxRelay3.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC18(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC19:  (JCheckBoxRelay2.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC19(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (JComboBoxSPID.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxSPID_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxSPID_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC20:  (JCheckBoxRelay1.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC20(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC21:  (JCheckBoxSPLINTER.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC21(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC22:  (JCheckBoxPROG.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC22(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC23:  (JCheckBoxUSER.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC23(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC24:  (JCheckBoxZIP.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC24(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC25:  (JCheckBoxFEED.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC25(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC26:  (JCheckBoxSUB.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC26(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC27:  (JCheckBoxGEO.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC27(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JComboBoxGEO.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxGEO_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxGEO_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JComboBoxSUB.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxSUB_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxSUB_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (JComboBoxFEED.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxFEED_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxFEED_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (JComboBoxPROG.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxPROG_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxPROG_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JTextFieldGeoAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (JTextFieldFeedAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (JTextFieldProgAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * Insert the method's description here.
 * Creation date: (6/5/2002 10:46:06 AM)
 * @return com.cannontech.database.db.device.lm.LMGroupExpressComAddress
 * @param combo javax.swing.JComboBox
 * @param textField javax.swing.JTextField
 * @param type java.lang.String
 */
private com.cannontech.database.db.device.lm.LMGroupExpressComAddress createAddress(javax.swing.JComboBox combo, javax.swing.JTextField textField, String type) 
{
		
	if( textField.getText() == null || textField.getText().length() <= 0 )
	{
		return com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS;
	}
	else
	{
		Object item = combo.getSelectedItem();
		
		if( item != null )
		{
			com.cannontech.database.db.device.lm.LMGroupExpressComAddress address = null;
			
			if( item instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
			{
				address = (com.cannontech.database.db.device.lm.LMGroupExpressComAddress)item;
			}
			else   //a new address is created				
				address = new com.cannontech.database.db.device.lm.LMGroupExpressComAddress(type);
			
			Integer addValue = new Integer(textField.getText());
			
			if( address.equals(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS)
				 || addValue.equals(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS.getAddress()) )				
			{
				

				if( !addValue.equals(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS.getAddress()) )
				{
					//we have a none address selected but have a non zero id typed
					com.cannontech.database.db.device.lm.LMGroupExpressComAddress 
							addressTemp = new com.cannontech.database.db.device.lm.LMGroupExpressComAddress(type);
							
					addressTemp.setAddress( new Integer(textField.getText()) );
					addressTemp.setAddressName( textField.getText() ); //just use the address as the name
					
					return addressTemp;
				}
				else
					return com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS;				
				
			}
			else
			{
				address.setAddress( new Integer(textField.getText()) );

				address.setAddressName( 
						(item.toString().length() <= 0 || item.toString().equalsIgnoreCase(STRING_NEW) 
							? address.getAddress().toString() 
							: item.toString()) );
				
				return address;
			}
			
		}
		else
		{		
			com.cannontech.database.db.device.lm.LMGroupExpressComAddress addressTemp = new com.cannontech.database.db.device.lm.LMGroupExpressComAddress(type);
			addressTemp.setAddress( new Integer(textField.getText()) );
			addressTemp.setAddressName( textField.getText() ); //just use the address as the name

			return addressTemp;
		}

	}

}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GDBF9DEADGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E16DFD8DF8D44539FFD4D4D4DA030DDE342841C60BD7D45A46DEEA31C20AADED53AB365852B655282874DF5434E28B966B4987EC00C0828489A4A18B8990B0640BGA1C48890BE8291A28998C200EC321BE4E133093B9B8898617F4E4CF95F7331E713EC38F071F9EE1E674DB9731BF95F794D771CF3E6E625640C60D951B1491294BDCB127F36C4CB521057A569113C277E04D860CBE3CD126AEFA548C269
	AF76B8388603DF55CF43CCC9529F574403BB945C715F89B3AD057B45524BEB760F039B9F7118416F7115C7BE6BB91E45CBB09E93F79F1C1BG5785A023G0BG49FEF9AC445FB4B7C546A5F0AF106F19C447C852E49EE6FFC10A8AF74861C641B59CE4F2A48BF3E9EE1A6C1F836EF210E01050C891B69C2EF3B83B1BCB0A65F075030325E93FDC9BB31F4525320F12730A502D122FE669C91E9131529DB5E5F0AD2DBA5B323D293DAD374962F436BBBD362656DC1B556EE9F765DAED676CCD36DCC7DBC9C965277B
	DC6D1D9D47ECAE3785826F61812AACCE1BE34CAB0C3733A01E5B142401602EFC15E1EF94303C0A037BB41022D7117B8B73CBE5EEC1E70325486FAC7749BD70D541B974D505FBEB7751595657187D6F7232E0FA5340BF87B0112E36C3D5BE52E5ED14D3F65EFE516232AA89ECE10923D46E696AF0595C6E5D8669FCE7AE26F378EB184E36D446A3925C53992F49089725B1BC9B5CE5A03513B17D1F2C457457FE7924147642DBB109BE525FB1D924FB48E4A57D914E233317713A7860C72CBECD843F69A0892F0FB5
	6503D401F4002472B6D037E4BDDCF7B6FAA0B1ED6D4E1D9D9D3B9CD657276DD61B836ECBCA40C7460E581A5ADDD6C992755CDD10E34087E5606B5ABA4EC4246DF3896B6508A30FC88981EF474CB2C8DB680B6BE2064AB6C63E2E242D638D16EF3F594872ED8260CC6FA04B870ECBC58C8FFDC341C5BD184A6B99F3573CB956B472AF184F358B10CBE55CFDD2D2C1E50C49004B10301DB189D385072C298A97114797D2D89ED7816EG99GB294E4B4C844D44C6310A59BFB4B638A28FFAE2745D15D5958E1F1F9F6
	F55A9DD61BCB4E6B4767761457C6A274FE6C371E4817619B55E594710303067992B1BCBFE63A1C9FC9EFA979A2621E66B36E7C373C6B4682AA43D7F8DBA9FFCB14E1AC61FF65F80D8A97E56B66B8F7035FF89091FEF8BA43F35E966137101DF00E0728F0E1270437C566CEFBE72CE9D254D813A85F254BD9FF9B74F728B7A063C1A2C124F7214F8249FF974B781DA5F9FDECC7D52A72953A43BF7A882E36AE0F4BD261F4FBAC4EA65BB10B4BEEE9F4585C129C66FB9F31FCED54687D10376FA608E31F4DE9F3D9BC
	76F6A7D837345920B239C518E7BFDA484238EC5C37465EE603885ABAA4347B730F964355E1F1FB0EF6D8AD9E1B92C278BF7F912B9367AC2CE38783F09F70AE4B2F5BF9FFDE85770EF7B12FBE48E758B8F0C7D03E9CD83A0835BD285CB6C7C9C9393D09513038AEE09D1D34B1882ED1903EEB9A646BFBE3CD03C0927E81D71004FF0EB58502D4CD871BA0C3E60CB56DFFFF2CE99AC8703FG1F89BA9F0CB58D84C97EB734BD106C8FE1BC84A91342CC53C03A2343CCF1B1E126C1A04931E12621A0D9F1E12691A0C5
	3342CCE3C0764F8EB3CDG29B10519A2C09A624364BE626DDAEC8B65739F16F2DEBCE0589618CC869DF61DA9DF1536B03B0825B1EBCE18299C448AB2GA484E49C48E41038394089249C448AB2GA484E49C48E41038F9608FD28EE28599G9282B28EE4B2C8DC8278031403D8C1860004000C83198C92B79F7CC14AC12CA083C0C2C0843F3F97D445745CAF30FC42FB16C7ACBF514D4A4E1FBEC6AD2C2CD9B931FB16672C4CD9B933F2D407E365551BADD6CF284F1EA16AD2DFB830326FB58C543791AA8E2C2E2A
	7DD97D24316BC3651E55515EEC33BA2C47D8FD9E942365456AB15E33FA0C772CBE33B6604B7E18D9DABB59AAFE2C1D317ACEF67FAD5A96EBB7897F6CFF393236A46A56ED053D552D9D2A7BFDA09BD56E58FE464F04355F8D72BD9B7B599CF28948DADD38EDFD3035D0F54F1E9DCCFD64303B8FE1D85F79094ABDCB673FD8F57F316ABE3D8F36B38C30CC10CDBA2CC0F53FC5F53FD5924FB93E6C6F543957296E6701D4285C2BA5B16630F1B2718A4AF50F1CE78B253305EC4C9E877DD8A40834A0CC9EF3EEDEEA16
	78D83C4B62366168FB588583274D2A0CC0A26C0DA90C0B6D1C4D69A937F5581CD638F14BE35FEDA92C8E4963F2F33B04E3661D9CE773345DB0F03A893FBBE521404106FA14C77F7B393F4563F1599BBBBD36EA1B47E3F736A87A8FF3AEEE4D9450AD27350D4FF9D3A00D79A0E514565CE52CFE6078DA595EFE363323064D9C64F1FA5EBCB6A657C0F84782EC13EF2632E756C0F27F0D3B957F8B2935BD64BF536BEF59B191F15C55E39CD7526E15B81EC8F74836E649589C39DE32BC1BAF57C3D6A62CCFE0FD43D2
	39EE313CE56D0B359FD67FB3657A3BCD2E632C9DEE106BB2EBBB2C4F5AC4717E0647BB8A72A992A4BE914A8C2496A4GE4B848841069A066A418FB00F4008C819983B285A4E9E11829982481E4A048C810C9A05222B0D3B6C895C897C8B04878C5D8EEE5E9A323157C5327D91D5E45FDCC6F5ADE526BCF9F7AFF52D3DDFD324732D3175B7CBE165B129E4ACD5D472B7B6C7F937FC47441AB177B9EC332179B0FA1394B0D47102265BD0F91254B0D46886137FBB92BB76D671D2AB1A7BA1FBDFFB535BB1DB6BE7011
	0AA45E053DDD4352E1F75ABD1F5B2DADB6CF357D228D4619456C1D69B07E0C97857DCB5CE2FC9EBA1F094FC3D99707C9E3CE2FB6FCFFB3646172187A45E21C68D82CBC8F89CEB17CFD0C4DE1EB030C5A5D5E697488BC1E47A7636ED80E8D4E68E63A5955027ECE2B153FF9EB35B51D5D555E15E377585AF2593FEA8FBC3C6EEE35B8DBEC566CB316F316DC4BF9CFAEAF135C8A705F436E5619B7EC58EE767D2AB227596E32D5B8BBBA6507616CF5475695889E7BF7DC64BCF8E9DDFB960522DF003AD67A9567D1EE
	BFE7F77F2FE448C689394C795243399C31B9AC978A2EA105A2917F05592A788B2FE17C1BC47C5FAAD6453F719A463FD944FFEBC32792FF5135EC9345D487762E79BE67F0G232F36396C9607DCADF3AC3C55660ACB154D555C6EEA73A63313FB770D4E994308CE6F5445D069BB0AED1002AD48FF73F9511E8E54C09F3D57EEF3D83589E802593CA7177F17534F8CF7653A4FC337AC5B5E4DFC7B1D19CADE561A1E5066E505538A4D5C5AE9F1DCE1C69AFE30D032D209475FFC4CC76EF3139E12393737B536336229
	2AA83FCA2CD5B1784B37G797EABBAD84BF75F1E43D717AEC460AF5BC24175BE1B0EEB7551DDD7B9EB0F6E72176BC64175437D3AFA30F74F1E2BDC8FD88C7E32AD42FAD0112963DBF564703E2B4B174560AF5FCD48F76D3EEEDDFFD5E76F789F682C0CB99BF4D7DB850FE7AEFA751B509C2FA5114D54EF3E7E25BECF76595A2FA515AD0247A7A6FD1E6C35592C571208B2167CB66F120ECB152B3D65DAF2A9580ADCA6F9822E56985BF7B679024B1F733EEBB4DF393A632B08436F312AC04E3FA74EFF29654CA7FC
	1B2E8AE7232CAB14F92C4BB46231791A7158A873B81BE444E34BB563D104733525C6BC0A2F990FCDB20FD75A0CF894DDB39E1BE59EAFCBC6BCB6DEB39EDBE49E4D71C6BC8A2F990FE219473484A39E85570AC761D619C7D353D73ABE2F2A3262D04D1EA3570CC9BE0DCB9FDC3A2065F25566DBC6BC8A08C7D5190E47516AEB189F0544A3630BAEAD0F3A0A2AEBC6C31E337F412C4B0B2BB6E7B7A2D1C4F971F212AEAF2E56F30E918D791DCEDB320E4355FAAEB46230D9FC6B8B666B5882970719C2C0C6AF46EFFD
	838A18BFFE6B13BFE86EEEF7B8443BD170ABCAE66FEDCF94A52B5E45CE84FD368E558CFE42BF42503F1B7CCFEEB2728FA47F178C7DC3487F74E6A37FD1649FE9689FCE7E16ADC67E11647F2A217FB472EFAAB6720FDF027E138D7D53485F365548BF1F7C5FB074AFA77F1692A37FDA721FE2686FA0FF7BB6A37FG727FFF067EC164FF365448FF81550F7F68457F273D783F530BFF6AA7C67E43095FD0C37F51641F3E3DE77B953D78F77662BF2C977FDF7762BF23977F55BBFA767F2C977F2FFA71FF34977F97FB
	710FAE6B59FFC3AF7E47FB713F59273F68473EA8CC022B5B76C5274D59E4E30B958E5AAE486B953B8A97697C0ED99C1D4ABA4800C276BD5421DA67A0F077C663EFCA97B632358DE7497ED79BE7CBECBD2330A93E010D34B01B9DAEFB1B45F501AD5C1057632F1A27DE0FBF816AA7DB3B1F74D118A98BC40C9793F6337521BD7574B3BF62F5FA852E5BAF85F78D0867A3E1AF74A3F95DA08F778A055B3FB44C5430D4899730D49D6E6E8C8CB79E70C8D5B8A9C59D2E42CC76GEFC8D15953047B00420D87BCD295CE
	DA268E773D15E48F70861000E5A25CE8CDB84FAA8C978178B41F6132B3B1DC7272B0D34EF2DF61A2A8DCA504317A8C9718056186C01821BE43152F46F023A14CC41F6126D338E990A6A195B8260AF00ED4F53851EBB05CA840A72842E96DF52C45F0D1609F1F66ABDCD6B6064B06B0E5BE43CD22F08D90264BE738C16BB05C9088B352E738327598EE82041962B35CB48A971F9EE6B2277B8AB77CE38CD786E1EAFD062B4F41F0DD90A650E738248D98EEA404996FB35CB88AB78542C8ABFC056B4A45F0E688D36C
	B3DCCE9E062B05B09DBE43C5D238C088B35CE73820FCEAEF90A652A01C1441420D22FDB3F904BD4F3163A6C9FAA58E576CFF1A245E6FE37E711731C65F651914E7887B35994AF7F9B16FFCF193335B8578408C1CF37EF323FAFD59CE373B3D494E17124B7D6EA3C56AEF7682FB2CE8AEDCE1026B76D4B82D36AEDA43DE4438323566B2AC773F0FFD4C56BF6A574E0BAE94176F6DBE4FA756B56D3B5B2D367D507D6F26A58D476C367320AF765F5CD50479B5B48357ACFC35D73D1FE8F4E2E14CBC9FF9B3D14E13E9
	2A3C71B80F4E963697EFC25BC566B013400288F39036E4B3E2A1045DC3D884E1CB37A0163C9231A104D592362C983181045DC758E842D237A2B60D302104652CC2AC3D84B1ABE18F90B614300CED08CDA4AC183004CC44D616A2D6CE5811CF906BA66C37040582A64A7E5E92361E40E8AFD6932F8C39AD1D765CCE0F1DED9E30F8AC7C09098F2BF2F98F626B9B192D29E0D36C2B2ADF406682D9D9E126D2109A903147E36F0A84B92C833010AC1CEF66E42A67AB9100472D8EB3E52F46B17E71956CF95D7F07C02C
	5F55ABD97D3B126F16229EBF3438CC66987E44FDD2696545067B4286A62647142E9675573ADA2947E56FDD081D3A74183CB7EEEE866645C888B3E5B5664547E9C6F9E1DE0365D5EC5D26CE0B7F9FB5657DB6BF21780B4036E38D46FFA455A87E900A7F51CECD7C7EFF281463F719B17ED1E0BB0A62379B461F3D9663DF700526AC7B716DD1443FE6A546DF8A36BDEBB17E350679BF0262FFAAC593FFBF3EA50A787FC8710F815B53A97E1F18557167E70B78EB3331AD6CDC4546A1BF3F58486DE05C3AC5E2DC503D
	7840BDD8772F2276897105E4A32770E6A3CE9159582EBF4BC43DA8403257215E2105C6FA8D6BD0EFD6966AF9G9BC1FA6906F9B01974FEC4FA53814BDF0FFA9BB20D74DA5723DE5BEA546B86AC1474728C7526125E4AB528A7FD8CF3140FD16FAE0DDE4747C2EF4847D8D68357DCD93F7554E75BF9DD3B122FD8D8362FD39AC6G3F491406C5AB74E9C84B0179EE8E267D5E3528D78358209C54CBCCB7529BC7FA1FE6235EA44012B6205E02D4A33D7D9BD0AFFA9D6A558396C4FA738D7542C96FA9520B84ACA597
	75E28DF9D665221EFDBD6AD9819BCAFAA6C33D0924177EB16ACD814C1C07FAD6C33D5ABC54FB01749C000510DE21E1B9C4105E4DB95446G4B4EC73D7F2A556BB5005F00FC545B3A817506GB601748A8F9A694597205EDB241786D8CD816A7D56E524B70874066522DEB0E013C8EFCB1111DED2A16A9D4DC33DAC406A8BD16F5285A33DA0521B130FFA43810BA43D69070D74D2B6225EB3241743300D287727A3C6FAC3B762DC7673C275BCFFCCE401617ADB7EFC34D10C7D63B66A6779BF62F34CC84027ED44F9
	FE4EA6366E986779C7E0E6EDF136B8EC924E5D7F485F0F1F35DD105DAFEDE2717277A8922EE17F0FA2FF769B479705497BC67F415F4726013B98248A2495E4E091F233ED6EF57F741E2E9E76CF27EC72075770A25CCFF12FDFFA23C9EF79E6FF74A6105E377D521BCCFAE9DB7C511BCEFA777B2517308975D6947B23E7A63D877D52ABA2BD73D6FF7476135EB03F746AC9EFD509BFFA9D24779D3F748610DE56B6FF7406105E43FE690DA03DB5257E680DA13D4FBF71C7EFA269CD72CBEF8A698D1E27571B39C959
	FB163459FB9F1A5863BFC1BC7F01BF6B97CD04C7F03CD4050B3E3811634CDD83FE23B6E37C15AB747127ED5146D92CF38B3DBAAF3D957A3A265393732D96876B6F783330EABADDD2C2EB93657752CB92556F25BDDB445E3EA1F09D31851F351BB263E5BE6336E0BFDBD9425EB94D84F7CAB14CDBC1AAC1BAC086010CAC467EB6F433517B98EDFF6B6BE50C3267D164C5D2C67F72F005171EBE8FA794EB75C43A9B53B05DD30A319C47751343EFFA65E05EEA446136D464D03C95B9F4197B476196AFBDBD078EC38E
	4144E1A0F148D959BF8EA5DEFAFA8EE38CB91C223218C49CA27B4961EDAF3DDC1DBB294428CD2D666F478D5A942DC594DC5FB363FB246C926A4FD7750F6B773C7474DC9BCA0C72AB3685732B0BB8FC1E59BF8EB6AFBDBD0711069CEEDE0879B01EB84C4B6A9F07E5DEFAFA8E52B6A38EB5D496A95B1043337D64706BDEB9D499F230E6A207D66260DE5DBF8EB7F86969B9849BF2E8669C583CFF94F1D83B26FF9CB6F969695BF054B62376337D182FB1C9FEABA0F37D850DB7712548752F7D64BA43CBCF1FDFE525
	DABDB1AE2627980D0B359056D10A63E2458A4C5381447341357D637938171E1E6768D223F25D1B0E9CA692076A6C7EF130F86969B9A4FCE244E1CFAAF2487A84B91856750F4392AFBDBD07FAC38E651C837B9663A18EBF6EA707DF744AE104A10712F464B00EB8342F6F9F072F3C74749CE69AF258CE75A1F9BBF2487C38FF9C8A3C74749CAA379BF178B6F13092075F7713436B3DF298EA4841CEEDB314B85C1153BF8E77FA6969B9CC5DEE54079CCEB56AC362F6401CF98776A1EF57A24F7C9D48F347067E717C
	54CBCF4F33F507E1DE9DC48E8144615DFEF2084E6D0D43A8C38EF35D48E182F1782E172D3EF1F82AD78E71E5C69C1CC54841DC069CCE64750F035DCBCF4F21561043D39710C387F1C84C6F9F07F4AFBDBD0761069C722A104398627053FEF2F821D78E538DB9AC2AC68EC9BB7119F3907FDE3C9F5C35BB7179F26196F606853EEB2CEA37BB59BEEA617713ADECFDD63B4B5EE2F7A276D30EB5353B78418662DC1BA7F83937024D81E4775F453E4FE1183555789C06F9DB0D4FE1D838356733FC16ED75F5CE036017
	3789798D819158C842C690D6309931B104FD1F300904ED5C02589442C2891BC95826E24412F6A176C34232885B329531E242C691D6C9585692449A88FB1AB08FE15B36A1B6103051048DA56C13D244C692667C8431F1043DC358A4420673EF7DD341AD6DC66CD7898C4B82F769EE2C773F636FF39A405D8DB21470D7B94E3F81660B6F9B82EFDD5053D9C4A84C0E910E717852131F817A94072FF34570CC98DFFA69BC4CAFBECA64F5566D3639798B9A36E2C276FB5333C4B2B8876410254DA6617A7B1BD64C1143
	6C71346FAE147099605DF5ECCCB4F886D01DFB7BE9A24E7FC76D46F59829B6165FD1600EAF8FB3194BA93FB54F2645655A3C2B84F7038E93ED6ED8096F76FD324438FDB715303E465D5E69EA32695B7019129472D35EE0311391D836486BCA393E4762EA31F9758197393E707325FFD3092FFEC264793E8CF51EEF247A5212264EA30FAEBF8602FB288E137735EB6C95113DEF262A6D0D54690E8377A4C3FBCF1A557614B32E9E56581B2A531576041912779859EBDA293637196CB5E9521B2D53AD85F715213D25
	2B662A6C9564233D77B56F4D2CBA5D2EBD5E6DD5587B63AAB53F8262975F2236B7C8568F162F21BE6DFDB3D3EDEF8B593BFD215A5EF81DFE04CFFB3B3254760A495EF1CDFA23F47AF1FBFD597B07465ED632E7573451941DFE0ECFFB7F39DAD39E85E86F2C46DE19CE3F865C2DA05DAADC58BB35C6E32F906D7D3746DE202C97A2DFC7796437EA2D465EC61C3B9CCD417EABFCAF76DF557C2C6038FDB0D600946D437E6B10667DFEA5608DA01EFDA24E017BFC457DBBED5CC518160369EAFBC3C1FFA448B8594EA4
	1F76EE4F56585B04768EE85BA668CB7B21BD6E97F632777B3237FD1D465EE634D72131D78A7AD5A0D659CE17FC9D34DFDFF6FF575A5B0276F6E8529B8CFA21A063E57D88799A65E56F11759AFB45E8EF3746DEDC85BC2B0164D4887D328ADF692D7BD8E3EFAB5A8B56582B817DD610EE59CE20CFFB8BF254768A29AFF2EA6ACB88680F8289176DC47A34972635D700F575D6FA37BF2D826B2A1D2FED4CB990E6AA8729BFC04F04351AF1847001A0C38F08B8C79E709577398D1A38295DB98F2A6D0D837DC9A0D3E5
	BB52C1DF765667EA6CEDC4FB09EE353DE4504F86A9156DD479347712569E35A537E68D0295743BC08649F602FD5A3BABCFE30F5A5253975476C2C1FFBCC804ECA74A273D3D799AFB54160A2AB4F535926AAAC8CE25DCD7ABFD59FBDFEB0F5A5252EACDDD857DD610EE59CE2001BDB1AF993C0DFD836DA2775D5C4D76010AB91FEDA72FAFFCEE3347E94507B43E7E7CB97E6C75CC1CB877D1E0FB79334D59D9624CD8017D1CE34BE62B317D7C59A69D301B887B8547D281FB013083DBB0DCC1B4E23F625863906F61
	9844AA79334D8B9066EF31087D1AE343E245594282BB441FEDB6006E3DE46FF90EBD9FAB4E1495D895FF367993E0F7927682475E0CD573BB421FEDFE8FD8AA597BAD4792A10E4F892B614FBB03A15CB042EE664FB6AF82769E25E376F606FD823A1DB1D8664F4EE34F3D8E4B0576CE487B6915AC5C6FB4FB12C2G8B8709144BD9145D774E3377194DAECB9BCCB52BBBECCD5244CF793E498454AD83F78D0887A488A474D3DCB31835074DF7454CDEBE1F036A6067E797697D0E3AADADB6747F410AA47267DB5D39
	2F2827C7925575B46DD018A97F10D2B74B8FF957D3714D7EF4B36B57EA8F09EF76F904DF66789895AE2F15644F9C4C1DFDB84C94D2054F09177977897391087788E28B6B7159311C30893CEF8D8277F042AE716F1823419DCED876F1540DA46C1F4B9916DF8D762A91FB185B2B85F7ABE1BF2BC55DEE429670F061600EA4ECB4472601BB2E8631D7C9B70530F09E2E955C5D04DD641C83419DCC58DE629CCA58B44EB96EA858BBCA793212E1B960AEA5EC43E9542DA2AC2385438593E611786F6C00FB9CE1BF13D0
	F782E14396222E79983D87B802610A886BB0E3388104851D42F0C3888B4844F0D388DB5C0861E692F6A3052B7C9C319FD8B0DC83E1EF2DE258C8F00FA3EC8B571D846E29043DCE7624DAFAA7E1E3D8B23833884BEF46B872EBF1EC2ECBD13709G4003EA15F6B03C56D71BF80D4FCBC7570A3A3F1070E99C1F2242C51BB84EF166CEBE8EE5F59CB959787B761CBAA867BA44A45EA62A40EDA52C1CE3DD609EC8582354F60288EBCCC7FB13890B2BC3FB53895BDF077692CE103DBA2A5704D9D251DEABE13BEB51DE
	B7E13756223DC04226D0BB99CAD883591BCAD8A359136A91FB04E349604EA2EC9E351DFC425E65EDA7G5CC389BBC6F9B01C30DBCEE09C23897BA547A600BB1230BC4A5329048D6176CACF0619EACFA2D6C7F1D88913A80EAE424AB9B6885CC389FB788446B11C307FA2FB53891BC37692CEA176A959B3937684594BA16CE62AD75D0435123DC0423EC776C288DBC4F9B072943613C11A678F69B4BC4B1CD65AC676E9DF6DE4861F93171E56379331772575343E1D342F40F69284FE668664B477B826E784E14B32
	99B6865C9389EB645894F0CFA76C6759181EB88B654FC134D7C3D8628E3457CAD8B5473A41BD0830D1BB286FA3EC0D9B6DCDA12C64905A1BC95825C3E8AF299131178F213DB442EEAFC2FB8E42AC9EDE57419DC458439C9B8E6ED1044D6DC4FB6388FB61825ACBEE22749EC3FB5904D59F437AD0CA585354B76FA76CE0955A9BC25831DDE8EF84E1776DC2FBE3887B57AE3497CED8EEB55ACB33A276E2AE5A4BA7ECD99E5AABA76CE29E0D0BD65C23D35020D9F34476C614146CF3592D3BACAD15FCB6A71E63E672
	77592C8E86DB71B9EEFD822B0313409D8592EF43F55FDDEBF08F6308C76E13AA838E9A7EA6DAE4CDE10C59A65AC339FCE56B3E23E88FE373FC0CB3G7CC75978DE54796AB567ECAEB7B6C6FC73917EBF53783376414E8CD77C27EB7C995FDFE97457AFD07B4FD2690B347DEAB526ED662F06CB0E27367A7C3DB729D924A9CB3E9657E4CA713B0F4D96E5E1676F206B412F23994B675EA4BE1F8377F042D296D19DE846BE4656DC8F573416B0D399C8AD0887A488E4A4488410A81064D6288FA0D5A09DA0C1A021A0
	93C022C0126DE126E2109A108E1001A041A0236D984F4DBC9E369FFE92E0536DE24FFB4A99508329BDA37636F71D91FB6B0740F59448A41069A0A9E7451E760972DEF4F60EC0033C7F3FC15E37AF2F9332F5C4FB671FDAC64AE9E2DC19FB345D77B70CA0B9EDEA0C65814BA77E1CA8DFD95E28438CB430497238230738F8FCAD0AFFD90B6F30D12D3E7D0A65B802FB092B2F12AC17F9289C6784D55C93E40E721A4DDE73FE3E5C0E564A6E3C9E42326773CC9D267E8D1AB972F509AE4C478636D85B6E6D3C7FF92A
	7B1E3EB975743BB02B656B06DE626A2B30BD686CFBB27E660D7AF7ED7037E444B368BD196C3C0F66F62747F31675BDA3787C3C986E4BC126F2AC3B3E3C0738664836D0C601CEB8C8261C9F11E745376DE80A73CDBE2FE43F9C498EA491717E1BE3FC2F38831F2D6FCE53F2FB0CBF231503FF1583396DB85E9B37D9BDF08BF06839ADB060361A388DA2EE23D3355CFE43438C857F61446D4F353DF1B37540ED12973755865CCA095BE46276DB9D373F0867E270175A105B0CDE394D6901DBFE1B1E5BEB865C5EA7EE
	25ED48ED302ECC3F4B4B34927CEB095B49DE4BB43187EE833D384DB360360A388591374DADDAEEA57C39BE847CC792377253BDF1E3714FD3553948B6AD37E960FE922E9F421F0823123F93101CB0BEB911C71744F8F8ECDD1ED240A469773BD89039CEC93D459F2B3A86B8357187B975717F123FD78886FC049353F873115E6218250AA3C297C714D79C7772F792B3810FEF47B89EBB55DB9C6A36DB5C2E0D2332DD9F47233C5F2A855CCAF12CEF6CAD0EC4D59CC13AB806FB4571980FA39470B19447AFADBD45E1
	12C4DF0CF1C46962086B88B335C50BB8C45947E5B29D1B1355D42BA462CD4D44B9E8D2875611C3195EF55A1609F5BA8B4289ECC196430A40DDC63A2F5A3475AB31DC29DF7B1AFBCACF2CAEBD612A364778F5C09CEC8C1B816991F347AF78F742EE4083BBF0BE69604F2C21609ECF586DA769D93E8367E4FFC9B74335748B689BC0BCA001A0A3C04603CC8611DC9876FD9E36D6BEDBE70AFCE64F84794C20B2792C9F9176F4FAGDCA74B36188DF59A19EDF675487176E53CAD6DA5DC20013F60F2A367426A61BCC9
	4CF154E1662B4276B4375017D1CF7EF3FC68AC16C24D5A7E6F1B7C3DC49A64CF368B6B4EE57E8E224DE9EBEBF75A1BC438F53CBC4F327C27F0A76A35F52CF00FD2474674B81FD00F57CCDA41A6932CE35DF07FCF28DFB328DD5E415F478C84BC480575FE83FFBF5686B28EB041614CDE95073AAB61B0510B436DFCBC0984FCAAF1F07077E2ECEDCD1A9BB95C37CF6170E10FE370AC9D8FBD079C371E0358C7D58CF8399BB95C41B9FC414A420DE573CC2D36EC1E592FF0DA5563580B3F33650B53G95A791575CD4
	D60745E18AECFB1C45E9853708F75681962F60F91917E1A0688FA56ECF723AE68789A76E2F1C50F24FBE28F05F5BE33D0A6D05FB049777A753FDF3EF28D4385F4439CF817DE944FD9D675E821265C16E334DDA6EB7FD2AF09FFD22B76EBD5505A20F3EAEC4F2CEE500D7FA10D3A16744562FF5FB30BE0EBE24F0F82ED78EBD3509C1DE9C1E607D479040C30843BD1CC393EBC3446165438A07F53D16E1CF9CA62BB808F165BB29B87EC4F9F02C99F38A471F64CE44DE236FB5451DB8CEFC38428C5701608E81998D
	B291A48AA47E9C7409A06567B0ECD2868B5BF0CE1CCDB6DCBE730C1D0F96A81F3B464ED493E1BBD78440156932B4B1FB183E6CF35AF1E2E2276FF1E53401DF080C451F73769B288BAF388C61DCF05CD1BF4B6AFFF354E85CD05BB26AAB54E3D8CFE314289B9B79FB63G60BE689C36197CEC6F71E69F47DEE7F9C061AEE4EB5B563E4F14BA75D2F6DF661A3E6AD4B84471AFED3D666F23A781BE799C566BE27E1E799510647348694C8EAD27B3C794CE4F6F3812FEB66B3C1E53E17ECEBB9F7052734829093F2B7E
	AB0863BC3635EFD4AB9C7EF168CA461FEE30792106438F78FB70010087D19EBC1361DDFE377377606F010C23F023BD5A3C9AD92370DC59F9C5E375F971BC2870FC1F3FDF0F84FCAA65D5B1FF177EEB1034AE4C2B2547948EAF74B84F0F6D258E65F409F75D8A878FFFA7DF8CF8F997F2384C5F35BF477201B814FC2EF0D8347BCA463781E0F33E0643677CBDFEA060C309433F79FB7C67D93DA78EA7EB958E03732EE41C0AD0F1107752A478F356819371CD6A817E5EFFCA1778A695CD78F7B9BECD050BEFD5799C
	E7EE6982BCA3DE407D96E547599A0F71601E8CB293A479E2182988246AA26E13D8DE4A4E636FF1FFFFCDFBC7256D1C4D215A7AA02F631C6FEF7A44BB7E31A6FC479F7A74C35228DBE6C47BBA0351FAD1746B83646B04A3199C97697BED9DCBDFA878CDG19861270A5BCA30194FF0969EB6467DB30D38A60F1F22747E3E9EA6527D3E2625801118A4C964808B69B1048565BB4363B78A2EF315E663E2538E626926CDBC102C1C23F94E7ED893D11C95E6BF4FE1E04FA6190162D53198C5769321E28FBF90B7AB2B7
	407A17549DE64A6A96F50F3FC3007B37205E3DC3733B078E31F740063F48A451FA5AA5EC9D5901CACB234D417C917F592EA442776DB9AC2B893F6042E40DDD655715043FBBD1512D6EEC5478C597E9F5757EE3DD8BC9D775EBC944F748BCED1A0C42BC32D009DF79B5AC617772BAED7CFA7F15B1CA7CC75DB6175E76AB4B34719B05F9BDDB31418E64537BD7ACD82064CF07436E74307AA57C9EDE36C81BBFBA7F836D5A78D53F62C4769735AE555AD07F3A129C660D4F587CC7772BC7325FFB27791AAF757914E4
	7BE9F7025A8F2A06407FD127412B0F6E92F86BE10DADF6BEA259BA7B39460FE515C4E72AD72B3F9116F74BE767F56339D887930D7C3B497F33D4A37FC0722F4FB0BAE3AF047C5F4DB0529FC57E6F987A0713FF295948BF127C33D69845BF0D7C438C7947FF057E5F4FB472CFA37F5F9A1EA1187F950EF9858D9215432C7AD5F0F55A4E1B69683E3D6DCECF76AAAB54097616D5B9667C9CF3C17EBA6C3B034F2B4F9CAB1E3B456719E365DF09BE3BD63E065C1C493F5530F7EC7C3DB07F0B5A610D61F36837AD6CDE
	447BCA820E99E90FFDDBAA7F7D0CE89CF77571864A71C5FE25FC739EBE7258EC115EA57C9D3D4755E993F16CEED672A26DF8DF73C268B637A83A2529DA3B3F33ABFECF577AE7F74699C537DAE77787ED0A5F6F7C34FB22DD51DD284B077F7AC2714B73B39F7E68D2F4376A78EE6ED47CD61E6E2BDD23FAA26C9DBF27540F273A945B6FDC722F9EBFFFC2DD0F136EDB9903F3AAFDFDCA39A42FB3382454A75F7C52AFAA7C66C4AB7C9A0FDCF95AF3E2945B8363945B83CFDD396D47E6A936CD710AEDD363155BDEBF
	C7317D1F73945B5F35DC396DDFA7A8768AB3D9A21AAD8E37320F31BBD3DB9FB7A5AA611F352DB40EFFA79B90A17A82B9FA19FBED12227BF42A417C104E9C293DA466079DF09DF0C96CAF95FA3FBF65BDBF3C3BDE3F0EFBA8680C146B1B189F8EBB694F736CF8500D38244C8F23AE097961EBB4BF3CF8CCB387903FC6A627AD29535B8FFF77EFF13C379F7E965F4AC2EFBF7CFD3C2D595EFE781BF5F33F7276435F11DB15606D073F6D7668FAEF3FE2392CFE34D8A92BE9A77AD24F8A57E17832FAF6DD3BE92DC13D
	433A90112C5C4FCED1621A5E273ED3092B3C0E4735F92DECEB5DB2456E4D290A5DADFD6A6B953BB755F23BDB506E70B445EEDC06E277181FF69F92F60B516EDA33E27726D50A5D0BFE66794FCEF03BC5E87711CC45EE4C9AD5D95679D916426EC6343BFA2DE27706F50A5D8F7C34DBA16C96225D10750A5DD91B943B75FE66436342EE815A4DE65BE265FE6285BA0FE4265C3FA4DF8EB3E5DF96FB58C51837CF697B12B2702F392C6ECB5E6F71BB3F7EBD0783F483AEABFDC950E551173CC9FDC93DF93E3A9DEA1E
	9916D7A6287D6819A1F41F8627E7063F24EAECE91E991E7FD223D3D7D1A570064F96EA63973FE8C8FAFF3B2431A9BFEB883FFFF6EB7C58AF7FC9789C32DFB34F4773F703AF63BCFAC031D24E73337DAB67D3593C1CDDD84E5F5D2A541F58D245EE6C8E7F6C9E5E416DF6205DB51FA8F6EF5C21584DBD641F5D0B07385DCE34BBE927E23728DC31FB54631F5DE19EEE77A25A7DFC0FE277A77BD479F04C4FFCB8466DB6235DD776ABF6BFB92858BD304BBF3B7770FA3A36916D0AEFE562DEBA2C587DC52EFFF61764
	F13BADE8B7330A59926F59C292147B47D5771B937AF20EC4FFC544F1782A46A15E51D59C77FD16C355F163339C0E9DB7BE2B257E382FB396043F154765569C8D0DF11DBD4E7A3D76737CE899799D633BD52C8F8805B6BF81E49AC8FCG4C6782707D628CBE5E6FECB4FA3738475A424E12F0FBACEC3F24889FD167BB2D2F55FD242415E9B5590ED9E0AA5A68D0FE73ECEA9DFBE757586E71309F96E37B6D847E77BAD6DE1E768E8E4A3F57D3477248E5EFE9750820B27E81DFBF6030B5F3D83CC38EDB1AA0575DE2
	C8DBC7G2EDFFFE6AEFBBF5C275FE42931FB9C36DDFCC6AC56170F616BE378FA23GDC537EC6A20BA7925C53C112EE40B3505FC942F7585900B55C0067EBEDD9086B03065C00B6EC8BD95889601E82A25D98E66A5BFB85FCE6984C3FD5496719B47BB84F043F21939C72EB188D1617A9B7A22F9B93912BA2ECA01D23B71030EFE5E09E0CA1EC3D9943CDA7EC8D4758D814FF93E2EE0E318726A042CE2CC0FB61044D2033736286A07617CC34D7CA585CAC548D9E005F8836736FA41340BDEDG5669F38DEC3D70B1
	4B996FDFDF82304A555EE1F3F9AE88147FA21F5CD6AE563001A07966B0D3BEC88D0883A4GE488488810B1A093C12602445D92E6CA814981A98329823102F45D02BCA2AD6BFA60A1EF22608D4CE591DB12850F482392557599DD2BFD590096FAG0A7CF06399DB13274642DE6648EDA1855B42A060B26E964A3FE518FFB3EF413A782393ACEC512D6086315E0AE1FFDC0F75367BD68C7B17FA96B6945C61A013EF75375E16716FE502630CD464B8936C948D44F8F726A1C747C00CF77EA996B6845C23C1A6D25864
	5348F1AA055DF51A1F17FD9B4CF1C0EAEE7317E3937F1EA66CDF4E40BA68388D4B74DFD53E7B3F184FFA6F7F66FDA656863658EAAEF448676AA4FD464F89EBEEF65B281FDD72D992E1956E2AF6371D2DF491E35A25145E3EDBCD384DE8BD4120DE757467288A3D67385E545B7A365ECE3A9D7ADF7E3D2F0E770949376B3F83B6F15CFC3B7EBB6054C46CC3F340AF70F6DC1371DE123F5F6904DE6C427E69157A2DA75275875E2FCF73CA6F2B9C176E5027776CC2CCEF8278F55C01695DD4230EFF629DA25F274857
	19F0CD9AE4D43E37EA7625E749E10A65EBA5DC9B8C753E2159136811438C142FC361BA52D0EF0866CC71F13AB0138679DAD71927B95FE72A9CCE7A0638A643B57B9BC671FDECB61A4B156A42D6FD43BBDE2B8E6B8277A010E095AE62501EED9EAA7B0F172F91F00D82097B26DE2FC1F3AECA4AB7357165FC53D7DE7CDB1377E5F2389A795A8A57EE10C02F785E4EB44A0B90DDBC238C628D57E111601E8692FF27BE0EC44DF953E9F7EA75726F7436AD7A2E5D556C1E6630E208157D8E70EFE3F6A7F4E796077DA2
	7F7945EA8868EC917E5F2C715D3F5EDD53FB7F7AC00D717CB22446FBFE79E80D717C72499A757CD27E9D019AB6A6354018DDCB61FEC458F142FE42EDB26CF33B5553CA78B84E0B617BEDACC244FF49F91D67D82D0CBD2F420E4B58449AB6C6C012DB5BDD287B079A3EA6586EF088771FF9983B93068C4A0FD7B9C7FB07C5457BCD420ED3D90F6F6718723BFE0EA9094B18DE39C19DB2125ABBF1CC594067A00EBB75FD6CE60EF75D296FE31FBD01FD6CG701BF2A77631E36A7B57471FBC496CD5866A63EF66F8ED
	20BE7EF76AB1FEAB780D8F24750B297D4B6F79E97D4B6F3DDCAFE7F05F723BECB066778DFC6ED5B3D81F5E5BB95EB0D81F5E4527B03D8E701BB098533B6CF47F727B07FCBED7F417BE7EE7B9DEF617BE7E7D27B17ECA709BF99746BFA0C35FDFA6FF8B4619EF794E0FD2592FCA97468A6EAE9DA64E259C33184D956DCE075DE9E33FA6324F6614708C55887EACB98874C23EC5E70470E730D1608E7F9672EC605FE8443DDDF57F77442B7F2EE4DE52550F636505CA1A26286E3FD8F875633E7D2A46A14A34120F9D
	6C8C15C9D44E8D9C1B8A6E1904BDD703EB1A6303900BDA4077C9015BC1588309E8AF0030465DFC9FB838C3887B79EE34B71230F779FEF1696EB0D3725D080524223DEC428E707DBD25602EA46CC95A73D3CBD8B4FF9E9A8E6E51CA388C34B701308FC8F7B2E1FB696C1B22FB68BC84FE264DFEF057921651043AD64242F89C21609ECF58275CDE8438279276FD0ECD87F75AFFA0E62273FF72897BCFBACB271C30A42E9B846E61049D6758E8F0C790F6A725A30A30798D8C0B9B8279BC84B1D78346E1A66C9CDF77
	5F816E8104BD4B31A1609EC558799598C7B8E1F1F4B6C9A4E1CB52A8ED77A2D64B733E9C5CB504BDC36551C05817BC5E11609EC75851CC64B20930A47E4EE5AA38E792561905799CFF9FE2E33310CB9AE1EF59B05EFC42B670B882409DC45839CC4C6761042DA1FB2389D34EC01A2004636FB44C5F8EB395FF9B311DBC2FAA415D70ED6CD7B756ABFDCD296A7E3993D73F5FF9699A4451F4D2C913C3F57FDE7D550FFB41492B5F2F1E64F55D8165B9004A79EEDE2F0700FB8415732D271434872A6E171D3A7A79D0
	F88D6298FDDAC953F32A7BC3272FFE5CADD7B58E793CAA5E573333EAC6D1B93F43B1F6D6CDB8E162F715A601FBAAE1770B3E191DFFB5144E43B903FDC6B2E1177959ECD6F0F78D45F5AD6F263067B68F7B84403EF3C9386FE59E6FDF86C138A194766644D998D642EFE73730C7A9D927130F6D63A17CC452B9DF235DC371E89D8BAF3EE7C75478332FCA3F2FB76E7EB093FB1709FB9C96CB26C4D6DE5AFD4AAB78BC0279A75D0F7B89FE4EB1B338F36E273DBA3B35BC43CFA8BCDF6AF50F432C9EF856C39CCBB4BC
	67AE746639F2A172ECA51E3F66F316AEF08FA01E1613DA1E6F57ABBCFF5663DA23D8C93B97C34FB374FE71EDC1611912614DB3AF83F90EA11E13B8B6815C9177633A7864DE77521BD479167000F68F3A79817DBE77F6D14781AFFEG736205C6EDDE241FD272E2F313BFFBE374F9517A0058932264459F8C72A20A7242C31C2C3A7D1487F9DFA5FFDBB63377B82D6DAE7BC5E8EA9687DB6C0DEF38318DCDB6633B7D818FE07E667339DCA83847BC0079BB3647F384D8FC73FAC8DF548362DEC95FDA33F77A361BB1
	FDB3A9FD9D66451AB46CF458DB1C6C6B292CF3BB7D6EDB420348FF94470A41DD7EA01DD15A204DA7E703D2F637B574163679BD244D83F14C53246D9B695EE98BC947348590275F25771C3628F4CCDBA025AD184FD9C703FB7C03D8B629BD6ED91DA573473ABF7DC1ED5DCF8856577D6DFC8E1082F8D6B0F2ED57758303ADCA7ECD6C359FD01FD5224F3F1AE0B127D0726FAE037CFB14722FA1987362927D5EDE8771DC1B2565995A48F80A708FE4E1DD9FCAB67E9F474241BDA99873B32E57739F9676101E78E1E1
	262D1A74149B1CE7F1024E29C89E06DC9E2474E491F618732B82F77D303E1F6931D0D55E0306E94BBBF818D25E025FA74B0C476423FCCC9E8161C78D437C2DBD61BDA67F3EC92234FA520CED8D62F5EA8A5819C636C61C7436753ED5A92F093C3FFB136547C33816AADD358E7FACEF67EE1B43566431D9054E0D540794BD04F978CB0E15033B6AA14C43BDE72EE40FF540C3224EAA7B646FB962DD460F9F417AB60878DFE8D578B7A676E1DDF111322E78C555FA7F1A9A7F56A4FF205A8F30A9D13B56595A21789D
	5B6D1F5DDBD57B810A97EA6DEED36DED58FE52BF3B27D4E95D1B21357B34C3717B5B49ABDF9B7EE71EB762FE2BAAAF1EE8740FF33DAAAFCCE664AC5C7FB2B3DB2A25A339556CBFAE7BF1676E5EA32FC59436C63995DB8F7849638D0F22FBD447E318B923E79E15FB765648F6F61DD76CC4B7784741265AF37163F4AD87530A3EF33827DB31B33DCFEBEFFBAE6B9FFD251435D9D2ECD77AD9BFF72B76EC0C51256F6E4C3E24CF04FDAA4B3FFA71E02C926FABFE6ECB88D36D85F1E5EAB97F30CF1C051D95A6D5BD7F
	9F587731B3DEA9137B672A7A29937E750FB3D4FBBCEE6BCBF9F2DD917E2F99FCDD25FB2D6C3E572C6DF36AD4EB61D71D696B1ACD217B15D9519DF7C43D77E429082B2194C20CF8CB1A6511228BBC12C96C34AC01BB3ED7413C096EB6535D963AAB263B229E6FB652DDA15DC1EC71388E5AA34531A54FF0E12B1BBDD2ECDDC595B85852EAF0D49F5D857F776DB96CF6C973B569FEEE5826B742DFBA660E15E6D7C84B5851C9023F7D224D4AFECD6C184D6506A70E3D521C8E760B905500D7C8F1EEFE196576DCF058
	AA256466A336AFBAEDEE9847F76277EC37C7DAD249E24AE36B867376DB5C2D7C202FED15D21C5352E673C80B04374362EC49939F3737F5317EBBFA27E85A3CAE815F451CAF3312CBD6967FB8F1754A8313C745CAB1FB25390EF60BF52F2549536E2A1066F8DADDB6F7EB3B435A5531230C9B0ABF0FAB67E241DCAAA51FA5B617BDD6916933DD778F1ABFE57E5E98F810F6C9F9BCA41B0D66D2886B6ED60B8B223239AAC0AC90E596795D30423366577B165647C851F2A23F10AEC9CB3ABABC404AE5F13A1B5BDDED
	40402CE300DEE4A877DB3F483F7B51776B38A1C555A3E508AC83553C96DBFBDB5E4E66E63B53C686A07F40FCBA19E7E1F2F5E196F58DDEF260458F9B213C4B2558367CFC7E3F007FAFE47F8BB8D2401102C24844A82947BF3DFF171B25FA19C7D4926013487930E24E5D8BA5657963DB3FF868CF25D1D3A1F5FB25D967583A87486CA4A554214E36C61B6B1691F7274F8B0A3C0315C5872B92E8F7F633254D6E38GB7653C45F6B1FCDD974544D2DE41BF6FC71E5BD8927B5AF7E2E324388AE936D86EG15172DD9
	004A4B17B4D4C8311E768ED16F64E63E1CD794E6F431D7EDE468D26FEA4560D46E194E7F1B7D4EB426350A6BE63188594DDAED8A8BC4462E57B10D397E18969BB30D3E7E186E785AB05D7B35E17A2916A9323D8E195698B33D8E5B7E89E32657E15BEF7C5A143E7DEB4334C3E1BAD756725D7623FDB00D3B4ACCE9F496AB72C430B2D4BB2FCD42BC5924BA8902F042354B6CB2434C3EC1E10A5F0B787B4F6B0F69C0052924E23A6C7AE3FA273629A1D3697AE3FA0F4294CF90E7CCE32EBF2677EB1932F8632FCF26
	A15A52C72657E169BF26EDD14874BAECD15F5776D24874BA6C25FE246D795961A6330853F545F40C367499D336E275BA9C23FE2EEDD10CE95A7519277F6D1D276CD55CF5D8CFDF5456D3BAEB717AE39A214DD37E0B5552F5D9CFDF5356D35C4BA8910A3D815B1191C7A8F2E4E80C86E5E1F9AF6211664A275D591DAD9EE9BEBB0D42ACA3A59EA9E15F1E43EAE77551DDAA67FC76D2D46DDDD7D12576E6AFD055EE76DED5651E032FDC61FE1EF8914BFF7694C24A01509D47E8290A2501E75C82691A4D529B744542
	DCBC44C57EFFC657F5758C21E37721D2FDE2E5867CA96DBA669CBD5B183371137AF542F93EB1676B6FC9B8BA591FE7766BA4F7D37D495D6B04732A2FA167F58A6718DEB97F2F5662FC6DG7E352845DB3E06B5E27B5726C66C693DC6B4F01F6BE76E90DD59F5BD33BB22E6A7387CEFCF0723EB0DA76E31622C52F51755E715CE3FB94567193BC1BF957BAA077FD4B92BD4BE93052F631F8C38B48E4F6248BF43FE4F4A5759A855ED960743E3F11C5D693432F3D2F6DD705814F314DEBF436C3BB10C6CA91FD1F406
	71BE2352797FD0CB878899C5A62864B8GG4065GGD0CB818294G94G88G88GDBF9DEAD99C5A62864B8GG4065GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG9EB9GGGG
**end of data**/
}


/**
 * Return the JCheckBoxFEED property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxFEED() {
	if (ivjJCheckBoxFEED == null) {
		try {
			ivjJCheckBoxFEED = new javax.swing.JCheckBox();
			ivjJCheckBoxFEED.setName("JCheckBoxFEED");
			ivjJCheckBoxFEED.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxFEED.setMnemonic('f');
			ivjJCheckBoxFEED.setText("FEED");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxFEED;
}



/**
 * Return the JCheckBoxGEO property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxGEO() {
	if (ivjJCheckBoxGEO == null) {
		try {
			ivjJCheckBoxGEO = new javax.swing.JCheckBox();
			ivjJCheckBoxGEO.setName("JCheckBoxGEO");
			ivjJCheckBoxGEO.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxGEO.setMnemonic('g');
			ivjJCheckBoxGEO.setText("GEO");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxGEO;
}



/**
 * Return the JCheckBoxPROG property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxPROG() {
	if (ivjJCheckBoxPROG == null) {
		try {
			ivjJCheckBoxPROG = new javax.swing.JCheckBox();
			ivjJCheckBoxPROG.setName("JCheckBoxPROG");
			ivjJCheckBoxPROG.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxPROG.setMnemonic('p');
			ivjJCheckBoxPROG.setText("PROG");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxPROG;
}



/**
 * Return the JCheckBoxRelay1 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay1() {
	if (ivjJCheckBoxRelay1 == null) {
		try {
			ivjJCheckBoxRelay1 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay1.setName("JCheckBoxRelay1");
			ivjJCheckBoxRelay1.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRelay1.setMnemonic('1');
			ivjJCheckBoxRelay1.setText("Relay 1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay1;
}



/**
 * Return the JCheckBoxRelay2 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay2() {
	if (ivjJCheckBoxRelay2 == null) {
		try {
			ivjJCheckBoxRelay2 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay2.setName("JCheckBoxRelay2");
			ivjJCheckBoxRelay2.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRelay2.setMnemonic('2');
			ivjJCheckBoxRelay2.setText("Relay 2");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay2;
}



/**
 * Return the JCheckBoxRelay3 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay3() {
	if (ivjJCheckBoxRelay3 == null) {
		try {
			ivjJCheckBoxRelay3 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay3.setName("JCheckBoxRelay3");
			ivjJCheckBoxRelay3.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRelay3.setMnemonic('3');
			ivjJCheckBoxRelay3.setText("Relay 3");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay3;
}



/**
 * Return the JCheckBoxRelay4 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay4() {
	if (ivjJCheckBoxRelay4 == null) {
		try {
			ivjJCheckBoxRelay4 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay4.setName("JCheckBoxRelay4");
			ivjJCheckBoxRelay4.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRelay4.setMnemonic('4');
			ivjJCheckBoxRelay4.setText("Relay 4");
			ivjJCheckBoxRelay4.setActionCommand("Relay 4");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay4;
}



/**
 * Return the JCheckBoxRelay5 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay5() {
	if (ivjJCheckBoxRelay5 == null) {
		try {
			ivjJCheckBoxRelay5 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay5.setName("JCheckBoxRelay5");
			ivjJCheckBoxRelay5.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRelay5.setMnemonic('5');
			ivjJCheckBoxRelay5.setText("Relay 5");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay5;
}



/**
 * Return the JCheckBoxRelay6 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay6() {
	if (ivjJCheckBoxRelay6 == null) {
		try {
			ivjJCheckBoxRelay6 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay6.setName("JCheckBoxRelay6");
			ivjJCheckBoxRelay6.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRelay6.setMnemonic('6');
			ivjJCheckBoxRelay6.setText("Relay 6");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay6;
}



/**
 * Return the JCheckBoxRelay7 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay7() {
	if (ivjJCheckBoxRelay7 == null) {
		try {
			ivjJCheckBoxRelay7 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay7.setName("JCheckBoxRelay7");
			ivjJCheckBoxRelay7.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRelay7.setMnemonic('7');
			ivjJCheckBoxRelay7.setText("Relay 7");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay7;
}



/**
 * Return the JCheckBoxRelay8 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay8() {
	if (ivjJCheckBoxRelay8 == null) {
		try {
			ivjJCheckBoxRelay8 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay8.setName("JCheckBoxRelay8");
			ivjJCheckBoxRelay8.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxRelay8.setMnemonic('8');
			ivjJCheckBoxRelay8.setText("Relay 8");
			ivjJCheckBoxRelay8.setActionCommand("Relay 4");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay8;
}



/**
 * Return the JCheckBoxIndividual property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSerial() {
	if (ivjJCheckBoxSerial == null) {
		try {
			ivjJCheckBoxSerial = new javax.swing.JCheckBox();
			ivjJCheckBoxSerial.setName("JCheckBoxSerial");
			ivjJCheckBoxSerial.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxSerial.setText("Serial:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSerial;
}


/**
 * Return the JCheckBoxSPID property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSPID() {
	if (ivjJCheckBoxSPID == null) {
		try {
			ivjJCheckBoxSPID = new javax.swing.JCheckBox();
			ivjJCheckBoxSPID.setName("JCheckBoxSPID");
			ivjJCheckBoxSPID.setMnemonic('s');
			ivjJCheckBoxSPID.setText("SPID");
			ivjJCheckBoxSPID.setSelected(true);
			ivjJCheckBoxSPID.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxSPID.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSPID;
}



/**
 * Return the JCheckBoxSPLINTER property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSPLINTER() {
	if (ivjJCheckBoxSPLINTER == null) {
		try {
			ivjJCheckBoxSPLINTER = new javax.swing.JCheckBox();
			ivjJCheckBoxSPLINTER.setName("JCheckBoxSPLINTER");
			ivjJCheckBoxSPLINTER.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxSPLINTER.setMnemonic('r');
			ivjJCheckBoxSPLINTER.setText("SPLINTER");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSPLINTER;
}



/**
 * Return the JCheckBoxSUB property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSUB() {
	if (ivjJCheckBoxSUB == null) {
		try {
			ivjJCheckBoxSUB = new javax.swing.JCheckBox();
			ivjJCheckBoxSUB.setName("JCheckBoxSUB");
			ivjJCheckBoxSUB.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxSUB.setMnemonic('b');
			ivjJCheckBoxSUB.setText("SUB");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSUB;
}



/**
 * Return the JCheckBoxUSER property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxUSER() {
	if (ivjJCheckBoxUSER == null) {
		try {
			ivjJCheckBoxUSER = new javax.swing.JCheckBox();
			ivjJCheckBoxUSER.setName("JCheckBoxUSER");
			ivjJCheckBoxUSER.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxUSER.setMnemonic('u');
			ivjJCheckBoxUSER.setText("USER");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxUSER;
}



/**
 * Return the JCheckBoxZIP property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxZIP() {
	if (ivjJCheckBoxZIP == null) {
		try {
			ivjJCheckBoxZIP = new javax.swing.JCheckBox();
			ivjJCheckBoxZIP.setName("JCheckBoxZIP");
			ivjJCheckBoxZIP.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxZIP.setMnemonic('z');
			ivjJCheckBoxZIP.setText("ZIP");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxZIP;
}



/**
 * Return the JComboBoxFEED property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxFEED() {
	if (ivjJComboBoxFEED == null) {
		try {
			ivjJComboBoxFEED = new javax.swing.JComboBox();
			ivjJComboBoxFEED.setName("JComboBoxFEED");
			ivjJComboBoxFEED.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxFEED.setEditable(true);
			// user code begin {1}

			ivjJComboBoxFEED.addItem( STRING_NEW );
			ivjJComboBoxFEED.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxFEED;
}


/**
 * Return the JComboBoxGEO property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGEO() {
	if (ivjJComboBoxGEO == null) {
		try {
			ivjJComboBoxGEO = new javax.swing.JComboBox();
			ivjJComboBoxGEO.setName("JComboBoxGEO");
			ivjJComboBoxGEO.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxGEO.setEditable(true);
			// user code begin {1}

			ivjJComboBoxGEO.addItem( STRING_NEW );
			ivjJComboBoxGEO.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGEO;
}


/**
 * Return the JComboBoxPROG property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxPROG() {
	if (ivjJComboBoxPROG == null) {
		try {
			ivjJComboBoxPROG = new javax.swing.JComboBox();
			ivjJComboBoxPROG.setName("JComboBoxPROG");
			ivjJComboBoxPROG.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxPROG.setEditable(true);
			// user code begin {1}

			ivjJComboBoxPROG.addItem( STRING_NEW );
			ivjJComboBoxPROG.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxPROG;
}


/**
 * Return the JComboBoxSPID property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSPID() {
	if (ivjJComboBoxSPID == null) {
		try {
			ivjJComboBoxSPID = new javax.swing.JComboBox();
			ivjJComboBoxSPID.setName("JComboBoxSPID");
			ivjJComboBoxSPID.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxSPID.setEditable(true);
			// user code begin {1}

			ivjJComboBoxSPID.addItem( STRING_NEW );
			//ivjJComboBoxSPID.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSPID;
}


/**
 * Return the JComboBoxSUB property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSUB() {
	if (ivjJComboBoxSUB == null) {
		try {
			ivjJComboBoxSUB = new javax.swing.JComboBox();
			ivjJComboBoxSUB.setName("JComboBoxSUB");
			ivjJComboBoxSUB.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxSUB.setEditable(true);
			// user code begin {1}

			ivjJComboBoxSUB.addItem( STRING_NEW );
			ivjJComboBoxSUB.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSUB;
}


/**
 * Return the JLabelFeedAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelFeedAddress() {
	if (ivjJLabelFeedAddress == null) {
		try {
			ivjJLabelFeedAddress = new javax.swing.JLabel();
			ivjJLabelFeedAddress.setName("JLabelFeedAddress");
			ivjJLabelFeedAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelFeedAddress.setText("FEED Address:");
			ivjJLabelFeedAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelFeedAddress;
}


/**
 * Return the JLabelGEOAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGEOAddress() {
	if (ivjJLabelGEOAddress == null) {
		try {
			ivjJLabelGEOAddress = new javax.swing.JLabel();
			ivjJLabelGEOAddress.setName("JLabelGEOAddress");
			ivjJLabelGEOAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelGEOAddress.setText("GEO Address:");
			ivjJLabelGEOAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGEOAddress;
}


/**
 * Return the JLabelPROGAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPROGAddress() {
	if (ivjJLabelPROGAddress == null) {
		try {
			ivjJLabelPROGAddress = new javax.swing.JLabel();
			ivjJLabelPROGAddress.setName("JLabelPROGAddress");
			ivjJLabelPROGAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelPROGAddress.setText("PROG Address:");
			ivjJLabelPROGAddress.setEnabled(true);
			ivjJLabelPROGAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPROGAddress;
}


/**
 * Return the JLabelSPID property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSPID() {
	if (ivjJLabelSPID == null) {
		try {
			ivjJLabelSPID = new javax.swing.JLabel();
			ivjJLabelSPID.setName("JLabelSPID");
			ivjJLabelSPID.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSPID.setText("SPID Address:");
			ivjJLabelSPID.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSPID;
}


/**
 * Return the JLabelSplinter property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSplinter() {
	if (ivjJLabelSplinter == null) {
		try {
			ivjJLabelSplinter = new javax.swing.JLabel();
			ivjJLabelSplinter.setName("JLabelSplinter");
			ivjJLabelSplinter.setText("SPLINTER:");
			ivjJLabelSplinter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjJLabelSplinter.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSplinter.setEnabled(true);
			ivjJLabelSplinter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSplinter;
}


/**
 * Return the JLabelSubAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSubAddress() {
	if (ivjJLabelSubAddress == null) {
		try {
			ivjJLabelSubAddress = new javax.swing.JLabel();
			ivjJLabelSubAddress.setName("JLabelSubAddress");
			ivjJLabelSubAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSubAddress.setText("SUB Address:");
			ivjJLabelSubAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSubAddress;
}


/**
 * Return the JLabelUserAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelUserAddress() {
	if (ivjJLabelUserAddress == null) {
		try {
			ivjJLabelUserAddress = new javax.swing.JLabel();
			ivjJLabelUserAddress.setName("JLabelUserAddress");
			ivjJLabelUserAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelUserAddress.setText("USER Address:");
			ivjJLabelUserAddress.setEnabled(true);
			ivjJLabelUserAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelUserAddress;
}


/**
 * Return the JLabelZipAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelZipAddress() {
	if (ivjJLabelZipAddress == null) {
		try {
			ivjJLabelZipAddress = new javax.swing.JLabel();
			ivjJLabelZipAddress.setName("JLabelZipAddress");
			ivjJLabelZipAddress.setText("ZIP Address:");
			ivjJLabelZipAddress.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjJLabelZipAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelZipAddress.setEnabled(true);
			ivjJLabelZipAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelZipAddress;
}


/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelAddress() {
	if (ivjJPanelAddress == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Addressing");
			ivjJPanelAddress = new javax.swing.JPanel();
			ivjJPanelAddress.setName("JPanelAddress");
			ivjJPanelAddress.setBorder(ivjLocalBorder);
			ivjJPanelAddress.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJTextFieldSPIDAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSPIDAddress.gridx = 2; constraintsJTextFieldSPIDAddress.gridy = 1;
			constraintsJTextFieldSPIDAddress.gridwidth = 2;
			constraintsJTextFieldSPIDAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSPIDAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSPIDAddress.weightx = 1.0;
			constraintsJTextFieldSPIDAddress.ipadx = 87;
			constraintsJTextFieldSPIDAddress.ipady = -1;
			constraintsJTextFieldSPIDAddress.insets = new java.awt.Insets(3, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldSPIDAddress(), constraintsJTextFieldSPIDAddress);

			java.awt.GridBagConstraints constraintsJLabelSPID = new java.awt.GridBagConstraints();
			constraintsJLabelSPID.gridx = 1; constraintsJLabelSPID.gridy = 1;
			constraintsJLabelSPID.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSPID.ipadx = 9;
			constraintsJLabelSPID.ipady = 4;
			constraintsJLabelSPID.insets = new java.awt.Insets(3, 11, 3, 1);
			getJPanelAddress().add(getJLabelSPID(), constraintsJLabelSPID);

			java.awt.GridBagConstraints constraintsJLabelGEOAddress = new java.awt.GridBagConstraints();
			constraintsJLabelGEOAddress.gridx = 1; constraintsJLabelGEOAddress.gridy = 2;
			constraintsJLabelGEOAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelGEOAddress.ipadx = 10;
			constraintsJLabelGEOAddress.ipady = 4;
			constraintsJLabelGEOAddress.insets = new java.awt.Insets(2, 11, 3, 1);
			getJPanelAddress().add(getJLabelGEOAddress(), constraintsJLabelGEOAddress);

			java.awt.GridBagConstraints constraintsJTextFieldGeoAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldGeoAddress.gridx = 2; constraintsJTextFieldGeoAddress.gridy = 2;
			constraintsJTextFieldGeoAddress.gridwidth = 2;
			constraintsJTextFieldGeoAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldGeoAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldGeoAddress.weightx = 1.0;
			constraintsJTextFieldGeoAddress.ipadx = 87;
			constraintsJTextFieldGeoAddress.ipady = -1;
			constraintsJTextFieldGeoAddress.insets = new java.awt.Insets(2, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldGeoAddress(), constraintsJTextFieldGeoAddress);

			java.awt.GridBagConstraints constraintsJLabelSubAddress = new java.awt.GridBagConstraints();
			constraintsJLabelSubAddress.gridx = 1; constraintsJLabelSubAddress.gridy = 3;
			constraintsJLabelSubAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSubAddress.ipadx = 12;
			constraintsJLabelSubAddress.ipady = 4;
			constraintsJLabelSubAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelSubAddress(), constraintsJLabelSubAddress);

			java.awt.GridBagConstraints constraintsJTextFieldSubAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSubAddress.gridx = 2; constraintsJTextFieldSubAddress.gridy = 3;
			constraintsJTextFieldSubAddress.gridwidth = 2;
			constraintsJTextFieldSubAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSubAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSubAddress.weightx = 1.0;
			constraintsJTextFieldSubAddress.ipadx = 87;
			constraintsJTextFieldSubAddress.ipady = -1;
			constraintsJTextFieldSubAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldSubAddress(), constraintsJTextFieldSubAddress);

			java.awt.GridBagConstraints constraintsJLabelFeedAddress = new java.awt.GridBagConstraints();
			constraintsJLabelFeedAddress.gridx = 1; constraintsJLabelFeedAddress.gridy = 4;
			constraintsJLabelFeedAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelFeedAddress.ipadx = 6;
			constraintsJLabelFeedAddress.ipady = 4;
			constraintsJLabelFeedAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelFeedAddress(), constraintsJLabelFeedAddress);

			java.awt.GridBagConstraints constraintsJTextFieldFeedAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldFeedAddress.gridx = 2; constraintsJTextFieldFeedAddress.gridy = 4;
			constraintsJTextFieldFeedAddress.gridwidth = 2;
			constraintsJTextFieldFeedAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldFeedAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldFeedAddress.weightx = 1.0;
			constraintsJTextFieldFeedAddress.ipadx = 87;
			constraintsJTextFieldFeedAddress.ipady = -1;
			constraintsJTextFieldFeedAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldFeedAddress(), constraintsJTextFieldFeedAddress);

			java.awt.GridBagConstraints constraintsJLabelZipAddress = new java.awt.GridBagConstraints();
			constraintsJLabelZipAddress.gridx = 1; constraintsJLabelZipAddress.gridy = 5;
			constraintsJLabelZipAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelZipAddress.ipadx = 17;
			constraintsJLabelZipAddress.ipady = 4;
			constraintsJLabelZipAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelZipAddress(), constraintsJLabelZipAddress);

			java.awt.GridBagConstraints constraintsJTextFieldZipAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldZipAddress.gridx = 2; constraintsJTextFieldZipAddress.gridy = 5;
			constraintsJTextFieldZipAddress.gridwidth = 2;
			constraintsJTextFieldZipAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldZipAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldZipAddress.weightx = 1.0;
			constraintsJTextFieldZipAddress.ipadx = 87;
			constraintsJTextFieldZipAddress.ipady = -1;
			constraintsJTextFieldZipAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldZipAddress(), constraintsJTextFieldZipAddress);

			java.awt.GridBagConstraints constraintsJLabelUserAddress = new java.awt.GridBagConstraints();
			constraintsJLabelUserAddress.gridx = 1; constraintsJLabelUserAddress.gridy = 6;
			constraintsJLabelUserAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelUserAddress.ipadx = 5;
			constraintsJLabelUserAddress.ipady = 4;
			constraintsJLabelUserAddress.insets = new java.awt.Insets(1, 11, 2, 1);
			getJPanelAddress().add(getJLabelUserAddress(), constraintsJLabelUserAddress);

			java.awt.GridBagConstraints constraintsJTextFieldUserAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldUserAddress.gridx = 2; constraintsJTextFieldUserAddress.gridy = 6;
			constraintsJTextFieldUserAddress.gridwidth = 2;
			constraintsJTextFieldUserAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldUserAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldUserAddress.weightx = 1.0;
			constraintsJTextFieldUserAddress.ipadx = 87;
			constraintsJTextFieldUserAddress.ipady = -1;
			constraintsJTextFieldUserAddress.insets = new java.awt.Insets(1, 1, 0, 3);
			getJPanelAddress().add(getJTextFieldUserAddress(), constraintsJTextFieldUserAddress);

			java.awt.GridBagConstraints constraintsJLabelPROGAddress = new java.awt.GridBagConstraints();
			constraintsJLabelPROGAddress.gridx = 1; constraintsJLabelPROGAddress.gridy = 7;
			constraintsJLabelPROGAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelPROGAddress.ipadx = 3;
			constraintsJLabelPROGAddress.ipady = 4;
			constraintsJLabelPROGAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelPROGAddress(), constraintsJLabelPROGAddress);

			java.awt.GridBagConstraints constraintsJLabelSplinter = new java.awt.GridBagConstraints();
			constraintsJLabelSplinter.gridx = 1; constraintsJLabelSplinter.gridy = 8;
			constraintsJLabelSplinter.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSplinter.ipadx = 28;
			constraintsJLabelSplinter.ipady = 4;
			constraintsJLabelSplinter.insets = new java.awt.Insets(1, 11, 2, 1);
			getJPanelAddress().add(getJLabelSplinter(), constraintsJLabelSplinter);

			java.awt.GridBagConstraints constraintsJTextFieldSplinter = new java.awt.GridBagConstraints();
			constraintsJTextFieldSplinter.gridx = 2; constraintsJTextFieldSplinter.gridy = 8;
			constraintsJTextFieldSplinter.gridwidth = 2;
			constraintsJTextFieldSplinter.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSplinter.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSplinter.weightx = 1.0;
			constraintsJTextFieldSplinter.ipadx = 87;
			constraintsJTextFieldSplinter.ipady = -1;
			constraintsJTextFieldSplinter.insets = new java.awt.Insets(1, 1, 0, 3);
			getJPanelAddress().add(getJTextFieldSplinter(), constraintsJTextFieldSplinter);

			java.awt.GridBagConstraints constraintsJTextFieldProgAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldProgAddress.gridx = 2; constraintsJTextFieldProgAddress.gridy = 7;
			constraintsJTextFieldProgAddress.gridwidth = 2;
			constraintsJTextFieldProgAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldProgAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldProgAddress.weightx = 1.0;
			constraintsJTextFieldProgAddress.ipadx = 87;
			constraintsJTextFieldProgAddress.ipady = -1;
			constraintsJTextFieldProgAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldProgAddress(), constraintsJTextFieldProgAddress);

			java.awt.GridBagConstraints constraintsJTextFieldSerialAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSerialAddress.gridx = 3; constraintsJTextFieldSerialAddress.gridy = 9;
			constraintsJTextFieldSerialAddress.gridwidth = 2;
			constraintsJTextFieldSerialAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSerialAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSerialAddress.weightx = 1.0;
			constraintsJTextFieldSerialAddress.ipadx = 182;
			constraintsJTextFieldSerialAddress.ipady = -1;
			constraintsJTextFieldSerialAddress.insets = new java.awt.Insets(1, 0, 10, 26);
			getJPanelAddress().add(getJTextFieldSerialAddress(), constraintsJTextFieldSerialAddress);

			java.awt.GridBagConstraints constraintsJCheckBoxSerial = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSerial.gridx = 1; constraintsJCheckBoxSerial.gridy = 9;
			constraintsJCheckBoxSerial.gridwidth = 2;
			constraintsJCheckBoxSerial.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSerial.ipadx = 22;
			constraintsJCheckBoxSerial.ipady = -4;
			constraintsJCheckBoxSerial.insets = new java.awt.Insets(1, 11, 10, 0);
			getJPanelAddress().add(getJCheckBoxSerial(), constraintsJCheckBoxSerial);

			java.awt.GridBagConstraints constraintsJComboBoxSPID = new java.awt.GridBagConstraints();
			constraintsJComboBoxSPID.gridx = 4; constraintsJComboBoxSPID.gridy = 1;
			constraintsJComboBoxSPID.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxSPID.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxSPID.weightx = 1.0;
			constraintsJComboBoxSPID.ipadx = 12;
			constraintsJComboBoxSPID.insets = new java.awt.Insets(3, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxSPID(), constraintsJComboBoxSPID);

			java.awt.GridBagConstraints constraintsJComboBoxGEO = new java.awt.GridBagConstraints();
			constraintsJComboBoxGEO.gridx = 4; constraintsJComboBoxGEO.gridy = 2;
			constraintsJComboBoxGEO.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxGEO.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxGEO.weightx = 1.0;
			constraintsJComboBoxGEO.ipadx = 12;
			constraintsJComboBoxGEO.insets = new java.awt.Insets(2, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxGEO(), constraintsJComboBoxGEO);

			java.awt.GridBagConstraints constraintsJComboBoxSUB = new java.awt.GridBagConstraints();
			constraintsJComboBoxSUB.gridx = 4; constraintsJComboBoxSUB.gridy = 3;
			constraintsJComboBoxSUB.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxSUB.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxSUB.weightx = 1.0;
			constraintsJComboBoxSUB.ipadx = 12;
			constraintsJComboBoxSUB.insets = new java.awt.Insets(1, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxSUB(), constraintsJComboBoxSUB);

			java.awt.GridBagConstraints constraintsJComboBoxFEED = new java.awt.GridBagConstraints();
			constraintsJComboBoxFEED.gridx = 4; constraintsJComboBoxFEED.gridy = 4;
			constraintsJComboBoxFEED.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxFEED.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxFEED.weightx = 1.0;
			constraintsJComboBoxFEED.ipadx = 12;
			constraintsJComboBoxFEED.insets = new java.awt.Insets(1, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxFEED(), constraintsJComboBoxFEED);

			java.awt.GridBagConstraints constraintsJComboBoxPROG = new java.awt.GridBagConstraints();
			constraintsJComboBoxPROG.gridx = 4; constraintsJComboBoxPROG.gridy = 7;
			constraintsJComboBoxPROG.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxPROG.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxPROG.weightx = 1.0;
			constraintsJComboBoxPROG.ipadx = 12;
			constraintsJComboBoxPROG.insets = new java.awt.Insets(1, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxPROG(), constraintsJComboBoxPROG);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelAddress;
}


/**
 * Return the JPanelAddressTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelAddressTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelAddressTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelAddressTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelAddressTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelAddressTitleBorder.setTitle("Addressing");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelAddressTitleBorder;
}


/**
 * Return the JPanelAddressUsage property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelAddressUsage() {
	if (ivjJPanelAddressUsage == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Address Usage");
			ivjJPanelAddressUsage = new javax.swing.JPanel();
			ivjJPanelAddressUsage.setName("JPanelAddressUsage");
			ivjJPanelAddressUsage.setBorder(ivjLocalBorder1);
			ivjJPanelAddressUsage.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxSPID = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSPID.gridx = 1; constraintsJCheckBoxSPID.gridy = 1;
			constraintsJCheckBoxSPID.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSPID.ipadx = 3;
			constraintsJCheckBoxSPID.ipady = -4;
			constraintsJCheckBoxSPID.insets = new java.awt.Insets(3, 12, 0, 4);
			getJPanelAddressUsage().add(getJCheckBoxSPID(), constraintsJCheckBoxSPID);

			java.awt.GridBagConstraints constraintsJCheckBoxGEO = new java.awt.GridBagConstraints();
			constraintsJCheckBoxGEO.gridx = 1; constraintsJCheckBoxGEO.gridy = 2;
			constraintsJCheckBoxGEO.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxGEO.ipadx = 6;
			constraintsJCheckBoxGEO.ipady = -4;
			constraintsJCheckBoxGEO.insets = new java.awt.Insets(0, 12, 1, 3);
			getJPanelAddressUsage().add(getJCheckBoxGEO(), constraintsJCheckBoxGEO);

			java.awt.GridBagConstraints constraintsJCheckBoxSUB = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSUB.gridx = 1; constraintsJCheckBoxSUB.gridy = 3;
			constraintsJCheckBoxSUB.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSUB.ipadx = 6;
			constraintsJCheckBoxSUB.ipady = -4;
			constraintsJCheckBoxSUB.insets = new java.awt.Insets(1, 12, 0, 4);
			getJPanelAddressUsage().add(getJCheckBoxSUB(), constraintsJCheckBoxSUB);

			java.awt.GridBagConstraints constraintsJCheckBoxFEED = new java.awt.GridBagConstraints();
			constraintsJCheckBoxFEED.gridx = 1; constraintsJCheckBoxFEED.gridy = 4;
			constraintsJCheckBoxFEED.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxFEED.ipadx = 2;
			constraintsJCheckBoxFEED.ipady = -4;
			constraintsJCheckBoxFEED.insets = new java.awt.Insets(0, 12, 10, 1);
			getJPanelAddressUsage().add(getJCheckBoxFEED(), constraintsJCheckBoxFEED);

			java.awt.GridBagConstraints constraintsJCheckBoxZIP = new java.awt.GridBagConstraints();
			constraintsJCheckBoxZIP.gridx = 2; constraintsJCheckBoxZIP.gridy = 1;
			constraintsJCheckBoxZIP.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxZIP.ipadx = 12;
			constraintsJCheckBoxZIP.ipady = -4;
			constraintsJCheckBoxZIP.insets = new java.awt.Insets(3, 2, 0, 31);
			getJPanelAddressUsage().add(getJCheckBoxZIP(), constraintsJCheckBoxZIP);

			java.awt.GridBagConstraints constraintsJCheckBoxSPLINTER = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSPLINTER.gridx = 2; constraintsJCheckBoxSPLINTER.gridy = 4;
			constraintsJCheckBoxSPLINTER.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSPLINTER.ipadx = -3;
			constraintsJCheckBoxSPLINTER.ipady = -4;
			constraintsJCheckBoxSPLINTER.insets = new java.awt.Insets(0, 2, 10, 5);
			getJPanelAddressUsage().add(getJCheckBoxSPLINTER(), constraintsJCheckBoxSPLINTER);

			java.awt.GridBagConstraints constraintsJCheckBoxPROG = new java.awt.GridBagConstraints();
			constraintsJCheckBoxPROG.gridx = 2; constraintsJCheckBoxPROG.gridy = 3;
			constraintsJCheckBoxPROG.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxPROG.ipadx = -3;
			constraintsJCheckBoxPROG.ipady = -4;
			constraintsJCheckBoxPROG.insets = new java.awt.Insets(1, 2, 0, 29);
			getJPanelAddressUsage().add(getJCheckBoxPROG(), constraintsJCheckBoxPROG);

			java.awt.GridBagConstraints constraintsJCheckBoxUSER = new java.awt.GridBagConstraints();
			constraintsJCheckBoxUSER.gridx = 2; constraintsJCheckBoxUSER.gridy = 2;
			constraintsJCheckBoxUSER.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxUSER.ipadx = -1;
			constraintsJCheckBoxUSER.ipady = -4;
			constraintsJCheckBoxUSER.insets = new java.awt.Insets(0, 2, 1, 28);
			getJPanelAddressUsage().add(getJCheckBoxUSER(), constraintsJCheckBoxUSER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelAddressUsage;
}


/**
 * Return the JPanelAddressUsageTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelAddressUsageTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelAddressUsageTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelAddressUsageTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelAddressUsageTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelAddressUsageTitleBorder.setTitle("Address Usage");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelAddressUsageTitleBorder;
}


/**
 * Return the JPanelRelayUsage property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelRelayUsage() {
	if (ivjJPanelRelayUsage == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder2.setTitle("Relay Usage");
			ivjJPanelRelayUsage = new javax.swing.JPanel();
			ivjJPanelRelayUsage.setName("JPanelRelayUsage");
			ivjJPanelRelayUsage.setBorder(ivjLocalBorder2);
			ivjJPanelRelayUsage.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxRelay1 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay1.gridx = 1; constraintsJCheckBoxRelay1.gridy = 1;
			constraintsJCheckBoxRelay1.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay1.ipadx = -5;
			constraintsJCheckBoxRelay1.ipady = -4;
			constraintsJCheckBoxRelay1.insets = new java.awt.Insets(3, 11, 19, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay1(), constraintsJCheckBoxRelay1);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay2 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay2.gridx = 1; constraintsJCheckBoxRelay2.gridy = 1;
			constraintsJCheckBoxRelay2.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay2.ipadx = -5;
			constraintsJCheckBoxRelay2.ipady = -4;
			constraintsJCheckBoxRelay2.insets = new java.awt.Insets(25, 11, 0, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay2(), constraintsJCheckBoxRelay2);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay3 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay3.gridx = 1; constraintsJCheckBoxRelay3.gridy = 2;
			constraintsJCheckBoxRelay3.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay3.ipadx = -5;
			constraintsJCheckBoxRelay3.ipady = -4;
			constraintsJCheckBoxRelay3.insets = new java.awt.Insets(0, 11, 1, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay3(), constraintsJCheckBoxRelay3);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay4 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay4.gridx = 1; constraintsJCheckBoxRelay4.gridy = 3;
			constraintsJCheckBoxRelay4.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay4.ipadx = -5;
			constraintsJCheckBoxRelay4.ipady = -4;
			constraintsJCheckBoxRelay4.insets = new java.awt.Insets(2, 11, 9, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay4(), constraintsJCheckBoxRelay4);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay5 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay5.gridx = 2; constraintsJCheckBoxRelay5.gridy = 1;
			constraintsJCheckBoxRelay5.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay5.ipadx = -5;
			constraintsJCheckBoxRelay5.ipady = -4;
			constraintsJCheckBoxRelay5.insets = new java.awt.Insets(3, 9, 19, 15);
			getJPanelRelayUsage().add(getJCheckBoxRelay5(), constraintsJCheckBoxRelay5);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay6 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay6.gridx = 2; constraintsJCheckBoxRelay6.gridy = 1;
			constraintsJCheckBoxRelay6.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay6.ipadx = -5;
			constraintsJCheckBoxRelay6.ipady = -4;
			constraintsJCheckBoxRelay6.insets = new java.awt.Insets(25, 9, 0, 15);
			getJPanelRelayUsage().add(getJCheckBoxRelay6(), constraintsJCheckBoxRelay6);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay7 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay7.gridx = 2; constraintsJCheckBoxRelay7.gridy = 2;
			constraintsJCheckBoxRelay7.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay7.ipadx = -5;
			constraintsJCheckBoxRelay7.ipady = -4;
			constraintsJCheckBoxRelay7.insets = new java.awt.Insets(0, 9, 1, 15);
			getJPanelRelayUsage().add(getJCheckBoxRelay7(), constraintsJCheckBoxRelay7);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay8 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay8.gridx = 2; constraintsJCheckBoxRelay8.gridy = 3;
			constraintsJCheckBoxRelay8.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay8.ipadx = -5;
			constraintsJCheckBoxRelay8.ipady = -4;
			constraintsJCheckBoxRelay8.insets = new java.awt.Insets(2, 9, 9, 15);
			getJPanelRelayUsage().add(getJCheckBoxRelay8(), constraintsJCheckBoxRelay8);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelRelayUsage;
}


/**
 * Return the JPanelRelayUsageTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelRelayUsageTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelRelayUsageTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelRelayUsageTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelRelayUsageTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelRelayUsageTitleBorder.setTitle("Relay Usage");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelRelayUsageTitleBorder;
}


/**
 * Return the JTextFieldFeedAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldFeedAddress() {
	if (ivjJTextFieldFeedAddress == null) {
		try {
			ivjJTextFieldFeedAddress = new javax.swing.JTextField();
			ivjJTextFieldFeedAddress.setName("JTextFieldFeedAddress");
			ivjJTextFieldFeedAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldFeedAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldFeedAddress;
}


/**
 * Return the JTextFieldGeoAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldGeoAddress() {
	if (ivjJTextFieldGeoAddress == null) {
		try {
			ivjJTextFieldGeoAddress = new javax.swing.JTextField();
			ivjJTextFieldGeoAddress.setName("JTextFieldGeoAddress");
			ivjJTextFieldGeoAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldGeoAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldGeoAddress;
}


/**
 * Return the JTextFieldProgAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldProgAddress() {
	if (ivjJTextFieldProgAddress == null) {
		try {
			ivjJTextFieldProgAddress = new javax.swing.JTextField();
			ivjJTextFieldProgAddress.setName("JTextFieldProgAddress");
			ivjJTextFieldProgAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldProgAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 254) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldProgAddress;
}


/**
 * Return the JTextFieldSPID511 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSerialAddress() {
	if (ivjJTextFieldSerialAddress == null) {
		try {
			ivjJTextFieldSerialAddress = new javax.swing.JTextField();
			ivjJTextFieldSerialAddress.setName("JTextFieldSerialAddress");
			ivjJTextFieldSerialAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldSerialAddress.setEnabled(false);
			ivjJTextFieldSerialAddress.setEditable(true);
			// user code begin {1}

			ivjJTextFieldSerialAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 999999999) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSerialAddress;
}


/**
 * Return the JTextFieldSPIDAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSPIDAddress() {
	if (ivjJTextFieldSPIDAddress == null) {
		try {
			ivjJTextFieldSPIDAddress = new javax.swing.JTextField();
			ivjJTextFieldSPIDAddress.setName("JTextFieldSPIDAddress");
			ivjJTextFieldSPIDAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldSPIDAddress.setText("1");
			// user code begin {1}

			ivjJTextFieldSPIDAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(1, 65534) );
			ivjJTextFieldSPIDAddress.setText("1");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSPIDAddress;
}


/**
 * Return the JTextFieldSplinter property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSplinter() {
	if (ivjJTextFieldSplinter == null) {
		try {
			ivjJTextFieldSplinter = new javax.swing.JTextField();
			ivjJTextFieldSplinter.setName("JTextFieldSplinter");
			ivjJTextFieldSplinter.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldSplinter.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 254) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSplinter;
}


/**
 * Return the JTextFieldSubAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSubAddress() {
	if (ivjJTextFieldSubAddress == null) {
		try {
			ivjJTextFieldSubAddress = new javax.swing.JTextField();
			ivjJTextFieldSubAddress.setName("JTextFieldSubAddress");
			ivjJTextFieldSubAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldSubAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSubAddress;
}


/**
 * Return the JTextFieldUserAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldUserAddress() {
	if (ivjJTextFieldUserAddress == null) {
		try {
			ivjJTextFieldUserAddress = new javax.swing.JTextField();
			ivjJTextFieldUserAddress.setName("JTextFieldUserAddress");
			ivjJTextFieldUserAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldUserAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldUserAddress;
}


/**
 * Return the JTextFieldZipAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldZipAddress() {
	if (ivjJTextFieldZipAddress == null) {
		try {
			ivjJTextFieldZipAddress = new javax.swing.JTextField();
			ivjJTextFieldZipAddress.setName("JTextFieldZipAddress");
			ivjJTextFieldZipAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldZipAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 16777214) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldZipAddress;
}


/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	com.cannontech.database.data.device.lm.LMGroupExpressCom group = null;
	
	if( o instanceof com.cannontech.database.data.multi.MultiDBPersistent )
	{
		group = (com.cannontech.database.data.device.lm.LMGroupExpressCom)
					com.cannontech.database.data.multi.MultiDBPersistent.getFirstObjectOfType(
								com.cannontech.database.data.device.lm.LMGroupExpressCom.class,
								(com.cannontech.database.data.multi.MultiDBPersistent)o );
	}
	else if( o instanceof com.cannontech.database.data.multi.SmartMultiDBPersistent )
		group = (com.cannontech.database.data.device.lm.LMGroupExpressCom)
					((com.cannontech.database.data.multi.SmartMultiDBPersistent)o).getOwnerDBPersistent();
	
	
	if( o instanceof com.cannontech.database.data.device.lm.LMGroupExpressCom || group != null )
	{
		if( group == null )
			group = (com.cannontech.database.data.device.lm.LMGroupExpressCom) o;

		group.setServiceProviderAddress( createAddress(
				getJComboBoxSPID(), 
				getJTextFieldSPIDAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_SERVICE) );

		group.setFeederAddress( createAddress(
				getJComboBoxFEED(), 
				getJTextFieldFeedAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_FEEDER) );
		
		group.setSubstationAddress( createAddress(
				getJComboBoxSUB(), 
				getJTextFieldSubAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_SUBSTATION) );

		group.setGeoAddress( createAddress(
				getJComboBoxGEO(), 
				getJTextFieldGeoAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_GEO) );

		group.setProgramAddress( createAddress(
				getJComboBoxPROG(), 
				getJTextFieldProgAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_PROGRAM) );


		if( getJTextFieldSplinter().getText() != null && getJTextFieldSplinter().getText().length() > 0 )
			group.getLMGroupExpressComm().setSplinterAddress( new Integer(getJTextFieldSplinter().getText()) );
      else
         group.getLMGroupExpressComm().setSplinterAddress( LMGroupExpressComAddress.NONE_ADDRESS_ID );

		if( getJTextFieldUserAddress().getText() != null && getJTextFieldUserAddress().getText().length() > 0 )			
			group.getLMGroupExpressComm().setUdAddress( new Integer(getJTextFieldUserAddress().getText()) );
      else
         group.getLMGroupExpressComm().setUdAddress( LMGroupExpressComAddress.NONE_ADDRESS_ID );

		if( getJTextFieldZipAddress().getText() != null && getJTextFieldZipAddress().getText().length() > 0 )		
			group.getLMGroupExpressComm().setZipCodeAddress( new Integer(getJTextFieldZipAddress().getText()) );
      else
         group.getLMGroupExpressComm().setZipCodeAddress( LMGroupExpressComAddress.NONE_ADDRESS_ID );

		if( getJCheckBoxSerial().isSelected() 
			 && getJTextFieldSerialAddress().getText() != null 
			 && getJTextFieldSerialAddress().getText().length() > 0 )
		{
			group.getLMGroupExpressComm().setSerialNumber( getJTextFieldSerialAddress().getText() );
		}
      else
         group.getLMGroupExpressComm().setSerialNumber( LMGroupExpressComAddress.NONE_ADDRESS_ID.toString() );
         
		StringBuffer addressUsage = new StringBuffer();
		StringBuffer relayUsage = new StringBuffer();

		//get our address usage
      if( getJCheckBoxSPID().isSelected() )
         addressUsage.append( 'S' );
       
      if( getJCheckBoxGEO().isSelected() )
         addressUsage.append( 'G' );

      if( getJCheckBoxSUB().isSelected() )
         addressUsage.append( 'B' );

      if( getJCheckBoxFEED().isSelected() )
         addressUsage.append( 'F' );

      if( getJCheckBoxZIP().isSelected() )
         addressUsage.append( 'Z' );

      if( getJCheckBoxUSER().isSelected() )
         addressUsage.append( 'U' );

      if( getJCheckBoxPROG().isSelected() )
         addressUsage.append( 'P' );

      if( getJCheckBoxSPLINTER().isSelected() )
         addressUsage.append( 'R' );

		//get our relay usage
      if( getJCheckBoxRelay1().isSelected() )
         relayUsage.append( '1' );

      if( getJCheckBoxRelay2().isSelected() )
         relayUsage.append( '2' );

      if( getJCheckBoxRelay3().isSelected() )
         relayUsage.append( '3' );

      if( getJCheckBoxRelay4().isSelected() )
         relayUsage.append( '4' );

      if( getJCheckBoxRelay5().isSelected() )
         relayUsage.append( '5' );

      if( getJCheckBoxRelay6().isSelected() )
         relayUsage.append( '6' );

      if( getJCheckBoxRelay7().isSelected() )
         relayUsage.append( '7' );

      if( getJCheckBoxRelay8().isSelected() )
         relayUsage.append( '8' );


		group.getLMGroupExpressComm().setAddressUsage( addressUsage.toString() );
		group.getLMGroupExpressComm().setRelayUsage( relayUsage.toString() );
	}

	
	return o;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Insert the method's description here.
 * Creation date: (6/5/2002 11:40:07 AM)
 */
private void initAddressJComboBoxes() 
{
	//init SPIDS
	com.cannontech.database.db.device.lm.LMGroupExpressComAddress[] addresses = 
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress.getAllExpressCommAddressWithNames();

	for( int i = 0; i < addresses.length; i++ )
		if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_SERVICE) )
			getJComboBoxSPID().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_GEO) )
			getJComboBoxGEO().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_SUBSTATION) )
			getJComboBoxSUB().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_FEEDER) )
			getJComboBoxFEED().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_PROGRAM) )
			getJComboBoxPROG().addItem( addresses[i] );
		else
		{
			com.cannontech.clientutils.CTILogger.info("********************************");

			com.cannontech.clientutils.CTILogger.info("*** Found an ExpressCommAddress that is not recognized '" 
						+ addresses[i].getAddressType() + "' in " + this.getClass().getName() );
			
			com.cannontech.clientutils.CTILogger.info("********************************");
		}

}


/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	// user code end
	getJComboBoxSPID().addActionListener(this);
	getJComboBoxGEO().addActionListener(this);
	getJComboBoxSUB().addActionListener(this);
	getJComboBoxFEED().addActionListener(this);
	getJComboBoxPROG().addActionListener(this);
	getJTextFieldZipAddress().addCaretListener(this);
	getJTextFieldSPIDAddress().addCaretListener(this);
	getJTextFieldGeoAddress().addCaretListener(this);
	getJTextFieldFeedAddress().addCaretListener(this);
	getJTextFieldProgAddress().addCaretListener(this);
	getJTextFieldSerialAddress().addCaretListener(this);
	getJCheckBoxSerial().addActionListener(this);
	getJCheckBoxRelay5().addActionListener(this);
	getJCheckBoxRelay6().addActionListener(this);
	getJCheckBoxRelay7().addActionListener(this);
	getJCheckBoxRelay8().addActionListener(this);
	getJCheckBoxRelay4().addActionListener(this);
	getJCheckBoxRelay3().addActionListener(this);
	getJCheckBoxRelay2().addActionListener(this);
	getJCheckBoxRelay1().addActionListener(this);
	getJCheckBoxSPLINTER().addActionListener(this);
	getJCheckBoxPROG().addActionListener(this);
	getJCheckBoxUSER().addActionListener(this);
	getJCheckBoxZIP().addActionListener(this);
	getJCheckBoxFEED().addActionListener(this);
	getJCheckBoxSUB().addActionListener(this);
	getJCheckBoxGEO().addActionListener(this);
}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMGroupExpressComEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(357, 352);

		java.awt.GridBagConstraints constraintsJPanelAddress = new java.awt.GridBagConstraints();
		constraintsJPanelAddress.gridx = 1; constraintsJPanelAddress.gridy = 1;
		constraintsJPanelAddress.gridwidth = 2;
		constraintsJPanelAddress.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelAddress.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelAddress.weightx = 1.0;
		constraintsJPanelAddress.weighty = 1.0;
		constraintsJPanelAddress.ipadx = -10;
		constraintsJPanelAddress.ipady = -9;
		constraintsJPanelAddress.insets = new java.awt.Insets(4, 5, 2, 6);
		add(getJPanelAddress(), constraintsJPanelAddress);

		java.awt.GridBagConstraints constraintsJPanelAddressUsage = new java.awt.GridBagConstraints();
		constraintsJPanelAddressUsage.gridx = 1; constraintsJPanelAddressUsage.gridy = 2;
		constraintsJPanelAddressUsage.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelAddressUsage.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelAddressUsage.weightx = 1.0;
		constraintsJPanelAddressUsage.weighty = 1.0;
		constraintsJPanelAddressUsage.ipadx = -10;
		constraintsJPanelAddressUsage.ipady = -13;
		constraintsJPanelAddressUsage.insets = new java.awt.Insets(2, 5, 8, 10);
		add(getJPanelAddressUsage(), constraintsJPanelAddressUsage);

		java.awt.GridBagConstraints constraintsJPanelRelayUsage = new java.awt.GridBagConstraints();
		constraintsJPanelRelayUsage.gridx = 2; constraintsJPanelRelayUsage.gridy = 2;
		constraintsJPanelRelayUsage.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelRelayUsage.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelRelayUsage.weightx = 1.0;
		constraintsJPanelRelayUsage.weighty = 1.0;
		constraintsJPanelRelayUsage.ipadx = -10;
		constraintsJPanelRelayUsage.ipady = -15;
		constraintsJPanelRelayUsage.insets = new java.awt.Insets(2, 11, 8, 6);
		add(getJPanelRelayUsage(), constraintsJPanelRelayUsage);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	initAddressJComboBoxes();
	
	// user code end
}



/**
 * This method must be implemented if a notion of data validity needs to be supported.
 * @return boolean
 */
public boolean isInputValid() 
{
	if( getJTextFieldSPIDAddress().getText() == null 
		 || getJTextFieldSPIDAddress().getText().length() <= 0
		 || Integer.parseInt(getJTextFieldSPIDAddress().getText()) <= 0 )
	{
		setErrorString("The SPID address must be 1 or greater");
		return false;
	}

	return true;
}


/**
 * Comment
 */
public void jCheckBoxSerial_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	for( int i = 0; i < getJPanelAddress().getComponentCount(); i++ )
	{
		java.awt.Component c = getJPanelAddress().getComponent(i);

		if( c.equals( getJTextFieldSerialAddress() ) )
		{
			c.setEnabled( getJCheckBoxSerial().isSelected() );
		}
		else if ( c.equals( getJCheckBoxSerial() ) )
		{
			//do nothing
		}
		else
			c.setEnabled( !(getJCheckBoxSerial().isSelected()) );
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxFEED_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxFEED().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxFEED().getSelectedItem();

		getJTextFieldFeedAddress().setText( selected.getAddress().toString() );

		getJComboBoxFEED().setEditable(false);
	}
	else
	{
		getJComboBoxFEED().setEditable(true);
		getJComboBoxFEED().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxGEO_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxGEO().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxGEO().getSelectedItem();

		getJTextFieldGeoAddress().setText( selected.getAddress().toString() );
		
		getJComboBoxGEO().setEditable(false);
	}
	else
	{
		getJComboBoxGEO().setEditable(true);
		getJComboBoxGEO().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxPROG_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxPROG().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxPROG().getSelectedItem();

		getJTextFieldProgAddress().setText( selected.getAddress().toString() );

		getJComboBoxPROG().setEditable(false);
	}
	else
	{
		getJComboBoxPROG().setEditable(true);
		getJComboBoxPROG().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxSPID_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxSPID().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxSPID().getSelectedItem();

		getJTextFieldSPIDAddress().setText( selected.getAddress().toString() );
		
		getJComboBoxSPID().setEditable(false);
	}
	else
	{
		getJComboBoxSPID().setEditable(true);
		getJComboBoxSPID().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxSUB_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxSUB().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxSUB().getSelectedItem();

		getJTextFieldSubAddress().setText( selected.getAddress().toString() );

		getJComboBoxSUB().setEditable(false);
	}
	else
	{
		getJComboBoxSUB().setEditable(true);
		getJComboBoxSUB().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame = new java.awt.Frame();
		LMGroupExpressComEditorPanel aGroupTypePanel;
		aGroupTypePanel = new LMGroupExpressComEditorPanel();
		frame.add("Center", aGroupTypePanel);
		frame.setSize(aGroupTypePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main()");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	if( o instanceof com.cannontech.database.data.device.lm.LMGroupExpressCom )
	{
		com.cannontech.database.data.device.lm.LMGroupExpressCom group = (com.cannontech.database.data.device.lm.LMGroupExpressCom) o;

		getJComboBoxSPID().setSelectedItem( group.getServiceProviderAddress() );
		getJTextFieldSPIDAddress().setText( group.getServiceProviderAddress().getAddress().toString() );

		getJComboBoxGEO().setSelectedItem( group.getGeoAddress() );
		getJTextFieldGeoAddress().setText( group.getGeoAddress().getAddress().toString() );

		getJComboBoxFEED().setSelectedItem( group.getFeederAddress() );
		getJTextFieldFeedAddress().setText( group.getFeederAddress().getAddress().toString() );

		getJComboBoxSUB().setSelectedItem( group.getSubstationAddress() );
		getJTextFieldSubAddress().setText( group.getSubstationAddress().getAddress().toString() );

		getJComboBoxPROG().setSelectedItem( group.getProgramAddress() );
		getJTextFieldProgAddress().setText( group.getProgramAddress().getAddress().toString() );


		getJTextFieldZipAddress().setText( group.getLMGroupExpressComm().getZipCodeAddress().toString() );

		getJTextFieldUserAddress().setText( group.getLMGroupExpressComm().getUdAddress().toString() );

		getJTextFieldSplinter().setText( group.getLMGroupExpressComm().getSplinterAddress().toString() );

		
		Integer serial = new Integer(group.getLMGroupExpressComm().getSerialNumber());
		if( serial.intValue() > LMGroupExpressComAddress.NONE_ADDRESS_ID.intValue() )
		{
			getJCheckBoxSerial().doClick();
			getJTextFieldSerialAddress().setText( serial.toString() );
		}

		//set our address usage
		String addUsage = group.getLMGroupExpressComm().getAddressUsage();
		getJCheckBoxSPID().setSelected( addUsage.indexOf("S") >= 0 );
		getJCheckBoxGEO().setSelected( addUsage.indexOf("G") >= 0 );
		getJCheckBoxSUB().setSelected( addUsage.indexOf("B") >= 0 );
		getJCheckBoxFEED().setSelected( addUsage.indexOf("F") >= 0 );
		getJCheckBoxZIP().setSelected( addUsage.indexOf("Z") >= 0 );
		getJCheckBoxUSER().setSelected( addUsage.indexOf("U") >= 0 );
		getJCheckBoxPROG().setSelected( addUsage.indexOf("P") >= 0 );
		getJCheckBoxSPLINTER().setSelected( addUsage.indexOf("R") >= 0 );


		//set our relay usage
		String relayUsage = group.getLMGroupExpressComm().getRelayUsage();
		getJCheckBoxRelay1().setSelected( relayUsage.indexOf("1") >= 0 );
		getJCheckBoxRelay2().setSelected( relayUsage.indexOf("2") >= 0 );
		getJCheckBoxRelay3().setSelected( relayUsage.indexOf("3") >= 0 );
		getJCheckBoxRelay4().setSelected( relayUsage.indexOf("4") >= 0 );
		getJCheckBoxRelay5().setSelected( relayUsage.indexOf("5") >= 0 );
		getJCheckBoxRelay6().setSelected( relayUsage.indexOf("6") >= 0 );
		getJCheckBoxRelay7().setSelected( relayUsage.indexOf("7") >= 0 );
		getJCheckBoxRelay8().setSelected( relayUsage.indexOf("8") >= 0 );
	}


}
}
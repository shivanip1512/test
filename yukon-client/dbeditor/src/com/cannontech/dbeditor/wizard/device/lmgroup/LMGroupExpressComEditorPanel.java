package com.cannontech.dbeditor.wizard.device.lmgroup;

import com.cannontech.database.db.device.lm.LMGroupExpressComAddress;
/**
 * This type was created in VisualAge.
 */

public class LMGroupExpressComEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
	public static final String STRING_NEW = "(new)";
	private javax.swing.JLabel ivjJLabelFeedAddress = null;
	private javax.swing.JLabel ivjJLabelGEOAddress = null;
	private javax.swing.JLabel ivjJLabelPROGAddress = null;
	private javax.swing.JLabel ivjJLabelSPID = null;
	private javax.swing.JLabel ivjJLabelSplinter = null;
	private javax.swing.JLabel ivjJLabelSubAddress = null;
	private javax.swing.JLabel ivjJLabelUserAddress = null;
	private javax.swing.JLabel ivjJLabelZipAddress = null;
	private javax.swing.JPanel ivjJPanelAddress = null;
	private javax.swing.JTextField ivjJTextFieldFeedAddress = null;
	private javax.swing.JTextField ivjJTextFieldGeoAddress = null;
	private javax.swing.JTextField ivjJTextFieldProgAddress = null;
	private javax.swing.JTextField ivjJTextFieldSPIDAddress = null;
	private javax.swing.JTextField ivjJTextFieldSplinter = null;
	private javax.swing.JTextField ivjJTextFieldSubAddress = null;
	private javax.swing.JTextField ivjJTextFieldUserAddress = null;
	private javax.swing.JTextField ivjJTextFieldZipAddress = null;
	private javax.swing.JComboBox ivjJComboBoxFEED = null;
	private javax.swing.JComboBox ivjJComboBoxGEO = null;
	private javax.swing.JComboBox ivjJComboBoxPROG = null;
	private javax.swing.JComboBox ivjJComboBoxSPID = null;
	private javax.swing.JComboBox ivjJComboBoxSUB = null;
	private javax.swing.JCheckBox ivjJCheckBoxFEED = null;
	private javax.swing.JCheckBox ivjJCheckBoxGEO = null;
	private javax.swing.JCheckBox ivjJCheckBoxPROG = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay1 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay2 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay3 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay4 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay5 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay6 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay7 = null;
	private javax.swing.JCheckBox ivjJCheckBoxRelay8 = null;
	private javax.swing.JCheckBox ivjJCheckBoxSPID = null;
	private javax.swing.JCheckBox ivjJCheckBoxSPLINTER = null;
	private javax.swing.JCheckBox ivjJCheckBoxSUB = null;
	private javax.swing.JCheckBox ivjJCheckBoxUSER = null;
	private javax.swing.JCheckBox ivjJCheckBoxZIP = null;
	private javax.swing.JPanel ivjJPanelAddressUsage = null;
	private javax.swing.JPanel ivjJPanelRelayUsage = null;
	private javax.swing.JCheckBox ivjJCheckBoxSerial = null;
	private javax.swing.JTextField ivjJTextFieldSerialAddress = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public LMGroupExpressComEditorPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJComboBoxSPID()) 
		connEtoC2(e);
	if (e.getSource() == getJComboBoxGEO()) 
		connEtoC3(e);
	if (e.getSource() == getJComboBoxSUB()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxFEED()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxPROG()) 
		connEtoC6(e);
	if (e.getSource() == getJCheckBoxSerial()) 
		connEtoC12(e);
	if (e.getSource() == getJCheckBoxRelay5()) 
		connEtoC13(e);
	if (e.getSource() == getJCheckBoxRelay6()) 
		connEtoC14(e);
	if (e.getSource() == getJCheckBoxRelay7()) 
		connEtoC15(e);
	if (e.getSource() == getJCheckBoxRelay8()) 
		connEtoC16(e);
	if (e.getSource() == getJCheckBoxRelay4()) 
		connEtoC17(e);
	if (e.getSource() == getJCheckBoxRelay3()) 
		connEtoC18(e);
	if (e.getSource() == getJCheckBoxRelay2()) 
		connEtoC19(e);
	if (e.getSource() == getJCheckBoxRelay1()) 
		connEtoC20(e);
	if (e.getSource() == getJCheckBoxSPLINTER()) 
		connEtoC21(e);
	if (e.getSource() == getJCheckBoxPROG()) 
		connEtoC22(e);
	if (e.getSource() == getJCheckBoxUSER()) 
		connEtoC23(e);
	if (e.getSource() == getJCheckBoxZIP()) 
		connEtoC24(e);
	if (e.getSource() == getJCheckBoxFEED()) 
		connEtoC25(e);
	if (e.getSource() == getJCheckBoxSUB()) 
		connEtoC26(e);
	if (e.getSource() == getJCheckBoxGEO()) 
		connEtoC27(e);
	// user code begin {2}

	// user code end
}


/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldZipAddress()) 
		connEtoC10(e);
	if (e.getSource() == getJTextFieldSPIDAddress()) 
		connEtoC1(e);
	if (e.getSource() == getJTextFieldGeoAddress()) 
		connEtoC7(e);
	if (e.getSource() == getJTextFieldFeedAddress()) 
		connEtoC8(e);
	if (e.getSource() == getJTextFieldProgAddress()) 
		connEtoC9(e);
	if (e.getSource() == getJTextFieldSerialAddress()) 
		connEtoC11(e);
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  (JTextFieldSPIDAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JTextFieldZipAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (JTextFieldSerialAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC12:  (JCheckBoxSerial.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jCheckBoxSerial_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxSerial_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC13:  (JCheckBoxRelay5.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC14:  (JCheckBoxRelay6.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC15:  (JCheckBoxRelay7.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC15(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC16:  (JCheckBoxRelay8.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC16(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC17:  (JCheckBoxRelay4.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC17(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC18:  (JCheckBoxRelay3.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC18(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC19:  (JCheckBoxRelay2.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC19(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (JComboBoxSPID.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxSPID_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxSPID_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC20:  (JCheckBoxRelay1.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC20(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC21:  (JCheckBoxSPLINTER.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC21(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC22:  (JCheckBoxPROG.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC22(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC23:  (JCheckBoxUSER.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC23(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC24:  (JCheckBoxZIP.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC24(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC25:  (JCheckBoxFEED.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC25(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC26:  (JCheckBoxSUB.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC26(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC27:  (JCheckBoxGEO.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC27(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JComboBoxGEO.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxGEO_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxGEO_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JComboBoxSUB.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxSUB_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxSUB_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (JComboBoxFEED.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxFEED_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxFEED_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (JComboBoxPROG.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jComboBoxPROG_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxPROG_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JTextFieldGeoAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (JTextFieldFeedAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (JTextFieldProgAddress.caret.caretUpdate(javax.swing.event.CaretEvent) --> LMGroupExpressComEditorPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * Insert the method's description here.
 * Creation date: (6/5/2002 10:46:06 AM)
 * @return com.cannontech.database.db.device.lm.LMGroupExpressComAddress
 * @param combo javax.swing.JComboBox
 * @param textField javax.swing.JTextField
 * @param type java.lang.String
 */
private com.cannontech.database.db.device.lm.LMGroupExpressComAddress createAddress(javax.swing.JComboBox combo, javax.swing.JTextField textField, String type) 
{
		
	if( textField.getText() == null || textField.getText().length() <= 0 )
	{
		return com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS;
	}
	else
	{
		Object item = combo.getSelectedItem();
		
		if( item != null )
		{
			com.cannontech.database.db.device.lm.LMGroupExpressComAddress address = null;
			
			if( item instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
			{
				address = (com.cannontech.database.db.device.lm.LMGroupExpressComAddress)item;
			}
			else   //a new address is created				
				address = new com.cannontech.database.db.device.lm.LMGroupExpressComAddress(type);
			
			Integer addValue = new Integer(textField.getText());
			
			if( address.equals(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS)
				 || addValue.equals(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS.getAddress()) )				
			{
				

				if( !addValue.equals(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS.getAddress()) )
				{
					//we have a none address selected but have a non zero id typed
					com.cannontech.database.db.device.lm.LMGroupExpressComAddress 
							addressTemp = new com.cannontech.database.db.device.lm.LMGroupExpressComAddress(type);
							
					addressTemp.setAddress( new Integer(textField.getText()) );
					addressTemp.setAddressName( textField.getText() ); //just use the address as the name
					
					return addressTemp;
				}
				else
					return com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS;				
				
			}
			else
			{
				address.setAddress( new Integer(textField.getText()) );

				address.setAddressName( 
						(item.toString().length() <= 0 || item.toString().equalsIgnoreCase(STRING_NEW) 
							? address.getAddress().toString() 
							: item.toString()) );
				
				return address;
			}
			
		}
		else
		{		
			com.cannontech.database.db.device.lm.LMGroupExpressComAddress addressTemp = new com.cannontech.database.db.device.lm.LMGroupExpressComAddress(type);
			addressTemp.setAddress( new Integer(textField.getText()) );
			addressTemp.setAddressName( textField.getText() ); //just use the address as the name

			return addressTemp;
		}

	}

}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G1100A2AEGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E16DFD8DD8D5D556BF1595D3D6B6D1D9D1C3C5C5C5C58D4DD8C3E573B26F5FF947E6E8469AF92349A6AAFB3399E63246E64C0EFCF891D0D1312830C8B131D0C179D2D1D1D141C8D191D119644A3D42558BDCAF973D9269FF6D3D4FDA67631EFBAF1752D71F6765F996676E5F5EEB2D5F5AE71F3D77795AC74A79B4ACEDEAF20EA4CDCD13643F0A2912147426A4CD7A515A9FA3161EB456A4297EBE8319AD95
	6CCB05EDAE64653F94EF4A16329725C33A88524DCF461BBE005FF3258F6764BF8DBF3C781994A7C90FD78FFD40371F15ED6847445355FB32E0BB93249830C610B010EC29F9CF2E0C3BA1BDD37E4DE4EA32A4357C0D159932ADD705A74A650AA12F8624656F2CCC4F1EBCB9BF9C309810DC400B7EAE4A5640F6BAE7F7716ACA39DC4B559152447FAACA1E41FC296C23044B3A2364ED3E944DABA2C53A3C319A36D58DC75B5735F5F7AEEBB3F7F5F5F7392CED9D4B2C961B2B5B394CE2BDEEEB33AE33F72EDEDD7F75
	D6E7F72F23496A6CB1C3614D3CC003394BEA2FFC13713EE7DBBA3789FF100E6558022FD8DD75436F901048B7117B53B32AE4EEA1C7A324F137FF6A15FB7AC44139E82242FD2C7DE0DA42C4E6BF146F8B26E707F4B808082BF3FB031738AC076448CE587A4CCE0B92E0BB8B0E225C6CF6B82DBDBD1B8C62CC5C03F1663F05F15ED24AF8B4C35A8192CC38350C61E1109E81927796463FF6B1465F7C6D4F25C9E32C19333C44BF7EAD91F7765BCA7C75878F26FD485B629396561E6AA14F81B284A482E49448F8100F
	79B150577685ECB79CF2C1B01D5DDD9B9C0E0DF60B736BEE0B558E3FD72F069C995BE5ED6BF6DAA4C934738736959970C1117E21ED63CCC4ECFBA5EC17113B6E1746DFF4B8B34DA03668E716A56748B68A7F2144B67E9F2C5EE6FE4D6A2D96FEB33D2FD8BDF03C0A63C51394DC3403C25E4ED8FAB464957E8B6B39F9A6F229CF3DCD4AAE5919ECB260B27C17DB12073CABB8043E2BF091F5FC43E1D64723GCF84198C12B3E52C299424F18A56F1EC5BCAFFF5DC876D4F59E5366F6EBD64B0BBDD9BFBEDF60B55A9
	5775EDFBFC553511883D280075C43DC42CD46F23041FB69856CBC2C4D932E30A280F60A9CA3D885F2FF9759DB14533ED4C24FDB8079F93B1D344BECCA1BC0F6323D5385837617C5862E9482BFE8F5AB6AF1FD84E707077C4798A3213DE4170BCA91EF0E167B8374F52A11057109CEF927B3722037537D9297126C210EA10E690B7C888C88408584733AC4B87F89CB528762F509DE5F99F36D6374BE92E6B6AF1193B5A2CCDE6274DFC48EE6D1164B2CFDBD83D9E5268BD4B0F6FB67031555AE5F51ADD366EAE30EE
	6E34C2E36A91E5DE304CE6E51CD61E5BE86B340203CE0704F6DF354C052D5D5C635A633018DDD62504487F2B05350963E65631038178BDA9150D277F497B73D170BBB1956B4AE2E3D8D5DA3C29B18D6B6508F58EBB7620F1DB6D2BD757585A988D3373A436511C2FC3E05B816513C05C5362CD2926F853901054F4580224CF0FB70D82E94CG3F19712611A0762CF8D36E8C40C15CB363CD522CF853D0101C6CF8D398C8516CF85388907B1CF853C4107E39E0AF874A00644C0BB70502943C9FEF0A84297CGEC02
	5466461BC603B4FE98EF9A8BA20E053FB46331D0B363BE2968199D0647829FE7BF0A676D5AA5EF15E3E1A30FB194709810841049A0F99F471B2AC0DAC07AC1C2C1E2C092C0A6036465C1BEC88BC8BFC8A8C88CC88248E4103C79108F5282528F928A928312GB299A46F934887E981698789850981C9G198C1277E93CBCE7D976D5C3326FFE0155937EE6F5446A9353EC5F85524728056DEB361F58EFD667EC1F337D4C76233A9C5BDF7EEC31F6023FD9BBE1EDE9A09C583E77DBA6D33497CCA769E29E2572DDB4
	DB794D5A28BF5B238C4A30764C5A2B9AE36D98FF8FD56531764C0E81EF76ABF57105296A169DE72C3D135DD96258E2478DBB76863BDF5931A45A562F7C362D752A5FDBC1D62A52A903744F049D3FCB655FEC6CE7F348F9A00BF565568C4056EC55EFF66EE09AA007CD83A8437A4E352AF41AAEFF2E6A77172A5F7387E07BD383ECA1C8198EABD17D2ED07DDEA509739CEF76B76852CBD43FB3C16AD469C51298F358B8B96BFB6C574DF21D4D161EBF42466CAA68471AC15C1F6218F307B5DF62E371C6F30F95C75F
	9DCE98B82D96E58492E5EFBB4C38D80FDB3BDCB5D607354B82BFFA64316F6E432C8D49637261EE89474C87B84E66E91BE0606CA17C614333858EB65423BC66BF46734DAE1753F62857E55DEDF539ECDD6D0A7E2FB8179E4D9430C70E750523AC56E190E38448880AF5FBBBEB9FB83E56F7F79F6DF5B4321903BCCECBCDECCC9E8D6593293F4FADE3672C697918DE4053CA7EBD254DBE6A1F698DF65FB191BE7E43270F6FF35CABBE7E275CAE5BCA133169F23BE4F5B6C3EE07EC1F30BE01758D9F48ED0B55ADBB3E
	5871435A7FC2397D2E115BB8BB8E174AED199DBB2C4FAAA33FB3AB185FE22827E610A0108810B810C9A0791F41DC834481B29CE4A448F8106C85B09781E98589860982998BA2AD0439A7C883089BA48CE494C892C8EE814CC98BF03F7517C5CDD56ACF9F33BA5E39830CF7311FF88369C37FCFFC355557FD6EBB75FE1BB1407DB64F47FED377716ABE7B7FA4B091FD70068E6FE3C8ED077198323D43F88CE96C70BDC634F4980D91A22F2D03351B6E93DD2AB12723031DFF35F5F7F5D97940C7AA1238967617C696
	072D4B665AEB3334DBDD3BEDFDD698E78A585871BCBF476B005F7D85F8BEF4E2A11E8F95745DAD0DBC78C53251751B61F754A50FA9906344788265FCC8F0325958D8E635DBBB2122B6F577F639845E4D4F9FE53CA705E3D7FF5A4FF48BF78B7A9BAC96FE652D435AF6F4E3373B486632F6AEE37FF63B6064F5D307392B5DEAA9BCE2BEEEDEE6BE61DA46774932BA485F4CFEAD49DF3AF4DD3E77CB15C507EDCEEBDD1723D7BE99AEDC523424C47028DD5F47F9703DF576D92C907D42DC69332A6FB80F9A5BF1DB4F
	7FCA052C14104B74EFDD1C4BAE2B5DFC3264ACD2A8957ECFCED379DFF1967D17897F57D42A7C2FBC0B7E4B057FCBDBFB957F25E773182824B630657307B807ED68FE3755E9B35B65E6D9E466C76DB231E930BA8FF7BBBBBD49EC60598323F3445051418DBA8F755EDD2C0188AA10FF7989F1BCEDEB04BEFA0B4DEA37E883E803593CEB997FAF474F8C3B17751C00EED9363D09658E3AB2153AECB65D2F2D4B3AAE8B9C6616DE337DFBD624618D8B25AA95BF0156E3B1F24F483ECD665E5DF9281B6D1E063A1AB344
	DA65A1D03EA54877DFD34334FC37EE5EF1E6690203C0592E90DCEF346A386E5E33718CD76D1E0D01F2DDA9383ED72BEB87DBB6EFBE436D00F98814EDA936033A05BA3E8D3BF6ECBD33FC1907C07916A15F45DB7BF57D55FE1B6387682C0CB99BF4D72B840F477ABC7ACDB89C4FA611F26AB7DF7ED6DFA7DB2D5DE713CA05603156242F13ADD62B65EC92D14612BFACBF256352606CEEBF1BDCCAD6A117312E20B3B5468E1CCD3160727C723B0C66ABE7F6FC95BE829E2BCA647A3B7F4437DA4EFC42D7F6C6B89BD5
	5D8A19471205C6BC4A4F9A0F15B20F2359C6BCAA4E9A0FD21C2FFDE04423722C71A813F93C58E94423742C71A817F93CA09971D8F956F8D448BC8E279B71D8F156F8D44ABCA6E69971A8B9DBBCD62C12F93435FD276B739A6A6B36B7EE5EF55618945338746E2913DAAEE7EC3EE5442304F8B4D46BF86C59FD966BE38571787418DB4BE3FFDD43D923A14F596373F5F5F146666CC6A4CA29AEDE4856554519BA4FB122A1DF53694C51F1B8D36705C69C4A453D3EB91D6C7AE87A22F8D39EC869A23C5777360D6563
	3DBE79066626EE3BDDDC9B053C48C56C3A6D75DF67282E455683461EC39D8EDB111F3B5DA8FFA2655FE0181F7EB966FF3443A8BF0F72EFB24CAF267C3C86237C9A4A3F59B03F1972BF59E914EF277C1F986687D1FE7EAE237C904A3F55B0BF0272BF58EB149FC379438D7363A87F43E6237CC44A3F51B0FF9265FF3C4FA8BFEBB166079A664F2476B14ACF7EC4BF79797BFD67579B6667933F278C73CBA9FF7B815F767B7C645F69A77F77FE722778497F2245F7FE131F7CAB7C64BF62A77FE5BF79337F6DBBFF2D
	1FFC1B1F7CEB7D64BF69B5DF74E3AF9D4906ED0F75D82F352B4D4A9ED6784AFAD2FEDE71FF0E4C5165B5196D3D4AF310FFBF426E075AD54FB9887C6523467714DEBF4A1EEDB8CA767FFAF41A441EE794B645BD30A8B33369F05ABA4D4E136C418D79F97C8F1A544F6357C27BE44F6E8743B694C40C97F11B5873213EFAFAD7A12B13FD95785CFEB4680E8619A05BABAA141F9B646566D7E23911109EDB28141B24A977B4152BDE92EFEADE2214F3AFD1173BF8955983FC2C2A5CA4CD39D52B495E97E06F8B153DAF
	54655E20F2A3819F8BB2698BD12E74CBF53928B5D82E91F07B175E4AD92A305CD040433D164BDD0B65E281CF70DAEEB4151B8CF8CE1137F2C16B30DCA9142977DA2EF4BD1633C319A1A061C522DCE2113A5CA4AAD73CB45ED43BD4A9273597D90D65BA20CC1057F22D9B30DC9814996135DC4EC6ACB7964AA4F9ADB70A4AE5AF0BB795AE73D62EFF93162B05B22DDE4B9557E039A0A8B35CEB39C4AAB7824A44F9ADB7FCB316CB02B2694B3D152B5F02658A21CC3557F252D6AC578AE55CDE4BC5D33961D0A64AEB
	390EDAAC9787E546FBAD17D70765520B63CD79455E4A45D139EAA853ECD04EDD4C47E2FAEFE6B9E119DFB12C44A4C9EF2460B37BDFE72B5F77093C7EBD437B72CCE20A057D38E2653E3C18F7EE6DE2F613G17CAF04EE9332B1FAF5B5053535DE6630F124B7DEEEE277A1E3D4066F7E64096A638BD2E3AAE0B550DFD7742CE4615BDEBAE43F27FFB6F176C79C77D3373228B454777B61D60936B466ECD5D96EBADF47F1B681106A61B7584680B77EFFE7BB556D7CE89BE33705D96757BC4B133AA12B33D54CDFD09
	2893FB09D2B7095F9CCC9336F7ECC75B1110AF30B84292895B3983313C95087D1E30C642F6B7A0B61430B104459236E7A7E21389FB16305215086D5D05181D30271A908BA7EC7BDE4492887B9DE1B92508B5B4A3D6CF5853048DA1EC57BE44E2883BE8BFE29389CBBD00D8D1D93C7CAE568D2B597384C66FE2357146302C3D57362C57E5E3AF8F18DDE6FE464407D5F9FFDF4063E336ACE0D33CD795F2004D85C2A19D8DB29AC43C63F1A1FF770315CD84AC2F9C671B9BB3557315C6407BC1424AF10CFF2D021D2F
	87FE92086DFB77E72C7DFD1F7B16229D5FB637DA66B87A7E5B242A533949C66F05854FDA109CDDAE5AEFC239520EC7BF7DEEF2CBFA2B7CEE5C16CA2C0B428A6867AB30AEAEC8B12A0B6195383FAAADEB543184FED3D3FE5F661F64BF92ECA7127F10E4A37FF915687F6EDE0D7F40EFD44A7E6FDF057E0B41F6C7A57A0FB6749FC67EE79E536C4BC15CFB947E8F2DC67F51E0FB8279FF4450FF41AA747FF02E467FA06EA58A7F6F2FC17F15E05B310A4E6D53557EA3D6897FF12B70D878EE8D9B07823CE3A39F8731
	CB6608F1C1F761835F410AA7CE0960AFEFB5F27AD52691274655F8DCDFD105FA9D0005115E5BA70D7446125E063528B7813002B52897ECB252EBD903FAEF111E833088523BBA43C8EF9C695D3D8E75A682D6D405FA97996AD92AD06F5F6BD14F8DD894697DDE23B73ECA68E52F45FD953B7E7B75DB8F6FDC475B5A77390B057B7633EA0C21G78352C4598261569E388013C91EBB176E7C8EFB4E0296BD0AF3C54C82FEA9D6A7DE8836AB5G96CCFA2F997A9BC9FAEBB7225E98403256235EA5067EEA56235E5FC8
	2F9930E124F70F215EA8523BE3936AA5G16D30DFA0F169B6955D7235E3E9A54EB85ECB869BDED2897C7FAB3B653B186D85E866259EC24573881751EA43D8E4042C86F5E03FA3D3110B71974FA3720DE76C6B8AF5A08FA0F359A6985EDC43DA5DBD1AF84305124F76B9EA33D54CD2877BC696582563089752E2FB4528BA63D2BEBD1AF9430B1247717E9C6FAD9B52837398E757281EB2EC1BD1349C8EF98693DC3FA618CA33DAF8D75F2B663DCF66F8A75BCFF6438F22F737C424DE26C2F5A2C1F67FF69E0F326E6
	406D1BF11EFFCBA7FB6E9867793BE0E6ED6EEA37DBA51C3B57F731BE652875241CEE68E2FE79F594891FE17F4357013CEF9C34995F9B6DB846E28E01F49448A810F1A05296647647AE3F6FCFEFF67BF8FF3AF1FBA03C7237607B944F8424D7CAFACDBB82512BA53DBF862457C2FA4D8D0168B9C8AFBEA03DA12437FFE7A0FA43C96F390074A2C92FE5D7A0FAA3C96F77CD01680DA13D5DFB83519BCFFAE382521BCCFAFB1A83514B5E0AFA4F8624D7C0FAFB778522D7C9FA417B83512BA73D69878251EBA53DCBBC
	761FEB2B726ED9306AB76D8B710EFF8BBF7F5BAA5E71B7911E4371E895AE7A629B7979A2CB0F063C62DA0A37C26FBF24D66BB3CA1796FA57F968FD22EFEBBABDB15FEA37337E0E1F8B2B26532BD753330972F5692FDB545725A7540AF77B326BE08EDB07675AA7B353E5BED5F5584FBE6EE4571CDC109E869281928BB29EA4F5DB3C29F09B76371FF79BDD0F5176375EAE46A86FBC0A3A282F9CDC9D6E77505357E16DB62D1E08FBC48A465D3A8D772334EAF09CE6FA6869B98CB764701BE46490C59C2287496117
	FEB90CB76470BAF1103EC28E9D2B87476138071E1EC365D7C69C1208C383F148DBB3B88EDFF868AD5325033FB2BA26969532B6EFF0CC51330872B53BF43C0E94C6DCDF98A457B77CF29DEBD8DF136918CDA28E57D48D0E432D9EFAFA8E0575C69C1676E1BDD457A3072DEB8747E10F071E1E035B104393A664B00CB87CEB109C262F7347E114A107D19948E19CF1F840435640B8BC6617C36E57C69C9E659C583C3F78EB645036FEF09C0EF968690F610E2F0D0E1FF5CD5E46A4792A004CF5BA355DA0623A38FAF0
	DC4BBC747475B5C247D50C0BF7169A0D0BF1D0B671EB9C975716B11E6C9D5A49447339C172FC4DAF4F566DC67B7539D264605E0E9C2E5AB0B88EB7FB6869B9A498F248AFC78E930943260D03633053C3CF4F21F907910747F8BD30EB580E9D48619F03641036499F07B1069CDEA48E9308433D9E36864661913F9C9A9A0CB87C0D76C5C783F2B8D8B3B88E1D9EFAFA8E238DB924D7A007C462B0F77360B8FC66212767D03B53F0DFB4A307561D48617F8D1243B3FEB9446EB46AC306269A75A189D0B6E9A776A1FF
	BE08BC53F7A14FEF378C0E670FBC7474BC6D3B0C6AEAE2ABF298C29C16EF9D9C07359EFAFA8E638DB90C5D039C245D486125C1F2781BDF8E165DC69CFEDB099C7A094375350363F007071E1E43B8C38E0BCCB8CECFA28EDF558D0E43BE8FBDBD0762C6A38E6B08C3EDA3F2F8EF109CE6F82C6D286790E4486190F1985E08671CD3FA98968769F10DF8FEF9D1B75BDFF82D31215B56455E2396F9458E76FCD6375356EE6BC22C0CE3ED5DCE3E3001D85766FF78FD7EA4301935876DBA0EF9DF076144B163F5983EBB
	E63C8E43C547FC2F65F379B1EF6BB488FEC737A33FFC60A7308904159256398331DA427EC2D88BE15D8D08B988CBA2EC88E147F6A2B61C303F9396C9D84FAE44C69276DA93E2E388BB32973171043DCE58E4426C4D08E5B7A17686E18504F56DC32C12301F6CC72C1E307C83083592F6B3676702F4B0E1E62E9B896958A6EC77B379F51E7110CE5D8B3E77A27E914779BD408D627E0640438E78DA0B880559B142510FB7BDF9EEB0A09F5E569543B5E13C694D67E5FE7DBE1FCBC1B33676708BB46C0989B96FD557
	BC49E09D106D66CE2B044F5FBFD1B1DDAE3359553DE9050467GEFAEE1E32241B900EA5D5B0BDBF07EDF3D971F434849E0756D0674B010885A8F27B2557D4BC8DD5D0D0174F89DA62F136974FEFC7F4EE9FCFCBF63E4FDCDCFF72F334D2ABF06931C391427DC41E2ABA330EA111FAB657AAE33335D6A5187CC607AA24F1B7EDBCEEF7D0428730BAA55F53E125A4BE3A96ABA1A2C2B0F6CE6E8574DDACC582BD82536D7CA7662125576AAF53A7510EEB534773A461E3246D512461ECB279B8C69D0C3FBBFD92D36D7
	CE765E52580B526946C2FA2C213D5DEBB2D476CA0A51DED33A5A5E841D2E344F73F895765E2FD273ABA1FED3335476F2E47DC2F9DB65555EFFE96CD5103D95FDEAFB8DBAFD0BD7FB27562A6DD5123DD8135A1EDB27BF542B3D956B5476D6113D27B2547642F47A51DE6D3D32CE33BFCA505E939AFB23F47A8910CE82C95D2F60725A876BB576D65035D9CD9F12AB6B95495B6A7D5E78FDD32D31379267AEFFAA457E2BF1BF76DF3F594B7A2F21108E8709590F7D5746B2FDDFBE8672464BBEA79B7826637600B62F
	G5215870C5A751C8D9A1E259877B80FF5736AC13FD53661BA605DF730AEAF9452D1063E7FD36B3B8CFDAFAA577B0E857D31320D89BEFCCBAD5A3C9CC8973698796E5B2871DDCE5741BD622E827D865906C55E3ADBBCB98C55E1E1100EB6743DEC1346F7857AFE454377A850CF10EDA4495B54FFFB7A4E55E1C5102E7E37116FBFEBFDD7226F37BD6A3C9174BBE49B7D86BED106697242A1BD425077F5B59A5F2B68BC20C26FFBB4680F13EDCC7461BB7D9BEDDE9E240B3FB1723DED335A778A6A3FDFE9567B2E81
	7DE659067D9B6F3E03F4F9A1100EB074BDC56B3B847B0258D46C8BE23E413EA0F59A6B8BA6C2BA6BA00C3D8731AFF87520C73B043C0603F23BBC681D27DB17B79452E1870DF8BE34C543137A40F7DA753E23C1FF14ECA341076FA4DDDEEAEB3CA937554877612D9A5FAB517773FB743E0BC03FDA3651586A5DF707AE2F9F52438CFDFFD42B71CDFD609FAA753E43C1FF04ECE3348F5F63F4F993A11DEEB6727DDB2DEF6A833F500C33F920DB8CD2A35BE8B6FB7A9676AE2C535823FEED13461E9D7403C0C2E4BB91
	DE6D15EF5358233E2ADDE3AF867463C092E5BB138C6C09F9EA0A0B5D93F7D35A44536C3DE0F18EE05D404A0A396E66AE0BFC52AE5EC7184A4FEB9FCB956B008A6CC20E9DCD93EB888BAC051F57FEB8CD0D8D6158FC40AEA2AC0D1F57FE8C585304DD520065CA26A2E662673577015F9D490885F36CE9A8733794442673F35DDBD344DA53823B0CE3CBC1778632A771735A5F2508B50685F681471E836CAA421279F96D2BA9EAFE97F16C0F00FDCC76D279396EAC703117300BB9F6B5143B15301F71F358E7GFB0B
	622860673FEBC137B79977F9F453B45EC6CEF677323ABF444ABD540C57AB33A0DDGD28F52FAC8DC37947B6E41936CFD0743CEF3A71CFA6CF6D85B2446B6266B5E0F3AA3217C981009A0B910D75A064F1096ECE667BF62CCCFDE2F055A605E23F374F9FBFA4C6DD64C7F69A759144F17BE6039221DDE5622EE272160AF2ACDE91B31ED1E6DD4BC43511C497A6131ED62990E65043BB9DEEDD1F071EC47C77C9C1425A3A02F60B0DEB738165F2F8AEB873F6D084D6925EB8904FD4E1FA748690079CA87E2E3B8D685
	69FA4266B8D1371530D57C7EF79424E389FB15E3E3A1BD1E3076E328BB1930FD3CDC3D8D6C5990B3F13FAEC88FA16C91529DCE58B7DCF7BC24A7931645F5330F441B720FA0768B52ADA52C040FFDC3A0BD1C30CEFEEFBC9252B104CDB9013AF10465E6E1397C2308BD184F30D2C85790767EE7285BC0D8DD9F6A0691F6219D4BC593761C894B255A913B0C38649216180165BA88CB7B964B759376AC159BCD58A3FDD8EE9CE1CBF93962CE08239331939CEB06341D30C519E8AF083027CEB1AC845261042DB80DBE
	22BA695AF9297A18103A60D86CD20E0342AEEF474401E656462B3AC45B1FCD381D639DAADC9C93CF73739A168E013C7CEE64E46177C6A3A1BD1230880E0D01F4A2E1B3787D2AA4C827BB907B975F77F910AEA26CB8DD1B2BA6EC728C068D03F484E14964B70630AD64B70E303B4A50EF82E1AF125FA4423EE9C23F2947900BA43F0D04EDADC73F9D04DDDE0EFE7B891BC07186937684798DA5ECB9790DA26CBA72ABB929ED16225F9C428AF9EC05102EA46C8A0A370630F86E379952AE42B64CC0AEC104CD5D0BDC
	C2889BCADC9289CB273A1FC4D8BD4732FA62CDF9BDF49C9317C2422E1A497BC1C8B793760F194845C2D88B550B1B309F9317D10465D6A01784C517E3C91016DC08BDD601DC32881BBF8B7D6693B62F197AB7422EA63FC388DBCEFE079356C3FEA3899BC3FEC790360D7C0EA64CCE6DFE9CE18B3351EFF1AF557DBE74DBC3584EFD68371930077621DF8BE18732512F1B30B80AF7A8E1C749EFC2AF76B33FCED577B3C900279ED77A165C635E7A1990FE8ED4F4DC5F4F5C417166637AFEA6E39A76B3C3A0AF7B84F2
	1A4E6FDD06C2BA0A30DD9C0B05749842FE5E0AF10FA36C13940CFBA2E1257D98F73A9B3145B3B16EE642BEB623DFBBE187B9968469E104451A51EFA8E17B5C68B70A30A75AE93EC0585D2750EF4EC9445E5B03FE8B895B5404FE2B888BEFC23F35A7BD5BF58BE1AEBA1E9C040D27F6BD123037783D51B1109ECF582AD58C1B8C692CBE44EED905FEF3897B68936A4F894B31D1FFCE58A31968F798E19BCC289BCED84CF164B2023059495856C79366CCC69FE3895BCF768A3FC56CB7E42F0A30D9A750DE83E18E1A
	9B3490F60A6CC592B6530D76C692364B0D76469076D3B79D5B5F623B9C7F4D47D956760B7BE1AC6947F9F7C92B6659C3760E546A55DB1DB64BC6F3FBBD1F450B6B8D8B78714D74437A71FAC343BEBE4F05F492C87AF7787E077BF3FC17B9724E5B247A208643EFA30EEB2CC84E7FCE9C47B572163D7F51FA905FE53EE5BF7A8C027C915F3158C6EB56E5E1F378A713453DDF11BFC5134F0EEB766DGA53FD833EE8A637B9B0D7EA1CDFE1ACADF44761BC5985B645FC4C9760757F97D6E23F4CA44D4A0EF076FD9A8
	39D7362609FDF4AB3F975582F90ED3385F4278789582698842BE2D40FDB97A94760D5FE4363036F19A5AB8C8B3088BA484A48AA48EA489A4A7887AF110869087C888C8B4C89CC892C84E85B00E03B402B8C002C142C0E2AED06E01B1BFECDD0C3100CD3AC02CFD11FBA16801B4DFA85638F0DFA85658988E5B916CB748A4105C0B445A9675721A94ECBD9136D6C8333C4687DB3FC378494FF0CCB53E960292A547443872EB8697F83FFE92A2472646D89D30FA62578764AD2B9BF519E0831B2C0E9DBEFCF1FF2715
	7C6A535E4BA685F94F2B14FD047971B5D0491177F9346CB3CE65BBCE66A86A7E345F3A1FA19FC70B6574F29FE559F51905BACC7DAD2A6972F61E2E4C17863658316D6F3B9F192A5F3E6EBD7B7ABE54A2F93B540F2F018ADB0B02BDD7025F3ED2FF5F8A3FA9A52EBDC4E632F5FF8EF7F739DC9731E37D17FC1C2A045FB5A093B836243746072F6932AD149120B39AE421DC9F63AE924F38CCA51FEB795C04FDC116ADCCA47CB6F20C2F53B0842F293C1E2265B6151FF357C0FE439062667447AD4D873720A1FAEE8D
	491E5C5A13115BD062B6A5D94BAD07738F057C8862F66A18BFEEA69F5C46FAF0F398F03B1438A59237CFF475D64A39CD04FC69E2649667175BF49F5C0AAF56F36BB560B61438D5DD0C5C966A382D625C6AA13F19387D5EAF37D9BE3885FBF02BCD7564F6B0953905903765D9DAEE57716BB961109FC55C6639FDF1E37EB3D5EDEE5C45DAEE93A14DBE147D9E7C899F1B79F92AF4894CB3AFC19E2372998F17556D2A82CC129A59722812703F74B3FF7ED3D45B20CB347EC3AE517BF772EBB8E100C7DE02B15EE077
	67A3CD65A3C167A34943C7AA2F47490027DF0ABEEEBD614F077A582D3CD46B237ED23D0F993C5FEA865CC2BE723E7567E3164AC7084EC704070F7778F52CE840C7120F38BEDFBECC12680B51C7124EC7EAF03C29F32A70A176FDCD865331F63116EA11045F8399B8874D8E46B6F2E506E71B3EA3835BF481149358F6DEAF25102EA65D44D35A76B534DFE9DFF527FD4513220BE7346A58E37C9C60030DE16FC0BCE26E78CFFE8D279F70E141F40D15DF530B0674A842AE11F00EB9A19867E46666FC58D67D887A86
	909748B010C810D1A009A052E5D856494B4649EBEC354AEBF7554AEB070D10577C92E57F38B788360932ADE6C39DA3334D36AE596FC0465BAABF650699648BAE7F64DCD8BB4C14449CC7DDE6062A2C2F3905FE9F794A1F6EC5E72E74A9BF3F6A6C32F6F6F7595AC47B9157560E0264DD066D6709B2ED7BF900AD1BAC5BF8F8950B23536C36F576F6720FE489BB657C5AE0915828A4BBBB52357DED81BFB737C03E63B2BC3EDEAF9FC8FF079286FACC30BDC6DFA62E353CC347D7DCA667E76B5271DB442F030C0472
	23AF43E367CB9EFBA748A440C42C2F324F8548BAF1BCBF7DF2186BDF0EBA99BC06EAC857DF0EB174B6FD1F987AAFD7E290BE1E61BE02818FA13F8EDE3F6CF93E1117A3D7B66BC52E7378B9DC9C64A5104EF8BE76248F857EC3116B963FDC53FCF02D992A677A84675AGF84BD074BB03575BB19643D0EC8B6BF5EDEA75D4057B4FF87961D0B61C4AA7E531E3C3AC5642DE3FB5F7D9A0ADF4AFCCD6F40FF07FF12017C0B1666E75972349C70CD9D768E3FC187B48853C608A0C3104F33631582FC04EED3A986FC8D1
	F87EB7AF5F8AE56DD47E4E195EE3FCBED5514D67573E0603DE789598E30F4F7D1862A746B19EB17E0247B80E592798B770B6554EE23F92B95FEA5246A8CDD3F83E424B97C25952AB5146964E3D955276AB11FBD133BF6E3E5AE06815FA6E0FF26E9100C7135FE64E05BD53BB6ECABCDED619942E6F0AEB5810B719F4FAB857422B007FD5487515CAFFDCFD9D5B162B74DC6B79F5E887607DD7215FF25EAF3731982EC22E7C520D4C75B91EBF8272E2C9E78837138469494475D53F756A0BEB51B0BD57906E239270
	1AE1B80E0FCB45715EC1D85BC99C6FC3887BB35DBB9CB18C47659B276543B67DEAB80EC02AC09AC19CA041A091A031D7533BE73C6C382B451A10EC7D4871723A146972FA17ECADCBD1B6FBDA90EC19AE0B53F135B296C7DC2D9D179B2F76BE0ED799649548D830C1DE3A8E93DCD6F2AEB84E2B2F9D683F75ECB4CE2BED9975DB6AB9032FB901B8D673DBBD477B8A0E3D4C9A570F71183635EA0F695869CA5B9B474BE7C3593C9FE35B5B4A4F69EAA15D78E3ECFBDF758FE43E6F2D6D8D79313E6DB5087B96000712
	5F9AFEBF62C510D1447D38D94B7D558C057B9B3C7CD8A81BC8B6AE64572D332F01F82EC16E4F36FF1F71227E9ABD7767793D0FE640AD57205FC2FE2F62F59653B5F80C73C7B2E42EE2FD4AB0480B3CC65BF70E05F4A2F13D7CFB0D5FB9A1FA2E33F9BD6783DE9402F55AEC72ECB71F70FBA3EF313828DC43AAED5DD74ED045434BF7C0D9D7881D2B70FBA9E1100E8C41F83E34FD1F39D302C7BC63797950F840A7125FA3BC1E7CEBA146EB91FB195FB7F98A2465DA5C9FBFE1AE6573249FA57B6BCBFD35E77B3562
	5E07426BA24E418D789062B011F37895C8B4F17865AC054325BE4F217D0D7131E0F3060643DD1CC39C60894421029F8F3F83493A8EB93C1C2DF078AF1F57C37C0D55F957A99C64673683DA2BC769D77FB2C83D45812D7143C45C4BDD301F9D1C05570976B51570AFB9DE2A42453D2F26FDF86F2B9A72422F43777EC64DE64F1625DF8FE39EC895C8A3088BE45875783E5E75AE76DD981F6B4CB4F6BB6A2D472DF655ABF8A23E5B83DA0B88479DC9FA52047718229F3DC79AF14914295E56828E3FDE0CF331723638
	F1A147C5FC87663278A6C2DE76F018B701540334023807E3FCAF380AC4FCECA9638DAE17392D032F120C4131050B9518BD18A77A1791ADECF2F9285B49DFB6924F797D5E024F6A8D857B61A063C0A68E97EBBE8A3D1F17F9BE9F785BB2FABE708671FCE081ECABEF90FA222D17D78CE47E046D3D81F4ADB708364E52EE787D8634733F523968ED5B59BD8843AF83CA749E46BCB6E0ED2BB79F325AD9BE3DFB30B11B702D1BF748EAA2AFECC50E462E7215BF115FB3CB515D5DFBC813B735D42B2B4FFF123F27A5F4
	D5DF6DA33E43B335B1991539F33662DF79AA2348FBE109563FBE7F33E4457F1E9E2BD3EF7B458F357E0D4A3CDC2858E08B436A736BE64ED46A47E137F539D87B92F9F7FCB8C7DBBF3A7CED5DDA7F2A2F89127DB99D9FE8ED283F72076F876DE49D3D6E6BFBF25EDB877933266AF512497623BDD96ABCE89A82FFFB3F865F3DE72340BBF6E8EC31F5FA4956513D1ABCD6D592FE3BE20DE6FD49A172F192F1832E4FB8FF21D1FE8C65C7A49B6547D17E9FB46BC962DA2F0914DFE6B2521FC479878D7333EE24EF2B24
	9A6567D3FEFB1A117FD24A9FEB483F167213B30D72DBA8FF3561DA3D0E9BF10C0DE55D113C9F2675AE00ED1775C4BEADA13B253B4BD5384082ED223BFDC1D1FEF1D1FEC971926C3B43CE28573E2C4C28723A7665109B65678264ED6A258B793DC2F60D171FE0723F24751E98DE07D876917BAD7C3E1805E3C65E3D37CBB5FF1CB29547F93D5FB859DF7ECD4AB39739373626496D0E5FA3F2B9FB2D42470B1F286A42B9503A903A29790A6E29E42D5D538B143C83478233FB5BC2C577961D5D164F153C7B8234BB2B
	D0513DDDE7776897CA5E83815A3D61CBC577F82A566EDBCB153C3F1F9828DD23F6A26C65AED75A072BC431FDC7FEE06D78F787546DB87B464F13F1CE25EFCF4DF2BB32285A13F7FE89AB94FEFFD8252A977B770F7D6D550A6DDDEBD5ED6F87285720F50A6D04EA4576BBFD5F5F76FB9B945B7C9690365F9F4076ED1B95FB4E8C56979DB65BFB147769E3B2346DF1DE2DD27E49D31F997B5F4086C4F0DFA23B1739D756A93A7FC8751C9FAE24F95E701B447CB08A3631B709F58E04DE5FC94F79E159E954CB38C94C
	8FA742B6BDD4680979614DD2A0675E7920DB9A2A4C8FEBC3457C70A51A9F76B5E966G622B18F2EC593D1EF9787D5939691EF978CD584FD6F86661F7DAD795FA666137D3B33E734C436F19AE48724C43EF0C5E7D05E79EFE77B31CFFCBF0F159E2F95F9D58266C3B242CCF747B3D4686537F9EDBF7D7E185343995AB28EF7BFFDFABFAC7768F3E3D223D7F592E7CFE2EC131FDE969C0B809329BC5EC65985B141D0A1DE783084D5A28686DEA8A2C4F8F5E2344F1EF13E2E7F459406338341C47D101F17CF62FE2A7
	BA00B83E582F68AD8CB00EAB37A8F1BC38D531E38BE0FF94087DD109F10CD175B13F8DA00EB5DFA9FAEF859847B775CA9C97285A6C858144D1AB62A845B84237ABF6064C9CF89C122ABDB684984742DDCA9CDBF6ABF6DE8BA00EE67EAD7845ABB18E1B2A1D4F19B570B862D46DFAFAF3E0F13C39D70963F333E2670AG626896F12C40B86A8EA9F6568790C714C551EB9DF09FA64FE12CCA9CEF9FD66C5CDCBE70B83E5E4763A841B8BE6CD0350F6C014751FBC4510B8DF0FF8CBF2A44718B3B2A1F99D09CE21C1E
	190663F4E328985F6D308D8A95EB9909B2D71F24B9C028984B23E09BAB1791E379BBBE1F6B51DF57CCG5DA455D81EFA33984BDF25313CA5DF1CCB531725D5676C9F55E72973681CBDFA2B8627F37657BE5658521C337F6EDB0D4E7E3A8639CD6D1C2D75AF3EECCDFAFFBB2531A91F6B4B7328FECD9E7B8234045781DEB27C6EC3764DB8175A5E4A5B15935B551FBA157DBAB74547FE2DDC21E9D76EE30ADEE1FFE06D6AA627522E9E6FD16C04358E443FFCFEE866F1B8B00E97DD0A1D6D6E0147D1FBC2517BE9FB
	E0F19CF5ABF15CF0D231B3E44F4063D85F44636845B8E27A86586F6A6248D5BD73736FG470FB52714B83EB92D5879112FFED797C759AA9EC79F46416E12E05E2CCF869EC7D10A2217EE8BAC0E9D29CA9C4EB4454E1587876E1F0F4532DE5471017A9765E7A473BAB80CF5B0B9DD6153162958FDA2C03B19A7385DC3E87712AC456E1FE7AAF6135D01595D6E66F65B51EE9A3F0FA46ED3946ED7FE1728FE376C9B48FAF003956123770C7A9077B81E1E6DFDCD3631330D57E47B53EC63B59793E7FBDBABCDDEEF0D
	7B6A51FC6285FD3DB91BB5546E93FC09C8799E4DB3592C8FAF00BE3B9A4482628699FAB35E1F39E08E5B4F9B8E995D1B59ECE9E7EB4275384CEC1D8BD15EB257FB2CC7673E2F444A345A2CCDE6B815BFE4D73EDD6C1A4B6EF99C6AF63958870259BA89826F1B4B76172B5B41C1011D1E4B6A48E9EB6FF00922B2FE71DCF6B0582D07B9AC6E41C5D93364369B81310D3B995FBFFBAC035DDF9B5037959BEDAE3BF5A33F22A05E8F1BE4E5FE78F714EE41F7525EA8E5FE9AA05D8192F48B3E7F76F6995E839C8ED85C
	AD38CE6E3AF2FC3EB77DA7E843DE4E57E900F4B30883E4E057E5711ACB873BCD016B929E7632AEA13F43A1B8B8793B172CAE03FF023C9A97A2B612309712911BC4D8862DC3DF9C06181D56B86DA06CBA0E3139C498E129E98CE31DD56A2D085D1206762A881B150265DC042D4AC4FB11049D4BC45D6C5B709E6BBC5E96EAA1ED398D5B74748F598551A673914F2F288258606CF6D81D2E138265DF56160F151DB9EC2EB5846C04014402A400A401245F9EEF4A83A9862981E981F10184030402C4010C849983B27E
	F664F16A23A5BEF848AFC172834CE9966B3F8A9EBFE737196436BE22E411B79BF004EE03DD3E635091EB1B2B514C1E5593ED712BB2BC96A6831752F02C3FEB4A307E6C615896771DE2E543A19D83B2A61C3E37F79A5B7384408A6EC09BF71C46765CF2875A7883AF9B8269C8065D91E8FB7E00BF4CAA7C1627A177843013F3A77ABDC56D267ECE749B65E6E507C0BA94A47ACE647E48C964BE9A30543B504654BE64DEF5975AD85E474A3AA0BD94A47C2EC0392F6777C8047D0F689808398B5B4073595E7B4B44EC
	7F7D659B5962DD00F6EB63C9073C1E665F33797A40078F77D829DF7EC7F6B6E1F5BD8D5DBDB676E4299883FFE675771CC0FE045173EC31FE75745FCF90FA6FF23D2A0801BDDF5FG65447395E65EEEAD917A67AE0EF05C9121FF6E624DD25C4F7D10B7AE821F891CDCB63867C5B24A872737A9E0BD9157B8BE8E545C2D0F77B50EB75C2D0F57D90E7136C05E483BB15E93FB547E8B6E9175DEA9EF6BE15BFA0F517E5D37D033FE29DCA6D85E0642B64AD0AFD133CEE92CDCE62C3C1DGDB69DEA33DD91AF539F2F4
	E58A6F75769E45B10DDE15DC2EC15EDAE06BB674F71349E86EB7D4D7B64C40EF348E9B85698410A495AEFCCCCFD3F3CB0D9479397236883655A00D11FA3D5BB5FA9D11DAFF7D115E6AA2C733A66EB039DC383C9D815B51A063BC7C2D4BB42A0B09BABF6977993C232C430AA1DD8352FC1F5E47F14DFA24F61DDE1001ED51F7FDB4177D26B92F9812653C4F6632792B2D8B3AB3335D5647BF3B3E9B8AF6350BFCEB0E777E551E633FFF6D4DB11E0FFE1B63B99F8D4AB11E0FDE12231E0F4AEB236730312A9D4678E6
	AAB70C30FD04DD4BEDB2EC2F4D626AA07CA64E0B6135D6669071DBB92F939CEB1631BBD558BE993BB7070D9190F2C73793F523F278BBB9B63BDD2423F999DB978C99D49F0FF00EB607D9457BF14276513E5E69370FB59ED38E7A55B39ED306F33D9003B6E4A49177611872941F5F445C276FE31F6578287B74FD6C41D358470E013C4A7B691BC32787B7B69C9B245EBD816B093836CA0CFF687D7AF89BB89EF13FBE5EF81A67C5C3DE6E8398EFD55A60766FB63FFA467B77A22E577F4040766F3087F07F967039DE
	78837AF817F2BC6A81FD3CBFF3E33CB110179F0571BEF1F2F07B6929C16ACD6B9B5C7E3D1D4FD707C469630D647830A8FD3CE5FD98EFA864C98FE23C1FFA0C0D9648F3BF683D7E074AF9E13AB251109E254344FA7BA3673239302D4BEE6B32322FA4EE35F6C978ED081C432C4FCCG3D098F62FBA33D7CFD52740760DC6BA164594E16DB176B4C217A7D0E47FA44BF24889FF3BC56387E61FD3CD22E4474D755EF37471A47BF3C6F2B4F288F31CF2F64579E58DA00058F519AE2CB99D68569FA42D6AD43F7061A89
	7B65827EEE9724E388F3ACC4FBF104ED65AFCCA5C2FAA2E111ADE8CF7AA9E243783BCA8D103690762FE43467A66CA8FFB6FFA824C3890BBB0E76A288F3CFE358A4C8E7C5A376B92D4D18CF580524DBCAD8B0159BC258D37C7CF4B824A388DBC16BB5C69336146B26BE8C7D7543349E9C470AA0DDC558827EEEFEAD246D041D20F5AC0388FB12FC0490A62E71A432B4E18FF3AC6BE77126221FA1161F06762A89CB656BCDB5C25AC2180D5620F2907688FF1FECA4244790164C6D0D07F47A4F91FB14FC649176EA8F
	5AABA66C4B940A0D309ADE77A1108EA76CEE5A9FD104BD4B39C8A362CDB9A390936F5CB3AE05043572EBD0D5102EA76CD719D84F4D044D26F5C06D8AC66BDD86919642FD44C1BA113067B3301EA791F6852D29197588E2EF50FBF67904BD402F71B8A09DCC580B5FB1AC9452D10FE03F7A07D3CADF13207AEDBDF5667B1DD3E74187FF84833F03217A7D4269B36FFB529975A176690D7C1808017DB90676F3A5FF1FE7BC24A753FE7E6224927BCA556F9877192F07E74E020F3B7B14189ED27DDE53F766FDB71ED1
	9F6AF584591AFC690F62FE3E0CE3ECCD3EBC427E4A31C2C8D791D6497BFA3646DF83E1EB299F369076BBBE0EC5C3FA5423F8EF7F4B436C3C5445EE09307BFE923E5B37C94C5B205CF8AABB34B48D4BCAF8AF7190BBF514F5FE4E67G393F08B7957C0256FFDA2AFDFF70E236CC207C5ED94332C05EE5562FD35288BE5835DAFCC7EF2E943F006DAF6D3AABC9FCEE4172DBFF016F435D4067968EC877934FEFDA34BCFFBADF61799FAD01BCC722679989BE66E9F85EF55213672FCFA24F914433000FF323A0BD06F8
	DEF8DC4B7359CF941E2F9E8F64DDC2BD4F5498F12FC561F955B4CF1EF7CEC31E59B148F307F8779252C5B1347E10CFAE783EAD56DBCB0CF6CD9DC70CFE5D1E87390FFE4003E3E88D1CBEEDDD3C7329D297F5BE578DCA11346FF66A6BE2C40CF827D1290B9A13E7DD9CB0E1DD449227B13A35937258234F78ECEEBA3BCE55516D34754121E636331707708ABE9EC30D69F86FE28C55EF9847D29F035F0FE17D0E759BDF260F782A9F933F1578AEB2086FC60A2F7EB10CEFB4BF661498B658ED6DDD6CEEB22E8FC177
	91DB9EC37EF5FC8C8B06F48859797804361E56AFD076DD105FF7E2E77808AD96FCE4EAE20BCB750C6DD5DABBAC0EB8FD1866BB3615F4EFEA9C45769247329E07B97A6338EF267478EB7BB3D4ED3F76F1ED5BEFF9DC5F76453AFA9D003B9EC72E87F47D402105CA7D0D745B8F2857DE5357DF7863E2CE21545F9B8675A76E79327C284731AEFECB5F919FC9BCCFE46A7A7F8246D3147FCBA6367589E4E335D8EB7C89180BBF0175D968F7BD2B59BE62E986BB2BB4715CEB30BE57AFE95DAD4B9348E59A5D07F69176
	B371AD85C8C7923FD43FEB144DD66D6F04A7F4EB2DBD216CEF416FBF4B0C4764BF71B97FE4A81FBE926BF752F71EE3F2843B15AC477AE01A312DDF737DD789F6EA48568E37272D5FFC2E6C2FEEFEEC3F4A52A3719D37F796AB3E2671FE2A47EA3736392C9621B3BF9D6BF548C82CC3AB47C2A09DB6926B30516FB12F967DBB68F1A3C51BD55608FA45E06CFAF79A363784623FC775BE162DF4G6F2914AA6F294494A93A231686760E4B8B2A7735CC8B356F4E2CA9D672563484E6779B553BDA63CEEA6DB6291E1B
	BCF8BCB03BA7D54FCABEB6CDEB779E3712F7FC404F29F93F577E94BFFF115F6368D7ECBF59979867992794DD2789B90B7451F4E6CB75A84D325D6CBFBE865533EC53E67959DA7959F6C931757037017198BAD5F5BC6AF83C4B1FC3704123FE7316C6594EF855F30E13825CFF192AE79B2724EAB9ECCB9BB887276AD94767FA3E7F3E3ED6753C63648C45F6E50071FD1A25685E1A210D6F650C0144A74A26E58556AE3E1D2978CDBB9D9867DBE6A93A71BA4E73B3873ECF7EB9DB3173628F702EDF61DCE51F7CC8B5
	16BC73DDE07DE312EAECA8F28FD4D7143F040FC90BFB964B6952F4ED1F33D755EF178C783DCC215B27FA0FB64724FE1771830E39F6BC8AE4A35F1052DC52549217E492EF6E2F06DF7C5D377CB27AD5CE3FAA68D7A57DAA7579EBA57DDAC13F40DBBABE576F12D259A37C30E1CF6B3B24147DF58D10E02F8AC0E2771E0D70FF6B669DBDCEE906A66EDF5DDA764A68BFB57524C8536A248F59520C023F2D4FEAE1DFC9EE32BA59D34CDB24698E76E5B33600E21D145A43B7E9BD2E13F6EB3D14F3F81775D82F358746
	718DF83F3E47A54D2BE71E163367A817571AFBBA784225EB6A2554AEF32755A54D9159F6F3D77BF2F173FE0D5B81D5BAF5C3BEEFE07C78863EF3B9DFE6E599D9197B0BD90BBE5B16B8A2C5CA5EA2E5583B4D16AD66B6D73733CE1A6E6AF0DAFBBA3A6D9637E3FDB5B714FE821FA4CC81F39FD378AC58E56C340AC89FF55FBCF4467899DB5847461C52F2DE124DC617D1894B268E3393DCD91DF5A0E6F0D9C0F997FC627A7C292D9F34A4CBD365A00FC92724F9EE07CBD498B81F45CD321017ED81562E7FFE635737
	BDD715B481D436C8E94759B38E60B8DBA9353D37731055F9C9643573B3C346DD4EF8B9D87574B04B9F3A24E9074D1DB6BB8C3753EAF86BC5FC3A4BE96E6AB95C6D6C8427793A08B10B08AF3B665745575E7D4F7D1C38226A12BE953B88D41737DB3BBB17EFB8FC5856E5A583303F407CFCB24F4AAC531519633EFA5E36E75EBB846D2BC6CA69ACAE667FCB787F956CFF89C7CAB8D23282F6DA126473CF1F6FF63318973829F69913BA7E78423863ABD7273CF4FBCA3214DAA7CD930FF3C063E54FE4C063650FEC54
	C9A92EEE07E8F772E17E91EFA84C68DC0F5648508FBC1B9503BF661973D9F176A31F7689CBAD64190B787F4241C5385C4D353F50B1CDBE7718169BB31DFA6EB1DDFB5EB02DB9EF18FE25E50AEC4FC1263B0C191E03477EBEE3266760315FFA5E6C7D767306E91742B4C34E70FE6CCF7542B455A7D31ACF086785C5B1E662878A21D79BC2261CB995866DB91E2F4CED38B27E0F1187EBF21225E49837BB2CE220CEBB411E0564C3B53BB23E655C5BD197A8D1623DA6FE6D14237D9A5E5A54B99545E5CA9412AA0A8F
	4F2FA82E519E5E9805F4FEC5912AC401DFE8E1D1A41FDFD15C210D0279CDBF7F2238DF5B22B00A732CC57DDCFBF4E394675951BDD25B53E2943EFA5ADD67DE943F560E0A6CA386E944C94B7B9C0E62775A9615AC4B5473AB0A6734C7B7C6F11E6D0BC463FD11F22E731E20BD927069F4695CE37A26360699D3F62D799CBCED782736C5639B349221585F3077FDD289CD17F3981A2CC153641CE41714A12FDDEB6BEAF7C9B3585AB679B2325AA5E5ED5D3CC31D5C3DE723AAB903DD12D6E76F2FEBD0E7334B576AB4
	3B2A2DCACF478B5E70BBD3DC865F53E3EE37C2C9399026D399AD55EEE965F5B3D39A60B9D22B51EEB94E7E39FF189DB4B55BED58E886F786770333FBDFE9BE780090BFC7BE17B94FB766ECFC1D649C61DCE04C795C6BD026FE99489513F324F6D784D23B678867D567A167EA05F332DF4E7F2B2DF82BF6GBFAFDA71767330C56CB9EFDAC40B7F96514AF34E2139C31B7BDCE6E7B31E597C2F6E65EE6309FB8A2EBD3E6434FA6D71C9974F773A063E65A571DE2B7BA5E56DF131C64F477B79BB9300473D04EB3D9C
	5D479E5E7336D64F6ECE335D6EB25B0FEE683230F5FBB61EF4D915F53D7277B37BBDD8C64E94F90B77B35EC7D4BA7F9FD0CB878800E07D6CAEBCGG9874GGD0CB818294G94G88G88G1100A2AE00E07D6CAEBCGG9874GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGE8BCGGGG
**end of data**/
}



/**
 * Return the JCheckBoxFEED property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxFEED() {
	if (ivjJCheckBoxFEED == null) {
		try {
			ivjJCheckBoxFEED = new javax.swing.JCheckBox();
			ivjJCheckBoxFEED.setName("JCheckBoxFEED");
			ivjJCheckBoxFEED.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxFEED.setMnemonic('f');
			ivjJCheckBoxFEED.setText("FEED");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxFEED;
}




/**
 * Return the JCheckBoxGEO property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxGEO() {
	if (ivjJCheckBoxGEO == null) {
		try {
			ivjJCheckBoxGEO = new javax.swing.JCheckBox();
			ivjJCheckBoxGEO.setName("JCheckBoxGEO");
			ivjJCheckBoxGEO.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxGEO.setMnemonic('g');
			ivjJCheckBoxGEO.setText("GEO");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxGEO;
}




/**
 * Return the JCheckBoxPROG property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxPROG() {
	if (ivjJCheckBoxPROG == null) {
		try {
			ivjJCheckBoxPROG = new javax.swing.JCheckBox();
			ivjJCheckBoxPROG.setName("JCheckBoxPROG");
			ivjJCheckBoxPROG.setMnemonic('p');
			ivjJCheckBoxPROG.setText("PROG");
			ivjJCheckBoxPROG.setMaximumSize(new java.awt.Dimension(82, 22));
			ivjJCheckBoxPROG.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxPROG.setMinimumSize(new java.awt.Dimension(82, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxPROG;
}




/**
 * Return the JCheckBoxRelay1 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay1() {
	if (ivjJCheckBoxRelay1 == null) {
		try {
			ivjJCheckBoxRelay1 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay1.setName("JCheckBoxRelay1");
			ivjJCheckBoxRelay1.setMnemonic('1');
			ivjJCheckBoxRelay1.setText("Relay 1");
			ivjJCheckBoxRelay1.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay1.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay1.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay1;
}




/**
 * Return the JCheckBoxRelay2 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay2() {
	if (ivjJCheckBoxRelay2 == null) {
		try {
			ivjJCheckBoxRelay2 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay2.setName("JCheckBoxRelay2");
			ivjJCheckBoxRelay2.setMnemonic('2');
			ivjJCheckBoxRelay2.setText("Relay 2");
			ivjJCheckBoxRelay2.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay2.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay2.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay2;
}




/**
 * Return the JCheckBoxRelay3 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay3() {
	if (ivjJCheckBoxRelay3 == null) {
		try {
			ivjJCheckBoxRelay3 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay3.setName("JCheckBoxRelay3");
			ivjJCheckBoxRelay3.setMnemonic('3');
			ivjJCheckBoxRelay3.setText("Relay 3");
			ivjJCheckBoxRelay3.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay3.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay3.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay3;
}




/**
 * Return the JCheckBoxRelay4 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay4() {
	if (ivjJCheckBoxRelay4 == null) {
		try {
			ivjJCheckBoxRelay4 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay4.setName("JCheckBoxRelay4");
			ivjJCheckBoxRelay4.setMnemonic('4');
			ivjJCheckBoxRelay4.setText("Relay 4");
			ivjJCheckBoxRelay4.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay4.setActionCommand("Relay 4");
			ivjJCheckBoxRelay4.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay4.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay4;
}




/**
 * Return the JCheckBoxRelay5 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay5() {
	if (ivjJCheckBoxRelay5 == null) {
		try {
			ivjJCheckBoxRelay5 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay5.setName("JCheckBoxRelay5");
			ivjJCheckBoxRelay5.setMnemonic('5');
			ivjJCheckBoxRelay5.setText("Relay 5");
			ivjJCheckBoxRelay5.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay5.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay5.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay5;
}




/**
 * Return the JCheckBoxRelay6 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay6() {
	if (ivjJCheckBoxRelay6 == null) {
		try {
			ivjJCheckBoxRelay6 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay6.setName("JCheckBoxRelay6");
			ivjJCheckBoxRelay6.setMnemonic('6');
			ivjJCheckBoxRelay6.setText("Relay 6");
			ivjJCheckBoxRelay6.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay6.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay6.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay6;
}




/**
 * Return the JCheckBoxRelay7 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay7() {
	if (ivjJCheckBoxRelay7 == null) {
		try {
			ivjJCheckBoxRelay7 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay7.setName("JCheckBoxRelay7");
			ivjJCheckBoxRelay7.setMnemonic('7');
			ivjJCheckBoxRelay7.setText("Relay 7");
			ivjJCheckBoxRelay7.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay7.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay7.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay7;
}




/**
 * Return the JCheckBoxRelay8 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxRelay8() {
	if (ivjJCheckBoxRelay8 == null) {
		try {
			ivjJCheckBoxRelay8 = new javax.swing.JCheckBox();
			ivjJCheckBoxRelay8.setName("JCheckBoxRelay8");
			ivjJCheckBoxRelay8.setMnemonic('8');
			ivjJCheckBoxRelay8.setText("Relay 8");
			ivjJCheckBoxRelay8.setMaximumSize(new java.awt.Dimension(70, 22));
			ivjJCheckBoxRelay8.setActionCommand("Relay 4");
			ivjJCheckBoxRelay8.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxRelay8.setMinimumSize(new java.awt.Dimension(70, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRelay8;
}




/**
 * Return the JCheckBoxIndividual property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSerial() {
	if (ivjJCheckBoxSerial == null) {
		try {
			ivjJCheckBoxSerial = new javax.swing.JCheckBox();
			ivjJCheckBoxSerial.setName("JCheckBoxSerial");
			ivjJCheckBoxSerial.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxSerial.setText("Serial:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSerial;
}


/**
 * Return the JCheckBoxSPID property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSPID() {
	if (ivjJCheckBoxSPID == null) {
		try {
			ivjJCheckBoxSPID = new javax.swing.JCheckBox();
			ivjJCheckBoxSPID.setName("JCheckBoxSPID");
			ivjJCheckBoxSPID.setMnemonic('s');
			ivjJCheckBoxSPID.setText("SPID");
			ivjJCheckBoxSPID.setSelected(true);
			ivjJCheckBoxSPID.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxSPID.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSPID;
}




/**
 * Return the JCheckBoxSPLINTER property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSPLINTER() {
	if (ivjJCheckBoxSPLINTER == null) {
		try {
			ivjJCheckBoxSPLINTER = new javax.swing.JCheckBox();
			ivjJCheckBoxSPLINTER.setName("JCheckBoxSPLINTER");
			ivjJCheckBoxSPLINTER.setMnemonic('r');
			ivjJCheckBoxSPLINTER.setText("SPLINTER");
			ivjJCheckBoxSPLINTER.setMaximumSize(new java.awt.Dimension(82, 22));
			ivjJCheckBoxSPLINTER.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxSPLINTER.setMinimumSize(new java.awt.Dimension(82, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSPLINTER;
}




/**
 * Return the JCheckBoxSUB property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxSUB() {
	if (ivjJCheckBoxSUB == null) {
		try {
			ivjJCheckBoxSUB = new javax.swing.JCheckBox();
			ivjJCheckBoxSUB.setName("JCheckBoxSUB");
			ivjJCheckBoxSUB.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxSUB.setMnemonic('b');
			ivjJCheckBoxSUB.setText("SUB");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxSUB;
}




/**
 * Return the JCheckBoxUSER property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxUSER() {
	if (ivjJCheckBoxUSER == null) {
		try {
			ivjJCheckBoxUSER = new javax.swing.JCheckBox();
			ivjJCheckBoxUSER.setName("JCheckBoxUSER");
			ivjJCheckBoxUSER.setMnemonic('u');
			ivjJCheckBoxUSER.setText("USER");
			ivjJCheckBoxUSER.setMaximumSize(new java.awt.Dimension(82, 22));
			ivjJCheckBoxUSER.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxUSER.setMinimumSize(new java.awt.Dimension(82, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxUSER;
}




/**
 * Return the JCheckBoxZIP property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxZIP() {
	if (ivjJCheckBoxZIP == null) {
		try {
			ivjJCheckBoxZIP = new javax.swing.JCheckBox();
			ivjJCheckBoxZIP.setName("JCheckBoxZIP");
			ivjJCheckBoxZIP.setMnemonic('z');
			ivjJCheckBoxZIP.setText("ZIP");
			ivjJCheckBoxZIP.setMaximumSize(new java.awt.Dimension(82, 22));
			ivjJCheckBoxZIP.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJCheckBoxZIP.setMinimumSize(new java.awt.Dimension(82, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxZIP;
}




/**
 * Return the JComboBoxFEED property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxFEED() {
	if (ivjJComboBoxFEED == null) {
		try {
			ivjJComboBoxFEED = new javax.swing.JComboBox();
			ivjJComboBoxFEED.setName("JComboBoxFEED");
			ivjJComboBoxFEED.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxFEED.setEditable(true);
			// user code begin {1}

			ivjJComboBoxFEED.addItem( STRING_NEW );
			ivjJComboBoxFEED.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxFEED;
}


/**
 * Return the JComboBoxGEO property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGEO() {
	if (ivjJComboBoxGEO == null) {
		try {
			ivjJComboBoxGEO = new javax.swing.JComboBox();
			ivjJComboBoxGEO.setName("JComboBoxGEO");
			ivjJComboBoxGEO.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxGEO.setEditable(true);
			// user code begin {1}

			ivjJComboBoxGEO.addItem( STRING_NEW );
			ivjJComboBoxGEO.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGEO;
}


/**
 * Return the JComboBoxPROG property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxPROG() {
	if (ivjJComboBoxPROG == null) {
		try {
			ivjJComboBoxPROG = new javax.swing.JComboBox();
			ivjJComboBoxPROG.setName("JComboBoxPROG");
			ivjJComboBoxPROG.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxPROG.setEditable(true);
			// user code begin {1}

			ivjJComboBoxPROG.addItem( STRING_NEW );
			ivjJComboBoxPROG.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxPROG;
}


/**
 * Return the JComboBoxSPID property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSPID() {
	if (ivjJComboBoxSPID == null) {
		try {
			ivjJComboBoxSPID = new javax.swing.JComboBox();
			ivjJComboBoxSPID.setName("JComboBoxSPID");
			ivjJComboBoxSPID.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxSPID.setEditable(true);
			// user code begin {1}

			ivjJComboBoxSPID.addItem( STRING_NEW );
			//ivjJComboBoxSPID.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSPID;
}


/**
 * Return the JComboBoxSUB property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxSUB() {
	if (ivjJComboBoxSUB == null) {
		try {
			ivjJComboBoxSUB = new javax.swing.JComboBox();
			ivjJComboBoxSUB.setName("JComboBoxSUB");
			ivjJComboBoxSUB.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJComboBoxSUB.setEditable(true);
			// user code begin {1}

			ivjJComboBoxSUB.addItem( STRING_NEW );
			ivjJComboBoxSUB.addItem( com.cannontech.database.db.device.lm.LMGroupExpressComAddress.NONE_ADDRESS );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxSUB;
}


/**
 * Return the JLabelFeedAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelFeedAddress() {
	if (ivjJLabelFeedAddress == null) {
		try {
			ivjJLabelFeedAddress = new javax.swing.JLabel();
			ivjJLabelFeedAddress.setName("JLabelFeedAddress");
			ivjJLabelFeedAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelFeedAddress.setText("FEED Address:");
			ivjJLabelFeedAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelFeedAddress;
}


/**
 * Return the JLabelGEOAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGEOAddress() {
	if (ivjJLabelGEOAddress == null) {
		try {
			ivjJLabelGEOAddress = new javax.swing.JLabel();
			ivjJLabelGEOAddress.setName("JLabelGEOAddress");
			ivjJLabelGEOAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelGEOAddress.setText("GEO Address:");
			ivjJLabelGEOAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGEOAddress;
}


/**
 * Return the JLabelPROGAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelPROGAddress() {
	if (ivjJLabelPROGAddress == null) {
		try {
			ivjJLabelPROGAddress = new javax.swing.JLabel();
			ivjJLabelPROGAddress.setName("JLabelPROGAddress");
			ivjJLabelPROGAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelPROGAddress.setText("PROG Address:");
			ivjJLabelPROGAddress.setEnabled(true);
			ivjJLabelPROGAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelPROGAddress;
}


/**
 * Return the JLabelSPID property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSPID() {
	if (ivjJLabelSPID == null) {
		try {
			ivjJLabelSPID = new javax.swing.JLabel();
			ivjJLabelSPID.setName("JLabelSPID");
			ivjJLabelSPID.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSPID.setText("SPID Address:");
			ivjJLabelSPID.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSPID;
}


/**
 * Return the JLabelSplinter property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSplinter() {
	if (ivjJLabelSplinter == null) {
		try {
			ivjJLabelSplinter = new javax.swing.JLabel();
			ivjJLabelSplinter.setName("JLabelSplinter");
			ivjJLabelSplinter.setText("SPLINTER:");
			ivjJLabelSplinter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjJLabelSplinter.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSplinter.setEnabled(true);
			ivjJLabelSplinter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSplinter;
}


/**
 * Return the JLabelSubAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelSubAddress() {
	if (ivjJLabelSubAddress == null) {
		try {
			ivjJLabelSubAddress = new javax.swing.JLabel();
			ivjJLabelSubAddress.setName("JLabelSubAddress");
			ivjJLabelSubAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelSubAddress.setText("SUB Address:");
			ivjJLabelSubAddress.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelSubAddress;
}


/**
 * Return the JLabelUserAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelUserAddress() {
	if (ivjJLabelUserAddress == null) {
		try {
			ivjJLabelUserAddress = new javax.swing.JLabel();
			ivjJLabelUserAddress.setName("JLabelUserAddress");
			ivjJLabelUserAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelUserAddress.setText("USER Address:");
			ivjJLabelUserAddress.setEnabled(true);
			ivjJLabelUserAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelUserAddress;
}


/**
 * Return the JLabelZipAddress property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelZipAddress() {
	if (ivjJLabelZipAddress == null) {
		try {
			ivjJLabelZipAddress = new javax.swing.JLabel();
			ivjJLabelZipAddress.setName("JLabelZipAddress");
			ivjJLabelZipAddress.setText("ZIP Address:");
			ivjJLabelZipAddress.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjJLabelZipAddress.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJLabelZipAddress.setEnabled(true);
			ivjJLabelZipAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelZipAddress;
}


/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelAddress() {
	if (ivjJPanelAddress == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Addressing");
			ivjJPanelAddress = new javax.swing.JPanel();
			ivjJPanelAddress.setName("JPanelAddress");
			ivjJPanelAddress.setBorder(ivjLocalBorder);
			ivjJPanelAddress.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJTextFieldSPIDAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSPIDAddress.gridx = 2; constraintsJTextFieldSPIDAddress.gridy = 1;
			constraintsJTextFieldSPIDAddress.gridwidth = 2;
			constraintsJTextFieldSPIDAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSPIDAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSPIDAddress.weightx = 1.0;
			constraintsJTextFieldSPIDAddress.ipadx = 87;
			constraintsJTextFieldSPIDAddress.ipady = -1;
			constraintsJTextFieldSPIDAddress.insets = new java.awt.Insets(3, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldSPIDAddress(), constraintsJTextFieldSPIDAddress);

			java.awt.GridBagConstraints constraintsJLabelSPID = new java.awt.GridBagConstraints();
			constraintsJLabelSPID.gridx = 1; constraintsJLabelSPID.gridy = 1;
			constraintsJLabelSPID.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSPID.ipadx = 9;
			constraintsJLabelSPID.ipady = 4;
			constraintsJLabelSPID.insets = new java.awt.Insets(3, 11, 3, 1);
			getJPanelAddress().add(getJLabelSPID(), constraintsJLabelSPID);

			java.awt.GridBagConstraints constraintsJLabelGEOAddress = new java.awt.GridBagConstraints();
			constraintsJLabelGEOAddress.gridx = 1; constraintsJLabelGEOAddress.gridy = 2;
			constraintsJLabelGEOAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelGEOAddress.ipadx = 10;
			constraintsJLabelGEOAddress.ipady = 4;
			constraintsJLabelGEOAddress.insets = new java.awt.Insets(2, 11, 3, 1);
			getJPanelAddress().add(getJLabelGEOAddress(), constraintsJLabelGEOAddress);

			java.awt.GridBagConstraints constraintsJTextFieldGeoAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldGeoAddress.gridx = 2; constraintsJTextFieldGeoAddress.gridy = 2;
			constraintsJTextFieldGeoAddress.gridwidth = 2;
			constraintsJTextFieldGeoAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldGeoAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldGeoAddress.weightx = 1.0;
			constraintsJTextFieldGeoAddress.ipadx = 87;
			constraintsJTextFieldGeoAddress.ipady = -1;
			constraintsJTextFieldGeoAddress.insets = new java.awt.Insets(2, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldGeoAddress(), constraintsJTextFieldGeoAddress);

			java.awt.GridBagConstraints constraintsJLabelSubAddress = new java.awt.GridBagConstraints();
			constraintsJLabelSubAddress.gridx = 1; constraintsJLabelSubAddress.gridy = 3;
			constraintsJLabelSubAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSubAddress.ipadx = 12;
			constraintsJLabelSubAddress.ipady = 4;
			constraintsJLabelSubAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelSubAddress(), constraintsJLabelSubAddress);

			java.awt.GridBagConstraints constraintsJTextFieldSubAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSubAddress.gridx = 2; constraintsJTextFieldSubAddress.gridy = 3;
			constraintsJTextFieldSubAddress.gridwidth = 2;
			constraintsJTextFieldSubAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSubAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSubAddress.weightx = 1.0;
			constraintsJTextFieldSubAddress.ipadx = 87;
			constraintsJTextFieldSubAddress.ipady = -1;
			constraintsJTextFieldSubAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldSubAddress(), constraintsJTextFieldSubAddress);

			java.awt.GridBagConstraints constraintsJLabelFeedAddress = new java.awt.GridBagConstraints();
			constraintsJLabelFeedAddress.gridx = 1; constraintsJLabelFeedAddress.gridy = 4;
			constraintsJLabelFeedAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelFeedAddress.ipadx = 6;
			constraintsJLabelFeedAddress.ipady = 4;
			constraintsJLabelFeedAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelFeedAddress(), constraintsJLabelFeedAddress);

			java.awt.GridBagConstraints constraintsJTextFieldFeedAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldFeedAddress.gridx = 2; constraintsJTextFieldFeedAddress.gridy = 4;
			constraintsJTextFieldFeedAddress.gridwidth = 2;
			constraintsJTextFieldFeedAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldFeedAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldFeedAddress.weightx = 1.0;
			constraintsJTextFieldFeedAddress.ipadx = 87;
			constraintsJTextFieldFeedAddress.ipady = -1;
			constraintsJTextFieldFeedAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldFeedAddress(), constraintsJTextFieldFeedAddress);

			java.awt.GridBagConstraints constraintsJLabelZipAddress = new java.awt.GridBagConstraints();
			constraintsJLabelZipAddress.gridx = 1; constraintsJLabelZipAddress.gridy = 5;
			constraintsJLabelZipAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelZipAddress.ipadx = 17;
			constraintsJLabelZipAddress.ipady = 4;
			constraintsJLabelZipAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelZipAddress(), constraintsJLabelZipAddress);

			java.awt.GridBagConstraints constraintsJTextFieldZipAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldZipAddress.gridx = 2; constraintsJTextFieldZipAddress.gridy = 5;
			constraintsJTextFieldZipAddress.gridwidth = 2;
			constraintsJTextFieldZipAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldZipAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldZipAddress.weightx = 1.0;
			constraintsJTextFieldZipAddress.ipadx = 87;
			constraintsJTextFieldZipAddress.ipady = -1;
			constraintsJTextFieldZipAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldZipAddress(), constraintsJTextFieldZipAddress);

			java.awt.GridBagConstraints constraintsJLabelUserAddress = new java.awt.GridBagConstraints();
			constraintsJLabelUserAddress.gridx = 1; constraintsJLabelUserAddress.gridy = 6;
			constraintsJLabelUserAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelUserAddress.ipadx = 5;
			constraintsJLabelUserAddress.ipady = 4;
			constraintsJLabelUserAddress.insets = new java.awt.Insets(1, 11, 2, 1);
			getJPanelAddress().add(getJLabelUserAddress(), constraintsJLabelUserAddress);

			java.awt.GridBagConstraints constraintsJTextFieldUserAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldUserAddress.gridx = 2; constraintsJTextFieldUserAddress.gridy = 6;
			constraintsJTextFieldUserAddress.gridwidth = 2;
			constraintsJTextFieldUserAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldUserAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldUserAddress.weightx = 1.0;
			constraintsJTextFieldUserAddress.ipadx = 87;
			constraintsJTextFieldUserAddress.ipady = -1;
			constraintsJTextFieldUserAddress.insets = new java.awt.Insets(1, 1, 0, 3);
			getJPanelAddress().add(getJTextFieldUserAddress(), constraintsJTextFieldUserAddress);

			java.awt.GridBagConstraints constraintsJLabelPROGAddress = new java.awt.GridBagConstraints();
			constraintsJLabelPROGAddress.gridx = 1; constraintsJLabelPROGAddress.gridy = 7;
			constraintsJLabelPROGAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelPROGAddress.ipadx = 3;
			constraintsJLabelPROGAddress.ipady = 4;
			constraintsJLabelPROGAddress.insets = new java.awt.Insets(1, 11, 3, 1);
			getJPanelAddress().add(getJLabelPROGAddress(), constraintsJLabelPROGAddress);

			java.awt.GridBagConstraints constraintsJLabelSplinter = new java.awt.GridBagConstraints();
			constraintsJLabelSplinter.gridx = 1; constraintsJLabelSplinter.gridy = 8;
			constraintsJLabelSplinter.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelSplinter.ipadx = 28;
			constraintsJLabelSplinter.ipady = 4;
			constraintsJLabelSplinter.insets = new java.awt.Insets(1, 11, 2, 1);
			getJPanelAddress().add(getJLabelSplinter(), constraintsJLabelSplinter);

			java.awt.GridBagConstraints constraintsJTextFieldSplinter = new java.awt.GridBagConstraints();
			constraintsJTextFieldSplinter.gridx = 2; constraintsJTextFieldSplinter.gridy = 8;
			constraintsJTextFieldSplinter.gridwidth = 2;
			constraintsJTextFieldSplinter.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSplinter.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSplinter.weightx = 1.0;
			constraintsJTextFieldSplinter.ipadx = 87;
			constraintsJTextFieldSplinter.ipady = -1;
			constraintsJTextFieldSplinter.insets = new java.awt.Insets(1, 1, 0, 3);
			getJPanelAddress().add(getJTextFieldSplinter(), constraintsJTextFieldSplinter);

			java.awt.GridBagConstraints constraintsJTextFieldProgAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldProgAddress.gridx = 2; constraintsJTextFieldProgAddress.gridy = 7;
			constraintsJTextFieldProgAddress.gridwidth = 2;
			constraintsJTextFieldProgAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldProgAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldProgAddress.weightx = 1.0;
			constraintsJTextFieldProgAddress.ipadx = 87;
			constraintsJTextFieldProgAddress.ipady = -1;
			constraintsJTextFieldProgAddress.insets = new java.awt.Insets(1, 1, 1, 3);
			getJPanelAddress().add(getJTextFieldProgAddress(), constraintsJTextFieldProgAddress);

			java.awt.GridBagConstraints constraintsJTextFieldSerialAddress = new java.awt.GridBagConstraints();
			constraintsJTextFieldSerialAddress.gridx = 3; constraintsJTextFieldSerialAddress.gridy = 9;
			constraintsJTextFieldSerialAddress.gridwidth = 2;
			constraintsJTextFieldSerialAddress.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldSerialAddress.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldSerialAddress.weightx = 1.0;
			constraintsJTextFieldSerialAddress.ipadx = 182;
			constraintsJTextFieldSerialAddress.ipady = -1;
			constraintsJTextFieldSerialAddress.insets = new java.awt.Insets(1, 0, 10, 26);
			getJPanelAddress().add(getJTextFieldSerialAddress(), constraintsJTextFieldSerialAddress);

			java.awt.GridBagConstraints constraintsJCheckBoxSerial = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSerial.gridx = 1; constraintsJCheckBoxSerial.gridy = 9;
			constraintsJCheckBoxSerial.gridwidth = 2;
			constraintsJCheckBoxSerial.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSerial.ipadx = 22;
			constraintsJCheckBoxSerial.ipady = -4;
			constraintsJCheckBoxSerial.insets = new java.awt.Insets(1, 11, 10, 0);
			getJPanelAddress().add(getJCheckBoxSerial(), constraintsJCheckBoxSerial);

			java.awt.GridBagConstraints constraintsJComboBoxSPID = new java.awt.GridBagConstraints();
			constraintsJComboBoxSPID.gridx = 4; constraintsJComboBoxSPID.gridy = 1;
			constraintsJComboBoxSPID.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxSPID.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxSPID.weightx = 1.0;
			constraintsJComboBoxSPID.ipadx = 12;
			constraintsJComboBoxSPID.insets = new java.awt.Insets(3, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxSPID(), constraintsJComboBoxSPID);

			java.awt.GridBagConstraints constraintsJComboBoxGEO = new java.awt.GridBagConstraints();
			constraintsJComboBoxGEO.gridx = 4; constraintsJComboBoxGEO.gridy = 2;
			constraintsJComboBoxGEO.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxGEO.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxGEO.weightx = 1.0;
			constraintsJComboBoxGEO.ipadx = 12;
			constraintsJComboBoxGEO.insets = new java.awt.Insets(2, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxGEO(), constraintsJComboBoxGEO);

			java.awt.GridBagConstraints constraintsJComboBoxSUB = new java.awt.GridBagConstraints();
			constraintsJComboBoxSUB.gridx = 4; constraintsJComboBoxSUB.gridy = 3;
			constraintsJComboBoxSUB.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxSUB.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxSUB.weightx = 1.0;
			constraintsJComboBoxSUB.ipadx = 12;
			constraintsJComboBoxSUB.insets = new java.awt.Insets(1, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxSUB(), constraintsJComboBoxSUB);

			java.awt.GridBagConstraints constraintsJComboBoxFEED = new java.awt.GridBagConstraints();
			constraintsJComboBoxFEED.gridx = 4; constraintsJComboBoxFEED.gridy = 4;
			constraintsJComboBoxFEED.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxFEED.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxFEED.weightx = 1.0;
			constraintsJComboBoxFEED.ipadx = 12;
			constraintsJComboBoxFEED.insets = new java.awt.Insets(1, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxFEED(), constraintsJComboBoxFEED);

			java.awt.GridBagConstraints constraintsJComboBoxPROG = new java.awt.GridBagConstraints();
			constraintsJComboBoxPROG.gridx = 4; constraintsJComboBoxPROG.gridy = 7;
			constraintsJComboBoxPROG.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxPROG.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxPROG.weightx = 1.0;
			constraintsJComboBoxPROG.ipadx = 12;
			constraintsJComboBoxPROG.insets = new java.awt.Insets(1, 3, 1, 26);
			getJPanelAddress().add(getJComboBoxPROG(), constraintsJComboBoxPROG);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelAddress;
}


/**
 * Return the JPanelAddressTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelAddressTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelAddressTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelAddressTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelAddressTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelAddressTitleBorder.setTitle("Addressing");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelAddressTitleBorder;
}


/**
 * Return the JPanelAddressUsage property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelAddressUsage() {
	if (ivjJPanelAddressUsage == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Address Usage");
			ivjJPanelAddressUsage = new javax.swing.JPanel();
			ivjJPanelAddressUsage.setName("JPanelAddressUsage");
			ivjJPanelAddressUsage.setBorder(ivjLocalBorder1);
			ivjJPanelAddressUsage.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxSPID = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSPID.gridx = 1; constraintsJCheckBoxSPID.gridy = 1;
			constraintsJCheckBoxSPID.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSPID.ipadx = 3;
			constraintsJCheckBoxSPID.ipady = -4;
			constraintsJCheckBoxSPID.insets = new java.awt.Insets(3, 12, 0, 4);
			getJPanelAddressUsage().add(getJCheckBoxSPID(), constraintsJCheckBoxSPID);

			java.awt.GridBagConstraints constraintsJCheckBoxGEO = new java.awt.GridBagConstraints();
			constraintsJCheckBoxGEO.gridx = 1; constraintsJCheckBoxGEO.gridy = 2;
			constraintsJCheckBoxGEO.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxGEO.ipadx = 6;
			constraintsJCheckBoxGEO.ipady = -4;
			constraintsJCheckBoxGEO.insets = new java.awt.Insets(0, 12, 1, 3);
			getJPanelAddressUsage().add(getJCheckBoxGEO(), constraintsJCheckBoxGEO);

			java.awt.GridBagConstraints constraintsJCheckBoxSUB = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSUB.gridx = 1; constraintsJCheckBoxSUB.gridy = 3;
			constraintsJCheckBoxSUB.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSUB.ipadx = 6;
			constraintsJCheckBoxSUB.ipady = -4;
			constraintsJCheckBoxSUB.insets = new java.awt.Insets(1, 12, 0, 4);
			getJPanelAddressUsage().add(getJCheckBoxSUB(), constraintsJCheckBoxSUB);

			java.awt.GridBagConstraints constraintsJCheckBoxFEED = new java.awt.GridBagConstraints();
			constraintsJCheckBoxFEED.gridx = 1; constraintsJCheckBoxFEED.gridy = 4;
			constraintsJCheckBoxFEED.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxFEED.ipadx = 2;
			constraintsJCheckBoxFEED.ipady = -4;
			constraintsJCheckBoxFEED.insets = new java.awt.Insets(0, 12, 10, 1);
			getJPanelAddressUsage().add(getJCheckBoxFEED(), constraintsJCheckBoxFEED);

			java.awt.GridBagConstraints constraintsJCheckBoxZIP = new java.awt.GridBagConstraints();
			constraintsJCheckBoxZIP.gridx = 2; constraintsJCheckBoxZIP.gridy = 1;
			constraintsJCheckBoxZIP.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxZIP.ipady = -4;
			constraintsJCheckBoxZIP.insets = new java.awt.Insets(3, 2, 0, 2);
			getJPanelAddressUsage().add(getJCheckBoxZIP(), constraintsJCheckBoxZIP);

			java.awt.GridBagConstraints constraintsJCheckBoxSPLINTER = new java.awt.GridBagConstraints();
			constraintsJCheckBoxSPLINTER.gridx = 2; constraintsJCheckBoxSPLINTER.gridy = 4;
			constraintsJCheckBoxSPLINTER.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxSPLINTER.ipady = -4;
			constraintsJCheckBoxSPLINTER.insets = new java.awt.Insets(0, 2, 10, 5);
			getJPanelAddressUsage().add(getJCheckBoxSPLINTER(), constraintsJCheckBoxSPLINTER);

			java.awt.GridBagConstraints constraintsJCheckBoxPROG = new java.awt.GridBagConstraints();
			constraintsJCheckBoxPROG.gridx = 2; constraintsJCheckBoxPROG.gridy = 3;
			constraintsJCheckBoxPROG.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxPROG.ipady = -4;
			constraintsJCheckBoxPROG.insets = new java.awt.Insets(1, 2, 0, 2);
			getJPanelAddressUsage().add(getJCheckBoxPROG(), constraintsJCheckBoxPROG);

			java.awt.GridBagConstraints constraintsJCheckBoxUSER = new java.awt.GridBagConstraints();
			constraintsJCheckBoxUSER.gridx = 2; constraintsJCheckBoxUSER.gridy = 2;
			constraintsJCheckBoxUSER.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxUSER.ipady = -4;
			constraintsJCheckBoxUSER.insets = new java.awt.Insets(0, 2, 1, 2);
			getJPanelAddressUsage().add(getJCheckBoxUSER(), constraintsJCheckBoxUSER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelAddressUsage;
}



/**
 * Return the JPanelAddressUsageTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelAddressUsageTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelAddressUsageTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelAddressUsageTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelAddressUsageTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelAddressUsageTitleBorder.setTitle("Address Usage");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelAddressUsageTitleBorder;
}


/**
 * Return the JPanelRelayUsage property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelRelayUsage() {
	if (ivjJPanelRelayUsage == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder2.setTitle("Relay Usage");
			ivjJPanelRelayUsage = new javax.swing.JPanel();
			ivjJPanelRelayUsage.setName("JPanelRelayUsage");
			ivjJPanelRelayUsage.setBorder(ivjLocalBorder2);
			ivjJPanelRelayUsage.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxRelay1 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay1.gridx = 1; constraintsJCheckBoxRelay1.gridy = 1;
			constraintsJCheckBoxRelay1.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay1.ipady = -4;
			constraintsJCheckBoxRelay1.insets = new java.awt.Insets(3, 11, 19, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay1(), constraintsJCheckBoxRelay1);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay2 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay2.gridx = 1; constraintsJCheckBoxRelay2.gridy = 1;
			constraintsJCheckBoxRelay2.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay2.ipady = -4;
			constraintsJCheckBoxRelay2.insets = new java.awt.Insets(25, 11, 0, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay2(), constraintsJCheckBoxRelay2);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay3 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay3.gridx = 1; constraintsJCheckBoxRelay3.gridy = 2;
			constraintsJCheckBoxRelay3.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay3.ipady = -4;
			constraintsJCheckBoxRelay3.insets = new java.awt.Insets(0, 11, 1, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay3(), constraintsJCheckBoxRelay3);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay4 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay4.gridx = 1; constraintsJCheckBoxRelay4.gridy = 3;
			constraintsJCheckBoxRelay4.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay4.ipady = -4;
			constraintsJCheckBoxRelay4.insets = new java.awt.Insets(2, 11, 9, 8);
			getJPanelRelayUsage().add(getJCheckBoxRelay4(), constraintsJCheckBoxRelay4);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay5 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay5.gridx = 2; constraintsJCheckBoxRelay5.gridy = 1;
			constraintsJCheckBoxRelay5.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay5.ipady = -4;
			constraintsJCheckBoxRelay5.insets = new java.awt.Insets(3, 9, 19, 15);
			getJPanelRelayUsage().add(getJCheckBoxRelay5(), constraintsJCheckBoxRelay5);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay6 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay6.gridx = 2; constraintsJCheckBoxRelay6.gridy = 1;
			constraintsJCheckBoxRelay6.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay6.ipady = -4;
			constraintsJCheckBoxRelay6.insets = new java.awt.Insets(25, 9, 0, 15);
			getJPanelRelayUsage().add(getJCheckBoxRelay6(), constraintsJCheckBoxRelay6);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay7 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay7.gridx = 2; constraintsJCheckBoxRelay7.gridy = 2;
			constraintsJCheckBoxRelay7.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay7.ipady = -4;
			constraintsJCheckBoxRelay7.insets = new java.awt.Insets(0, 9, 1, 15);
			getJPanelRelayUsage().add(getJCheckBoxRelay7(), constraintsJCheckBoxRelay7);

			java.awt.GridBagConstraints constraintsJCheckBoxRelay8 = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRelay8.gridx = 2; constraintsJCheckBoxRelay8.gridy = 3;
			constraintsJCheckBoxRelay8.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRelay8.ipady = -4;
			constraintsJCheckBoxRelay8.insets = new java.awt.Insets(2, 9, 9, 15);
			getJPanelRelayUsage().add(getJCheckBoxRelay8(), constraintsJCheckBoxRelay8);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelRelayUsage;
}



/**
 * Return the JPanelRelayUsageTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelRelayUsageTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelRelayUsageTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelRelayUsageTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelRelayUsageTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelRelayUsageTitleBorder.setTitle("Relay Usage");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelRelayUsageTitleBorder;
}


/**
 * Return the JTextFieldFeedAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldFeedAddress() {
	if (ivjJTextFieldFeedAddress == null) {
		try {
			ivjJTextFieldFeedAddress = new javax.swing.JTextField();
			ivjJTextFieldFeedAddress.setName("JTextFieldFeedAddress");
			ivjJTextFieldFeedAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldFeedAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldFeedAddress;
}


/**
 * Return the JTextFieldGeoAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldGeoAddress() {
	if (ivjJTextFieldGeoAddress == null) {
		try {
			ivjJTextFieldGeoAddress = new javax.swing.JTextField();
			ivjJTextFieldGeoAddress.setName("JTextFieldGeoAddress");
			ivjJTextFieldGeoAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldGeoAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldGeoAddress;
}


/**
 * Return the JTextFieldProgAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldProgAddress() {
	if (ivjJTextFieldProgAddress == null) {
		try {
			ivjJTextFieldProgAddress = new javax.swing.JTextField();
			ivjJTextFieldProgAddress.setName("JTextFieldProgAddress");
			ivjJTextFieldProgAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldProgAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 254) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldProgAddress;
}


/**
 * Return the JTextFieldSPID511 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSerialAddress() {
	if (ivjJTextFieldSerialAddress == null) {
		try {
			ivjJTextFieldSerialAddress = new javax.swing.JTextField();
			ivjJTextFieldSerialAddress.setName("JTextFieldSerialAddress");
			ivjJTextFieldSerialAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldSerialAddress.setEnabled(false);
			ivjJTextFieldSerialAddress.setEditable(true);
			// user code begin {1}

			ivjJTextFieldSerialAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 999999999) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSerialAddress;
}


/**
 * Return the JTextFieldSPIDAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSPIDAddress() {
	if (ivjJTextFieldSPIDAddress == null) {
		try {
			ivjJTextFieldSPIDAddress = new javax.swing.JTextField();
			ivjJTextFieldSPIDAddress.setName("JTextFieldSPIDAddress");
			ivjJTextFieldSPIDAddress.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldSPIDAddress.setText("1");
			// user code begin {1}

			ivjJTextFieldSPIDAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(1, 65534) );
			ivjJTextFieldSPIDAddress.setText("1");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSPIDAddress;
}


/**
 * Return the JTextFieldSplinter property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSplinter() {
	if (ivjJTextFieldSplinter == null) {
		try {
			ivjJTextFieldSplinter = new javax.swing.JTextField();
			ivjJTextFieldSplinter.setName("JTextFieldSplinter");
			ivjJTextFieldSplinter.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldSplinter.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 254) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSplinter;
}


/**
 * Return the JTextFieldSubAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldSubAddress() {
	if (ivjJTextFieldSubAddress == null) {
		try {
			ivjJTextFieldSubAddress = new javax.swing.JTextField();
			ivjJTextFieldSubAddress.setName("JTextFieldSubAddress");
			ivjJTextFieldSubAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldSubAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldSubAddress;
}


/**
 * Return the JTextFieldUserAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldUserAddress() {
	if (ivjJTextFieldUserAddress == null) {
		try {
			ivjJTextFieldUserAddress = new javax.swing.JTextField();
			ivjJTextFieldUserAddress.setName("JTextFieldUserAddress");
			ivjJTextFieldUserAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldUserAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 65534) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldUserAddress;
}


/**
 * Return the JTextFieldZipAddress property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldZipAddress() {
	if (ivjJTextFieldZipAddress == null) {
		try {
			ivjJTextFieldZipAddress = new javax.swing.JTextField();
			ivjJTextFieldZipAddress.setName("JTextFieldZipAddress");
			ivjJTextFieldZipAddress.setFont(new java.awt.Font("dialog", 0, 10));
			// user code begin {1}

			ivjJTextFieldZipAddress.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(0, 16777214) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldZipAddress;
}


/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
	com.cannontech.database.data.device.lm.LMGroupExpressCom group = null;
	
	if( o instanceof com.cannontech.database.data.multi.MultiDBPersistent )
	{
		group = (com.cannontech.database.data.device.lm.LMGroupExpressCom)
					com.cannontech.database.data.multi.MultiDBPersistent.getFirstObjectOfType(
								com.cannontech.database.data.device.lm.LMGroupExpressCom.class,
								(com.cannontech.database.data.multi.MultiDBPersistent)o );
	}
	else if( o instanceof com.cannontech.database.data.multi.SmartMultiDBPersistent )
		group = (com.cannontech.database.data.device.lm.LMGroupExpressCom)
					((com.cannontech.database.data.multi.SmartMultiDBPersistent)o).getOwnerDBPersistent();
	
	
	if( o instanceof com.cannontech.database.data.device.lm.LMGroupExpressCom || group != null )
	{
		if( group == null )
			group = (com.cannontech.database.data.device.lm.LMGroupExpressCom) o;

		group.setServiceProviderAddress( createAddress(
				getJComboBoxSPID(), 
				getJTextFieldSPIDAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_SERVICE) );

		group.setFeederAddress( createAddress(
				getJComboBoxFEED(), 
				getJTextFieldFeedAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_FEEDER) );
		
		group.setSubstationAddress( createAddress(
				getJComboBoxSUB(), 
				getJTextFieldSubAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_SUBSTATION) );

		group.setGeoAddress( createAddress(
				getJComboBoxGEO(), 
				getJTextFieldGeoAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_GEO) );

		group.setProgramAddress( createAddress(
				getJComboBoxPROG(), 
				getJTextFieldProgAddress(), 
				com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_PROGRAM) );


		if( getJTextFieldSplinter().getText() != null && getJTextFieldSplinter().getText().length() > 0 )
			group.getLMGroupExpressComm().setSplinterAddress( new Integer(getJTextFieldSplinter().getText()) );
      else
         group.getLMGroupExpressComm().setSplinterAddress( LMGroupExpressComAddress.NONE_ADDRESS_ID );

		if( getJTextFieldUserAddress().getText() != null && getJTextFieldUserAddress().getText().length() > 0 )			
			group.getLMGroupExpressComm().setUdAddress( new Integer(getJTextFieldUserAddress().getText()) );
      else
         group.getLMGroupExpressComm().setUdAddress( LMGroupExpressComAddress.NONE_ADDRESS_ID );

		if( getJTextFieldZipAddress().getText() != null && getJTextFieldZipAddress().getText().length() > 0 )		
			group.getLMGroupExpressComm().setZipCodeAddress( new Integer(getJTextFieldZipAddress().getText()) );
      else
         group.getLMGroupExpressComm().setZipCodeAddress( LMGroupExpressComAddress.NONE_ADDRESS_ID );

		if( getJCheckBoxSerial().isSelected() 
			 && getJTextFieldSerialAddress().getText() != null 
			 && getJTextFieldSerialAddress().getText().length() > 0 )
		{
			group.getLMGroupExpressComm().setSerialNumber( getJTextFieldSerialAddress().getText() );
		}
      else
         group.getLMGroupExpressComm().setSerialNumber( LMGroupExpressComAddress.NONE_ADDRESS_ID.toString() );
         
		StringBuffer addressUsage = new StringBuffer();
		StringBuffer relayUsage = new StringBuffer();

		//get our address usage
      if( getJCheckBoxSPID().isSelected() )
         addressUsage.append( 'S' );
       
      if( getJCheckBoxGEO().isSelected() )
         addressUsage.append( 'G' );

      if( getJCheckBoxSUB().isSelected() )
         addressUsage.append( 'B' );

      if( getJCheckBoxFEED().isSelected() )
         addressUsage.append( 'F' );

      if( getJCheckBoxZIP().isSelected() )
         addressUsage.append( 'Z' );

      if( getJCheckBoxUSER().isSelected() )
         addressUsage.append( 'U' );

      if( getJCheckBoxPROG().isSelected() )
         addressUsage.append( 'P' );

      if( getJCheckBoxSPLINTER().isSelected() )
         addressUsage.append( 'R' );

		//get our relay usage
      if( getJCheckBoxRelay1().isSelected() )
         relayUsage.append( '1' );

      if( getJCheckBoxRelay2().isSelected() )
         relayUsage.append( '2' );

      if( getJCheckBoxRelay3().isSelected() )
         relayUsage.append( '3' );

      if( getJCheckBoxRelay4().isSelected() )
         relayUsage.append( '4' );

      if( getJCheckBoxRelay5().isSelected() )
         relayUsage.append( '5' );

      if( getJCheckBoxRelay6().isSelected() )
         relayUsage.append( '6' );

      if( getJCheckBoxRelay7().isSelected() )
         relayUsage.append( '7' );

      if( getJCheckBoxRelay8().isSelected() )
         relayUsage.append( '8' );


		group.getLMGroupExpressComm().setAddressUsage( addressUsage.toString() );
		group.getLMGroupExpressComm().setRelayUsage( relayUsage.toString() );
	}

	
	return o;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Insert the method's description here.
 * Creation date: (6/5/2002 11:40:07 AM)
 */
private void initAddressJComboBoxes() 
{
	//init SPIDS
	com.cannontech.database.db.device.lm.LMGroupExpressComAddress[] addresses = 
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress.getAllExpressCommAddressWithNames();

	for( int i = 0; i < addresses.length; i++ )
		if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_SERVICE) )
			getJComboBoxSPID().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_GEO) )
			getJComboBoxGEO().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_SUBSTATION) )
			getJComboBoxSUB().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_FEEDER) )
			getJComboBoxFEED().addItem( addresses[i] );
		else if( addresses[i].getAddressType().equalsIgnoreCase(com.cannontech.database.db.device.lm.LMGroupExpressComAddress.TYPE_PROGRAM) )
			getJComboBoxPROG().addItem( addresses[i] );
		else
		{
			com.cannontech.clientutils.CTILogger.info("********************************");

			com.cannontech.clientutils.CTILogger.info("*** Found an ExpressCommAddress that is not recognized '" 
						+ addresses[i].getAddressType() + "' in " + this.getClass().getName() );
			
			com.cannontech.clientutils.CTILogger.info("********************************");
		}

}


/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	// user code end
	getJComboBoxSPID().addActionListener(this);
	getJComboBoxGEO().addActionListener(this);
	getJComboBoxSUB().addActionListener(this);
	getJComboBoxFEED().addActionListener(this);
	getJComboBoxPROG().addActionListener(this);
	getJTextFieldZipAddress().addCaretListener(this);
	getJTextFieldSPIDAddress().addCaretListener(this);
	getJTextFieldGeoAddress().addCaretListener(this);
	getJTextFieldFeedAddress().addCaretListener(this);
	getJTextFieldProgAddress().addCaretListener(this);
	getJTextFieldSerialAddress().addCaretListener(this);
	getJCheckBoxSerial().addActionListener(this);
	getJCheckBoxRelay5().addActionListener(this);
	getJCheckBoxRelay6().addActionListener(this);
	getJCheckBoxRelay7().addActionListener(this);
	getJCheckBoxRelay8().addActionListener(this);
	getJCheckBoxRelay4().addActionListener(this);
	getJCheckBoxRelay3().addActionListener(this);
	getJCheckBoxRelay2().addActionListener(this);
	getJCheckBoxRelay1().addActionListener(this);
	getJCheckBoxSPLINTER().addActionListener(this);
	getJCheckBoxPROG().addActionListener(this);
	getJCheckBoxUSER().addActionListener(this);
	getJCheckBoxZIP().addActionListener(this);
	getJCheckBoxFEED().addActionListener(this);
	getJCheckBoxSUB().addActionListener(this);
	getJCheckBoxGEO().addActionListener(this);
}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMGroupExpressComEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(357, 352);

		java.awt.GridBagConstraints constraintsJPanelAddress = new java.awt.GridBagConstraints();
		constraintsJPanelAddress.gridx = 1; constraintsJPanelAddress.gridy = 1;
		constraintsJPanelAddress.gridwidth = 2;
		constraintsJPanelAddress.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelAddress.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelAddress.weightx = 1.0;
		constraintsJPanelAddress.weighty = 1.0;
		constraintsJPanelAddress.ipadx = -10;
		constraintsJPanelAddress.ipady = -9;
		constraintsJPanelAddress.insets = new java.awt.Insets(4, 5, 2, 6);
		add(getJPanelAddress(), constraintsJPanelAddress);

		java.awt.GridBagConstraints constraintsJPanelAddressUsage = new java.awt.GridBagConstraints();
		constraintsJPanelAddressUsage.gridx = 1; constraintsJPanelAddressUsage.gridy = 2;
		constraintsJPanelAddressUsage.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelAddressUsage.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelAddressUsage.weightx = 1.0;
		constraintsJPanelAddressUsage.weighty = 1.0;
		constraintsJPanelAddressUsage.ipadx = -10;
		constraintsJPanelAddressUsage.ipady = -13;
		constraintsJPanelAddressUsage.insets = new java.awt.Insets(2, 5, 8, 2);
		add(getJPanelAddressUsage(), constraintsJPanelAddressUsage);

		java.awt.GridBagConstraints constraintsJPanelRelayUsage = new java.awt.GridBagConstraints();
		constraintsJPanelRelayUsage.gridx = 2; constraintsJPanelRelayUsage.gridy = 2;
		constraintsJPanelRelayUsage.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelRelayUsage.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelRelayUsage.weightx = 1.0;
		constraintsJPanelRelayUsage.weighty = 1.0;
		constraintsJPanelRelayUsage.ipadx = -10;
		constraintsJPanelRelayUsage.ipady = -15;
		constraintsJPanelRelayUsage.insets = new java.awt.Insets(2, 2, 8, 6);
		add(getJPanelRelayUsage(), constraintsJPanelRelayUsage);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	initAddressJComboBoxes();
	
	// user code end
}




/**
 * This method must be implemented if a notion of data validity needs to be supported.
 * @return boolean
 */
public boolean isInputValid() 
{
	if( getJTextFieldSPIDAddress().getText() == null 
		 || getJTextFieldSPIDAddress().getText().length() <= 0
		 || Integer.parseInt(getJTextFieldSPIDAddress().getText()) <= 0 )
	{
		setErrorString("The SPID address must be 1 or greater");
		return false;
	}

	return true;
}


/**
 * Comment
 */
public void jCheckBoxSerial_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	for( int i = 0; i < getJPanelAddress().getComponentCount(); i++ )
	{
		java.awt.Component c = getJPanelAddress().getComponent(i);

		if( c.equals( getJTextFieldSerialAddress() ) )
		{
			c.setEnabled( getJCheckBoxSerial().isSelected() );
		}
		else if ( c.equals( getJCheckBoxSerial() ) )
		{
			//do nothing
		}
		else
			c.setEnabled( !(getJCheckBoxSerial().isSelected()) );
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxFEED_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxFEED().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxFEED().getSelectedItem();

		getJTextFieldFeedAddress().setText( selected.getAddress().toString() );

		getJComboBoxFEED().setEditable(false);
	}
	else
	{
		getJComboBoxFEED().setEditable(true);
		getJComboBoxFEED().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxGEO_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxGEO().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxGEO().getSelectedItem();

		getJTextFieldGeoAddress().setText( selected.getAddress().toString() );
		
		getJComboBoxGEO().setEditable(false);
	}
	else
	{
		getJComboBoxGEO().setEditable(true);
		getJComboBoxGEO().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxPROG_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxPROG().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxPROG().getSelectedItem();

		getJTextFieldProgAddress().setText( selected.getAddress().toString() );

		getJComboBoxPROG().setEditable(false);
	}
	else
	{
		getJComboBoxPROG().setEditable(true);
		getJComboBoxPROG().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxSPID_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxSPID().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxSPID().getSelectedItem();

		getJTextFieldSPIDAddress().setText( selected.getAddress().toString() );
		
		getJComboBoxSPID().setEditable(false);
	}
	else
	{
		getJComboBoxSPID().setEditable(true);
		getJComboBoxSPID().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxSUB_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	if( getJComboBoxSUB().getSelectedItem() instanceof com.cannontech.database.db.device.lm.LMGroupExpressComAddress )
	{
		com.cannontech.database.db.device.lm.LMGroupExpressComAddress selected =
				(com.cannontech.database.db.device.lm.LMGroupExpressComAddress)getJComboBoxSUB().getSelectedItem();

		getJTextFieldSubAddress().setText( selected.getAddress().toString() );

		getJComboBoxSUB().setEditable(false);
	}
	else
	{
		getJComboBoxSUB().setEditable(true);
		getJComboBoxSUB().getEditor().selectAll();
	}

	fireInputUpdate();

	return;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame = new java.awt.Frame();
		LMGroupExpressComEditorPanel aGroupTypePanel;
		aGroupTypePanel = new LMGroupExpressComEditorPanel();
		frame.add("Center", aGroupTypePanel);
		frame.setSize(aGroupTypePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main()");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
	if( o instanceof com.cannontech.database.data.device.lm.LMGroupExpressCom )
	{
		com.cannontech.database.data.device.lm.LMGroupExpressCom group = (com.cannontech.database.data.device.lm.LMGroupExpressCom) o;

		getJComboBoxSPID().setSelectedItem( group.getServiceProviderAddress() );
		getJTextFieldSPIDAddress().setText( group.getServiceProviderAddress().getAddress().toString() );

		getJComboBoxGEO().setSelectedItem( group.getGeoAddress() );
		getJTextFieldGeoAddress().setText( group.getGeoAddress().getAddress().toString() );

		getJComboBoxFEED().setSelectedItem( group.getFeederAddress() );
		getJTextFieldFeedAddress().setText( group.getFeederAddress().getAddress().toString() );

		getJComboBoxSUB().setSelectedItem( group.getSubstationAddress() );
		getJTextFieldSubAddress().setText( group.getSubstationAddress().getAddress().toString() );

		getJComboBoxPROG().setSelectedItem( group.getProgramAddress() );
		getJTextFieldProgAddress().setText( group.getProgramAddress().getAddress().toString() );


		getJTextFieldZipAddress().setText( group.getLMGroupExpressComm().getZipCodeAddress().toString() );

		getJTextFieldUserAddress().setText( group.getLMGroupExpressComm().getUdAddress().toString() );

		getJTextFieldSplinter().setText( group.getLMGroupExpressComm().getSplinterAddress().toString() );

		
		Integer serial = new Integer(group.getLMGroupExpressComm().getSerialNumber());
		if( serial.intValue() > LMGroupExpressComAddress.NONE_ADDRESS_ID.intValue() )
		{
			getJCheckBoxSerial().doClick();
			getJTextFieldSerialAddress().setText( serial.toString() );
		}

		//set our address usage
		String addUsage = group.getLMGroupExpressComm().getAddressUsage();
		getJCheckBoxSPID().setSelected( addUsage.indexOf("S") >= 0 );
		getJCheckBoxGEO().setSelected( addUsage.indexOf("G") >= 0 );
		getJCheckBoxSUB().setSelected( addUsage.indexOf("B") >= 0 );
		getJCheckBoxFEED().setSelected( addUsage.indexOf("F") >= 0 );
		getJCheckBoxZIP().setSelected( addUsage.indexOf("Z") >= 0 );
		getJCheckBoxUSER().setSelected( addUsage.indexOf("U") >= 0 );
		getJCheckBoxPROG().setSelected( addUsage.indexOf("P") >= 0 );
		getJCheckBoxSPLINTER().setSelected( addUsage.indexOf("R") >= 0 );


		//set our relay usage
		String relayUsage = group.getLMGroupExpressComm().getRelayUsage();
		getJCheckBoxRelay1().setSelected( relayUsage.indexOf("1") >= 0 );
		getJCheckBoxRelay2().setSelected( relayUsage.indexOf("2") >= 0 );
		getJCheckBoxRelay3().setSelected( relayUsage.indexOf("3") >= 0 );
		getJCheckBoxRelay4().setSelected( relayUsage.indexOf("4") >= 0 );
		getJCheckBoxRelay5().setSelected( relayUsage.indexOf("5") >= 0 );
		getJCheckBoxRelay6().setSelected( relayUsage.indexOf("6") >= 0 );
		getJCheckBoxRelay7().setSelected( relayUsage.indexOf("7") >= 0 );
		getJCheckBoxRelay8().setSelected( relayUsage.indexOf("8") >= 0 );
	}


}
}
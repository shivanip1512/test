package com.cannontech.dbeditor.wizard.device.lmgroup;
/**
 * This type was created in VisualAge.
 */
import com.cannontech.common.gui.util.LineLabel;

public class LMGroupExpressStatEditorPanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, java.awt.event.MouseListener {
	private javax.swing.JButton ivjJButtonDeltasAbsolute = null;
	private javax.swing.JButton ivjJButtonFahrenheitCelsius = null;
	private javax.swing.JCheckBox ivjJCheckBoxCoolMode = null;
	private javax.swing.JCheckBox ivjJCheckBoxDeltaB = null;
	private javax.swing.JCheckBox ivjJCheckBoxDeltaD = null;
	private javax.swing.JCheckBox ivjJCheckBoxDeltaF = null;
	private javax.swing.JCheckBox ivjJCheckBoxHeatMode = null;
	private javax.swing.JCheckBox ivjJCheckBoxMax = null;
	private javax.swing.JPanel ivjJPanelData = null;
	private javax.swing.JTable ivjJTableCurve = null;
	private javax.swing.JTextField ivjJTextFieldDeltaD = null;
	private javax.swing.JTextField ivjJTextFieldDeltaF = null;
	private javax.swing.JTextField ivjJTextFieldMax = null;
	private javax.swing.JTextField ivjJTextFieldRand = null;
	private javax.swing.JPanel ivjJPanelDataChanges = null;
	private javax.swing.JScrollPane ivjJScrollPaneJTable = null;
	private javax.swing.JCheckBox ivjJCheckBoxTa = null;
	private javax.swing.JCheckBox ivjJCheckBoxTb = null;
	private javax.swing.JCheckBox ivjJCheckBoxTc = null;
	private javax.swing.JCheckBox ivjJCheckBoxTd = null;
	private javax.swing.JCheckBox ivjJCheckBoxTe = null;
	private javax.swing.JCheckBox ivjJCheckBoxTf = null;
	private javax.swing.JPanel ivjJPanelTable = null;
	private javax.swing.JTextField ivjJTextFieldTa = null;
	private javax.swing.JTextField ivjJTextFieldTb = null;
	private javax.swing.JTextField ivjJTextFieldTc = null;
	private javax.swing.JTextField ivjJTextFieldTd = null;
	private javax.swing.JTextField ivjJTextFieldTe = null;
	private javax.swing.JTextField ivjJTextFieldTf = null;
	private javax.swing.JCheckBox ivjJCheckBoxMin = null;
	private javax.swing.JCheckBox ivjJCheckBoxRand = null;
	private javax.swing.JTextField ivjJTextFieldMin = null;
	private javax.swing.JTextField ivjJTextFieldDeltaB = null;
	public boolean isAbsolute = false;
	public boolean isCelsius = false;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public LMGroupExpressStatEditorPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJButtonFahrenheitCelsius()) 
		connEtoC2(e);
	if (e.getSource() == getJButtonDeltasAbsolute()) 
		connEtoC3(e);
		
	// user code begin {2}

	//takes care of the actions of the statEditorPanel for ThermostatGears
	if (e.getSource() == getJCheckBoxCoolMode() || e.getSource() == getJCheckBoxDeltaB() 
		|| e.getSource() == getJCheckBoxDeltaD() || e.getSource() == getJCheckBoxDeltaF() 
		|| e.getSource() == getJCheckBoxHeatMode() || e.getSource() == getJCheckBoxMax() 
		|| e.getSource() == getJCheckBoxMin() || e.getSource() == getJCheckBoxRand() 
		|| e.getSource() == getJCheckBoxTa() || e.getSource() == getJCheckBoxTb() 
		|| e.getSource() == getJCheckBoxTc() || e.getSource() == getJCheckBoxTd() 
		|| e.getSource() == getJCheckBoxTe() || e.getSource() == getJCheckBoxTf())
		fireInputUpdate();
	// user code end
}


/**
 * connEtoC2:  (JButtonFahrenheitCelsius.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jButtonFahrenheitCelsius_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonFahrenheitCelsius_ActionPerformed(arg1);
		// user code begin {2}
		fireInputUpdate();
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JButtonDeltasAbsolute.action.actionPerformed(java.awt.event.ActionEvent) --> LMGroupExpressComEditorPanel.jButtonDeltasAbsolute_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonDeltasAbsolute_ActionPerformed(arg1);
		// user code begin {2}
		fireInputUpdate();
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JTableCurve.mouse.mouseClicked(java.awt.event.MouseEvent) --> LMGroupExpressComEditorPanel.jTableCurve_MouseClicked(Ljava.awt.event.MouseEvent;)V)
 * @param arg1 java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.MouseEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jTableCurve_MouseClicked(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		fireInputUpdate();
		// user code end
		handleException(ivjExc);
	}
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G7DDD78ACGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8FDCD447353FE9C86A2F61A5362529CDE8CA927B7B612BEDE86BEBE89F6D4F3626A58DFDB5D123A6B4A18929A4B109B6A4A1090997D8F4919090840C28282828489FC5C540047F22C1A5C214C422AC6C95D6175D6D6EC5D6C4734E7C3DFF76AE381A3CE77249715E791E19F34E4C1C19B9B3776EC548DE9F14941F10AD8871C9827DEFDF3CA078CF9004CF7FD66FE018F1C61DD1D07C3781A8D3F8BB
	57G57BC60051D29B7E6889FD9D126E2C8479C2CB76642FD1650E68D99029BAFFA4683EF577A0E95236BF9F61069D90653D94529F0C5054AG6BG8A824A90F69467D15C8D6995749ED1FC02A0B89EC5F97E7F69BC859ECD73B5822F93A87BB1142739B81F72C381C3F9E6206B23A46FE238A6E36BEE292A24793A3E9DA0447EA5A7A18D69D248E7547598A9BB0EDE8B04FBF0C3A48A81760F61DA53F63E6F03DE7BC0C92F49E6335BA431373F445CA31AAD125DD9B2E499B6B94DA5E6710225D7AC318E74B96D03
	0E2A2A56A38751CD135B6194DD2EF649A4B5617CEDA61BE885198BF1DD1EBFED44FA20AE109E1909304F4F20762B007BD6A073CCD61FC753EA283D81678304287B133D56E75ACCD20F6819F2FDDA17589383E6A179F65CBF28DCA1243B0008AD8F96B3DB664EE23698CE213C99336B0CC5C03533997E8846BBA16DG9ABF1B59F8E0AB333173527D4234C3D38C69DEEC8C1ACDEC8B1FAD5B68BFE732E1B576A15B907283436320972886289BE89CD090509A6C3B5BAEEC07EBDD0F54E09F98305B6A9C0EFA2B59F9
	44EE962DF0DFD5859C0A9D97FB6DCE33A0907FFC71F4310EBD0CC29FD77BA6A2D23713827327A9476F92EAE35EC9CA52295B5459F98991D4C65463F25D726620F6FB94772DG77289C320760FF47F81782A7FD550BF1141600B7F78EEB674E954C16D6436DC2C6F9F542B29DDBA67E21AC21E6AE3121E32EEC8BE963760B280D47819E88B495A882E881D06ABC56462E8B3B47EA63C3B09E1CB61335FD3047E1F2CA7503962BD9F452369EAC9E2D2D7508143B5967F224DD02F7AB7BA87217D53A6D92993CBE21E8
	9EE90F5AF9F23B905DE1DEF5F74F73740D953C8F5DF8CCC873C89FA6F27C9B9877D36024EF17E39C27019787C472FF5805FD61892D0FFC04F169892D0FBCFA0A7908BF709682117EDDB40C66490EA7E10C820D878A821A8694893470C956473F3BD0FA156328CD513F246C50D08EDCC53764B49D3239A4132DD7BCE1F2DACCBDD651A550BC630610EDBD2AF23760715D8BBA8E0AB651E912ACF69BC8B78D0860CCAE12677621CC1447A9E2EE07E5C0848583E851A37CBB073260EAB53924CF9CE613A44AB9887F1E
	A1649397CCA7C0A288C0FD9D095AAB7E8C1A67B2603EB81235553A910479C1BAB012354BEA77CA38FE844EADDA2B2A9AAD3D488C1373A27351B9F8EC06C0FE775F6B0C15CF313179CAA7734146349F884533776B7AA076432708BF45BE25754167306C7C27E16E836AFA1A2D2D16B31DBE0C094A27547E0AECE57748E67D31778D1FF4AC5324939577C9BA79C9FB7BDFC6759B01FACD848AFD1A357999F7817145FA13CBE45EF74C890EA31A659EA0F93BAE2235C53CA05A24C651A15A4CF06322FD5FFBB1D9764B
	33F66EB3960C23F92A819C4745F17B45CC02038C2517B37E90661BA449E969991444F6D112AC36BE397C97589617EA8AF4513A5EFE8555F58654B186A80E5755B81C25702FD63B7D7C2023830D9C6A27B371FA1C9AD5E7AC0CE27DFF65940A35DAF8FABCCE4B7C0CD323759DAA674B1C2A6F9F5BC65511F89D72E59DCDDDECEECC229841BF4638836AB191E89A2F779CEE13324C755861E953422FD4877109F7063D7BF442A5FD1FB6DE5277699517C677591CCBFABECBF8EBAF217A5907EC0AB13071921A8FFB6D
	B61B0887A2AFA210D879953CD13058AC52C90B39CF145AAD43A24C334FA0DF4E43F3EE8C745762A8B6CF8EEDE273E461707704E9E7329374622909BF5E1D50718C715B7EE764F9125834E9847903E8958720219A6C03B6094606F8BE2738AB91E3776C7DB5AADBF438FED0126C36E6D3BF0C76FE51A2B508D617E550D5EC4255AAA117B651F9566E9C904DC567CC97CCA526A12984F7CBC99DE6B7217BED85BBF7FED0B0EA24DFFC4E0B36B3F59AB52D5E75D4EFBB312D1C7ADD16501170CBE5BD9AC52BE4F25575
	386CD668652F3492EAD53E56E097353F2C7BCEE2BF1E6C9A861D974462817B20CBAC417FB6D8AD3D67BDADBE02F8D7EF30AC7B4C9125D42D0D32D8E462EE36BE7D7E8B64D763415F820126BE43666C9F0FA0BE1B33694254E037DA4910GDE5E33485FF33A3395BE9C718C59872F607C7AB178B62FFCE247F7AEE72031AB7EEBD004108B5575A371A20D1BFEF0F92506F742E49D146331FBAF2740552AD8EF889EF0C5FFAC5DF5852DB167397CFB2EAC95D0DCC5E412319FE2C2B29DCE4BGAC4FE881257B79970B
	157B79EE289B5A7B8741F5AA907107998DA8CED577A704220A6E1C789C12655745767D91D0B69A48709C1157789CE99B122F65F316AF9A520B1F137365C7AB73AD66792C007B8185C713FC51B4DF5173A8DF699936AFAE65D8B346DE058560E1835BFB9C49D01EB7F49CFCD6F7FF0875BDCF4F9B1E576E495E90105CA040C31EE7BE177705B2CE28F3396C3D969C9253FE7B73974A390EE091DFAC076BD90B53857BB33368E6FD7F589748D694B3D318765FCFF69C90BC77G248BD89856B00447C9073D81427696
	F01F863E941C3008689809344365E665B9C5D87A060494AF6DB01D56BFDA518EEDF3A69B08CDBF28C2FBCF3D3317DEECE4C95F2025E4D03220605CA4411A68981448698AB94F6858E92475AB7C87BB37382D8C6F2DA0AD81798311BD54CFF1DC0172CE82AC92080C430FCA1463B0FBBE4463C05D73196FE6FF3E8B2E3E4F392C5D7FF56CA0DC3F24B502367FFDD935EC1C7C6CF621660B04843DB3187169298952FC526E01736576DF7C5EE4C34612498652AE7F7A1C35CB8C64A908E16D9235DC2FDDBA01CF6AD5
	F422D12E57F5AD9B440E4D27199DD650B189084CAF63331473CBA460428B90AF83D53E407A487F74CE387A344270F171C266DED40FEBDACD783951AE653CB0AD2AC0B74EC15476826987738B5AF9610984644B63G8FF8014D8BC704CC453CF09CC62249568733B90FA5711C8573B6CDAF41F5427336405639DC836A47E010B99DA892A896A87BC526635678B14FFF1A5C231C7FFC3AD3FB16D271223C87E9F951F3BFC24EBA1610F17A2276ACA5399C61569735E7A95FAEE37B059160C53D4876853F6C526AEFFC
	C92D33DB13A665FE6FD1EE1DA66D27A9C77CA53DFDB51B3310EB38CBDCC390F3D7D551D8CDE0675C3565CA3F8DFC096C712641F556CB6CBC769BA5C6EA4F021758B945C092DA338A975499EB01BA01A42009C0D30166AEE07DB6BBDEEFBED7771B3749DC5E7B1236987A7C5A5A70960FF25AB60CDB20AEC76A1D1B026A0D4E36B3DEE67D3843634C766AEC586FD1CEEB037432DEBF1E3B14275F0FF8A6A0FD782FEEE59F7A031CD020C82005AF33BE1C16056A328A48788ADB03FED50DFD9852FEC0012F303E7D69
	D214F7AA24273F427AF197BE63E7E33C4DEE31C9FCFCBF1D0062B03B5352E731B1AC9AE33DF6A75E3891EC3D417B1EF20BC1FFCFD9EC505FD36EB20CFECED2E5703667A4E79A8E3CA64F027A45G912C33941FF33C8AE360D5565FC965781C032753F19A2DB1A47D7D32CE4A574E9FDF86919DA1D847751EE7F82335D87643B96938BDDDAE510587A40AE4A8EF3E34CA5059EF9FB58D08825B8B3E5815CC73B4C97606DD5CFFDF5B6645FFF100C4FC53DD4E66176ED719EFA6A6A35F1C88699020F05E7E5FAC510E
	23A860455276B7AE746C87FAEE16645D772EA4697B1EDF9272F917FD5059ABEA7D6B3624BC4E13E72CC312B8001A056EE3F0F949646C93BD7C73EEDC1E703C151F14644D07C91B7F6CF3E51B6F667E121F22BD974B07F6A923ED532853C608BAF5F0ABE063B4B8515DF3DA293B0277F7DF53DA7D7EEE6FF5426E94753A40561E14D46D5A0346D5G688BDE48662D495D48B7D05CBEEDA1730D19AB11EF44C1BAE3D11D31E891730D0732D03DEB974976F640FD7FA2357DA3101E2040A641FDA8CDC750EB94DCE3B5
	65483A3F3D8669B67E132C7B719C5F0D71EC85CE620130EA760C33GF8FE7FE47369AF16A24C4D7D61D7B8FD11376FB7F7227953EA3AE89F04093663B5A46B1E1D2C3DE2C00EGD891D04DEBE44DA66D7F73A154D6E71D2681E876F60758AB144562E72D252CECA0648F811A813490490DE57169ED3B51DE0D0CCCBC7C29BFDDAED70EB9B764770F155BA6A856DB6CF4890F61293124CD52B87EAD0C4FD560242D12B10E520B01577FBA1B176F417147ACC847F06CD90CAD06F46A9B8CBB48676FBC0EFD10424A76
	F36C1B989B0134BF4796E0ECA224C3B816F781E153A19D45310949CCC7AC47D2CEA22C714DBAE3571B4CEF9BD29106572EB7195F3662E7A941101E86B477CD6637BF6BE66D3B90B0C39C589FA737E9B15C574669796241ACA42FA3CE9B1BFE0CF1F31CB6B61D3712452692706646B17B6763582066AD08635EE2D8CDB6422C101E4031EFE1EC922443B876A446E6C0BA06E3D78E603E01F47E5B8CFB84E3E510EE65D8DEA6423AA16D6658B90C79C3BA18E3FB2BD81B07F16CE4B54222A0AD3C435A318CED77D93C
	25387FC335AF4F112EED0DFE72AB55C17A6FCFBB59DC128DF5EEFD070D7972EE940B73B997ED832B2A8EBAAD66FAD3DFAB1EC108CF2E40E3861577FB0779E4CD8912998669D9C08B5EE1E7626EAD6C6CE44A7F3DDDE89DD7257B0EC7D447068443E2FAC635D85EAB864D19ECA0BA3FD74AF41A019F3898E1FFACD56E5911BF2640BFA5F0A57C57D5FC348622FD304C5FDA2664A3FB9FC9D072BFD571139465C95D9E594C6A367811C0417A9FC5DE5FDF0926F5B23ECB2EE53F59A8049DF6A4929F8C40F1CBAD70BA
	5EE5FE99017D528DE9FF0EFDF40079EF483B4CD7EFCAC6733170DE1D31G2896488CB49EA878BD16E7824EB38D52D16F1173C3F456A8ACA171BD0DC7133BB5B6A3996CDE20F2157C02772EAED62D253648BE3E5DC3D70A269F13B5FC3D672E5E46D01AC2CE1670891E0F87ECA2EC9AAD3D95CBD0BB7E997B6FA3C005CB581A75D6890A47A5885E5CCB50BBE179385A11B87F695246D1F4A6D23D091442208C22D55497E6407D92788F5D937DD6EC53FC24DF28277A6FC9D16BBF0C42CCDA0744D454BE83A637E5E0
	F0GBF04A2F25660352182E454F2B92597D07D9DCE712C68F40AE672480A66EF416B1095723A01C85D9EC89E2BEE0C12F46AB68964303A917D9BCFE2DBADB60D2DD5F8ED8B017CE1C0448FDAD21571C08C600B01B2626B312F94522B67FA15570D661ACA60A33DEBB8DE02F13782A7735DF13CDE22F4A87082926A69F8FA8847040EC440929936560430E0C84F605810092D5F519CFBAE010D45B80E55FF46566F96832B6311AC542FDDBCFD92275159BCC9BF3D72FA67FBA4FB74B5A56E3AF50C36E7A47D7EDE96
	3AB78DCA7663228B3A9D1D4CB03F4B4DE6B10CE4E0FE5A1E0D5E336935DB8787EC6DA2FD5AD4E7355A07C4B3ABE74BE6F37E94DE6E5EEC94DB1A2C16BE9BFABA70A94B7BEB1CF79A641B45737EB39B696C03852C41EE35BB79B8D83E8A3F7419D4EFCCCDE2F93FF7GBD13F0755B07DA6CCE4B305DA6192C2D961B6822E59EB840ECA963E51EBD60FD2C3D0373B7C25EB61E3FB4D3E5FBA74BFB9047AAA310EF824FFBD3A6FA9EE6C12F22750AD6EB3B43548B01B849FF974EBF8D72C6G11387CC8950B4BE381B3
	AE2DB7968135G75AFE5B2ED55280ECE7B10C7039339632BD99D47AFE57E9A61F15EF9B5F3F0267044B5164B7258170FC5E46C2FAEC5E3BCF0E93DE6BF359163418A1C4C8975A5AC861A8A3C3CE575744C2AB28335638824A78205G058345G990C75F44F553C2CCC9863AC32436EE895AF08D6451192295FDD2557769E606F1731D8E36AEF6E94C2EF0D0977768CAA4FC86603CAFA8D8F5D08F1D23FC7B2D17D7A016787948CB48DE8965082DE3F5B1795137A2147E5F512E46A6D47CF62D8655043B199C61BC3
	62DFBFA9C7FB4D9E3B939FD0103D66C37B19DF8A49504EC0EDC0E6209A7E4C6939EA4FBD6A5B552C5C8864C5FB54G388653F2E46D6AB9F035EB9722E9D0F69650E66AEBB14932CF90BBE68E239871F0C33F58FB3E5E6EEE91CD921946A87F334FD47C863B5D2A624FDE0356C55D3798F89E6306BCB90F4773B13A5EAF43FA787E39215FE46B9365731A7F5A1E427964F9B7F9067527E4E53C9ACB5BAAFFF9BDFD46F522D00FDF86FCF20E7256C93DF314C660F7AEE7F348D3A5683AD55CCA7DB2E8C879AC28F279
	962F4F029C4B09BF7A51EB60CB9B290C3F1DD24A4838ABA3A15E0B0CB0DAB61CDE519EE1BD36CB9014AF7213982ABADB60636719D4B6FE72FFF20750B8A7A6FE13979D0B296C5694D9C7455638A4D27F1BD3F07DDDDB290EDF20AE277D12F6811D455B4421827E942D5182C3843D2CD934FFCFF1412EBD5B18EDE539F239FFCB3E7AF26DF9F27D6EDCAD4BA8A9399A99A4CEB90363C6BF28DFE08A0BDDFE0E3190C8CF67D8758A7C0E932405D406792FE0F1CFF6AADBA356F523F3BBB3247D0082012682C5GC583
	AD864ACE2BB79683B582F581C9C07EE92CFC85AE0F1EF3CE82ECBAD0B410E1C53D31902891488C6487B489E8BAD0B410A11D156FBCB3C3279F119EE59A5966ED2EB0D3FB112D484EC01D3C51941B6AC58E2B13B79D59347E3E2D07F76856ADD7139EEDFF047745C069F41C683D634776CC5AFD97A364E8EBC65101662BD5D7D9AFE6D31690590D6AF1C1F4CA16DE13159C6C561B1CEDF62B2577A20DC95E44B17A8E2042F4B687D51810BD7DBCCE5316E4F1D59B0E5BBF846A0632848B42D89024272433BD505B89
	D7330EA4516BDCA837GE895CD8B9975C6E45F812E77BC5E8724821E1741EC3EFBAB1E3365676EEC5CE6235FFCA80E38CBC81E123ACFBA0E1DB95E54FE683326B3F52D2DE79A0E35FEF264E8BBEB3BDB3211BDE7CDD697DADB7466C07AAED2F681150F678408D89CF69BFA325FF12C8D649EBAF874C853518EB21F44674B65868F2CD21703G3A64220862C51E67CF8714B6909925EBE599E919234CC965FB4A0B77D7EE9B4D7653199B74EDEFEDEA6E100D673A6FDCA717AD2E4A9FC5F7F1C159B6F22E642AE2B1
	EFA37495B9773937CAFB2E741020BC971AD925BDD70AD771132A3567CA2571CA7E3EEA6D3992ABCFEC7FD13532DD49BC309E3D2AC56F0B9477ADA5DF7D192469AB55C1E24E3A8C6F4F55DAB2741F2B9D4D50FF265B11B17AFB42DD995E5F936E4DD03EA7CCE266336BD1FF0D00FFCC848A831A81941D416265C5999B859CAF6B444ACD66BE74DC8F7D12C4E27AE7E5FA2F6B1319E37F7EA49A6FA3FB6C90C28EA0798CFFB1937F2E4A6E40A041DE4DC4ED64347475CBA4AB45DF47FBC82BF89643E4CFF4FF955B93
	89197546CAA0B2674DDF0B4EBD755EDB13DFD86B30C8D6311E067E743D07177858F200ACF2CE3C9ABF478A0674B42039C0C477469A26FBA1E0C5AB6B69730FF3B5CCC677CAA6E3A24EBB9152A1C061C01EF348428F75B0B2CF2423E9054E679F1CD8A368BEE7E4D1BE2D4B3B496C59F294376D354D8C4B4BE2D8F9A7FBC72FAD0B59FBFA95FE779652C1C021D9EC2F993681BF73007402AC66CB372EC4EB498953B94FB79681ECF35A9D30DCDEA4A8FE8B167A68034885E95FC62C5C6CCD86F864E12866311EF3E2
	2F54E16A63BE7E6CA6348626E6C35B83358219015CC09300A6810582C5GC583AD864AD8857199D0A5D08BD09710E3952B47386CED235403BED4408343E9A26F0010396FC22A7E99496DA4E6857993D731B5B5BC55F35F78B4FF969C3E0A6C9B23609A8B044E3AC93963AB744F104E1158B6275ED81043E2037BD70C969BA4A98879C1AB146B4EA1FBCC6433D20EF60FF93B836F6D642758E439677C3F2C40F182733E0EDE0AEF3E24464D94BFDE2B46D9DCD1308C795C618E18C91AAD22555CA192FCD32D86B793
	7CBFD7E8F03A273FB42016EF22726B5DEA3C07629FB6297133EC4F3ADFA37FAC411FAF5660BD84FFEC1786B711BD2C25C63B07C57DBAAE076DF11FBD2E478F607CD7CE697103B97F3E4F157C309C420F667C9D277478F11CDF234BCF4DE57CE33A7A8BB8FFE33A9E3F0273E72C506337F0FE64FEBD7DDD1C9FE45663BBB8BF30CB0F6F174B465C8A93BA7BD2452B32AF171CE8BA5EF128212E75CCFB4371E32D2D75F5474F9CED8210146DB36D9A25EC4B316307BEBBF6344333B40B6F9EC6430A7A535C84B43FFB
	0B6FF61795976CAB5B2693DB0E36AEAC5802D2F40DA812F57DEA655568A231123B4A5773BDB2DF5A56FB0F8986570F9D93DCD90F5F1907353C6322033E77F373FA7CBE5D5933AE11479E6357E7F06C102B4D6E3220F3E0E27BE41FEDA7659E3C46F28BFDAEC74EF47F8D479093F335E73DF7E2FCD22E762CF7BDFFF7A684F859F96C5C2028665A6C5EFB0D656CBE17A375CABD001FEB65E96B3B8A63FEF95A7A5E43E32989400B6575CDD82E545F391A1CC5D869F55CEA4F33897A7CE83332DCG4D97CC2FE1DE4B
	6D6D5456F706A2EF34CEB9D22FF5B9783D2C5524DE2BB93E9B63956F4BB8292F9947D7A86DGDE4D9A96037CFE8312497781A4DC2263A0FC831A6750EF7BAC90888C631F1F34C3C6DB9F613F31497BF8FCF7535863F1E921FE0C1EDA689923E7966A476839054A981DE07905A856C04F34BAF93E8D9C7B14E3DB8A59332F139633544F71E2EC9742DBC424103F870B6D9A42D8A74576A930CFA9D6D308669428F23F1D3F0FDBD7081EE91E35D82DA45D0473D8ECB0457076B80CED34B8CC8A3B0FF18C596D7D9C60
	4729D7FB8EC07CE1D99A73FFE3FE3D31B61F4566475258DE421D4FE2734BB8EF8824430122727576924C0E1BD694685B21BACB71ED4D59358D2730FDC1B56CB9E99C37F9F5BB434A56B2ECF397437A5732BD5A66A2553BBB0A773BD984C54A4E7B1C6DD902383C1ED38C1B4BB19747B256B16C56D3CCEF8B47BECDE758B80EAD63D8A847322A183C059C1BE3E6D851FA064D6C626F702EE77356F72B85014DA9010A7B4D7F836FE3FD70BF20E3658139CEEB947713EA3EFA5D3F7DCAF510E7862B1763F7A221BF03
	573367886330DF07C1BA02E34F3733E78BF3B9163E85E1C585304FACE018F899E12D106E6258DFAE33327D9CBB02776221100E6058337C9D2A05854C3F8AF3D0CCDB3B81648139018200C200A200E200040D909F83D5G3581D9B732327BF15971108E868A870A81B2EE02FDB4D08BD0BF50F820E020F02018CD2C6C39D55394ED55C5F5A179FCBD24774896F4F5EF707E7C403AD11F07EC8F20F53926BE54142B5068A1F579212AAEE8CEC26B2772B9C5963D26A84AF953395A8B0E764EE8DEC99B256CE824FD0F
	C57B4C0254A5AD6D5A623BB557D82E4367F2A49EDA0457AEE321B6AEFC9B6359055A3870E63EAE96G4F2F1079610FF1DC9AD3C87AF5B13DE6EC266FE1ED76965FEDEBC765AAA93F15DE3B69D572DAEEBB7EAD5AF84A8F245790FA1D6E355CD32A5FDF4D5564DBGE9E10B1EEF761DD2164B5664A902F40DEEB9372ADC1BA60F9952EE5DF23761F27E1497C42FD369B5FC0B377A1DCEC765A2A9FFA13D9A3612EB5ED6EF65D2F139E24A2F25578EFA6D77DAAECF357F9A51641BG69C9DB756A97E9D6168B556409
	00F414EE39392A5FA046EA72980B6A0D79C5EA0CFEDFE1B90EAF6DB6091C53B56375248C72569431F3096F372B5F1F7C84BDD6236FEFAEEE9F6B8CCF791E08769DC7EB9199C7EFADD93204685A32C5EDCF8DDE235C104F0F5BB3F2D9ED0FFB07EC4FB317C733E7599876CC859DEF02AD32BD66CE4FF350CB1D6C9CF4DA91B9871D8B578568FE89FBFF662DB15F1FC9D658E15886EB60B67939E771B6E207FC36F9AC974D797C6C8F3F81D3CFF953AD1E3CC64A5B536C49EB263C1F62738AB90AA5CC7AFCF0178E2F
	11702A2CBA3CFA42FB7503D4253EA3969BFDFFA7DD0D1B5C847F7645B4A5FE5CE4B373BA1F322FD069A1CC7AFE6076B4958F8472F2C1719A9E7A49A3FD0FE7B0C7FB46077A2CF29BBF83DC2547EF657C2DCDFA7CEE4E7F23D5FB4607789267BF1823479F4F798343FA7CC04EBF182827BF0473EFCD5263CF677C1F27687167F27EFDA9FA7A97F0FED62A9EDF584E78AF68723337337570CD54B5F44E42D9687D7FC97B6A63717B3ED29DA4868E437B4CA228EF6DF67E5EB30E0BDBA15D45316FA6617723A1BD0EE3
	F1C9ACFE7667D8EDBB13974931FBB1968369B80EEDFA9F175D81737C8E060DFF1F49AB62D8DD9713676658FD987303F4G47DE43E71E41108E65D8E78113B71DE32FFF4E4AE697B32CED8D574B3159783D8DB7247DB9F665942BC79047D67132D3B9768FDE563013E1F71CE2ED1A4731CADE3618E3EF7132A39C3B6F94EB03899CCB44ED908869A99CFBF7BBFE979852B3B856330369086458E0BA13D7DC423047B1D68969960E3D003F295B85E9AB470E8EB0F9EE0EED627242B9660731D9100E66D8EFA24262A0
	EDACE5D8F8A2FF070CE325D52C2C19E3D119DCAF478E1BD9DB05F36CB5B32BC7A4475A0A78BE0FE355DD2CECED9943DE65ED5A4131DF71BE6A67584FF89F0582C656740F51560F4E67D2BBBA23D2BDA3E806G21E8E31D53E232EEACAEA8077F4B50E18FA9AB214FDF517B87764AF2BE3D6C1B1C3F6FC3E569737BCE965FC7000D06F2F62672D2A7BB772AA9E767DECF13EFFBC25A9FE8D2392F4F50AD7BF18A4B1F12434EFB42384EE59C0B655869A606956FE2585BD6F65EE36658ABB98C8B645824E1064D6258
	15C4A6AFF5B743FE1B4430C60E4524B0EC04E373D2183C299CBB1C4A30859CABC8E3D8E1850B6D1E4EC1FBD849EE37F6D89CE88527FD61DFA577E34581F50CF8984F2FDDA0231F4B7977A4F50C789BFC36C5E23374253E44E65A98F1E2059C33D2BF2911ED8BEDD75B76DFF82E1E84E5C238EDD56F2BED93BE10ED7B517BE35916B20AEDD19E36ED7AD0366D57DDEA5B7E06476782A89347EDDBDE20366D11DA59B6FB41D836250DE2DB519E59B622FF9D7E1EF5856035FB58BB81FDEB465ACFA8F5B8209C5301F8
	FE107E91DC1770785D15037CCB342187886C37986F61798671A76CE16FAE7EBF3CA684C1FA8A3725F8CCDB14FD912931E521429622A37D94533B186B8D45D86ADED84776B23D4746542B744F163DEA3DDDFB35FAB7F23D7DFB597C7ACA1D6C976FEB7C220C4C651057EFAF730B6C9DEA3F48EC107D62620E317CC2398F7458F36D557AECC523EC5B4B69EA5B92B3701A8CE5A238ED42005A3613CD32ED6240757C3EF03107ED434D32EDF7EBEC7BB9DE230D7BA0965A47EC9BCED45B76430332EDCFA70EE5DB7AA8
	36B56EA3B135BC1EBA71BA5F86F857BE66CBEFE60E65CBCA9D7E7B543E9434CF6BCBAEB37325A97B188F670B783C995261DCEFDF51D8FA156D9E27511BDA2955EB6EE2FA73AA195EBC9CFB9621F4A5537B57B1470E52974D15EA3DEE8F3DF378DC61D74976B013BD1E3DDE5D7E6341EBAC772BD357F606F9BFFE069DD029BD431C027120CA6D99667327D80CB385F8997BD9FDFF1E0374CB7B497951F8FA8D2457107DDE4F4EF0396914BF17DE97502BD0652DDCEF93AA17CD79C574DAC32FEDDE4BAD31AA5B492C
	49670634FF155E5959EBB94AF2C11ABCD3A19D2EDBEE723032DC24A64FC2C89B2A754A5D1C084A65D1DEB13D5652EBC735377A7DA189156B277C91FA1DC02F133C16FBB985158B257C88FA0D2257D82F651ECAD1564FD8234E178F69329A3D7A9DD37D7638D113279352D65DF21BD5E77563B4F982A09D2C41687BC40711BB1179761BC93E457887BE92787D83C7E4B9396F7BA6673123321CDFFFAC4B193F5EB7B9730F4BF20EFEA24BE9DC33D1DF0E9944587BC0D0999564FDDFB1F2C216378AFF8BDCF28E0A04
	775127B2AF79CB50F571B3D95E960D2E4E95B22F78CB50152E781D58FE0D2E8B0A5F02AD5A6EDBDF7CC071FBB07CDA851573F72BEFF2B6654BF26EDAAF4BB919681B1CBBB748F20C05321CD919575F06BB946F7FFD4B2CEE436FECD578E151756BFA24C816F729CB2D6B139219776FDF02EF38CBE5F92FFC46F45179DB71BE40AF9477AF0D7A4D7A6BA5226350012F7EACB2BC071DA30555703320DC0405C3FAAE479EF763FDA02497F32C7AA2BB27B19E6067D2DCDEA7477CB0E6063444310F707EFFBC24A7F2AC
	A405491B443161A6A6AF16E3CFE2CC78G620F8F98D63C8EE105102E60583757B1F9359C4B99E0E5A7F0CC645F1B1A44312E9CF65E944B3165392C9E468F99F66EB4AB1B4F315CE1D6564A31E9432CCD47F1CCB8474A86F0ECD182AB9B4D313B92D99B44F16C9D0C99EAE19FD14B4FB687F1BEC8D7F26C0703CCC7A34766A5B1F9819C2B425F0A8C02F488478E8EA1ECBA24E7F1EC4A90139745B1C3AA13D7D6475B94E3B510EE65586EAB886B063403E3932FB0F9A39CFBBD05150D605854E12E17E33FCDE1EDD5
	D64F3033292C9E0D9C1B414BF6F26C3B292CECB047EA52D81B06F16CE9DEF686477E036BADE8E0FB653B95E7114D396ABDDF97761B8A48DB5B4076FCAF3B55FB3E5F6173C832BFB9FE51177D2883E4A25AA450EFC2417DBB7479A4117D4CAE59363BF3B47BD16C679320CCA0372DC773AD9CC305EC5B1FD3FCB997535A9661E15B56BD32ED7FECD25BE6ECC6364D05B2515C3606F51A6F746C15ED8BDE674B391856366C46FA633B54B6227FC3BCD794GDE5C48760EA323FE0BC8FB5E5355A86BC0BC8724516F67
	643D6337F2585EF124116DD9F7E3FF710774C42E7726533E1C7704EB74C6FA682D9DE6FAE3385E97B09687E9C393531BFB4E17BDFAC513DAEFCB13D66F7B09CCEFC7939BBB6EFD328F2CB428FD20480067DCA43709794031C1358F5CDDA97B4054C1DF3EC9217501A05001FEC0AB7B676F764B36FD3CD4EDDB9F1EB327C019D0EE5B69A135ED4FD449367DF14817B3B02DEDB1CD64EFAC4A3625AB4E14C7D25536FD874FEF31D0C6E8E6369D3E2236ED57815936872E78F2EE2B352D8CF4248B2AF3DBB27F835E52
	4CFC6911E1DF4EED5D4DEADF72EF567A52BFD218AFCDECE6BEFC87569B8C6929DC6F7CB175AA5BBDDA23B74EC3EFD8AA53EBB848740AF86D4806F441C126770DB175AAFD316D20DA2F7920D66FD33C3E0E03EC6CBC20B83B7F0B7BEA778A5E3F5971D82DFCDF52A04B7EB04537FD48470D321CD045F9E841BA5F647C6320AC27D331077F34747A637EDBBF12655D1B235EE3949C13F927CFDF3F2E06B6D95E49E1352E9F9D17F931166B577557F6D9DEF922DAD705E2FFDFBC68DBDF741C147BE21662AC20FA48B7
	B9EFFEA64B696B1765EC3D621B1CEFD9E4B90B4E4BF202072F3F8D3387E4F96F26285B70D63B4C1B7EA5681A6A10654DCCD56BDA63D2703E84DD9FC8323C57F93D485F6E7DF3461F60E64A4BC212A4AC173F0DA489CB494714DCCEA11DEBBE04FFDE92F5E1F7D562F377A7A68806C342D272F31BC302817DE666101004FFD2F3C8C8146C8EB72AA37A598E7E9C83B281242D747CBDDF5D6D7366CCB953181DA0A40040FE11C8C89AC2BF2241B2502B49E7DC7F922E8886D5AAC11043CF3C1F5764F18AAB54DF5308
	7FF16E4D99F76C9ECC00B8D3D8FA56E4F5741BC0937EF3962DC2CA8FB6DEF4C2DEC94840FF1723944A166232552DC2C22FCB925648F8AF428997FDACCE04AC49E61373BC1600CCD9FECAC8BE6B6C6B418AA4A161D473A9D00BD3081D5AAAAC177A51378A5082AD89393268B6748BED4A28460D00968541017F63556C817ABECF217F62F9435CAC10B5853D13371467C15372B7F89E64ABE8ADCF60A5BD73A04A23F993A5A199FD222BGFD038B6E51673870BDB4F51A4AC19F3AF74FBFA21EBA61CA94169E92D623
	9825DDF4621FFD09E674FDAD7A77B41B05E4877AFB8468BBFE60C3AEFCC9F2C9972D509F59E70F233FBF6512C4F39D7BC199F440AA52CA689B8825ADA6D73F041E61C2539BEC68AFFF8AAB895BEA32751512DF1711760B2FAB40AD349C5755A9E4E1FB111492AEA56BBF53B7EFB89C9D1AA8A4B48B4B2DF613395954AB591D0704E48906062B5FEEB53B9D9F56E2C1C63CADC6213F81442D6155C715ADC12FA8F0234F3BFF681F9613568CCD69F68A25B8A76A58921E435C50EFF202AA51F9C8C2FF49546EAC643C
	1B56C9DB7EFAB037ABC1082715C4DD733E5BA1A1979E30D8AF22510A27835CE96BA0C9FEC04687AFEA0C12E6280F74444B8F5F77E44D4285A02C19BABE1814A167BABAB850A3BAEF1D723D35A981D137A10B9D35ECE40164E449E93239509F5D8161851ABAB396B73D643B8F17FDEF725B1FE15365221230DE7674BE51BED0DAF7762C45A6F28150E3A0FEAD970F7214E8722CF4FFFB556159CBFA40439A05440132B27CEFB97EF7977A379CA36598A95F855D36D09875BFAD5F4D6A0C5D92A7B6A39FF2233B0DEE
	0F811248E720BC8FF7C3E83E275FA03800779ECAEDC27FECC57F9461C25B713FBBFD369D15AA55583CC7EDB3BBD490B83A198EF3E4FF0EA4E49EC75F402BAAA8AF106C85FB776C593DC79292BBFA2B3CF14CDEB922D70E49AB2747AB67EC550D5C4A0764D60ED7E63E11EDEE5337B97EC6367924AFB68BDEECCE7434794B3774345AD2C46BEFCCCB452F0D25D6FDCBEF68D1665277D8630DEC7330EC33723F9BFAE63869EBB3B30C7F5A0C37BB54FEF083DBFA27FE1B9AE1E7C023091D653BAAD1C0D13EEB1FA498
	71BE37203EEAF4FE63987CE66027AB2315DDFBA0D6B19C31583CB0CCEEAF71CD927AB9538D9D61CC769CDF713C57EFD01BC374ED3E21673187FD3179FFF54C7D4EF34C49C78AB714258FFDEDAC0D503774069EE5B33F06236C894F88670637799959E6FE706755667FD5AF0ED1DBFA830F37D7BDA31C9B5452B73C4CE16C3B7B5B3ED0FE5BBF6E16E5DE7FBE0050CD5E1B4D6E163F3BCF3ECD3AA88FD5298DF0EBB77B36D7DD9E7A9B585E3EF15ABEE032C2A4E4BDDFE7B3236F1D56DF14C4797B3FEF64A179AE16
	07B269373D72105D6794E57E9BD0CB8788F6AAA5CA93AAGG3410GGD0CB818294G94G88G88G7DDD78ACF6AAA5CA93AAGG3410GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGCDAAGGGG
**end of data**/
}


/**
 * Return the JButtonDeltasAbsolute property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JButton getJButtonDeltasAbsolute() {
	if (ivjJButtonDeltasAbsolute == null) {
		try {
			ivjJButtonDeltasAbsolute = new javax.swing.JButton();
			ivjJButtonDeltasAbsolute.setName("JButtonDeltasAbsolute");
			ivjJButtonDeltasAbsolute.setMnemonic('s');
			ivjJButtonDeltasAbsolute.setText("Deltas");
			ivjJButtonDeltasAbsolute.setMaximumSize(new java.awt.Dimension(95, 25));
			ivjJButtonDeltasAbsolute.setPreferredSize(new java.awt.Dimension(95, 25));
			ivjJButtonDeltasAbsolute.setMinimumSize(new java.awt.Dimension(95, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonDeltasAbsolute;
}


/**
 * Return the JButtonFahrenheitCelsius property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JButton getJButtonFahrenheitCelsius() {
	if (ivjJButtonFahrenheitCelsius == null) {
		try {
			ivjJButtonFahrenheitCelsius = new javax.swing.JButton();
			ivjJButtonFahrenheitCelsius.setName("JButtonFahrenheitCelsius");
			ivjJButtonFahrenheitCelsius.setMnemonic('e');
			ivjJButtonFahrenheitCelsius.setText("Fahrenheit");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonFahrenheitCelsius;
}


/**
 * Return the JCheckBoxCoolMode property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxCoolMode() {
	if (ivjJCheckBoxCoolMode == null) {
		try {
			ivjJCheckBoxCoolMode = new javax.swing.JCheckBox();
			ivjJCheckBoxCoolMode.setName("JCheckBoxCoolMode");
			ivjJCheckBoxCoolMode.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxCoolMode.setText("Cool Mode");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxCoolMode;
}


/**
 * Return the JCheckBoxDeltaB property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxDeltaB() {
	if (ivjJCheckBoxDeltaB == null) {
		try {
			ivjJCheckBoxDeltaB = new javax.swing.JCheckBox();
			ivjJCheckBoxDeltaB.setName("JCheckBoxDeltaB");
			ivjJCheckBoxDeltaB.setToolTipText("Range: -128 to 127");
			ivjJCheckBoxDeltaB.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxDeltaB.setText("Delta B:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDeltaB;
}


/**
 * Return the JCheckBoxDeltaD property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxDeltaD() {
	if (ivjJCheckBoxDeltaD == null) {
		try {
			ivjJCheckBoxDeltaD = new javax.swing.JCheckBox();
			ivjJCheckBoxDeltaD.setName("JCheckBoxDeltaD");
			ivjJCheckBoxDeltaD.setToolTipText("Range: -128 to 127");
			ivjJCheckBoxDeltaD.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxDeltaD.setText("Delta D:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDeltaD;
}


/**
 * Return the JCheckBoxDeltaF property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxDeltaF() {
	if (ivjJCheckBoxDeltaF == null) {
		try {
			ivjJCheckBoxDeltaF = new javax.swing.JCheckBox();
			ivjJCheckBoxDeltaF.setName("JCheckBoxDeltaF");
			ivjJCheckBoxDeltaF.setToolTipText("Range: -128 to 127");
			ivjJCheckBoxDeltaF.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxDeltaF.setText("Delta F:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDeltaF;
}


/**
 * Return the JCheckBoxHeatMode property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxHeatMode() {
	if (ivjJCheckBoxHeatMode == null) {
		try {
			ivjJCheckBoxHeatMode = new javax.swing.JCheckBox();
			ivjJCheckBoxHeatMode.setName("JCheckBoxHeatMode");
			ivjJCheckBoxHeatMode.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxHeatMode.setText("Heat Mode");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxHeatMode;
}


/**
 * Return the JCheckBoxMax property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxMax() {
	if (ivjJCheckBoxMax == null) {
		try {
			ivjJCheckBoxMax = new javax.swing.JCheckBox();
			ivjJCheckBoxMax.setName("JCheckBoxMax");
			ivjJCheckBoxMax.setToolTipText("Range: 1 to 255");
			ivjJCheckBoxMax.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxMax.setText("Max:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxMax;
}


/**
 * Return the JCheckBoxMin5 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxMin() {
	if (ivjJCheckBoxMin == null) {
		try {
			ivjJCheckBoxMin = new javax.swing.JCheckBox();
			ivjJCheckBoxMin.setName("JCheckBoxMin");
			ivjJCheckBoxMin.setToolTipText("Range: 1 to 255");
			ivjJCheckBoxMin.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxMin.setText("Min:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxMin;
}


/**
 * Return the JCheckBoxMin3 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxRand() {
	if (ivjJCheckBoxRand == null) {
		try {
			ivjJCheckBoxRand = new javax.swing.JCheckBox();
			ivjJCheckBoxRand.setName("JCheckBoxRand");
			ivjJCheckBoxRand.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxRand.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxRand.setText("Rand:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxRand;
}


/**
 * Return the JCheckBoxTa property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTa() {
	if (ivjJCheckBoxTa == null) {
		try {
			ivjJCheckBoxTa = new javax.swing.JCheckBox();
			ivjJCheckBoxTa.setName("JCheckBoxTa");
			ivjJCheckBoxTa.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTa.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTa.setText("Ta:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTa;
}


/**
 * Return the JCheckBoxTb property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTb() {
	if (ivjJCheckBoxTb == null) {
		try {
			ivjJCheckBoxTb = new javax.swing.JCheckBox();
			ivjJCheckBoxTb.setName("JCheckBoxTb");
			ivjJCheckBoxTb.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTb.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTb.setText("Tb:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTb;
}


/**
 * Return the JCheckBoxTc property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTc() {
	if (ivjJCheckBoxTc == null) {
		try {
			ivjJCheckBoxTc = new javax.swing.JCheckBox();
			ivjJCheckBoxTc.setName("JCheckBoxTc");
			ivjJCheckBoxTc.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTc.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTc.setText("Tc:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTc;
}


/**
 * Return the JCheckBoxTd property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTd() {
	if (ivjJCheckBoxTd == null) {
		try {
			ivjJCheckBoxTd = new javax.swing.JCheckBox();
			ivjJCheckBoxTd.setName("JCheckBoxTd");
			ivjJCheckBoxTd.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTd.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTd.setText("Td:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTd;
}


/**
 * Return the JCheckBoxTe property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTe() {
	if (ivjJCheckBoxTe == null) {
		try {
			ivjJCheckBoxTe = new javax.swing.JCheckBox();
			ivjJCheckBoxTe.setName("JCheckBoxTe");
			ivjJCheckBoxTe.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTe.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTe.setText("Te:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTe;
}


/**
 * Return the JCheckBoxTf property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JCheckBox getJCheckBoxTf() {
	if (ivjJCheckBoxTf == null) {
		try {
			ivjJCheckBoxTf = new javax.swing.JCheckBox();
			ivjJCheckBoxTf.setName("JCheckBoxTf");
			ivjJCheckBoxTf.setToolTipText("Range: 1 to 65535");
			ivjJCheckBoxTf.setFont(new java.awt.Font("Arial", 1, 10));
			ivjJCheckBoxTf.setText("Tf:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxTf;
}


/**
 * Return the JPanelData property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JPanel getJPanelData() {
	if (ivjJPanelData == null) {
		try {
			ivjJPanelData = new javax.swing.JPanel();
			ivjJPanelData.setName("JPanelData");
			//ivjJPanelData.setBorder(new com.ibm.uvm.abt.edit.DeletedClassView());
			ivjJPanelData.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxHeatMode = new java.awt.GridBagConstraints();
			constraintsJCheckBoxHeatMode.gridx = 2; constraintsJCheckBoxHeatMode.gridy = 1;
			constraintsJCheckBoxHeatMode.ipady = -4;
			constraintsJCheckBoxHeatMode.insets = new java.awt.Insets(0, 24, 2, 3);
			getJPanelData().add(getJCheckBoxHeatMode(), constraintsJCheckBoxHeatMode);

			java.awt.GridBagConstraints constraintsJCheckBoxCoolMode = new java.awt.GridBagConstraints();
			constraintsJCheckBoxCoolMode.gridx = 3; constraintsJCheckBoxCoolMode.gridy = 1;
			constraintsJCheckBoxCoolMode.ipadx = -5;
			constraintsJCheckBoxCoolMode.ipady = -4;
			constraintsJCheckBoxCoolMode.insets = new java.awt.Insets(0, 3, 2, 7);
			getJPanelData().add(getJCheckBoxCoolMode(), constraintsJCheckBoxCoolMode);

			java.awt.GridBagConstraints constraintsJButtonDeltasAbsolute = new java.awt.GridBagConstraints();
			constraintsJButtonDeltasAbsolute.gridx = 1; constraintsJButtonDeltasAbsolute.gridy = 1;
constraintsJButtonDeltasAbsolute.gridheight = 2;
			constraintsJButtonDeltasAbsolute.ipadx = -5;
			constraintsJButtonDeltasAbsolute.insets = new java.awt.Insets(0, 9, 3, 47);
			getJPanelData().add(getJButtonDeltasAbsolute(), constraintsJButtonDeltasAbsolute);

			java.awt.GridBagConstraints constraintsJButtonFahrenheitCelsius = new java.awt.GridBagConstraints();
			constraintsJButtonFahrenheitCelsius.gridx = 1; constraintsJButtonFahrenheitCelsius.gridy = 3;
			constraintsJButtonFahrenheitCelsius.ipadx = -1;
			constraintsJButtonFahrenheitCelsius.insets = new java.awt.Insets(3, 9, 22, 47);
			getJPanelData().add(getJButtonFahrenheitCelsius(), constraintsJButtonFahrenheitCelsius);

			java.awt.GridBagConstraints constraintsJPanelDataChanges = new java.awt.GridBagConstraints();
			constraintsJPanelDataChanges.gridx = 1; constraintsJPanelDataChanges.gridy = 4;
			constraintsJPanelDataChanges.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelDataChanges.weightx = 1.0;
			constraintsJPanelDataChanges.weighty = 1.0;
			constraintsJPanelDataChanges.ipadx = -5;
			constraintsJPanelDataChanges.insets = new java.awt.Insets(22, 8, 37, 24);
			getJPanelData().add(getJPanelDataChanges(), constraintsJPanelDataChanges);

			java.awt.GridBagConstraints constraintsJPanelTable = new java.awt.GridBagConstraints();
			constraintsJPanelTable.gridx = 2; constraintsJPanelTable.gridy = 2;
			constraintsJPanelTable.gridwidth = 2;
constraintsJPanelTable.gridheight = 3;
			constraintsJPanelTable.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJPanelTable.weightx = 1.0;
			constraintsJPanelTable.weighty = 1.0;
			constraintsJPanelTable.insets = new java.awt.Insets(3, 24, 2, 8);
			getJPanelData().add(getJPanelTable(), constraintsJPanelTable);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelData;
}


/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelDataChanges() {
	if (ivjJPanelDataChanges == null) {
		try {
			ivjJPanelDataChanges = new javax.swing.JPanel();
			ivjJPanelDataChanges.setName("JPanelDataChanges");
			ivjJPanelDataChanges.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxDeltaB = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDeltaB.gridx = 1; constraintsJCheckBoxDeltaB.gridy = 3;
			constraintsJCheckBoxDeltaB.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxDeltaB.ipadx = -3;
			constraintsJCheckBoxDeltaB.ipady = -4;
			constraintsJCheckBoxDeltaB.insets = new java.awt.Insets(0, 0, 1, 1);
			getJPanelDataChanges().add(getJCheckBoxDeltaB(), constraintsJCheckBoxDeltaB);

			java.awt.GridBagConstraints constraintsJCheckBoxDeltaD = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDeltaD.gridx = 1; constraintsJCheckBoxDeltaD.gridy = 4;
			constraintsJCheckBoxDeltaD.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxDeltaD.ipadx = -3;
			constraintsJCheckBoxDeltaD.ipady = -4;
			constraintsJCheckBoxDeltaD.insets = new java.awt.Insets(1, 0, 1, 1);
			getJPanelDataChanges().add(getJCheckBoxDeltaD(), constraintsJCheckBoxDeltaD);

			java.awt.GridBagConstraints constraintsJCheckBoxDeltaF = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDeltaF.gridx = 1; constraintsJCheckBoxDeltaF.gridy = 5;
			constraintsJCheckBoxDeltaF.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxDeltaF.ipadx = -2;
			constraintsJCheckBoxDeltaF.ipady = -4;
			constraintsJCheckBoxDeltaF.insets = new java.awt.Insets(1, 0, 1, 1);
			getJPanelDataChanges().add(getJCheckBoxDeltaF(), constraintsJCheckBoxDeltaF);

			java.awt.GridBagConstraints constraintsJTextFieldDeltaF = new java.awt.GridBagConstraints();
			constraintsJTextFieldDeltaF.gridx = 2; constraintsJTextFieldDeltaF.gridy = 5;
			constraintsJTextFieldDeltaF.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldDeltaF.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldDeltaF.weightx = 1.0;
			constraintsJTextFieldDeltaF.ipadx = 55;
			constraintsJTextFieldDeltaF.ipady = -1;
			constraintsJTextFieldDeltaF.insets = new java.awt.Insets(1, 1, 1, 2);
			getJPanelDataChanges().add(getJTextFieldDeltaF(), constraintsJTextFieldDeltaF);

			java.awt.GridBagConstraints constraintsJTextFieldDeltaD = new java.awt.GridBagConstraints();
			constraintsJTextFieldDeltaD.gridx = 2; constraintsJTextFieldDeltaD.gridy = 4;
			constraintsJTextFieldDeltaD.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldDeltaD.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldDeltaD.weightx = 1.0;
			constraintsJTextFieldDeltaD.ipadx = 55;
			constraintsJTextFieldDeltaD.ipady = -1;
			constraintsJTextFieldDeltaD.insets = new java.awt.Insets(1, 1, 1, 2);
			getJPanelDataChanges().add(getJTextFieldDeltaD(), constraintsJTextFieldDeltaD);

			java.awt.GridBagConstraints constraintsJTextFieldDeltaB = new java.awt.GridBagConstraints();
			constraintsJTextFieldDeltaB.gridx = 2; constraintsJTextFieldDeltaB.gridy = 3;
			constraintsJTextFieldDeltaB.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldDeltaB.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldDeltaB.weightx = 1.0;
			constraintsJTextFieldDeltaB.ipadx = 55;
			constraintsJTextFieldDeltaB.ipady = -1;
			constraintsJTextFieldDeltaB.insets = new java.awt.Insets(0, 1, 1, 2);
			getJPanelDataChanges().add(getJTextFieldDeltaB(), constraintsJTextFieldDeltaB);

			java.awt.GridBagConstraints constraintsJCheckBoxMin = new java.awt.GridBagConstraints();
			constraintsJCheckBoxMin.gridx = 1; constraintsJCheckBoxMin.gridy = 1;
			constraintsJCheckBoxMin.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxMin.ipadx = 14;
			constraintsJCheckBoxMin.ipady = -4;
			constraintsJCheckBoxMin.insets = new java.awt.Insets(1, 0, 1, 1);
			getJPanelDataChanges().add(getJCheckBoxMin(), constraintsJCheckBoxMin);

			java.awt.GridBagConstraints constraintsJCheckBoxMax = new java.awt.GridBagConstraints();
			constraintsJCheckBoxMax.gridx = 1; constraintsJCheckBoxMax.gridy = 2;
			constraintsJCheckBoxMax.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxMax.ipadx = 11;
			constraintsJCheckBoxMax.ipady = -4;
			constraintsJCheckBoxMax.insets = new java.awt.Insets(1, 0, 0, 1);
			getJPanelDataChanges().add(getJCheckBoxMax(), constraintsJCheckBoxMax);

			java.awt.GridBagConstraints constraintsJCheckBoxRand = new java.awt.GridBagConstraints();
			constraintsJCheckBoxRand.gridx = 1; constraintsJCheckBoxRand.gridy = 6;
			constraintsJCheckBoxRand.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxRand.ipadx = 7;
			constraintsJCheckBoxRand.ipady = -4;
			constraintsJCheckBoxRand.insets = new java.awt.Insets(1, 0, 4, 1);
			getJPanelDataChanges().add(getJCheckBoxRand(), constraintsJCheckBoxRand);

			java.awt.GridBagConstraints constraintsJTextFieldRand = new java.awt.GridBagConstraints();
			constraintsJTextFieldRand.gridx = 2; constraintsJTextFieldRand.gridy = 6;
			constraintsJTextFieldRand.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldRand.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldRand.weightx = 1.0;
			constraintsJTextFieldRand.ipadx = 55;
			constraintsJTextFieldRand.ipady = -1;
			constraintsJTextFieldRand.insets = new java.awt.Insets(1, 1, 4, 2);
			getJPanelDataChanges().add(getJTextFieldRand(), constraintsJTextFieldRand);

			java.awt.GridBagConstraints constraintsJTextFieldMax = new java.awt.GridBagConstraints();
			constraintsJTextFieldMax.gridx = 2; constraintsJTextFieldMax.gridy = 2;
			constraintsJTextFieldMax.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldMax.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldMax.weightx = 1.0;
			constraintsJTextFieldMax.ipadx = 55;
			constraintsJTextFieldMax.ipady = -1;
			constraintsJTextFieldMax.insets = new java.awt.Insets(1, 1, 0, 2);
			getJPanelDataChanges().add(getJTextFieldMax(), constraintsJTextFieldMax);

			java.awt.GridBagConstraints constraintsJTextFieldMin = new java.awt.GridBagConstraints();
			constraintsJTextFieldMin.gridx = 2; constraintsJTextFieldMin.gridy = 1;
			constraintsJTextFieldMin.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldMin.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldMin.weightx = 1.0;
			constraintsJTextFieldMin.ipadx = 55;
			constraintsJTextFieldMin.ipady = -1;
			constraintsJTextFieldMin.insets = new java.awt.Insets(1, 1, 1, 2);
			getJPanelDataChanges().add(getJTextFieldMin(), constraintsJTextFieldMin);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelDataChanges;
}


/**
 * Return the JPanelDataTitleBorder property value.
 * @return com.cannontech.common.gui.util.TitleBorder
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.TitleBorder getJPanelDataTitleBorder() {
	com.cannontech.common.gui.util.TitleBorder ivjJPanelDataTitleBorder = null;
	try {
		/* Create part */
		ivjJPanelDataTitleBorder = new com.cannontech.common.gui.util.TitleBorder();
		ivjJPanelDataTitleBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
		ivjJPanelDataTitleBorder.setTitle("Stat Data");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelDataTitleBorder;
}


/**
 * Return the JPanelTable property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JPanel getJPanelTable() {
	if (ivjJPanelTable == null) {
		try {
			ivjJPanelTable = new javax.swing.JPanel();
			ivjJPanelTable.setName("JPanelTable");
			ivjJPanelTable.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJPanelTable.setLayout(new java.awt.GridBagLayout());
			ivjJPanelTable.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);

			java.awt.GridBagConstraints constraintsJScrollPaneJTable = new java.awt.GridBagConstraints();
			constraintsJScrollPaneJTable.gridx = 1; constraintsJScrollPaneJTable.gridy = 1;
			constraintsJScrollPaneJTable.gridwidth = 2;
			constraintsJScrollPaneJTable.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJScrollPaneJTable.weightx = 1.0;
			constraintsJScrollPaneJTable.weighty = 1.0;
			constraintsJScrollPaneJTable.ipadx = 21;
			constraintsJScrollPaneJTable.ipady = 30;
			constraintsJScrollPaneJTable.insets = new java.awt.Insets(1, 1, 8, 2);
			getJPanelTable().add(getJScrollPaneJTable(), constraintsJScrollPaneJTable);

			java.awt.GridBagConstraints constraintsJCheckBoxTc = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTc.gridx = 1; constraintsJCheckBoxTc.gridy = 4;
			constraintsJCheckBoxTc.ipady = -4;
			constraintsJCheckBoxTc.insets = new java.awt.Insets(0, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTc(), constraintsJCheckBoxTc);

			java.awt.GridBagConstraints constraintsJCheckBoxTd = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTd.gridx = 1; constraintsJCheckBoxTd.gridy = 5;
			constraintsJCheckBoxTd.ipady = -4;
			constraintsJCheckBoxTd.insets = new java.awt.Insets(1, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTd(), constraintsJCheckBoxTd);

			java.awt.GridBagConstraints constraintsJCheckBoxTe = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTe.gridx = 1; constraintsJCheckBoxTe.gridy = 6;
			constraintsJCheckBoxTe.ipady = -4;
			constraintsJCheckBoxTe.insets = new java.awt.Insets(1, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTe(), constraintsJCheckBoxTe);

			java.awt.GridBagConstraints constraintsJTextFieldTe = new java.awt.GridBagConstraints();
			constraintsJTextFieldTe.gridx = 2; constraintsJTextFieldTe.gridy = 6;
			constraintsJTextFieldTe.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTe.weightx = 1.0;
			constraintsJTextFieldTe.ipadx = 79;
			constraintsJTextFieldTe.ipady = -1;
			constraintsJTextFieldTe.insets = new java.awt.Insets(1, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTe(), constraintsJTextFieldTe);

			java.awt.GridBagConstraints constraintsJTextFieldTd = new java.awt.GridBagConstraints();
			constraintsJTextFieldTd.gridx = 2; constraintsJTextFieldTd.gridy = 5;
			constraintsJTextFieldTd.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTd.weightx = 1.0;
			constraintsJTextFieldTd.ipadx = 79;
			constraintsJTextFieldTd.ipady = -1;
			constraintsJTextFieldTd.insets = new java.awt.Insets(1, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTd(), constraintsJTextFieldTd);

			java.awt.GridBagConstraints constraintsJTextFieldTc = new java.awt.GridBagConstraints();
			constraintsJTextFieldTc.gridx = 2; constraintsJTextFieldTc.gridy = 4;
			constraintsJTextFieldTc.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTc.weightx = 1.0;
			constraintsJTextFieldTc.ipadx = 79;
			constraintsJTextFieldTc.ipady = -1;
			constraintsJTextFieldTc.insets = new java.awt.Insets(0, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTc(), constraintsJTextFieldTc);

			java.awt.GridBagConstraints constraintsJCheckBoxTa = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTa.gridx = 1; constraintsJCheckBoxTa.gridy = 2;
			constraintsJCheckBoxTa.ipady = -4;
			constraintsJCheckBoxTa.insets = new java.awt.Insets(8, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTa(), constraintsJCheckBoxTa);

			java.awt.GridBagConstraints constraintsJCheckBoxTb = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTb.gridx = 1; constraintsJCheckBoxTb.gridy = 3;
			constraintsJCheckBoxTb.ipady = -4;
			constraintsJCheckBoxTb.insets = new java.awt.Insets(1, 0, 0, 0);
			getJPanelTable().add(getJCheckBoxTb(), constraintsJCheckBoxTb);

			java.awt.GridBagConstraints constraintsJCheckBoxTf = new java.awt.GridBagConstraints();
			constraintsJCheckBoxTf.gridx = 1; constraintsJCheckBoxTf.gridy = 7;
			constraintsJCheckBoxTf.ipadx = 3;
			constraintsJCheckBoxTf.ipady = -4;
			constraintsJCheckBoxTf.insets = new java.awt.Insets(1, 0, 1, 0);
			getJPanelTable().add(getJCheckBoxTf(), constraintsJCheckBoxTf);

			java.awt.GridBagConstraints constraintsJTextFieldTf = new java.awt.GridBagConstraints();
			constraintsJTextFieldTf.gridx = 2; constraintsJTextFieldTf.gridy = 7;
			constraintsJTextFieldTf.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTf.weightx = 1.0;
			constraintsJTextFieldTf.ipadx = 79;
			constraintsJTextFieldTf.ipady = -1;
			constraintsJTextFieldTf.insets = new java.awt.Insets(1, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTf(), constraintsJTextFieldTf);

			java.awt.GridBagConstraints constraintsJTextFieldTb = new java.awt.GridBagConstraints();
			constraintsJTextFieldTb.gridx = 2; constraintsJTextFieldTb.gridy = 3;
			constraintsJTextFieldTb.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTb.weightx = 1.0;
			constraintsJTextFieldTb.ipadx = 79;
			constraintsJTextFieldTb.ipady = -1;
			constraintsJTextFieldTb.insets = new java.awt.Insets(1, 1, 0, 31);
			getJPanelTable().add(getJTextFieldTb(), constraintsJTextFieldTb);

			java.awt.GridBagConstraints constraintsJTextFieldTa = new java.awt.GridBagConstraints();
			constraintsJTextFieldTa.gridx = 2; constraintsJTextFieldTa.gridy = 2;
			constraintsJTextFieldTa.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTa.weightx = 1.0;
			constraintsJTextFieldTa.ipadx = 79;
			constraintsJTextFieldTa.ipady = -1;
			constraintsJTextFieldTa.insets = new java.awt.Insets(8, 1, 1, 31);
			getJPanelTable().add(getJTextFieldTa(), constraintsJTextFieldTa);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelTable;
}



/**
 * Return the JScrollPaneJTable property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JScrollPane getJScrollPaneJTable() {
	if (ivjJScrollPaneJTable == null) {
		try {
			ivjJScrollPaneJTable = new javax.swing.JScrollPane();
			ivjJScrollPaneJTable.setName("JScrollPaneJTable");
			ivjJScrollPaneJTable.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
			ivjJScrollPaneJTable.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			ivjJScrollPaneJTable.setPreferredSize(new java.awt.Dimension(130, 70));
			ivjJScrollPaneJTable.setMinimumSize(new java.awt.Dimension(130, 70));
			getJScrollPaneJTable().setViewportView(getJTableCurve());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPaneJTable;
}


/**
 * Return the JTableCurve property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTable getJTableCurve() {
	if (ivjJTableCurve == null) {
		try {
			ivjJTableCurve = new javax.swing.JTable();
			ivjJTableCurve.setName("JTableCurve");
			getJScrollPaneJTable().setColumnHeaderView(ivjJTableCurve.getTableHeader());
			//getJScrollPaneJTable().getViewport().setBackingStoreEnabled(true);
			ivjJTableCurve.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
			ivjJTableCurve.setColumnSelectionAllowed(false);
			ivjJTableCurve.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJTableCurve.setGridColor(java.awt.Color.yellow);
			ivjJTableCurve.setShowHorizontalLines(false);
			ivjJTableCurve.setPreferredSize(new java.awt.Dimension(151,98));
			ivjJTableCurve.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
			ivjJTableCurve.setIntercellSpacing(new java.awt.Dimension(1, 0));
			ivjJTableCurve.setBounds(0, 0, 151, 98);
			ivjJTableCurve.setRowSelectionAllowed(false);
			// user code begin {1}


			ivjJTableCurve.setIntercellSpacing(new java.awt.Dimension(0, 0));
			ivjJTableCurve.setShowVerticalLines(false);

			String[] cols = { "Ta", "Tb", "Tc", "Td","X", "Te", "Tf" };
			javax.swing.JLabel c1 = new javax.swing.JLabel("Ta");
			javax.swing.JLabel c2 = new javax.swing.JLabel("Tb");
			javax.swing.JLabel c3 = new javax.swing.JLabel("Tc");
			javax.swing.JLabel c4 = new javax.swing.JLabel("T");
			javax.swing.JLabel c5 = new javax.swing.JLabel("d");
			javax.swing.JLabel c6 = new javax.swing.JLabel("Te");
			javax.swing.JLabel c7 = new javax.swing.JLabel("Tf");


			c1.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			c2.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			c3.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			c4.setHorizontalAlignment( javax.swing.SwingConstants.RIGHT );
			c5.setHorizontalAlignment( javax.swing.SwingConstants.LEFT );
			c6.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			c7.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
			
			
			final LineLabel blank = new LineLabel( LineLabel.NO_LINE );
			final LineLabel fSlash = new LineLabel( LineLabel.BOT_LEFT_UP_RIGHT );
			final LineLabel bkSlash = new LineLabel( LineLabel.UP_LEFT_BOT_RIGHT );
			final LineLabel bottom = new LineLabel( LineLabel.BOTTOM );
			Object[][] vals = 
			{
				//the columns and the third row must be a unique instances of their object for rendering reasons!!
				{c1, c2, c3, c4, c5, c6, c7 },
				{blank,  blank,   blank,  new LineLabel(LineLabel.NO_LINE), blank, bottom, blank },
				{bottom, blank,   blank,  new LineLabel(LineLabel.NO_LINE), fSlash, blank, bkSlash},
				{blank,  bkSlash, bottom, new LineLabel(LineLabel.BOT_LEFT_UP_RIGHT), blank, blank, blank },
				{blank,  blank,   blank,  new LineLabel(LineLabel.NO_LINE), blank, blank, blank },
				{blank,  blank,   blank,  new LineLabel(LineLabel.NO_LINE), blank, blank, blank },
			};


			ivjJTableCurve.setModel( new javax.swing.table.DefaultTableModel()
			{
				public boolean isCellEditable( int r, int c )
				{ return false; };
				
			});
			((javax.swing.table.DefaultTableModel)ivjJTableCurve.getModel()).setDataVector(  vals, cols  );


			javax.swing.table.JTableHeader th = new javax.swing.table.JTableHeader();
			ivjJTableCurve.setTableHeader( th );

			ivjJTableCurve.setDefaultRenderer( Object.class, new ExpressComCellRenderer() );
			ivjJTableCurve.getColumnModel().getColumn(0).setPreferredWidth(10);
			ivjJTableCurve.getColumnModel().getColumn(1).setPreferredWidth(10);
			ivjJTableCurve.getColumnModel().getColumn(2).setPreferredWidth(10);
			ivjJTableCurve.getColumnModel().getColumn(3).setPreferredWidth(23);
			ivjJTableCurve.getColumnModel().getColumn(4).setPreferredWidth(23);
			ivjJTableCurve.getColumnModel().getColumn(5).setPreferredWidth(10);
			ivjJTableCurve.getColumnModel().getColumn(6).setPreferredWidth(14);

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTableCurve;
}



/**
 * Return the JTextFieldDelatB property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldDeltaB() {
	if (ivjJTextFieldDeltaB == null) {
		try {
			ivjJTextFieldDeltaB = new javax.swing.JTextField();
			ivjJTextFieldDeltaB.setName("JTextFieldDeltaB");
			ivjJTextFieldDeltaB.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldDeltaB.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDeltaB;
}


/**
 * Return the JTextFieldDeltaD property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldDeltaD() {
	if (ivjJTextFieldDeltaD == null) {
		try {
			ivjJTextFieldDeltaD = new javax.swing.JTextField();
			ivjJTextFieldDeltaD.setName("JTextFieldDeltaD");
			ivjJTextFieldDeltaD.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldDeltaD.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDeltaD;
}


/**
 * Return the JTextFieldDeltaF property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldDeltaF() {
	if (ivjJTextFieldDeltaF == null) {
		try {
			ivjJTextFieldDeltaF = new javax.swing.JTextField();
			ivjJTextFieldDeltaF.setName("JTextFieldDeltaF");
			ivjJTextFieldDeltaF.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldDeltaF.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDeltaF;
}


/**
 * Return the JTextFieldMax property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldMax() {
	if (ivjJTextFieldMax == null) {
		try {
			ivjJTextFieldMax = new javax.swing.JTextField();
			ivjJTextFieldMax.setName("JTextFieldMax");
			ivjJTextFieldMax.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldMax.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldMax;
}


/**
 * Return the JTextFieldMin5 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldMin() {
	if (ivjJTextFieldMin == null) {
		try {
			ivjJTextFieldMin = new javax.swing.JTextField();
			ivjJTextFieldMin.setName("JTextFieldMin");
			ivjJTextFieldMin.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldMin.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldMin;
}


/**
 * Return the JTextFieldRand property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldRand() {
	if (ivjJTextFieldRand == null) {
		try {
			ivjJTextFieldRand = new javax.swing.JTextField();
			ivjJTextFieldRand.setName("JTextFieldRand");
			ivjJTextFieldRand.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldRand.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldRand;
}


/**
 * Return the JTextFieldTa property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTa() {
	if (ivjJTextFieldTa == null) {
		try {
			ivjJTextFieldTa = new javax.swing.JTextField();
			ivjJTextFieldTa.setName("JTextFieldTa");
			ivjJTextFieldTa.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTa.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTa;
}


/**
 * Return the JTextFieldTb property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTb() {
	if (ivjJTextFieldTb == null) {
		try {
			ivjJTextFieldTb = new javax.swing.JTextField();
			ivjJTextFieldTb.setName("JTextFieldTb");
			ivjJTextFieldTb.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTb.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTb;
}


/**
 * Return the JTextFieldTc property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTc() {
	if (ivjJTextFieldTc == null) {
		try {
			ivjJTextFieldTc = new javax.swing.JTextField();
			ivjJTextFieldTc.setName("JTextFieldTc");
			ivjJTextFieldTc.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTc.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTc;
}


/**
 * Return the JTextFieldTd property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTd() {
	if (ivjJTextFieldTd == null) {
		try {
			ivjJTextFieldTd = new javax.swing.JTextField();
			ivjJTextFieldTd.setName("JTextFieldTd");
			ivjJTextFieldTd.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTd.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTd;
}


/**
 * Return the JTextFieldTe property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTe() {
	if (ivjJTextFieldTe == null) {
		try {
			ivjJTextFieldTe = new javax.swing.JTextField();
			ivjJTextFieldTe.setName("JTextFieldTe");
			ivjJTextFieldTe.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTe.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTe;
}


/**
 * Return the JTextFieldTf property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldTf() {
	if (ivjJTextFieldTf == null) {
		try {
			ivjJTextFieldTf = new javax.swing.JTextField();
			ivjJTextFieldTf.setName("JTextFieldTf");
			ivjJTextFieldTf.setFont(new java.awt.Font("dialog", 0, 10));
			ivjJTextFieldTf.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTf;
}


/**
 * getValue method comment.
 */
public Object getValue(Object o) 
{
/*	com.cannontech.database.data.device.lm.LMGroupVersacom group = null;
	
	if( o instanceof com.cannontech.database.data.multi.MultiDBPersistent )
	{
		group = (com.cannontech.database.data.device.lm.LMGroupVersacom)
					com.cannontech.database.data.multi.MultiDBPersistent.getFirstObjectOfType(
								com.cannontech.database.data.device.lm.LMGroupVersacom.class,
								(com.cannontech.database.data.multi.MultiDBPersistent)o );
	}	
	else if( o instanceof com.cannontech.database.data.multi.SmartMultiDBPersistent )
		group = (com.cannontech.database.data.device.lm.LMGroupRipple)
					((com.cannontech.database.data.multi.SmartMultiDBPersistent)o).getOwnerDBPersistent();
	
	if( o instanceof com.cannontech.database.data.device.lm.LMGroupVersacom || group != null )
	{
		if( group == null )
			group = (com.cannontech.database.data.device.lm.LMGroupVersacom) o;
		
		Integer utilityAddr = null;
		Object utilityAddressSpinVal = getUtilityAddressSpinner().getValue();
		if( utilityAddressSpinVal instanceof Long )
			utilityAddr = new Integer( ((Long)utilityAddressSpinVal).intValue() );
		else if( utilityAddressSpinVal instanceof Integer )
			utilityAddr = new Integer( ((Integer)utilityAddressSpinVal).intValue() );

		Integer sectionAddr = null;
		Object sectionAddressSpinVal = getSectionAddressSpinner().getValue();
		if( sectionAddressSpinVal instanceof Long )
			sectionAddr = new Integer( ((Long)sectionAddressSpinVal).intValue() );
		else if( sectionAddressSpinVal instanceof Integer )
			sectionAddr = new Integer( ((Integer)sectionAddressSpinVal).intValue() );
		
		Integer classAddr =  new Integer( getClassAddressSingleLineBitTogglePanel().getValue() );
		Integer divisionAddr = new Integer( getDivisionAddressSingleLineBitTogglePanel().getValue() );

		StringBuffer addressUsage = new StringBuffer();

		if( getUtilityAddressCheckBox().isSelected() )
			addressUsage.append('U');
		else
			addressUsage.append(' ');
		
		if( getSectionAddressCheckBox().isSelected() )
			addressUsage.append('S');
		else
			addressUsage.append(' ');
		
		if( getClassAddressCheckBox().isSelected() )
			addressUsage.append('C');
		else
			addressUsage.append(' ');
		
		if( getDivisionAddressCheckBox().isSelected() )
			addressUsage.append('D');			
		else
			addressUsage.append(' ');

		StringBuffer relayUsage = new StringBuffer();

		if( getRelay1CheckBox().isSelected() )
			relayUsage.append('1');
		else
			relayUsage.append(' ');
		
		if( getRelay2CheckBox().isSelected() )
			relayUsage.append('2');
		else
			relayUsage.append(' ');
		
		if( getRelay3CheckBox().isSelected() )
			relayUsage.append('3');
		else
			relayUsage.append(' ');

		if( getRelay4CheckBox().isSelected() )
			relayUsage.append('4');
		else
			relayUsage.append(' ');

		group.getLmGroupVersacom().setUtilityAddress(utilityAddr);
		group.getLmGroupVersacom().setSectionAddress(sectionAddr);
		group.getLmGroupVersacom().setClassAddress(classAddr);
		group.getLmGroupVersacom().setDivisionAddress(divisionAddr);
		
		group.getLmGroupVersacom().setAddressUsage(addressUsage.toString());
		group.getLmGroupVersacom().setRelayUsage(relayUsage.toString());

		if( getJCheckBoxSerialAddress().isSelected() )
			group.getLmGroupVersacom().setSerialAddress( getJTextFieldSerialAddress().getText() );
		else
			group.getLmGroupVersacom().setSerialAddress("0");
		
	}
*/
	return o;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	// user code end
	getJButtonFahrenheitCelsius().addActionListener(this);
	getJButtonDeltasAbsolute().addActionListener(this);
	getJTableCurve().addMouseListener(this);
	
	//necessary for statEditorPanel, utilized by thermostat gears
	getJCheckBoxCoolMode().addActionListener(this);
	getJCheckBoxDeltaB().addActionListener(this);
	getJCheckBoxDeltaD().addActionListener(this);
	getJCheckBoxDeltaF().addActionListener(this); 
	getJCheckBoxHeatMode().addActionListener(this);
	getJCheckBoxMax().addActionListener(this);
	getJCheckBoxMin().addActionListener(this);
	getJCheckBoxRand().addActionListener(this); 
	getJCheckBoxTa().addActionListener(this);
	getJCheckBoxTb().addActionListener(this); 
	getJCheckBoxTc().addActionListener(this);
	getJCheckBoxTd().addActionListener(this); 
	getJCheckBoxTe().addActionListener(this);
	getJCheckBoxTf().addActionListener(this);
	
}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LMGroupExpressComEditorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(357, 389);

		java.awt.GridBagConstraints constraintsJPanelData = new java.awt.GridBagConstraints();
		constraintsJPanelData.gridx = 1; constraintsJPanelData.gridy = 1;
		constraintsJPanelData.fill = java.awt.GridBagConstraints.VERTICAL;
		constraintsJPanelData.anchor = java.awt.GridBagConstraints.NORTHWEST;
		constraintsJPanelData.weightx = 1.0;
		constraintsJPanelData.weighty = 1.0;
		constraintsJPanelData.insets = new java.awt.Insets(6, 5, 131, 16);
		add(getJPanelData(), constraintsJPanelData);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}



/**
 * This method must be implemented if a notion of data validity needs to be supported.
 * @return boolean
 */
public boolean isInputValid() 
{
/*	if( getJCheckBoxSerialAddress().isSelected() )
		if( getJTextFieldSerialAddress().getText() == null 
			 || getJTextFieldSerialAddress().getText().length() <= 0 )
		{
			setErrorString("A value for the Serial Address text field must be filled in");
			return false;
		}

	String idRange = com.cannontech.common.util.CtiProperties.getInstance().getProperty(
		com.cannontech.common.util.CtiProperties.KEY_UTILITYID_RANGE, "1-" +
		com.cannontech.common.util.CtiUtilities.MAX_UTILITY_ID );

	int res = java.util.Arrays.binarySearch( 
				com.cannontech.common.util.CtiUtilities.decodeUtilityIDString( idRange ),
				((Number)getUtilityAddressSpinner().getValue()).intValue() );

	if( res < 0 )
	{
		setErrorString("An invalid Utility ID was entered, the valid Utility ID range is: " + idRange );
		return false;
	}
*/
	return true;
}


/**
 * Comment
 */
public void jButtonDeltasAbsolute_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	if( getJButtonDeltasAbsolute().getText().equalsIgnoreCase("Deltas") )
	{
		getJButtonDeltasAbsolute().setText("Absolutes");
		getJCheckBoxDeltaB().setText("Abs B:");
		getJCheckBoxDeltaD().setText("Abs D:");
		getJCheckBoxDeltaF().setText("Abs F:");
		isAbsolute = true;
	}
	else
	{
		getJButtonDeltasAbsolute().setText("Deltas");
		getJCheckBoxDeltaB().setText("Delta B:");
		getJCheckBoxDeltaD().setText("Delta D:");
		getJCheckBoxDeltaF().setText("Delta F:");
		isAbsolute = false;
	}

	return;
}


/**
 * Comment
 */
public void jButtonFahrenheitCelsius_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	if( getJButtonFahrenheitCelsius().getText().equalsIgnoreCase("Fahrenheit") )
	{
		getJButtonFahrenheitCelsius().setText("Celsius");
		isCelsius = true;
	}
	else
	{
		getJButtonFahrenheitCelsius().setText("Fahrenheit");
		isCelsius = false;
	}
		
	
	return;
}


/**
 * Comment
 */
public void jTableCurve_MouseClicked(java.awt.event.MouseEvent mouseEvent) 
{

	int col = getJTableCurve().columnAtPoint( mouseEvent.getPoint() );

	if( col == 0 )
		getJCheckBoxTa().setSelected( true );
	else if( col == 1 )
		getJCheckBoxTb().setSelected( true );
	else if( col == 2 )
		getJCheckBoxTc().setSelected( true );
	else if( col == 3 || col == 4 )
		getJCheckBoxTd().setSelected( true );		
	else if( col == 5 )
		getJCheckBoxTe().setSelected( true );
	else if( col == 6 )
		getJCheckBoxTf().setSelected( true );
	
	return;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame = new java.awt.Frame();
		LMGroupExpressComEditorPanel aGroupTypePanel;
		aGroupTypePanel = new LMGroupExpressComEditorPanel();
		frame.add("Center", aGroupTypePanel);
		frame.setSize(aGroupTypePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main()");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseClicked(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTableCurve()) 
		connEtoC4(e);
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseEntered(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseExited(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mousePressed(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseReleased(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * setValue method comment.
 */
public void setValue(Object o) 
{
/*	if( o instanceof com.cannontech.database.data.device.lm.LMGroupVersacom )
	{
		com.cannontech.database.data.device.lm.LMGroupVersacom group = (com.cannontech.database.data.device.lm.LMGroupVersacom) o;

		Integer utilityAddr = group.getLmGroupVersacom().getUtilityAddress();
		Integer sectionAddr = group.getLmGroupVersacom().getSectionAddress();
		Integer classAddr = group.getLmGroupVersacom().getClassAddress();
		Integer divisionAddr = group.getLmGroupVersacom().getDivisionAddress();

		String addressUsage = group.getLmGroupVersacom().getAddressUsage();
		String relayUsage = group.getLmGroupVersacom().getRelayUsage();

		getUtilityAddressSpinner().setValue(utilityAddr);
		getSectionAddressSpinner().setValue(sectionAddr);
		getClassAddressSingleLineBitTogglePanel().setValue(classAddr.intValue());
		getDivisionAddressSingleLineBitTogglePanel().setValue(divisionAddr.intValue());

		getUtilityAddressCheckBox().setSelected(addressUsage.charAt(0) == 'U');
		getSectionAddressCheckBox().setSelected(addressUsage.charAt(1) == 'S');
		getClassAddressCheckBox().setSelected(addressUsage.charAt(2) == 'C');
		getDivisionAddressCheckBox().setSelected(addressUsage.charAt(3) == 'D');
		getRelay1CheckBox().setSelected(relayUsage.charAt(0) == '1');
		getRelay2CheckBox().setSelected(relayUsage.charAt(1) == '2');
		getRelay3CheckBox().setSelected(relayUsage.charAt(2) == '3');
		getRelay4CheckBox().setSelected(relayUsage.charAt(3) == '4');

		if( !group.getLmGroupVersacom().getSerialAddress().equalsIgnoreCase("0") )
		{
			getJCheckBoxSerialAddress().doClick();
			getJTextFieldSerialAddress().setText( group.getLmGroupVersacom().getSerialAddress() );
		}

	}
*/

}
}
package com.cannontech.dbeditor.wizard.tou;

import com.cannontech.database.data.tou.TOUDay;
import com.cannontech.database.data.tou.TOUSchedule;
import com.cannontech.common.gui.util.JTextFieldTimeEntry;
import javax.swing.JTextField;
import com.cannontech.common.gui.util.TextFieldDocument;

import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import com.cannontech.common.gui.table.MultiJComboCellEditor;
import com.cannontech.common.gui.table.MultiJComboCellRenderer;



/**
 * This type was created in VisualAge.
 */
public class TOUScheduleBasePanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.MouseListener, javax.swing.event.CaretListener {
	private javax.swing.JLabel ivjJLabelScheduleName = null;
	private javax.swing.JScrollPane ivjJScrollPaneTable = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JTextField ivjJTextFieldTOUScheduleName = null;
	private javax.swing.JLabel ivjJLabelDefaultRate = null;
	private javax.swing.JPanel ivjJPanelTOUDays = null;
	private javax.swing.JTable ivjJTableTOUDays = null;
	private javax.swing.JComboBox ivjJComboBoxDefaultRate = null;
	private javax.swing.JComboBox ivjJComboBoxEditDays = null;
	private javax.swing.JComboBox ivjJComboBoxRemoveDays = null;
	private javax.swing.JLabel ivjJLabelEdit = null;
	private javax.swing.JLabel ivjJLabelRemove = null;
	
	//may want to add Holiday soon
	private String[] daysOfTheSchedule = {
		"Sunday", "Monday", "Tuesday", "Wednesday",
		"Thursday", "Friday", "Saturday"
	};
		
class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.MouseListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == TOUScheduleBasePanel.this.getJComboBoxDefaultRate()) 
				connEtoC3(e);
			if (e.getSource() == TOUScheduleBasePanel.this.getJComboBoxEditDays()) 
				connEtoC2(e);
			if (e.getSource() == TOUScheduleBasePanel.this.getJComboBoxRemoveDays()) 
				connEtoC4(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == TOUScheduleBasePanel.this.getJTextFieldTOUScheduleName()) 
				connEtoC5(e);
		};
		public void mouseClicked(java.awt.event.MouseEvent e) {};
		public void mouseEntered(java.awt.event.MouseEvent e) {};
		public void mouseExited(java.awt.event.MouseEvent e) {};
		public void mousePressed(java.awt.event.MouseEvent e) {
			if (e.getSource() == TOUScheduleBasePanel.this.getJTableTOUDays()) 
				connEtoC1(e);
		};
		public void mouseReleased(java.awt.event.MouseEvent e) {};
	};
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public TOUScheduleBasePanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldTOUScheduleName()) 
		connEtoC5(e);
	// user code begin {2}
	// user code end
}
/**
 * connEtoC1:  (JTableRateOffsets.mouse.mousePressed(java.awt.event.MouseEvent) --> TOUScheduleBasePanel.jTableRateOffsets_MousePressed(Ljava.awt.event.MouseEvent;)V)
 * @param arg1 java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.MouseEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jTableRateOffsets_MousePressed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JButtonCreate.action.actionPerformed(java.awt.event.ActionEvent) --> TOUScheduleBasePanel.jButtonCreate_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxEditDays_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JComboBox1.action.actionPerformed(java.awt.event.ActionEvent) --> TOUScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JButtonRemove.action.actionPerformed(java.awt.event.ActionEvent) --> TOUScheduleBasePanel.jButtonRemove_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxRemoveDays_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JTextFieldTOUScheduleName.caret.caretUpdate(javax.swing.event.CaretEvent) --> TOUScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GCEE30DB1GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DBC8DF8D4453578157AE825ADEDD1D1230D009AA51628289103C685839A95EB10D022C6CDA1AA58741557AF6D230F3BA1D01070A72834C2D9B0A0189892C8A5042079B7010404A4E0008D1B1B6CCD32F0333B6C5E108DBF724E1939B3776E66EEFED07A150F13FB674C4C19B3E74E1CB9F3E66E8A6BB787AFB1252C97845392C17D3757A488C3DB852170567AAD8C97FEC314C9507D430C35428367D261
	B99572ECFF0EB22D9192BC4BA09D87691824A853C7703ECED8FBE25EF1F889504EE448FB6E6ECBF7745D4E2F0AD8BBFFA3696B762641F395C0BC60D2EF0CB2555E086D0F593BC1456F0074AA759D4114A288E923304CAD4E8DBA7CC835DCBCBC97G0411B20F6D5D2866B7C09A4B48709CB20A169D854F65043B9F66672965ACBF8F9196BC7353141558160EBE03E4356E461B6853ACFC180202D8ACEC4ABFG4F025AB36DDF36BABB33DAC5074369D024560EACDB0BE433ABCEF7D6377D3C6836E5A94E2E7C7C06
	1A23752D9D122DCB160AC50FD4ABBAA4996A8F3F8979FE42390C50843EA13D61E6446DF3212C26C3BA91C03819717E624A82A603B3A1C27C18EB8272EE391972BC64E60D77A1CB13D6E45F027467123140FA11101F8CC0F9591547F8D1EEE13C9CBD0DE5C3A1BD99A00E63B71EC17C82C82785C5195203980F87BEE5BCB6DEF8D8C8EE39AFE5F5G9E8B02A8EF36A00D472A687DCB7ECE74A5238447BC9872A6834482AC8458F8EB1429G60E32227F30ABE03E7D10BD2626C6CF4BA0ADC2EE259662EF65AA4995E
	7373A1C74555C92DCE37CD9028AEBE6D4CB46007C1432D3EFA08C07B760D40F4A7346E5702225CC574413FEF93E60CC869D0E9DC3CD56BDB742DA83799E4EC03605DC47AA08894BF1760575C266169D8FDC57018AE043C385B181C9BD7B1DE2AD2C78BEBF29EC8791B81AF231E8CC9717E0A72B062D79AAFD446CB4AD04691000F85C882D8969CE55A81D0914CE41CDD3C27BF99D7026E3B9D22DC5F5562925DCAF117DD36C9EED556737776A5EBA320757EF7507528DCC2766847A86E017B8D659297F2E30AADD8
	9D23E0CDAE346D5C3CC0ED878577560DD5FC8C2711399296CC47F0B1473FC47011BABC9D5B13840F69691017FBFB1409169FC16656285BE979951C4EED849F2E43D3BADB899E533110D7B0BA4AC447F7CCB95A44E0C8C7G44G4C83C89B83E38CD0B0060D710562DD831CC7353A7125F5F3CBBE042764D55CE2254323080ED6691868360BAD32649154B287CAD02EADBE750A497CEE05B63E169C12DBD46CCE87D097BBA5D0A68FADF328E4AD16F1CBA437415EA9C1831DAE01512DAF41F9A10B9E65284BA6AA12
	D602661FACC11DB8A79E830AC0G5E070FC1F93DC2EC2E855E3DE3182C26FF0D386910CE64F2F93964FDF89E826516647C7CD2FBAB32A13AFB180E4EF62543F3A1148F9A9BE5B25F91E51A8AD0FBA70CA3006BAED81FG460630B97BEEA3534D5215778A19B36EB354CDE2BB6F26FA663A5BDFB76713B6C781BE9CA096A099E043BDD126BC00C6GAF4028FB583ADB669A91C017112FD5BA7E11F752569D46BA4EG7B05CF6C27D17E023BFA63237D4AD25E64003C2DD31FB8B71628F31B556B0B37556AF3C5007C
	35863815FEE92A8FDFD6123986F20C81D8F08F53093525E6BAD7F0A9E73323468D0AAD59B48D21E5D715A1BF52B9492114CAAE49E103970F2A1B9F14AD5766CD1B136B7447840FF63484945B4371DB4A56D2BC50504FC2163F13640B0A623637F4A9D23D24A8F6C73BD6BF07706271B1519E352F0587312FE963E09D87489D477ABA31EC1DCE7F2B1C4EB3DD2E861C596ABCBAC47C058AA85FBC0E695B8B27516F9B4A5333C8DA4B97CFB776B3067D81526EFB6DB87F1D5BD85CC79EED6306B3609813390B6335C9
	4567707C31A4FFAC709A8D30GE0E3E81429B41449E14719C6C11B7B2C5E72817237291FFC5AC691E90375E505CAFF49G5B68EF2ED19D3937BC300ECFA8B75671096546BA9ED95E378ECFADB752E11A77C2B9764B596D504D0918F2345F2DCE07C3A29313D791289F7FEE8376436E30AB5F58ED6D12D2EFBFAF01EF9D0A3A3D002C91B23C8F89E5763B7B93E63F534F5FADC4DA079B7AFF236E9817929BCAF5F4DE28E63FA9CFB33E4639A649D2A7882A445965D0A8FEB6D9FFD43CE7B141ED4F78A5565DF110CC
	3A8A27EC3709BD1E4CCEE717C74AA2FFEB5D1247A359F61C964F09D9E23712C586A22B9A734A70F52779734F3FB49B6DC0B2CF7BD035D66B69D585A438FF67311D598265EF3C5C2D7287E3DCEE17E41BCA2D3E75B0AC64192DE02D14AC7217AE5004CFEF16279B06D525DC02397D315AE6F7CB158ED797A383BC642ABC5CED39C9A723BA482DE9EB73C84A77ACA69D6141C9CAD0799C1A5163A7ABDDEB7F86E9B1BED61FF1D0BE4057EBF196BB3DB919A2199CD974D1AB395B1C6E4E5E42AAA259D750F6CEAEEBFB
	67496BF5E38575CB3FF7F57E4E63747395DEDF7914CAEDE2172CA0612BAFA94A43148B23FDF9A8335995A22B6F1301537E542DC5FEE47DE526230BC25B43E496357CAEDFFE6B24CE67B9696AF12C519FAC4F3BF3D51F47F30878BC77025F8E10F7AF73F93E2940FC6673280EDD09D316699282F9E177627A307D6CFA1D4D2F3D1746340260C9736FB24CDF456B3F54CF7E22FE72B35CFD67FF53CF7E8F7A499FEF181F4C7B176DB14ACF7BB513E3E9659ADC2B2533DD92EC89F1EA9E12FA583E2E72FD3F3CE3225C
	256D976BAB51D711F57EA645179FB4DEBB2B8E220FF906532FBD38D440FD9F25C9577AB091E93A5C76CEF04F5101D6E30BADF97A5822997847B8E4B3BC95G55E69E403E9A29E455F824B16B8C0BBD8E07BAE381262AF4D247D31952F2C1B2ABB78A52E1G534753F2E9E17AF256CED6AE937025G36B023F21FB8D83931000FG08D34BED3CCFDFEEAEAF578178A177E9650255F2C977E13995AE967F5B45F1DB896E77608C5E1A4AE2AC55EB74B1D41BE72C219F0410FBBF25DFF13FFF6CA9248A69F6G5EFBBF
	5319E78E6A779BC59E0F3355CE367E6A78779C527BC894776D21776089465423D4027369E5BAB47490720A3181952D6A41388C0C5D7A47BA4AC85416ED67CA3A093DE8F016B8ED60A0B94F14F0977218DDC21F0746CB1B4EB2F98D3F1F7908174A75B15A0855B7252C88A01B492ACC92F432D9933DFF8925BD474DE827BF4062336D9E0633G0E766726FC0C4F994522DBC987335A3B6CD9DD0A9D839822A2129507C620A94DE83207C3DAA39FE0315D647DB84F22A11DG3090004619D264B4356C7A89D126AAG
	BA07B6D975F3E8A860C3G228162A730B9E417BF07672056FABEE62F7F83E57ADD96F8BAB62357952ABCC67FFA34D0F0793CE1ECFA586A21A9499354B1F9D09B9B5B1B1FAD7182D0D9CC613210214C588719DDFC30C0EF97639E24FB635407189CB2BBF1EE8D5257D365B0F9677BD4577D9C8796879C5649F85AG6D55BE44F8CA695173B46CA14AD3986769771D3B61B978151A35DB65E06DCE861A8BF93BDBC47FF6F39F0EB2B5BE4C5AFD40F1256DD2F95CFC9E47733B7AB1348FEB1CFCBC013F318F33BE5C53
	E454073807597CBB3529D84F4395FBA67C0CE1375E36C6460F8AE8DB139E263A199A6EEFDB079F46B9ED86FCEEB8332D0B8E2D555956BA30E622239DD6D63E0F2F42B101B5D4CD5FD7056D12B5D4E071041633030949D70433586A349A14218552DE0091GA1GD3B9EFF9557D1EB114F97BB8E3F847BD983E9243D98CC6768C265EC2DE6F45DE6783EB9E51E2D2690F9844BFC97CDEAEC09D4BFB44BF2EFF1E609B9F710F6B7F5FFE965777C2DE5CA32C7DE532FF7B0593FD5B34CCB40A37FE582B5EBF7D52C37C
	6AD19DBFFD816DBBD9E3F4E6AABF1F6E63689A70284F9AB0EAA21DA7136199BB112DDFC72D4BD4DE12A6323546510CFD5C71E81429902071D126B31B0F204F620274F00031G11G89GC2C414A9BD02694EFFD59B2D673E3A93E8B157E228D4BE4FDE21DCE7752A176517AE0DB0126B369D9B8348154588285C6695ACD375409241F460271DD746EBD02FFA7E3C0EB46435DD7E5818D7E679D4FFE2DF8F720A36AC1473DA6738B2DE1BFB5573575784BFDE29AEFEF0D22F0B8BA368FAE71E84BAB90969E22308FC
	E26C3FEA92637343DE67428363B33DD7BDFFBE43A6795623BC3C5E44F818BA09693D358EF1190FC5198A9EE3BA1ED00DE5186D2EF55A9D0A406C764F8F63DE476936375B9D8CF7834135BA5DA498CAE375BD44D72D821A9D1C6E0BB501E33731B546315BD7EB0CE33789B5FD1FCF4C2B89945B257C25F898FF9781A86E879CB7026392093FBA9652619CB7A51F5CE10174024758D83A099F3661F130ABG4DG9781029EE779C3C8BE6E41A29ED757744769DE0B662796684F90B628F57BDA9F1A8D72AF2A6D7B63
	E99B1BFC5A4075B75039153E1EBFAED0CCFF9321B96D4355E4DC40C77690C3083BGB5EF2E7201E0909F47E82440E2BBDF494B55B2E50A33A4C76076208CE99858037AD637D316F10B41757C0F446EA39F8B9FE7F63F63945A7D66C87089GC6C4B2391F3062DC8A01F4C4E4EF39CDB74051B5748D320EA4C452B55444716F90FC128ECF57D625195D01D988F94DCF30B93173C860B911FD44F8CEFCF1846727475965EE157C757E40118DBCCFDBF9AA952993452C46B5C8FDC5F437CB3D66CDB529CF738255BFF6
	A4505C22E31852299F43FFF17D7BC38133DB131F20F20DFDC2136FBCF8971E0CB22DFFD2432971C99FFAFBB83DAFFB983D9DCF769E278240558258FA517B11C3CFEFB75731BF6E8C60F7108DAC552D6A134C06FA1FE43A15E741310D03748200342718EEB509B85F521F525A4F533DD7BDE5BC3F1B8D708A60067961E9DF2A1D7A3E64F2594CE9423603F4F542F46F1383349DEB001F87B8E132AF1E6A012D8E75594B539DA45D4365A9952D623AD46630298B890D730CA06B439EA8385844F0FFA776F7D1AA6C8B
	B86EE602BBG65262430BEAF4A4375C696FB1CDDC0EF48E4AC7761BE36862F07F4A6C083C047E43A96D3FE6E6BC6FB576696BBE1D86BDDD22BE01902F56372D95D29D0BE8EE0A140C648AB1842760E334F62FA9970B4050F07A0601E79E01558A2493E85E8FE48D2549D2AD16A09842FDB113F1657559D83707CE717639AE2F4D2C0770E6D057A3D6358A9346FD327303D6568ADC679F1D3183EA6DB597A1084385427C13F81B21F6EFB9DAAB448EFGDC079F1E5A47B8E207AFBE6DFFE7E98E418FFF5A7F4E1263
	943B339484F9C294DB034F929BEF0374900EFB1A60C6C2BA0C6376DB59DABDB90A75B331D96073648F3A77734D5F759C3F3F35F42D704B2B5A866D7332835867C468EF6AD4A60752CA44ED00F4B647DDF71049260163FEDBCB7C9DC8C7F05C02EEF2D78952099CF734073531106346F2D92F1946F0F3892E9952DE0E3B464A688D1F46FD7613FA398483FE42B4CDFF26CEB35641B883FC9260D21FB152BD3795F5E943B37E7B61A1841F770C7FFE78CB8B5B8FB7C2DE44B30C7F4B4417B7BF9BE54AFB16616690DC
	A924AD9C373A85F1AEC88F6338BBC95F03A09D4EF13B385C22B92E1960B6C6032F984DF04BCE31F6ABB84EFE2AF73B3FB8455AED60659EEAE26DF6F05C13CD2C5D0B9CD7F612359B9D4D6230DF6EE33ECBBC60B6BC476CE9CE334FFE92E3CD7979DF3B6D36E2313D0AD8E73AE6DE3BEF19DA3F76B936E6CEA0B407C1BA98A07CB9964F76EEE7716C50BBC78BD5C36EB73CF39C5FF0D34A74676898AFF8CE0BC7B573F8F64AFE56E67673506767499952FE3D7DC31BD236186EC7E9FE0BCFBE5AE2DC57347C11BE79
	486F7C94FD7E53BE79A8237DEAFD5A37E737313EADFCB6CC109F8C8EF81FBA6CF95A279875996979C8083EA9E3096A27348570D3484AC17BFFDBA15B43273D4076203336B0DC698BEC3C7F510C380B108E66B88F41CD00F49C47BDCFF0C910CE1D4EF08F3474563D54D6446D00B2253C5CEB27181EB5F21C0568F78824A327B39B7046A9BCD70B6169F9A40D67DBB42D1CEAD4732F1EFD7E49A97D9D266F9B68BABE4C0A6FE217622C13BC767392C60FC0E6AF22DCEE3732F8C652F466FB3CE2C5BDF13925B6496D
	16EC745A10DA7ECF243C8C6FDEG6A4F54715858D84005834482A483EC788D233979C0E01AF9E47D480332253C7CC9F2C65AE1EF6F10819458B1D03F4BD3495AF2C159E13F21E3B37DB7743CF163CB446FB8D85A07CC1628F2E11088F59782FC20662DF9C95BCBD1DE7ED00B3C0093E76F6C6AA41CD33E179FA1BE8114F73D4478DE61A5E5C52FDF59CF3C449EC23990G0A7B162CE9B1100EFF09717E2835BF5E757C2745D05EBFD179B54778737EFFD6E35EBFA473AB934A6745B0FE6E21BE8E24DDB1EC5EA844
	BE87C1BA0C63DA36913EA11D48F12FEFC7DC5A0CA8D37A8C068B3D4466E69E4719ADECEED6F1DC2B0579GC1B3585C73DAC97C825251G73G52DE865AAF337CEBC9BE1E436139B01E7996C01E056717DAF0DEE1BDA3B9A21DB0DD9E526EEFAEC56B4A2B7BAD52C620FB04AB7C6675C06EBE6A639CF47CEEA0677A0A53A9B758DD389B90AE3ECC3EC7BAA170B24F3460993188934501A74747593CFA03584BC8A89F73B2534F6DAD467A79A5A9AB4C84B94FE4E5A775E187DEA63A1287E5CBE7B25DAD6FD3F759DD
	E7263B2E195A3C438E8D1D692F3B5D81F477E7246D91D0BE88004A23622440F9FB14587F291097B3136976EB447790E221FF310C5FD9CD0319EBF9313E7CD645EA7C52B69CE42EB4825E964B75F05F15FD9FD2F705752E9BF4BD6A13DE1B0F7E5108D87F78524F88BEA856BF3EB4117BE8A1A853D9AC3E1BE1C17B6C0274F00031G91GF1G4933D88CEAFE9D5EC76B73CC2341692A124EC932AE54CA7B77377DD7765D4C93FFE33E50040977886157B6873C371076DBBA4FB355E7237BA302277DFB2C897BE701
	BCAFC09040840029G713FE57D7BD7FDA66D9F1E5896A90A585AC1EEF4304E61A58B8D0D01815A37B1057A3EADD05BDFB6DB7DCE8F1E59G25337D6D502BDB74759A55FCD9FD8E0167C80090DDBDBA3FF21A71FB48F312DB31370AB28DEC960B6EDA27ECEF6DD1F53A0A2C93F837A1E2B6338BBFEEC6D9F4B85D7673CE07523BA61B8FF7123AF8FE3510577DDDB346D2DA1CEE928424EB7A42E636269746014F86B092A0A40E5E3320751E3A945896FDCEFC40C8A89F9D4766761FCE75E70BD0F6ECFEA7C33D34D7
	685C46347995FFDB6489E00B2EA336A8934A673D42F8FDF087093968EF01F2BA61D67C26CFFF9B02164BAABA5AD0E32DAB2B2FBCD1E6AD2A2A321654D49D2DBEDC4F74B738DBFFEE1E775EED814F4DED2F50F1762A4F4CBBBED2570CB72D8267A35B3A991E8E295B4C0F6DCB6D200E78A1510E5DF9FBB3776C5B33D30DEFFB2DECEF93768A5B5B5CE9755F5B2C73595B44DA7D77B6A8BFAD7F3DE67F3D4DD7BEFB1B02E67F3D0DC92DCF7B32CE547A322F322F3E646C4BB46F4E5E295A2DDBAAD9FCA7917AE2FE15
	6DAD1FBF3BCF683D4749F249E2DBD60B68313766679763831760231569643DC2671D42BE1F6CB3E3897DC6206B82988630D920F1BA327E10FFC9DF754631FEFD51A288EC4CDFCFE3B6EB6338B1C2694C66946667790FF9702B6ABD37D7353DE9487224951466B61BA62B373A87A2ABDA2FC9526A9DAC9CF83DA1EDDA3D1B2C7F8CDCEFDFB6D483B5930CE4C4E9BD522E49A62EC323FBEEC0F4E93DC5F62DDE5E69015423E52FBB595BD60D66E72FBBDE23362A901E8D2F51B3B6DA2FE7DB6FF87108ED2C1E7C9A0D
	978F0567A81FFA1FD59B7BE66FFD0AF2890332912FB1FFA60E78564910CE0DE7B6EF2FE5B0B6AF9B6A1546EBB62F915E0B60B9E95122C5340D6144AF37815E954FED5BD93C772ABB85A3560B666D7F0044137D6FABF159CF5D34CE1F2F5DA5E2FB150F510F25D1852C4C4FF73253B81ED62271E56BF17F78B24AB2A81E451F2FBDE1149F964FE2BFAF1C545B54B5B78FCBE1B65FDFF6136355FDE63CB63F0C66B065774FADE6015AF822DF50DF175301D7229AEAEA4136D7FEFD383A6CF083554D76B3DA3DDB7A32
	49B93B7FC51513567B312C55CB9FD03D40F36C5ECEED0E2DF7EAF4FF52B4F0FE763A34FA6386D16F44D92D5E43832A97389F175CDABF02BD9A5D62638321CBFD29617902407C2A6BF56F117B2EFE2CFE56D5EDC37D1E5992787CF73F45787C3748E2FCA762EBCB5F5F3355D882FF4FF64C227F1E0D7A56AE8567EB6A6B30AE831482B482482F73FBA2162D82712B8DFC6AB2DBBB1EBF63975A8AEBBF2AA9F0DF1FEF6A7F3B6E19CDE80FDA1C0A626CC47A8C7FCA930E1762F491A4453D5104B2F223B7C00B2A78C4
	326F1425B60226710E09A4D6BA8C7AB56AF5968379165C978F05F484472D2BE6B115699C771948E2A5899CE7F53018CAB2477D8F093DD63C81B2FC03618E11FBD6B224AFF2DC98418D03F4B047F5E710F8AC2423B9EE4E9656C67C9BECADE8ED467B92BE3E2C36AEE49DAB2BEB28ACA92A3256175455D4D5959755016D7B2668F8BD1F17131A3F6823FEC5CDDD65091A438D3E946A2D074B4ACA4BCA59BEB4DDE47EDC761B601B3E497C39C96F619EF3C077469B6C0AAC9513D51E7A3B32486E21873F494E8F0496
	ECA79652C9G4B92D85CE171B94D4E441CB28736B3FBF66F81BB133BFB67407CC1E653F270BA3EEA530E77E8ED9D9AD0DBF4DEADBDCF4EF100670284B617FACEE5407318F83A779782002CF5BBDD30AD6C21D872750AEA23AED92FACAEF1FBE5FF75AC89C6F74F4677DB4F7FAE9A0DDBD411EFE93C897E710C2384BFB441BF1E71EAA50BE70C003C8589AC1ED1FC81FD2A465FC5199400D1GE1G138162G12GD267000EGE483D4GD8GDCGC381C68204GC44C613FC55132338F392B07D9441039C5FA8F0E
	72774CC97EDB9AC0EB59DCF646723E05FD5FD0B817696A78F452F7C80FG88194B4E554237715F4581DCB227A1EC67E7D7090CC656F6AC5B8169A1G2392193EEF3F2469602D1732826B606E1C5C3D39F9FB3E485D8B2A485F39CF5E752DC66783CB1F3A1C1BE95E73455EC14E1BD11735F93322C2EB6B638135C565F243F1F6B6921648E4B5698443A5A6B29D89A7746978161C5E96E8FCE115BA88ED56341C16DA1586311D5771AA0157294BCA7F6B54B005FCB7846BCBC30FCB3DB37593055C1BA4DF1230F23F
	D056F0DC252756693163DDABAA17978B716C2B8DECA4757D6712B54A7C966CD55EE2767E7AAAAC23GB3344CB832E6D9A03F63AD36AFA9A6EB56D0C80F6038FAE2CFA3A0BD75AD36D7B96768EF2F2207053F710D3DAEGBA6CAC1372163655177F2DDB09CE3C9DE5CAFB1B715FD2407827FA11FED0530B2882633D57EBE4FDACG9A951C4ECFB30CE3C1F712F5D301F2C35EE67D7C6B16414444D9BF59BEBF74ED3AD741F7EA8FBF932F4C0E6675DB4F5F0E52FAE77B2D2707703759EF7CA8E43D0CFE5B5F7EDE22
	6B685B7E76F7E98B33CD89A86BF7183DDCF19E69F29F13AEC52ABE3FFF9E7DC57CFD833BA85B4F13CF696A2120231D5E7F0CDC3712644BF607D4C2FF0907772B0E0CBDFDBF29FBCF283C7AFE7EDF2FEA9B2AFFFDA130CDE93A503FCDE93BE06C7B4A97FA7B3EE7AF987B3E5D97743EAF45DD3C007A5E8E6BDCA3AFF78D479D6738EB89CD44FDE337A99D9CBF1C7005788A899B64360D7055CDF00DAA6EC69D6E380A8B3A00F6913A5C61F4333A37DFA03643AE4BB4FD87A9E3F760C7F82C4CBD04C73BCB5471BD1E
	630E73311DFE724A66672B7D56B31E1F9FD930DE68BB833B2390798E1B1F1F90DFA0669D7F7919C970716F784F4F8753597C1C87F93573587956E35B2E4C9F0C3E42FACB36DF597956E8624FCC18675F5FF1849FB94F3F3F395BD9FF23A1AFFBBE6B6FAD47756D0F84FC88C044FCB5BEB4BF50DD780AE6FD3D84A8178C10762E9ACFFA5760EEBDD923BE2B01D736469D427D2F0F6FD20E8B5ED69B58BFE77B56CCF3F626B9A7177BD855353A3A553876EFE5D7C44DF8C7B4FFABAD67BA22155BAC7695AB4906FDC5
	4EBE963B79E51DD62F41B170FA8F6196D0FD7F59B10D46D785036B5F7D5FE8F5650C0137BF23D12BB7FB4B406BDDA2E76EF4BFBC0C78B439B0EE956FB25DB8CFE277747D873A7734162B3F26EC3B2AED50BEE7113DC68374D7FE1745857626A3EE8824C7F2B96C5C2675FD376E7D51742BAF0718FFC39BA15B35BE5D27FB4F5FFE755B2E3F2AED50B13D1F6CFB02E1BC4378B80F395C7B6EDDB441CD06B2B13CDC67E29EA762B8EBB323177DFB06DB19511B5E97990CDEA9AFF7E38623D77BFB66FF7FCA44F5D741
	300D40633D647E874DAFA371CA120F76C3E06744CDC4FF0301CEA827F5B83DB72D27AC9A2DE947FD77952F915944C17DC4CE634D4B3E7B0AB9CDD81F7A7FC397FF17FD4E06A46D1D36BF0C48B29D7059C9ECCF3E5C2A35776B0C415CFD73EF2F99E8FE253ED35AE7F5672C9969DB84C37BDC844E238C66B9877E6F5E496BBE572A553D7172606AA611B3CB755CCFF7C6E24A989C1DC5641C047E6E73914FB5A03C50794292C5482C1770A7EF4CA27E940F39D46CB1ABCEF38B6E9D4CDDAE3352A1919C5D3DE7A942
	E7C645ED00D3A433DDB13BA4F72708C7BCF2CF1647AD3C5FFBADA97A692C1921565275A9C2CA253034037824154212EEF4EE3DAE10780FGB6FB4E8A5F8AA940ACEEECE68325551CD2A5F1C7634F6D49DF7C661845A9C2AA10216EF925100ABEB6D0F3D32A0B41BDC71A823A31788FED54EABF5A46A994548912E2571F709F7E7C51D203B24629CB86A92404138497F8F4C4D27A2DE1DC9F8F9CBE6D237EFF0394CBF88DF67C07A122D403B2A91797ADDA044072CCCE00D21F96F13A3D276FBFAD23882B546FE14C
	78C1CC3E9986EB250FCACE397DDFF322DFBD66D9ACAC2D947E0E9624DEF2130D2AE4430F9455DFEDAD97163B70C3A50CA340C8FA48E309C7691125AAE1FDDB9D7E0A10C711ECC5EC8B6CD1048F48EFAD6C4270752E8A5153216056EDFF15106A405F17955E27593268E85FC577437B09BA180A1A49F022C88460F79D619729E4F1AA6B9EDD3DED4B41047045C2CA39701E6C94ED65E2AB4C01CAE139526116BC9DCE5966F5FDD5C888AD6BE6973C9783390FF9773133D9F8D302B3FD46FB6B701509AB4BC1FEDE37
	300B14C4031945CB58CABAC4B7B4A539AB957C3DDC27BB1D67DD73CFE57BF3DFFFE4C991CCEAA7F1ACB6FBDD8AF065969D9E7C898A60406C47814B620432FEB9AD7B7A3B7FF20290522AAA42E6AAB2283A2BDDF2F66EAAEAEB33BBA4CEG648764B7F172D8A64B2F4C7B5E1FFFF0F0462296986FD2E1F1E7F6B6791BC37E6E463FB98413C3B0B93BC108C9C21F7F7C733DC483BFD12812F06300431CD58EA3257CF67E3451338B1266C16F4A05A56437ADC058EB34D2073BBADBA477352157EFDAB1B27EBA9C8B97
	2A84233B34CD6C344BBD70C29DEEAF6277F8C155FD378DFCA6613CEAB7C8ADD1ED8F8B4B2EA158CD3DD49031DBFA6B922237114CCF495F4F86ADA92C15C96AE6E1037812635B2D835E8175E2395A8B4CD98A1E84CCAE36G94F9BC6A05DB50C2DCA8908B13F3853D22C0D23AFE53DE12CDE500FE27FE3F7DAE547ADDCA7A4D0719C6C4E831C2D66D2077BF0AD9CC9D42BF5524DC3D178F898E85AEA338B17E70BF1967933EBC63520577CDB076C66F1F6C3C2C3FFF127C434B816F74057C194687A27E6C7FDBB877
	105EA583FE7DDFD84C74AF67703EE620B3087ACED11695D1BED3643061F9C4F10FA2E9E776633B113E0715D1B3E95EC35D4877E9DD1D7F87D0CB878832285F705EA0GG2CE3GGD0CB818294G94G88G88GCEE30DB132285F705EA0GG2CE3GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG98A1GGGG
**end of data**/
}
/**
 * Return the JComboBox1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxDefaultRate() {
	if (ivjJComboBoxDefaultRate == null) {
		try {
			ivjJComboBoxDefaultRate = new javax.swing.JComboBox();
			ivjJComboBoxDefaultRate.setName("JComboBoxDefaultRate");
			ivjJComboBoxDefaultRate.setPreferredSize(new java.awt.Dimension(90, 23));
			ivjJComboBoxDefaultRate.setMinimumSize(new java.awt.Dimension(90, 23));
			ivjJComboBoxDefaultRate.setMaximumSize(new java.awt.Dimension(90, 23));
			// user code begin {1}
			ivjJComboBoxDefaultRate.addItem("A");
			ivjJComboBoxDefaultRate.addItem("B");
			ivjJComboBoxDefaultRate.addItem("C");
			ivjJComboBoxDefaultRate.addItem("D");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxDefaultRate;
}
/**
 * Return the JComboBoxEditDays property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxEditDays() {
	if (ivjJComboBoxEditDays == null) {
		try {
			ivjJComboBoxEditDays = new javax.swing.JComboBox();
			ivjJComboBoxEditDays.setName("JComboBoxEditDays");
			ivjJComboBoxEditDays.setToolTipText("Select a TOU Day to bring up the Day Editor.");
			ivjJComboBoxEditDays.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxEditDays.setMaximumSize(new java.awt.Dimension(125, 23));
			ivjJComboBoxEditDays.setPreferredSize(new java.awt.Dimension(125, 23));
			ivjJComboBoxEditDays.setMinimumSize(new java.awt.Dimension(125, 23));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxEditDays;
}
/**
 * Return the JComboBoxRemoveDays property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxRemoveDays() {
	if (ivjJComboBoxRemoveDays == null) {
		try {
			ivjJComboBoxRemoveDays = new javax.swing.JComboBox();
			ivjJComboBoxRemoveDays.setName("JComboBoxRemoveDays");
			ivjJComboBoxRemoveDays.setToolTipText("Select a TOU Day to delete it permanently.");
			ivjJComboBoxRemoveDays.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJComboBoxRemoveDays.setMaximumSize(new java.awt.Dimension(125, 23));
			ivjJComboBoxRemoveDays.setPreferredSize(new java.awt.Dimension(125, 23));
			ivjJComboBoxRemoveDays.setMinimumSize(new java.awt.Dimension(125, 23));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxRemoveDays;
}
/**
 * Return the JLabelDefaultRate property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelDefaultRate() {
	if (ivjJLabelDefaultRate == null) {
		try {
			ivjJLabelDefaultRate = new javax.swing.JLabel();
			ivjJLabelDefaultRate.setName("JLabelDefaultRate");
			ivjJLabelDefaultRate.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelDefaultRate.setText("Default Rate: ");
			ivjJLabelDefaultRate.setMaximumSize(new java.awt.Dimension(103, 19));
			ivjJLabelDefaultRate.setMinimumSize(new java.awt.Dimension(103, 19));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelDefaultRate;
}
/**
 * Return the JLabelEdit property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelEdit() {
	if (ivjJLabelEdit == null) {
		try {
			ivjJLabelEdit = new javax.swing.JLabel();
			ivjJLabelEdit.setName("JLabelEdit");
			ivjJLabelEdit.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelEdit.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelEdit.setText("Edit Days");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelEdit;
}
/**
 * Return the JLabelRemove property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelRemove() {
	if (ivjJLabelRemove == null) {
		try {
			ivjJLabelRemove = new javax.swing.JLabel();
			ivjJLabelRemove.setName("JLabelRemove");
			ivjJLabelRemove.setFont(new java.awt.Font("Arial", 1, 12));
			ivjJLabelRemove.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJLabelRemove.setText("Remove Days");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelRemove;
}
/**
 * Return the StateGroupNameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelScheduleName() {
	if (ivjJLabelScheduleName == null) {
		try {
			ivjJLabelScheduleName = new javax.swing.JLabel();
			ivjJLabelScheduleName.setName("JLabelScheduleName");
			ivjJLabelScheduleName.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelScheduleName.setText("Schedule Name:");
			ivjJLabelScheduleName.setMaximumSize(new java.awt.Dimension(103, 19));
			ivjJLabelScheduleName.setMinimumSize(new java.awt.Dimension(103, 19));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelScheduleName;
}
/**
 * Return the JPanelHoliday property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelTOUDays() {
	if (ivjJPanelTOUDays == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 12));
			ivjLocalBorder.setTitle("TOU Day Assignment");
			ivjJPanelTOUDays = new javax.swing.JPanel();
			ivjJPanelTOUDays.setName("JPanelTOUDays");
			ivjJPanelTOUDays.setBorder(ivjLocalBorder);
			ivjJPanelTOUDays.setLayout(new java.awt.GridBagLayout());
			ivjJPanelTOUDays.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
			ivjJPanelTOUDays.setPreferredSize(new java.awt.Dimension(324, 367));
			ivjJPanelTOUDays.setMinimumSize(new java.awt.Dimension(324, 367));

			java.awt.GridBagConstraints constraintsJScrollPaneTable = new java.awt.GridBagConstraints();
			constraintsJScrollPaneTable.gridx = 1; constraintsJScrollPaneTable.gridy = 3;
			constraintsJScrollPaneTable.gridwidth = 2;
			constraintsJScrollPaneTable.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJScrollPaneTable.weightx = 1.0;
			constraintsJScrollPaneTable.weighty = 1.0;
			constraintsJScrollPaneTable.insets = new java.awt.Insets(4, 14, 20, 19);
			getJPanelTOUDays().add(getJScrollPaneTable(), constraintsJScrollPaneTable);

			java.awt.GridBagConstraints constraintsJComboBoxEditDays = new java.awt.GridBagConstraints();
			constraintsJComboBoxEditDays.gridx = 1; constraintsJComboBoxEditDays.gridy = 2;
			constraintsJComboBoxEditDays.weightx = 1.0;
			constraintsJComboBoxEditDays.insets = new java.awt.Insets(2, 34, 4, 16);
			getJPanelTOUDays().add(getJComboBoxEditDays(), constraintsJComboBoxEditDays);

			java.awt.GridBagConstraints constraintsJComboBoxRemoveDays = new java.awt.GridBagConstraints();
			constraintsJComboBoxRemoveDays.gridx = 2; constraintsJComboBoxRemoveDays.gridy = 2;
			constraintsJComboBoxRemoveDays.weightx = 1.0;
			constraintsJComboBoxRemoveDays.insets = new java.awt.Insets(2, 17, 4, 39);
			getJPanelTOUDays().add(getJComboBoxRemoveDays(), constraintsJComboBoxRemoveDays);

			java.awt.GridBagConstraints constraintsJLabelEdit = new java.awt.GridBagConstraints();
			constraintsJLabelEdit.gridx = 1; constraintsJLabelEdit.gridy = 1;
			constraintsJLabelEdit.ipadx = 10;
			constraintsJLabelEdit.insets = new java.awt.Insets(22, 34, 2, 79);
			getJPanelTOUDays().add(getJLabelEdit(), constraintsJLabelEdit);

			java.awt.GridBagConstraints constraintsJLabelRemove = new java.awt.GridBagConstraints();
			constraintsJLabelRemove.gridx = 2; constraintsJLabelRemove.gridy = 1;
			constraintsJLabelRemove.ipadx = 31;
			constraintsJLabelRemove.insets = new java.awt.Insets(22, 17, 2, 56);
			getJPanelTOUDays().add(getJLabelRemove(), constraintsJLabelRemove);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelTOUDays;
}
/**
 * Return the JScrollPaneTable property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPaneTable() {
	if (ivjJScrollPaneTable == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitle("");
			ivjJScrollPaneTable = new javax.swing.JScrollPane();
			ivjJScrollPaneTable.setName("JScrollPaneTable");
			ivjJScrollPaneTable.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			ivjJScrollPaneTable.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
			ivjJScrollPaneTable.setBorder(ivjLocalBorder1);
			ivjJScrollPaneTable.setAlignmentY(java.awt.Component.TOP_ALIGNMENT);
			ivjJScrollPaneTable.setPreferredSize(new java.awt.Dimension(323, 242));
			ivjJScrollPaneTable.setMinimumSize(new java.awt.Dimension(323, 242));
			getJScrollPaneTable().setViewportView(getJTableTOUDays());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPaneTable;
}
private TOUDayTableModel getJTableModel() 
{
	if( !(getJTableTOUDays().getModel() instanceof TOUDayTableModel) )
		return new TOUDayTableModel();
	else
		return (TOUDayTableModel)getJTableTOUDays().getModel();
}
/**
 * Return the JTableRateOffsets property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTable getJTableTOUDays() {
	if (ivjJTableTOUDays == null) {
		try {
			ivjJTableTOUDays = new javax.swing.JTable();
			ivjJTableTOUDays.setName("JTableTOUDays");
			getJScrollPaneTable().setColumnHeaderView(ivjJTableTOUDays.getTableHeader());
			getJScrollPaneTable().getViewport().setBackingStoreEnabled(true);
			ivjJTableTOUDays.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
			ivjJTableTOUDays.setPreferredSize(new java.awt.Dimension(287,393));
			ivjJTableTOUDays.setBounds(0, 5, 287, 393);
			// user code begin {1}
			ivjJTableTOUDays.setAutoCreateColumnsFromModel(true);
			ivjJTableTOUDays.setModel( getJTableModel() );
			ivjJTableTOUDays.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
			ivjJTableTOUDays.setPreferredSize(new java.awt.Dimension(385,5000));
			ivjJTableTOUDays.setBounds(0, 0, 385, 5000);
			ivjJTableTOUDays.setMaximumSize(new java.awt.Dimension(32767, 32767));
			ivjJTableTOUDays.setPreferredScrollableViewportSize(new java.awt.Dimension(200, 8000));
			ivjJTableTOUDays.setGridColor( java.awt.Color.black );
			ivjJTableTOUDays.getSelectionModel().setSelectionMode( javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION );
			ivjJTableTOUDays.setRowHeight(20);
			
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTableTOUDays;
}
/**
 * Return the JTextFieldTOUScheduleName property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldTOUScheduleName() {
	if (ivjJTextFieldTOUScheduleName == null) {
		try {
			ivjJTextFieldTOUScheduleName = new javax.swing.JTextField();
			ivjJTextFieldTOUScheduleName.setName("JTextFieldTOUScheduleName");
			ivjJTextFieldTOUScheduleName.setPreferredSize(new java.awt.Dimension(219, 20));
			ivjJTextFieldTOUScheduleName.setHighlighter(new javax.swing.plaf.basic.BasicTextUI.BasicHighlighter());
			ivjJTextFieldTOUScheduleName.setMinimumSize(new java.awt.Dimension(219, 20));
			ivjJTextFieldTOUScheduleName.setMaximumSize(new java.awt.Dimension(219, 20));
			// user code begin {1}
			ivjJTextFieldTOUScheduleName.setDocument(new com.cannontech.common.gui.util.TextFieldDocument(com.cannontech.common.gui.util.TextFieldDocument.MAX_TOU_SCHEDULE_NAME_LENGTH));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTOUScheduleName;
}
/**
 * getValue method comment.
 */
public Object getValue(Object val) 
{
	/*if( getJTableRateOffsets().isEditing() )
		getJTableRateOffsets().getCellEditor().stopCellEditing();
		
	TOUSchedule tou = null;
	if( val != null )
		tou = (TOUSchedule)val;
	else
		tou = new TOUSchedule(
					com.cannontech.database.db.tou.TOUSchedule.getNextTOUScheduleID() );

	tou.setScheduleName( getJTextFieldTOUScheduleName().getText() )	;

	tou.getRateOffsetsVector().removeAllElements();
	for( int i = 0; i < getJTableModel().getRowCount(); i++ )
	{
		TOURateOffset ro = new TOURateOffset();
		ro.setTOUScheduleID(tou.getScheduleID());
		ro.setSwitchRate(getJTableModel().getSwitchRateAt(i));
		ro.setSwitchOffset(JTextFieldTimeEntry.getTimeTotalSeconds(getJTableModel().getSwitchOffsetAt(i)));
		tou.getRateOffsetsVector().addElement(ro);
	}

	return tou;*/
	return null;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getJTableTOUDays().addMouseListener(ivjEventHandler);
	getJTextFieldTOUScheduleName().addCaretListener(ivjEventHandler);
	getJComboBoxDefaultRate().addActionListener(ivjEventHandler);
	getJComboBoxEditDays().addActionListener(ivjEventHandler);
	getJComboBoxRemoveDays().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("TOUScheduleBasePanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(374, 418);

		java.awt.GridBagConstraints constraintsJTextFieldTOUScheduleName = new java.awt.GridBagConstraints();
		constraintsJTextFieldTOUScheduleName.gridx = 2; constraintsJTextFieldTOUScheduleName.gridy = 1;
		constraintsJTextFieldTOUScheduleName.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldTOUScheduleName.weightx = 1.0;
		constraintsJTextFieldTOUScheduleName.insets = new java.awt.Insets(15, 0, 6, 38);
		add(getJTextFieldTOUScheduleName(), constraintsJTextFieldTOUScheduleName);

		java.awt.GridBagConstraints constraintsJLabelScheduleName = new java.awt.GridBagConstraints();
		constraintsJLabelScheduleName.gridx = 1; constraintsJLabelScheduleName.gridy = 1;
		constraintsJLabelScheduleName.ipadx = 6;
		constraintsJLabelScheduleName.insets = new java.awt.Insets(16, 8, 6, 0);
		add(getJLabelScheduleName(), constraintsJLabelScheduleName);

		java.awt.GridBagConstraints constraintsJPanelTOUDays = new java.awt.GridBagConstraints();
		constraintsJPanelTOUDays.gridx = 1; constraintsJPanelTOUDays.gridy = 3;
		constraintsJPanelTOUDays.gridwidth = 2;
		constraintsJPanelTOUDays.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelTOUDays.weightx = 1.0;
		constraintsJPanelTOUDays.weighty = 1.0;
		constraintsJPanelTOUDays.ipadx = 32;
		constraintsJPanelTOUDays.ipady = -34;
		constraintsJPanelTOUDays.insets = new java.awt.Insets(6, 8, 4, 10);
		add(getJPanelTOUDays(), constraintsJPanelTOUDays);

		java.awt.GridBagConstraints constraintsJLabelDefaultRate = new java.awt.GridBagConstraints();
		constraintsJLabelDefaultRate.gridx = 1; constraintsJLabelDefaultRate.gridy = 2;
		constraintsJLabelDefaultRate.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelDefaultRate.ipadx = 4;
		constraintsJLabelDefaultRate.insets = new java.awt.Insets(6, 8, 9, 2);
		add(getJLabelDefaultRate(), constraintsJLabelDefaultRate);

		java.awt.GridBagConstraints constraintsJComboBoxDefaultRate = new java.awt.GridBagConstraints();
		constraintsJComboBoxDefaultRate.gridx = 2; constraintsJComboBoxDefaultRate.gridy = 2;
		constraintsJComboBoxDefaultRate.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJComboBoxDefaultRate.weightx = 1.0;
		constraintsJComboBoxDefaultRate.insets = new java.awt.Insets(6, 0, 5, 167);
		add(getJComboBoxDefaultRate(), constraintsJComboBoxDefaultRate);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * Insert the method's description here.
 * Creation date: (6/22/2004 9:11:36 AM)
 * @return boolean
 */
public boolean isInputValid() 
{
	com.cannontech.common.gui.util.OkCancelPanel o
			= new com.cannontech.common.gui.util.OkCancelPanel();
	
	if( getJTextFieldTOUScheduleName().getText() == null
		 || ! (getJTextFieldTOUScheduleName().getText().length() > 0) )
	{
		return false;
	}

	return true;

}
/**
 * Comment
 */
public void jComboBoxEditDays_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jComboBoxRemoveDays_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	
	fireInputUpdate();
	return;
}
/**
 * Comment
 */
public void jTableRateOffsets_MousePressed(java.awt.event.MouseEvent event) 
{

	int rowLocation = getJTableTOUDays().rowAtPoint( event.getPoint() );
	
	getJTableTOUDays().getSelectionModel().setSelectionInterval(
			 		rowLocation, rowLocation );

	return;
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		TOUScheduleBasePanel aTOUScheduleBasePanel;
		aTOUScheduleBasePanel = new TOUScheduleBasePanel();
		frame.setContentPane(aTOUScheduleBasePanel);
		frame.setSize(aTOUScheduleBasePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseClicked(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseEntered(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseExited(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mousePressed(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTableTOUDays()) 
		connEtoC1(e);
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the MouseListener interface.
 * @param e java.awt.event.MouseEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void mouseReleased(java.awt.event.MouseEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * setValue method comment.
 */
public void setValue(Object val) 
{
	updateTOUDayContainers();
	
	/*TOUSchedule tou = null;
	
	if( val != null )
	{
		tou = (TOUSchedule)val;

		getJTextFieldTOUScheduleName().setText( tou.getScheduleName() );

		for( int i = 0; i < tou.getRateOffsetsVector().size(); i++ )
		{		
			TOURateOffset ro = (TOURateOffset)tou.getRateOffsetsVector().get(i);
			getJTableModel().addRowValue(ro.getSwitchRate(), JTextFieldTimeEntry.setTimeTextForField(ro.getSwitchOffset()));
		}
	}
	else
	{
		//make sure that a fledgling TOU Schedule has at least one RateOffset
		getJTableModel().addRowValue("A", JTextFieldTimeEntry.setTimeTextForField(new Integer(0)));	
	}*/
}

/*Called to update the contents of the dayTable comboboxes, as well as the edit and
 * remove combos, whenever there is a change in the number of TOU Days
 */
public void updateTOUDayContainers()
{
	javax.swing.table.TableColumn dayOfWeekColumn = getJTableTOUDays().getColumnModel().getColumn(TOUDayTableModel.DAY_OF_WEEK_COLUMN);
	dayOfWeekColumn.setPreferredWidth(20);
	javax.swing.table.TableColumn touDaysColumn = getJTableTOUDays().getColumnModel().getColumn(TOUDayTableModel.ASSIGNED_TOUDAY_COLUMN);
	touDaysColumn.setPreferredWidth(40);
	
	DefaultComboBoxModel[] theModels = new DefaultComboBoxModel[daysOfTheSchedule.length];
	DefaultComboBoxModel comboModel = new DefaultComboBoxModel();
	for(int j = 0; j < daysOfTheSchedule.length; j++)
	{
		//add all the TOUDays
		comboModel.addElement(new TOUDay(new Integer(1234), "CHRISTMAS"));
		
		theModels[j] = comboModel;		
	}
	
	//add table rows
	for(int g = 0; g < daysOfTheSchedule.length; g++)
	{
		getJTableModel().addRowValue(daysOfTheSchedule[g], new TOUDay(new Integer(1234), "CHRISTMAS"));
	}
	
	touDaysColumn.setCellEditor(new MultiJComboCellEditor(theModels));
	touDaysColumn.setCellRenderer(new MultiJComboCellRenderer(theModels));
}
}

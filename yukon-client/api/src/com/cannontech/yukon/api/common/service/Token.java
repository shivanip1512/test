package com.cannontech.yukon.api.common.service;

import org.apache.commons.lang.Validate;


/**
 * An immutable class representing a token.
 */
public final class Token {
    private final TokenType type;
    private final String key;

    public Token(TokenType type, String key) {
        this.type = type;
        this.key = key;
    }

    /**
     * Create a new instance based on a string version generated by {@link #getString()}.
     */
    public Token(String tokenStr) {
        String[] parts = tokenStr.split(":", 2);
        Validate.isTrue(parts.length == 2, "Invalid tokenStr " + tokenStr);
        this.type = TokenType.fromShortName(parts[0]);
        this.key = parts[1];
    }

    public TokenType getType() {
        return type;
    }

    public String getKey() {
        return key;
    }

    /**
     * The a string version of this token to pass around (perhaps back to a client who might ask
     * for details in the future).
     * 
     *  Do NOT modify this without a corresponding modification to the {@link #Token(String)}
     */
    public String getString() {
        return type.getShortName() + ":" + key;
    }

    @Override
    public String toString() {
        return getString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((key == null) ? 0 : key.hashCode());
        result = prime * result + ((type == null) ? 0 : type.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Token other = (Token) obj;
        if (key == null) {
            if (other.key != null)
                return false;
        } else if (!key.equals(other.key))
            return false;
        if (type != other.type)
            return false;
        return true;
    }
}

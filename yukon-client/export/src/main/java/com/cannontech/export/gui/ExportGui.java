package com.cannontech.export.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;

import com.cannontech.export.ExportFormatBase;
import com.cannontech.export.ExportFormatTypes;
import com.cannontech.export.ExportPropertiesBase;
public class ExportGui extends javax.swing.JFrame implements java.awt.event.ActionListener, java.awt.event.ItemListener {
	private javax.swing.JComboBox ivjFileFormatComboBox = null;
	private javax.swing.JLabel ivjFileFormatLabel = null;
	private javax.swing.JButton ivjAdvancedButton = null;
	private javax.swing.JPanel ivjFormatPanel = null;
	private javax.swing.JPanel ivjRunAsPanel = null;
	private javax.swing.JRadioButton ivjRunConsoleButton = null;
	private javax.swing.JRadioButton ivjRunOnceButton = null;
	private javax.swing.JPanel ivjJFrameContentPane = null;
	private javax.swing.JMenuItem ivjAboutMenuItem = null;
	private javax.swing.JMenuItem ivjExitMenuItem = null;
	private javax.swing.JMenuBar ivjExportGuiJMenuBar = null;
	private javax.swing.JMenu ivjFileMenu = null;
	private javax.swing.JMenuItem ivjHelpTopicsMenuItem = null;
	private javax.swing.ButtonGroup runAsButtonGroup = null;
	private javax.swing.JRadioButton ivjRunAsServiceButton = null;
	private javax.swing.JMenu ivjHelpMenu = null;
	private javax.swing.JButton ivjBrowseButton = null;
	private javax.swing.JLabel ivjFileDirectoryExportLabel = null;
	private javax.swing.JTextField ivjFileDirectoryTextField = null;
	private javax.swing.JButton ivjGenerateFileButton = null;
	private javax.swing.JPanel ivjGeneratePanel = null;
	private javax.swing.JCheckBox ivjStartServiceCheckBox = null;
	private javax.swing.JCheckBox ivjInstallServiceCheckBox = null;
	private javax.swing.JPanel ivjRunPanel = null;
	private javax.swing.JPanel ivjJPanel1 = null;
	private javax.swing.JCheckBox ivjStopServiceCheckBox = null;
	private javax.swing.JCheckBox ivjUninstallServiceCheckBox = null;
	private com.cannontech.export.ExportFormatBase formatBase = null;
	private AdvancedOptionsPanel advOptsPanel = null;
	private final String BATCHFILENAME= "export.bat";
	private final java.text.SimpleDateFormat DATE_FORMAT = new java.text.SimpleDateFormat("MM/dd/yyyy");
	private int RUN_ONCE = 0;
	private int RUN_CONSOLE = 1;
	private int RUN_AS_SERVICE = 2;
	private int selectedRunAsButton = -1;
	private ExportPropertiesBase exportProperties = new ExportPropertiesBase();
	private javax.swing.JLabel ivjMinsLabel = null;
	private javax.swing.JLabel ivjRunIntervalLabel = null;
	private javax.swing.JTextField ivjRunIntervalTextField = null;
	private javax.swing.JSeparator ivjJSeparator2 = null;
	private javax.swing.JSeparator ivjJSeparator3 = null;
	private javax.swing.JCheckBox ivjAppendCheckBox = null;
	/**
	 * ExportGui constructor comment.
	 */
	public ExportGui() {
		super();
		initialize();
	}
	/**
	 * Display popup frame of ExportGUI about information.
	 */
	private void about()
	{
		javax.swing.JFrame popupFrame = new javax.swing.JFrame();
		popupFrame.setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage("ctismall.gif"));
		javax.swing.JOptionPane.showMessageDialog(popupFrame,
		"This is version " + formatBase.getVersion() + "\nCopyright (C) 1999-2002 Cannon Technologies.",
		"About Yukon Export Client",javax.swing.JOptionPane.INFORMATION_MESSAGE);
	}
	/**
	 * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)
	 */
	public void actionPerformed(java.awt.event.ActionEvent event) 
	{
		if ( event.getSource() == getFileFormatComboBox())
		{
			String format = getFileFormatComboBox().getSelectedItem().toString();
			getExportProperties().setFormatID(ExportFormatTypes.getFormatTypeInt(format));
			
			if( getExportProperties().getFormatID() == ExportFormatTypes.DBPURGE_FORMAT ||
			getExportProperties().getFormatID() == ExportFormatTypes.CSVBILLING_FORMAT)
				getAdvancedButton().setEnabled(true);
			else
				getAdvancedButton().setEnabled(false);
		}
		else if (event.getSource() == getRunOnceButton())
		{
			setSelectedRunAsButton(RUN_ONCE);
			getRunIntervalTextField().setEnabled(false);
			getRunIntervalLabel().setEnabled(false);
			getMinsLabel().setEnabled(false);
			getStartServiceCheckBox().setEnabled(false);
			getStopServiceCheckBox().setEnabled(false);
			getInstallServiceCheckBox().setEnabled(false);
			getUninstallServiceCheckBox().setEnabled(false);
		}
		else if (event.getSource() == getRunConsoleButton())
		{
			setSelectedRunAsButton(RUN_CONSOLE);
			getRunIntervalTextField().setEnabled(true);
			getRunIntervalLabel().setEnabled(true);
			getMinsLabel().setEnabled(true);
			
			getStartServiceCheckBox().setEnabled(false);
			getStopServiceCheckBox().setEnabled(false);
			getInstallServiceCheckBox().setEnabled(false);
			getUninstallServiceCheckBox().setEnabled(false);
		}
		else if (event.getSource() == getRunAsServiceButton())
		{
			setSelectedRunAsButton(RUN_AS_SERVICE);
			getRunIntervalTextField().setEnabled(true);
			getRunIntervalLabel().setEnabled(true);
			getMinsLabel().setEnabled(true);
			
			getStartServiceCheckBox().setEnabled(true);
			getStopServiceCheckBox().setEnabled(true);
			getInstallServiceCheckBox().setEnabled(true);		
			getUninstallServiceCheckBox().setEnabled(true);
		}
		else if (event.getSource() == getAdvancedButton())
		{
			AdvancedOptionsPanel advOpts = getAdvOptsPanel();
			advOpts.setValue(getExportProperties());
			ExportPropertiesBase props = advOpts.showAdvancedOptions( this );
			if( props != null)
			{
				setExportPropertes( props);
			}
		}
		else if( event.getSource() == getExitMenuItem())
		{
			System.exit(0);
		}
		else if( event.getSource() == getHelpTopicsMenuItem())
		{
		}
		else if( event.getSource() == getAboutMenuItem())
		{
			about();
		}
		else if(event.getSource() == getGenerateFileButton())
		{
			formatBase = ExportFormatBase.createFileFormat(getExportProperties().getFormatID());
			formatBase.setIsAppend(getAppendCheckBox().isSelected());
			long millis = Long.valueOf(getRunIntervalTextField().getText()).longValue() * 60000l;
			formatBase.setRunTimeIntervalInMillis(millis);
			formatBase.setExportProperties(getExportProperties());
			formatBase.setExportDirectory(getFileDirectoryTextField().getText());
			formatBase.setIsService(false);
			System.out.println("NEXT RUN TIME = " + formatBase.getNextRunTime().getTime());
			generateFile();
			System.out.println("NEXT RUN TIME(after generate) = " + formatBase.getNextRunTime().getTime());
		}
		else if( event.getSource() == getBrowseButton())
		{
			javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
			chooser.setCurrentDirectory(new java.io.File(getFileDirectoryTextField().getText()));
			chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
			int returnVal = chooser.showOpenDialog(this);
			if( returnVal == javax.swing.JFileChooser.APPROVE_OPTION )
			{
				getFileDirectoryTextField().setText(chooser.getSelectedFile().getPath());
			}
		}
	}
	/**
	 * Write batchString to the file BATCHFILENAME.
	 * @param batchString java.lang.String
	 */
	public void createBatchFile(String batchString)
	{
		char [] text = batchString.toCharArray();
		if (batchString != null)
		{
			try
			{
				java.io.FileWriter writer = new java.io.FileWriter( BATCHFILENAME );
	
				for( int i = 0; i < text.length; i++ )
				{
					if( new Character(text[i]) != null)
						writer.write( text[ i ] );
				}
						
				writer.close();
			}
			catch ( java.io.IOException e )
			{
				e.printStackTrace();
			}
		}
	
	}
	/**
	 * ExportFormatBase.runMainWithGui() for RUN_ONCE
	 * CreateBatchFile() and writeDatFile() for RUN_CONSOLE or RUN_AS_SERVICE and exits this application.
	 */
	public void generateFile()
	{
		if( getSelectedRunAsButton() == RUN_ONCE)
		{
			ExportFormatBase.runMainWithGui(formatBase);
			return;
		}
		
		String string = "";
		if( getSelectedRunAsButton() == RUN_CONSOLE)
		{
			string += "Wrapper.exe -c " + ExportFormatTypes.getFormatWrapperConf(getExportProperties().getFormatID());
		}
		else if( getSelectedRunAsButton() == RUN_AS_SERVICE)
		{
			if( getInstallServiceCheckBox().isSelected())
			{
				string += "Wrapper.exe -i " + ExportFormatTypes.getFormatWrapperConf(getExportProperties().getFormatID());
			}
			else if( getUninstallServiceCheckBox().isSelected())
			{
				string += "Wrapper.exe -r " + ExportFormatTypes.getFormatWrapperConf(getExportProperties().getFormatID());
			}
		
			if( getStartServiceCheckBox().isSelected())
			{
				string += "\r\n";
				string += "net start \"" + getServiceName() + "\" ";
			}
			else if( getStopServiceCheckBox().isSelected())
			{
				string += "\r\n";
				string += "net stop \"" + getServiceName() + "\"";
			}
		}
	
		formatBase.writeDatFile();
		createBatchFile(string);
	
		try
		{
			Runtime.getRuntime().exec("cmd /c\"start " + BATCHFILENAME + "\"");
		}
		catch(java.io.IOException ioe)
		{
			ioe.printStackTrace();
		}
		System.exit(0);
	
	}
	/**
	 * Return the AboutMenuItem property value.
	 * @return javax.swing.JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JMenuItem getAboutMenuItem() {
		if (ivjAboutMenuItem == null) {
			try {
				ivjAboutMenuItem = new javax.swing.JMenuItem();
				ivjAboutMenuItem.setName("AboutMenuItem");
				ivjAboutMenuItem.setText("About");
				// user code begin {1}
				ivjAboutMenuItem.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjAboutMenuItem;
	}
	/**
	 * Return the AdvancedButton property value.
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getAdvancedButton() {
		if (ivjAdvancedButton == null) {
			try {
				ivjAdvancedButton = new javax.swing.JButton();
				ivjAdvancedButton.setName("AdvancedButton");
				ivjAdvancedButton.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
				ivjAdvancedButton.setText("Advanced ...");
				ivjAdvancedButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
				// user code begin {1}
				ivjAdvancedButton.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjAdvancedButton;
	}
	/**
	 * Returns advOptsPanel for the selectedIndex of fileFormatComboBoxMethod.
	 * @return AdvancedOptionsPanel
	 */
	private AdvancedOptionsPanel getAdvOptsPanel()
	{
		if( advOptsPanel == null)
		{
			advOptsPanel  = new AdvancedOptionsPanel();
		}
		return advOptsPanel;
	}
/**
 * Return the AppendCheckBox property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getAppendCheckBox() {
	if (ivjAppendCheckBox == null) {
		try {
			ivjAppendCheckBox = new javax.swing.JCheckBox();
			ivjAppendCheckBox.setName("AppendCheckBox");
			ivjAppendCheckBox.setFont(new java.awt.Font("dialog", 0, 12));
			ivjAppendCheckBox.setText("Append to File");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAppendCheckBox;
}
	/**
	 * Return the BrowseButton property value.
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getBrowseButton() {
		if (ivjBrowseButton == null) {
			try {
				ivjBrowseButton = new javax.swing.JButton();
				ivjBrowseButton.setName("BrowseButton");
				ivjBrowseButton.setFont(new java.awt.Font("dialog", 0, 12));
				ivjBrowseButton.setText("Browse");
				ivjBrowseButton.setMargin(new java.awt.Insets(0, 2, 0, 2));
				// user code begin {1}
				ivjBrowseButton.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjBrowseButton;
	}
	/**
	 * 
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G99F5F3AEGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8DDCD45715B8CDCCE2D337B57F1AAE495ADDEC520436262509593A0D6D527E6DAF2625DB33B59B13109493E2CC5404981210C413475788880A0A0072B5A088A68808A4A26087722D28C4D0C7C39286E60401E1E6B27310A1F14D1EFB6FBB773DF973062F2E7BEB7D7D0E6F5DF36EBD675CF34F3B775CF35F9B04343C00786818B4C1080E9724FF87238541F1CD90767D7953EFA22EE3F922CED07C4B
	8758AA849D0F03EB8F50D61DCB52258A553989D096213C2CB5C91781775B054339DD8E3871A12794E8DFF594D84717B33F8165EC2465439949F05D8C60865CDCA29FA0D5B81711A96103213CD93AA7909DA388331EA0F5A232B3957852A7D83D9E380AG9DCF12BA0E0CEC093E8CF0EBG8A81DF7D244CB311EAF7D3CD35D46E3EADC0087C7D1E1894A2CB419F41DFEA3BC83A6A051FD2C3448AF34CC5F02D6B986ABF52E79FAE6BB35AECF61BE86E9BA8B33B9DF627D8D353C42FADA396226FD3C43F741C845AD6
	90A2015FC20A7BF68E3109836EE78284GB09D9FCD2913F418B394A0045D3553270E6B1F12F48B15F5F444FF1A38B414703F035A1C346B0132BFG537FE34B5EF175AF6B9F31E875E1C58676A16DE96C435EECA2239D4AA6002BCFE39F8E97E39F8CDF7DCC086AED0B5962238FF31E166C7C345C877D3DCF476D24FED35DC446BE8AE8594FA46AAAG3AGC400B9GD954DFDFEBF89F2E753DE203FDF858EE2BF7B80EDBCD4ED3F613598A77B5B5C011F0E74DFDF627C99018CFE66514EA6803B07F99CFFF14FD68
	0200BEB47F6CBD02A89E0D0957685B0247CAE202A59E4B1E117B167A97E23718DCE237C840C7CBFC99FE8B45F77DC54633311CC3FD05149DC0DB76973433E1B36A529EF727103A7FE44CC68DDD7CFFFBAC26BA0C695091A66B42EC3C2D055878AA607D8102G16G2C82C8D801B6BE5CF8E0A29B37018FB9EDC6EB67C82F4368940F0FD82CA633D332753FE40CE7EBADE06D6E1BF2BBE61740834AB18AFD600426DDC2834BE38AD7B0FB542D106D42E42F74A93BFB0537EFEC66E378FD7ACCB8D630B10C6578FBA9
	5ECF01E7E3DBCE7124BC9BE811GECDC02DA491CE6F8967C9DE096405DG0B8142GA21F45311959D8BEC97F6FD00C8BEBDB5F148ED733DBF49A5BECAE51E86BB31FB7BAAD46DE2B59A5C8F5CEB491FB74FA34BBC31F4BBE1051E236191DC651E23781F76330991C40456A981A3612BACEB325F6D9064DA0E018ACAD0C5E53349D2ED623CBBC67B099C533DC0351871A48D8DEB11E870E40G6E9B1FA3762A24F3E99A5CD7BC0736FA3A0D60E6C2B960B9344BF3CD5B60FA921C52EC2D29E9347491B50C4EB1742D
	045CD4721CC27D9000F00028677039FA59007E531872C3217431B6CD7FA1109C4EFC21B0DC6DBFBBA87FF640DB81E681840563FAF8E70EE10AFE0DC0F45DAC692D4407CBE55287A66301E94B08172E319A4FA4BEE34C6EA7CF925FDD867D0AGC8FD9EED1F5B2CE7BEF95C68B223971EF1028319CD72C8303AD9ADE4EDB0DFB15B44C63343ECB3410DCB72010216C459BFAF5B396F14D0BC19E79A4001DC9CDF563215610107525B117E91259BC551E9699D914D1DE6D134587A6576C728AEAE0FA94CA57575D4BB
	69EB89747198C0876F6B43AD5B95FE56EE378F0DB83A4893A4796B863AEE1A207E5567F1EC6E4AA671D1GAF5FC74BB27D436C490C9DE9BF1D71E5B2CECFCA065A87A68B4CB63FEC75BD363FE9559E5B07DB3547760F2D630F5DE32DDAE347E8212D44276D23B605AF2CE8A573C31F5DE6B3D30764CD8496A73D5CC57AE131D9448B96D33FD96C34FCE99604306749183651B9E8A15C07BC0FF34668EE1CB38A3F1CA784FFDE289997787F30A126F0A59B376A15721C41F4FA360D781859EA9E86C3B558C7ECA243
	2F22731B04F745D25CAB75C9F0BDF14AEC9BE9934D437B59D8ED977C6ABC701508CF9EA6BC1AADD6B3A1B15C1F2E90DC2B596AA0B86667FE27088E86504D8AB0E3A57A396944CE051FCB8FF3035DEAE56683DA48CAEA1B5CB4C5FF672EE4717EE6CE9F71C9E7717E3CDCE53C1F7682233743358700558950EB55F1937A8B286F47A7497C6BB2FFB1E206E50DBC10A74DE338B61D5C26221DB7DAC764B52F6764A638DA954FB243F736EB0F4F45F6727C8EF17E1F3613CD519509A77327A0A36169F0DA06E16AA313
	13545F34CCE5DF6E867D49DEE889DCC3DF40185D3F047818B2A60FFC01346D617B0AF20E9B25381FC0039763B19EBA152A5C7718DCF51A3EC9FDF2959B0B76D56AB8714153042F9570D7D7210D9FEFD74EFD75AE173D4FC217FB49DEB71FD27AAD43FD6B94714F4B96278BE2C613590DB63F6D945115448392DA325B0B698502F7FC53E43208F6A78FBE7B0883323E7EF733F27F34E84B7E18CDBE7ABADB6AE310222F5D3077E0F2AFA611FD855FA7D9FA074BC62E8C1799FB45B2B3882F29210F58F90BEB44E825
	43A96D131E20FBEA42A3E2956E135666513563C5D8BBG8CG2C6EF2BD56F53C08F55764133A01D08E86D87EA27A40DB3BB2D11FC16395233B4CB58A739F2851CC62AE466FDAA661C76677884E2F2D004AFE89E48398DE42796AC22552A70243AAFC7A0463A5E61F99AF29FD62EC871197G7885AF21CFA41F5E2A708958F3C1D8598FCF90DF93CE4732E7C5AA7F7AF4BCBEAB8246955F79184C91CB00E7B840FA003455093A2A55A823634C047B11A677B87B11E7F235E27B2E552CFF832B3D57D596439B754416
	D7D73398BE1A6387A9FE26824FE27B5772F08FBE87E8D12BF1FDFFDA2FA53FFB8D136BD863CBFE8F9D4B99EB5472AD94BFFB0DDA7E3AFC14BF97E842DA14FFE3A611EFDA2B9DBF38D578D9D0E6F2FEC565842CD56FED9E267820356A3D4D19825C5B84832D70E50C57FFFA16466BD076FF99477447E7D294FE53E13758C46EB397BA48FCEAF7DA7AADB644F5D39C6C6869224EF07F78316FF8631FBF560EB76E7ED8BB5E78714763471277FF6CAB9EE1F15F6BF49E88047EAD84E0385CBC02DB8C655017F1AC7A75
	0200B119C3F17FD65EF463774947005B7457D3866BF3249E6DA03C02F64849C7BBA43F02F638DCA0775D2E380F4A3F7EF658DAF07D6DF0A71D1BAB088D389D0274E807810EFB145AE696148338ED7EFF8109AF6673729FE9B904174FCD28BFE97B575948B6210C696E958830E76A0133E47EF07372AFE8F9CC409856B6CA7AAD42C39C718A49BB8FDFA4FE4256471F0F12F57EB2AC067098F6BA4CFD424C88E24F8F73B03E2A0AE0B6E8152E83F0E5FCE6DFA2FCD87D2AFC2C3FD42A97AEDD63DECD54B1BDFECE47
	1286G470D4E2B2F12F6CBF89CD788653AD7D99B532BEC5F47F8BF4C63564500DF8E90851039AED1D73D8EF92F4AA77D91ADA2DDB319FEAFFFA2F09BBC12C2669D366AB7104CAD191EEC24AE0BA75FADD0461306F5CC7ED5384EDE07EB7F1FBED12E7D29F76AE3F05DD00FCB60BAA95F30CEDE7BD92C71891D4BC81BD5C0533FC6F05F4CD34676C4CF12EBAEA36DA87DA18FFA3C024E747AC39146EE6B7F90A8D89F2C76197B9EF8CD5AB3C857563AACA17B4B9BE218EE1772D137452F21EEB37347576D1779EA5D
	B262981D2DE5911938162E077AD51198175DF0E817209917C95E817BC42A533E1D243D955A4DG189B09E3615E03FD1EFF4F1DC23B5F894DBE07F56D0FD990497A3ABCD29E0BE408D7D91F576A314FE92FE31F33BC7AC47C673598E51FCFF959E44843A6DFFB50093E8FFA347F39174DBE08E6F4E61B57767A08D90947DA195E9F6D4698387DF50CD9676F21F18E146782ACF89D6306AFBEA596E3F3C3E5B7B907B9EF9C545C911CGF1E7FA87A17A6CB2768BB8077564CDAF1F7C1B0DB8C68BFE7983E1614DD151
	3E7694A12F3331D9A3DD43EA32A81E697F7B4F08BD325F00679D209BC084188990708646C16EEE22A309E021C37522E86C9B203BA76C59F90BF9D4C613090E756D737C6965585F481CDE3B381DD3ED47E245F974B9D870860B9563B9FEBE45AFD16059F3F70062C9B994E8475EC4DF585DC3ECF9B71403811683C4G24C6415EAA8AED791B6E8AE102FDC2175D518E8123D59162317E2D530C51A736CB6DEEF53BE3D1725A5B9565AB36579713FE8EC4317EEF6278B20A1F2940B33B5CCF1F91D28E84DA72DBE817
	C1A3F9A69DD01E8590843098E079DBE81308CF257D3406EFB5197A491AC2CE82C4FC4E7E7C196F187A494FA6BEBFF86EB3325F6F350B22FD1870C77C0B1F91FB09F687C5B25C4B1F11678D427C8111D51570111F515C0379B2C5B3BB5F3B1360B0EF4FF077D3DCA474B573ED449D5A793F9D5BF9675A4F7E2F4B40D8AA1E5B20344777B89C68515E5B9C6A515E5B9C6D99BF175A5263BB17FA3AC719CBE5B16BD9BA0757014DBB5E46B876609E0CEDC5BE96FB0A09EF7AC3B988E089C0B840FACE2F227434F7E0FE
	846886708388F887698B77E8591970D01617C8BC557502D4B8FFD51949F8D4D3C6222A3CD1FA76547562856DF1C4E0B6F49AFD0F6518F162E76A86A34D2B413350B566B0B35CADC63AC73EFC59E5664F6EACE3AA473539BA6CAE8BC94E31B8B1FC27B2CE8CFE076DCB42619A758E66D9E7E6EB55C9DD8FFB7975982FDAF69339D66318FD846432D858EFB7362B03FADDGD781E68310BD4B2275244E69BDD8A7F03D77D8B15EA1BAE263E63BF358C803DC2B04FF6693B2271C9D31553B98DA42FF43C4E2A769CC52
	AC11A45ACBFB882F931DE670E9A3C48A1592FE2C4093FFC00A23AD456AB81A689E378166168DE81F14A62DBA95C0EF64F58E8DEA5569863A830065441BF314F1544C8D2CCE902707F6E95197EF4098B4B1033C3B63A386157212DF6E42DC71728D98E725E411B5A4755DC4DD894031F7B1AF991C0DB11961DD2CBBCC5FCD188D65C000E0G368E856E4638F8B960D25FC31D7677E4ABF5AAB30E0AB5B5ADCE0B6938313F1DFA8B13F53E8863565677D0560CA2FAD68EE5FF002077D0AFF18F6A3564BD0C1F8707B0
	B64B7E49BF511858571EC1901258D92DF4A5F54915711ED70C39D39350199E2BE85F66C2F981C088G2B5B5404F543F95D878E113A5951C93AAA0076E82C7B45A0679B0DF5DFCD27FC213CGA08400596CB65143E672B8F26FE4BC7F1B677D43391C6D6790179D13A44D17DF6F524CF346A4794C853018639B54AF86201EE71E6FDB946FD660198FEC4F42BC5FCC202D6172FF172DA53FA356D33EC9D1E6F2D6D0DFF347A629E244B594BFCB01E772DD3998A386GADAE8E652795CDAF06AB18E63BCF265C0E75AB
	0A7A7BC0DC12AA2F9BCDE3BCD101E77D3D35881FB9BF2005737E0E6DD14AEF0DCF52F5477B9EEB82ACE6CC68A3F314836A4E828882D882908A90894056127CDE12F3575CEF81722C5DCEE7E81211B0DAE07E25E12453C83238CC37FB0A153AA56812F459BAD9378A1D371E4C865D05242F0DBAE6030D9CBFC0715D8ABC334D4B74192531A550166B50B6A71A14726BB6A669BAB64AB2CD9BFD49AF2E213E38D16D0B1594BFEB235A977F6D9077C52045A5207CAB03CA7983003F1AA04B1C1D60CB3E193E47F7F7C2
	12EADF602278458ABC137FE6BA6E8B4201561A0872EF987FFD37C4EF792CDD6639715A85EB34E3715F7768FA338C688BF92E7B16AC123F8B67BA5DC64B6BF9F9E716B2768A57607D57G13D169A1632F49D9EA816BFBE8B676DD4EF99F26F3F6F6D2122EBA897B7B82BDA3E80432096356D11C9F1483B8EEACF73C7D85E9BBEDFD390C7FB72E8CF5DCBB95086536FF1724EC247B0DFB647B59C557BF477F236BAA030D71EC9A1F8403CDC91E0C61EE27386500FBA48663722DFD3E637F4C3E09637F7CBE6DBDF5F1
	1F771E3A34CFFBCFDD59275CD3B3DDFFC5E320C850B5E1D3126437F1A584178965D20E3BF1AF6E6DBAB6217F745279B8G4A41G219CEF2378A8A8E7A6036FA7A3BEF2B7998FD2EFAAF68E9E27FE000246E424949A84793D354942F83E2E1CAF18AD0CCDE8B3C3B25A672EA63459G476534204DE6F19B6C2BA138D0A8C7F0DCB5454525A469CAD290776F074673DD52F632FD8B55284BE4AC9FD746D41EFF2DB91559609FE8AC5C8E7D6AC9C13BAC23B88714E7F0DC2795ED9548EDB014C176C0D1D0CE5D8CB1B6
	0081403D194F1114BE874A8BG1681C48224EDC17A06F42D7E919E3E7AD1A571A777C4A611BD7E9C131EB1195C013A9D669162FD584E5306F76420ED2A36203D4A4FA1EE8660583E763EDDF8D6464A0F6B48F35864360878EA985BDB7EB6CB3937DC866DC97EECBD675315C376D3C67A1297C9239AEDA6814F256611DBE99F7DDB93F9270A3CCB56E5F7D87ADCA88569C7AE91BE753D307113C952BBE105F9EA9DC87EAEB5B5C95A7F3E24C9AFCC45FD1311464964DDBD0B51FA41E2928798BE5B1DA263DB4DE48E
	647AAEABA6F90BDE3B139E6AB726126FE1D697931BD527E25F33CA3CF39B15A5381F1F8975C8EEA3G2E8BGC85ECA58CA785C3937F11CF144D8BED60290E89B8630C3AAC7264A71BE5363F08A31ADF9F70F65C2E09CFA6D476DEE24DFBA3545035EEE6C653912B72A084CFA53953212180E0F401AE1C33B4FABD45A35F5AB6B03E3AB5A3D34DEC91FA15183B9BDB4C1C9DFA45143614A6CF9EB9331E79414196DC2F83EA4EE9B33DDB6DCABG2A396D2ADAA6329DBEA784DA21ED77B659F60EEDEA5B15D411E763
	6C080D260398EED785F96E58A954FEA95FB3D8234E53901D2E823F59G2C0ECE2FD5A790680B36214F5CBD686DD78F8D92BBAC63F5D68FFA7BD54C90728E13EC938557646DC9B48F4AECB3E81D48B6098A5B94C25B6A6D32ED5A372BED73F99FF9EE0EBB6D23AEB3738C068FBE17A979D32345E96E03FD5E98FB7910BA962B13F4BEDDDD278BA61BE60B59EAC27E5F266FD9E2BE0E54C57FE3740F1C54B79DA484EA98B0778DD11FE63E75538C35EF91BB9836236F7D38C96D1B04EE65740D6715F4BF490E011CAE
	DA3478AF6274839EB93925D27BA8383231884A4131C8CE73DE97144FB781BD54A100E3D115A60F856357FC8E799D7341EF63B87C3A947C587331A41E44F9BEF202F476E5F9233732B0EF54130639A4F636CFF07E9C172FC75C52B474636892C140B35243E665BB8595DF89B13102F69EAEE1876BDF26F4DDB01CA56DDDAF15E0DE2395E8FEBBD0768FCAB0C738F087665016523A91D0CEC887DBG64D11D003F007FA20EEA61585AF568322C7B0AE4E58E31717128685DBEF42FCEE7BA4FCC17F308333A1F115E99
	6D377A30B91F302577BE8BB10F991C0EEB58EB17FD1C1553E70E356B2B47F6D13C5D164E1D5A6D70D113E4EECFCC107ADB1101639750C4FA4FEC9F5904369FGFAC0865A3E2E99ED3FBC83EDBF58CC7346199023829C4B1C2A6DD711A3F9C92F9F54E0FE5410097C7BAF50DCB314838102B3D117A3FA2C3B1C577D19016A3293F481B836937B7668205C37770730EF86204F5E097C1CC35837A5BB11DFG2DAB6C02988320E257D47B3649A2776D798C34F96BAE143902670E7DF66198961578487B7299D56A7FF9
	EC3B10737B09053FEF4C799DB96F4B8FF112E5ED87F310DFC99657AF877975E4E9759DE33F5303F2BFC74FE19BFFE84368DF10D7C9F05F1F2515C3DA1AB5D1BC2D7D3EC678046D76E81E5DC70D530E65C1F32DE41DCE4E461CE738091C157B4AF9B658CD66CE518916657A16CCAFEFEC1BE63BFB275C0E658E9B77929F57E72B734D27A83EB4DB1DEF7EAFBEAFD783EDAEG335719E132E689B9C93AEC00E3G86GAB408CGFF0079G41G4B81A2G62F2613982A885288368GB065223D2FDD5EBB0E3D2543A3
	C5E6996D70F421AFBB3801772CDCDFFB5E01FA2DF681D27D85BE5BE5A6AA5BAD116A05CA5788699A17274EC73C5DB43DF1CEE81EDE3B7AA937E3FE708C1D5FB373547E7182459766297D43510C7ED18134B9F938673E37C6A9BF8A7049FA59A6FA3D2F1C77D3F47E2F522BF37EAFD0FC3BDE1D739F3E00B9FF93501668D1FE0347BCD01A8FBE1AAF4B6C4A77A57F40C5FA9E134F64EC6178860A1F2D40B3798F52B5081497822D2AG65D78CCDEF5C0ECC335D68145B31FE25D9697B7B856A714E2178C5856A713E
	072F27CB00D63A9B7B7B1247B75333F7B37B5EADDD9742B5E437274D25EF2DBD1E0BB029CE24F4CDA874759CB61CD7364B166AD5C857C61F6D02ACDAF6B2C8752DBE5B59BD4ED07C24FAF324EB204FF6ABBD5AAD02FACBB56AFA373B6AF176928EED22A6E84772C1BB7879C3F2916608C673901749F1077508ABAC42B93840CA7626AE0FF56D841916257BCE45FDE849754F5B3FFEDDE530BE778D7B4E478F8ECF1C0FF78DEB676347063D73715706357371B3061579F8067B66B009297AE15DB370FA5F66380B9C
	77DD4A1360E8720B636F20FA91BCA63F987EDF28DE2394E7406FE094380B926EC7434497204B83F67E0D4DCF07C90CF459E235CA5F4150BA961B4BACF2FB7C026AE8F19895FAAF62380B5CCFA369BE2882FC2F157BE4E7A266B23BB96EEB3A6F198F65C59C97DE0F7516F0DCB9ED1B39876276BD087BC6A236ED6438E7390C8E0EDBC17985C0B9F88F4EE7614D322F2FD55CDFE93E7EFE7F1D6BAA03757957F46F358C7A3B0A5BA13E166022201CDC0C3899F5E82F0AE2344D8A3A667AC1F9AE40C20EDFCB714B21
	9C8510D902F85705697647CF622F464FADD647D73326AD834FA855F86539873345A5BD5A2C3A846DB31762DA215C4DF1D985E8B3BFEE03C39749BEEFA914A3G5276828FG830088B0E7AF56EB237566C3B984E08DC0727B304E823483D85F47FA8F999C92BFDF7DA2F288DFDF74EA09E6D055C913F4726D1FCFD259631DD7905BED99070E67A26A77A8897F949FED186CDD6435BE69FE3762FE7E5075FFAEFFF7DDE5B05F09265F974D02F11E7BBE1F475C84978465E00EDB69C69F8B61387B6837AF599F409C78
	8162B6501CC39D145BE55C91645743F11F9DC5FED60E3BC4F38E0B209C42F12134ED9814A3B82E1E37DD4FF18FDBD0C6FBA962CA86311E0163EE4EC17D82B96E42A8FEB7380863960D72B91F63B6646019FBB437DFCCAE1E394B386F1E732E67FFCED90F65AD6A496B53523D49A15F5F7205A0E05EFAD391DD6F0DFDC37DCE7B88B990B36CA3B95C5D74DD46CC38AF5C07F962414471F27618A3453C6EDCE897340F45E26479D93CCF1D337FDE3D67B7F0656435EDA9077CCE7DD44E1D16AAE491FC38172C66C452
	CF235552EFA35F8998301F1F5175B3826E634AB05FF3D61475F80B77392A4CFB8E099534F36328C7EB19DA0F28FA120302A04472A5F93F4CDA0F9AC97AECBB0EF93C2EB24C7FBDD663FD8E33260658EE862F13DD6BFD8EF320964FE1E61731F318C038AE82A0E7722CFF7FD4077DDB2651BF351DD7C11D75E5F22EBE35DC5D3FB98EB25F1D9D311D01681267ED99EDC1ECAA23113C075D6AF1CEA35273957A9EF42759F945A2B7E6E798FA03728CA33B1C7521359C4FB88E6A35685D1CFED5333D239C4F77EE54D3
	FB1623BD9F50FB5B73777C4CECF639E4CF38AEAAE76FB7B0FBD696F0FB16EB7B0B07BD214E7AF205BDAB54767C8E7DAE2DD3B4BAC549AE1878E4741B3EA6B1BD8D672DD6D58D64F1A51D68FD4EE6512C456AC464ED27F26C8EB593C6CF0B17460E7EBA5A9523D5F1FEF6E7E51AA70D67FA997D7EAA32BE1E82716CB49747546F227ADC0A58B13B82476CDA01963D0253CF6F5322B7F27A46BEAD3A01532DC56AF3B7C237F27A0AE275399B217BF17A15FE2D76F3AA5007B2B3697E821EF376EC175135B090688BF8
	9DFF37679CB8B2A24FBD9B5C634D014A33E37A7EB470A400F3CF1417AFAD4EA7BEBDECF4525F9EE072C22F881C1E566C296F7B743CA4EEBF5C6F4739713DD1D93F1123D31923D1BFBC0FBA36DF2D5F9767BD655FC2576BF628E7580F76FA6D08273D8A46E4FD8C936A932B305B4C7DCC1F9D92EE2EC29F463B69CB197751410956BE65F8E0DFF7C87C82953CD95FFEC6577A85008F6636F5FDA54B7B73A84A0B582FBDAFAB6545D542FCD6A95BB633D25D1724EB72B8B7A712979671D306324EB117E89EEE30DB6D
	4EB272F24C95F30351C1FF698E2C0C670A81234AB3516A240FFC7E46CAE1A553373AD2BE931D5C39936A6A77B53977FDAEF51720CD8FBB4A7AB71238DB593F867B3043EE03A5362C2169F4D753594F6B5B5BDACE1F02FB694C677DA47E5BB515B8960FC64B765AFBBCDF62A79DBF15F5127F7173C2174417570F29A5EDD9FE7113DA4CAF86826F30CABC1B3A2B9657794C83F8DE77A82D5B816581G3F83D8B7240E1FC99D186A99DEE40C40FDA57DF82E20F916F656E83258F13DE5B2AF98703CEFA95743464FAC
	932A90770081F1472A70993DC3AF77FF1D9E7B6F86FA90EFD7433FEBDFD5057D9F203F71227F907612G9D9FE25D3E826C7F4007D36DFFB719AE24BE7D62A276A90073FE30GF1F19FA16E26FD089B6038A3749DD3323F8B60383B0A305EF20E4BACC1FB249EC45CFD7D7C6C74A07A97FD15D5721791B7B91B3319C7755CE71BE192ACA9B0D90CD6FBFFC1293E22D43F3FF22F164F63B37343A4797E739419772BC7A64B1B353DE1334C27EF2B4CE7692479789E0B1B37493CFF34DD3E0FCF17651C9C1D2C9CE65B
	B8B77A065F41714EF8CB48E7E5525968E374ACFBA154DFF690F345E72EFDA078BE2F6BF05A9DE627B8463074975624BDF4F912B22F9D897C922AA7138FB756CE6FDC44BE4DF601D3EE474ECD1A6A6837E0556A73145394DFD22DBECFF91C4FF7D5C0732F467C4E23F5CA796B811FFAE8B2F66AB610F6052A3A55D239DD3A769CD2674FDC1A676622D4EF26F41D6B55EE21C12BDD10D4EF31F4DD6E55AEEA1A5F586B2679DB87C7275C0E0DDBA81DE3579CD20F6773949FF5C8BD1EB67E3BDBF1B530AE5560F88E94
	A86507GBE2CE6B263396822D64EA9F202368492EABD6BE4C339C205E3B2FE29797BBE0D35934BB0286AD8216C27A96356FD4A7E4F116A84CA57C5F0DD2A592E214F639CCC2A93A5DD136B12F47ABA39DDD59D5ABB5063FB3CD629CE37F4F540F5C61D163C9C4D77AA7C253A73619A2C596E7EFEE53BE5D21DD552F5BDDCD38FEB35CBF4AB5B95C21D6A43635BDD7A7D058CF24F3F63E7D3AC7E3EA9FDFFD2FA775972A57DD9C676368A4BFDB5A7F96743CEA6A973E1CC37136455B8693ECBF17FF46D754F353EF1
	DDE530BE2F2AC3BB64C5A3EEED9D5A61F6DE4FC5E336F698171E43BC9FE94033A51163F2AE723CBF477DA7BDFBDD8A65880E3BD50FED630EA0EEB57FBD30D40E2BB7F8377D93175B436BD5F039D60E7B0307DCE653E77365B1DC2D38977F8FFEE76D9F2E2B8C692C30405B2FE794F867031F2176DA84368A6176EA38C46BC1F99547AD665F6D2C6738824A2F7DA8587FA84F09D31C8865999CD7CFFF97E3B61483B86E16EB48EF81473DD90A7C620EA1EE9E0D27B321DC42F1776C20F9F2A837F35C26F41ECF6738
	1F74521C891497F15C25BE643714635654A13FF00EBBF59879C548B23EC2FE476A9157C1F1DDD09E6038FF27313D8865999C37D9C7F07ED08E64B8170E5B0063EE225F1E459DCF52E59EC7DC955D9714C2390E636EA841362D9C17570FED7DB96E11FE54E5BE47955522AE419CF7F3ADBFC36138E7AD48AF3B81F1FA3737DF953915FE45E271DB693369B2135FC5B61BD85EE29E4591FAC5836EE51AC9D8AD65AD2AAECE14A7D142B160C1G7396DD8D6A1C500BF963674BE3796F4E76F0FDEC3932BEB179D3495B
	28751955204E235C16A773EE19302F9B47616D6F555757AFFA6636966885CE3BF449B3B766204F775D40A32881F34FCFCD69FB13B0E8972650A752CB1FC385C4FF330D3CA0E2126C5DD1007BF6211167648ABC75FEBCDF565B305BD3EF9B1DC752202D3E91757E67EB13495B79523B23D11DDB536FC39D3B390E8B77F96A719F340E8368D7F91DDF6D706C475B8572D89724230E739BFD1F83457B50B138D1ED5B5F76FA5B7609DE54BB846AB35C0DF42E8B03721AC6746F1CC2D9AF53E154AB3BC9DB2F78F1742A
	E8D25B2E6AAB54212E896D527F957DFD5A91270B3CBB43F4F821C89E637FAA72346D9ABAF7F6C07BEE4E23C867E95B24E2398F376A308F33B47A204EA387C09D82580785CDEA5B4EAD76366D8345582FE02E534992CF1D761548BA851570F39C9FF675B847D168C44A6B3D6C5A5A0F72931AF1EC57D1DCB614CB1AF1ECBB764ABAFC3F96F5B0B4FB6B90AF0CEF97EB33DA07CD0328033B19BF9786EA83670859F76E44753EBC563B74245EB83950762666AE295D77BE10F97CDB29FC3F23DC663730652F4FFDD5D7
	487C7A8B08DDAE9B2DAE79B7C767D44A742F2ECDAD9F760B83F25B037B3CF99F7CC8265F39E3EA392B4EF4DC3BE671713FF4D06697516BAD6FDF8F4974303A29493B7DB04ADB4C65BDD1A373BB7915373C1AA3B2BDC6B7B5F98F69D05E7A6671F2F31F9E15E57C3ED82903749DC7897229EA514E7FB2BE6D0DB21F4F7B3D7BF225C5266F2C1DCCDFAAF8DF7E2396F53036206D6EE81579958CAA6531BD02A1DD39973E9B5AADEC19CC0E644E439E3995E893B629F641BA0FDCA434C9E81DCC3B159EB902ECE8D3B1
	29F6FF7648A9B6C29B43846DD82CE9CF770EBF45F46FFD4D4F8FFB577B57435E759E57F9578B55F9575BD02271FE4DDE6FFAAF55FA57FB25D6D90F7DFD41FDC7F4A9908F2C9562C5A10EFC928A97725538A8ECE35F186A89D25FE035C03CAA8A897857C9DCCEE18B773AB67A3AE9581583B5314F5D959BA3443589BA767AED1B90C75E21ED936269AB36EDC22CE8F7389D023C24D3F0FDA1DC93622601CD13408796BAC3BE319705CDC4EFBD7B94DE946269F76F2210CC7B46BE522E01A2FE162DAFABAB93859D7B
	9217F3A67FE2A490C4E12BE49F7E3DADF048682B699E9B99325B3A7B28413A599F716B9605947C6CD64F0C3C19FDE62B976D948166CC53BA4CBCF22DC7AC7B75F7E702CC37D3582CB88F84E2748FB3EECC7D4E011198D80F859DBC370E81A3D81A7E7106F6E1D3AFB5B9796DA72BA8243613366550361C362DED97E208A932E4FC9F41B3EA274358E706AA09A623F308F2A0C64878C4C83C6C6C6F2582C4A1661366CFC0ACAD91724EF6A1C99CE03F026D866BE6482CBB4877C19221168EBFB526037E1B7660CF8F
	6B94D2BC264B5F4D7BF0E548B367DD31022ECD58C9A240CE3313A6694C26C62308FF712CD9C8F4103F02C07E7090F8350BDE62DD621895EC1DF679AC796BB5B0EC26FACC7F01F1F7B08B0C0896EBF92B51B5A012E88E4C9AE7A3FF1BCD584648D6232D3F1C658219ED226B0FD17B50AF9FC15F6DD4DF42250CF3597E5016227C93618BE30518E6A149EAB71A1A0D448B5B04C4F140E9F68D582DA63763A8E314B00A87FF3140AE0BF71FF4360C1C10F325075C5F1F1532AA251979DBB92DC9862D0C57B0B58C981D
	A04A6CEC934D74C7708AB96D9B39621EBF36E4F4478851D2A749906CF643EC12A8BA0DB657E5F854C0833DCA83A4F1C6E55FFD2462769F3DFD09B2121B0AC21E6CD37DE67BF0F97D654B961B19B3G7B817B9C4E1E54A9D35559663EED4709475E6B0571EE94E207ABAA687F7B697F15647F7D94331FE276D70291A304F17F2969EE6AF845A2F392BED112E1AEEB0611921FDC7B488F1E2A0BD8833DEB169ED7B0F62ADC6B7448F02F59F9737C5BF3B64D897B96998B87F189648B0F7A3045BA86B70DF421F7937C
	C137263F33C679DEDEC530C55E6EC150FBA971837AFF5914BBCFDAD5503615C4A0397950D353A3EE0FA95573F97D1B5234E9BC1BEA4FB7FFD37A1F52569F16456433A3B67D991BD9CF7E4EA32CC62458E653CBAFB5CA08FA17DEFA118E16CC7A7A1EA8EC14DE5303A71A3F0C871ECEDE3A7388899A68CE5BBE38F1744DED5181B1C28C4C196218436CB9AF00B20922303D93D663817DD9B3F9DE742CA52C18CCA776B69E2C2DF17B2B2AAA20FFA543A0F6AF6FD8928E0A4740E8E385AF6C5F54F019349F0C3FC1CD
	077EEEB4F57E5DE8BA76F723295FD426C5257EFAAAA1697FCEFF3D267EB3BD759764ABFBCFF06F574A778423EE4A70791EE069F936D7BCF6DE7E7D9176FE4E3D8D24CBD7816FFF9E5F4FF97378BE41775F48689CA6D32951BAD4EFB3113F17F1FCCCB44B3F81BF3F0170F7E19D09A87D1D1E86227720224D7FGD0CB87880B44AA8FE0A7GG18FEGGD0CB818294G94G88G88G99F5F3AE0B44AA8FE0A7GG18FEGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586
	GGGG81G81GBAGGG1AA7GGGG
**end of data**/
}
	/**
	 * Return the ExitMenuItem property value.
	 * @return javax.swing.JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JMenuItem getExitMenuItem() {
		if (ivjExitMenuItem == null) {
			try {
				ivjExitMenuItem = new javax.swing.JMenuItem();
				ivjExitMenuItem.setName("ExitMenuItem");
				ivjExitMenuItem.setText("Exit");
				// user code begin {1}
				ivjExitMenuItem.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjExitMenuItem;
	}
	/**
	 * Return the ExportGuiJMenuBar property value.
	 * @return javax.swing.JMenuBar
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JMenuBar getExportGuiJMenuBar() {
		if (ivjExportGuiJMenuBar == null) {
			try {
				ivjExportGuiJMenuBar = new javax.swing.JMenuBar();
				ivjExportGuiJMenuBar.setName("ExportGuiJMenuBar");
				ivjExportGuiJMenuBar.add(getFileMenu());
				ivjExportGuiJMenuBar.add(getHelpMenu());
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjExportGuiJMenuBar;
	}
	/**
	 * Return exportProperties.
	 * @return ExportPropertiesBase
	 */
	private ExportPropertiesBase getExportProperties()
	{
		return exportProperties;
	}
	/**
	 * Return the FileDirectoryExportLabel property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getFileDirectoryExportLabel() {
	if (ivjFileDirectoryExportLabel == null) {
		try {
			ivjFileDirectoryExportLabel = new javax.swing.JLabel();
			ivjFileDirectoryExportLabel.setName("FileDirectoryExportLabel");
			ivjFileDirectoryExportLabel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjFileDirectoryExportLabel.setText("Export Directory:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFileDirectoryExportLabel;
}
	/**
	 * Return the FileDirectoryTextField property value.
	 * @return javax.swing.JTextField
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JTextField getFileDirectoryTextField() {
		if (ivjFileDirectoryTextField == null) {
			try {
				ivjFileDirectoryTextField = new javax.swing.JTextField();
				ivjFileDirectoryTextField.setName("FileDirectoryTextField");
				ivjFileDirectoryTextField.setFont(new java.awt.Font("dialog", 0, 12));
				ivjFileDirectoryTextField.setText("c:\\yukon\\client\\export\\");
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjFileDirectoryTextField;
	}
	/**
	 * Return the FileFormatComboBox property value.
	 * @return javax.swing.JComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JComboBox getFileFormatComboBox() {
		if (ivjFileFormatComboBox == null) {
			try {
				ivjFileFormatComboBox = new javax.swing.JComboBox();
				ivjFileFormatComboBox.setName("FileFormatComboBox");
				ivjFileFormatComboBox.setBackground(java.awt.SystemColor.activeCaptionText);
				// user code begin {1}
				ivjFileFormatComboBox.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjFileFormatComboBox;
	}
	/**
	 * Return the FileFormatLabel property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getFileFormatLabel() {
		if (ivjFileFormatLabel == null) {
			try {
				ivjFileFormatLabel = new javax.swing.JLabel();
				ivjFileFormatLabel.setName("FileFormatLabel");
				ivjFileFormatLabel.setText("File Format:");
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjFileFormatLabel;
	}
	/**
	 * Return the FileMenu property value.
	 * @return javax.swing.JMenu
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JMenu getFileMenu() {
		if (ivjFileMenu == null) {
			try {
				ivjFileMenu = new javax.swing.JMenu();
				ivjFileMenu.setName("FileMenu");
				ivjFileMenu.setText("File");
				ivjFileMenu.add(getExitMenuItem());
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjFileMenu;
	}
	/**
	 * Return the JPanel1 property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getFormatPanel() {
	if (ivjFormatPanel == null) {
		try {
			ivjFormatPanel = new javax.swing.JPanel();
			ivjFormatPanel.setName("FormatPanel");
			ivjFormatPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsFileFormatComboBox = new java.awt.GridBagConstraints();
			constraintsFileFormatComboBox.gridx = 1; constraintsFileFormatComboBox.gridy = 0;
			constraintsFileFormatComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsFileFormatComboBox.anchor = java.awt.GridBagConstraints.EAST;
			constraintsFileFormatComboBox.weightx = 1.0;
			constraintsFileFormatComboBox.insets = new java.awt.Insets(5, 5, 5, 5);
			getFormatPanel().add(getFileFormatComboBox(), constraintsFileFormatComboBox);

			java.awt.GridBagConstraints constraintsFileFormatLabel = new java.awt.GridBagConstraints();
			constraintsFileFormatLabel.gridx = 0; constraintsFileFormatLabel.gridy = 0;
			constraintsFileFormatLabel.anchor = java.awt.GridBagConstraints.EAST;
			constraintsFileFormatLabel.weightx = 1.0;
			constraintsFileFormatLabel.insets = new java.awt.Insets(5, 5, 5, 5);
			getFormatPanel().add(getFileFormatLabel(), constraintsFileFormatLabel);

			java.awt.GridBagConstraints constraintsAdvancedButton = new java.awt.GridBagConstraints();
			constraintsAdvancedButton.gridx = 1; constraintsAdvancedButton.gridy = 1;
			constraintsAdvancedButton.anchor = java.awt.GridBagConstraints.EAST;
			constraintsAdvancedButton.insets = new java.awt.Insets(5, 5, 5, 5);
			getFormatPanel().add(getAdvancedButton(), constraintsAdvancedButton);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFormatPanel;
}
	/**
	 * Return the GenerateFileButton property value.
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getGenerateFileButton() {
		if (ivjGenerateFileButton == null) {
			try {
				ivjGenerateFileButton = new javax.swing.JButton();
				ivjGenerateFileButton.setName("GenerateFileButton");
				ivjGenerateFileButton.setText("Generate File");
				// user code begin {1}
				ivjGenerateFileButton.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjGenerateFileButton;
	}
	/**
	 * Return the JPanel1 property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getGeneratePanel() {
	if (ivjGeneratePanel == null) {
		try {
			ivjGeneratePanel = new javax.swing.JPanel();
			ivjGeneratePanel.setName("GeneratePanel");
			ivjGeneratePanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsBrowseButton = new java.awt.GridBagConstraints();
			constraintsBrowseButton.gridx = 2; constraintsBrowseButton.gridy = 1;
			constraintsBrowseButton.anchor = java.awt.GridBagConstraints.EAST;
			constraintsBrowseButton.insets = new java.awt.Insets(0, 5, 5, 5);
			getGeneratePanel().add(getBrowseButton(), constraintsBrowseButton);

			java.awt.GridBagConstraints constraintsFileDirectoryExportLabel = new java.awt.GridBagConstraints();
			constraintsFileDirectoryExportLabel.gridx = 0; constraintsFileDirectoryExportLabel.gridy = 0;
			constraintsFileDirectoryExportLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsFileDirectoryExportLabel.insets = new java.awt.Insets(5, 5, 0, 5);
			getGeneratePanel().add(getFileDirectoryExportLabel(), constraintsFileDirectoryExportLabel);

			java.awt.GridBagConstraints constraintsFileDirectoryTextField = new java.awt.GridBagConstraints();
			constraintsFileDirectoryTextField.gridx = 0; constraintsFileDirectoryTextField.gridy = 1;
			constraintsFileDirectoryTextField.gridwidth = 2;
			constraintsFileDirectoryTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsFileDirectoryTextField.weightx = 1.0;
			constraintsFileDirectoryTextField.insets = new java.awt.Insets(0, 5, 5, 5);
			getGeneratePanel().add(getFileDirectoryTextField(), constraintsFileDirectoryTextField);

			java.awt.GridBagConstraints constraintsGenerateFileButton = new java.awt.GridBagConstraints();
			constraintsGenerateFileButton.gridx = 1; constraintsGenerateFileButton.gridy = 2;
			constraintsGenerateFileButton.insets = new java.awt.Insets(5, 5, 5, 5);
			getGeneratePanel().add(getGenerateFileButton(), constraintsGenerateFileButton);

			java.awt.GridBagConstraints constraintsAppendCheckBox = new java.awt.GridBagConstraints();
			constraintsAppendCheckBox.gridx = 0; constraintsAppendCheckBox.gridy = 2;
			constraintsAppendCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsAppendCheckBox.insets = new java.awt.Insets(5, 5, 5, 5);
			getGeneratePanel().add(getAppendCheckBox(), constraintsAppendCheckBox);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGeneratePanel;
}
	/**
	 * Return the JMenu2 property value.
	 * @return javax.swing.JMenu
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JMenu getHelpMenu() {
		if (ivjHelpMenu == null) {
			try {
				ivjHelpMenu = new javax.swing.JMenu();
				ivjHelpMenu.setName("HelpMenu");
				ivjHelpMenu.setText("Help");
				ivjHelpMenu.setActionCommand("HelpMenu");
				ivjHelpMenu.add(getHelpTopicsMenuItem());
				ivjHelpMenu.add(getAboutMenuItem());
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjHelpMenu;
	}
	/**
	 * Return the HelpTopicsMenuItem property value.
	 * @return javax.swing.JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JMenuItem getHelpTopicsMenuItem() {
		if (ivjHelpTopicsMenuItem == null) {
			try {
				ivjHelpTopicsMenuItem = new javax.swing.JMenuItem();
				ivjHelpTopicsMenuItem.setName("HelpTopicsMenuItem");
				ivjHelpTopicsMenuItem.setText("Help Topics");
				// user code begin {1}
				ivjHelpTopicsMenuItem.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjHelpTopicsMenuItem;
	}
	/**
	 * Return the InstallServiceCheckBox property value.
	 * @return javax.swing.JCheckBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JCheckBox getInstallServiceCheckBox() {
		if (ivjInstallServiceCheckBox == null) {
			try {
				ivjInstallServiceCheckBox = new javax.swing.JCheckBox();
				ivjInstallServiceCheckBox.setName("InstallServiceCheckBox");
				ivjInstallServiceCheckBox.setText("Install");
				ivjInstallServiceCheckBox.setFont(new java.awt.Font("dialog", 0, 12));
				ivjInstallServiceCheckBox.setEnabled(false);
				// user code begin {1}
				ivjInstallServiceCheckBox.addItemListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjInstallServiceCheckBox;
	}
	/**
	 * Return the JFrameContentPane property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJFrameContentPane() {
	if (ivjJFrameContentPane == null) {
		try {
			ivjJFrameContentPane = new javax.swing.JPanel();
			ivjJFrameContentPane.setName("JFrameContentPane");
			ivjJFrameContentPane.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsFormatPanel = new java.awt.GridBagConstraints();
			constraintsFormatPanel.gridx = 0; constraintsFormatPanel.gridy = 0;
			constraintsFormatPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsFormatPanel.weightx = 1.0;
			constraintsFormatPanel.weighty = 1.0;
			constraintsFormatPanel.insets = new java.awt.Insets(5, 5, 5, 5);
			getJFrameContentPane().add(getFormatPanel(), constraintsFormatPanel);

			java.awt.GridBagConstraints constraintsRunAsPanel = new java.awt.GridBagConstraints();
			constraintsRunAsPanel.gridx = 0; constraintsRunAsPanel.gridy = 2;
			constraintsRunAsPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsRunAsPanel.weightx = 1.0;
			constraintsRunAsPanel.weighty = 1.0;
			constraintsRunAsPanel.insets = new java.awt.Insets(5, 5, 5, 5);
			getJFrameContentPane().add(getRunAsPanel(), constraintsRunAsPanel);

			java.awt.GridBagConstraints constraintsGeneratePanel = new java.awt.GridBagConstraints();
			constraintsGeneratePanel.gridx = 0; constraintsGeneratePanel.gridy = 4;
			constraintsGeneratePanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsGeneratePanel.weightx = 1.0;
			constraintsGeneratePanel.weighty = 1.0;
			constraintsGeneratePanel.insets = new java.awt.Insets(5, 5, 5, 5);
			getJFrameContentPane().add(getGeneratePanel(), constraintsGeneratePanel);

			java.awt.GridBagConstraints constraintsJSeparator2 = new java.awt.GridBagConstraints();
			constraintsJSeparator2.gridx = 0; constraintsJSeparator2.gridy = 1;
			constraintsJSeparator2.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJSeparator2.insets = new java.awt.Insets(5, 20, 5, 20);
			getJFrameContentPane().add(getJSeparator2(), constraintsJSeparator2);

			java.awt.GridBagConstraints constraintsJSeparator3 = new java.awt.GridBagConstraints();
			constraintsJSeparator3.gridx = 0; constraintsJSeparator3.gridy = 3;
			constraintsJSeparator3.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJSeparator3.insets = new java.awt.Insets(5, 20, 5, 20);
			getJFrameContentPane().add(getJSeparator3(), constraintsJSeparator3);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJFrameContentPane;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsStartServiceCheckBox = new java.awt.GridBagConstraints();
			constraintsStartServiceCheckBox.gridx = 0; constraintsStartServiceCheckBox.gridy = 2;
			constraintsStartServiceCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsStartServiceCheckBox.insets = new java.awt.Insets(0, 5, 0, 5);
			getJPanel1().add(getStartServiceCheckBox(), constraintsStartServiceCheckBox);

			java.awt.GridBagConstraints constraintsInstallServiceCheckBox = new java.awt.GridBagConstraints();
			constraintsInstallServiceCheckBox.gridx = 0; constraintsInstallServiceCheckBox.gridy = 1;
			constraintsInstallServiceCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsInstallServiceCheckBox.insets = new java.awt.Insets(0, 5, 0, 5);
			getJPanel1().add(getInstallServiceCheckBox(), constraintsInstallServiceCheckBox);

			java.awt.GridBagConstraints constraintsUninstallServiceCheckBox = new java.awt.GridBagConstraints();
			constraintsUninstallServiceCheckBox.gridx = 1; constraintsUninstallServiceCheckBox.gridy = 1;
			constraintsUninstallServiceCheckBox.gridwidth = 2;
			constraintsUninstallServiceCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsUninstallServiceCheckBox.insets = new java.awt.Insets(0, 5, 0, 5);
			getJPanel1().add(getUninstallServiceCheckBox(), constraintsUninstallServiceCheckBox);

			java.awt.GridBagConstraints constraintsStopServiceCheckBox = new java.awt.GridBagConstraints();
			constraintsStopServiceCheckBox.gridx = 1; constraintsStopServiceCheckBox.gridy = 2;
			constraintsStopServiceCheckBox.gridwidth = 2;
			constraintsStopServiceCheckBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsStopServiceCheckBox.insets = new java.awt.Insets(0, 5, 0, 5);
			getJPanel1().add(getStopServiceCheckBox(), constraintsStopServiceCheckBox);

			java.awt.GridBagConstraints constraintsRunIntervalLabel = new java.awt.GridBagConstraints();
			constraintsRunIntervalLabel.gridx = 0; constraintsRunIntervalLabel.gridy = 0;
			constraintsRunIntervalLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsRunIntervalLabel.insets = new java.awt.Insets(0, 5, 5, 5);
			getJPanel1().add(getRunIntervalLabel(), constraintsRunIntervalLabel);

			java.awt.GridBagConstraints constraintsRunIntervalTextField = new java.awt.GridBagConstraints();
			constraintsRunIntervalTextField.gridx = 1; constraintsRunIntervalTextField.gridy = 0;
			constraintsRunIntervalTextField.fill = java.awt.GridBagConstraints.BOTH;
			constraintsRunIntervalTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsRunIntervalTextField.weightx = 1.0;
			constraintsRunIntervalTextField.insets = new java.awt.Insets(0, 5, 5, 5);
			getJPanel1().add(getRunIntervalTextField(), constraintsRunIntervalTextField);

			java.awt.GridBagConstraints constraintsMinsLabel = new java.awt.GridBagConstraints();
			constraintsMinsLabel.gridx = 2; constraintsMinsLabel.gridy = 0;
			constraintsMinsLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsMinsLabel.insets = new java.awt.Insets(0, 0, 5, 5);
			getJPanel1().add(getMinsLabel(), constraintsMinsLabel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}
/**
 * Return the JSeparator2 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator2() {
	if (ivjJSeparator2 == null) {
		try {
			ivjJSeparator2 = new javax.swing.JSeparator();
			ivjJSeparator2.setName("JSeparator2");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator2;
}
/**
 * Return the JSeparator3 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator3() {
	if (ivjJSeparator3 == null) {
		try {
			ivjJSeparator3 = new javax.swing.JSeparator();
			ivjJSeparator3.setName("JSeparator3");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator3;
}
/**
 * Return the MinsLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMinsLabel() {
	if (ivjMinsLabel == null) {
		try {
			ivjMinsLabel = new javax.swing.JLabel();
			ivjMinsLabel.setName("MinsLabel");
			ivjMinsLabel.setFont(new java.awt.Font("dialog", 0, 10));
			ivjMinsLabel.setText("(mins)");
			ivjMinsLabel.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMinsLabel;
}
	/**
	 * Insert the method's description here.
	 * Creation date: (4/11/2002 3:05:31 PM)
	 * @return javax.swing.ButtonGroup
	 */
	public javax.swing.ButtonGroup getRunAsButtonGroup()
	{
		if (runAsButtonGroup == null)
		{
			runAsButtonGroup = new javax.swing.ButtonGroup();
			runAsButtonGroup.add(getRunOnceButton());
			runAsButtonGroup.add(getRunConsoleButton());
			runAsButtonGroup.add(getRunAsServiceButton());
		}
		return runAsButtonGroup;
	}
	/**
	 * Return the RunAsPanel property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getRunAsPanel() {
	if (ivjRunAsPanel == null) {
		try {
			ivjRunAsPanel = new javax.swing.JPanel();
			ivjRunAsPanel.setName("RunAsPanel");
			ivjRunAsPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsRunPanel = new java.awt.GridBagConstraints();
			constraintsRunPanel.gridx = 0; constraintsRunPanel.gridy = 0;
			constraintsRunPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsRunPanel.weightx = 1.0;
			constraintsRunPanel.weighty = 1.0;
			constraintsRunPanel.insets = new java.awt.Insets(5, 5, 5, 5);
			getRunAsPanel().add(getRunPanel(), constraintsRunPanel);

			java.awt.GridBagConstraints constraintsJPanel1 = new java.awt.GridBagConstraints();
			constraintsJPanel1.gridx = 1; constraintsJPanel1.gridy = 0;
			constraintsJPanel1.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanel1.weightx = 1.0;
			constraintsJPanel1.weighty = 1.0;
			constraintsJPanel1.insets = new java.awt.Insets(5, 5, 5, 5);
			getRunAsPanel().add(getJPanel1(), constraintsJPanel1);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRunAsPanel;
}
	/**
	 * Return the RunAsService property value.
	 * @return javax.swing.JRadioButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JRadioButton getRunAsServiceButton() {
		if (ivjRunAsServiceButton == null) {
			try {
				ivjRunAsServiceButton = new javax.swing.JRadioButton();
				ivjRunAsServiceButton.setName("RunAsServiceButton");
				ivjRunAsServiceButton.setText("Run As Service");
				ivjRunAsServiceButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
				// user code begin {1}
				ivjRunAsServiceButton.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjRunAsServiceButton;
	}
	/**
	 * Return the RunConsoleButton property value.
	 * @return javax.swing.JRadioButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JRadioButton getRunConsoleButton() {
		if (ivjRunConsoleButton == null) {
			try {
				ivjRunConsoleButton = new javax.swing.JRadioButton();
				ivjRunConsoleButton.setName("RunConsoleButton");
				ivjRunConsoleButton.setText("Run In Console");
				ivjRunConsoleButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
				// user code begin {1}
				ivjRunConsoleButton.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjRunConsoleButton;
	}
/**
 * Return the RunIntervalLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getRunIntervalLabel() {
	if (ivjRunIntervalLabel == null) {
		try {
			ivjRunIntervalLabel = new javax.swing.JLabel();
			ivjRunIntervalLabel.setName("RunIntervalLabel");
			ivjRunIntervalLabel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjRunIntervalLabel.setText("Run Interval:");
			ivjRunIntervalLabel.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRunIntervalLabel;
}
/**
 * Return the RunIntervalTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getRunIntervalTextField() {
	if (ivjRunIntervalTextField == null) {
		try {
			ivjRunIntervalTextField = new javax.swing.JTextField();
			ivjRunIntervalTextField.setName("RunIntervalTextField");
			ivjRunIntervalTextField.setText("1440");
			ivjRunIntervalTextField.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRunIntervalTextField;
}
	/**
	 * Return the RunOnceButton property value.
	 * @return javax.swing.JRadioButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JRadioButton getRunOnceButton() {
		if (ivjRunOnceButton == null) {
			try {
				ivjRunOnceButton = new javax.swing.JRadioButton();
				ivjRunOnceButton.setName("RunOnceButton");
				ivjRunOnceButton.setSelected(true);
				ivjRunOnceButton.setText("Run One Time");
				ivjRunOnceButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
				// user code begin {1}
				ivjRunOnceButton.addActionListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjRunOnceButton;
	}
	/**
	 * Return the RunPanel property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getRunPanel() {
	if (ivjRunPanel == null) {
		try {
			ivjRunPanel = new javax.swing.JPanel();
			ivjRunPanel.setName("RunPanel");
			ivjRunPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsRunOnceButton = new java.awt.GridBagConstraints();
			constraintsRunOnceButton.gridx = 1; constraintsRunOnceButton.gridy = 1;
			constraintsRunOnceButton.anchor = java.awt.GridBagConstraints.WEST;
			constraintsRunOnceButton.insets = new java.awt.Insets(0, 5, 10, 0);
			getRunPanel().add(getRunOnceButton(), constraintsRunOnceButton);

			java.awt.GridBagConstraints constraintsRunConsoleButton = new java.awt.GridBagConstraints();
			constraintsRunConsoleButton.gridx = 1; constraintsRunConsoleButton.gridy = 2;
			constraintsRunConsoleButton.anchor = java.awt.GridBagConstraints.WEST;
			constraintsRunConsoleButton.insets = new java.awt.Insets(0, 5, 10, 0);
			getRunPanel().add(getRunConsoleButton(), constraintsRunConsoleButton);

			java.awt.GridBagConstraints constraintsRunAsServiceButton = new java.awt.GridBagConstraints();
			constraintsRunAsServiceButton.gridx = 1; constraintsRunAsServiceButton.gridy = 3;
			constraintsRunAsServiceButton.anchor = java.awt.GridBagConstraints.WEST;
			constraintsRunAsServiceButton.insets = new java.awt.Insets(0, 5, 0, 0);
			getRunPanel().add(getRunAsServiceButton(), constraintsRunAsServiceButton);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRunPanel;
}
	/**
	 * Return selectedRunAsButton.
	 * @return int
	 */
	private int getSelectedRunAsButton ()
	{
		return selectedRunAsButton;
	}
	/**
	 * Returns a serviceName dependant on exportProperties.getFormatID().
	 * @return String
	 */
	private String getServiceName()
	{
		return com.cannontech.export.ExportFormatTypes.getFormatTypeName(getExportProperties().getFormatID());
	}
	/**
	 * Return the StartServiceCheckBox property value.
	 * @return javax.swing.JCheckBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JCheckBox getStartServiceCheckBox() {
		if (ivjStartServiceCheckBox == null) {
			try {
				ivjStartServiceCheckBox = new javax.swing.JCheckBox();
				ivjStartServiceCheckBox.setName("StartServiceCheckBox");
				ivjStartServiceCheckBox.setText("Start");
				ivjStartServiceCheckBox.setFont(new java.awt.Font("dialog", 0, 12));
				ivjStartServiceCheckBox.setEnabled(false);
				// user code begin {1}
				ivjStartServiceCheckBox.addItemListener(this);
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjStartServiceCheckBox;
	}
/**
 * Return the JCheckBox2 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getStopServiceCheckBox() {
	if (ivjStopServiceCheckBox == null) {
		try {
			ivjStopServiceCheckBox = new javax.swing.JCheckBox();
			ivjStopServiceCheckBox.setName("StopServiceCheckBox");
			ivjStopServiceCheckBox.setFont(new java.awt.Font("dialog", 0, 12));
			ivjStopServiceCheckBox.setText("Stop");
			ivjStopServiceCheckBox.setEnabled(false);
			ivjStopServiceCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.S_RESIZE_CURSOR));
			// user code begin {1}
			ivjStopServiceCheckBox.addItemListener(this);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStopServiceCheckBox;
}
/**
 * Return the JCheckBox1 property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getUninstallServiceCheckBox() {
	if (ivjUninstallServiceCheckBox == null) {
		try {
			ivjUninstallServiceCheckBox = new javax.swing.JCheckBox();
			ivjUninstallServiceCheckBox.setName("UninstallServiceCheckBox");
			ivjUninstallServiceCheckBox.setFont(new java.awt.Font("dialog", 0, 12));
			ivjUninstallServiceCheckBox.setText("Uninstall");
			ivjUninstallServiceCheckBox.setEnabled(false);
			// user code begin {1}
			ivjUninstallServiceCheckBox.addItemListener(this);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUninstallServiceCheckBox;
}
	/**
	 * Called whenever the part throws an exception.
	 * @param exception java.lang.Throwable
	 */
	private void handleException(java.lang.Throwable exception) {
	
		/* Uncomment the following lines to print uncaught exceptions to stdout */
		// com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
		// exception.printStackTrace(System.out);
	}
	/**
	 * Initialize the class.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initialize() {
		try {
			// user code begin {1}
			// user code end
			setName("ExportGui");
			setJMenuBar(getExportGuiJMenuBar());
			setSize(346, 377);
			setTitle("Export File Client");
			setContentPane(getJFrameContentPane());
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
		// user code begin {2}
		getRunAsButtonGroup();
//		for( int i = 0; i < ExportFormatTypes.formatTypeNames.length; i++)
//		{
//			getFileFormatComboBox().addItem(ExportFormatTypes.formatTypeNames[i]);
//		}
//		getFileFormatComboBox().addItem(ExportFormatTypes.getFormatTypeName(com.cannontech.export.ExportFormatTypes.CSVBILLING_FORMAT));
//		getFileFormatComboBox().addItem(ExportFormatTypes.getFormatTypeName(com.cannontech.export.ExportFormatTypes.DBPURGE_FORMAT));
		setSelectedRunAsButton(RUN_ONCE);
	
		// user code end
	}
	/**
	 * @see java.awt.event.ItemListener#itemStateChanged(ItemEvent)
	 */
	public void itemStateChanged(java.awt.event.ItemEvent event)
	{
		if (event.getStateChange() == java.awt.event.ItemEvent.SELECTED)
		{
			if (event.getSource() == getInstallServiceCheckBox())
			{
				getUninstallServiceCheckBox().setSelected(false);
				getStopServiceCheckBox().setSelected(false);
				getStopServiceCheckBox().setEnabled(false);
				getStartServiceCheckBox().setEnabled(true);
			}
			else if (event.getSource() == getUninstallServiceCheckBox())
			{
				getInstallServiceCheckBox().setSelected(false);
				getStartServiceCheckBox().setSelected(false);
				getStartServiceCheckBox().setEnabled(false);
				getStopServiceCheckBox().setEnabled(true);
			}
			else if (event.getSource() == getStartServiceCheckBox())
			{
				getUninstallServiceCheckBox().setSelected(false);
				getStopServiceCheckBox().setSelected(false);
			}
			else if (event.getSource() == getStopServiceCheckBox())
			{
				getInstallServiceCheckBox().setSelected(false);
				getStartServiceCheckBox().setSelected(false);
			}
		}
		else if( event.getStateChange() == java.awt.event.ItemEvent.DESELECTED)
		{
			if (event.getSource() == getInstallServiceCheckBox())
			{
				getStopServiceCheckBox().setEnabled(true);
				getStartServiceCheckBox().setEnabled(true);
			}
			else if (event.getSource() == getUninstallServiceCheckBox())
			{
				getStartServiceCheckBox().setEnabled(true);
				getStopServiceCheckBox().setEnabled(true);
			}
		}
	}
	/**
	 * main entrypoint - starts the part when it is run as an application
	 * @param args java.lang.String[]
	 */
	public static void main(java.lang.String[] args)
	{
		try
		{
			System.setProperty("cti.app.name", "Export");
			javax.swing.UIManager.setLookAndFeel( javax.swing.UIManager.getSystemLookAndFeelClassName());		
			ExportGui aExportGui;
			aExportGui = new ExportGui();
			
			for( int i = 0; i < args.length; i++)
			{
				aExportGui.getFileFormatComboBox().addItem(ExportFormatTypes.getFormatTypeName(Integer.valueOf(args[i]).intValue()));
			}
			if( aExportGui.getFileFormatComboBox().getItemCount() == 0)
			{
				//there aren't any items listed so we'll default a couple...
				aExportGui.getFileFormatComboBox().addItem(ExportFormatTypes.getFormatTypeName(com.cannontech.export.ExportFormatTypes.CSVBILLING_FORMAT));
				aExportGui.getFileFormatComboBox().addItem(ExportFormatTypes.getFormatTypeName(com.cannontech.export.ExportFormatTypes.DBPURGE_FORMAT));
			}
			
			aExportGui.addWindowListener(new java.awt.event.WindowAdapter(){
					public void windowClosing(java.awt.event.WindowEvent e){ 
						System.exit(0);
					};
				});
	
			//set the app to start as close to the center as you can....
			//  only works with small gui interfaces.
			java.awt.Dimension d = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
			aExportGui.setLocation((int)(d.width * .3),(int)(d.height * .2));
			aExportGui.show();
					
		}
		catch (Throwable exception)
		{
			System.err.println("Exception occurred in main() of java.lang.Object");
			exception.printStackTrace(System.out);
		}
	}
	/**
	 * Set exportProperties.
	 * @param exportProps ExportPropertiesBase
	 */
	private void setExportPropertes(ExportPropertiesBase exportProps)
	{
		exportProperties = exportProps;
	}
	/**
	 * Set selectedRunAsButton.
	 * Valid selected values are RUN_ONCE, RUN_CONSOLE, RUN_AS_SERVICE
	 * @param selected int
	 */
	private void setSelectedRunAsButton (int selected)
	{
		selectedRunAsButton = selected;
	}
}

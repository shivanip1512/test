package com.cannontech.esub.editor.element;

import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.JScrollPane;

import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.tree.*;

import com.cannontech.database.data.lite.LitePoint;
import com.cannontech.database.data.lite.LiteYukonPAObject;
/**
 * Creation date: (1/11/2002 11:43:34 AM)
 * @author: 
 */
public class PointSelectionPanel extends JPanel implements TreeWillExpandListener {
	private JTree ivjDevicePointTree = null;
	private JScrollPane ivjJScrollPane1 = null;
	private com.cannontech.database.model.DeviceTreeModel ivjDeviceTreeModel = null;
/**
 * PointSelectionPanel constructor comment.
 */
public PointSelectionPanel() {
	super();
	initialize();
}
/**
 * connEtoM1:  (PointSelectionPanel.initialize() --> DeviceTreeModel.update()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1() {
	try {
		// user code begin {1}
		// user code end
		getDeviceTreeModel().update();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP1SetTarget:  (DeviceTreeModel.this <--> DevicePointTree.model)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetTarget() {
	/* Set the target from the source */
	try {
		getDevicePointTree().setModel(getDeviceTreeModel());
		getDevicePointTree().addTreeWillExpandListener(this);
		// user code begin {1}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GGDEABACGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E135BB8DF4D45519591EE8F336D90B16D57450EE0E2416D65ACDF7E98FD2BC26AEDD2D52950FE8E90B6750AE2D5183EE562527F14D161B495F8483C6C14498E15420C1E3C8788DB188C9A690B048C8A6E188A1491B19B7B3AF1919B74C3CA181826C775D1FB7AF131984284E49F75E3B5F7D7B6EF73F5F7BEE48462D994585260D049494937E5BD7C0C86AFEC2325B5FDDA2F0667A7ECAE2783D8370AAF936
	31881E1B21EE2E2F3F320264541821DC8B65E9D0FE835EB710D5B50EC6F8C9B2CFBD543D781BFF78736473FC56AD66A9256587064B61399E209EF0F6000CFA1C7F57431BB9FE944A6B79BBC2010990C7833629A85EEC402F606DEA216E90C0BEED7342F0952F4F00B23619874FC58D2C6D8AF816D16AEEEAEA646D7AEE1DCED6BF7232E99D4EE598DF00F5A76B6B63CF8B7996E5C4A1794F41E6F8B65B063D1F3A54C01DCB8A865520A63BFCF5F2A46A2C135D0A26066BE43F9C1003DAD313CDD502DA9794DD1A22
	86EDD2D076AF5D09B46FADB6537100E6A83BF7A16EC7454827AAF85F8D5039CB507D783AE6CE57746169E4792C3F96A423FB76AEC66F22DDB13AC3F52BCCE33BF17C377C653CDFB9142DG0C9617DF50123DDB50723B82EC1B077D7674D7566C917845A6449F023283A034C750F86083C1236352AC12672CB33D12044634BD0C362CBDB19A17F57F3674CDAAAB3F6E417DDE89F595FB7BAB2B81BAGFCGE9GEFD1993D2D7BC3F836B835B6B590D003AD21D02B5F9DBE2E3AE5BF3CB7B5C18D471D14DDEA58CD88
	1343CF0AEB9350A3A0E36FF899C4E0EBBBC5045C4CB9F9975134EAD3F102354DFDF21DE9AE9F63613D313511FD4837F7CB10EFB90047FE25D42190DFC77156FDB1BC5B2B39D496305C87F5597B841F9D6B85AD1DC537100A06FAD3E982DAE6BC384DD45D48E8E8EE0C5142F87CE38772588778D40019GF38116G2CEE94BCDE563DEBAA9E9F85398F87A5FFD754991242DAEBD4713B65B06775BB7E49F81D88D83F9D575D0F71E576AE639EAD7B579D897932EC76C6D345FE460F1A7DB13E3039FDC9676E58BFD1
	B6566BFBF8026AC45FFE360745BA3E1762C386BC5B5B5FD35D42F2AA5465G307656C244F7B6450FF30262871B6247F94AA4465120EEA9G5B5F933DE88F1BBF819D85888124814C86D88830749331479F746C38C6BD3299761775DD5E33891E722896160E86A31A94F449BDD2D8111CFEB9C2F81BE7FB102F4EF17D1E277A6D02B90E48C1B9ACB133981682B288D3043579CB4F2B58A6AC53DA3B9210E102C00808F15774EC0027DF0AE85DA137244931962C3E74944A44F92987C60481F02F1B11DFA7294D4D03
	75EFEC963C9ABB03B8BF14D31B85DF3EF66AB5F8FE8642AD7B1B1A2C8A355DD2780210519A2A33B3207DDC002283C2B71FF78899342E3B1354BED917D086E97D81A6CFFD8762E5F0B79DBB957019G8B8F889FBA3F58814F22830965F0B2C09A63F1B362F0EC0EA7689C2557B97EFAAE0371384238B26377F3FD383E95308E72E9FF2565D341737BCFD918AC36CA91D9C85F09B0880E6C0E6DGEBBB5F013EC5BE8F9E56AA0764209BDEA2FC6FFF6EA80B4925C755E566A10AC7BB5586029351713FF23C4A70B006
	D14AC57D1334DE523430620CEAF2172CE9CA509B6B7FB425A5B24E84C678DAD71E4535B6429AEDG037ADABD27B798642BD3D50723A1BBEA8E17532B549FEB50BE7DD3317F5DA644E5C199770E6186A98E5BAC565BBDD3603846BD433126EA13D8CE0869DA67081701EB119DB64731C2DCDB819F03730062F2016E4D8745FA17D1DA8A2EF12E6B85B6471F699C05C9647CEF85A69327FB134B74E0EFE2197674A616E9FF6F64B22B75A612D9D6F7299757280E848DBA10520B7650258603AC0C553B909693BFEF47
	F5A8C1C5BB25383D325625DC14A13EB808322CD01BFB885E6D87051D9CF9CF58496A0B7FC832874A9246D3B33EDBE31AF31049DF7641181DE4B47D5D9954AD9EE7372951204670DF27761C63A305947713A1DC2FD5BE2F38E4FBD8162907A32CEEEFDFAB0EDB13A0D02F4595A9129FD6D3335D7271471FDA6206280DD277D3333DE7FBBD6163DDB46F226345B755FCCA44529C9B044E075535812C5F5E40ED465681DC57F2D86FEA0072C342E69476E13D30995CB03629FECEB054798EA13F3DA59B8DBC2CBE4472
	ADBBBCD97D2AF2E3FD962FDF2F77FFF31D31BE57D04F68486D2BC059114FC5E5F079E834BE13AF883F5D77DADCDD0F640F466201B5FDAF4353EF30F78C7F425944FB19F7967348E1FD7C7C33A5847DBA9B1349DE1604E30642CAG5C839AF01EB75E6EB7660D35AD7D1518E35A606986E0FDDDE3E807936CBC67C52649480BB1BE863E9735E27D578BC55E392005596AA5AD4C962FECE16D6650F6ADC5221D2D15557B60B98AB083E08B6073E83B94BDA75C21636E20387F82C3F4C71108F50FD79873D8F7641D04
	7A03505C466830354567G76C19CB7847814B6A1E3677B0DFE29A592D1DD8A8D4178BEED9BB06A9643FDB830961E9EA59C01FC40AD0F0A3D2E9FC0DAB1C663E83EDF4FEEFA17CC0CB95BE95A2CA796AE94E8161BFE278467C4BBBC3DCD580F4B070D797002D7B619DECE327EC5FC5DAB8D6B2F5E364A44E8319DC914630C2725ED247DBC15CAE17CFA94F9042F656AE85DB5740F6B4A7B7E4FF614CFFA0EB0A41D17C66BA2A3E0231B1A0E994E88C8404C79D6EB9579F7ED88F5458D65B10069D6A14BF7EF5DC592
	1FCB0009121C90D455D1C38371EC1C9DE439C4964DB1D076664018ABG18BDFB23281C5BF6E18959FC77EE403D508DA091327943AD07846FFFF48BB1CBDB921E8324BFCBCCD56DECCF2C6D313D4959F0DFE9BEG23E928C850148EED96368B1A9EAFC23B009615696993E3C6BD4D07F616437D155643227D0BC5C8B3DD3ECE678BADC6BA6715EECBC8276FFB8DA647E1C6DF4A61981D763577157AG787940CE23BEE6AFFFBD29BEAE66E32CB89C2F0FFF6F443DA6C7A0B7B9A274715E01D78D7AF89204C88AFA41
	EA6AB143A02E8F6CA3AF1F9D44F929FDA4A2F619D5921F53569C0945F44D06F79BFFE774BC64C21E3A811782B083A08BE031CE5B0A41A94F875AC7A7B99FA88E445315EB202528E3E2EC4AF2618CAA7F1BBBD8AEDC2863FFC071B586BC13211DA1A1C30DD0B733C3440DBFAD1C6A1C019CCD947BAE1C32DFF5DCBF464F9A196664D067G88812483E481AC8248BDAA783AD37AE4CA3E22C1322BAD54263445C7E51C4ED0510D2D6F4A147DAA0E0D6F477D309D4F0F9358B3B4B45CA77FBEE47449B547184F344353
	F7CC1CC52E3D0CFA00FA15F2CC64687F64C15E4D0372920015G664F7AABEB81BAG7C1F895E25CA2DD3712EC5844540BF71BA1105FC4F1E76A2AD29B07EF4FD0EBFC86B8CBAC9E387DD9F3F694478C48DABDEA5A8F053A94E2506E9C04D723B795427E542188B81986EA9B362F220CCBA856E7EF244D5C33931D34C7F18ABF91E7014ABF11E304C15B8CF7803EB725C77B9D732BC0251D7C57D139DE87369B43F98946BC86F943AF6CF886DF516DE4E22E534512C5C983A56FCF2B240719361599CDFFCA9F3A44B
	B15F26F54FE82F1384F95267D2C0A6A2BFD8D5D8465B34EB6A71861D57BB65647B3ADFCE3C2F87E51445089A8D3B64783DBBACEF566BE282FED41383C88EEBF302765724B064EC717DFBE8FFD6172C7F001CCCBE58DA3FD7A456EA53D4DB03EEAB3C6DEFA73695DD2EB0E4B4988191917F3DF9CE44C08FF70A98E84B985AF4F23C3FF2B3C07DF1A1C72FDCC65B55F1FC3C9C74C1B98410FAFC22FC30F5FC5F131C77D91E443C7F29A7B96F6F77CC4D7BFF77A4677D2FBCD3737EA98F463CCE452D04F98648F55A0B
	7EEFD49F6BCF34FCC1673DBA08B91AB7AC05FC0AABE215A32E309202F815107A4F11370F17605CB300D7CBG0AGD77DF90CEFEC0C9F0F605C1E309400ED6B8A49AED2FE026616E67DFB9E74C98718833088E06567A2CE7D67DD7874CBCE9A0BB1B9D9D21EBCBF5F95A8216DAF28D1B03459F41EE381B10F9D4AFE0069G33CFB0FF42E829D0C59B332D3F328A2099208FE04CA662428FEBD00E8CD2574064E84BB9238F1CE99BAFB7D936E43149EDD4AE975A62E31319943F44969F1BD40F0958E48554F5FCA1EC
	687B54874E01F2360E8BD25CE2A8676838F994178F650DA7852E712A303F0DA745BAD7166C20FAB8C9DAD097477D063D24318B47DBD7DACD58F7DD04B28E2877FDB0FE8EG3E1B3B44DC7719B1EEBCAFB93D0AA7526716BD216845063DF5D0E275CF50B017454DE7560ABCAEFD593748464C2713FE579C6BE2BC4F680A454DCBBE4ADF4BEC4406B2F1D63894E936531C3B4C1893605CE8FF6AGD8FDE4DCBD2EE11F49D87F5DF175E5937AFFFB5CB98A4A341777E7EBFBF41BD8DB7E23B3097FA7EFA77D566C3033
	B50D71673C0FABC97AC36545CCC64281714DF6AE542F348BBD7AD39D6A37EEC36B24912D2929D545F321CE26AC0CB7738302B7555D42FE6650B17B202C8124F70B3CFA74FDC1731CFBEEA11DA9BB92523C5C3E4914594D3FF3F6477663616E5F1672EF5B2A183328C76C07DB0D5F0F378A0C7C3CDD0D5F0F6D63787D309A3F9FCF0C5B2F7FD56377C374E7FA31077A11E6204756A3F46509CBC2D7349E61C3E60CE1EC1221176F26E5BC2BE1658F470CF184367BDBE30A0931CA5B38B93E6CF3ED260787AE9BF362
	C538CF44FE99573A20C76872CD1771EC470FFE0819E4E2B9C5E57F32B8272AB8A55ABEF699E54AA57B7DA751010665B033554FDC96F6588DED47G96GACBE454E3F182DBEF1D5344981FCBEC015836CB5C01FC35CCB7928B4851EB7FBBC7067CBF35DB9AD654EBBB725B9DB4DE905EDA5E92EB6F31A2935A44DE935105DED446C32366E343616D91C6DA3EF1C33DA6BDDC7AEC4C6B66E36B80F0C0C0C3C662CF79DFEE364DC97A9F136FE716A6B2DA5BE17F5DBF7B50C635C093F12B4096A4326B4184C0373091F
	65B452BBD8AAE4ED8C68C33BE8BE4D6400594C9747594CC292331BEEE817F5BAA6B3CC6F362EB31E9F787F633F8BB6A450BB04453CAF69E54F69FBABF92ED2BD04BC5C8DF8AB0083A084108A1051ABF2874D07BA5192721C14D9F0F2DC8ACADEFED38550C783D0B20684DC9EB7175D58B7791F178AFBB2F77E6DE45E4DCF97A4BB27DB4057330CBFED3515944F5676AF741ED0799950DB00CEGB740A84034B3E2EDBF73A10D189D3B954C72A4170F1ED20A448F4F5EE2E88CDA585AC6A71CC3DC1B0E5EFC037D9E
	386EFEAC06189FC47D4ABC43E208829D7FEF941FE540B33F713C6EB796C01D25CF6452AF5358A9954A99G73G96836482141F953CACD26A4994F934DD8DF5C2406CB7240D7C0E0DFA3D6BE37623739C46F9CE6A40C41C6739A06C0285E8EB848881241EE567FBD9E7314DF317AC130CBD73AC13A7B6479A43F7A07D7B8B2F9B2236AF98757B79FDA659281375177ED8D018C4F673789C66FE762C9E2864E34E25E3EA61284C464C98B10E5938762D2467040DFC2CCE4318ECDFDF39A2E246D428DB50AF620117C2
	981FA4BA7F75C6153A2826781B1A5AB485D75CE6B052C464D9272E881F3D3ADF4489B75139EA874026G748D08B31A5F911113E983423FEFA808776F334679677602F87F0EF3456AC78A627D7B25F17D3FDF906F5FC5FF669FAED27FE07C25GA21B7E8839671EC79E494DA5E44D1A17DE42E7867CB2B3318D7ED87BB5EBE26D57509F396E9F5B238525C27766GFFD68C0878CA9E937BDFFFBA1D545F39AC29BD2C9A64F73786E3F61E2D738D73A1F8DE4EA3647F72C176B82C79AB23FF82A0BEBF86D773981D4C
	0FB51B85CFFD03CC0ED2870DE740F9C174E3B38117853090E0A9C0AE00D9025C9B209620C392F66328D283CFE6B40E708C93244E4BB48E3F8371641ABA9A566763A12AF7FADE5BB0E4BC43E6383DC39807043953BA6A967866A134B9EE3F1F1E30B0DC4B90462CCAB0A287A30A261C274DF9DD47D04578BA7AF9122D75D0081EF743DAD2GB2816681AC525736F408FF37CA60DB5A5DDE4C73719614A6667A59F072B3058707273EBB7568B02E5929EA1A9A4071857E71E1DC332606A8121F858C23FC05952FCFE3
	CD45395FB03D5BA4FBA81A59676CA06EBFFB7F2561FDF5604BB89F1B5C772D8BFE15F330B5EF8CA4677BDB0144E7B96F84921F0FFE90187C9E450EC072FB94FB8346FB944CAED8AF8A5B1D83F2E5F18A5B7D4C5B9817CDEE3B6D0A6617DB39FB64B6BB7D2208439DCEE133AD17F00EE9D01E8D106D9471F969987A57B6996FEC0A78ECC49671D9553D5FA4D5DBFFD3A06CF2BCEF17BA79F7EFD7AC5F0B59093B4F218EB73A042E7CA2003A52A38DCD7CA28A48B608A33A0025C12F68FFDB985751897DFD7A98EB03
	9FCDB206AD2C066430F601E1299AF399FB7D4AD471C71AAB51F70F77266C37A521CC77CD59AF9ED85C76A2752D192E78F84EF41546F32E78F86E9BD774F88E6AACEE110FAEA74679D381BF43BDF9CE4A7ABDD8FAE3716B626B6E4776B8AB0276F58E50168D309CA09740AC0B7D6E8CDAC8A25FC1EF8F48EE1B64876D13198F6CB1D71058CF78EA4627B13360138546F66863972928EBA30ADB7391213FE5AA6A04CFC643A9F06BE9BB70D406F69BD474539150CB3F9214ED121B635FD4F1AE6785CD0E5864F0A754
	B17CD69575818F58D879BD95F997E2CB60FDEBD4DC83D822E004FF00D1C6E5BF37ABF1F52E8B472548B077E12164766DC4E8EA3F628851BB9C608F6C97C21C5E33A17A5D4A630948BA9F1C218A9DF7B4E2D351E12AC1FEB76F620D6918E34AFE09F56C56A97B99E11AAC6ED3CF2736B0D30E5731EFD3FC169C2FE36FDF52F58C6AAC9E11B32D56D0B6D3211C813090E099C0AE00595BDFD985305BAB64ECF588E320E4F60B99F09AAB04A5C55CF33A0766BE91EE93996E0EB02EC577BD4C44713A6F04D11774BB99
	740A8E33286CBBD476869683213436311B56BAAF57DCA17A3B79EA6C7D56ABDF3D7F7F41D7BA87BB537B8B4DCDEC309F18BFB0DCBE4579G07B98963613C8855FDA968766BFC3DBF025FC6D01FCF4AA188B7C1355875A7DE7F0B886AF5C43948756617114477599E0B209C291113C7DA5B0330AFF2042D7FEB669B3339532E3B9FDB77EC9A9F24423AE7F8053F386BD2EC4FE7995EEBAFFD757B5F7E154E416F98EA496DE3C9F4EA7B78CAB4F15C7DFAF4E25CDD99CD9CF7DB2246381B5F1D636306758F428C7FD1
	94F515FD5FE247F1985F3138D0FA5FF0776A943AAE062F9ADD9743F7F077454F9C9E38C873F20C96611969257F1FB7067B4CE23E474E984FA0AA6EAAB6899B984F4F9CAF33612B3D71F715DE2063B17A2DE35BC892FB871951B1693CF442B9A43BB43B84260D6730F76F436F64F3D611E20D2CE7B7AFAD12A5446FD2B0BA37DFB55219F7D3FEC1323312BC9F232FDC0927F379FE5C078E403B95E11F6B77FFBC893DDD81496F57A47FF0CB500D343722EF57577A477DB8FEC43461152CEE65FE24FB4850677F81D0
	CB8788200369286D94GG2CB9GGD0CB818294G94G88G88GGDEABAC200369286D94GG2CB9GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGA795GGGG
**end of data**/
}
/**
 * Return the DevicePointTree property value.
 * @return javax.swing.JTree
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTree getDevicePointTree() {
	if (ivjDevicePointTree == null) {
		try {
			ivjDevicePointTree = new javax.swing.JTree();
			ivjDevicePointTree.setName("DevicePointTree");
			ivjDevicePointTree.setModel(null);
			ivjDevicePointTree.setLargeModel(true);
			ivjDevicePointTree.setCellRenderer(new com.cannontech.common.gui.util.CtiTreeCellRenderer());
			ivjDevicePointTree.setBounds(0, 0, 317, 337);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDevicePointTree;
}
/**
 * Return the DeviceTreeModel property value.
 * @return com.cannontech.database.model.DeviceTreeModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.database.model.DeviceTreeModel getDeviceTreeModel() {
	if (ivjDeviceTreeModel == null) {
		try {
			ivjDeviceTreeModel = new com.cannontech.database.model.DeviceTreeModel();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDeviceTreeModel;
}
/**
 * Creation date: (1/14/2002 12:38:10 PM)
 * @return javax.swing.JTree
 */
javax.swing.JTree getIvjDevicePointTree() {
	return ivjDevicePointTree;
}
/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPane1() {
	if (ivjJScrollPane1 == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitle("Select a point");
			ivjJScrollPane1 = new javax.swing.JScrollPane();
			ivjJScrollPane1.setName("JScrollPane1");
			ivjJScrollPane1.setBorder(ivjLocalBorder);
			getJScrollPane1().setViewportView(getDevicePointTree());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPane1;
}
/**
 * Creation date: (12/18/2001 4:13:09 PM)
 * @return com.cannontech.database.data.lite.LitePoint
 */
public LitePoint getSelectedPoint() {
	javax.swing.tree.TreePath path = getDevicePointTree().getSelectionPath();
	
	if( path != null )	{
		javax.swing.tree.DefaultMutableTreeNode node = (javax.swing.tree.DefaultMutableTreeNode) path.getLastPathComponent();
		Object selected = node.getUserObject();

		if( selected instanceof LitePoint )
			return (LitePoint) node.getUserObject();
	}

		return null;	
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	connPtoP1SetTarget();
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("PointSelectionPanel");
		setLayout(new java.awt.BorderLayout());
		setSize(361, 141);
		add(getJScrollPane1(), "Center");
		initConnections();
		connEtoM1();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * Creation date: (12/18/2001 4:36:53 PM)
 * @param path javax.swing.tree.TreePath
 * @param point com.cannontech.database.data.lite.LitePoint
 */
public boolean selectPoint(LitePoint point) {
	TreePath rootPath = new TreePath( getDeviceTreeModel().getRoot() );
	TreePath paoPath = findPAO(rootPath, point.getPaobjectID());
	
	if( paoPath != null ) {
		getDevicePointTree().expandPath(paoPath);
		return selectPoint(paoPath, point);
	}

	return false;
}
/**
 * Creation date: (12/18/2001 4:36:53 PM)
 * @param path javax.swing.tree.TreePath
 * @param point com.cannontech.database.data.lite.LitePoint
 */
private boolean selectPoint(TreePath path, LitePoint point) {
	DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();

	Object o = node.getUserObject();
	if( o instanceof LitePoint && ((LitePoint) o).getPointID() == point.getPointID()) {
		getDevicePointTree().getSelectionModel().setSelectionPath( path );
		getDevicePointTree().scrollPathToVisible(path);
		return true;
 	}
	else 
	if( node.isLeaf() ) {
			return false;
	}
	else {
		for( int i = 0; i < node.getChildCount(); i++ )
		{
			Object nextPathObjs[] = new Object[path.getPath().length +1];

			System.arraycopy( path.getPath(), 0, nextPathObjs, 0, path.getPath().length );

			nextPathObjs[path.getPath().length] = node.getChildAt(i);
			
			TreePath nextPath = new TreePath(nextPathObjs);
			
			if( selectPoint(nextPath,point) )
				return true;	
		}

		return false;
	}
			
}

private TreePath findPAO(TreePath path, int paoID) {
	DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();

	Object o = node.getUserObject();
	if( o instanceof LiteYukonPAObject && ((LiteYukonPAObject) o).getYukonID() == paoID) {
		getDevicePointTree().getSelectionModel().setSelectionPath( path );
		return path;
 	}
	else 
	if( node.isLeaf() ) {
		return null;
	}
	else {
		for( int i = 0; i < node.getChildCount(); i++ )
		{
			Object nextPathObjs[] = new Object[path.getPath().length +1];

			System.arraycopy( path.getPath(), 0, nextPathObjs, 0, path.getPath().length );

			nextPathObjs[path.getPath().length] = node.getChildAt(i);
			
			TreePath nextPath = new TreePath(nextPathObjs);
			
			if( (nextPath = findPAO(nextPath, paoID)) != null)
				return nextPath;
		}

		return null;
	}			
}

	/**
	 * @see javax.swing.event.TreeWillExpandListener#treeWillCollapse(TreeExpansionEvent)
	 */
	public void treeWillCollapse(TreeExpansionEvent event)
		throws ExpandVetoException {			
	}

	/**
	 * @see javax.swing.event.TreeWillExpandListener#treeWillExpand(TreeExpansionEvent)
	 */
	public void treeWillExpand(TreeExpansionEvent event)
		throws ExpandVetoException {
			getDeviceTreeModel().treePathWillExpand(event.getPath());
	}

}

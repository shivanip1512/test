package com.cannontech.esub.editor.element;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

import com.cannontech.database.data.lite.LiteGraphDefinition;

/**
 * Insert the type's description here.
 * Creation date: (10/1/2002 3:15:46 PM)
 * @author: 
 */
public class GraphDefinitionSelectionPanel
	extends javax.swing.JPanel
	implements javax.swing.event.TreeWillExpandListener {
	private javax.swing.JTree ivjGraphDefinitionJTree = null;
	private com
		.cannontech
		.database
		.model
		.GraphDefinitionTreeModel ivjGraphDefinitionTreeModel =
		null;
	private javax.swing.JScrollPane ivjTreeScrollPane = null;
	private com
		.cannontech
		.common
		.gui
		.util
		.CtiTreeCellRenderer ivjTreeCellRenderer =
		null;
	/**
	 * GraphDefinitionSelectionPanel constructor comment.
	 */
	public GraphDefinitionSelectionPanel() {
		super();
		initialize();
	}
	/**
	 * connEtoM1:  (GraphDefinitionSelectionPanel.initialize() --> GraphDefinitionTreeModel.update()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoM1() {
		try {
			// user code begin {1}
			// user code end
			getGraphDefinitionTreeModel().update();
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}
	/**
	 * connPtoP1SetTarget:  (GraphDefinitionTreeModel.this <--> GraphDefinitionJTree.model)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connPtoP1SetTarget() {
		/* Set the target from the source */
		try {
			getGraphDefinitionJTree().setModel(getGraphDefinitionTreeModel());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}
	/**
	 * connPtoP2SetTarget:  (TreeCellRenderer.this <--> GraphDefinitionJTree.cellRenderer)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connPtoP2SetTarget() {
		/* Set the target from the source */
		try {
			getGraphDefinitionJTree().setCellRenderer(getTreeCellRenderer());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}
	/**
	 * 
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private static void getBuilderData() {
		/*V1.1
		**start of data**
			D0CB838494G88G88G19FAC1ADGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DDA8DD0D4D716C6C38CA6C4B192850399927FF0228EC613E5F72CAC134A30CEE2CD1C0D29F52B4C2EB5434C18D947F2E72CDAE6630E0F1FA8C6B47893F5920CCC22B31A418604F29C6CA8BF8DC28206D1B49849486B6EC7779B7AAF5D8F4144EC761CFB6EFD7D3AF98D11F2EB176254FB775C3FF34E7D6EB9675EFE523E43692F66976C13247CD7A57E7747FCC9CA7B23A45D5AF50F4EAB7DAA27C8B27C
			7D96E8377416851965D0370D153FDDD1824FDDC0270157831481D4AA3DD0F1107363203C0B3FA36597C812A78E5BECE9BCE8602F676D6A212E8B6B47E11B8D95E53CFEA970304D8AF82E0D2336F9705C4E243B3B6EB4EF57B3A5D95A746C0E021DB817E1FCC15D63286FAD7EAC1726B2C394CA934ADA60E96D6CF71DF5783D96076C7379FD1A62F0DB1450005D22B8D54D9F34A89E452B78343A3A73C1B96036A9FD2ACF55D43F6F92D4B87025D376A99E500749FF3429180D8D72C3F9E8BC72E6B6214D2A603D95
			28F73C506187BB2DDC46647EE4E96D2CDF674752E159F812FD6D78308EF9FB5EAACC3A8B47BFF0220477AB07F2B79049F27D0410E555DDC296777B5836A4BE27688810B5DE706FBB0B7CAEA8FB006263050C6F7FDE48587D45ACA94FEEA9F8BD060CE971A45BB371E1996BAB078AFF43F0B32F72A0DBB6189768B4D08F50AD20B4203720EA2FE4373C874F863B566477FA7D3E06C02051638CF6781D0A875E6B6A200673AEAA8EFF50A9C90449771AAACC649134746EC8BCA211EE9FCB82C38BAE4E10B46DC8412B
			A63AADFDF1E741F2BE461A3B433A15CDC03B6D36215DB6839F7B6DGA27EE1466F1D906653DA4DE2D840F29C5465CE90F66E5EA5E4E9AF1AA415D6D795ECB311A5656923852D77108C3D7704E5A19B0F2BC69BA782BF83A89BE8B5D09E504184E16385161A51EC5C86FBA06813BD17866C81B928B58E289E27926436BEF4E2A4DB1B91757B43ED77A33BE4549857E84D12CAD33B2C4958D7D01BC076E8CF885B0566F6461C5B13B09C9B3B74B5DC4376CADC822D61B61D3F0E71D38CFCDADB9F63E3B9936A76CD4C
			A92276DB585E9A1A98BD4E0EF348CF1A98BD4E1433E21C8C28AB39B727085677F08D7A46G149301E683AD83DA831487D4F21FD8637F30D4FE4DFD54E9D8DF6A1BD9399F1E4A1096145BFCA1CD76B914ABF2D0156D9EA5A471B6FFDB093259A37ABD4576378366B82F781420CC0EB1A8FB95GD3085A7CC365EEEC93D4D8ED176AD5E082EFC09263BEDF399757C48EE91783CED9D342AD287E1FAA9193B764ABB0A28CG6FBD77213D9A184F2D0077567B042D5AEB11178E65AC5DAE972B764073C3G3762292B33
			294CFB4B411B822387EC90A4259550FEA3D0FDA25898A8BBD16C518D5D820B361D29D2450B96D3ACA2155CCF38BAF2FFB4960F32B95A016F81CA84DAG3462FE91DF67B7F5C70DA56498E92F204C62BD1B375DF85F70BEB4475343665846775BC8F3949A5EF770672BA66D487EED5D08617520D771241C22E313449A5CDFD5CE58EC14C30AC063C7C1G12628C2F88353D379AE30DF283222FCD89A8BEA73C04B89626D4EF8F63344F2FE3E8BA63235FEA82A005F47E4C6A5D4407B10C289775F3D83D2CE9C155BE
			20A91794CDD3FD2EF07F05CC16D004CB8CF1DDBF3C0A3A56030E5DC0EEDD57D3A7779A70566E77778F843AF0A7F15CFE416273ADE81FBCC92C7F8F198F4902B22EA92EBB71B7B0BE364B85AA1AAC785A7B51EB09FDEF87AF237B6E7B074DD1486BC66AEB060D58F33CFACE64B0053CAF71F7B37E9150379DC853751EFE36BB2A7D6D44162FA7D3A61B43A84F1D1C03B0F23CA6B6462BEA4CB1FE2A469C63561A11B1EC2BB143B055FDD803BA7A87FD06BD51D9037E52617779A851553BC814BFEF68C2BDB09D7ED8
			F53A946D127A3982795FE444F6B77349E9701EB9D9784F41F7057FBC727903D276756D2679D64A1CE38545C9044F3224307FA4197EDC0BF860B9F913FF4027917FE3666FB9BFD448F85F294518941536F785950505C2EAF3B95000639F0B552AC2F32B21F26B0993E74B231AFC00EDAA3C5868F8954749DE29C13EECB6DE64E12102F1E58F586B5871F2133143538F30C8F86C781563557A9CD6FFA9BC31CD136271DCC4508415A055EDF83B1E4D9FDDBB1A9E8EC35B63A7492F7D77A7E8EBAB2CC1A710BBC97835
			97EA31DE78B56E3C1B7C9E2EA254BD130498780445BA312EF1C9F4DE4C04A7553F5DEA2CAF19C2753B747E9FC454378E2B3F51EAB6FE4294B17E348B3146A7BDBE6AC6BB06144F8694C8F350B1FF285C64394A156EBDD1F5D7E44FC0B8877ACBB746C00F4127F3FCDE0D014F2BF80E6E57473FF6F52B04398C0DC97BA9D346B183C1558BA1900394BFB7BFF042F8EECE83BD700C1D8D4FD5C05477B35F2161D80FBE22F23B551CB55AE5BD9FAFEC576B9175358F046BD7BD007536F3620CBE74G4523A4F82683E5
			833D8DFC77D4EC3737DE34AB1FCAB16E74D4EA5FB955B8DECD23FE661FCA31CD0C37E2AA0D174B46736BE76BCA1DB70171BE824321C1494FF4149A6F861C215F1A7A9924E349A407B5B97AAC35649A0E5B83FCCF32407D0BD70D713CA19472BBD4164A72350F7F44680308B771135760592786C3F02EF2AAC382BF13BFC1D9B15765EC0E0117773FA38D4F5D1B59D504FEC0F360A623B37E949B4E0931A9AED97859AFDB0C778A4BDE5FDF30A3067ED9DC6F55867DEF41191DE479EA48B22AACCD03CDFAFC3822AA
			03C20F4E73E6674C683E4DB758AE09980074DA58AA74BA78204078AF0F63BEE077B5FF15EF48C31650A044373A3A8F983C295FE616D3E17B4E87455D467EEA5C1389D0CE874A52471B5BEA154C6FFF40674AF6C8D0AD4C3D8F3B7A515DB30DD3E6BF9DE39C87D35E629AD0AD831A8A83B5E9EA34E726B31F1765B9086D15A0DF71341CA272672B4E215FC067CDFBF37599635E2C07F6CE20843D7D66F3A89393DB927B61978D753C7D0AC513242CEDC7CD6FF05C732A8B5226F1BFB0AD0C079E7BDF8A82C0A42735
			DE4839EFBA64E453453C33985F985748B60F6DC59974A8264B3470ED23CC45725B26B2A53EAC9544CFA7D996CC8F4B346AE7638B578111CCBD0DC226CD5026A2C54874D346B7C6B6FE6FF352689F32573E9153BFB8D3E84E2114E87F7072270833E460E724887F705A355D867FF091B0AD7BDC9099441E4F3A06F2C18C6065E557F0DE9683A411F3CE33C55FD5ACCB89676AAB8D6F397C1D64293E0E3848835E3ED43081108D4819AAE4EB6A99755E27F9E804FB1F47DB23650ACF8D4B12E2F8DF405F29DF3EA53A
			DF36216D2A546167903A9B39176D59F529F4B7D228731399BF4F40A78C14D58B8C944FG1FBDC31C93C267C63BF7DAB9A3D2866AB7EE54FE1B227A71985EF5C0B275D1386DF9BCFF2E5A984FCB9E6231911E6D8F093B5B572DA256B99F92F79A7774E21CCC03F29650CAEC8BD41A866B8D5419A656FAEACF63E8EB5DA08E89DDFE7D35A9BA519736E82C9F1B8DBBC76D67CE0B6CC7FAEE16D14FB828CB83DA8A3492E893D0694C1C225A19C24F9F771C99955398E0C0C72656F085C9CEFB6358748B0C5A2FEB2619
			FED6872E2D876AEE693AB4FC0AF77F42F7F47AD51FA6893F3161D34C957DC155257A846F170C67708759010D6E939632DCA09146DCGC43C67DA1037924A6BF45E7A7348ABF9B827287CE1B17F1F2E47BE0756DFB7BF0736DCB7BF0736DF9F792E256BFA2CF3AA49773DD621076DE1A1737C8E2107DB6775DD90FAA46A3C039664E5C0F9194E7BD125683B76E16197122AB12E96FDC314E730B246D2AA3FD39DFD67B1D642B922F9B44719BBB6C721896F90637FD4FBC3B2B943DF103D0AA44E135FBC371D376954
			7C1DF84EA4DF66EA46B1CCFC59A5C790CEFB18F5C9A28FADBCA97CD579B7C45E756E9974495DD08EGA568365EE79DE95F241B580B5F79754646E8CA2FB9C69F6E45FD95728F849D4A30BB3F5E03FADD58B734E90A974DC3ED96317E1A9CF4A943F07C846BCFF5317ABF550B3937DDF52AC1FEBAA61B5F2C97B6EF567C9D557A18DB6D31F55CE9B757F12FBD360EEF5AC75771DDFBEC9D5F330F2EE30DBD56FEA6DDD39B0D78BA290F5D604098BE24171BD979260EBFFFAF1E41DD18FB2B0E10CD89B902EAG4E8F
			60D75391DF4F58D036250017BC20E340EBCD8FE30746D8BC08766F8B4ADE9069D2C0F1C8D50FE05F9F3608981C86FDB201D682ED44F19F916703EF31BBB10FECE739B469D258BA521D92493516359902F1320056BD92A9974D1F5DA166AFFE145FF5712775D1113FFEF9A176BDCF25E5AB136D26FFG824572C7F14C960B9833874A9AD09AD0A69F17667D4FCA5126F4D6CE5191A09B1093A8FE1618F7F0E8971F573851E96F961F9CE96F4E1E95AB1F1B4EFCC1562C68FC6E9146DFBEABBA1FBBFEC664F32B214E
			BADB7872BFD805AFCF1FAD647DD75BE9062F910EF016D8ABD6FDAAFD8E0EDB50FCC422EF9E1036F3C2DCBF8373F4C29B96536608B99735E03EFDC3363B543ED00FD3698B8CFCDEFD4A82A52ADF0E1F9670334E355744F9BCF14DD4E95F6C17E27E4E1FBB076CD7BCB7FC5EE8EDEC61B9E1B10B5B582F9E6A0766A26F54F963F99067C6DFE2C17C31FAF7C4BD6A70FC3E31FEC6C47D76E17DD7C45463FE28AC20FA526D3923C2374D4F25C91EA78E457C8EA31B6B144B1F25D5EFCA6EE3638A49DE2F34568EDF4328
			6333456474AC566FD0DB2C75AB1B87E734F934FE4B6709751B5C91EB7D4856BF6990364E1BA7EC3D6FC234ADEB8A0C36EA3990ED2BA95C167C77E10B780D23AA8372188C61E7FEE2C17F2747D90BBC285555B57A71DE351DB6B8497424C548141EA1E2ECAE9BF3B514B782954F97F7C0C33F936B32E06EA429BD2E52F4DD56F66DAFA81FCF6BE11B9F46DCD165D0A14DD9DEA5660C1BAF6CF021AA9AF317A3B095D795ED27639118FA3CAA9AF367A26C18DB95EDC7511FFC4061134287E44D97B9454CB3183F656A
			65F92C0CF708D42EBCF327F2ADFD2F4E8F7BBA1A23750E4FE14C6B48FFB7DA057FAE7AE6CE51C12053C05DC0C3C08798364B1B6360B9212F8F7E5D890E54243854547D897646620442262D890E26620402462D89F6DB39D45BA495BBEC0DA7ED0D5B4B6D4D0387BE33592A9C67EF06867755165B4F8F8E8E6E31D7B9DA8E8CFEF689921346BF6FFE23F12B5BE1BBFA79880CE3BF09FFDB93E406377D89B0D99F4EA77E2C0F213C171B45DA2600FC38B70FBCC6F623FD3BA1426F96CA613D9B876DD6BC9636B1617A
			70CE635D0D677B7F1E3F578457C86BF95F328574DCFF7ACDFE7E9AD250061D406F8552009201520116AD906721658E44DCC3206F22C249D3076C13DD7CCBB0E037F921E4CCC9B886F61E9F5BF7AE5F59A6766B523F1BA6E5CDF8A9BF561D6DEA2ECF9EFFE6D85EE4FC52ED2B8BF5BB369062BA109BA88EA899E841C2215B6BCE1491CF47CE95EF82E4071B5DD80BC3B3DE43065918B4912E4E347D7F41D520CD60AAFBA1612AFD1191D74F37474215935AE5AE0A5E3B7F56B1366F1A34E177DBDF2F5F78B1767B76
			ED7723BC6B49CA0C93AB97D11E152F737F1E71579878942BFE26472AF5D0577EADF187F55D0D784A04728A20DC204DC0E5196007B2853E3A1DD552A877B2DD7EC0BB9CF2BC066B817EFDCC556D6A571B09727E292EFC04B66D19345E947B1B8EA1F64CFE86251867360A5F90B2B2C54CCB37C647BC915B297E9F2D51B1AFBF223E687D6818B7B3227E547B51B1CF74273D67E7BE5D7897870CEC76A7C9F367BE7B6C460D1234E54BAB2F60B39D7EE64F46B678C76D37EC89375F427E245B7EA3ECACEE9658D88B76
			B938D8649C4AAD611B2B2EA6CAD529EBE27A304E45349E0145E15FCCFA16345443734BBCC97A2F4D6063B8ED79B549BF0C103FB9CCDF65111C64A32ADB04CD5396D32E153558F8E77E340ABEE2A570F2017200CA9E07B3911095289D28976856638257B31D4760C920BE4FCF25F5F5CDAE1BF2C3F5A878BB9EBF303360C0FD46A91807787433725D0A714E1FFF672460EF04C19EE85A1C021F24601EF0FABC6C3606F88FAA1847293E10628B81EEEF30663CAECDA90D2CE3BFD9132E2F7523ADD2C01725C02B0156
			83C9CB04EE95FD7CF7C713F8506CF4615D81FE8D280939DEF7453E27586F9A7D9B4243AE54596E57B43F9747977C23AE54D9738798135FC13890DFC1556556282978BE46456ED115BE46A67C5C5B969705597F3BFD3222CD6C13B230F35792111F7D3C7D4EE1FCCF0740F8629242F84692636FAF4B7027F27E7EDD437BC64B1D4ED507472A6D157F1BF390865C6E58B8743B4D6F4B865C667756DF38C77EFE6AAEF76C6F276EF59B3F1F22B8F3258E6FE81A947C1EDA64F9030A48734A9E1BAC159D7E67FC91AB22
			754B666B38FEC978DC96362DB7628E35FCE9CED16D52113F6923FEFF53BC363C633B375D0F7C4EE48F623395E46B813A851488B4FB2970BB7B55F2494C27322FA294E7276C01D560FB7B4316D2A97CA776A66D354FDA44DEDB86E3EF52477F3E0A6BB228BAB5373E0EAF2838AEEE859D0A602DE66D40039B5A3D24E27C8AB9E41FC775A91D321373FF2462DC761B1A926A04A3BA54917FE5157D06A0EBB215FF2EEEE3B8E3AA703E3FD0D187C024AF44FFA0D107948F557DAA2A4EF133C38E75D35D1E7E58B87FCD
			7F687E761DFE76ED8A78492E1B81AE6F6F7B596FCAFDFDA1C537C3C5FF294EEB8BF57AC3ACB9A28C24340F8DBBF3EF3B9F2DF7C5C76C753E58A1563B62091CA26793A2BFFD410BF8CA03F296509A20CDC045CF66941583558235BFA93071D4BF4673AB72DF07FF1D82CC3A00E1F1AFA82BBE0D6E9E62D9EE6806B1B0FFA35EC4460B835E949DBB53BD8CE3324F6951E3DB1AE78F474DC5A5G619E1610BE9F627533BD081F107AB9DF1F8C0F79B7E60BBC283BBFF471FCE3338F1C1592A2BB8F360CEDFD6E9EE33F
			6EB11E197AEE3B9F697DAF5E58FB60475E517740862FF94E3149BBBC67781557BC675862B5669C44AB725138C17D07B57EBD088FF3B53A23276B830C8DF467A77F4E703D4C47681E7837C4C3BB437CD66E22247F81D0CB878842FBA2913393GG44B7GGD0CB818294G94G88G88G19FAC1AD42FBA2913393GG44B7GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG6D93GGGG
		**end of data**/
	}
	/**
	 * Return the GraphDefinitionJTree property value.
	 * @return javax.swing.JTree
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JTree getGraphDefinitionJTree() {
		if (ivjGraphDefinitionJTree == null) {
			try {
				ivjGraphDefinitionJTree = new javax.swing.JTree();
				ivjGraphDefinitionJTree.setName("GraphDefinitionJTree");
				ivjGraphDefinitionJTree.setBounds(0, 0, 78, 72);
				// user code begin {1}				
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjGraphDefinitionJTree;
	}
	/**
	 * Return the GraphDefinitionTreeModel property value.
	 * @return com.cannontech.database.model.GraphDefinitionTreeModel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com
		.cannontech
		.database
		.model
		.GraphDefinitionTreeModel getGraphDefinitionTreeModel() {
		if (ivjGraphDefinitionTreeModel == null) {
			try {
				ivjGraphDefinitionTreeModel =
					new com
						.cannontech
						.database
						.model
						.GraphDefinitionTreeModel();
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjGraphDefinitionTreeModel;
	}
	/**
	 * Return the TreeCellRenderer property value.
	 * @return com.cannontech.common.gui.util.CtiTreeCellRenderer
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com
		.cannontech
		.common
		.gui
		.util
		.CtiTreeCellRenderer getTreeCellRenderer() {
		if (ivjTreeCellRenderer == null) {
			try {
				ivjTreeCellRenderer =
					new com.cannontech.common.gui.util.CtiTreeCellRenderer();
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjTreeCellRenderer;
	}
	/**
	 * Return the TreeScrollPane property value.
	 * @return javax.swing.JScrollPane
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JScrollPane getTreeScrollPane() {
		if (ivjTreeScrollPane == null) {
			try {
				ivjTreeScrollPane = new javax.swing.JScrollPane();
				ivjTreeScrollPane.setName("TreeScrollPane");
				getTreeScrollPane().setViewportView(getGraphDefinitionJTree());
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjTreeScrollPane;
	}
	/**
	 * Called whenever the part throws an exception.
	 * @param exception java.lang.Throwable
	 */
	private void handleException(java.lang.Throwable exception) {

		/* Uncomment the following lines to print uncaught exceptions to stdout */
		// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
		// exception.printStackTrace(System.out);
	}
	/**
	 * Initializes connections
	 * @exception java.lang.Exception The exception description.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initConnections() throws java.lang.Exception {
		// user code begin {1}
		// user code end
		connPtoP1SetTarget();
		connPtoP2SetTarget();
	}
	/**
	 * Initialize the class.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initialize() {
		try {
			// user code begin {1}
			// user code end
			setName("GraphDefinitionSelectionPanel");
			setLayout(new java.awt.BorderLayout());
			setSize(287, 170);
			add(getTreeScrollPane(), "Center");
			initConnections();
			connEtoM1();
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
		// user code begin {2}
		getGraphDefinitionJTree().addTreeWillExpandListener(this);
		// user code end
	}

	/**
	 * Invoked whenever a node in the tree is about to be collapsed.
	 */
	public void treeWillCollapse(javax.swing.event.TreeExpansionEvent event)
		throws javax.swing.tree.ExpandVetoException {
	}
	/**
	 * Invoked whenever a node in the tree is about to be expanded.
	 */
	public void treeWillExpand(javax.swing.event.TreeExpansionEvent event)
	throws javax.swing.tree.ExpandVetoException {
		getGraphDefinitionTreeModel().treePathWillExpand(event.getPath());
	}
	
	private TreePath findPAO(TreePath path, int gdefID) {
	DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();

	Object o = node.getUserObject();
	if( o instanceof LiteGraphDefinition && ((LiteGraphDefinition) o).getGraphDefinitionID() == gdefID) {
		getGraphDefinitionJTree().getSelectionModel().setSelectionPath( path );
		return path;
 	}
	else 
	if( node.isLeaf() ) {
		return null;
	}
	else {
		for( int i = 0; i < node.getChildCount(); i++ )
		{
			Object nextPathObjs[] = new Object[path.getPath().length +1];

			System.arraycopy( path.getPath(), 0, nextPathObjs, 0, path.getPath().length );

			nextPathObjs[path.getPath().length] = node.getChildAt(i);
			
			TreePath nextPath = new TreePath(nextPathObjs);
			
			if( (nextPath = findPAO(nextPath, gdefID)) != null)
				return nextPath;
		}

		return null;
	}			
}


/**
 * Creation date: (12/18/2001 4:36:53 PM)
 * @param path javax.swing.tree.TreePath
 * @param gdef com.cannontech.database.data.lite.LiteGraphDefinition
 */
public boolean selectGraphDefinition(LiteGraphDefinition gdef) {
	if(gdef == null) {
		return false;
	}
	
	TreePath rootPath = new TreePath( getGraphDefinitionTreeModel().getRoot() );
	TreePath gdefPath = findPAO(rootPath, gdef.getGraphDefinitionID());
	
	if( gdefPath != null ) {
		getGraphDefinitionJTree().expandPath(gdefPath);
		return selectGraphDefinition(gdefPath, gdef);
	}

	return false;
}
/**
 * Creation date: (12/18/2001 4:36:53 PM)
 * @param path javax.swing.tree.TreePath
 * @param gdef com.cannontech.database.data.lite.LiteGraphDefinition
 */
private boolean selectGraphDefinition(TreePath path, LiteGraphDefinition gdef) {
	DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();

	Object o = node.getUserObject();
	if( o instanceof LiteGraphDefinition && ((LiteGraphDefinition) o).getGraphDefinitionID() == gdef.getGraphDefinitionID()) {
		getGraphDefinitionJTree().getSelectionModel().setSelectionPath( path );
		getGraphDefinitionJTree().scrollPathToVisible(path);
		return true;
 	}
	else 
	if( node.isLeaf() ) {
			return false;
	}
	else {
		for( int i = 0; i < node.getChildCount(); i++ )
		{
			Object nextPathObjs[] = new Object[path.getPath().length +1];

			System.arraycopy( path.getPath(), 0, nextPathObjs, 0, path.getPath().length );

			nextPathObjs[path.getPath().length] = node.getChildAt(i);
			
			TreePath nextPath = new TreePath(nextPathObjs);
			
			if( selectGraphDefinition(nextPath,gdef) )
				return true;	
		}

		return false;
	}			
}

/**
 * Creation date: (12/18/2001 4:13:09 PM)
 * @return com.cannontech.database.data.lite.LiteGraphDefinition
 */
public LiteGraphDefinition getSelectedGraphDefinition() {
	javax.swing.tree.TreePath path = getGraphDefinitionJTree().getSelectionPath();
	
	if( path != null )	{
		javax.swing.tree.DefaultMutableTreeNode node = (javax.swing.tree.DefaultMutableTreeNode) path.getLastPathComponent();
		Object selected = node.getUserObject();

		if( selected instanceof LiteGraphDefinition )
			return (LiteGraphDefinition) node.getUserObject();
	}

		return null;	
}
	/**
	 * Returns the ivjGraphDefinitionJTree.
	 * @return javax.swing.JTree
	 */
	javax.swing.JTree getIvjGraphDefinitionJTree() {
		return ivjGraphDefinitionJTree;
	}

}

package com.cannontech.loadcontrol.gui.manualentry;

import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.List;

import javax.swing.DefaultCellEditor;

import com.cannontech.common.gui.util.ComboBoxTableRenderer;
import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.db.device.lm.IlmDefines;
import com.cannontech.loadcontrol.data.IGearProgram;
import com.cannontech.loadcontrol.data.LMProgramBase;
import com.cannontech.loadcontrol.messages.LMManualControlMsg;

/**
 * Insert the type's description here.
 * Creation date: (3/12/2001 9:57:47 AM)
 * @author: 
 */
public class DirectControlJPanel extends javax.swing.JPanel implements java.awt.event.ActionListener {
	private java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");
	//modes the panel is in
	public static final int MODE_START_STOP = 0;
	public static final int MODE_STOP = 1;
	//choices the user may choose
	public static final int CANCEL_CHOICE = 0;
	public static final int OK_CHOICE = 1;
	private int choice = CANCEL_CHOICE;
	private int mode = MODE_START_STOP;
	private javax.swing.JButton ivjJButtonCancel = null;
	private javax.swing.JButton ivjJButtonOk = null;
	private javax.swing.JLabel ivjJLabelStartTime = null;
	private javax.swing.JLabel ivjJLabelStopTime = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStartTime = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStopTime = null;
	private javax.swing.JCheckBox ivjJCheckBoxNeverStop = null;
	private javax.swing.JLabel ivjJLabelLabelStartHRMN = null;
	private javax.swing.JLabel ivjJLabelLabelStopHRMN = null;
	private javax.swing.JPanel ivjJPanelOkCancel = null;
	private javax.swing.JCheckBox ivjJCheckBoxStartStopNow = null;
	private javax.swing.JComboBox ivjJComboBoxGear = null;
	private javax.swing.JLabel ivjJLabelGear = null;
	private java.awt.FlowLayout ivjJPanelOkCancelFlowLayout = null;
	private com.cannontech.common.gui.panel.MultiSelectJPanel ivjJPanelMultiSelect = null;
	private javax.swing.JPanel ivjJPanelControls = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboStart = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboStop = null;

	private MultiSelectPrgModel multiSelectPrgModel = null;

	/**
	 * ManualChangeJPanel constructor comment.
	 */
	public DirectControlJPanel() {
		super();
		initialize();
	}
	
	
	/**
	 * Method to handle events for the ActionListener interface.
	 * @param e java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	public void actionPerformed(java.awt.event.ActionEvent e) {
		// user code begin {1}
		
		if( e.getSource() == getJComboBoxGear() ) 
			jComboBoxGear_ActionPerformed( e );
		
		// user code end
		if (e.getSource() == getJButtonCancel()) 
			connEtoC1(e);
		if (e.getSource() == getJButtonOk()) 
			connEtoC2(e);
		if (e.getSource() == getJCheckBoxNeverStop()) 
			connEtoC3(e);
		if (e.getSource() == getJCheckBoxStartStopNow()) 
			connEtoC4(e);
		// user code begin {2}
		// user code end
	}
	
	
	/**
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC1(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jButtonCancel_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}
	
	
	/**
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC2(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jButtonOK_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}
	
	
	/**
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC3(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jCheckBoxNeverStop_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}
	
	
	/**
	 * connEtoC4:  (JCheckBoxStartStopNow.action.actionPerformed(java.awt.event.ActionEvent) --> DirectControlJPanel.jCheckBoxStartStopNow_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC4(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jCheckBoxStartStopNow_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 3:40:34 PM)
	 *
	 * Method to override if desired 
	 */
	public void exit() 
	{
		
	}
	
	
	/**
	 * 
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private static void getBuilderData() {
	/*V1.1
	**start of data**
		D0CB838494G88G88GF3ECFFAEGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8BDCD5D53E3F259915A59695D3BA61234222222B0DB621D1B9650314144AE91ABBF407BB63ED1C394EDC6F8C7F7F35E9F3GC183C49EBE5272081820487BADA6A0AA47D0C991C969661133012307F3CE67EC64E8167737565A3F3577B96C4323F26E75634F3D57F7BDFE3F75DB3F757A2D350FC24636007898DD06A044448B721F0A98C108F3884261D7BE48C2EC135D10A0287EEC87DAAFE46D0B03
		E78E44B53CE3C8C8951E7AB09142B590DE7A26A1E1A33C278B53BF746D0297AFFC3AA1EE726907EA86667353ED48A7010697E6A641B3852896B093D0301D707FDD66A6997701F00A7CCEA8C6A788762FC91AF5551BD478CAB9DD83443581E5B8C81A188DDB6578190011B461700C7A1A25DD854FB5D43ADB2AAB65F46D638205157373F44904172AFC24F6874BBBC2FE6A0569D4913102BD2F01682C79D257279D361E7C8E2355EA33CAE2C7F73E45E6B4F5403B43E6496F6AB56777982D3DC60B8840156A6A8633
		C36C108E3268234DC62BE8D9C1E5AF2BCE2465026C903E66A4589355C4DF25705E84E4F2227C2FA557487279DD8A94A2A7EF73AAFF2813499D65D4648F7930F3351FC44A5F3DA1C94E178D61F6A0A60BE3834A32D4C2D96EAEA3E9D3FB8D89B9C0353D08FFD1CE70B6885B01FCFAD1467D3BD04636EFE688B9910DEB57F911B1201749B637D71131B039F375E6EAB33B3713F60F3B8CFC01EA004E830DG8AG5AC2ED75DF376D06E75D8550EBCF0F4DDAE73757DBCC0EE3B613E801776AEA08113113E2074DE192
		84E60F5555F99A72A04D3C6CEE0B04D85D4E88E8BFC1A71F94B60DB42C0D57285B745773F5E1F2991117153AED6DA3FA5B3E0F68CD00779839DC0667D37C3C8AE7EDB50D5A8289DF033848BE54F3DB8A4A5294B7C9C8AD7ADC1720A10B7F0B07F58DAEA6C33BCB110569B8EE8751318F60D300C200A200D682E5DCC19D9768CB865331816C5FE1B5DACE75DE309B9DD2FD2F59E2929D322E8BB78C24EBADE279BE9DF6BE26174092F59B3DBD2DD9D3AFEF8716698A2FB0FDB4DED17442F877F9655DFD253FED2470
		B6DCCD7B4435AB2C8DE3B91ECA71B1AA1C352DBF6DDBA4BC9E62042B0684167ED51A5EF45553C65E2278082B1EB672D5B95A48F808933EB1A430761D14CD46C59304C7G798385830583AD87922EE19BDF55978C319FB52B5A1765AD593E811E22CBF2988DD627E434F6082DC60759F841A2BA85B9CD4DF622578BEE796AE87F6EG9EC7C42B68B0CAE61B95CAB77608E0CCCE1666687675A40DC32431AD669E9198745885AC776476F4F8DA0CCE69345DE414C4A5850BBF3B1D6864323195CA0482603D799A5157
		67F44C5543FB4DB55455221D847303F090574B6B5B536079999837E8A1C3F8879143683802B63AEBDFAABCC3A1FD77370604446F8C89B33F437E7927B634430664A7043C57CFE85AA1A17BF5E6D3BE57BD6D3014169F8CF8B8508A205491B827BEDB5DA667A7BC49B371BBED5B543463EF3D27A575E1BC96F39EEBD4FDF328BC628708A3B64F743EFF97315DC228D79310E5846ABEB5CB4FEC325E6894518ACFB84000C4135292ACED728EB2470817E12EED906D225584AFCE5986B2F62CD16C335346ED67C30A13
		716AA0981013637A9D6B998EE5282D9D63F3E83CD1129C668B3D12F8CA14A43335CB49DFC8E5F13A8D05CE392E87F2C8DDC7C19D478385713ABE3BA3DDE5E7CDB65B25DEFB8B69C1323D5EC56765D0C83F1437FFD2B9D9E32D62618DB42C447F348C5BCE0BC83E610C2D5AE3740C81F9447E0072959ECB4AC99F40F1B3DE46D9DCA40D5BFA932CE701ACC0FEB7E17D4572B60DFCBFC41E7E32FDC7F9284BDF73A372E03691146D5D3627E5EB5B7633595A367DFC7640367BCA36166D32380559240E36BE2B2AAFAC
		49A663A32CF92DA26D10BC0B40564AFFEAA175B0DB4D52993329CB14CE192F0A30A63D0958F4B79D03C360BD7CA69CB37BF6601819FDF52A907A55EE1D567A4A7FE103AE67E6E63FB5B7ABE3A613A9E2A769E322C56C81C59D3475DAA5063FC547F799F746D22C70231F103CB9C76BFBA549E6BDC8A6AFCB1E1156A51FBD1AC5C7274D51A31AF2AE9AAF9B730DFDD2BEED0B7CBA9AFD083C676A776E7DD42F31424F3B28AE782BBA0F921B3C9739AF37B537D0362DF461EF756354F21E38F483E4BC7159F065AB62
		72256C1E4C64BB58ADF6DC2A37390EC38647A949E67FD1856DD77AF0A5AE16653D6370D4F7F9CFC9E070244463363E9BA2321A41F025A66BEFB6FFB8F209ED37034D5B01FCEE4679237593920F7307BCC99E34D9AC2CDB122EB5127639FD992AFE94F0B35B0BAF07A70B7FB74D78461198FF31C6AB3E1D477FC1B35EBE9265BC380B0C57CE716BDE91BA841960BE932F60DAEFD71AC7DC2B51522B2CA1CF6E7AG1E96555C4870C3B95A7D7D339CB29FDE62651F48D9AD1035A0AB130DCF41C6D2265DE16E012584
		196CE51F43439B54BE07D1A0BF71CF8442B3840865EDC9A3F336C6238BFE23C899999568130800BC4B0112C631F21AC631B10B25DB4A53C5C2B8FA1412EE53AD6AF4E3AAB1DDBB6052ADCABABF37F435D518AE8A70D52AF4DBC733F41651A45DF56EF7A86058FD947B8FD05416F85CCF9DCBD57BCC427FF4D5F3CCA694AC17BFE73467BE73515D245CA840D70EC6DB181723DE7354B91D368EB3DD664B6D6A4AD50F578C7BB6F7ADBCBB4D8EA76CB9CD228BEDE3E4AE11156C83E4D8EE5F47776C977A6FEB8E194C
		124D01CB4A03FD342335588E42D624914C6BA01F4EDA4DE29F64E73E110776213E92EF45796A5B43EAFFCC483A8A5D87DEF4D3FBAB534979DB955D4CCD6ADC4D4A5657E059813722AFE6A24716F2ACEBBFE229BEE8077F11CBEC157A2348B0624AF776411CDEDD2D76B12D5BC87291DFD1238F7AEF1EBECB7ACD900467G3D8D4476127BAB12E47D2D84AC6FB66C5BAB4B54FD5B84789820E0A0B626CE29A806677047CEEC2B0BE6224B9FB2E132B61914DEAB4B987664A421667AA61D167F49E7DD16EE4EED2CAD
		165F263409A5770A2E7DA9741345D422AEAAEF07F16CF654455EF2ADDD845E0EED525ED02954E55893AB637D8C679D82652E643C7D572BF9675DE1C8E881F25D013C97FCDDC7F87F5039D2C05F02398A659883BC665C01F20C5D20A547AAAE4742A38DEAB9FE4084A87B5E0A5563D0E8E43957F1A8F58CEB4F6CB11E63509DF9249F54825EB28647213F672ED70DC3A721679B2DDDB03B707577EEE25FB00F4861605D04AF1DC7845C87CC59B79CDFD5779874B94C5DCBF4F88D427EC041C0F30116F159AA768C6A
		FBBB649A40773633E6B8F2A55E09FB27C70615EFAB4F37EB7FF0729572FC999BBD77118DF7AA7B5336BB35772A9640C7F84479C1B85083E33E331F5171AE64CE66BBCB60780B940FD0614C6EE7D01C0417C3DC73DDA86B418A4FBACE3F4B1DDF38C718657B3CDF3E0FBD42ABBD7231FE346E9431950D711D0DAE821E137CF329671A05788212469A9274E3F17E58D30E73C065D834410F8B48FAE1BC04E7820583AD87CA7505319F285997EDF13466DC6AEE0B5EA6D2450742F411D0797DF41859AF1F278E6D3E6E
		79D83DCD345E241F7B78E2BBBE77BDE518B7288C4BFD355A715356AD5A6D08A3245C0E7FF5D62B9D634641FAF09C3663227524BEE4DEAB9C0775393D6A7B55473FDFBE4F7A780D5352694B9B5016024621AD7DF7A141D26F861B3B9B6D6637FBC89A9CDF1BEDE62BA460586A1BC75664B607394BECC56CDE0AF5589C5451407CDF4F5135D7A11459444B8D5F6B5DAF7266DEED3F482F77EA7BC5FE3BF7E01F5F9F76FA731BB079EAEAD03E73C08C1B45B109E31F6EC74C07E365F4EDB69E42419C13B691AC82424B
		B9969BCBB0619ED8475F0358556334BC88B7F06CFCB1415AA0EC671815667503F050BDE8AFA1F4FC8B05705BC02BB8BE1762E4AE5F644756B58C1FF59647E81207BCB15FD0477B010871F80373C05F610F69377B0816BBEF43BA5A56CE27682483D603D1B24AF13F17B2858DFF56F1E30FA8202F63EA459AB94DA149F6300877078DE509322CB5FE38463ECC4FF7A422C720A9FE284B42F24F79AE8462427D64B3DB79996DB738EE136E053EF62FFBBA59CFDD603DFF9494E8770F328252D71D36DEC707685987EA
		8AB671B8E5E4B7C8E28FD10F3C972779E12557A5766BC3CDB4BF0B73167FF40137FE46F47FE925DA77455CEE4C7D74D98ABAE9147552AEBF6D9EFA9AF5EFFF7D7A839684942A0AE33C7F62463B0437FB49B9526EA4AE62DEECF7973D6F10F41FA1A19B2866BEEC770875C44E167B14323B617D1A9C76151FD36E9B3C5DE7C21AB00FF4CC4E972A54F216F29DAD58602923C8483FD2AEA371FE765CFA7F603C8BA1CD437DDAB657D1C856D0AE9E6E2261AB824E01E2DD8A3701C3D613BC99B05F43E2BA46AF018CF7
		6890BBC547507D007D0AE391947B968A3CC5C06CB49DD74782164975F0ECA319C7AC46AB36DE6091F4BFDD87ECD44F2DED000DG72136BA27B86B711BDFC0F51E56E696D218E6BBCFF3A975CCCF82C043402BF6EF9BF0CA576EEF7081D2243A11A18FBDBCEDFC247DCBB3CDF6369479DA7B2DD3075DACDCECC97C84770C0F81F6E0FFB27277B088C1D8EE38F187FA93B58A1DC7B89C95BD70C72AF03342B003682DE83547E9364F1CBAC155FEC7510FF8215E78E248B67E93BF524AC66A910FDD8CE54435BB16BF9
		5C31DE0BE4BEA592F7A257931303451F3844B66C38962DA8D76BF955CF589A26768158F7BD00FDE1CB19673A437200E2D3A3605D6F81F79BE36B75F769189A78GDB2F47F37CBFA99E224259BA7EDA996EDF43A12E74C11C93CF52B521BF0403B8F69F45C2A19C4E311D95B897C7F1ECEEB24122A11CB19E31EDA9B86F66F06CC08A4E3BCD9C3B0373BD4F31C51C2F4431AFB9DF9F0E3D49790E67585E94DC9784F36C1DB214E58E47E24AD116E59C1BCD4BDB8561548958AE156730DD36CEE07AAF1C2034C3833C
		37CD50EA17CAFA2748B20169FFB3470FD1BCD00533F6790E0E11A49C85F141BFC5197ECA5736579E0276FF88313B53D0E7019CFBA38DF59642314EF454D9B847DCD52833A80E05D721FE22B936E2BD6A27B1G31BFEEC03E6D816E6BB542574E3187B7A25FEB9C1BEDC13E3E9CBB5D03FC27F06C518C643BB2G7BFF51F932A763FB856299292EBE62B01B6A0DDDCDF4C4E3F34F6D14AF51EB62C41CFBE6EEA4FA2D05F09B10FDA27AAADD1F202FB26811C9C25308E64D3BE311AD95BA1F092CFD03A6AA7E130664
		4E554BA6123BFEA195829F8322F5FAF8DA45BEBDF760B418FBC4AB39EC11D3D2D41627AFAEAF4CE57C837A547E1B4A35B5DE7DB7F913985FDA7959B2F50740F8FFD62570369D9F8AEF16AF34DA49B72168934FFC5C6913D31827073FA50570CFF1C9E9AE4E71930AD14FAE10A9F8924196942B7DDF246C57A0C1BEBCD97CFBEE71E4AC0562D47185A56AF8222311F16A7863316A78F8D5FE264F85BB31BDD7AD8896AC4FFC6A75AEE0342C472D1359F3D95F8E41759636676E9AC5B7FEE70722D3E623FF0BAD9734
		6FC1F6D087813D8259AB19E153271ABE64A392D92F36F2DCBB35CCC67B5DD3CA6FCAC1F88AD048E46CA745E538CF0A6058688A5E0FB976949FF39B276018360266ED073044317F2298B9EFA1E7B38C3BF9407B8C1EC44A9BCABAC9CE47F8BCB8AC9EC33DC3912FCA1FAE4451F12147AAC2BB18BB587C7F8D55752DC03ED3F07EBF36111C11C93091E0E91E27E982A0BE8808E147290EC3A19C46733DEEA136461C7C449DE4341A84DC4F7CB9994B0886CAFA180E19A91B86101D656B266D5682694FBF0C3C27D3F9
		9EA2764031E80A0D07F0A047189D4C04709C0E89A918EE8547DA59DC79884875884A96DDB638EC3BA94FCA4853708857C1B2D94B7540DA1678AED8DFBAC6DCE432CF6044B91C176D0F20ED9E236348A8887BF32CA58EEDB804E3313D84CBFA94768F0F22EDFE3A015C872804F0BB108B489FE8A650D220E8200CC0D85FGB583F5830D8A443C27E8DEF29698GD8A8D0E4A0BBC39426427E91289668BC508820G20502918F7D4E62806DE881F94D99EEF3AEB8E540E6B16F12C03E77CA8B99E6BC67B1A2A0EC36D
		BBEA126FABE956855732837535CCAF78C6D579DAF7FFB64BCF32A6CFD67555F5821B933ECFDD187DA52711B2A51B4D52E23637C09716EDF5A7DD97C5C27BAD1F0AF67F9C45A6GEDFD8C3177A9168761CA0E0D256B27E68837F3ECE2952673818AFD0CE03F2FEA98C0BE7423474B3286C09EC2BB6438690FB15B0A617DEBB315A571F1E85F47116F96BA06BD8AD48B986BDFEB8F88BC4F9C9A5F8CF16DBC4F1F681A4B8742FE0F232C161E41E4C5F935E48D02F2363B499ACE57EBB3811F73B87611319B07FBD719
		2D0D0FECA2F35D0A47595AB806634D94DF2542591AF976C63C371F98E4C83084215F750F874898968E6165C0F1CF403E902886286D897417AEAFA4E340007E7B961B3DC93CACDAD4AED03656D8F4CE3DF6CBFD60939D4A65D9AF4B93F25FFE42736C2D350E68AD887039DC26184ABD70ECB5DE6CFFB28FE03343E6979D529506525BA0F2BF1ED47C7D6E063F1000EB2669BFFFCC18B97A6FB15E4E6B174972A7BEA9FF87F2F9876F4F6B0550FA226FCA08EB81F2817982CD818AF9926B96CF4F8449298808DFA7C9
		460EEEFA138115CDAE97A8B05964333AC965D83770A77B0FF5D100C583A5BD2544B11BF9082E1B74CFF95AD2A045731E72342522D23425CA089B8F44FCA46778FCA8849B92B68155823584B3DFB06BD393AA866AD3F89F927B3F85720E88E67D086E4B613D84A25EFB7F7D77D91FDACA6765G400302F1FEE5ED46EF3C890A5FA1D941516DA0475DDD2E03E7F9854E47DF90B165B8BDDDA3E4319CD9AC7E09C3CA7C2CE4F26E61E56DDBD182CB5F32DCCC7BE10A3AACE6DBF33FD42F4775FB56E82E47233FAC55AD
		8D163FCB8AD67A4818A3DD72FABC7308A2D3EF5950E5DAC06BDED105F52FECD44A7922022C7332CEDC126BFD4E2044058D235E39A96E65FCF7D4A9670DA1494A72CD7CCC49B7EDC87C191D38681A2A70E9985B1EC6BBB195777773FD437DE45D100E7A79606977B43B2340EC78D25CE0B62C26A0489B7AB41B97C8B8825E41FC5FD77C0D9F76EA7B8D0B69DAAE9252AFFFDA31ED12CF7376214A4E499A61E8137102E8218948478DBC0E50D1B26B9FB60B96D37F788C1ED7A92071643163981F26664F6F08A83C53
		BC4A3759E9716E3EBF39E84F38F4CF5EB6BBE16D5EFFE1963AE0835EC7C423C3D56735BCAF0B104FDCAE13BC8DC6C924591828F25C0BF9A96EF1649A1FFC5F51F0CE3D075E74CF2C7DEB7E896F301CE9D147B74B71FEBCFEC701D67EC09E9FD52915BF0447EFCC534A9F4E63FDB3346223947E696A78E8B9DEBF8D63CF56E865AF65718B5D6EF3B6CEE371BEBC7E76942D787153F03D15F8CC6927235332C95FBFECF3F408CE3D54AD6A1D9D5D222957A26AA51B5E51EB55F75A9C441032D87A45E9F4BC2A44BEFF
		7838D25679F4B277E4D13B5313561447937389A5CDCF55G63C2E5850C8B45FCDC1ADF65D95EB6591E689ECC7E43F80CE9A66FEC4CFEA789476C2D0FCF969A5E7CFB8C2E7BBC470360E9EC2C9626ABE3F6G9F33371FD464FE25F268F297EFA4BA2AACC1599ACEA965CC338CD4CE11DC8E4B57552264BB51C34621AC5A8F74B020E449E9EEBF2D686009D6A5FD5E392170E1EB13E3E4D8155FDBD56FF37A5D5F79B1097178758D654156ECFFBD607D4C743D835AE72631355AF78A56548E7C2D457ADA6F5FDAEC2A
		D5FFEB41561CE74F88BCEFE06DCE414B3A99D616C7219DCFDC38A8F6C8AD46AE1E679CBDFB63723065349CF7210E0C8364BB8D3351E23ECA2F611E020456AE463B2B0D44D7026D37G390046G85CC47356E6F6A48076764AB417E6B5CC326AEF2DECC3E8C14105F3CFA6FFA8E2F9F7CFB42DF5613F962028D1600BD24FC44FFD3CFEC857ABF859996D5CF5A47E16E6A16D8D299FF371E0C8D963113426A3399623389190E3E180F7839CEB8475E233EC37DB330F7FE86316B496833E9FA8677058F17AAFD64C955
		FBC5690D6FAF4DB714875BC30CAC43BD44F928337FB3F8FED1D26CF6E70D1DDF9C36587A1A64E51A6C7FDD406FCC04BF037E5FA574DB56441F41BC87D48954FFACDFF1C08BE3E35BCD5F1290FB1F721DA070B5F0994963E51CABAA07012E84961A4C5E3F3BCE8637E660ED8172858A848A810A78995A7C1F8F65F86B03G320AD23BF7984DD60949D39C2348D3DF2C77AECFF1A57135179467B2BDCFAEC6BDAFA3FA190177407E404FA55AE6207EB61710343E908E848A1DB1DC7D99F50A7EC645AA721E4B9C0A3C
		721D74CEAFF752694A0E49BE629C5E9FDBBA836D66C0DE25B044B385E5F1CA961F07480FAC30F26FEA413BF1B5B3D1CFE78B10D7G4736D4216D45BD0B58F16A07A273E78D47DE49C0CCFA96656C32F83B4BA72FEAE57BBE1B0EBC02F8F93755E0F9D13C3C11C70B06DAEF3E50A5DC309F4573EF85367E9C793CC047ADD2FE4B4F51CF6420FB1EB1908E848A830A820A86CAFD4E10108DD4895484E4823A86648BB485E8A650DC203701D6BC07FDE0D5F36EGFDC0BE30D4BA0100E32F2D4D7B78FF39ED70717FFA
		9B7DB684466D16ABF6796E5028B6FA17303353A972F9663636D40E991C4DB627194CEC6A33053890F88F41BDE1E94AC0FBC274E7A055C03E6690E5CFE88AE1BE1627E0DF487ACCC63976DD0CBC4A5B8E692F05206FB2104E9F01901E9E027347ED7D6EC88CED6C3F7FFB668BF74B9799626EFFDA896144D9DAE77FC768B7A3DBE77573E3D2BCE716276F691765B81E15C21C7FAC3427DB2FFB370B3B2E8FEE9777DF57DE97CC385EFFDDB0693A763AA0703AFADD4074B2F5587EC6793C61FB66DBB16CFCCC5F19F1
		54EF5C2F9DBE26F862EC4FF658D6026D1081F12E59E8F7371C53DABB3CBD1B357D0A595E4FE0621EF70F5B8461BC20DA954EF85C536249238552F4FB643F763CF7DE3EF25C94F84E145F431ED71F35FED520D50FC8B94D4A814ACE8C7530F3889782B504FA56C35F6F7EF49B24314869C6047667A11F492529737949698265E788BC4301227A718B4BD0670B166313DE10772570AC85EAFC41B35FD7691EF236C39A3B1CEE548B5E643C4B6DDB90FFB9DD107C8C05E7845032FE7C568E788D49AA2F7CDECE99A8DF
		6A0BB0CF3D28F577F0F41C7731634E3841470E7B6234470E71F17D470E09F15AE34723F16A31C37EFEA80E4C9BDDB0973671F4CFF36C8B0E7D0C16C930B3E613544D7190AA97419BC54290719729DCFD94EB436F77D55897B29696C766C528F2374D01F9DF0BA3FE5CCE3345A27F4E89CDE33642B4497571961551ECB72A647E8D47085CEC0DC82FB44AEB4434943DB0789AF1F86B512FC915E4DEAB9395DED272D0F831FC9B57AA79D2CA07120F6D69FECF77A715E0EF4DAF62BE2F084E5DA688CB9C3BC2B19F88
		7B3F08E368B1FACFCA7615285EFF536F2E720FC90CC774BF004716B825CE592A773BE3EFBC6F17EFA88F79DE9E5D1F84C1FB0670F62EE967778BB9665BC730A8882F64D87CC5FA1E7D12A1E16BCB081D380877128AB9B6F9B57A969AB8768C5D3F78C1B808E32BCE93AC9C42119C9B5BCA6FA3C3B8F58EE2EFD1AC9B42B59C4BBE0332B4F34CFC86791AB876F2BE4126C3B81CE3B795208E22B8363E90F5904D31E72BD087C93FC0CC27C33EFA0E9D51218ECAB95671854A5248310AAA5401BF47DC552803900EA5
		6C633E990EDDCCC3D974AFF319DB319E259C1B580A75E86418E5AF4A574E31131C071DE33F4DC09E219C3336A30F880E3D4C6DE5994726FE03BCD6F16C311348A3759544AE533D63F988CB9C8B21FC7DA19C44B15D862E830EBDDC43F5B097319971DC879CBB3C1A6B00E31D27398EB836BF0F6B00E35BEB908B65582F392FACF59EE23F22E368F988CB73707C6B6FE5E42EB3DA4CDDD662AB9470FCEFC3B96EE3FDF85AC67A3BC6173B0CF616663F4BF17F6C4F537852B45DBC4DA3BCCDA0CFB37B1C7BDD37885A
		3FE7C27C1CF9388793E9FBC5C2F8B94F77E89F1DABE1BF4E524C227DFD53FCD8074C47B4DBAF12F1C934128505896F7FDFC45FCC4BFCAC5FC531EE88CB73F14F797355035DCF4173F42D7BA9817315F779BC3705543B9B16G96328C909D7219E8D48B1E0986C11EB97365F56382F69F0C65CDEFF557D1AE9BCFA0CD6182CC73C8AB7123F4989D22049BEA5EFE4F37225E9BF87ABF3712BD06D314FF0B64105544522EB903E9DB9620FE0E1DC11D199620FEC61C994E1E5C35C0518F7DE69D42CF3969675779A9EA
		F96473C2467F2F795C3638CC0F51B1B0904253B9D6CD4740B088AF65583F50B1ABAE8C5E43905B23437A54F24CCE3196881F8F43BADE7DE220BAA6F85451538646C0B9E46DCB6ED33036BEDF05ED6D9F2634F5F0983B6FA75F6B226369DC40A2389C9F6F9BCC57EBD4F2AC8BF357752AB0C5570C47BD6CDE572B06040CD7396E280DB4C03819E373A9568DE109E3775231B8G42C12F22FC668165435FC47456D716C2B9BB5D64CB4A2463A460ABB85F7B5B313D758B917BF70AD5C23801E30B69B8EE07703505A8
		5F8BA787EBC7357EBC658BDC2834A33355BB534962DA24DEB53C5BB0A59D5BF6BA248FDB485AB6E3913B3F4972AD21730403EC029C220365FBB7837365C15A06C572B7E7F2BEA67F668D035D09C8D659E360A277768F01707DEE7ADDC867083900C7ACC23DC552F9A8AE9C5E43913351F9A89B42059C9BCB6721F688F70723FCADF90335FF72G7A7503F2489E63EF20DFD6DEE54DE0767E015A1E425D6BBB9D42B639ECD65E4AC17D076AFBD1219E65C5284AE36D7817327E734A1AF29CD3A243313D7716133072
		FBDC3DB4DC464333F8186D072AC935643832F622B3793C1878522B33F83AAF1314F437748DF0CEDCDE1527AF2A626751B1E9CA3E7FE74E724CF798A6531CAC1359E831F5E551AFAE0ACA791978510BC4971DC60BD364F2E427AB65AD0E9D3A9CC74831256C6BCABA0D3F353A125858EB7CF7CA3EA69F15F87A72736D96E3E77E8523535CD1DDDDCF9E643C6134A11B3EB72AE6D7C1E067AE86DA3E894A3D8664779A5E2138182948FEFBABE94F2C22726A6232AC3CB7556A5ED67AB36EE1539935BE3C6F136F5C20
		70C9AEF0EF6F600DCA5C8705E48C4A4AE9EC2C6E6949D55A5A39D9C97364C0F7AF4A0AC04765DC470B36A8797E9AB31436D66EBF546B7A3775DF36AA6535FDB1F4B9B2BFD65A5A278A5BBA885AA16AB5BC9B7B854537AE06B5B0D053E2EC234AED8ACF5DBE5AC64505340D3C6B7B1CDE60B24F48D27247378E555ED95E37F6A8F99F24EB25ACF203C56E0AAC4DFB59CA9A635E016C3F524D7E751FA879DE9868FE1EC73E033B143A9564ABE5DCE89FDE7B0636EB5B5A4982254C1FFEB374B66EADD472BDF4F26879
		7C0B945B88CBC75BB0C17B0FDF0C63C043C77B3C0E83BD22E4A45FB111879E3E31332E6C530613A27BA8DE9E8756E4505F1301F2178345AD415F55CA4BC43EDB81EBD902FCE7525FD599FC7CC13EA765D9DD4D99472093144798A8FB8AD048926D33DF2613670A15B6F66DD1747AF87C706C7741BCA5EF5DEA5AF748553DEA3CF7B4FB2F92FF6E74GEDD6D26EE6036F286C2EB8EF687962280DF82F772E2201630F96ABFC75656A7109791E52CE8FF6B69331C46BF7D6740366737C5D95F6F6B30B4EABAB16F81E
		693CCC71D5CBBC4FF4CE1C665F88C49892AC91680F3C2B5FB94550649EBFE8BEED392B686F5607C7F84ADDCF7137A3BC65DED0456FB8C0DC536B7CB7287B1DDB8CCD6E48C173E94B7DAD6D3F412FFB4ABD1A62A12FFB4A3DAE83651E8BF1F9EF205C1BB23F1F5C1F8C1ACFDB6E17E85F77FD43D36EB00A0FFF43D36E5319A8F7A044A53DE9C8E03F01921ACE5603E62B45EC958F32DFE767323DC46F904A67D02A775327EF3C4F577A8F60F120DA29D3236A7D352A9B4F7B5DFFG0F1199CA1D46285EB3B3EEBC6F
		7CFFG0FF919CA1D962B5E4FE55EF85E528D65417EEF1E5BAA3E0485D5509F05F827C3C86BBF97565D754BB7033EEA485089BA03303A1B1E839A0478BEF2206832C3EF0F835A677CDA20776264103AA47EA57CCB419763BF1CFFD15289F17DCAB288B1AE20AB24C461DDA8032EG481FFEA52F63A59B6861E26465126A585FCE0EE5453243D60390C7CECC21F48763928B4BDFDA36CE25G1DA42C61F71AA5E1B57B76869952FBFB867710A468CEDC9AA801E772A15CED1704354AA5F31E1F6C3C4E5050EAD99131
		7854C803214F55B56239E33C667E1C275149C4FFC00127A17B0809BC348C22BEF213A9C6FE46EB24711EA3FE309C1270014AF7406348626A90D8C0325BAA7297934BFE97764F2D4ED8E135C158CC1C6A27C4873DF3AC1A486FF0497FD147E1E10D1D7CB69039B2856661240FF827F445A2B689991DA7490FC4BBA551D40737191D1210C9FFC434005C12ABE8B4BA3BA562B45957A444D949FFA9A22431E88BD8F7813B5A3C0F5AD8CC5DF9AAEF8A35DF0710CE65A5256473D2521FDB37F37B51281931026E303016
		7CB7CF070D9D3078B788EB24EE07686C36D9CCAE7B01DADAD0E29F7A10E32138AD3C7A243279440940053E641AB0A6F9D972E1E8CA17C3A820A9096FBD1F27B09D6CB6BA001568B0C8643FC8017D860F3B69E36913D70FECEC5789B1F2A5096ABFF15921F3F49AFB4C16AB7042566C34D1F60339C98E2355C9FEF395A453FBC806D11CC17EBD738A6F1D7A7F4FD286CAD6C95846D489D98B3AC4DBCFC1DDE7A72C95F88120D7A87EA3DEBCC9136F11A64DB5AE73686B6FDFGBBE890E2FB8A8B693FC5745FE272EF
		91C50AA8D2D48C4ADDA18C7847B35E05F5264643C7A2527C7907218525377EB8EF522FEAD6AC075A9D9662694F39C2A324AA290E7776DC909D23036E7D68833FC87213D4AEBBB19597A9B75F65E16758EB54EEFA9831622927472D5F46497D8AE29364FDB1AF0BDCD6AC2121ECEA194C20288F0E22B97DCD0C40F93C21C92800A6AD227F168EDBEDA4D7B94DDBC9585370C117060424BE71F21D08D3BD9EEACBFDA61A3595D435BACFCBCA795F2A55F9B9FC4C85033962E9F1EB50860D90D6891BB7667FDEC31D51
		EAA87710E733453A19AEC137F3747FD4F39921396229E3412DED32B5C224B6F84EC20CEFF5BF13A4F55439551C2382FE9B16FBDD7D4DFB74AD9FF97D3DA21FF758BEEE7CBB1E5F3CEF26679FCB81DF798E5EF1B56FA38E91EF5F6E1C6AB1DAAC1251F2294EEAA25F7154DF11C4651B210FEBC879CECCA3C732381DB5C46E0B2ABC7F83D0CB8788DC71C26D91A5GGACF2GGD0CB818294G94G88G88GF3ECFFAEDC71C26D91A5GGACF2GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2
		A0E4E1F4E1D0CB8586GGGG81G81GBAGGGCBA5GGGG
	**end of data**/
	}
	
	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 3:43:40 PM)
	 * @return int
	 */
	public int getChoice() {
		return choice;
	}
	
	
	/**
	 * Return the DateComboStart property value.
	 * @return com.cannontech.common.gui.util.DateComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.DateComboBox getDateComboStart() {
		if (ivjDateComboStart == null) {
			try {
				ivjDateComboStart = new com.cannontech.common.gui.util.DateComboBox();
				ivjDateComboStart.setName("DateComboStart");
				ivjDateComboStart.setEnabled(false);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjDateComboStart;
	}
	
	
	/**
	 * Return the DateComboStop property value.
	 * @return com.cannontech.common.gui.util.DateComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.DateComboBox getDateComboStop() {
		if (ivjDateComboStop == null) {
			try {
				ivjDateComboStop = new com.cannontech.common.gui.util.DateComboBox();
				ivjDateComboStop.setName("DateComboStop");
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjDateComboStop;
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (7/10/2001 10:48:08 AM)
	 * @return java.text.SimpleDateFormat
	 */
	public java.text.SimpleDateFormat getDateFormatter() {
		return dateFormatter;
	}
	
	
	/**
	 * Return the DirectControlJPanelFlowLayout property value.
	 * @return java.awt.FlowLayout
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private java.awt.FlowLayout getDirectControlJPanelFlowLayout() {
		java.awt.FlowLayout ivjDirectControlJPanelFlowLayout = null;
		try {
			/* Create part */
			ivjDirectControlJPanelFlowLayout = new java.awt.FlowLayout();
			ivjDirectControlJPanelFlowLayout.setAlignment(java.awt.FlowLayout.LEFT);
			ivjDirectControlJPanelFlowLayout.setHgap(1);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		};
		return ivjDirectControlJPanelFlowLayout;
	}
	
	
	/**
	 * Return the JButtonCancel property value.
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButtonCancel() {
		if (ivjJButtonCancel == null) {
			try {
				ivjJButtonCancel = new javax.swing.JButton();
				ivjJButtonCancel.setName("JButtonCancel");
				ivjJButtonCancel.setMnemonic(67);
				ivjJButtonCancel.setText("Cancel");
				ivjJButtonCancel.setMaximumSize(new java.awt.Dimension(73, 25));
				ivjJButtonCancel.setActionCommand("Cancel");
				ivjJButtonCancel.setMinimumSize(new java.awt.Dimension(73, 25));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButtonCancel;
	}
	
	
	/**
	 * Return the JButtonOk property value.
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButtonOk() {
		if (ivjJButtonOk == null) {
			try {
				ivjJButtonOk = new javax.swing.JButton();
				ivjJButtonOk.setName("JButtonOk");
				ivjJButtonOk.setMnemonic(79);
				ivjJButtonOk.setText("Ok");
				ivjJButtonOk.setMaximumSize(new java.awt.Dimension(73, 25));
				ivjJButtonOk.setActionCommand("Ok");
				ivjJButtonOk.setPreferredSize(new java.awt.Dimension(73, 25));
				ivjJButtonOk.setMinimumSize(new java.awt.Dimension(73, 25));
				ivjJButtonOk.setMargin(new java.awt.Insets(2, 14, 2, 14));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButtonOk;
	}
	
	/**
	 * Return the JCheckBoxNeverStop property value.
	 * @return javax.swing.JCheckBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JCheckBox getJCheckBoxNeverStop() {
		if (ivjJCheckBoxNeverStop == null) {
			try {
				ivjJCheckBoxNeverStop = new javax.swing.JCheckBox();
				ivjJCheckBoxNeverStop.setName("JCheckBoxNeverStop");
				ivjJCheckBoxNeverStop.setToolTipText("Forces the schedule to run forever");
				ivjJCheckBoxNeverStop.setMnemonic(78);
				ivjJCheckBoxNeverStop.setText("Never Stop");
				ivjJCheckBoxNeverStop.setMaximumSize(new java.awt.Dimension(87, 22));
				ivjJCheckBoxNeverStop.setActionCommand("Never Stop");
				ivjJCheckBoxNeverStop.setMinimumSize(new java.awt.Dimension(87, 22));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJCheckBoxNeverStop;
	}
	
	
	/**
	 * Return the JCheckBoxStartStopNow property value.
	 * @return javax.swing.JCheckBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JCheckBox getJCheckBoxStartStopNow() {
		if (ivjJCheckBoxStartStopNow == null) {
			try {
				ivjJCheckBoxStartStopNow = new javax.swing.JCheckBox();
				ivjJCheckBoxStartStopNow.setName("JCheckBoxStartStopNow");
				ivjJCheckBoxStartStopNow.setMnemonic(83);
				ivjJCheckBoxStartStopNow.setText("Start Now");
				ivjJCheckBoxStartStopNow.setMaximumSize(new java.awt.Dimension(81, 22));
				ivjJCheckBoxStartStopNow.setActionCommand("Start Now");
				ivjJCheckBoxStartStopNow.setMinimumSize(new java.awt.Dimension(81, 22));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJCheckBoxStartStopNow;
	}
	
	
	/**
	 * Return the JComboBoxGear property value.
	 * @return javax.swing.JComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JComboBox getJComboBoxGear() {
		if (ivjJComboBoxGear == null) {
			try {
				ivjJComboBoxGear = new javax.swing.JComboBox();
				ivjJComboBoxGear.setName("JComboBoxGear");
				ivjJComboBoxGear.setEditor(new javax.swing.plaf.metal.MetalComboBoxEditor.UIResource());
				ivjJComboBoxGear.setRenderer(new javax.swing.plaf.basic.BasicComboBoxRenderer.UIResource());
				// user code begin {1}
				
				ivjJComboBoxGear.setToolTipText( "The gear or gear number the program(s) should begin control with");
				
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJComboBoxGear;
	}
	
	
	/**
	 * Return the JLabelGear property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelGear() {
		if (ivjJLabelGear == null) {
			try {
				ivjJLabelGear = new javax.swing.JLabel();
				ivjJLabelGear.setName("JLabelGear");
				ivjJLabelGear.setFont(new java.awt.Font("dialog", 0, 14));
				ivjJLabelGear.setText("Gear:");
				ivjJLabelGear.setMaximumSize(new java.awt.Dimension(36, 19));
				ivjJLabelGear.setMinimumSize(new java.awt.Dimension(36, 19));
				// user code begin {1}
	
				ivjJLabelGear.setToolTipText( "The gear or gear number the program(s) should begin control with");
	
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelGear;
	}
	
	
	/**
	 * Return the JLabelLabel property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelLabelStartHRMN() {
		if (ivjJLabelLabelStartHRMN == null) {
			try {
				ivjJLabelLabelStartHRMN = new javax.swing.JLabel();
				ivjJLabelLabelStartHRMN.setName("JLabelLabelStartHRMN");
				ivjJLabelLabelStartHRMN.setText("(HH:mm)");
				ivjJLabelLabelStartHRMN.setMaximumSize(new java.awt.Dimension(51, 16));
				ivjJLabelLabelStartHRMN.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJLabelLabelStartHRMN.setEnabled(false);
				ivjJLabelLabelStartHRMN.setMinimumSize(new java.awt.Dimension(51, 16));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelLabelStartHRMN;
	}
	
	
	/**
	 * Return the JLabelLabel1 property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelLabelStopHRMN() {
		if (ivjJLabelLabelStopHRMN == null) {
			try {
				ivjJLabelLabelStopHRMN = new javax.swing.JLabel();
				ivjJLabelLabelStopHRMN.setName("JLabelLabelStopHRMN");
				ivjJLabelLabelStopHRMN.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJLabelLabelStopHRMN.setText("(HH:mm)");
				ivjJLabelLabelStopHRMN.setMaximumSize(new java.awt.Dimension(51, 16));
				ivjJLabelLabelStopHRMN.setMinimumSize(new java.awt.Dimension(51, 16));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelLabelStopHRMN;
	}
	
	
	/**
	 * Return the JLabelTime property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelStartTime() {
		if (ivjJLabelStartTime == null) {
			try {
				ivjJLabelStartTime = new javax.swing.JLabel();
				ivjJLabelStartTime.setName("JLabelStartTime");
				ivjJLabelStartTime.setText("Start Time:");
				ivjJLabelStartTime.setMaximumSize(new java.awt.Dimension(69, 19));
				ivjJLabelStartTime.setFont(new java.awt.Font("dialog", 0, 14));
				ivjJLabelStartTime.setEnabled(false);
				ivjJLabelStartTime.setMinimumSize(new java.awt.Dimension(69, 19));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelStartTime;
	}
	
	
	/**
	 * Return the JLabelStopTime property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelStopTime() {
		if (ivjJLabelStopTime == null) {
			try {
				ivjJLabelStopTime = new javax.swing.JLabel();
				ivjJLabelStopTime.setName("JLabelStopTime");
				ivjJLabelStopTime.setFont(new java.awt.Font("dialog", 0, 14));
				ivjJLabelStopTime.setText("Stop Time:");
				ivjJLabelStopTime.setMaximumSize(new java.awt.Dimension(68, 19));
				ivjJLabelStopTime.setMinimumSize(new java.awt.Dimension(68, 19));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelStopTime;
	}
	
	
	/**
	 * Return the JPanelControls property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJPanelControls() {
		if (ivjJPanelControls == null) {
			try {
				ivjJPanelControls = new javax.swing.JPanel();
				ivjJPanelControls.setName("JPanelControls");
				ivjJPanelControls.setPreferredSize(new java.awt.Dimension(285, 232));
				ivjJPanelControls.setLayout(new java.awt.GridBagLayout());
				ivjJPanelControls.setMaximumSize(new java.awt.Dimension(285, 232));
	
				java.awt.GridBagConstraints constraintsJCheckBoxStartStopNow = new java.awt.GridBagConstraints();
				constraintsJCheckBoxStartStopNow.gridx = 0; constraintsJCheckBoxStartStopNow.gridy = 0;
				constraintsJCheckBoxStartStopNow.gridwidth = 3;
				constraintsJCheckBoxStartStopNow.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJCheckBoxStartStopNow.ipadx = 16;
				constraintsJCheckBoxStartStopNow.insets = new java.awt.Insets(3, 3, 1, 0);
				getJPanelControls().add(getJCheckBoxStartStopNow(), constraintsJCheckBoxStartStopNow);
	
				java.awt.GridBagConstraints constraintsJLabelStartTime = new java.awt.GridBagConstraints();
				constraintsJLabelStartTime.gridx = 0; constraintsJLabelStartTime.gridy = 1;
				constraintsJLabelStartTime.gridwidth = 2;
				constraintsJLabelStartTime.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJLabelStartTime.ipadx = 17;
				constraintsJLabelStartTime.insets = new java.awt.Insets(2, 3, 3, 3);
				getJPanelControls().add(getJLabelStartTime(), constraintsJLabelStartTime);
	
				java.awt.GridBagConstraints constraintsJTextFieldStartTime = new java.awt.GridBagConstraints();
				constraintsJTextFieldStartTime.gridx = 2; constraintsJTextFieldStartTime.gridy = 1;
				constraintsJTextFieldStartTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
				constraintsJTextFieldStartTime.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJTextFieldStartTime.weightx = 1.0;
				constraintsJTextFieldStartTime.ipadx = 87;
				constraintsJTextFieldStartTime.insets = new java.awt.Insets(2, 4, 2, 1);
				getJPanelControls().add(getJTextFieldStartTime(), constraintsJTextFieldStartTime);
	
				java.awt.GridBagConstraints constraintsJLabelLabelStartHRMN = new java.awt.GridBagConstraints();
				constraintsJLabelLabelStartHRMN.gridx = 3; constraintsJLabelLabelStartHRMN.gridy = 1;
				constraintsJLabelLabelStartHRMN.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJLabelLabelStartHRMN.ipadx = 7;
				constraintsJLabelLabelStartHRMN.ipady = -2;
				constraintsJLabelLabelStartHRMN.insets = new java.awt.Insets(5, 2, 5, 37);
				getJPanelControls().add(getJLabelLabelStartHRMN(), constraintsJLabelLabelStartHRMN);
	
				java.awt.GridBagConstraints constraintsJCheckBoxNeverStop = new java.awt.GridBagConstraints();
				constraintsJCheckBoxNeverStop.gridx = 0; constraintsJCheckBoxNeverStop.gridy = 3;
				constraintsJCheckBoxNeverStop.gridwidth = 2;
				constraintsJCheckBoxNeverStop.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJCheckBoxNeverStop.ipadx = 3;
				constraintsJCheckBoxNeverStop.insets = new java.awt.Insets(3, 3, 0, 0);
				getJPanelControls().add(getJCheckBoxNeverStop(), constraintsJCheckBoxNeverStop);
	
				java.awt.GridBagConstraints constraintsJTextFieldStopTime = new java.awt.GridBagConstraints();
				constraintsJTextFieldStopTime.gridx = 2; constraintsJTextFieldStopTime.gridy = 4;
				constraintsJTextFieldStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
				constraintsJTextFieldStopTime.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJTextFieldStopTime.weightx = 1.0;
				constraintsJTextFieldStopTime.ipadx = 87;
				constraintsJTextFieldStopTime.insets = new java.awt.Insets(0, 4, 2, 1);
				getJPanelControls().add(getJTextFieldStopTime(), constraintsJTextFieldStopTime);
	
				java.awt.GridBagConstraints constraintsJLabelStopTime = new java.awt.GridBagConstraints();
				constraintsJLabelStopTime.gridx = 0; constraintsJLabelStopTime.gridy = 4;
				constraintsJLabelStopTime.gridwidth = 2;
				constraintsJLabelStopTime.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJLabelStopTime.ipadx = 18;
				constraintsJLabelStopTime.insets = new java.awt.Insets(1, 3, 2, 3);
				getJPanelControls().add(getJLabelStopTime(), constraintsJLabelStopTime);
	
				java.awt.GridBagConstraints constraintsJLabelLabelStopHRMN = new java.awt.GridBagConstraints();
				constraintsJLabelLabelStopHRMN.gridx = 3; constraintsJLabelLabelStopHRMN.gridy = 4;
				constraintsJLabelLabelStopHRMN.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJLabelLabelStopHRMN.ipadx = 7;
				constraintsJLabelLabelStopHRMN.ipady = -2;
				constraintsJLabelLabelStopHRMN.insets = new java.awt.Insets(3, 2, 5, 37);
				getJPanelControls().add(getJLabelLabelStopHRMN(), constraintsJLabelLabelStopHRMN);
	
				java.awt.GridBagConstraints constraintsJComboBoxGear = new java.awt.GridBagConstraints();
				constraintsJComboBoxGear.gridx = 1; constraintsJComboBoxGear.gridy = 6;
				constraintsJComboBoxGear.gridwidth = 3;
				constraintsJComboBoxGear.fill = java.awt.GridBagConstraints.HORIZONTAL;
				constraintsJComboBoxGear.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJComboBoxGear.weightx = 1.0;
				constraintsJComboBoxGear.ipadx = 75;
				constraintsJComboBoxGear.insets = new java.awt.Insets(3, 2, 3, 33);
				getJPanelControls().add(getJComboBoxGear(), constraintsJComboBoxGear);
	
				java.awt.GridBagConstraints constraintsJLabelGear = new java.awt.GridBagConstraints();
				constraintsJLabelGear.gridx = 0; constraintsJLabelGear.gridy = 6;
				constraintsJLabelGear.anchor = java.awt.GridBagConstraints.WEST;
				constraintsJLabelGear.ipadx = 9;
				constraintsJLabelGear.ipady = -5;
				constraintsJLabelGear.insets = new java.awt.Insets(6, 3, 9, 1);
				getJPanelControls().add(getJLabelGear(), constraintsJLabelGear);
	
				java.awt.GridBagConstraints constraintsDateComboStop = new java.awt.GridBagConstraints();
				constraintsDateComboStop.gridx = 2; constraintsDateComboStop.gridy = 5;
				constraintsDateComboStop.gridwidth = 2;
				constraintsDateComboStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
				constraintsDateComboStop.anchor = java.awt.GridBagConstraints.WEST;
				constraintsDateComboStop.weightx = 1.0;
				constraintsDateComboStop.ipadx = 55;
				constraintsDateComboStop.insets = new java.awt.Insets(2, 4, 2, 33);
				getJPanelControls().add(getDateComboStop(), constraintsDateComboStop);
	
				java.awt.GridBagConstraints constraintsDateComboStart = new java.awt.GridBagConstraints();
				constraintsDateComboStart.gridx = 2; constraintsDateComboStart.gridy = 2;
				constraintsDateComboStart.gridwidth = 2;
				constraintsDateComboStart.fill = java.awt.GridBagConstraints.HORIZONTAL;
				constraintsDateComboStart.anchor = java.awt.GridBagConstraints.WEST;
				constraintsDateComboStart.weightx = 1.0;
				constraintsDateComboStart.ipadx = 55;
				constraintsDateComboStart.insets = new java.awt.Insets(2, 4, 3, 33);
				getJPanelControls().add(getDateComboStart(), constraintsDateComboStart);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJPanelControls;
	}
	
	private MultiSelectPrgModel getMultiSelectPrgModel()
	{
		if( multiSelectPrgModel == null )
			multiSelectPrgModel = new MultiSelectPrgModel();
			
		return multiSelectPrgModel;
	}
	
	/**
	 * Return the JPanelMultiSelect property value.
	 * @return com.cannontech.common.gui.util.MultiSelectJPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.panel.MultiSelectJPanel getJPanelMultiSelect() {
		if (ivjJPanelMultiSelect == null) {
			try {
				ivjJPanelMultiSelect = new com.cannontech.common.gui.panel.MultiSelectJPanel();
				ivjJPanelMultiSelect.setName("JPanelMultiSelect");
				ivjJPanelMultiSelect.setPreferredSize(new java.awt.Dimension(285, 232));
				ivjJPanelMultiSelect.setMinimumSize(new java.awt.Dimension(285, 232));
				ivjJPanelMultiSelect.setMaximumSize(new java.awt.Dimension(285, 232));
				// user code begin {1}
				
				getJPanelMultiSelect().setTableModel( getMultiSelectPrgModel() );
				
				
				// Do any column specific initialization here
				javax.swing.table.TableColumn gearColumn = 
						getJPanelMultiSelect().getTableColumn( MultiSelectPrgModel.COL_GEAR );
			
				gearColumn.setMaxWidth(70);
				gearColumn.setWidth(70);
				gearColumn.setPreferredWidth(70);
				
				// Create and add the column renderers	
				ComboBoxTableRenderer comboBxRender = new ComboBoxTableRenderer();
				//comboBxRender.setBackground( Color.WHITE );	
				for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
					comboBxRender.addItem( new Integer(i+1) );
				
				gearColumn.setCellRenderer( comboBxRender );
				
				
				// Create and add the column editors
			 	javax.swing.JComboBox combo = new javax.swing.JComboBox();
				//combo.setBackground( Color.WHITE );
				for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
					combo.addItem( new Integer(i+1) );
			
				gearColumn.setCellEditor( new DefaultCellEditor(combo) );				

				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJPanelMultiSelect;
	}
	
	
	/**
	 * Return the JPanel1 property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJPanelOkCancel() {
		if (ivjJPanelOkCancel == null) {
			try {
				ivjJPanelOkCancel = new javax.swing.JPanel();
				ivjJPanelOkCancel.setName("JPanelOkCancel");
				ivjJPanelOkCancel.setLayout(getJPanelOkCancelFlowLayout());
				ivjJPanelOkCancel.setMinimumSize(new java.awt.Dimension(161, 35));
				getJPanelOkCancel().add(getJButtonOk(), getJButtonOk().getName());
				getJPanelOkCancel().add(getJButtonCancel(), getJButtonCancel().getName());
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJPanelOkCancel;
	}
	
	
	/**
	 * Return the JPanelOkCancelFlowLayout property value.
	 * @return java.awt.FlowLayout
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private java.awt.FlowLayout getJPanelOkCancelFlowLayout() {
		java.awt.FlowLayout ivjJPanelOkCancelFlowLayout = null;
		try {
			/* Create part */
			ivjJPanelOkCancelFlowLayout = new java.awt.FlowLayout();
			ivjJPanelOkCancelFlowLayout.setAlignment(java.awt.FlowLayout.CENTER);
			ivjJPanelOkCancelFlowLayout.setVgap(5);
			ivjJPanelOkCancelFlowLayout.setHgap(5);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		};
		return ivjJPanelOkCancelFlowLayout;
	}
	
	
	/**
	 * Return the JTextFieldStartTime property value.
	 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStartTime() {
		if (ivjJTextFieldStartTime == null) {
			try {
				ivjJTextFieldStartTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
				ivjJTextFieldStartTime.setName("JTextFieldStartTime");
				ivjJTextFieldStartTime.setHighlighter(new javax.swing.plaf.basic.BasicTextUI.BasicHighlighter());
				ivjJTextFieldStartTime.setText("16:25");
				ivjJTextFieldStartTime.setCaretPosition(5);
				ivjJTextFieldStartTime.setSelectionEnd(5);
				ivjJTextFieldStartTime.setEnabled(false);
				ivjJTextFieldStartTime.setSelectionStart(5);
				// user code begin {1}
	
				ivjJTextFieldStartTime.setTimeText( new java.util.Date() );
				
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextFieldStartTime;
	}
	
	
	/**
	 * Return the JTextFieldStopTime property value.
	 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStopTime() {
		if (ivjJTextFieldStopTime == null) {
			try {
				ivjJTextFieldStopTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
				ivjJTextFieldStopTime.setName("JTextFieldStopTime");
				ivjJTextFieldStopTime.setHighlighter(new javax.swing.plaf.basic.BasicTextUI.BasicHighlighter());
				ivjJTextFieldStopTime.setText("20:25");
				// user code begin {1}
	
				if( getMode() == MODE_STOP )
					ivjJTextFieldStopTime.setTimeText( new java.util.Date() );
				else
				{
					GregorianCalendar cal = new GregorianCalendar();
					cal.setTime( new java.util.Date() );
	
					StringBuffer hour = new StringBuffer( String.valueOf(cal.get( GregorianCalendar.HOUR_OF_DAY)+4) );
					if( hour.length() < 2 )
						hour.insert(0, "0" );
						
					StringBuffer minute = new StringBuffer( String.valueOf(cal.get(GregorianCalendar.MINUTE)) );
					if( minute.length() < 2 )
						minute.insert(0, "0" );
						
					if( cal.get( GregorianCalendar.HOUR_OF_DAY) > 20 )
						hour = new StringBuffer("23");
						
					ivjJTextFieldStopTime.setText( hour + ":" + minute );
				}
			
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextFieldStopTime;
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (7/18/2001 5:13:45 PM)
	 * @return int
	 */
	public int getMode() {
		return mode;
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (1/21/2001 5:32:52 PM)
	 * @param newLoadControlProgram LMProgramBase
	 */
	public MultiSelectProg[] getMultiSelectObject()
	{
		//used to change the type of our array
		List l = Arrays.asList( getJPanelMultiSelect().getSelectedData() );			

		//even if we only have 1 program, this will find it!
		return (MultiSelectProg[])l.toArray( new MultiSelectProg[l.size()] );
	}
	

	/**
	 * A method to create a LMManualControlMsg with some set values. 
	 * Creation date: (5/14/2002 10:50:02 AM)
	 * @param panel com.cannontech.loadcontrol.gui.manualentry.DirectControlJPanel
	 */
	public static synchronized LMManualControlMsg createMessage(
				DirectControlJPanel panel, LMProgramBase program, Integer gearNum ) 
	{
		LMManualControlMsg msg = null;
		
		//create the new message
		if( panel.getMode() == MODE_STOP )
		{
			if( panel.isStopStartNowSelected() )
				msg = program.createStartStopNowMsg( 
							panel.getStopTime(),
				 			(gearNum == null ? 0 : gearNum.intValue()), 
						 	null, false);
			else					
				msg = program.createScheduledStopMsg(
				 			panel.getStartTime(), 
				 			panel.getStopTime(),
				 			(gearNum == null ? 0 : gearNum.intValue()), 
				 			null);
		}
		else
		{
			if( panel.isStopStartNowSelected() )
				msg = program.createStartStopNowMsg(
							panel.getStopTime(),
				 			(gearNum == null ? 0 : gearNum.intValue()), 
						 	null, true);
			else
				msg = program.createScheduledStartMsg( 
				 			panel.getStartTime(), 
				 			panel.getStopTime(),
				 			(gearNum == null ? 0 : gearNum.intValue()), 
				 			null, null );
		}
	
		
		//return the message created
		return msg;
	}
	
	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 2:56:28 PM)
	 * @return java.util.Date
	 */
	public java.util.Date getStartTime()
	{
		if( getJTextFieldStartTime().getText() == null
			 || getJTextFieldStartTime().getText().length() <= 0 )
		{
			//assume they want to start using the time of now
			// and the Date in the JComboBox
			GregorianCalendar c = new GregorianCalendar();
			c.setTime( getDateComboStart().getSelectedDate() );
			
			GregorianCalendar tCal = new GregorianCalendar();
			c.set(GregorianCalendar.HOUR_OF_DAY, tCal.get(tCal.HOUR_OF_DAY) );
			c.set(GregorianCalendar.MINUTE, tCal.get(tCal.MINUTE) );
			c.set(GregorianCalendar.SECOND, tCal.get(tCal.SECOND) );

			return c.getTime();
		}
		else
		{
			GregorianCalendar c = new GregorianCalendar();
			c.setTime( getDateComboStart().getSelectedDate() );
			
			String start = getJTextFieldStartTime().getTimeText();
			
			try
			{
				c.set(GregorianCalendar.HOUR_OF_DAY, Integer.parseInt( start.substring(0,2) ) );
				c.set(GregorianCalendar.MINUTE, Integer.parseInt( start.substring(3,5) ) );
				c.set(GregorianCalendar.SECOND, 0 );
				return c.getTime();
			}
			catch( Exception e )
			{
				com.cannontech.clientutils.CTILogger.info("*** Received a bad value in getStartTime() of " + this.getClass().getName() + " : " + e.getMessage() );
				return CtiUtilities.get1990GregCalendar().getTime();
			}
			
		}
	
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 2:56:28 PM)
	 * @return java.util.Date
	 */
	public java.util.Date getStopTime()
	{
		if( getJCheckBoxNeverStop().isSelected() )
		{
			GregorianCalendar c = new GregorianCalendar();
			c.add( c.YEAR, 1 ); //set the stop time to 1 year from now
			return c.getTime();
		}
		else if( getJTextFieldStopTime().getText() == null
					 || getJTextFieldStopTime().getText().length() <= 0 )
		{
			//default the stop to 1 day from now
			GregorianCalendar c = new GregorianCalendar();
			c.add( c.DATE, 1 );
			return c.getTime();
		}
		else
		{
			GregorianCalendar c = new GregorianCalendar();
			c.setTime( getDateComboStop().getSelectedDate() );
	
			String stop = getJTextFieldStopTime().getTimeText();
	
			try
			{
				c.set(GregorianCalendar.HOUR_OF_DAY, Integer.parseInt( stop.substring(0,2) ) );
				c.set(GregorianCalendar.MINUTE, Integer.parseInt( stop.substring(3,5) ) );
				c.set(GregorianCalendar.SECOND, 0 );
				return c.getTime();
			}
			catch( Exception e )
			{
				com.cannontech.clientutils.CTILogger.info("*** Received a bad value in getStopTime() of " + this.getClass().getName() + " : " + e.getMessage() );
				return CtiUtilities.get1990GregCalendar().getTime();
			}
			
		}
	}
	
	
	/**
	 * Called whenever the part throws an exception.
	 * @param exception java.lang.Throwable
	 */
	private void handleException(java.lang.Throwable exception) {
	
		/* Uncomment the following lines to print uncaught exceptions to stdout */
		com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
	
	
	/**
	 * Initializes connections
	 * @exception java.lang.Exception The exception description.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initConnections() throws java.lang.Exception {
		// user code begin {1}
		
		getJComboBoxGear().addActionListener( this );
		
		// user code end
		getJButtonCancel().addActionListener(this);
		getJButtonOk().addActionListener(this);
		getJCheckBoxNeverStop().addActionListener(this);
		getJCheckBoxStartStopNow().addActionListener(this);
	}
	
	
	/**
	 * Initialize the class.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initialize() {
		try {
			// user code begin {1}
			// user code end
			setName("DirectControlJPanel");
			setLayout(new java.awt.GridBagLayout());
			setMaximumSize(new java.awt.Dimension(315, 260));
			setPreferredSize(new java.awt.Dimension(315, 260));
			setBounds(new java.awt.Rectangle(0, 0, 300, 234));
			setSize(577, 232);
			setMinimumSize(new java.awt.Dimension(315, 260));
	
			java.awt.GridBagConstraints constraintsJPanelControls = new java.awt.GridBagConstraints();
			constraintsJPanelControls.gridx = 1; constraintsJPanelControls.gridy = 1;
			constraintsJPanelControls.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelControls.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJPanelControls.weightx = 1.0;
			constraintsJPanelControls.weighty = 1.0;
			constraintsJPanelControls.ipadx = -1;
			constraintsJPanelControls.ipady = 10;
			constraintsJPanelControls.insets = new java.awt.Insets(5, 1, 0, 0);
			add(getJPanelControls(), constraintsJPanelControls);
	
			java.awt.GridBagConstraints constraintsJPanelMultiSelect = new java.awt.GridBagConstraints();
			constraintsJPanelMultiSelect.gridx = 2; constraintsJPanelMultiSelect.gridy = 1;
			constraintsJPanelMultiSelect.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelMultiSelect.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJPanelMultiSelect.weightx = 1.0;
			constraintsJPanelMultiSelect.weighty = 1.0;
			constraintsJPanelMultiSelect.ipady = -41;
			constraintsJPanelMultiSelect.insets = new java.awt.Insets(5, 1, 0, 5);
			add(getJPanelMultiSelect(), constraintsJPanelMultiSelect);
	
			java.awt.GridBagConstraints constraintsJPanelOkCancel = new java.awt.GridBagConstraints();
			constraintsJPanelOkCancel.gridx = 1; constraintsJPanelOkCancel.gridy = 2;
			constraintsJPanelOkCancel.gridwidth = 2;
			constraintsJPanelOkCancel.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJPanelOkCancel.anchor = java.awt.GridBagConstraints.SOUTHWEST;
			constraintsJPanelOkCancel.weightx = 1.0;
			constraintsJPanelOkCancel.weighty = 1.0;
			constraintsJPanelOkCancel.ipadx = 409;
			constraintsJPanelOkCancel.ipady = -2;
			constraintsJPanelOkCancel.insets = new java.awt.Insets(1, 2, 2, 5);
			add(getJPanelOkCancel(), constraintsJPanelOkCancel);
			initConnections();
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
		// user code begin {2}
	
		getJPanelMultiSelect().setVisible(false);
		getJButtonOk().requestFocus();
	
		// user code end
	}
	
	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 10:18:44 AM)
	 * @return boolean
	 */
	private boolean isInputValid() 
	{
		return true;
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (7/11/2001 12:46:05 PM)
	 * @return boolean
	 */
	public boolean isStopStartNowSelected() 
	{
		return getJCheckBoxStartStopNow().isSelected();
	}
	
	
	/**
	 * Comment
	 */
	public void jButtonCancel_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		choice = CANCEL_CHOICE;
		exit();
		
		return;
	}
	
	private void jComboBoxGear_ActionPerformed( java.awt.event.ActionEvent actionEvent )
	{
		if( getJComboBoxGear().getSelectedIndex() >= 0
		    && getJComboBoxGear().getSelectedIndex() < IlmDefines.MAX_GEAR_COUNT )
		{
			//add 1 to the gear selected index since gear numbers start at 1
			getMultiSelectPrgModel().setAllGearNumbers(
					new Integer(getJComboBoxGear().getSelectedIndex()+1) );
		}
		

	}
	
	
	/**
	 * Comment
	 */
	public void jButtonOK_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		if( getMode() == MODE_START_STOP 
		 	 && getStartTime() != null
		 	 && getStopTime() != null )
		{
			if( getStartTime().after(CtiUtilities.get1990GregCalendar().getTime())
				 && getStopTime().after(CtiUtilities.get1990GregCalendar().getTime()) )
			{
				if( getStartTime().getTime() >= getStopTime().getTime() )
				{
					javax.swing.JOptionPane.showConfirmDialog( this, "Start time can not be greater than the stop time, try again.", 
								"Incorrect Entry", 
								javax.swing.JOptionPane.CLOSED_OPTION,							
								javax.swing.JOptionPane.WARNING_MESSAGE );
					return;
				}
			}
	
		}
		else if( getMode() == MODE_STOP
					 && getStopTime() != null )
		{
			if( getStartTime().after(CtiUtilities.get1990GregCalendar().getTime())
				 && getStopTime().after(CtiUtilities.get1990GregCalendar().getTime()) )
			{
				java.util.Date cDate = new java.util.Date();
				
				if( getStopTime().before(cDate) )
				{
					javax.swing.JOptionPane.showConfirmDialog( this, "Stop time can not be less than the current time, try again.", 
								"Incorrect Entry", 
								javax.swing.JOptionPane.CLOSED_OPTION, 
								javax.swing.JOptionPane.WARNING_MESSAGE );
					return;
				}
			}
		}
	
		
		choice = OK_CHOICE;
		exit();
	
		return;
	}
	
	
	/**
	 * Comment
	 */
	public void jCheckBoxNeverStop_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		getJLabelStopTime().setEnabled( !getJCheckBoxNeverStop().isSelected() );
		getJTextFieldStopTime().setEnabled( !getJCheckBoxNeverStop().isSelected() );
		getJLabelLabelStopHRMN().setEnabled( !getJCheckBoxNeverStop().isSelected() );
		getDateComboStop().setEnabled( !getJCheckBoxNeverStop().isSelected() );
	
		if( getJCheckBoxNeverStop().isSelected() )
			getJButtonOk().setEnabled( true );
		
		return;
	}
	
	
	/**
	 * Comment
	 */
	public void jCheckBoxStartStopNow_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		if( getMode() == MODE_STOP )
		{
			getJLabelStopTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJTextFieldStopTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJLabelLabelStopHRMN().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getDateComboStop().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		}
		else if( getMode() == MODE_START_STOP )
		{
			getJLabelStartTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJTextFieldStartTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJLabelLabelStartHRMN().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getDateComboStart().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		}
	
	
		if( getJCheckBoxStartStopNow().isSelected() )
			getJButtonOk().setEnabled( true );
	
		return;
	}
	
	
	/**
	 * main entrypoint - starts the part when it is run as an application
	 * @param args java.lang.String[]
	 */
	public static void main(java.lang.String[] args) {
		try {
			javax.swing.JFrame frame = new javax.swing.JFrame();
			DirectControlJPanel aDirectControlJPanel;
			aDirectControlJPanel = new DirectControlJPanel();
			frame.setContentPane(aDirectControlJPanel);
			frame.setSize(aDirectControlJPanel.getSize());
			frame.addWindowListener(new java.awt.event.WindowAdapter() {
				public void windowClosing(java.awt.event.WindowEvent e) {
					System.exit(0);
				};
			});
			frame.show();
			java.awt.Insets insets = frame.getInsets();
			frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
			frame.setVisible(true);
		} catch (Throwable exception) {
			System.err.println("Exception occurred in main() of javax.swing.JPanel");
			com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
		}
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (7/17/2001 9:24:14 AM)
	 * @param gears java.util.Vector
	 */
	public void setGearList(java.util.Vector gears) 
	{
		getJComboBoxGear().removeAllItems();
		
		if( gears != null )
		{
			for( int i = 0; i < gears.size(); i++ )
			{
				getJComboBoxGear().addItem( gears.get(i) );
			}
	
			if( getJComboBoxGear().getItemCount() > 0 )
				getJComboBoxGear().setSelectedIndex(0);
		}
	
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (7/18/2001 5:13:45 PM)
	 * @param newMode int
	 */
	public void setMode(int newMode) 
	{
		mode = newMode;
		getJCheckBoxStartStopNow().doClick();
	
		if( mode == MODE_STOP )
		{
			getJLabelStartTime().setVisible(false);
			getJTextFieldStartTime().setVisible(false);
			getJLabelLabelStartHRMN().setVisible(false);
			getDateComboStart().setVisible(false);
			getJComboBoxGear().setVisible(false);
			getJLabelGear().setVisible(false);
			
			
			//getMultiSelectPrgModel().get
			((DefaultCellEditor)
				getJPanelMultiSelect().getTableColumn( 
						MultiSelectPrgModel.COL_GEAR ).getCellEditor()).getComponent().setEnabled( false );
			
			((ComboBoxTableRenderer)
				getJPanelMultiSelect().getTableColumn( 
						MultiSelectPrgModel.COL_GEAR ).getCellRenderer()).setEnabled( false ) ;
			
			getJCheckBoxNeverStop().setVisible(false);
			getJCheckBoxStartStopNow().setText("Stop Now");
		}
	
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (1/21/2001 5:32:52 PM)
	 * @param newLoadControlProgram LMProgramBase
	 */
	public boolean setMultiSelectObject( LMProgramBase[] rows ) 
	{
		if( rows == null )
			return false;
	
	
		//get all the programs and copy the needed values into a different object
		MultiSelectProg[] prgs = new MultiSelectProg[ rows.length ]; 
		for( int i = 0; i < rows.length; i++ )
			prgs[i] = new MultiSelectProg( (LMProgramBase)rows[i] );
	
			
		getJPanelMultiSelect().setSelectableData( prgs ); 
	

		//set our width and visibilty by how many programs we have
		setParentWidth( rows.length > 1 ? 285 : 0 ); //300, 250
		getJPanelMultiSelect().setVisible( rows.length > 1 );		
		getJComboBoxGear().removeAllItems();
	

		if( rows.length > 1 )
		{
			for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
				getJComboBoxGear().addItem( "Gear " + (i+1) ); //all gear nums start at 1
		}
		//only 1 program, lets just show the gears for this program
		else if( rows.length == 1 && rows[0] instanceof IGearProgram )
		{
			setGearList( ((IGearProgram)rows[0]).getDirectGearVector() );
		}
	
		getJPanelMultiSelect().doClickSelectAll();
	
		return ( rows.length > 0 );
	}
	
	
	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 3:40:34 PM)
	 *
	 * Method to override if desired 
	 */
	public void setParentWidth( int x ) {}


}
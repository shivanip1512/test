package com.cannontech.loadcontrol.gui.manualentry;
/**
 * Insert the type's description here.
 * Creation date: (3/12/2001 9:57:47 AM)
 * @author: 
 */
public class DirectControlJPanel extends javax.swing.JPanel implements java.awt.event.ActionListener {
	private java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");
	//modes the panel is in
	public static final int MODE_START_STOP = 0;
	public static final int MODE_STOP = 1;
	//choices the user may choose
	public static final int CANCEL_CHOICE = 0;
	public static final int OK_CHOICE = 1;
	private int choice = CANCEL_CHOICE;
	private int mode = MODE_START_STOP;
	private javax.swing.JButton ivjJButtonCancel = null;
	private javax.swing.JButton ivjJButtonOk = null;
	private javax.swing.JLabel ivjJLabelStartTime = null;
	private javax.swing.JLabel ivjJLabelStopTime = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStartTime = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStopTime = null;
	private javax.swing.JCheckBox ivjJCheckBoxNeverStop = null;
	private javax.swing.JLabel ivjJLabelLabelStartHRMN = null;
	private javax.swing.JLabel ivjJLabelLabelStopHRMN = null;
	private javax.swing.JPanel ivjJPanelOkCancel = null;
	private javax.swing.JCheckBox ivjJCheckBoxStartStopNow = null;
	private javax.swing.JComboBox ivjJComboBoxGear = null;
	private javax.swing.JLabel ivjJLabelGear = null;
	private java.awt.FlowLayout ivjJPanelOkCancelFlowLayout = null;
	private javax.swing.JButton ivjJButtonMultipleSelect = null;
	private com.cannontech.common.gui.util.MultiSelectJPanel ivjJPanelMultiSelect = null;
	private javax.swing.JPanel ivjJPanelControls = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboStart = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboStop = null;
	private java.awt.FlowLayout ivjDirectControlJPanelFlowLayout = null;

/**
 * ManualChangeJPanel constructor comment.
 */
public DirectControlJPanel() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJButtonCancel()) 
		connEtoC1(e);
	if (e.getSource() == getJButtonOk()) 
		connEtoC2(e);
	if (e.getSource() == getJCheckBoxNeverStop()) 
		connEtoC3(e);
	if (e.getSource() == getJCheckBoxStartStopNow()) 
		connEtoC4(e);
	if (e.getSource() == getJButtonMultipleSelect()) 
		connEtoC5(e);
	// user code begin {2}
	// user code end
}


/**
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonCancel_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonOK_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxNeverStop_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JCheckBoxStartStopNow.action.actionPerformed(java.awt.event.ActionEvent) --> DirectControlJPanel.jCheckBoxStartStopNow_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxStartStopNow_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (JCheckBoxNeverStop.action.actionPerformed(java.awt.event.ActionEvent) --> ManualChangeJPanel.jCheckBoxNeverStop_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jButtonMultipleSelect_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * Insert the method's description here.
 * Creation date: (3/12/2001 3:40:34 PM)
 *
 * Method to override if desired 
 */
public void exit() 
{
	
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G8CEC8FADGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8DDCD5D53A370DB4B90EB3D2D111D121D25108E5D7260BE949B8B6574A3943CC76C6B71B18069A1B3C936F0C3F621DEB53168F41641B23D269C4C8050548B70478010202D11A02E221F260EC606879721C8D9CCC73FD56DA7BD9FB1F4DBE8730315F6557535E6B3FBE1EE7BD6BD94F7A5CC74170DEF0721A8403A02CC996643F1AB50290BEA88875490FDEC42C762B7694C17577BED0363030AE891E
	4D90E708EACF49920E3D1F8A61CE88877D2ABDE5933C678AEF64D5DA60458B1FB408EB68A8F853B71F5EB66413C243F7942741B383288BB0BF20282F887F870B73E4BC94429972BB21B58902607FB5C973CECE1E8AB7FC4D52196069862A6CA4E9FEDB3CD90E0F860C240983CA6AE4E9B743F39D156E5A3ADAB9DD677541422A478B925289AFD579C897653C4172B3DF7899D5C42260A8EE04E77D11F3FD3BFB6C56129E234DE637C9E2CFFF0945EEB475403B53EEA9699BB017D80D368123C584E0382E2E516C94
	FB247DAC7A509123CD34E41DA2326F4DC92565026C40AB08E291B9C4DFED70EE8172BB05727FB63DDE16AF60DC3090B3F303D779E3CEB13913CEAB72AFA9FDB5B97CB4A97F6F34BDC83EC688DFA498653BEFBB4A92FF9AE579EB9AC9DBFA26BD2599286B8C627352896E0630BFD0689914F157C7A8E347B7778B057FA7B6B1530B0C11E718ECAB4EA8B256EFFDB579EDEAB3FFEDA76DDE5885FC01BA01A6G8583C5823DCBEDF5F65B4770EC68863DDA2DF6DB0343314FE2F2FEEEB70996F82F2B039899BBAA7658
	1DA6C1E0765814D32CA38FD2F41727AD92E2F5BBA1207D049D3DDBB0DC7BE2E232CE5D421FAACCD8A917A198153A6DB5923D9567923D6543BB49379E0861F59477D3612C2D9E2136C042A190175A0DFA6E48C0D9DA132689D9E58793D2F4E489DCD41FE069E6B278F5AB32B09DAFBDC1F4BC877025C031C02B01B67734275477200EDFEF2B98CD47ADE07FCE1B51F2EC205BE1F4CA7B864C96136814F5ADEC7725EBBDE279B2461D0F69A534C25DC64B679E50554B7250CF92BAFA18BE9CBD0ADE986F03DEF97B77
	0C340D8C5E063D34CF047430B6CC6438036261AA1C35EDBC6DDBA43C98620ACC6DA9AC7D768C02CFB1E9EDE4A74543CCDA9BD9180EB6329462CA457694563EE7CF923F98G61B9C0CB00E20004DEE8E32052DEEC63FD6DBB46580F0E285A17657D1F760D70945D125358E2F3C9C6DB0FF85C68B49B3BAD22CB1053A49DA7FA6D7648376EB8313D9E60F1D03409CE23E4365B20F423D584E3F231B4B94733C99A27C8E35B4CD69198D89D82167B4E71DCF8DA0CAE295DE1B2CA22120245979CA7B6B1E8BC8EA5C281
	70BE2117682B137A5CA370EE69C5DD5D72954196C3F8B9574B6D47F36079999837E8A1AE3C0708E1F48E230D166742GA944C17A403E76145A7E761495C041E66C23FF69C0DBECCC3FCBA8FE2AC95796292FBCAB5B62D92DAD6E25BC82810FG0A860A874ABB07E36B621C8E398C421BBCEB7B75EDD40F085CFAB82983299763719C6731CE55C7474AA3598B3EDE36FD267F64CEE24335D02FB6A0699C36C17471FCE61B7B0CAE912D7130938CC9B4A9AD4252BEF5020CB562A00C390D22C334196045A55B427293
	6B94BB6D35F39BFA016244EF6D87C3F2F1FC4509EC06C399EA2B4778B89AEF14A42739FBC0920F0912E43675A9796329ACAE8F1768126B1AF20A76EF28E388D0B82F6BB59D39AAFBEB355B4F8DB85AC8CF126D76B49D1F17C07A985E7E16F4B257CA32E0F810061578FF24E15B699149B79E9F2B6F2BB7257B6211789D4AD7F8D4E410FE007EB3D946577178869ADF8875E9851200020096F33DBCCAE5544B7FDDE4731471771407367C757FA29E4CC624135EED7C1B137AB6FE4DC9FD9B3F6E24EF9B1EFAD24F06
	D95C4DA7C99D6DC3B6D51F386DA47117B087360934E372AC821BBB7F250D5443ECB3CBA74C26BED1BAE63EA0421C5ECAEC5BC5FD72CAE8AF410A7EF3E8AB7A4F428B53E13E181F20B75F8A3CEBCFC207155931452A78CFA6D350D7242F0996518A0A5AEF9F30C98C1FC17D3D0C3B92A9D63A65D6123768503E81C9325B7613414CD2EC24F5A9E10FA32233576E340A26223346C1E309F1C8AA21EDD152C0231B487B367C6D5BF7676B4C780B4F2A8BBE5320A93155FB11BB379D5FD6AA5B964C4976DD2F16737039
	2BA063614F46ABDF9917AF636319CC3E7D7DE24F39FDF677971041F9CC32BB7E25020EA8FD3C92174B727E78403D1E729E134060C909DF58072E0A48EA8663153A026BB9BC7FDE359DFCBEE0114C8E8B74E38BF03E8AB66149E03CF2D78AB856571D26639F7455E02088AB0EFF7F7C1A446378A78F727B6D968BF3A790D7EAA33EE2004E09307FC7D9591E42E608E3712F69463BF97C10C1AFFE8A0F7F47FBFA7141BC7EF23EDEFC388D6B313EB30B78CD717C00889D1D8C601F0943B8276D4C51449DB7DA861439
	72BB1DE43C302846FE06271F5277E3392748F8FF0E173F6954DA014CF9D9194C6F4EB112B29DCE339526CAE4B2A36F2D8CECD76F2DAC817949BE4CCAF88A7676941637AD074CC9F40CC2083613B286B3F06FA58F4225C0C76C2C9CFFBB7345ACDDDDA626ABF4407A5221246BF428537D05278B86BCC215AE5AA35D0CACCCD7F49E56CD6715F4DD6755690EE7E33AB900AF81DAF11E25ABF232F4EEA7C9B7196F436C6058F40A3D8E83794CC4DCDFFE1E255EC35AFB3BD3F7CCA234C0AEBF4A29DDF75B4F10F263G
	97DCE8B3571FD24F7D9ADCAEFB0F19AEFB64765FFBDABDDEB12C6974DB706CB5BBDD3086B709EE34214FCE93D9493AC806E5BB187549AEE164BA2F49E4166CCE1CDA6F9F229D364D3E9F16E64DE0067B79F0FE5CAC8EC1FE36D794160B7AB238F03C3EF4C03DBF35A0F3FB42FAAF3AE9F5496335CB514D3202D713D9595B8DD8F6188B77266E63D8AC472A72915BACA176A0475AA434613FEDA3F6CE776C080BF2173806E01ED3D7275E07FB1E4E2D49FE5A948977381A0AC81F0B03F06AC0FBCABE90DBEF5FC957
	61246CDA409C836897922B54FEA19470A820D5C04CDF2F4DAC0767787DB2365FD9B3516FF719C430F61A113BD716F169FD53047A4B9989FAFBF413B27392D287D97B148EAA6DA4ADF3A474AF453D441ECC5445C5C893BE083A58DF2D270B150358A61D0D35CADD46BD59E03CB7E5A1EFE188565FC3487BF4361A378370C02085C3487B09738D0477F71DBF88387F728417A38AF8243AD10E68E6BDB9763AD10E7FBC58281663BBCC8A189C1733D10EB660B1054BB13DD22FAD963B51AEDF4A7EEEF6F9435B0DCADB
	FE27C9023C4FDA2E763111B145DEFDEC341B5965CA3756479EB3127E1CBA8C7302E174313FBA1D2D7231C7C1BC232D8FC6D83E36BAC37481E3299CF61FA1FC69D8AA609A6F015C716CCB168E637E12FFB7E903C688F78139017C0166F0595EBCB36ABEEB135B47BEEB39E1BCF2C58D633AF85EFB6349974B7355650FA7DFBC4FB7FFDC7952AEE03E586D5ABD067C8B4A5EC565857DFD0CE640BBB5F18E887BE9B0363FBA0F7A7B408BECFFB519630BA99E2642D9FF7B2C887BDBA44495FE03325E15212D6324EFBC
	7905E842AC5F5C91797E2989AF5164E37DAF739831B11D710D75C8814F52322A3473BD620FE2204CD55F6078D9D70563E05AC5345D17FA489C4A8161A9C0A1C011C031C042A52877A53461AF3A7466971EB66CEDF2216C2FB1DD18B32FCC07C3A372E9F558F849B39F2B77056AD41A9FFC4EA5EC47ADD9D7A643A7A372E9E5083C24570E3B0F3F2B5F0EB8C2486D383AC85B0EE43FAF9A4ADCF9895B7126ECD29FB22EA7FD0B75796D95566779D16B537F2D1ECEB3DB5016A6F0992E4D3EB299EE9C11CFABC32C2E
	8C5115C486B22E2C7E966D79C311E015175BD39AAF236D4E6AA2F26258F044EE36C9820E8B9DC6322632BB4DFDE69BE227A856E3F7528DB036BF3B044E095B20CC87AFB7305B7BFE5D1D5D7A7BF5F7F56B6F574D6A763DA7BD375B5BFE9E132F4500727981B1AC6ABD4482B976E5BEE2E19C7B9D47A2B9363604E04BA03C02E31F5692ACED8278058908DD13C730DA8837F12CAB0DE07D903E4831BD83847307F02812EE10E0CBA19CBB81EDE8E1914162A1EC38863147A9C67CD9A5473EAC42B10324A5CF12FE2C
	E34FE844F81C65BCF01F5B5BF947155096DA6EE39BB3E93B3BDC220BBA50C623E414637EA4ED90F476DC3FB0DAC581770916E72C1353B4C9767DE53CEFB4D3DFCF6A51F18D2EF9A6D711B14D9F4221C011DC17FB2A3463EFB4442D1475A97CC0566F8FC657EF9124295724134FD4FA3C771557FB747B4A9BBD245F3A6C834E9ED15B9F12CCF9BCCE99E9DAA451CA54A36F2B18C8FE18F97709A37A130166E7F15E72EFB1F96BF3CC774119EA5D17F33B39DC2D5567915009C9560BDBFECE5168A9D8C73F6100AD81
	DA2E0AE33C5B32543CABF83BD7EEC31F987783EC773987C93B97CD047589D047C4EC77E959C4CE47C425ECBFF88F1443E172B3F262686D3E8C522C5024E3F226E62B652C64BAB234E8F5349A72E77931B28A65E72D5F683CDBA1CD171F9E6F859E3C2BB86F67AAF13C1164FC136099A43F4F5161496C6193114C915DBC3C030607859C6345068CEED3CDB613BC50307D2667697871A4E478F182E2DD54E76F826CD90E7D097A6CCBD0603582E27D54BFCF85EC8347DE26D8BAD47469842C6F1692B2EED90C437681
	60DBFAAD3507921CCFAC06FAAD87CA82BC6FDAD6C7166FC8AD594B319A5DE66B00159E5C4C21F97B293FF7433B5F35381E8C4CA3FD4A6194FBC527D3B431E39EB97D83F4ACD8856F428FB17DD09A11295BBEE0B339B05DCF6978D08CE9EAFF086B658706088C3DCE23953A58B10758A3885751BD3E81145F82E9A7G8583C58245A8BC86297CE61BC67E29F4FCE906F25A2E43347D8924AC36BBA46FF93A38AFDD134D6368D2172DF3851CE32F2CD44F4DA6DC4766E60B6199FD9D76294F2B34F319386B94FBCA1A
	843A1F2437BE7987754D451358BAA40563EFD5933CD105337509BFCDCF421D9097B98947D4A3757B05BF825D7E88313BA8568A61CE0ED5D663D86E60581369847303F0B047BE4E40F1BB1CE307B2F05C0E665874EA643B12E3AFD6A3DFE1B2E22E9A64EB6058D719483708E3F3B2F1DED14F31972BD016A39CCB2EC6D9A40E4D25F9A7C1B8E8B2364B275B30DDC2A7B37DAF182C34C3943C47CE56EB174B4DC44F7113197E5F6578CD942F7D310233F619C7FDAD893BA12EED8A4A34004E59CBFF521E527C9344BA
	F2D0E71D9C8B4AC11DB9B8D61C0BBA7363582A9A54D9A047DAEBD1BFE1BF7164CB74331AE355AD48B76B2708DDEEC13E059C0BEDC13E259CCBAEC03E0D9C8BAAC03E9D9CBBDB0BFCC3B9362A925BF48147A2294DC5C1B816E36B28FD45C3B8F5AAE2368CECD343D45C2B6DAC413B0E7900F5CCC5DFD2D16E31E6A6BBD2F5F587AC7621D659B54AE3E5881D6312BC7ED3F12C8C2CA1E5AE01F08CD07CD45C7FF6FF087B5FE1F7CF93DAA79C503D1F995336BDA14B1F59D1253F32EFF5E46B2B498EFFF21F76A43901
	AB7B1B413CFCF85A4421FC3EF156E8360AB6F2212928222C2AB83F3C3AF49B639FBC245EB72BFD2B5C6B3ED9384CF7097CDCBEF12B40F82F30AA3C5B5346421B65BBE5D772158FFC284D47B75B0ACA0B73613F0AD278DFF9C565B65473C5BA77A7328A5703DF3A1EE0BF9BD06FDB12321F0584A544BEE87CF20FF8621721B8D5FC4620BA1E68E8E212BAFE2FC7FC32AABF5367939FE0FB2EFEA2D4307C3C526BFD5B8957B3BD0648CF47512D025F6B581E7F61D0F4D3D4B4961DB29BFDBD31DA503FEB5CC3B7D868
	B56381498C8BD655D0A49F4F49FAAD2C42395E726B51FE7750FB07069B5AD30A019AEF407EE32A4275DCA747A2EA305FCE60D8E5A6765B289B50F7A651B1A896422B0172EEC4BC0B62643C0F1C8D1273B7065FBCE2BD610BC8395E6288AFBEBF1453B19E770F0B072FFBCA6A7BEE492A74394267547FD9EDA2340739074DA9A6D3BDDEC76AFDA34EA9EEEEA1673492ACE0D81A7FE463AD44F7GB16C949D27AC90F673FC1B8B084D31CDF9322DE63419841CA32DCE47B2C200A2EEA4D8C3C61E0FFA30FCAE6AA705
	00761434G647DB865FDA7699B9C4B20ED5F8C61B60E85D14C84E18747A6E6E23AA00EBDC331B088C78420EC2B2BC6172D044A918BF96282D0870FE712792195664CE47F057529BF1FA7D5E076F8E49B0E991BEFC29B5DCA674D2590EE6458EB9B51167BB936F1934126C0B864A63EC755CC56A09190DE8E948F14F7B378A4208EA0B7D0GD0B8D094508A2024DB5AD372EF417C37517C64CC3A9E30CE200B3730336CA0F8AEGDA8E349AE8F3A0BB0B2907E7E7A05F5FB89825518DA91B70A56F81B72B66A432CC
	54075FB4363D0D88D53AF8791D482F1736D645EB454D3E4BA77A48731106556D3591F5A37320CCC171610813F5CC3A264F0D278FE31FFD5BCBDA753D3CCD2314CB4E66FD5D95E4F67AE4B6A9D3325BADEDE6C79BF4F55926DF21732B0B503E138231FFDCC367F037137660582394DB8261E59CEB27733A15900E675816DACCD7F8AB584D2D749C3636F1947956893886853F84F988ED9558F8F6845E5F04BF724EF83CC8E58E81FC4E2D4857C4FD5DBD4456GE37D709E3255A167C9BFC4E50538F81E270A4E7B8A
	27017F1F06324EAD98CD56C4397D74E4ED06F25E175F990F9B29BE5AG6F1A46F5C47D6B948887CEC3BF72F47AC8DF7D970ABD8B3418274B4FC0DF4D6A78B8198E4AFEA7F1D060365CDDF2E55FB6B82EB05F3D9E7916CD9B5957D6CC53DB1F245512B1F875B4368ED943718D94CF3DCD41591C790E9A1CB39BA04EFD9BBF879AA47EFBB90463013202E0AD86548CE48A427D6EF0115CD374F98654E6F7340A0322C535054D66DB3F79DABDFF4D1A36B981655256539DA4FF539224BD77BD6CA66D998178B2AE539D
	16CF60F95CF8F6640D97G0FB86D8E51A98DB3145E461275FD4D4015FD03720B941CB706BFB4C30878612AB55E6E412C1265B75C4E1E29DFEE65BEABDB18B7CC745D88F1DDC0FEC0C1C0F300165C0EF51BE1AFE67AA662B7C81231271F5E90C2E513CBBB8ACCB6CDD85D3671BD0865370F3423B840126EGFFFE079247ECE6AE1DBB965F21352585942F3DC3EBCBCDE97CDBB3088B85E2FBCEBF61F30134BB591ED3A1BCEB6FE463A173933F29994DCFE44BBAA76FC7A02F69CE66A7C8588D6F2F884C4F4B73AB36
	07G387F1D5857D9FEFE13D6C0DF4E469E0F1B40BC6E73F59B14B84F7B8EBC4D742A84F8D657205FB87A0D4063F650B9CE81AB3500458FDCD46217241333ADAFEB041A8AD8A2D4ED43349FE4284BE276376414FA5D127F491BEB7456AD7127BECED8F0A7EB5F18BB15FE94A746496B1667AEA9B279D50EDD26BFD4133A57FC0AF597AEAB6558EB08EFADB8FCCE2E77D6C109BB1C6903C715A70F30CC4FF2A62FD14A792F2A311443724DCED072050E09BF3325E1BA67B484433CAF98ED294EB0F2EF755FB7201D37
	C2BA9350942060E026EFB6AFCE5F64EBDE4C4A5E3EC9FF7F35094EDFA3203C45410ACDD37B543BD72432EFB267BA54EA6C96ADB48179F80A4791BAC4E6B0874C2245B4B25E4073AA85B49F7D7C8B0C4FD17367772B945EB91A726D8EDABC0F4FD049260D4B557236BB88EB4FFE8B23CF379DF89F940DCED51D5F62F9D90487BF3AEEBEFC8EBBBB0B3BB0C84AEBB4CAA2AD12D5C30EDBD41C6199C72E564AF7146F4FD46FAD4485333B960669F8A72B24CE9DDFB41D45DBF87CEBB9FA79A770F83FDDFA7983F87CC7
	3A7CC3F9FCCC2EDE7C829EBF49738E35DCFEBC0F0F5E2917BFED8646CF7538F316BF0345F77178475374622599B82F0CCAD47AE5EBCEA1696B876C4E9E5115AF750B792E1EFE51B4E09173A5FB3EF340165FEBF792A3AB104F9FF2287F2945BE7E37A4252C8F69F7368554A673C9EB4A7EE363DAA54D4BB5BE7CC0ED8D7801F26E078E54EA4BFBCF36A93A46167F980FCF6937724CC77FA18DFD7466D937890DCF2FDA0373DBED7F1FB4C33E4FBCC37151C93D6823E726AAF2776D9A3B5C5F34909D55D620EC3FDA
	2714737777FD15D3A61743723D7C16126F668262238AE8BF4887E7D3A02759152E6820ABC3C9FF03AFFF2B61B3B1D349777374773C67AB2B28E10E1A25CD4EA04F0F2C9F49FB8511F4BFB7EBA61B27B0EC678E029581D6BB935760B9E4AAAA4F835FD53D07540CE7CFE93C44F8BCFCD5F930F9632B035E4F5ADF9B54BFEBDFBD28FFAFA5E14877F7E4EF8DF97F0EACFBC87D9D991B7716124FA7647869C39F88DE666EB03BBD846DFF387BACCC3C5A0CFDBCCF1BBBC3AD8F1B524BF1DF3B095FA15F20190D967385
	FA457E98A43475B15E3B685D61D63003FE20A9C041C061B3F13E7D3C3BC02073ED1D39F613290F5CB3A0DFC1CB48EF5130F7BDBFB6BC7A37533F9BA69D2C5B8ED3CDABA99F7168E1E2AB60EFA848306706C97BB84DFD7D92CBAA63FF9C267B0AE2AF05194D6F2D42BD332819389736A98D7747E2B9D6C3315490186704A096D70EFBE615A17C9EE91A52C796295EBF73797D693F263F182EAA8F360E79F9952EE31A099E00587E7A9B7C8ECDC4886E2FA75375F39C04D36F823D810D9C93627668E14C57ADA753A3
	596F3DC912483E4CDA654B6FD503432CG3F476C78998319D356826FB6A0B710BFD08850023B501667DDAC725637GE487E1541E1DC633CD5E8BF1EED46449B364FB17273C161CE5D414EFE37AFBFE836AAF8A78275E0D67F0E5DD64EE29669C6E2053EC5AE76CE392B0BDFF34914F07765E0DFAEE5FC8FF0384427EC021F7635C6126CD0A0CB79F9C0B0C72F7A23DDE3E9321B3C6A647CB19F827B11257E1CFF12DB046F39AE552CBA635CD6447E1D839E29D5E57AC3C87EDEBFBAE721A4431793B505ED6F26CB4
	15090C3D052108EDB2A056990AF276D93C5DAF15E74B72195142DC6491404B4B2C4772167272A69EAA9BEB3D79A419F0413329DFD56237BAC977A21FB569F85EDAFFAF6EBBCD4CA37BG92047D014201168245G4583257D8C7A98D0A5D0AB1089488DB485A898E88E50E220681F215DFF1B324D075D4B462798BE372527CB08FF05E1234FC67CBE470F6EA0934C7EBE23C33E9333836B351273EC4A76BE8E34E60FBE8E34537DD8917CF75B30C33EFB76D5B63D175A5B6B9279F8F3A6BB0BE3AD2EA3F617190CF0
	CCAEB375D52BC12654D9F8A6D312B67A5A730BB47D3BB33DF4EC280432764E42FD5737AB68D883E177ACFE67FF44FD17317975472EB0DFC235BADF48AC4F7D2D8888AF1D2537CFBACC7DF64CAC6D5E568FA83EF216F6EFEBBD5FA70D07384EB0EC6B978C5E5B7AE54368ED7DD7037E189FEF98B9663FE1509F7393B72847FC261797B7DC19BE7FF605790AB70EB79F5377E3542FC706E95B61F794DF9A26ED072FB7E2BBC4C3DC7DEC343BD7B27566854133D95B074F76FED635C493379C42F1C0C977A938FC7F37
	CE4BA38F52945F27312F7B3C73EA13637A61F9D1FE773FCFFD0EDD1E2BD70F90B9CD040F3217EA62E2A03C8AA875FEEDBDA2F7E95BEAB324A91553B55EBF12874B5763713DC5071C4EA2BFA740B3GA8F4843F4D9E5FABAD10632364E7ACBC63015266E873AD9E717DD5BE24291453B54F71A62721DE1D2FD3CE67101FFE708C848A9B416F09CADFB69C69155F5AF4DF7916C13E951A3C2C5F5E12675DF75C11B73A6F38A7CF5FF74C4E9B69BB7EADCF5FF7C46429FD87439E4EA3E3F29F0C0D9DBC5DA20E1D6458
	FF50B289F642EC127AB97EEBAA97411BC5429071A729DCC3946B40350D8ABB09EB1BBCB256C1157B6DCE7E5BBDF9E45C6DB5DBACAC7C92CDE33641504775718A15516CB02A640E6398111B0DF117F7907FC166B3EC8E99720E406352FC5D0362F3C8792E4F3BCA3E974B471E6F4F1B15FC85E3624756E2EF53330455E0CB0687F0FD56C331A28857F2EC963BE789614E8750BFDE2E91383DCED23DE7FF8FFB9C9FFF8FBCFE33D129D3346A5D38716A733EF0D5F930B6CD4FA2ED6AA0ED4C5BF9C6965E478C605884
	5A7621900E605805C4FA078B42B19C1B3C966FF52D62586DED38A7107AEF08CD21EB158E88BBB87664CE0285C0B804E33DF44D908161E59CFB00E2ABA0AC4CC56CFF6AD1968347766EC23EC59C3B155E0FF0C3B800E3ED392803D00E45723B308BB896D20BBA086258BB9548B7D661E1C49D44F36CAC3FB31B960E58533BD0871D9C4B5B03BA184031FB76E05EG0EDD48C4D9E2B9F6668456A31EE32F1E40FA247D9C31E7B720FC799C7B388EF9D4F22C4200BC7CB8565B09BC82B976C8A772886358548B48A312
	E316AF1147B2C5962A674287414FBC08587BD43ECE88BBB856476FDD85F06C13FA2E830E79A5F39DF0ACF7AD57413F737B6147398EB8766DF62E830E3DD009189F47362473FAF04C1F26AB0C00FAC46099DAE935F62D4756B74D553836EB65E9AFD413F1E8102F7F7C2B795A1B27D9D46D39C60C66E9ACBCCDE116679D41BA5A17AFC27C2488DCDFBDC13190926679EE21E577425A1B2519CD4BDE8E71ABF81A6B9309DF92EDE432E0126B921A08FBAAF973307C39D45F45902E1D07677061ED231D43A78B5E6F96
	1966A96FCC1619F5245E7DB03CDB4890AFBA65335279F53896F5C01EC97364B961BCF6070E657D73CECF9D894C1FC01AD573B04D25FA32E752E3F40A92AE00F97B5D4C77B1D29F4274CB6A497A41A54A3FB354E4B33134B1BCED5EC3281F42DD28332207D0BFA7F67952CF0ACAB7D4BF8FA97AA17891885F6F211FB9B999EAF964F3C5467F319CEEDBDC26CB349FDAA06C66D8BA6D7F7E908E62582F593DB188AFD3729A31BEC97391DBC431BC88974E47BADE6373FE59BAED9D35774B209CB22FFD634DB75FE4ED
	AD6C46366E1C2F3435B41F5D11E4F2B4D05FB98530C0AE47A3FBC65375FA159CE173BDF59DB9DF51B563B1135DE586BC1A57FF92753B298BE0BCDA00D8DE876D97902E65D89275EBA688BB9620FC8DF523751575BE7ACA9014730107FC1D4C0F839E4E79CE6D44760E65581FA8369A42298FA396C17DF8A50477BE0C72CD7CF234F6D46BCFAB1F65E1259D192D7EB5174C39C53A0306F79E569930ED5D105E7FE1797C72E1F66715652B25630413ACF01C221365BB4C6FCA44C15A54C7D83E36C7D8BEA67F379BFD
	49CF741AA9A8F787AD0FF8367F84885F62215FB65A4727G9E78886AEDB69D0716C0F899476A29DFDC8161D59C8B2263D07EC2D86FAFC479EE5ABEDA7BE77A50EF8714C3B67CDF877D32727EDF65E8761E2E32A753C24F7A3AA1EC174BE665D5260FD61E5ADF79E94A8BD415475A711E4A11634AA31568D3C296E2FB1F294675151C0F062BF878D59EE66BA1FA85CA0E3BAD0B54D1BED7A67B66F585BCDD69FBCA3A01EA9F6749551F966717FD4A4F136FADD47259928B34798E40E0DAD4E0B29BAD763E827A45CA
	D9A5BFBB3FF6AD51C52F516292399CCBBFD04A3B21ED6CF23CCABE151177317ED8073F879D81FA0BDB48FFA7687C274248FD7B92074558DB52EDF419FB6A6A761187B9DBE8EFA9246F4D2A51957C8A5DDB4F5FC93F710D84FFG54910967A5B9C50A6C46FA521E85E555F565D585B2B63B5E332DDE5704F76ED26B437B399639BD05F9E2F2BC5B7B390F15385F6792BFD4D0545CDCE735EED35ADAA8D6525CDA6B6B2ED69968381A6B3833C44917D1B11636D66EC98498C73675659DCAF9E746A1470CD2252D0BF6
	E3DBBB209DC2A371CCCB24F88C04630132FE01ED74E81942F3469E5AC66525340D3C6BFB85795CDC665DD82564BFF6E22C764E7276D5ABF9DFBE11467A225DA1F7C5797EDD0D12A6EA03AF7B2F75307F5935CA3E776A461EAF6AD325EEFF582B1471D567785AB722D35F561276A9E57ADD98FB9BFF34DF55173E9CFB3EC30D0AED149950B60A207D3BFE01FE20F14BCE2FFE40AACAC6729D98F960C19BBB57AAECEFB9AA329FC1107D000D169F88654E81DA728B7CD6F2E883720D81ACEF91720D203F9BB83A7FC1
	3EC765D1DD4D99FDD0B865F1844A6E871A30C87FEC1C69445A243471E387953D3A1347E73FAB1BD57DFFAD6DBB647ADF9D5ECF7A6810925FFF5CC71BD5D4FB5860214F14FC2E6DE34FE7EDA5793C575B7FF35F71F33FD078BED52976CFEC6F69653A514EDD8297697D464E6B2366537E668EBB17892063CA78A26DF94D6D940FDC24BD2F79F0A71E57AC053852DF62FEE4496EAB133BFE54FC7AF2BFC3FDED40AF35F23FC07160DFEA65BE379B658E03382C45A8F74D283F3D26AFF75328797465FE0176DFE931D6
	6ED7A8BEE131D6EE4900F2CF0138B8AE7725D14F7574657E7128797465AE2267F4ED0FEA65AE23F85723DA399F62F7C6AC90978544FE73A6B2174C874DB60B59A66EE77F028417ED9AF111727BCC55FB714E2B3F675B74BD70F8FE37D227952A77733B2FBE6F495F830F958625CE7FD775FE41F075F95F78BD70A8D11DC354285EA3B7DCFD5E4FDCD59E6C5F8F5BDAE30689D558FF8B49AE2710B3F2ACEC7869B3CF071DE9B4A48889AD425AFEFA4657A2A48F1143C23783FAFB9250CE57F961DB229BB924AE097F
	1240AF671CCDFE677133D20210B4222496E10D9BE81814A87C994A20AB8772B72264CCDEF28BBDB80C992C28CB7C634CC4D6ACBBC8ED911248E9A8146EE4DC92E17ACB4BCED0A9A0C19256713B4F12104D3E884A478F04F66F263C570E4C3516FDF20022519BFCAD1EA1C9C8B8FC4E832A72951246F2DBDE925ED22E2D737C44A6CFF0C9499FEED6A46A244150176A3A735C38CD50B1A277179E727E0867400D9B7A0F1A70B4E47BE1BA8F2D000237DCE9C892562B7691F89C19E8B501B524FB4CA89F1DDE755252
	5F9FF7A58AEBDB043749867BB151C96F8D0BA6729BEC72BFACF4C0D867A03F63C42EC601293868A359A58DDB44D64150FB147C583BCB92CD8DF8A359A5899B688F616EA03763F6B49BDD7D9259C05959AAA45948BF01A46430E88BD87A8EF6BDF9A73537B58DDDD45E8CEA4BCEA1174ACBCAA96125644E4F7C607DC3319109C2428161AD724F529DB07640C220C5D8A775BBC5D73F5DE2F2BB766C2585258E61FEF2A29477AE2FBE29EC8959D060C21FF35FBEA5FDC57A817AB3D4428E1A126C43177094267D7DC6
	A730921DAD9279A71DE06D41632E792774612F8FEE6ACC90564815A42A7F486DG43111CC61B0B7CBEB0C8102F11G23F8C1A5B7BED6FA533DFF7F0A9624E4150477184AA06B0EBE51EE5D51505B8B7383DEG688F0A5F420BA7E9CAB4E9F25C57EFB874541B5D505E0DC2223534147E3F0C7E3F1C7C3F0CA2E594A9AB87A54689BE7F3471EEEAF01FC84CC83877A14DDCF2GDACA7A2F7FFEEC463375F1AB21F68704E47A5343206CACA555978356EE517943301B362C8F0821BF9366A0A601652E6DB5DA4D16E1
	F8E1EBA1B741F73AB5F60E3DADD1C5600712692E0F0717CA12FBB1442648EBE4DE9639E8D8C1C3F44B3A0199943D7BCD51EDA3CD0C405BE9648E7A7F72F1AB10642A24F92B89C3727229E7ED8F3AF5A4A475C9166BC424CD065A527D935D5A8A2ADAF55112B23E3FDAF569566ACBB738EBE5574523C19BF5C2D8A5EC5EB57F7B9A6AEB3D06728CE91BAD5143F4897ABEC77FD7B597797107E43A496051B605BAA1D29B7C0619985F5A91A6C96A1860D1F30E8A78BD59364B6AEF67632F4D757A5BCF9DD1729D3DA8
	6D37738F52BB9C2100AF0E423B2CEBF7EE973CFFFFF34CEA34D8A42365DC034DC43E4559B7AC094AF7BF73F71272DD18C60E146F0E6DA4F21FD565797FD0CB87881F1DE0ECDBA6GG5CF6GGD0CB818294G94G88G88G8CEC8FAD1F1DE0ECDBA6GG5CF6GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG15A6GGGG
**end of data**/
}

/**
 * Insert the method's description here.
 * Creation date: (3/12/2001 3:43:40 PM)
 * @return int
 */
public int getChoice() {
	return choice;
}


/**
 * Return the DateComboStart property value.
 * @return com.cannontech.common.gui.util.DateComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.DateComboBox getDateComboStart() {
	if (ivjDateComboStart == null) {
		try {
			ivjDateComboStart = new com.cannontech.common.gui.util.DateComboBox();
			ivjDateComboStart.setName("DateComboStart");
			ivjDateComboStart.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDateComboStart;
}

/**
 * Return the DateComboStop property value.
 * @return com.cannontech.common.gui.util.DateComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.DateComboBox getDateComboStop() {
	if (ivjDateComboStop == null) {
		try {
			ivjDateComboStop = new com.cannontech.common.gui.util.DateComboBox();
			ivjDateComboStop.setName("DateComboStop");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDateComboStop;
}

/**
 * Insert the method's description here.
 * Creation date: (7/10/2001 10:48:08 AM)
 * @return java.text.SimpleDateFormat
 */
public java.text.SimpleDateFormat getDateFormatter() {
	return dateFormatter;
}


/**
 * Return the DirectControlJPanelFlowLayout property value.
 * @return java.awt.FlowLayout
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.FlowLayout getDirectControlJPanelFlowLayout() {
	java.awt.FlowLayout ivjDirectControlJPanelFlowLayout = null;
	try {
		/* Create part */
		ivjDirectControlJPanelFlowLayout = new java.awt.FlowLayout();
		ivjDirectControlJPanelFlowLayout.setAlignment(java.awt.FlowLayout.LEFT);
		ivjDirectControlJPanelFlowLayout.setHgap(1);
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjDirectControlJPanelFlowLayout;
}


/**
 * Return the JButtonCancel property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getJButtonCancel() {
	if (ivjJButtonCancel == null) {
		try {
			ivjJButtonCancel = new javax.swing.JButton();
			ivjJButtonCancel.setName("JButtonCancel");
			ivjJButtonCancel.setMnemonic(67);
			ivjJButtonCancel.setText("Cancel");
			ivjJButtonCancel.setMaximumSize(new java.awt.Dimension(73, 25));
			ivjJButtonCancel.setActionCommand("Cancel");
			ivjJButtonCancel.setMinimumSize(new java.awt.Dimension(73, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonCancel;
}


/**
 * Return the JButtonStartMultiple property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getJButtonMultipleSelect() {
	if (ivjJButtonMultipleSelect == null) {
		try {
			ivjJButtonMultipleSelect = new javax.swing.JButton();
			ivjJButtonMultipleSelect.setName("JButtonMultipleSelect");
			ivjJButtonMultipleSelect.setPreferredSize(new java.awt.Dimension(137, 25));
			ivjJButtonMultipleSelect.setMnemonic('m');
			ivjJButtonMultipleSelect.setText("Select Multiple>>");
			ivjJButtonMultipleSelect.setMargin(new java.awt.Insets(2, 14, 2, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonMultipleSelect;
}

/**
 * Return the JButtonOk property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getJButtonOk() {
	if (ivjJButtonOk == null) {
		try {
			ivjJButtonOk = new javax.swing.JButton();
			ivjJButtonOk.setName("JButtonOk");
			ivjJButtonOk.setMnemonic(79);
			ivjJButtonOk.setText("Ok");
			ivjJButtonOk.setMaximumSize(new java.awt.Dimension(53, 25));
			ivjJButtonOk.setActionCommand("Ok");
			ivjJButtonOk.setPreferredSize(new java.awt.Dimension(53, 25));
			ivjJButtonOk.setMinimumSize(new java.awt.Dimension(53, 25));
			ivjJButtonOk.setMargin(new java.awt.Insets(2, 14, 2, 14));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJButtonOk;
}

/**
 * Return the JCheckBoxNeverStop property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxNeverStop() {
	if (ivjJCheckBoxNeverStop == null) {
		try {
			ivjJCheckBoxNeverStop = new javax.swing.JCheckBox();
			ivjJCheckBoxNeverStop.setName("JCheckBoxNeverStop");
			ivjJCheckBoxNeverStop.setToolTipText("Forces the schedule to run forever");
			ivjJCheckBoxNeverStop.setMnemonic(78);
			ivjJCheckBoxNeverStop.setText("Never Stop");
			ivjJCheckBoxNeverStop.setMaximumSize(new java.awt.Dimension(87, 22));
			ivjJCheckBoxNeverStop.setActionCommand("Never Stop");
			ivjJCheckBoxNeverStop.setMinimumSize(new java.awt.Dimension(87, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxNeverStop;
}

/**
 * Return the JCheckBoxStartStopNow property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxStartStopNow() {
	if (ivjJCheckBoxStartStopNow == null) {
		try {
			ivjJCheckBoxStartStopNow = new javax.swing.JCheckBox();
			ivjJCheckBoxStartStopNow.setName("JCheckBoxStartStopNow");
			ivjJCheckBoxStartStopNow.setMnemonic(83);
			ivjJCheckBoxStartStopNow.setText("Start Now");
			ivjJCheckBoxStartStopNow.setMaximumSize(new java.awt.Dimension(81, 22));
			ivjJCheckBoxStartStopNow.setActionCommand("Start Now");
			ivjJCheckBoxStartStopNow.setMinimumSize(new java.awt.Dimension(81, 22));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxStartStopNow;
}

/**
 * Return the JComboBoxGear property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxGear() {
	if (ivjJComboBoxGear == null) {
		try {
			ivjJComboBoxGear = new javax.swing.JComboBox();
			ivjJComboBoxGear.setName("JComboBoxGear");
			ivjJComboBoxGear.setEditor(new javax.swing.plaf.metal.MetalComboBoxEditor.UIResource());
			ivjJComboBoxGear.setRenderer(new javax.swing.plaf.basic.BasicComboBoxRenderer.UIResource());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxGear;
}

/**
 * Return the JLabelGear property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGear() {
	if (ivjJLabelGear == null) {
		try {
			ivjJLabelGear = new javax.swing.JLabel();
			ivjJLabelGear.setName("JLabelGear");
			ivjJLabelGear.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelGear.setText("Gear:");
			ivjJLabelGear.setMaximumSize(new java.awt.Dimension(36, 19));
			ivjJLabelGear.setMinimumSize(new java.awt.Dimension(36, 19));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGear;
}

/**
 * Return the JLabelLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelLabelStartHRMN() {
	if (ivjJLabelLabelStartHRMN == null) {
		try {
			ivjJLabelLabelStartHRMN = new javax.swing.JLabel();
			ivjJLabelLabelStartHRMN.setName("JLabelLabelStartHRMN");
			ivjJLabelLabelStartHRMN.setText("(HH:mm)");
			ivjJLabelLabelStartHRMN.setMaximumSize(new java.awt.Dimension(51, 16));
			ivjJLabelLabelStartHRMN.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelLabelStartHRMN.setEnabled(false);
			ivjJLabelLabelStartHRMN.setMinimumSize(new java.awt.Dimension(51, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelLabelStartHRMN;
}

/**
 * Return the JLabelLabel1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelLabelStopHRMN() {
	if (ivjJLabelLabelStopHRMN == null) {
		try {
			ivjJLabelLabelStopHRMN = new javax.swing.JLabel();
			ivjJLabelLabelStopHRMN.setName("JLabelLabelStopHRMN");
			ivjJLabelLabelStopHRMN.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelLabelStopHRMN.setText("(HH:mm)");
			ivjJLabelLabelStopHRMN.setMaximumSize(new java.awt.Dimension(51, 16));
			ivjJLabelLabelStopHRMN.setMinimumSize(new java.awt.Dimension(51, 16));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelLabelStopHRMN;
}

/**
 * Return the JLabelTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStartTime() {
	if (ivjJLabelStartTime == null) {
		try {
			ivjJLabelStartTime = new javax.swing.JLabel();
			ivjJLabelStartTime.setName("JLabelStartTime");
			ivjJLabelStartTime.setText("Start Time:");
			ivjJLabelStartTime.setMaximumSize(new java.awt.Dimension(69, 19));
			ivjJLabelStartTime.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStartTime.setEnabled(false);
			ivjJLabelStartTime.setMinimumSize(new java.awt.Dimension(69, 19));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStartTime;
}

/**
 * Return the JLabelStopTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStopTime() {
	if (ivjJLabelStopTime == null) {
		try {
			ivjJLabelStopTime = new javax.swing.JLabel();
			ivjJLabelStopTime.setName("JLabelStopTime");
			ivjJLabelStopTime.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStopTime.setText("Stop Time:");
			ivjJLabelStopTime.setMaximumSize(new java.awt.Dimension(68, 19));
			ivjJLabelStopTime.setMinimumSize(new java.awt.Dimension(68, 19));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStopTime;
}

/**
 * Return the JPanelControls property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelControls() {
	if (ivjJPanelControls == null) {
		try {
			ivjJPanelControls = new javax.swing.JPanel();
			ivjJPanelControls.setName("JPanelControls");
			ivjJPanelControls.setPreferredSize(new java.awt.Dimension(285, 232));
			ivjJPanelControls.setLayout(new java.awt.GridBagLayout());
			ivjJPanelControls.setMaximumSize(new java.awt.Dimension(285, 232));

			java.awt.GridBagConstraints constraintsJCheckBoxStartStopNow = new java.awt.GridBagConstraints();
			constraintsJCheckBoxStartStopNow.gridx = 1; constraintsJCheckBoxStartStopNow.gridy = 1;
			constraintsJCheckBoxStartStopNow.gridwidth = 3;
			constraintsJCheckBoxStartStopNow.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxStartStopNow.ipadx = 16;
			constraintsJCheckBoxStartStopNow.insets = new java.awt.Insets(3, 3, 1, 88);
			getJPanelControls().add(getJCheckBoxStartStopNow(), constraintsJCheckBoxStartStopNow);

			java.awt.GridBagConstraints constraintsJLabelStartTime = new java.awt.GridBagConstraints();
			constraintsJLabelStartTime.gridx = 1; constraintsJLabelStartTime.gridy = 2;
			constraintsJLabelStartTime.gridwidth = 2;
			constraintsJLabelStartTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelStartTime.ipadx = 17;
			constraintsJLabelStartTime.insets = new java.awt.Insets(2, 3, 3, 3);
			getJPanelControls().add(getJLabelStartTime(), constraintsJLabelStartTime);

			java.awt.GridBagConstraints constraintsJTextFieldStartTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldStartTime.gridx = 3; constraintsJTextFieldStartTime.gridy = 2;
			constraintsJTextFieldStartTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldStartTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldStartTime.weightx = 1.0;
			constraintsJTextFieldStartTime.ipadx = 87;
			constraintsJTextFieldStartTime.insets = new java.awt.Insets(2, 4, 2, 1);
			getJPanelControls().add(getJTextFieldStartTime(), constraintsJTextFieldStartTime);

			java.awt.GridBagConstraints constraintsJLabelLabelStartHRMN = new java.awt.GridBagConstraints();
			constraintsJLabelLabelStartHRMN.gridx = 4; constraintsJLabelLabelStartHRMN.gridy = 2;
			constraintsJLabelLabelStartHRMN.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelLabelStartHRMN.ipadx = 7;
			constraintsJLabelLabelStartHRMN.ipady = -2;
			constraintsJLabelLabelStartHRMN.insets = new java.awt.Insets(5, 2, 5, 37);
			getJPanelControls().add(getJLabelLabelStartHRMN(), constraintsJLabelLabelStartHRMN);

			java.awt.GridBagConstraints constraintsJCheckBoxNeverStop = new java.awt.GridBagConstraints();
			constraintsJCheckBoxNeverStop.gridx = 1; constraintsJCheckBoxNeverStop.gridy = 4;
			constraintsJCheckBoxNeverStop.gridwidth = 2;
			constraintsJCheckBoxNeverStop.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxNeverStop.ipadx = -1;
			constraintsJCheckBoxNeverStop.insets = new java.awt.Insets(3, 3, 0, 3);
			getJPanelControls().add(getJCheckBoxNeverStop(), constraintsJCheckBoxNeverStop);

			java.awt.GridBagConstraints constraintsJTextFieldStopTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldStopTime.gridx = 3; constraintsJTextFieldStopTime.gridy = 5;
			constraintsJTextFieldStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldStopTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldStopTime.weightx = 1.0;
			constraintsJTextFieldStopTime.ipadx = 87;
			constraintsJTextFieldStopTime.insets = new java.awt.Insets(0, 4, 2, 1);
			getJPanelControls().add(getJTextFieldStopTime(), constraintsJTextFieldStopTime);

			java.awt.GridBagConstraints constraintsJLabelStopTime = new java.awt.GridBagConstraints();
			constraintsJLabelStopTime.gridx = 1; constraintsJLabelStopTime.gridy = 5;
			constraintsJLabelStopTime.gridwidth = 2;
			constraintsJLabelStopTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelStopTime.ipadx = 18;
			constraintsJLabelStopTime.insets = new java.awt.Insets(1, 3, 2, 3);
			getJPanelControls().add(getJLabelStopTime(), constraintsJLabelStopTime);

			java.awt.GridBagConstraints constraintsJLabelLabelStopHRMN = new java.awt.GridBagConstraints();
			constraintsJLabelLabelStopHRMN.gridx = 4; constraintsJLabelLabelStopHRMN.gridy = 5;
			constraintsJLabelLabelStopHRMN.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelLabelStopHRMN.ipadx = 7;
			constraintsJLabelLabelStopHRMN.ipady = -2;
			constraintsJLabelLabelStopHRMN.insets = new java.awt.Insets(3, 2, 5, 37);
			getJPanelControls().add(getJLabelLabelStopHRMN(), constraintsJLabelLabelStopHRMN);

			java.awt.GridBagConstraints constraintsJComboBoxGear = new java.awt.GridBagConstraints();
			constraintsJComboBoxGear.gridx = 2; constraintsJComboBoxGear.gridy = 7;
			constraintsJComboBoxGear.gridwidth = 3;
			constraintsJComboBoxGear.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxGear.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxGear.weightx = 1.0;
			constraintsJComboBoxGear.ipadx = 75;
			constraintsJComboBoxGear.insets = new java.awt.Insets(3, 2, 3, 33);
			getJPanelControls().add(getJComboBoxGear(), constraintsJComboBoxGear);

			java.awt.GridBagConstraints constraintsJLabelGear = new java.awt.GridBagConstraints();
			constraintsJLabelGear.gridx = 1; constraintsJLabelGear.gridy = 7;
			constraintsJLabelGear.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelGear.ipadx = 9;
			constraintsJLabelGear.ipady = -5;
			constraintsJLabelGear.insets = new java.awt.Insets(6, 3, 9, 1);
			getJPanelControls().add(getJLabelGear(), constraintsJLabelGear);

			java.awt.GridBagConstraints constraintsJPanelOkCancel = new java.awt.GridBagConstraints();
			constraintsJPanelOkCancel.gridx = 1; constraintsJPanelOkCancel.gridy = 8;
			constraintsJPanelOkCancel.gridwidth = 4;
			constraintsJPanelOkCancel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelOkCancel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJPanelOkCancel.weightx = 1.0;
			constraintsJPanelOkCancel.weighty = 1.0;
			constraintsJPanelOkCancel.ipadx = 117;
			constraintsJPanelOkCancel.ipady = 5;
			constraintsJPanelOkCancel.insets = new java.awt.Insets(4, 3, 7, 4);
			getJPanelControls().add(getJPanelOkCancel(), constraintsJPanelOkCancel);

			java.awt.GridBagConstraints constraintsDateComboStop = new java.awt.GridBagConstraints();
			constraintsDateComboStop.gridx = 3; constraintsDateComboStop.gridy = 6;
			constraintsDateComboStop.gridwidth = 2;
			constraintsDateComboStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsDateComboStop.anchor = java.awt.GridBagConstraints.WEST;
			constraintsDateComboStop.weightx = 1.0;
			constraintsDateComboStop.ipadx = 55;
			constraintsDateComboStop.insets = new java.awt.Insets(2, 4, 2, 33);
			getJPanelControls().add(getDateComboStop(), constraintsDateComboStop);

			java.awt.GridBagConstraints constraintsDateComboStart = new java.awt.GridBagConstraints();
			constraintsDateComboStart.gridx = 3; constraintsDateComboStart.gridy = 3;
			constraintsDateComboStart.gridwidth = 2;
			constraintsDateComboStart.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsDateComboStart.anchor = java.awt.GridBagConstraints.WEST;
			constraintsDateComboStart.weightx = 1.0;
			constraintsDateComboStart.ipadx = 55;
			constraintsDateComboStart.insets = new java.awt.Insets(2, 4, 3, 33);
			getJPanelControls().add(getDateComboStart(), constraintsDateComboStart);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelControls;
}

/**
 * Return the JPanelMultiSelect property value.
 * @return com.cannontech.common.gui.util.MultiSelectJPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.MultiSelectJPanel getJPanelMultiSelect() {
	if (ivjJPanelMultiSelect == null) {
		try {
			ivjJPanelMultiSelect = new com.cannontech.common.gui.util.MultiSelectJPanel();
			ivjJPanelMultiSelect.setName("JPanelMultiSelect");
			ivjJPanelMultiSelect.setPreferredSize(new java.awt.Dimension(285, 232));
			ivjJPanelMultiSelect.setMinimumSize(new java.awt.Dimension(285, 232));
			ivjJPanelMultiSelect.setMaximumSize(new java.awt.Dimension(285, 232));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMultiSelect;
}

/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelOkCancel() {
	if (ivjJPanelOkCancel == null) {
		try {
			ivjJPanelOkCancel = new javax.swing.JPanel();
			ivjJPanelOkCancel.setName("JPanelOkCancel");
			ivjJPanelOkCancel.setLayout(getJPanelOkCancelFlowLayout());
			ivjJPanelOkCancel.setMinimumSize(new java.awt.Dimension(161, 35));
			getJPanelOkCancel().add(getJButtonOk(), getJButtonOk().getName());
			getJPanelOkCancel().add(getJButtonCancel(), getJButtonCancel().getName());
			ivjJPanelOkCancel.add(getJButtonMultipleSelect());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelOkCancel;
}

/**
 * Return the JPanelOkCancelFlowLayout property value.
 * @return java.awt.FlowLayout
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.FlowLayout getJPanelOkCancelFlowLayout() {
	java.awt.FlowLayout ivjJPanelOkCancelFlowLayout = null;
	try {
		/* Create part */
		ivjJPanelOkCancelFlowLayout = new java.awt.FlowLayout();
		ivjJPanelOkCancelFlowLayout.setAlignment(java.awt.FlowLayout.CENTER);
		ivjJPanelOkCancelFlowLayout.setVgap(5);
		ivjJPanelOkCancelFlowLayout.setHgap(5);
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjJPanelOkCancelFlowLayout;
}


/**
 * Return the JTextFieldStartTime property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStartTime() {
	if (ivjJTextFieldStartTime == null) {
		try {
			ivjJTextFieldStartTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldStartTime.setName("JTextFieldStartTime");
			ivjJTextFieldStartTime.setHighlighter(new javax.swing.plaf.basic.BasicTextUI.BasicHighlighter());
			ivjJTextFieldStartTime.setText("16:25");
			ivjJTextFieldStartTime.setCaretPosition(5);
			ivjJTextFieldStartTime.setSelectionEnd(5);
			ivjJTextFieldStartTime.setEnabled(false);
			ivjJTextFieldStartTime.setSelectionStart(5);
			// user code begin {1}

			ivjJTextFieldStartTime.setTimeText( new java.util.Date() );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldStartTime;
}

/**
 * Return the JTextFieldStopTime property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStopTime() {
	if (ivjJTextFieldStopTime == null) {
		try {
			ivjJTextFieldStopTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldStopTime.setName("JTextFieldStopTime");
			ivjJTextFieldStopTime.setHighlighter(new javax.swing.plaf.basic.BasicTextUI.BasicHighlighter());
			ivjJTextFieldStopTime.setText("20:25");
			// user code begin {1}

			if( getMode() == MODE_STOP )
				ivjJTextFieldStopTime.setTimeText( new java.util.Date() );
			else
			{
				java.util.GregorianCalendar cal = new java.util.GregorianCalendar();
				cal.setTime( new java.util.Date() );

				StringBuffer hour = new StringBuffer( String.valueOf(cal.get( java.util.GregorianCalendar.HOUR_OF_DAY)+4) );
				if( hour.length() < 2 )
					hour.insert(0, "0" );
					
				StringBuffer minute = new StringBuffer( String.valueOf(cal.get(java.util.GregorianCalendar.MINUTE)) );
				if( minute.length() < 2 )
					minute.insert(0, "0" );
					
				if( cal.get( java.util.GregorianCalendar.HOUR_OF_DAY) > 20 )
					hour = new StringBuffer("23");
					
				ivjJTextFieldStopTime.setText( hour + ":" + minute );
			}
		
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldStopTime;
}

/**
 * Insert the method's description here.
 * Creation date: (7/18/2001 5:13:45 PM)
 * @return int
 */
public int getMode() {
	return mode;
}


/**
 * Insert the method's description here.
 * Creation date: (1/21/2001 5:32:52 PM)
 * @param newLoadControlProgram LMProgramBase
 */
public Object[] getMultiSelectObject()
{
	if( getJPanelMultiSelect().isVisible() )
		return getJPanelMultiSelect().getSelectedData();
	else
		return null;
}


/**
 * Insert the method's description here.
 * Creation date: (7/17/2001 9:18:54 AM)
 * @return int
 */
public com.cannontech.loadcontrol.data.LMProgramDirectGear getSelectedGear() 
{
	if( getJComboBoxGear().isEnabled() 
		 && getJComboBoxGear().getSelectedIndex() >= 0 )
	{
		return (com.cannontech.loadcontrol.data.LMProgramDirectGear)getJComboBoxGear().getSelectedItem();
	}
	else
		return null;
}


/**
 * Insert the method's description here.
 * Creation date: (3/12/2001 2:56:28 PM)
 * @return java.util.Date
 */
public java.util.Date getStartTime()
{
	if( getJTextFieldStartTime().getText() == null
		 || getJTextFieldStartTime().getText().length() <= 0 )
	{
		return com.cannontech.common.util.CtiUtilities.get1990GregCalendar().getTime();
	}
	else
	{
		java.util.GregorianCalendar c = new java.util.GregorianCalendar();
		c.setTime( getDateComboStart().getSelectedDate() );
		
		String start = getJTextFieldStartTime().getTimeText();
		
		try
		{
			c.set(java.util.GregorianCalendar.HOUR_OF_DAY, Integer.parseInt( start.substring(0,2) ) );
			c.set(java.util.GregorianCalendar.MINUTE, Integer.parseInt( start.substring(3,5) ) );
			c.set(java.util.GregorianCalendar.SECOND, 0 );
			return c.getTime();
		}
		catch( Exception e )
		{
			com.cannontech.clientutils.CTILogger.info("*** Received a bad value in getStartTime() of " + this.getClass().getName() + " : " + e.getMessage() );
			return com.cannontech.common.util.CtiUtilities.get1990GregCalendar().getTime();
		}
		
	}

}


/**
 * Insert the method's description here.
 * Creation date: (3/12/2001 2:56:28 PM)
 * @return java.util.Date
 */
public java.util.Date getStopTime()
{
	if( getJCheckBoxNeverStop().isSelected() )
	{
		java.util.GregorianCalendar c = new java.util.GregorianCalendar();
		c.set( c.YEAR, c.get(c.YEAR) + 1 ); //set the stop time to 1 year from now
		return c.getTime();
	}
	else if(	 getJTextFieldStopTime().getText() == null
				 || getJTextFieldStopTime().getText().length() <= 0 )
	{
		return com.cannontech.common.util.CtiUtilities.get1990GregCalendar().getTime();
	}
	else
	{
		java.util.GregorianCalendar c = new java.util.GregorianCalendar();
		c.setTime( getDateComboStop().getSelectedDate() );

		String stop = getJTextFieldStopTime().getTimeText();

		try
		{
			c.set(java.util.GregorianCalendar.HOUR_OF_DAY, Integer.parseInt( stop.substring(0,2) ) );
			c.set(java.util.GregorianCalendar.MINUTE, Integer.parseInt( stop.substring(3,5) ) );
			c.set(java.util.GregorianCalendar.SECOND, 0 );
			return c.getTime();
		}
		catch( Exception e )
		{
			com.cannontech.clientutils.CTILogger.info("*** Received a bad value in getStopTime() of " + this.getClass().getName() + " : " + e.getMessage() );
			return com.cannontech.common.util.CtiUtilities.get1990GregCalendar().getTime();
		}
		
	}
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getJButtonCancel().addActionListener(this);
	getJButtonOk().addActionListener(this);
	getJCheckBoxNeverStop().addActionListener(this);
	getJCheckBoxStartStopNow().addActionListener(this);
	getJButtonMultipleSelect().addActionListener(this);
}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DirectControlJPanel");
		setLayout(getDirectControlJPanelFlowLayout());
		setMaximumSize(new java.awt.Dimension(315, 260));
		setPreferredSize(new java.awt.Dimension(315, 260));
		setBounds(new java.awt.Rectangle(0, 0, 300, 234));
		setSize(577, 237);
		setMinimumSize(new java.awt.Dimension(315, 260));
		add(getJPanelControls(), getJPanelControls().getName());
		add(getJPanelMultiSelect(), getJPanelMultiSelect().getName());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	getJPanelMultiSelect().setVisible(false);
	getJButtonOk().requestFocus();

	// user code end
}

/**
 * Insert the method's description here.
 * Creation date: (3/12/2001 10:18:44 AM)
 * @return boolean
 */
private boolean isInputValid() 
{
	return true;
}


/**
 * Insert the method's description here.
 * Creation date: (7/11/2001 12:46:05 PM)
 * @return boolean
 */
public boolean isStopStartNowSelected() 
{
	return getJCheckBoxStartStopNow().isSelected();
}


/**
 * Comment
 */
public void jButtonCancel_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	choice = CANCEL_CHOICE;
	exit();
	
	return;
}


/**
 * Comment
 */
public void jButtonMultipleSelect_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	if( getJButtonMultipleSelect().getText().equals("Select Multiple>>") )
	{
		getJButtonMultipleSelect().setText("Select Single<<");
		setParentWidth( 285 ); //300, 250
		getJPanelMultiSelect().setVisible(true);
		getJComboBoxGear().setEnabled(false);
	}
	else
	{
		getJButtonMultipleSelect().setText("Select Multiple>>");
		setParentWidth( -285 );
		getJPanelMultiSelect().setVisible(false);
		getJComboBoxGear().setEnabled(true);
	}

	return;
}


/**
 * Comment
 */
public void jButtonOK_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	if( getMode() == MODE_START_STOP 
	 	 && getStartTime() != null
	 	 && getStopTime() != null )
	{
		if( getStartTime().after(com.cannontech.common.util.CtiUtilities.get1990GregCalendar().getTime())
			 && getStopTime().after(com.cannontech.common.util.CtiUtilities.get1990GregCalendar().getTime()) )
		{
			if( getStartTime().getTime() >= getStopTime().getTime() )
			{
				javax.swing.JOptionPane.showConfirmDialog( this, "Start time can not be greater than the stop time, try again.", 
							"Incorrect Entry", 
							javax.swing.JOptionPane.CLOSED_OPTION,							
							javax.swing.JOptionPane.WARNING_MESSAGE );
				return;
			}
		}

	}
	else if( getMode() == MODE_STOP
				&& getStopTime() != null )
	{
		if( getStartTime().after(com.cannontech.common.util.CtiUtilities.get1990GregCalendar().getTime())
			 && getStopTime().after(com.cannontech.common.util.CtiUtilities.get1990GregCalendar().getTime()) )
		{
			java.util.Date cDate = new java.util.Date();
			
			if( getStopTime().before(cDate) )
			{
				javax.swing.JOptionPane.showConfirmDialog( this, "Stop time can not be less than the current time, try again.", 
							"Incorrect Entry", 
							javax.swing.JOptionPane.CLOSED_OPTION, 
							javax.swing.JOptionPane.WARNING_MESSAGE );
				return;
			}
		}
	}

	
	choice = OK_CHOICE;
	exit();

	return;
}


/**
 * Comment
 */
public void jCheckBoxNeverStop_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	getJLabelStopTime().setEnabled( !getJCheckBoxNeverStop().isSelected() );
	getJTextFieldStopTime().setEnabled( !getJCheckBoxNeverStop().isSelected() );
	getJLabelLabelStopHRMN().setEnabled( !getJCheckBoxNeverStop().isSelected() );
	getDateComboStop().setEnabled( !getJCheckBoxNeverStop().isSelected() );

	if( getJCheckBoxNeverStop().isSelected() )
		getJButtonOk().setEnabled( true );
	
	return;
}


/**
 * Comment
 */
public void jCheckBoxStartStopNow_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	if( getMode() == MODE_STOP )
	{
		getJLabelStopTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		getJTextFieldStopTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		getJLabelLabelStopHRMN().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		getDateComboStop().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
	}
	else if( getMode() == MODE_START_STOP )
	{
		getJLabelStartTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		getJTextFieldStartTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		getJLabelLabelStartHRMN().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		getDateComboStart().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
	}


	if( getJCheckBoxStartStopNow().isSelected() )
		getJButtonOk().setEnabled( true );

	return;
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		DirectControlJPanel aDirectControlJPanel;
		aDirectControlJPanel = new DirectControlJPanel();
		frame.setContentPane(aDirectControlJPanel);
		frame.setSize(aDirectControlJPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * Insert the method's description here.
 * Creation date: (7/17/2001 9:24:14 AM)
 * @param gears java.util.Vector
 */
public void setGears(java.util.Vector gears) 
{
	getJComboBoxGear().removeAllItems();
	
	if( gears != null )
	{
		for( int i = 0; i < gears.size(); i++ )
		{
			getJComboBoxGear().addItem( gears.get(i) );
		}

		if( getJComboBoxGear().getItemCount() > 0 )
			getJComboBoxGear().setSelectedIndex(0);
	}

}


/**
 * Insert the method's description here.
 * Creation date: (7/18/2001 5:13:45 PM)
 * @param newMode int
 */
public void setMode(int newMode) 
{
	mode = newMode;
	getJCheckBoxStartStopNow().doClick();

	if( mode == MODE_STOP )
	{
		getJLabelStartTime().setVisible(false);
		getJTextFieldStartTime().setVisible(false);
		getJLabelLabelStartHRMN().setVisible(false);
		getDateComboStart().setVisible(false);
		
		getJCheckBoxNeverStop().setVisible(false);
		getJCheckBoxStartStopNow().setText("Stop Now");
	}

}


/**
 * Insert the method's description here.
 * Creation date: (1/21/2001 5:32:52 PM)
 * @param newLoadControlProgram LMProgramBase
 */
public void setMultiSelectObject( Object[] rows ) 
{
	getJPanelMultiSelect().setSelectableData( rows );
}


/**
 * Insert the method's description here.
 * Creation date: (3/12/2001 3:40:34 PM)
 *
 * Method to override if desired 
 */
public void setParentWidth( int x )
{
}
}
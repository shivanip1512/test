package com.cannontech.loadcontrol.gui.manualentry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultCellEditor;

import com.cannontech.clientutils.CTILogger;
import com.cannontech.common.gui.panel.IMultiSelectModel;
import com.cannontech.common.gui.util.ComboBoxTableRenderer;
import com.cannontech.common.util.CtiUtilities;
import com.cannontech.database.cache.functions.LMFuncs;
import com.cannontech.database.data.lite.LiteLMProgScenario;
import com.cannontech.database.data.lite.LiteYukonPAObject;
import com.cannontech.database.db.device.lm.IlmDefines;
import com.cannontech.loadcontrol.LCUtils;
import com.cannontech.loadcontrol.data.IGearProgram;
import com.cannontech.loadcontrol.data.LMProgramBase;
import com.cannontech.loadcontrol.messages.LMManualControlMsg;

/**
 * Insert the type's description here.
 * Creation date: (3/12/2001 9:57:47 AM)
 * @author: 
 */
public class DirectControlJPanel extends javax.swing.JPanel implements java.awt.event.ActionListener {
	private java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");
	//modes the panel is in
	public static final int MODE_START_STOP = 0;
	public static final int MODE_STOP = 1;
	//choices the user may choose
	public static final int CANCEL_CHOICE = 0;
	public static final int OK_CHOICE = 1;
	private int choice = CANCEL_CHOICE;
	private int mode = MODE_START_STOP;
	private javax.swing.JButton ivjJButtonCancel = null;
	private javax.swing.JButton ivjJButtonOk = null;
	private javax.swing.JLabel ivjJLabelStartTime = null;
	private javax.swing.JLabel ivjJLabelStopTime = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStartTime = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStopTime = null;
	private javax.swing.JCheckBox ivjJCheckBoxNeverStop = null;
	private javax.swing.JLabel ivjJLabelLabelStartHRMN = null;
	private javax.swing.JLabel ivjJLabelLabelStopHRMN = null;
	private javax.swing.JPanel ivjJPanelOkCancel = null;
	private javax.swing.JCheckBox ivjJCheckBoxStartStopNow = null;
	private javax.swing.JComboBox ivjJComboBoxGear = null;
	private javax.swing.JLabel ivjJLabelGear = null;
	private java.awt.FlowLayout ivjJPanelOkCancelFlowLayout = null;
	private com.cannontech.common.gui.panel.MultiSelectJPanel ivjJPanelMultiSelect = null;
	private javax.swing.JPanel ivjJPanelControls = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboStart = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboStop = null;
	private IMultiSelectModel multiSelectPrgModel = null;
	private javax.swing.JComboBox ivjJComboBoxScenario = null;
	private javax.swing.JLabel ivjJLabelScenario = null;

	//attributes used when a scenarios are present
	private boolean _isScenario = false;
	
	//contains <Integer(ProgID), LMProgramBase>
	private Map allPrograms = null;
	
	
	/**
	 * ManualChangeJPanel constructor comment.
	 */
	public DirectControlJPanel() 
	{
		this( false, null );
	}

	/**
	 * ManualChangeJPanel constructor comment.
	 */
	public DirectControlJPanel( Map allProgs )
	{
		this( true, allProgs );
	}

	/**
	 * ManualChangeJPanel constructor comment.
	 */
	private DirectControlJPanel( boolean showScenario, Map allProgs ) 
	{
		super();
		_isScenario = showScenario;
		allPrograms = allProgs;		
		initialize();
	}

	

	/**
	 * Method to handle events for the ActionListener interface.
	 * @param e java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	public void actionPerformed(java.awt.event.ActionEvent e) {
		// user code begin {1}
		
		if( e.getSource() == getJComboBoxGear() ) 
			jComboBoxGear_ActionPerformed( e );
		
		// user code end
		if (e.getSource() == getJButtonCancel()) 
			connEtoC1(e);
		if (e.getSource() == getJButtonOk()) 
			connEtoC2(e);
		if (e.getSource() == getJCheckBoxNeverStop()) 
			connEtoC3(e);
		if (e.getSource() == getJCheckBoxStartStopNow()) 
			connEtoC4(e);
		// user code begin {2}
		
		if( e.getSource() == getJComboBoxScenario() ) 
			action_Scenario( e );
		
		// user code end
	}


	/**
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC1(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jButtonCancel_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}


	/**
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC2(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jButtonOK_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}


	/**
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC3(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jCheckBoxNeverStop_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}


	/**
	 * connEtoC4:  (JCheckBoxStartStopNow.action.actionPerformed(java.awt.event.ActionEvent) --> DirectControlJPanel.jCheckBoxStartStopNow_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC4(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jCheckBoxStartStopNow_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	private void action_Scenario( java.awt.event.ActionEvent event )
	{
		if( allPrograms == null || getJComboBoxScenario().getSelectedItem() == null)
			return;

		LiteYukonPAObject litePAO =
			(LiteYukonPAObject)getJComboBoxScenario().getSelectedItem();

		if( litePAO != null )
		{
			LiteLMProgScenario[] programs = 
					LMFuncs.getLMScenarioProgs( litePAO.getYukonID() );

			ArrayList selPrgs = new ArrayList( programs.length );

			for( int i = 0; i < programs.length; i++ )
			{
				LiteLMProgScenario p = programs[i];
				
				LMProgramBase lmProg = 
					(LMProgramBase)allPrograms.get( new Integer(p.getProgramID()) );
					
				if( lmProg != null )
				{
					MultiSelectProg selProg = new MultiSelectProg( lmProg );
					selProg.setGearNum( new Integer(p.getStartGear()) );
					selProg.setStartDelay( new Integer(p.getStartDelay()) );
					selProg.setStopOffset( new Integer(p.getStopOffset()) );

					selPrgs.add( selProg );
				}
				else
				{
					CTILogger.error( 
						" *** A Control Scenario contains a LMProgram that does not belong to a Control Area, programID = " +
						p.getProgramID() );
				}
				
				
			}

			
			MultiSelectProg[] progArray = new MultiSelectProg[ selPrgs.size() ];
			setMultiSelectScenario( (MultiSelectProg[])selPrgs.toArray(progArray) );
		}


	}

	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 3:40:34 PM)
	 *
	 * Method to override if desired 
	 */
	public void exit() 
	{
		
	}


	/**
	 * 
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G440306B0GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8FDC14D53A3F96155D584495B7ABAAACF743958B0D4A4A3B17ADEF391BDBF657B67746E7AF774696FBAF3534353F7CED6E7A72CFC5519471CF2509839A9A71C7D00928C491A187980194B794866685860719F166C5C6A53D4FB967FD4E7B4EBB6F8CE059DDBFBE3E6F791E731C67B94FF94E7F730EC2763670746414ECC1C8CE9764BF7B13611F0B02E03D75DF3391DBD1EF4D90D4FF36832D9306D6
	2541F3B34495BFE54DD8AB04742E00F08104E367D8B3B6417BFAE1D26FD4873C7811B384F11F970FF9A6301CEE974AD9CE432FE7E442F38DD0B1E0ADC06175C4FE464A4DB26E01709A791DD0F20AA0F4B410B4C7CD1BD5F83C1C2E8C62EA01529AC91A3C15DB64788840C81A98F8AEECE0E9936149143C2E22DCCE57B6A1C2F87317EDA92B09ACD57EC846C6466B141FB9C2BCB5C42A60AC2806E72569CC4F67DD0E7E42AE335D6E30CBE2D7EF214DE136F4413B4BE1AB6C993096761B6D83E61B8840790A0AEA2B
	CB6C128E3168AFCDE63BE80B233A1FB52D2079026E9036198876172F093D72603D922845047ABF373AD256AF74CC0490F7CF23DF7D23CCCC6F05A6C57F606D065420E3A47F7A1519B2DFB6040DC0CC17C9ABD117F947D017BF9CA5E905A6EB46E62062A644230C842F05F087102789F57C6CC35431756243421B357BD25F7123E3C89353EDF613222310EDC8FD177A4C1F5C245E5FA4F21B2D9985C0A6A0A7D088507B54D7E738F643332A936C5A5F6F30D7B91D87ED96D73D43A25A603D2282E2E42CC96CF238AC
	02407C71062F8BF474C10AE87676C5C22CECA784741F48267B045AC7EBD253F54A967D7C6914B9F29E8B1A1532E536903B595B085D12GCF1673E578C50A1BDA941C5515C0F19236C15C029634F36B9A544518F6373036E4EC4AF29DDDA6BFFEAE256CAB260371ABC597E663798344469E40C301A20166824583259DC79B3F65AA9D4E46F5607FAE3B5956BC5069B43B240383D61BC5F44936EEDE994856FA44784C2366E3F609A8D557D16C83E3F46D929BA126649CE776A8BF2E5805493E4D2F6C56633E3E3106
	5761A95AA6EC47D99D26F23C0762C3AA1C556D9FE95BA261E008CB82E269736A895EF2C26BA3A594F71E507A48C3C67411E008CB82E2755BB7C87A4516D6E8B7C063004201E200E20112DA310E8F3A0BC6580ECC2A7AE53CEF3BB742D374C8AEF31D5DAD196DDD62F1334BEA6E3409EEC1CE13A6913BF6FA71E5C844773AC0469151AE3A4C1255E1075C4D7DA2B8131B2549125611B4AE114636D87BC590506F94B05F772475445EE637741553E216C4A5850BB7C844A6674C47A1C748G5E8F1CA4763A73EB524F
	2D05770213E82BDBBC848B02F058C9344B9DD296BC0F02F30BB65205F791B54C2E736823D29B34CFA18A52377E5D1A3198A862EBEC1F2F35229FD62F1EA194BCFFD9578F89F534B11F7234E97DF0AC4DBF9C709820B8A061940E294B5ADAE5FEA213BC097C11361556GE9C9F9180CEDDCC6062AED0ED4C6FA00B862734C6E6997086F66C039AA015ACE216D97C9B94CA78F1A5DA2FAE1238B9CC834A8B54152BEBFC04698719C0C355522D334DB6045AD7BC06CC006621F5D8E6EBB7FC5F152DF9D8287F2F3BCE1
	E09D43A18F3537E3FC920DB7CB124B5AB9A0094D22A4D96DBD8A7FE22A0B5B2BABF44BE5DDFE1114D502B286830571320EBD37DE65E7C607634C00330534A059DFE752F1B98A524F63755FE5A4F32CC49E6E27E1A57E4FC7316E7408700D26EF556F2357988349C87D9679ABB2F65713B6007DE63A0C33387DB4AE7334B5238C288DA868B416FF8E55CD4B77ED7471556DF9AAC31DFF46F7A8037906B4685F37AF8E6A7B7658C1FD5F3EE1B0306F0E9F5473DD967723C1D2C64720DD5596EE9FA47DA34CF96DA2ED
	101CC5E0F36557DAC8B92CF62BF442EA699125E66B859166242709CFBFC87B60C8F80FB90DFD66E0AE7619F9972689B16DFFCF511BDFCD7E7179144D6D4CFF8B5A15BE13699466A1EDCC34097DE028C30E813B44703BE97FAE636ED40A95EF3D157066FFF9F0C0129C76C3E470329518E9D98A5943A43A3A9D2EFE51125FE7BEE7AEB48FCA0534AE8A2BE874E1723EAB67630FBF4F511961977429B3EE2F5264E8741F65273B0E6FAA16FD8B66E087A72875ECBCF395F4ECBCBADA7DCA38FEEBF65F4374BB54ABF6
	1DB96870B4G032BD9F2B83FD3C5FDF29F2D46FBE4FDEF2A19662DEF33848ECFF2ECF08CDE95155582C62BB519FF337123E208783691FC3E8348530E63478767C9BC0E9F72A0F948E13331E689F1C96D344D35E52B5AD1C8BBDB0B474213456FBB2597DF5E01718F6B469BF9FC79E93D780E8E54F3558552DF3B453383A2B488B2409D954F63DC6FC216A66E3859B6204CA15F3B308A1EB6555848705597755B7B7A0BE4BCBC43735FF4F119C06602ACCF56BFC519C91ECE17359F2692E43017779C662DD46FB9C8
	20BF591F188C4FC8A0465B12C546EC1DCA97024CA40FB37538A7B197F8E201164879D41AD91F455295B5E03A8590CEB0AB69D6F42A533D4453998137F4AA69023C525D52086996821E28CA1759455235F511F4733F4635FE9147DE22588E786747E9381E2ADF2B5EB391FE2D3F66A594AE679F5D25DDE7BA3EA179AE84BC3E8BFDE142C5751C274A6DF6F4D969B4DF2E5783C36A7E1AE10707D642335B6AF2431A53A2FA50B70E8E5175311943F27DCE7F68B341F7DDF358E2159CAE1CD29E9A248D2D45F18816A2
	3560DE0778F0F65CAA8E82BF5B9BC9ECC3FBAD6E42716A1B9A75FE4C1CF7FAD2D67931CD31055944E4D1ECB3F93DA115655DFF8A738E3160DE4CEB9C1B47B147E94484917D700DDD44D769FE9469C6BC056EC19853ABAA54FBCCFBD691BE32D7D4AE627ECDC497E9B7E1900E861A8F44561221F40DC9720E87ECCBB7366D29C6F55BEE81FC88A89C087529EF576F0167687BCE2C2BBEAB31653799B0D91D5C3D7E002C637C7B6E96AAAF5726686DBF0DFB27A9A53A1B55C5EC37D2A77137062796BC047BE42D8DE8
	0B7C9E6847FA5096C76B75ECB139876B242D3ADCA94B2887D6A6BB3391E5C7C23E71DC76389DEA59DBFA2D9955C03D3DA87B6933D5C476379DAB855CDB0861FA8C010C68DE546350DEBDBD92399E4F9C29D66B71AD86C0F96FED0F3A9F0A096B561D9B92922C2CBE332D5AFE2879B2E9874500D7DB319FFAF2E81D2A9FEA0216EF3677406842675F5F907F06F1C48EFB3EA1F269B8A260BA607536516CD535DAF14FA1C4A0B634C1F89CD0B850EC20C5DC37255F8C3B77F65893E06F4DF5EAB4FAAD36625A690DD1
	71E576A11FF4FAB4FCB91CEF7FAA6DBA322CCFD91F5676692FD55BGF7EA6202A0BCD903313D33AD96624711FDEC6FECB94773A9BED705B33F3F0F760FA49C8BF1874E202E3755EB4BB8750C373C98CD1871C57870FD208947EB78D8BBFA2719780ACE7F4EFA97814FC9CE9A35F3963297308472DCEB437163C5A30E8379B67441171349FCA1984291C0B1C031C0C2BF747DC0877A51979BAE690D255E3E68EFA0D576D018ADCEB7DC198DEDBEFCDA9BF674FB7331F2DFD33F02728B02279F6BB12B714AF4487161
	536A905B2FD70F1F9FFFDF3F9E3107146B51EC512B47B7A14F95F62C47FFA1D3B4010CEBB9F6AC4F13D7D81E054316A7482EE7538BFB5117426C68CBBBD389A6B8A05E01FEB37D92C9037D2B49E135CB82762D2D17491C5C613276D86D081D22D81743C5B79A587E578ABA974A01BCABF93E13857F7BA2F7897A7BA2BF967477C5268B01777C9E907C6D1BB07DEE647AC179B2983672B4E2960E5D44B18F47CE5239D9B00443B9B614C93039900E65582EBE02A5C1B853095823E5B4BF8817F1ACEA8341EAA15C41
	3167B6523DED8807B951DF8C345F0B0270FC20C40E97D21C0C65AB4E32F98D43233B300FA6BC6409FCA36D6F83911371ABAE83778E3F4BFD3B2DB45FDFECFC0756355BAD3AE907D5ED164CF25CAB5286C1E7BF2B415CAF8A385771DCFD061C663064B8D4425B43845A3792DD8B4E629CBB141E4BD8089D01C24F22AD63FC76CDA3A1AE662CFCE6ABBF934E8EEF5BA510E62D4BBB1D3CCF1D6C3FFD3C152C5FBE7E1ACC5A2A5BB1606A9235EDA0ADE5B30FD3FA76BAC96CA76611576274BC9AE6FABD22CF9B4A267C
	AC4E9F7F5694FF6D0C59FED2035A76FB385F5CD02F35E79E5824DC360BD1FEF6E86CA439FC6DBB8E30B020A8D59C13DD572816DD4A6B7DD68B29F792B75705753E360C547B9288E73B2D9985EE2C7739BB081E55EEA56FD6F8374961B172B354BDFC3DC7C01AB91AF4CC4F3FFA69D946EDF4F92F56C68B00BFDE4EE3317C4C1406171D83E94AA4BD1F7BA8154C21BCBCDCC44367859C83452AB55C878E5BAD72E040769E3651BE745740F0D38AE261947B8C3097B9361D7621E492FE1D00585D949B8F5886EE8767
	AAB20E584C679D83A0A3CCA269EED8259EDBEB81F3828549E5E1FC93B3499A3E5F6C31768F74538D6BAD83742E4AEAA2A39E52A6C93866BD50C77C5D69923BC517CB34306DEDB97DC95ADFF7403BEDG53BFD7C6F46AF48C58ADEECC17C07B704970BEF5G57CEB387098E5DAEF3BF38FF33D36C92EC67C85A27B6207E0BA0EDA2D0A66085C046F3A8A3E1A3555FEA5768AFECA2F222A1DD8CCF5B1BC272E2BB85729E169B6D901B3C0E47558F58A4EB33C83693391D189EAC3E718CDB3063DCF42657DCB4719C1B
	43948F423AEB905B420F0C5AF9C75B2062D3CEF88F9A7476B1B6DFDFC177A7A68F3279FABA4757D3BCD20533F97CEDC6DC3F46C0DC1E87474494BAA79C8761B00E55D0AC8A42B19CFB3E9E4762059CFBFDBB4192A01CF69E31DA830E3B1BB956EB40F13712E35338DC9347DE65F2AD9C3B5800F2BD9C7B23816586F34C140B7302F00EBDE3C4DD22B9761A91F5D94431B44A1B88E16182564B1D962C174C8B727A7902D28FE570DEFBC12FDE92E81F57F60159FFAB4717D2BCDC0533FA59C8F1920E07388597D127
	17695CF64E9058FB8831EBF6224D92B87664CE3459920E9D7F90ED36769BEE47C634D99E47FE5D0876A96758FDBB50BE63B8B6E5AF77910E7D77DE149B453146FDA8F78E476EEFC7398BB8D65301F263B9B6F9AF4AAD3B046D3F24032C4978DA016C0CD4D49CF1D9AD874DBDC65A233131E7861DBB923B56DE42316745D5442EE3A0BC99A86A926ED5FAF662DEE564CF6E960CE346685E9D0BEB69C919F7C93EB7F7C959BF494EB62466DFA6F77DCE12ADD8398F7820AF871EF6F1B007EF60D4DB7BC5BB39EC11DF
	DA3237A0E74F3E62DDCCFE7820FA7F26FC254D6F7E0D6D32BC9E4A4F304FAEA5B359EF2CD2E45FDFB692590C2FF7354277EA76CEAD9F5F7449AFAE48013F2545704F1E5232DDB8463F3A816DBC9B72CB3ACC3077B72A773FC85E644EE2A1E90BB43E5EAB1E7425101DAA7E32D7BC315135E96A7819DE7169AAFEE64F27F7E0FDAEF9BACA30BDE877FB9730FC0C3C6FAFBF0BB3AFA5577E8A6B735F56A8363929EBA4B6E5BE3A5230DF503F8759C5B7886895C827192E7AD46307FCC6426C7A87A34E1DC247207F7E
	045E091A8F61F820A5E3301D4CB062BAA9FBACE249CABB66584EDC5E0E47E21F3606762FE1900E66583B94A367AD64EC06E161816FB3E80964B712F451F2BAA66311D14998699D0AF4D57A7542EC5A27745BC52887EB979B7FBF22653D81E841D89C7F137711B3B2899682AC0D0326090378C4A0067D0DE242B5B0573886791EECA73E46B67949F61059EE91F0BE731E8173A8077446EB8856EE589CC0F746B7017205C27A70EBD0763FD159F791FF6058C6BAAE46C2B801E3D3A9369842E957A2161B0B690AB9F6
	1EE287A0EC3C96F57B3DF1F85DB6D1BDBC4093F4AD5A607DDCB2176B0739AC593BE0EDC9A0471B721E4003969C17232EC55F7C0F43F41C0070A20E990F208FAF6158F1BB410CC1B09F88C25FFC2D0C741F9E8807814D86DA843498E873F5E0EB2096A089A884A882E8AED09C50126BB00F743DA48FF2A63865FA1813G35DD4F4E9207609986B487A896E88950169BA08DD09B50508D18471632B8BF36C2DD083CE15BCE10EF1A90BFFCF3E5FC110A27FC84B2883548696282240F106DC6EC6A89D2375593FE4BCA
	86A25286360E22ED2AE9031F346F8A4AF80058BBA31031C6E0E38CF93E9FA08D3B634F4A07FD0B3CEE5CC14AA4B99C36962B33853A845977B750F9D69854FF448D580E26D36C8ED2A79C7BA34592A07CA647AE5379D866B8700BF13C2DB6E23AEA40064651B9D5E3F5G1DD3E5FB274B6FED40C30858100CF74EF14CB749BB1371821D4B4D85FC81177BAC6D936F85DA8298EB2F7FCCCCA673F8689CAE73C65075C664798FBA072B063069C65475D447F03A268750359772D96F256B4F29DE9260E3EE44B6B6EB55
	E86FBE3339F6E3A6DD835D48665A499CEF2578EC954E66607F398A3F83188BF1797F047B3861D924CF8C06F084D08C50A22045C059B7617EEBF4AA391F9470BC204561B40A67C41BEACB154DDD1E7DDABD97DCFB5B719454CBDB2E7C1B646FBDEE521E65E5E4933B75829E44F51A3672A3F89EB777791E7483E8F2B91C22CBBA4FD0FA3BC4EE67FF5AF0E5F74DFF3E9C67E0510F7ED418FDFD215F737F29327EF365673C151712313D2F93AE51F57D1B9037B6985681C0C6208EA0CFB07F56E1F58133B7D13FCA12
	4CDD3D74E6849A1BDCD6D0E032E9A00F9BFC1D9D9C6C5B870683968DB4CF9547FC66BD3AEE0E8D567AD2AE459302353E94F994FD69CD08EB7D810CA7F44F65B7FCFC1D8358C220A5C0EBEFE6FB4B2CCDED9E367D2B5BD4BE70D682ED1343A6F82FCAD53729C6BA4E37815EFBB30E572C4E788DBAC15947D82D60380DA1479D2C07A93D30EFBF0E6F1BC877A947AD20F3828363B030F87A29129C7F72F6F20E62E7AE3D3F942652FBF7E15AC386F5DE4C37661DD24F6FF3BE7AC4F7FE3F7814A5A574E679BB1A1B15
	B6E25B1FAB4F6FE73F2B68B47F6848F57A83AD7B7ECF306CAF3E2764B358C0660D0646B3F2397F763E9297EF98398CE32EF7BE5B37AA79BCE19CC9BE0C2F7A83056F7F0FC8BE73135F51B9DAA258EDB177137FF758F75FF0F58D7AF05EF8EB8659B72C0427E9BC33B773612EA34379301AFA01F788A8D78E07407B605225CBD773F2745B7577A12F23F343B0C89FB1DE71EDB23E685EE6D479B919C7FCE9B4F70AB61A00FCAC416388FDC9C67D9A2BE8337846E7F3DEA5035A267A860C4FD24B67F7CE9459D91A7C
	9DCE1A3D77DE221C35B6EE3DD63643C9C4FB37DF9805BA9DA07B08E8F6294A3C1273328806DFB8C7F82A4D12C859182AF25C6385EB3C634835C0B92E38DE25E717E8B73B2C8E0C2BF62ED36B21C44BF7AFDF723AB334F0BC3BAF33F8BC5E2759E3D247E70630F8D388467F7BCEBDFE8B0FEFE85463777078389DFA7C41BCFEE61EDEFCB80FEF753A7B99AD679F4B637FDC2A471F4463AB2B5471E993D8FC75840C8FB16A4537727854DC3D7CEDBCFE7EF6BD7D46CC40395E74EDCA9FF1EEE79E69F7EA9C2EAE511D
	A3750AB96E2EDE51B2E093F3A4C70EEB401E536DF091A7B648BE3113760565585FBC132364E57A100CFB866A73B94413643E6C756DCA9AE7E300BE29FCBF74C9FBF81F782BC6EDFE5BE4DF266BF0798F13310DF49F72DC64BFB3F13C58B27D9E217A0542949229B797891D407A2D78894AF8B1060F97B766A9FA170CC26F1777929B151722EE11BB14FC2636874A27C44E0771BD3BD361BB50C17AC083ED03B950199964B4FF7AD0314106DDCA7AA76BC7A2074D0B3E221F354A77D1D46F2F785CC57AAE094990B2
	2F268CF9AE1C657F7CB7AACB7F7C7721AC7D7B91F33282FFB7B2B74B7FF7A3CFE7293F9BE1735D47E91D31782F5793C7511D33432C76CB2847464EBE31CBEAB177F01EB559EB547A30293C9C37A11B7483641B932B59E63DC02F94B7C3C2FB8F137D6CEE923F6507560CF220B6A0A7D0508FF11EFDEB36C12073EC1DB976E1CB8FB97BA6DFB9CA7C1B1A8D7E6DFC7306613F0D3CE5839923BA9DB07D6CA779A3FE478662AB507EA9A8FF433201540F4B5A53AB3124B29EC17727EDE2B705599ED2FABDBF977AA16E
	AB0D67E7D4519C2B257B2AE993E14DBB9131A55BF17F29F8A22EC9F30CCA9B5925FA1F9570BB336F263DBCFDD5E530754B5F0C38FE2906B28FCD44331852BDDE776F58D9CC0D4DB1E814270872DEB6BBBBA47AC6CF443D6C86FAFFB89142E921E05FD036E65176657E7B77099FAB6F8F958A821FFF9B890F1FFE2EE49FF4F425B049156F18961139EB9948B681C9C041C061C033C35167C3B7677BEB03G3202D23FF7192DF60969C3BF7F1175D9F8B8473FBEFB4A4939C1691EDD4C4EFBEB504E73C1FE5AA43C53
	76CD8D1E31D4CEC27BCD27E9A5888783CD1D24E73F24AF74B026E36B9E45FE97CB95FD5FA89D093E727D7AEEBF776B69AC10697EDE835E051BB3897D660B02F2E15873118149EA032C784418CCFC8F139F0CE079DACD7C1E5F0F50CE6BBEC4D9C19C3B2E91FDAF01E31B68FE9C99BFF3EEC1ACA18F3156DBD04F9E1B3FFB0972CCD6766F7127D0C6884F2F208C731B47733B764B1211161BCF320994ECC76EAA7E0D43E41473946D23C87E659C2B48C559CE0E259AD04708493817E5ADA36B32B888AF814A39957A
	FDA0A310854883948C948EB49BE881D0BC50E2204C5B204D829583D55F06ED45123BABC0DB118FE91546A2E09F7D42EE7F63446FF68FBFCE3C321BFE8F837DFB4BF927FCDFAAF1B73DBF595D6D9679F8747A6E359C2BF31B9CEEAB9981595A311076D12DD0964BED38777293C320F5AB6E39A005G5FD45996A4BC9B5EC99D7C8F2CDDD95BEAB76A5FBF9924F5B89752AF388D77D7F7507ADA8261953763B81366F3CFFAE4E3C45695729D7562AB3B5DFB0F2C9642ED376B5DF7F81C766D4E5B357BE3CFD3FC68F6
	6D7ED8CB8376FB63A0AE71F6BE5FA8726F9761C5437B4534A27D79437DC53E730768A27D794323C56A7983334B27B5D7E64F3AAB643BE654FC4C5E5B0E505FCD895356C3BE455B423475B0130FBF3D90B7BF0C7F56C1035E9C23788ED67755F778BFBFEA554459A0BC86A8D405B399F613D6C68424192361DF90C0D63C9C37981E19F74A6B37BB55E7D69BBF54ABC7191C2676CE7FF937E9621C908E821AFC27369C7F64F3E7BC9252444869966A48104F8EF72A799264F4CB64675A3B2C99F9C065F7E9653D1A27
	66B34A719D72D30267B820B09F3ED01F6FD822A04DDCB95D223B7C69D9D22666CB1453896172F7C5704C872A8C574A73D48572E1D338BFF973FD6E42294982FC9E8DAF637BA2D74D97AC2789171F51701C87946B23678A03D6DE9224C91B4252ED1E622BA76BA73EA9735FD785158D5FD77D20CC3F2F1AD8665BD7CDAE536F2B6EACD377D58C3B270C0CD3BDB0763672F4919CBB493199B4CF021D30DA24DE0EBFC075A2F82DC884A27E8855EB10E22DB276B395F6D2461E2077BA21483D8E97724EABA3FB5B5DD6
	1B0D056753B4D6BB8C4B5C9E4FD19D2DCE33CA6F5FF00C684D662E07779177E363EB10A1C798FE6EBA3AF9F2AF394AA34BDAD02E48FAFD7BC8E449F733BED178EEBCBA92BE36566C24F3128270396AA9387E0CE473948877F26CCD0A8DC1B8F88A7659739A846E534F295E7F2E5B17FFD744E4383F8799BB0EA8E5AAD43DBFDCF375E5AF382AB2D81DD651F5D3B854E7942F675F70FB2FF3B9A650F54BA288A7F0AC47C9670E90DEFBB7E2FDCE3C7B154731233B789DB10E0550F555B88807F36C05E3D4AE0497AA
	79B5513B8A90CE3B873187A9369942459CDB5A043AD4F32C3A996536F26C9B3AA60B0070DC0E15FF08B6D84431F97C9EEBA247FE5008B69026727B241BD0EEB647EE5A04B648675889BB6AD24931A90DE803E00E7D1789ED904531334710F7AE47CAF722AE59BFC6ACF5884B114F3109C3D80ECA0EBD339D75B3F1AC63824A30F0ACED874A0866586B1BD146BC0E553D0BB2E2B9D65B0CB212B8362C94E5247D843169F4CD5B8261DE0EAD215F9284C3B81CE387793D5D399C2BAD63B6389731D34B398DB816381C
	5B00E357EE65B660583ABEEE830E0D2F627BF59CFB095F6DCE0BC06CDE3A0EEA01F0AF470E537571900403B9E625FE908E61A80EBDC331B990DE4831BEF64F9C4242B4448EF039599C5BC653D9A06C6118C86506C1B80AE3537310F761B4BC33BCCF3F23B25B2CBDF63247AA70FB0075387E4F7BA926FD221E0C2567FA4CCE166637753876AF63E9D651B369DE1EE6FB83262966E9DA9B3C6FBB5AE91A96086F78A92EC917D2EC884263B85F26BCBA16BB6CB25F4734BC51909F43536CF712FED33413890FC5AECB
	0393773412F87E93A916B69D5E27639A3CF357F0E747A4EFFFF70AAA2733F3E47C2D2B75423DA6D26EDE18225848B4C5F44967587F42FFCB3596F8BA2633F9DE44F4F69710713EF64C5BC6E934EF0B01B47327E31A31CDE47F294B6C92A55CE06075F7DB935ABD0E271F5FC456DCEED17EBD1A43F68BCB9B4F53A6CDC77B64B7234D04C8344F574D016C033F8706FB9459110AFD68EFB7C078CC325ABE21BB572875114FF8197C99FC5F2CAC92F5B2537E389A42A60E3DCE31DE88CB9CFB08762961900E6418E393
	16A716E35194CB027092DEC63BBDD099B3B4E5547AC07E8CEB86191B7FF56952252C2EFF5908F5DDB6C329EB638CF6571369310A766D96401CB3D00FF147063375EA159EC1B33CEDBDF906E2EBA6230D5AF3AA60D1B3D0EE819D9762A01C4831B994CB3B8F5E6FC36CADBAD6D4C23876BE54AF6742F0EDE5F50036A2C1BEBB8435FE9F53F1E68C6041DC6EFB6FE2FD4F61180BE28BA19C47313354D7B36F37E6EC3E9F755BDABADCBD2A6D27552F7AFE259E653367D3E45DA052DDC63C0F725BD3D837A6C85FFBBF
	2B5B287B595DDD46371E5EDDF411C51ACBF4B13E5D6D48B78F524649FC85D10C0F69FFB2607DC6E257F5AADF2C0E722E7FD688FF65D57FE769B8E9815C9905F63B1E0D13900E64580695341F0170FC0EC552F1F2B10453E622FE79FD43557F3AG76AD1E496EDF3E8576E5794D2C9A4E5F5FD179D365CC6F721AA07C19DCDE165FDF0C4365172176CFCDFECED5FE2C9EFFE6709DD71EB7E01FB2B4936B3BBF57FB0C3A160E43A1909F46530C31E35F4E56EC9BBF95381C5F7B39EF74D7BABF188FF9AC62790CB568
	6F715ECA75CA1B856F33303ECE84348756135F318D7279D8D05BE31F4137BD54736F8BEAE7A96D21E3963B374E7806F2FD5B4344DC7E7B6333147690A273B17D9F4F9B2EBE557B6391333C6BF38E04873D740F28A76F4AEF67A55170DE9EAEEF40B02B23CFAA15BAFA3601749D72FD88F2D6D4E160695ABED3527DB9B740BD08FD1F946414FC426FDBBCFFD0614BF69A34FCB560D079860B55ECF374986857D1A5E57C4E0768A4E56CB65B5CA257E371A1A53F8BBBC72E477B07899F5B23FD45043F0BBC8F6CA7BC
	40FFD368AC59E4501ED595BAED666E42CE335B5AD5D1F110BC48F95AD7F5F9743DD6B58B9284F62E18F70C64DF8E791A00FA9F40BBC21F57A83A0BCD24EE8DA57BAA766CB548584CA66F3AFADB937E22D9ED8F7F7BAD66A30A1C39BB3D6BBB23CE09FB7CC352D79872EBEBAB7A7BF7A9F5DD702512661AC0F7F47616000D77F19B0FB3AAFC951BC6D2574A7D1E6BB779567574FAA5BF23FD64FABC532054751F9A312E47C0BD4CFEG4FFE0B288FA4C1F8C534B5A3A79A6B6875C6C5266D982D23BD45340E7C5BBB
	7B1840F5F6B6AB7CEFDD9C293F4B6771AD8A6F8F68EFB19A488DAD39A94A6774DFA9E91E88F487F8DF39177F7F7638426711C64E376404D2360453CA9E3F5FBC3A7ABD742E3E2F2D6AD0727C2CF964F5DCE8D6785E5EB3F23EE31D0AEFE41EC65FA8077AF7C6E3BFD03D75D33F7DC03FA81949A7076401074B6C0CB66F2B3AA6117D00055C8F54517CA3A05F9820C551789BF8CD6DA8B709785D03A8F7B67DBD41617B9F145BA40FB6EA4958870D27B2BAA0EF8FD048037AF79B18CD24AE250E97080ADD0FAD9F1D
	7F3E512D703E321C369DF2AD36826F55ED6CD5796056GF5D63A4F4B87BF31AAFC4B7AC64E5756C7787C177B72194071F75B943909865F7E4960D062CF59C7E72B43CE0537BD501DF2CDFB6CBD2B706D8DF407DD43D71325787D00817DAF827CA26EC16C93E7D1FC73C3560CE2205A0750DF9F4B45749D00CDFE8853AF26788288A7G898F8772B1AB01713C4DB45CD96C6607754E235E9E16CF7B5BD26C2CF6B29D0F4B9E561E61CE2178010735E7383B0F61992E9162229E46730045BE6712A353FB59956AFD8F
	9D2332E7EB750E24F84EEC2D5EFBCD28F78144054C663FC5B66C6F66696B1DB3AC1F3E5E7FCC7B3DB7FD74FE12DD04FDC42BF763E954BB93621C0F205E2D6DD726F77730FC7AFA27F690BD96BE2255BB1362F1BEFACFEAC73D93A14E74A86AFD51677CF3E4FA5FB8AC1F3E5EBBE9BB0CFED42BF79145E39E556ABD5B406F48C1DC71E328774FF32FCC6FE7076553575B16C77488FDCC2B77G45439F536A7D37DC54BB9262564E31E6305F550AD9CF56ADD63B4DEA978F317F71036BF6A71D1B3177FBD56F45472E
	7E99D75D77A0E31AC9A953AC557B27BEF7C13EFB59AD5F030CA7CEABE51A2FFA7F6A745517ED7F9EE4E4F4A8E54AD23D5F5EFE75E5C7FF8FB28AF215B26DD53D7F4CF075E53F70BD48F065A9E53A28FACF4B3B7A3237DED5996CDB7EE94B8F2F047E76D5A15D6D9232FC6719D5B77F760548766A6C94A125CED856CB6F2D5489690364820C87663849E9C01F3A4F8A1708ED6410BAA77E6BB8CFC475253F774BBEA9C5C8734929CEC876G1DA7B98A7F8DF91081077E7149799D1EF39D3D8C93F72E34A27525FBD2
	D9366CF2D01D10C6EE78C06EAEA6A5951659B46F941581D2A4A103FF9BA4894B587733A8105EFF2F738EC9C2CA6319C0893449C7700D18A42CD4BE56627C64B254899ADAA69BA2DD56BED5A78D060E29CB443913D55CA95E693DA470BFBC8DE94FD3F8A881325A6A43116C4521245167C876112143C1CAA1FF7FD8A1892BD47B15BC9DD9ED9C86EFD86D359A7B57A9FBDF1E7F3B636ED4E1D91D70AE594CEE96DD74BB9E51C2FE27D37E0F3CEA048CA7796DC032758C2E62260FF437F45EA69A056C6EA6721FC838
	A551D205DF8839A5E1837D1171A2F2733C28566C6E1548067A27C6A14DCE7E4BB1A10BC55B40530B5867C21FD2FFCB2E6A207A2E21E5F6896B293EA417C21E4B7A475E59317D4B785929C2CA0D30127CB710B566AE49612A93B224DE17686EF558AC9E679787E8C6AB8671FCB19532FB1F971F943610ECDCF2254FF86E88DE1D303A862A5D63920AE8CA32F7DF48D3D88E751ADDA0CAF455C9643FD0F33872F85C588F241D3FBA3229ADC5C8168BC9CC7F2147898D255B5CEF351D0797367625157291D41A64B25B
	5D64B759C1339C0DE698458594CE7CC57124E9FF79BB952030CA42B6E6CAE0AD6A919D7DC5D55D5DB06F639900DDA17B2DBCFB1226D013A64BB3E143174FAF6D84BF2896D27B0B0B693FA5745FBD645F920A14D024E48F98B7C95B863C7FE863BDD8E66ABC3CD7A255DFD883B5A87D7B2B3F387B454A24C4A8DD0D10CEFF6E9DAAE12D122AE1203FD3F4DD9FB9E96B2A50B87213159EA7F1958F4937482371F3ECC1F854C15E2177CA273B4BBCB6C526E4963BDC5E0B63F9110B7D25B4C40FB02B18C3E57256384B
	5745887CB12FE892AA26C97750FF770E5AEC04EBBF657D04082761EA0F0E064B84254F2287DED0DA3ACF2BDBDAC1D52A8E1A531A7F2BD2F54861868FF46C4A6E2ED705D66B0430C8D83D497FF895552AD7D15EA1ED35257A20699C7D072A2ECE282EF43A1969D5B7F9BA21E50272FBC24479167938A4AD2BD72375C67F21CAEE770C48B7316BA1A5D965B53540C618A16037643BAE2BFF1FE771F575FEFF2BD1FA0A6DB70CFBCA7B7BBCEE769B660047BD055F3ABC310A1C657A7B5637395FEC33C9E65B19AA3B05
	FC77FB703CA4AA5F98FBB2C97EEECCA3C732384B19C46FBE954F7F82D0CB878852109DD782A7GGA8FBGGD0CB818294G94G88G88G440306B052109DD782A7GGA8FBGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGBCA7GGGG
**end of data**/
}

	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 3:43:40 PM)
	 * @return int
	 */
	public int getChoice() {
		return choice;
	}


	/**
	 * Return the DateComboStart property value.
	 * @return com.cannontech.common.gui.util.DateComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.DateComboBox getDateComboStart() {
		if (ivjDateComboStart == null) {
			try {
				ivjDateComboStart = new com.cannontech.common.gui.util.DateComboBox();
				ivjDateComboStart.setName("DateComboStart");
				ivjDateComboStart.setEnabled(false);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjDateComboStart;
	}


	/**
	 * Return the DateComboStop property value.
	 * @return com.cannontech.common.gui.util.DateComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.DateComboBox getDateComboStop() {
		if (ivjDateComboStop == null) {
			try {
				ivjDateComboStop = new com.cannontech.common.gui.util.DateComboBox();
				ivjDateComboStop.setName("DateComboStop");
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjDateComboStop;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/10/2001 10:48:08 AM)
	 * @return java.text.SimpleDateFormat
	 */
	public java.text.SimpleDateFormat getDateFormatter() {
		return dateFormatter;
	}


	/**
	 * Return the DirectControlJPanelFlowLayout property value.
	 * @return java.awt.FlowLayout
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private java.awt.FlowLayout getDirectControlJPanelFlowLayout() {
		java.awt.FlowLayout ivjDirectControlJPanelFlowLayout = null;
		try {
			/* Create part */
			ivjDirectControlJPanelFlowLayout = new java.awt.FlowLayout();
			ivjDirectControlJPanelFlowLayout.setAlignment(java.awt.FlowLayout.LEFT);
			ivjDirectControlJPanelFlowLayout.setHgap(1);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		};
		return ivjDirectControlJPanelFlowLayout;
	}


	/**
	 * Return the JButtonCancel property value.
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButtonCancel() {
		if (ivjJButtonCancel == null) {
			try {
				ivjJButtonCancel = new javax.swing.JButton();
				ivjJButtonCancel.setName("JButtonCancel");
				ivjJButtonCancel.setMnemonic(67);
				ivjJButtonCancel.setText("Cancel");
				ivjJButtonCancel.setMaximumSize(new java.awt.Dimension(73, 25));
				ivjJButtonCancel.setActionCommand("Cancel");
				ivjJButtonCancel.setMinimumSize(new java.awt.Dimension(73, 25));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButtonCancel;
	}


	/**
	 * Return the JButtonOk property value.
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButtonOk() {
		if (ivjJButtonOk == null) {
			try {
				ivjJButtonOk = new javax.swing.JButton();
				ivjJButtonOk.setName("JButtonOk");
				ivjJButtonOk.setMnemonic(79);
				ivjJButtonOk.setText("Ok");
				ivjJButtonOk.setMaximumSize(new java.awt.Dimension(73, 25));
				ivjJButtonOk.setActionCommand("Ok");
				ivjJButtonOk.setPreferredSize(new java.awt.Dimension(73, 25));
				ivjJButtonOk.setMinimumSize(new java.awt.Dimension(73, 25));
				ivjJButtonOk.setMargin(new java.awt.Insets(2, 14, 2, 14));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButtonOk;
	}


	/**
	 * Return the JCheckBoxNeverStop property value.
	 * @return javax.swing.JCheckBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JCheckBox getJCheckBoxNeverStop() {
		if (ivjJCheckBoxNeverStop == null) {
			try {
				ivjJCheckBoxNeverStop = new javax.swing.JCheckBox();
				ivjJCheckBoxNeverStop.setName("JCheckBoxNeverStop");
				ivjJCheckBoxNeverStop.setToolTipText("Forces the schedule to run forever");
				ivjJCheckBoxNeverStop.setMnemonic(78);
				ivjJCheckBoxNeverStop.setText("Never Stop");
				ivjJCheckBoxNeverStop.setMaximumSize(new java.awt.Dimension(87, 22));
				ivjJCheckBoxNeverStop.setActionCommand("Never Stop");
				ivjJCheckBoxNeverStop.setMinimumSize(new java.awt.Dimension(87, 22));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJCheckBoxNeverStop;
	}


	/**
	 * Return the JCheckBoxStartStopNow property value.
	 * @return javax.swing.JCheckBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JCheckBox getJCheckBoxStartStopNow() {
		if (ivjJCheckBoxStartStopNow == null) {
			try {
				ivjJCheckBoxStartStopNow = new javax.swing.JCheckBox();
				ivjJCheckBoxStartStopNow.setName("JCheckBoxStartStopNow");
				ivjJCheckBoxStartStopNow.setMnemonic(83);
				ivjJCheckBoxStartStopNow.setText("Start Now");
				ivjJCheckBoxStartStopNow.setMaximumSize(new java.awt.Dimension(81, 22));
				ivjJCheckBoxStartStopNow.setActionCommand("Start Now");
				ivjJCheckBoxStartStopNow.setMinimumSize(new java.awt.Dimension(81, 22));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJCheckBoxStartStopNow;
	}


	/**
	 * Return the JComboBoxGear property value.
	 * @return javax.swing.JComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JComboBox getJComboBoxGear() {
		if (ivjJComboBoxGear == null) {
			try {
				ivjJComboBoxGear = new javax.swing.JComboBox();
				ivjJComboBoxGear.setName("JComboBoxGear");
				ivjJComboBoxGear.setEditor(new javax.swing.plaf.metal.MetalComboBoxEditor.UIResource());
				ivjJComboBoxGear.setRenderer(new javax.swing.plaf.basic.BasicComboBoxRenderer.UIResource());
				// user code begin {1}
				
				ivjJComboBoxGear.setToolTipText( "The gear or gear number the program(s) should begin control with");
				
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJComboBoxGear;
	}


/**
 * Return the JComboBoxScenario property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxScenario() {
	if (ivjJComboBoxScenario == null) {
		try {
			ivjJComboBoxScenario = new javax.swing.JComboBox();
			ivjJComboBoxScenario.setName("JComboBoxScenario");
			ivjJComboBoxScenario.setEditor(new javax.swing.plaf.metal.MetalComboBoxEditor.UIResource());
			ivjJComboBoxScenario.setRenderer(new javax.swing.plaf.basic.BasicComboBoxRenderer.UIResource());
			// user code begin {1}
			
			if( _isScenario )
			{
				LiteYukonPAObject[] scenarios = LMFuncs.getAllLMScenarios();
				for( int i = 0; i < scenarios.length; i++ )
				{
					ivjJComboBoxScenario.addItem( scenarios[i] );
				}				
			}
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxScenario;
}


	/**
	 * Return the JLabelGear property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelGear() {
		if (ivjJLabelGear == null) {
			try {
				ivjJLabelGear = new javax.swing.JLabel();
				ivjJLabelGear.setName("JLabelGear");
				ivjJLabelGear.setFont(new java.awt.Font("dialog", 0, 14));
				ivjJLabelGear.setText("Gear:");
				ivjJLabelGear.setMaximumSize(new java.awt.Dimension(36, 19));
				ivjJLabelGear.setMinimumSize(new java.awt.Dimension(36, 19));
				// user code begin {1}
	
				ivjJLabelGear.setToolTipText( "The gear or gear number the program(s) should begin control with");
	
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelGear;
	}


	/**
	 * Return the JLabelLabel property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelLabelStartHRMN() {
		if (ivjJLabelLabelStartHRMN == null) {
			try {
				ivjJLabelLabelStartHRMN = new javax.swing.JLabel();
				ivjJLabelLabelStartHRMN.setName("JLabelLabelStartHRMN");
				ivjJLabelLabelStartHRMN.setText("(HH:mm)");
				ivjJLabelLabelStartHRMN.setMaximumSize(new java.awt.Dimension(51, 16));
				ivjJLabelLabelStartHRMN.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJLabelLabelStartHRMN.setEnabled(false);
				ivjJLabelLabelStartHRMN.setMinimumSize(new java.awt.Dimension(51, 16));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelLabelStartHRMN;
	}


	/**
	 * Return the JLabelLabel1 property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelLabelStopHRMN() {
		if (ivjJLabelLabelStopHRMN == null) {
			try {
				ivjJLabelLabelStopHRMN = new javax.swing.JLabel();
				ivjJLabelLabelStopHRMN.setName("JLabelLabelStopHRMN");
				ivjJLabelLabelStopHRMN.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJLabelLabelStopHRMN.setText("(HH:mm)");
				ivjJLabelLabelStopHRMN.setMaximumSize(new java.awt.Dimension(51, 16));
				ivjJLabelLabelStopHRMN.setMinimumSize(new java.awt.Dimension(51, 16));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelLabelStopHRMN;
	}


/**
 * Return the JLabelScenario property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelScenario() {
	if (ivjJLabelScenario == null) {
		try {
			ivjJLabelScenario = new javax.swing.JLabel();
			ivjJLabelScenario.setName("JLabelScenario");
			ivjJLabelScenario.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelScenario.setText("Scenario:");
			ivjJLabelScenario.setMaximumSize(new java.awt.Dimension(68, 19));
			ivjJLabelScenario.setMinimumSize(new java.awt.Dimension(68, 19));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelScenario;
}


	/**
	 * Return the JLabelTime property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelStartTime() {
		if (ivjJLabelStartTime == null) {
			try {
				ivjJLabelStartTime = new javax.swing.JLabel();
				ivjJLabelStartTime.setName("JLabelStartTime");
				ivjJLabelStartTime.setText("Start Time:");
				ivjJLabelStartTime.setMaximumSize(new java.awt.Dimension(69, 19));
				ivjJLabelStartTime.setFont(new java.awt.Font("dialog", 0, 14));
				ivjJLabelStartTime.setEnabled(false);
				ivjJLabelStartTime.setMinimumSize(new java.awt.Dimension(69, 19));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelStartTime;
	}


	/**
	 * Return the JLabelStopTime property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelStopTime() {
		if (ivjJLabelStopTime == null) {
			try {
				ivjJLabelStopTime = new javax.swing.JLabel();
				ivjJLabelStopTime.setName("JLabelStopTime");
				ivjJLabelStopTime.setFont(new java.awt.Font("dialog", 0, 14));
				ivjJLabelStopTime.setText("Stop Time:");
				ivjJLabelStopTime.setMaximumSize(new java.awt.Dimension(68, 19));
				ivjJLabelStopTime.setMinimumSize(new java.awt.Dimension(68, 19));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelStopTime;
	}


	/**
	 * Return the JPanelControls property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJPanelControls() {
	if (ivjJPanelControls == null) {
		try {
			ivjJPanelControls = new javax.swing.JPanel();
			ivjJPanelControls.setName("JPanelControls");
			ivjJPanelControls.setPreferredSize(new java.awt.Dimension(285, 232));
			ivjJPanelControls.setLayout(new java.awt.GridBagLayout());
			ivjJPanelControls.setMaximumSize(new java.awt.Dimension(285, 232));

			java.awt.GridBagConstraints constraintsJCheckBoxStartStopNow = new java.awt.GridBagConstraints();
			constraintsJCheckBoxStartStopNow.gridx = 1; constraintsJCheckBoxStartStopNow.gridy = 2;
			constraintsJCheckBoxStartStopNow.gridwidth = 2;
			constraintsJCheckBoxStartStopNow.ipadx = 9;
			constraintsJCheckBoxStartStopNow.insets = new java.awt.Insets(2, 5, 1, 2);
			getJPanelControls().add(getJCheckBoxStartStopNow(), constraintsJCheckBoxStartStopNow);

			java.awt.GridBagConstraints constraintsJLabelStartTime = new java.awt.GridBagConstraints();
			constraintsJLabelStartTime.gridx = 1; constraintsJLabelStartTime.gridy = 3;
			constraintsJLabelStartTime.gridwidth = 2;
			constraintsJLabelStartTime.ipadx = 17;
			constraintsJLabelStartTime.insets = new java.awt.Insets(2, 5, 3, 6);
			getJPanelControls().add(getJLabelStartTime(), constraintsJLabelStartTime);

			java.awt.GridBagConstraints constraintsJTextFieldStartTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldStartTime.gridx = 3; constraintsJTextFieldStartTime.gridy = 3;
			constraintsJTextFieldStartTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldStartTime.weightx = 1.0;
			constraintsJTextFieldStartTime.ipadx = 181;
			constraintsJTextFieldStartTime.insets = new java.awt.Insets(2, 2, 2, 1);
			getJPanelControls().add(getJTextFieldStartTime(), constraintsJTextFieldStartTime);

			java.awt.GridBagConstraints constraintsJLabelLabelStartHRMN = new java.awt.GridBagConstraints();
			constraintsJLabelLabelStartHRMN.gridx = 4; constraintsJLabelLabelStartHRMN.gridy = 3;
			constraintsJLabelLabelStartHRMN.ipadx = 7;
			constraintsJLabelLabelStartHRMN.ipady = -2;
			constraintsJLabelLabelStartHRMN.insets = new java.awt.Insets(5, 2, 5, 9);
			getJPanelControls().add(getJLabelLabelStartHRMN(), constraintsJLabelLabelStartHRMN);

			java.awt.GridBagConstraints constraintsJCheckBoxNeverStop = new java.awt.GridBagConstraints();
			constraintsJCheckBoxNeverStop.gridx = 1; constraintsJCheckBoxNeverStop.gridy = 5;
			constraintsJCheckBoxNeverStop.gridwidth = 2;
			constraintsJCheckBoxNeverStop.ipadx = 3;
			constraintsJCheckBoxNeverStop.insets = new java.awt.Insets(3, 5, 0, 2);
			getJPanelControls().add(getJCheckBoxNeverStop(), constraintsJCheckBoxNeverStop);

			java.awt.GridBagConstraints constraintsJTextFieldStopTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldStopTime.gridx = 3; constraintsJTextFieldStopTime.gridy = 6;
			constraintsJTextFieldStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldStopTime.weightx = 1.0;
			constraintsJTextFieldStopTime.ipadx = 181;
			constraintsJTextFieldStopTime.insets = new java.awt.Insets(0, 2, 2, 1);
			getJPanelControls().add(getJTextFieldStopTime(), constraintsJTextFieldStopTime);

			java.awt.GridBagConstraints constraintsJLabelStopTime = new java.awt.GridBagConstraints();
			constraintsJLabelStopTime.gridx = 1; constraintsJLabelStopTime.gridy = 6;
			constraintsJLabelStopTime.gridwidth = 2;
			constraintsJLabelStopTime.ipadx = 18;
			constraintsJLabelStopTime.insets = new java.awt.Insets(1, 5, 2, 6);
			getJPanelControls().add(getJLabelStopTime(), constraintsJLabelStopTime);

			java.awt.GridBagConstraints constraintsJLabelLabelStopHRMN = new java.awt.GridBagConstraints();
			constraintsJLabelLabelStopHRMN.gridx = 4; constraintsJLabelLabelStopHRMN.gridy = 6;
			constraintsJLabelLabelStopHRMN.ipadx = 7;
			constraintsJLabelLabelStopHRMN.ipady = -2;
			constraintsJLabelLabelStopHRMN.insets = new java.awt.Insets(3, 2, 5, 9);
			getJPanelControls().add(getJLabelLabelStopHRMN(), constraintsJLabelLabelStopHRMN);

			java.awt.GridBagConstraints constraintsJComboBoxGear = new java.awt.GridBagConstraints();
			constraintsJComboBoxGear.gridx = 2; constraintsJComboBoxGear.gridy = 8;
			constraintsJComboBoxGear.gridwidth = 3;
			constraintsJComboBoxGear.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxGear.weightx = 1.0;
			constraintsJComboBoxGear.ipadx = 170;
			constraintsJComboBoxGear.insets = new java.awt.Insets(3, 2, 5, 5);
			getJPanelControls().add(getJComboBoxGear(), constraintsJComboBoxGear);

			java.awt.GridBagConstraints constraintsJLabelGear = new java.awt.GridBagConstraints();
			constraintsJLabelGear.gridx = 1; constraintsJLabelGear.gridy = 8;
			constraintsJLabelGear.ipadx = 9;
			constraintsJLabelGear.ipady = -5;
			constraintsJLabelGear.insets = new java.awt.Insets(6, 5, 11, 1);
			getJPanelControls().add(getJLabelGear(), constraintsJLabelGear);

			java.awt.GridBagConstraints constraintsDateComboStop = new java.awt.GridBagConstraints();
			constraintsDateComboStop.gridx = 3; constraintsDateComboStop.gridy = 7;
			constraintsDateComboStop.gridwidth = 2;
			constraintsDateComboStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsDateComboStop.weightx = 1.0;
			constraintsDateComboStop.ipadx = 158;
			constraintsDateComboStop.insets = new java.awt.Insets(2, 2, 2, 5);
			getJPanelControls().add(getDateComboStop(), constraintsDateComboStop);

			java.awt.GridBagConstraints constraintsDateComboStart = new java.awt.GridBagConstraints();
			constraintsDateComboStart.gridx = 3; constraintsDateComboStart.gridy = 4;
			constraintsDateComboStart.gridwidth = 2;
			constraintsDateComboStart.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsDateComboStart.weightx = 1.0;
			constraintsDateComboStart.ipadx = 158;
			constraintsDateComboStart.insets = new java.awt.Insets(2, 2, 3, 5);
			getJPanelControls().add(getDateComboStart(), constraintsDateComboStart);

			java.awt.GridBagConstraints constraintsJLabelScenario = new java.awt.GridBagConstraints();
			constraintsJLabelScenario.gridx = 1; constraintsJLabelScenario.gridy = 1;
			constraintsJLabelScenario.gridwidth = 2;
			constraintsJLabelScenario.ipadx = 22;
			constraintsJLabelScenario.insets = new java.awt.Insets(11, 5, 3, 2);
			getJPanelControls().add(getJLabelScenario(), constraintsJLabelScenario);

			java.awt.GridBagConstraints constraintsJComboBoxScenario = new java.awt.GridBagConstraints();
			constraintsJComboBoxScenario.gridx = 3; constraintsJComboBoxScenario.gridy = 1;
			constraintsJComboBoxScenario.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxScenario.weightx = 1.0;
			constraintsJComboBoxScenario.ipadx = 59;
			constraintsJComboBoxScenario.insets = new java.awt.Insets(9, 2, 1, 1);
			getJPanelControls().add(getJComboBoxScenario(), constraintsJComboBoxScenario);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelControls;
}

	/**
	 * Return the JPanelMultiSelect property value.
	 * @return com.cannontech.common.gui.util.MultiSelectJPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.panel.MultiSelectJPanel getJPanelMultiSelect() {
	if (ivjJPanelMultiSelect == null) {
		try {
			ivjJPanelMultiSelect = new com.cannontech.common.gui.panel.MultiSelectJPanel();
			ivjJPanelMultiSelect.setName("JPanelMultiSelect");
			ivjJPanelMultiSelect.setPreferredSize(new java.awt.Dimension(285, 232));
			ivjJPanelMultiSelect.setMinimumSize(new java.awt.Dimension(285, 232));
			ivjJPanelMultiSelect.setMaximumSize(new java.awt.Dimension(285, 232));
			// user code begin {1}
				
				getJPanelMultiSelect().setTableModel( getMultiSelectPrgModel() );
				
				// Do any column specific initialization here				
				javax.swing.table.TableColumn gearColumn = 
						getJPanelMultiSelect().getTableColumn( MultiSelectPrgModel.COL_GEAR );
			
				gearColumn.setMaxWidth(45);
				gearColumn.setWidth(45);
				gearColumn.setPreferredWidth(45);
				
				// Create and add the column renderers	
				ComboBoxTableRenderer comboBxRender = new ComboBoxTableRenderer();
				//comboBxRender.setBackground( Color.WHITE );	
				for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
					comboBxRender.addItem( new Integer(i+1) );
				
				gearColumn.setCellRenderer( comboBxRender );
				
				
				// Create and add the column editors
			 	javax.swing.JComboBox combo = new javax.swing.JComboBox();
				//combo.setBackground( Color.WHITE );
				for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
					combo.addItem( new Integer(i+1) );
			
				gearColumn.setCellEditor( new DefaultCellEditor(combo) );				

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMultiSelect;
}

	/**
	 * Return the JPanel1 property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJPanelOkCancel() {
	if (ivjJPanelOkCancel == null) {
		try {
			ivjJPanelOkCancel = new javax.swing.JPanel();
			ivjJPanelOkCancel.setName("JPanelOkCancel");
			ivjJPanelOkCancel.setLayout(getJPanelOkCancelFlowLayout());
			ivjJPanelOkCancel.setMinimumSize(new java.awt.Dimension(161, 35));
			getJPanelOkCancel().add(getJButtonOk(), getJButtonOk().getName());
			getJPanelOkCancel().add(getJButtonCancel(), getJButtonCancel().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelOkCancel;
}

	/**
	 * Return the JPanelOkCancelFlowLayout property value.
	 * @return java.awt.FlowLayout
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private java.awt.FlowLayout getJPanelOkCancelFlowLayout() {
		java.awt.FlowLayout ivjJPanelOkCancelFlowLayout = null;
		try {
			/* Create part */
			ivjJPanelOkCancelFlowLayout = new java.awt.FlowLayout();
			ivjJPanelOkCancelFlowLayout.setAlignment(java.awt.FlowLayout.CENTER);
			ivjJPanelOkCancelFlowLayout.setVgap(5);
			ivjJPanelOkCancelFlowLayout.setHgap(5);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		};
		return ivjJPanelOkCancelFlowLayout;
	}


	/**
	 * Return the JTextFieldStartTime property value.
	 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStartTime() {
		if (ivjJTextFieldStartTime == null) {
			try {
				ivjJTextFieldStartTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
				ivjJTextFieldStartTime.setName("JTextFieldStartTime");
				ivjJTextFieldStartTime.setHighlighter(new javax.swing.plaf.basic.BasicTextUI.BasicHighlighter());
				ivjJTextFieldStartTime.setText("16:25");
				ivjJTextFieldStartTime.setCaretPosition(5);
				ivjJTextFieldStartTime.setSelectionEnd(5);
				ivjJTextFieldStartTime.setEnabled(false);
				ivjJTextFieldStartTime.setSelectionStart(5);
				// user code begin {1}
	
				ivjJTextFieldStartTime.setTimeText( new Date() );
				
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextFieldStartTime;
	}


	/**
	 * Return the JTextFieldStopTime property value.
	 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStopTime() {
		if (ivjJTextFieldStopTime == null) {
			try {
				ivjJTextFieldStopTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
				ivjJTextFieldStopTime.setName("JTextFieldStopTime");
				ivjJTextFieldStopTime.setHighlighter(new javax.swing.plaf.basic.BasicTextUI.BasicHighlighter());
				ivjJTextFieldStopTime.setText("20:25");
				// user code begin {1}
	
				if( getMode() == MODE_STOP )
					ivjJTextFieldStopTime.setTimeText( new Date() );
				else
				{
					GregorianCalendar cal = new GregorianCalendar();
					cal.setTime( new Date() );
	
					StringBuffer hour = new StringBuffer( String.valueOf(cal.get( GregorianCalendar.HOUR_OF_DAY)+4) );
					if( hour.length() < 2 )
						hour.insert(0, "0" );
						
					StringBuffer minute = new StringBuffer( String.valueOf(cal.get(GregorianCalendar.MINUTE)) );
					if( minute.length() < 2 )
						minute.insert(0, "0" );
						
					if( cal.get( GregorianCalendar.HOUR_OF_DAY) > 20 )
						hour = new StringBuffer("23");
						
					ivjJTextFieldStopTime.setText( hour + ":" + minute );
				}
			
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextFieldStopTime;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/18/2001 5:13:45 PM)
	 * @return int
	 */
	public int getMode() {
		return mode;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (1/21/2001 5:32:52 PM)
	 * @param newLoadControlProgram LMProgramBase
	 */
	public MultiSelectProg[] getMultiSelectObject()
	{
		//used to change the type of our array
		List l = Arrays.asList( getJPanelMultiSelect().getSelectedData() );			

		//even if we only have 1 program, this will find it!
		return (MultiSelectProg[])l.toArray( new MultiSelectProg[l.size()] );
	}


	private IMultiSelectModel getMultiSelectPrgModel()
	{
		if( multiSelectPrgModel == null )
		{
			if( _isScenario )
				multiSelectPrgModel = new MultiSelectPrgScenModel();
			else
				multiSelectPrgModel = new MultiSelectPrgModel();
		}
		
		return multiSelectPrgModel;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 2:56:28 PM)
	 * @return Date
	 */
	public Date getStartTime()
	{
		if( getJTextFieldStartTime().getText() == null
			 || getJTextFieldStartTime().getText().length() <= 0 )
		{
			//assume they want to start using the time of now
			// and the Date in the JComboBox
			GregorianCalendar c = new GregorianCalendar();
			c.setTime( getDateComboStart().getSelectedDate() );
			
			GregorianCalendar tCal = new GregorianCalendar();
			c.set(GregorianCalendar.HOUR_OF_DAY, tCal.get(tCal.HOUR_OF_DAY) );
			c.set(GregorianCalendar.MINUTE, tCal.get(tCal.MINUTE) );
			c.set(GregorianCalendar.SECOND, tCal.get(tCal.SECOND) );

			return c.getTime();
		}
		else
		{
			GregorianCalendar c = new GregorianCalendar();
			c.setTime( getDateComboStart().getSelectedDate() );
			
			String start = getJTextFieldStartTime().getTimeText();
			
			try
			{
				c.set(GregorianCalendar.HOUR_OF_DAY, Integer.parseInt( start.substring(0,2) ) );
				c.set(GregorianCalendar.MINUTE, Integer.parseInt( start.substring(3,5) ) );
				c.set(GregorianCalendar.SECOND, 0 );
				return c.getTime();
			}
			catch( Exception e )
			{
				CTILogger.info("*** Received a bad value in getStartTime() of " + this.getClass().getName() + " : " + e.getMessage() );
				return CtiUtilities.get1990GregCalendar().getTime();
			}
			
		}
	
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 2:56:28 PM)
	 * @return Date
	 */
	public Date getStopTime()
	{
		if( getJCheckBoxNeverStop().isSelected() )
		{
			GregorianCalendar c = new GregorianCalendar();
			c.add( c.YEAR, 1 ); //set the stop time to 1 year from now
			return c.getTime();
		}
		else if( getJTextFieldStopTime().getText() == null
					 || getJTextFieldStopTime().getText().length() <= 0 )
		{
			//default the stop to 1 day from now
			GregorianCalendar c = new GregorianCalendar();
			c.add( c.DATE, 1 );
			return c.getTime();
		}
		else
		{
			GregorianCalendar c = new GregorianCalendar();
			c.setTime( getDateComboStop().getSelectedDate() );
	
			String stop = getJTextFieldStopTime().getTimeText();
	
			try
			{
				c.set(GregorianCalendar.HOUR_OF_DAY, Integer.parseInt( stop.substring(0,2) ) );
				c.set(GregorianCalendar.MINUTE, Integer.parseInt( stop.substring(3,5) ) );
				c.set(GregorianCalendar.SECOND, 0 );
				
				if( getJCheckBoxStartStopNow().isSelected() && getMode() == MODE_STOP )
					return new Date();  //use a time of now
				else
					return c.getTime();
			}
			catch( Exception e )
			{
				CTILogger.info("*** Received a bad value in getStopTime() of " + this.getClass().getName() + " : " + e.getMessage() );
				return CtiUtilities.get1990GregCalendar().getTime();
			}
			
		}
	}


	/**
	 * Called whenever the part throws an exception.
	 * @param exception java.lang.Throwable
	 */
	private void handleException(java.lang.Throwable exception) {
	
		/* Uncomment the following lines to print uncaught exceptions to stdout */
		CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
		CTILogger.error( exception.getMessage(), exception );;
	}


	/**
	 * Initializes connections
	 * @exception java.lang.Exception The exception description.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initConnections() throws java.lang.Exception {
		// user code begin {1}
		
		getJComboBoxGear().addActionListener( this );
		getJComboBoxScenario().addActionListener( this );
		
		// user code end
		getJButtonCancel().addActionListener(this);
		getJButtonOk().addActionListener(this);
		getJCheckBoxNeverStop().addActionListener(this);
		getJCheckBoxStartStopNow().addActionListener(this);
	}


/**
 * Initialize the class.
 */
private void initialize()
{
	try
	{
		setName("DirectControlJPanel");
		setLayout(new java.awt.GridBagLayout());
		setMaximumSize(new java.awt.Dimension(315, 260));
		setPreferredSize(new java.awt.Dimension(315, 260));
		setBounds(new java.awt.Rectangle(0, 0, 300, 234));
		setSize(577, 256);
		setMinimumSize(new java.awt.Dimension(315, 260));

		java.awt.GridBagConstraints constraintsJPanelControls = new java.awt.GridBagConstraints();
		constraintsJPanelControls.gridx = 0; constraintsJPanelControls.gridy = 0;
		constraintsJPanelControls.fill = java.awt.GridBagConstraints.VERTICAL;
		constraintsJPanelControls.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelControls.weightx = 0.1;
		constraintsJPanelControls.weighty = 0.1;
		constraintsJPanelControls.ipadx = -69;
		constraintsJPanelControls.ipady = 6;
		constraintsJPanelControls.insets = new java.awt.Insets(0, 0, 0, 1);
		add(getJPanelControls(), constraintsJPanelControls);

		java.awt.GridBagConstraints constraintsJPanelMultiSelect = new java.awt.GridBagConstraints();
		constraintsJPanelMultiSelect.gridx = 1; constraintsJPanelMultiSelect.gridy = 0;
		constraintsJPanelMultiSelect.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelMultiSelect.anchor = java.awt.GridBagConstraints.EAST;
		constraintsJPanelMultiSelect.weightx = 1.0;
		constraintsJPanelMultiSelect.weighty = 1.0;
		constraintsJPanelMultiSelect.ipadx = 5;
		constraintsJPanelMultiSelect.ipady = -11;
		constraintsJPanelMultiSelect.insets = new java.awt.Insets(0, 1, 0, 0);
		add(getJPanelMultiSelect(), constraintsJPanelMultiSelect);

		java.awt.GridBagConstraints constraintsJPanelOkCancel = new java.awt.GridBagConstraints();
		constraintsJPanelOkCancel.gridx = 0; constraintsJPanelOkCancel.gridy = 2;
		constraintsJPanelOkCancel.gridwidth = 2;
		constraintsJPanelOkCancel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelOkCancel.anchor = java.awt.GridBagConstraints.SOUTH;
		constraintsJPanelOkCancel.ipadx = 416;
		add(getJPanelOkCancel(), constraintsJPanelOkCancel);
		initConnections();
	}
	catch (java.lang.Throwable ivjExc)
	{
		handleException(ivjExc);
	}


	getJPanelMultiSelect().setVisible( _isScenario );
	getJButtonOk().requestFocus();

	getJLabelScenario().setVisible( _isScenario );
	getJComboBoxScenario().setVisible( _isScenario );

	if( _isScenario )
		action_Scenario( null );

}

	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 10:18:44 AM)
	 * @return boolean
	 */
	private boolean isInputValid() 
	{
		return true;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/11/2001 12:46:05 PM)
	 * @return boolean
	 */
	public boolean isStopStartNowSelected() 
	{
		return getJCheckBoxStartStopNow().isSelected();
	}


	/**
	 * Comment
	 */
	public void jButtonCancel_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		choice = CANCEL_CHOICE;
		exit();
		
		return;
	}


	/**
	 * Comment
	 */
	public void jButtonOK_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		if( getMode() == MODE_START_STOP 
		 	 && getStartTime() != null
		 	 && getStopTime() != null )
		{
			if( getStartTime().after(CtiUtilities.get1990GregCalendar().getTime())
				 && getStopTime().after(CtiUtilities.get1990GregCalendar().getTime()) )
			{
				if( getStartTime().getTime() >= getStopTime().getTime() )
				{
					javax.swing.JOptionPane.showConfirmDialog( this, "Start time can not be greater than the stop time, try again.", 
								"Incorrect Entry", 
								javax.swing.JOptionPane.CLOSED_OPTION,							
								javax.swing.JOptionPane.WARNING_MESSAGE );
					return;
				}
			}
	
		}
		else if( getMode() == MODE_STOP
					 && getStopTime() != null )
		{
			if( getStartTime().after(CtiUtilities.get1990GregCalendar().getTime())
				 && getStopTime().after(CtiUtilities.get1990GregCalendar().getTime()) )
			{
				Date cDate = new Date();
				
				if( getStopTime().before(cDate) )
				{
					javax.swing.JOptionPane.showConfirmDialog( this, "Stop time can not be less than the current time, try again.", 
								"Incorrect Entry", 
								javax.swing.JOptionPane.CLOSED_OPTION, 
								javax.swing.JOptionPane.WARNING_MESSAGE );
					return;
				}
			}
		}
	
		
		choice = OK_CHOICE;
		exit();
	
		return;
	}


	/**
	 * Comment
	 */
	public void jCheckBoxNeverStop_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		getJLabelStopTime().setEnabled( !getJCheckBoxNeverStop().isSelected() );
		getJTextFieldStopTime().setEnabled( !getJCheckBoxNeverStop().isSelected() );
		getJLabelLabelStopHRMN().setEnabled( !getJCheckBoxNeverStop().isSelected() );
		getDateComboStop().setEnabled( !getJCheckBoxNeverStop().isSelected() );
	
		if( getJCheckBoxNeverStop().isSelected() )
			getJButtonOk().setEnabled( true );
		
		return;
	}


	/**
	 * Comment
	 */
	public void jCheckBoxStartStopNow_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		if( getMode() == MODE_STOP )
		{
			getJLabelStopTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJTextFieldStopTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJLabelLabelStopHRMN().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getDateComboStop().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		}
		else if( getMode() == MODE_START_STOP )
		{
			getJLabelStartTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJTextFieldStartTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJLabelLabelStartHRMN().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getDateComboStart().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		}
	
	
		if( getJCheckBoxStartStopNow().isSelected() )
			getJButtonOk().setEnabled( true );
	
		return;
	}


	private void jComboBoxGear_ActionPerformed( java.awt.event.ActionEvent actionEvent )
	{
		if( getJComboBoxGear().getSelectedIndex() >= 0
		    && getJComboBoxGear().getSelectedIndex() < IlmDefines.MAX_GEAR_COUNT )
		{
			//add 1 to the gear selected index since gear numbers start at 1
			getMultiSelectPrgModel().setAllGearNumbers(
					new Integer(getJComboBoxGear().getSelectedIndex()+1) );
		}
		

	}


	/**
	 * main entrypoint - starts the part when it is run as an application
	 * @param args java.lang.String[]
	 */
	public static void main(java.lang.String[] args) {
		try {
			javax.swing.JFrame frame = new javax.swing.JFrame();
			DirectControlJPanel aDirectControlJPanel;
			aDirectControlJPanel = new DirectControlJPanel();
			frame.setContentPane(aDirectControlJPanel);
			frame.setSize(aDirectControlJPanel.getSize());
			frame.addWindowListener(new java.awt.event.WindowAdapter() {
				public void windowClosing(java.awt.event.WindowEvent e) {
					System.exit(0);
				};
			});
			frame.show();
			java.awt.Insets insets = frame.getInsets();
			frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
			frame.setVisible(true);
		} catch (Throwable exception) {
			System.err.println("Exception occurred in main() of javax.swing.JPanel");
			CTILogger.error( exception.getMessage(), exception );;
		}
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/17/2001 9:24:14 AM)
	 * @param gears java.util.Vector
	 */
	public void setGearList(java.util.Vector gears) 
	{
		getJComboBoxGear().removeAllItems();
		
		if( gears != null )
		{
			for( int i = 0; i < gears.size(); i++ )
			{
				getJComboBoxGear().addItem( gears.get(i) );
			}
	
			if( getJComboBoxGear().getItemCount() > 0 )
				getJComboBoxGear().setSelectedIndex(0);
		}
	
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/18/2001 5:13:45 PM)
	 * @param newMode int
	 */
	public void setMode(int newMode) 
	{
		mode = newMode;
		getJCheckBoxStartStopNow().doClick();
	
		if( mode == MODE_STOP )
		{
			getJLabelStartTime().setVisible(false);
			getJTextFieldStartTime().setVisible(false);
			getJLabelLabelStartHRMN().setVisible(false);
			getDateComboStart().setVisible(false);
			getJComboBoxGear().setVisible(false);
			getJLabelGear().setVisible(false);
			
			
			//getMultiSelectPrgModel().get
			((DefaultCellEditor)
				getJPanelMultiSelect().getTableColumn( 
						MultiSelectPrgModel.COL_GEAR ).getCellEditor()).getComponent().setEnabled( false );
			
			((ComboBoxTableRenderer)
				getJPanelMultiSelect().getTableColumn( 
						MultiSelectPrgModel.COL_GEAR ).getCellRenderer()).setEnabled( false ) ;
			
			getJCheckBoxNeverStop().setVisible(false);
			getJCheckBoxStartStopNow().setText("Stop Now");
		}
	
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (1/21/2001 5:32:52 PM)
	 * @param newLoadControlProgram LMProgramBase
	 */
	public boolean setMultiSelectObject( LMProgramBase[] rows ) 
	{
		if( rows == null )
			return false;
	
	
		//get all the programs and copy the needed values into a different object
		MultiSelectProg[] prgs = new MultiSelectProg[ rows.length ]; 
		for( int i = 0; i < rows.length; i++ )
			prgs[i] = new MultiSelectProg( (LMProgramBase)rows[i] );
	
			
		return setMultiSelectObject( prgs );
	}

	private boolean setMultiSelectObject( MultiSelectProg[] rows ) 
	{
		if( rows == null )
			return false;
	
	
		//get all the programs and copy the needed values into a different object
		MultiSelectProg[] prgs = new MultiSelectProg[ rows.length ]; 
		for( int i = 0; i < rows.length; i++ )
			prgs[i] = new MultiSelectProg( (LMProgramBase)rows[i].getBaseProgram() );
	
			
		getJPanelMultiSelect().setSelectableData( prgs );
		boolean showMulti = rows.length > 1;
	

		//set our width and visibilty by how many programs we have
		setParentWidth( showMulti ? 285 : 0 ); //300, 250
		getJPanelMultiSelect().setVisible( showMulti );		
		getJComboBoxGear().removeAllItems();
	

		if( showMulti )
		{
			for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
				getJComboBoxGear().addItem( "Gear " + (i+1) ); //all gear nums start at 1
		}
		else if( rows.length == 1 && rows[0].getBaseProgram() instanceof IGearProgram )
		{
			//only 1 program, lets just show the gears for this program
			setGearList( ((IGearProgram)rows[0].getBaseProgram()).getDirectGearVector() );
		}
	
		getJPanelMultiSelect().doClickSelectAll();
	
		return ( rows.length > 0 );
	}

	private boolean setMultiSelectScenario( MultiSelectProg[] rows )
	{
		if( rows == null )
			return false;


		getJComboBoxGear().removeAllItems();
		for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
			getJComboBoxGear().addItem( "Gear " + (i+1) ); //all gear nums start at 1
	
		getJPanelMultiSelect().selectAllSelected( true );
		getJPanelMultiSelect().setSelectableData( rows );
		
		return ( rows.length > 0 );
	}

	/**
	 * A method to create a LMManualControlMsg with some set values. 
	 * Creation date: (5/14/2002 10:50:02 AM)
	 * @param
	 */
	public synchronized LMManualControlMsg createMessage( LMProgramBase program, Integer gearNum ) 
	{
		return LCUtils.createProgMessage(
						isStopStartNowSelected(),
						getMode() == MODE_STOP,
						getStartTime(),
						getStopTime(),
						program,
						gearNum );
	}

	/**
	 * Create start/stop messages for programs inside a Scenario
	 *
	 * @param
	 */
	public synchronized LMManualControlMsg createScenarioMessage( MultiSelectProg program ) 
	{
		boolean doItNow = false;
		if( getMode() == MODE_STOP )
			doItNow = isStopStartNowSelected() && (program.getStopOffset().intValue() <= 0); 
		else
			doItNow = isStopStartNowSelected() && (program.getStartDelay().intValue() <= 0); 

		return LCUtils.createScenarioMessage(
			program.getBaseProgram(),
			getMode() == MODE_STOP,
			doItNow,
			program.getStartDelay().intValue(),
			program.getStopOffset().intValue(),
			program.getGearNum().intValue(),
			getStartTime(),
			getStopTime() ); 
	}

	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 3:40:34 PM)
	 *
	 * Method to override if desired 
	 */
	public void setParentWidth( int x ) {}
}
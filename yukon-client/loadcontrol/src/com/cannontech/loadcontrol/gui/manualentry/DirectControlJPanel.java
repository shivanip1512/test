package com.cannontech.loadcontrol.gui.manualentry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;

import com.cannontech.clientutils.CTILogger;
import com.cannontech.common.gui.panel.IMultiSelectModel;
import com.cannontech.common.gui.table.MultiJComboCellEditor;
import com.cannontech.common.gui.table.MultiJComboCellRenderer;
import com.cannontech.common.gui.util.ComboBoxTableRenderer;
import com.cannontech.common.login.ClientSession;
import com.cannontech.common.util.CtiUtilities;
import com.cannontech.core.dao.DaoFactory;
import com.cannontech.database.data.lite.LiteLMProgScenario;
import com.cannontech.database.data.lite.LiteYukonPAObject;
import com.cannontech.database.db.device.lm.IlmDefines;
import com.cannontech.loadcontrol.LCUtils;
import com.cannontech.loadcontrol.data.IGearProgram;
import com.cannontech.loadcontrol.data.LMProgramBase;
import com.cannontech.loadcontrol.messages.LMManualControlRequest;
import com.cannontech.roles.loadcontrol.DirectLoadcontrolRole;

/**
 * Insert the type's description here.
 * Creation date: (3/12/2001 9:57:47 AM)
 * @author: 
 */
public class DirectControlJPanel extends javax.swing.JPanel implements java.awt.event.ActionListener {
	private java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");
	//modes the panel is in
	public static final int MODE_START_STOP = 0;
	public static final int MODE_STOP = 1;
	public static final int MODE_MULTI_SELECT_ONLY = 2;
	//choices the user may choose
	public static final int CANCEL_CHOICE = 0;
	public static final int OK_CHOICE = 1;
	private int choice = CANCEL_CHOICE;
	private int mode = MODE_START_STOP;
	private javax.swing.JButton ivjJButtonCancel = null;
	private javax.swing.JButton ivjJButtonOk = null;
	private javax.swing.JLabel ivjJLabelStartTime = null;
	private javax.swing.JLabel ivjJLabelStopTime = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStartTime = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldStopTime = null;
	private javax.swing.JCheckBox ivjJCheckBoxNeverStop = null;
	private javax.swing.JLabel ivjJLabelLabelStartHRMN = null;
	private javax.swing.JLabel ivjJLabelLabelStopHRMN = null;
	private javax.swing.JPanel ivjJPanelOkCancel = null;
	private javax.swing.JCheckBox ivjJCheckBoxStartStopNow = null;
	private javax.swing.JComboBox ivjJComboBoxGear = null;
	private javax.swing.JLabel ivjJLabelGear = null;
	private com.cannontech.common.gui.panel.MultiSelectJPanel ivjJPanelMultiSelect = null;
	private javax.swing.JPanel ivjJPanelControls = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboStart = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboStop = null;
	private IMultiSelectModel multiSelectPrgModel = null;
	private javax.swing.JComboBox ivjJComboBoxScenario = null;
	private javax.swing.JLabel ivjJLabelScenario = null;
	//attributes used when a scenarios are present
	private boolean _isScenario = false;
	//contains <Integer(ProgID), LMProgramBase>
	private Map allPrograms = null;
	private javax.swing.JComboBox ivjJComboBoxConstraints = null;
	private javax.swing.JLabel ivjJLabelGear1 = null;

	/**
	 * ManualChangeJPanel constructor comment.
	 */
	public DirectControlJPanel() {
		super();
		initialize();
	}

	/**
	 * ManualChangeJPanel constructor comment.
	 */
	public DirectControlJPanel( Map allProgs )
	{
		this( true, allProgs );
	}


	/**
	 * ManualChangeJPanel constructor comment.
	 */
	private DirectControlJPanel( boolean showScenario, Map allProgs ) 
	{
		super();
		_isScenario = showScenario;
		allPrograms = allProgs;		
		initialize();
	}


	private void action_Scenario( java.awt.event.ActionEvent event )
	{
		if( allPrograms == null || getJComboBoxScenario().getSelectedItem() == null)
			return;

		LiteYukonPAObject litePAO =
			(LiteYukonPAObject)getJComboBoxScenario().getSelectedItem();

		if( litePAO != null )
		{
			LiteLMProgScenario[] programs = 
					DaoFactory.getLmDao().getLMScenarioProgs( litePAO.getYukonID() );

			ArrayList selPrgs = new ArrayList( programs.length );

			for( int i = 0; i < programs.length; i++ )
			{
				LiteLMProgScenario p = programs[i];
				
				LMProgramBase lmProg = 
					(LMProgramBase)allPrograms.get( new Integer(p.getProgramID()) );
					
				if( lmProg != null )
				{
					MultiSelectProg selProg = new MultiSelectProg( lmProg );
					selProg.setGearNum( new Integer(p.getStartGear()) );
					selProg.setStartDelay( new Integer(p.getStartOffset()) );
					selProg.setStopOffset( new Integer(p.getStopOffset()) );

					selPrgs.add( selProg );
				}
				else
				{
					CTILogger.error( 
						" *** A Control Scenario contains a LMProgram that does not belong to a Control Area, programID = " +
						p.getProgramID() );
				}
				
				
			}

			
			MultiSelectProg[] progArray = new MultiSelectProg[ selPrgs.size() ];
            setMultiSelectObject( (MultiSelectProg[])selPrgs.toArray(progArray), true );
		}


	}


	/**
	 * Method to handle events for the ActionListener interface.
	 * @param e java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	public void actionPerformed(java.awt.event.ActionEvent e) {
		// user code begin {1}
		
		if( e.getSource() == getJComboBoxGear() ) 
			jComboBoxGear_ActionPerformed( e );
		
		// user code end
		if (e.getSource() == getJButtonCancel()) 
			connEtoC1(e);
		if (e.getSource() == getJButtonOk()) 
			connEtoC2(e);
		if (e.getSource() == getJCheckBoxNeverStop()) 
			connEtoC3(e);
		if (e.getSource() == getJCheckBoxStartStopNow()) 
			connEtoC4(e);
		// user code begin {2}
		
		if( e.getSource() == getJComboBoxScenario() ) 
			action_Scenario( e );
		
		// user code end
	}


	/**
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC1(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jButtonCancel_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}


	/**
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC2(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jButtonOK_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}


	/**
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC3(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jCheckBoxNeverStop_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}


	/**
	 * connEtoC4:  (JCheckBoxStartStopNow.action.actionPerformed(java.awt.event.ActionEvent) --> DirectControlJPanel.jCheckBoxStartStopNow_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
	 * @param arg1 java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC4(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.jCheckBoxStartStopNow_ActionPerformed(arg1);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}


	/**
	 * A method to create a LMManualControlRequest with some set values. 
	 * Creation date: (5/14/2002 10:50:02 AM)
	 * @param
	 */
	public synchronized LMManualControlRequest createMessage( LMProgramBase program, Integer gearNum ) 
	{
		int constID =
			LMManualControlRequest.getConstraintID( getJComboBoxConstraints().getSelectedItem().toString() );

		return LCUtils.createProgMessage(
						isStopStartNowSelected(),
						getMode() == MODE_STOP,
						getStartTime(), getStopTime(),
						program, gearNum, constID );
	}


	/**
	 * Create start/stop messages for programs inside a Scenario
	 *
	 * @param
	 */
	public synchronized LMManualControlRequest createScenarioMessage( MultiSelectProg program ) 
	{
		int constID =
			LMManualControlRequest.getConstraintID( getJComboBoxConstraints().getSelectedItem().toString() );
		
		boolean doItNow = false;
		if( getMode() == MODE_STOP )
			doItNow = isStopStartNowSelected() && (program.getStopOffset().intValue() <= 0); 
		else
			doItNow = isStopStartNowSelected() && (program.getStartDelay().intValue() <= 0); 

		return LCUtils.createScenarioMessage(
			program.getBaseProgram(),
			getMode() == MODE_STOP,
			doItNow,
			program.getStartDelay().intValue(),
			program.getStopOffset().intValue(),
			program.getGearNum().intValue(),
			getStartTime(), getStopTime(),
			constID );
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 3:40:34 PM)
	 *
	 * Method to override if desired 
	 */
	public void exit() {}


	/**
	 * 
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G9705B5B3GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8DDC94575537CDB0218DC9B551C4931B92E39273ABEDED6B53573765CDE9EBDA525844342475E9E8DF1B5856B424AF6DC3DA5B7A5481D985DDBE840C98B0599ACDA1C164CBC5A4919489A88AD1D4E29498F687D859AFF787D98C094F39774E39B3BBBB3B002DF96BAFA7B377FF6F39675CF34E7D18BBF787216035E8D3EADA01A0241A84655F3ED4C14808900477DA1EECC0AC23424473493F3F83ED
	92F6EFCA07EBA16455FE4DE44A953EB1148169B2C847BFE4B2ED017BFC61DBC353C660A6041CC148BBEA1E7D4B70F24A32D04EFA1AEE5AE706EBB6D085E01DC05195C47E79FD058A6E07F436F2CFA8B5CD90FAABC9992B33D0032FD04A55C0DE8BD0FA95A9B3322FD8491F8F98A993875704CAD6B6892E19D43B29F535CA3973532305149F6CCD4BA232B475A335D5B1DE0FF235880FD0C32C95BCE5CDF02D6F989AF8476AF616DBC5174B6D12A56BE03943AD5A2CF06FF5BB4A87066D65CE51B5ACBAA4GC66B6A
	1A6CDE49AA9FE659C7BBC41764D8CEF57F34B303568B3AC35AD1CD30D49731578E382F876A2CC67D1F4A2AD7741BB194ADAC3F3FB4247E8B2A195E89552A7EE30F5C1C96D1C36A0F267EA0FC8510EE83E23A2C5C073A4457F0DD6C242C3047E4AA842A5803F8BC45DBA05D8B645F03BA3E7D8F54316B43AF8B51B30756650450F15A9E265B22BD2A0E452FC72E5BCAE3E6D1B671FB8A113B57E4AA836AG72GCD83AA22316A4BFA932E0DFDE0D727536DEA74F88EB9EC5E63EE1B64007B3ABA48D1301312556D35
	89820B475B1CE5867AA04D5F9B980B04D85B4E8A98BFB1A79F94267CDF47BA13C15B96BEDD1B962B5431F42F5AB673BEE237E16A5BE440D315FA99FE8345BB7629B87355FA0A13348372166EC3BBF7E523AEED69F78B39159F242DB750E556F7BA52EAEA198EED352AAE4C463767929B7B811F8194833498E885D07AFE34717F492A9E4F462D907FDE1768B8B55C67913D7221E13B43A6F995DBBF38AF1C2D0D0871AD1CB49F334B7CEA2D0F923FF64E50AE09738F26D976B3FB546ED76D42E43F98D2F6577E6058
	4866BE9C26FD42311F79F0AD472FD2FCCC03AB3E25B8C9C7C1DEB290ABDFFF11601DF57A98E9253827CE9FA3CF58B1C622A0AF99087937A50F0C0B1D87205FGC582C5834581A582A59FC09FE7E46F1EE0BF6A50781771FEBB7BE538CAFE59AB363AFC326832CAE7C42FDD6CF3C8BEC1A97303ECE2573EG3EA7E97F36020CF7A5176495E53B5B85350BCE890249474AAC4B5EC44AF8A51A5BE9F7CAA0406991305E655979445E22CFBE6D3109322416E079AB3309CDAE0BE720C628G6E9B6A093D9E20E3EEAE5C
	1755232D067389968169B975E897EBCE9EDC0FC1F0CB8EB204DB099A22F794E374C3D7AEDC97C0792E37CD26D5C0735F417E793BAE0C43262C870432275FB70CC3C23D87D9CC798F6A63B012569F8DF89C50F2A021816754ACD71742CFE412AB11BF513E529526ACE98F137186171129691B9315E18A13C7E21E597D3982923B96E8D7BD507986347D3DB996961307C41F04D1586E05G12EC2AA7D859FBF2499CA3DD063936C972C8AE9B5C781498181B1B2946E73F1B474EFC0A13716AB084100F63DF4A5D44F0
	28C39B6D187FF51AAF4A32575EB7ACCB27A4D9363B86D47EC728AE3E002150273475D71BC9DBE5E8E394509C5E561ECD791AB8EBF33B0706BD1D2487A9711ADECBE2F381140F677E7F50CE56D8C9BCBD1526557CACBB7A4E08885FE446D663B17A0D30B2567E93752BB28EDDA4FDG47CD1302333CF61AE7EEB419EA004E83C5B4E27B9328EEFA3EFFC61FE05DDE24B23475E77E8BE53058B81997BA365F4FB30E6D1EBC6358167242472EB34FA8F6D91E1CC75A689EF1E97A42E89E999FE14D6B12E80764AC82DB
	AB7F2E1334436E324BE76D3681C9BEE53FA2411A341144F4AC9D03E360BE2E91474C1157F14C5CF165BEA12E27A64DE8FDB56B01D3E90507D87C169DD247CC265315FC5247A4076484C39DF68F3BE406CF21633B027B56D22CE25BEC42DBF2745030AC3BDD07496465A893E9DB4A5925C372763B3DCE49D6F2D13CAC160BA3F2B975C5F9A34DBEC26ECBAD3BF63DE3B1D86117DD54D65C53282B31ADF41587CA4F14D6A83115AF7C6950F42D1E6DC357C14776E313552F126B177D667DCC3F430312F568105BFF82
	983C27E43767DF2AE8D06D135538CA51771666078375BDA5C340139ACF38C72E0B4ADA8113551A2C3F597CD1380544F69B44FCAF107F904E9F2B73C9BE4E9F4AA4F9586DF030EE89F94907E81FF395E87A5134C36CD9BC912EAC7FED37D1FE6DE14CFF44B03F0D679F749865779EC6BD1FAFA06335CF3AB4ACC107A0935CB1E9D4D96BA5976469724E080EE1F58D392AE0A3DC9D1A391161AFECB66E6F3F5FCC6643A1DE7FCB1B5789E4AD486AE4635382115469715A1D3014A0133D3267D0D42B5DF310C1FF32BF
	B18B2EB1C00C37B30F4C5986CE97A21AC89DB7DE44BD094540138834DA29273E090DD92C5C3BC3D8EEA924D7B62965B20EE84B7D1517EB835CF6C4AD9791D06E4B8EAC17GF812261C391915BB5FCC4A7D186FBB6C6658EFA9F68CA632175271F96AF82EF64FE47123C3064F3C0422157A97B66B1FB30F9712FA93GDF510C3160FED93B66E974795CD6BBDD66ABFEFDF50BF63CE6586BDBB640355F6E7541B327CD72E3EC14EE214F47A207957FFE612D370560671AA3B63B6C7662127270886DE81D6E4370A852
	8261F518CFE7E76C92598AE3FBA37F65C2FB2DEA46796A23E66DFECCECCEE35A46903629F817592463DD55B6CB36C72EE3F54BEE2CFB5A3B389773924762B9F65903185002F178DF25A4D669FE9499C67C653E9118536B6A34FBCCD3697A116C955536607ECD4DB069B7F3A03D90E88990FB160C214F18246E95009537E25FCE6D56766DCE404700220158181ABFD48557490F1D682B0BF6E24BFFE642E4BE191B5F20683864CBF78B75D73727996DBFC5661425ADECE53EC8ECD5FD52B19A39EE611448F54C961E
	A134C549D198470E22AD8E749859E256D174497926DA35AD131ED8196C9D8E149D83752E6032FF39C1AB3B7818495484B4F88CE5BFFE2911487EE767CA81779616F1BD46C04642E328C77CABC6FAA4F1BD1EF837C92B47BFB181AAFBEFD55AF1A8EEF903615A101050467CD950269F07AADFA17D20827026B69C0766ED59249907CEC24F97DD83B03B7075F7A109EF18C7147419C2A2174EA382BE872CF2CDE62F2A2B8D779CDCC544068EC8C782C583AD82DA46F57BF96138FBEFC77CE1765EC65D1351EBD59BBE
	BB7DE5D2FC66637C1954B399BE8B677BCC2D7EB93266387AFC5AF25C78D975BC609EDDDE8424E769B036F7B61F0EF7B147595E59FA0EAF2478E28D4E623E0E62A41D88F98DA7D0572FDE5437F15E09C0F9F13AB4630B8B62FBD517DE2163E37DA86794099503711D0DAE823EA771776857ACE4AFE0B554195B0E73C7EDB74E83A56D98030B0B49FAA18A52730162009201048E987B019ABAB0964B369A4D25013198EAA2D577D018ADAE8FDD1B8DA3027874B66C6D8864E36D7676E4D0FEC170F7209F5FF4DC1B8E
	35C1FCFA9D92BB0C7C784E19A2E3BF628829787145E1A3BF26C01D996F219F8BB7127610F94D729E36679757581E24F15B93711E11CD573C0231B467BD0C2574D789A61C047C1398B71F5ECA4A60785A61363BE48147563D2F10B5395BEB9F303B90BBC0B12B5BCBB79A587ED78EDD8BD9204EFADE6F6522507BA29F95996F0B5CD8E43CAF72692270FBFE530BC26D1BB07D26F17DBA0098364903180DE337F34C4F31983AB60B02F4B4471E5CCF304510CE64D857E502A5C35AFC8A316F1D2075C13A06E3DF9AA5
	D88B24FBB97664953A378D69B927B0DE3EC447378510DE82144471EFD01C4C65991DECDD437006E19C23898F39A25FC4477BF044E43C4FE5605E613FF25FEE9B2D773117F3282FFDBE49C7872CA6D196153C5F481B85037D2C9322D392F02F63790B19CA19A3327BF0A56F8F8B6898C3F4AD6B44B536231B5852C66C88B42393EDF9B8E85FB4867262BA15F7364AF5E5677836DD8DE5F2CF8716E3B17BC4F1687E71F431F17FF8261874D51FFB58EB1574FD605962C21E270E6C2D3264A466D11E45A9BF2C748624
	20BE74874A4F72C2717F35B8D4BFE3367F62105676D5BCEEC6FA74765C81B629D56C5226DCFBF5F612CF875BB79230B9C08BB4F9CC3668504A2E66FE5FC97BA549DBFC9A7DBE3A1578FDB5248B4E18CCE5E7506F5BB692BD1B4E28F5F7413DC3C9CFD12EB34E0C6F7779D0A6D6D70E693959295533065BA83DC8EF2325403FC229E315F2B51F9DDF36854A541CB50A394CD7499A4A4F53D9B4BDAA609CA8B5E67398B86232A913815BFBF8030E21BF8606DB5290FB08E2EF83768C47CA68987A91D4B8D5C06CE10A
	FD96304D5C8E5F2DA57308C39CF58F030CB9E7C9391F856C6B34G66810AD05A4278FE3D1FBC43BBC53F5DB96C249B5645DD742CCA9D1131824AA61F45E7DE77E5926F9E2F54AFF93D120DEDEFAB65A3E9DC74423D238B4B7F7C8451294FBD6C327930DC8A9D43E7417D3CAEFCF67A4A8851215FABBAA17CCFF9A42B60F81F14FDF49475DF86E513004C001781353D0FB2FEFD056AEFF769747F9B1D8396C239B8DEF6B00D5445F68A14BDAC9F5AA1B1F5934FBBBE6C106D27A4321D486D4474E0796DC36C019D57
	223181EB512477599A26629CBCF71D433E709FBD7AF54779F3EACCF960BE62DCE00C31757AF2BA264EBA47566BA60E3FC071988D4E56715EEEFCFE0D033C9D9F601CA85909BDA2A1BD07E38FD3EC812463B8D6FB916762840E4D4CA358CAC8271FC7ACA98F675DC20E1973F15E2D67586C9E145B41311F7720DC9B4706FAD12E1FE316CC149B45314B1938AE086658573BD117059C7BC9B76A320CE3EBB2881684E96182DF97DFC63F18AFA84F4F97D4BF5440FD4B85A33F58DFA1F6BEFF01597F6F9C3F016273B5
	B8734BD5BAC612F48A6489BD2853C13A36B577022FFA91FBE6A35A2C16E32F1951E6ED9C7B3299ED564B3177C434194C3107C534CFA447DC9B39FDB876C6914ACD62183B88658AA2E289C5A8574C3122CBA85742312FDEC239B59C9BA9C23991A2767F4ADE72CC461F95484EC8DD5D3BDE3B6D10B850C6C7B4B67788F41DC86CBACB443927FCBF316BD2C82F84927AF02F527F866ED546BCF83750B6651C615931651D0DE905FD4C3F75FD6A7EC9466B116B7CFDC43DFDBB85BE869C3FEC012BCB9A31708D1CA63B
	D3F2114396A55515FB4AACD5FBABCA197C68916D7ECD6D0666107BB7310A5C254A5531471E4AE4FF6F8DD576B7CFCCC4B663BBD022723D60FFC34F47B7FDCAAA4AAC70DFF5857C2F2A3A2694677897C6514E99D6701B15E0DB2FE8773FC85D07E10EAA07AB4BBF9610CF46D228CE137FD1C0BE31510D695A7CAF87641BB47C4C1E0F6FC4FF2EFEFC3E60780F1610E781A32D4C0EB14AD5C8372746BE77E9451F8F142A3659B2BC911B32985D30FD1FE0FC8E52CAB7886891C80FC81F7AB47307720E0459B5258757
	CEAB2C983F0F52713A5886FD84284D067DE4C98FBEA759B8E669637D18E3F7E470FEEC43B16D57F46CCB02F43A04586FA9C65E3710F7B38C73F707BB4F20A7D25FC44A9119644AE4CC1F140C091E21B0E94A678BEF53B1456912408FF6AB1B7FEF23F35B4DC09689677F1B0A48BBB2999E84D8199F51B29510DF8F44B0114EFF9D10BE4F792AAE11D8E31B7CE4BBC8F45984DC4FBC1207F5C4824D118836B63FB00C6E0CEF8F1DABD7C079E4AE7BBB54671FA7E57A91DBC76745B2C857F2EC8645DAA05D493156CC
	ACB705E31F2758B4C84F69C75DFE58BD3EEEEBE82C4483CFC2BF5A6065CC3216F342DA166CDD303E94CF0E23AAFB820D7CF9DD984058FC71AD0295C03A04E3393BB0065BB8767B2B841B83690583981B6ED79A088E10CE824A9804BA00DA008601A2016681AD86DA8E348A28408EEBAE20B6A087D0049D6B0A24F511F70373GDB8C34424E5EA926DF04F997288948869481B48FE8B1508A2074A14887EA9A62670E3612C1076824379D511168CB748CE55F4190F928F73818EFD15A2A4566A9ED8F47D720546BD0
	2E44AE11BA1E45635421A7E60BF8EA8B23F3EF6B153E996EFCD0D6881CBCCBED9BC7BED973EF56E1E44E59B28E5FD6657A1AF2A56B319CDD197CF16AB09A337205B39B09CE325B6D6834FBBAE108D17A92DBE759A0FEBCC358AF53693A6DF3C0519CEBE16BBBC847F2EC994592A03D1CE3D7C4ACE7F6C0DCBA8896A7B60D235FC60DCFF6G8F215785B6FF56BAD8EC13FBA663AE2AF39460339CA837130E318F11D8810C757F29E4692C707CB74DCF003C651C6798DD7F191D700C60C4DD9F3BB41E2E26B03AD6C0
	BD79813AC6D339750037B8310F1A76CF76ACB5DB3B4F25EBC95949566E299C7F824527E8F036262F590F3FAB08023CE4A76E8B8F6EA2E3EC278BFC8E9489948D94871468427D5C5BDFA5671D423EDF68F4FB5A244B12C333C54B56C2CFFE20DDDB665EDD1106FA695B156CE27DFA35CB7FEE7029F2BAEF39E15CF123CEE3BB5F026B9971E2704981GBB3CEE0F6415C799CACF2BA863C07268351DDD7F76FADC53AD7C46DCE151CD99A14F93B85CCC7FA865BAAB4D1E0A7DF913F0200258BB967216812D86AA7040
	B88C54604136CDA9A9E376A66AB74A32E89D24A7AD50586470038A13CD885636BF736776CECF7098B988589850B4CD9E0B197DBDA4B666F97431F408628BBC7AD8FA3C9BE3A99672AC17E03E26FBB8AF713D05880281AD86DAF6096DD533BE352FEFA2FD4A245CA783EF3A57E4423D23C238BF3CD65B27E2691AF2876095DE1C7F194F7809BCC15D9749D2F15C96D1729E3043A30230F79F2E979248763112D7CD57D95B9947F6163F33DA4D7FCC9EF9AF93E2ED3E2F9A1666FBCA316CEF7234F531580A3F20FDDE
	303C15EF783C306A42BBE9673D4AFE24D76DA372B2C9F9DE3835C655E9456044F57A4F9E5276FD7B316D8B7628758C7412F5687676A1255DBF5E2B66ED4E1C388CEFE6E0BDFF5C275673056E09544378366ED779D2B2A642476264A2DD73AD843B4571B8C9AF8B5E07ACAA536FC3A6C1F941476C4DE2789F3B460BE1AD9582EF19CF0D61861F5A1F189E9902713E26C5A0BA37C179AE1F9A5B249E4353111AB8A76B0423EDE21F642085480FAFF89E2123E456EF36CB8EDBF0FE8167D5ABE8B9F97C846667E96573
	B3AC2A6CBCDD7DEE8F2DBEF0EFD229DA1F172F176D769051017D97E621BEB748FED7923D1AB6EF603CAC0361D768BEF013A8CB140D292A64FD27ACBBB00F9CB3D472AA0EEB7434CAAE51EBF7E3DE13E713D68FB5DB49FF7A6246GDDAA95BC46DF2065BB6CF679E42FE807111D1D5B998AB8239961E367F6667B70DC4F9AD11B9F2B648BB266F71B0D788BF8FE2DA1FF894F3FE52391FFBD4F3F1AE5145F41735B8372EDB24B0F6279F7590C7823F97EEA2BB6FF21421F226A1FE1141FB10C790FF59B55DF4C736F
	3CE024DF854F3FA743083F09673F15E1445FB50CEB4CA9F56A587464469DE43CEBF6FB2D124FA28FCA961FF5D0328DBBA40B6C36F807DD16FE3717F41E6D2CFC11190E4135B84E5DFFC02D6BE1B319EF37533EE6A1912C0C215F2BD74BB40BE146425AFDB096D6713178FED1DF5FEBCA9F22E78414FFCC467364E80932867A2599672962AF5CA3B47DB4A38D573AC1EB20E1B6DE468E2B73D4A41F27CE9DD475AE1A045EC3C544C63555285B6586351E5CCB616A29D46AE1FC339BD53E18CB242FEE27FD5F820368
	F625CC6CA1558669CDEA79931E0948E16B3179F42EE277DF515C576D1F4CBE53E40949B8F5DDE530F56A25DD215FE37BF7993F477EF81771B90F08DD61FF7F9235AB746FDF6E58257D7D8BDBE7FF057ACCB91BDCCEB6468D1F95E0B5FD947C585EF7D1324A1D62G6779C9F936D69F768821647D3C1C0C836437B3F651E13FC20FC61F02022E81A67B11A3A4BF85E2BF773249D4835482F47EB22E6F455D5B853A3EB7D85B9F318DC8F4E290497BD7D63E29A2341D0FD50C7F9B4F4E8AB2B77639E1596BA475A3FE
	2E02448A74FF8AAA3FCF2AA07E715A8786E5D694FF1FD4C146860754CFE1E5FF2C9777517C17F1FFECC7A66E19C5F1AC176E95A6C2BA05E39FE560BEDA4688BE8B9F6CD17BC80B667E29C96D4BDEDBFF796DF515411E1B367562F3D3B13439F3845FA9D5D7851CA3E46F141A9D6E11B6E5E92A6C49CB3DF80EA5EA8477641DF4ACDF8C69C42094206031BC7920914646369BDAC8CAF95F50AA88B84E35F7931E9063DC65DE98682AE1F14D627D6AD132E6B67BE1AD815486E4837283CD73E34C5B2BCBC275C1GD9
	C3558591532730CD55675937AC2175292AA56FBF2A2BCA191D9A4B701D50BCBF5A49DDC66C14886994A07368E46D746EF155CE97CF28FA1D5FBA913D145F83740778BDGDDA9B25D67FA706C5E0ED10C0F03E53542386FF306E53B832A628BEF3230BEC2BEF0416A5D5B076792A3C7712C62CCB34ACA6218DB44986B380258F7689E9B19A7A3B97675AC44622E201E830ED067A815952F9247B7E5210CD53C3EA7ECD8DF4507D85F0DC7ABA75AEE3E08A7D2303FD45B70B799039F727651F107549F4DB12187E5AF
	63588FAF200E39E3087DA8836D5542313E8CAC97B306FBEADD6DE472D981E961A313E987D0BDD08750A0509850B420F9C031C089C0AB01D68365FEECB2D900EA00DABE463ED37ECEE9183E233CFCD6BB0F00E376770E041EB7FEF8E47CF963A7C7686FFCE03C6F9C75A867401EB9C24F0576777BA4BEBFADBF124B31D6DF075BE7A7B3A2FB065DCF472C735016410FF18F68C0E63867E75C7BC11A81FC73BFD61F1FE3BFE64F42253C8F7E234778DC4DC16A57F8A81F70B16E73BEC87DA5DC05B160AA4EBB2F77DE
	5BF7B0AA2F116FE2GDF6D55403D3AB6C877DEB5BA4771CBBA564BD7757BF43F2578142B7AFDBA1F4877FCA1AF79AA46D3645150F17159236347452C23466B09FB0F862FA76EBFEA3C1EF87828F6BD416C52DCF6EDFB614F51313DF30A5EAEC9946F1D22374BF0995A4581F9CB27E09CBC64B1DA8354FC0A792265D3215FBB1D5765F9A09D81B4CB03B399877A024E17C219B89DFFC298D9AB153C55F04D3D015D6F38C17B9E7BEE33D1BBEA15B2EDB7042E3BD717A7C3BA92E84E8D7AF648225ED78B204CE2255C
	B283990C6F7B9B35FCC9CAB961C665F7C1F0AD812A3FD1AF6F1BD9DA3E8EA55F26DC7DF00D820A8E623BA5CB2F67C2A8932F14CB3CB1141EBF36E9791215F269916CDA8857B22006883D3CDADB38986E0C88A5CF4E8847B788FCE3BADE657DD140D93DE9CA19F94AF591DC17GAD8F5273C7977472D220CC46D4D62EF8EAA8BDFF1AC1E22BC2175F24243B8C78109C3A3CA9101EB15528CD83C136188F65E21532CB8DE430B145519EFADC73350FBF2E0D359B0FEBB734870FEBB7379B0FEB3736EB47B5657DD9BB
	195386E01E6E62656E62587B9C1BC36BA458D93BCD9E6478DC2A9741DBA4A210FFA7056AB5C231AE857B2286FBDF413E5ACE66ECE872205B0B3C7F2B1D6C47775B9D8E167EA6ADE3F741944E6D91C7F534FBC40D5E0FF20C684D5643B56F412DB297EF4D3488632F07A73776BEFBD260323EF5CA15654D1808AC4677EC274AB73FFBA2FC6CB975D3F47D3282E2EE75D4FCF6FD1CE239B741DA6DA64472693A398652CDB761FC729BD160B11D2C399F952F7F736C6D1F000C674B54B67DC1F37FE1597517BD633A4A
	E0BEFD0CBE0BF501BF87391F3BAF61F952B10E7D081DDD02F4B4471ECB256F1BA09D4F31DDE9F87EAD11E3F59BF03FA419E3976833DA434DA6D3574D084D3392EC8C52D19C5BC71FEF22A19D4B319BA8369452ABB93644063A2C6658A6896566C6A216CA1F87FBA1BD4631D8B35AE09A475A32508673B896A9228D96F14CD202F217F0CCAAC19BAC6758412B28CB8A47EE915186CD1F666D68C39B8CF26C83AB720EF16C979BD117A59C3BA0E0BB16F36CC5815B114231DF2DC77DB2BE4365DEC099459C7BD1964A
	F0F0EC76E914B105E33FBF0DB2E6F06C51B214B11FE36BF9BBE2B9B6174AB05F82634CAD082D4CA6D893243BB8D61E4BED40315F5A388DB896370B5B00E36D655C869CDBFA025BA00A475FCEEE830E355B90F3F06C168C5E8E0EB96999BD732D500EDB91AB264FE6B510EE6258AFCB29FE109E64D8731B8413A19D45319ADADFB42497F1EC9A6FC7CBB876BC75DB71EDA6D345ED086D26F2BBA1BD483161DE3EE74931BF53F6A4C2BA05E33D341F8B1F057B4FF2DFD22C9852B59CE33F65ED01F497471EAD653662
	5817E839D8C8A7F06CE3AAF7A524D7F3ECB115E11986B226A136E1A35657B58D5F8D4F6AA56B8751E19FF011BDE5815FFDAF6845FD10793C6C33743D7E658151434A2C6A45BD10C53C4C1BA2A9B3484BB408D8A61E17D96E89BC277AC7BAE6AE037C955370197BE6BAE68A536119FBBA72BDCF4F83743BDD8A5F9A5A46DA48EF62E57EC23F35A73948A24D2634E5D39A6E6D4953317EB3940B04740C693847705E06715E5163374A0C4EEE45CDD76F19AEF29FE977A0AC2B9CE4E9A5F9157382D1FDF8DEE089702C
	182EFC7B6AF6F6F6D3B98FEF8D3451D3342FB7C1190E5B314C899B59D7320ADEC9468D946E3F813EB7E66365E75B48B32CCFD23EA3F444E5E3E53F424B4A3723FDDE32214DA2EEC77B14C8616C1329318D21D9372B76215F3D00748B8176A9B4E7EB75D15E25B37915E69EDBDC27DFD1AC9E52899C9B2663DD9224D7F16CABB466F65C81FD788EFEFE38845B534B315BA8A6C3FA4A9D5846B3D74335F1232E0D7A980801FAF214B24C578BC5747522BBD4DFAF3D031D4DD5ECCD6728150025F0BD3C5671EC1D2551
	A3E3C6202D0BE72836E6B256D35B15GDEB383655EC467B29B24BD9CFB192EC1A2A1BD03E359F4FC0903741299285FF397466BABD9E17A4AAA28E7E700FEFF25FECC1F8977B379F97153686F860E3DF2060E771036F16CF7F4EE1C8669B9B3D13FD7435AEF234EFEFA7D62E72AFEE4317A3F3348330EC4F7D15137CB33503789D0BEE9A673ED4D1D6C2CB563DBC367DEAFF93074CADE4677F28E72351132F7B23E858A9F537FC86EF87B1D1B14B8A0F2626F8C74FFA2241F8E30EFBEDD3B2D84BC65CE345B73F4EE
	5FF19774133B907353393D89529D9C7BB31D5B47A09DF9976A774D1D6379FFD3987BAE3CCBBD674A6A6B370D976FB9023A4F9BF7D7E0FB93A07D05007A66E60CD7DF26263E653A7AD2B475B1BFC6F4874FAB77F46318A24CC2FFD777844ED12DF46DD0G7996DEE6D5A90E6D6CB953C4BE4F234839702671392EDB691A26836AB84F6BB956ED3C07ED25FAC5C239993350DF8F0DBB37617CE6B837C1BD3B826CA1F4877707AD7C3797CBE6297DE145AC76BB83654CC9CFF0FF38404F002E1E25760702590C0F699F
	55BB1EBF357B7FE533837D59G69BF2DD933C655BFB7D3FF1E1D796243332AAFC6B2837DF4EF171A1718E96C27943AA6E983F9DD33314D6D5D01B1A1315FEEC27E3459583EBF170E671FFCCD3C8679876A79A040BF0F06080D1FD359CB207CB22E5F4C0CE0DF46E420CF526FD6FDD9FCB77B2D8863FBA6B35817FF48C43E1A3BD5DF36A9FC2C2DFF5F982E2D6B1536E2AC5A6E8E74259F52378634757B3D64DE7DFEE50EC852FBF87AACCFB3BFFE7BFD550FE769EF1F1433BC647DE75DF6DEEE4787EA396F07BB37
	3AF7FF1925F2BFBFABE46ED579FE1A3ADD4F578C01D0325DE6979D6E016D74970A15B57C3CD2897D9DE53F6870C9DC0F5D22DA5F6E8D935763E49F61E36FAF9676613749A340FE31F7736FFADDA2070C746FDF4BBD8E313F3CCF74592DF5F5074805F411532DBB68FD0BE6C5AB886CDD796FE97DA9D02F799E7057BDF83E6DAFD6D577AA9B7169764A3DF5D5FB36AB584736C0DF456B52E6C9EB0F507BFD5BA4D5CE0BB9505F8D7DEADEF39699AB3617343454B91D252A2F2D83EA190F421DAF5BD389B65E4BED7C
	AD3B4AD7D0B291DF2BE753FACB02FD7D6CC5353E1A2B93574364D0FD1DA8222F6B418F72BDF81EE1AB75D18C249783A5F29F15B8D519E7686F8236D7D5D09F053677B172282148FE4823723FA7CCB45E996F8FAE293C3F914C2CAF3ABDCAD7E4E5DE742AE5FE36BEDC7C578644FF2E2C72FD7B4244790E8D2BED5BB72656F16B6949797705534631F66EA3354EEF14CD5C479FFD2C722D6E1BB8DF74D5B5B6D6E5E1EC24007F4B6660B850346DC048F140A949A27959AF39600189F61EE047695613927B080CB28E
	6C49265F4801FA4700E64C416FD03E1303F2E3GDB4165AE225F749CFF7CC139A71559C6AB9947208F290C624F41B38ED05B670C4F6BB01BFCD7D0FD7C5ADA552E8BF7CDAEFE63BFD4F90F16533EC30EEF5761195097B471736809B0BE2B5E9B9003599ADF4F5EB9F13ED66A6B506D2643C4187C4F262AF23F5A9DBCBE65242B79CF17CE4ED6D5A61537B45C6FB7F47D7174BA15EFEA5879AF104F3FDE0D7B035D98FFB6080BB91F43B1F10C628910CE82CA3F9763F5EA8F16AF862C73DEAC7F9D0AC7C1FA9ED06C
	3D61E26C1E8CB5469E49D45B30ABDC5BF57EBCE8D679FEB2C9FB77E52972BF132356139D6EB7B0DCBE33C3C2865AA1815AEA7EBC5AE1D3A67D2E98244F83491FC73B3D32017F8D9440967372E7A93E9A528551B06EC407335B974951A0651D4DB77A46BB5F5194ED74BEB8FEDCBE7DF77158798F49CA4FFFC46B4F0538A86E08561F8B79D39F1E8B71C3DEE2B43E47FBB6682C434474CE9E174FD86FDB299E8D7769753E1362ED776975FE0D6B5D85F93177215EFF8BBA7BB0B13D4D5957267743F43E304C556B7D
	D50A174D556BFDA09B752E053CB9F3795FA44B39B63DCF0E4BE72C777F23F30DF03FDE6FD594B75F2F577BD3B928F7A1640D5D0FFA9F693EB63DCF0D4BE72CF7B29D6F1687697DE70AA78569FD837F5D66AA48BBBF8F753EA568FBCF9353FB7638FC46FA6F25672063666975BEC871A57374FA4777205E4BA02F7E81547BE7E14F4C0456FB6538FC46FACF2563E47483FA3DEF23F84C83FA3D37E4225E0BA02F78C1545B32615A74AE9F174FD86F4769F8BD65C13D5E89940FFAD02F77058D2877AC48DB8D443E41
	9817CFA6A13B4BE1F7C90759DF07623A8D51E7C365AC13667E3F034E3B7DAB0949F859FA7DE55C512736E90E66FE67A7503EF7BE8199DF4ED65B34C8F35F18FD7DE51F7B84E43C14233669EF1A7B1BF32E3F6C68CFC0469F3B55B62D515CC7FE823F1D396F9310D15F2B366908667E09206F0B7E6BE57F669310F1CB265A26991A7BED1957DF765ECFC046D39B54B67DCCF3EF5DF07DE50FDDD7996CEF73EE4E32EE04B5400B0249679572021F459AEF7B4F1F4674B4952489E92D423AC1FABE33D5B00D10031EFE
	8F4C3670AC1EFA40F7C920FB85CACADB937F925EF797DCB43D72030BF21A109ED4D32B106A879AA5B58A3F05BA6829BC72AF28669CDEF3ABBD74397CF2F55D5A676EDF4B2AE507E0DB05F4F21295EA77B2A9EBE53707561D26B1C01AACE4725F4F4A42BA76ED8B94C8FFA3569A181205347621F0857445A770BBEAD958207E20197313C33FE7E9EA1DE28813227DDA03B218FACF5BA24E1D2A61CE8BAC9FA0817F2572B264F547FDBC359232368554AA6055200CB187F20565A02DD03ECDD0A78B95AD6E910BD57D
	6600456D227674F85D83DE51E9718D3A079DB6CB1FE49994DDB607E4138533669385D043C64D1B95AE09BC769F01F84A8A5847F8743EBD3FDE720BB33E35423AD6E1ABF9DDF6CA7252DF4BCAB672D5EF654FFEB68B199E7225E172D28B024DC7AFA61FBC6A105A04027E1364CFCE79E44956083F43754942E67AA7C9F6135FFD6DEE91FD03B2F90DFB20CDC8F711BFD0AA6431EC8774155D6CC73987E84426B676D2FD3329553CC2BE551754D24EEB497FE64E4E3F9FDD31E82D1056ACECA0FFB43AD9344AEEEF2B
	10A98FFAA530104366779CEC2095E50C60291635D0DD91EFBEE9ECB9F94542159E72FFAEAAEBE5D6B3840E5FAB6C26A5491B48F2DE42F6F8D07402A8495BAA13BF386A766E60F91FFAD5FE63076FEEB91FA624AA0DA426AF75FB202B750BCE3BE394EE582E91F54AAEF0BB784C65A3FF4185B43368B443ACAE207C0E47AAE6BE7C17F3D4004AAA8B2FB1D3826B6E81496D5C5D585F8FABFFDE8158952A5F462BA7E54AF5E5727C53B79FFDFACD9F44C1133056D9D1C17FDFC97FDFC57EDFC911CA0AD4D601F11305
	307F7479FEECB38D9EBE2E917717B70387651F3D78585CE76A131320F54D02097EF198F0C22EDA6A443033CF725E94B3F35B46994B49872E7D9E92AAFED2EF25DF97675887531531005C4378E7226F41F86EDAE514C8E5396B1537863CAE32A7D6CDD37F201149824A4C7B73DB41A1C6605D5C51A4D5C50B56507F6F1B34598857FE4AFB00082769E63F0106B862107650E39650DA7AC64930350226D53D34266C7FDF2D6AD5529DFE189A5477D0818EEDB2C8E113503D297FFE0EBAE7642840145EEDEBB91A2610
	09237FD66E32013BCC7435CB00EFF69824349D11CE4E06EDCC8D8AD4957D37EA3947BF295824CB30A0DF535D9D83DB7DDB3574C3BF57BBCB507BAFD06FF50ADEBCE215EF5114DE55FED7F05554FF047CE675585758DE5A342F693FAB78867D965B9240D7FE0D7F6D1ACD64ECD428EF051CF20A8E07ACBA069ADDB6725D10C3233224FE23642DBCD23F8F4BA819AC2F0A7E5D5F0B9A1E7F81D0CB8788BF5EE3628EA9GGB004GGD0CB818294G94G88G88G9705B5B3BF5EE3628EA9GGB004GG8CGGG
	GGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGC8A9GGGG
**end of data**/
}

	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 3:43:40 PM)
	 * @return int
	 */
	public int getChoice() {
		return choice;
	}


	/**
	 * Return the DateComboStart property value.
	 * @return com.cannontech.common.gui.util.DateComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.DateComboBox getDateComboStart() {
		if (ivjDateComboStart == null) {
			try {
				ivjDateComboStart = new com.cannontech.common.gui.util.DateComboBox();
				ivjDateComboStart.setName("DateComboStart");
				ivjDateComboStart.setEnabled(false);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjDateComboStart;
	}


	/**
	 * Return the DateComboStop property value.
	 * @return com.cannontech.common.gui.util.DateComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.DateComboBox getDateComboStop() {
		if (ivjDateComboStop == null) {
			try {
				ivjDateComboStop = new com.cannontech.common.gui.util.DateComboBox();
				ivjDateComboStop.setName("DateComboStop");
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjDateComboStop;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/10/2001 10:48:08 AM)
	 * @return java.text.SimpleDateFormat
	 */
	public java.text.SimpleDateFormat getDateFormatter() {
		return dateFormatter;
	}

	/**
	 * Return the JButtonCancel property value.
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButtonCancel() {
		if (ivjJButtonCancel == null) {
			try {
				ivjJButtonCancel = new javax.swing.JButton();
				ivjJButtonCancel.setName("JButtonCancel");
				ivjJButtonCancel.setMnemonic(67);
				ivjJButtonCancel.setText("Cancel");
				ivjJButtonCancel.setMaximumSize(new java.awt.Dimension(73, 25));
				ivjJButtonCancel.setActionCommand("Cancel");
				ivjJButtonCancel.setMinimumSize(new java.awt.Dimension(73, 25));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButtonCancel;
	}


	/**
	 * Return the JButtonOk property value.
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButtonOk() {
		if (ivjJButtonOk == null) {
			try {
				ivjJButtonOk = new javax.swing.JButton();
				ivjJButtonOk.setName("JButtonOk");
				ivjJButtonOk.setMnemonic(79);
				ivjJButtonOk.setMaximumSize(new java.awt.Dimension(73, 25));
				ivjJButtonOk.setPreferredSize(new java.awt.Dimension(73, 25));
				ivjJButtonOk.setMinimumSize(new java.awt.Dimension(73, 25));
				ivjJButtonOk.setMargin(new java.awt.Insets(2, 14, 2, 14));
				// user code begin {1}

				ivjJButtonOk.setText("Submit");

				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButtonOk;
	}


	/**
	 * Return the JCheckBoxNeverStop property value.
	 * @return javax.swing.JCheckBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JCheckBox getJCheckBoxNeverStop() {
		if (ivjJCheckBoxNeverStop == null) {
			try {
				ivjJCheckBoxNeverStop = new javax.swing.JCheckBox();
				ivjJCheckBoxNeverStop.setName("JCheckBoxNeverStop");
				ivjJCheckBoxNeverStop.setToolTipText("Forces the schedule to run forever");
				ivjJCheckBoxNeverStop.setMnemonic(78);
				ivjJCheckBoxNeverStop.setText("Never Stop");
				ivjJCheckBoxNeverStop.setMaximumSize(new java.awt.Dimension(87, 22));
				ivjJCheckBoxNeverStop.setActionCommand("Never Stop");
				ivjJCheckBoxNeverStop.setMinimumSize(new java.awt.Dimension(87, 22));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJCheckBoxNeverStop;
	}


	/**
	 * Return the JCheckBoxStartStopNow property value.
	 * @return javax.swing.JCheckBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JCheckBox getJCheckBoxStartStopNow() {
		if (ivjJCheckBoxStartStopNow == null) {
			try {
				ivjJCheckBoxStartStopNow = new javax.swing.JCheckBox();
				ivjJCheckBoxStartStopNow.setName("JCheckBoxStartStopNow");
				ivjJCheckBoxStartStopNow.setMnemonic(83);
				ivjJCheckBoxStartStopNow.setText("Start Now");
				ivjJCheckBoxStartStopNow.setMaximumSize(new java.awt.Dimension(81, 22));
				ivjJCheckBoxStartStopNow.setActionCommand("Start Now");
				ivjJCheckBoxStartStopNow.setMinimumSize(new java.awt.Dimension(81, 22));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJCheckBoxStartStopNow;
	}


/**
 * Return the JComboBoxConstraints property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JComboBox getJComboBoxConstraints() {
	if (ivjJComboBoxConstraints == null) {
		try {
			ivjJComboBoxConstraints = new javax.swing.JComboBox();
			ivjJComboBoxConstraints.setName("JComboBoxConstraints");
			ivjJComboBoxConstraints.setEditor(new javax.swing.plaf.metal.MetalComboBoxEditor.UIResource());
			ivjJComboBoxConstraints.setRenderer(new javax.swing.plaf.basic.BasicComboBoxRenderer.UIResource());
			// user code begin {1}

			if( DaoFactory.getAuthDao().checkRoleProperty( ClientSession.getInstance().getUser(),
						DirectLoadcontrolRole.ALLOW_OBSERVE_CONSTRAINTS) )
				ivjJComboBoxConstraints.addItem( 
					LMManualControlRequest.CONSTRAINT_FLAG_STRS[LMManualControlRequest.CONSTRAINTS_FLAG_USE] );

			if( DaoFactory.getAuthDao().checkRoleProperty( ClientSession.getInstance().getUser(),
					DirectLoadcontrolRole.ALLOW_CHECK_CONSTRAINTS) )
				ivjJComboBoxConstraints.addItem(
					LMManualControlRequest.CONSTRAINT_FLAG_STRS[LMManualControlRequest.CONSTRAINTS_FLAG_CHECK] );

			if( ivjJComboBoxConstraints.getItemCount() > 0 ) {
				//set our initial selection to be the value specified in our
				// role property
				String defSel = 
					DaoFactory.getAuthDao().getRolePropertyValue(
						ClientSession.getInstance().getUser(),
						DirectLoadcontrolRole.DEFAULT_CONSTRAINT_SELECTION);
	
				ivjJComboBoxConstraints.setSelectedItem( defSel );
			} else {
				//force our constraints to do something, just
				// observe them for now
				ivjJComboBoxConstraints.setEnabled( false );
				ivjJComboBoxConstraints.addItem( 
					LMManualControlRequest.CONSTRAINT_FLAG_STRS[LMManualControlRequest.CONSTRAINTS_FLAG_USE] );				
			}

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxConstraints;
}


	/**
	 * Return the JComboBoxGear property value.
	 * @return javax.swing.JComboBox
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JComboBox getJComboBoxGear() {
		if (ivjJComboBoxGear == null) {
			try {
				ivjJComboBoxGear = new javax.swing.JComboBox();
				ivjJComboBoxGear.setName("JComboBoxGear");
				ivjJComboBoxGear.setEditor(new javax.swing.plaf.metal.MetalComboBoxEditor.UIResource());
				ivjJComboBoxGear.setRenderer(new javax.swing.plaf.basic.BasicComboBoxRenderer.UIResource());
				// user code begin {1}
				
				ivjJComboBoxGear.setToolTipText( "The gear or gear number the program(s) should begin control with");
				
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJComboBoxGear;
	}


/**
 * Return the JComboBoxScenario property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxScenario() {
	if (ivjJComboBoxScenario == null) {
		try {
			ivjJComboBoxScenario = new javax.swing.JComboBox();
			ivjJComboBoxScenario.setName("JComboBoxScenario");
			ivjJComboBoxScenario.setEditor(new javax.swing.plaf.metal.MetalComboBoxEditor.UIResource());
			ivjJComboBoxScenario.setRenderer(new javax.swing.plaf.basic.BasicComboBoxRenderer.UIResource());
			// user code begin {1}
			
			if( _isScenario )
			{
				LiteYukonPAObject[] scenarios = DaoFactory.getLmDao().getAllLMScenarios();
				for( int i = 0; i < scenarios.length; i++ )
				{
					ivjJComboBoxScenario.addItem( scenarios[i] );
				}				
			}
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxScenario;
}


	/**
	 * Return the JLabelGear property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelGear() {
		if (ivjJLabelGear == null) {
			try {
				ivjJLabelGear = new javax.swing.JLabel();
				ivjJLabelGear.setName("JLabelGear");
				ivjJLabelGear.setFont(new java.awt.Font("dialog", 0, 14));
				ivjJLabelGear.setText("Gear:");
				ivjJLabelGear.setMaximumSize(new java.awt.Dimension(36, 19));
				ivjJLabelGear.setMinimumSize(new java.awt.Dimension(36, 19));
				// user code begin {1}
	
				ivjJLabelGear.setToolTipText( "The gear or gear number the program(s) should begin control with");
	
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelGear;
	}


/**
 * Return the JLabelGear1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelGear1() {
	if (ivjJLabelGear1 == null) {
		try {
			ivjJLabelGear1 = new javax.swing.JLabel();
			ivjJLabelGear1.setName("JLabelGear1");
			ivjJLabelGear1.setToolTipText("How constraints on the program should be handled");
			ivjJLabelGear1.setText("Constraints:");
			ivjJLabelGear1.setMaximumSize(new java.awt.Dimension(36, 19));
			ivjJLabelGear1.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelGear1.setMinimumSize(new java.awt.Dimension(36, 19));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelGear1;
}


	/**
	 * Return the JLabelLabel property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelLabelStartHRMN() {
		if (ivjJLabelLabelStartHRMN == null) {
			try {
				ivjJLabelLabelStartHRMN = new javax.swing.JLabel();
				ivjJLabelLabelStartHRMN.setName("JLabelLabelStartHRMN");
				ivjJLabelLabelStartHRMN.setText("(HH:mm)");
				ivjJLabelLabelStartHRMN.setMaximumSize(new java.awt.Dimension(51, 16));
				ivjJLabelLabelStartHRMN.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJLabelLabelStartHRMN.setEnabled(false);
				ivjJLabelLabelStartHRMN.setMinimumSize(new java.awt.Dimension(51, 16));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelLabelStartHRMN;
	}


	/**
	 * Return the JLabelLabel1 property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelLabelStopHRMN() {
		if (ivjJLabelLabelStopHRMN == null) {
			try {
				ivjJLabelLabelStopHRMN = new javax.swing.JLabel();
				ivjJLabelLabelStopHRMN.setName("JLabelLabelStopHRMN");
				ivjJLabelLabelStopHRMN.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJLabelLabelStopHRMN.setText("(HH:mm)");
				ivjJLabelLabelStopHRMN.setMaximumSize(new java.awt.Dimension(51, 16));
				ivjJLabelLabelStopHRMN.setMinimumSize(new java.awt.Dimension(51, 16));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelLabelStopHRMN;
	}


/**
 * Return the JLabelScenario property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelScenario() {
	if (ivjJLabelScenario == null) {
		try {
			ivjJLabelScenario = new javax.swing.JLabel();
			ivjJLabelScenario.setName("JLabelScenario");
			ivjJLabelScenario.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelScenario.setText("Scenario:");
			ivjJLabelScenario.setMaximumSize(new java.awt.Dimension(68, 19));
			ivjJLabelScenario.setMinimumSize(new java.awt.Dimension(68, 19));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelScenario;
}


	/**
	 * Return the JLabelTime property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelStartTime() {
		if (ivjJLabelStartTime == null) {
			try {
				ivjJLabelStartTime = new javax.swing.JLabel();
				ivjJLabelStartTime.setName("JLabelStartTime");
				ivjJLabelStartTime.setText("Start Time:");
				ivjJLabelStartTime.setMaximumSize(new java.awt.Dimension(69, 19));
				ivjJLabelStartTime.setFont(new java.awt.Font("dialog", 0, 14));
				ivjJLabelStartTime.setEnabled(false);
				ivjJLabelStartTime.setMinimumSize(new java.awt.Dimension(69, 19));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelStartTime;
	}


	/**
	 * Return the JLabelStopTime property value.
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabelStopTime() {
		if (ivjJLabelStopTime == null) {
			try {
				ivjJLabelStopTime = new javax.swing.JLabel();
				ivjJLabelStopTime.setName("JLabelStopTime");
				ivjJLabelStopTime.setFont(new java.awt.Font("dialog", 0, 14));
				ivjJLabelStopTime.setText("Stop Time:");
				ivjJLabelStopTime.setMaximumSize(new java.awt.Dimension(68, 19));
				ivjJLabelStopTime.setMinimumSize(new java.awt.Dimension(68, 19));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabelStopTime;
	}


	/**
	 * Return the JPanelControls property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJPanelControls() {
	if (ivjJPanelControls == null) {
		try {
			ivjJPanelControls = new javax.swing.JPanel();
			ivjJPanelControls.setName("JPanelControls");
			ivjJPanelControls.setPreferredSize(new java.awt.Dimension(285, 232));
			ivjJPanelControls.setLayout(new java.awt.GridBagLayout());
			ivjJPanelControls.setMaximumSize(new java.awt.Dimension(285, 232));

			java.awt.GridBagConstraints constraintsJCheckBoxStartStopNow = new java.awt.GridBagConstraints();
			constraintsJCheckBoxStartStopNow.gridx = 1; constraintsJCheckBoxStartStopNow.gridy = 2;
			constraintsJCheckBoxStartStopNow.gridwidth = 3;
			constraintsJCheckBoxStartStopNow.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxStartStopNow.ipadx = 9;
			constraintsJCheckBoxStartStopNow.insets = new java.awt.Insets(2, 5, 1, 2);
			getJPanelControls().add(getJCheckBoxStartStopNow(), constraintsJCheckBoxStartStopNow);

			java.awt.GridBagConstraints constraintsJLabelStartTime = new java.awt.GridBagConstraints();
			constraintsJLabelStartTime.gridx = 1; constraintsJLabelStartTime.gridy = 3;
			constraintsJLabelStartTime.gridwidth = 3;
			constraintsJLabelStartTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelStartTime.ipadx = 17;
			constraintsJLabelStartTime.insets = new java.awt.Insets(2, 5, 4, 6);
			getJPanelControls().add(getJLabelStartTime(), constraintsJLabelStartTime);

			java.awt.GridBagConstraints constraintsJTextFieldStartTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldStartTime.gridx = 4; constraintsJTextFieldStartTime.gridy = 3;
			constraintsJTextFieldStartTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldStartTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldStartTime.weightx = 1.0;
			constraintsJTextFieldStartTime.ipadx = 117;
			constraintsJTextFieldStartTime.insets = new java.awt.Insets(2, 2, 3, 1);
			getJPanelControls().add(getJTextFieldStartTime(), constraintsJTextFieldStartTime);

			java.awt.GridBagConstraints constraintsJLabelLabelStartHRMN = new java.awt.GridBagConstraints();
			constraintsJLabelLabelStartHRMN.gridx = 5; constraintsJLabelLabelStartHRMN.gridy = 3;
			constraintsJLabelLabelStartHRMN.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelLabelStartHRMN.ipadx = 7;
			constraintsJLabelLabelStartHRMN.ipady = 3;
			constraintsJLabelLabelStartHRMN.insets = new java.awt.Insets(5, 2, 1, 9);
			getJPanelControls().add(getJLabelLabelStartHRMN(), constraintsJLabelLabelStartHRMN);

			java.awt.GridBagConstraints constraintsJCheckBoxNeverStop = new java.awt.GridBagConstraints();
			constraintsJCheckBoxNeverStop.gridx = 1; constraintsJCheckBoxNeverStop.gridy = 5;
			constraintsJCheckBoxNeverStop.gridwidth = 3;
			constraintsJCheckBoxNeverStop.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxNeverStop.ipadx = 3;
			constraintsJCheckBoxNeverStop.insets = new java.awt.Insets(3, 5, 0, 2);
			getJPanelControls().add(getJCheckBoxNeverStop(), constraintsJCheckBoxNeverStop);

			java.awt.GridBagConstraints constraintsJTextFieldStopTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldStopTime.gridx = 4; constraintsJTextFieldStopTime.gridy = 6;
			constraintsJTextFieldStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldStopTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldStopTime.weightx = 1.0;
			constraintsJTextFieldStopTime.ipadx = 117;
			constraintsJTextFieldStopTime.insets = new java.awt.Insets(0, 2, 3, 1);
			getJPanelControls().add(getJTextFieldStopTime(), constraintsJTextFieldStopTime);

			java.awt.GridBagConstraints constraintsJLabelStopTime = new java.awt.GridBagConstraints();
			constraintsJLabelStopTime.gridx = 1; constraintsJLabelStopTime.gridy = 6;
			constraintsJLabelStopTime.gridwidth = 3;
			constraintsJLabelStopTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelStopTime.ipadx = 18;
			constraintsJLabelStopTime.insets = new java.awt.Insets(1, 5, 3, 6);
			getJPanelControls().add(getJLabelStopTime(), constraintsJLabelStopTime);

			java.awt.GridBagConstraints constraintsJLabelLabelStopHRMN = new java.awt.GridBagConstraints();
			constraintsJLabelLabelStopHRMN.gridx = 5; constraintsJLabelLabelStopHRMN.gridy = 6;
			constraintsJLabelLabelStopHRMN.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelLabelStopHRMN.ipadx = 7;
			constraintsJLabelLabelStopHRMN.ipady = 3;
			constraintsJLabelLabelStopHRMN.insets = new java.awt.Insets(3, 2, 1, 9);
			getJPanelControls().add(getJLabelLabelStopHRMN(), constraintsJLabelLabelStopHRMN);

			java.awt.GridBagConstraints constraintsJComboBoxGear = new java.awt.GridBagConstraints();
			constraintsJComboBoxGear.gridx = 2; constraintsJComboBoxGear.gridy = 8;
			constraintsJComboBoxGear.gridwidth = 4;
			constraintsJComboBoxGear.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxGear.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxGear.weightx = 1.0;
			constraintsJComboBoxGear.ipadx = 106;
			constraintsJComboBoxGear.insets = new java.awt.Insets(3, 2, 2, 5);
			getJPanelControls().add(getJComboBoxGear(), constraintsJComboBoxGear);

			java.awt.GridBagConstraints constraintsJLabelGear = new java.awt.GridBagConstraints();
			constraintsJLabelGear.gridx = 1; constraintsJLabelGear.gridy = 8;
			constraintsJLabelGear.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelGear.ipadx = 9;
			constraintsJLabelGear.insets = new java.awt.Insets(5, 5, 4, 1);
			getJPanelControls().add(getJLabelGear(), constraintsJLabelGear);

			java.awt.GridBagConstraints constraintsDateComboStop = new java.awt.GridBagConstraints();
			constraintsDateComboStop.gridx = 4; constraintsDateComboStop.gridy = 7;
			constraintsDateComboStop.gridwidth = 2;
			constraintsDateComboStop.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsDateComboStop.anchor = java.awt.GridBagConstraints.WEST;
			constraintsDateComboStop.weightx = 1.0;
			constraintsDateComboStop.ipadx = 85;
			constraintsDateComboStop.insets = new java.awt.Insets(1, 2, 2, 5);
			getJPanelControls().add(getDateComboStop(), constraintsDateComboStop);

			java.awt.GridBagConstraints constraintsDateComboStart = new java.awt.GridBagConstraints();
			constraintsDateComboStart.gridx = 4; constraintsDateComboStart.gridy = 4;
			constraintsDateComboStart.gridwidth = 2;
			constraintsDateComboStart.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsDateComboStart.anchor = java.awt.GridBagConstraints.WEST;
			constraintsDateComboStart.weightx = 1.0;
			constraintsDateComboStart.ipadx = 85;
			constraintsDateComboStart.insets = new java.awt.Insets(1, 2, 3, 5);
			getJPanelControls().add(getDateComboStart(), constraintsDateComboStart);

			java.awt.GridBagConstraints constraintsJLabelScenario = new java.awt.GridBagConstraints();
			constraintsJLabelScenario.gridx = 1; constraintsJLabelScenario.gridy = 1;
			constraintsJLabelScenario.gridwidth = 3;
			constraintsJLabelScenario.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelScenario.ipadx = 22;
			constraintsJLabelScenario.insets = new java.awt.Insets(14, 5, 3, 2);
			getJPanelControls().add(getJLabelScenario(), constraintsJLabelScenario);

			java.awt.GridBagConstraints constraintsJComboBoxScenario = new java.awt.GridBagConstraints();
			constraintsJComboBoxScenario.gridx = 4; constraintsJComboBoxScenario.gridy = 1;
			constraintsJComboBoxScenario.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxScenario.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxScenario.weightx = 1.0;
			constraintsJComboBoxScenario.ipadx = -5;
			constraintsJComboBoxScenario.insets = new java.awt.Insets(12, 2, 1, 1);
			getJPanelControls().add(getJComboBoxScenario(), constraintsJComboBoxScenario);

			java.awt.GridBagConstraints constraintsJLabelGear1 = new java.awt.GridBagConstraints();
			constraintsJLabelGear1.gridx = 1; constraintsJLabelGear1.gridy = 9;
			constraintsJLabelGear1.gridwidth = 2;
			constraintsJLabelGear1.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelGear1.ipadx = 45;
			constraintsJLabelGear1.insets = new java.awt.Insets(5, 5, 13, 1);
			getJPanelControls().add(getJLabelGear1(), constraintsJLabelGear1);

			java.awt.GridBagConstraints constraintsJComboBoxConstraints = new java.awt.GridBagConstraints();
			constraintsJComboBoxConstraints.gridx = 3; constraintsJComboBoxConstraints.gridy = 9;
			constraintsJComboBoxConstraints.gridwidth = 3;
			constraintsJComboBoxConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxConstraints.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxConstraints.weightx = 1.0;
			constraintsJComboBoxConstraints.ipadx = 70;
			constraintsJComboBoxConstraints.insets = new java.awt.Insets(3, 2, 11, 5);
			getJPanelControls().add(getJComboBoxConstraints(), constraintsJComboBoxConstraints);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelControls;
}

	/**
	 * Return the JPanelMultiSelect property value.
	 * @return com.cannontech.common.gui.util.MultiSelectJPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.panel.MultiSelectJPanel getJPanelMultiSelect() {
	if (ivjJPanelMultiSelect == null) {
		try {
			ivjJPanelMultiSelect = new com.cannontech.common.gui.panel.MultiSelectJPanel();
			ivjJPanelMultiSelect.setName("JPanelMultiSelect");
			ivjJPanelMultiSelect.setPreferredSize(new java.awt.Dimension(285, 232));
			ivjJPanelMultiSelect.setMinimumSize(new java.awt.Dimension(285, 232));
			ivjJPanelMultiSelect.setMaximumSize(new java.awt.Dimension(285, 232));
			// user code begin {1}
				
				getJPanelMultiSelect().setTableModel( getMultiSelectPrgModel() );
				
				// Do any column specific initialization here				
				javax.swing.table.TableColumn gearColumn = 
						getJPanelMultiSelect().getTableColumn( MultiSelectPrgModel.COL_GEAR );
			
				//gearColumn.setMaxWidth(45);
				//gearColumn.setWidth(45);
				gearColumn.setPreferredWidth(90);
                gearColumn.setCellEditor( new DefaultCellEditor(new JComboBox()) );
                gearColumn.setCellRenderer( new ComboBoxTableRenderer() );
				
				// Create and add the column renderers	
//				ComboBoxTableRenderer comboBxRender = new ComboBoxTableRenderer();
				//comboBxRender.setBackground( Color.WHITE );	
//				for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
//					comboBxRender.addItem( new Integer(i+1) );
//				
//				gearColumn.setCellRenderer( comboBxRender );
				
				
				// Create and add the column editors
//			 	javax.swing.JComboBox combo = new javax.swing.JComboBox();
				//combo.setBackground( Color.WHITE );
//				for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
//					combo.addItem( new Integer(i+1) );
//			
//				gearColumn.setCellEditor( new DefaultCellEditor(combo) );				

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMultiSelect;
}


	/**
	 * Return the JPanel1 property value.
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJPanelOkCancel() {
	if (ivjJPanelOkCancel == null) {
		try {
			ivjJPanelOkCancel = new javax.swing.JPanel();
			ivjJPanelOkCancel.setName("JPanelOkCancel");
			ivjJPanelOkCancel.setLayout(getJPanelOkCancelFlowLayout());
			ivjJPanelOkCancel.setMinimumSize(new java.awt.Dimension(161, 35));
			getJPanelOkCancel().add(getJButtonOk(), getJButtonOk().getName());
			getJPanelOkCancel().add(getJButtonCancel(), getJButtonCancel().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelOkCancel;
}


	/**
	 * Return the JPanelOkCancelFlowLayout property value.
	 * @return java.awt.FlowLayout
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private java.awt.FlowLayout getJPanelOkCancelFlowLayout() {
		java.awt.FlowLayout ivjJPanelOkCancelFlowLayout = null;
		try {
			/* Create part */
			ivjJPanelOkCancelFlowLayout = new java.awt.FlowLayout();
			ivjJPanelOkCancelFlowLayout.setAlignment(java.awt.FlowLayout.CENTER);
			ivjJPanelOkCancelFlowLayout.setVgap(5);
			ivjJPanelOkCancelFlowLayout.setHgap(5);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		};
		return ivjJPanelOkCancelFlowLayout;
	}


	/**
	 * Return the JTextFieldStartTime property value.
	 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStartTime() {
		if (ivjJTextFieldStartTime == null) {
			try {
				ivjJTextFieldStartTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
				ivjJTextFieldStartTime.setName("JTextFieldStartTime");
				ivjJTextFieldStartTime.setHighlighter(new javax.swing.plaf.basic.BasicTextUI.BasicHighlighter());
				ivjJTextFieldStartTime.setText("16:25");
				ivjJTextFieldStartTime.setCaretPosition(5);
				ivjJTextFieldStartTime.setSelectionEnd(5);
				ivjJTextFieldStartTime.setEnabled(false);
				ivjJTextFieldStartTime.setSelectionStart(5);
				// user code begin {1}
	
				ivjJTextFieldStartTime.setTimeText( new Date() );
				
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextFieldStartTime;
	}


	/**
	 * Return the JTextFieldStopTime property value.
	 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldStopTime() {
		if (ivjJTextFieldStopTime == null) {
			try {
				ivjJTextFieldStopTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
				ivjJTextFieldStopTime.setName("JTextFieldStopTime");
				ivjJTextFieldStopTime.setHighlighter(new javax.swing.plaf.basic.BasicTextUI.BasicHighlighter());
				ivjJTextFieldStopTime.setText("20:25");
				// user code begin {1}
	
				if( getMode() == MODE_STOP )
					ivjJTextFieldStopTime.setTimeText( new Date() );
				else
				{
					GregorianCalendar cal = new GregorianCalendar();
					cal.setTime( new Date() );
	
					StringBuffer hour = new StringBuffer( String.valueOf(cal.get( GregorianCalendar.HOUR_OF_DAY)+4) );
					if( hour.length() < 2 )
						hour.insert(0, "0" );
						
					StringBuffer minute = new StringBuffer( String.valueOf(cal.get(GregorianCalendar.MINUTE)) );
					if( minute.length() < 2 )
						minute.insert(0, "0" );
						
					if( cal.get( GregorianCalendar.HOUR_OF_DAY) > 20 )
						hour = new StringBuffer("23");
						
					ivjJTextFieldStopTime.setText( hour + ":" + minute );
				}
			
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextFieldStopTime;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/18/2001 5:13:45 PM)
	 * @return int
	 */
	public int getMode() {
		return mode;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (1/21/2001 5:32:52 PM)
	 * @param newLoadControlProgram LMProgramBase
	 */
	public MultiSelectProg[] getMultiSelectObject()
	{
		//used to change the type of our array
		List l = Arrays.asList( getJPanelMultiSelect().getSelectedData() );			

		//even if we only have 1 program, this will find it!
		return (MultiSelectProg[])l.toArray( new MultiSelectProg[l.size()] );
	}


	private IMultiSelectModel getMultiSelectPrgModel()
	{
		if( multiSelectPrgModel == null )
		{
			if( _isScenario )
				multiSelectPrgModel = new MultiSelectPrgScenModel();
			else
				multiSelectPrgModel = new MultiSelectPrgModel();
		}
		
		return multiSelectPrgModel;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 2:56:28 PM)
	 * @return Date
	 */
	public Date getStartTime()
	{
		if( getJTextFieldStartTime().getText() == null
			 || getJTextFieldStartTime().getText().length() <= 0 )
		{
			//assume they want to start using the time of now
			// and the Date in the JComboBox
			GregorianCalendar c = new GregorianCalendar();
			c.setTime( getDateComboStart().getSelectedDate() );
			
			GregorianCalendar tCal = new GregorianCalendar();
			c.set(GregorianCalendar.HOUR_OF_DAY, tCal.get(GregorianCalendar.HOUR_OF_DAY) );
			c.set(GregorianCalendar.MINUTE, tCal.get(GregorianCalendar.MINUTE) );
			c.set(GregorianCalendar.SECOND, tCal.get(GregorianCalendar.SECOND) );

			return c.getTime();
		}
		else
		{
			GregorianCalendar c = new GregorianCalendar();
			c.setTime( getDateComboStart().getSelectedDate() );
			
			String start = getJTextFieldStartTime().getTimeText();
			
			try
			{
				c.set(GregorianCalendar.HOUR_OF_DAY, Integer.parseInt( start.substring(0,2) ) );
				c.set(GregorianCalendar.MINUTE, Integer.parseInt( start.substring(3,5) ) );
				c.set(GregorianCalendar.SECOND, 0 );
				return c.getTime();
			}
			catch( Exception e )
			{
				CTILogger.info("*** Received a bad value in getStartTime() of " + this.getClass().getName() + " : " + e.getMessage() );
				return CtiUtilities.get1990GregCalendar().getTime();
			}
			
		}
	
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 2:56:28 PM)
	 * @return Date
	 */
	public Date getStopTime()
	{
		if( getJCheckBoxNeverStop().isSelected() )
		{
			GregorianCalendar c = new GregorianCalendar();
			c.set( c.YEAR, 2035 ); //watch for End of Unix time 2037
			return c.getTime();
		}
		else if( getJTextFieldStopTime().getText() == null
					 || getJTextFieldStopTime().getText().length() <= 0 )
		{
			//default the stop to 1 day from now
			GregorianCalendar c = new GregorianCalendar();
			c.add( GregorianCalendar.DATE, 1 );
			return c.getTime();
		}
		else
		{
			GregorianCalendar c = new GregorianCalendar();
			c.setTime( getDateComboStop().getSelectedDate() );
	
			String stop = getJTextFieldStopTime().getTimeText();
	
			try
			{
				c.set(GregorianCalendar.HOUR_OF_DAY, Integer.parseInt( stop.substring(0,2) ) );
				c.set(GregorianCalendar.MINUTE, Integer.parseInt( stop.substring(3,5) ) );
				c.set(GregorianCalendar.SECOND, 0 );
				
				if( getJCheckBoxStartStopNow().isSelected() && getMode() == MODE_STOP )
					return new Date();  //use a time of now
				else
					return c.getTime();
			}
			catch( Exception e )
			{
				CTILogger.info("*** Received a bad value in getStopTime() of " + this.getClass().getName() + " : " + e.getMessage() );
				return CtiUtilities.get1990GregCalendar().getTime();
			}
			
		}
	}


	/**
	 * Called whenever the part throws an exception.
	 * @param exception java.lang.Throwable
	 */
	private void handleException(java.lang.Throwable exception) {
	
		/* Uncomment the following lines to print uncaught exceptions to stdout */
		CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
		CTILogger.error( exception.getMessage(), exception );;
	}


	/**
	 * Initializes connections
	 * @exception java.lang.Exception The exception description.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initConnections() throws java.lang.Exception {
		// user code begin {1}
		
		getJComboBoxGear().addActionListener( this );
		getJComboBoxScenario().addActionListener( this );
		
		// user code end
		getJButtonCancel().addActionListener(this);
		getJButtonOk().addActionListener(this);
		getJCheckBoxNeverStop().addActionListener(this);
		getJCheckBoxStartStopNow().addActionListener(this);
	}


/**
 * Initialize the class.
 */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DirectControlJPanel");
		setLayout(new java.awt.GridBagLayout());
		setMaximumSize(new java.awt.Dimension(315, 260));
		setPreferredSize(new java.awt.Dimension(315, 260));
		setBounds(new java.awt.Rectangle(0, 0, 300, 234));
		setSize(577, 289);
		setMinimumSize(new java.awt.Dimension(315, 260));

		java.awt.GridBagConstraints constraintsJPanelControls = new java.awt.GridBagConstraints();
		constraintsJPanelControls.gridx = 1; constraintsJPanelControls.gridy = 1;
		constraintsJPanelControls.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelControls.weightx = 1.0;
		constraintsJPanelControls.weighty = 1.0;
		constraintsJPanelControls.insets = new java.awt.Insets(0, 0, 1, 1);
		add(getJPanelControls(), constraintsJPanelControls);

		java.awt.GridBagConstraints constraintsJPanelMultiSelect = new java.awt.GridBagConstraints();
		constraintsJPanelMultiSelect.gridx = 2; constraintsJPanelMultiSelect.gridy = 1;
		constraintsJPanelMultiSelect.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelMultiSelect.weightx = 1.0;
		constraintsJPanelMultiSelect.weighty = 1.0;
		constraintsJPanelMultiSelect.ipadx = 1;
		constraintsJPanelMultiSelect.ipady = 20;
		constraintsJPanelMultiSelect.insets = new java.awt.Insets(0, 1, 1, 0);
		add(getJPanelMultiSelect(), constraintsJPanelMultiSelect);

		java.awt.GridBagConstraints constraintsJPanelOkCancel = new java.awt.GridBagConstraints();
		constraintsJPanelOkCancel.gridx = 1; constraintsJPanelOkCancel.gridy = 2;
		constraintsJPanelOkCancel.gridwidth = 2;
		constraintsJPanelOkCancel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelOkCancel.weightx = 1.0;
		constraintsJPanelOkCancel.weighty = 1.0;
		constraintsJPanelOkCancel.ipadx = 417;
		constraintsJPanelOkCancel.insets = new java.awt.Insets(1, 0, 0, 0);
		add(getJPanelOkCancel(), constraintsJPanelOkCancel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	
	if( _isScenario )
		action_Scenario( null );

	// user code end
}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/11/2001 12:46:05 PM)
	 * @return boolean
	 */
	public boolean isStopStartNowSelected() 
	{
		return getJCheckBoxStartStopNow().isSelected();
	}


	/**
	 * Comment
	 */
	public void jButtonCancel_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		choice = CANCEL_CHOICE;
		exit();
		
		return;
	}


	/**
	 * Comment
	 */
	public void jButtonOK_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		if( getMode() == MODE_START_STOP 
		 	 && getStartTime() != null
		 	 && getStopTime() != null )
		{
			if( getStartTime().after(CtiUtilities.get1990GregCalendar().getTime())
				 && getStopTime().after(CtiUtilities.get1990GregCalendar().getTime()) )
			{
				if( getStartTime().getTime() >= getStopTime().getTime() )
				{
					javax.swing.JOptionPane.showConfirmDialog( this, "Start time can not be greater than the stop time, try again.", 
								"Incorrect Entry", 
								javax.swing.JOptionPane.CLOSED_OPTION,							
								javax.swing.JOptionPane.WARNING_MESSAGE );
					return;
				}

				if( !getJCheckBoxStartStopNow().isSelected()
					&& getStartTime().getTime() <= System.currentTimeMillis() )
				{
					javax.swing.JOptionPane.showConfirmDialog( this, 
						"Start time must be a valid time in the future, try again.", 
						"Incorrect Entry",
						javax.swing.JOptionPane.CLOSED_OPTION,							
						javax.swing.JOptionPane.WARNING_MESSAGE );
					return;
				}
			}
	
		}
		else if( getMode() == MODE_STOP
					 && getStopTime() != null )
		{
			if( getStartTime().after(CtiUtilities.get1990GregCalendar().getTime())
				 && getStopTime().after(CtiUtilities.get1990GregCalendar().getTime()) )
			{
				Date cDate = new Date();
				
				if( getStopTime().before(cDate) )
				{
					javax.swing.JOptionPane.showConfirmDialog( this, "Stop time can not be less than the current time, try again.", 
								"Incorrect Entry", 
								javax.swing.JOptionPane.CLOSED_OPTION, 
								javax.swing.JOptionPane.WARNING_MESSAGE );
					return;
				}
			}
		}
	
		
		choice = OK_CHOICE;
		exit();
	
		return;
	}


	/**
	 * Comment
	 */
	public void jCheckBoxNeverStop_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		getJLabelStopTime().setEnabled( !getJCheckBoxNeverStop().isSelected() );
		getJTextFieldStopTime().setEnabled( !getJCheckBoxNeverStop().isSelected() );
		getJLabelLabelStopHRMN().setEnabled( !getJCheckBoxNeverStop().isSelected() );
		getDateComboStop().setEnabled( !getJCheckBoxNeverStop().isSelected() );
	
		if( getJCheckBoxNeverStop().isSelected() )
			getJButtonOk().setEnabled( true );
		
		return;
	}


	/**
	 * Comment
	 */
	public void jCheckBoxStartStopNow_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
	{
		if( getMode() == MODE_STOP )
		{
			getJLabelStopTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJTextFieldStopTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJLabelLabelStopHRMN().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getDateComboStop().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		}
		else if( getMode() == MODE_START_STOP )
		{
			getJLabelStartTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJTextFieldStartTime().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getJLabelLabelStartHRMN().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
			getDateComboStart().setEnabled( !getJCheckBoxStartStopNow().isSelected() );
		}
	
	
		if( getJCheckBoxStartStopNow().isSelected() )
			getJButtonOk().setEnabled( true );
	
		return;
	}


	private void jComboBoxGear_ActionPerformed( java.awt.event.ActionEvent actionEvent )
	{
		if( getJComboBoxGear().getSelectedIndex() >= 0
		    && getJComboBoxGear().getSelectedIndex() < IlmDefines.MAX_GEAR_COUNT )
		{
			//add 1 to the gear selected index since gear numbers start at 1
			getMultiSelectPrgModel().setAllGearNumbers(
					new Integer(getJComboBoxGear().getSelectedIndex()+1) );
		}
		

	}

	/**
	 * Insert the method's description here.
	 * Creation date: (7/17/2001 9:24:14 AM)
	 * @param gears java.util.Vector
	 */
	public void setGearList(java.util.Vector gears) 
	{
		getJComboBoxGear().removeAllItems();
		
		if( gears != null )
		{
			for( int i = 0; i < gears.size(); i++ )
			{
				getJComboBoxGear().addItem( gears.get(i) );
			}
	
			if( getJComboBoxGear().getItemCount() > 0 )
				getJComboBoxGear().setSelectedIndex(0);
		}
	
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/18/2001 5:13:45 PM)
	 * @param newMode int
	 */
	public void setMode(int newMode) 
	{
		mode = newMode;
		getJCheckBoxStartStopNow().doClick();
		
		getJLabelScenario().setVisible( _isScenario );
		getJComboBoxScenario().setVisible( _isScenario );

		switch( mode )
		{
			case MODE_MULTI_SELECT_ONLY:
				getJPanelControls().setVisible( false );
				//no break, let this fall through

			case MODE_STOP:
				getJLabelStartTime().setVisible(false);
				getJTextFieldStartTime().setVisible(false);
				getJLabelLabelStartHRMN().setVisible(false);
				getDateComboStart().setVisible(false);
				getJComboBoxGear().setVisible(false);
				getJLabelGear().setVisible(false);

				getJComboBoxConstraints().setVisible(false);
				getJLabelGear1().setVisible(false);

				
				//getMultiSelectPrgModel().get
				((DefaultCellEditor)
					getJPanelMultiSelect().getTableColumn( 
							MultiSelectPrgModel.COL_GEAR ).getCellEditor()).getComponent().setEnabled( false );
				
				((ComboBoxTableRenderer)
					getJPanelMultiSelect().getTableColumn( 
							MultiSelectPrgModel.COL_GEAR ).getCellRenderer()).setEnabled( false ) ;
				
				getJCheckBoxNeverStop().setVisible(false);
				getJCheckBoxStartStopNow().setText("Stop Now");
				break;
				
			default:  //done for completness
				break;
		}
	
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (1/21/2001 5:32:52 PM)
	 * @param newLoadControlProgram LMProgramBase
	 */
	public boolean setMultiSelectObject( LMProgramBase[] rows ) 
	{
		if( rows == null )
			return false;
	
	
		//get all the programs and copy the needed values into a different object
		MultiSelectProg[] prgs = new MultiSelectProg[ rows.length ]; 
		for( int i = 0; i < rows.length; i++ )
			prgs[i] = new MultiSelectProg( (LMProgramBase)rows[i] );
	
			
		return setMultiSelectObject( prgs, false );
	}


	private boolean setMultiSelectObject( MultiSelectProg[] rows, boolean isScenario ) 
	{
		if( rows == null )
			return false;

        boolean showMulti = rows.length > 1;
        
        if( isScenario )
        {
            getJPanelMultiSelect().setSelectableData( rows );            
        }
        else
        {
            //get all the programs and copy the needed values into a different object
    		MultiSelectProg[] prgs = new MultiSelectProg[ rows.length ]; 
    		for( int i = 0; i < rows.length; i++ )
    			prgs[i] = new MultiSelectProg( (LMProgramBase)rows[i].getBaseProgram() );
    				
    		getJPanelMultiSelect().setSelectableData( prgs );
            setParentWidth( showMulti ? 285 : 0 ); //300, 250
            getJPanelMultiSelect().setVisible( showMulti );     
        }

        getJComboBoxGear().removeAllItems();
        
		if( showMulti )
		{
			for( int i = 0; i < IlmDefines.MAX_GEAR_COUNT; i++ )
			    getJComboBoxGear().addItem( "Gear " + (i+1) ); //all gear nums start at 1
                                
			//Do any column specific initialization here               
            javax.swing.table.TableColumn gearColumn = 
                    getJPanelMultiSelect().getTableColumn( MultiSelectPrgModel.COL_GEAR );
        
            DefaultComboBoxModel[] models = new DefaultComboBoxModel[ rows.length ];
            for( int i = 0; i < rows.length; i++ )
            {
                if( rows[i].getBaseProgram() instanceof IGearProgram )
                {
                    IGearProgram progGear =
                        (IGearProgram)rows[i].getBaseProgram();

                    DefaultComboBoxModel combModel = new DefaultComboBoxModel();
                    for( int j = 0; j < progGear.getDirectGearVector().size(); j++ )
                    {
                        combModel.addElement( 
                                progGear.getDirectGearVector().get(j) );

                        if( progGear.getCurrentGearNumber().intValue() == (j+1) )
                            combModel.setSelectedItem(
                                    progGear.getDirectGearVector().get(j) );
                    }
                    
                    models[i] = combModel;
                }

            }
            
            gearColumn.setCellRenderer( new MultiJComboCellRenderer(models) );
            gearColumn.setCellEditor( new MultiJComboCellEditor(models) );
		}
		else if( rows.length == 1 && rows[0].getBaseProgram() instanceof IGearProgram )
		{
			//only 1 program, lets just show the gears for this program
			setGearList( ((IGearProgram)rows[0].getBaseProgram()).getDirectGearVector() );
		}
	
        getJPanelMultiSelect().selectAllSelected( true );
	
		return ( rows.length > 0 );
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (3/12/2001 3:40:34 PM)
	 *
	 * Method to override if desired 
	 */
	public void setParentWidth( int x ) {}
}
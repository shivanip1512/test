package com.cannontech.amr.moveInMoveOut.service.impl;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.mail.MessagingException;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Required;

import com.cannontech.amr.errors.model.DeviceErrorDescription;
import com.cannontech.amr.moveInMoveOut.bean.MoveInFormObj;
import com.cannontech.amr.moveInMoveOut.bean.MoveInResultObj;
import com.cannontech.amr.moveInMoveOut.bean.MoveOutFormObj;
import com.cannontech.amr.moveInMoveOut.bean.MoveOutResultObj;
import com.cannontech.amr.moveInMoveOut.service.MoveInMoveOutEmailService;
import com.cannontech.clientutils.YukonLogManager;
import com.cannontech.common.device.groups.model.DeviceGroup;
import com.cannontech.common.util.SimpleTemplateProcessor;
import com.cannontech.common.util.TemplateProcessor;
import com.cannontech.core.service.DateFormattingService;
import com.cannontech.core.service.PointFormattingService;
import com.cannontech.core.service.DateFormattingService.DateFormatEnum;
import com.cannontech.core.service.PointFormattingService.Format;
import com.cannontech.database.data.lite.LiteYukonUser;
import com.cannontech.tools.email.DefaultEmailMessage;
import com.cannontech.tools.email.EmailService;

public class MoveInMoveOutEmailServiceImpl implements MoveInMoveOutEmailService {

    private Logger logger = YukonLogManager.getLogger(MoveInMoveOutEmailServiceImpl.class);

    private DateFormattingService dateFormattingService;
    private EmailService emailService;
    private PointFormattingService pointFormattingService;
    private TemplateProcessor tp = new SimpleTemplateProcessor();

    String emailSubject = "Email notification from Energy Services Operations Center";

    private final String baseSubjectFormat = "Moving information for {prevMeterName} from {startDate} - {stopDate} {status}.";
    private final String moveInSuccessSubjectFormat = "Moving information for {newMeterName} from {startDate} - {stopDate} {status}.";

    private final String scheduledMsgSub = "Scheduled meter reading for {prevMeterName}.";
    private final String scheduledMsg = "A meter reading for {prevMeterName} is scheduled for {stopDate}.";
    private final String meterNameChange = "Device Name {prevMeterName} updated to {newMeterName} \r\n";
    private final String meterNumberChange = "Meter Number {prevMeterNumber} updated to {newMeterNumber} \r\n";

    private final String miNotificationFormat_Success = "{statusMsg} \r\n\r\n" + "Move In Reading: {calculatedTotalUsage} \r\n\r\n" + "Usage Reading: {currentUsage} \r\n" + "Calculated Usage for {startDate} through {stopDate}: {calculatedUsage} \r\n" + "Calculated Beginning Usage Read: {calculatedTotalUsage} \r\n\r\n"+"{meterNameChange}{meterNumberChange}{extraLine}"+"{deviceGroups}\r\n"+"This reading was generated by {user} on {processingDate} \r\n \r\n";
    private final String moNotificationFormat_Success = "{statusMsg} \r\n\r\n" + "Move Out Reading: {calculatedTotalUsage} \r\n\r\n" + "Usage Reading: {currentUsage} \r\n" + "Calculated Usage for {startDate} through {stopDate}: {calculatedUsage} \r\n" + "Calculated Beginning Usage Read: {calculatedTotalUsage} \r\n\r\n"+"{deviceGroups}\r\n"+ "This reading was generated by {user} on {processingDate} \r\n \r\n";
    private final String mimoNotificationFormat_Failure = "{statusMsg} \r\n\r\n" + "{errors}";

    public void createMoveInSuccessEmail(MoveInResultObj moveInResultObj,
            LiteYukonUser liteYukonUser) {
        Map<String, Object> msgData = new HashMap<String, Object>();
        msgData.put("status", "completed");
        msgData.put("statusMsg", "Move in request for "+moveInResultObj.getNewMeter().getName()+" is complete.");

        msgData.put("prevMeterName", moveInResultObj.getPreviousMeter()
                                                    .getName());
        msgData.put("prevMeterNumber", moveInResultObj.getPreviousMeter()
                                                      .getMeterNumber());
        msgData.put("newMeterName", moveInResultObj.getNewMeter().getName());
        msgData.put("newMeterNumber", moveInResultObj.getNewMeter()
                                                     .getMeterNumber());

        boolean extraLineNeeded = false;
        if (moveInResultObj.getPreviousMeter()
                           .getName()
                           .equals(moveInResultObj.getNewMeter().getName())) {
            msgData.put("meterNameChange", "");
        } else {
            msgData.put("meterNameChange", tp.process(meterNameChange, msgData));
            extraLineNeeded = true;
        }
        if (moveInResultObj.getPreviousMeter()
                           .getMeterNumber()
                           .equals(moveInResultObj.getNewMeter()
                                                  .getMeterNumber())) {
            msgData.put("meterNumberChange", "");
        } else {
            msgData.put("meterNumberChange", tp.process(meterNumberChange,
                                                        msgData));
            extraLineNeeded = true;
        }
        if (extraLineNeeded == true) {
            msgData.put("extraLine", "\r\n");
        } else {
            msgData.put("extraLine", "");
        }

        String removedDeviceGroups = "";
        for (DeviceGroup deviceGroup : moveInResultObj.getDeviceGroupsRemoved()) {
            removedDeviceGroups += "Meter was removed from the " + deviceGroup.getName() + " Group. \r\n";
        }
        msgData.put("deviceGroups", removedDeviceGroups);

        setDatesMoveIn(moveInResultObj, msgData, liteYukonUser);

        msgData.put("currentUsage",
                    pointFormattingService.getValueString(moveInResultObj.getCurrentReading(),
                                                          Format.FULL));
        msgData.put("calculatedUsage",
                    pointFormattingService.getValueString(moveInResultObj.getCalculatedDifference(),
                                                          Format.SHORT));
        msgData.put("calculatedTotalUsage",
                    pointFormattingService.getValueString(moveInResultObj.getCalculatedPreviousReading(),
                                                          Format.SHORTDATE));

        msgData.put("user", liteYukonUser.getUsername());
        msgData.put("processingDate", Calendar.getInstance()
                                              .getTime()
                                              .toString());

        String subject = tp.process(moveInSuccessSubjectFormat, msgData);
        String body = tp.process(miNotificationFormat_Success, msgData);

        DefaultEmailMessage emailMessage = emailService.getEmailer(moveInResultObj.getEmailAddress(),
                                                                   subject,
                                                                   body);
        sendEmail(emailMessage);
    }

    public void createMoveInScheduleEmail(MoveInFormObj moveInFormObj, LiteYukonUser liteYukonUser){
        Map<String, Object> msgData = new TreeMap<String, Object>();
        msgData.put("status", "scheduled");

        msgData.put("prevMeterNumber", moveInFormObj.getPreviousMeter()
                                                      .getMeterNumber());
        msgData.put("prevMeterName", moveInFormObj.getPreviousMeter()
                                                    .getName());
        msgData.put("stopDate", new Date(moveInFormObj.getMoveInDate().getTime()-1));

        
        String subject = tp.process(scheduledMsg, msgData);
        String body = tp.process(scheduledMsg, msgData);

        DefaultEmailMessage emailMessage = emailService.getEmailer(moveInFormObj.getEmailAddress(),
                                                                   subject,
                                                                   body);
        sendEmail(emailMessage);
    }
    
    public void createMoveInFailureEmail(MoveInResultObj moveInResultObj,
            LiteYukonUser liteYukonUser) {
        Map<String, Object> msgData = new TreeMap<String, Object>();
        msgData.put("status", "failed");
        msgData.put("statusMsg", "The system was not able to process the move in request for "+moveInResultObj.getPreviousMeter().getName()+" for the following reasons.");

        msgData.put("prevMeterNumber", moveInResultObj.getPreviousMeter()
                                                      .getMeterNumber());
        msgData.put("prevMeterName", moveInResultObj.getPreviousMeter()
                                                    .getName());

        setDatesMoveIn(moveInResultObj, msgData, liteYukonUser);
        buildErrorStr(moveInResultObj.getErrors(), msgData);

        String subject = tp.process(baseSubjectFormat, msgData);
        String body = tp.process(mimoNotificationFormat_Failure, msgData);

        DefaultEmailMessage emailMessage = emailService.getEmailer(moveInResultObj.getEmailAddress(),
                                                                   subject,
                                                                   body);
        sendEmail(emailMessage);
    }

    public void createMoveOutSuccessEmail(MoveOutResultObj moveOutResultObj,
            LiteYukonUser liteYukonUser) {
        Map<String, Object> msgData = new HashMap<String, Object>();
        msgData.put("status", "completed");
        msgData.put("statusMsg", "Move out request for "+moveOutResultObj.getPreviousMeter().getName()+" is complete.");
        msgData.put("prevMeterName", moveOutResultObj.getPreviousMeter()
                                                     .getName());

        setDatesMoveOut(moveOutResultObj, msgData, liteYukonUser);

        String addedDeviceGroups = "";
        for (DeviceGroup deviceGroup : moveOutResultObj.getDeviceGroupsAdded()) {
            addedDeviceGroups += "Meter was added to the " + deviceGroup.getName() + " Group. \r\n";
        }
        msgData.put("deviceGroups", addedDeviceGroups);

        msgData.put("currentUsage",
                    pointFormattingService.getValueString(moveOutResultObj.getCurrentReading(),
                                                          Format.FULL));
        msgData.put("calculatedUsage",
                    pointFormattingService.getValueString(moveOutResultObj.getCalculatedDifference(),
                                                          Format.SHORT));
        msgData.put("calculatedTotalUsage",
                    pointFormattingService.getValueString(moveOutResultObj.getCalculatedReading(),
                                                          Format.SHORTDATE));

        msgData.put("user", liteYukonUser.getUsername());
        msgData.put("processingDate", Calendar.getInstance()
                                              .getTime()
                                              .toString());

        String subject = tp.process(baseSubjectFormat, msgData);
        String body = tp.process(moNotificationFormat_Success, msgData);

        DefaultEmailMessage emailMessage = emailService.getEmailer(moveOutResultObj.getEmailAddress(),
                                                                   subject,
                                                                   body);
        sendEmail(emailMessage);
    }

    public void createMoveOutScheduleEmail(MoveOutFormObj moveOutFormObj, LiteYukonUser liteYukonUser){
        Map<String, Object> msgData = new TreeMap<String, Object>();
        msgData.put("status", "scheduled");

        msgData.put("prevMeterNumber", moveOutFormObj.getMeter()
                                                      .getMeterNumber());
        msgData.put("prevMeterName", moveOutFormObj.getMeter()
                                                    .getName());

        msgData.put("stopDate", new Date(moveOutFormObj.getMoveOutDate().getTime()-1));

        String subject = tp.process(scheduledMsgSub, msgData);
        String body = tp.process(scheduledMsg, msgData);

        DefaultEmailMessage emailMessage = emailService.getEmailer(moveOutFormObj.getEmailAddress(),
                                                                   subject,
                                                                   body);
        sendEmail(emailMessage);
    }
    
    public void createMoveOutFailureEmail(MoveOutResultObj moveOutResultObj,
            LiteYukonUser liteYukonUser) {
        Map<String, Object> msgData = new TreeMap<String, Object>();
        msgData.put("status", "failed");
        msgData.put("statusMsg", "The system was not able to process the move out request for "+moveOutResultObj.getPreviousMeter().getName()+" for the following reasons.");

        msgData.put("prevMeterNumber", moveOutResultObj.getPreviousMeter()
                                                       .getMeterNumber());
        msgData.put("prevMeterName", moveOutResultObj.getPreviousMeter()
                                                     .getName());

        setDatesMoveOut(moveOutResultObj, msgData, liteYukonUser);
        buildErrorStr(moveOutResultObj.getErrors(), msgData);

        String subject = tp.process(baseSubjectFormat, msgData);
        String body = tp.process(mimoNotificationFormat_Failure, msgData);

        DefaultEmailMessage emailMessage = emailService.getEmailer(moveOutResultObj.getEmailAddress(),
                                                                   subject,
                                                                   body);
        sendEmail(emailMessage);
    }

    /**
     * @param defaultEmailMessage
     */
    private void sendEmail(DefaultEmailMessage defaultEmailMessage) {
        try {
            emailService.sendMessage(defaultEmailMessage);
        } catch (MessagingException me) {
            logger.error(me.getStackTrace());
        }
    }

    private void setDatesMoveOut(MoveOutResultObj moveOutResultObj,
            Map<String, Object> msgData, LiteYukonUser liteYukonUser) {
        Date currentReadDate = moveOutResultObj.getCurrentReading()
                                            .getPointDataTimeStamp();
        String currentReadDateStr = dateFormattingService.formatDate(currentReadDate,
                                                                  DateFormatEnum.BOTH,
                                                                  liteYukonUser);
        
        Date calcDate = new Date(moveOutResultObj.getCalculatedReading()
                                        .getPointDataTimeStamp().getTime()-1);
        String calcDateStr = dateFormattingService.formatDate(calcDate,
                                                              DateFormatEnum.DATE,
                                                              liteYukonUser);

        if (currentReadDate.after(calcDate)) {
            msgData.put("stopDate", currentReadDateStr);
            msgData.put("startDate", calcDateStr);
        } else {
            msgData.put("stopDate", calcDateStr);
            msgData.put("startDate", currentReadDateStr);
        }
    }

    private void setDatesMoveIn(MoveInResultObj moveInResultObj,
            Map<String, Object> msgData, LiteYukonUser liteYukonUser) {
        Date calcDate = moveInResultObj.getCalculatedPreviousReading()
                                       .getPointDataTimeStamp();
        String calcDateStr = dateFormattingService.formatDate(calcDate,
                                                              DateFormatEnum.DATE,
                                                              liteYukonUser);
        Date currentDate = moveInResultObj.getCurrentReading()
                                          .getPointDataTimeStamp();
        String currentDateStr = dateFormattingService.formatDate(currentDate,
                                                                 DateFormatEnum.BOTH,
                                                                 liteYukonUser);

        if (calcDate.after(currentDate)) {
            msgData.put("startDate", currentDateStr);
            msgData.put("stopDate", calcDateStr);
        } else {
            msgData.put("startDate", calcDateStr);
            msgData.put("stopDate", currentDateStr);
        }
    }

    private void buildErrorStr(List<DeviceErrorDescription> errors,
            Map<String, Object> msgData) {
        String errorsStr = "";
        String tab = "    ";
        for (DeviceErrorDescription description : errors) {
            errorsStr += description.getDescription() + " " + description.getErrorCode() + "\r\n" + tab + description.getPorter() + " \r\n" + tab + description.getTroubleshooting() + " \r\n";
        }
        msgData.put("errors", errorsStr);
    }

    @Required
    public void setEmailService(EmailService emailService) {
        this.emailService = emailService;
    }

    @Required
    public void setPointFormattingService(
            PointFormattingService pointFormattingService) {
        this.pointFormattingService = pointFormattingService;
    }

    @Required
    public void setDateFormattingService(
            DateFormattingService dateFormattingService) {
        this.dateFormattingService = dateFormattingService;
    }

}

package com.cannontech.amr.archivedValueExporter.model;

import com.cannontech.common.pao.attribute.model.Attribute;
import com.cannontech.common.pao.attribute.model.BuiltInAttribute;
import com.cannontech.common.pao.attribute.service.IllegalUseOfAttribute;
import com.google.common.collect.ImmutableMap;

public enum CMEPUnitEnum {
    AMPS(BuiltInAttribute.CURRENT), // Single phase meter uses Phase A UOM by default for current.
    AMPA(BuiltInAttribute.CURRENT_PHASE_A), // Phased based current reading (phase A).
    AMPB(BuiltInAttribute.CURRENT_PHASE_B), // Phased based current reading (phase B).
    AMPC(BuiltInAttribute.CURRENT_PHASE_C), // Phased based current reading (phase C).

    GKW(BuiltInAttribute.RECEIVED_PEAK_DEMAND),
                                           // interval. Used when customer is generating power.
    GKVA(BuiltInAttribute.RECEIVED_PEAK_KVA), // Received Peak kVA demand value as programmed into the meter.
    GKVAR(BuiltInAttribute.RECEIVED_PEAK_KVAR), // Received Peak KVAR demand value as programmed into the meter.
    GKWH(BuiltInAttribute.RECEIVED_KWH_PER_INTERVAL), // Energy generated by the end customer and received by the utility on the
                                                      // grid per interval configured in the meter; UOMs ending in 'H' represent
                                                      // per interval type points indicating usage across the interval. It may or
                                                      // may not be an hourly value.
    GKVAH(BuiltInAttribute.RECEIVED_KVAH_PER_INTERVAL), 
    GKVAHREG(BuiltInAttribute.RECEIVED_KVAH),
    GKVARH(null), 
    GKVARHREG(BuiltInAttribute.RECEIVED_KVARH),
    GKWHREG(BuiltInAttribute.RECEIVED_KWH), // Energy generated by the end customer and received by the utliity on the grid; UOMs
                                            // ending in 'REG' indicate register or faceplate readings.
    GASREG(BuiltInAttribute.USAGE_GAS),
    GAS(BuiltInAttribute.GAS_USAGE_PER_INTERVAL), // Meter dial or register readings for printing on monthly bill.

    GKWHREGTOUA(BuiltInAttribute.RECEIVED_KWH_RATE_A), // Energy generated by the end customer and received by the utility on the
                                                       // grid broken into time of day buckets for billing Rate A.
    GKWHREGTOUB(BuiltInAttribute.RECEIVED_KWH_RATE_B), // Energy generated by the end customer and received by the utility on the
                                                       // grid broken into time of day buckets for billing Rate B.
    GKWHREGTOUC(BuiltInAttribute.RECEIVED_KWH_RATE_C), // Energy generated by the end customer and received by the utility on the
                                                       // grid broken into time of day buckets for billing Rate C.
    GKWHREGTOUD(BuiltInAttribute.RECEIVED_KWH_RATE_D), // Energy generated by the end customer and received by the utility on the
                                                       // grid broken into time of day buckets for billing Rate D.

    KVA(BuiltInAttribute.PEAK_KVA), // Peak KVA demand value as programmed into the meter.
    KVAH(BuiltInAttribute.DELIVERED_KVAH_PER_INTERVAL), 
    KVAHREG(BuiltInAttribute.KVAH),
    KVAR(BuiltInAttribute.PEAK_KVAR), // Peak KVAR demand value as programmed into the meter.
    KVARH(BuiltInAttribute.DELIVERED_KVARH_PER_INTERVAL),
                                                          // depending upon power factor. See KVAR above for further notes.
    KVARHREG(BuiltInAttribute.KVARH),

    KW(BuiltInAttribute.PEAK_DEMAND), // Demand.
    KWH(BuiltInAttribute.DELIVERED_KWH_PER_INTERVAL), // Energy used by the end customer and delivered by the utility per interval
                                                      // configured in the meter; UOMs ending in 'H' represent per interval type
                                                      // points indicating usage across the interval.
                                                      // It may or may not be an hourly value
    KWHREG(BuiltInAttribute.DELIVERED_KWH), // Energy used by the end customer and delivered by the utility; UOMs ending in 'REG'
                                            // indicate register or faceplate readings.

    KWHREGTOUA(BuiltInAttribute.USAGE_RATE_A), // Energy used by the end customer and delivered by the utility into time of day
                                               // buckets with Usage Rate A.
    KWHREGTOUB(BuiltInAttribute.USAGE_RATE_B), // Energy used by the end customer and delivered by the utility into time of day
                                               // buckets with Usage Rate B.
    KWHREGTOUC(BuiltInAttribute.USAGE_RATE_C), // Energy used by the end customer and delivered by the utility into time of day
                                               // buckets with Usage Rate C.
    KWHREGTOUD(BuiltInAttribute.USAGE_RATE_D), // Energy used by the end customer and delivered by the utility into time of day
                                               // buckets with Usage Rate D.

    KWTOUA(BuiltInAttribute.PEAK_DEMAND_RATE_A), // Kilowatt demand, usually expressed as peak value in time interval in time of
                                                 // day buckets for billing; Peak Demand Rate A.
    KWTOUB(BuiltInAttribute.PEAK_DEMAND_RATE_B), // Kilowatt demand, usually expressed as peak value in time interval in time of
                                                 // day buckets for billing; Peak Demand Rate B.
    KWTOUC(BuiltInAttribute.PEAK_DEMAND_RATE_C), // Kilowatt demand, usually expressed as peak value in time interval in time of
                                                 // day buckets for billing; Peak Demand Rate C.
    KWTOUD(BuiltInAttribute.PEAK_DEMAND_RATE_D), // Kilowatt demand, usually expressed as peak value in time interval in time of
                                                 // day buckets for billing; Peak Demand Rate D.

    MAXV(BuiltInAttribute.MAXIMUM_VOLTAGE_DAILY), // Maximum Voltage Daily.
    MINV(BuiltInAttribute.MINIMUM_VOLTAGE_DAILY), // Minimum Voltage Daily.

    NKWHREG(BuiltInAttribute.NET_KWH), // Difference between energy delivered and energy received; UOMs ending in 'REG' indicate
                                       // register or faceplate readings.
    NKWH(BuiltInAttribute.NET_KWH_PER_INTERVAL), // Difference between energy delivered and energy received per interval; UOMs
                                                 // ending in 'H' represent per interval type points indicating usage across the
                                                 // interval. It may or may not be an hourly value.
    NKVARHREG(BuiltInAttribute.NET_KVARH),
                                           // hours; UOMs ending in 'REG' indicate register or faceplate readings.

    NKWHREGTOUA(BuiltInAttribute.NET_KWH_RATE_A), // Difference between energy delivered and energy received in time of day
                                                  // buckets for billing Net kWh Rate A.
    NKWHREGTOUB(BuiltInAttribute.NET_KWH_RATE_B), // Difference between energy delivered and energy received in time of day
                                                  // buckets for billing Net kWh Rate B.
    NKWHREGTOUC(BuiltInAttribute.NET_KWH_RATE_C), // Difference between energy delivered and energy received in time of day
                                                  // buckets for billing Net kWh Rate C.
    NKWHREGTOUD(BuiltInAttribute.NET_KWH_RATE_D), // Difference between energy delivered and energy received in time of day
                                                  // buckets for billing Net kWh Rate D.

    PULSE(null), // Direct meter pulse readings.
    PF(BuiltInAttribute.POWER_FACTOR_COIN), // Power factor reading with the same date and time of the Peak Demand reading.

    SKWHREG(BuiltInAttribute.SUM_KWH), // Summation of energy delivered and energy received; UOMs ending in 'REG' indicate
                                       // register or faceplate readings.
    SKWH(BuiltInAttribute.SUM_KWH_PER_INTERVAL), // Summation of energy delivered and energy received per interval; UOMs ending in
                                                 // 'H' represent per interval type points indicating usage across the interval.
                                                 // It may or may not be an hourly value.
    SKVAHREG(BuiltInAttribute.SUM_KVAH),
    SKVAH(BuiltInAttribute.SUM_KVAH_PER_INTERVAL),
    SKVARHREG(BuiltInAttribute.SUM_KVARH),
    SKVARH(BuiltInAttribute.SUM_KVARH_PER_INTERVAL),

    SKWHREGTOUA(BuiltInAttribute.SUM_KWH_RATE_A), // Summation of energy delivered and energy received broken into time of day
                                                  // buckets for billing Sum kWh Rate A.
    SKWHREGTOUB(BuiltInAttribute.SUM_KWH_RATE_B), // Summation of energy delivered and energy received broken into time of day
                                                  // buckets for billing Sum kWh Rate B.
    SKWHREGTOUC(BuiltInAttribute.SUM_KWH_RATE_C), // Summation of energy delivered and energy received broken into time of day
                                                  // buckets for billing Sum kWh Rate C.
    SKWHREGTOUD(BuiltInAttribute.SUM_KWH_RATE_D), // Summation of energy delivered and energy received broken into time of day
                                                  // buckets for billing Sum kWh Rate D.

    VOLTS(BuiltInAttribute.VOLTAGE), // Single phase meter uses Phase A UOM by default for voltage.
    VOLTA(BuiltInAttribute.VOLTAGE_PHASE_A), // Phased based voltage reading.
    VOLTB(BuiltInAttribute.VOLTAGE_PHASE_B), // Phased based voltage reading.
    VOLTC(BuiltInAttribute.VOLTAGE_PHASE_C), // Phased based voltage reading.

    WATERREG(BuiltInAttribute.USAGE_WATER),
    WATER(BuiltInAttribute.WATER_USAGE_PER_INTERVAL), // Meter dial or register readings for printing on monthly bill.

    BTU(null), // British Thermal Units.
    THERM(null), // Therms.
    GALREG(null), // Gallons.
    GAL(null), // Gallons.
    CF(null), // Cubic Feet.
    CCF(null), // Hundreds of Cubic Feet.
    MCF(null), // Thousands of Cubic Feet.
    ACFT(null), // Acre-Feet.
    LBS(null), // Pounds.
    $(null), // US Dollars.
    ;
    
    private Attribute attribute;
    
    private final static ImmutableMap<Attribute, CMEPUnitEnum> lookupByAttribute;

    private CMEPUnitEnum(Attribute attribute) {
        this.attribute = attribute;
    }

    static {
        ImmutableMap.Builder<Attribute, CMEPUnitEnum> lookupByAttributeBuilder = ImmutableMap.builder();
        for (CMEPUnitEnum cmepUnitEnum : values()) {
            if (cmepUnitEnum.attribute != null) {
                lookupByAttributeBuilder.put(cmepUnitEnum.attribute, cmepUnitEnum);
            }
        }
        lookupByAttribute = lookupByAttributeBuilder.build();
    }

    public Attribute getAttribute() throws IllegalUseOfAttribute {
        if (attribute == null) {
            throw new IllegalUseOfAttribute("The unit "+name()+" is not currently supported by Yukon");
        }
        return attribute;
    }

    /**
     * Returns the CMEPUnitEnum to which the specified Attribute is mapped, or null if there is no mapping for the Attribute.
     */
    public static CMEPUnitEnum getForAttribute(Attribute attribute) {
        return lookupByAttribute.get(attribute);
    }
}
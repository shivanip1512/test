<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
    <description>This file is for the most generic beans. Beans here should be usable (i.e. no crazy dependencies) by any application that currently exists and any that is created in the future.</description>

    <!--  
       The following is the "main" datasource that should be used for new code
       That uses Spring transactions, JdbcTemplate, or any code that needs a raw
       connection (like the incrementer).
    -->
    <bean id="yukonDataSource" class="com.cannontech.database.PoolManager" factory-method="getYukonDataSource"/>
    
    <!--  
       This datasource should be used by "old" code that may need to blindly participate
       in Spring transactions. For example, for getting a connection to set on a DBPersistant
       that used in a Transaction object that may end up calling a new DAO written with the
       new Spring code.
    -->
    <bean id="wrappedYukonDataSource" class="com.cannontech.database.PoolManager" factory-method="getWrappedYukonDataSource"/>

    <!-- The following should not be used as a means to get a datasource or connection -->
    <bean id="databasePoolManager" class="com.cannontech.database.PoolManager" factory-method="getInstance"/>
    <!--  
        The following two beans will get overridden by Hibernate versions if the context loaded
        includes the hibernateContext.xml file.
    -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate"
       singleton="false">
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="yukonDataSource" />
    </bean>

<!-- 
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
        singleton="false">
        <property name="dataSource" ref="yukonDataSource" />
    </bean>
 -->
 
    <bean id="jdbcTemplate" class="com.cannontech.spring.LoggingJdbcTemplate"
        singleton="false">
        <property name="dataSource" ref="yukonDataSource" />
    </bean>

    <bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate"
        singleton="false">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>

    <bean id="cacheDbChangeListener" class="com.cannontech.database.cache.CacheDBChangeListener">
        <constructor-arg>
            <ref bean="connectionPool" />
        </constructor-arg>
    </bean>

    <bean id="connectionPool" class="com.cannontech.yukon.conns.ConnPool" destroy-method="shutdown">
        <property name="standaloneRoleDao" ref="standaloneRoleDao" />
    </bean>

    <bean id="ctiSqlStatement" class="com.cannontech.ejb.SqlStatementBean" singleton="false" />
    <bean id="dbPersistent" class="com.cannontech.ejb.DBPersistentBean" singleton="false" />

    <bean id="notificationProxy" factory-bean="connectionPool" factory-method="getDefNotificationConn" singleton="false" />
    <bean id="dispatchConnection" factory-bean="connectionPool" factory-method="getDefDispatchConn" singleton="false" />
    <bean id="porterConnection" factory-bean="connectionPool" factory-method="getDefPorterConn" singleton="false" />
    <bean id="macsConnection" factory-bean="connectionPool" factory-method="getDefMacsConn" singleton="false"/>
	<bean id="cbcConnection" factory-bean="connectionPool" factory-method="getDefCapControlConn" singleton="false"/>

    <bean id="nextValueHelper" class="com.cannontech.database.incrementer.NextValueHelper">
        <property name="sequenceNameLookup" ref="sequenceNameLookup" />
    </bean>

    <bean id="sequenceNameLookup" class="com.cannontech.database.incrementer.XmlIncrementer" init-method="parse">
        <property name="dataSource" ref="yukonDataSource" />
        <property name="configFile" value="classpath:com/cannontech/database/incrementer/table_sequences.xml" />
    </bean>
    
    <bean id="globalTimer" class="java.util.Timer" destroy-method="cancel" lazy-init="true">
       <constructor-arg value="true"/> <!--  create as daemon  -->
    </bean>
    
    <bean id="globalScheduledExecutor" class="com.cannontech.common.util.ScheduledExecutorDelegate">
       <property name="service">
		    <bean class="java.util.concurrent.Executors"
		    	factory-method="newScheduledThreadPool"
		    	destroy-method="shutdownNow">
		    	<constructor-arg value="2" />
		    </bean>
       </property>
    </bean>

    <bean id="rolePropertyUserCheckerFactory" class="com.cannontech.user.checker.RolePropertyUserCheckerFactory">
      <property name="authDao" ref="authDao"/>
      <property name="propertySearcher"><bean class="com.cannontech.util.ReflectivePropertySearcher" factory-method="getRoleProperty"/></property>
    </bean>
    
    <bean id="timeSource" class="com.cannontech.common.util.TimeSourceImpl"/>
</beans>

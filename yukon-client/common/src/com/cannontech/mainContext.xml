<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
	
	<tx:annotation-driven />
    
    <!--  
       The following is the "main" datasource that should be used for new code
       That uses Spring transactions, JdbcTemplate, or any code that needs a raw
       connection (like the incrementer).
    -->
    <bean id="yukonDataSource" class="com.cannontech.database.PoolManager" factory-method="getYukonDataSource"/>
    
    <!--  
       This datasource should be used by "old" code that may need to blindly participate
       in Spring transactions. For example, for getting a connection to set on a DBPersistant
       that used in a Transaction object that may end up calling a new DAO written with the
       new Spring code.
    -->
    <bean id="wrappedYukonDataSource" class="com.cannontech.database.PoolManager" factory-method="getWrappedYukonDataSource"/>

    <!-- The following should not be used as a means to get a datasource or connection -->
    <bean id="databasePoolManager" class="com.cannontech.database.PoolManager" factory-method="getInstance"/>
    <!--  
        The following two beans will get overridden by Hibernate versions if the context loaded
        includes the hibernateContext.xml file.
    -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate"
       scope="prototype">
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="yukonDataSource" />
    </bean>

<!-- 
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
        scope="prototype">
        <property name="dataSource" ref="yukonDataSource" />
    </bean>
 -->
 
    <bean id="jdbcTemplate" class="com.cannontech.spring.LoggingJdbcTemplate"
        scope="prototype">
        <property name="dataSource" ref="yukonDataSource" />
    </bean>

    <bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate"
        scope="prototype">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>

    <bean id="cacheDbChangeListener" class="com.cannontech.database.cache.CacheDBChangeListener">
        <constructor-arg>
            <ref bean="connectionPool" />
        </constructor-arg>
    </bean>

    <bean id="connectionPool" class="com.cannontech.yukon.conns.ConnPool" destroy-method="shutdown">
        <property name="standaloneRoleDao" ref="standaloneRoleDao" />
    </bean>

    <bean id="ctiSqlStatement" class="com.cannontech.ejb.SqlStatementBean" scope="prototype" />
    <bean id="dbPersistent" class="com.cannontech.ejb.DBPersistentBean" scope="prototype" />

    <bean id="notificationProxy" factory-bean="connectionPool" factory-method="getDefNotificationConn" scope="prototype" />
    <bean id="dispatchConnection" factory-bean="connectionPool" factory-method="getDefDispatchConn" scope="prototype" />
    <bean id="porterConnection" factory-bean="connectionPool" factory-method="getDefPorterConn" scope="prototype" />
    <bean id="macsConnection" factory-bean="connectionPool" factory-method="getDefMacsConn" scope="prototype"/>
	<bean id="cbcConnection" factory-bean="connectionPool" factory-method="getDefCapControlConn" scope="prototype"/>

    <bean id="nextValueHelper" class="com.cannontech.database.incrementer.NextValueHelper">
        <property name="sequenceNameLookup" ref="sequenceNameLookup" />
    </bean>

    <bean id="sequenceNameLookup" class="com.cannontech.database.incrementer.XmlIncrementer" init-method="parse">
        <property name="dataSource" ref="yukonDataSource" />
        <property name="configFile" value="classpath:com/cannontech/database/incrementer/table_sequences.xml" />
    </bean>
    
    <bean id="globalTimer" class="java.util.Timer" destroy-method="cancel" lazy-init="true">
       <constructor-arg value="true"/> <!--  create as daemon  -->
    </bean>
    
    <bean id="globalScheduledExecutor" class="com.cannontech.common.util.ScheduledExecutorDelegate">
       <property name="service">
		    <bean class="java.util.concurrent.Executors"
		    	factory-method="newScheduledThreadPool"
		    	destroy-method="shutdownNow">
		    	<constructor-arg value="2" />
		    </bean>
       </property>
    </bean>

    <bean id="rolePropertyUserCheckerFactory" class="com.cannontech.user.checker.RolePropertyUserCheckerFactory">
      <property name="authDao" ref="authDao"/>
      <property name="propertySearcher"><bean class="com.cannontech.util.ReflectivePropertySearcher" factory-method="getRoleProperty"/></property>
    </bean>
    
    <bean id="timeSource" class="com.cannontech.common.util.TimeSourceImpl"/>

    <bean id="dateFormattingService"
        class="com.cannontech.core.service.impl.DateFormattingServiceImpl">
        <property name="yukonUserDao">
            <ref bean="yukonUserDao" />
        </property>
    </bean>

</beans>

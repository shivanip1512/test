/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LMCommand implements org.apache.thrift.TBase<LMCommand, LMCommand._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMCommand");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("_command", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("_number", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField _COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("_count", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField _AUX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_auxId", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LMCommandStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LMCommandTupleSchemeFactory());
  }

  private com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage; // required
  private int _command; // required
  private int _paoId; // required
  private int _number; // required
  private double _value; // required
  private int _count; // required
  private int _auxId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _COMMAND((short)2, "_command"),
    _PAO_ID((short)3, "_paoId"),
    _NUMBER((short)4, "_number"),
    _VALUE((short)5, "_value"),
    _COUNT((short)6, "_count"),
    _AUX_ID((short)7, "_auxId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _COMMAND
          return _COMMAND;
        case 3: // _PAO_ID
          return _PAO_ID;
        case 4: // _NUMBER
          return _NUMBER;
        case 5: // _VALUE
          return _VALUE;
        case 6: // _COUNT
          return _COUNT;
        case 7: // _AUX_ID
          return _AUX_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___COMMAND_ISSET_ID = 0;
  private static final int ___PAOID_ISSET_ID = 1;
  private static final int ___NUMBER_ISSET_ID = 2;
  private static final int ___VALUE_ISSET_ID = 3;
  private static final int ___COUNT_ISSET_ID = 4;
  private static final int ___AUXID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.LMMessage.class)));
    tmpMap.put(_Fields._COMMAND, new org.apache.thrift.meta_data.FieldMetaData("_command", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._NUMBER, new org.apache.thrift.meta_data.FieldMetaData("_number", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._COUNT, new org.apache.thrift.meta_data.FieldMetaData("_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._AUX_ID, new org.apache.thrift.meta_data.FieldMetaData("_auxId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMCommand.class, metaDataMap);
  }

  public LMCommand() {
  }

  public LMCommand(
    com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage,
    int _command,
    int _paoId,
    int _number,
    double _value,
    int _count,
    int _auxId)
  {
    this();
    this._baseMessage = _baseMessage;
    this._command = _command;
    set_commandIsSet(true);
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._number = _number;
    set_numberIsSet(true);
    this._value = _value;
    set_valueIsSet(true);
    this._count = _count;
    set_countIsSet(true);
    this._auxId = _auxId;
    set_auxIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMCommand(LMCommand other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage(other._baseMessage);
    }
    this._command = other._command;
    this._paoId = other._paoId;
    this._number = other._number;
    this._value = other._value;
    this._count = other._count;
    this._auxId = other._auxId;
  }

  public LMCommand deepCopy() {
    return new LMCommand(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_commandIsSet(false);
    this._command = 0;
    set_paoIdIsSet(false);
    this._paoId = 0;
    set_numberIsSet(false);
    this._number = 0;
    set_valueIsSet(false);
    this._value = 0.0;
    set_countIsSet(false);
    this._count = 0;
    set_auxIdIsSet(false);
    this._auxId = 0;
  }

  public com.cannontech.messaging.serialization.thrift.generated.LMMessage get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_command() {
    return this._command;
  }

  public void set_command(int _command) {
    this._command = _command;
    set_commandIsSet(true);
  }

  public void unset_command() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___COMMAND_ISSET_ID);
  }

  /** Returns true if field _command is set (has been assigned a value) and false otherwise */
  public boolean isSet_command() {
    return EncodingUtils.testBit(__isset_bitfield, ___COMMAND_ISSET_ID);
  }

  public void set_commandIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___COMMAND_ISSET_ID, value);
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public int get_number() {
    return this._number;
  }

  public void set_number(int _number) {
    this._number = _number;
    set_numberIsSet(true);
  }

  public void unset_number() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___NUMBER_ISSET_ID);
  }

  /** Returns true if field _number is set (has been assigned a value) and false otherwise */
  public boolean isSet_number() {
    return EncodingUtils.testBit(__isset_bitfield, ___NUMBER_ISSET_ID);
  }

  public void set_numberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___NUMBER_ISSET_ID, value);
  }

  public double get_value() {
    return this._value;
  }

  public void set_value(double _value) {
    this._value = _value;
    set_valueIsSet(true);
  }

  public void unset_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___VALUE_ISSET_ID);
  }

  /** Returns true if field _value is set (has been assigned a value) and false otherwise */
  public boolean isSet_value() {
    return EncodingUtils.testBit(__isset_bitfield, ___VALUE_ISSET_ID);
  }

  public void set_valueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___VALUE_ISSET_ID, value);
  }

  public int get_count() {
    return this._count;
  }

  public void set_count(int _count) {
    this._count = _count;
    set_countIsSet(true);
  }

  public void unset_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___COUNT_ISSET_ID);
  }

  /** Returns true if field _count is set (has been assigned a value) and false otherwise */
  public boolean isSet_count() {
    return EncodingUtils.testBit(__isset_bitfield, ___COUNT_ISSET_ID);
  }

  public void set_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___COUNT_ISSET_ID, value);
  }

  public int get_auxId() {
    return this._auxId;
  }

  public void set_auxId(int _auxId) {
    this._auxId = _auxId;
    set_auxIdIsSet(true);
  }

  public void unset_auxId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___AUXID_ISSET_ID);
  }

  /** Returns true if field _auxId is set (has been assigned a value) and false otherwise */
  public boolean isSet_auxId() {
    return EncodingUtils.testBit(__isset_bitfield, ___AUXID_ISSET_ID);
  }

  public void set_auxIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___AUXID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.LMMessage)value);
      }
      break;

    case _COMMAND:
      if (value == null) {
        unset_command();
      } else {
        set_command((Integer)value);
      }
      break;

    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((Integer)value);
      }
      break;

    case _NUMBER:
      if (value == null) {
        unset_number();
      } else {
        set_number((Integer)value);
      }
      break;

    case _VALUE:
      if (value == null) {
        unset_value();
      } else {
        set_value((Double)value);
      }
      break;

    case _COUNT:
      if (value == null) {
        unset_count();
      } else {
        set_count((Integer)value);
      }
      break;

    case _AUX_ID:
      if (value == null) {
        unset_auxId();
      } else {
        set_auxId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _COMMAND:
      return Integer.valueOf(get_command());

    case _PAO_ID:
      return Integer.valueOf(get_paoId());

    case _NUMBER:
      return Integer.valueOf(get_number());

    case _VALUE:
      return Double.valueOf(get_value());

    case _COUNT:
      return Integer.valueOf(get_count());

    case _AUX_ID:
      return Integer.valueOf(get_auxId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _COMMAND:
      return isSet_command();
    case _PAO_ID:
      return isSet_paoId();
    case _NUMBER:
      return isSet_number();
    case _VALUE:
      return isSet_value();
    case _COUNT:
      return isSet_count();
    case _AUX_ID:
      return isSet_auxId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LMCommand)
      return this.equals((LMCommand)that);
    return false;
  }

  public boolean equals(LMCommand that) {
    if (that == null)
      return false;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__command = true;
    boolean that_present__command = true;
    if (this_present__command || that_present__command) {
      if (!(this_present__command && that_present__command))
        return false;
      if (this._command != that._command)
        return false;
    }

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__number = true;
    boolean that_present__number = true;
    if (this_present__number || that_present__number) {
      if (!(this_present__number && that_present__number))
        return false;
      if (this._number != that._number)
        return false;
    }

    boolean this_present__value = true;
    boolean that_present__value = true;
    if (this_present__value || that_present__value) {
      if (!(this_present__value && that_present__value))
        return false;
      if (this._value != that._value)
        return false;
    }

    boolean this_present__count = true;
    boolean that_present__count = true;
    if (this_present__count || that_present__count) {
      if (!(this_present__count && that_present__count))
        return false;
      if (this._count != that._count)
        return false;
    }

    boolean this_present__auxId = true;
    boolean that_present__auxId = true;
    if (this_present__auxId || that_present__auxId) {
      if (!(this_present__auxId && that_present__auxId))
        return false;
      if (this._auxId != that._auxId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LMCommand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LMCommand typedOther = (LMCommand)other;

    lastComparison = Boolean.valueOf(isSet_baseMessage()).compareTo(typedOther.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, typedOther._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_command()).compareTo(typedOther.isSet_command());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_command()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._command, typedOther._command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_paoId()).compareTo(typedOther.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, typedOther._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_number()).compareTo(typedOther.isSet_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._number, typedOther._number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_count()).compareTo(typedOther.isSet_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._count, typedOther._count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_auxId()).compareTo(typedOther.isSet_auxId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_auxId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._auxId, typedOther._auxId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LMCommand(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_command:");
    sb.append(this._command);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_number:");
    sb.append(this._number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_value:");
    sb.append(this._value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_count:");
    sb.append(this._count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_auxId:");
    sb.append(this._auxId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_command()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_command' is unset! Struct:" + toString());
    }

    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_number()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_number' is unset! Struct:" + toString());
    }

    if (!isSet_value()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_value' is unset! Struct:" + toString());
    }

    if (!isSet_count()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_count' is unset! Struct:" + toString());
    }

    if (!isSet_auxId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_auxId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMCommandStandardSchemeFactory implements SchemeFactory {
    public LMCommandStandardScheme getScheme() {
      return new LMCommandStandardScheme();
    }
  }

  private static class LMCommandStandardScheme extends StandardScheme<LMCommand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._command = iprot.readI32();
              struct.set_commandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._number = iprot.readI32();
              struct.set_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._value = iprot.readDouble();
              struct.set_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._count = iprot.readI32();
              struct.set_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _AUX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._auxId = iprot.readI32();
              struct.set_auxIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMCommand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_COMMAND_FIELD_DESC);
      oprot.writeI32(struct._command);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NUMBER_FIELD_DESC);
      oprot.writeI32(struct._number);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_COUNT_FIELD_DESC);
      oprot.writeI32(struct._count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_AUX_ID_FIELD_DESC);
      oprot.writeI32(struct._auxId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMCommandTupleSchemeFactory implements SchemeFactory {
    public LMCommandTupleScheme getScheme() {
      return new LMCommandTupleScheme();
    }
  }

  private static class LMCommandTupleScheme extends TupleScheme<LMCommand> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._command);
      oprot.writeI32(struct._paoId);
      oprot.writeI32(struct._number);
      oprot.writeDouble(struct._value);
      oprot.writeI32(struct._count);
      oprot.writeI32(struct._auxId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._command = iprot.readI32();
      struct.set_commandIsSet(true);
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._number = iprot.readI32();
      struct.set_numberIsSet(true);
      struct._value = iprot.readDouble();
      struct.set_valueIsSet(true);
      struct._count = iprot.readI32();
      struct.set_countIsSet(true);
      struct._auxId = iprot.readI32();
      struct.set_auxIdIsSet(true);
    }
  }

}


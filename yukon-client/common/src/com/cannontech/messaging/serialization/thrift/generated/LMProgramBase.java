/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-12-16")
public class LMProgramBase implements org.apache.thrift.TBase<LMProgramBase, LMProgramBase._Fields>, java.io.Serializable, Cloneable, Comparable<LMProgramBase> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMProgramBase");

  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _PAO_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoCategory", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _PAO_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoClass", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _PAO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField _PAO_TYPE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoTypeString", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField _PAO_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoDescription", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField _DISABLE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_disableFlag", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField _START_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_startPriority", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField _STOP_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_stopPriority", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField _CONTROL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField _AVAILABLE_WEEKDAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("_availableWeekdays", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField _MAX_HOURS_DAILY_FIELD_DESC = new org.apache.thrift.protocol.TField("_maxHoursDaily", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField _MAX_HOURS_MONTHLY_FIELD_DESC = new org.apache.thrift.protocol.TField("_maxHoursMonthly", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField _MAX_HOURS_SEASONAL_FIELD_DESC = new org.apache.thrift.protocol.TField("_maxHoursSeasonal", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField _MAX_HOURS_ANNUALLY_FIELD_DESC = new org.apache.thrift.protocol.TField("_maxHoursAnnually", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField _MIN_ACTIVATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_minActivateTime", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField _MIN_RESTART_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_minRestartTime", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField _PROGRAM_STATUS_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_programStatusPointId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField _PROGRAM_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_programState", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField _REDUCTION_ANALOG_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_reductionAnalogPointId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField _REDUCTION_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("_reductionTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField _STARTED_CONTROLLING_FIELD_DESC = new org.apache.thrift.protocol.TField("_startedControlling", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField _LAST_CONTROL_SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastControlSent", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField _MANUAL_CONTROL_RECEIVED_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_manualControlReceivedFlag", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField _LM_PROGRAM_CONTROL_WINDOWS_FIELD_DESC = new org.apache.thrift.protocol.TField("_lmProgramControlWindows", org.apache.thrift.protocol.TType.LIST, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LMProgramBaseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LMProgramBaseTupleSchemeFactory();

  private int _paoId; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoCategory; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoClass; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoTypeString; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoDescription; // required
  private boolean _disableFlag; // required
  private int _startPriority; // required
  private int _stopPriority; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _controlType; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _availableWeekdays; // required
  private int _maxHoursDaily; // required
  private int _maxHoursMonthly; // required
  private int _maxHoursSeasonal; // required
  private int _maxHoursAnnually; // required
  private int _minActivateTime; // required
  private int _minRestartTime; // required
  private int _programStatusPointId; // required
  private int _programState; // required
  private int _reductionAnalogPointId; // required
  private double _reductionTotal; // required
  private long _startedControlling; // required
  private long _lastControlSent; // required
  private boolean _manualControlReceivedFlag; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<LMProgramControlWindow> _lmProgramControlWindows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PAO_ID((short)1, "_paoId"),
    _PAO_CATEGORY((short)2, "_paoCategory"),
    _PAO_CLASS((short)3, "_paoClass"),
    _PAO_NAME((short)4, "_paoName"),
    _PAO_TYPE_STRING((short)5, "_paoTypeString"),
    _PAO_DESCRIPTION((short)6, "_paoDescription"),
    _DISABLE_FLAG((short)7, "_disableFlag"),
    _START_PRIORITY((short)8, "_startPriority"),
    _STOP_PRIORITY((short)9, "_stopPriority"),
    _CONTROL_TYPE((short)10, "_controlType"),
    _AVAILABLE_WEEKDAYS((short)11, "_availableWeekdays"),
    _MAX_HOURS_DAILY((short)12, "_maxHoursDaily"),
    _MAX_HOURS_MONTHLY((short)13, "_maxHoursMonthly"),
    _MAX_HOURS_SEASONAL((short)14, "_maxHoursSeasonal"),
    _MAX_HOURS_ANNUALLY((short)15, "_maxHoursAnnually"),
    _MIN_ACTIVATE_TIME((short)16, "_minActivateTime"),
    _MIN_RESTART_TIME((short)17, "_minRestartTime"),
    _PROGRAM_STATUS_POINT_ID((short)18, "_programStatusPointId"),
    _PROGRAM_STATE((short)19, "_programState"),
    _REDUCTION_ANALOG_POINT_ID((short)20, "_reductionAnalogPointId"),
    _REDUCTION_TOTAL((short)21, "_reductionTotal"),
    _STARTED_CONTROLLING((short)22, "_startedControlling"),
    _LAST_CONTROL_SENT((short)23, "_lastControlSent"),
    _MANUAL_CONTROL_RECEIVED_FLAG((short)24, "_manualControlReceivedFlag"),
    _LM_PROGRAM_CONTROL_WINDOWS((short)25, "_lmProgramControlWindows");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PAO_ID
          return _PAO_ID;
        case 2: // _PAO_CATEGORY
          return _PAO_CATEGORY;
        case 3: // _PAO_CLASS
          return _PAO_CLASS;
        case 4: // _PAO_NAME
          return _PAO_NAME;
        case 5: // _PAO_TYPE_STRING
          return _PAO_TYPE_STRING;
        case 6: // _PAO_DESCRIPTION
          return _PAO_DESCRIPTION;
        case 7: // _DISABLE_FLAG
          return _DISABLE_FLAG;
        case 8: // _START_PRIORITY
          return _START_PRIORITY;
        case 9: // _STOP_PRIORITY
          return _STOP_PRIORITY;
        case 10: // _CONTROL_TYPE
          return _CONTROL_TYPE;
        case 11: // _AVAILABLE_WEEKDAYS
          return _AVAILABLE_WEEKDAYS;
        case 12: // _MAX_HOURS_DAILY
          return _MAX_HOURS_DAILY;
        case 13: // _MAX_HOURS_MONTHLY
          return _MAX_HOURS_MONTHLY;
        case 14: // _MAX_HOURS_SEASONAL
          return _MAX_HOURS_SEASONAL;
        case 15: // _MAX_HOURS_ANNUALLY
          return _MAX_HOURS_ANNUALLY;
        case 16: // _MIN_ACTIVATE_TIME
          return _MIN_ACTIVATE_TIME;
        case 17: // _MIN_RESTART_TIME
          return _MIN_RESTART_TIME;
        case 18: // _PROGRAM_STATUS_POINT_ID
          return _PROGRAM_STATUS_POINT_ID;
        case 19: // _PROGRAM_STATE
          return _PROGRAM_STATE;
        case 20: // _REDUCTION_ANALOG_POINT_ID
          return _REDUCTION_ANALOG_POINT_ID;
        case 21: // _REDUCTION_TOTAL
          return _REDUCTION_TOTAL;
        case 22: // _STARTED_CONTROLLING
          return _STARTED_CONTROLLING;
        case 23: // _LAST_CONTROL_SENT
          return _LAST_CONTROL_SENT;
        case 24: // _MANUAL_CONTROL_RECEIVED_FLAG
          return _MANUAL_CONTROL_RECEIVED_FLAG;
        case 25: // _LM_PROGRAM_CONTROL_WINDOWS
          return _LM_PROGRAM_CONTROL_WINDOWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___DISABLEFLAG_ISSET_ID = 1;
  private static final int ___STARTPRIORITY_ISSET_ID = 2;
  private static final int ___STOPPRIORITY_ISSET_ID = 3;
  private static final int ___MAXHOURSDAILY_ISSET_ID = 4;
  private static final int ___MAXHOURSMONTHLY_ISSET_ID = 5;
  private static final int ___MAXHOURSSEASONAL_ISSET_ID = 6;
  private static final int ___MAXHOURSANNUALLY_ISSET_ID = 7;
  private static final int ___MINACTIVATETIME_ISSET_ID = 8;
  private static final int ___MINRESTARTTIME_ISSET_ID = 9;
  private static final int ___PROGRAMSTATUSPOINTID_ISSET_ID = 10;
  private static final int ___PROGRAMSTATE_ISSET_ID = 11;
  private static final int ___REDUCTIONANALOGPOINTID_ISSET_ID = 12;
  private static final int ___REDUCTIONTOTAL_ISSET_ID = 13;
  private static final int ___STARTEDCONTROLLING_ISSET_ID = 14;
  private static final int ___LASTCONTROLSENT_ISSET_ID = 15;
  private static final int ___MANUALCONTROLRECEIVEDFLAG_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PAO_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("_paoCategory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_CLASS, new org.apache.thrift.meta_data.FieldMetaData("_paoClass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_NAME, new org.apache.thrift.meta_data.FieldMetaData("_paoName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_TYPE_STRING, new org.apache.thrift.meta_data.FieldMetaData("_paoTypeString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("_paoDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._DISABLE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_disableFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._START_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("_startPriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._STOP_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("_stopPriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONTROL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_controlType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._AVAILABLE_WEEKDAYS, new org.apache.thrift.meta_data.FieldMetaData("_availableWeekdays", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._MAX_HOURS_DAILY, new org.apache.thrift.meta_data.FieldMetaData("_maxHoursDaily", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MAX_HOURS_MONTHLY, new org.apache.thrift.meta_data.FieldMetaData("_maxHoursMonthly", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MAX_HOURS_SEASONAL, new org.apache.thrift.meta_data.FieldMetaData("_maxHoursSeasonal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MAX_HOURS_ANNUALLY, new org.apache.thrift.meta_data.FieldMetaData("_maxHoursAnnually", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MIN_ACTIVATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_minActivateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MIN_RESTART_TIME, new org.apache.thrift.meta_data.FieldMetaData("_minRestartTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PROGRAM_STATUS_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_programStatusPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PROGRAM_STATE, new org.apache.thrift.meta_data.FieldMetaData("_programState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._REDUCTION_ANALOG_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_reductionAnalogPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._REDUCTION_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("_reductionTotal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._STARTED_CONTROLLING, new org.apache.thrift.meta_data.FieldMetaData("_startedControlling", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._LAST_CONTROL_SENT, new org.apache.thrift.meta_data.FieldMetaData("_lastControlSent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._MANUAL_CONTROL_RECEIVED_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_manualControlReceivedFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._LM_PROGRAM_CONTROL_WINDOWS, new org.apache.thrift.meta_data.FieldMetaData("_lmProgramControlWindows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LMProgramControlWindow.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMProgramBase.class, metaDataMap);
  }

  public LMProgramBase() {
  }

  public LMProgramBase(
    int _paoId,
    java.lang.String _paoCategory,
    java.lang.String _paoClass,
    java.lang.String _paoName,
    java.lang.String _paoTypeString,
    java.lang.String _paoDescription,
    boolean _disableFlag,
    int _startPriority,
    int _stopPriority,
    java.lang.String _controlType,
    java.lang.String _availableWeekdays,
    int _maxHoursDaily,
    int _maxHoursMonthly,
    int _maxHoursSeasonal,
    int _maxHoursAnnually,
    int _minActivateTime,
    int _minRestartTime,
    int _programStatusPointId,
    int _programState,
    int _reductionAnalogPointId,
    double _reductionTotal,
    long _startedControlling,
    long _lastControlSent,
    boolean _manualControlReceivedFlag,
    java.util.List<LMProgramControlWindow> _lmProgramControlWindows)
  {
    this();
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._paoCategory = _paoCategory;
    this._paoClass = _paoClass;
    this._paoName = _paoName;
    this._paoTypeString = _paoTypeString;
    this._paoDescription = _paoDescription;
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
    this._startPriority = _startPriority;
    set_startPriorityIsSet(true);
    this._stopPriority = _stopPriority;
    set_stopPriorityIsSet(true);
    this._controlType = _controlType;
    this._availableWeekdays = _availableWeekdays;
    this._maxHoursDaily = _maxHoursDaily;
    set_maxHoursDailyIsSet(true);
    this._maxHoursMonthly = _maxHoursMonthly;
    set_maxHoursMonthlyIsSet(true);
    this._maxHoursSeasonal = _maxHoursSeasonal;
    set_maxHoursSeasonalIsSet(true);
    this._maxHoursAnnually = _maxHoursAnnually;
    set_maxHoursAnnuallyIsSet(true);
    this._minActivateTime = _minActivateTime;
    set_minActivateTimeIsSet(true);
    this._minRestartTime = _minRestartTime;
    set_minRestartTimeIsSet(true);
    this._programStatusPointId = _programStatusPointId;
    set_programStatusPointIdIsSet(true);
    this._programState = _programState;
    set_programStateIsSet(true);
    this._reductionAnalogPointId = _reductionAnalogPointId;
    set_reductionAnalogPointIdIsSet(true);
    this._reductionTotal = _reductionTotal;
    set_reductionTotalIsSet(true);
    this._startedControlling = _startedControlling;
    set_startedControllingIsSet(true);
    this._lastControlSent = _lastControlSent;
    set_lastControlSentIsSet(true);
    this._manualControlReceivedFlag = _manualControlReceivedFlag;
    set_manualControlReceivedFlagIsSet(true);
    this._lmProgramControlWindows = _lmProgramControlWindows;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMProgramBase(LMProgramBase other) {
    __isset_bitfield = other.__isset_bitfield;
    this._paoId = other._paoId;
    if (other.isSet_paoCategory()) {
      this._paoCategory = other._paoCategory;
    }
    if (other.isSet_paoClass()) {
      this._paoClass = other._paoClass;
    }
    if (other.isSet_paoName()) {
      this._paoName = other._paoName;
    }
    if (other.isSet_paoTypeString()) {
      this._paoTypeString = other._paoTypeString;
    }
    if (other.isSet_paoDescription()) {
      this._paoDescription = other._paoDescription;
    }
    this._disableFlag = other._disableFlag;
    this._startPriority = other._startPriority;
    this._stopPriority = other._stopPriority;
    if (other.isSet_controlType()) {
      this._controlType = other._controlType;
    }
    if (other.isSet_availableWeekdays()) {
      this._availableWeekdays = other._availableWeekdays;
    }
    this._maxHoursDaily = other._maxHoursDaily;
    this._maxHoursMonthly = other._maxHoursMonthly;
    this._maxHoursSeasonal = other._maxHoursSeasonal;
    this._maxHoursAnnually = other._maxHoursAnnually;
    this._minActivateTime = other._minActivateTime;
    this._minRestartTime = other._minRestartTime;
    this._programStatusPointId = other._programStatusPointId;
    this._programState = other._programState;
    this._reductionAnalogPointId = other._reductionAnalogPointId;
    this._reductionTotal = other._reductionTotal;
    this._startedControlling = other._startedControlling;
    this._lastControlSent = other._lastControlSent;
    this._manualControlReceivedFlag = other._manualControlReceivedFlag;
    if (other.isSet_lmProgramControlWindows()) {
      java.util.List<LMProgramControlWindow> __this___lmProgramControlWindows = new java.util.ArrayList<LMProgramControlWindow>(other._lmProgramControlWindows.size());
      for (LMProgramControlWindow other_element : other._lmProgramControlWindows) {
        __this___lmProgramControlWindows.add(new LMProgramControlWindow(other_element));
      }
      this._lmProgramControlWindows = __this___lmProgramControlWindows;
    }
  }

  public LMProgramBase deepCopy() {
    return new LMProgramBase(this);
  }

  @Override
  public void clear() {
    set_paoIdIsSet(false);
    this._paoId = 0;
    this._paoCategory = null;
    this._paoClass = null;
    this._paoName = null;
    this._paoTypeString = null;
    this._paoDescription = null;
    set_disableFlagIsSet(false);
    this._disableFlag = false;
    set_startPriorityIsSet(false);
    this._startPriority = 0;
    set_stopPriorityIsSet(false);
    this._stopPriority = 0;
    this._controlType = null;
    this._availableWeekdays = null;
    set_maxHoursDailyIsSet(false);
    this._maxHoursDaily = 0;
    set_maxHoursMonthlyIsSet(false);
    this._maxHoursMonthly = 0;
    set_maxHoursSeasonalIsSet(false);
    this._maxHoursSeasonal = 0;
    set_maxHoursAnnuallyIsSet(false);
    this._maxHoursAnnually = 0;
    set_minActivateTimeIsSet(false);
    this._minActivateTime = 0;
    set_minRestartTimeIsSet(false);
    this._minRestartTime = 0;
    set_programStatusPointIdIsSet(false);
    this._programStatusPointId = 0;
    set_programStateIsSet(false);
    this._programState = 0;
    set_reductionAnalogPointIdIsSet(false);
    this._reductionAnalogPointId = 0;
    set_reductionTotalIsSet(false);
    this._reductionTotal = 0.0;
    set_startedControllingIsSet(false);
    this._startedControlling = 0;
    set_lastControlSentIsSet(false);
    this._lastControlSent = 0;
    set_manualControlReceivedFlagIsSet(false);
    this._manualControlReceivedFlag = false;
    this._lmProgramControlWindows = null;
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoCategory() {
    return this._paoCategory;
  }

  public void set_paoCategory(@org.apache.thrift.annotation.Nullable java.lang.String _paoCategory) {
    this._paoCategory = _paoCategory;
  }

  public void unset_paoCategory() {
    this._paoCategory = null;
  }

  /** Returns true if field _paoCategory is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoCategory() {
    return this._paoCategory != null;
  }

  public void set_paoCategoryIsSet(boolean value) {
    if (!value) {
      this._paoCategory = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoClass() {
    return this._paoClass;
  }

  public void set_paoClass(@org.apache.thrift.annotation.Nullable java.lang.String _paoClass) {
    this._paoClass = _paoClass;
  }

  public void unset_paoClass() {
    this._paoClass = null;
  }

  /** Returns true if field _paoClass is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoClass() {
    return this._paoClass != null;
  }

  public void set_paoClassIsSet(boolean value) {
    if (!value) {
      this._paoClass = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoName() {
    return this._paoName;
  }

  public void set_paoName(@org.apache.thrift.annotation.Nullable java.lang.String _paoName) {
    this._paoName = _paoName;
  }

  public void unset_paoName() {
    this._paoName = null;
  }

  /** Returns true if field _paoName is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoName() {
    return this._paoName != null;
  }

  public void set_paoNameIsSet(boolean value) {
    if (!value) {
      this._paoName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoTypeString() {
    return this._paoTypeString;
  }

  public void set_paoTypeString(@org.apache.thrift.annotation.Nullable java.lang.String _paoTypeString) {
    this._paoTypeString = _paoTypeString;
  }

  public void unset_paoTypeString() {
    this._paoTypeString = null;
  }

  /** Returns true if field _paoTypeString is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoTypeString() {
    return this._paoTypeString != null;
  }

  public void set_paoTypeStringIsSet(boolean value) {
    if (!value) {
      this._paoTypeString = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoDescription() {
    return this._paoDescription;
  }

  public void set_paoDescription(@org.apache.thrift.annotation.Nullable java.lang.String _paoDescription) {
    this._paoDescription = _paoDescription;
  }

  public void unset_paoDescription() {
    this._paoDescription = null;
  }

  /** Returns true if field _paoDescription is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoDescription() {
    return this._paoDescription != null;
  }

  public void set_paoDescriptionIsSet(boolean value) {
    if (!value) {
      this._paoDescription = null;
    }
  }

  public boolean is_disableFlag() {
    return this._disableFlag;
  }

  public void set_disableFlag(boolean _disableFlag) {
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
  }

  public void unset_disableFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  /** Returns true if field _disableFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_disableFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  public void set_disableFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID, value);
  }

  public int get_startPriority() {
    return this._startPriority;
  }

  public void set_startPriority(int _startPriority) {
    this._startPriority = _startPriority;
    set_startPriorityIsSet(true);
  }

  public void unset_startPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STARTPRIORITY_ISSET_ID);
  }

  /** Returns true if field _startPriority is set (has been assigned a value) and false otherwise */
  public boolean isSet_startPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STARTPRIORITY_ISSET_ID);
  }

  public void set_startPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STARTPRIORITY_ISSET_ID, value);
  }

  public int get_stopPriority() {
    return this._stopPriority;
  }

  public void set_stopPriority(int _stopPriority) {
    this._stopPriority = _stopPriority;
    set_stopPriorityIsSet(true);
  }

  public void unset_stopPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STOPPRIORITY_ISSET_ID);
  }

  /** Returns true if field _stopPriority is set (has been assigned a value) and false otherwise */
  public boolean isSet_stopPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STOPPRIORITY_ISSET_ID);
  }

  public void set_stopPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STOPPRIORITY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_controlType() {
    return this._controlType;
  }

  public void set_controlType(@org.apache.thrift.annotation.Nullable java.lang.String _controlType) {
    this._controlType = _controlType;
  }

  public void unset_controlType() {
    this._controlType = null;
  }

  /** Returns true if field _controlType is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlType() {
    return this._controlType != null;
  }

  public void set_controlTypeIsSet(boolean value) {
    if (!value) {
      this._controlType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_availableWeekdays() {
    return this._availableWeekdays;
  }

  public void set_availableWeekdays(@org.apache.thrift.annotation.Nullable java.lang.String _availableWeekdays) {
    this._availableWeekdays = _availableWeekdays;
  }

  public void unset_availableWeekdays() {
    this._availableWeekdays = null;
  }

  /** Returns true if field _availableWeekdays is set (has been assigned a value) and false otherwise */
  public boolean isSet_availableWeekdays() {
    return this._availableWeekdays != null;
  }

  public void set_availableWeekdaysIsSet(boolean value) {
    if (!value) {
      this._availableWeekdays = null;
    }
  }

  public int get_maxHoursDaily() {
    return this._maxHoursDaily;
  }

  public void set_maxHoursDaily(int _maxHoursDaily) {
    this._maxHoursDaily = _maxHoursDaily;
    set_maxHoursDailyIsSet(true);
  }

  public void unset_maxHoursDaily() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MAXHOURSDAILY_ISSET_ID);
  }

  /** Returns true if field _maxHoursDaily is set (has been assigned a value) and false otherwise */
  public boolean isSet_maxHoursDaily() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MAXHOURSDAILY_ISSET_ID);
  }

  public void set_maxHoursDailyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MAXHOURSDAILY_ISSET_ID, value);
  }

  public int get_maxHoursMonthly() {
    return this._maxHoursMonthly;
  }

  public void set_maxHoursMonthly(int _maxHoursMonthly) {
    this._maxHoursMonthly = _maxHoursMonthly;
    set_maxHoursMonthlyIsSet(true);
  }

  public void unset_maxHoursMonthly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MAXHOURSMONTHLY_ISSET_ID);
  }

  /** Returns true if field _maxHoursMonthly is set (has been assigned a value) and false otherwise */
  public boolean isSet_maxHoursMonthly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MAXHOURSMONTHLY_ISSET_ID);
  }

  public void set_maxHoursMonthlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MAXHOURSMONTHLY_ISSET_ID, value);
  }

  public int get_maxHoursSeasonal() {
    return this._maxHoursSeasonal;
  }

  public void set_maxHoursSeasonal(int _maxHoursSeasonal) {
    this._maxHoursSeasonal = _maxHoursSeasonal;
    set_maxHoursSeasonalIsSet(true);
  }

  public void unset_maxHoursSeasonal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MAXHOURSSEASONAL_ISSET_ID);
  }

  /** Returns true if field _maxHoursSeasonal is set (has been assigned a value) and false otherwise */
  public boolean isSet_maxHoursSeasonal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MAXHOURSSEASONAL_ISSET_ID);
  }

  public void set_maxHoursSeasonalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MAXHOURSSEASONAL_ISSET_ID, value);
  }

  public int get_maxHoursAnnually() {
    return this._maxHoursAnnually;
  }

  public void set_maxHoursAnnually(int _maxHoursAnnually) {
    this._maxHoursAnnually = _maxHoursAnnually;
    set_maxHoursAnnuallyIsSet(true);
  }

  public void unset_maxHoursAnnually() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MAXHOURSANNUALLY_ISSET_ID);
  }

  /** Returns true if field _maxHoursAnnually is set (has been assigned a value) and false otherwise */
  public boolean isSet_maxHoursAnnually() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MAXHOURSANNUALLY_ISSET_ID);
  }

  public void set_maxHoursAnnuallyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MAXHOURSANNUALLY_ISSET_ID, value);
  }

  public int get_minActivateTime() {
    return this._minActivateTime;
  }

  public void set_minActivateTime(int _minActivateTime) {
    this._minActivateTime = _minActivateTime;
    set_minActivateTimeIsSet(true);
  }

  public void unset_minActivateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MINACTIVATETIME_ISSET_ID);
  }

  /** Returns true if field _minActivateTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_minActivateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MINACTIVATETIME_ISSET_ID);
  }

  public void set_minActivateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MINACTIVATETIME_ISSET_ID, value);
  }

  public int get_minRestartTime() {
    return this._minRestartTime;
  }

  public void set_minRestartTime(int _minRestartTime) {
    this._minRestartTime = _minRestartTime;
    set_minRestartTimeIsSet(true);
  }

  public void unset_minRestartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MINRESTARTTIME_ISSET_ID);
  }

  /** Returns true if field _minRestartTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_minRestartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MINRESTARTTIME_ISSET_ID);
  }

  public void set_minRestartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MINRESTARTTIME_ISSET_ID, value);
  }

  public int get_programStatusPointId() {
    return this._programStatusPointId;
  }

  public void set_programStatusPointId(int _programStatusPointId) {
    this._programStatusPointId = _programStatusPointId;
    set_programStatusPointIdIsSet(true);
  }

  public void unset_programStatusPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PROGRAMSTATUSPOINTID_ISSET_ID);
  }

  /** Returns true if field _programStatusPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_programStatusPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PROGRAMSTATUSPOINTID_ISSET_ID);
  }

  public void set_programStatusPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PROGRAMSTATUSPOINTID_ISSET_ID, value);
  }

  public int get_programState() {
    return this._programState;
  }

  public void set_programState(int _programState) {
    this._programState = _programState;
    set_programStateIsSet(true);
  }

  public void unset_programState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PROGRAMSTATE_ISSET_ID);
  }

  /** Returns true if field _programState is set (has been assigned a value) and false otherwise */
  public boolean isSet_programState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PROGRAMSTATE_ISSET_ID);
  }

  public void set_programStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PROGRAMSTATE_ISSET_ID, value);
  }

  public int get_reductionAnalogPointId() {
    return this._reductionAnalogPointId;
  }

  public void set_reductionAnalogPointId(int _reductionAnalogPointId) {
    this._reductionAnalogPointId = _reductionAnalogPointId;
    set_reductionAnalogPointIdIsSet(true);
  }

  public void unset_reductionAnalogPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___REDUCTIONANALOGPOINTID_ISSET_ID);
  }

  /** Returns true if field _reductionAnalogPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_reductionAnalogPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___REDUCTIONANALOGPOINTID_ISSET_ID);
  }

  public void set_reductionAnalogPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___REDUCTIONANALOGPOINTID_ISSET_ID, value);
  }

  public double get_reductionTotal() {
    return this._reductionTotal;
  }

  public void set_reductionTotal(double _reductionTotal) {
    this._reductionTotal = _reductionTotal;
    set_reductionTotalIsSet(true);
  }

  public void unset_reductionTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___REDUCTIONTOTAL_ISSET_ID);
  }

  /** Returns true if field _reductionTotal is set (has been assigned a value) and false otherwise */
  public boolean isSet_reductionTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___REDUCTIONTOTAL_ISSET_ID);
  }

  public void set_reductionTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___REDUCTIONTOTAL_ISSET_ID, value);
  }

  public long get_startedControlling() {
    return this._startedControlling;
  }

  public void set_startedControlling(long _startedControlling) {
    this._startedControlling = _startedControlling;
    set_startedControllingIsSet(true);
  }

  public void unset_startedControlling() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STARTEDCONTROLLING_ISSET_ID);
  }

  /** Returns true if field _startedControlling is set (has been assigned a value) and false otherwise */
  public boolean isSet_startedControlling() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STARTEDCONTROLLING_ISSET_ID);
  }

  public void set_startedControllingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STARTEDCONTROLLING_ISSET_ID, value);
  }

  public long get_lastControlSent() {
    return this._lastControlSent;
  }

  public void set_lastControlSent(long _lastControlSent) {
    this._lastControlSent = _lastControlSent;
    set_lastControlSentIsSet(true);
  }

  public void unset_lastControlSent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTCONTROLSENT_ISSET_ID);
  }

  /** Returns true if field _lastControlSent is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastControlSent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTCONTROLSENT_ISSET_ID);
  }

  public void set_lastControlSentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTCONTROLSENT_ISSET_ID, value);
  }

  public boolean is_manualControlReceivedFlag() {
    return this._manualControlReceivedFlag;
  }

  public void set_manualControlReceivedFlag(boolean _manualControlReceivedFlag) {
    this._manualControlReceivedFlag = _manualControlReceivedFlag;
    set_manualControlReceivedFlagIsSet(true);
  }

  public void unset_manualControlReceivedFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MANUALCONTROLRECEIVEDFLAG_ISSET_ID);
  }

  /** Returns true if field _manualControlReceivedFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_manualControlReceivedFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MANUALCONTROLRECEIVEDFLAG_ISSET_ID);
  }

  public void set_manualControlReceivedFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MANUALCONTROLRECEIVEDFLAG_ISSET_ID, value);
  }

  public int get_lmProgramControlWindowsSize() {
    return (this._lmProgramControlWindows == null) ? 0 : this._lmProgramControlWindows.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<LMProgramControlWindow> get_lmProgramControlWindowsIterator() {
    return (this._lmProgramControlWindows == null) ? null : this._lmProgramControlWindows.iterator();
  }

  public void addTo_lmProgramControlWindows(LMProgramControlWindow elem) {
    if (this._lmProgramControlWindows == null) {
      this._lmProgramControlWindows = new java.util.ArrayList<LMProgramControlWindow>();
    }
    this._lmProgramControlWindows.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<LMProgramControlWindow> get_lmProgramControlWindows() {
    return this._lmProgramControlWindows;
  }

  public void set_lmProgramControlWindows(@org.apache.thrift.annotation.Nullable java.util.List<LMProgramControlWindow> _lmProgramControlWindows) {
    this._lmProgramControlWindows = _lmProgramControlWindows;
  }

  public void unset_lmProgramControlWindows() {
    this._lmProgramControlWindows = null;
  }

  /** Returns true if field _lmProgramControlWindows is set (has been assigned a value) and false otherwise */
  public boolean isSet_lmProgramControlWindows() {
    return this._lmProgramControlWindows != null;
  }

  public void set_lmProgramControlWindowsIsSet(boolean value) {
    if (!value) {
      this._lmProgramControlWindows = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((java.lang.Integer)value);
      }
      break;

    case _PAO_CATEGORY:
      if (value == null) {
        unset_paoCategory();
      } else {
        set_paoCategory((java.lang.String)value);
      }
      break;

    case _PAO_CLASS:
      if (value == null) {
        unset_paoClass();
      } else {
        set_paoClass((java.lang.String)value);
      }
      break;

    case _PAO_NAME:
      if (value == null) {
        unset_paoName();
      } else {
        set_paoName((java.lang.String)value);
      }
      break;

    case _PAO_TYPE_STRING:
      if (value == null) {
        unset_paoTypeString();
      } else {
        set_paoTypeString((java.lang.String)value);
      }
      break;

    case _PAO_DESCRIPTION:
      if (value == null) {
        unset_paoDescription();
      } else {
        set_paoDescription((java.lang.String)value);
      }
      break;

    case _DISABLE_FLAG:
      if (value == null) {
        unset_disableFlag();
      } else {
        set_disableFlag((java.lang.Boolean)value);
      }
      break;

    case _START_PRIORITY:
      if (value == null) {
        unset_startPriority();
      } else {
        set_startPriority((java.lang.Integer)value);
      }
      break;

    case _STOP_PRIORITY:
      if (value == null) {
        unset_stopPriority();
      } else {
        set_stopPriority((java.lang.Integer)value);
      }
      break;

    case _CONTROL_TYPE:
      if (value == null) {
        unset_controlType();
      } else {
        set_controlType((java.lang.String)value);
      }
      break;

    case _AVAILABLE_WEEKDAYS:
      if (value == null) {
        unset_availableWeekdays();
      } else {
        set_availableWeekdays((java.lang.String)value);
      }
      break;

    case _MAX_HOURS_DAILY:
      if (value == null) {
        unset_maxHoursDaily();
      } else {
        set_maxHoursDaily((java.lang.Integer)value);
      }
      break;

    case _MAX_HOURS_MONTHLY:
      if (value == null) {
        unset_maxHoursMonthly();
      } else {
        set_maxHoursMonthly((java.lang.Integer)value);
      }
      break;

    case _MAX_HOURS_SEASONAL:
      if (value == null) {
        unset_maxHoursSeasonal();
      } else {
        set_maxHoursSeasonal((java.lang.Integer)value);
      }
      break;

    case _MAX_HOURS_ANNUALLY:
      if (value == null) {
        unset_maxHoursAnnually();
      } else {
        set_maxHoursAnnually((java.lang.Integer)value);
      }
      break;

    case _MIN_ACTIVATE_TIME:
      if (value == null) {
        unset_minActivateTime();
      } else {
        set_minActivateTime((java.lang.Integer)value);
      }
      break;

    case _MIN_RESTART_TIME:
      if (value == null) {
        unset_minRestartTime();
      } else {
        set_minRestartTime((java.lang.Integer)value);
      }
      break;

    case _PROGRAM_STATUS_POINT_ID:
      if (value == null) {
        unset_programStatusPointId();
      } else {
        set_programStatusPointId((java.lang.Integer)value);
      }
      break;

    case _PROGRAM_STATE:
      if (value == null) {
        unset_programState();
      } else {
        set_programState((java.lang.Integer)value);
      }
      break;

    case _REDUCTION_ANALOG_POINT_ID:
      if (value == null) {
        unset_reductionAnalogPointId();
      } else {
        set_reductionAnalogPointId((java.lang.Integer)value);
      }
      break;

    case _REDUCTION_TOTAL:
      if (value == null) {
        unset_reductionTotal();
      } else {
        set_reductionTotal((java.lang.Double)value);
      }
      break;

    case _STARTED_CONTROLLING:
      if (value == null) {
        unset_startedControlling();
      } else {
        set_startedControlling((java.lang.Long)value);
      }
      break;

    case _LAST_CONTROL_SENT:
      if (value == null) {
        unset_lastControlSent();
      } else {
        set_lastControlSent((java.lang.Long)value);
      }
      break;

    case _MANUAL_CONTROL_RECEIVED_FLAG:
      if (value == null) {
        unset_manualControlReceivedFlag();
      } else {
        set_manualControlReceivedFlag((java.lang.Boolean)value);
      }
      break;

    case _LM_PROGRAM_CONTROL_WINDOWS:
      if (value == null) {
        unset_lmProgramControlWindows();
      } else {
        set_lmProgramControlWindows((java.util.List<LMProgramControlWindow>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _PAO_ID:
      return get_paoId();

    case _PAO_CATEGORY:
      return get_paoCategory();

    case _PAO_CLASS:
      return get_paoClass();

    case _PAO_NAME:
      return get_paoName();

    case _PAO_TYPE_STRING:
      return get_paoTypeString();

    case _PAO_DESCRIPTION:
      return get_paoDescription();

    case _DISABLE_FLAG:
      return is_disableFlag();

    case _START_PRIORITY:
      return get_startPriority();

    case _STOP_PRIORITY:
      return get_stopPriority();

    case _CONTROL_TYPE:
      return get_controlType();

    case _AVAILABLE_WEEKDAYS:
      return get_availableWeekdays();

    case _MAX_HOURS_DAILY:
      return get_maxHoursDaily();

    case _MAX_HOURS_MONTHLY:
      return get_maxHoursMonthly();

    case _MAX_HOURS_SEASONAL:
      return get_maxHoursSeasonal();

    case _MAX_HOURS_ANNUALLY:
      return get_maxHoursAnnually();

    case _MIN_ACTIVATE_TIME:
      return get_minActivateTime();

    case _MIN_RESTART_TIME:
      return get_minRestartTime();

    case _PROGRAM_STATUS_POINT_ID:
      return get_programStatusPointId();

    case _PROGRAM_STATE:
      return get_programState();

    case _REDUCTION_ANALOG_POINT_ID:
      return get_reductionAnalogPointId();

    case _REDUCTION_TOTAL:
      return get_reductionTotal();

    case _STARTED_CONTROLLING:
      return get_startedControlling();

    case _LAST_CONTROL_SENT:
      return get_lastControlSent();

    case _MANUAL_CONTROL_RECEIVED_FLAG:
      return is_manualControlReceivedFlag();

    case _LM_PROGRAM_CONTROL_WINDOWS:
      return get_lmProgramControlWindows();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _PAO_ID:
      return isSet_paoId();
    case _PAO_CATEGORY:
      return isSet_paoCategory();
    case _PAO_CLASS:
      return isSet_paoClass();
    case _PAO_NAME:
      return isSet_paoName();
    case _PAO_TYPE_STRING:
      return isSet_paoTypeString();
    case _PAO_DESCRIPTION:
      return isSet_paoDescription();
    case _DISABLE_FLAG:
      return isSet_disableFlag();
    case _START_PRIORITY:
      return isSet_startPriority();
    case _STOP_PRIORITY:
      return isSet_stopPriority();
    case _CONTROL_TYPE:
      return isSet_controlType();
    case _AVAILABLE_WEEKDAYS:
      return isSet_availableWeekdays();
    case _MAX_HOURS_DAILY:
      return isSet_maxHoursDaily();
    case _MAX_HOURS_MONTHLY:
      return isSet_maxHoursMonthly();
    case _MAX_HOURS_SEASONAL:
      return isSet_maxHoursSeasonal();
    case _MAX_HOURS_ANNUALLY:
      return isSet_maxHoursAnnually();
    case _MIN_ACTIVATE_TIME:
      return isSet_minActivateTime();
    case _MIN_RESTART_TIME:
      return isSet_minRestartTime();
    case _PROGRAM_STATUS_POINT_ID:
      return isSet_programStatusPointId();
    case _PROGRAM_STATE:
      return isSet_programState();
    case _REDUCTION_ANALOG_POINT_ID:
      return isSet_reductionAnalogPointId();
    case _REDUCTION_TOTAL:
      return isSet_reductionTotal();
    case _STARTED_CONTROLLING:
      return isSet_startedControlling();
    case _LAST_CONTROL_SENT:
      return isSet_lastControlSent();
    case _MANUAL_CONTROL_RECEIVED_FLAG:
      return isSet_manualControlReceivedFlag();
    case _LM_PROGRAM_CONTROL_WINDOWS:
      return isSet_lmProgramControlWindows();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LMProgramBase)
      return this.equals((LMProgramBase)that);
    return false;
  }

  public boolean equals(LMProgramBase that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__paoCategory = true && this.isSet_paoCategory();
    boolean that_present__paoCategory = true && that.isSet_paoCategory();
    if (this_present__paoCategory || that_present__paoCategory) {
      if (!(this_present__paoCategory && that_present__paoCategory))
        return false;
      if (!this._paoCategory.equals(that._paoCategory))
        return false;
    }

    boolean this_present__paoClass = true && this.isSet_paoClass();
    boolean that_present__paoClass = true && that.isSet_paoClass();
    if (this_present__paoClass || that_present__paoClass) {
      if (!(this_present__paoClass && that_present__paoClass))
        return false;
      if (!this._paoClass.equals(that._paoClass))
        return false;
    }

    boolean this_present__paoName = true && this.isSet_paoName();
    boolean that_present__paoName = true && that.isSet_paoName();
    if (this_present__paoName || that_present__paoName) {
      if (!(this_present__paoName && that_present__paoName))
        return false;
      if (!this._paoName.equals(that._paoName))
        return false;
    }

    boolean this_present__paoTypeString = true && this.isSet_paoTypeString();
    boolean that_present__paoTypeString = true && that.isSet_paoTypeString();
    if (this_present__paoTypeString || that_present__paoTypeString) {
      if (!(this_present__paoTypeString && that_present__paoTypeString))
        return false;
      if (!this._paoTypeString.equals(that._paoTypeString))
        return false;
    }

    boolean this_present__paoDescription = true && this.isSet_paoDescription();
    boolean that_present__paoDescription = true && that.isSet_paoDescription();
    if (this_present__paoDescription || that_present__paoDescription) {
      if (!(this_present__paoDescription && that_present__paoDescription))
        return false;
      if (!this._paoDescription.equals(that._paoDescription))
        return false;
    }

    boolean this_present__disableFlag = true;
    boolean that_present__disableFlag = true;
    if (this_present__disableFlag || that_present__disableFlag) {
      if (!(this_present__disableFlag && that_present__disableFlag))
        return false;
      if (this._disableFlag != that._disableFlag)
        return false;
    }

    boolean this_present__startPriority = true;
    boolean that_present__startPriority = true;
    if (this_present__startPriority || that_present__startPriority) {
      if (!(this_present__startPriority && that_present__startPriority))
        return false;
      if (this._startPriority != that._startPriority)
        return false;
    }

    boolean this_present__stopPriority = true;
    boolean that_present__stopPriority = true;
    if (this_present__stopPriority || that_present__stopPriority) {
      if (!(this_present__stopPriority && that_present__stopPriority))
        return false;
      if (this._stopPriority != that._stopPriority)
        return false;
    }

    boolean this_present__controlType = true && this.isSet_controlType();
    boolean that_present__controlType = true && that.isSet_controlType();
    if (this_present__controlType || that_present__controlType) {
      if (!(this_present__controlType && that_present__controlType))
        return false;
      if (!this._controlType.equals(that._controlType))
        return false;
    }

    boolean this_present__availableWeekdays = true && this.isSet_availableWeekdays();
    boolean that_present__availableWeekdays = true && that.isSet_availableWeekdays();
    if (this_present__availableWeekdays || that_present__availableWeekdays) {
      if (!(this_present__availableWeekdays && that_present__availableWeekdays))
        return false;
      if (!this._availableWeekdays.equals(that._availableWeekdays))
        return false;
    }

    boolean this_present__maxHoursDaily = true;
    boolean that_present__maxHoursDaily = true;
    if (this_present__maxHoursDaily || that_present__maxHoursDaily) {
      if (!(this_present__maxHoursDaily && that_present__maxHoursDaily))
        return false;
      if (this._maxHoursDaily != that._maxHoursDaily)
        return false;
    }

    boolean this_present__maxHoursMonthly = true;
    boolean that_present__maxHoursMonthly = true;
    if (this_present__maxHoursMonthly || that_present__maxHoursMonthly) {
      if (!(this_present__maxHoursMonthly && that_present__maxHoursMonthly))
        return false;
      if (this._maxHoursMonthly != that._maxHoursMonthly)
        return false;
    }

    boolean this_present__maxHoursSeasonal = true;
    boolean that_present__maxHoursSeasonal = true;
    if (this_present__maxHoursSeasonal || that_present__maxHoursSeasonal) {
      if (!(this_present__maxHoursSeasonal && that_present__maxHoursSeasonal))
        return false;
      if (this._maxHoursSeasonal != that._maxHoursSeasonal)
        return false;
    }

    boolean this_present__maxHoursAnnually = true;
    boolean that_present__maxHoursAnnually = true;
    if (this_present__maxHoursAnnually || that_present__maxHoursAnnually) {
      if (!(this_present__maxHoursAnnually && that_present__maxHoursAnnually))
        return false;
      if (this._maxHoursAnnually != that._maxHoursAnnually)
        return false;
    }

    boolean this_present__minActivateTime = true;
    boolean that_present__minActivateTime = true;
    if (this_present__minActivateTime || that_present__minActivateTime) {
      if (!(this_present__minActivateTime && that_present__minActivateTime))
        return false;
      if (this._minActivateTime != that._minActivateTime)
        return false;
    }

    boolean this_present__minRestartTime = true;
    boolean that_present__minRestartTime = true;
    if (this_present__minRestartTime || that_present__minRestartTime) {
      if (!(this_present__minRestartTime && that_present__minRestartTime))
        return false;
      if (this._minRestartTime != that._minRestartTime)
        return false;
    }

    boolean this_present__programStatusPointId = true;
    boolean that_present__programStatusPointId = true;
    if (this_present__programStatusPointId || that_present__programStatusPointId) {
      if (!(this_present__programStatusPointId && that_present__programStatusPointId))
        return false;
      if (this._programStatusPointId != that._programStatusPointId)
        return false;
    }

    boolean this_present__programState = true;
    boolean that_present__programState = true;
    if (this_present__programState || that_present__programState) {
      if (!(this_present__programState && that_present__programState))
        return false;
      if (this._programState != that._programState)
        return false;
    }

    boolean this_present__reductionAnalogPointId = true;
    boolean that_present__reductionAnalogPointId = true;
    if (this_present__reductionAnalogPointId || that_present__reductionAnalogPointId) {
      if (!(this_present__reductionAnalogPointId && that_present__reductionAnalogPointId))
        return false;
      if (this._reductionAnalogPointId != that._reductionAnalogPointId)
        return false;
    }

    boolean this_present__reductionTotal = true;
    boolean that_present__reductionTotal = true;
    if (this_present__reductionTotal || that_present__reductionTotal) {
      if (!(this_present__reductionTotal && that_present__reductionTotal))
        return false;
      if (this._reductionTotal != that._reductionTotal)
        return false;
    }

    boolean this_present__startedControlling = true;
    boolean that_present__startedControlling = true;
    if (this_present__startedControlling || that_present__startedControlling) {
      if (!(this_present__startedControlling && that_present__startedControlling))
        return false;
      if (this._startedControlling != that._startedControlling)
        return false;
    }

    boolean this_present__lastControlSent = true;
    boolean that_present__lastControlSent = true;
    if (this_present__lastControlSent || that_present__lastControlSent) {
      if (!(this_present__lastControlSent && that_present__lastControlSent))
        return false;
      if (this._lastControlSent != that._lastControlSent)
        return false;
    }

    boolean this_present__manualControlReceivedFlag = true;
    boolean that_present__manualControlReceivedFlag = true;
    if (this_present__manualControlReceivedFlag || that_present__manualControlReceivedFlag) {
      if (!(this_present__manualControlReceivedFlag && that_present__manualControlReceivedFlag))
        return false;
      if (this._manualControlReceivedFlag != that._manualControlReceivedFlag)
        return false;
    }

    boolean this_present__lmProgramControlWindows = true && this.isSet_lmProgramControlWindows();
    boolean that_present__lmProgramControlWindows = true && that.isSet_lmProgramControlWindows();
    if (this_present__lmProgramControlWindows || that_present__lmProgramControlWindows) {
      if (!(this_present__lmProgramControlWindows && that_present__lmProgramControlWindows))
        return false;
      if (!this._lmProgramControlWindows.equals(that._lmProgramControlWindows))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + _paoId;

    hashCode = hashCode * 8191 + ((isSet_paoCategory()) ? 131071 : 524287);
    if (isSet_paoCategory())
      hashCode = hashCode * 8191 + _paoCategory.hashCode();

    hashCode = hashCode * 8191 + ((isSet_paoClass()) ? 131071 : 524287);
    if (isSet_paoClass())
      hashCode = hashCode * 8191 + _paoClass.hashCode();

    hashCode = hashCode * 8191 + ((isSet_paoName()) ? 131071 : 524287);
    if (isSet_paoName())
      hashCode = hashCode * 8191 + _paoName.hashCode();

    hashCode = hashCode * 8191 + ((isSet_paoTypeString()) ? 131071 : 524287);
    if (isSet_paoTypeString())
      hashCode = hashCode * 8191 + _paoTypeString.hashCode();

    hashCode = hashCode * 8191 + ((isSet_paoDescription()) ? 131071 : 524287);
    if (isSet_paoDescription())
      hashCode = hashCode * 8191 + _paoDescription.hashCode();

    hashCode = hashCode * 8191 + ((_disableFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + _startPriority;

    hashCode = hashCode * 8191 + _stopPriority;

    hashCode = hashCode * 8191 + ((isSet_controlType()) ? 131071 : 524287);
    if (isSet_controlType())
      hashCode = hashCode * 8191 + _controlType.hashCode();

    hashCode = hashCode * 8191 + ((isSet_availableWeekdays()) ? 131071 : 524287);
    if (isSet_availableWeekdays())
      hashCode = hashCode * 8191 + _availableWeekdays.hashCode();

    hashCode = hashCode * 8191 + _maxHoursDaily;

    hashCode = hashCode * 8191 + _maxHoursMonthly;

    hashCode = hashCode * 8191 + _maxHoursSeasonal;

    hashCode = hashCode * 8191 + _maxHoursAnnually;

    hashCode = hashCode * 8191 + _minActivateTime;

    hashCode = hashCode * 8191 + _minRestartTime;

    hashCode = hashCode * 8191 + _programStatusPointId;

    hashCode = hashCode * 8191 + _programState;

    hashCode = hashCode * 8191 + _reductionAnalogPointId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_reductionTotal);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_startedControlling);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastControlSent);

    hashCode = hashCode * 8191 + ((_manualControlReceivedFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSet_lmProgramControlWindows()) ? 131071 : 524287);
    if (isSet_lmProgramControlWindows())
      hashCode = hashCode * 8191 + _lmProgramControlWindows.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LMProgramBase other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_paoId()).compareTo(other.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, other._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoCategory()).compareTo(other.isSet_paoCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoCategory, other._paoCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoClass()).compareTo(other.isSet_paoClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoClass, other._paoClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoName()).compareTo(other.isSet_paoName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoName, other._paoName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoTypeString()).compareTo(other.isSet_paoTypeString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoTypeString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoTypeString, other._paoTypeString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoDescription()).compareTo(other.isSet_paoDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoDescription, other._paoDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_disableFlag()).compareTo(other.isSet_disableFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_disableFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._disableFlag, other._disableFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_startPriority()).compareTo(other.isSet_startPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_startPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._startPriority, other._startPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_stopPriority()).compareTo(other.isSet_stopPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_stopPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._stopPriority, other._stopPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlType()).compareTo(other.isSet_controlType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlType, other._controlType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_availableWeekdays()).compareTo(other.isSet_availableWeekdays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_availableWeekdays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._availableWeekdays, other._availableWeekdays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_maxHoursDaily()).compareTo(other.isSet_maxHoursDaily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_maxHoursDaily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._maxHoursDaily, other._maxHoursDaily);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_maxHoursMonthly()).compareTo(other.isSet_maxHoursMonthly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_maxHoursMonthly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._maxHoursMonthly, other._maxHoursMonthly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_maxHoursSeasonal()).compareTo(other.isSet_maxHoursSeasonal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_maxHoursSeasonal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._maxHoursSeasonal, other._maxHoursSeasonal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_maxHoursAnnually()).compareTo(other.isSet_maxHoursAnnually());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_maxHoursAnnually()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._maxHoursAnnually, other._maxHoursAnnually);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_minActivateTime()).compareTo(other.isSet_minActivateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_minActivateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._minActivateTime, other._minActivateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_minRestartTime()).compareTo(other.isSet_minRestartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_minRestartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._minRestartTime, other._minRestartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_programStatusPointId()).compareTo(other.isSet_programStatusPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_programStatusPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._programStatusPointId, other._programStatusPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_programState()).compareTo(other.isSet_programState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_programState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._programState, other._programState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_reductionAnalogPointId()).compareTo(other.isSet_reductionAnalogPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_reductionAnalogPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._reductionAnalogPointId, other._reductionAnalogPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_reductionTotal()).compareTo(other.isSet_reductionTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_reductionTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._reductionTotal, other._reductionTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_startedControlling()).compareTo(other.isSet_startedControlling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_startedControlling()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._startedControlling, other._startedControlling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lastControlSent()).compareTo(other.isSet_lastControlSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastControlSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastControlSent, other._lastControlSent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_manualControlReceivedFlag()).compareTo(other.isSet_manualControlReceivedFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_manualControlReceivedFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._manualControlReceivedFlag, other._manualControlReceivedFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lmProgramControlWindows()).compareTo(other.isSet_lmProgramControlWindows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lmProgramControlWindows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lmProgramControlWindows, other._lmProgramControlWindows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LMProgramBase(");
    boolean first = true;

    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoCategory:");
    if (this._paoCategory == null) {
      sb.append("null");
    } else {
      sb.append(this._paoCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoClass:");
    if (this._paoClass == null) {
      sb.append("null");
    } else {
      sb.append(this._paoClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoName:");
    if (this._paoName == null) {
      sb.append("null");
    } else {
      sb.append(this._paoName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoTypeString:");
    if (this._paoTypeString == null) {
      sb.append("null");
    } else {
      sb.append(this._paoTypeString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoDescription:");
    if (this._paoDescription == null) {
      sb.append("null");
    } else {
      sb.append(this._paoDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_disableFlag:");
    sb.append(this._disableFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_startPriority:");
    sb.append(this._startPriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_stopPriority:");
    sb.append(this._stopPriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlType:");
    if (this._controlType == null) {
      sb.append("null");
    } else {
      sb.append(this._controlType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_availableWeekdays:");
    if (this._availableWeekdays == null) {
      sb.append("null");
    } else {
      sb.append(this._availableWeekdays);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_maxHoursDaily:");
    sb.append(this._maxHoursDaily);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_maxHoursMonthly:");
    sb.append(this._maxHoursMonthly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_maxHoursSeasonal:");
    sb.append(this._maxHoursSeasonal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_maxHoursAnnually:");
    sb.append(this._maxHoursAnnually);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_minActivateTime:");
    sb.append(this._minActivateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_minRestartTime:");
    sb.append(this._minRestartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_programStatusPointId:");
    sb.append(this._programStatusPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_programState:");
    sb.append(this._programState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_reductionAnalogPointId:");
    sb.append(this._reductionAnalogPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_reductionTotal:");
    sb.append(this._reductionTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_startedControlling:");
    sb.append(this._startedControlling);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastControlSent:");
    sb.append(this._lastControlSent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_manualControlReceivedFlag:");
    sb.append(this._manualControlReceivedFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lmProgramControlWindows:");
    if (this._lmProgramControlWindows == null) {
      sb.append("null");
    } else {
      sb.append(this._lmProgramControlWindows);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_paoCategory()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoCategory' is unset! Struct:" + toString());
    }

    if (!isSet_paoClass()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoClass' is unset! Struct:" + toString());
    }

    if (!isSet_paoName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoName' is unset! Struct:" + toString());
    }

    if (!isSet_paoTypeString()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoTypeString' is unset! Struct:" + toString());
    }

    if (!isSet_paoDescription()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoDescription' is unset! Struct:" + toString());
    }

    if (!isSet_disableFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_disableFlag' is unset! Struct:" + toString());
    }

    if (!isSet_startPriority()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_startPriority' is unset! Struct:" + toString());
    }

    if (!isSet_stopPriority()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_stopPriority' is unset! Struct:" + toString());
    }

    if (!isSet_controlType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlType' is unset! Struct:" + toString());
    }

    if (!isSet_availableWeekdays()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_availableWeekdays' is unset! Struct:" + toString());
    }

    if (!isSet_maxHoursDaily()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_maxHoursDaily' is unset! Struct:" + toString());
    }

    if (!isSet_maxHoursMonthly()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_maxHoursMonthly' is unset! Struct:" + toString());
    }

    if (!isSet_maxHoursSeasonal()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_maxHoursSeasonal' is unset! Struct:" + toString());
    }

    if (!isSet_maxHoursAnnually()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_maxHoursAnnually' is unset! Struct:" + toString());
    }

    if (!isSet_minActivateTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_minActivateTime' is unset! Struct:" + toString());
    }

    if (!isSet_minRestartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_minRestartTime' is unset! Struct:" + toString());
    }

    if (!isSet_programStatusPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_programStatusPointId' is unset! Struct:" + toString());
    }

    if (!isSet_programState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_programState' is unset! Struct:" + toString());
    }

    if (!isSet_reductionAnalogPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_reductionAnalogPointId' is unset! Struct:" + toString());
    }

    if (!isSet_reductionTotal()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_reductionTotal' is unset! Struct:" + toString());
    }

    if (!isSet_startedControlling()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_startedControlling' is unset! Struct:" + toString());
    }

    if (!isSet_lastControlSent()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastControlSent' is unset! Struct:" + toString());
    }

    if (!isSet_manualControlReceivedFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_manualControlReceivedFlag' is unset! Struct:" + toString());
    }

    if (!isSet_lmProgramControlWindows()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lmProgramControlWindows' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMProgramBaseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMProgramBaseStandardScheme getScheme() {
      return new LMProgramBaseStandardScheme();
    }
  }

  private static class LMProgramBaseStandardScheme extends org.apache.thrift.scheme.StandardScheme<LMProgramBase> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMProgramBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _PAO_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoCategory = iprot.readString();
              struct.set_paoCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _PAO_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoClass = iprot.readString();
              struct.set_paoClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _PAO_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoName = iprot.readString();
              struct.set_paoNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _PAO_TYPE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoTypeString = iprot.readString();
              struct.set_paoTypeStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _PAO_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoDescription = iprot.readString();
              struct.set_paoDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _DISABLE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._disableFlag = iprot.readBool();
              struct.set_disableFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _START_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._startPriority = iprot.readI32();
              struct.set_startPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _STOP_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._stopPriority = iprot.readI32();
              struct.set_stopPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _CONTROL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._controlType = iprot.readString();
              struct.set_controlTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _AVAILABLE_WEEKDAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._availableWeekdays = iprot.readString();
              struct.set_availableWeekdaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _MAX_HOURS_DAILY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._maxHoursDaily = iprot.readI32();
              struct.set_maxHoursDailyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _MAX_HOURS_MONTHLY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._maxHoursMonthly = iprot.readI32();
              struct.set_maxHoursMonthlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // _MAX_HOURS_SEASONAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._maxHoursSeasonal = iprot.readI32();
              struct.set_maxHoursSeasonalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // _MAX_HOURS_ANNUALLY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._maxHoursAnnually = iprot.readI32();
              struct.set_maxHoursAnnuallyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _MIN_ACTIVATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._minActivateTime = iprot.readI32();
              struct.set_minActivateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // _MIN_RESTART_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._minRestartTime = iprot.readI32();
              struct.set_minRestartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // _PROGRAM_STATUS_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._programStatusPointId = iprot.readI32();
              struct.set_programStatusPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // _PROGRAM_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._programState = iprot.readI32();
              struct.set_programStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // _REDUCTION_ANALOG_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._reductionAnalogPointId = iprot.readI32();
              struct.set_reductionAnalogPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // _REDUCTION_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._reductionTotal = iprot.readDouble();
              struct.set_reductionTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // _STARTED_CONTROLLING
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._startedControlling = iprot.readI64();
              struct.set_startedControllingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // _LAST_CONTROL_SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastControlSent = iprot.readI64();
              struct.set_lastControlSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // _MANUAL_CONTROL_RECEIVED_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._manualControlReceivedFlag = iprot.readBool();
              struct.set_manualControlReceivedFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // _LM_PROGRAM_CONTROL_WINDOWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._lmProgramControlWindows = new java.util.ArrayList<LMProgramControlWindow>(_list0.size);
                @org.apache.thrift.annotation.Nullable LMProgramControlWindow _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new LMProgramControlWindow();
                  _elem1.read(iprot);
                  struct._lmProgramControlWindows.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.set_lmProgramControlWindowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMProgramBase struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      if (struct._paoCategory != null) {
        oprot.writeFieldBegin(_PAO_CATEGORY_FIELD_DESC);
        oprot.writeString(struct._paoCategory);
        oprot.writeFieldEnd();
      }
      if (struct._paoClass != null) {
        oprot.writeFieldBegin(_PAO_CLASS_FIELD_DESC);
        oprot.writeString(struct._paoClass);
        oprot.writeFieldEnd();
      }
      if (struct._paoName != null) {
        oprot.writeFieldBegin(_PAO_NAME_FIELD_DESC);
        oprot.writeString(struct._paoName);
        oprot.writeFieldEnd();
      }
      if (struct._paoTypeString != null) {
        oprot.writeFieldBegin(_PAO_TYPE_STRING_FIELD_DESC);
        oprot.writeString(struct._paoTypeString);
        oprot.writeFieldEnd();
      }
      if (struct._paoDescription != null) {
        oprot.writeFieldBegin(_PAO_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct._paoDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_DISABLE_FLAG_FIELD_DESC);
      oprot.writeBool(struct._disableFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_START_PRIORITY_FIELD_DESC);
      oprot.writeI32(struct._startPriority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STOP_PRIORITY_FIELD_DESC);
      oprot.writeI32(struct._stopPriority);
      oprot.writeFieldEnd();
      if (struct._controlType != null) {
        oprot.writeFieldBegin(_CONTROL_TYPE_FIELD_DESC);
        oprot.writeString(struct._controlType);
        oprot.writeFieldEnd();
      }
      if (struct._availableWeekdays != null) {
        oprot.writeFieldBegin(_AVAILABLE_WEEKDAYS_FIELD_DESC);
        oprot.writeString(struct._availableWeekdays);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_MAX_HOURS_DAILY_FIELD_DESC);
      oprot.writeI32(struct._maxHoursDaily);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MAX_HOURS_MONTHLY_FIELD_DESC);
      oprot.writeI32(struct._maxHoursMonthly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MAX_HOURS_SEASONAL_FIELD_DESC);
      oprot.writeI32(struct._maxHoursSeasonal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MAX_HOURS_ANNUALLY_FIELD_DESC);
      oprot.writeI32(struct._maxHoursAnnually);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MIN_ACTIVATE_TIME_FIELD_DESC);
      oprot.writeI32(struct._minActivateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MIN_RESTART_TIME_FIELD_DESC);
      oprot.writeI32(struct._minRestartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PROGRAM_STATUS_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._programStatusPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PROGRAM_STATE_FIELD_DESC);
      oprot.writeI32(struct._programState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_REDUCTION_ANALOG_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._reductionAnalogPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_REDUCTION_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct._reductionTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STARTED_CONTROLLING_FIELD_DESC);
      oprot.writeI64(struct._startedControlling);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_CONTROL_SENT_FIELD_DESC);
      oprot.writeI64(struct._lastControlSent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MANUAL_CONTROL_RECEIVED_FLAG_FIELD_DESC);
      oprot.writeBool(struct._manualControlReceivedFlag);
      oprot.writeFieldEnd();
      if (struct._lmProgramControlWindows != null) {
        oprot.writeFieldBegin(_LM_PROGRAM_CONTROL_WINDOWS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct._lmProgramControlWindows.size()));
          for (LMProgramControlWindow _iter3 : struct._lmProgramControlWindows)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMProgramBaseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMProgramBaseTupleScheme getScheme() {
      return new LMProgramBaseTupleScheme();
    }
  }

  private static class LMProgramBaseTupleScheme extends org.apache.thrift.scheme.TupleScheme<LMProgramBase> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMProgramBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct._paoId);
      oprot.writeString(struct._paoCategory);
      oprot.writeString(struct._paoClass);
      oprot.writeString(struct._paoName);
      oprot.writeString(struct._paoTypeString);
      oprot.writeString(struct._paoDescription);
      oprot.writeBool(struct._disableFlag);
      oprot.writeI32(struct._startPriority);
      oprot.writeI32(struct._stopPriority);
      oprot.writeString(struct._controlType);
      oprot.writeString(struct._availableWeekdays);
      oprot.writeI32(struct._maxHoursDaily);
      oprot.writeI32(struct._maxHoursMonthly);
      oprot.writeI32(struct._maxHoursSeasonal);
      oprot.writeI32(struct._maxHoursAnnually);
      oprot.writeI32(struct._minActivateTime);
      oprot.writeI32(struct._minRestartTime);
      oprot.writeI32(struct._programStatusPointId);
      oprot.writeI32(struct._programState);
      oprot.writeI32(struct._reductionAnalogPointId);
      oprot.writeDouble(struct._reductionTotal);
      oprot.writeI64(struct._startedControlling);
      oprot.writeI64(struct._lastControlSent);
      oprot.writeBool(struct._manualControlReceivedFlag);
      {
        oprot.writeI32(struct._lmProgramControlWindows.size());
        for (LMProgramControlWindow _iter4 : struct._lmProgramControlWindows)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMProgramBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._paoCategory = iprot.readString();
      struct.set_paoCategoryIsSet(true);
      struct._paoClass = iprot.readString();
      struct.set_paoClassIsSet(true);
      struct._paoName = iprot.readString();
      struct.set_paoNameIsSet(true);
      struct._paoTypeString = iprot.readString();
      struct.set_paoTypeStringIsSet(true);
      struct._paoDescription = iprot.readString();
      struct.set_paoDescriptionIsSet(true);
      struct._disableFlag = iprot.readBool();
      struct.set_disableFlagIsSet(true);
      struct._startPriority = iprot.readI32();
      struct.set_startPriorityIsSet(true);
      struct._stopPriority = iprot.readI32();
      struct.set_stopPriorityIsSet(true);
      struct._controlType = iprot.readString();
      struct.set_controlTypeIsSet(true);
      struct._availableWeekdays = iprot.readString();
      struct.set_availableWeekdaysIsSet(true);
      struct._maxHoursDaily = iprot.readI32();
      struct.set_maxHoursDailyIsSet(true);
      struct._maxHoursMonthly = iprot.readI32();
      struct.set_maxHoursMonthlyIsSet(true);
      struct._maxHoursSeasonal = iprot.readI32();
      struct.set_maxHoursSeasonalIsSet(true);
      struct._maxHoursAnnually = iprot.readI32();
      struct.set_maxHoursAnnuallyIsSet(true);
      struct._minActivateTime = iprot.readI32();
      struct.set_minActivateTimeIsSet(true);
      struct._minRestartTime = iprot.readI32();
      struct.set_minRestartTimeIsSet(true);
      struct._programStatusPointId = iprot.readI32();
      struct.set_programStatusPointIdIsSet(true);
      struct._programState = iprot.readI32();
      struct.set_programStateIsSet(true);
      struct._reductionAnalogPointId = iprot.readI32();
      struct.set_reductionAnalogPointIdIsSet(true);
      struct._reductionTotal = iprot.readDouble();
      struct.set_reductionTotalIsSet(true);
      struct._startedControlling = iprot.readI64();
      struct.set_startedControllingIsSet(true);
      struct._lastControlSent = iprot.readI64();
      struct.set_lastControlSentIsSet(true);
      struct._manualControlReceivedFlag = iprot.readBool();
      struct.set_manualControlReceivedFlagIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct._lmProgramControlWindows = new java.util.ArrayList<LMProgramControlWindow>(_list5.size);
        @org.apache.thrift.annotation.Nullable LMProgramControlWindow _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new LMProgramControlWindow();
          _elem6.read(iprot);
          struct._lmProgramControlWindows.add(_elem6);
        }
      }
      struct.set_lmProgramControlWindowsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


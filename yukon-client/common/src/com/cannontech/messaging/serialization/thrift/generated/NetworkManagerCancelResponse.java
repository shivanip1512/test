/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NetworkManagerCancelResponse implements org.apache.thrift.TBase<NetworkManagerCancelResponse, NetworkManagerCancelResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NetworkManagerCancelResponse");

  private static final org.apache.thrift.protocol.TField CLIENT_GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientGuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("messageIds", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NetworkManagerCancelResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NetworkManagerCancelResponseTupleSchemeFactory());
  }

  private String clientGuid; // required
  private long sessionId; // required
  private Map<Long,NetworkManagerMessageCancelStatus> messageIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_GUID((short)1, "clientGuid"),
    SESSION_ID((short)2, "sessionId"),
    MESSAGE_IDS((short)3, "messageIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_GUID
          return CLIENT_GUID;
        case 2: // SESSION_ID
          return SESSION_ID;
        case 3: // MESSAGE_IDS
          return MESSAGE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_GUID, new org.apache.thrift.meta_data.FieldMetaData("clientGuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGE_IDS, new org.apache.thrift.meta_data.FieldMetaData("messageIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "MessageStatusPerId")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NetworkManagerCancelResponse.class, metaDataMap);
  }

  public NetworkManagerCancelResponse() {
  }

  public NetworkManagerCancelResponse(
    String clientGuid,
    long sessionId,
    Map<Long,NetworkManagerMessageCancelStatus> messageIds)
  {
    this();
    this.clientGuid = clientGuid;
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.messageIds = messageIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NetworkManagerCancelResponse(NetworkManagerCancelResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientGuid()) {
      this.clientGuid = other.clientGuid;
    }
    this.sessionId = other.sessionId;
    if (other.isSetMessageIds()) {
      this.messageIds = other.messageIds;
    }
  }

  public NetworkManagerCancelResponse deepCopy() {
    return new NetworkManagerCancelResponse(this);
  }

  @Override
  public void clear() {
    this.clientGuid = null;
    setSessionIdIsSet(false);
    this.sessionId = 0;
    this.messageIds = null;
  }

  public String getClientGuid() {
    return this.clientGuid;
  }

  public void setClientGuid(String clientGuid) {
    this.clientGuid = clientGuid;
  }

  public void unsetClientGuid() {
    this.clientGuid = null;
  }

  /** Returns true if field clientGuid is set (has been assigned a value) and false otherwise */
  public boolean isSetClientGuid() {
    return this.clientGuid != null;
  }

  public void setClientGuidIsSet(boolean value) {
    if (!value) {
      this.clientGuid = null;
    }
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public void setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
  }

  public void unsetSessionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public int getMessageIdsSize() {
    return (this.messageIds == null) ? 0 : this.messageIds.size();
  }

  public void putToMessageIds(long key, NetworkManagerMessageCancelStatus val) {
    if (this.messageIds == null) {
      this.messageIds = new HashMap<Long,NetworkManagerMessageCancelStatus>();
    }
    this.messageIds.put(key, val);
  }

  public Map<Long,NetworkManagerMessageCancelStatus> getMessageIds() {
    return this.messageIds;
  }

  public void setMessageIds(Map<Long,NetworkManagerMessageCancelStatus> messageIds) {
    this.messageIds = messageIds;
  }

  public void unsetMessageIds() {
    this.messageIds = null;
  }

  /** Returns true if field messageIds is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageIds() {
    return this.messageIds != null;
  }

  public void setMessageIdsIsSet(boolean value) {
    if (!value) {
      this.messageIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_GUID:
      if (value == null) {
        unsetClientGuid();
      } else {
        setClientGuid((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((Long)value);
      }
      break;

    case MESSAGE_IDS:
      if (value == null) {
        unsetMessageIds();
      } else {
        setMessageIds((Map<Long,NetworkManagerMessageCancelStatus>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_GUID:
      return getClientGuid();

    case SESSION_ID:
      return Long.valueOf(getSessionId());

    case MESSAGE_IDS:
      return getMessageIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_GUID:
      return isSetClientGuid();
    case SESSION_ID:
      return isSetSessionId();
    case MESSAGE_IDS:
      return isSetMessageIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NetworkManagerCancelResponse)
      return this.equals((NetworkManagerCancelResponse)that);
    return false;
  }

  public boolean equals(NetworkManagerCancelResponse that) {
    if (that == null)
      return false;

    boolean this_present_clientGuid = true && this.isSetClientGuid();
    boolean that_present_clientGuid = true && that.isSetClientGuid();
    if (this_present_clientGuid || that_present_clientGuid) {
      if (!(this_present_clientGuid && that_present_clientGuid))
        return false;
      if (!this.clientGuid.equals(that.clientGuid))
        return false;
    }

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_messageIds = true && this.isSetMessageIds();
    boolean that_present_messageIds = true && that.isSetMessageIds();
    if (this_present_messageIds || that_present_messageIds) {
      if (!(this_present_messageIds && that_present_messageIds))
        return false;
      if (!this.messageIds.equals(that.messageIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(NetworkManagerCancelResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NetworkManagerCancelResponse typedOther = (NetworkManagerCancelResponse)other;

    lastComparison = Boolean.valueOf(isSetClientGuid()).compareTo(typedOther.isSetClientGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientGuid, typedOther.clientGuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageIds()).compareTo(typedOther.isSetMessageIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageIds, typedOther.messageIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NetworkManagerCancelResponse(");
    boolean first = true;

    sb.append("clientGuid:");
    if (this.clientGuid == null) {
      sb.append("null");
    } else {
      sb.append(this.clientGuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageIds:");
    if (this.messageIds == null) {
      sb.append("null");
    } else {
      sb.append(this.messageIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetClientGuid()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientGuid' is unset! Struct:" + toString());
    }

    if (!isSetSessionId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' is unset! Struct:" + toString());
    }

    if (!isSetMessageIds()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageIds' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NetworkManagerCancelResponseStandardSchemeFactory implements SchemeFactory {
    public NetworkManagerCancelResponseStandardScheme getScheme() {
      return new NetworkManagerCancelResponseStandardScheme();
    }
  }

  private static class NetworkManagerCancelResponseStandardScheme extends StandardScheme<NetworkManagerCancelResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NetworkManagerCancelResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientGuid = iprot.readString();
              struct.setClientGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.messageIds = new HashMap<Long,NetworkManagerMessageCancelStatus>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  long _key10; // required
                  NetworkManagerMessageCancelStatus _val11; // required
                  _key10 = iprot.readI64();
                  _val11 = NetworkManagerMessageCancelStatus.findByValue(iprot.readI32());
                  struct.messageIds.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setMessageIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NetworkManagerCancelResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientGuid != null) {
        oprot.writeFieldBegin(CLIENT_GUID_FIELD_DESC);
        oprot.writeString(struct.clientGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      if (struct.messageIds != null) {
        oprot.writeFieldBegin(MESSAGE_IDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, struct.messageIds.size()));
          for (Map.Entry<Long, NetworkManagerMessageCancelStatus> _iter12 : struct.messageIds.entrySet())
          {
            oprot.writeI64(_iter12.getKey());
            oprot.writeI32(_iter12.getValue().getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NetworkManagerCancelResponseTupleSchemeFactory implements SchemeFactory {
    public NetworkManagerCancelResponseTupleScheme getScheme() {
      return new NetworkManagerCancelResponseTupleScheme();
    }
  }

  private static class NetworkManagerCancelResponseTupleScheme extends TupleScheme<NetworkManagerCancelResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NetworkManagerCancelResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.clientGuid);
      oprot.writeI64(struct.sessionId);
      {
        oprot.writeI32(struct.messageIds.size());
        for (Map.Entry<Long, NetworkManagerMessageCancelStatus> _iter13 : struct.messageIds.entrySet())
        {
          oprot.writeI64(_iter13.getKey());
          oprot.writeI32(_iter13.getValue().getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NetworkManagerCancelResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clientGuid = iprot.readString();
      struct.setClientGuidIsSet(true);
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.messageIds = new HashMap<Long,NetworkManagerMessageCancelStatus>(2*_map14.size);
        for (int _i15 = 0; _i15 < _map14.size; ++_i15)
        {
          long _key16; // required
          NetworkManagerMessageCancelStatus _val17; // required
          _key16 = iprot.readI64();
          _val17 = NetworkManagerMessageCancelStatus.findByValue(iprot.readI32());
          struct.messageIds.put(_key16, _val17);
        }
      }
      struct.setMessageIdsIsSet(true);
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-08-11")
public class LMEatonCloudScheduledCycleCommand implements org.apache.thrift.TBase<LMEatonCloudScheduledCycleCommand, LMEatonCloudScheduledCycleCommand._Fields>, java.io.Serializable, Cloneable, Comparable<LMEatonCloudScheduledCycleCommand> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMEatonCloudScheduledCycleCommand");

  private static final org.apache.thrift.protocol.TField _GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _CONTROL_START_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlStartDateTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField _CONTROL_END_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlEndDateTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField _IS_RAMP_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("_isRampIn", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField _IS_RAMP_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("_isRampOut", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField _CYCLING_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("_cyclingOption", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField _DUTY_CYCLE_PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_dutyCyclePercentage", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField _DUTY_CYCLE_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("_dutyCyclePeriod", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField _CRITICALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_criticality", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField _V_RELAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_vRelayId", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LMEatonCloudScheduledCycleCommandStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LMEatonCloudScheduledCycleCommandTupleSchemeFactory();

  private int _groupId; // required
  private long _controlStartDateTime; // required
  private long _controlEndDateTime; // required
  private boolean _isRampIn; // required
  private boolean _isRampOut; // required
  private @org.apache.thrift.annotation.Nullable LMEatonCloudCycleType _cyclingOption; // required
  private int _dutyCyclePercentage; // required
  private int _dutyCyclePeriod; // required
  private int _criticality; // required
  private int _vRelayId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _GROUP_ID((short)1, "_groupId"),
    _CONTROL_START_DATE_TIME((short)2, "_controlStartDateTime"),
    _CONTROL_END_DATE_TIME((short)3, "_controlEndDateTime"),
    _IS_RAMP_IN((short)4, "_isRampIn"),
    _IS_RAMP_OUT((short)5, "_isRampOut"),
    /**
     * 
     * @see LMEatonCloudCycleType
     */
    _CYCLING_OPTION((short)6, "_cyclingOption"),
    _DUTY_CYCLE_PERCENTAGE((short)7, "_dutyCyclePercentage"),
    _DUTY_CYCLE_PERIOD((short)8, "_dutyCyclePeriod"),
    _CRITICALITY((short)9, "_criticality"),
    _V_RELAY_ID((short)10, "_vRelayId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _GROUP_ID
          return _GROUP_ID;
        case 2: // _CONTROL_START_DATE_TIME
          return _CONTROL_START_DATE_TIME;
        case 3: // _CONTROL_END_DATE_TIME
          return _CONTROL_END_DATE_TIME;
        case 4: // _IS_RAMP_IN
          return _IS_RAMP_IN;
        case 5: // _IS_RAMP_OUT
          return _IS_RAMP_OUT;
        case 6: // _CYCLING_OPTION
          return _CYCLING_OPTION;
        case 7: // _DUTY_CYCLE_PERCENTAGE
          return _DUTY_CYCLE_PERCENTAGE;
        case 8: // _DUTY_CYCLE_PERIOD
          return _DUTY_CYCLE_PERIOD;
        case 9: // _CRITICALITY
          return _CRITICALITY;
        case 10: // _V_RELAY_ID
          return _V_RELAY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___GROUPID_ISSET_ID = 0;
  private static final int ___CONTROLSTARTDATETIME_ISSET_ID = 1;
  private static final int ___CONTROLENDDATETIME_ISSET_ID = 2;
  private static final int ___ISRAMPIN_ISSET_ID = 3;
  private static final int ___ISRAMPOUT_ISSET_ID = 4;
  private static final int ___DUTYCYCLEPERCENTAGE_ISSET_ID = 5;
  private static final int ___DUTYCYCLEPERIOD_ISSET_ID = 6;
  private static final int ___CRITICALITY_ISSET_ID = 7;
  private static final int ___VRELAYID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("_groupId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONTROL_START_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_controlStartDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._CONTROL_END_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_controlEndDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._IS_RAMP_IN, new org.apache.thrift.meta_data.FieldMetaData("_isRampIn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._IS_RAMP_OUT, new org.apache.thrift.meta_data.FieldMetaData("_isRampOut", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._CYCLING_OPTION, new org.apache.thrift.meta_data.FieldMetaData("_cyclingOption", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LMEatonCloudCycleType.class)));
    tmpMap.put(_Fields._DUTY_CYCLE_PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("_dutyCyclePercentage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._DUTY_CYCLE_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("_dutyCyclePeriod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CRITICALITY, new org.apache.thrift.meta_data.FieldMetaData("_criticality", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._V_RELAY_ID, new org.apache.thrift.meta_data.FieldMetaData("_vRelayId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMEatonCloudScheduledCycleCommand.class, metaDataMap);
  }

  public LMEatonCloudScheduledCycleCommand() {
  }

  public LMEatonCloudScheduledCycleCommand(
    int _groupId,
    long _controlStartDateTime,
    long _controlEndDateTime,
    boolean _isRampIn,
    boolean _isRampOut,
    LMEatonCloudCycleType _cyclingOption,
    int _dutyCyclePercentage,
    int _dutyCyclePeriod,
    int _criticality,
    int _vRelayId)
  {
    this();
    this._groupId = _groupId;
    set_groupIdIsSet(true);
    this._controlStartDateTime = _controlStartDateTime;
    set_controlStartDateTimeIsSet(true);
    this._controlEndDateTime = _controlEndDateTime;
    set_controlEndDateTimeIsSet(true);
    this._isRampIn = _isRampIn;
    set_isRampInIsSet(true);
    this._isRampOut = _isRampOut;
    set_isRampOutIsSet(true);
    this._cyclingOption = _cyclingOption;
    this._dutyCyclePercentage = _dutyCyclePercentage;
    set_dutyCyclePercentageIsSet(true);
    this._dutyCyclePeriod = _dutyCyclePeriod;
    set_dutyCyclePeriodIsSet(true);
    this._criticality = _criticality;
    set_criticalityIsSet(true);
    this._vRelayId = _vRelayId;
    set_vRelayIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMEatonCloudScheduledCycleCommand(LMEatonCloudScheduledCycleCommand other) {
    __isset_bitfield = other.__isset_bitfield;
    this._groupId = other._groupId;
    this._controlStartDateTime = other._controlStartDateTime;
    this._controlEndDateTime = other._controlEndDateTime;
    this._isRampIn = other._isRampIn;
    this._isRampOut = other._isRampOut;
    if (other.isSet_cyclingOption()) {
      this._cyclingOption = other._cyclingOption;
    }
    this._dutyCyclePercentage = other._dutyCyclePercentage;
    this._dutyCyclePeriod = other._dutyCyclePeriod;
    this._criticality = other._criticality;
    this._vRelayId = other._vRelayId;
  }

  public LMEatonCloudScheduledCycleCommand deepCopy() {
    return new LMEatonCloudScheduledCycleCommand(this);
  }

  @Override
  public void clear() {
    set_groupIdIsSet(false);
    this._groupId = 0;
    set_controlStartDateTimeIsSet(false);
    this._controlStartDateTime = 0;
    set_controlEndDateTimeIsSet(false);
    this._controlEndDateTime = 0;
    set_isRampInIsSet(false);
    this._isRampIn = false;
    set_isRampOutIsSet(false);
    this._isRampOut = false;
    this._cyclingOption = null;
    set_dutyCyclePercentageIsSet(false);
    this._dutyCyclePercentage = 0;
    set_dutyCyclePeriodIsSet(false);
    this._dutyCyclePeriod = 0;
    set_criticalityIsSet(false);
    this._criticality = 0;
    set_vRelayIdIsSet(false);
    this._vRelayId = 0;
  }

  public int get_groupId() {
    return this._groupId;
  }

  public void set_groupId(int _groupId) {
    this._groupId = _groupId;
    set_groupIdIsSet(true);
  }

  public void unset_groupId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___GROUPID_ISSET_ID);
  }

  /** Returns true if field _groupId is set (has been assigned a value) and false otherwise */
  public boolean isSet_groupId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___GROUPID_ISSET_ID);
  }

  public void set_groupIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___GROUPID_ISSET_ID, value);
  }

  public long get_controlStartDateTime() {
    return this._controlStartDateTime;
  }

  public void set_controlStartDateTime(long _controlStartDateTime) {
    this._controlStartDateTime = _controlStartDateTime;
    set_controlStartDateTimeIsSet(true);
  }

  public void unset_controlStartDateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLSTARTDATETIME_ISSET_ID);
  }

  /** Returns true if field _controlStartDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlStartDateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLSTARTDATETIME_ISSET_ID);
  }

  public void set_controlStartDateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLSTARTDATETIME_ISSET_ID, value);
  }

  public long get_controlEndDateTime() {
    return this._controlEndDateTime;
  }

  public void set_controlEndDateTime(long _controlEndDateTime) {
    this._controlEndDateTime = _controlEndDateTime;
    set_controlEndDateTimeIsSet(true);
  }

  public void unset_controlEndDateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLENDDATETIME_ISSET_ID);
  }

  /** Returns true if field _controlEndDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlEndDateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLENDDATETIME_ISSET_ID);
  }

  public void set_controlEndDateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLENDDATETIME_ISSET_ID, value);
  }

  public boolean is_isRampIn() {
    return this._isRampIn;
  }

  public void set_isRampIn(boolean _isRampIn) {
    this._isRampIn = _isRampIn;
    set_isRampInIsSet(true);
  }

  public void unset_isRampIn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ISRAMPIN_ISSET_ID);
  }

  /** Returns true if field _isRampIn is set (has been assigned a value) and false otherwise */
  public boolean isSet_isRampIn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ISRAMPIN_ISSET_ID);
  }

  public void set_isRampInIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ISRAMPIN_ISSET_ID, value);
  }

  public boolean is_isRampOut() {
    return this._isRampOut;
  }

  public void set_isRampOut(boolean _isRampOut) {
    this._isRampOut = _isRampOut;
    set_isRampOutIsSet(true);
  }

  public void unset_isRampOut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ISRAMPOUT_ISSET_ID);
  }

  /** Returns true if field _isRampOut is set (has been assigned a value) and false otherwise */
  public boolean isSet_isRampOut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ISRAMPOUT_ISSET_ID);
  }

  public void set_isRampOutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ISRAMPOUT_ISSET_ID, value);
  }

  /**
   * 
   * @see LMEatonCloudCycleType
   */
  @org.apache.thrift.annotation.Nullable
  public LMEatonCloudCycleType get_cyclingOption() {
    return this._cyclingOption;
  }

  /**
   * 
   * @see LMEatonCloudCycleType
   */
  public void set_cyclingOption(@org.apache.thrift.annotation.Nullable LMEatonCloudCycleType _cyclingOption) {
    this._cyclingOption = _cyclingOption;
  }

  public void unset_cyclingOption() {
    this._cyclingOption = null;
  }

  /** Returns true if field _cyclingOption is set (has been assigned a value) and false otherwise */
  public boolean isSet_cyclingOption() {
    return this._cyclingOption != null;
  }

  public void set_cyclingOptionIsSet(boolean value) {
    if (!value) {
      this._cyclingOption = null;
    }
  }

  public int get_dutyCyclePercentage() {
    return this._dutyCyclePercentage;
  }

  public void set_dutyCyclePercentage(int _dutyCyclePercentage) {
    this._dutyCyclePercentage = _dutyCyclePercentage;
    set_dutyCyclePercentageIsSet(true);
  }

  public void unset_dutyCyclePercentage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DUTYCYCLEPERCENTAGE_ISSET_ID);
  }

  /** Returns true if field _dutyCyclePercentage is set (has been assigned a value) and false otherwise */
  public boolean isSet_dutyCyclePercentage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DUTYCYCLEPERCENTAGE_ISSET_ID);
  }

  public void set_dutyCyclePercentageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DUTYCYCLEPERCENTAGE_ISSET_ID, value);
  }

  public int get_dutyCyclePeriod() {
    return this._dutyCyclePeriod;
  }

  public void set_dutyCyclePeriod(int _dutyCyclePeriod) {
    this._dutyCyclePeriod = _dutyCyclePeriod;
    set_dutyCyclePeriodIsSet(true);
  }

  public void unset_dutyCyclePeriod() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DUTYCYCLEPERIOD_ISSET_ID);
  }

  /** Returns true if field _dutyCyclePeriod is set (has been assigned a value) and false otherwise */
  public boolean isSet_dutyCyclePeriod() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DUTYCYCLEPERIOD_ISSET_ID);
  }

  public void set_dutyCyclePeriodIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DUTYCYCLEPERIOD_ISSET_ID, value);
  }

  public int get_criticality() {
    return this._criticality;
  }

  public void set_criticality(int _criticality) {
    this._criticality = _criticality;
    set_criticalityIsSet(true);
  }

  public void unset_criticality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CRITICALITY_ISSET_ID);
  }

  /** Returns true if field _criticality is set (has been assigned a value) and false otherwise */
  public boolean isSet_criticality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CRITICALITY_ISSET_ID);
  }

  public void set_criticalityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CRITICALITY_ISSET_ID, value);
  }

  public int get_vRelayId() {
    return this._vRelayId;
  }

  public void set_vRelayId(int _vRelayId) {
    this._vRelayId = _vRelayId;
    set_vRelayIdIsSet(true);
  }

  public void unset_vRelayId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___VRELAYID_ISSET_ID);
  }

  /** Returns true if field _vRelayId is set (has been assigned a value) and false otherwise */
  public boolean isSet_vRelayId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___VRELAYID_ISSET_ID);
  }

  public void set_vRelayIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___VRELAYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _GROUP_ID:
      if (value == null) {
        unset_groupId();
      } else {
        set_groupId((java.lang.Integer)value);
      }
      break;

    case _CONTROL_START_DATE_TIME:
      if (value == null) {
        unset_controlStartDateTime();
      } else {
        set_controlStartDateTime((java.lang.Long)value);
      }
      break;

    case _CONTROL_END_DATE_TIME:
      if (value == null) {
        unset_controlEndDateTime();
      } else {
        set_controlEndDateTime((java.lang.Long)value);
      }
      break;

    case _IS_RAMP_IN:
      if (value == null) {
        unset_isRampIn();
      } else {
        set_isRampIn((java.lang.Boolean)value);
      }
      break;

    case _IS_RAMP_OUT:
      if (value == null) {
        unset_isRampOut();
      } else {
        set_isRampOut((java.lang.Boolean)value);
      }
      break;

    case _CYCLING_OPTION:
      if (value == null) {
        unset_cyclingOption();
      } else {
        set_cyclingOption((LMEatonCloudCycleType)value);
      }
      break;

    case _DUTY_CYCLE_PERCENTAGE:
      if (value == null) {
        unset_dutyCyclePercentage();
      } else {
        set_dutyCyclePercentage((java.lang.Integer)value);
      }
      break;

    case _DUTY_CYCLE_PERIOD:
      if (value == null) {
        unset_dutyCyclePeriod();
      } else {
        set_dutyCyclePeriod((java.lang.Integer)value);
      }
      break;

    case _CRITICALITY:
      if (value == null) {
        unset_criticality();
      } else {
        set_criticality((java.lang.Integer)value);
      }
      break;

    case _V_RELAY_ID:
      if (value == null) {
        unset_vRelayId();
      } else {
        set_vRelayId((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _GROUP_ID:
      return get_groupId();

    case _CONTROL_START_DATE_TIME:
      return get_controlStartDateTime();

    case _CONTROL_END_DATE_TIME:
      return get_controlEndDateTime();

    case _IS_RAMP_IN:
      return is_isRampIn();

    case _IS_RAMP_OUT:
      return is_isRampOut();

    case _CYCLING_OPTION:
      return get_cyclingOption();

    case _DUTY_CYCLE_PERCENTAGE:
      return get_dutyCyclePercentage();

    case _DUTY_CYCLE_PERIOD:
      return get_dutyCyclePeriod();

    case _CRITICALITY:
      return get_criticality();

    case _V_RELAY_ID:
      return get_vRelayId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _GROUP_ID:
      return isSet_groupId();
    case _CONTROL_START_DATE_TIME:
      return isSet_controlStartDateTime();
    case _CONTROL_END_DATE_TIME:
      return isSet_controlEndDateTime();
    case _IS_RAMP_IN:
      return isSet_isRampIn();
    case _IS_RAMP_OUT:
      return isSet_isRampOut();
    case _CYCLING_OPTION:
      return isSet_cyclingOption();
    case _DUTY_CYCLE_PERCENTAGE:
      return isSet_dutyCyclePercentage();
    case _DUTY_CYCLE_PERIOD:
      return isSet_dutyCyclePeriod();
    case _CRITICALITY:
      return isSet_criticality();
    case _V_RELAY_ID:
      return isSet_vRelayId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LMEatonCloudScheduledCycleCommand)
      return this.equals((LMEatonCloudScheduledCycleCommand)that);
    return false;
  }

  public boolean equals(LMEatonCloudScheduledCycleCommand that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__groupId = true;
    boolean that_present__groupId = true;
    if (this_present__groupId || that_present__groupId) {
      if (!(this_present__groupId && that_present__groupId))
        return false;
      if (this._groupId != that._groupId)
        return false;
    }

    boolean this_present__controlStartDateTime = true;
    boolean that_present__controlStartDateTime = true;
    if (this_present__controlStartDateTime || that_present__controlStartDateTime) {
      if (!(this_present__controlStartDateTime && that_present__controlStartDateTime))
        return false;
      if (this._controlStartDateTime != that._controlStartDateTime)
        return false;
    }

    boolean this_present__controlEndDateTime = true;
    boolean that_present__controlEndDateTime = true;
    if (this_present__controlEndDateTime || that_present__controlEndDateTime) {
      if (!(this_present__controlEndDateTime && that_present__controlEndDateTime))
        return false;
      if (this._controlEndDateTime != that._controlEndDateTime)
        return false;
    }

    boolean this_present__isRampIn = true;
    boolean that_present__isRampIn = true;
    if (this_present__isRampIn || that_present__isRampIn) {
      if (!(this_present__isRampIn && that_present__isRampIn))
        return false;
      if (this._isRampIn != that._isRampIn)
        return false;
    }

    boolean this_present__isRampOut = true;
    boolean that_present__isRampOut = true;
    if (this_present__isRampOut || that_present__isRampOut) {
      if (!(this_present__isRampOut && that_present__isRampOut))
        return false;
      if (this._isRampOut != that._isRampOut)
        return false;
    }

    boolean this_present__cyclingOption = true && this.isSet_cyclingOption();
    boolean that_present__cyclingOption = true && that.isSet_cyclingOption();
    if (this_present__cyclingOption || that_present__cyclingOption) {
      if (!(this_present__cyclingOption && that_present__cyclingOption))
        return false;
      if (!this._cyclingOption.equals(that._cyclingOption))
        return false;
    }

    boolean this_present__dutyCyclePercentage = true;
    boolean that_present__dutyCyclePercentage = true;
    if (this_present__dutyCyclePercentage || that_present__dutyCyclePercentage) {
      if (!(this_present__dutyCyclePercentage && that_present__dutyCyclePercentage))
        return false;
      if (this._dutyCyclePercentage != that._dutyCyclePercentage)
        return false;
    }

    boolean this_present__dutyCyclePeriod = true;
    boolean that_present__dutyCyclePeriod = true;
    if (this_present__dutyCyclePeriod || that_present__dutyCyclePeriod) {
      if (!(this_present__dutyCyclePeriod && that_present__dutyCyclePeriod))
        return false;
      if (this._dutyCyclePeriod != that._dutyCyclePeriod)
        return false;
    }

    boolean this_present__criticality = true;
    boolean that_present__criticality = true;
    if (this_present__criticality || that_present__criticality) {
      if (!(this_present__criticality && that_present__criticality))
        return false;
      if (this._criticality != that._criticality)
        return false;
    }

    boolean this_present__vRelayId = true;
    boolean that_present__vRelayId = true;
    if (this_present__vRelayId || that_present__vRelayId) {
      if (!(this_present__vRelayId && that_present__vRelayId))
        return false;
      if (this._vRelayId != that._vRelayId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + _groupId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_controlStartDateTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_controlEndDateTime);

    hashCode = hashCode * 8191 + ((_isRampIn) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((_isRampOut) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSet_cyclingOption()) ? 131071 : 524287);
    if (isSet_cyclingOption())
      hashCode = hashCode * 8191 + _cyclingOption.getValue();

    hashCode = hashCode * 8191 + _dutyCyclePercentage;

    hashCode = hashCode * 8191 + _dutyCyclePeriod;

    hashCode = hashCode * 8191 + _criticality;

    hashCode = hashCode * 8191 + _vRelayId;

    return hashCode;
  }

  @Override
  public int compareTo(LMEatonCloudScheduledCycleCommand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_groupId()).compareTo(other.isSet_groupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_groupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupId, other._groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlStartDateTime()).compareTo(other.isSet_controlStartDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlStartDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlStartDateTime, other._controlStartDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlEndDateTime()).compareTo(other.isSet_controlEndDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlEndDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlEndDateTime, other._controlEndDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_isRampIn()).compareTo(other.isSet_isRampIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_isRampIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._isRampIn, other._isRampIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_isRampOut()).compareTo(other.isSet_isRampOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_isRampOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._isRampOut, other._isRampOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_cyclingOption()).compareTo(other.isSet_cyclingOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_cyclingOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._cyclingOption, other._cyclingOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_dutyCyclePercentage()).compareTo(other.isSet_dutyCyclePercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_dutyCyclePercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._dutyCyclePercentage, other._dutyCyclePercentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_dutyCyclePeriod()).compareTo(other.isSet_dutyCyclePeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_dutyCyclePeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._dutyCyclePeriod, other._dutyCyclePeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_criticality()).compareTo(other.isSet_criticality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_criticality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._criticality, other._criticality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_vRelayId()).compareTo(other.isSet_vRelayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_vRelayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._vRelayId, other._vRelayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LMEatonCloudScheduledCycleCommand(");
    boolean first = true;

    sb.append("_groupId:");
    sb.append(this._groupId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlStartDateTime:");
    sb.append(this._controlStartDateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlEndDateTime:");
    sb.append(this._controlEndDateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_isRampIn:");
    sb.append(this._isRampIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_isRampOut:");
    sb.append(this._isRampOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_cyclingOption:");
    if (this._cyclingOption == null) {
      sb.append("null");
    } else {
      sb.append(this._cyclingOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_dutyCyclePercentage:");
    sb.append(this._dutyCyclePercentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_dutyCyclePeriod:");
    sb.append(this._dutyCyclePeriod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_criticality:");
    sb.append(this._criticality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_vRelayId:");
    sb.append(this._vRelayId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_groupId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_groupId' is unset! Struct:" + toString());
    }

    if (!isSet_controlStartDateTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlStartDateTime' is unset! Struct:" + toString());
    }

    if (!isSet_controlEndDateTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlEndDateTime' is unset! Struct:" + toString());
    }

    if (!isSet_isRampIn()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_isRampIn' is unset! Struct:" + toString());
    }

    if (!isSet_isRampOut()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_isRampOut' is unset! Struct:" + toString());
    }

    if (!isSet_cyclingOption()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_cyclingOption' is unset! Struct:" + toString());
    }

    if (!isSet_dutyCyclePercentage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_dutyCyclePercentage' is unset! Struct:" + toString());
    }

    if (!isSet_dutyCyclePeriod()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_dutyCyclePeriod' is unset! Struct:" + toString());
    }

    if (!isSet_criticality()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_criticality' is unset! Struct:" + toString());
    }

    if (!isSet_vRelayId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_vRelayId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMEatonCloudScheduledCycleCommandStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMEatonCloudScheduledCycleCommandStandardScheme getScheme() {
      return new LMEatonCloudScheduledCycleCommandStandardScheme();
    }
  }

  private static class LMEatonCloudScheduledCycleCommandStandardScheme extends org.apache.thrift.scheme.StandardScheme<LMEatonCloudScheduledCycleCommand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMEatonCloudScheduledCycleCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._groupId = iprot.readI32();
              struct.set_groupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _CONTROL_START_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._controlStartDateTime = iprot.readI64();
              struct.set_controlStartDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _CONTROL_END_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._controlEndDateTime = iprot.readI64();
              struct.set_controlEndDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _IS_RAMP_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._isRampIn = iprot.readBool();
              struct.set_isRampInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _IS_RAMP_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._isRampOut = iprot.readBool();
              struct.set_isRampOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _CYCLING_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._cyclingOption = com.cannontech.messaging.serialization.thrift.generated.LMEatonCloudCycleType.findByValue(iprot.readI32());
              struct.set_cyclingOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _DUTY_CYCLE_PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._dutyCyclePercentage = iprot.readI32();
              struct.set_dutyCyclePercentageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _DUTY_CYCLE_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._dutyCyclePeriod = iprot.readI32();
              struct.set_dutyCyclePeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _CRITICALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._criticality = iprot.readI32();
              struct.set_criticalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _V_RELAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._vRelayId = iprot.readI32();
              struct.set_vRelayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMEatonCloudScheduledCycleCommand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct._groupId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_START_DATE_TIME_FIELD_DESC);
      oprot.writeI64(struct._controlStartDateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_END_DATE_TIME_FIELD_DESC);
      oprot.writeI64(struct._controlEndDateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_IS_RAMP_IN_FIELD_DESC);
      oprot.writeBool(struct._isRampIn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_IS_RAMP_OUT_FIELD_DESC);
      oprot.writeBool(struct._isRampOut);
      oprot.writeFieldEnd();
      if (struct._cyclingOption != null) {
        oprot.writeFieldBegin(_CYCLING_OPTION_FIELD_DESC);
        oprot.writeI32(struct._cyclingOption.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_DUTY_CYCLE_PERCENTAGE_FIELD_DESC);
      oprot.writeI32(struct._dutyCyclePercentage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DUTY_CYCLE_PERIOD_FIELD_DESC);
      oprot.writeI32(struct._dutyCyclePeriod);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CRITICALITY_FIELD_DESC);
      oprot.writeI32(struct._criticality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_V_RELAY_ID_FIELD_DESC);
      oprot.writeI32(struct._vRelayId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMEatonCloudScheduledCycleCommandTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMEatonCloudScheduledCycleCommandTupleScheme getScheme() {
      return new LMEatonCloudScheduledCycleCommandTupleScheme();
    }
  }

  private static class LMEatonCloudScheduledCycleCommandTupleScheme extends org.apache.thrift.scheme.TupleScheme<LMEatonCloudScheduledCycleCommand> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMEatonCloudScheduledCycleCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct._groupId);
      oprot.writeI64(struct._controlStartDateTime);
      oprot.writeI64(struct._controlEndDateTime);
      oprot.writeBool(struct._isRampIn);
      oprot.writeBool(struct._isRampOut);
      oprot.writeI32(struct._cyclingOption.getValue());
      oprot.writeI32(struct._dutyCyclePercentage);
      oprot.writeI32(struct._dutyCyclePeriod);
      oprot.writeI32(struct._criticality);
      oprot.writeI32(struct._vRelayId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMEatonCloudScheduledCycleCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._groupId = iprot.readI32();
      struct.set_groupIdIsSet(true);
      struct._controlStartDateTime = iprot.readI64();
      struct.set_controlStartDateTimeIsSet(true);
      struct._controlEndDateTime = iprot.readI64();
      struct.set_controlEndDateTimeIsSet(true);
      struct._isRampIn = iprot.readBool();
      struct.set_isRampInIsSet(true);
      struct._isRampOut = iprot.readBool();
      struct.set_isRampOutIsSet(true);
      struct._cyclingOption = com.cannontech.messaging.serialization.thrift.generated.LMEatonCloudCycleType.findByValue(iprot.readI32());
      struct.set_cyclingOptionIsSet(true);
      struct._dutyCyclePercentage = iprot.readI32();
      struct.set_dutyCyclePercentageIsSet(true);
      struct._dutyCyclePeriod = iprot.readI32();
      struct.set_dutyCyclePeriodIsSet(true);
      struct._criticality = iprot.readI32();
      struct.set_criticalityIsSet(true);
      struct._vRelayId = iprot.readI32();
      struct.set_vRelayIdIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


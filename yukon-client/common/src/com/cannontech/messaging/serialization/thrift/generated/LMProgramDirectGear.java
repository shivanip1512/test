/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-24")
public class LMProgramDirectGear implements org.apache.thrift.TBase<LMProgramDirectGear, LMProgramDirectGear._Fields>, java.io.Serializable, Cloneable, Comparable<LMProgramDirectGear> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMProgramDirectGear");

  private static final org.apache.thrift.protocol.TField _PROGRAM_PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_programPaoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _GEAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_gearName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _GEAR_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("_gearNumber", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _CONTROL_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlMethod", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField _METHOD_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_methodRate", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField _METHOD_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("_methodPeriod", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField _METHOD_RATE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("_methodRateCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField _CYCLERE_FRESH_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_cyclereFreshRate", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField _METHOD_STOP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_methodStopType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField _CHANGE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("_changeCondition", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField _CHANGE_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("_changeDuration", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField _CHANGE_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_changePriority", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField _CHANGE_TRIGGER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("_changeTriggerNumber", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField _CHANGE_TRIGGER_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("_changeTriggerOffset", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField _PERCENT_REDUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("_percentReduction", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField _GROUP_SELECTION_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupSelectionMethod", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField _METHOD_OPTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_methodOptionType", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField _METHOD_OPTION_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("_methodOptionMax", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField _RAMP_IN_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("_rampInInterval", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField _RAMP_IN_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("_rampInPercent", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField _RAMP_OUT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("_rampOutInterval", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField _RAMP_OUT_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("_rampOutPercent", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField _KW_REDUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("_kwReduction", org.apache.thrift.protocol.TType.DOUBLE, (short)24);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LMProgramDirectGearStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LMProgramDirectGearTupleSchemeFactory();

  private int _programPaoId; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _gearName; // required
  private int _gearNumber; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _controlMethod; // required
  private int _methodRate; // required
  private int _methodPeriod; // required
  private int _methodRateCount; // required
  private int _cyclereFreshRate; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _methodStopType; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _changeCondition; // required
  private int _changeDuration; // required
  private int _changePriority; // required
  private int _changeTriggerNumber; // required
  private double _changeTriggerOffset; // required
  private int _percentReduction; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _groupSelectionMethod; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _methodOptionType; // required
  private int _methodOptionMax; // required
  private int _rampInInterval; // required
  private int _rampInPercent; // required
  private int _rampOutInterval; // required
  private int _rampOutPercent; // required
  private double _kwReduction; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PROGRAM_PAO_ID((short)1, "_programPaoId"),
    _GEAR_NAME((short)2, "_gearName"),
    _GEAR_NUMBER((short)3, "_gearNumber"),
    _CONTROL_METHOD((short)4, "_controlMethod"),
    _METHOD_RATE((short)5, "_methodRate"),
    _METHOD_PERIOD((short)6, "_methodPeriod"),
    _METHOD_RATE_COUNT((short)7, "_methodRateCount"),
    _CYCLERE_FRESH_RATE((short)8, "_cyclereFreshRate"),
    _METHOD_STOP_TYPE((short)9, "_methodStopType"),
    _CHANGE_CONDITION((short)10, "_changeCondition"),
    _CHANGE_DURATION((short)11, "_changeDuration"),
    _CHANGE_PRIORITY((short)12, "_changePriority"),
    _CHANGE_TRIGGER_NUMBER((short)13, "_changeTriggerNumber"),
    _CHANGE_TRIGGER_OFFSET((short)15, "_changeTriggerOffset"),
    _PERCENT_REDUCTION((short)16, "_percentReduction"),
    _GROUP_SELECTION_METHOD((short)17, "_groupSelectionMethod"),
    _METHOD_OPTION_TYPE((short)18, "_methodOptionType"),
    _METHOD_OPTION_MAX((short)19, "_methodOptionMax"),
    _RAMP_IN_INTERVAL((short)20, "_rampInInterval"),
    _RAMP_IN_PERCENT((short)21, "_rampInPercent"),
    _RAMP_OUT_INTERVAL((short)22, "_rampOutInterval"),
    _RAMP_OUT_PERCENT((short)23, "_rampOutPercent"),
    _KW_REDUCTION((short)24, "_kwReduction");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PROGRAM_PAO_ID
          return _PROGRAM_PAO_ID;
        case 2: // _GEAR_NAME
          return _GEAR_NAME;
        case 3: // _GEAR_NUMBER
          return _GEAR_NUMBER;
        case 4: // _CONTROL_METHOD
          return _CONTROL_METHOD;
        case 5: // _METHOD_RATE
          return _METHOD_RATE;
        case 6: // _METHOD_PERIOD
          return _METHOD_PERIOD;
        case 7: // _METHOD_RATE_COUNT
          return _METHOD_RATE_COUNT;
        case 8: // _CYCLERE_FRESH_RATE
          return _CYCLERE_FRESH_RATE;
        case 9: // _METHOD_STOP_TYPE
          return _METHOD_STOP_TYPE;
        case 10: // _CHANGE_CONDITION
          return _CHANGE_CONDITION;
        case 11: // _CHANGE_DURATION
          return _CHANGE_DURATION;
        case 12: // _CHANGE_PRIORITY
          return _CHANGE_PRIORITY;
        case 13: // _CHANGE_TRIGGER_NUMBER
          return _CHANGE_TRIGGER_NUMBER;
        case 15: // _CHANGE_TRIGGER_OFFSET
          return _CHANGE_TRIGGER_OFFSET;
        case 16: // _PERCENT_REDUCTION
          return _PERCENT_REDUCTION;
        case 17: // _GROUP_SELECTION_METHOD
          return _GROUP_SELECTION_METHOD;
        case 18: // _METHOD_OPTION_TYPE
          return _METHOD_OPTION_TYPE;
        case 19: // _METHOD_OPTION_MAX
          return _METHOD_OPTION_MAX;
        case 20: // _RAMP_IN_INTERVAL
          return _RAMP_IN_INTERVAL;
        case 21: // _RAMP_IN_PERCENT
          return _RAMP_IN_PERCENT;
        case 22: // _RAMP_OUT_INTERVAL
          return _RAMP_OUT_INTERVAL;
        case 23: // _RAMP_OUT_PERCENT
          return _RAMP_OUT_PERCENT;
        case 24: // _KW_REDUCTION
          return _KW_REDUCTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PROGRAMPAOID_ISSET_ID = 0;
  private static final int ___GEARNUMBER_ISSET_ID = 1;
  private static final int ___METHODRATE_ISSET_ID = 2;
  private static final int ___METHODPERIOD_ISSET_ID = 3;
  private static final int ___METHODRATECOUNT_ISSET_ID = 4;
  private static final int ___CYCLEREFRESHRATE_ISSET_ID = 5;
  private static final int ___CHANGEDURATION_ISSET_ID = 6;
  private static final int ___CHANGEPRIORITY_ISSET_ID = 7;
  private static final int ___CHANGETRIGGERNUMBER_ISSET_ID = 8;
  private static final int ___CHANGETRIGGEROFFSET_ISSET_ID = 9;
  private static final int ___PERCENTREDUCTION_ISSET_ID = 10;
  private static final int ___METHODOPTIONMAX_ISSET_ID = 11;
  private static final int ___RAMPININTERVAL_ISSET_ID = 12;
  private static final int ___RAMPINPERCENT_ISSET_ID = 13;
  private static final int ___RAMPOUTINTERVAL_ISSET_ID = 14;
  private static final int ___RAMPOUTPERCENT_ISSET_ID = 15;
  private static final int ___KWREDUCTION_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PROGRAM_PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_programPaoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._GEAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("_gearName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._GEAR_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("_gearNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONTROL_METHOD, new org.apache.thrift.meta_data.FieldMetaData("_controlMethod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._METHOD_RATE, new org.apache.thrift.meta_data.FieldMetaData("_methodRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._METHOD_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("_methodPeriod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._METHOD_RATE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("_methodRateCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CYCLERE_FRESH_RATE, new org.apache.thrift.meta_data.FieldMetaData("_cyclereFreshRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._METHOD_STOP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_methodStopType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._CHANGE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("_changeCondition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._CHANGE_DURATION, new org.apache.thrift.meta_data.FieldMetaData("_changeDuration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CHANGE_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("_changePriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CHANGE_TRIGGER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("_changeTriggerNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CHANGE_TRIGGER_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("_changeTriggerOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._PERCENT_REDUCTION, new org.apache.thrift.meta_data.FieldMetaData("_percentReduction", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._GROUP_SELECTION_METHOD, new org.apache.thrift.meta_data.FieldMetaData("_groupSelectionMethod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._METHOD_OPTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_methodOptionType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._METHOD_OPTION_MAX, new org.apache.thrift.meta_data.FieldMetaData("_methodOptionMax", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._RAMP_IN_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("_rampInInterval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._RAMP_IN_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("_rampInPercent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._RAMP_OUT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("_rampOutInterval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._RAMP_OUT_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("_rampOutPercent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._KW_REDUCTION, new org.apache.thrift.meta_data.FieldMetaData("_kwReduction", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMProgramDirectGear.class, metaDataMap);
  }

  public LMProgramDirectGear() {
  }

  public LMProgramDirectGear(
    int _programPaoId,
    java.lang.String _gearName,
    int _gearNumber,
    java.lang.String _controlMethod,
    int _methodRate,
    int _methodPeriod,
    int _methodRateCount,
    int _cyclereFreshRate,
    java.lang.String _methodStopType,
    java.lang.String _changeCondition,
    int _changeDuration,
    int _changePriority,
    int _changeTriggerNumber,
    double _changeTriggerOffset,
    int _percentReduction,
    java.lang.String _groupSelectionMethod,
    java.lang.String _methodOptionType,
    int _methodOptionMax,
    int _rampInInterval,
    int _rampInPercent,
    int _rampOutInterval,
    int _rampOutPercent,
    double _kwReduction)
  {
    this();
    this._programPaoId = _programPaoId;
    set_programPaoIdIsSet(true);
    this._gearName = _gearName;
    this._gearNumber = _gearNumber;
    set_gearNumberIsSet(true);
    this._controlMethod = _controlMethod;
    this._methodRate = _methodRate;
    set_methodRateIsSet(true);
    this._methodPeriod = _methodPeriod;
    set_methodPeriodIsSet(true);
    this._methodRateCount = _methodRateCount;
    set_methodRateCountIsSet(true);
    this._cyclereFreshRate = _cyclereFreshRate;
    set_cyclereFreshRateIsSet(true);
    this._methodStopType = _methodStopType;
    this._changeCondition = _changeCondition;
    this._changeDuration = _changeDuration;
    set_changeDurationIsSet(true);
    this._changePriority = _changePriority;
    set_changePriorityIsSet(true);
    this._changeTriggerNumber = _changeTriggerNumber;
    set_changeTriggerNumberIsSet(true);
    this._changeTriggerOffset = _changeTriggerOffset;
    set_changeTriggerOffsetIsSet(true);
    this._percentReduction = _percentReduction;
    set_percentReductionIsSet(true);
    this._groupSelectionMethod = _groupSelectionMethod;
    this._methodOptionType = _methodOptionType;
    this._methodOptionMax = _methodOptionMax;
    set_methodOptionMaxIsSet(true);
    this._rampInInterval = _rampInInterval;
    set_rampInIntervalIsSet(true);
    this._rampInPercent = _rampInPercent;
    set_rampInPercentIsSet(true);
    this._rampOutInterval = _rampOutInterval;
    set_rampOutIntervalIsSet(true);
    this._rampOutPercent = _rampOutPercent;
    set_rampOutPercentIsSet(true);
    this._kwReduction = _kwReduction;
    set_kwReductionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMProgramDirectGear(LMProgramDirectGear other) {
    __isset_bitfield = other.__isset_bitfield;
    this._programPaoId = other._programPaoId;
    if (other.isSet_gearName()) {
      this._gearName = other._gearName;
    }
    this._gearNumber = other._gearNumber;
    if (other.isSet_controlMethod()) {
      this._controlMethod = other._controlMethod;
    }
    this._methodRate = other._methodRate;
    this._methodPeriod = other._methodPeriod;
    this._methodRateCount = other._methodRateCount;
    this._cyclereFreshRate = other._cyclereFreshRate;
    if (other.isSet_methodStopType()) {
      this._methodStopType = other._methodStopType;
    }
    if (other.isSet_changeCondition()) {
      this._changeCondition = other._changeCondition;
    }
    this._changeDuration = other._changeDuration;
    this._changePriority = other._changePriority;
    this._changeTriggerNumber = other._changeTriggerNumber;
    this._changeTriggerOffset = other._changeTriggerOffset;
    this._percentReduction = other._percentReduction;
    if (other.isSet_groupSelectionMethod()) {
      this._groupSelectionMethod = other._groupSelectionMethod;
    }
    if (other.isSet_methodOptionType()) {
      this._methodOptionType = other._methodOptionType;
    }
    this._methodOptionMax = other._methodOptionMax;
    this._rampInInterval = other._rampInInterval;
    this._rampInPercent = other._rampInPercent;
    this._rampOutInterval = other._rampOutInterval;
    this._rampOutPercent = other._rampOutPercent;
    this._kwReduction = other._kwReduction;
  }

  public LMProgramDirectGear deepCopy() {
    return new LMProgramDirectGear(this);
  }

  @Override
  public void clear() {
    set_programPaoIdIsSet(false);
    this._programPaoId = 0;
    this._gearName = null;
    set_gearNumberIsSet(false);
    this._gearNumber = 0;
    this._controlMethod = null;
    set_methodRateIsSet(false);
    this._methodRate = 0;
    set_methodPeriodIsSet(false);
    this._methodPeriod = 0;
    set_methodRateCountIsSet(false);
    this._methodRateCount = 0;
    set_cyclereFreshRateIsSet(false);
    this._cyclereFreshRate = 0;
    this._methodStopType = null;
    this._changeCondition = null;
    set_changeDurationIsSet(false);
    this._changeDuration = 0;
    set_changePriorityIsSet(false);
    this._changePriority = 0;
    set_changeTriggerNumberIsSet(false);
    this._changeTriggerNumber = 0;
    set_changeTriggerOffsetIsSet(false);
    this._changeTriggerOffset = 0.0;
    set_percentReductionIsSet(false);
    this._percentReduction = 0;
    this._groupSelectionMethod = null;
    this._methodOptionType = null;
    set_methodOptionMaxIsSet(false);
    this._methodOptionMax = 0;
    set_rampInIntervalIsSet(false);
    this._rampInInterval = 0;
    set_rampInPercentIsSet(false);
    this._rampInPercent = 0;
    set_rampOutIntervalIsSet(false);
    this._rampOutInterval = 0;
    set_rampOutPercentIsSet(false);
    this._rampOutPercent = 0;
    set_kwReductionIsSet(false);
    this._kwReduction = 0.0;
  }

  public int get_programPaoId() {
    return this._programPaoId;
  }

  public void set_programPaoId(int _programPaoId) {
    this._programPaoId = _programPaoId;
    set_programPaoIdIsSet(true);
  }

  public void unset_programPaoId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PROGRAMPAOID_ISSET_ID);
  }

  /** Returns true if field _programPaoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_programPaoId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PROGRAMPAOID_ISSET_ID);
  }

  public void set_programPaoIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PROGRAMPAOID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_gearName() {
    return this._gearName;
  }

  public void set_gearName(@org.apache.thrift.annotation.Nullable java.lang.String _gearName) {
    this._gearName = _gearName;
  }

  public void unset_gearName() {
    this._gearName = null;
  }

  /** Returns true if field _gearName is set (has been assigned a value) and false otherwise */
  public boolean isSet_gearName() {
    return this._gearName != null;
  }

  public void set_gearNameIsSet(boolean value) {
    if (!value) {
      this._gearName = null;
    }
  }

  public int get_gearNumber() {
    return this._gearNumber;
  }

  public void set_gearNumber(int _gearNumber) {
    this._gearNumber = _gearNumber;
    set_gearNumberIsSet(true);
  }

  public void unset_gearNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___GEARNUMBER_ISSET_ID);
  }

  /** Returns true if field _gearNumber is set (has been assigned a value) and false otherwise */
  public boolean isSet_gearNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___GEARNUMBER_ISSET_ID);
  }

  public void set_gearNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___GEARNUMBER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_controlMethod() {
    return this._controlMethod;
  }

  public void set_controlMethod(@org.apache.thrift.annotation.Nullable java.lang.String _controlMethod) {
    this._controlMethod = _controlMethod;
  }

  public void unset_controlMethod() {
    this._controlMethod = null;
  }

  /** Returns true if field _controlMethod is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlMethod() {
    return this._controlMethod != null;
  }

  public void set_controlMethodIsSet(boolean value) {
    if (!value) {
      this._controlMethod = null;
    }
  }

  public int get_methodRate() {
    return this._methodRate;
  }

  public void set_methodRate(int _methodRate) {
    this._methodRate = _methodRate;
    set_methodRateIsSet(true);
  }

  public void unset_methodRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___METHODRATE_ISSET_ID);
  }

  /** Returns true if field _methodRate is set (has been assigned a value) and false otherwise */
  public boolean isSet_methodRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___METHODRATE_ISSET_ID);
  }

  public void set_methodRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___METHODRATE_ISSET_ID, value);
  }

  public int get_methodPeriod() {
    return this._methodPeriod;
  }

  public void set_methodPeriod(int _methodPeriod) {
    this._methodPeriod = _methodPeriod;
    set_methodPeriodIsSet(true);
  }

  public void unset_methodPeriod() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___METHODPERIOD_ISSET_ID);
  }

  /** Returns true if field _methodPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSet_methodPeriod() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___METHODPERIOD_ISSET_ID);
  }

  public void set_methodPeriodIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___METHODPERIOD_ISSET_ID, value);
  }

  public int get_methodRateCount() {
    return this._methodRateCount;
  }

  public void set_methodRateCount(int _methodRateCount) {
    this._methodRateCount = _methodRateCount;
    set_methodRateCountIsSet(true);
  }

  public void unset_methodRateCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___METHODRATECOUNT_ISSET_ID);
  }

  /** Returns true if field _methodRateCount is set (has been assigned a value) and false otherwise */
  public boolean isSet_methodRateCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___METHODRATECOUNT_ISSET_ID);
  }

  public void set_methodRateCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___METHODRATECOUNT_ISSET_ID, value);
  }

  public int get_cyclereFreshRate() {
    return this._cyclereFreshRate;
  }

  public void set_cyclereFreshRate(int _cyclereFreshRate) {
    this._cyclereFreshRate = _cyclereFreshRate;
    set_cyclereFreshRateIsSet(true);
  }

  public void unset_cyclereFreshRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CYCLEREFRESHRATE_ISSET_ID);
  }

  /** Returns true if field _cyclereFreshRate is set (has been assigned a value) and false otherwise */
  public boolean isSet_cyclereFreshRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CYCLEREFRESHRATE_ISSET_ID);
  }

  public void set_cyclereFreshRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CYCLEREFRESHRATE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_methodStopType() {
    return this._methodStopType;
  }

  public void set_methodStopType(@org.apache.thrift.annotation.Nullable java.lang.String _methodStopType) {
    this._methodStopType = _methodStopType;
  }

  public void unset_methodStopType() {
    this._methodStopType = null;
  }

  /** Returns true if field _methodStopType is set (has been assigned a value) and false otherwise */
  public boolean isSet_methodStopType() {
    return this._methodStopType != null;
  }

  public void set_methodStopTypeIsSet(boolean value) {
    if (!value) {
      this._methodStopType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_changeCondition() {
    return this._changeCondition;
  }

  public void set_changeCondition(@org.apache.thrift.annotation.Nullable java.lang.String _changeCondition) {
    this._changeCondition = _changeCondition;
  }

  public void unset_changeCondition() {
    this._changeCondition = null;
  }

  /** Returns true if field _changeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSet_changeCondition() {
    return this._changeCondition != null;
  }

  public void set_changeConditionIsSet(boolean value) {
    if (!value) {
      this._changeCondition = null;
    }
  }

  public int get_changeDuration() {
    return this._changeDuration;
  }

  public void set_changeDuration(int _changeDuration) {
    this._changeDuration = _changeDuration;
    set_changeDurationIsSet(true);
  }

  public void unset_changeDuration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CHANGEDURATION_ISSET_ID);
  }

  /** Returns true if field _changeDuration is set (has been assigned a value) and false otherwise */
  public boolean isSet_changeDuration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CHANGEDURATION_ISSET_ID);
  }

  public void set_changeDurationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CHANGEDURATION_ISSET_ID, value);
  }

  public int get_changePriority() {
    return this._changePriority;
  }

  public void set_changePriority(int _changePriority) {
    this._changePriority = _changePriority;
    set_changePriorityIsSet(true);
  }

  public void unset_changePriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CHANGEPRIORITY_ISSET_ID);
  }

  /** Returns true if field _changePriority is set (has been assigned a value) and false otherwise */
  public boolean isSet_changePriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CHANGEPRIORITY_ISSET_ID);
  }

  public void set_changePriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CHANGEPRIORITY_ISSET_ID, value);
  }

  public int get_changeTriggerNumber() {
    return this._changeTriggerNumber;
  }

  public void set_changeTriggerNumber(int _changeTriggerNumber) {
    this._changeTriggerNumber = _changeTriggerNumber;
    set_changeTriggerNumberIsSet(true);
  }

  public void unset_changeTriggerNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CHANGETRIGGERNUMBER_ISSET_ID);
  }

  /** Returns true if field _changeTriggerNumber is set (has been assigned a value) and false otherwise */
  public boolean isSet_changeTriggerNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CHANGETRIGGERNUMBER_ISSET_ID);
  }

  public void set_changeTriggerNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CHANGETRIGGERNUMBER_ISSET_ID, value);
  }

  public double get_changeTriggerOffset() {
    return this._changeTriggerOffset;
  }

  public void set_changeTriggerOffset(double _changeTriggerOffset) {
    this._changeTriggerOffset = _changeTriggerOffset;
    set_changeTriggerOffsetIsSet(true);
  }

  public void unset_changeTriggerOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CHANGETRIGGEROFFSET_ISSET_ID);
  }

  /** Returns true if field _changeTriggerOffset is set (has been assigned a value) and false otherwise */
  public boolean isSet_changeTriggerOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CHANGETRIGGEROFFSET_ISSET_ID);
  }

  public void set_changeTriggerOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CHANGETRIGGEROFFSET_ISSET_ID, value);
  }

  public int get_percentReduction() {
    return this._percentReduction;
  }

  public void set_percentReduction(int _percentReduction) {
    this._percentReduction = _percentReduction;
    set_percentReductionIsSet(true);
  }

  public void unset_percentReduction() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PERCENTREDUCTION_ISSET_ID);
  }

  /** Returns true if field _percentReduction is set (has been assigned a value) and false otherwise */
  public boolean isSet_percentReduction() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PERCENTREDUCTION_ISSET_ID);
  }

  public void set_percentReductionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PERCENTREDUCTION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_groupSelectionMethod() {
    return this._groupSelectionMethod;
  }

  public void set_groupSelectionMethod(@org.apache.thrift.annotation.Nullable java.lang.String _groupSelectionMethod) {
    this._groupSelectionMethod = _groupSelectionMethod;
  }

  public void unset_groupSelectionMethod() {
    this._groupSelectionMethod = null;
  }

  /** Returns true if field _groupSelectionMethod is set (has been assigned a value) and false otherwise */
  public boolean isSet_groupSelectionMethod() {
    return this._groupSelectionMethod != null;
  }

  public void set_groupSelectionMethodIsSet(boolean value) {
    if (!value) {
      this._groupSelectionMethod = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_methodOptionType() {
    return this._methodOptionType;
  }

  public void set_methodOptionType(@org.apache.thrift.annotation.Nullable java.lang.String _methodOptionType) {
    this._methodOptionType = _methodOptionType;
  }

  public void unset_methodOptionType() {
    this._methodOptionType = null;
  }

  /** Returns true if field _methodOptionType is set (has been assigned a value) and false otherwise */
  public boolean isSet_methodOptionType() {
    return this._methodOptionType != null;
  }

  public void set_methodOptionTypeIsSet(boolean value) {
    if (!value) {
      this._methodOptionType = null;
    }
  }

  public int get_methodOptionMax() {
    return this._methodOptionMax;
  }

  public void set_methodOptionMax(int _methodOptionMax) {
    this._methodOptionMax = _methodOptionMax;
    set_methodOptionMaxIsSet(true);
  }

  public void unset_methodOptionMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___METHODOPTIONMAX_ISSET_ID);
  }

  /** Returns true if field _methodOptionMax is set (has been assigned a value) and false otherwise */
  public boolean isSet_methodOptionMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___METHODOPTIONMAX_ISSET_ID);
  }

  public void set_methodOptionMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___METHODOPTIONMAX_ISSET_ID, value);
  }

  public int get_rampInInterval() {
    return this._rampInInterval;
  }

  public void set_rampInInterval(int _rampInInterval) {
    this._rampInInterval = _rampInInterval;
    set_rampInIntervalIsSet(true);
  }

  public void unset_rampInInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___RAMPININTERVAL_ISSET_ID);
  }

  /** Returns true if field _rampInInterval is set (has been assigned a value) and false otherwise */
  public boolean isSet_rampInInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___RAMPININTERVAL_ISSET_ID);
  }

  public void set_rampInIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___RAMPININTERVAL_ISSET_ID, value);
  }

  public int get_rampInPercent() {
    return this._rampInPercent;
  }

  public void set_rampInPercent(int _rampInPercent) {
    this._rampInPercent = _rampInPercent;
    set_rampInPercentIsSet(true);
  }

  public void unset_rampInPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___RAMPINPERCENT_ISSET_ID);
  }

  /** Returns true if field _rampInPercent is set (has been assigned a value) and false otherwise */
  public boolean isSet_rampInPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___RAMPINPERCENT_ISSET_ID);
  }

  public void set_rampInPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___RAMPINPERCENT_ISSET_ID, value);
  }

  public int get_rampOutInterval() {
    return this._rampOutInterval;
  }

  public void set_rampOutInterval(int _rampOutInterval) {
    this._rampOutInterval = _rampOutInterval;
    set_rampOutIntervalIsSet(true);
  }

  public void unset_rampOutInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___RAMPOUTINTERVAL_ISSET_ID);
  }

  /** Returns true if field _rampOutInterval is set (has been assigned a value) and false otherwise */
  public boolean isSet_rampOutInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___RAMPOUTINTERVAL_ISSET_ID);
  }

  public void set_rampOutIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___RAMPOUTINTERVAL_ISSET_ID, value);
  }

  public int get_rampOutPercent() {
    return this._rampOutPercent;
  }

  public void set_rampOutPercent(int _rampOutPercent) {
    this._rampOutPercent = _rampOutPercent;
    set_rampOutPercentIsSet(true);
  }

  public void unset_rampOutPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___RAMPOUTPERCENT_ISSET_ID);
  }

  /** Returns true if field _rampOutPercent is set (has been assigned a value) and false otherwise */
  public boolean isSet_rampOutPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___RAMPOUTPERCENT_ISSET_ID);
  }

  public void set_rampOutPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___RAMPOUTPERCENT_ISSET_ID, value);
  }

  public double get_kwReduction() {
    return this._kwReduction;
  }

  public void set_kwReduction(double _kwReduction) {
    this._kwReduction = _kwReduction;
    set_kwReductionIsSet(true);
  }

  public void unset_kwReduction() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___KWREDUCTION_ISSET_ID);
  }

  /** Returns true if field _kwReduction is set (has been assigned a value) and false otherwise */
  public boolean isSet_kwReduction() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___KWREDUCTION_ISSET_ID);
  }

  public void set_kwReductionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___KWREDUCTION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _PROGRAM_PAO_ID:
      if (value == null) {
        unset_programPaoId();
      } else {
        set_programPaoId((java.lang.Integer)value);
      }
      break;

    case _GEAR_NAME:
      if (value == null) {
        unset_gearName();
      } else {
        set_gearName((java.lang.String)value);
      }
      break;

    case _GEAR_NUMBER:
      if (value == null) {
        unset_gearNumber();
      } else {
        set_gearNumber((java.lang.Integer)value);
      }
      break;

    case _CONTROL_METHOD:
      if (value == null) {
        unset_controlMethod();
      } else {
        set_controlMethod((java.lang.String)value);
      }
      break;

    case _METHOD_RATE:
      if (value == null) {
        unset_methodRate();
      } else {
        set_methodRate((java.lang.Integer)value);
      }
      break;

    case _METHOD_PERIOD:
      if (value == null) {
        unset_methodPeriod();
      } else {
        set_methodPeriod((java.lang.Integer)value);
      }
      break;

    case _METHOD_RATE_COUNT:
      if (value == null) {
        unset_methodRateCount();
      } else {
        set_methodRateCount((java.lang.Integer)value);
      }
      break;

    case _CYCLERE_FRESH_RATE:
      if (value == null) {
        unset_cyclereFreshRate();
      } else {
        set_cyclereFreshRate((java.lang.Integer)value);
      }
      break;

    case _METHOD_STOP_TYPE:
      if (value == null) {
        unset_methodStopType();
      } else {
        set_methodStopType((java.lang.String)value);
      }
      break;

    case _CHANGE_CONDITION:
      if (value == null) {
        unset_changeCondition();
      } else {
        set_changeCondition((java.lang.String)value);
      }
      break;

    case _CHANGE_DURATION:
      if (value == null) {
        unset_changeDuration();
      } else {
        set_changeDuration((java.lang.Integer)value);
      }
      break;

    case _CHANGE_PRIORITY:
      if (value == null) {
        unset_changePriority();
      } else {
        set_changePriority((java.lang.Integer)value);
      }
      break;

    case _CHANGE_TRIGGER_NUMBER:
      if (value == null) {
        unset_changeTriggerNumber();
      } else {
        set_changeTriggerNumber((java.lang.Integer)value);
      }
      break;

    case _CHANGE_TRIGGER_OFFSET:
      if (value == null) {
        unset_changeTriggerOffset();
      } else {
        set_changeTriggerOffset((java.lang.Double)value);
      }
      break;

    case _PERCENT_REDUCTION:
      if (value == null) {
        unset_percentReduction();
      } else {
        set_percentReduction((java.lang.Integer)value);
      }
      break;

    case _GROUP_SELECTION_METHOD:
      if (value == null) {
        unset_groupSelectionMethod();
      } else {
        set_groupSelectionMethod((java.lang.String)value);
      }
      break;

    case _METHOD_OPTION_TYPE:
      if (value == null) {
        unset_methodOptionType();
      } else {
        set_methodOptionType((java.lang.String)value);
      }
      break;

    case _METHOD_OPTION_MAX:
      if (value == null) {
        unset_methodOptionMax();
      } else {
        set_methodOptionMax((java.lang.Integer)value);
      }
      break;

    case _RAMP_IN_INTERVAL:
      if (value == null) {
        unset_rampInInterval();
      } else {
        set_rampInInterval((java.lang.Integer)value);
      }
      break;

    case _RAMP_IN_PERCENT:
      if (value == null) {
        unset_rampInPercent();
      } else {
        set_rampInPercent((java.lang.Integer)value);
      }
      break;

    case _RAMP_OUT_INTERVAL:
      if (value == null) {
        unset_rampOutInterval();
      } else {
        set_rampOutInterval((java.lang.Integer)value);
      }
      break;

    case _RAMP_OUT_PERCENT:
      if (value == null) {
        unset_rampOutPercent();
      } else {
        set_rampOutPercent((java.lang.Integer)value);
      }
      break;

    case _KW_REDUCTION:
      if (value == null) {
        unset_kwReduction();
      } else {
        set_kwReduction((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _PROGRAM_PAO_ID:
      return get_programPaoId();

    case _GEAR_NAME:
      return get_gearName();

    case _GEAR_NUMBER:
      return get_gearNumber();

    case _CONTROL_METHOD:
      return get_controlMethod();

    case _METHOD_RATE:
      return get_methodRate();

    case _METHOD_PERIOD:
      return get_methodPeriod();

    case _METHOD_RATE_COUNT:
      return get_methodRateCount();

    case _CYCLERE_FRESH_RATE:
      return get_cyclereFreshRate();

    case _METHOD_STOP_TYPE:
      return get_methodStopType();

    case _CHANGE_CONDITION:
      return get_changeCondition();

    case _CHANGE_DURATION:
      return get_changeDuration();

    case _CHANGE_PRIORITY:
      return get_changePriority();

    case _CHANGE_TRIGGER_NUMBER:
      return get_changeTriggerNumber();

    case _CHANGE_TRIGGER_OFFSET:
      return get_changeTriggerOffset();

    case _PERCENT_REDUCTION:
      return get_percentReduction();

    case _GROUP_SELECTION_METHOD:
      return get_groupSelectionMethod();

    case _METHOD_OPTION_TYPE:
      return get_methodOptionType();

    case _METHOD_OPTION_MAX:
      return get_methodOptionMax();

    case _RAMP_IN_INTERVAL:
      return get_rampInInterval();

    case _RAMP_IN_PERCENT:
      return get_rampInPercent();

    case _RAMP_OUT_INTERVAL:
      return get_rampOutInterval();

    case _RAMP_OUT_PERCENT:
      return get_rampOutPercent();

    case _KW_REDUCTION:
      return get_kwReduction();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _PROGRAM_PAO_ID:
      return isSet_programPaoId();
    case _GEAR_NAME:
      return isSet_gearName();
    case _GEAR_NUMBER:
      return isSet_gearNumber();
    case _CONTROL_METHOD:
      return isSet_controlMethod();
    case _METHOD_RATE:
      return isSet_methodRate();
    case _METHOD_PERIOD:
      return isSet_methodPeriod();
    case _METHOD_RATE_COUNT:
      return isSet_methodRateCount();
    case _CYCLERE_FRESH_RATE:
      return isSet_cyclereFreshRate();
    case _METHOD_STOP_TYPE:
      return isSet_methodStopType();
    case _CHANGE_CONDITION:
      return isSet_changeCondition();
    case _CHANGE_DURATION:
      return isSet_changeDuration();
    case _CHANGE_PRIORITY:
      return isSet_changePriority();
    case _CHANGE_TRIGGER_NUMBER:
      return isSet_changeTriggerNumber();
    case _CHANGE_TRIGGER_OFFSET:
      return isSet_changeTriggerOffset();
    case _PERCENT_REDUCTION:
      return isSet_percentReduction();
    case _GROUP_SELECTION_METHOD:
      return isSet_groupSelectionMethod();
    case _METHOD_OPTION_TYPE:
      return isSet_methodOptionType();
    case _METHOD_OPTION_MAX:
      return isSet_methodOptionMax();
    case _RAMP_IN_INTERVAL:
      return isSet_rampInInterval();
    case _RAMP_IN_PERCENT:
      return isSet_rampInPercent();
    case _RAMP_OUT_INTERVAL:
      return isSet_rampOutInterval();
    case _RAMP_OUT_PERCENT:
      return isSet_rampOutPercent();
    case _KW_REDUCTION:
      return isSet_kwReduction();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LMProgramDirectGear)
      return this.equals((LMProgramDirectGear)that);
    return false;
  }

  public boolean equals(LMProgramDirectGear that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__programPaoId = true;
    boolean that_present__programPaoId = true;
    if (this_present__programPaoId || that_present__programPaoId) {
      if (!(this_present__programPaoId && that_present__programPaoId))
        return false;
      if (this._programPaoId != that._programPaoId)
        return false;
    }

    boolean this_present__gearName = true && this.isSet_gearName();
    boolean that_present__gearName = true && that.isSet_gearName();
    if (this_present__gearName || that_present__gearName) {
      if (!(this_present__gearName && that_present__gearName))
        return false;
      if (!this._gearName.equals(that._gearName))
        return false;
    }

    boolean this_present__gearNumber = true;
    boolean that_present__gearNumber = true;
    if (this_present__gearNumber || that_present__gearNumber) {
      if (!(this_present__gearNumber && that_present__gearNumber))
        return false;
      if (this._gearNumber != that._gearNumber)
        return false;
    }

    boolean this_present__controlMethod = true && this.isSet_controlMethod();
    boolean that_present__controlMethod = true && that.isSet_controlMethod();
    if (this_present__controlMethod || that_present__controlMethod) {
      if (!(this_present__controlMethod && that_present__controlMethod))
        return false;
      if (!this._controlMethod.equals(that._controlMethod))
        return false;
    }

    boolean this_present__methodRate = true;
    boolean that_present__methodRate = true;
    if (this_present__methodRate || that_present__methodRate) {
      if (!(this_present__methodRate && that_present__methodRate))
        return false;
      if (this._methodRate != that._methodRate)
        return false;
    }

    boolean this_present__methodPeriod = true;
    boolean that_present__methodPeriod = true;
    if (this_present__methodPeriod || that_present__methodPeriod) {
      if (!(this_present__methodPeriod && that_present__methodPeriod))
        return false;
      if (this._methodPeriod != that._methodPeriod)
        return false;
    }

    boolean this_present__methodRateCount = true;
    boolean that_present__methodRateCount = true;
    if (this_present__methodRateCount || that_present__methodRateCount) {
      if (!(this_present__methodRateCount && that_present__methodRateCount))
        return false;
      if (this._methodRateCount != that._methodRateCount)
        return false;
    }

    boolean this_present__cyclereFreshRate = true;
    boolean that_present__cyclereFreshRate = true;
    if (this_present__cyclereFreshRate || that_present__cyclereFreshRate) {
      if (!(this_present__cyclereFreshRate && that_present__cyclereFreshRate))
        return false;
      if (this._cyclereFreshRate != that._cyclereFreshRate)
        return false;
    }

    boolean this_present__methodStopType = true && this.isSet_methodStopType();
    boolean that_present__methodStopType = true && that.isSet_methodStopType();
    if (this_present__methodStopType || that_present__methodStopType) {
      if (!(this_present__methodStopType && that_present__methodStopType))
        return false;
      if (!this._methodStopType.equals(that._methodStopType))
        return false;
    }

    boolean this_present__changeCondition = true && this.isSet_changeCondition();
    boolean that_present__changeCondition = true && that.isSet_changeCondition();
    if (this_present__changeCondition || that_present__changeCondition) {
      if (!(this_present__changeCondition && that_present__changeCondition))
        return false;
      if (!this._changeCondition.equals(that._changeCondition))
        return false;
    }

    boolean this_present__changeDuration = true;
    boolean that_present__changeDuration = true;
    if (this_present__changeDuration || that_present__changeDuration) {
      if (!(this_present__changeDuration && that_present__changeDuration))
        return false;
      if (this._changeDuration != that._changeDuration)
        return false;
    }

    boolean this_present__changePriority = true;
    boolean that_present__changePriority = true;
    if (this_present__changePriority || that_present__changePriority) {
      if (!(this_present__changePriority && that_present__changePriority))
        return false;
      if (this._changePriority != that._changePriority)
        return false;
    }

    boolean this_present__changeTriggerNumber = true;
    boolean that_present__changeTriggerNumber = true;
    if (this_present__changeTriggerNumber || that_present__changeTriggerNumber) {
      if (!(this_present__changeTriggerNumber && that_present__changeTriggerNumber))
        return false;
      if (this._changeTriggerNumber != that._changeTriggerNumber)
        return false;
    }

    boolean this_present__changeTriggerOffset = true;
    boolean that_present__changeTriggerOffset = true;
    if (this_present__changeTriggerOffset || that_present__changeTriggerOffset) {
      if (!(this_present__changeTriggerOffset && that_present__changeTriggerOffset))
        return false;
      if (this._changeTriggerOffset != that._changeTriggerOffset)
        return false;
    }

    boolean this_present__percentReduction = true;
    boolean that_present__percentReduction = true;
    if (this_present__percentReduction || that_present__percentReduction) {
      if (!(this_present__percentReduction && that_present__percentReduction))
        return false;
      if (this._percentReduction != that._percentReduction)
        return false;
    }

    boolean this_present__groupSelectionMethod = true && this.isSet_groupSelectionMethod();
    boolean that_present__groupSelectionMethod = true && that.isSet_groupSelectionMethod();
    if (this_present__groupSelectionMethod || that_present__groupSelectionMethod) {
      if (!(this_present__groupSelectionMethod && that_present__groupSelectionMethod))
        return false;
      if (!this._groupSelectionMethod.equals(that._groupSelectionMethod))
        return false;
    }

    boolean this_present__methodOptionType = true && this.isSet_methodOptionType();
    boolean that_present__methodOptionType = true && that.isSet_methodOptionType();
    if (this_present__methodOptionType || that_present__methodOptionType) {
      if (!(this_present__methodOptionType && that_present__methodOptionType))
        return false;
      if (!this._methodOptionType.equals(that._methodOptionType))
        return false;
    }

    boolean this_present__methodOptionMax = true;
    boolean that_present__methodOptionMax = true;
    if (this_present__methodOptionMax || that_present__methodOptionMax) {
      if (!(this_present__methodOptionMax && that_present__methodOptionMax))
        return false;
      if (this._methodOptionMax != that._methodOptionMax)
        return false;
    }

    boolean this_present__rampInInterval = true;
    boolean that_present__rampInInterval = true;
    if (this_present__rampInInterval || that_present__rampInInterval) {
      if (!(this_present__rampInInterval && that_present__rampInInterval))
        return false;
      if (this._rampInInterval != that._rampInInterval)
        return false;
    }

    boolean this_present__rampInPercent = true;
    boolean that_present__rampInPercent = true;
    if (this_present__rampInPercent || that_present__rampInPercent) {
      if (!(this_present__rampInPercent && that_present__rampInPercent))
        return false;
      if (this._rampInPercent != that._rampInPercent)
        return false;
    }

    boolean this_present__rampOutInterval = true;
    boolean that_present__rampOutInterval = true;
    if (this_present__rampOutInterval || that_present__rampOutInterval) {
      if (!(this_present__rampOutInterval && that_present__rampOutInterval))
        return false;
      if (this._rampOutInterval != that._rampOutInterval)
        return false;
    }

    boolean this_present__rampOutPercent = true;
    boolean that_present__rampOutPercent = true;
    if (this_present__rampOutPercent || that_present__rampOutPercent) {
      if (!(this_present__rampOutPercent && that_present__rampOutPercent))
        return false;
      if (this._rampOutPercent != that._rampOutPercent)
        return false;
    }

    boolean this_present__kwReduction = true;
    boolean that_present__kwReduction = true;
    if (this_present__kwReduction || that_present__kwReduction) {
      if (!(this_present__kwReduction && that_present__kwReduction))
        return false;
      if (this._kwReduction != that._kwReduction)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + _programPaoId;

    hashCode = hashCode * 8191 + ((isSet_gearName()) ? 131071 : 524287);
    if (isSet_gearName())
      hashCode = hashCode * 8191 + _gearName.hashCode();

    hashCode = hashCode * 8191 + _gearNumber;

    hashCode = hashCode * 8191 + ((isSet_controlMethod()) ? 131071 : 524287);
    if (isSet_controlMethod())
      hashCode = hashCode * 8191 + _controlMethod.hashCode();

    hashCode = hashCode * 8191 + _methodRate;

    hashCode = hashCode * 8191 + _methodPeriod;

    hashCode = hashCode * 8191 + _methodRateCount;

    hashCode = hashCode * 8191 + _cyclereFreshRate;

    hashCode = hashCode * 8191 + ((isSet_methodStopType()) ? 131071 : 524287);
    if (isSet_methodStopType())
      hashCode = hashCode * 8191 + _methodStopType.hashCode();

    hashCode = hashCode * 8191 + ((isSet_changeCondition()) ? 131071 : 524287);
    if (isSet_changeCondition())
      hashCode = hashCode * 8191 + _changeCondition.hashCode();

    hashCode = hashCode * 8191 + _changeDuration;

    hashCode = hashCode * 8191 + _changePriority;

    hashCode = hashCode * 8191 + _changeTriggerNumber;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_changeTriggerOffset);

    hashCode = hashCode * 8191 + _percentReduction;

    hashCode = hashCode * 8191 + ((isSet_groupSelectionMethod()) ? 131071 : 524287);
    if (isSet_groupSelectionMethod())
      hashCode = hashCode * 8191 + _groupSelectionMethod.hashCode();

    hashCode = hashCode * 8191 + ((isSet_methodOptionType()) ? 131071 : 524287);
    if (isSet_methodOptionType())
      hashCode = hashCode * 8191 + _methodOptionType.hashCode();

    hashCode = hashCode * 8191 + _methodOptionMax;

    hashCode = hashCode * 8191 + _rampInInterval;

    hashCode = hashCode * 8191 + _rampInPercent;

    hashCode = hashCode * 8191 + _rampOutInterval;

    hashCode = hashCode * 8191 + _rampOutPercent;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_kwReduction);

    return hashCode;
  }

  @Override
  public int compareTo(LMProgramDirectGear other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_programPaoId()).compareTo(other.isSet_programPaoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_programPaoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._programPaoId, other._programPaoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_gearName()).compareTo(other.isSet_gearName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_gearName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._gearName, other._gearName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_gearNumber()).compareTo(other.isSet_gearNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_gearNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._gearNumber, other._gearNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlMethod()).compareTo(other.isSet_controlMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlMethod, other._controlMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_methodRate()).compareTo(other.isSet_methodRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_methodRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._methodRate, other._methodRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_methodPeriod()).compareTo(other.isSet_methodPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_methodPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._methodPeriod, other._methodPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_methodRateCount()).compareTo(other.isSet_methodRateCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_methodRateCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._methodRateCount, other._methodRateCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_cyclereFreshRate()).compareTo(other.isSet_cyclereFreshRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_cyclereFreshRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._cyclereFreshRate, other._cyclereFreshRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_methodStopType()).compareTo(other.isSet_methodStopType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_methodStopType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._methodStopType, other._methodStopType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_changeCondition()).compareTo(other.isSet_changeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_changeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._changeCondition, other._changeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_changeDuration()).compareTo(other.isSet_changeDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_changeDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._changeDuration, other._changeDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_changePriority()).compareTo(other.isSet_changePriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_changePriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._changePriority, other._changePriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_changeTriggerNumber()).compareTo(other.isSet_changeTriggerNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_changeTriggerNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._changeTriggerNumber, other._changeTriggerNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_changeTriggerOffset()).compareTo(other.isSet_changeTriggerOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_changeTriggerOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._changeTriggerOffset, other._changeTriggerOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_percentReduction()).compareTo(other.isSet_percentReduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_percentReduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._percentReduction, other._percentReduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_groupSelectionMethod()).compareTo(other.isSet_groupSelectionMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_groupSelectionMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupSelectionMethod, other._groupSelectionMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_methodOptionType()).compareTo(other.isSet_methodOptionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_methodOptionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._methodOptionType, other._methodOptionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_methodOptionMax()).compareTo(other.isSet_methodOptionMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_methodOptionMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._methodOptionMax, other._methodOptionMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_rampInInterval()).compareTo(other.isSet_rampInInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_rampInInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._rampInInterval, other._rampInInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_rampInPercent()).compareTo(other.isSet_rampInPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_rampInPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._rampInPercent, other._rampInPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_rampOutInterval()).compareTo(other.isSet_rampOutInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_rampOutInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._rampOutInterval, other._rampOutInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_rampOutPercent()).compareTo(other.isSet_rampOutPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_rampOutPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._rampOutPercent, other._rampOutPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_kwReduction()).compareTo(other.isSet_kwReduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_kwReduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._kwReduction, other._kwReduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LMProgramDirectGear(");
    boolean first = true;

    sb.append("_programPaoId:");
    sb.append(this._programPaoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_gearName:");
    if (this._gearName == null) {
      sb.append("null");
    } else {
      sb.append(this._gearName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_gearNumber:");
    sb.append(this._gearNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlMethod:");
    if (this._controlMethod == null) {
      sb.append("null");
    } else {
      sb.append(this._controlMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_methodRate:");
    sb.append(this._methodRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_methodPeriod:");
    sb.append(this._methodPeriod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_methodRateCount:");
    sb.append(this._methodRateCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_cyclereFreshRate:");
    sb.append(this._cyclereFreshRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_methodStopType:");
    if (this._methodStopType == null) {
      sb.append("null");
    } else {
      sb.append(this._methodStopType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_changeCondition:");
    if (this._changeCondition == null) {
      sb.append("null");
    } else {
      sb.append(this._changeCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_changeDuration:");
    sb.append(this._changeDuration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_changePriority:");
    sb.append(this._changePriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_changeTriggerNumber:");
    sb.append(this._changeTriggerNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_changeTriggerOffset:");
    sb.append(this._changeTriggerOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_percentReduction:");
    sb.append(this._percentReduction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_groupSelectionMethod:");
    if (this._groupSelectionMethod == null) {
      sb.append("null");
    } else {
      sb.append(this._groupSelectionMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_methodOptionType:");
    if (this._methodOptionType == null) {
      sb.append("null");
    } else {
      sb.append(this._methodOptionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_methodOptionMax:");
    sb.append(this._methodOptionMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_rampInInterval:");
    sb.append(this._rampInInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_rampInPercent:");
    sb.append(this._rampInPercent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_rampOutInterval:");
    sb.append(this._rampOutInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_rampOutPercent:");
    sb.append(this._rampOutPercent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_kwReduction:");
    sb.append(this._kwReduction);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_programPaoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_programPaoId' is unset! Struct:" + toString());
    }

    if (!isSet_gearName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_gearName' is unset! Struct:" + toString());
    }

    if (!isSet_gearNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_gearNumber' is unset! Struct:" + toString());
    }

    if (!isSet_controlMethod()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlMethod' is unset! Struct:" + toString());
    }

    if (!isSet_methodRate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_methodRate' is unset! Struct:" + toString());
    }

    if (!isSet_methodPeriod()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_methodPeriod' is unset! Struct:" + toString());
    }

    if (!isSet_methodRateCount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_methodRateCount' is unset! Struct:" + toString());
    }

    if (!isSet_cyclereFreshRate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_cyclereFreshRate' is unset! Struct:" + toString());
    }

    if (!isSet_methodStopType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_methodStopType' is unset! Struct:" + toString());
    }

    if (!isSet_changeCondition()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_changeCondition' is unset! Struct:" + toString());
    }

    if (!isSet_changeDuration()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_changeDuration' is unset! Struct:" + toString());
    }

    if (!isSet_changePriority()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_changePriority' is unset! Struct:" + toString());
    }

    if (!isSet_changeTriggerNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_changeTriggerNumber' is unset! Struct:" + toString());
    }

    if (!isSet_changeTriggerOffset()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_changeTriggerOffset' is unset! Struct:" + toString());
    }

    if (!isSet_percentReduction()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_percentReduction' is unset! Struct:" + toString());
    }

    if (!isSet_groupSelectionMethod()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_groupSelectionMethod' is unset! Struct:" + toString());
    }

    if (!isSet_methodOptionType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_methodOptionType' is unset! Struct:" + toString());
    }

    if (!isSet_methodOptionMax()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_methodOptionMax' is unset! Struct:" + toString());
    }

    if (!isSet_rampInInterval()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_rampInInterval' is unset! Struct:" + toString());
    }

    if (!isSet_rampInPercent()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_rampInPercent' is unset! Struct:" + toString());
    }

    if (!isSet_rampOutInterval()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_rampOutInterval' is unset! Struct:" + toString());
    }

    if (!isSet_rampOutPercent()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_rampOutPercent' is unset! Struct:" + toString());
    }

    if (!isSet_kwReduction()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_kwReduction' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMProgramDirectGearStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMProgramDirectGearStandardScheme getScheme() {
      return new LMProgramDirectGearStandardScheme();
    }
  }

  private static class LMProgramDirectGearStandardScheme extends org.apache.thrift.scheme.StandardScheme<LMProgramDirectGear> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMProgramDirectGear struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PROGRAM_PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._programPaoId = iprot.readI32();
              struct.set_programPaoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _GEAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._gearName = iprot.readString();
              struct.set_gearNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _GEAR_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._gearNumber = iprot.readI32();
              struct.set_gearNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _CONTROL_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._controlMethod = iprot.readString();
              struct.set_controlMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _METHOD_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._methodRate = iprot.readI32();
              struct.set_methodRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _METHOD_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._methodPeriod = iprot.readI32();
              struct.set_methodPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _METHOD_RATE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._methodRateCount = iprot.readI32();
              struct.set_methodRateCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _CYCLERE_FRESH_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._cyclereFreshRate = iprot.readI32();
              struct.set_cyclereFreshRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _METHOD_STOP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._methodStopType = iprot.readString();
              struct.set_methodStopTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _CHANGE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._changeCondition = iprot.readString();
              struct.set_changeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _CHANGE_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._changeDuration = iprot.readI32();
              struct.set_changeDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _CHANGE_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._changePriority = iprot.readI32();
              struct.set_changePriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _CHANGE_TRIGGER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._changeTriggerNumber = iprot.readI32();
              struct.set_changeTriggerNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // _CHANGE_TRIGGER_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._changeTriggerOffset = iprot.readDouble();
              struct.set_changeTriggerOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _PERCENT_REDUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._percentReduction = iprot.readI32();
              struct.set_percentReductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // _GROUP_SELECTION_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._groupSelectionMethod = iprot.readString();
              struct.set_groupSelectionMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // _METHOD_OPTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._methodOptionType = iprot.readString();
              struct.set_methodOptionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // _METHOD_OPTION_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._methodOptionMax = iprot.readI32();
              struct.set_methodOptionMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // _RAMP_IN_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._rampInInterval = iprot.readI32();
              struct.set_rampInIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // _RAMP_IN_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._rampInPercent = iprot.readI32();
              struct.set_rampInPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // _RAMP_OUT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._rampOutInterval = iprot.readI32();
              struct.set_rampOutIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // _RAMP_OUT_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._rampOutPercent = iprot.readI32();
              struct.set_rampOutPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // _KW_REDUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._kwReduction = iprot.readDouble();
              struct.set_kwReductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMProgramDirectGear struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PROGRAM_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._programPaoId);
      oprot.writeFieldEnd();
      if (struct._gearName != null) {
        oprot.writeFieldBegin(_GEAR_NAME_FIELD_DESC);
        oprot.writeString(struct._gearName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_GEAR_NUMBER_FIELD_DESC);
      oprot.writeI32(struct._gearNumber);
      oprot.writeFieldEnd();
      if (struct._controlMethod != null) {
        oprot.writeFieldBegin(_CONTROL_METHOD_FIELD_DESC);
        oprot.writeString(struct._controlMethod);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_METHOD_RATE_FIELD_DESC);
      oprot.writeI32(struct._methodRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_METHOD_PERIOD_FIELD_DESC);
      oprot.writeI32(struct._methodPeriod);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_METHOD_RATE_COUNT_FIELD_DESC);
      oprot.writeI32(struct._methodRateCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CYCLERE_FRESH_RATE_FIELD_DESC);
      oprot.writeI32(struct._cyclereFreshRate);
      oprot.writeFieldEnd();
      if (struct._methodStopType != null) {
        oprot.writeFieldBegin(_METHOD_STOP_TYPE_FIELD_DESC);
        oprot.writeString(struct._methodStopType);
        oprot.writeFieldEnd();
      }
      if (struct._changeCondition != null) {
        oprot.writeFieldBegin(_CHANGE_CONDITION_FIELD_DESC);
        oprot.writeString(struct._changeCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_CHANGE_DURATION_FIELD_DESC);
      oprot.writeI32(struct._changeDuration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CHANGE_PRIORITY_FIELD_DESC);
      oprot.writeI32(struct._changePriority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CHANGE_TRIGGER_NUMBER_FIELD_DESC);
      oprot.writeI32(struct._changeTriggerNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CHANGE_TRIGGER_OFFSET_FIELD_DESC);
      oprot.writeDouble(struct._changeTriggerOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PERCENT_REDUCTION_FIELD_DESC);
      oprot.writeI32(struct._percentReduction);
      oprot.writeFieldEnd();
      if (struct._groupSelectionMethod != null) {
        oprot.writeFieldBegin(_GROUP_SELECTION_METHOD_FIELD_DESC);
        oprot.writeString(struct._groupSelectionMethod);
        oprot.writeFieldEnd();
      }
      if (struct._methodOptionType != null) {
        oprot.writeFieldBegin(_METHOD_OPTION_TYPE_FIELD_DESC);
        oprot.writeString(struct._methodOptionType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_METHOD_OPTION_MAX_FIELD_DESC);
      oprot.writeI32(struct._methodOptionMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_RAMP_IN_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct._rampInInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_RAMP_IN_PERCENT_FIELD_DESC);
      oprot.writeI32(struct._rampInPercent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_RAMP_OUT_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct._rampOutInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_RAMP_OUT_PERCENT_FIELD_DESC);
      oprot.writeI32(struct._rampOutPercent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_KW_REDUCTION_FIELD_DESC);
      oprot.writeDouble(struct._kwReduction);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMProgramDirectGearTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMProgramDirectGearTupleScheme getScheme() {
      return new LMProgramDirectGearTupleScheme();
    }
  }

  private static class LMProgramDirectGearTupleScheme extends org.apache.thrift.scheme.TupleScheme<LMProgramDirectGear> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMProgramDirectGear struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct._programPaoId);
      oprot.writeString(struct._gearName);
      oprot.writeI32(struct._gearNumber);
      oprot.writeString(struct._controlMethod);
      oprot.writeI32(struct._methodRate);
      oprot.writeI32(struct._methodPeriod);
      oprot.writeI32(struct._methodRateCount);
      oprot.writeI32(struct._cyclereFreshRate);
      oprot.writeString(struct._methodStopType);
      oprot.writeString(struct._changeCondition);
      oprot.writeI32(struct._changeDuration);
      oprot.writeI32(struct._changePriority);
      oprot.writeI32(struct._changeTriggerNumber);
      oprot.writeDouble(struct._changeTriggerOffset);
      oprot.writeI32(struct._percentReduction);
      oprot.writeString(struct._groupSelectionMethod);
      oprot.writeString(struct._methodOptionType);
      oprot.writeI32(struct._methodOptionMax);
      oprot.writeI32(struct._rampInInterval);
      oprot.writeI32(struct._rampInPercent);
      oprot.writeI32(struct._rampOutInterval);
      oprot.writeI32(struct._rampOutPercent);
      oprot.writeDouble(struct._kwReduction);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMProgramDirectGear struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._programPaoId = iprot.readI32();
      struct.set_programPaoIdIsSet(true);
      struct._gearName = iprot.readString();
      struct.set_gearNameIsSet(true);
      struct._gearNumber = iprot.readI32();
      struct.set_gearNumberIsSet(true);
      struct._controlMethod = iprot.readString();
      struct.set_controlMethodIsSet(true);
      struct._methodRate = iprot.readI32();
      struct.set_methodRateIsSet(true);
      struct._methodPeriod = iprot.readI32();
      struct.set_methodPeriodIsSet(true);
      struct._methodRateCount = iprot.readI32();
      struct.set_methodRateCountIsSet(true);
      struct._cyclereFreshRate = iprot.readI32();
      struct.set_cyclereFreshRateIsSet(true);
      struct._methodStopType = iprot.readString();
      struct.set_methodStopTypeIsSet(true);
      struct._changeCondition = iprot.readString();
      struct.set_changeConditionIsSet(true);
      struct._changeDuration = iprot.readI32();
      struct.set_changeDurationIsSet(true);
      struct._changePriority = iprot.readI32();
      struct.set_changePriorityIsSet(true);
      struct._changeTriggerNumber = iprot.readI32();
      struct.set_changeTriggerNumberIsSet(true);
      struct._changeTriggerOffset = iprot.readDouble();
      struct.set_changeTriggerOffsetIsSet(true);
      struct._percentReduction = iprot.readI32();
      struct.set_percentReductionIsSet(true);
      struct._groupSelectionMethod = iprot.readString();
      struct.set_groupSelectionMethodIsSet(true);
      struct._methodOptionType = iprot.readString();
      struct.set_methodOptionTypeIsSet(true);
      struct._methodOptionMax = iprot.readI32();
      struct.set_methodOptionMaxIsSet(true);
      struct._rampInInterval = iprot.readI32();
      struct.set_rampInIntervalIsSet(true);
      struct._rampInPercent = iprot.readI32();
      struct.set_rampInPercentIsSet(true);
      struct._rampOutInterval = iprot.readI32();
      struct.set_rampOutIntervalIsSet(true);
      struct._rampOutPercent = iprot.readI32();
      struct.set_rampOutPercentIsSet(true);
      struct._kwReduction = iprot.readDouble();
      struct.set_kwReductionIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-12-16")
public class LMDynamicTriggerData implements org.apache.thrift.TBase<LMDynamicTriggerData, LMDynamicTriggerData._Fields>, java.io.Serializable, Cloneable, Comparable<LMDynamicTriggerData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMDynamicTriggerData");

  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _TRIGGER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("_triggerNumber", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_pointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField _LAST_POINT_VALUE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastPointValueTimestamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField _NORMAL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_normalState", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField _THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField _PEAK_POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_peakPointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField _LAST_PEAK_POINT_VALUE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastPeakPointValueTimestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField _PROJECTED_POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_projectedPointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LMDynamicTriggerDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LMDynamicTriggerDataTupleSchemeFactory();

  private int _paoId; // required
  private int _triggerNumber; // required
  private double _pointValue; // required
  private long _lastPointValueTimestamp; // required
  private int _normalState; // required
  private double _threshold; // required
  private double _peakPointValue; // required
  private long _lastPeakPointValueTimestamp; // required
  private double _projectedPointValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PAO_ID((short)1, "_paoId"),
    _TRIGGER_NUMBER((short)2, "_triggerNumber"),
    _POINT_VALUE((short)3, "_pointValue"),
    _LAST_POINT_VALUE_TIMESTAMP((short)4, "_lastPointValueTimestamp"),
    _NORMAL_STATE((short)5, "_normalState"),
    _THRESHOLD((short)6, "_threshold"),
    _PEAK_POINT_VALUE((short)7, "_peakPointValue"),
    _LAST_PEAK_POINT_VALUE_TIMESTAMP((short)8, "_lastPeakPointValueTimestamp"),
    _PROJECTED_POINT_VALUE((short)9, "_projectedPointValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PAO_ID
          return _PAO_ID;
        case 2: // _TRIGGER_NUMBER
          return _TRIGGER_NUMBER;
        case 3: // _POINT_VALUE
          return _POINT_VALUE;
        case 4: // _LAST_POINT_VALUE_TIMESTAMP
          return _LAST_POINT_VALUE_TIMESTAMP;
        case 5: // _NORMAL_STATE
          return _NORMAL_STATE;
        case 6: // _THRESHOLD
          return _THRESHOLD;
        case 7: // _PEAK_POINT_VALUE
          return _PEAK_POINT_VALUE;
        case 8: // _LAST_PEAK_POINT_VALUE_TIMESTAMP
          return _LAST_PEAK_POINT_VALUE_TIMESTAMP;
        case 9: // _PROJECTED_POINT_VALUE
          return _PROJECTED_POINT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___TRIGGERNUMBER_ISSET_ID = 1;
  private static final int ___POINTVALUE_ISSET_ID = 2;
  private static final int ___LASTPOINTVALUETIMESTAMP_ISSET_ID = 3;
  private static final int ___NORMALSTATE_ISSET_ID = 4;
  private static final int ___THRESHOLD_ISSET_ID = 5;
  private static final int ___PEAKPOINTVALUE_ISSET_ID = 6;
  private static final int ___LASTPEAKPOINTVALUETIMESTAMP_ISSET_ID = 7;
  private static final int ___PROJECTEDPOINTVALUE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TRIGGER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("_triggerNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_pointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._LAST_POINT_VALUE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("_lastPointValueTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._NORMAL_STATE, new org.apache.thrift.meta_data.FieldMetaData("_normalState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("_threshold", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._PEAK_POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_peakPointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._LAST_PEAK_POINT_VALUE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("_lastPeakPointValueTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._PROJECTED_POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_projectedPointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMDynamicTriggerData.class, metaDataMap);
  }

  public LMDynamicTriggerData() {
  }

  public LMDynamicTriggerData(
    int _paoId,
    int _triggerNumber,
    double _pointValue,
    long _lastPointValueTimestamp,
    int _normalState,
    double _threshold,
    double _peakPointValue,
    long _lastPeakPointValueTimestamp,
    double _projectedPointValue)
  {
    this();
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._triggerNumber = _triggerNumber;
    set_triggerNumberIsSet(true);
    this._pointValue = _pointValue;
    set_pointValueIsSet(true);
    this._lastPointValueTimestamp = _lastPointValueTimestamp;
    set_lastPointValueTimestampIsSet(true);
    this._normalState = _normalState;
    set_normalStateIsSet(true);
    this._threshold = _threshold;
    set_thresholdIsSet(true);
    this._peakPointValue = _peakPointValue;
    set_peakPointValueIsSet(true);
    this._lastPeakPointValueTimestamp = _lastPeakPointValueTimestamp;
    set_lastPeakPointValueTimestampIsSet(true);
    this._projectedPointValue = _projectedPointValue;
    set_projectedPointValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMDynamicTriggerData(LMDynamicTriggerData other) {
    __isset_bitfield = other.__isset_bitfield;
    this._paoId = other._paoId;
    this._triggerNumber = other._triggerNumber;
    this._pointValue = other._pointValue;
    this._lastPointValueTimestamp = other._lastPointValueTimestamp;
    this._normalState = other._normalState;
    this._threshold = other._threshold;
    this._peakPointValue = other._peakPointValue;
    this._lastPeakPointValueTimestamp = other._lastPeakPointValueTimestamp;
    this._projectedPointValue = other._projectedPointValue;
  }

  public LMDynamicTriggerData deepCopy() {
    return new LMDynamicTriggerData(this);
  }

  @Override
  public void clear() {
    set_paoIdIsSet(false);
    this._paoId = 0;
    set_triggerNumberIsSet(false);
    this._triggerNumber = 0;
    set_pointValueIsSet(false);
    this._pointValue = 0.0;
    set_lastPointValueTimestampIsSet(false);
    this._lastPointValueTimestamp = 0;
    set_normalStateIsSet(false);
    this._normalState = 0;
    set_thresholdIsSet(false);
    this._threshold = 0.0;
    set_peakPointValueIsSet(false);
    this._peakPointValue = 0.0;
    set_lastPeakPointValueTimestampIsSet(false);
    this._lastPeakPointValueTimestamp = 0;
    set_projectedPointValueIsSet(false);
    this._projectedPointValue = 0.0;
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public int get_triggerNumber() {
    return this._triggerNumber;
  }

  public void set_triggerNumber(int _triggerNumber) {
    this._triggerNumber = _triggerNumber;
    set_triggerNumberIsSet(true);
  }

  public void unset_triggerNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TRIGGERNUMBER_ISSET_ID);
  }

  /** Returns true if field _triggerNumber is set (has been assigned a value) and false otherwise */
  public boolean isSet_triggerNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TRIGGERNUMBER_ISSET_ID);
  }

  public void set_triggerNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TRIGGERNUMBER_ISSET_ID, value);
  }

  public double get_pointValue() {
    return this._pointValue;
  }

  public void set_pointValue(double _pointValue) {
    this._pointValue = _pointValue;
    set_pointValueIsSet(true);
  }

  public void unset_pointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___POINTVALUE_ISSET_ID);
  }

  /** Returns true if field _pointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_pointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___POINTVALUE_ISSET_ID);
  }

  public void set_pointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___POINTVALUE_ISSET_ID, value);
  }

  public long get_lastPointValueTimestamp() {
    return this._lastPointValueTimestamp;
  }

  public void set_lastPointValueTimestamp(long _lastPointValueTimestamp) {
    this._lastPointValueTimestamp = _lastPointValueTimestamp;
    set_lastPointValueTimestampIsSet(true);
  }

  public void unset_lastPointValueTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTPOINTVALUETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field _lastPointValueTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastPointValueTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTPOINTVALUETIMESTAMP_ISSET_ID);
  }

  public void set_lastPointValueTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTPOINTVALUETIMESTAMP_ISSET_ID, value);
  }

  public int get_normalState() {
    return this._normalState;
  }

  public void set_normalState(int _normalState) {
    this._normalState = _normalState;
    set_normalStateIsSet(true);
  }

  public void unset_normalState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___NORMALSTATE_ISSET_ID);
  }

  /** Returns true if field _normalState is set (has been assigned a value) and false otherwise */
  public boolean isSet_normalState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___NORMALSTATE_ISSET_ID);
  }

  public void set_normalStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___NORMALSTATE_ISSET_ID, value);
  }

  public double get_threshold() {
    return this._threshold;
  }

  public void set_threshold(double _threshold) {
    this._threshold = _threshold;
    set_thresholdIsSet(true);
  }

  public void unset_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___THRESHOLD_ISSET_ID);
  }

  /** Returns true if field _threshold is set (has been assigned a value) and false otherwise */
  public boolean isSet_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___THRESHOLD_ISSET_ID);
  }

  public void set_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___THRESHOLD_ISSET_ID, value);
  }

  public double get_peakPointValue() {
    return this._peakPointValue;
  }

  public void set_peakPointValue(double _peakPointValue) {
    this._peakPointValue = _peakPointValue;
    set_peakPointValueIsSet(true);
  }

  public void unset_peakPointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PEAKPOINTVALUE_ISSET_ID);
  }

  /** Returns true if field _peakPointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_peakPointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PEAKPOINTVALUE_ISSET_ID);
  }

  public void set_peakPointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PEAKPOINTVALUE_ISSET_ID, value);
  }

  public long get_lastPeakPointValueTimestamp() {
    return this._lastPeakPointValueTimestamp;
  }

  public void set_lastPeakPointValueTimestamp(long _lastPeakPointValueTimestamp) {
    this._lastPeakPointValueTimestamp = _lastPeakPointValueTimestamp;
    set_lastPeakPointValueTimestampIsSet(true);
  }

  public void unset_lastPeakPointValueTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTPEAKPOINTVALUETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field _lastPeakPointValueTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastPeakPointValueTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTPEAKPOINTVALUETIMESTAMP_ISSET_ID);
  }

  public void set_lastPeakPointValueTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTPEAKPOINTVALUETIMESTAMP_ISSET_ID, value);
  }

  public double get_projectedPointValue() {
    return this._projectedPointValue;
  }

  public void set_projectedPointValue(double _projectedPointValue) {
    this._projectedPointValue = _projectedPointValue;
    set_projectedPointValueIsSet(true);
  }

  public void unset_projectedPointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PROJECTEDPOINTVALUE_ISSET_ID);
  }

  /** Returns true if field _projectedPointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_projectedPointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PROJECTEDPOINTVALUE_ISSET_ID);
  }

  public void set_projectedPointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PROJECTEDPOINTVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((java.lang.Integer)value);
      }
      break;

    case _TRIGGER_NUMBER:
      if (value == null) {
        unset_triggerNumber();
      } else {
        set_triggerNumber((java.lang.Integer)value);
      }
      break;

    case _POINT_VALUE:
      if (value == null) {
        unset_pointValue();
      } else {
        set_pointValue((java.lang.Double)value);
      }
      break;

    case _LAST_POINT_VALUE_TIMESTAMP:
      if (value == null) {
        unset_lastPointValueTimestamp();
      } else {
        set_lastPointValueTimestamp((java.lang.Long)value);
      }
      break;

    case _NORMAL_STATE:
      if (value == null) {
        unset_normalState();
      } else {
        set_normalState((java.lang.Integer)value);
      }
      break;

    case _THRESHOLD:
      if (value == null) {
        unset_threshold();
      } else {
        set_threshold((java.lang.Double)value);
      }
      break;

    case _PEAK_POINT_VALUE:
      if (value == null) {
        unset_peakPointValue();
      } else {
        set_peakPointValue((java.lang.Double)value);
      }
      break;

    case _LAST_PEAK_POINT_VALUE_TIMESTAMP:
      if (value == null) {
        unset_lastPeakPointValueTimestamp();
      } else {
        set_lastPeakPointValueTimestamp((java.lang.Long)value);
      }
      break;

    case _PROJECTED_POINT_VALUE:
      if (value == null) {
        unset_projectedPointValue();
      } else {
        set_projectedPointValue((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _PAO_ID:
      return get_paoId();

    case _TRIGGER_NUMBER:
      return get_triggerNumber();

    case _POINT_VALUE:
      return get_pointValue();

    case _LAST_POINT_VALUE_TIMESTAMP:
      return get_lastPointValueTimestamp();

    case _NORMAL_STATE:
      return get_normalState();

    case _THRESHOLD:
      return get_threshold();

    case _PEAK_POINT_VALUE:
      return get_peakPointValue();

    case _LAST_PEAK_POINT_VALUE_TIMESTAMP:
      return get_lastPeakPointValueTimestamp();

    case _PROJECTED_POINT_VALUE:
      return get_projectedPointValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _PAO_ID:
      return isSet_paoId();
    case _TRIGGER_NUMBER:
      return isSet_triggerNumber();
    case _POINT_VALUE:
      return isSet_pointValue();
    case _LAST_POINT_VALUE_TIMESTAMP:
      return isSet_lastPointValueTimestamp();
    case _NORMAL_STATE:
      return isSet_normalState();
    case _THRESHOLD:
      return isSet_threshold();
    case _PEAK_POINT_VALUE:
      return isSet_peakPointValue();
    case _LAST_PEAK_POINT_VALUE_TIMESTAMP:
      return isSet_lastPeakPointValueTimestamp();
    case _PROJECTED_POINT_VALUE:
      return isSet_projectedPointValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LMDynamicTriggerData)
      return this.equals((LMDynamicTriggerData)that);
    return false;
  }

  public boolean equals(LMDynamicTriggerData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__triggerNumber = true;
    boolean that_present__triggerNumber = true;
    if (this_present__triggerNumber || that_present__triggerNumber) {
      if (!(this_present__triggerNumber && that_present__triggerNumber))
        return false;
      if (this._triggerNumber != that._triggerNumber)
        return false;
    }

    boolean this_present__pointValue = true;
    boolean that_present__pointValue = true;
    if (this_present__pointValue || that_present__pointValue) {
      if (!(this_present__pointValue && that_present__pointValue))
        return false;
      if (this._pointValue != that._pointValue)
        return false;
    }

    boolean this_present__lastPointValueTimestamp = true;
    boolean that_present__lastPointValueTimestamp = true;
    if (this_present__lastPointValueTimestamp || that_present__lastPointValueTimestamp) {
      if (!(this_present__lastPointValueTimestamp && that_present__lastPointValueTimestamp))
        return false;
      if (this._lastPointValueTimestamp != that._lastPointValueTimestamp)
        return false;
    }

    boolean this_present__normalState = true;
    boolean that_present__normalState = true;
    if (this_present__normalState || that_present__normalState) {
      if (!(this_present__normalState && that_present__normalState))
        return false;
      if (this._normalState != that._normalState)
        return false;
    }

    boolean this_present__threshold = true;
    boolean that_present__threshold = true;
    if (this_present__threshold || that_present__threshold) {
      if (!(this_present__threshold && that_present__threshold))
        return false;
      if (this._threshold != that._threshold)
        return false;
    }

    boolean this_present__peakPointValue = true;
    boolean that_present__peakPointValue = true;
    if (this_present__peakPointValue || that_present__peakPointValue) {
      if (!(this_present__peakPointValue && that_present__peakPointValue))
        return false;
      if (this._peakPointValue != that._peakPointValue)
        return false;
    }

    boolean this_present__lastPeakPointValueTimestamp = true;
    boolean that_present__lastPeakPointValueTimestamp = true;
    if (this_present__lastPeakPointValueTimestamp || that_present__lastPeakPointValueTimestamp) {
      if (!(this_present__lastPeakPointValueTimestamp && that_present__lastPeakPointValueTimestamp))
        return false;
      if (this._lastPeakPointValueTimestamp != that._lastPeakPointValueTimestamp)
        return false;
    }

    boolean this_present__projectedPointValue = true;
    boolean that_present__projectedPointValue = true;
    if (this_present__projectedPointValue || that_present__projectedPointValue) {
      if (!(this_present__projectedPointValue && that_present__projectedPointValue))
        return false;
      if (this._projectedPointValue != that._projectedPointValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + _paoId;

    hashCode = hashCode * 8191 + _triggerNumber;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_pointValue);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastPointValueTimestamp);

    hashCode = hashCode * 8191 + _normalState;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_threshold);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_peakPointValue);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastPeakPointValueTimestamp);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_projectedPointValue);

    return hashCode;
  }

  @Override
  public int compareTo(LMDynamicTriggerData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_paoId()).compareTo(other.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, other._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_triggerNumber()).compareTo(other.isSet_triggerNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_triggerNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._triggerNumber, other._triggerNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_pointValue()).compareTo(other.isSet_pointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_pointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._pointValue, other._pointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lastPointValueTimestamp()).compareTo(other.isSet_lastPointValueTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastPointValueTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastPointValueTimestamp, other._lastPointValueTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_normalState()).compareTo(other.isSet_normalState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_normalState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._normalState, other._normalState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_threshold()).compareTo(other.isSet_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._threshold, other._threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_peakPointValue()).compareTo(other.isSet_peakPointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_peakPointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._peakPointValue, other._peakPointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lastPeakPointValueTimestamp()).compareTo(other.isSet_lastPeakPointValueTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastPeakPointValueTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastPeakPointValueTimestamp, other._lastPeakPointValueTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_projectedPointValue()).compareTo(other.isSet_projectedPointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_projectedPointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._projectedPointValue, other._projectedPointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LMDynamicTriggerData(");
    boolean first = true;

    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_triggerNumber:");
    sb.append(this._triggerNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_pointValue:");
    sb.append(this._pointValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastPointValueTimestamp:");
    sb.append(this._lastPointValueTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_normalState:");
    sb.append(this._normalState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_threshold:");
    sb.append(this._threshold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_peakPointValue:");
    sb.append(this._peakPointValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastPeakPointValueTimestamp:");
    sb.append(this._lastPeakPointValueTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_projectedPointValue:");
    sb.append(this._projectedPointValue);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_triggerNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_triggerNumber' is unset! Struct:" + toString());
    }

    if (!isSet_pointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_pointValue' is unset! Struct:" + toString());
    }

    if (!isSet_lastPointValueTimestamp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastPointValueTimestamp' is unset! Struct:" + toString());
    }

    if (!isSet_normalState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_normalState' is unset! Struct:" + toString());
    }

    if (!isSet_threshold()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_threshold' is unset! Struct:" + toString());
    }

    if (!isSet_peakPointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_peakPointValue' is unset! Struct:" + toString());
    }

    if (!isSet_lastPeakPointValueTimestamp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastPeakPointValueTimestamp' is unset! Struct:" + toString());
    }

    if (!isSet_projectedPointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_projectedPointValue' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMDynamicTriggerDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMDynamicTriggerDataStandardScheme getScheme() {
      return new LMDynamicTriggerDataStandardScheme();
    }
  }

  private static class LMDynamicTriggerDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<LMDynamicTriggerData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMDynamicTriggerData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _TRIGGER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._triggerNumber = iprot.readI32();
              struct.set_triggerNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._pointValue = iprot.readDouble();
              struct.set_pointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _LAST_POINT_VALUE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastPointValueTimestamp = iprot.readI64();
              struct.set_lastPointValueTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _NORMAL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._normalState = iprot.readI32();
              struct.set_normalStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._threshold = iprot.readDouble();
              struct.set_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _PEAK_POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._peakPointValue = iprot.readDouble();
              struct.set_peakPointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _LAST_PEAK_POINT_VALUE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastPeakPointValueTimestamp = iprot.readI64();
              struct.set_lastPeakPointValueTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _PROJECTED_POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._projectedPointValue = iprot.readDouble();
              struct.set_projectedPointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMDynamicTriggerData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TRIGGER_NUMBER_FIELD_DESC);
      oprot.writeI32(struct._triggerNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._pointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_POINT_VALUE_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct._lastPointValueTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NORMAL_STATE_FIELD_DESC);
      oprot.writeI32(struct._normalState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_THRESHOLD_FIELD_DESC);
      oprot.writeDouble(struct._threshold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PEAK_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._peakPointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_PEAK_POINT_VALUE_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct._lastPeakPointValueTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PROJECTED_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._projectedPointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMDynamicTriggerDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMDynamicTriggerDataTupleScheme getScheme() {
      return new LMDynamicTriggerDataTupleScheme();
    }
  }

  private static class LMDynamicTriggerDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<LMDynamicTriggerData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMDynamicTriggerData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct._paoId);
      oprot.writeI32(struct._triggerNumber);
      oprot.writeDouble(struct._pointValue);
      oprot.writeI64(struct._lastPointValueTimestamp);
      oprot.writeI32(struct._normalState);
      oprot.writeDouble(struct._threshold);
      oprot.writeDouble(struct._peakPointValue);
      oprot.writeI64(struct._lastPeakPointValueTimestamp);
      oprot.writeDouble(struct._projectedPointValue);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMDynamicTriggerData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._triggerNumber = iprot.readI32();
      struct.set_triggerNumberIsSet(true);
      struct._pointValue = iprot.readDouble();
      struct.set_pointValueIsSet(true);
      struct._lastPointValueTimestamp = iprot.readI64();
      struct.set_lastPointValueTimestampIsSet(true);
      struct._normalState = iprot.readI32();
      struct.set_normalStateIsSet(true);
      struct._threshold = iprot.readDouble();
      struct.set_thresholdIsSet(true);
      struct._peakPointValue = iprot.readDouble();
      struct.set_peakPointValueIsSet(true);
      struct._lastPeakPointValueTimestamp = iprot.readI64();
      struct.set_lastPeakPointValueTimestampIsSet(true);
      struct._projectedPointValue = iprot.readDouble();
      struct.set_projectedPointValueIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


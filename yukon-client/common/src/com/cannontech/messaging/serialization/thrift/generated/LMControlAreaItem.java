/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-12-16")
public class LMControlAreaItem implements org.apache.thrift.TBase<LMControlAreaItem, LMControlAreaItem._Fields>, java.io.Serializable, Cloneable, Comparable<LMControlAreaItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMControlAreaItem");

  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _PAO_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoCategory", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _PAO_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoClass", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _PAO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField _PAO_TYPE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoTypeString", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField _PAO_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoDescription", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField _DISABLE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_disableFlag", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField _DEF_OPERATIONAL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_defOperationalState", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField _CONTROL_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlInterval", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField _MIN_RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_minResponseTime", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField _DEF_DAILY_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_defDailyStartTime", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField _DEF_DAILY_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_defDailyStopTime", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField _REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_requireAllTriggersActiveFlag", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField _NEXT_CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_nextCheckTime", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField _NEW_POINT_DATA_RECEIVED_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_newPointDataReceivedFlag", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField _UPDATED_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_updatedFlag", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField _CONTROL_AREA_STATUS_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlAreaStatusPointId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField _CONTROL_AREA_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlAreaState", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField _CURRENT_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentPriority", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField _CURRENT_DAILY_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentDailyStartTime", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField _CURRENT_DAILY_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentDailyStopTime", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField _LM_CONTROL_AREA_TRIGGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("_lmControlAreaTriggers", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField _LM_PROGRAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("_lmPrograms", org.apache.thrift.protocol.TType.LIST, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LMControlAreaItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LMControlAreaItemTupleSchemeFactory();

  private int _paoId; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoCategory; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoClass; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoTypeString; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _paoDescription; // required
  private boolean _disableFlag; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _defOperationalState; // required
  private int _controlInterval; // required
  private int _minResponseTime; // required
  private int _defDailyStartTime; // required
  private int _defDailyStopTime; // required
  private boolean _requireAllTriggersActiveFlag; // required
  private long _nextCheckTime; // required
  private boolean _newPointDataReceivedFlag; // required
  private boolean _updatedFlag; // required
  private int _controlAreaStatusPointId; // required
  private int _controlAreaState; // required
  private int _currentPriority; // required
  private int _currentDailyStartTime; // required
  private int _currentDailyStopTime; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<LMControlAreaTrigger> _lmControlAreaTriggers; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<com.cannontech.messaging.serialization.thrift.generated.GenericMessage> _lmPrograms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PAO_ID((short)1, "_paoId"),
    _PAO_CATEGORY((short)2, "_paoCategory"),
    _PAO_CLASS((short)3, "_paoClass"),
    _PAO_NAME((short)4, "_paoName"),
    _PAO_TYPE_STRING((short)5, "_paoTypeString"),
    _PAO_DESCRIPTION((short)6, "_paoDescription"),
    _DISABLE_FLAG((short)7, "_disableFlag"),
    _DEF_OPERATIONAL_STATE((short)8, "_defOperationalState"),
    _CONTROL_INTERVAL((short)9, "_controlInterval"),
    _MIN_RESPONSE_TIME((short)10, "_minResponseTime"),
    _DEF_DAILY_START_TIME((short)11, "_defDailyStartTime"),
    _DEF_DAILY_STOP_TIME((short)12, "_defDailyStopTime"),
    _REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG((short)13, "_requireAllTriggersActiveFlag"),
    _NEXT_CHECK_TIME((short)14, "_nextCheckTime"),
    _NEW_POINT_DATA_RECEIVED_FLAG((short)15, "_newPointDataReceivedFlag"),
    _UPDATED_FLAG((short)16, "_updatedFlag"),
    _CONTROL_AREA_STATUS_POINT_ID((short)17, "_controlAreaStatusPointId"),
    _CONTROL_AREA_STATE((short)18, "_controlAreaState"),
    _CURRENT_PRIORITY((short)19, "_currentPriority"),
    _CURRENT_DAILY_START_TIME((short)20, "_currentDailyStartTime"),
    _CURRENT_DAILY_STOP_TIME((short)21, "_currentDailyStopTime"),
    _LM_CONTROL_AREA_TRIGGERS((short)22, "_lmControlAreaTriggers"),
    _LM_PROGRAMS((short)23, "_lmPrograms");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PAO_ID
          return _PAO_ID;
        case 2: // _PAO_CATEGORY
          return _PAO_CATEGORY;
        case 3: // _PAO_CLASS
          return _PAO_CLASS;
        case 4: // _PAO_NAME
          return _PAO_NAME;
        case 5: // _PAO_TYPE_STRING
          return _PAO_TYPE_STRING;
        case 6: // _PAO_DESCRIPTION
          return _PAO_DESCRIPTION;
        case 7: // _DISABLE_FLAG
          return _DISABLE_FLAG;
        case 8: // _DEF_OPERATIONAL_STATE
          return _DEF_OPERATIONAL_STATE;
        case 9: // _CONTROL_INTERVAL
          return _CONTROL_INTERVAL;
        case 10: // _MIN_RESPONSE_TIME
          return _MIN_RESPONSE_TIME;
        case 11: // _DEF_DAILY_START_TIME
          return _DEF_DAILY_START_TIME;
        case 12: // _DEF_DAILY_STOP_TIME
          return _DEF_DAILY_STOP_TIME;
        case 13: // _REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG
          return _REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG;
        case 14: // _NEXT_CHECK_TIME
          return _NEXT_CHECK_TIME;
        case 15: // _NEW_POINT_DATA_RECEIVED_FLAG
          return _NEW_POINT_DATA_RECEIVED_FLAG;
        case 16: // _UPDATED_FLAG
          return _UPDATED_FLAG;
        case 17: // _CONTROL_AREA_STATUS_POINT_ID
          return _CONTROL_AREA_STATUS_POINT_ID;
        case 18: // _CONTROL_AREA_STATE
          return _CONTROL_AREA_STATE;
        case 19: // _CURRENT_PRIORITY
          return _CURRENT_PRIORITY;
        case 20: // _CURRENT_DAILY_START_TIME
          return _CURRENT_DAILY_START_TIME;
        case 21: // _CURRENT_DAILY_STOP_TIME
          return _CURRENT_DAILY_STOP_TIME;
        case 22: // _LM_CONTROL_AREA_TRIGGERS
          return _LM_CONTROL_AREA_TRIGGERS;
        case 23: // _LM_PROGRAMS
          return _LM_PROGRAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___DISABLEFLAG_ISSET_ID = 1;
  private static final int ___CONTROLINTERVAL_ISSET_ID = 2;
  private static final int ___MINRESPONSETIME_ISSET_ID = 3;
  private static final int ___DEFDAILYSTARTTIME_ISSET_ID = 4;
  private static final int ___DEFDAILYSTOPTIME_ISSET_ID = 5;
  private static final int ___REQUIREALLTRIGGERSACTIVEFLAG_ISSET_ID = 6;
  private static final int ___NEXTCHECKTIME_ISSET_ID = 7;
  private static final int ___NEWPOINTDATARECEIVEDFLAG_ISSET_ID = 8;
  private static final int ___UPDATEDFLAG_ISSET_ID = 9;
  private static final int ___CONTROLAREASTATUSPOINTID_ISSET_ID = 10;
  private static final int ___CONTROLAREASTATE_ISSET_ID = 11;
  private static final int ___CURRENTPRIORITY_ISSET_ID = 12;
  private static final int ___CURRENTDAILYSTARTTIME_ISSET_ID = 13;
  private static final int ___CURRENTDAILYSTOPTIME_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PAO_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("_paoCategory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_CLASS, new org.apache.thrift.meta_data.FieldMetaData("_paoClass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_NAME, new org.apache.thrift.meta_data.FieldMetaData("_paoName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_TYPE_STRING, new org.apache.thrift.meta_data.FieldMetaData("_paoTypeString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("_paoDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._DISABLE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_disableFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._DEF_OPERATIONAL_STATE, new org.apache.thrift.meta_data.FieldMetaData("_defOperationalState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._CONTROL_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("_controlInterval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MIN_RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_minResponseTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._DEF_DAILY_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("_defDailyStartTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._DEF_DAILY_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("_defDailyStopTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_requireAllTriggersActiveFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._NEXT_CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("_nextCheckTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._NEW_POINT_DATA_RECEIVED_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_newPointDataReceivedFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._UPDATED_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_updatedFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._CONTROL_AREA_STATUS_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_controlAreaStatusPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONTROL_AREA_STATE, new org.apache.thrift.meta_data.FieldMetaData("_controlAreaState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("_currentPriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_DAILY_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("_currentDailyStartTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_DAILY_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("_currentDailyStopTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._LM_CONTROL_AREA_TRIGGERS, new org.apache.thrift.meta_data.FieldMetaData("_lmControlAreaTriggers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LMControlAreaTrigger.class))));
    tmpMap.put(_Fields._LM_PROGRAMS, new org.apache.thrift.meta_data.FieldMetaData("_lmPrograms", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.GenericMessage.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMControlAreaItem.class, metaDataMap);
  }

  public LMControlAreaItem() {
  }

  public LMControlAreaItem(
    int _paoId,
    java.lang.String _paoCategory,
    java.lang.String _paoClass,
    java.lang.String _paoName,
    java.lang.String _paoTypeString,
    java.lang.String _paoDescription,
    boolean _disableFlag,
    java.lang.String _defOperationalState,
    int _controlInterval,
    int _minResponseTime,
    int _defDailyStartTime,
    int _defDailyStopTime,
    boolean _requireAllTriggersActiveFlag,
    long _nextCheckTime,
    boolean _newPointDataReceivedFlag,
    boolean _updatedFlag,
    int _controlAreaStatusPointId,
    int _controlAreaState,
    int _currentPriority,
    int _currentDailyStartTime,
    int _currentDailyStopTime,
    java.util.List<LMControlAreaTrigger> _lmControlAreaTriggers,
    java.util.List<com.cannontech.messaging.serialization.thrift.generated.GenericMessage> _lmPrograms)
  {
    this();
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._paoCategory = _paoCategory;
    this._paoClass = _paoClass;
    this._paoName = _paoName;
    this._paoTypeString = _paoTypeString;
    this._paoDescription = _paoDescription;
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
    this._defOperationalState = _defOperationalState;
    this._controlInterval = _controlInterval;
    set_controlIntervalIsSet(true);
    this._minResponseTime = _minResponseTime;
    set_minResponseTimeIsSet(true);
    this._defDailyStartTime = _defDailyStartTime;
    set_defDailyStartTimeIsSet(true);
    this._defDailyStopTime = _defDailyStopTime;
    set_defDailyStopTimeIsSet(true);
    this._requireAllTriggersActiveFlag = _requireAllTriggersActiveFlag;
    set_requireAllTriggersActiveFlagIsSet(true);
    this._nextCheckTime = _nextCheckTime;
    set_nextCheckTimeIsSet(true);
    this._newPointDataReceivedFlag = _newPointDataReceivedFlag;
    set_newPointDataReceivedFlagIsSet(true);
    this._updatedFlag = _updatedFlag;
    set_updatedFlagIsSet(true);
    this._controlAreaStatusPointId = _controlAreaStatusPointId;
    set_controlAreaStatusPointIdIsSet(true);
    this._controlAreaState = _controlAreaState;
    set_controlAreaStateIsSet(true);
    this._currentPriority = _currentPriority;
    set_currentPriorityIsSet(true);
    this._currentDailyStartTime = _currentDailyStartTime;
    set_currentDailyStartTimeIsSet(true);
    this._currentDailyStopTime = _currentDailyStopTime;
    set_currentDailyStopTimeIsSet(true);
    this._lmControlAreaTriggers = _lmControlAreaTriggers;
    this._lmPrograms = _lmPrograms;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMControlAreaItem(LMControlAreaItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this._paoId = other._paoId;
    if (other.isSet_paoCategory()) {
      this._paoCategory = other._paoCategory;
    }
    if (other.isSet_paoClass()) {
      this._paoClass = other._paoClass;
    }
    if (other.isSet_paoName()) {
      this._paoName = other._paoName;
    }
    if (other.isSet_paoTypeString()) {
      this._paoTypeString = other._paoTypeString;
    }
    if (other.isSet_paoDescription()) {
      this._paoDescription = other._paoDescription;
    }
    this._disableFlag = other._disableFlag;
    if (other.isSet_defOperationalState()) {
      this._defOperationalState = other._defOperationalState;
    }
    this._controlInterval = other._controlInterval;
    this._minResponseTime = other._minResponseTime;
    this._defDailyStartTime = other._defDailyStartTime;
    this._defDailyStopTime = other._defDailyStopTime;
    this._requireAllTriggersActiveFlag = other._requireAllTriggersActiveFlag;
    this._nextCheckTime = other._nextCheckTime;
    this._newPointDataReceivedFlag = other._newPointDataReceivedFlag;
    this._updatedFlag = other._updatedFlag;
    this._controlAreaStatusPointId = other._controlAreaStatusPointId;
    this._controlAreaState = other._controlAreaState;
    this._currentPriority = other._currentPriority;
    this._currentDailyStartTime = other._currentDailyStartTime;
    this._currentDailyStopTime = other._currentDailyStopTime;
    if (other.isSet_lmControlAreaTriggers()) {
      java.util.List<LMControlAreaTrigger> __this___lmControlAreaTriggers = new java.util.ArrayList<LMControlAreaTrigger>(other._lmControlAreaTriggers.size());
      for (LMControlAreaTrigger other_element : other._lmControlAreaTriggers) {
        __this___lmControlAreaTriggers.add(new LMControlAreaTrigger(other_element));
      }
      this._lmControlAreaTriggers = __this___lmControlAreaTriggers;
    }
    if (other.isSet_lmPrograms()) {
      java.util.List<com.cannontech.messaging.serialization.thrift.generated.GenericMessage> __this___lmPrograms = new java.util.ArrayList<com.cannontech.messaging.serialization.thrift.generated.GenericMessage>(other._lmPrograms.size());
      for (com.cannontech.messaging.serialization.thrift.generated.GenericMessage other_element : other._lmPrograms) {
        __this___lmPrograms.add(new com.cannontech.messaging.serialization.thrift.generated.GenericMessage(other_element));
      }
      this._lmPrograms = __this___lmPrograms;
    }
  }

  public LMControlAreaItem deepCopy() {
    return new LMControlAreaItem(this);
  }

  @Override
  public void clear() {
    set_paoIdIsSet(false);
    this._paoId = 0;
    this._paoCategory = null;
    this._paoClass = null;
    this._paoName = null;
    this._paoTypeString = null;
    this._paoDescription = null;
    set_disableFlagIsSet(false);
    this._disableFlag = false;
    this._defOperationalState = null;
    set_controlIntervalIsSet(false);
    this._controlInterval = 0;
    set_minResponseTimeIsSet(false);
    this._minResponseTime = 0;
    set_defDailyStartTimeIsSet(false);
    this._defDailyStartTime = 0;
    set_defDailyStopTimeIsSet(false);
    this._defDailyStopTime = 0;
    set_requireAllTriggersActiveFlagIsSet(false);
    this._requireAllTriggersActiveFlag = false;
    set_nextCheckTimeIsSet(false);
    this._nextCheckTime = 0;
    set_newPointDataReceivedFlagIsSet(false);
    this._newPointDataReceivedFlag = false;
    set_updatedFlagIsSet(false);
    this._updatedFlag = false;
    set_controlAreaStatusPointIdIsSet(false);
    this._controlAreaStatusPointId = 0;
    set_controlAreaStateIsSet(false);
    this._controlAreaState = 0;
    set_currentPriorityIsSet(false);
    this._currentPriority = 0;
    set_currentDailyStartTimeIsSet(false);
    this._currentDailyStartTime = 0;
    set_currentDailyStopTimeIsSet(false);
    this._currentDailyStopTime = 0;
    this._lmControlAreaTriggers = null;
    this._lmPrograms = null;
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoCategory() {
    return this._paoCategory;
  }

  public void set_paoCategory(@org.apache.thrift.annotation.Nullable java.lang.String _paoCategory) {
    this._paoCategory = _paoCategory;
  }

  public void unset_paoCategory() {
    this._paoCategory = null;
  }

  /** Returns true if field _paoCategory is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoCategory() {
    return this._paoCategory != null;
  }

  public void set_paoCategoryIsSet(boolean value) {
    if (!value) {
      this._paoCategory = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoClass() {
    return this._paoClass;
  }

  public void set_paoClass(@org.apache.thrift.annotation.Nullable java.lang.String _paoClass) {
    this._paoClass = _paoClass;
  }

  public void unset_paoClass() {
    this._paoClass = null;
  }

  /** Returns true if field _paoClass is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoClass() {
    return this._paoClass != null;
  }

  public void set_paoClassIsSet(boolean value) {
    if (!value) {
      this._paoClass = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoName() {
    return this._paoName;
  }

  public void set_paoName(@org.apache.thrift.annotation.Nullable java.lang.String _paoName) {
    this._paoName = _paoName;
  }

  public void unset_paoName() {
    this._paoName = null;
  }

  /** Returns true if field _paoName is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoName() {
    return this._paoName != null;
  }

  public void set_paoNameIsSet(boolean value) {
    if (!value) {
      this._paoName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoTypeString() {
    return this._paoTypeString;
  }

  public void set_paoTypeString(@org.apache.thrift.annotation.Nullable java.lang.String _paoTypeString) {
    this._paoTypeString = _paoTypeString;
  }

  public void unset_paoTypeString() {
    this._paoTypeString = null;
  }

  /** Returns true if field _paoTypeString is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoTypeString() {
    return this._paoTypeString != null;
  }

  public void set_paoTypeStringIsSet(boolean value) {
    if (!value) {
      this._paoTypeString = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_paoDescription() {
    return this._paoDescription;
  }

  public void set_paoDescription(@org.apache.thrift.annotation.Nullable java.lang.String _paoDescription) {
    this._paoDescription = _paoDescription;
  }

  public void unset_paoDescription() {
    this._paoDescription = null;
  }

  /** Returns true if field _paoDescription is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoDescription() {
    return this._paoDescription != null;
  }

  public void set_paoDescriptionIsSet(boolean value) {
    if (!value) {
      this._paoDescription = null;
    }
  }

  public boolean is_disableFlag() {
    return this._disableFlag;
  }

  public void set_disableFlag(boolean _disableFlag) {
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
  }

  public void unset_disableFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  /** Returns true if field _disableFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_disableFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  public void set_disableFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_defOperationalState() {
    return this._defOperationalState;
  }

  public void set_defOperationalState(@org.apache.thrift.annotation.Nullable java.lang.String _defOperationalState) {
    this._defOperationalState = _defOperationalState;
  }

  public void unset_defOperationalState() {
    this._defOperationalState = null;
  }

  /** Returns true if field _defOperationalState is set (has been assigned a value) and false otherwise */
  public boolean isSet_defOperationalState() {
    return this._defOperationalState != null;
  }

  public void set_defOperationalStateIsSet(boolean value) {
    if (!value) {
      this._defOperationalState = null;
    }
  }

  public int get_controlInterval() {
    return this._controlInterval;
  }

  public void set_controlInterval(int _controlInterval) {
    this._controlInterval = _controlInterval;
    set_controlIntervalIsSet(true);
  }

  public void unset_controlInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLINTERVAL_ISSET_ID);
  }

  /** Returns true if field _controlInterval is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLINTERVAL_ISSET_ID);
  }

  public void set_controlIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLINTERVAL_ISSET_ID, value);
  }

  public int get_minResponseTime() {
    return this._minResponseTime;
  }

  public void set_minResponseTime(int _minResponseTime) {
    this._minResponseTime = _minResponseTime;
    set_minResponseTimeIsSet(true);
  }

  public void unset_minResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MINRESPONSETIME_ISSET_ID);
  }

  /** Returns true if field _minResponseTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_minResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MINRESPONSETIME_ISSET_ID);
  }

  public void set_minResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MINRESPONSETIME_ISSET_ID, value);
  }

  public int get_defDailyStartTime() {
    return this._defDailyStartTime;
  }

  public void set_defDailyStartTime(int _defDailyStartTime) {
    this._defDailyStartTime = _defDailyStartTime;
    set_defDailyStartTimeIsSet(true);
  }

  public void unset_defDailyStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DEFDAILYSTARTTIME_ISSET_ID);
  }

  /** Returns true if field _defDailyStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_defDailyStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DEFDAILYSTARTTIME_ISSET_ID);
  }

  public void set_defDailyStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DEFDAILYSTARTTIME_ISSET_ID, value);
  }

  public int get_defDailyStopTime() {
    return this._defDailyStopTime;
  }

  public void set_defDailyStopTime(int _defDailyStopTime) {
    this._defDailyStopTime = _defDailyStopTime;
    set_defDailyStopTimeIsSet(true);
  }

  public void unset_defDailyStopTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DEFDAILYSTOPTIME_ISSET_ID);
  }

  /** Returns true if field _defDailyStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_defDailyStopTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DEFDAILYSTOPTIME_ISSET_ID);
  }

  public void set_defDailyStopTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DEFDAILYSTOPTIME_ISSET_ID, value);
  }

  public boolean is_requireAllTriggersActiveFlag() {
    return this._requireAllTriggersActiveFlag;
  }

  public void set_requireAllTriggersActiveFlag(boolean _requireAllTriggersActiveFlag) {
    this._requireAllTriggersActiveFlag = _requireAllTriggersActiveFlag;
    set_requireAllTriggersActiveFlagIsSet(true);
  }

  public void unset_requireAllTriggersActiveFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___REQUIREALLTRIGGERSACTIVEFLAG_ISSET_ID);
  }

  /** Returns true if field _requireAllTriggersActiveFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_requireAllTriggersActiveFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___REQUIREALLTRIGGERSACTIVEFLAG_ISSET_ID);
  }

  public void set_requireAllTriggersActiveFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___REQUIREALLTRIGGERSACTIVEFLAG_ISSET_ID, value);
  }

  public long get_nextCheckTime() {
    return this._nextCheckTime;
  }

  public void set_nextCheckTime(long _nextCheckTime) {
    this._nextCheckTime = _nextCheckTime;
    set_nextCheckTimeIsSet(true);
  }

  public void unset_nextCheckTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___NEXTCHECKTIME_ISSET_ID);
  }

  /** Returns true if field _nextCheckTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_nextCheckTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___NEXTCHECKTIME_ISSET_ID);
  }

  public void set_nextCheckTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___NEXTCHECKTIME_ISSET_ID, value);
  }

  public boolean is_newPointDataReceivedFlag() {
    return this._newPointDataReceivedFlag;
  }

  public void set_newPointDataReceivedFlag(boolean _newPointDataReceivedFlag) {
    this._newPointDataReceivedFlag = _newPointDataReceivedFlag;
    set_newPointDataReceivedFlagIsSet(true);
  }

  public void unset_newPointDataReceivedFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___NEWPOINTDATARECEIVEDFLAG_ISSET_ID);
  }

  /** Returns true if field _newPointDataReceivedFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_newPointDataReceivedFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___NEWPOINTDATARECEIVEDFLAG_ISSET_ID);
  }

  public void set_newPointDataReceivedFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___NEWPOINTDATARECEIVEDFLAG_ISSET_ID, value);
  }

  public boolean is_updatedFlag() {
    return this._updatedFlag;
  }

  public void set_updatedFlag(boolean _updatedFlag) {
    this._updatedFlag = _updatedFlag;
    set_updatedFlagIsSet(true);
  }

  public void unset_updatedFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___UPDATEDFLAG_ISSET_ID);
  }

  /** Returns true if field _updatedFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_updatedFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___UPDATEDFLAG_ISSET_ID);
  }

  public void set_updatedFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___UPDATEDFLAG_ISSET_ID, value);
  }

  public int get_controlAreaStatusPointId() {
    return this._controlAreaStatusPointId;
  }

  public void set_controlAreaStatusPointId(int _controlAreaStatusPointId) {
    this._controlAreaStatusPointId = _controlAreaStatusPointId;
    set_controlAreaStatusPointIdIsSet(true);
  }

  public void unset_controlAreaStatusPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLAREASTATUSPOINTID_ISSET_ID);
  }

  /** Returns true if field _controlAreaStatusPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlAreaStatusPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLAREASTATUSPOINTID_ISSET_ID);
  }

  public void set_controlAreaStatusPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLAREASTATUSPOINTID_ISSET_ID, value);
  }

  public int get_controlAreaState() {
    return this._controlAreaState;
  }

  public void set_controlAreaState(int _controlAreaState) {
    this._controlAreaState = _controlAreaState;
    set_controlAreaStateIsSet(true);
  }

  public void unset_controlAreaState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLAREASTATE_ISSET_ID);
  }

  /** Returns true if field _controlAreaState is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlAreaState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLAREASTATE_ISSET_ID);
  }

  public void set_controlAreaStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLAREASTATE_ISSET_ID, value);
  }

  public int get_currentPriority() {
    return this._currentPriority;
  }

  public void set_currentPriority(int _currentPriority) {
    this._currentPriority = _currentPriority;
    set_currentPriorityIsSet(true);
  }

  public void unset_currentPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTPRIORITY_ISSET_ID);
  }

  /** Returns true if field _currentPriority is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTPRIORITY_ISSET_ID);
  }

  public void set_currentPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTPRIORITY_ISSET_ID, value);
  }

  public int get_currentDailyStartTime() {
    return this._currentDailyStartTime;
  }

  public void set_currentDailyStartTime(int _currentDailyStartTime) {
    this._currentDailyStartTime = _currentDailyStartTime;
    set_currentDailyStartTimeIsSet(true);
  }

  public void unset_currentDailyStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTDAILYSTARTTIME_ISSET_ID);
  }

  /** Returns true if field _currentDailyStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentDailyStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTDAILYSTARTTIME_ISSET_ID);
  }

  public void set_currentDailyStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTDAILYSTARTTIME_ISSET_ID, value);
  }

  public int get_currentDailyStopTime() {
    return this._currentDailyStopTime;
  }

  public void set_currentDailyStopTime(int _currentDailyStopTime) {
    this._currentDailyStopTime = _currentDailyStopTime;
    set_currentDailyStopTimeIsSet(true);
  }

  public void unset_currentDailyStopTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTDAILYSTOPTIME_ISSET_ID);
  }

  /** Returns true if field _currentDailyStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentDailyStopTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTDAILYSTOPTIME_ISSET_ID);
  }

  public void set_currentDailyStopTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTDAILYSTOPTIME_ISSET_ID, value);
  }

  public int get_lmControlAreaTriggersSize() {
    return (this._lmControlAreaTriggers == null) ? 0 : this._lmControlAreaTriggers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<LMControlAreaTrigger> get_lmControlAreaTriggersIterator() {
    return (this._lmControlAreaTriggers == null) ? null : this._lmControlAreaTriggers.iterator();
  }

  public void addTo_lmControlAreaTriggers(LMControlAreaTrigger elem) {
    if (this._lmControlAreaTriggers == null) {
      this._lmControlAreaTriggers = new java.util.ArrayList<LMControlAreaTrigger>();
    }
    this._lmControlAreaTriggers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<LMControlAreaTrigger> get_lmControlAreaTriggers() {
    return this._lmControlAreaTriggers;
  }

  public void set_lmControlAreaTriggers(@org.apache.thrift.annotation.Nullable java.util.List<LMControlAreaTrigger> _lmControlAreaTriggers) {
    this._lmControlAreaTriggers = _lmControlAreaTriggers;
  }

  public void unset_lmControlAreaTriggers() {
    this._lmControlAreaTriggers = null;
  }

  /** Returns true if field _lmControlAreaTriggers is set (has been assigned a value) and false otherwise */
  public boolean isSet_lmControlAreaTriggers() {
    return this._lmControlAreaTriggers != null;
  }

  public void set_lmControlAreaTriggersIsSet(boolean value) {
    if (!value) {
      this._lmControlAreaTriggers = null;
    }
  }

  public int get_lmProgramsSize() {
    return (this._lmPrograms == null) ? 0 : this._lmPrograms.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.cannontech.messaging.serialization.thrift.generated.GenericMessage> get_lmProgramsIterator() {
    return (this._lmPrograms == null) ? null : this._lmPrograms.iterator();
  }

  public void addTo_lmPrograms(com.cannontech.messaging.serialization.thrift.generated.GenericMessage elem) {
    if (this._lmPrograms == null) {
      this._lmPrograms = new java.util.ArrayList<com.cannontech.messaging.serialization.thrift.generated.GenericMessage>();
    }
    this._lmPrograms.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.cannontech.messaging.serialization.thrift.generated.GenericMessage> get_lmPrograms() {
    return this._lmPrograms;
  }

  public void set_lmPrograms(@org.apache.thrift.annotation.Nullable java.util.List<com.cannontech.messaging.serialization.thrift.generated.GenericMessage> _lmPrograms) {
    this._lmPrograms = _lmPrograms;
  }

  public void unset_lmPrograms() {
    this._lmPrograms = null;
  }

  /** Returns true if field _lmPrograms is set (has been assigned a value) and false otherwise */
  public boolean isSet_lmPrograms() {
    return this._lmPrograms != null;
  }

  public void set_lmProgramsIsSet(boolean value) {
    if (!value) {
      this._lmPrograms = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((java.lang.Integer)value);
      }
      break;

    case _PAO_CATEGORY:
      if (value == null) {
        unset_paoCategory();
      } else {
        set_paoCategory((java.lang.String)value);
      }
      break;

    case _PAO_CLASS:
      if (value == null) {
        unset_paoClass();
      } else {
        set_paoClass((java.lang.String)value);
      }
      break;

    case _PAO_NAME:
      if (value == null) {
        unset_paoName();
      } else {
        set_paoName((java.lang.String)value);
      }
      break;

    case _PAO_TYPE_STRING:
      if (value == null) {
        unset_paoTypeString();
      } else {
        set_paoTypeString((java.lang.String)value);
      }
      break;

    case _PAO_DESCRIPTION:
      if (value == null) {
        unset_paoDescription();
      } else {
        set_paoDescription((java.lang.String)value);
      }
      break;

    case _DISABLE_FLAG:
      if (value == null) {
        unset_disableFlag();
      } else {
        set_disableFlag((java.lang.Boolean)value);
      }
      break;

    case _DEF_OPERATIONAL_STATE:
      if (value == null) {
        unset_defOperationalState();
      } else {
        set_defOperationalState((java.lang.String)value);
      }
      break;

    case _CONTROL_INTERVAL:
      if (value == null) {
        unset_controlInterval();
      } else {
        set_controlInterval((java.lang.Integer)value);
      }
      break;

    case _MIN_RESPONSE_TIME:
      if (value == null) {
        unset_minResponseTime();
      } else {
        set_minResponseTime((java.lang.Integer)value);
      }
      break;

    case _DEF_DAILY_START_TIME:
      if (value == null) {
        unset_defDailyStartTime();
      } else {
        set_defDailyStartTime((java.lang.Integer)value);
      }
      break;

    case _DEF_DAILY_STOP_TIME:
      if (value == null) {
        unset_defDailyStopTime();
      } else {
        set_defDailyStopTime((java.lang.Integer)value);
      }
      break;

    case _REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG:
      if (value == null) {
        unset_requireAllTriggersActiveFlag();
      } else {
        set_requireAllTriggersActiveFlag((java.lang.Boolean)value);
      }
      break;

    case _NEXT_CHECK_TIME:
      if (value == null) {
        unset_nextCheckTime();
      } else {
        set_nextCheckTime((java.lang.Long)value);
      }
      break;

    case _NEW_POINT_DATA_RECEIVED_FLAG:
      if (value == null) {
        unset_newPointDataReceivedFlag();
      } else {
        set_newPointDataReceivedFlag((java.lang.Boolean)value);
      }
      break;

    case _UPDATED_FLAG:
      if (value == null) {
        unset_updatedFlag();
      } else {
        set_updatedFlag((java.lang.Boolean)value);
      }
      break;

    case _CONTROL_AREA_STATUS_POINT_ID:
      if (value == null) {
        unset_controlAreaStatusPointId();
      } else {
        set_controlAreaStatusPointId((java.lang.Integer)value);
      }
      break;

    case _CONTROL_AREA_STATE:
      if (value == null) {
        unset_controlAreaState();
      } else {
        set_controlAreaState((java.lang.Integer)value);
      }
      break;

    case _CURRENT_PRIORITY:
      if (value == null) {
        unset_currentPriority();
      } else {
        set_currentPriority((java.lang.Integer)value);
      }
      break;

    case _CURRENT_DAILY_START_TIME:
      if (value == null) {
        unset_currentDailyStartTime();
      } else {
        set_currentDailyStartTime((java.lang.Integer)value);
      }
      break;

    case _CURRENT_DAILY_STOP_TIME:
      if (value == null) {
        unset_currentDailyStopTime();
      } else {
        set_currentDailyStopTime((java.lang.Integer)value);
      }
      break;

    case _LM_CONTROL_AREA_TRIGGERS:
      if (value == null) {
        unset_lmControlAreaTriggers();
      } else {
        set_lmControlAreaTriggers((java.util.List<LMControlAreaTrigger>)value);
      }
      break;

    case _LM_PROGRAMS:
      if (value == null) {
        unset_lmPrograms();
      } else {
        set_lmPrograms((java.util.List<com.cannontech.messaging.serialization.thrift.generated.GenericMessage>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _PAO_ID:
      return get_paoId();

    case _PAO_CATEGORY:
      return get_paoCategory();

    case _PAO_CLASS:
      return get_paoClass();

    case _PAO_NAME:
      return get_paoName();

    case _PAO_TYPE_STRING:
      return get_paoTypeString();

    case _PAO_DESCRIPTION:
      return get_paoDescription();

    case _DISABLE_FLAG:
      return is_disableFlag();

    case _DEF_OPERATIONAL_STATE:
      return get_defOperationalState();

    case _CONTROL_INTERVAL:
      return get_controlInterval();

    case _MIN_RESPONSE_TIME:
      return get_minResponseTime();

    case _DEF_DAILY_START_TIME:
      return get_defDailyStartTime();

    case _DEF_DAILY_STOP_TIME:
      return get_defDailyStopTime();

    case _REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG:
      return is_requireAllTriggersActiveFlag();

    case _NEXT_CHECK_TIME:
      return get_nextCheckTime();

    case _NEW_POINT_DATA_RECEIVED_FLAG:
      return is_newPointDataReceivedFlag();

    case _UPDATED_FLAG:
      return is_updatedFlag();

    case _CONTROL_AREA_STATUS_POINT_ID:
      return get_controlAreaStatusPointId();

    case _CONTROL_AREA_STATE:
      return get_controlAreaState();

    case _CURRENT_PRIORITY:
      return get_currentPriority();

    case _CURRENT_DAILY_START_TIME:
      return get_currentDailyStartTime();

    case _CURRENT_DAILY_STOP_TIME:
      return get_currentDailyStopTime();

    case _LM_CONTROL_AREA_TRIGGERS:
      return get_lmControlAreaTriggers();

    case _LM_PROGRAMS:
      return get_lmPrograms();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _PAO_ID:
      return isSet_paoId();
    case _PAO_CATEGORY:
      return isSet_paoCategory();
    case _PAO_CLASS:
      return isSet_paoClass();
    case _PAO_NAME:
      return isSet_paoName();
    case _PAO_TYPE_STRING:
      return isSet_paoTypeString();
    case _PAO_DESCRIPTION:
      return isSet_paoDescription();
    case _DISABLE_FLAG:
      return isSet_disableFlag();
    case _DEF_OPERATIONAL_STATE:
      return isSet_defOperationalState();
    case _CONTROL_INTERVAL:
      return isSet_controlInterval();
    case _MIN_RESPONSE_TIME:
      return isSet_minResponseTime();
    case _DEF_DAILY_START_TIME:
      return isSet_defDailyStartTime();
    case _DEF_DAILY_STOP_TIME:
      return isSet_defDailyStopTime();
    case _REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG:
      return isSet_requireAllTriggersActiveFlag();
    case _NEXT_CHECK_TIME:
      return isSet_nextCheckTime();
    case _NEW_POINT_DATA_RECEIVED_FLAG:
      return isSet_newPointDataReceivedFlag();
    case _UPDATED_FLAG:
      return isSet_updatedFlag();
    case _CONTROL_AREA_STATUS_POINT_ID:
      return isSet_controlAreaStatusPointId();
    case _CONTROL_AREA_STATE:
      return isSet_controlAreaState();
    case _CURRENT_PRIORITY:
      return isSet_currentPriority();
    case _CURRENT_DAILY_START_TIME:
      return isSet_currentDailyStartTime();
    case _CURRENT_DAILY_STOP_TIME:
      return isSet_currentDailyStopTime();
    case _LM_CONTROL_AREA_TRIGGERS:
      return isSet_lmControlAreaTriggers();
    case _LM_PROGRAMS:
      return isSet_lmPrograms();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LMControlAreaItem)
      return this.equals((LMControlAreaItem)that);
    return false;
  }

  public boolean equals(LMControlAreaItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__paoCategory = true && this.isSet_paoCategory();
    boolean that_present__paoCategory = true && that.isSet_paoCategory();
    if (this_present__paoCategory || that_present__paoCategory) {
      if (!(this_present__paoCategory && that_present__paoCategory))
        return false;
      if (!this._paoCategory.equals(that._paoCategory))
        return false;
    }

    boolean this_present__paoClass = true && this.isSet_paoClass();
    boolean that_present__paoClass = true && that.isSet_paoClass();
    if (this_present__paoClass || that_present__paoClass) {
      if (!(this_present__paoClass && that_present__paoClass))
        return false;
      if (!this._paoClass.equals(that._paoClass))
        return false;
    }

    boolean this_present__paoName = true && this.isSet_paoName();
    boolean that_present__paoName = true && that.isSet_paoName();
    if (this_present__paoName || that_present__paoName) {
      if (!(this_present__paoName && that_present__paoName))
        return false;
      if (!this._paoName.equals(that._paoName))
        return false;
    }

    boolean this_present__paoTypeString = true && this.isSet_paoTypeString();
    boolean that_present__paoTypeString = true && that.isSet_paoTypeString();
    if (this_present__paoTypeString || that_present__paoTypeString) {
      if (!(this_present__paoTypeString && that_present__paoTypeString))
        return false;
      if (!this._paoTypeString.equals(that._paoTypeString))
        return false;
    }

    boolean this_present__paoDescription = true && this.isSet_paoDescription();
    boolean that_present__paoDescription = true && that.isSet_paoDescription();
    if (this_present__paoDescription || that_present__paoDescription) {
      if (!(this_present__paoDescription && that_present__paoDescription))
        return false;
      if (!this._paoDescription.equals(that._paoDescription))
        return false;
    }

    boolean this_present__disableFlag = true;
    boolean that_present__disableFlag = true;
    if (this_present__disableFlag || that_present__disableFlag) {
      if (!(this_present__disableFlag && that_present__disableFlag))
        return false;
      if (this._disableFlag != that._disableFlag)
        return false;
    }

    boolean this_present__defOperationalState = true && this.isSet_defOperationalState();
    boolean that_present__defOperationalState = true && that.isSet_defOperationalState();
    if (this_present__defOperationalState || that_present__defOperationalState) {
      if (!(this_present__defOperationalState && that_present__defOperationalState))
        return false;
      if (!this._defOperationalState.equals(that._defOperationalState))
        return false;
    }

    boolean this_present__controlInterval = true;
    boolean that_present__controlInterval = true;
    if (this_present__controlInterval || that_present__controlInterval) {
      if (!(this_present__controlInterval && that_present__controlInterval))
        return false;
      if (this._controlInterval != that._controlInterval)
        return false;
    }

    boolean this_present__minResponseTime = true;
    boolean that_present__minResponseTime = true;
    if (this_present__minResponseTime || that_present__minResponseTime) {
      if (!(this_present__minResponseTime && that_present__minResponseTime))
        return false;
      if (this._minResponseTime != that._minResponseTime)
        return false;
    }

    boolean this_present__defDailyStartTime = true;
    boolean that_present__defDailyStartTime = true;
    if (this_present__defDailyStartTime || that_present__defDailyStartTime) {
      if (!(this_present__defDailyStartTime && that_present__defDailyStartTime))
        return false;
      if (this._defDailyStartTime != that._defDailyStartTime)
        return false;
    }

    boolean this_present__defDailyStopTime = true;
    boolean that_present__defDailyStopTime = true;
    if (this_present__defDailyStopTime || that_present__defDailyStopTime) {
      if (!(this_present__defDailyStopTime && that_present__defDailyStopTime))
        return false;
      if (this._defDailyStopTime != that._defDailyStopTime)
        return false;
    }

    boolean this_present__requireAllTriggersActiveFlag = true;
    boolean that_present__requireAllTriggersActiveFlag = true;
    if (this_present__requireAllTriggersActiveFlag || that_present__requireAllTriggersActiveFlag) {
      if (!(this_present__requireAllTriggersActiveFlag && that_present__requireAllTriggersActiveFlag))
        return false;
      if (this._requireAllTriggersActiveFlag != that._requireAllTriggersActiveFlag)
        return false;
    }

    boolean this_present__nextCheckTime = true;
    boolean that_present__nextCheckTime = true;
    if (this_present__nextCheckTime || that_present__nextCheckTime) {
      if (!(this_present__nextCheckTime && that_present__nextCheckTime))
        return false;
      if (this._nextCheckTime != that._nextCheckTime)
        return false;
    }

    boolean this_present__newPointDataReceivedFlag = true;
    boolean that_present__newPointDataReceivedFlag = true;
    if (this_present__newPointDataReceivedFlag || that_present__newPointDataReceivedFlag) {
      if (!(this_present__newPointDataReceivedFlag && that_present__newPointDataReceivedFlag))
        return false;
      if (this._newPointDataReceivedFlag != that._newPointDataReceivedFlag)
        return false;
    }

    boolean this_present__updatedFlag = true;
    boolean that_present__updatedFlag = true;
    if (this_present__updatedFlag || that_present__updatedFlag) {
      if (!(this_present__updatedFlag && that_present__updatedFlag))
        return false;
      if (this._updatedFlag != that._updatedFlag)
        return false;
    }

    boolean this_present__controlAreaStatusPointId = true;
    boolean that_present__controlAreaStatusPointId = true;
    if (this_present__controlAreaStatusPointId || that_present__controlAreaStatusPointId) {
      if (!(this_present__controlAreaStatusPointId && that_present__controlAreaStatusPointId))
        return false;
      if (this._controlAreaStatusPointId != that._controlAreaStatusPointId)
        return false;
    }

    boolean this_present__controlAreaState = true;
    boolean that_present__controlAreaState = true;
    if (this_present__controlAreaState || that_present__controlAreaState) {
      if (!(this_present__controlAreaState && that_present__controlAreaState))
        return false;
      if (this._controlAreaState != that._controlAreaState)
        return false;
    }

    boolean this_present__currentPriority = true;
    boolean that_present__currentPriority = true;
    if (this_present__currentPriority || that_present__currentPriority) {
      if (!(this_present__currentPriority && that_present__currentPriority))
        return false;
      if (this._currentPriority != that._currentPriority)
        return false;
    }

    boolean this_present__currentDailyStartTime = true;
    boolean that_present__currentDailyStartTime = true;
    if (this_present__currentDailyStartTime || that_present__currentDailyStartTime) {
      if (!(this_present__currentDailyStartTime && that_present__currentDailyStartTime))
        return false;
      if (this._currentDailyStartTime != that._currentDailyStartTime)
        return false;
    }

    boolean this_present__currentDailyStopTime = true;
    boolean that_present__currentDailyStopTime = true;
    if (this_present__currentDailyStopTime || that_present__currentDailyStopTime) {
      if (!(this_present__currentDailyStopTime && that_present__currentDailyStopTime))
        return false;
      if (this._currentDailyStopTime != that._currentDailyStopTime)
        return false;
    }

    boolean this_present__lmControlAreaTriggers = true && this.isSet_lmControlAreaTriggers();
    boolean that_present__lmControlAreaTriggers = true && that.isSet_lmControlAreaTriggers();
    if (this_present__lmControlAreaTriggers || that_present__lmControlAreaTriggers) {
      if (!(this_present__lmControlAreaTriggers && that_present__lmControlAreaTriggers))
        return false;
      if (!this._lmControlAreaTriggers.equals(that._lmControlAreaTriggers))
        return false;
    }

    boolean this_present__lmPrograms = true && this.isSet_lmPrograms();
    boolean that_present__lmPrograms = true && that.isSet_lmPrograms();
    if (this_present__lmPrograms || that_present__lmPrograms) {
      if (!(this_present__lmPrograms && that_present__lmPrograms))
        return false;
      if (!this._lmPrograms.equals(that._lmPrograms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + _paoId;

    hashCode = hashCode * 8191 + ((isSet_paoCategory()) ? 131071 : 524287);
    if (isSet_paoCategory())
      hashCode = hashCode * 8191 + _paoCategory.hashCode();

    hashCode = hashCode * 8191 + ((isSet_paoClass()) ? 131071 : 524287);
    if (isSet_paoClass())
      hashCode = hashCode * 8191 + _paoClass.hashCode();

    hashCode = hashCode * 8191 + ((isSet_paoName()) ? 131071 : 524287);
    if (isSet_paoName())
      hashCode = hashCode * 8191 + _paoName.hashCode();

    hashCode = hashCode * 8191 + ((isSet_paoTypeString()) ? 131071 : 524287);
    if (isSet_paoTypeString())
      hashCode = hashCode * 8191 + _paoTypeString.hashCode();

    hashCode = hashCode * 8191 + ((isSet_paoDescription()) ? 131071 : 524287);
    if (isSet_paoDescription())
      hashCode = hashCode * 8191 + _paoDescription.hashCode();

    hashCode = hashCode * 8191 + ((_disableFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSet_defOperationalState()) ? 131071 : 524287);
    if (isSet_defOperationalState())
      hashCode = hashCode * 8191 + _defOperationalState.hashCode();

    hashCode = hashCode * 8191 + _controlInterval;

    hashCode = hashCode * 8191 + _minResponseTime;

    hashCode = hashCode * 8191 + _defDailyStartTime;

    hashCode = hashCode * 8191 + _defDailyStopTime;

    hashCode = hashCode * 8191 + ((_requireAllTriggersActiveFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_nextCheckTime);

    hashCode = hashCode * 8191 + ((_newPointDataReceivedFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((_updatedFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + _controlAreaStatusPointId;

    hashCode = hashCode * 8191 + _controlAreaState;

    hashCode = hashCode * 8191 + _currentPriority;

    hashCode = hashCode * 8191 + _currentDailyStartTime;

    hashCode = hashCode * 8191 + _currentDailyStopTime;

    hashCode = hashCode * 8191 + ((isSet_lmControlAreaTriggers()) ? 131071 : 524287);
    if (isSet_lmControlAreaTriggers())
      hashCode = hashCode * 8191 + _lmControlAreaTriggers.hashCode();

    hashCode = hashCode * 8191 + ((isSet_lmPrograms()) ? 131071 : 524287);
    if (isSet_lmPrograms())
      hashCode = hashCode * 8191 + _lmPrograms.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LMControlAreaItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_paoId()).compareTo(other.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, other._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoCategory()).compareTo(other.isSet_paoCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoCategory, other._paoCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoClass()).compareTo(other.isSet_paoClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoClass, other._paoClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoName()).compareTo(other.isSet_paoName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoName, other._paoName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoTypeString()).compareTo(other.isSet_paoTypeString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoTypeString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoTypeString, other._paoTypeString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_paoDescription()).compareTo(other.isSet_paoDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoDescription, other._paoDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_disableFlag()).compareTo(other.isSet_disableFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_disableFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._disableFlag, other._disableFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_defOperationalState()).compareTo(other.isSet_defOperationalState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_defOperationalState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._defOperationalState, other._defOperationalState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlInterval()).compareTo(other.isSet_controlInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlInterval, other._controlInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_minResponseTime()).compareTo(other.isSet_minResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_minResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._minResponseTime, other._minResponseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_defDailyStartTime()).compareTo(other.isSet_defDailyStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_defDailyStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._defDailyStartTime, other._defDailyStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_defDailyStopTime()).compareTo(other.isSet_defDailyStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_defDailyStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._defDailyStopTime, other._defDailyStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_requireAllTriggersActiveFlag()).compareTo(other.isSet_requireAllTriggersActiveFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_requireAllTriggersActiveFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._requireAllTriggersActiveFlag, other._requireAllTriggersActiveFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_nextCheckTime()).compareTo(other.isSet_nextCheckTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_nextCheckTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nextCheckTime, other._nextCheckTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_newPointDataReceivedFlag()).compareTo(other.isSet_newPointDataReceivedFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_newPointDataReceivedFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._newPointDataReceivedFlag, other._newPointDataReceivedFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_updatedFlag()).compareTo(other.isSet_updatedFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_updatedFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._updatedFlag, other._updatedFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlAreaStatusPointId()).compareTo(other.isSet_controlAreaStatusPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlAreaStatusPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlAreaStatusPointId, other._controlAreaStatusPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlAreaState()).compareTo(other.isSet_controlAreaState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlAreaState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlAreaState, other._controlAreaState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentPriority()).compareTo(other.isSet_currentPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentPriority, other._currentPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentDailyStartTime()).compareTo(other.isSet_currentDailyStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentDailyStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentDailyStartTime, other._currentDailyStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentDailyStopTime()).compareTo(other.isSet_currentDailyStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentDailyStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentDailyStopTime, other._currentDailyStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lmControlAreaTriggers()).compareTo(other.isSet_lmControlAreaTriggers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lmControlAreaTriggers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lmControlAreaTriggers, other._lmControlAreaTriggers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lmPrograms()).compareTo(other.isSet_lmPrograms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lmPrograms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lmPrograms, other._lmPrograms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LMControlAreaItem(");
    boolean first = true;

    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoCategory:");
    if (this._paoCategory == null) {
      sb.append("null");
    } else {
      sb.append(this._paoCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoClass:");
    if (this._paoClass == null) {
      sb.append("null");
    } else {
      sb.append(this._paoClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoName:");
    if (this._paoName == null) {
      sb.append("null");
    } else {
      sb.append(this._paoName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoTypeString:");
    if (this._paoTypeString == null) {
      sb.append("null");
    } else {
      sb.append(this._paoTypeString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoDescription:");
    if (this._paoDescription == null) {
      sb.append("null");
    } else {
      sb.append(this._paoDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_disableFlag:");
    sb.append(this._disableFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_defOperationalState:");
    if (this._defOperationalState == null) {
      sb.append("null");
    } else {
      sb.append(this._defOperationalState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlInterval:");
    sb.append(this._controlInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_minResponseTime:");
    sb.append(this._minResponseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_defDailyStartTime:");
    sb.append(this._defDailyStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_defDailyStopTime:");
    sb.append(this._defDailyStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_requireAllTriggersActiveFlag:");
    sb.append(this._requireAllTriggersActiveFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_nextCheckTime:");
    sb.append(this._nextCheckTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_newPointDataReceivedFlag:");
    sb.append(this._newPointDataReceivedFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_updatedFlag:");
    sb.append(this._updatedFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlAreaStatusPointId:");
    sb.append(this._controlAreaStatusPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlAreaState:");
    sb.append(this._controlAreaState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentPriority:");
    sb.append(this._currentPriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentDailyStartTime:");
    sb.append(this._currentDailyStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentDailyStopTime:");
    sb.append(this._currentDailyStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lmControlAreaTriggers:");
    if (this._lmControlAreaTriggers == null) {
      sb.append("null");
    } else {
      sb.append(this._lmControlAreaTriggers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lmPrograms:");
    if (this._lmPrograms == null) {
      sb.append("null");
    } else {
      sb.append(this._lmPrograms);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_paoCategory()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoCategory' is unset! Struct:" + toString());
    }

    if (!isSet_paoClass()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoClass' is unset! Struct:" + toString());
    }

    if (!isSet_paoName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoName' is unset! Struct:" + toString());
    }

    if (!isSet_paoTypeString()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoTypeString' is unset! Struct:" + toString());
    }

    if (!isSet_paoDescription()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoDescription' is unset! Struct:" + toString());
    }

    if (!isSet_disableFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_disableFlag' is unset! Struct:" + toString());
    }

    if (!isSet_defOperationalState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_defOperationalState' is unset! Struct:" + toString());
    }

    if (!isSet_controlInterval()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlInterval' is unset! Struct:" + toString());
    }

    if (!isSet_minResponseTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_minResponseTime' is unset! Struct:" + toString());
    }

    if (!isSet_defDailyStartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_defDailyStartTime' is unset! Struct:" + toString());
    }

    if (!isSet_defDailyStopTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_defDailyStopTime' is unset! Struct:" + toString());
    }

    if (!isSet_requireAllTriggersActiveFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_requireAllTriggersActiveFlag' is unset! Struct:" + toString());
    }

    if (!isSet_nextCheckTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_nextCheckTime' is unset! Struct:" + toString());
    }

    if (!isSet_newPointDataReceivedFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_newPointDataReceivedFlag' is unset! Struct:" + toString());
    }

    if (!isSet_updatedFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_updatedFlag' is unset! Struct:" + toString());
    }

    if (!isSet_controlAreaStatusPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlAreaStatusPointId' is unset! Struct:" + toString());
    }

    if (!isSet_controlAreaState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlAreaState' is unset! Struct:" + toString());
    }

    if (!isSet_currentPriority()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentPriority' is unset! Struct:" + toString());
    }

    if (!isSet_currentDailyStartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentDailyStartTime' is unset! Struct:" + toString());
    }

    if (!isSet_currentDailyStopTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentDailyStopTime' is unset! Struct:" + toString());
    }

    if (!isSet_lmControlAreaTriggers()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lmControlAreaTriggers' is unset! Struct:" + toString());
    }

    if (!isSet_lmPrograms()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lmPrograms' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMControlAreaItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMControlAreaItemStandardScheme getScheme() {
      return new LMControlAreaItemStandardScheme();
    }
  }

  private static class LMControlAreaItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<LMControlAreaItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMControlAreaItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _PAO_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoCategory = iprot.readString();
              struct.set_paoCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _PAO_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoClass = iprot.readString();
              struct.set_paoClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _PAO_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoName = iprot.readString();
              struct.set_paoNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _PAO_TYPE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoTypeString = iprot.readString();
              struct.set_paoTypeStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _PAO_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoDescription = iprot.readString();
              struct.set_paoDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _DISABLE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._disableFlag = iprot.readBool();
              struct.set_disableFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _DEF_OPERATIONAL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._defOperationalState = iprot.readString();
              struct.set_defOperationalStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _CONTROL_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._controlInterval = iprot.readI32();
              struct.set_controlIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _MIN_RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._minResponseTime = iprot.readI32();
              struct.set_minResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _DEF_DAILY_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._defDailyStartTime = iprot.readI32();
              struct.set_defDailyStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _DEF_DAILY_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._defDailyStopTime = iprot.readI32();
              struct.set_defDailyStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._requireAllTriggersActiveFlag = iprot.readBool();
              struct.set_requireAllTriggersActiveFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // _NEXT_CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._nextCheckTime = iprot.readI64();
              struct.set_nextCheckTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // _NEW_POINT_DATA_RECEIVED_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._newPointDataReceivedFlag = iprot.readBool();
              struct.set_newPointDataReceivedFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _UPDATED_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._updatedFlag = iprot.readBool();
              struct.set_updatedFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // _CONTROL_AREA_STATUS_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._controlAreaStatusPointId = iprot.readI32();
              struct.set_controlAreaStatusPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // _CONTROL_AREA_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._controlAreaState = iprot.readI32();
              struct.set_controlAreaStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // _CURRENT_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentPriority = iprot.readI32();
              struct.set_currentPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // _CURRENT_DAILY_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentDailyStartTime = iprot.readI32();
              struct.set_currentDailyStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // _CURRENT_DAILY_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentDailyStopTime = iprot.readI32();
              struct.set_currentDailyStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // _LM_CONTROL_AREA_TRIGGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct._lmControlAreaTriggers = new java.util.ArrayList<LMControlAreaTrigger>(_list96.size);
                @org.apache.thrift.annotation.Nullable LMControlAreaTrigger _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = new LMControlAreaTrigger();
                  _elem97.read(iprot);
                  struct._lmControlAreaTriggers.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.set_lmControlAreaTriggersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // _LM_PROGRAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                struct._lmPrograms = new java.util.ArrayList<com.cannontech.messaging.serialization.thrift.generated.GenericMessage>(_list99.size);
                @org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.GenericMessage _elem100;
                for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                {
                  _elem100 = new com.cannontech.messaging.serialization.thrift.generated.GenericMessage();
                  _elem100.read(iprot);
                  struct._lmPrograms.add(_elem100);
                }
                iprot.readListEnd();
              }
              struct.set_lmProgramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMControlAreaItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      if (struct._paoCategory != null) {
        oprot.writeFieldBegin(_PAO_CATEGORY_FIELD_DESC);
        oprot.writeString(struct._paoCategory);
        oprot.writeFieldEnd();
      }
      if (struct._paoClass != null) {
        oprot.writeFieldBegin(_PAO_CLASS_FIELD_DESC);
        oprot.writeString(struct._paoClass);
        oprot.writeFieldEnd();
      }
      if (struct._paoName != null) {
        oprot.writeFieldBegin(_PAO_NAME_FIELD_DESC);
        oprot.writeString(struct._paoName);
        oprot.writeFieldEnd();
      }
      if (struct._paoTypeString != null) {
        oprot.writeFieldBegin(_PAO_TYPE_STRING_FIELD_DESC);
        oprot.writeString(struct._paoTypeString);
        oprot.writeFieldEnd();
      }
      if (struct._paoDescription != null) {
        oprot.writeFieldBegin(_PAO_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct._paoDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_DISABLE_FLAG_FIELD_DESC);
      oprot.writeBool(struct._disableFlag);
      oprot.writeFieldEnd();
      if (struct._defOperationalState != null) {
        oprot.writeFieldBegin(_DEF_OPERATIONAL_STATE_FIELD_DESC);
        oprot.writeString(struct._defOperationalState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_CONTROL_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct._controlInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MIN_RESPONSE_TIME_FIELD_DESC);
      oprot.writeI32(struct._minResponseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DEF_DAILY_START_TIME_FIELD_DESC);
      oprot.writeI32(struct._defDailyStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DEF_DAILY_STOP_TIME_FIELD_DESC);
      oprot.writeI32(struct._defDailyStopTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_REQUIRE_ALL_TRIGGERS_ACTIVE_FLAG_FIELD_DESC);
      oprot.writeBool(struct._requireAllTriggersActiveFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NEXT_CHECK_TIME_FIELD_DESC);
      oprot.writeI64(struct._nextCheckTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NEW_POINT_DATA_RECEIVED_FLAG_FIELD_DESC);
      oprot.writeBool(struct._newPointDataReceivedFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_UPDATED_FLAG_FIELD_DESC);
      oprot.writeBool(struct._updatedFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_AREA_STATUS_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._controlAreaStatusPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_AREA_STATE_FIELD_DESC);
      oprot.writeI32(struct._controlAreaState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_PRIORITY_FIELD_DESC);
      oprot.writeI32(struct._currentPriority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_DAILY_START_TIME_FIELD_DESC);
      oprot.writeI32(struct._currentDailyStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_DAILY_STOP_TIME_FIELD_DESC);
      oprot.writeI32(struct._currentDailyStopTime);
      oprot.writeFieldEnd();
      if (struct._lmControlAreaTriggers != null) {
        oprot.writeFieldBegin(_LM_CONTROL_AREA_TRIGGERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct._lmControlAreaTriggers.size()));
          for (LMControlAreaTrigger _iter102 : struct._lmControlAreaTriggers)
          {
            _iter102.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct._lmPrograms != null) {
        oprot.writeFieldBegin(_LM_PROGRAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct._lmPrograms.size()));
          for (com.cannontech.messaging.serialization.thrift.generated.GenericMessage _iter103 : struct._lmPrograms)
          {
            _iter103.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMControlAreaItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMControlAreaItemTupleScheme getScheme() {
      return new LMControlAreaItemTupleScheme();
    }
  }

  private static class LMControlAreaItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<LMControlAreaItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMControlAreaItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct._paoId);
      oprot.writeString(struct._paoCategory);
      oprot.writeString(struct._paoClass);
      oprot.writeString(struct._paoName);
      oprot.writeString(struct._paoTypeString);
      oprot.writeString(struct._paoDescription);
      oprot.writeBool(struct._disableFlag);
      oprot.writeString(struct._defOperationalState);
      oprot.writeI32(struct._controlInterval);
      oprot.writeI32(struct._minResponseTime);
      oprot.writeI32(struct._defDailyStartTime);
      oprot.writeI32(struct._defDailyStopTime);
      oprot.writeBool(struct._requireAllTriggersActiveFlag);
      oprot.writeI64(struct._nextCheckTime);
      oprot.writeBool(struct._newPointDataReceivedFlag);
      oprot.writeBool(struct._updatedFlag);
      oprot.writeI32(struct._controlAreaStatusPointId);
      oprot.writeI32(struct._controlAreaState);
      oprot.writeI32(struct._currentPriority);
      oprot.writeI32(struct._currentDailyStartTime);
      oprot.writeI32(struct._currentDailyStopTime);
      {
        oprot.writeI32(struct._lmControlAreaTriggers.size());
        for (LMControlAreaTrigger _iter104 : struct._lmControlAreaTriggers)
        {
          _iter104.write(oprot);
        }
      }
      {
        oprot.writeI32(struct._lmPrograms.size());
        for (com.cannontech.messaging.serialization.thrift.generated.GenericMessage _iter105 : struct._lmPrograms)
        {
          _iter105.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMControlAreaItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._paoCategory = iprot.readString();
      struct.set_paoCategoryIsSet(true);
      struct._paoClass = iprot.readString();
      struct.set_paoClassIsSet(true);
      struct._paoName = iprot.readString();
      struct.set_paoNameIsSet(true);
      struct._paoTypeString = iprot.readString();
      struct.set_paoTypeStringIsSet(true);
      struct._paoDescription = iprot.readString();
      struct.set_paoDescriptionIsSet(true);
      struct._disableFlag = iprot.readBool();
      struct.set_disableFlagIsSet(true);
      struct._defOperationalState = iprot.readString();
      struct.set_defOperationalStateIsSet(true);
      struct._controlInterval = iprot.readI32();
      struct.set_controlIntervalIsSet(true);
      struct._minResponseTime = iprot.readI32();
      struct.set_minResponseTimeIsSet(true);
      struct._defDailyStartTime = iprot.readI32();
      struct.set_defDailyStartTimeIsSet(true);
      struct._defDailyStopTime = iprot.readI32();
      struct.set_defDailyStopTimeIsSet(true);
      struct._requireAllTriggersActiveFlag = iprot.readBool();
      struct.set_requireAllTriggersActiveFlagIsSet(true);
      struct._nextCheckTime = iprot.readI64();
      struct.set_nextCheckTimeIsSet(true);
      struct._newPointDataReceivedFlag = iprot.readBool();
      struct.set_newPointDataReceivedFlagIsSet(true);
      struct._updatedFlag = iprot.readBool();
      struct.set_updatedFlagIsSet(true);
      struct._controlAreaStatusPointId = iprot.readI32();
      struct.set_controlAreaStatusPointIdIsSet(true);
      struct._controlAreaState = iprot.readI32();
      struct.set_controlAreaStateIsSet(true);
      struct._currentPriority = iprot.readI32();
      struct.set_currentPriorityIsSet(true);
      struct._currentDailyStartTime = iprot.readI32();
      struct.set_currentDailyStartTimeIsSet(true);
      struct._currentDailyStopTime = iprot.readI32();
      struct.set_currentDailyStopTimeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct._lmControlAreaTriggers = new java.util.ArrayList<LMControlAreaTrigger>(_list106.size);
        @org.apache.thrift.annotation.Nullable LMControlAreaTrigger _elem107;
        for (int _i108 = 0; _i108 < _list106.size; ++_i108)
        {
          _elem107 = new LMControlAreaTrigger();
          _elem107.read(iprot);
          struct._lmControlAreaTriggers.add(_elem107);
        }
      }
      struct.set_lmControlAreaTriggersIsSet(true);
      {
        org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct._lmPrograms = new java.util.ArrayList<com.cannontech.messaging.serialization.thrift.generated.GenericMessage>(_list109.size);
        @org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.GenericMessage _elem110;
        for (int _i111 = 0; _i111 < _list109.size; ++_i111)
        {
          _elem110 = new com.cannontech.messaging.serialization.thrift.generated.GenericMessage();
          _elem110.read(iprot);
          struct._lmPrograms.add(_elem110);
        }
      }
      struct.set_lmProgramsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


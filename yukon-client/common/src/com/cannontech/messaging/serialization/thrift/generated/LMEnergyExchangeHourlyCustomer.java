/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-27")
public class LMEnergyExchangeHourlyCustomer implements org.apache.thrift.TBase<LMEnergyExchangeHourlyCustomer, LMEnergyExchangeHourlyCustomer._Fields>, java.io.Serializable, Cloneable, Comparable<LMEnergyExchangeHourlyCustomer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMEnergyExchangeHourlyCustomer");

  private static final org.apache.thrift.protocol.TField _CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_customerId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_offerId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _REVISION_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("_revisionNumber", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("_hour", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _AMOUNT_COMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("_amountCommitted", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LMEnergyExchangeHourlyCustomerStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LMEnergyExchangeHourlyCustomerTupleSchemeFactory();

  private int _customerId; // required
  private int _offerId; // required
  private int _revisionNumber; // required
  private int _hour; // required
  private double _amountCommitted; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _CUSTOMER_ID((short)1, "_customerId"),
    _OFFER_ID((short)2, "_offerId"),
    _REVISION_NUMBER((short)3, "_revisionNumber"),
    _HOUR((short)4, "_hour"),
    _AMOUNT_COMMITTED((short)5, "_amountCommitted");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _CUSTOMER_ID
          return _CUSTOMER_ID;
        case 2: // _OFFER_ID
          return _OFFER_ID;
        case 3: // _REVISION_NUMBER
          return _REVISION_NUMBER;
        case 4: // _HOUR
          return _HOUR;
        case 5: // _AMOUNT_COMMITTED
          return _AMOUNT_COMMITTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___CUSTOMERID_ISSET_ID = 0;
  private static final int ___OFFERID_ISSET_ID = 1;
  private static final int ___REVISIONNUMBER_ISSET_ID = 2;
  private static final int ___HOUR_ISSET_ID = 3;
  private static final int ___AMOUNTCOMMITTED_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("_customerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("_offerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._REVISION_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("_revisionNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._HOUR, new org.apache.thrift.meta_data.FieldMetaData("_hour", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._AMOUNT_COMMITTED, new org.apache.thrift.meta_data.FieldMetaData("_amountCommitted", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMEnergyExchangeHourlyCustomer.class, metaDataMap);
  }

  public LMEnergyExchangeHourlyCustomer() {
  }

  public LMEnergyExchangeHourlyCustomer(
    int _customerId,
    int _offerId,
    int _revisionNumber,
    int _hour,
    double _amountCommitted)
  {
    this();
    this._customerId = _customerId;
    set_customerIdIsSet(true);
    this._offerId = _offerId;
    set_offerIdIsSet(true);
    this._revisionNumber = _revisionNumber;
    set_revisionNumberIsSet(true);
    this._hour = _hour;
    set_hourIsSet(true);
    this._amountCommitted = _amountCommitted;
    set_amountCommittedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMEnergyExchangeHourlyCustomer(LMEnergyExchangeHourlyCustomer other) {
    __isset_bitfield = other.__isset_bitfield;
    this._customerId = other._customerId;
    this._offerId = other._offerId;
    this._revisionNumber = other._revisionNumber;
    this._hour = other._hour;
    this._amountCommitted = other._amountCommitted;
  }

  public LMEnergyExchangeHourlyCustomer deepCopy() {
    return new LMEnergyExchangeHourlyCustomer(this);
  }

  @Override
  public void clear() {
    set_customerIdIsSet(false);
    this._customerId = 0;
    set_offerIdIsSet(false);
    this._offerId = 0;
    set_revisionNumberIsSet(false);
    this._revisionNumber = 0;
    set_hourIsSet(false);
    this._hour = 0;
    set_amountCommittedIsSet(false);
    this._amountCommitted = 0.0;
  }

  public int get_customerId() {
    return this._customerId;
  }

  public void set_customerId(int _customerId) {
    this._customerId = _customerId;
    set_customerIdIsSet(true);
  }

  public void unset_customerId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CUSTOMERID_ISSET_ID);
  }

  /** Returns true if field _customerId is set (has been assigned a value) and false otherwise */
  public boolean isSet_customerId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CUSTOMERID_ISSET_ID);
  }

  public void set_customerIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CUSTOMERID_ISSET_ID, value);
  }

  public int get_offerId() {
    return this._offerId;
  }

  public void set_offerId(int _offerId) {
    this._offerId = _offerId;
    set_offerIdIsSet(true);
  }

  public void unset_offerId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___OFFERID_ISSET_ID);
  }

  /** Returns true if field _offerId is set (has been assigned a value) and false otherwise */
  public boolean isSet_offerId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___OFFERID_ISSET_ID);
  }

  public void set_offerIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___OFFERID_ISSET_ID, value);
  }

  public int get_revisionNumber() {
    return this._revisionNumber;
  }

  public void set_revisionNumber(int _revisionNumber) {
    this._revisionNumber = _revisionNumber;
    set_revisionNumberIsSet(true);
  }

  public void unset_revisionNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___REVISIONNUMBER_ISSET_ID);
  }

  /** Returns true if field _revisionNumber is set (has been assigned a value) and false otherwise */
  public boolean isSet_revisionNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___REVISIONNUMBER_ISSET_ID);
  }

  public void set_revisionNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___REVISIONNUMBER_ISSET_ID, value);
  }

  public int get_hour() {
    return this._hour;
  }

  public void set_hour(int _hour) {
    this._hour = _hour;
    set_hourIsSet(true);
  }

  public void unset_hour() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___HOUR_ISSET_ID);
  }

  /** Returns true if field _hour is set (has been assigned a value) and false otherwise */
  public boolean isSet_hour() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___HOUR_ISSET_ID);
  }

  public void set_hourIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___HOUR_ISSET_ID, value);
  }

  public double get_amountCommitted() {
    return this._amountCommitted;
  }

  public void set_amountCommitted(double _amountCommitted) {
    this._amountCommitted = _amountCommitted;
    set_amountCommittedIsSet(true);
  }

  public void unset_amountCommitted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___AMOUNTCOMMITTED_ISSET_ID);
  }

  /** Returns true if field _amountCommitted is set (has been assigned a value) and false otherwise */
  public boolean isSet_amountCommitted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___AMOUNTCOMMITTED_ISSET_ID);
  }

  public void set_amountCommittedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___AMOUNTCOMMITTED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case _CUSTOMER_ID:
      if (value == null) {
        unset_customerId();
      } else {
        set_customerId((java.lang.Integer)value);
      }
      break;

    case _OFFER_ID:
      if (value == null) {
        unset_offerId();
      } else {
        set_offerId((java.lang.Integer)value);
      }
      break;

    case _REVISION_NUMBER:
      if (value == null) {
        unset_revisionNumber();
      } else {
        set_revisionNumber((java.lang.Integer)value);
      }
      break;

    case _HOUR:
      if (value == null) {
        unset_hour();
      } else {
        set_hour((java.lang.Integer)value);
      }
      break;

    case _AMOUNT_COMMITTED:
      if (value == null) {
        unset_amountCommitted();
      } else {
        set_amountCommitted((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _CUSTOMER_ID:
      return get_customerId();

    case _OFFER_ID:
      return get_offerId();

    case _REVISION_NUMBER:
      return get_revisionNumber();

    case _HOUR:
      return get_hour();

    case _AMOUNT_COMMITTED:
      return get_amountCommitted();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _CUSTOMER_ID:
      return isSet_customerId();
    case _OFFER_ID:
      return isSet_offerId();
    case _REVISION_NUMBER:
      return isSet_revisionNumber();
    case _HOUR:
      return isSet_hour();
    case _AMOUNT_COMMITTED:
      return isSet_amountCommitted();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LMEnergyExchangeHourlyCustomer)
      return this.equals((LMEnergyExchangeHourlyCustomer)that);
    return false;
  }

  public boolean equals(LMEnergyExchangeHourlyCustomer that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__customerId = true;
    boolean that_present__customerId = true;
    if (this_present__customerId || that_present__customerId) {
      if (!(this_present__customerId && that_present__customerId))
        return false;
      if (this._customerId != that._customerId)
        return false;
    }

    boolean this_present__offerId = true;
    boolean that_present__offerId = true;
    if (this_present__offerId || that_present__offerId) {
      if (!(this_present__offerId && that_present__offerId))
        return false;
      if (this._offerId != that._offerId)
        return false;
    }

    boolean this_present__revisionNumber = true;
    boolean that_present__revisionNumber = true;
    if (this_present__revisionNumber || that_present__revisionNumber) {
      if (!(this_present__revisionNumber && that_present__revisionNumber))
        return false;
      if (this._revisionNumber != that._revisionNumber)
        return false;
    }

    boolean this_present__hour = true;
    boolean that_present__hour = true;
    if (this_present__hour || that_present__hour) {
      if (!(this_present__hour && that_present__hour))
        return false;
      if (this._hour != that._hour)
        return false;
    }

    boolean this_present__amountCommitted = true;
    boolean that_present__amountCommitted = true;
    if (this_present__amountCommitted || that_present__amountCommitted) {
      if (!(this_present__amountCommitted && that_present__amountCommitted))
        return false;
      if (this._amountCommitted != that._amountCommitted)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + _customerId;

    hashCode = hashCode * 8191 + _offerId;

    hashCode = hashCode * 8191 + _revisionNumber;

    hashCode = hashCode * 8191 + _hour;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_amountCommitted);

    return hashCode;
  }

  @Override
  public int compareTo(LMEnergyExchangeHourlyCustomer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_customerId()).compareTo(other.isSet_customerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_customerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._customerId, other._customerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_offerId()).compareTo(other.isSet_offerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_offerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._offerId, other._offerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_revisionNumber()).compareTo(other.isSet_revisionNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_revisionNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._revisionNumber, other._revisionNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_hour()).compareTo(other.isSet_hour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_hour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._hour, other._hour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_amountCommitted()).compareTo(other.isSet_amountCommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_amountCommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._amountCommitted, other._amountCommitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LMEnergyExchangeHourlyCustomer(");
    boolean first = true;

    sb.append("_customerId:");
    sb.append(this._customerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_offerId:");
    sb.append(this._offerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_revisionNumber:");
    sb.append(this._revisionNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_hour:");
    sb.append(this._hour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_amountCommitted:");
    sb.append(this._amountCommitted);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_customerId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_customerId' is unset! Struct:" + toString());
    }

    if (!isSet_offerId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_offerId' is unset! Struct:" + toString());
    }

    if (!isSet_revisionNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_revisionNumber' is unset! Struct:" + toString());
    }

    if (!isSet_hour()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_hour' is unset! Struct:" + toString());
    }

    if (!isSet_amountCommitted()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_amountCommitted' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMEnergyExchangeHourlyCustomerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMEnergyExchangeHourlyCustomerStandardScheme getScheme() {
      return new LMEnergyExchangeHourlyCustomerStandardScheme();
    }
  }

  private static class LMEnergyExchangeHourlyCustomerStandardScheme extends org.apache.thrift.scheme.StandardScheme<LMEnergyExchangeHourlyCustomer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMEnergyExchangeHourlyCustomer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _CUSTOMER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._customerId = iprot.readI32();
              struct.set_customerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _OFFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._offerId = iprot.readI32();
              struct.set_offerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _REVISION_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._revisionNumber = iprot.readI32();
              struct.set_revisionNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._hour = iprot.readI32();
              struct.set_hourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _AMOUNT_COMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._amountCommitted = iprot.readDouble();
              struct.set_amountCommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMEnergyExchangeHourlyCustomer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_CUSTOMER_ID_FIELD_DESC);
      oprot.writeI32(struct._customerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_OFFER_ID_FIELD_DESC);
      oprot.writeI32(struct._offerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_REVISION_NUMBER_FIELD_DESC);
      oprot.writeI32(struct._revisionNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_HOUR_FIELD_DESC);
      oprot.writeI32(struct._hour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_AMOUNT_COMMITTED_FIELD_DESC);
      oprot.writeDouble(struct._amountCommitted);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMEnergyExchangeHourlyCustomerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMEnergyExchangeHourlyCustomerTupleScheme getScheme() {
      return new LMEnergyExchangeHourlyCustomerTupleScheme();
    }
  }

  private static class LMEnergyExchangeHourlyCustomerTupleScheme extends org.apache.thrift.scheme.TupleScheme<LMEnergyExchangeHourlyCustomer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMEnergyExchangeHourlyCustomer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct._customerId);
      oprot.writeI32(struct._offerId);
      oprot.writeI32(struct._revisionNumber);
      oprot.writeI32(struct._hour);
      oprot.writeDouble(struct._amountCommitted);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMEnergyExchangeHourlyCustomer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._customerId = iprot.readI32();
      struct.set_customerIdIsSet(true);
      struct._offerId = iprot.readI32();
      struct.set_offerIdIsSet(true);
      struct._revisionNumber = iprot.readI32();
      struct.set_revisionNumberIsSet(true);
      struct._hour = iprot.readI32();
      struct.set_hourIsSet(true);
      struct._amountCommitted = iprot.readDouble();
      struct.set_amountCommittedIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


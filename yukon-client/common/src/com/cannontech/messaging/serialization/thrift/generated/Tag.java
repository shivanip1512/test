/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Tag implements org.apache.thrift.TBase<Tag, Tag._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tag");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_instanceId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_pointId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_tagId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _DESCRIPTION_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("_descriptionStr", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField _ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("_action", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField _TAG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_tagTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField _REFERENCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("_referenceStr", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField _TAGGED_FOR_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("_taggedForStr", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField _CLIENT_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_clientMsgId", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TagStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TagTupleSchemeFactory());
  }

  private com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage; // required
  private int _instanceId; // required
  private int _pointId; // required
  private int _tagId; // required
  private String _descriptionStr; // required
  private int _action; // required
  private long _tagTime; // required
  private String _referenceStr; // required
  private String _taggedForStr; // required
  private int _clientMsgId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _INSTANCE_ID((short)2, "_instanceId"),
    _POINT_ID((short)3, "_pointId"),
    _TAG_ID((short)4, "_tagId"),
    _DESCRIPTION_STR((short)5, "_descriptionStr"),
    _ACTION((short)6, "_action"),
    _TAG_TIME((short)7, "_tagTime"),
    _REFERENCE_STR((short)8, "_referenceStr"),
    _TAGGED_FOR_STR((short)9, "_taggedForStr"),
    _CLIENT_MSG_ID((short)10, "_clientMsgId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _INSTANCE_ID
          return _INSTANCE_ID;
        case 3: // _POINT_ID
          return _POINT_ID;
        case 4: // _TAG_ID
          return _TAG_ID;
        case 5: // _DESCRIPTION_STR
          return _DESCRIPTION_STR;
        case 6: // _ACTION
          return _ACTION;
        case 7: // _TAG_TIME
          return _TAG_TIME;
        case 8: // _REFERENCE_STR
          return _REFERENCE_STR;
        case 9: // _TAGGED_FOR_STR
          return _TAGGED_FOR_STR;
        case 10: // _CLIENT_MSG_ID
          return _CLIENT_MSG_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___INSTANCEID_ISSET_ID = 0;
  private static final int ___POINTID_ISSET_ID = 1;
  private static final int ___TAGID_ISSET_ID = 2;
  private static final int ___ACTION_ISSET_ID = 3;
  private static final int ___TAGTIME_ISSET_ID = 4;
  private static final int ___CLIENTMSGID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.Message.class)));
    tmpMap.put(_Fields._INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("_instanceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_pointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("_tagId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._DESCRIPTION_STR, new org.apache.thrift.meta_data.FieldMetaData("_descriptionStr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._ACTION, new org.apache.thrift.meta_data.FieldMetaData("_action", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TAG_TIME, new org.apache.thrift.meta_data.FieldMetaData("_tagTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._REFERENCE_STR, new org.apache.thrift.meta_data.FieldMetaData("_referenceStr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._TAGGED_FOR_STR, new org.apache.thrift.meta_data.FieldMetaData("_taggedForStr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._CLIENT_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("_clientMsgId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tag.class, metaDataMap);
  }

  public Tag() {
  }

  public Tag(
    com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage,
    int _instanceId,
    int _pointId,
    int _tagId,
    String _descriptionStr,
    int _action,
    long _tagTime,
    String _referenceStr,
    String _taggedForStr,
    int _clientMsgId)
  {
    this();
    this._baseMessage = _baseMessage;
    this._instanceId = _instanceId;
    set_instanceIdIsSet(true);
    this._pointId = _pointId;
    set_pointIdIsSet(true);
    this._tagId = _tagId;
    set_tagIdIsSet(true);
    this._descriptionStr = _descriptionStr;
    this._action = _action;
    set_actionIsSet(true);
    this._tagTime = _tagTime;
    set_tagTimeIsSet(true);
    this._referenceStr = _referenceStr;
    this._taggedForStr = _taggedForStr;
    this._clientMsgId = _clientMsgId;
    set_clientMsgIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tag(Tag other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message(other._baseMessage);
    }
    this._instanceId = other._instanceId;
    this._pointId = other._pointId;
    this._tagId = other._tagId;
    if (other.isSet_descriptionStr()) {
      this._descriptionStr = other._descriptionStr;
    }
    this._action = other._action;
    this._tagTime = other._tagTime;
    if (other.isSet_referenceStr()) {
      this._referenceStr = other._referenceStr;
    }
    if (other.isSet_taggedForStr()) {
      this._taggedForStr = other._taggedForStr;
    }
    this._clientMsgId = other._clientMsgId;
  }

  public Tag deepCopy() {
    return new Tag(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_instanceIdIsSet(false);
    this._instanceId = 0;
    set_pointIdIsSet(false);
    this._pointId = 0;
    set_tagIdIsSet(false);
    this._tagId = 0;
    this._descriptionStr = null;
    set_actionIsSet(false);
    this._action = 0;
    set_tagTimeIsSet(false);
    this._tagTime = 0;
    this._referenceStr = null;
    this._taggedForStr = null;
    set_clientMsgIdIsSet(false);
    this._clientMsgId = 0;
  }

  public com.cannontech.messaging.serialization.thrift.generated.Message get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_instanceId() {
    return this._instanceId;
  }

  public void set_instanceId(int _instanceId) {
    this._instanceId = _instanceId;
    set_instanceIdIsSet(true);
  }

  public void unset_instanceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___INSTANCEID_ISSET_ID);
  }

  /** Returns true if field _instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSet_instanceId() {
    return EncodingUtils.testBit(__isset_bitfield, ___INSTANCEID_ISSET_ID);
  }

  public void set_instanceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___INSTANCEID_ISSET_ID, value);
  }

  public int get_pointId() {
    return this._pointId;
  }

  public void set_pointId(int _pointId) {
    this._pointId = _pointId;
    set_pointIdIsSet(true);
  }

  public void unset_pointId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___POINTID_ISSET_ID);
  }

  /** Returns true if field _pointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_pointId() {
    return EncodingUtils.testBit(__isset_bitfield, ___POINTID_ISSET_ID);
  }

  public void set_pointIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___POINTID_ISSET_ID, value);
  }

  public int get_tagId() {
    return this._tagId;
  }

  public void set_tagId(int _tagId) {
    this._tagId = _tagId;
    set_tagIdIsSet(true);
  }

  public void unset_tagId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___TAGID_ISSET_ID);
  }

  /** Returns true if field _tagId is set (has been assigned a value) and false otherwise */
  public boolean isSet_tagId() {
    return EncodingUtils.testBit(__isset_bitfield, ___TAGID_ISSET_ID);
  }

  public void set_tagIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___TAGID_ISSET_ID, value);
  }

  public String get_descriptionStr() {
    return this._descriptionStr;
  }

  public void set_descriptionStr(String _descriptionStr) {
    this._descriptionStr = _descriptionStr;
  }

  public void unset_descriptionStr() {
    this._descriptionStr = null;
  }

  /** Returns true if field _descriptionStr is set (has been assigned a value) and false otherwise */
  public boolean isSet_descriptionStr() {
    return this._descriptionStr != null;
  }

  public void set_descriptionStrIsSet(boolean value) {
    if (!value) {
      this._descriptionStr = null;
    }
  }

  public int get_action() {
    return this._action;
  }

  public void set_action(int _action) {
    this._action = _action;
    set_actionIsSet(true);
  }

  public void unset_action() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___ACTION_ISSET_ID);
  }

  /** Returns true if field _action is set (has been assigned a value) and false otherwise */
  public boolean isSet_action() {
    return EncodingUtils.testBit(__isset_bitfield, ___ACTION_ISSET_ID);
  }

  public void set_actionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___ACTION_ISSET_ID, value);
  }

  public long get_tagTime() {
    return this._tagTime;
  }

  public void set_tagTime(long _tagTime) {
    this._tagTime = _tagTime;
    set_tagTimeIsSet(true);
  }

  public void unset_tagTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___TAGTIME_ISSET_ID);
  }

  /** Returns true if field _tagTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_tagTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___TAGTIME_ISSET_ID);
  }

  public void set_tagTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___TAGTIME_ISSET_ID, value);
  }

  public String get_referenceStr() {
    return this._referenceStr;
  }

  public void set_referenceStr(String _referenceStr) {
    this._referenceStr = _referenceStr;
  }

  public void unset_referenceStr() {
    this._referenceStr = null;
  }

  /** Returns true if field _referenceStr is set (has been assigned a value) and false otherwise */
  public boolean isSet_referenceStr() {
    return this._referenceStr != null;
  }

  public void set_referenceStrIsSet(boolean value) {
    if (!value) {
      this._referenceStr = null;
    }
  }

  public String get_taggedForStr() {
    return this._taggedForStr;
  }

  public void set_taggedForStr(String _taggedForStr) {
    this._taggedForStr = _taggedForStr;
  }

  public void unset_taggedForStr() {
    this._taggedForStr = null;
  }

  /** Returns true if field _taggedForStr is set (has been assigned a value) and false otherwise */
  public boolean isSet_taggedForStr() {
    return this._taggedForStr != null;
  }

  public void set_taggedForStrIsSet(boolean value) {
    if (!value) {
      this._taggedForStr = null;
    }
  }

  public int get_clientMsgId() {
    return this._clientMsgId;
  }

  public void set_clientMsgId(int _clientMsgId) {
    this._clientMsgId = _clientMsgId;
    set_clientMsgIdIsSet(true);
  }

  public void unset_clientMsgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___CLIENTMSGID_ISSET_ID);
  }

  /** Returns true if field _clientMsgId is set (has been assigned a value) and false otherwise */
  public boolean isSet_clientMsgId() {
    return EncodingUtils.testBit(__isset_bitfield, ___CLIENTMSGID_ISSET_ID);
  }

  public void set_clientMsgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___CLIENTMSGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.Message)value);
      }
      break;

    case _INSTANCE_ID:
      if (value == null) {
        unset_instanceId();
      } else {
        set_instanceId((Integer)value);
      }
      break;

    case _POINT_ID:
      if (value == null) {
        unset_pointId();
      } else {
        set_pointId((Integer)value);
      }
      break;

    case _TAG_ID:
      if (value == null) {
        unset_tagId();
      } else {
        set_tagId((Integer)value);
      }
      break;

    case _DESCRIPTION_STR:
      if (value == null) {
        unset_descriptionStr();
      } else {
        set_descriptionStr((String)value);
      }
      break;

    case _ACTION:
      if (value == null) {
        unset_action();
      } else {
        set_action((Integer)value);
      }
      break;

    case _TAG_TIME:
      if (value == null) {
        unset_tagTime();
      } else {
        set_tagTime((Long)value);
      }
      break;

    case _REFERENCE_STR:
      if (value == null) {
        unset_referenceStr();
      } else {
        set_referenceStr((String)value);
      }
      break;

    case _TAGGED_FOR_STR:
      if (value == null) {
        unset_taggedForStr();
      } else {
        set_taggedForStr((String)value);
      }
      break;

    case _CLIENT_MSG_ID:
      if (value == null) {
        unset_clientMsgId();
      } else {
        set_clientMsgId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _INSTANCE_ID:
      return Integer.valueOf(get_instanceId());

    case _POINT_ID:
      return Integer.valueOf(get_pointId());

    case _TAG_ID:
      return Integer.valueOf(get_tagId());

    case _DESCRIPTION_STR:
      return get_descriptionStr();

    case _ACTION:
      return Integer.valueOf(get_action());

    case _TAG_TIME:
      return Long.valueOf(get_tagTime());

    case _REFERENCE_STR:
      return get_referenceStr();

    case _TAGGED_FOR_STR:
      return get_taggedForStr();

    case _CLIENT_MSG_ID:
      return Integer.valueOf(get_clientMsgId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _INSTANCE_ID:
      return isSet_instanceId();
    case _POINT_ID:
      return isSet_pointId();
    case _TAG_ID:
      return isSet_tagId();
    case _DESCRIPTION_STR:
      return isSet_descriptionStr();
    case _ACTION:
      return isSet_action();
    case _TAG_TIME:
      return isSet_tagTime();
    case _REFERENCE_STR:
      return isSet_referenceStr();
    case _TAGGED_FOR_STR:
      return isSet_taggedForStr();
    case _CLIENT_MSG_ID:
      return isSet_clientMsgId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tag)
      return this.equals((Tag)that);
    return false;
  }

  public boolean equals(Tag that) {
    if (that == null)
      return false;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__instanceId = true;
    boolean that_present__instanceId = true;
    if (this_present__instanceId || that_present__instanceId) {
      if (!(this_present__instanceId && that_present__instanceId))
        return false;
      if (this._instanceId != that._instanceId)
        return false;
    }

    boolean this_present__pointId = true;
    boolean that_present__pointId = true;
    if (this_present__pointId || that_present__pointId) {
      if (!(this_present__pointId && that_present__pointId))
        return false;
      if (this._pointId != that._pointId)
        return false;
    }

    boolean this_present__tagId = true;
    boolean that_present__tagId = true;
    if (this_present__tagId || that_present__tagId) {
      if (!(this_present__tagId && that_present__tagId))
        return false;
      if (this._tagId != that._tagId)
        return false;
    }

    boolean this_present__descriptionStr = true && this.isSet_descriptionStr();
    boolean that_present__descriptionStr = true && that.isSet_descriptionStr();
    if (this_present__descriptionStr || that_present__descriptionStr) {
      if (!(this_present__descriptionStr && that_present__descriptionStr))
        return false;
      if (!this._descriptionStr.equals(that._descriptionStr))
        return false;
    }

    boolean this_present__action = true;
    boolean that_present__action = true;
    if (this_present__action || that_present__action) {
      if (!(this_present__action && that_present__action))
        return false;
      if (this._action != that._action)
        return false;
    }

    boolean this_present__tagTime = true;
    boolean that_present__tagTime = true;
    if (this_present__tagTime || that_present__tagTime) {
      if (!(this_present__tagTime && that_present__tagTime))
        return false;
      if (this._tagTime != that._tagTime)
        return false;
    }

    boolean this_present__referenceStr = true && this.isSet_referenceStr();
    boolean that_present__referenceStr = true && that.isSet_referenceStr();
    if (this_present__referenceStr || that_present__referenceStr) {
      if (!(this_present__referenceStr && that_present__referenceStr))
        return false;
      if (!this._referenceStr.equals(that._referenceStr))
        return false;
    }

    boolean this_present__taggedForStr = true && this.isSet_taggedForStr();
    boolean that_present__taggedForStr = true && that.isSet_taggedForStr();
    if (this_present__taggedForStr || that_present__taggedForStr) {
      if (!(this_present__taggedForStr && that_present__taggedForStr))
        return false;
      if (!this._taggedForStr.equals(that._taggedForStr))
        return false;
    }

    boolean this_present__clientMsgId = true;
    boolean that_present__clientMsgId = true;
    if (this_present__clientMsgId || that_present__clientMsgId) {
      if (!(this_present__clientMsgId && that_present__clientMsgId))
        return false;
      if (this._clientMsgId != that._clientMsgId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Tag other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Tag typedOther = (Tag)other;

    lastComparison = Boolean.valueOf(isSet_baseMessage()).compareTo(typedOther.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, typedOther._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_instanceId()).compareTo(typedOther.isSet_instanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_instanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._instanceId, typedOther._instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_pointId()).compareTo(typedOther.isSet_pointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_pointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._pointId, typedOther._pointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_tagId()).compareTo(typedOther.isSet_tagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_tagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._tagId, typedOther._tagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_descriptionStr()).compareTo(typedOther.isSet_descriptionStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_descriptionStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._descriptionStr, typedOther._descriptionStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_action()).compareTo(typedOther.isSet_action());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_action()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._action, typedOther._action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_tagTime()).compareTo(typedOther.isSet_tagTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_tagTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._tagTime, typedOther._tagTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_referenceStr()).compareTo(typedOther.isSet_referenceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_referenceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._referenceStr, typedOther._referenceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_taggedForStr()).compareTo(typedOther.isSet_taggedForStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_taggedForStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._taggedForStr, typedOther._taggedForStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_clientMsgId()).compareTo(typedOther.isSet_clientMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_clientMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._clientMsgId, typedOther._clientMsgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tag(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_instanceId:");
    sb.append(this._instanceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_pointId:");
    sb.append(this._pointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_tagId:");
    sb.append(this._tagId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_descriptionStr:");
    if (this._descriptionStr == null) {
      sb.append("null");
    } else {
      sb.append(this._descriptionStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_action:");
    sb.append(this._action);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_tagTime:");
    sb.append(this._tagTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_referenceStr:");
    if (this._referenceStr == null) {
      sb.append("null");
    } else {
      sb.append(this._referenceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_taggedForStr:");
    if (this._taggedForStr == null) {
      sb.append("null");
    } else {
      sb.append(this._taggedForStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_clientMsgId:");
    sb.append(this._clientMsgId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_instanceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_instanceId' is unset! Struct:" + toString());
    }

    if (!isSet_pointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_pointId' is unset! Struct:" + toString());
    }

    if (!isSet_tagId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_tagId' is unset! Struct:" + toString());
    }

    if (!isSet_descriptionStr()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_descriptionStr' is unset! Struct:" + toString());
    }

    if (!isSet_action()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_action' is unset! Struct:" + toString());
    }

    if (!isSet_tagTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_tagTime' is unset! Struct:" + toString());
    }

    if (!isSet_referenceStr()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_referenceStr' is unset! Struct:" + toString());
    }

    if (!isSet_taggedForStr()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_taggedForStr' is unset! Struct:" + toString());
    }

    if (!isSet_clientMsgId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_clientMsgId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TagStandardSchemeFactory implements SchemeFactory {
    public TagStandardScheme getScheme() {
      return new TagStandardScheme();
    }
  }

  private static class TagStandardScheme extends StandardScheme<Tag> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tag struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._instanceId = iprot.readI32();
              struct.set_instanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._pointId = iprot.readI32();
              struct.set_pointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._tagId = iprot.readI32();
              struct.set_tagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _DESCRIPTION_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._descriptionStr = iprot.readString();
              struct.set_descriptionStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._action = iprot.readI32();
              struct.set_actionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _TAG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._tagTime = iprot.readI64();
              struct.set_tagTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _REFERENCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._referenceStr = iprot.readString();
              struct.set_referenceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _TAGGED_FOR_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._taggedForStr = iprot.readString();
              struct.set_taggedForStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _CLIENT_MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._clientMsgId = iprot.readI32();
              struct.set_clientMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tag struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_INSTANCE_ID_FIELD_DESC);
      oprot.writeI32(struct._instanceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._pointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TAG_ID_FIELD_DESC);
      oprot.writeI32(struct._tagId);
      oprot.writeFieldEnd();
      if (struct._descriptionStr != null) {
        oprot.writeFieldBegin(_DESCRIPTION_STR_FIELD_DESC);
        oprot.writeString(struct._descriptionStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_ACTION_FIELD_DESC);
      oprot.writeI32(struct._action);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TAG_TIME_FIELD_DESC);
      oprot.writeI64(struct._tagTime);
      oprot.writeFieldEnd();
      if (struct._referenceStr != null) {
        oprot.writeFieldBegin(_REFERENCE_STR_FIELD_DESC);
        oprot.writeString(struct._referenceStr);
        oprot.writeFieldEnd();
      }
      if (struct._taggedForStr != null) {
        oprot.writeFieldBegin(_TAGGED_FOR_STR_FIELD_DESC);
        oprot.writeString(struct._taggedForStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_CLIENT_MSG_ID_FIELD_DESC);
      oprot.writeI32(struct._clientMsgId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TagTupleSchemeFactory implements SchemeFactory {
    public TagTupleScheme getScheme() {
      return new TagTupleScheme();
    }
  }

  private static class TagTupleScheme extends TupleScheme<Tag> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tag struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._instanceId);
      oprot.writeI32(struct._pointId);
      oprot.writeI32(struct._tagId);
      oprot.writeString(struct._descriptionStr);
      oprot.writeI32(struct._action);
      oprot.writeI64(struct._tagTime);
      oprot.writeString(struct._referenceStr);
      oprot.writeString(struct._taggedForStr);
      oprot.writeI32(struct._clientMsgId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tag struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._instanceId = iprot.readI32();
      struct.set_instanceIdIsSet(true);
      struct._pointId = iprot.readI32();
      struct.set_pointIdIsSet(true);
      struct._tagId = iprot.readI32();
      struct.set_tagIdIsSet(true);
      struct._descriptionStr = iprot.readString();
      struct.set_descriptionStrIsSet(true);
      struct._action = iprot.readI32();
      struct.set_actionIsSet(true);
      struct._tagTime = iprot.readI64();
      struct.set_tagTimeIsSet(true);
      struct._referenceStr = iprot.readString();
      struct.set_referenceStrIsSet(true);
      struct._taggedForStr = iprot.readString();
      struct.set_taggedForStrIsSet(true);
      struct._clientMsgId = iprot.readI32();
      struct.set_clientMsgIdIsSet(true);
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LMEnergyExchangeAccept implements org.apache.thrift.TBase<LMEnergyExchangeAccept, LMEnergyExchangeAccept._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMEnergyExchangeAccept");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_offerId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _REVISION_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("_revisionNumber", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _ACCEPT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("_acceptStatus", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField _IP_ADDRESS_OF_ACCEPT_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("_ipAddressOfAcceptUser", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField _USER_ID_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_userIdName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField _NAME_OF_ACCEPT_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("_nameOfAcceptPerson", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField _ENERGY_EXCHANGE_NOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("_energyExchangeNotes", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField _AMOUNTS_COMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("_amountsCommitted", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LMEnergyExchangeAcceptStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LMEnergyExchangeAcceptTupleSchemeFactory());
  }

  private com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage; // required
  private int _paoId; // required
  private int _offerId; // required
  private int _revisionNumber; // required
  private String _acceptStatus; // required
  private String _ipAddressOfAcceptUser; // required
  private String _userIdName; // required
  private String _nameOfAcceptPerson; // required
  private String _energyExchangeNotes; // required
  private List<Double> _amountsCommitted; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _PAO_ID((short)2, "_paoId"),
    _OFFER_ID((short)3, "_offerId"),
    _REVISION_NUMBER((short)4, "_revisionNumber"),
    _ACCEPT_STATUS((short)5, "_acceptStatus"),
    _IP_ADDRESS_OF_ACCEPT_USER((short)6, "_ipAddressOfAcceptUser"),
    _USER_ID_NAME((short)7, "_userIdName"),
    _NAME_OF_ACCEPT_PERSON((short)8, "_nameOfAcceptPerson"),
    _ENERGY_EXCHANGE_NOTES((short)9, "_energyExchangeNotes"),
    _AMOUNTS_COMMITTED((short)10, "_amountsCommitted");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _PAO_ID
          return _PAO_ID;
        case 3: // _OFFER_ID
          return _OFFER_ID;
        case 4: // _REVISION_NUMBER
          return _REVISION_NUMBER;
        case 5: // _ACCEPT_STATUS
          return _ACCEPT_STATUS;
        case 6: // _IP_ADDRESS_OF_ACCEPT_USER
          return _IP_ADDRESS_OF_ACCEPT_USER;
        case 7: // _USER_ID_NAME
          return _USER_ID_NAME;
        case 8: // _NAME_OF_ACCEPT_PERSON
          return _NAME_OF_ACCEPT_PERSON;
        case 9: // _ENERGY_EXCHANGE_NOTES
          return _ENERGY_EXCHANGE_NOTES;
        case 10: // _AMOUNTS_COMMITTED
          return _AMOUNTS_COMMITTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___OFFERID_ISSET_ID = 1;
  private static final int ___REVISIONNUMBER_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.LMMessage.class)));
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("_offerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._REVISION_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("_revisionNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._ACCEPT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("_acceptStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._IP_ADDRESS_OF_ACCEPT_USER, new org.apache.thrift.meta_data.FieldMetaData("_ipAddressOfAcceptUser", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._USER_ID_NAME, new org.apache.thrift.meta_data.FieldMetaData("_userIdName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._NAME_OF_ACCEPT_PERSON, new org.apache.thrift.meta_data.FieldMetaData("_nameOfAcceptPerson", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._ENERGY_EXCHANGE_NOTES, new org.apache.thrift.meta_data.FieldMetaData("_energyExchangeNotes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._AMOUNTS_COMMITTED, new org.apache.thrift.meta_data.FieldMetaData("_amountsCommitted", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMEnergyExchangeAccept.class, metaDataMap);
  }

  public LMEnergyExchangeAccept() {
  }

  public LMEnergyExchangeAccept(
    com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage,
    int _paoId,
    int _offerId,
    int _revisionNumber,
    String _acceptStatus,
    String _ipAddressOfAcceptUser,
    String _userIdName,
    String _nameOfAcceptPerson,
    String _energyExchangeNotes,
    List<Double> _amountsCommitted)
  {
    this();
    this._baseMessage = _baseMessage;
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._offerId = _offerId;
    set_offerIdIsSet(true);
    this._revisionNumber = _revisionNumber;
    set_revisionNumberIsSet(true);
    this._acceptStatus = _acceptStatus;
    this._ipAddressOfAcceptUser = _ipAddressOfAcceptUser;
    this._userIdName = _userIdName;
    this._nameOfAcceptPerson = _nameOfAcceptPerson;
    this._energyExchangeNotes = _energyExchangeNotes;
    this._amountsCommitted = _amountsCommitted;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMEnergyExchangeAccept(LMEnergyExchangeAccept other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage(other._baseMessage);
    }
    this._paoId = other._paoId;
    this._offerId = other._offerId;
    this._revisionNumber = other._revisionNumber;
    if (other.isSet_acceptStatus()) {
      this._acceptStatus = other._acceptStatus;
    }
    if (other.isSet_ipAddressOfAcceptUser()) {
      this._ipAddressOfAcceptUser = other._ipAddressOfAcceptUser;
    }
    if (other.isSet_userIdName()) {
      this._userIdName = other._userIdName;
    }
    if (other.isSet_nameOfAcceptPerson()) {
      this._nameOfAcceptPerson = other._nameOfAcceptPerson;
    }
    if (other.isSet_energyExchangeNotes()) {
      this._energyExchangeNotes = other._energyExchangeNotes;
    }
    if (other.isSet_amountsCommitted()) {
      List<Double> __this___amountsCommitted = new ArrayList<Double>();
      for (Double other_element : other._amountsCommitted) {
        __this___amountsCommitted.add(other_element);
      }
      this._amountsCommitted = __this___amountsCommitted;
    }
  }

  public LMEnergyExchangeAccept deepCopy() {
    return new LMEnergyExchangeAccept(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_paoIdIsSet(false);
    this._paoId = 0;
    set_offerIdIsSet(false);
    this._offerId = 0;
    set_revisionNumberIsSet(false);
    this._revisionNumber = 0;
    this._acceptStatus = null;
    this._ipAddressOfAcceptUser = null;
    this._userIdName = null;
    this._nameOfAcceptPerson = null;
    this._energyExchangeNotes = null;
    this._amountsCommitted = null;
  }

  public com.cannontech.messaging.serialization.thrift.generated.LMMessage get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public int get_offerId() {
    return this._offerId;
  }

  public void set_offerId(int _offerId) {
    this._offerId = _offerId;
    set_offerIdIsSet(true);
  }

  public void unset_offerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___OFFERID_ISSET_ID);
  }

  /** Returns true if field _offerId is set (has been assigned a value) and false otherwise */
  public boolean isSet_offerId() {
    return EncodingUtils.testBit(__isset_bitfield, ___OFFERID_ISSET_ID);
  }

  public void set_offerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___OFFERID_ISSET_ID, value);
  }

  public int get_revisionNumber() {
    return this._revisionNumber;
  }

  public void set_revisionNumber(int _revisionNumber) {
    this._revisionNumber = _revisionNumber;
    set_revisionNumberIsSet(true);
  }

  public void unset_revisionNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___REVISIONNUMBER_ISSET_ID);
  }

  /** Returns true if field _revisionNumber is set (has been assigned a value) and false otherwise */
  public boolean isSet_revisionNumber() {
    return EncodingUtils.testBit(__isset_bitfield, ___REVISIONNUMBER_ISSET_ID);
  }

  public void set_revisionNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___REVISIONNUMBER_ISSET_ID, value);
  }

  public String get_acceptStatus() {
    return this._acceptStatus;
  }

  public void set_acceptStatus(String _acceptStatus) {
    this._acceptStatus = _acceptStatus;
  }

  public void unset_acceptStatus() {
    this._acceptStatus = null;
  }

  /** Returns true if field _acceptStatus is set (has been assigned a value) and false otherwise */
  public boolean isSet_acceptStatus() {
    return this._acceptStatus != null;
  }

  public void set_acceptStatusIsSet(boolean value) {
    if (!value) {
      this._acceptStatus = null;
    }
  }

  public String get_ipAddressOfAcceptUser() {
    return this._ipAddressOfAcceptUser;
  }

  public void set_ipAddressOfAcceptUser(String _ipAddressOfAcceptUser) {
    this._ipAddressOfAcceptUser = _ipAddressOfAcceptUser;
  }

  public void unset_ipAddressOfAcceptUser() {
    this._ipAddressOfAcceptUser = null;
  }

  /** Returns true if field _ipAddressOfAcceptUser is set (has been assigned a value) and false otherwise */
  public boolean isSet_ipAddressOfAcceptUser() {
    return this._ipAddressOfAcceptUser != null;
  }

  public void set_ipAddressOfAcceptUserIsSet(boolean value) {
    if (!value) {
      this._ipAddressOfAcceptUser = null;
    }
  }

  public String get_userIdName() {
    return this._userIdName;
  }

  public void set_userIdName(String _userIdName) {
    this._userIdName = _userIdName;
  }

  public void unset_userIdName() {
    this._userIdName = null;
  }

  /** Returns true if field _userIdName is set (has been assigned a value) and false otherwise */
  public boolean isSet_userIdName() {
    return this._userIdName != null;
  }

  public void set_userIdNameIsSet(boolean value) {
    if (!value) {
      this._userIdName = null;
    }
  }

  public String get_nameOfAcceptPerson() {
    return this._nameOfAcceptPerson;
  }

  public void set_nameOfAcceptPerson(String _nameOfAcceptPerson) {
    this._nameOfAcceptPerson = _nameOfAcceptPerson;
  }

  public void unset_nameOfAcceptPerson() {
    this._nameOfAcceptPerson = null;
  }

  /** Returns true if field _nameOfAcceptPerson is set (has been assigned a value) and false otherwise */
  public boolean isSet_nameOfAcceptPerson() {
    return this._nameOfAcceptPerson != null;
  }

  public void set_nameOfAcceptPersonIsSet(boolean value) {
    if (!value) {
      this._nameOfAcceptPerson = null;
    }
  }

  public String get_energyExchangeNotes() {
    return this._energyExchangeNotes;
  }

  public void set_energyExchangeNotes(String _energyExchangeNotes) {
    this._energyExchangeNotes = _energyExchangeNotes;
  }

  public void unset_energyExchangeNotes() {
    this._energyExchangeNotes = null;
  }

  /** Returns true if field _energyExchangeNotes is set (has been assigned a value) and false otherwise */
  public boolean isSet_energyExchangeNotes() {
    return this._energyExchangeNotes != null;
  }

  public void set_energyExchangeNotesIsSet(boolean value) {
    if (!value) {
      this._energyExchangeNotes = null;
    }
  }

  public int get_amountsCommittedSize() {
    return (this._amountsCommitted == null) ? 0 : this._amountsCommitted.size();
  }

  public java.util.Iterator<Double> get_amountsCommittedIterator() {
    return (this._amountsCommitted == null) ? null : this._amountsCommitted.iterator();
  }

  public void addTo_amountsCommitted(double elem) {
    if (this._amountsCommitted == null) {
      this._amountsCommitted = new ArrayList<Double>();
    }
    this._amountsCommitted.add(elem);
  }

  public List<Double> get_amountsCommitted() {
    return this._amountsCommitted;
  }

  public void set_amountsCommitted(List<Double> _amountsCommitted) {
    this._amountsCommitted = _amountsCommitted;
  }

  public void unset_amountsCommitted() {
    this._amountsCommitted = null;
  }

  /** Returns true if field _amountsCommitted is set (has been assigned a value) and false otherwise */
  public boolean isSet_amountsCommitted() {
    return this._amountsCommitted != null;
  }

  public void set_amountsCommittedIsSet(boolean value) {
    if (!value) {
      this._amountsCommitted = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.LMMessage)value);
      }
      break;

    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((Integer)value);
      }
      break;

    case _OFFER_ID:
      if (value == null) {
        unset_offerId();
      } else {
        set_offerId((Integer)value);
      }
      break;

    case _REVISION_NUMBER:
      if (value == null) {
        unset_revisionNumber();
      } else {
        set_revisionNumber((Integer)value);
      }
      break;

    case _ACCEPT_STATUS:
      if (value == null) {
        unset_acceptStatus();
      } else {
        set_acceptStatus((String)value);
      }
      break;

    case _IP_ADDRESS_OF_ACCEPT_USER:
      if (value == null) {
        unset_ipAddressOfAcceptUser();
      } else {
        set_ipAddressOfAcceptUser((String)value);
      }
      break;

    case _USER_ID_NAME:
      if (value == null) {
        unset_userIdName();
      } else {
        set_userIdName((String)value);
      }
      break;

    case _NAME_OF_ACCEPT_PERSON:
      if (value == null) {
        unset_nameOfAcceptPerson();
      } else {
        set_nameOfAcceptPerson((String)value);
      }
      break;

    case _ENERGY_EXCHANGE_NOTES:
      if (value == null) {
        unset_energyExchangeNotes();
      } else {
        set_energyExchangeNotes((String)value);
      }
      break;

    case _AMOUNTS_COMMITTED:
      if (value == null) {
        unset_amountsCommitted();
      } else {
        set_amountsCommitted((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _PAO_ID:
      return Integer.valueOf(get_paoId());

    case _OFFER_ID:
      return Integer.valueOf(get_offerId());

    case _REVISION_NUMBER:
      return Integer.valueOf(get_revisionNumber());

    case _ACCEPT_STATUS:
      return get_acceptStatus();

    case _IP_ADDRESS_OF_ACCEPT_USER:
      return get_ipAddressOfAcceptUser();

    case _USER_ID_NAME:
      return get_userIdName();

    case _NAME_OF_ACCEPT_PERSON:
      return get_nameOfAcceptPerson();

    case _ENERGY_EXCHANGE_NOTES:
      return get_energyExchangeNotes();

    case _AMOUNTS_COMMITTED:
      return get_amountsCommitted();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _PAO_ID:
      return isSet_paoId();
    case _OFFER_ID:
      return isSet_offerId();
    case _REVISION_NUMBER:
      return isSet_revisionNumber();
    case _ACCEPT_STATUS:
      return isSet_acceptStatus();
    case _IP_ADDRESS_OF_ACCEPT_USER:
      return isSet_ipAddressOfAcceptUser();
    case _USER_ID_NAME:
      return isSet_userIdName();
    case _NAME_OF_ACCEPT_PERSON:
      return isSet_nameOfAcceptPerson();
    case _ENERGY_EXCHANGE_NOTES:
      return isSet_energyExchangeNotes();
    case _AMOUNTS_COMMITTED:
      return isSet_amountsCommitted();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LMEnergyExchangeAccept)
      return this.equals((LMEnergyExchangeAccept)that);
    return false;
  }

  public boolean equals(LMEnergyExchangeAccept that) {
    if (that == null)
      return false;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__offerId = true;
    boolean that_present__offerId = true;
    if (this_present__offerId || that_present__offerId) {
      if (!(this_present__offerId && that_present__offerId))
        return false;
      if (this._offerId != that._offerId)
        return false;
    }

    boolean this_present__revisionNumber = true;
    boolean that_present__revisionNumber = true;
    if (this_present__revisionNumber || that_present__revisionNumber) {
      if (!(this_present__revisionNumber && that_present__revisionNumber))
        return false;
      if (this._revisionNumber != that._revisionNumber)
        return false;
    }

    boolean this_present__acceptStatus = true && this.isSet_acceptStatus();
    boolean that_present__acceptStatus = true && that.isSet_acceptStatus();
    if (this_present__acceptStatus || that_present__acceptStatus) {
      if (!(this_present__acceptStatus && that_present__acceptStatus))
        return false;
      if (!this._acceptStatus.equals(that._acceptStatus))
        return false;
    }

    boolean this_present__ipAddressOfAcceptUser = true && this.isSet_ipAddressOfAcceptUser();
    boolean that_present__ipAddressOfAcceptUser = true && that.isSet_ipAddressOfAcceptUser();
    if (this_present__ipAddressOfAcceptUser || that_present__ipAddressOfAcceptUser) {
      if (!(this_present__ipAddressOfAcceptUser && that_present__ipAddressOfAcceptUser))
        return false;
      if (!this._ipAddressOfAcceptUser.equals(that._ipAddressOfAcceptUser))
        return false;
    }

    boolean this_present__userIdName = true && this.isSet_userIdName();
    boolean that_present__userIdName = true && that.isSet_userIdName();
    if (this_present__userIdName || that_present__userIdName) {
      if (!(this_present__userIdName && that_present__userIdName))
        return false;
      if (!this._userIdName.equals(that._userIdName))
        return false;
    }

    boolean this_present__nameOfAcceptPerson = true && this.isSet_nameOfAcceptPerson();
    boolean that_present__nameOfAcceptPerson = true && that.isSet_nameOfAcceptPerson();
    if (this_present__nameOfAcceptPerson || that_present__nameOfAcceptPerson) {
      if (!(this_present__nameOfAcceptPerson && that_present__nameOfAcceptPerson))
        return false;
      if (!this._nameOfAcceptPerson.equals(that._nameOfAcceptPerson))
        return false;
    }

    boolean this_present__energyExchangeNotes = true && this.isSet_energyExchangeNotes();
    boolean that_present__energyExchangeNotes = true && that.isSet_energyExchangeNotes();
    if (this_present__energyExchangeNotes || that_present__energyExchangeNotes) {
      if (!(this_present__energyExchangeNotes && that_present__energyExchangeNotes))
        return false;
      if (!this._energyExchangeNotes.equals(that._energyExchangeNotes))
        return false;
    }

    boolean this_present__amountsCommitted = true && this.isSet_amountsCommitted();
    boolean that_present__amountsCommitted = true && that.isSet_amountsCommitted();
    if (this_present__amountsCommitted || that_present__amountsCommitted) {
      if (!(this_present__amountsCommitted && that_present__amountsCommitted))
        return false;
      if (!this._amountsCommitted.equals(that._amountsCommitted))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LMEnergyExchangeAccept other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LMEnergyExchangeAccept typedOther = (LMEnergyExchangeAccept)other;

    lastComparison = Boolean.valueOf(isSet_baseMessage()).compareTo(typedOther.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, typedOther._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_paoId()).compareTo(typedOther.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, typedOther._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_offerId()).compareTo(typedOther.isSet_offerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_offerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._offerId, typedOther._offerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_revisionNumber()).compareTo(typedOther.isSet_revisionNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_revisionNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._revisionNumber, typedOther._revisionNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_acceptStatus()).compareTo(typedOther.isSet_acceptStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_acceptStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._acceptStatus, typedOther._acceptStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_ipAddressOfAcceptUser()).compareTo(typedOther.isSet_ipAddressOfAcceptUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_ipAddressOfAcceptUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._ipAddressOfAcceptUser, typedOther._ipAddressOfAcceptUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_userIdName()).compareTo(typedOther.isSet_userIdName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_userIdName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._userIdName, typedOther._userIdName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_nameOfAcceptPerson()).compareTo(typedOther.isSet_nameOfAcceptPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_nameOfAcceptPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nameOfAcceptPerson, typedOther._nameOfAcceptPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_energyExchangeNotes()).compareTo(typedOther.isSet_energyExchangeNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_energyExchangeNotes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._energyExchangeNotes, typedOther._energyExchangeNotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_amountsCommitted()).compareTo(typedOther.isSet_amountsCommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_amountsCommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._amountsCommitted, typedOther._amountsCommitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LMEnergyExchangeAccept(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_offerId:");
    sb.append(this._offerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_revisionNumber:");
    sb.append(this._revisionNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_acceptStatus:");
    if (this._acceptStatus == null) {
      sb.append("null");
    } else {
      sb.append(this._acceptStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_ipAddressOfAcceptUser:");
    if (this._ipAddressOfAcceptUser == null) {
      sb.append("null");
    } else {
      sb.append(this._ipAddressOfAcceptUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_userIdName:");
    if (this._userIdName == null) {
      sb.append("null");
    } else {
      sb.append(this._userIdName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_nameOfAcceptPerson:");
    if (this._nameOfAcceptPerson == null) {
      sb.append("null");
    } else {
      sb.append(this._nameOfAcceptPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_energyExchangeNotes:");
    if (this._energyExchangeNotes == null) {
      sb.append("null");
    } else {
      sb.append(this._energyExchangeNotes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_amountsCommitted:");
    if (this._amountsCommitted == null) {
      sb.append("null");
    } else {
      sb.append(this._amountsCommitted);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_offerId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_offerId' is unset! Struct:" + toString());
    }

    if (!isSet_revisionNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_revisionNumber' is unset! Struct:" + toString());
    }

    if (!isSet_acceptStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_acceptStatus' is unset! Struct:" + toString());
    }

    if (!isSet_ipAddressOfAcceptUser()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_ipAddressOfAcceptUser' is unset! Struct:" + toString());
    }

    if (!isSet_userIdName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_userIdName' is unset! Struct:" + toString());
    }

    if (!isSet_nameOfAcceptPerson()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_nameOfAcceptPerson' is unset! Struct:" + toString());
    }

    if (!isSet_energyExchangeNotes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_energyExchangeNotes' is unset! Struct:" + toString());
    }

    if (!isSet_amountsCommitted()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_amountsCommitted' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMEnergyExchangeAcceptStandardSchemeFactory implements SchemeFactory {
    public LMEnergyExchangeAcceptStandardScheme getScheme() {
      return new LMEnergyExchangeAcceptStandardScheme();
    }
  }

  private static class LMEnergyExchangeAcceptStandardScheme extends StandardScheme<LMEnergyExchangeAccept> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMEnergyExchangeAccept struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _OFFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._offerId = iprot.readI32();
              struct.set_offerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _REVISION_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._revisionNumber = iprot.readI32();
              struct.set_revisionNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _ACCEPT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._acceptStatus = iprot.readString();
              struct.set_acceptStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _IP_ADDRESS_OF_ACCEPT_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._ipAddressOfAcceptUser = iprot.readString();
              struct.set_ipAddressOfAcceptUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _USER_ID_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._userIdName = iprot.readString();
              struct.set_userIdNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _NAME_OF_ACCEPT_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._nameOfAcceptPerson = iprot.readString();
              struct.set_nameOfAcceptPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _ENERGY_EXCHANGE_NOTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._energyExchangeNotes = iprot.readString();
              struct.set_energyExchangeNotesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _AMOUNTS_COMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._amountsCommitted = new ArrayList<Double>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  double _elem2; // required
                  _elem2 = iprot.readDouble();
                  struct._amountsCommitted.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.set_amountsCommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMEnergyExchangeAccept struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_OFFER_ID_FIELD_DESC);
      oprot.writeI32(struct._offerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_REVISION_NUMBER_FIELD_DESC);
      oprot.writeI32(struct._revisionNumber);
      oprot.writeFieldEnd();
      if (struct._acceptStatus != null) {
        oprot.writeFieldBegin(_ACCEPT_STATUS_FIELD_DESC);
        oprot.writeString(struct._acceptStatus);
        oprot.writeFieldEnd();
      }
      if (struct._ipAddressOfAcceptUser != null) {
        oprot.writeFieldBegin(_IP_ADDRESS_OF_ACCEPT_USER_FIELD_DESC);
        oprot.writeString(struct._ipAddressOfAcceptUser);
        oprot.writeFieldEnd();
      }
      if (struct._userIdName != null) {
        oprot.writeFieldBegin(_USER_ID_NAME_FIELD_DESC);
        oprot.writeString(struct._userIdName);
        oprot.writeFieldEnd();
      }
      if (struct._nameOfAcceptPerson != null) {
        oprot.writeFieldBegin(_NAME_OF_ACCEPT_PERSON_FIELD_DESC);
        oprot.writeString(struct._nameOfAcceptPerson);
        oprot.writeFieldEnd();
      }
      if (struct._energyExchangeNotes != null) {
        oprot.writeFieldBegin(_ENERGY_EXCHANGE_NOTES_FIELD_DESC);
        oprot.writeString(struct._energyExchangeNotes);
        oprot.writeFieldEnd();
      }
      if (struct._amountsCommitted != null) {
        oprot.writeFieldBegin(_AMOUNTS_COMMITTED_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct._amountsCommitted.size()));
          for (double _iter3 : struct._amountsCommitted)
          {
            oprot.writeDouble(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMEnergyExchangeAcceptTupleSchemeFactory implements SchemeFactory {
    public LMEnergyExchangeAcceptTupleScheme getScheme() {
      return new LMEnergyExchangeAcceptTupleScheme();
    }
  }

  private static class LMEnergyExchangeAcceptTupleScheme extends TupleScheme<LMEnergyExchangeAccept> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMEnergyExchangeAccept struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._paoId);
      oprot.writeI32(struct._offerId);
      oprot.writeI32(struct._revisionNumber);
      oprot.writeString(struct._acceptStatus);
      oprot.writeString(struct._ipAddressOfAcceptUser);
      oprot.writeString(struct._userIdName);
      oprot.writeString(struct._nameOfAcceptPerson);
      oprot.writeString(struct._energyExchangeNotes);
      {
        oprot.writeI32(struct._amountsCommitted.size());
        for (double _iter4 : struct._amountsCommitted)
        {
          oprot.writeDouble(_iter4);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMEnergyExchangeAccept struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._offerId = iprot.readI32();
      struct.set_offerIdIsSet(true);
      struct._revisionNumber = iprot.readI32();
      struct.set_revisionNumberIsSet(true);
      struct._acceptStatus = iprot.readString();
      struct.set_acceptStatusIsSet(true);
      struct._ipAddressOfAcceptUser = iprot.readString();
      struct.set_ipAddressOfAcceptUserIsSet(true);
      struct._userIdName = iprot.readString();
      struct.set_userIdNameIsSet(true);
      struct._nameOfAcceptPerson = iprot.readString();
      struct.set_nameOfAcceptPersonIsSet(true);
      struct._energyExchangeNotes = iprot.readString();
      struct.set_energyExchangeNotesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct._amountsCommitted = new ArrayList<Double>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          double _elem7; // required
          _elem7 = iprot.readDouble();
          struct._amountsCommitted.add(_elem7);
        }
      }
      struct.set_amountsCommittedIsSet(true);
    }
  }

}


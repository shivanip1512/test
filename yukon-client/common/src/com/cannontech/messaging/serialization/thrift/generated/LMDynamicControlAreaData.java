/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LMDynamicControlAreaData implements org.apache.thrift.TBase<LMDynamicControlAreaData, LMDynamicControlAreaData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMDynamicControlAreaData");

  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _DISABLE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_disableFlag", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _NEXT_CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_nextCheckTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField _CONTROL_AREA_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlAreaState", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _CURRENT_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentPriority", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField _CURRENT_DAILY_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentDailyStartTime", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField _CURRENT_DAILY_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentDailyStopTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField _TRIGGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("_triggers", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LMDynamicControlAreaDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LMDynamicControlAreaDataTupleSchemeFactory());
  }

  private int _paoId; // required
  private int _disableFlag; // required
  private long _nextCheckTime; // required
  private int _controlAreaState; // required
  private int _currentPriority; // required
  private int _currentDailyStartTime; // required
  private int _currentDailyStopTime; // required
  private List<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData> _triggers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PAO_ID((short)1, "_paoId"),
    _DISABLE_FLAG((short)2, "_disableFlag"),
    _NEXT_CHECK_TIME((short)3, "_nextCheckTime"),
    _CONTROL_AREA_STATE((short)4, "_controlAreaState"),
    _CURRENT_PRIORITY((short)5, "_currentPriority"),
    _CURRENT_DAILY_START_TIME((short)6, "_currentDailyStartTime"),
    _CURRENT_DAILY_STOP_TIME((short)7, "_currentDailyStopTime"),
    _TRIGGERS((short)8, "_triggers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PAO_ID
          return _PAO_ID;
        case 2: // _DISABLE_FLAG
          return _DISABLE_FLAG;
        case 3: // _NEXT_CHECK_TIME
          return _NEXT_CHECK_TIME;
        case 4: // _CONTROL_AREA_STATE
          return _CONTROL_AREA_STATE;
        case 5: // _CURRENT_PRIORITY
          return _CURRENT_PRIORITY;
        case 6: // _CURRENT_DAILY_START_TIME
          return _CURRENT_DAILY_START_TIME;
        case 7: // _CURRENT_DAILY_STOP_TIME
          return _CURRENT_DAILY_STOP_TIME;
        case 8: // _TRIGGERS
          return _TRIGGERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___DISABLEFLAG_ISSET_ID = 1;
  private static final int ___NEXTCHECKTIME_ISSET_ID = 2;
  private static final int ___CONTROLAREASTATE_ISSET_ID = 3;
  private static final int ___CURRENTPRIORITY_ISSET_ID = 4;
  private static final int ___CURRENTDAILYSTARTTIME_ISSET_ID = 5;
  private static final int ___CURRENTDAILYSTOPTIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._DISABLE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_disableFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._NEXT_CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("_nextCheckTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._CONTROL_AREA_STATE, new org.apache.thrift.meta_data.FieldMetaData("_controlAreaState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("_currentPriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_DAILY_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("_currentDailyStartTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_DAILY_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("_currentDailyStopTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TRIGGERS, new org.apache.thrift.meta_data.FieldMetaData("_triggers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMDynamicControlAreaData.class, metaDataMap);
  }

  public LMDynamicControlAreaData() {
  }

  public LMDynamicControlAreaData(
    int _paoId,
    int _disableFlag,
    long _nextCheckTime,
    int _controlAreaState,
    int _currentPriority,
    int _currentDailyStartTime,
    int _currentDailyStopTime,
    List<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData> _triggers)
  {
    this();
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
    this._nextCheckTime = _nextCheckTime;
    set_nextCheckTimeIsSet(true);
    this._controlAreaState = _controlAreaState;
    set_controlAreaStateIsSet(true);
    this._currentPriority = _currentPriority;
    set_currentPriorityIsSet(true);
    this._currentDailyStartTime = _currentDailyStartTime;
    set_currentDailyStartTimeIsSet(true);
    this._currentDailyStopTime = _currentDailyStopTime;
    set_currentDailyStopTimeIsSet(true);
    this._triggers = _triggers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMDynamicControlAreaData(LMDynamicControlAreaData other) {
    __isset_bitfield = other.__isset_bitfield;
    this._paoId = other._paoId;
    this._disableFlag = other._disableFlag;
    this._nextCheckTime = other._nextCheckTime;
    this._controlAreaState = other._controlAreaState;
    this._currentPriority = other._currentPriority;
    this._currentDailyStartTime = other._currentDailyStartTime;
    this._currentDailyStopTime = other._currentDailyStopTime;
    if (other.isSet_triggers()) {
      List<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData> __this___triggers = new ArrayList<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData>();
      for (com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData other_element : other._triggers) {
        __this___triggers.add(new com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData(other_element));
      }
      this._triggers = __this___triggers;
    }
  }

  public LMDynamicControlAreaData deepCopy() {
    return new LMDynamicControlAreaData(this);
  }

  @Override
  public void clear() {
    set_paoIdIsSet(false);
    this._paoId = 0;
    set_disableFlagIsSet(false);
    this._disableFlag = 0;
    set_nextCheckTimeIsSet(false);
    this._nextCheckTime = 0;
    set_controlAreaStateIsSet(false);
    this._controlAreaState = 0;
    set_currentPriorityIsSet(false);
    this._currentPriority = 0;
    set_currentDailyStartTimeIsSet(false);
    this._currentDailyStartTime = 0;
    set_currentDailyStopTimeIsSet(false);
    this._currentDailyStopTime = 0;
    this._triggers = null;
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public int get_disableFlag() {
    return this._disableFlag;
  }

  public void set_disableFlag(int _disableFlag) {
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
  }

  public void unset_disableFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  /** Returns true if field _disableFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_disableFlag() {
    return EncodingUtils.testBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  public void set_disableFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID, value);
  }

  public long get_nextCheckTime() {
    return this._nextCheckTime;
  }

  public void set_nextCheckTime(long _nextCheckTime) {
    this._nextCheckTime = _nextCheckTime;
    set_nextCheckTimeIsSet(true);
  }

  public void unset_nextCheckTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___NEXTCHECKTIME_ISSET_ID);
  }

  /** Returns true if field _nextCheckTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_nextCheckTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___NEXTCHECKTIME_ISSET_ID);
  }

  public void set_nextCheckTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___NEXTCHECKTIME_ISSET_ID, value);
  }

  public int get_controlAreaState() {
    return this._controlAreaState;
  }

  public void set_controlAreaState(int _controlAreaState) {
    this._controlAreaState = _controlAreaState;
    set_controlAreaStateIsSet(true);
  }

  public void unset_controlAreaState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___CONTROLAREASTATE_ISSET_ID);
  }

  /** Returns true if field _controlAreaState is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlAreaState() {
    return EncodingUtils.testBit(__isset_bitfield, ___CONTROLAREASTATE_ISSET_ID);
  }

  public void set_controlAreaStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___CONTROLAREASTATE_ISSET_ID, value);
  }

  public int get_currentPriority() {
    return this._currentPriority;
  }

  public void set_currentPriority(int _currentPriority) {
    this._currentPriority = _currentPriority;
    set_currentPriorityIsSet(true);
  }

  public void unset_currentPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___CURRENTPRIORITY_ISSET_ID);
  }

  /** Returns true if field _currentPriority is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentPriority() {
    return EncodingUtils.testBit(__isset_bitfield, ___CURRENTPRIORITY_ISSET_ID);
  }

  public void set_currentPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___CURRENTPRIORITY_ISSET_ID, value);
  }

  public int get_currentDailyStartTime() {
    return this._currentDailyStartTime;
  }

  public void set_currentDailyStartTime(int _currentDailyStartTime) {
    this._currentDailyStartTime = _currentDailyStartTime;
    set_currentDailyStartTimeIsSet(true);
  }

  public void unset_currentDailyStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___CURRENTDAILYSTARTTIME_ISSET_ID);
  }

  /** Returns true if field _currentDailyStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentDailyStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___CURRENTDAILYSTARTTIME_ISSET_ID);
  }

  public void set_currentDailyStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___CURRENTDAILYSTARTTIME_ISSET_ID, value);
  }

  public int get_currentDailyStopTime() {
    return this._currentDailyStopTime;
  }

  public void set_currentDailyStopTime(int _currentDailyStopTime) {
    this._currentDailyStopTime = _currentDailyStopTime;
    set_currentDailyStopTimeIsSet(true);
  }

  public void unset_currentDailyStopTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___CURRENTDAILYSTOPTIME_ISSET_ID);
  }

  /** Returns true if field _currentDailyStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentDailyStopTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___CURRENTDAILYSTOPTIME_ISSET_ID);
  }

  public void set_currentDailyStopTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___CURRENTDAILYSTOPTIME_ISSET_ID, value);
  }

  public int get_triggersSize() {
    return (this._triggers == null) ? 0 : this._triggers.size();
  }

  public java.util.Iterator<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData> get_triggersIterator() {
    return (this._triggers == null) ? null : this._triggers.iterator();
  }

  public void addTo_triggers(com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData elem) {
    if (this._triggers == null) {
      this._triggers = new ArrayList<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData>();
    }
    this._triggers.add(elem);
  }

  public List<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData> get_triggers() {
    return this._triggers;
  }

  public void set_triggers(List<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData> _triggers) {
    this._triggers = _triggers;
  }

  public void unset_triggers() {
    this._triggers = null;
  }

  /** Returns true if field _triggers is set (has been assigned a value) and false otherwise */
  public boolean isSet_triggers() {
    return this._triggers != null;
  }

  public void set_triggersIsSet(boolean value) {
    if (!value) {
      this._triggers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((Integer)value);
      }
      break;

    case _DISABLE_FLAG:
      if (value == null) {
        unset_disableFlag();
      } else {
        set_disableFlag((Integer)value);
      }
      break;

    case _NEXT_CHECK_TIME:
      if (value == null) {
        unset_nextCheckTime();
      } else {
        set_nextCheckTime((Long)value);
      }
      break;

    case _CONTROL_AREA_STATE:
      if (value == null) {
        unset_controlAreaState();
      } else {
        set_controlAreaState((Integer)value);
      }
      break;

    case _CURRENT_PRIORITY:
      if (value == null) {
        unset_currentPriority();
      } else {
        set_currentPriority((Integer)value);
      }
      break;

    case _CURRENT_DAILY_START_TIME:
      if (value == null) {
        unset_currentDailyStartTime();
      } else {
        set_currentDailyStartTime((Integer)value);
      }
      break;

    case _CURRENT_DAILY_STOP_TIME:
      if (value == null) {
        unset_currentDailyStopTime();
      } else {
        set_currentDailyStopTime((Integer)value);
      }
      break;

    case _TRIGGERS:
      if (value == null) {
        unset_triggers();
      } else {
        set_triggers((List<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _PAO_ID:
      return Integer.valueOf(get_paoId());

    case _DISABLE_FLAG:
      return Integer.valueOf(get_disableFlag());

    case _NEXT_CHECK_TIME:
      return Long.valueOf(get_nextCheckTime());

    case _CONTROL_AREA_STATE:
      return Integer.valueOf(get_controlAreaState());

    case _CURRENT_PRIORITY:
      return Integer.valueOf(get_currentPriority());

    case _CURRENT_DAILY_START_TIME:
      return Integer.valueOf(get_currentDailyStartTime());

    case _CURRENT_DAILY_STOP_TIME:
      return Integer.valueOf(get_currentDailyStopTime());

    case _TRIGGERS:
      return get_triggers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _PAO_ID:
      return isSet_paoId();
    case _DISABLE_FLAG:
      return isSet_disableFlag();
    case _NEXT_CHECK_TIME:
      return isSet_nextCheckTime();
    case _CONTROL_AREA_STATE:
      return isSet_controlAreaState();
    case _CURRENT_PRIORITY:
      return isSet_currentPriority();
    case _CURRENT_DAILY_START_TIME:
      return isSet_currentDailyStartTime();
    case _CURRENT_DAILY_STOP_TIME:
      return isSet_currentDailyStopTime();
    case _TRIGGERS:
      return isSet_triggers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LMDynamicControlAreaData)
      return this.equals((LMDynamicControlAreaData)that);
    return false;
  }

  public boolean equals(LMDynamicControlAreaData that) {
    if (that == null)
      return false;

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__disableFlag = true;
    boolean that_present__disableFlag = true;
    if (this_present__disableFlag || that_present__disableFlag) {
      if (!(this_present__disableFlag && that_present__disableFlag))
        return false;
      if (this._disableFlag != that._disableFlag)
        return false;
    }

    boolean this_present__nextCheckTime = true;
    boolean that_present__nextCheckTime = true;
    if (this_present__nextCheckTime || that_present__nextCheckTime) {
      if (!(this_present__nextCheckTime && that_present__nextCheckTime))
        return false;
      if (this._nextCheckTime != that._nextCheckTime)
        return false;
    }

    boolean this_present__controlAreaState = true;
    boolean that_present__controlAreaState = true;
    if (this_present__controlAreaState || that_present__controlAreaState) {
      if (!(this_present__controlAreaState && that_present__controlAreaState))
        return false;
      if (this._controlAreaState != that._controlAreaState)
        return false;
    }

    boolean this_present__currentPriority = true;
    boolean that_present__currentPriority = true;
    if (this_present__currentPriority || that_present__currentPriority) {
      if (!(this_present__currentPriority && that_present__currentPriority))
        return false;
      if (this._currentPriority != that._currentPriority)
        return false;
    }

    boolean this_present__currentDailyStartTime = true;
    boolean that_present__currentDailyStartTime = true;
    if (this_present__currentDailyStartTime || that_present__currentDailyStartTime) {
      if (!(this_present__currentDailyStartTime && that_present__currentDailyStartTime))
        return false;
      if (this._currentDailyStartTime != that._currentDailyStartTime)
        return false;
    }

    boolean this_present__currentDailyStopTime = true;
    boolean that_present__currentDailyStopTime = true;
    if (this_present__currentDailyStopTime || that_present__currentDailyStopTime) {
      if (!(this_present__currentDailyStopTime && that_present__currentDailyStopTime))
        return false;
      if (this._currentDailyStopTime != that._currentDailyStopTime)
        return false;
    }

    boolean this_present__triggers = true && this.isSet_triggers();
    boolean that_present__triggers = true && that.isSet_triggers();
    if (this_present__triggers || that_present__triggers) {
      if (!(this_present__triggers && that_present__triggers))
        return false;
      if (!this._triggers.equals(that._triggers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LMDynamicControlAreaData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LMDynamicControlAreaData typedOther = (LMDynamicControlAreaData)other;

    lastComparison = Boolean.valueOf(isSet_paoId()).compareTo(typedOther.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, typedOther._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_disableFlag()).compareTo(typedOther.isSet_disableFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_disableFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._disableFlag, typedOther._disableFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_nextCheckTime()).compareTo(typedOther.isSet_nextCheckTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_nextCheckTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nextCheckTime, typedOther._nextCheckTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_controlAreaState()).compareTo(typedOther.isSet_controlAreaState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlAreaState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlAreaState, typedOther._controlAreaState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_currentPriority()).compareTo(typedOther.isSet_currentPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentPriority, typedOther._currentPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_currentDailyStartTime()).compareTo(typedOther.isSet_currentDailyStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentDailyStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentDailyStartTime, typedOther._currentDailyStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_currentDailyStopTime()).compareTo(typedOther.isSet_currentDailyStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentDailyStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentDailyStopTime, typedOther._currentDailyStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_triggers()).compareTo(typedOther.isSet_triggers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_triggers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._triggers, typedOther._triggers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LMDynamicControlAreaData(");
    boolean first = true;

    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_disableFlag:");
    sb.append(this._disableFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_nextCheckTime:");
    sb.append(this._nextCheckTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlAreaState:");
    sb.append(this._controlAreaState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentPriority:");
    sb.append(this._currentPriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentDailyStartTime:");
    sb.append(this._currentDailyStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentDailyStopTime:");
    sb.append(this._currentDailyStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_triggers:");
    if (this._triggers == null) {
      sb.append("null");
    } else {
      sb.append(this._triggers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_disableFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_disableFlag' is unset! Struct:" + toString());
    }

    if (!isSet_nextCheckTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_nextCheckTime' is unset! Struct:" + toString());
    }

    if (!isSet_controlAreaState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlAreaState' is unset! Struct:" + toString());
    }

    if (!isSet_currentPriority()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentPriority' is unset! Struct:" + toString());
    }

    if (!isSet_currentDailyStartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentDailyStartTime' is unset! Struct:" + toString());
    }

    if (!isSet_currentDailyStopTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentDailyStopTime' is unset! Struct:" + toString());
    }

    if (!isSet_triggers()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_triggers' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMDynamicControlAreaDataStandardSchemeFactory implements SchemeFactory {
    public LMDynamicControlAreaDataStandardScheme getScheme() {
      return new LMDynamicControlAreaDataStandardScheme();
    }
  }

  private static class LMDynamicControlAreaDataStandardScheme extends StandardScheme<LMDynamicControlAreaData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMDynamicControlAreaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _DISABLE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._disableFlag = iprot.readI32();
              struct.set_disableFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _NEXT_CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._nextCheckTime = iprot.readI64();
              struct.set_nextCheckTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _CONTROL_AREA_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._controlAreaState = iprot.readI32();
              struct.set_controlAreaStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _CURRENT_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentPriority = iprot.readI32();
              struct.set_currentPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _CURRENT_DAILY_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentDailyStartTime = iprot.readI32();
              struct.set_currentDailyStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _CURRENT_DAILY_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentDailyStopTime = iprot.readI32();
              struct.set_currentDailyStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _TRIGGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._triggers = new ArrayList<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData _elem2; // required
                  _elem2 = new com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData();
                  _elem2.read(iprot);
                  struct._triggers.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.set_triggersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMDynamicControlAreaData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DISABLE_FLAG_FIELD_DESC);
      oprot.writeI32(struct._disableFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NEXT_CHECK_TIME_FIELD_DESC);
      oprot.writeI64(struct._nextCheckTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_AREA_STATE_FIELD_DESC);
      oprot.writeI32(struct._controlAreaState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_PRIORITY_FIELD_DESC);
      oprot.writeI32(struct._currentPriority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_DAILY_START_TIME_FIELD_DESC);
      oprot.writeI32(struct._currentDailyStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_DAILY_STOP_TIME_FIELD_DESC);
      oprot.writeI32(struct._currentDailyStopTime);
      oprot.writeFieldEnd();
      if (struct._triggers != null) {
        oprot.writeFieldBegin(_TRIGGERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct._triggers.size()));
          for (com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData _iter3 : struct._triggers)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMDynamicControlAreaDataTupleSchemeFactory implements SchemeFactory {
    public LMDynamicControlAreaDataTupleScheme getScheme() {
      return new LMDynamicControlAreaDataTupleScheme();
    }
  }

  private static class LMDynamicControlAreaDataTupleScheme extends TupleScheme<LMDynamicControlAreaData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMDynamicControlAreaData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct._paoId);
      oprot.writeI32(struct._disableFlag);
      oprot.writeI64(struct._nextCheckTime);
      oprot.writeI32(struct._controlAreaState);
      oprot.writeI32(struct._currentPriority);
      oprot.writeI32(struct._currentDailyStartTime);
      oprot.writeI32(struct._currentDailyStopTime);
      {
        oprot.writeI32(struct._triggers.size());
        for (com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData _iter4 : struct._triggers)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMDynamicControlAreaData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._disableFlag = iprot.readI32();
      struct.set_disableFlagIsSet(true);
      struct._nextCheckTime = iprot.readI64();
      struct.set_nextCheckTimeIsSet(true);
      struct._controlAreaState = iprot.readI32();
      struct.set_controlAreaStateIsSet(true);
      struct._currentPriority = iprot.readI32();
      struct.set_currentPriorityIsSet(true);
      struct._currentDailyStartTime = iprot.readI32();
      struct.set_currentDailyStartTimeIsSet(true);
      struct._currentDailyStopTime = iprot.readI32();
      struct.set_currentDailyStopTimeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct._triggers = new ArrayList<com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData _elem7; // required
          _elem7 = new com.cannontech.messaging.serialization.thrift.generated.LMDynamicTriggerData();
          _elem7.read(iprot);
          struct._triggers.add(_elem7);
        }
      }
      struct.set_triggersIsSet(true);
    }
  }

}


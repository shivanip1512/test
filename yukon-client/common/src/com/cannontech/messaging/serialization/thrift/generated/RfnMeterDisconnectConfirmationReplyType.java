/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;


@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-07-08")
public enum RfnMeterDisconnectConfirmationReplyType implements org.apache.thrift.TEnum {
  SUCCESS(0),
  FAILURE(1),
  FAILURE_REQUEST_REJECTED_REASON_UNKNOWN(2),
  FAILURE_SERVICE_NOT_SUPPORTED(3),
  FAILURE_INSUFFICIENT_SECURITY_CLEARANCE(4),
  FAILURE_OPERATION_NOT_POSSIBLE(5),
  FAILURE_INAPPROPRIATE_ACTION_REQUESTED(6),
  FAILURE_DEVICE_BUSY(7),
  FAILURE_DATA_NOT_READY(8),
  FAILURE_DATA_LOCKED(9),
  FAILURE_RENEGOTIATE_REQUEST(10),
  FAILURE_INVALID_STATE(11),
  FAILURE_REJECTED_COMMAND_LOAD_SIDE_VOLTAGE_HIGHER_THAN_THRESHOLD(12),
  FAILURE_ARM_REJECTED_SWITCH_NOT_OPEN(13),
  FAILURE_METER_IN_TEST_MODE(14),
  FAILURE_CLOSE_PRESSED_BUT_METER_NOT_ARMED(15),
  FAILURE_METER_NOT_CAPABLE_OF_SERVICE_DISCONNECT(16),
  FAILURE_SERVICE_DISCONNECT_NOT_ENABLED(17),
  FAILURE_SERVICE_DISCONNECT_IS_CHARGING(18),
  FAILURE_SERVICE_DISCONNECT_ALREADY_OPERATING(19),
  FAILURE_CAPACITOR_DISCHARGE_NOT_DETECTED(20),
  FAILURE_LOAD_SIDE_VOLTAGE_DETECTED_AFTER_DISCONNECT(21),
  FAILURE_NO_LOAD_SIDE_VOLTAGE_DETECTED_AFTER_CONNECT(22),
  FAILED_UNEXPECTED_STATUS(23),
  NOT_SUPPORTED(24),
  NETWORK_TIMEOUT(25),
  TIMEOUT(26);

  private final int value;

  private RfnMeterDisconnectConfirmationReplyType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static RfnMeterDisconnectConfirmationReplyType findByValue(int value) { 
    switch (value) {
      case 0:
        return SUCCESS;
      case 1:
        return FAILURE;
      case 2:
        return FAILURE_REQUEST_REJECTED_REASON_UNKNOWN;
      case 3:
        return FAILURE_SERVICE_NOT_SUPPORTED;
      case 4:
        return FAILURE_INSUFFICIENT_SECURITY_CLEARANCE;
      case 5:
        return FAILURE_OPERATION_NOT_POSSIBLE;
      case 6:
        return FAILURE_INAPPROPRIATE_ACTION_REQUESTED;
      case 7:
        return FAILURE_DEVICE_BUSY;
      case 8:
        return FAILURE_DATA_NOT_READY;
      case 9:
        return FAILURE_DATA_LOCKED;
      case 10:
        return FAILURE_RENEGOTIATE_REQUEST;
      case 11:
        return FAILURE_INVALID_STATE;
      case 12:
        return FAILURE_REJECTED_COMMAND_LOAD_SIDE_VOLTAGE_HIGHER_THAN_THRESHOLD;
      case 13:
        return FAILURE_ARM_REJECTED_SWITCH_NOT_OPEN;
      case 14:
        return FAILURE_METER_IN_TEST_MODE;
      case 15:
        return FAILURE_CLOSE_PRESSED_BUT_METER_NOT_ARMED;
      case 16:
        return FAILURE_METER_NOT_CAPABLE_OF_SERVICE_DISCONNECT;
      case 17:
        return FAILURE_SERVICE_DISCONNECT_NOT_ENABLED;
      case 18:
        return FAILURE_SERVICE_DISCONNECT_IS_CHARGING;
      case 19:
        return FAILURE_SERVICE_DISCONNECT_ALREADY_OPERATING;
      case 20:
        return FAILURE_CAPACITOR_DISCHARGE_NOT_DETECTED;
      case 21:
        return FAILURE_LOAD_SIDE_VOLTAGE_DETECTED_AFTER_DISCONNECT;
      case 22:
        return FAILURE_NO_LOAD_SIDE_VOLTAGE_DETECTED_AFTER_CONNECT;
      case 23:
        return FAILED_UNEXPECTED_STATUS;
      case 24:
        return NOT_SUPPORTED;
      case 25:
        return NETWORK_TIMEOUT;
      case 26:
        return TIMEOUT;
      default:
        return null;
    }
  }
}

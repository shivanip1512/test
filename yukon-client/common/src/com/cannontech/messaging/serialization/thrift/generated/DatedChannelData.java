/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-11-03")
public class DatedChannelData implements org.apache.thrift.TBase<DatedChannelData, DatedChannelData._Fields>, java.io.Serializable, Cloneable, Comparable<DatedChannelData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DatedChannelData");

  private static final org.apache.thrift.protocol.TField CHANNEL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("channelData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BASE_CHANNEL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("baseChannelData", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DatedChannelDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DatedChannelDataTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable ChannelData channelData; // required
  private long timeStamp; // required
  private @org.apache.thrift.annotation.Nullable ChannelData baseChannelData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANNEL_DATA((short)1, "channelData"),
    TIME_STAMP((short)2, "timeStamp"),
    BASE_CHANNEL_DATA((short)3, "baseChannelData");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANNEL_DATA
          return CHANNEL_DATA;
        case 2: // TIME_STAMP
          return TIME_STAMP;
        case 3: // BASE_CHANNEL_DATA
          return BASE_CHANNEL_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BASE_CHANNEL_DATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANNEL_DATA, new org.apache.thrift.meta_data.FieldMetaData("channelData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelData.class)));
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("timeStamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.BASE_CHANNEL_DATA, new org.apache.thrift.meta_data.FieldMetaData("baseChannelData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelData.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DatedChannelData.class, metaDataMap);
  }

  public DatedChannelData() {
  }

  public DatedChannelData(
    ChannelData channelData,
    long timeStamp)
  {
    this();
    this.channelData = channelData;
    this.timeStamp = timeStamp;
    setTimeStampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DatedChannelData(DatedChannelData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChannelData()) {
      this.channelData = new ChannelData(other.channelData);
    }
    this.timeStamp = other.timeStamp;
    if (other.isSetBaseChannelData()) {
      this.baseChannelData = new ChannelData(other.baseChannelData);
    }
  }

  public DatedChannelData deepCopy() {
    return new DatedChannelData(this);
  }

  @Override
  public void clear() {
    this.channelData = null;
    setTimeStampIsSet(false);
    this.timeStamp = 0;
    this.baseChannelData = null;
  }

  @org.apache.thrift.annotation.Nullable
  public ChannelData getChannelData() {
    return this.channelData;
  }

  public void setChannelData(@org.apache.thrift.annotation.Nullable ChannelData channelData) {
    this.channelData = channelData;
  }

  public void unsetChannelData() {
    this.channelData = null;
  }

  /** Returns true if field channelData is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelData() {
    return this.channelData != null;
  }

  public void setChannelDataIsSet(boolean value) {
    if (!value) {
      this.channelData = null;
    }
  }

  public long getTimeStamp() {
    return this.timeStamp;
  }

  public void setTimeStamp(long timeStamp) {
    this.timeStamp = timeStamp;
    setTimeStampIsSet(true);
  }

  public void unsetTimeStamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timeStamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeStamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimeStampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public ChannelData getBaseChannelData() {
    return this.baseChannelData;
  }

  public void setBaseChannelData(@org.apache.thrift.annotation.Nullable ChannelData baseChannelData) {
    this.baseChannelData = baseChannelData;
  }

  public void unsetBaseChannelData() {
    this.baseChannelData = null;
  }

  /** Returns true if field baseChannelData is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseChannelData() {
    return this.baseChannelData != null;
  }

  public void setBaseChannelDataIsSet(boolean value) {
    if (!value) {
      this.baseChannelData = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHANNEL_DATA:
      if (value == null) {
        unsetChannelData();
      } else {
        setChannelData((ChannelData)value);
      }
      break;

    case TIME_STAMP:
      if (value == null) {
        unsetTimeStamp();
      } else {
        setTimeStamp((java.lang.Long)value);
      }
      break;

    case BASE_CHANNEL_DATA:
      if (value == null) {
        unsetBaseChannelData();
      } else {
        setBaseChannelData((ChannelData)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANNEL_DATA:
      return getChannelData();

    case TIME_STAMP:
      return getTimeStamp();

    case BASE_CHANNEL_DATA:
      return getBaseChannelData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHANNEL_DATA:
      return isSetChannelData();
    case TIME_STAMP:
      return isSetTimeStamp();
    case BASE_CHANNEL_DATA:
      return isSetBaseChannelData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DatedChannelData)
      return this.equals((DatedChannelData)that);
    return false;
  }

  public boolean equals(DatedChannelData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_channelData = true && this.isSetChannelData();
    boolean that_present_channelData = true && that.isSetChannelData();
    if (this_present_channelData || that_present_channelData) {
      if (!(this_present_channelData && that_present_channelData))
        return false;
      if (!this.channelData.equals(that.channelData))
        return false;
    }

    boolean this_present_timeStamp = true;
    boolean that_present_timeStamp = true;
    if (this_present_timeStamp || that_present_timeStamp) {
      if (!(this_present_timeStamp && that_present_timeStamp))
        return false;
      if (this.timeStamp != that.timeStamp)
        return false;
    }

    boolean this_present_baseChannelData = true && this.isSetBaseChannelData();
    boolean that_present_baseChannelData = true && that.isSetBaseChannelData();
    if (this_present_baseChannelData || that_present_baseChannelData) {
      if (!(this_present_baseChannelData && that_present_baseChannelData))
        return false;
      if (!this.baseChannelData.equals(that.baseChannelData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetChannelData()) ? 131071 : 524287);
    if (isSetChannelData())
      hashCode = hashCode * 8191 + channelData.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeStamp);

    hashCode = hashCode * 8191 + ((isSetBaseChannelData()) ? 131071 : 524287);
    if (isSetBaseChannelData())
      hashCode = hashCode * 8191 + baseChannelData.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DatedChannelData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetChannelData()).compareTo(other.isSetChannelData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelData, other.channelData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeStamp()).compareTo(other.isSetTimeStamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeStamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, other.timeStamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBaseChannelData()).compareTo(other.isSetBaseChannelData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseChannelData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseChannelData, other.baseChannelData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DatedChannelData(");
    boolean first = true;

    sb.append("channelData:");
    if (this.channelData == null) {
      sb.append("null");
    } else {
      sb.append(this.channelData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeStamp:");
    sb.append(this.timeStamp);
    first = false;
    if (isSetBaseChannelData()) {
      if (!first) sb.append(", ");
      sb.append("baseChannelData:");
      if (this.baseChannelData == null) {
        sb.append("null");
      } else {
        sb.append(this.baseChannelData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetChannelData()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelData' is unset! Struct:" + toString());
    }

    if (!isSetTimeStamp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeStamp' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (channelData != null) {
      channelData.validate();
    }
    if (baseChannelData != null) {
      baseChannelData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DatedChannelDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DatedChannelDataStandardScheme getScheme() {
      return new DatedChannelDataStandardScheme();
    }
  }

  private static class DatedChannelDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<DatedChannelData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DatedChannelData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANNEL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.channelData = new ChannelData();
              struct.channelData.read(iprot);
              struct.setChannelDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeStamp = iprot.readI64();
              struct.setTimeStampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BASE_CHANNEL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.baseChannelData = new ChannelData();
              struct.baseChannelData.read(iprot);
              struct.setBaseChannelDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DatedChannelData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.channelData != null) {
        oprot.writeFieldBegin(CHANNEL_DATA_FIELD_DESC);
        struct.channelData.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
      oprot.writeI64(struct.timeStamp);
      oprot.writeFieldEnd();
      if (struct.baseChannelData != null) {
        if (struct.isSetBaseChannelData()) {
          oprot.writeFieldBegin(BASE_CHANNEL_DATA_FIELD_DESC);
          struct.baseChannelData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DatedChannelDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DatedChannelDataTupleScheme getScheme() {
      return new DatedChannelDataTupleScheme();
    }
  }

  private static class DatedChannelDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<DatedChannelData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DatedChannelData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.channelData.write(oprot);
      oprot.writeI64(struct.timeStamp);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBaseChannelData()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetBaseChannelData()) {
        struct.baseChannelData.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DatedChannelData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.channelData = new ChannelData();
      struct.channelData.read(iprot);
      struct.setChannelDataIsSet(true);
      struct.timeStamp = iprot.readI64();
      struct.setTimeStampIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.baseChannelData = new ChannelData();
        struct.baseChannelData.read(iprot);
        struct.setBaseChannelDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


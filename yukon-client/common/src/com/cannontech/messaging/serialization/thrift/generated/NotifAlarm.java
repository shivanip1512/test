/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-12-16")
public class NotifAlarm implements org.apache.thrift.TBase<NotifAlarm, NotifAlarm._Fields>, java.io.Serializable, Cloneable, Comparable<NotifAlarm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotifAlarm");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _NOTIF_GROUP_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("_notifGroupIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField _CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_categoryId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_pointId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("_condition", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField _ALARM_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("_alarmTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField _ACKNOWLEDGED_FIELD_DESC = new org.apache.thrift.protocol.TField("_acknowledged", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField _ABNORMAL_FIELD_DESC = new org.apache.thrift.protocol.TField("_abnormal", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NotifAlarmStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NotifAlarmTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _notifGroupIds; // required
  private int _categoryId; // required
  private int _pointId; // required
  private int _condition; // required
  private double _value; // required
  private long _alarmTimestamp; // required
  private boolean _acknowledged; // required
  private boolean _abnormal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _NOTIF_GROUP_IDS((short)2, "_notifGroupIds"),
    _CATEGORY_ID((short)3, "_categoryId"),
    _POINT_ID((short)4, "_pointId"),
    _CONDITION((short)5, "_condition"),
    _VALUE((short)6, "_value"),
    _ALARM_TIMESTAMP((short)7, "_alarmTimestamp"),
    _ACKNOWLEDGED((short)8, "_acknowledged"),
    _ABNORMAL((short)9, "_abnormal");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _NOTIF_GROUP_IDS
          return _NOTIF_GROUP_IDS;
        case 3: // _CATEGORY_ID
          return _CATEGORY_ID;
        case 4: // _POINT_ID
          return _POINT_ID;
        case 5: // _CONDITION
          return _CONDITION;
        case 6: // _VALUE
          return _VALUE;
        case 7: // _ALARM_TIMESTAMP
          return _ALARM_TIMESTAMP;
        case 8: // _ACKNOWLEDGED
          return _ACKNOWLEDGED;
        case 9: // _ABNORMAL
          return _ABNORMAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___CATEGORYID_ISSET_ID = 0;
  private static final int ___POINTID_ISSET_ID = 1;
  private static final int ___CONDITION_ISSET_ID = 2;
  private static final int ___VALUE_ISSET_ID = 3;
  private static final int ___ALARMTIMESTAMP_ISSET_ID = 4;
  private static final int ___ACKNOWLEDGED_ISSET_ID = 5;
  private static final int ___ABNORMAL_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.Message.class)));
    tmpMap.put(_Fields._NOTIF_GROUP_IDS, new org.apache.thrift.meta_data.FieldMetaData("_notifGroupIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields._CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("_categoryId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_pointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONDITION, new org.apache.thrift.meta_data.FieldMetaData("_condition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._ALARM_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("_alarmTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._ACKNOWLEDGED, new org.apache.thrift.meta_data.FieldMetaData("_acknowledged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._ABNORMAL, new org.apache.thrift.meta_data.FieldMetaData("_abnormal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotifAlarm.class, metaDataMap);
  }

  public NotifAlarm() {
  }

  public NotifAlarm(
    com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage,
    java.util.List<java.lang.Integer> _notifGroupIds,
    int _categoryId,
    int _pointId,
    int _condition,
    double _value,
    long _alarmTimestamp,
    boolean _acknowledged,
    boolean _abnormal)
  {
    this();
    this._baseMessage = _baseMessage;
    this._notifGroupIds = _notifGroupIds;
    this._categoryId = _categoryId;
    set_categoryIdIsSet(true);
    this._pointId = _pointId;
    set_pointIdIsSet(true);
    this._condition = _condition;
    set_conditionIsSet(true);
    this._value = _value;
    set_valueIsSet(true);
    this._alarmTimestamp = _alarmTimestamp;
    set_alarmTimestampIsSet(true);
    this._acknowledged = _acknowledged;
    set_acknowledgedIsSet(true);
    this._abnormal = _abnormal;
    set_abnormalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotifAlarm(NotifAlarm other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message(other._baseMessage);
    }
    if (other.isSet_notifGroupIds()) {
      java.util.List<java.lang.Integer> __this___notifGroupIds = new java.util.ArrayList<java.lang.Integer>(other._notifGroupIds);
      this._notifGroupIds = __this___notifGroupIds;
    }
    this._categoryId = other._categoryId;
    this._pointId = other._pointId;
    this._condition = other._condition;
    this._value = other._value;
    this._alarmTimestamp = other._alarmTimestamp;
    this._acknowledged = other._acknowledged;
    this._abnormal = other._abnormal;
  }

  public NotifAlarm deepCopy() {
    return new NotifAlarm(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    this._notifGroupIds = null;
    set_categoryIdIsSet(false);
    this._categoryId = 0;
    set_pointIdIsSet(false);
    this._pointId = 0;
    set_conditionIsSet(false);
    this._condition = 0;
    set_valueIsSet(false);
    this._value = 0.0;
    set_alarmTimestampIsSet(false);
    this._alarmTimestamp = 0;
    set_acknowledgedIsSet(false);
    this._acknowledged = false;
    set_abnormalIsSet(false);
    this._abnormal = false;
  }

  @org.apache.thrift.annotation.Nullable
  public com.cannontech.messaging.serialization.thrift.generated.Message get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(@org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_notifGroupIdsSize() {
    return (this._notifGroupIds == null) ? 0 : this._notifGroupIds.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> get_notifGroupIdsIterator() {
    return (this._notifGroupIds == null) ? null : this._notifGroupIds.iterator();
  }

  public void addTo_notifGroupIds(int elem) {
    if (this._notifGroupIds == null) {
      this._notifGroupIds = new java.util.ArrayList<java.lang.Integer>();
    }
    this._notifGroupIds.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> get_notifGroupIds() {
    return this._notifGroupIds;
  }

  public void set_notifGroupIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _notifGroupIds) {
    this._notifGroupIds = _notifGroupIds;
  }

  public void unset_notifGroupIds() {
    this._notifGroupIds = null;
  }

  /** Returns true if field _notifGroupIds is set (has been assigned a value) and false otherwise */
  public boolean isSet_notifGroupIds() {
    return this._notifGroupIds != null;
  }

  public void set_notifGroupIdsIsSet(boolean value) {
    if (!value) {
      this._notifGroupIds = null;
    }
  }

  public int get_categoryId() {
    return this._categoryId;
  }

  public void set_categoryId(int _categoryId) {
    this._categoryId = _categoryId;
    set_categoryIdIsSet(true);
  }

  public void unset_categoryId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CATEGORYID_ISSET_ID);
  }

  /** Returns true if field _categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSet_categoryId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CATEGORYID_ISSET_ID);
  }

  public void set_categoryIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CATEGORYID_ISSET_ID, value);
  }

  public int get_pointId() {
    return this._pointId;
  }

  public void set_pointId(int _pointId) {
    this._pointId = _pointId;
    set_pointIdIsSet(true);
  }

  public void unset_pointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___POINTID_ISSET_ID);
  }

  /** Returns true if field _pointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_pointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___POINTID_ISSET_ID);
  }

  public void set_pointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___POINTID_ISSET_ID, value);
  }

  public int get_condition() {
    return this._condition;
  }

  public void set_condition(int _condition) {
    this._condition = _condition;
    set_conditionIsSet(true);
  }

  public void unset_condition() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONDITION_ISSET_ID);
  }

  /** Returns true if field _condition is set (has been assigned a value) and false otherwise */
  public boolean isSet_condition() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONDITION_ISSET_ID);
  }

  public void set_conditionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONDITION_ISSET_ID, value);
  }

  public double get_value() {
    return this._value;
  }

  public void set_value(double _value) {
    this._value = _value;
    set_valueIsSet(true);
  }

  public void unset_value() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___VALUE_ISSET_ID);
  }

  /** Returns true if field _value is set (has been assigned a value) and false otherwise */
  public boolean isSet_value() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___VALUE_ISSET_ID);
  }

  public void set_valueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___VALUE_ISSET_ID, value);
  }

  public long get_alarmTimestamp() {
    return this._alarmTimestamp;
  }

  public void set_alarmTimestamp(long _alarmTimestamp) {
    this._alarmTimestamp = _alarmTimestamp;
    set_alarmTimestampIsSet(true);
  }

  public void unset_alarmTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ALARMTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field _alarmTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSet_alarmTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ALARMTIMESTAMP_ISSET_ID);
  }

  public void set_alarmTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ALARMTIMESTAMP_ISSET_ID, value);
  }

  public boolean is_acknowledged() {
    return this._acknowledged;
  }

  public void set_acknowledged(boolean _acknowledged) {
    this._acknowledged = _acknowledged;
    set_acknowledgedIsSet(true);
  }

  public void unset_acknowledged() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ACKNOWLEDGED_ISSET_ID);
  }

  /** Returns true if field _acknowledged is set (has been assigned a value) and false otherwise */
  public boolean isSet_acknowledged() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ACKNOWLEDGED_ISSET_ID);
  }

  public void set_acknowledgedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ACKNOWLEDGED_ISSET_ID, value);
  }

  public boolean is_abnormal() {
    return this._abnormal;
  }

  public void set_abnormal(boolean _abnormal) {
    this._abnormal = _abnormal;
    set_abnormalIsSet(true);
  }

  public void unset_abnormal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ABNORMAL_ISSET_ID);
  }

  /** Returns true if field _abnormal is set (has been assigned a value) and false otherwise */
  public boolean isSet_abnormal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ABNORMAL_ISSET_ID);
  }

  public void set_abnormalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ABNORMAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.Message)value);
      }
      break;

    case _NOTIF_GROUP_IDS:
      if (value == null) {
        unset_notifGroupIds();
      } else {
        set_notifGroupIds((java.util.List<java.lang.Integer>)value);
      }
      break;

    case _CATEGORY_ID:
      if (value == null) {
        unset_categoryId();
      } else {
        set_categoryId((java.lang.Integer)value);
      }
      break;

    case _POINT_ID:
      if (value == null) {
        unset_pointId();
      } else {
        set_pointId((java.lang.Integer)value);
      }
      break;

    case _CONDITION:
      if (value == null) {
        unset_condition();
      } else {
        set_condition((java.lang.Integer)value);
      }
      break;

    case _VALUE:
      if (value == null) {
        unset_value();
      } else {
        set_value((java.lang.Double)value);
      }
      break;

    case _ALARM_TIMESTAMP:
      if (value == null) {
        unset_alarmTimestamp();
      } else {
        set_alarmTimestamp((java.lang.Long)value);
      }
      break;

    case _ACKNOWLEDGED:
      if (value == null) {
        unset_acknowledged();
      } else {
        set_acknowledged((java.lang.Boolean)value);
      }
      break;

    case _ABNORMAL:
      if (value == null) {
        unset_abnormal();
      } else {
        set_abnormal((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _NOTIF_GROUP_IDS:
      return get_notifGroupIds();

    case _CATEGORY_ID:
      return get_categoryId();

    case _POINT_ID:
      return get_pointId();

    case _CONDITION:
      return get_condition();

    case _VALUE:
      return get_value();

    case _ALARM_TIMESTAMP:
      return get_alarmTimestamp();

    case _ACKNOWLEDGED:
      return is_acknowledged();

    case _ABNORMAL:
      return is_abnormal();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _NOTIF_GROUP_IDS:
      return isSet_notifGroupIds();
    case _CATEGORY_ID:
      return isSet_categoryId();
    case _POINT_ID:
      return isSet_pointId();
    case _CONDITION:
      return isSet_condition();
    case _VALUE:
      return isSet_value();
    case _ALARM_TIMESTAMP:
      return isSet_alarmTimestamp();
    case _ACKNOWLEDGED:
      return isSet_acknowledged();
    case _ABNORMAL:
      return isSet_abnormal();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NotifAlarm)
      return this.equals((NotifAlarm)that);
    return false;
  }

  public boolean equals(NotifAlarm that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__notifGroupIds = true && this.isSet_notifGroupIds();
    boolean that_present__notifGroupIds = true && that.isSet_notifGroupIds();
    if (this_present__notifGroupIds || that_present__notifGroupIds) {
      if (!(this_present__notifGroupIds && that_present__notifGroupIds))
        return false;
      if (!this._notifGroupIds.equals(that._notifGroupIds))
        return false;
    }

    boolean this_present__categoryId = true;
    boolean that_present__categoryId = true;
    if (this_present__categoryId || that_present__categoryId) {
      if (!(this_present__categoryId && that_present__categoryId))
        return false;
      if (this._categoryId != that._categoryId)
        return false;
    }

    boolean this_present__pointId = true;
    boolean that_present__pointId = true;
    if (this_present__pointId || that_present__pointId) {
      if (!(this_present__pointId && that_present__pointId))
        return false;
      if (this._pointId != that._pointId)
        return false;
    }

    boolean this_present__condition = true;
    boolean that_present__condition = true;
    if (this_present__condition || that_present__condition) {
      if (!(this_present__condition && that_present__condition))
        return false;
      if (this._condition != that._condition)
        return false;
    }

    boolean this_present__value = true;
    boolean that_present__value = true;
    if (this_present__value || that_present__value) {
      if (!(this_present__value && that_present__value))
        return false;
      if (this._value != that._value)
        return false;
    }

    boolean this_present__alarmTimestamp = true;
    boolean that_present__alarmTimestamp = true;
    if (this_present__alarmTimestamp || that_present__alarmTimestamp) {
      if (!(this_present__alarmTimestamp && that_present__alarmTimestamp))
        return false;
      if (this._alarmTimestamp != that._alarmTimestamp)
        return false;
    }

    boolean this_present__acknowledged = true;
    boolean that_present__acknowledged = true;
    if (this_present__acknowledged || that_present__acknowledged) {
      if (!(this_present__acknowledged && that_present__acknowledged))
        return false;
      if (this._acknowledged != that._acknowledged)
        return false;
    }

    boolean this_present__abnormal = true;
    boolean that_present__abnormal = true;
    if (this_present__abnormal || that_present__abnormal) {
      if (!(this_present__abnormal && that_present__abnormal))
        return false;
      if (this._abnormal != that._abnormal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_baseMessage()) ? 131071 : 524287);
    if (isSet_baseMessage())
      hashCode = hashCode * 8191 + _baseMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSet_notifGroupIds()) ? 131071 : 524287);
    if (isSet_notifGroupIds())
      hashCode = hashCode * 8191 + _notifGroupIds.hashCode();

    hashCode = hashCode * 8191 + _categoryId;

    hashCode = hashCode * 8191 + _pointId;

    hashCode = hashCode * 8191 + _condition;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_value);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_alarmTimestamp);

    hashCode = hashCode * 8191 + ((_acknowledged) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((_abnormal) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(NotifAlarm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_baseMessage()).compareTo(other.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, other._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_notifGroupIds()).compareTo(other.isSet_notifGroupIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_notifGroupIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._notifGroupIds, other._notifGroupIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_categoryId()).compareTo(other.isSet_categoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_categoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._categoryId, other._categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_pointId()).compareTo(other.isSet_pointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_pointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._pointId, other._pointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_condition()).compareTo(other.isSet_condition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_condition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._condition, other._condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_value()).compareTo(other.isSet_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, other._value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_alarmTimestamp()).compareTo(other.isSet_alarmTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_alarmTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._alarmTimestamp, other._alarmTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_acknowledged()).compareTo(other.isSet_acknowledged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_acknowledged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._acknowledged, other._acknowledged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_abnormal()).compareTo(other.isSet_abnormal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_abnormal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._abnormal, other._abnormal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NotifAlarm(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_notifGroupIds:");
    if (this._notifGroupIds == null) {
      sb.append("null");
    } else {
      sb.append(this._notifGroupIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_categoryId:");
    sb.append(this._categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_pointId:");
    sb.append(this._pointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_condition:");
    sb.append(this._condition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_value:");
    sb.append(this._value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_alarmTimestamp:");
    sb.append(this._alarmTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_acknowledged:");
    sb.append(this._acknowledged);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_abnormal:");
    sb.append(this._abnormal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_notifGroupIds()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_notifGroupIds' is unset! Struct:" + toString());
    }

    if (!isSet_categoryId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_categoryId' is unset! Struct:" + toString());
    }

    if (!isSet_pointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_pointId' is unset! Struct:" + toString());
    }

    if (!isSet_condition()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_condition' is unset! Struct:" + toString());
    }

    if (!isSet_value()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_value' is unset! Struct:" + toString());
    }

    if (!isSet_alarmTimestamp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_alarmTimestamp' is unset! Struct:" + toString());
    }

    if (!isSet_acknowledged()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_acknowledged' is unset! Struct:" + toString());
    }

    if (!isSet_abnormal()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_abnormal' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotifAlarmStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NotifAlarmStandardScheme getScheme() {
      return new NotifAlarmStandardScheme();
    }
  }

  private static class NotifAlarmStandardScheme extends org.apache.thrift.scheme.StandardScheme<NotifAlarm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotifAlarm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _NOTIF_GROUP_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._notifGroupIds = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct._notifGroupIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.set_notifGroupIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._categoryId = iprot.readI32();
              struct.set_categoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._pointId = iprot.readI32();
              struct.set_pointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._condition = iprot.readI32();
              struct.set_conditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._value = iprot.readDouble();
              struct.set_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _ALARM_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._alarmTimestamp = iprot.readI64();
              struct.set_alarmTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _ACKNOWLEDGED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._acknowledged = iprot.readBool();
              struct.set_acknowledgedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _ABNORMAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._abnormal = iprot.readBool();
              struct.set_abnormalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotifAlarm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct._notifGroupIds != null) {
        oprot.writeFieldBegin(_NOTIF_GROUP_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct._notifGroupIds.size()));
          for (int _iter3 : struct._notifGroupIds)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct._categoryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._pointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONDITION_FIELD_DESC);
      oprot.writeI32(struct._condition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ALARM_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct._alarmTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ACKNOWLEDGED_FIELD_DESC);
      oprot.writeBool(struct._acknowledged);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ABNORMAL_FIELD_DESC);
      oprot.writeBool(struct._abnormal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotifAlarmTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NotifAlarmTupleScheme getScheme() {
      return new NotifAlarmTupleScheme();
    }
  }

  private static class NotifAlarmTupleScheme extends org.apache.thrift.scheme.TupleScheme<NotifAlarm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotifAlarm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      {
        oprot.writeI32(struct._notifGroupIds.size());
        for (int _iter4 : struct._notifGroupIds)
        {
          oprot.writeI32(_iter4);
        }
      }
      oprot.writeI32(struct._categoryId);
      oprot.writeI32(struct._pointId);
      oprot.writeI32(struct._condition);
      oprot.writeDouble(struct._value);
      oprot.writeI64(struct._alarmTimestamp);
      oprot.writeBool(struct._acknowledged);
      oprot.writeBool(struct._abnormal);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotifAlarm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct._notifGroupIds = new java.util.ArrayList<java.lang.Integer>(_list5.size);
        int _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readI32();
          struct._notifGroupIds.add(_elem6);
        }
      }
      struct.set_notifGroupIdsIsSet(true);
      struct._categoryId = iprot.readI32();
      struct.set_categoryIdIsSet(true);
      struct._pointId = iprot.readI32();
      struct.set_pointIdIsSet(true);
      struct._condition = iprot.readI32();
      struct.set_conditionIsSet(true);
      struct._value = iprot.readDouble();
      struct.set_valueIsSet(true);
      struct._alarmTimestamp = iprot.readI64();
      struct.set_alarmTimestampIsSet(true);
      struct._acknowledged = iprot.readBool();
      struct.set_acknowledgedIsSet(true);
      struct._abnormal = iprot.readBool();
      struct.set_abnormalIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


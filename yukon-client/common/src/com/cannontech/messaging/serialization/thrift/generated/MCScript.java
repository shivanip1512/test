/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-27")
public class MCScript implements org.apache.thrift.TBase<MCScript, MCScript._Fields>, java.io.Serializable, Cloneable, Comparable<MCScript> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MCScript");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("_contents", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MCScriptStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MCScriptTupleSchemeFactory();

  private com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage; // required
  private java.lang.String _name; // required
  private java.lang.String _contents; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _NAME((short)2, "_name"),
    _CONTENTS((short)3, "_contents");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _NAME
          return _NAME;
        case 3: // _CONTENTS
          return _CONTENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.Message.class)));
    tmpMap.put(_Fields._NAME, new org.apache.thrift.meta_data.FieldMetaData("_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("_contents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MCScript.class, metaDataMap);
  }

  public MCScript() {
  }

  public MCScript(
    com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage,
    java.lang.String _name,
    java.lang.String _contents)
  {
    this();
    this._baseMessage = _baseMessage;
    this._name = _name;
    this._contents = _contents;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MCScript(MCScript other) {
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message(other._baseMessage);
    }
    if (other.isSet_name()) {
      this._name = other._name;
    }
    if (other.isSet_contents()) {
      this._contents = other._contents;
    }
  }

  public MCScript deepCopy() {
    return new MCScript(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    this._name = null;
    this._contents = null;
  }

  public com.cannontech.messaging.serialization.thrift.generated.Message get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public java.lang.String get_name() {
    return this._name;
  }

  public void set_name(java.lang.String _name) {
    this._name = _name;
  }

  public void unset_name() {
    this._name = null;
  }

  /** Returns true if field _name is set (has been assigned a value) and false otherwise */
  public boolean isSet_name() {
    return this._name != null;
  }

  public void set_nameIsSet(boolean value) {
    if (!value) {
      this._name = null;
    }
  }

  public java.lang.String get_contents() {
    return this._contents;
  }

  public void set_contents(java.lang.String _contents) {
    this._contents = _contents;
  }

  public void unset_contents() {
    this._contents = null;
  }

  /** Returns true if field _contents is set (has been assigned a value) and false otherwise */
  public boolean isSet_contents() {
    return this._contents != null;
  }

  public void set_contentsIsSet(boolean value) {
    if (!value) {
      this._contents = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.Message)value);
      }
      break;

    case _NAME:
      if (value == null) {
        unset_name();
      } else {
        set_name((java.lang.String)value);
      }
      break;

    case _CONTENTS:
      if (value == null) {
        unset_contents();
      } else {
        set_contents((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _NAME:
      return get_name();

    case _CONTENTS:
      return get_contents();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _NAME:
      return isSet_name();
    case _CONTENTS:
      return isSet_contents();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MCScript)
      return this.equals((MCScript)that);
    return false;
  }

  public boolean equals(MCScript that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__name = true && this.isSet_name();
    boolean that_present__name = true && that.isSet_name();
    if (this_present__name || that_present__name) {
      if (!(this_present__name && that_present__name))
        return false;
      if (!this._name.equals(that._name))
        return false;
    }

    boolean this_present__contents = true && this.isSet_contents();
    boolean that_present__contents = true && that.isSet_contents();
    if (this_present__contents || that_present__contents) {
      if (!(this_present__contents && that_present__contents))
        return false;
      if (!this._contents.equals(that._contents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_baseMessage()) ? 131071 : 524287);
    if (isSet_baseMessage())
      hashCode = hashCode * 8191 + _baseMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSet_name()) ? 131071 : 524287);
    if (isSet_name())
      hashCode = hashCode * 8191 + _name.hashCode();

    hashCode = hashCode * 8191 + ((isSet_contents()) ? 131071 : 524287);
    if (isSet_contents())
      hashCode = hashCode * 8191 + _contents.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MCScript other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_baseMessage()).compareTo(other.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, other._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_name()).compareTo(other.isSet_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._name, other._name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_contents()).compareTo(other.isSet_contents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_contents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._contents, other._contents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MCScript(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_name:");
    if (this._name == null) {
      sb.append("null");
    } else {
      sb.append(this._name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_contents:");
    if (this._contents == null) {
      sb.append("null");
    } else {
      sb.append(this._contents);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_name' is unset! Struct:" + toString());
    }

    if (!isSet_contents()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_contents' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MCScriptStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MCScriptStandardScheme getScheme() {
      return new MCScriptStandardScheme();
    }
  }

  private static class MCScriptStandardScheme extends org.apache.thrift.scheme.StandardScheme<MCScript> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MCScript struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._name = iprot.readString();
              struct.set_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._contents = iprot.readString();
              struct.set_contentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MCScript struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct._name != null) {
        oprot.writeFieldBegin(_NAME_FIELD_DESC);
        oprot.writeString(struct._name);
        oprot.writeFieldEnd();
      }
      if (struct._contents != null) {
        oprot.writeFieldBegin(_CONTENTS_FIELD_DESC);
        oprot.writeString(struct._contents);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MCScriptTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MCScriptTupleScheme getScheme() {
      return new MCScriptTupleScheme();
    }
  }

  private static class MCScriptTupleScheme extends org.apache.thrift.scheme.TupleScheme<MCScript> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MCScript struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeString(struct._name);
      oprot.writeString(struct._contents);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MCScript struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._name = iprot.readString();
      struct.set_nameIsSet(true);
      struct._contents = iprot.readString();
      struct.set_contentsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LMEnergyExchangeControl implements org.apache.thrift.TBase<LMEnergyExchangeControl, LMEnergyExchangeControl._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMEnergyExchangeControl");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("_command", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_offerId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _OFFER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_offerDate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField _NOTIFICATION_DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_notificationDatetime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField _EXPIRATION_DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_expirationDatetime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField _ADDITIONAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("_additionalInfo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField _AMOUNTS_REQUESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("_amountsRequested", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField _PRICES_OFFERED_FIELD_DESC = new org.apache.thrift.protocol.TField("_pricesOffered", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LMEnergyExchangeControlStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LMEnergyExchangeControlTupleSchemeFactory());
  }

  private com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage; // required
  private int _command; // required
  private int _paoId; // required
  private int _offerId; // required
  private long _offerDate; // required
  private long _notificationDatetime; // required
  private long _expirationDatetime; // required
  private String _additionalInfo; // required
  private List<Double> _amountsRequested; // required
  private List<Integer> _pricesOffered; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _COMMAND((short)2, "_command"),
    _PAO_ID((short)3, "_paoId"),
    _OFFER_ID((short)4, "_offerId"),
    _OFFER_DATE((short)5, "_offerDate"),
    _NOTIFICATION_DATETIME((short)6, "_notificationDatetime"),
    _EXPIRATION_DATETIME((short)7, "_expirationDatetime"),
    _ADDITIONAL_INFO((short)8, "_additionalInfo"),
    _AMOUNTS_REQUESTED((short)9, "_amountsRequested"),
    _PRICES_OFFERED((short)10, "_pricesOffered");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _COMMAND
          return _COMMAND;
        case 3: // _PAO_ID
          return _PAO_ID;
        case 4: // _OFFER_ID
          return _OFFER_ID;
        case 5: // _OFFER_DATE
          return _OFFER_DATE;
        case 6: // _NOTIFICATION_DATETIME
          return _NOTIFICATION_DATETIME;
        case 7: // _EXPIRATION_DATETIME
          return _EXPIRATION_DATETIME;
        case 8: // _ADDITIONAL_INFO
          return _ADDITIONAL_INFO;
        case 9: // _AMOUNTS_REQUESTED
          return _AMOUNTS_REQUESTED;
        case 10: // _PRICES_OFFERED
          return _PRICES_OFFERED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___COMMAND_ISSET_ID = 0;
  private static final int ___PAOID_ISSET_ID = 1;
  private static final int ___OFFERID_ISSET_ID = 2;
  private static final int ___OFFERDATE_ISSET_ID = 3;
  private static final int ___NOTIFICATIONDATETIME_ISSET_ID = 4;
  private static final int ___EXPIRATIONDATETIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.LMMessage.class)));
    tmpMap.put(_Fields._COMMAND, new org.apache.thrift.meta_data.FieldMetaData("_command", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("_offerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._OFFER_DATE, new org.apache.thrift.meta_data.FieldMetaData("_offerDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._NOTIFICATION_DATETIME, new org.apache.thrift.meta_data.FieldMetaData("_notificationDatetime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._EXPIRATION_DATETIME, new org.apache.thrift.meta_data.FieldMetaData("_expirationDatetime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._ADDITIONAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("_additionalInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._AMOUNTS_REQUESTED, new org.apache.thrift.meta_data.FieldMetaData("_amountsRequested", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields._PRICES_OFFERED, new org.apache.thrift.meta_data.FieldMetaData("_pricesOffered", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMEnergyExchangeControl.class, metaDataMap);
  }

  public LMEnergyExchangeControl() {
  }

  public LMEnergyExchangeControl(
    com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage,
    int _command,
    int _paoId,
    int _offerId,
    long _offerDate,
    long _notificationDatetime,
    long _expirationDatetime,
    String _additionalInfo,
    List<Double> _amountsRequested,
    List<Integer> _pricesOffered)
  {
    this();
    this._baseMessage = _baseMessage;
    this._command = _command;
    set_commandIsSet(true);
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._offerId = _offerId;
    set_offerIdIsSet(true);
    this._offerDate = _offerDate;
    set_offerDateIsSet(true);
    this._notificationDatetime = _notificationDatetime;
    set_notificationDatetimeIsSet(true);
    this._expirationDatetime = _expirationDatetime;
    set_expirationDatetimeIsSet(true);
    this._additionalInfo = _additionalInfo;
    this._amountsRequested = _amountsRequested;
    this._pricesOffered = _pricesOffered;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMEnergyExchangeControl(LMEnergyExchangeControl other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage(other._baseMessage);
    }
    this._command = other._command;
    this._paoId = other._paoId;
    this._offerId = other._offerId;
    this._offerDate = other._offerDate;
    this._notificationDatetime = other._notificationDatetime;
    this._expirationDatetime = other._expirationDatetime;
    if (other.isSet_additionalInfo()) {
      this._additionalInfo = other._additionalInfo;
    }
    if (other.isSet_amountsRequested()) {
      List<Double> __this___amountsRequested = new ArrayList<Double>();
      for (Double other_element : other._amountsRequested) {
        __this___amountsRequested.add(other_element);
      }
      this._amountsRequested = __this___amountsRequested;
    }
    if (other.isSet_pricesOffered()) {
      List<Integer> __this___pricesOffered = new ArrayList<Integer>();
      for (Integer other_element : other._pricesOffered) {
        __this___pricesOffered.add(other_element);
      }
      this._pricesOffered = __this___pricesOffered;
    }
  }

  public LMEnergyExchangeControl deepCopy() {
    return new LMEnergyExchangeControl(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_commandIsSet(false);
    this._command = 0;
    set_paoIdIsSet(false);
    this._paoId = 0;
    set_offerIdIsSet(false);
    this._offerId = 0;
    set_offerDateIsSet(false);
    this._offerDate = 0;
    set_notificationDatetimeIsSet(false);
    this._notificationDatetime = 0;
    set_expirationDatetimeIsSet(false);
    this._expirationDatetime = 0;
    this._additionalInfo = null;
    this._amountsRequested = null;
    this._pricesOffered = null;
  }

  public com.cannontech.messaging.serialization.thrift.generated.LMMessage get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_command() {
    return this._command;
  }

  public void set_command(int _command) {
    this._command = _command;
    set_commandIsSet(true);
  }

  public void unset_command() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___COMMAND_ISSET_ID);
  }

  /** Returns true if field _command is set (has been assigned a value) and false otherwise */
  public boolean isSet_command() {
    return EncodingUtils.testBit(__isset_bitfield, ___COMMAND_ISSET_ID);
  }

  public void set_commandIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___COMMAND_ISSET_ID, value);
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public int get_offerId() {
    return this._offerId;
  }

  public void set_offerId(int _offerId) {
    this._offerId = _offerId;
    set_offerIdIsSet(true);
  }

  public void unset_offerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___OFFERID_ISSET_ID);
  }

  /** Returns true if field _offerId is set (has been assigned a value) and false otherwise */
  public boolean isSet_offerId() {
    return EncodingUtils.testBit(__isset_bitfield, ___OFFERID_ISSET_ID);
  }

  public void set_offerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___OFFERID_ISSET_ID, value);
  }

  public long get_offerDate() {
    return this._offerDate;
  }

  public void set_offerDate(long _offerDate) {
    this._offerDate = _offerDate;
    set_offerDateIsSet(true);
  }

  public void unset_offerDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___OFFERDATE_ISSET_ID);
  }

  /** Returns true if field _offerDate is set (has been assigned a value) and false otherwise */
  public boolean isSet_offerDate() {
    return EncodingUtils.testBit(__isset_bitfield, ___OFFERDATE_ISSET_ID);
  }

  public void set_offerDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___OFFERDATE_ISSET_ID, value);
  }

  public long get_notificationDatetime() {
    return this._notificationDatetime;
  }

  public void set_notificationDatetime(long _notificationDatetime) {
    this._notificationDatetime = _notificationDatetime;
    set_notificationDatetimeIsSet(true);
  }

  public void unset_notificationDatetime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___NOTIFICATIONDATETIME_ISSET_ID);
  }

  /** Returns true if field _notificationDatetime is set (has been assigned a value) and false otherwise */
  public boolean isSet_notificationDatetime() {
    return EncodingUtils.testBit(__isset_bitfield, ___NOTIFICATIONDATETIME_ISSET_ID);
  }

  public void set_notificationDatetimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___NOTIFICATIONDATETIME_ISSET_ID, value);
  }

  public long get_expirationDatetime() {
    return this._expirationDatetime;
  }

  public void set_expirationDatetime(long _expirationDatetime) {
    this._expirationDatetime = _expirationDatetime;
    set_expirationDatetimeIsSet(true);
  }

  public void unset_expirationDatetime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___EXPIRATIONDATETIME_ISSET_ID);
  }

  /** Returns true if field _expirationDatetime is set (has been assigned a value) and false otherwise */
  public boolean isSet_expirationDatetime() {
    return EncodingUtils.testBit(__isset_bitfield, ___EXPIRATIONDATETIME_ISSET_ID);
  }

  public void set_expirationDatetimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___EXPIRATIONDATETIME_ISSET_ID, value);
  }

  public String get_additionalInfo() {
    return this._additionalInfo;
  }

  public void set_additionalInfo(String _additionalInfo) {
    this._additionalInfo = _additionalInfo;
  }

  public void unset_additionalInfo() {
    this._additionalInfo = null;
  }

  /** Returns true if field _additionalInfo is set (has been assigned a value) and false otherwise */
  public boolean isSet_additionalInfo() {
    return this._additionalInfo != null;
  }

  public void set_additionalInfoIsSet(boolean value) {
    if (!value) {
      this._additionalInfo = null;
    }
  }

  public int get_amountsRequestedSize() {
    return (this._amountsRequested == null) ? 0 : this._amountsRequested.size();
  }

  public java.util.Iterator<Double> get_amountsRequestedIterator() {
    return (this._amountsRequested == null) ? null : this._amountsRequested.iterator();
  }

  public void addTo_amountsRequested(double elem) {
    if (this._amountsRequested == null) {
      this._amountsRequested = new ArrayList<Double>();
    }
    this._amountsRequested.add(elem);
  }

  public List<Double> get_amountsRequested() {
    return this._amountsRequested;
  }

  public void set_amountsRequested(List<Double> _amountsRequested) {
    this._amountsRequested = _amountsRequested;
  }

  public void unset_amountsRequested() {
    this._amountsRequested = null;
  }

  /** Returns true if field _amountsRequested is set (has been assigned a value) and false otherwise */
  public boolean isSet_amountsRequested() {
    return this._amountsRequested != null;
  }

  public void set_amountsRequestedIsSet(boolean value) {
    if (!value) {
      this._amountsRequested = null;
    }
  }

  public int get_pricesOfferedSize() {
    return (this._pricesOffered == null) ? 0 : this._pricesOffered.size();
  }

  public java.util.Iterator<Integer> get_pricesOfferedIterator() {
    return (this._pricesOffered == null) ? null : this._pricesOffered.iterator();
  }

  public void addTo_pricesOffered(int elem) {
    if (this._pricesOffered == null) {
      this._pricesOffered = new ArrayList<Integer>();
    }
    this._pricesOffered.add(elem);
  }

  public List<Integer> get_pricesOffered() {
    return this._pricesOffered;
  }

  public void set_pricesOffered(List<Integer> _pricesOffered) {
    this._pricesOffered = _pricesOffered;
  }

  public void unset_pricesOffered() {
    this._pricesOffered = null;
  }

  /** Returns true if field _pricesOffered is set (has been assigned a value) and false otherwise */
  public boolean isSet_pricesOffered() {
    return this._pricesOffered != null;
  }

  public void set_pricesOfferedIsSet(boolean value) {
    if (!value) {
      this._pricesOffered = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.LMMessage)value);
      }
      break;

    case _COMMAND:
      if (value == null) {
        unset_command();
      } else {
        set_command((Integer)value);
      }
      break;

    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((Integer)value);
      }
      break;

    case _OFFER_ID:
      if (value == null) {
        unset_offerId();
      } else {
        set_offerId((Integer)value);
      }
      break;

    case _OFFER_DATE:
      if (value == null) {
        unset_offerDate();
      } else {
        set_offerDate((Long)value);
      }
      break;

    case _NOTIFICATION_DATETIME:
      if (value == null) {
        unset_notificationDatetime();
      } else {
        set_notificationDatetime((Long)value);
      }
      break;

    case _EXPIRATION_DATETIME:
      if (value == null) {
        unset_expirationDatetime();
      } else {
        set_expirationDatetime((Long)value);
      }
      break;

    case _ADDITIONAL_INFO:
      if (value == null) {
        unset_additionalInfo();
      } else {
        set_additionalInfo((String)value);
      }
      break;

    case _AMOUNTS_REQUESTED:
      if (value == null) {
        unset_amountsRequested();
      } else {
        set_amountsRequested((List<Double>)value);
      }
      break;

    case _PRICES_OFFERED:
      if (value == null) {
        unset_pricesOffered();
      } else {
        set_pricesOffered((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _COMMAND:
      return Integer.valueOf(get_command());

    case _PAO_ID:
      return Integer.valueOf(get_paoId());

    case _OFFER_ID:
      return Integer.valueOf(get_offerId());

    case _OFFER_DATE:
      return Long.valueOf(get_offerDate());

    case _NOTIFICATION_DATETIME:
      return Long.valueOf(get_notificationDatetime());

    case _EXPIRATION_DATETIME:
      return Long.valueOf(get_expirationDatetime());

    case _ADDITIONAL_INFO:
      return get_additionalInfo();

    case _AMOUNTS_REQUESTED:
      return get_amountsRequested();

    case _PRICES_OFFERED:
      return get_pricesOffered();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _COMMAND:
      return isSet_command();
    case _PAO_ID:
      return isSet_paoId();
    case _OFFER_ID:
      return isSet_offerId();
    case _OFFER_DATE:
      return isSet_offerDate();
    case _NOTIFICATION_DATETIME:
      return isSet_notificationDatetime();
    case _EXPIRATION_DATETIME:
      return isSet_expirationDatetime();
    case _ADDITIONAL_INFO:
      return isSet_additionalInfo();
    case _AMOUNTS_REQUESTED:
      return isSet_amountsRequested();
    case _PRICES_OFFERED:
      return isSet_pricesOffered();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LMEnergyExchangeControl)
      return this.equals((LMEnergyExchangeControl)that);
    return false;
  }

  public boolean equals(LMEnergyExchangeControl that) {
    if (that == null)
      return false;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__command = true;
    boolean that_present__command = true;
    if (this_present__command || that_present__command) {
      if (!(this_present__command && that_present__command))
        return false;
      if (this._command != that._command)
        return false;
    }

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__offerId = true;
    boolean that_present__offerId = true;
    if (this_present__offerId || that_present__offerId) {
      if (!(this_present__offerId && that_present__offerId))
        return false;
      if (this._offerId != that._offerId)
        return false;
    }

    boolean this_present__offerDate = true;
    boolean that_present__offerDate = true;
    if (this_present__offerDate || that_present__offerDate) {
      if (!(this_present__offerDate && that_present__offerDate))
        return false;
      if (this._offerDate != that._offerDate)
        return false;
    }

    boolean this_present__notificationDatetime = true;
    boolean that_present__notificationDatetime = true;
    if (this_present__notificationDatetime || that_present__notificationDatetime) {
      if (!(this_present__notificationDatetime && that_present__notificationDatetime))
        return false;
      if (this._notificationDatetime != that._notificationDatetime)
        return false;
    }

    boolean this_present__expirationDatetime = true;
    boolean that_present__expirationDatetime = true;
    if (this_present__expirationDatetime || that_present__expirationDatetime) {
      if (!(this_present__expirationDatetime && that_present__expirationDatetime))
        return false;
      if (this._expirationDatetime != that._expirationDatetime)
        return false;
    }

    boolean this_present__additionalInfo = true && this.isSet_additionalInfo();
    boolean that_present__additionalInfo = true && that.isSet_additionalInfo();
    if (this_present__additionalInfo || that_present__additionalInfo) {
      if (!(this_present__additionalInfo && that_present__additionalInfo))
        return false;
      if (!this._additionalInfo.equals(that._additionalInfo))
        return false;
    }

    boolean this_present__amountsRequested = true && this.isSet_amountsRequested();
    boolean that_present__amountsRequested = true && that.isSet_amountsRequested();
    if (this_present__amountsRequested || that_present__amountsRequested) {
      if (!(this_present__amountsRequested && that_present__amountsRequested))
        return false;
      if (!this._amountsRequested.equals(that._amountsRequested))
        return false;
    }

    boolean this_present__pricesOffered = true && this.isSet_pricesOffered();
    boolean that_present__pricesOffered = true && that.isSet_pricesOffered();
    if (this_present__pricesOffered || that_present__pricesOffered) {
      if (!(this_present__pricesOffered && that_present__pricesOffered))
        return false;
      if (!this._pricesOffered.equals(that._pricesOffered))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LMEnergyExchangeControl other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LMEnergyExchangeControl typedOther = (LMEnergyExchangeControl)other;

    lastComparison = Boolean.valueOf(isSet_baseMessage()).compareTo(typedOther.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, typedOther._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_command()).compareTo(typedOther.isSet_command());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_command()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._command, typedOther._command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_paoId()).compareTo(typedOther.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, typedOther._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_offerId()).compareTo(typedOther.isSet_offerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_offerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._offerId, typedOther._offerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_offerDate()).compareTo(typedOther.isSet_offerDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_offerDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._offerDate, typedOther._offerDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_notificationDatetime()).compareTo(typedOther.isSet_notificationDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_notificationDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._notificationDatetime, typedOther._notificationDatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_expirationDatetime()).compareTo(typedOther.isSet_expirationDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_expirationDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._expirationDatetime, typedOther._expirationDatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_additionalInfo()).compareTo(typedOther.isSet_additionalInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_additionalInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._additionalInfo, typedOther._additionalInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_amountsRequested()).compareTo(typedOther.isSet_amountsRequested());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_amountsRequested()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._amountsRequested, typedOther._amountsRequested);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_pricesOffered()).compareTo(typedOther.isSet_pricesOffered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_pricesOffered()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._pricesOffered, typedOther._pricesOffered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LMEnergyExchangeControl(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_command:");
    sb.append(this._command);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_offerId:");
    sb.append(this._offerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_offerDate:");
    sb.append(this._offerDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_notificationDatetime:");
    sb.append(this._notificationDatetime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_expirationDatetime:");
    sb.append(this._expirationDatetime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_additionalInfo:");
    if (this._additionalInfo == null) {
      sb.append("null");
    } else {
      sb.append(this._additionalInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_amountsRequested:");
    if (this._amountsRequested == null) {
      sb.append("null");
    } else {
      sb.append(this._amountsRequested);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_pricesOffered:");
    if (this._pricesOffered == null) {
      sb.append("null");
    } else {
      sb.append(this._pricesOffered);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_command()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_command' is unset! Struct:" + toString());
    }

    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_offerId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_offerId' is unset! Struct:" + toString());
    }

    if (!isSet_offerDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_offerDate' is unset! Struct:" + toString());
    }

    if (!isSet_notificationDatetime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_notificationDatetime' is unset! Struct:" + toString());
    }

    if (!isSet_expirationDatetime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_expirationDatetime' is unset! Struct:" + toString());
    }

    if (!isSet_additionalInfo()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_additionalInfo' is unset! Struct:" + toString());
    }

    if (!isSet_amountsRequested()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_amountsRequested' is unset! Struct:" + toString());
    }

    if (!isSet_pricesOffered()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_pricesOffered' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMEnergyExchangeControlStandardSchemeFactory implements SchemeFactory {
    public LMEnergyExchangeControlStandardScheme getScheme() {
      return new LMEnergyExchangeControlStandardScheme();
    }
  }

  private static class LMEnergyExchangeControlStandardScheme extends StandardScheme<LMEnergyExchangeControl> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMEnergyExchangeControl struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._command = iprot.readI32();
              struct.set_commandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _OFFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._offerId = iprot.readI32();
              struct.set_offerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _OFFER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._offerDate = iprot.readI64();
              struct.set_offerDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _NOTIFICATION_DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._notificationDatetime = iprot.readI64();
              struct.set_notificationDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _EXPIRATION_DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._expirationDatetime = iprot.readI64();
              struct.set_expirationDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _ADDITIONAL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._additionalInfo = iprot.readString();
              struct.set_additionalInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _AMOUNTS_REQUESTED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._amountsRequested = new ArrayList<Double>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  double _elem2; // required
                  _elem2 = iprot.readDouble();
                  struct._amountsRequested.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.set_amountsRequestedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _PRICES_OFFERED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct._pricesOffered = new ArrayList<Integer>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  int _elem5; // required
                  _elem5 = iprot.readI32();
                  struct._pricesOffered.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.set_pricesOfferedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMEnergyExchangeControl struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_COMMAND_FIELD_DESC);
      oprot.writeI32(struct._command);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_OFFER_ID_FIELD_DESC);
      oprot.writeI32(struct._offerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_OFFER_DATE_FIELD_DESC);
      oprot.writeI64(struct._offerDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NOTIFICATION_DATETIME_FIELD_DESC);
      oprot.writeI64(struct._notificationDatetime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_EXPIRATION_DATETIME_FIELD_DESC);
      oprot.writeI64(struct._expirationDatetime);
      oprot.writeFieldEnd();
      if (struct._additionalInfo != null) {
        oprot.writeFieldBegin(_ADDITIONAL_INFO_FIELD_DESC);
        oprot.writeString(struct._additionalInfo);
        oprot.writeFieldEnd();
      }
      if (struct._amountsRequested != null) {
        oprot.writeFieldBegin(_AMOUNTS_REQUESTED_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct._amountsRequested.size()));
          for (double _iter6 : struct._amountsRequested)
          {
            oprot.writeDouble(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct._pricesOffered != null) {
        oprot.writeFieldBegin(_PRICES_OFFERED_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct._pricesOffered.size()));
          for (int _iter7 : struct._pricesOffered)
          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMEnergyExchangeControlTupleSchemeFactory implements SchemeFactory {
    public LMEnergyExchangeControlTupleScheme getScheme() {
      return new LMEnergyExchangeControlTupleScheme();
    }
  }

  private static class LMEnergyExchangeControlTupleScheme extends TupleScheme<LMEnergyExchangeControl> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMEnergyExchangeControl struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._command);
      oprot.writeI32(struct._paoId);
      oprot.writeI32(struct._offerId);
      oprot.writeI64(struct._offerDate);
      oprot.writeI64(struct._notificationDatetime);
      oprot.writeI64(struct._expirationDatetime);
      oprot.writeString(struct._additionalInfo);
      {
        oprot.writeI32(struct._amountsRequested.size());
        for (double _iter8 : struct._amountsRequested)
        {
          oprot.writeDouble(_iter8);
        }
      }
      {
        oprot.writeI32(struct._pricesOffered.size());
        for (int _iter9 : struct._pricesOffered)
        {
          oprot.writeI32(_iter9);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMEnergyExchangeControl struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._command = iprot.readI32();
      struct.set_commandIsSet(true);
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._offerId = iprot.readI32();
      struct.set_offerIdIsSet(true);
      struct._offerDate = iprot.readI64();
      struct.set_offerDateIsSet(true);
      struct._notificationDatetime = iprot.readI64();
      struct.set_notificationDatetimeIsSet(true);
      struct._expirationDatetime = iprot.readI64();
      struct.set_expirationDatetimeIsSet(true);
      struct._additionalInfo = iprot.readString();
      struct.set_additionalInfoIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct._amountsRequested = new ArrayList<Double>(_list10.size);
        for (int _i11 = 0; _i11 < _list10.size; ++_i11)
        {
          double _elem12; // required
          _elem12 = iprot.readDouble();
          struct._amountsRequested.add(_elem12);
        }
      }
      struct.set_amountsRequestedIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct._pricesOffered = new ArrayList<Integer>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          int _elem15; // required
          _elem15 = iprot.readI32();
          struct._pricesOffered.add(_elem15);
        }
      }
      struct.set_pricesOfferedIsSet(true);
    }
  }

}


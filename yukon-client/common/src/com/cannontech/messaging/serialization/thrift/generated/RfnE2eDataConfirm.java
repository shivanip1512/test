/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-27")
public class RfnE2eDataConfirm implements org.apache.thrift.TBase<RfnE2eDataConfirm, RfnE2eDataConfirm._Fields>, java.io.Serializable, Cloneable, Comparable<RfnE2eDataConfirm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RfnE2eDataConfirm");

  private static final org.apache.thrift.protocol.TField E2E_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("e2eProtocol", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationServiceId", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField RFN_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("rfnIdentifier", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField REPLY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("replyType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RfnE2eDataConfirmStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RfnE2eDataConfirmTupleSchemeFactory();

  private RfnE2eProtocol e2eProtocol; // required
  private byte applicationServiceId; // required
  private RfnIdentifier rfnIdentifier; // required
  private RfnE2eDataReplyType replyType; // required
  private com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader header; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RfnE2eProtocol
     */
    E2E_PROTOCOL((short)1, "e2eProtocol"),
    APPLICATION_SERVICE_ID((short)2, "applicationServiceId"),
    RFN_IDENTIFIER((short)3, "rfnIdentifier"),
    /**
     * 
     * @see RfnE2eDataReplyType
     */
    REPLY_TYPE((short)4, "replyType"),
    HEADER((short)5, "header");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // E2E_PROTOCOL
          return E2E_PROTOCOL;
        case 2: // APPLICATION_SERVICE_ID
          return APPLICATION_SERVICE_ID;
        case 3: // RFN_IDENTIFIER
          return RFN_IDENTIFIER;
        case 4: // REPLY_TYPE
          return REPLY_TYPE;
        case 5: // HEADER
          return HEADER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPLICATIONSERVICEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HEADER};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.E2E_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("e2eProtocol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RfnE2eProtocol.class)));
    tmpMap.put(_Fields.APPLICATION_SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationServiceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RFN_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("rfnIdentifier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RfnIdentifier.class)));
    tmpMap.put(_Fields.REPLY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("replyType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RfnE2eDataReplyType.class)));
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RfnE2eDataConfirm.class, metaDataMap);
  }

  public RfnE2eDataConfirm() {
  }

  public RfnE2eDataConfirm(
    RfnE2eProtocol e2eProtocol,
    byte applicationServiceId,
    RfnIdentifier rfnIdentifier,
    RfnE2eDataReplyType replyType)
  {
    this();
    this.e2eProtocol = e2eProtocol;
    this.applicationServiceId = applicationServiceId;
    setApplicationServiceIdIsSet(true);
    this.rfnIdentifier = rfnIdentifier;
    this.replyType = replyType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RfnE2eDataConfirm(RfnE2eDataConfirm other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetE2eProtocol()) {
      this.e2eProtocol = other.e2eProtocol;
    }
    this.applicationServiceId = other.applicationServiceId;
    if (other.isSetRfnIdentifier()) {
      this.rfnIdentifier = new RfnIdentifier(other.rfnIdentifier);
    }
    if (other.isSetReplyType()) {
      this.replyType = other.replyType;
    }
    if (other.isSetHeader()) {
      this.header = new com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader(other.header);
    }
  }

  public RfnE2eDataConfirm deepCopy() {
    return new RfnE2eDataConfirm(this);
  }

  @Override
  public void clear() {
    this.e2eProtocol = null;
    setApplicationServiceIdIsSet(false);
    this.applicationServiceId = 0;
    this.rfnIdentifier = null;
    this.replyType = null;
    this.header = null;
  }

  /**
   * 
   * @see RfnE2eProtocol
   */
  public RfnE2eProtocol getE2eProtocol() {
    return this.e2eProtocol;
  }

  /**
   * 
   * @see RfnE2eProtocol
   */
  public void setE2eProtocol(RfnE2eProtocol e2eProtocol) {
    this.e2eProtocol = e2eProtocol;
  }

  public void unsetE2eProtocol() {
    this.e2eProtocol = null;
  }

  /** Returns true if field e2eProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetE2eProtocol() {
    return this.e2eProtocol != null;
  }

  public void setE2eProtocolIsSet(boolean value) {
    if (!value) {
      this.e2eProtocol = null;
    }
  }

  public byte getApplicationServiceId() {
    return this.applicationServiceId;
  }

  public void setApplicationServiceId(byte applicationServiceId) {
    this.applicationServiceId = applicationServiceId;
    setApplicationServiceIdIsSet(true);
  }

  public void unsetApplicationServiceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONSERVICEID_ISSET_ID);
  }

  /** Returns true if field applicationServiceId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationServiceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPLICATIONSERVICEID_ISSET_ID);
  }

  public void setApplicationServiceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPLICATIONSERVICEID_ISSET_ID, value);
  }

  public RfnIdentifier getRfnIdentifier() {
    return this.rfnIdentifier;
  }

  public void setRfnIdentifier(RfnIdentifier rfnIdentifier) {
    this.rfnIdentifier = rfnIdentifier;
  }

  public void unsetRfnIdentifier() {
    this.rfnIdentifier = null;
  }

  /** Returns true if field rfnIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetRfnIdentifier() {
    return this.rfnIdentifier != null;
  }

  public void setRfnIdentifierIsSet(boolean value) {
    if (!value) {
      this.rfnIdentifier = null;
    }
  }

  /**
   * 
   * @see RfnE2eDataReplyType
   */
  public RfnE2eDataReplyType getReplyType() {
    return this.replyType;
  }

  /**
   * 
   * @see RfnE2eDataReplyType
   */
  public void setReplyType(RfnE2eDataReplyType replyType) {
    this.replyType = replyType;
  }

  public void unsetReplyType() {
    this.replyType = null;
  }

  /** Returns true if field replyType is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyType() {
    return this.replyType != null;
  }

  public void setReplyTypeIsSet(boolean value) {
    if (!value) {
      this.replyType = null;
    }
  }

  public com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader getHeader() {
    return this.header;
  }

  public void setHeader(com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader header) {
    this.header = header;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case E2E_PROTOCOL:
      if (value == null) {
        unsetE2eProtocol();
      } else {
        setE2eProtocol((RfnE2eProtocol)value);
      }
      break;

    case APPLICATION_SERVICE_ID:
      if (value == null) {
        unsetApplicationServiceId();
      } else {
        setApplicationServiceId((java.lang.Byte)value);
      }
      break;

    case RFN_IDENTIFIER:
      if (value == null) {
        unsetRfnIdentifier();
      } else {
        setRfnIdentifier((RfnIdentifier)value);
      }
      break;

    case REPLY_TYPE:
      if (value == null) {
        unsetReplyType();
      } else {
        setReplyType((RfnE2eDataReplyType)value);
      }
      break;

    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case E2E_PROTOCOL:
      return getE2eProtocol();

    case APPLICATION_SERVICE_ID:
      return getApplicationServiceId();

    case RFN_IDENTIFIER:
      return getRfnIdentifier();

    case REPLY_TYPE:
      return getReplyType();

    case HEADER:
      return getHeader();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case E2E_PROTOCOL:
      return isSetE2eProtocol();
    case APPLICATION_SERVICE_ID:
      return isSetApplicationServiceId();
    case RFN_IDENTIFIER:
      return isSetRfnIdentifier();
    case REPLY_TYPE:
      return isSetReplyType();
    case HEADER:
      return isSetHeader();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RfnE2eDataConfirm)
      return this.equals((RfnE2eDataConfirm)that);
    return false;
  }

  public boolean equals(RfnE2eDataConfirm that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_e2eProtocol = true && this.isSetE2eProtocol();
    boolean that_present_e2eProtocol = true && that.isSetE2eProtocol();
    if (this_present_e2eProtocol || that_present_e2eProtocol) {
      if (!(this_present_e2eProtocol && that_present_e2eProtocol))
        return false;
      if (!this.e2eProtocol.equals(that.e2eProtocol))
        return false;
    }

    boolean this_present_applicationServiceId = true;
    boolean that_present_applicationServiceId = true;
    if (this_present_applicationServiceId || that_present_applicationServiceId) {
      if (!(this_present_applicationServiceId && that_present_applicationServiceId))
        return false;
      if (this.applicationServiceId != that.applicationServiceId)
        return false;
    }

    boolean this_present_rfnIdentifier = true && this.isSetRfnIdentifier();
    boolean that_present_rfnIdentifier = true && that.isSetRfnIdentifier();
    if (this_present_rfnIdentifier || that_present_rfnIdentifier) {
      if (!(this_present_rfnIdentifier && that_present_rfnIdentifier))
        return false;
      if (!this.rfnIdentifier.equals(that.rfnIdentifier))
        return false;
    }

    boolean this_present_replyType = true && this.isSetReplyType();
    boolean that_present_replyType = true && that.isSetReplyType();
    if (this_present_replyType || that_present_replyType) {
      if (!(this_present_replyType && that_present_replyType))
        return false;
      if (!this.replyType.equals(that.replyType))
        return false;
    }

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetE2eProtocol()) ? 131071 : 524287);
    if (isSetE2eProtocol())
      hashCode = hashCode * 8191 + e2eProtocol.getValue();

    hashCode = hashCode * 8191 + (int) (applicationServiceId);

    hashCode = hashCode * 8191 + ((isSetRfnIdentifier()) ? 131071 : 524287);
    if (isSetRfnIdentifier())
      hashCode = hashCode * 8191 + rfnIdentifier.hashCode();

    hashCode = hashCode * 8191 + ((isSetReplyType()) ? 131071 : 524287);
    if (isSetReplyType())
      hashCode = hashCode * 8191 + replyType.getValue();

    hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
    if (isSetHeader())
      hashCode = hashCode * 8191 + header.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RfnE2eDataConfirm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetE2eProtocol()).compareTo(other.isSetE2eProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetE2eProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2eProtocol, other.e2eProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplicationServiceId()).compareTo(other.isSetApplicationServiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationServiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationServiceId, other.applicationServiceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRfnIdentifier()).compareTo(other.isSetRfnIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRfnIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rfnIdentifier, other.rfnIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReplyType()).compareTo(other.isSetReplyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyType, other.replyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RfnE2eDataConfirm(");
    boolean first = true;

    sb.append("e2eProtocol:");
    if (this.e2eProtocol == null) {
      sb.append("null");
    } else {
      sb.append(this.e2eProtocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationServiceId:");
    sb.append(this.applicationServiceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rfnIdentifier:");
    if (this.rfnIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.rfnIdentifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyType:");
    if (this.replyType == null) {
      sb.append("null");
    } else {
      sb.append(this.replyType);
    }
    first = false;
    if (isSetHeader()) {
      if (!first) sb.append(", ");
      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetE2eProtocol()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'e2eProtocol' is unset! Struct:" + toString());
    }

    if (!isSetApplicationServiceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationServiceId' is unset! Struct:" + toString());
    }

    if (!isSetRfnIdentifier()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rfnIdentifier' is unset! Struct:" + toString());
    }

    if (!isSetReplyType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'replyType' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (rfnIdentifier != null) {
      rfnIdentifier.validate();
    }
    if (header != null) {
      header.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RfnE2eDataConfirmStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RfnE2eDataConfirmStandardScheme getScheme() {
      return new RfnE2eDataConfirmStandardScheme();
    }
  }

  private static class RfnE2eDataConfirmStandardScheme extends org.apache.thrift.scheme.StandardScheme<RfnE2eDataConfirm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RfnE2eDataConfirm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // E2E_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.e2eProtocol = com.cannontech.messaging.serialization.thrift.generated.RfnE2eProtocol.findByValue(iprot.readI32());
              struct.setE2eProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_SERVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.applicationServiceId = iprot.readByte();
              struct.setApplicationServiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RFN_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rfnIdentifier = new RfnIdentifier();
              struct.rfnIdentifier.read(iprot);
              struct.setRfnIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPLY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replyType = com.cannontech.messaging.serialization.thrift.generated.RfnE2eDataReplyType.findByValue(iprot.readI32());
              struct.setReplyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RfnE2eDataConfirm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.e2eProtocol != null) {
        oprot.writeFieldBegin(E2E_PROTOCOL_FIELD_DESC);
        oprot.writeI32(struct.e2eProtocol.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLICATION_SERVICE_ID_FIELD_DESC);
      oprot.writeByte(struct.applicationServiceId);
      oprot.writeFieldEnd();
      if (struct.rfnIdentifier != null) {
        oprot.writeFieldBegin(RFN_IDENTIFIER_FIELD_DESC);
        struct.rfnIdentifier.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.replyType != null) {
        oprot.writeFieldBegin(REPLY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.replyType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.header != null) {
        if (struct.isSetHeader()) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RfnE2eDataConfirmTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RfnE2eDataConfirmTupleScheme getScheme() {
      return new RfnE2eDataConfirmTupleScheme();
    }
  }

  private static class RfnE2eDataConfirmTupleScheme extends org.apache.thrift.scheme.TupleScheme<RfnE2eDataConfirm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RfnE2eDataConfirm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.e2eProtocol.getValue());
      oprot.writeByte(struct.applicationServiceId);
      struct.rfnIdentifier.write(oprot);
      oprot.writeI32(struct.replyType.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RfnE2eDataConfirm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.e2eProtocol = com.cannontech.messaging.serialization.thrift.generated.RfnE2eProtocol.findByValue(iprot.readI32());
      struct.setE2eProtocolIsSet(true);
      struct.applicationServiceId = iprot.readByte();
      struct.setApplicationServiceIdIsSet(true);
      struct.rfnIdentifier = new RfnIdentifier();
      struct.rfnIdentifier.read(iprot);
      struct.setRfnIdentifierIsSet(true);
      struct.replyType = com.cannontech.messaging.serialization.thrift.generated.RfnE2eDataReplyType.findByValue(iprot.readI32());
      struct.setReplyTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.header = new com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


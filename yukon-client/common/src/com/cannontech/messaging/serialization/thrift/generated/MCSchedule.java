/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-05-31")
public class MCSchedule implements org.apache.thrift.TBase<MCSchedule, MCSchedule._Fields>, java.io.Serializable, Cloneable, Comparable<MCSchedule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MCSchedule");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _SCHEDULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_scheduleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _SCHEDULE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_scheduleName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_categoryName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField _SCHEDULE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_scheduleType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField _HOLIDAY_SCHEDULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_holidayScheduleId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField _COMMAND_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("_commandFile", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField _CURRENT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentState", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField _START_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("_startPolicy", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField _STOP_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("_stopPolicy", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField _LAST_RUN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastRunTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField _LAST_RUN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastRunStatus", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField _START_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("_startDay", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField _START_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("_startMonth", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField _START_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("_startYear", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField _START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_startTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField _STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_stopTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField _VALID_WEEK_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("_validWeekDays", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField _DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("_duration", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField _MANUAL_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_manualStartTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField _MANUAL_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_manualStopTime", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField _TARGET_PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_targetPaoId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField _START_COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("_startCommand", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField _STOP_COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("_stopCommand", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField _REPEAT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("_repeatInterval", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField _CURRENT_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentStartTime", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField _CURRENT_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentStopTime", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField _TEMPLATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_templateType", org.apache.thrift.protocol.TType.I32, (short)28);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MCScheduleStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MCScheduleTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage; // required
  private int _scheduleId; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _scheduleName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _categoryName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _scheduleType; // required
  private int _holidayScheduleId; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _commandFile; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _currentState; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _startPolicy; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _stopPolicy; // required
  private long _lastRunTime; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _lastRunStatus; // required
  private int _startDay; // required
  private int _startMonth; // required
  private int _startYear; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _startTime; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _stopTime; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _validWeekDays; // required
  private int _duration; // required
  private long _manualStartTime; // required
  private long _manualStopTime; // required
  private int _targetPaoId; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _startCommand; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _stopCommand; // required
  private int _repeatInterval; // required
  private long _currentStartTime; // required
  private long _currentStopTime; // required
  private int _templateType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _SCHEDULE_ID((short)2, "_scheduleId"),
    _SCHEDULE_NAME((short)3, "_scheduleName"),
    _CATEGORY_NAME((short)4, "_categoryName"),
    _SCHEDULE_TYPE((short)5, "_scheduleType"),
    _HOLIDAY_SCHEDULE_ID((short)6, "_holidayScheduleId"),
    _COMMAND_FILE((short)7, "_commandFile"),
    _CURRENT_STATE((short)8, "_currentState"),
    _START_POLICY((short)9, "_startPolicy"),
    _STOP_POLICY((short)10, "_stopPolicy"),
    _LAST_RUN_TIME((short)11, "_lastRunTime"),
    _LAST_RUN_STATUS((short)12, "_lastRunStatus"),
    _START_DAY((short)13, "_startDay"),
    _START_MONTH((short)14, "_startMonth"),
    _START_YEAR((short)15, "_startYear"),
    _START_TIME((short)16, "_startTime"),
    _STOP_TIME((short)17, "_stopTime"),
    _VALID_WEEK_DAYS((short)18, "_validWeekDays"),
    _DURATION((short)19, "_duration"),
    _MANUAL_START_TIME((short)20, "_manualStartTime"),
    _MANUAL_STOP_TIME((short)21, "_manualStopTime"),
    _TARGET_PAO_ID((short)22, "_targetPaoId"),
    _START_COMMAND((short)23, "_startCommand"),
    _STOP_COMMAND((short)24, "_stopCommand"),
    _REPEAT_INTERVAL((short)25, "_repeatInterval"),
    _CURRENT_START_TIME((short)26, "_currentStartTime"),
    _CURRENT_STOP_TIME((short)27, "_currentStopTime"),
    _TEMPLATE_TYPE((short)28, "_templateType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _SCHEDULE_ID
          return _SCHEDULE_ID;
        case 3: // _SCHEDULE_NAME
          return _SCHEDULE_NAME;
        case 4: // _CATEGORY_NAME
          return _CATEGORY_NAME;
        case 5: // _SCHEDULE_TYPE
          return _SCHEDULE_TYPE;
        case 6: // _HOLIDAY_SCHEDULE_ID
          return _HOLIDAY_SCHEDULE_ID;
        case 7: // _COMMAND_FILE
          return _COMMAND_FILE;
        case 8: // _CURRENT_STATE
          return _CURRENT_STATE;
        case 9: // _START_POLICY
          return _START_POLICY;
        case 10: // _STOP_POLICY
          return _STOP_POLICY;
        case 11: // _LAST_RUN_TIME
          return _LAST_RUN_TIME;
        case 12: // _LAST_RUN_STATUS
          return _LAST_RUN_STATUS;
        case 13: // _START_DAY
          return _START_DAY;
        case 14: // _START_MONTH
          return _START_MONTH;
        case 15: // _START_YEAR
          return _START_YEAR;
        case 16: // _START_TIME
          return _START_TIME;
        case 17: // _STOP_TIME
          return _STOP_TIME;
        case 18: // _VALID_WEEK_DAYS
          return _VALID_WEEK_DAYS;
        case 19: // _DURATION
          return _DURATION;
        case 20: // _MANUAL_START_TIME
          return _MANUAL_START_TIME;
        case 21: // _MANUAL_STOP_TIME
          return _MANUAL_STOP_TIME;
        case 22: // _TARGET_PAO_ID
          return _TARGET_PAO_ID;
        case 23: // _START_COMMAND
          return _START_COMMAND;
        case 24: // _STOP_COMMAND
          return _STOP_COMMAND;
        case 25: // _REPEAT_INTERVAL
          return _REPEAT_INTERVAL;
        case 26: // _CURRENT_START_TIME
          return _CURRENT_START_TIME;
        case 27: // _CURRENT_STOP_TIME
          return _CURRENT_STOP_TIME;
        case 28: // _TEMPLATE_TYPE
          return _TEMPLATE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___SCHEDULEID_ISSET_ID = 0;
  private static final int ___HOLIDAYSCHEDULEID_ISSET_ID = 1;
  private static final int ___LASTRUNTIME_ISSET_ID = 2;
  private static final int ___STARTDAY_ISSET_ID = 3;
  private static final int ___STARTMONTH_ISSET_ID = 4;
  private static final int ___STARTYEAR_ISSET_ID = 5;
  private static final int ___DURATION_ISSET_ID = 6;
  private static final int ___MANUALSTARTTIME_ISSET_ID = 7;
  private static final int ___MANUALSTOPTIME_ISSET_ID = 8;
  private static final int ___TARGETPAOID_ISSET_ID = 9;
  private static final int ___REPEATINTERVAL_ISSET_ID = 10;
  private static final int ___CURRENTSTARTTIME_ISSET_ID = 11;
  private static final int ___CURRENTSTOPTIME_ISSET_ID = 12;
  private static final int ___TEMPLATETYPE_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.Message.class)));
    tmpMap.put(_Fields._SCHEDULE_ID, new org.apache.thrift.meta_data.FieldMetaData("_scheduleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._SCHEDULE_NAME, new org.apache.thrift.meta_data.FieldMetaData("_scheduleName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("_categoryName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SCHEDULE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_scheduleType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._HOLIDAY_SCHEDULE_ID, new org.apache.thrift.meta_data.FieldMetaData("_holidayScheduleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._COMMAND_FILE, new org.apache.thrift.meta_data.FieldMetaData("_commandFile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._CURRENT_STATE, new org.apache.thrift.meta_data.FieldMetaData("_currentState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._START_POLICY, new org.apache.thrift.meta_data.FieldMetaData("_startPolicy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._STOP_POLICY, new org.apache.thrift.meta_data.FieldMetaData("_stopPolicy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._LAST_RUN_TIME, new org.apache.thrift.meta_data.FieldMetaData("_lastRunTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._LAST_RUN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("_lastRunStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._START_DAY, new org.apache.thrift.meta_data.FieldMetaData("_startDay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._START_MONTH, new org.apache.thrift.meta_data.FieldMetaData("_startMonth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._START_YEAR, new org.apache.thrift.meta_data.FieldMetaData("_startYear", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._START_TIME, new org.apache.thrift.meta_data.FieldMetaData("_startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("_stopTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._VALID_WEEK_DAYS, new org.apache.thrift.meta_data.FieldMetaData("_validWeekDays", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._DURATION, new org.apache.thrift.meta_data.FieldMetaData("_duration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MANUAL_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("_manualStartTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._MANUAL_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("_manualStopTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._TARGET_PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_targetPaoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._START_COMMAND, new org.apache.thrift.meta_data.FieldMetaData("_startCommand", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._STOP_COMMAND, new org.apache.thrift.meta_data.FieldMetaData("_stopCommand", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._REPEAT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("_repeatInterval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("_currentStartTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._CURRENT_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("_currentStopTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._TEMPLATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_templateType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MCSchedule.class, metaDataMap);
  }

  public MCSchedule() {
  }

  public MCSchedule(
    com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage,
    int _scheduleId,
    java.lang.String _scheduleName,
    java.lang.String _categoryName,
    java.lang.String _scheduleType,
    int _holidayScheduleId,
    java.lang.String _commandFile,
    java.lang.String _currentState,
    java.lang.String _startPolicy,
    java.lang.String _stopPolicy,
    long _lastRunTime,
    java.lang.String _lastRunStatus,
    int _startDay,
    int _startMonth,
    int _startYear,
    java.lang.String _startTime,
    java.lang.String _stopTime,
    java.lang.String _validWeekDays,
    int _duration,
    long _manualStartTime,
    long _manualStopTime,
    int _targetPaoId,
    java.lang.String _startCommand,
    java.lang.String _stopCommand,
    int _repeatInterval,
    long _currentStartTime,
    long _currentStopTime,
    int _templateType)
  {
    this();
    this._baseMessage = _baseMessage;
    this._scheduleId = _scheduleId;
    set_scheduleIdIsSet(true);
    this._scheduleName = _scheduleName;
    this._categoryName = _categoryName;
    this._scheduleType = _scheduleType;
    this._holidayScheduleId = _holidayScheduleId;
    set_holidayScheduleIdIsSet(true);
    this._commandFile = _commandFile;
    this._currentState = _currentState;
    this._startPolicy = _startPolicy;
    this._stopPolicy = _stopPolicy;
    this._lastRunTime = _lastRunTime;
    set_lastRunTimeIsSet(true);
    this._lastRunStatus = _lastRunStatus;
    this._startDay = _startDay;
    set_startDayIsSet(true);
    this._startMonth = _startMonth;
    set_startMonthIsSet(true);
    this._startYear = _startYear;
    set_startYearIsSet(true);
    this._startTime = _startTime;
    this._stopTime = _stopTime;
    this._validWeekDays = _validWeekDays;
    this._duration = _duration;
    set_durationIsSet(true);
    this._manualStartTime = _manualStartTime;
    set_manualStartTimeIsSet(true);
    this._manualStopTime = _manualStopTime;
    set_manualStopTimeIsSet(true);
    this._targetPaoId = _targetPaoId;
    set_targetPaoIdIsSet(true);
    this._startCommand = _startCommand;
    this._stopCommand = _stopCommand;
    this._repeatInterval = _repeatInterval;
    set_repeatIntervalIsSet(true);
    this._currentStartTime = _currentStartTime;
    set_currentStartTimeIsSet(true);
    this._currentStopTime = _currentStopTime;
    set_currentStopTimeIsSet(true);
    this._templateType = _templateType;
    set_templateTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MCSchedule(MCSchedule other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message(other._baseMessage);
    }
    this._scheduleId = other._scheduleId;
    if (other.isSet_scheduleName()) {
      this._scheduleName = other._scheduleName;
    }
    if (other.isSet_categoryName()) {
      this._categoryName = other._categoryName;
    }
    if (other.isSet_scheduleType()) {
      this._scheduleType = other._scheduleType;
    }
    this._holidayScheduleId = other._holidayScheduleId;
    if (other.isSet_commandFile()) {
      this._commandFile = other._commandFile;
    }
    if (other.isSet_currentState()) {
      this._currentState = other._currentState;
    }
    if (other.isSet_startPolicy()) {
      this._startPolicy = other._startPolicy;
    }
    if (other.isSet_stopPolicy()) {
      this._stopPolicy = other._stopPolicy;
    }
    this._lastRunTime = other._lastRunTime;
    if (other.isSet_lastRunStatus()) {
      this._lastRunStatus = other._lastRunStatus;
    }
    this._startDay = other._startDay;
    this._startMonth = other._startMonth;
    this._startYear = other._startYear;
    if (other.isSet_startTime()) {
      this._startTime = other._startTime;
    }
    if (other.isSet_stopTime()) {
      this._stopTime = other._stopTime;
    }
    if (other.isSet_validWeekDays()) {
      this._validWeekDays = other._validWeekDays;
    }
    this._duration = other._duration;
    this._manualStartTime = other._manualStartTime;
    this._manualStopTime = other._manualStopTime;
    this._targetPaoId = other._targetPaoId;
    if (other.isSet_startCommand()) {
      this._startCommand = other._startCommand;
    }
    if (other.isSet_stopCommand()) {
      this._stopCommand = other._stopCommand;
    }
    this._repeatInterval = other._repeatInterval;
    this._currentStartTime = other._currentStartTime;
    this._currentStopTime = other._currentStopTime;
    this._templateType = other._templateType;
  }

  public MCSchedule deepCopy() {
    return new MCSchedule(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_scheduleIdIsSet(false);
    this._scheduleId = 0;
    this._scheduleName = null;
    this._categoryName = null;
    this._scheduleType = null;
    set_holidayScheduleIdIsSet(false);
    this._holidayScheduleId = 0;
    this._commandFile = null;
    this._currentState = null;
    this._startPolicy = null;
    this._stopPolicy = null;
    set_lastRunTimeIsSet(false);
    this._lastRunTime = 0;
    this._lastRunStatus = null;
    set_startDayIsSet(false);
    this._startDay = 0;
    set_startMonthIsSet(false);
    this._startMonth = 0;
    set_startYearIsSet(false);
    this._startYear = 0;
    this._startTime = null;
    this._stopTime = null;
    this._validWeekDays = null;
    set_durationIsSet(false);
    this._duration = 0;
    set_manualStartTimeIsSet(false);
    this._manualStartTime = 0;
    set_manualStopTimeIsSet(false);
    this._manualStopTime = 0;
    set_targetPaoIdIsSet(false);
    this._targetPaoId = 0;
    this._startCommand = null;
    this._stopCommand = null;
    set_repeatIntervalIsSet(false);
    this._repeatInterval = 0;
    set_currentStartTimeIsSet(false);
    this._currentStartTime = 0;
    set_currentStopTimeIsSet(false);
    this._currentStopTime = 0;
    set_templateTypeIsSet(false);
    this._templateType = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public com.cannontech.messaging.serialization.thrift.generated.Message get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(@org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_scheduleId() {
    return this._scheduleId;
  }

  public void set_scheduleId(int _scheduleId) {
    this._scheduleId = _scheduleId;
    set_scheduleIdIsSet(true);
  }

  public void unset_scheduleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___SCHEDULEID_ISSET_ID);
  }

  /** Returns true if field _scheduleId is set (has been assigned a value) and false otherwise */
  public boolean isSet_scheduleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___SCHEDULEID_ISSET_ID);
  }

  public void set_scheduleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___SCHEDULEID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_scheduleName() {
    return this._scheduleName;
  }

  public void set_scheduleName(@org.apache.thrift.annotation.Nullable java.lang.String _scheduleName) {
    this._scheduleName = _scheduleName;
  }

  public void unset_scheduleName() {
    this._scheduleName = null;
  }

  /** Returns true if field _scheduleName is set (has been assigned a value) and false otherwise */
  public boolean isSet_scheduleName() {
    return this._scheduleName != null;
  }

  public void set_scheduleNameIsSet(boolean value) {
    if (!value) {
      this._scheduleName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_categoryName() {
    return this._categoryName;
  }

  public void set_categoryName(@org.apache.thrift.annotation.Nullable java.lang.String _categoryName) {
    this._categoryName = _categoryName;
  }

  public void unset_categoryName() {
    this._categoryName = null;
  }

  /** Returns true if field _categoryName is set (has been assigned a value) and false otherwise */
  public boolean isSet_categoryName() {
    return this._categoryName != null;
  }

  public void set_categoryNameIsSet(boolean value) {
    if (!value) {
      this._categoryName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_scheduleType() {
    return this._scheduleType;
  }

  public void set_scheduleType(@org.apache.thrift.annotation.Nullable java.lang.String _scheduleType) {
    this._scheduleType = _scheduleType;
  }

  public void unset_scheduleType() {
    this._scheduleType = null;
  }

  /** Returns true if field _scheduleType is set (has been assigned a value) and false otherwise */
  public boolean isSet_scheduleType() {
    return this._scheduleType != null;
  }

  public void set_scheduleTypeIsSet(boolean value) {
    if (!value) {
      this._scheduleType = null;
    }
  }

  public int get_holidayScheduleId() {
    return this._holidayScheduleId;
  }

  public void set_holidayScheduleId(int _holidayScheduleId) {
    this._holidayScheduleId = _holidayScheduleId;
    set_holidayScheduleIdIsSet(true);
  }

  public void unset_holidayScheduleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___HOLIDAYSCHEDULEID_ISSET_ID);
  }

  /** Returns true if field _holidayScheduleId is set (has been assigned a value) and false otherwise */
  public boolean isSet_holidayScheduleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___HOLIDAYSCHEDULEID_ISSET_ID);
  }

  public void set_holidayScheduleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___HOLIDAYSCHEDULEID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_commandFile() {
    return this._commandFile;
  }

  public void set_commandFile(@org.apache.thrift.annotation.Nullable java.lang.String _commandFile) {
    this._commandFile = _commandFile;
  }

  public void unset_commandFile() {
    this._commandFile = null;
  }

  /** Returns true if field _commandFile is set (has been assigned a value) and false otherwise */
  public boolean isSet_commandFile() {
    return this._commandFile != null;
  }

  public void set_commandFileIsSet(boolean value) {
    if (!value) {
      this._commandFile = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_currentState() {
    return this._currentState;
  }

  public void set_currentState(@org.apache.thrift.annotation.Nullable java.lang.String _currentState) {
    this._currentState = _currentState;
  }

  public void unset_currentState() {
    this._currentState = null;
  }

  /** Returns true if field _currentState is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentState() {
    return this._currentState != null;
  }

  public void set_currentStateIsSet(boolean value) {
    if (!value) {
      this._currentState = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_startPolicy() {
    return this._startPolicy;
  }

  public void set_startPolicy(@org.apache.thrift.annotation.Nullable java.lang.String _startPolicy) {
    this._startPolicy = _startPolicy;
  }

  public void unset_startPolicy() {
    this._startPolicy = null;
  }

  /** Returns true if field _startPolicy is set (has been assigned a value) and false otherwise */
  public boolean isSet_startPolicy() {
    return this._startPolicy != null;
  }

  public void set_startPolicyIsSet(boolean value) {
    if (!value) {
      this._startPolicy = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_stopPolicy() {
    return this._stopPolicy;
  }

  public void set_stopPolicy(@org.apache.thrift.annotation.Nullable java.lang.String _stopPolicy) {
    this._stopPolicy = _stopPolicy;
  }

  public void unset_stopPolicy() {
    this._stopPolicy = null;
  }

  /** Returns true if field _stopPolicy is set (has been assigned a value) and false otherwise */
  public boolean isSet_stopPolicy() {
    return this._stopPolicy != null;
  }

  public void set_stopPolicyIsSet(boolean value) {
    if (!value) {
      this._stopPolicy = null;
    }
  }

  public long get_lastRunTime() {
    return this._lastRunTime;
  }

  public void set_lastRunTime(long _lastRunTime) {
    this._lastRunTime = _lastRunTime;
    set_lastRunTimeIsSet(true);
  }

  public void unset_lastRunTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTRUNTIME_ISSET_ID);
  }

  /** Returns true if field _lastRunTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastRunTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTRUNTIME_ISSET_ID);
  }

  public void set_lastRunTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTRUNTIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_lastRunStatus() {
    return this._lastRunStatus;
  }

  public void set_lastRunStatus(@org.apache.thrift.annotation.Nullable java.lang.String _lastRunStatus) {
    this._lastRunStatus = _lastRunStatus;
  }

  public void unset_lastRunStatus() {
    this._lastRunStatus = null;
  }

  /** Returns true if field _lastRunStatus is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastRunStatus() {
    return this._lastRunStatus != null;
  }

  public void set_lastRunStatusIsSet(boolean value) {
    if (!value) {
      this._lastRunStatus = null;
    }
  }

  public int get_startDay() {
    return this._startDay;
  }

  public void set_startDay(int _startDay) {
    this._startDay = _startDay;
    set_startDayIsSet(true);
  }

  public void unset_startDay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STARTDAY_ISSET_ID);
  }

  /** Returns true if field _startDay is set (has been assigned a value) and false otherwise */
  public boolean isSet_startDay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STARTDAY_ISSET_ID);
  }

  public void set_startDayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STARTDAY_ISSET_ID, value);
  }

  public int get_startMonth() {
    return this._startMonth;
  }

  public void set_startMonth(int _startMonth) {
    this._startMonth = _startMonth;
    set_startMonthIsSet(true);
  }

  public void unset_startMonth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STARTMONTH_ISSET_ID);
  }

  /** Returns true if field _startMonth is set (has been assigned a value) and false otherwise */
  public boolean isSet_startMonth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STARTMONTH_ISSET_ID);
  }

  public void set_startMonthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STARTMONTH_ISSET_ID, value);
  }

  public int get_startYear() {
    return this._startYear;
  }

  public void set_startYear(int _startYear) {
    this._startYear = _startYear;
    set_startYearIsSet(true);
  }

  public void unset_startYear() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STARTYEAR_ISSET_ID);
  }

  /** Returns true if field _startYear is set (has been assigned a value) and false otherwise */
  public boolean isSet_startYear() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STARTYEAR_ISSET_ID);
  }

  public void set_startYearIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STARTYEAR_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_startTime() {
    return this._startTime;
  }

  public void set_startTime(@org.apache.thrift.annotation.Nullable java.lang.String _startTime) {
    this._startTime = _startTime;
  }

  public void unset_startTime() {
    this._startTime = null;
  }

  /** Returns true if field _startTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_startTime() {
    return this._startTime != null;
  }

  public void set_startTimeIsSet(boolean value) {
    if (!value) {
      this._startTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_stopTime() {
    return this._stopTime;
  }

  public void set_stopTime(@org.apache.thrift.annotation.Nullable java.lang.String _stopTime) {
    this._stopTime = _stopTime;
  }

  public void unset_stopTime() {
    this._stopTime = null;
  }

  /** Returns true if field _stopTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_stopTime() {
    return this._stopTime != null;
  }

  public void set_stopTimeIsSet(boolean value) {
    if (!value) {
      this._stopTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_validWeekDays() {
    return this._validWeekDays;
  }

  public void set_validWeekDays(@org.apache.thrift.annotation.Nullable java.lang.String _validWeekDays) {
    this._validWeekDays = _validWeekDays;
  }

  public void unset_validWeekDays() {
    this._validWeekDays = null;
  }

  /** Returns true if field _validWeekDays is set (has been assigned a value) and false otherwise */
  public boolean isSet_validWeekDays() {
    return this._validWeekDays != null;
  }

  public void set_validWeekDaysIsSet(boolean value) {
    if (!value) {
      this._validWeekDays = null;
    }
  }

  public int get_duration() {
    return this._duration;
  }

  public void set_duration(int _duration) {
    this._duration = _duration;
    set_durationIsSet(true);
  }

  public void unset_duration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DURATION_ISSET_ID);
  }

  /** Returns true if field _duration is set (has been assigned a value) and false otherwise */
  public boolean isSet_duration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DURATION_ISSET_ID);
  }

  public void set_durationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DURATION_ISSET_ID, value);
  }

  public long get_manualStartTime() {
    return this._manualStartTime;
  }

  public void set_manualStartTime(long _manualStartTime) {
    this._manualStartTime = _manualStartTime;
    set_manualStartTimeIsSet(true);
  }

  public void unset_manualStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MANUALSTARTTIME_ISSET_ID);
  }

  /** Returns true if field _manualStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_manualStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MANUALSTARTTIME_ISSET_ID);
  }

  public void set_manualStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MANUALSTARTTIME_ISSET_ID, value);
  }

  public long get_manualStopTime() {
    return this._manualStopTime;
  }

  public void set_manualStopTime(long _manualStopTime) {
    this._manualStopTime = _manualStopTime;
    set_manualStopTimeIsSet(true);
  }

  public void unset_manualStopTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MANUALSTOPTIME_ISSET_ID);
  }

  /** Returns true if field _manualStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_manualStopTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MANUALSTOPTIME_ISSET_ID);
  }

  public void set_manualStopTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MANUALSTOPTIME_ISSET_ID, value);
  }

  public int get_targetPaoId() {
    return this._targetPaoId;
  }

  public void set_targetPaoId(int _targetPaoId) {
    this._targetPaoId = _targetPaoId;
    set_targetPaoIdIsSet(true);
  }

  public void unset_targetPaoId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TARGETPAOID_ISSET_ID);
  }

  /** Returns true if field _targetPaoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_targetPaoId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TARGETPAOID_ISSET_ID);
  }

  public void set_targetPaoIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TARGETPAOID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_startCommand() {
    return this._startCommand;
  }

  public void set_startCommand(@org.apache.thrift.annotation.Nullable java.lang.String _startCommand) {
    this._startCommand = _startCommand;
  }

  public void unset_startCommand() {
    this._startCommand = null;
  }

  /** Returns true if field _startCommand is set (has been assigned a value) and false otherwise */
  public boolean isSet_startCommand() {
    return this._startCommand != null;
  }

  public void set_startCommandIsSet(boolean value) {
    if (!value) {
      this._startCommand = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_stopCommand() {
    return this._stopCommand;
  }

  public void set_stopCommand(@org.apache.thrift.annotation.Nullable java.lang.String _stopCommand) {
    this._stopCommand = _stopCommand;
  }

  public void unset_stopCommand() {
    this._stopCommand = null;
  }

  /** Returns true if field _stopCommand is set (has been assigned a value) and false otherwise */
  public boolean isSet_stopCommand() {
    return this._stopCommand != null;
  }

  public void set_stopCommandIsSet(boolean value) {
    if (!value) {
      this._stopCommand = null;
    }
  }

  public int get_repeatInterval() {
    return this._repeatInterval;
  }

  public void set_repeatInterval(int _repeatInterval) {
    this._repeatInterval = _repeatInterval;
    set_repeatIntervalIsSet(true);
  }

  public void unset_repeatInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___REPEATINTERVAL_ISSET_ID);
  }

  /** Returns true if field _repeatInterval is set (has been assigned a value) and false otherwise */
  public boolean isSet_repeatInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___REPEATINTERVAL_ISSET_ID);
  }

  public void set_repeatIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___REPEATINTERVAL_ISSET_ID, value);
  }

  public long get_currentStartTime() {
    return this._currentStartTime;
  }

  public void set_currentStartTime(long _currentStartTime) {
    this._currentStartTime = _currentStartTime;
    set_currentStartTimeIsSet(true);
  }

  public void unset_currentStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTSTARTTIME_ISSET_ID);
  }

  /** Returns true if field _currentStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTSTARTTIME_ISSET_ID);
  }

  public void set_currentStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTSTARTTIME_ISSET_ID, value);
  }

  public long get_currentStopTime() {
    return this._currentStopTime;
  }

  public void set_currentStopTime(long _currentStopTime) {
    this._currentStopTime = _currentStopTime;
    set_currentStopTimeIsSet(true);
  }

  public void unset_currentStopTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTSTOPTIME_ISSET_ID);
  }

  /** Returns true if field _currentStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentStopTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTSTOPTIME_ISSET_ID);
  }

  public void set_currentStopTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTSTOPTIME_ISSET_ID, value);
  }

  public int get_templateType() {
    return this._templateType;
  }

  public void set_templateType(int _templateType) {
    this._templateType = _templateType;
    set_templateTypeIsSet(true);
  }

  public void unset_templateType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TEMPLATETYPE_ISSET_ID);
  }

  /** Returns true if field _templateType is set (has been assigned a value) and false otherwise */
  public boolean isSet_templateType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TEMPLATETYPE_ISSET_ID);
  }

  public void set_templateTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TEMPLATETYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.Message)value);
      }
      break;

    case _SCHEDULE_ID:
      if (value == null) {
        unset_scheduleId();
      } else {
        set_scheduleId((java.lang.Integer)value);
      }
      break;

    case _SCHEDULE_NAME:
      if (value == null) {
        unset_scheduleName();
      } else {
        set_scheduleName((java.lang.String)value);
      }
      break;

    case _CATEGORY_NAME:
      if (value == null) {
        unset_categoryName();
      } else {
        set_categoryName((java.lang.String)value);
      }
      break;

    case _SCHEDULE_TYPE:
      if (value == null) {
        unset_scheduleType();
      } else {
        set_scheduleType((java.lang.String)value);
      }
      break;

    case _HOLIDAY_SCHEDULE_ID:
      if (value == null) {
        unset_holidayScheduleId();
      } else {
        set_holidayScheduleId((java.lang.Integer)value);
      }
      break;

    case _COMMAND_FILE:
      if (value == null) {
        unset_commandFile();
      } else {
        set_commandFile((java.lang.String)value);
      }
      break;

    case _CURRENT_STATE:
      if (value == null) {
        unset_currentState();
      } else {
        set_currentState((java.lang.String)value);
      }
      break;

    case _START_POLICY:
      if (value == null) {
        unset_startPolicy();
      } else {
        set_startPolicy((java.lang.String)value);
      }
      break;

    case _STOP_POLICY:
      if (value == null) {
        unset_stopPolicy();
      } else {
        set_stopPolicy((java.lang.String)value);
      }
      break;

    case _LAST_RUN_TIME:
      if (value == null) {
        unset_lastRunTime();
      } else {
        set_lastRunTime((java.lang.Long)value);
      }
      break;

    case _LAST_RUN_STATUS:
      if (value == null) {
        unset_lastRunStatus();
      } else {
        set_lastRunStatus((java.lang.String)value);
      }
      break;

    case _START_DAY:
      if (value == null) {
        unset_startDay();
      } else {
        set_startDay((java.lang.Integer)value);
      }
      break;

    case _START_MONTH:
      if (value == null) {
        unset_startMonth();
      } else {
        set_startMonth((java.lang.Integer)value);
      }
      break;

    case _START_YEAR:
      if (value == null) {
        unset_startYear();
      } else {
        set_startYear((java.lang.Integer)value);
      }
      break;

    case _START_TIME:
      if (value == null) {
        unset_startTime();
      } else {
        set_startTime((java.lang.String)value);
      }
      break;

    case _STOP_TIME:
      if (value == null) {
        unset_stopTime();
      } else {
        set_stopTime((java.lang.String)value);
      }
      break;

    case _VALID_WEEK_DAYS:
      if (value == null) {
        unset_validWeekDays();
      } else {
        set_validWeekDays((java.lang.String)value);
      }
      break;

    case _DURATION:
      if (value == null) {
        unset_duration();
      } else {
        set_duration((java.lang.Integer)value);
      }
      break;

    case _MANUAL_START_TIME:
      if (value == null) {
        unset_manualStartTime();
      } else {
        set_manualStartTime((java.lang.Long)value);
      }
      break;

    case _MANUAL_STOP_TIME:
      if (value == null) {
        unset_manualStopTime();
      } else {
        set_manualStopTime((java.lang.Long)value);
      }
      break;

    case _TARGET_PAO_ID:
      if (value == null) {
        unset_targetPaoId();
      } else {
        set_targetPaoId((java.lang.Integer)value);
      }
      break;

    case _START_COMMAND:
      if (value == null) {
        unset_startCommand();
      } else {
        set_startCommand((java.lang.String)value);
      }
      break;

    case _STOP_COMMAND:
      if (value == null) {
        unset_stopCommand();
      } else {
        set_stopCommand((java.lang.String)value);
      }
      break;

    case _REPEAT_INTERVAL:
      if (value == null) {
        unset_repeatInterval();
      } else {
        set_repeatInterval((java.lang.Integer)value);
      }
      break;

    case _CURRENT_START_TIME:
      if (value == null) {
        unset_currentStartTime();
      } else {
        set_currentStartTime((java.lang.Long)value);
      }
      break;

    case _CURRENT_STOP_TIME:
      if (value == null) {
        unset_currentStopTime();
      } else {
        set_currentStopTime((java.lang.Long)value);
      }
      break;

    case _TEMPLATE_TYPE:
      if (value == null) {
        unset_templateType();
      } else {
        set_templateType((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _SCHEDULE_ID:
      return get_scheduleId();

    case _SCHEDULE_NAME:
      return get_scheduleName();

    case _CATEGORY_NAME:
      return get_categoryName();

    case _SCHEDULE_TYPE:
      return get_scheduleType();

    case _HOLIDAY_SCHEDULE_ID:
      return get_holidayScheduleId();

    case _COMMAND_FILE:
      return get_commandFile();

    case _CURRENT_STATE:
      return get_currentState();

    case _START_POLICY:
      return get_startPolicy();

    case _STOP_POLICY:
      return get_stopPolicy();

    case _LAST_RUN_TIME:
      return get_lastRunTime();

    case _LAST_RUN_STATUS:
      return get_lastRunStatus();

    case _START_DAY:
      return get_startDay();

    case _START_MONTH:
      return get_startMonth();

    case _START_YEAR:
      return get_startYear();

    case _START_TIME:
      return get_startTime();

    case _STOP_TIME:
      return get_stopTime();

    case _VALID_WEEK_DAYS:
      return get_validWeekDays();

    case _DURATION:
      return get_duration();

    case _MANUAL_START_TIME:
      return get_manualStartTime();

    case _MANUAL_STOP_TIME:
      return get_manualStopTime();

    case _TARGET_PAO_ID:
      return get_targetPaoId();

    case _START_COMMAND:
      return get_startCommand();

    case _STOP_COMMAND:
      return get_stopCommand();

    case _REPEAT_INTERVAL:
      return get_repeatInterval();

    case _CURRENT_START_TIME:
      return get_currentStartTime();

    case _CURRENT_STOP_TIME:
      return get_currentStopTime();

    case _TEMPLATE_TYPE:
      return get_templateType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _SCHEDULE_ID:
      return isSet_scheduleId();
    case _SCHEDULE_NAME:
      return isSet_scheduleName();
    case _CATEGORY_NAME:
      return isSet_categoryName();
    case _SCHEDULE_TYPE:
      return isSet_scheduleType();
    case _HOLIDAY_SCHEDULE_ID:
      return isSet_holidayScheduleId();
    case _COMMAND_FILE:
      return isSet_commandFile();
    case _CURRENT_STATE:
      return isSet_currentState();
    case _START_POLICY:
      return isSet_startPolicy();
    case _STOP_POLICY:
      return isSet_stopPolicy();
    case _LAST_RUN_TIME:
      return isSet_lastRunTime();
    case _LAST_RUN_STATUS:
      return isSet_lastRunStatus();
    case _START_DAY:
      return isSet_startDay();
    case _START_MONTH:
      return isSet_startMonth();
    case _START_YEAR:
      return isSet_startYear();
    case _START_TIME:
      return isSet_startTime();
    case _STOP_TIME:
      return isSet_stopTime();
    case _VALID_WEEK_DAYS:
      return isSet_validWeekDays();
    case _DURATION:
      return isSet_duration();
    case _MANUAL_START_TIME:
      return isSet_manualStartTime();
    case _MANUAL_STOP_TIME:
      return isSet_manualStopTime();
    case _TARGET_PAO_ID:
      return isSet_targetPaoId();
    case _START_COMMAND:
      return isSet_startCommand();
    case _STOP_COMMAND:
      return isSet_stopCommand();
    case _REPEAT_INTERVAL:
      return isSet_repeatInterval();
    case _CURRENT_START_TIME:
      return isSet_currentStartTime();
    case _CURRENT_STOP_TIME:
      return isSet_currentStopTime();
    case _TEMPLATE_TYPE:
      return isSet_templateType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof MCSchedule)
      return this.equals((MCSchedule)that);
    return false;
  }

  public boolean equals(MCSchedule that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__scheduleId = true;
    boolean that_present__scheduleId = true;
    if (this_present__scheduleId || that_present__scheduleId) {
      if (!(this_present__scheduleId && that_present__scheduleId))
        return false;
      if (this._scheduleId != that._scheduleId)
        return false;
    }

    boolean this_present__scheduleName = true && this.isSet_scheduleName();
    boolean that_present__scheduleName = true && that.isSet_scheduleName();
    if (this_present__scheduleName || that_present__scheduleName) {
      if (!(this_present__scheduleName && that_present__scheduleName))
        return false;
      if (!this._scheduleName.equals(that._scheduleName))
        return false;
    }

    boolean this_present__categoryName = true && this.isSet_categoryName();
    boolean that_present__categoryName = true && that.isSet_categoryName();
    if (this_present__categoryName || that_present__categoryName) {
      if (!(this_present__categoryName && that_present__categoryName))
        return false;
      if (!this._categoryName.equals(that._categoryName))
        return false;
    }

    boolean this_present__scheduleType = true && this.isSet_scheduleType();
    boolean that_present__scheduleType = true && that.isSet_scheduleType();
    if (this_present__scheduleType || that_present__scheduleType) {
      if (!(this_present__scheduleType && that_present__scheduleType))
        return false;
      if (!this._scheduleType.equals(that._scheduleType))
        return false;
    }

    boolean this_present__holidayScheduleId = true;
    boolean that_present__holidayScheduleId = true;
    if (this_present__holidayScheduleId || that_present__holidayScheduleId) {
      if (!(this_present__holidayScheduleId && that_present__holidayScheduleId))
        return false;
      if (this._holidayScheduleId != that._holidayScheduleId)
        return false;
    }

    boolean this_present__commandFile = true && this.isSet_commandFile();
    boolean that_present__commandFile = true && that.isSet_commandFile();
    if (this_present__commandFile || that_present__commandFile) {
      if (!(this_present__commandFile && that_present__commandFile))
        return false;
      if (!this._commandFile.equals(that._commandFile))
        return false;
    }

    boolean this_present__currentState = true && this.isSet_currentState();
    boolean that_present__currentState = true && that.isSet_currentState();
    if (this_present__currentState || that_present__currentState) {
      if (!(this_present__currentState && that_present__currentState))
        return false;
      if (!this._currentState.equals(that._currentState))
        return false;
    }

    boolean this_present__startPolicy = true && this.isSet_startPolicy();
    boolean that_present__startPolicy = true && that.isSet_startPolicy();
    if (this_present__startPolicy || that_present__startPolicy) {
      if (!(this_present__startPolicy && that_present__startPolicy))
        return false;
      if (!this._startPolicy.equals(that._startPolicy))
        return false;
    }

    boolean this_present__stopPolicy = true && this.isSet_stopPolicy();
    boolean that_present__stopPolicy = true && that.isSet_stopPolicy();
    if (this_present__stopPolicy || that_present__stopPolicy) {
      if (!(this_present__stopPolicy && that_present__stopPolicy))
        return false;
      if (!this._stopPolicy.equals(that._stopPolicy))
        return false;
    }

    boolean this_present__lastRunTime = true;
    boolean that_present__lastRunTime = true;
    if (this_present__lastRunTime || that_present__lastRunTime) {
      if (!(this_present__lastRunTime && that_present__lastRunTime))
        return false;
      if (this._lastRunTime != that._lastRunTime)
        return false;
    }

    boolean this_present__lastRunStatus = true && this.isSet_lastRunStatus();
    boolean that_present__lastRunStatus = true && that.isSet_lastRunStatus();
    if (this_present__lastRunStatus || that_present__lastRunStatus) {
      if (!(this_present__lastRunStatus && that_present__lastRunStatus))
        return false;
      if (!this._lastRunStatus.equals(that._lastRunStatus))
        return false;
    }

    boolean this_present__startDay = true;
    boolean that_present__startDay = true;
    if (this_present__startDay || that_present__startDay) {
      if (!(this_present__startDay && that_present__startDay))
        return false;
      if (this._startDay != that._startDay)
        return false;
    }

    boolean this_present__startMonth = true;
    boolean that_present__startMonth = true;
    if (this_present__startMonth || that_present__startMonth) {
      if (!(this_present__startMonth && that_present__startMonth))
        return false;
      if (this._startMonth != that._startMonth)
        return false;
    }

    boolean this_present__startYear = true;
    boolean that_present__startYear = true;
    if (this_present__startYear || that_present__startYear) {
      if (!(this_present__startYear && that_present__startYear))
        return false;
      if (this._startYear != that._startYear)
        return false;
    }

    boolean this_present__startTime = true && this.isSet_startTime();
    boolean that_present__startTime = true && that.isSet_startTime();
    if (this_present__startTime || that_present__startTime) {
      if (!(this_present__startTime && that_present__startTime))
        return false;
      if (!this._startTime.equals(that._startTime))
        return false;
    }

    boolean this_present__stopTime = true && this.isSet_stopTime();
    boolean that_present__stopTime = true && that.isSet_stopTime();
    if (this_present__stopTime || that_present__stopTime) {
      if (!(this_present__stopTime && that_present__stopTime))
        return false;
      if (!this._stopTime.equals(that._stopTime))
        return false;
    }

    boolean this_present__validWeekDays = true && this.isSet_validWeekDays();
    boolean that_present__validWeekDays = true && that.isSet_validWeekDays();
    if (this_present__validWeekDays || that_present__validWeekDays) {
      if (!(this_present__validWeekDays && that_present__validWeekDays))
        return false;
      if (!this._validWeekDays.equals(that._validWeekDays))
        return false;
    }

    boolean this_present__duration = true;
    boolean that_present__duration = true;
    if (this_present__duration || that_present__duration) {
      if (!(this_present__duration && that_present__duration))
        return false;
      if (this._duration != that._duration)
        return false;
    }

    boolean this_present__manualStartTime = true;
    boolean that_present__manualStartTime = true;
    if (this_present__manualStartTime || that_present__manualStartTime) {
      if (!(this_present__manualStartTime && that_present__manualStartTime))
        return false;
      if (this._manualStartTime != that._manualStartTime)
        return false;
    }

    boolean this_present__manualStopTime = true;
    boolean that_present__manualStopTime = true;
    if (this_present__manualStopTime || that_present__manualStopTime) {
      if (!(this_present__manualStopTime && that_present__manualStopTime))
        return false;
      if (this._manualStopTime != that._manualStopTime)
        return false;
    }

    boolean this_present__targetPaoId = true;
    boolean that_present__targetPaoId = true;
    if (this_present__targetPaoId || that_present__targetPaoId) {
      if (!(this_present__targetPaoId && that_present__targetPaoId))
        return false;
      if (this._targetPaoId != that._targetPaoId)
        return false;
    }

    boolean this_present__startCommand = true && this.isSet_startCommand();
    boolean that_present__startCommand = true && that.isSet_startCommand();
    if (this_present__startCommand || that_present__startCommand) {
      if (!(this_present__startCommand && that_present__startCommand))
        return false;
      if (!this._startCommand.equals(that._startCommand))
        return false;
    }

    boolean this_present__stopCommand = true && this.isSet_stopCommand();
    boolean that_present__stopCommand = true && that.isSet_stopCommand();
    if (this_present__stopCommand || that_present__stopCommand) {
      if (!(this_present__stopCommand && that_present__stopCommand))
        return false;
      if (!this._stopCommand.equals(that._stopCommand))
        return false;
    }

    boolean this_present__repeatInterval = true;
    boolean that_present__repeatInterval = true;
    if (this_present__repeatInterval || that_present__repeatInterval) {
      if (!(this_present__repeatInterval && that_present__repeatInterval))
        return false;
      if (this._repeatInterval != that._repeatInterval)
        return false;
    }

    boolean this_present__currentStartTime = true;
    boolean that_present__currentStartTime = true;
    if (this_present__currentStartTime || that_present__currentStartTime) {
      if (!(this_present__currentStartTime && that_present__currentStartTime))
        return false;
      if (this._currentStartTime != that._currentStartTime)
        return false;
    }

    boolean this_present__currentStopTime = true;
    boolean that_present__currentStopTime = true;
    if (this_present__currentStopTime || that_present__currentStopTime) {
      if (!(this_present__currentStopTime && that_present__currentStopTime))
        return false;
      if (this._currentStopTime != that._currentStopTime)
        return false;
    }

    boolean this_present__templateType = true;
    boolean that_present__templateType = true;
    if (this_present__templateType || that_present__templateType) {
      if (!(this_present__templateType && that_present__templateType))
        return false;
      if (this._templateType != that._templateType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_baseMessage()) ? 131071 : 524287);
    if (isSet_baseMessage())
      hashCode = hashCode * 8191 + _baseMessage.hashCode();

    hashCode = hashCode * 8191 + _scheduleId;

    hashCode = hashCode * 8191 + ((isSet_scheduleName()) ? 131071 : 524287);
    if (isSet_scheduleName())
      hashCode = hashCode * 8191 + _scheduleName.hashCode();

    hashCode = hashCode * 8191 + ((isSet_categoryName()) ? 131071 : 524287);
    if (isSet_categoryName())
      hashCode = hashCode * 8191 + _categoryName.hashCode();

    hashCode = hashCode * 8191 + ((isSet_scheduleType()) ? 131071 : 524287);
    if (isSet_scheduleType())
      hashCode = hashCode * 8191 + _scheduleType.hashCode();

    hashCode = hashCode * 8191 + _holidayScheduleId;

    hashCode = hashCode * 8191 + ((isSet_commandFile()) ? 131071 : 524287);
    if (isSet_commandFile())
      hashCode = hashCode * 8191 + _commandFile.hashCode();

    hashCode = hashCode * 8191 + ((isSet_currentState()) ? 131071 : 524287);
    if (isSet_currentState())
      hashCode = hashCode * 8191 + _currentState.hashCode();

    hashCode = hashCode * 8191 + ((isSet_startPolicy()) ? 131071 : 524287);
    if (isSet_startPolicy())
      hashCode = hashCode * 8191 + _startPolicy.hashCode();

    hashCode = hashCode * 8191 + ((isSet_stopPolicy()) ? 131071 : 524287);
    if (isSet_stopPolicy())
      hashCode = hashCode * 8191 + _stopPolicy.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastRunTime);

    hashCode = hashCode * 8191 + ((isSet_lastRunStatus()) ? 131071 : 524287);
    if (isSet_lastRunStatus())
      hashCode = hashCode * 8191 + _lastRunStatus.hashCode();

    hashCode = hashCode * 8191 + _startDay;

    hashCode = hashCode * 8191 + _startMonth;

    hashCode = hashCode * 8191 + _startYear;

    hashCode = hashCode * 8191 + ((isSet_startTime()) ? 131071 : 524287);
    if (isSet_startTime())
      hashCode = hashCode * 8191 + _startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSet_stopTime()) ? 131071 : 524287);
    if (isSet_stopTime())
      hashCode = hashCode * 8191 + _stopTime.hashCode();

    hashCode = hashCode * 8191 + ((isSet_validWeekDays()) ? 131071 : 524287);
    if (isSet_validWeekDays())
      hashCode = hashCode * 8191 + _validWeekDays.hashCode();

    hashCode = hashCode * 8191 + _duration;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_manualStartTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_manualStopTime);

    hashCode = hashCode * 8191 + _targetPaoId;

    hashCode = hashCode * 8191 + ((isSet_startCommand()) ? 131071 : 524287);
    if (isSet_startCommand())
      hashCode = hashCode * 8191 + _startCommand.hashCode();

    hashCode = hashCode * 8191 + ((isSet_stopCommand()) ? 131071 : 524287);
    if (isSet_stopCommand())
      hashCode = hashCode * 8191 + _stopCommand.hashCode();

    hashCode = hashCode * 8191 + _repeatInterval;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_currentStartTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_currentStopTime);

    hashCode = hashCode * 8191 + _templateType;

    return hashCode;
  }

  @Override
  public int compareTo(MCSchedule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSet_baseMessage(), other.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, other._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_scheduleId(), other.isSet_scheduleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_scheduleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._scheduleId, other._scheduleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_scheduleName(), other.isSet_scheduleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_scheduleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._scheduleName, other._scheduleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_categoryName(), other.isSet_categoryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_categoryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._categoryName, other._categoryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_scheduleType(), other.isSet_scheduleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_scheduleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._scheduleType, other._scheduleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_holidayScheduleId(), other.isSet_holidayScheduleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_holidayScheduleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._holidayScheduleId, other._holidayScheduleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_commandFile(), other.isSet_commandFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_commandFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._commandFile, other._commandFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_currentState(), other.isSet_currentState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentState, other._currentState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_startPolicy(), other.isSet_startPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_startPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._startPolicy, other._startPolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_stopPolicy(), other.isSet_stopPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_stopPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._stopPolicy, other._stopPolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_lastRunTime(), other.isSet_lastRunTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastRunTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastRunTime, other._lastRunTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_lastRunStatus(), other.isSet_lastRunStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastRunStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastRunStatus, other._lastRunStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_startDay(), other.isSet_startDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_startDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._startDay, other._startDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_startMonth(), other.isSet_startMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_startMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._startMonth, other._startMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_startYear(), other.isSet_startYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_startYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._startYear, other._startYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_startTime(), other.isSet_startTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_startTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._startTime, other._startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_stopTime(), other.isSet_stopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_stopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._stopTime, other._stopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_validWeekDays(), other.isSet_validWeekDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_validWeekDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._validWeekDays, other._validWeekDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_duration(), other.isSet_duration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_duration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._duration, other._duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_manualStartTime(), other.isSet_manualStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_manualStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._manualStartTime, other._manualStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_manualStopTime(), other.isSet_manualStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_manualStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._manualStopTime, other._manualStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_targetPaoId(), other.isSet_targetPaoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_targetPaoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._targetPaoId, other._targetPaoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_startCommand(), other.isSet_startCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_startCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._startCommand, other._startCommand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_stopCommand(), other.isSet_stopCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_stopCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._stopCommand, other._stopCommand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_repeatInterval(), other.isSet_repeatInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_repeatInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._repeatInterval, other._repeatInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_currentStartTime(), other.isSet_currentStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentStartTime, other._currentStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_currentStopTime(), other.isSet_currentStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentStopTime, other._currentStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_templateType(), other.isSet_templateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_templateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._templateType, other._templateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MCSchedule(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_scheduleId:");
    sb.append(this._scheduleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_scheduleName:");
    if (this._scheduleName == null) {
      sb.append("null");
    } else {
      sb.append(this._scheduleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_categoryName:");
    if (this._categoryName == null) {
      sb.append("null");
    } else {
      sb.append(this._categoryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_scheduleType:");
    if (this._scheduleType == null) {
      sb.append("null");
    } else {
      sb.append(this._scheduleType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_holidayScheduleId:");
    sb.append(this._holidayScheduleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_commandFile:");
    if (this._commandFile == null) {
      sb.append("null");
    } else {
      sb.append(this._commandFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentState:");
    if (this._currentState == null) {
      sb.append("null");
    } else {
      sb.append(this._currentState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_startPolicy:");
    if (this._startPolicy == null) {
      sb.append("null");
    } else {
      sb.append(this._startPolicy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_stopPolicy:");
    if (this._stopPolicy == null) {
      sb.append("null");
    } else {
      sb.append(this._stopPolicy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastRunTime:");
    sb.append(this._lastRunTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastRunStatus:");
    if (this._lastRunStatus == null) {
      sb.append("null");
    } else {
      sb.append(this._lastRunStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_startDay:");
    sb.append(this._startDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_startMonth:");
    sb.append(this._startMonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_startYear:");
    sb.append(this._startYear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_startTime:");
    if (this._startTime == null) {
      sb.append("null");
    } else {
      sb.append(this._startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_stopTime:");
    if (this._stopTime == null) {
      sb.append("null");
    } else {
      sb.append(this._stopTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_validWeekDays:");
    if (this._validWeekDays == null) {
      sb.append("null");
    } else {
      sb.append(this._validWeekDays);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_duration:");
    sb.append(this._duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_manualStartTime:");
    sb.append(this._manualStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_manualStopTime:");
    sb.append(this._manualStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_targetPaoId:");
    sb.append(this._targetPaoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_startCommand:");
    if (this._startCommand == null) {
      sb.append("null");
    } else {
      sb.append(this._startCommand);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_stopCommand:");
    if (this._stopCommand == null) {
      sb.append("null");
    } else {
      sb.append(this._stopCommand);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_repeatInterval:");
    sb.append(this._repeatInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentStartTime:");
    sb.append(this._currentStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentStopTime:");
    sb.append(this._currentStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_templateType:");
    sb.append(this._templateType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_scheduleId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_scheduleId' is unset! Struct:" + toString());
    }

    if (!isSet_scheduleName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_scheduleName' is unset! Struct:" + toString());
    }

    if (!isSet_categoryName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_categoryName' is unset! Struct:" + toString());
    }

    if (!isSet_scheduleType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_scheduleType' is unset! Struct:" + toString());
    }

    if (!isSet_holidayScheduleId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_holidayScheduleId' is unset! Struct:" + toString());
    }

    if (!isSet_commandFile()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_commandFile' is unset! Struct:" + toString());
    }

    if (!isSet_currentState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentState' is unset! Struct:" + toString());
    }

    if (!isSet_startPolicy()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_startPolicy' is unset! Struct:" + toString());
    }

    if (!isSet_stopPolicy()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_stopPolicy' is unset! Struct:" + toString());
    }

    if (!isSet_lastRunTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastRunTime' is unset! Struct:" + toString());
    }

    if (!isSet_lastRunStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastRunStatus' is unset! Struct:" + toString());
    }

    if (!isSet_startDay()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_startDay' is unset! Struct:" + toString());
    }

    if (!isSet_startMonth()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_startMonth' is unset! Struct:" + toString());
    }

    if (!isSet_startYear()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_startYear' is unset! Struct:" + toString());
    }

    if (!isSet_startTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_startTime' is unset! Struct:" + toString());
    }

    if (!isSet_stopTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_stopTime' is unset! Struct:" + toString());
    }

    if (!isSet_validWeekDays()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_validWeekDays' is unset! Struct:" + toString());
    }

    if (!isSet_duration()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_duration' is unset! Struct:" + toString());
    }

    if (!isSet_manualStartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_manualStartTime' is unset! Struct:" + toString());
    }

    if (!isSet_manualStopTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_manualStopTime' is unset! Struct:" + toString());
    }

    if (!isSet_targetPaoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_targetPaoId' is unset! Struct:" + toString());
    }

    if (!isSet_startCommand()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_startCommand' is unset! Struct:" + toString());
    }

    if (!isSet_stopCommand()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_stopCommand' is unset! Struct:" + toString());
    }

    if (!isSet_repeatInterval()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_repeatInterval' is unset! Struct:" + toString());
    }

    if (!isSet_currentStartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentStartTime' is unset! Struct:" + toString());
    }

    if (!isSet_currentStopTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentStopTime' is unset! Struct:" + toString());
    }

    if (!isSet_templateType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_templateType' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MCScheduleStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MCScheduleStandardScheme getScheme() {
      return new MCScheduleStandardScheme();
    }
  }

  private static class MCScheduleStandardScheme extends org.apache.thrift.scheme.StandardScheme<MCSchedule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MCSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _SCHEDULE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._scheduleId = iprot.readI32();
              struct.set_scheduleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _SCHEDULE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._scheduleName = iprot.readString();
              struct.set_scheduleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _CATEGORY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._categoryName = iprot.readString();
              struct.set_categoryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _SCHEDULE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._scheduleType = iprot.readString();
              struct.set_scheduleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _HOLIDAY_SCHEDULE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._holidayScheduleId = iprot.readI32();
              struct.set_holidayScheduleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _COMMAND_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._commandFile = iprot.readString();
              struct.set_commandFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _CURRENT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._currentState = iprot.readString();
              struct.set_currentStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _START_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._startPolicy = iprot.readString();
              struct.set_startPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _STOP_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._stopPolicy = iprot.readString();
              struct.set_stopPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _LAST_RUN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastRunTime = iprot.readI64();
              struct.set_lastRunTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _LAST_RUN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._lastRunStatus = iprot.readString();
              struct.set_lastRunStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _START_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._startDay = iprot.readI32();
              struct.set_startDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // _START_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._startMonth = iprot.readI32();
              struct.set_startMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // _START_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._startYear = iprot.readI32();
              struct.set_startYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._startTime = iprot.readString();
              struct.set_startTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // _STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._stopTime = iprot.readString();
              struct.set_stopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // _VALID_WEEK_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._validWeekDays = iprot.readString();
              struct.set_validWeekDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // _DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._duration = iprot.readI32();
              struct.set_durationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // _MANUAL_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._manualStartTime = iprot.readI64();
              struct.set_manualStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // _MANUAL_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._manualStopTime = iprot.readI64();
              struct.set_manualStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // _TARGET_PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._targetPaoId = iprot.readI32();
              struct.set_targetPaoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // _START_COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._startCommand = iprot.readString();
              struct.set_startCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // _STOP_COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._stopCommand = iprot.readString();
              struct.set_stopCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // _REPEAT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._repeatInterval = iprot.readI32();
              struct.set_repeatIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // _CURRENT_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._currentStartTime = iprot.readI64();
              struct.set_currentStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // _CURRENT_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._currentStopTime = iprot.readI64();
              struct.set_currentStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // _TEMPLATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._templateType = iprot.readI32();
              struct.set_templateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MCSchedule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SCHEDULE_ID_FIELD_DESC);
      oprot.writeI32(struct._scheduleId);
      oprot.writeFieldEnd();
      if (struct._scheduleName != null) {
        oprot.writeFieldBegin(_SCHEDULE_NAME_FIELD_DESC);
        oprot.writeString(struct._scheduleName);
        oprot.writeFieldEnd();
      }
      if (struct._categoryName != null) {
        oprot.writeFieldBegin(_CATEGORY_NAME_FIELD_DESC);
        oprot.writeString(struct._categoryName);
        oprot.writeFieldEnd();
      }
      if (struct._scheduleType != null) {
        oprot.writeFieldBegin(_SCHEDULE_TYPE_FIELD_DESC);
        oprot.writeString(struct._scheduleType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_HOLIDAY_SCHEDULE_ID_FIELD_DESC);
      oprot.writeI32(struct._holidayScheduleId);
      oprot.writeFieldEnd();
      if (struct._commandFile != null) {
        oprot.writeFieldBegin(_COMMAND_FILE_FIELD_DESC);
        oprot.writeString(struct._commandFile);
        oprot.writeFieldEnd();
      }
      if (struct._currentState != null) {
        oprot.writeFieldBegin(_CURRENT_STATE_FIELD_DESC);
        oprot.writeString(struct._currentState);
        oprot.writeFieldEnd();
      }
      if (struct._startPolicy != null) {
        oprot.writeFieldBegin(_START_POLICY_FIELD_DESC);
        oprot.writeString(struct._startPolicy);
        oprot.writeFieldEnd();
      }
      if (struct._stopPolicy != null) {
        oprot.writeFieldBegin(_STOP_POLICY_FIELD_DESC);
        oprot.writeString(struct._stopPolicy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_LAST_RUN_TIME_FIELD_DESC);
      oprot.writeI64(struct._lastRunTime);
      oprot.writeFieldEnd();
      if (struct._lastRunStatus != null) {
        oprot.writeFieldBegin(_LAST_RUN_STATUS_FIELD_DESC);
        oprot.writeString(struct._lastRunStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_START_DAY_FIELD_DESC);
      oprot.writeI32(struct._startDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_START_MONTH_FIELD_DESC);
      oprot.writeI32(struct._startMonth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_START_YEAR_FIELD_DESC);
      oprot.writeI32(struct._startYear);
      oprot.writeFieldEnd();
      if (struct._startTime != null) {
        oprot.writeFieldBegin(_START_TIME_FIELD_DESC);
        oprot.writeString(struct._startTime);
        oprot.writeFieldEnd();
      }
      if (struct._stopTime != null) {
        oprot.writeFieldBegin(_STOP_TIME_FIELD_DESC);
        oprot.writeString(struct._stopTime);
        oprot.writeFieldEnd();
      }
      if (struct._validWeekDays != null) {
        oprot.writeFieldBegin(_VALID_WEEK_DAYS_FIELD_DESC);
        oprot.writeString(struct._validWeekDays);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_DURATION_FIELD_DESC);
      oprot.writeI32(struct._duration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MANUAL_START_TIME_FIELD_DESC);
      oprot.writeI64(struct._manualStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MANUAL_STOP_TIME_FIELD_DESC);
      oprot.writeI64(struct._manualStopTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TARGET_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._targetPaoId);
      oprot.writeFieldEnd();
      if (struct._startCommand != null) {
        oprot.writeFieldBegin(_START_COMMAND_FIELD_DESC);
        oprot.writeString(struct._startCommand);
        oprot.writeFieldEnd();
      }
      if (struct._stopCommand != null) {
        oprot.writeFieldBegin(_STOP_COMMAND_FIELD_DESC);
        oprot.writeString(struct._stopCommand);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_REPEAT_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct._repeatInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_START_TIME_FIELD_DESC);
      oprot.writeI64(struct._currentStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_STOP_TIME_FIELD_DESC);
      oprot.writeI64(struct._currentStopTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TEMPLATE_TYPE_FIELD_DESC);
      oprot.writeI32(struct._templateType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MCScheduleTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MCScheduleTupleScheme getScheme() {
      return new MCScheduleTupleScheme();
    }
  }

  private static class MCScheduleTupleScheme extends org.apache.thrift.scheme.TupleScheme<MCSchedule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MCSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._scheduleId);
      oprot.writeString(struct._scheduleName);
      oprot.writeString(struct._categoryName);
      oprot.writeString(struct._scheduleType);
      oprot.writeI32(struct._holidayScheduleId);
      oprot.writeString(struct._commandFile);
      oprot.writeString(struct._currentState);
      oprot.writeString(struct._startPolicy);
      oprot.writeString(struct._stopPolicy);
      oprot.writeI64(struct._lastRunTime);
      oprot.writeString(struct._lastRunStatus);
      oprot.writeI32(struct._startDay);
      oprot.writeI32(struct._startMonth);
      oprot.writeI32(struct._startYear);
      oprot.writeString(struct._startTime);
      oprot.writeString(struct._stopTime);
      oprot.writeString(struct._validWeekDays);
      oprot.writeI32(struct._duration);
      oprot.writeI64(struct._manualStartTime);
      oprot.writeI64(struct._manualStopTime);
      oprot.writeI32(struct._targetPaoId);
      oprot.writeString(struct._startCommand);
      oprot.writeString(struct._stopCommand);
      oprot.writeI32(struct._repeatInterval);
      oprot.writeI64(struct._currentStartTime);
      oprot.writeI64(struct._currentStopTime);
      oprot.writeI32(struct._templateType);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MCSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._scheduleId = iprot.readI32();
      struct.set_scheduleIdIsSet(true);
      struct._scheduleName = iprot.readString();
      struct.set_scheduleNameIsSet(true);
      struct._categoryName = iprot.readString();
      struct.set_categoryNameIsSet(true);
      struct._scheduleType = iprot.readString();
      struct.set_scheduleTypeIsSet(true);
      struct._holidayScheduleId = iprot.readI32();
      struct.set_holidayScheduleIdIsSet(true);
      struct._commandFile = iprot.readString();
      struct.set_commandFileIsSet(true);
      struct._currentState = iprot.readString();
      struct.set_currentStateIsSet(true);
      struct._startPolicy = iprot.readString();
      struct.set_startPolicyIsSet(true);
      struct._stopPolicy = iprot.readString();
      struct.set_stopPolicyIsSet(true);
      struct._lastRunTime = iprot.readI64();
      struct.set_lastRunTimeIsSet(true);
      struct._lastRunStatus = iprot.readString();
      struct.set_lastRunStatusIsSet(true);
      struct._startDay = iprot.readI32();
      struct.set_startDayIsSet(true);
      struct._startMonth = iprot.readI32();
      struct.set_startMonthIsSet(true);
      struct._startYear = iprot.readI32();
      struct.set_startYearIsSet(true);
      struct._startTime = iprot.readString();
      struct.set_startTimeIsSet(true);
      struct._stopTime = iprot.readString();
      struct.set_stopTimeIsSet(true);
      struct._validWeekDays = iprot.readString();
      struct.set_validWeekDaysIsSet(true);
      struct._duration = iprot.readI32();
      struct.set_durationIsSet(true);
      struct._manualStartTime = iprot.readI64();
      struct.set_manualStartTimeIsSet(true);
      struct._manualStopTime = iprot.readI64();
      struct.set_manualStopTimeIsSet(true);
      struct._targetPaoId = iprot.readI32();
      struct.set_targetPaoIdIsSet(true);
      struct._startCommand = iprot.readString();
      struct.set_startCommandIsSet(true);
      struct._stopCommand = iprot.readString();
      struct.set_stopCommandIsSet(true);
      struct._repeatInterval = iprot.readI32();
      struct.set_repeatIntervalIsSet(true);
      struct._currentStartTime = iprot.readI64();
      struct.set_currentStartTimeIsSet(true);
      struct._currentStopTime = iprot.readI64();
      struct.set_currentStopTimeIsSet(true);
      struct._templateType = iprot.readI32();
      struct.set_templateTypeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


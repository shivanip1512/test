/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-24")
public class Signal implements org.apache.thrift.TBase<Signal, Signal._Fields>, java.io.Serializable, Cloneable, Comparable<Signal> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Signal");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _LOG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_logType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _SIGNAL_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("_signalCategory", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("_text", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField _ADDITIONAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("_additionalInfo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField _TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("_tags", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField _CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("_condition", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField _SIGNAL_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("_signalMillis", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField _POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_pointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SignalStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SignalTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage; // required
  private int _id; // required
  private int _logType; // required
  private int _signalCategory; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _text; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _additionalInfo; // required
  private int _tags; // required
  private int _condition; // required
  private int _signalMillis; // required
  private double _pointValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _ID((short)2, "_id"),
    _LOG_TYPE((short)3, "_logType"),
    _SIGNAL_CATEGORY((short)4, "_signalCategory"),
    _TEXT((short)5, "_text"),
    _ADDITIONAL_INFO((short)6, "_additionalInfo"),
    _TAGS((short)7, "_tags"),
    _CONDITION((short)8, "_condition"),
    _SIGNAL_MILLIS((short)9, "_signalMillis"),
    _POINT_VALUE((short)10, "_pointValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _ID
          return _ID;
        case 3: // _LOG_TYPE
          return _LOG_TYPE;
        case 4: // _SIGNAL_CATEGORY
          return _SIGNAL_CATEGORY;
        case 5: // _TEXT
          return _TEXT;
        case 6: // _ADDITIONAL_INFO
          return _ADDITIONAL_INFO;
        case 7: // _TAGS
          return _TAGS;
        case 8: // _CONDITION
          return _CONDITION;
        case 9: // _SIGNAL_MILLIS
          return _SIGNAL_MILLIS;
        case 10: // _POINT_VALUE
          return _POINT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___ID_ISSET_ID = 0;
  private static final int ___LOGTYPE_ISSET_ID = 1;
  private static final int ___SIGNALCATEGORY_ISSET_ID = 2;
  private static final int ___TAGS_ISSET_ID = 3;
  private static final int ___CONDITION_ISSET_ID = 4;
  private static final int ___SIGNALMILLIS_ISSET_ID = 5;
  private static final int ___POINTVALUE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.Message.class)));
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._LOG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_logType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._SIGNAL_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("_signalCategory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TEXT, new org.apache.thrift.meta_data.FieldMetaData("_text", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._ADDITIONAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("_additionalInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._TAGS, new org.apache.thrift.meta_data.FieldMetaData("_tags", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONDITION, new org.apache.thrift.meta_data.FieldMetaData("_condition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._SIGNAL_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("_signalMillis", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_pointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Signal.class, metaDataMap);
  }

  public Signal() {
  }

  public Signal(
    com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage,
    int _id,
    int _logType,
    int _signalCategory,
    java.lang.String _text,
    java.lang.String _additionalInfo,
    int _tags,
    int _condition,
    int _signalMillis,
    double _pointValue)
  {
    this();
    this._baseMessage = _baseMessage;
    this._id = _id;
    set_idIsSet(true);
    this._logType = _logType;
    set_logTypeIsSet(true);
    this._signalCategory = _signalCategory;
    set_signalCategoryIsSet(true);
    this._text = _text;
    this._additionalInfo = _additionalInfo;
    this._tags = _tags;
    set_tagsIsSet(true);
    this._condition = _condition;
    set_conditionIsSet(true);
    this._signalMillis = _signalMillis;
    set_signalMillisIsSet(true);
    this._pointValue = _pointValue;
    set_pointValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Signal(Signal other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message(other._baseMessage);
    }
    this._id = other._id;
    this._logType = other._logType;
    this._signalCategory = other._signalCategory;
    if (other.isSet_text()) {
      this._text = other._text;
    }
    if (other.isSet_additionalInfo()) {
      this._additionalInfo = other._additionalInfo;
    }
    this._tags = other._tags;
    this._condition = other._condition;
    this._signalMillis = other._signalMillis;
    this._pointValue = other._pointValue;
  }

  public Signal deepCopy() {
    return new Signal(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_idIsSet(false);
    this._id = 0;
    set_logTypeIsSet(false);
    this._logType = 0;
    set_signalCategoryIsSet(false);
    this._signalCategory = 0;
    this._text = null;
    this._additionalInfo = null;
    set_tagsIsSet(false);
    this._tags = 0;
    set_conditionIsSet(false);
    this._condition = 0;
    set_signalMillisIsSet(false);
    this._signalMillis = 0;
    set_pointValueIsSet(false);
    this._pointValue = 0.0;
  }

  @org.apache.thrift.annotation.Nullable
  public com.cannontech.messaging.serialization.thrift.generated.Message get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(@org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_id() {
    return this._id;
  }

  public void set_id(int _id) {
    this._id = _id;
    set_idIsSet(true);
  }

  public void unset_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ID_ISSET_ID);
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ID_ISSET_ID);
  }

  public void set_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ID_ISSET_ID, value);
  }

  public int get_logType() {
    return this._logType;
  }

  public void set_logType(int _logType) {
    this._logType = _logType;
    set_logTypeIsSet(true);
  }

  public void unset_logType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LOGTYPE_ISSET_ID);
  }

  /** Returns true if field _logType is set (has been assigned a value) and false otherwise */
  public boolean isSet_logType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LOGTYPE_ISSET_ID);
  }

  public void set_logTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LOGTYPE_ISSET_ID, value);
  }

  public int get_signalCategory() {
    return this._signalCategory;
  }

  public void set_signalCategory(int _signalCategory) {
    this._signalCategory = _signalCategory;
    set_signalCategoryIsSet(true);
  }

  public void unset_signalCategory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___SIGNALCATEGORY_ISSET_ID);
  }

  /** Returns true if field _signalCategory is set (has been assigned a value) and false otherwise */
  public boolean isSet_signalCategory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___SIGNALCATEGORY_ISSET_ID);
  }

  public void set_signalCategoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___SIGNALCATEGORY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_text() {
    return this._text;
  }

  public void set_text(@org.apache.thrift.annotation.Nullable java.lang.String _text) {
    this._text = _text;
  }

  public void unset_text() {
    this._text = null;
  }

  /** Returns true if field _text is set (has been assigned a value) and false otherwise */
  public boolean isSet_text() {
    return this._text != null;
  }

  public void set_textIsSet(boolean value) {
    if (!value) {
      this._text = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_additionalInfo() {
    return this._additionalInfo;
  }

  public void set_additionalInfo(@org.apache.thrift.annotation.Nullable java.lang.String _additionalInfo) {
    this._additionalInfo = _additionalInfo;
  }

  public void unset_additionalInfo() {
    this._additionalInfo = null;
  }

  /** Returns true if field _additionalInfo is set (has been assigned a value) and false otherwise */
  public boolean isSet_additionalInfo() {
    return this._additionalInfo != null;
  }

  public void set_additionalInfoIsSet(boolean value) {
    if (!value) {
      this._additionalInfo = null;
    }
  }

  public int get_tags() {
    return this._tags;
  }

  public void set_tags(int _tags) {
    this._tags = _tags;
    set_tagsIsSet(true);
  }

  public void unset_tags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TAGS_ISSET_ID);
  }

  /** Returns true if field _tags is set (has been assigned a value) and false otherwise */
  public boolean isSet_tags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TAGS_ISSET_ID);
  }

  public void set_tagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TAGS_ISSET_ID, value);
  }

  public int get_condition() {
    return this._condition;
  }

  public void set_condition(int _condition) {
    this._condition = _condition;
    set_conditionIsSet(true);
  }

  public void unset_condition() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONDITION_ISSET_ID);
  }

  /** Returns true if field _condition is set (has been assigned a value) and false otherwise */
  public boolean isSet_condition() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONDITION_ISSET_ID);
  }

  public void set_conditionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONDITION_ISSET_ID, value);
  }

  public int get_signalMillis() {
    return this._signalMillis;
  }

  public void set_signalMillis(int _signalMillis) {
    this._signalMillis = _signalMillis;
    set_signalMillisIsSet(true);
  }

  public void unset_signalMillis() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___SIGNALMILLIS_ISSET_ID);
  }

  /** Returns true if field _signalMillis is set (has been assigned a value) and false otherwise */
  public boolean isSet_signalMillis() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___SIGNALMILLIS_ISSET_ID);
  }

  public void set_signalMillisIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___SIGNALMILLIS_ISSET_ID, value);
  }

  public double get_pointValue() {
    return this._pointValue;
  }

  public void set_pointValue(double _pointValue) {
    this._pointValue = _pointValue;
    set_pointValueIsSet(true);
  }

  public void unset_pointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___POINTVALUE_ISSET_ID);
  }

  /** Returns true if field _pointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_pointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___POINTVALUE_ISSET_ID);
  }

  public void set_pointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___POINTVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.Message)value);
      }
      break;

    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((java.lang.Integer)value);
      }
      break;

    case _LOG_TYPE:
      if (value == null) {
        unset_logType();
      } else {
        set_logType((java.lang.Integer)value);
      }
      break;

    case _SIGNAL_CATEGORY:
      if (value == null) {
        unset_signalCategory();
      } else {
        set_signalCategory((java.lang.Integer)value);
      }
      break;

    case _TEXT:
      if (value == null) {
        unset_text();
      } else {
        set_text((java.lang.String)value);
      }
      break;

    case _ADDITIONAL_INFO:
      if (value == null) {
        unset_additionalInfo();
      } else {
        set_additionalInfo((java.lang.String)value);
      }
      break;

    case _TAGS:
      if (value == null) {
        unset_tags();
      } else {
        set_tags((java.lang.Integer)value);
      }
      break;

    case _CONDITION:
      if (value == null) {
        unset_condition();
      } else {
        set_condition((java.lang.Integer)value);
      }
      break;

    case _SIGNAL_MILLIS:
      if (value == null) {
        unset_signalMillis();
      } else {
        set_signalMillis((java.lang.Integer)value);
      }
      break;

    case _POINT_VALUE:
      if (value == null) {
        unset_pointValue();
      } else {
        set_pointValue((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _ID:
      return get_id();

    case _LOG_TYPE:
      return get_logType();

    case _SIGNAL_CATEGORY:
      return get_signalCategory();

    case _TEXT:
      return get_text();

    case _ADDITIONAL_INFO:
      return get_additionalInfo();

    case _TAGS:
      return get_tags();

    case _CONDITION:
      return get_condition();

    case _SIGNAL_MILLIS:
      return get_signalMillis();

    case _POINT_VALUE:
      return get_pointValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _ID:
      return isSet_id();
    case _LOG_TYPE:
      return isSet_logType();
    case _SIGNAL_CATEGORY:
      return isSet_signalCategory();
    case _TEXT:
      return isSet_text();
    case _ADDITIONAL_INFO:
      return isSet_additionalInfo();
    case _TAGS:
      return isSet_tags();
    case _CONDITION:
      return isSet_condition();
    case _SIGNAL_MILLIS:
      return isSet_signalMillis();
    case _POINT_VALUE:
      return isSet_pointValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Signal)
      return this.equals((Signal)that);
    return false;
  }

  public boolean equals(Signal that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__id = true;
    boolean that_present__id = true;
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (this._id != that._id)
        return false;
    }

    boolean this_present__logType = true;
    boolean that_present__logType = true;
    if (this_present__logType || that_present__logType) {
      if (!(this_present__logType && that_present__logType))
        return false;
      if (this._logType != that._logType)
        return false;
    }

    boolean this_present__signalCategory = true;
    boolean that_present__signalCategory = true;
    if (this_present__signalCategory || that_present__signalCategory) {
      if (!(this_present__signalCategory && that_present__signalCategory))
        return false;
      if (this._signalCategory != that._signalCategory)
        return false;
    }

    boolean this_present__text = true && this.isSet_text();
    boolean that_present__text = true && that.isSet_text();
    if (this_present__text || that_present__text) {
      if (!(this_present__text && that_present__text))
        return false;
      if (!this._text.equals(that._text))
        return false;
    }

    boolean this_present__additionalInfo = true && this.isSet_additionalInfo();
    boolean that_present__additionalInfo = true && that.isSet_additionalInfo();
    if (this_present__additionalInfo || that_present__additionalInfo) {
      if (!(this_present__additionalInfo && that_present__additionalInfo))
        return false;
      if (!this._additionalInfo.equals(that._additionalInfo))
        return false;
    }

    boolean this_present__tags = true;
    boolean that_present__tags = true;
    if (this_present__tags || that_present__tags) {
      if (!(this_present__tags && that_present__tags))
        return false;
      if (this._tags != that._tags)
        return false;
    }

    boolean this_present__condition = true;
    boolean that_present__condition = true;
    if (this_present__condition || that_present__condition) {
      if (!(this_present__condition && that_present__condition))
        return false;
      if (this._condition != that._condition)
        return false;
    }

    boolean this_present__signalMillis = true;
    boolean that_present__signalMillis = true;
    if (this_present__signalMillis || that_present__signalMillis) {
      if (!(this_present__signalMillis && that_present__signalMillis))
        return false;
      if (this._signalMillis != that._signalMillis)
        return false;
    }

    boolean this_present__pointValue = true;
    boolean that_present__pointValue = true;
    if (this_present__pointValue || that_present__pointValue) {
      if (!(this_present__pointValue && that_present__pointValue))
        return false;
      if (this._pointValue != that._pointValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_baseMessage()) ? 131071 : 524287);
    if (isSet_baseMessage())
      hashCode = hashCode * 8191 + _baseMessage.hashCode();

    hashCode = hashCode * 8191 + _id;

    hashCode = hashCode * 8191 + _logType;

    hashCode = hashCode * 8191 + _signalCategory;

    hashCode = hashCode * 8191 + ((isSet_text()) ? 131071 : 524287);
    if (isSet_text())
      hashCode = hashCode * 8191 + _text.hashCode();

    hashCode = hashCode * 8191 + ((isSet_additionalInfo()) ? 131071 : 524287);
    if (isSet_additionalInfo())
      hashCode = hashCode * 8191 + _additionalInfo.hashCode();

    hashCode = hashCode * 8191 + _tags;

    hashCode = hashCode * 8191 + _condition;

    hashCode = hashCode * 8191 + _signalMillis;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_pointValue);

    return hashCode;
  }

  @Override
  public int compareTo(Signal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_baseMessage()).compareTo(other.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, other._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_logType()).compareTo(other.isSet_logType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_logType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._logType, other._logType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_signalCategory()).compareTo(other.isSet_signalCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_signalCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._signalCategory, other._signalCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_text()).compareTo(other.isSet_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._text, other._text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_additionalInfo()).compareTo(other.isSet_additionalInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_additionalInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._additionalInfo, other._additionalInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_tags()).compareTo(other.isSet_tags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_tags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._tags, other._tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_condition()).compareTo(other.isSet_condition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_condition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._condition, other._condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_signalMillis()).compareTo(other.isSet_signalMillis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_signalMillis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._signalMillis, other._signalMillis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_pointValue()).compareTo(other.isSet_pointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_pointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._pointValue, other._pointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Signal(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_id:");
    sb.append(this._id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_logType:");
    sb.append(this._logType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_signalCategory:");
    sb.append(this._signalCategory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_text:");
    if (this._text == null) {
      sb.append("null");
    } else {
      sb.append(this._text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_additionalInfo:");
    if (this._additionalInfo == null) {
      sb.append("null");
    } else {
      sb.append(this._additionalInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_tags:");
    sb.append(this._tags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_condition:");
    sb.append(this._condition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_signalMillis:");
    sb.append(this._signalMillis);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_pointValue:");
    sb.append(this._pointValue);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_id' is unset! Struct:" + toString());
    }

    if (!isSet_logType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_logType' is unset! Struct:" + toString());
    }

    if (!isSet_signalCategory()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_signalCategory' is unset! Struct:" + toString());
    }

    if (!isSet_text()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_text' is unset! Struct:" + toString());
    }

    if (!isSet_additionalInfo()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_additionalInfo' is unset! Struct:" + toString());
    }

    if (!isSet_tags()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_tags' is unset! Struct:" + toString());
    }

    if (!isSet_condition()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_condition' is unset! Struct:" + toString());
    }

    if (!isSet_signalMillis()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_signalMillis' is unset! Struct:" + toString());
    }

    if (!isSet_pointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_pointValue' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SignalStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SignalStandardScheme getScheme() {
      return new SignalStandardScheme();
    }
  }

  private static class SignalStandardScheme extends org.apache.thrift.scheme.StandardScheme<Signal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Signal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._id = iprot.readI32();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _LOG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._logType = iprot.readI32();
              struct.set_logTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _SIGNAL_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._signalCategory = iprot.readI32();
              struct.set_signalCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._text = iprot.readString();
              struct.set_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _ADDITIONAL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._additionalInfo = iprot.readString();
              struct.set_additionalInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._tags = iprot.readI32();
              struct.set_tagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._condition = iprot.readI32();
              struct.set_conditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _SIGNAL_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._signalMillis = iprot.readI32();
              struct.set_signalMillisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._pointValue = iprot.readDouble();
              struct.set_pointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Signal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeI32(struct._id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LOG_TYPE_FIELD_DESC);
      oprot.writeI32(struct._logType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_SIGNAL_CATEGORY_FIELD_DESC);
      oprot.writeI32(struct._signalCategory);
      oprot.writeFieldEnd();
      if (struct._text != null) {
        oprot.writeFieldBegin(_TEXT_FIELD_DESC);
        oprot.writeString(struct._text);
        oprot.writeFieldEnd();
      }
      if (struct._additionalInfo != null) {
        oprot.writeFieldBegin(_ADDITIONAL_INFO_FIELD_DESC);
        oprot.writeString(struct._additionalInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_TAGS_FIELD_DESC);
      oprot.writeI32(struct._tags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONDITION_FIELD_DESC);
      oprot.writeI32(struct._condition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_SIGNAL_MILLIS_FIELD_DESC);
      oprot.writeI32(struct._signalMillis);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._pointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SignalTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SignalTupleScheme getScheme() {
      return new SignalTupleScheme();
    }
  }

  private static class SignalTupleScheme extends org.apache.thrift.scheme.TupleScheme<Signal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Signal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._id);
      oprot.writeI32(struct._logType);
      oprot.writeI32(struct._signalCategory);
      oprot.writeString(struct._text);
      oprot.writeString(struct._additionalInfo);
      oprot.writeI32(struct._tags);
      oprot.writeI32(struct._condition);
      oprot.writeI32(struct._signalMillis);
      oprot.writeDouble(struct._pointValue);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Signal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._id = iprot.readI32();
      struct.set_idIsSet(true);
      struct._logType = iprot.readI32();
      struct.set_logTypeIsSet(true);
      struct._signalCategory = iprot.readI32();
      struct.set_signalCategoryIsSet(true);
      struct._text = iprot.readString();
      struct.set_textIsSet(true);
      struct._additionalInfo = iprot.readString();
      struct.set_additionalInfoIsSet(true);
      struct._tags = iprot.readI32();
      struct.set_tagsIsSet(true);
      struct._condition = iprot.readI32();
      struct.set_conditionIsSet(true);
      struct._signalMillis = iprot.readI32();
      struct.set_signalMillisIsSet(true);
      struct._pointValue = iprot.readDouble();
      struct.set_pointValueIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


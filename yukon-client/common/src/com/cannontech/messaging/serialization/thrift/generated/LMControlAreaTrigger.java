/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-27")
public class LMControlAreaTrigger implements org.apache.thrift.TBase<LMControlAreaTrigger, LMControlAreaTrigger._Fields>, java.io.Serializable, Cloneable, Comparable<LMControlAreaTrigger> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMControlAreaTrigger");

  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _TRIGGER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("_triggerNumber", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _TRIGGER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_triggerType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_pointId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_pointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField _LAST_POINT_VALUE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastPointValueTimestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField _NORMAL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_normalState", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField _THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField _PROJECTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_projectionType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField _PROJECTION_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("_projectionPoints", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField _PROJECT_AHEAD_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("_projectAheadDuration", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField _THRESHOLD_KICK_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("_thresholdKickPercent", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField _MIN_RESTORE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("_minRestoreOffset", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField _PEAK_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_peakPointId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField _PEAK_POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_peakPointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField _LAST_PEAK_POINT_VALUE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastPeakPointValueTimestamp", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField _PROJECTED_POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_projectedPointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LMControlAreaTriggerStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LMControlAreaTriggerTupleSchemeFactory();

  private int _paoId; // required
  private int _triggerNumber; // required
  private java.lang.String _triggerType; // required
  private int _pointId; // required
  private double _pointValue; // required
  private long _lastPointValueTimestamp; // required
  private int _normalState; // required
  private double _threshold; // required
  private java.lang.String _projectionType; // required
  private int _projectionPoints; // required
  private int _projectAheadDuration; // required
  private int _thresholdKickPercent; // required
  private double _minRestoreOffset; // required
  private int _peakPointId; // required
  private double _peakPointValue; // required
  private long _lastPeakPointValueTimestamp; // required
  private double _projectedPointValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PAO_ID((short)1, "_paoId"),
    _TRIGGER_NUMBER((short)2, "_triggerNumber"),
    _TRIGGER_TYPE((short)3, "_triggerType"),
    _POINT_ID((short)4, "_pointId"),
    _POINT_VALUE((short)5, "_pointValue"),
    _LAST_POINT_VALUE_TIMESTAMP((short)6, "_lastPointValueTimestamp"),
    _NORMAL_STATE((short)7, "_normalState"),
    _THRESHOLD((short)8, "_threshold"),
    _PROJECTION_TYPE((short)9, "_projectionType"),
    _PROJECTION_POINTS((short)10, "_projectionPoints"),
    _PROJECT_AHEAD_DURATION((short)11, "_projectAheadDuration"),
    _THRESHOLD_KICK_PERCENT((short)12, "_thresholdKickPercent"),
    _MIN_RESTORE_OFFSET((short)13, "_minRestoreOffset"),
    _PEAK_POINT_ID((short)14, "_peakPointId"),
    _PEAK_POINT_VALUE((short)15, "_peakPointValue"),
    _LAST_PEAK_POINT_VALUE_TIMESTAMP((short)16, "_lastPeakPointValueTimestamp"),
    _PROJECTED_POINT_VALUE((short)17, "_projectedPointValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PAO_ID
          return _PAO_ID;
        case 2: // _TRIGGER_NUMBER
          return _TRIGGER_NUMBER;
        case 3: // _TRIGGER_TYPE
          return _TRIGGER_TYPE;
        case 4: // _POINT_ID
          return _POINT_ID;
        case 5: // _POINT_VALUE
          return _POINT_VALUE;
        case 6: // _LAST_POINT_VALUE_TIMESTAMP
          return _LAST_POINT_VALUE_TIMESTAMP;
        case 7: // _NORMAL_STATE
          return _NORMAL_STATE;
        case 8: // _THRESHOLD
          return _THRESHOLD;
        case 9: // _PROJECTION_TYPE
          return _PROJECTION_TYPE;
        case 10: // _PROJECTION_POINTS
          return _PROJECTION_POINTS;
        case 11: // _PROJECT_AHEAD_DURATION
          return _PROJECT_AHEAD_DURATION;
        case 12: // _THRESHOLD_KICK_PERCENT
          return _THRESHOLD_KICK_PERCENT;
        case 13: // _MIN_RESTORE_OFFSET
          return _MIN_RESTORE_OFFSET;
        case 14: // _PEAK_POINT_ID
          return _PEAK_POINT_ID;
        case 15: // _PEAK_POINT_VALUE
          return _PEAK_POINT_VALUE;
        case 16: // _LAST_PEAK_POINT_VALUE_TIMESTAMP
          return _LAST_PEAK_POINT_VALUE_TIMESTAMP;
        case 17: // _PROJECTED_POINT_VALUE
          return _PROJECTED_POINT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___TRIGGERNUMBER_ISSET_ID = 1;
  private static final int ___POINTID_ISSET_ID = 2;
  private static final int ___POINTVALUE_ISSET_ID = 3;
  private static final int ___LASTPOINTVALUETIMESTAMP_ISSET_ID = 4;
  private static final int ___NORMALSTATE_ISSET_ID = 5;
  private static final int ___THRESHOLD_ISSET_ID = 6;
  private static final int ___PROJECTIONPOINTS_ISSET_ID = 7;
  private static final int ___PROJECTAHEADDURATION_ISSET_ID = 8;
  private static final int ___THRESHOLDKICKPERCENT_ISSET_ID = 9;
  private static final int ___MINRESTOREOFFSET_ISSET_ID = 10;
  private static final int ___PEAKPOINTID_ISSET_ID = 11;
  private static final int ___PEAKPOINTVALUE_ISSET_ID = 12;
  private static final int ___LASTPEAKPOINTVALUETIMESTAMP_ISSET_ID = 13;
  private static final int ___PROJECTEDPOINTVALUE_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TRIGGER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("_triggerNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TRIGGER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_triggerType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_pointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_pointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._LAST_POINT_VALUE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("_lastPointValueTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._NORMAL_STATE, new org.apache.thrift.meta_data.FieldMetaData("_normalState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("_threshold", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._PROJECTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_projectionType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PROJECTION_POINTS, new org.apache.thrift.meta_data.FieldMetaData("_projectionPoints", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PROJECT_AHEAD_DURATION, new org.apache.thrift.meta_data.FieldMetaData("_projectAheadDuration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._THRESHOLD_KICK_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("_thresholdKickPercent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MIN_RESTORE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("_minRestoreOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._PEAK_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_peakPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PEAK_POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_peakPointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._LAST_PEAK_POINT_VALUE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("_lastPeakPointValueTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._PROJECTED_POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_projectedPointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMControlAreaTrigger.class, metaDataMap);
  }

  public LMControlAreaTrigger() {
  }

  public LMControlAreaTrigger(
    int _paoId,
    int _triggerNumber,
    java.lang.String _triggerType,
    int _pointId,
    double _pointValue,
    long _lastPointValueTimestamp,
    int _normalState,
    double _threshold,
    java.lang.String _projectionType,
    int _projectionPoints,
    int _projectAheadDuration,
    int _thresholdKickPercent,
    double _minRestoreOffset,
    int _peakPointId,
    double _peakPointValue,
    long _lastPeakPointValueTimestamp,
    double _projectedPointValue)
  {
    this();
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._triggerNumber = _triggerNumber;
    set_triggerNumberIsSet(true);
    this._triggerType = _triggerType;
    this._pointId = _pointId;
    set_pointIdIsSet(true);
    this._pointValue = _pointValue;
    set_pointValueIsSet(true);
    this._lastPointValueTimestamp = _lastPointValueTimestamp;
    set_lastPointValueTimestampIsSet(true);
    this._normalState = _normalState;
    set_normalStateIsSet(true);
    this._threshold = _threshold;
    set_thresholdIsSet(true);
    this._projectionType = _projectionType;
    this._projectionPoints = _projectionPoints;
    set_projectionPointsIsSet(true);
    this._projectAheadDuration = _projectAheadDuration;
    set_projectAheadDurationIsSet(true);
    this._thresholdKickPercent = _thresholdKickPercent;
    set_thresholdKickPercentIsSet(true);
    this._minRestoreOffset = _minRestoreOffset;
    set_minRestoreOffsetIsSet(true);
    this._peakPointId = _peakPointId;
    set_peakPointIdIsSet(true);
    this._peakPointValue = _peakPointValue;
    set_peakPointValueIsSet(true);
    this._lastPeakPointValueTimestamp = _lastPeakPointValueTimestamp;
    set_lastPeakPointValueTimestampIsSet(true);
    this._projectedPointValue = _projectedPointValue;
    set_projectedPointValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMControlAreaTrigger(LMControlAreaTrigger other) {
    __isset_bitfield = other.__isset_bitfield;
    this._paoId = other._paoId;
    this._triggerNumber = other._triggerNumber;
    if (other.isSet_triggerType()) {
      this._triggerType = other._triggerType;
    }
    this._pointId = other._pointId;
    this._pointValue = other._pointValue;
    this._lastPointValueTimestamp = other._lastPointValueTimestamp;
    this._normalState = other._normalState;
    this._threshold = other._threshold;
    if (other.isSet_projectionType()) {
      this._projectionType = other._projectionType;
    }
    this._projectionPoints = other._projectionPoints;
    this._projectAheadDuration = other._projectAheadDuration;
    this._thresholdKickPercent = other._thresholdKickPercent;
    this._minRestoreOffset = other._minRestoreOffset;
    this._peakPointId = other._peakPointId;
    this._peakPointValue = other._peakPointValue;
    this._lastPeakPointValueTimestamp = other._lastPeakPointValueTimestamp;
    this._projectedPointValue = other._projectedPointValue;
  }

  public LMControlAreaTrigger deepCopy() {
    return new LMControlAreaTrigger(this);
  }

  @Override
  public void clear() {
    set_paoIdIsSet(false);
    this._paoId = 0;
    set_triggerNumberIsSet(false);
    this._triggerNumber = 0;
    this._triggerType = null;
    set_pointIdIsSet(false);
    this._pointId = 0;
    set_pointValueIsSet(false);
    this._pointValue = 0.0;
    set_lastPointValueTimestampIsSet(false);
    this._lastPointValueTimestamp = 0;
    set_normalStateIsSet(false);
    this._normalState = 0;
    set_thresholdIsSet(false);
    this._threshold = 0.0;
    this._projectionType = null;
    set_projectionPointsIsSet(false);
    this._projectionPoints = 0;
    set_projectAheadDurationIsSet(false);
    this._projectAheadDuration = 0;
    set_thresholdKickPercentIsSet(false);
    this._thresholdKickPercent = 0;
    set_minRestoreOffsetIsSet(false);
    this._minRestoreOffset = 0.0;
    set_peakPointIdIsSet(false);
    this._peakPointId = 0;
    set_peakPointValueIsSet(false);
    this._peakPointValue = 0.0;
    set_lastPeakPointValueTimestampIsSet(false);
    this._lastPeakPointValueTimestamp = 0;
    set_projectedPointValueIsSet(false);
    this._projectedPointValue = 0.0;
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public int get_triggerNumber() {
    return this._triggerNumber;
  }

  public void set_triggerNumber(int _triggerNumber) {
    this._triggerNumber = _triggerNumber;
    set_triggerNumberIsSet(true);
  }

  public void unset_triggerNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TRIGGERNUMBER_ISSET_ID);
  }

  /** Returns true if field _triggerNumber is set (has been assigned a value) and false otherwise */
  public boolean isSet_triggerNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TRIGGERNUMBER_ISSET_ID);
  }

  public void set_triggerNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TRIGGERNUMBER_ISSET_ID, value);
  }

  public java.lang.String get_triggerType() {
    return this._triggerType;
  }

  public void set_triggerType(java.lang.String _triggerType) {
    this._triggerType = _triggerType;
  }

  public void unset_triggerType() {
    this._triggerType = null;
  }

  /** Returns true if field _triggerType is set (has been assigned a value) and false otherwise */
  public boolean isSet_triggerType() {
    return this._triggerType != null;
  }

  public void set_triggerTypeIsSet(boolean value) {
    if (!value) {
      this._triggerType = null;
    }
  }

  public int get_pointId() {
    return this._pointId;
  }

  public void set_pointId(int _pointId) {
    this._pointId = _pointId;
    set_pointIdIsSet(true);
  }

  public void unset_pointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___POINTID_ISSET_ID);
  }

  /** Returns true if field _pointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_pointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___POINTID_ISSET_ID);
  }

  public void set_pointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___POINTID_ISSET_ID, value);
  }

  public double get_pointValue() {
    return this._pointValue;
  }

  public void set_pointValue(double _pointValue) {
    this._pointValue = _pointValue;
    set_pointValueIsSet(true);
  }

  public void unset_pointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___POINTVALUE_ISSET_ID);
  }

  /** Returns true if field _pointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_pointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___POINTVALUE_ISSET_ID);
  }

  public void set_pointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___POINTVALUE_ISSET_ID, value);
  }

  public long get_lastPointValueTimestamp() {
    return this._lastPointValueTimestamp;
  }

  public void set_lastPointValueTimestamp(long _lastPointValueTimestamp) {
    this._lastPointValueTimestamp = _lastPointValueTimestamp;
    set_lastPointValueTimestampIsSet(true);
  }

  public void unset_lastPointValueTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTPOINTVALUETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field _lastPointValueTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastPointValueTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTPOINTVALUETIMESTAMP_ISSET_ID);
  }

  public void set_lastPointValueTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTPOINTVALUETIMESTAMP_ISSET_ID, value);
  }

  public int get_normalState() {
    return this._normalState;
  }

  public void set_normalState(int _normalState) {
    this._normalState = _normalState;
    set_normalStateIsSet(true);
  }

  public void unset_normalState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___NORMALSTATE_ISSET_ID);
  }

  /** Returns true if field _normalState is set (has been assigned a value) and false otherwise */
  public boolean isSet_normalState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___NORMALSTATE_ISSET_ID);
  }

  public void set_normalStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___NORMALSTATE_ISSET_ID, value);
  }

  public double get_threshold() {
    return this._threshold;
  }

  public void set_threshold(double _threshold) {
    this._threshold = _threshold;
    set_thresholdIsSet(true);
  }

  public void unset_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___THRESHOLD_ISSET_ID);
  }

  /** Returns true if field _threshold is set (has been assigned a value) and false otherwise */
  public boolean isSet_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___THRESHOLD_ISSET_ID);
  }

  public void set_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___THRESHOLD_ISSET_ID, value);
  }

  public java.lang.String get_projectionType() {
    return this._projectionType;
  }

  public void set_projectionType(java.lang.String _projectionType) {
    this._projectionType = _projectionType;
  }

  public void unset_projectionType() {
    this._projectionType = null;
  }

  /** Returns true if field _projectionType is set (has been assigned a value) and false otherwise */
  public boolean isSet_projectionType() {
    return this._projectionType != null;
  }

  public void set_projectionTypeIsSet(boolean value) {
    if (!value) {
      this._projectionType = null;
    }
  }

  public int get_projectionPoints() {
    return this._projectionPoints;
  }

  public void set_projectionPoints(int _projectionPoints) {
    this._projectionPoints = _projectionPoints;
    set_projectionPointsIsSet(true);
  }

  public void unset_projectionPoints() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PROJECTIONPOINTS_ISSET_ID);
  }

  /** Returns true if field _projectionPoints is set (has been assigned a value) and false otherwise */
  public boolean isSet_projectionPoints() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PROJECTIONPOINTS_ISSET_ID);
  }

  public void set_projectionPointsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PROJECTIONPOINTS_ISSET_ID, value);
  }

  public int get_projectAheadDuration() {
    return this._projectAheadDuration;
  }

  public void set_projectAheadDuration(int _projectAheadDuration) {
    this._projectAheadDuration = _projectAheadDuration;
    set_projectAheadDurationIsSet(true);
  }

  public void unset_projectAheadDuration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PROJECTAHEADDURATION_ISSET_ID);
  }

  /** Returns true if field _projectAheadDuration is set (has been assigned a value) and false otherwise */
  public boolean isSet_projectAheadDuration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PROJECTAHEADDURATION_ISSET_ID);
  }

  public void set_projectAheadDurationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PROJECTAHEADDURATION_ISSET_ID, value);
  }

  public int get_thresholdKickPercent() {
    return this._thresholdKickPercent;
  }

  public void set_thresholdKickPercent(int _thresholdKickPercent) {
    this._thresholdKickPercent = _thresholdKickPercent;
    set_thresholdKickPercentIsSet(true);
  }

  public void unset_thresholdKickPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___THRESHOLDKICKPERCENT_ISSET_ID);
  }

  /** Returns true if field _thresholdKickPercent is set (has been assigned a value) and false otherwise */
  public boolean isSet_thresholdKickPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___THRESHOLDKICKPERCENT_ISSET_ID);
  }

  public void set_thresholdKickPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___THRESHOLDKICKPERCENT_ISSET_ID, value);
  }

  public double get_minRestoreOffset() {
    return this._minRestoreOffset;
  }

  public void set_minRestoreOffset(double _minRestoreOffset) {
    this._minRestoreOffset = _minRestoreOffset;
    set_minRestoreOffsetIsSet(true);
  }

  public void unset_minRestoreOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MINRESTOREOFFSET_ISSET_ID);
  }

  /** Returns true if field _minRestoreOffset is set (has been assigned a value) and false otherwise */
  public boolean isSet_minRestoreOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MINRESTOREOFFSET_ISSET_ID);
  }

  public void set_minRestoreOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MINRESTOREOFFSET_ISSET_ID, value);
  }

  public int get_peakPointId() {
    return this._peakPointId;
  }

  public void set_peakPointId(int _peakPointId) {
    this._peakPointId = _peakPointId;
    set_peakPointIdIsSet(true);
  }

  public void unset_peakPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PEAKPOINTID_ISSET_ID);
  }

  /** Returns true if field _peakPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_peakPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PEAKPOINTID_ISSET_ID);
  }

  public void set_peakPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PEAKPOINTID_ISSET_ID, value);
  }

  public double get_peakPointValue() {
    return this._peakPointValue;
  }

  public void set_peakPointValue(double _peakPointValue) {
    this._peakPointValue = _peakPointValue;
    set_peakPointValueIsSet(true);
  }

  public void unset_peakPointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PEAKPOINTVALUE_ISSET_ID);
  }

  /** Returns true if field _peakPointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_peakPointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PEAKPOINTVALUE_ISSET_ID);
  }

  public void set_peakPointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PEAKPOINTVALUE_ISSET_ID, value);
  }

  public long get_lastPeakPointValueTimestamp() {
    return this._lastPeakPointValueTimestamp;
  }

  public void set_lastPeakPointValueTimestamp(long _lastPeakPointValueTimestamp) {
    this._lastPeakPointValueTimestamp = _lastPeakPointValueTimestamp;
    set_lastPeakPointValueTimestampIsSet(true);
  }

  public void unset_lastPeakPointValueTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTPEAKPOINTVALUETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field _lastPeakPointValueTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastPeakPointValueTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTPEAKPOINTVALUETIMESTAMP_ISSET_ID);
  }

  public void set_lastPeakPointValueTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTPEAKPOINTVALUETIMESTAMP_ISSET_ID, value);
  }

  public double get_projectedPointValue() {
    return this._projectedPointValue;
  }

  public void set_projectedPointValue(double _projectedPointValue) {
    this._projectedPointValue = _projectedPointValue;
    set_projectedPointValueIsSet(true);
  }

  public void unset_projectedPointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PROJECTEDPOINTVALUE_ISSET_ID);
  }

  /** Returns true if field _projectedPointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_projectedPointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PROJECTEDPOINTVALUE_ISSET_ID);
  }

  public void set_projectedPointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PROJECTEDPOINTVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((java.lang.Integer)value);
      }
      break;

    case _TRIGGER_NUMBER:
      if (value == null) {
        unset_triggerNumber();
      } else {
        set_triggerNumber((java.lang.Integer)value);
      }
      break;

    case _TRIGGER_TYPE:
      if (value == null) {
        unset_triggerType();
      } else {
        set_triggerType((java.lang.String)value);
      }
      break;

    case _POINT_ID:
      if (value == null) {
        unset_pointId();
      } else {
        set_pointId((java.lang.Integer)value);
      }
      break;

    case _POINT_VALUE:
      if (value == null) {
        unset_pointValue();
      } else {
        set_pointValue((java.lang.Double)value);
      }
      break;

    case _LAST_POINT_VALUE_TIMESTAMP:
      if (value == null) {
        unset_lastPointValueTimestamp();
      } else {
        set_lastPointValueTimestamp((java.lang.Long)value);
      }
      break;

    case _NORMAL_STATE:
      if (value == null) {
        unset_normalState();
      } else {
        set_normalState((java.lang.Integer)value);
      }
      break;

    case _THRESHOLD:
      if (value == null) {
        unset_threshold();
      } else {
        set_threshold((java.lang.Double)value);
      }
      break;

    case _PROJECTION_TYPE:
      if (value == null) {
        unset_projectionType();
      } else {
        set_projectionType((java.lang.String)value);
      }
      break;

    case _PROJECTION_POINTS:
      if (value == null) {
        unset_projectionPoints();
      } else {
        set_projectionPoints((java.lang.Integer)value);
      }
      break;

    case _PROJECT_AHEAD_DURATION:
      if (value == null) {
        unset_projectAheadDuration();
      } else {
        set_projectAheadDuration((java.lang.Integer)value);
      }
      break;

    case _THRESHOLD_KICK_PERCENT:
      if (value == null) {
        unset_thresholdKickPercent();
      } else {
        set_thresholdKickPercent((java.lang.Integer)value);
      }
      break;

    case _MIN_RESTORE_OFFSET:
      if (value == null) {
        unset_minRestoreOffset();
      } else {
        set_minRestoreOffset((java.lang.Double)value);
      }
      break;

    case _PEAK_POINT_ID:
      if (value == null) {
        unset_peakPointId();
      } else {
        set_peakPointId((java.lang.Integer)value);
      }
      break;

    case _PEAK_POINT_VALUE:
      if (value == null) {
        unset_peakPointValue();
      } else {
        set_peakPointValue((java.lang.Double)value);
      }
      break;

    case _LAST_PEAK_POINT_VALUE_TIMESTAMP:
      if (value == null) {
        unset_lastPeakPointValueTimestamp();
      } else {
        set_lastPeakPointValueTimestamp((java.lang.Long)value);
      }
      break;

    case _PROJECTED_POINT_VALUE:
      if (value == null) {
        unset_projectedPointValue();
      } else {
        set_projectedPointValue((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _PAO_ID:
      return get_paoId();

    case _TRIGGER_NUMBER:
      return get_triggerNumber();

    case _TRIGGER_TYPE:
      return get_triggerType();

    case _POINT_ID:
      return get_pointId();

    case _POINT_VALUE:
      return get_pointValue();

    case _LAST_POINT_VALUE_TIMESTAMP:
      return get_lastPointValueTimestamp();

    case _NORMAL_STATE:
      return get_normalState();

    case _THRESHOLD:
      return get_threshold();

    case _PROJECTION_TYPE:
      return get_projectionType();

    case _PROJECTION_POINTS:
      return get_projectionPoints();

    case _PROJECT_AHEAD_DURATION:
      return get_projectAheadDuration();

    case _THRESHOLD_KICK_PERCENT:
      return get_thresholdKickPercent();

    case _MIN_RESTORE_OFFSET:
      return get_minRestoreOffset();

    case _PEAK_POINT_ID:
      return get_peakPointId();

    case _PEAK_POINT_VALUE:
      return get_peakPointValue();

    case _LAST_PEAK_POINT_VALUE_TIMESTAMP:
      return get_lastPeakPointValueTimestamp();

    case _PROJECTED_POINT_VALUE:
      return get_projectedPointValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _PAO_ID:
      return isSet_paoId();
    case _TRIGGER_NUMBER:
      return isSet_triggerNumber();
    case _TRIGGER_TYPE:
      return isSet_triggerType();
    case _POINT_ID:
      return isSet_pointId();
    case _POINT_VALUE:
      return isSet_pointValue();
    case _LAST_POINT_VALUE_TIMESTAMP:
      return isSet_lastPointValueTimestamp();
    case _NORMAL_STATE:
      return isSet_normalState();
    case _THRESHOLD:
      return isSet_threshold();
    case _PROJECTION_TYPE:
      return isSet_projectionType();
    case _PROJECTION_POINTS:
      return isSet_projectionPoints();
    case _PROJECT_AHEAD_DURATION:
      return isSet_projectAheadDuration();
    case _THRESHOLD_KICK_PERCENT:
      return isSet_thresholdKickPercent();
    case _MIN_RESTORE_OFFSET:
      return isSet_minRestoreOffset();
    case _PEAK_POINT_ID:
      return isSet_peakPointId();
    case _PEAK_POINT_VALUE:
      return isSet_peakPointValue();
    case _LAST_PEAK_POINT_VALUE_TIMESTAMP:
      return isSet_lastPeakPointValueTimestamp();
    case _PROJECTED_POINT_VALUE:
      return isSet_projectedPointValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LMControlAreaTrigger)
      return this.equals((LMControlAreaTrigger)that);
    return false;
  }

  public boolean equals(LMControlAreaTrigger that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__triggerNumber = true;
    boolean that_present__triggerNumber = true;
    if (this_present__triggerNumber || that_present__triggerNumber) {
      if (!(this_present__triggerNumber && that_present__triggerNumber))
        return false;
      if (this._triggerNumber != that._triggerNumber)
        return false;
    }

    boolean this_present__triggerType = true && this.isSet_triggerType();
    boolean that_present__triggerType = true && that.isSet_triggerType();
    if (this_present__triggerType || that_present__triggerType) {
      if (!(this_present__triggerType && that_present__triggerType))
        return false;
      if (!this._triggerType.equals(that._triggerType))
        return false;
    }

    boolean this_present__pointId = true;
    boolean that_present__pointId = true;
    if (this_present__pointId || that_present__pointId) {
      if (!(this_present__pointId && that_present__pointId))
        return false;
      if (this._pointId != that._pointId)
        return false;
    }

    boolean this_present__pointValue = true;
    boolean that_present__pointValue = true;
    if (this_present__pointValue || that_present__pointValue) {
      if (!(this_present__pointValue && that_present__pointValue))
        return false;
      if (this._pointValue != that._pointValue)
        return false;
    }

    boolean this_present__lastPointValueTimestamp = true;
    boolean that_present__lastPointValueTimestamp = true;
    if (this_present__lastPointValueTimestamp || that_present__lastPointValueTimestamp) {
      if (!(this_present__lastPointValueTimestamp && that_present__lastPointValueTimestamp))
        return false;
      if (this._lastPointValueTimestamp != that._lastPointValueTimestamp)
        return false;
    }

    boolean this_present__normalState = true;
    boolean that_present__normalState = true;
    if (this_present__normalState || that_present__normalState) {
      if (!(this_present__normalState && that_present__normalState))
        return false;
      if (this._normalState != that._normalState)
        return false;
    }

    boolean this_present__threshold = true;
    boolean that_present__threshold = true;
    if (this_present__threshold || that_present__threshold) {
      if (!(this_present__threshold && that_present__threshold))
        return false;
      if (this._threshold != that._threshold)
        return false;
    }

    boolean this_present__projectionType = true && this.isSet_projectionType();
    boolean that_present__projectionType = true && that.isSet_projectionType();
    if (this_present__projectionType || that_present__projectionType) {
      if (!(this_present__projectionType && that_present__projectionType))
        return false;
      if (!this._projectionType.equals(that._projectionType))
        return false;
    }

    boolean this_present__projectionPoints = true;
    boolean that_present__projectionPoints = true;
    if (this_present__projectionPoints || that_present__projectionPoints) {
      if (!(this_present__projectionPoints && that_present__projectionPoints))
        return false;
      if (this._projectionPoints != that._projectionPoints)
        return false;
    }

    boolean this_present__projectAheadDuration = true;
    boolean that_present__projectAheadDuration = true;
    if (this_present__projectAheadDuration || that_present__projectAheadDuration) {
      if (!(this_present__projectAheadDuration && that_present__projectAheadDuration))
        return false;
      if (this._projectAheadDuration != that._projectAheadDuration)
        return false;
    }

    boolean this_present__thresholdKickPercent = true;
    boolean that_present__thresholdKickPercent = true;
    if (this_present__thresholdKickPercent || that_present__thresholdKickPercent) {
      if (!(this_present__thresholdKickPercent && that_present__thresholdKickPercent))
        return false;
      if (this._thresholdKickPercent != that._thresholdKickPercent)
        return false;
    }

    boolean this_present__minRestoreOffset = true;
    boolean that_present__minRestoreOffset = true;
    if (this_present__minRestoreOffset || that_present__minRestoreOffset) {
      if (!(this_present__minRestoreOffset && that_present__minRestoreOffset))
        return false;
      if (this._minRestoreOffset != that._minRestoreOffset)
        return false;
    }

    boolean this_present__peakPointId = true;
    boolean that_present__peakPointId = true;
    if (this_present__peakPointId || that_present__peakPointId) {
      if (!(this_present__peakPointId && that_present__peakPointId))
        return false;
      if (this._peakPointId != that._peakPointId)
        return false;
    }

    boolean this_present__peakPointValue = true;
    boolean that_present__peakPointValue = true;
    if (this_present__peakPointValue || that_present__peakPointValue) {
      if (!(this_present__peakPointValue && that_present__peakPointValue))
        return false;
      if (this._peakPointValue != that._peakPointValue)
        return false;
    }

    boolean this_present__lastPeakPointValueTimestamp = true;
    boolean that_present__lastPeakPointValueTimestamp = true;
    if (this_present__lastPeakPointValueTimestamp || that_present__lastPeakPointValueTimestamp) {
      if (!(this_present__lastPeakPointValueTimestamp && that_present__lastPeakPointValueTimestamp))
        return false;
      if (this._lastPeakPointValueTimestamp != that._lastPeakPointValueTimestamp)
        return false;
    }

    boolean this_present__projectedPointValue = true;
    boolean that_present__projectedPointValue = true;
    if (this_present__projectedPointValue || that_present__projectedPointValue) {
      if (!(this_present__projectedPointValue && that_present__projectedPointValue))
        return false;
      if (this._projectedPointValue != that._projectedPointValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + _paoId;

    hashCode = hashCode * 8191 + _triggerNumber;

    hashCode = hashCode * 8191 + ((isSet_triggerType()) ? 131071 : 524287);
    if (isSet_triggerType())
      hashCode = hashCode * 8191 + _triggerType.hashCode();

    hashCode = hashCode * 8191 + _pointId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_pointValue);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastPointValueTimestamp);

    hashCode = hashCode * 8191 + _normalState;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_threshold);

    hashCode = hashCode * 8191 + ((isSet_projectionType()) ? 131071 : 524287);
    if (isSet_projectionType())
      hashCode = hashCode * 8191 + _projectionType.hashCode();

    hashCode = hashCode * 8191 + _projectionPoints;

    hashCode = hashCode * 8191 + _projectAheadDuration;

    hashCode = hashCode * 8191 + _thresholdKickPercent;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_minRestoreOffset);

    hashCode = hashCode * 8191 + _peakPointId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_peakPointValue);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastPeakPointValueTimestamp);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_projectedPointValue);

    return hashCode;
  }

  @Override
  public int compareTo(LMControlAreaTrigger other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_paoId()).compareTo(other.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, other._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_triggerNumber()).compareTo(other.isSet_triggerNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_triggerNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._triggerNumber, other._triggerNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_triggerType()).compareTo(other.isSet_triggerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_triggerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._triggerType, other._triggerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_pointId()).compareTo(other.isSet_pointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_pointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._pointId, other._pointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_pointValue()).compareTo(other.isSet_pointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_pointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._pointValue, other._pointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lastPointValueTimestamp()).compareTo(other.isSet_lastPointValueTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastPointValueTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastPointValueTimestamp, other._lastPointValueTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_normalState()).compareTo(other.isSet_normalState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_normalState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._normalState, other._normalState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_threshold()).compareTo(other.isSet_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._threshold, other._threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_projectionType()).compareTo(other.isSet_projectionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_projectionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._projectionType, other._projectionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_projectionPoints()).compareTo(other.isSet_projectionPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_projectionPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._projectionPoints, other._projectionPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_projectAheadDuration()).compareTo(other.isSet_projectAheadDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_projectAheadDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._projectAheadDuration, other._projectAheadDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_thresholdKickPercent()).compareTo(other.isSet_thresholdKickPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_thresholdKickPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._thresholdKickPercent, other._thresholdKickPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_minRestoreOffset()).compareTo(other.isSet_minRestoreOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_minRestoreOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._minRestoreOffset, other._minRestoreOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_peakPointId()).compareTo(other.isSet_peakPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_peakPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._peakPointId, other._peakPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_peakPointValue()).compareTo(other.isSet_peakPointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_peakPointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._peakPointValue, other._peakPointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lastPeakPointValueTimestamp()).compareTo(other.isSet_lastPeakPointValueTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastPeakPointValueTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastPeakPointValueTimestamp, other._lastPeakPointValueTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_projectedPointValue()).compareTo(other.isSet_projectedPointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_projectedPointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._projectedPointValue, other._projectedPointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LMControlAreaTrigger(");
    boolean first = true;

    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_triggerNumber:");
    sb.append(this._triggerNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_triggerType:");
    if (this._triggerType == null) {
      sb.append("null");
    } else {
      sb.append(this._triggerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_pointId:");
    sb.append(this._pointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_pointValue:");
    sb.append(this._pointValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastPointValueTimestamp:");
    sb.append(this._lastPointValueTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_normalState:");
    sb.append(this._normalState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_threshold:");
    sb.append(this._threshold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_projectionType:");
    if (this._projectionType == null) {
      sb.append("null");
    } else {
      sb.append(this._projectionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_projectionPoints:");
    sb.append(this._projectionPoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_projectAheadDuration:");
    sb.append(this._projectAheadDuration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_thresholdKickPercent:");
    sb.append(this._thresholdKickPercent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_minRestoreOffset:");
    sb.append(this._minRestoreOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_peakPointId:");
    sb.append(this._peakPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_peakPointValue:");
    sb.append(this._peakPointValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastPeakPointValueTimestamp:");
    sb.append(this._lastPeakPointValueTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_projectedPointValue:");
    sb.append(this._projectedPointValue);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_triggerNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_triggerNumber' is unset! Struct:" + toString());
    }

    if (!isSet_triggerType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_triggerType' is unset! Struct:" + toString());
    }

    if (!isSet_pointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_pointId' is unset! Struct:" + toString());
    }

    if (!isSet_pointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_pointValue' is unset! Struct:" + toString());
    }

    if (!isSet_lastPointValueTimestamp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastPointValueTimestamp' is unset! Struct:" + toString());
    }

    if (!isSet_normalState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_normalState' is unset! Struct:" + toString());
    }

    if (!isSet_threshold()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_threshold' is unset! Struct:" + toString());
    }

    if (!isSet_projectionType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_projectionType' is unset! Struct:" + toString());
    }

    if (!isSet_projectionPoints()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_projectionPoints' is unset! Struct:" + toString());
    }

    if (!isSet_projectAheadDuration()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_projectAheadDuration' is unset! Struct:" + toString());
    }

    if (!isSet_thresholdKickPercent()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_thresholdKickPercent' is unset! Struct:" + toString());
    }

    if (!isSet_minRestoreOffset()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_minRestoreOffset' is unset! Struct:" + toString());
    }

    if (!isSet_peakPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_peakPointId' is unset! Struct:" + toString());
    }

    if (!isSet_peakPointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_peakPointValue' is unset! Struct:" + toString());
    }

    if (!isSet_lastPeakPointValueTimestamp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastPeakPointValueTimestamp' is unset! Struct:" + toString());
    }

    if (!isSet_projectedPointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_projectedPointValue' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMControlAreaTriggerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMControlAreaTriggerStandardScheme getScheme() {
      return new LMControlAreaTriggerStandardScheme();
    }
  }

  private static class LMControlAreaTriggerStandardScheme extends org.apache.thrift.scheme.StandardScheme<LMControlAreaTrigger> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMControlAreaTrigger struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _TRIGGER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._triggerNumber = iprot.readI32();
              struct.set_triggerNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _TRIGGER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._triggerType = iprot.readString();
              struct.set_triggerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._pointId = iprot.readI32();
              struct.set_pointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._pointValue = iprot.readDouble();
              struct.set_pointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _LAST_POINT_VALUE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastPointValueTimestamp = iprot.readI64();
              struct.set_lastPointValueTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _NORMAL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._normalState = iprot.readI32();
              struct.set_normalStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._threshold = iprot.readDouble();
              struct.set_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _PROJECTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._projectionType = iprot.readString();
              struct.set_projectionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _PROJECTION_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._projectionPoints = iprot.readI32();
              struct.set_projectionPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _PROJECT_AHEAD_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._projectAheadDuration = iprot.readI32();
              struct.set_projectAheadDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _THRESHOLD_KICK_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._thresholdKickPercent = iprot.readI32();
              struct.set_thresholdKickPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _MIN_RESTORE_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._minRestoreOffset = iprot.readDouble();
              struct.set_minRestoreOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // _PEAK_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._peakPointId = iprot.readI32();
              struct.set_peakPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // _PEAK_POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._peakPointValue = iprot.readDouble();
              struct.set_peakPointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _LAST_PEAK_POINT_VALUE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastPeakPointValueTimestamp = iprot.readI64();
              struct.set_lastPeakPointValueTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // _PROJECTED_POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._projectedPointValue = iprot.readDouble();
              struct.set_projectedPointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMControlAreaTrigger struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TRIGGER_NUMBER_FIELD_DESC);
      oprot.writeI32(struct._triggerNumber);
      oprot.writeFieldEnd();
      if (struct._triggerType != null) {
        oprot.writeFieldBegin(_TRIGGER_TYPE_FIELD_DESC);
        oprot.writeString(struct._triggerType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._pointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._pointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_POINT_VALUE_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct._lastPointValueTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NORMAL_STATE_FIELD_DESC);
      oprot.writeI32(struct._normalState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_THRESHOLD_FIELD_DESC);
      oprot.writeDouble(struct._threshold);
      oprot.writeFieldEnd();
      if (struct._projectionType != null) {
        oprot.writeFieldBegin(_PROJECTION_TYPE_FIELD_DESC);
        oprot.writeString(struct._projectionType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_PROJECTION_POINTS_FIELD_DESC);
      oprot.writeI32(struct._projectionPoints);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PROJECT_AHEAD_DURATION_FIELD_DESC);
      oprot.writeI32(struct._projectAheadDuration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_THRESHOLD_KICK_PERCENT_FIELD_DESC);
      oprot.writeI32(struct._thresholdKickPercent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MIN_RESTORE_OFFSET_FIELD_DESC);
      oprot.writeDouble(struct._minRestoreOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PEAK_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._peakPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PEAK_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._peakPointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_PEAK_POINT_VALUE_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct._lastPeakPointValueTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PROJECTED_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._projectedPointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMControlAreaTriggerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMControlAreaTriggerTupleScheme getScheme() {
      return new LMControlAreaTriggerTupleScheme();
    }
  }

  private static class LMControlAreaTriggerTupleScheme extends org.apache.thrift.scheme.TupleScheme<LMControlAreaTrigger> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMControlAreaTrigger struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct._paoId);
      oprot.writeI32(struct._triggerNumber);
      oprot.writeString(struct._triggerType);
      oprot.writeI32(struct._pointId);
      oprot.writeDouble(struct._pointValue);
      oprot.writeI64(struct._lastPointValueTimestamp);
      oprot.writeI32(struct._normalState);
      oprot.writeDouble(struct._threshold);
      oprot.writeString(struct._projectionType);
      oprot.writeI32(struct._projectionPoints);
      oprot.writeI32(struct._projectAheadDuration);
      oprot.writeI32(struct._thresholdKickPercent);
      oprot.writeDouble(struct._minRestoreOffset);
      oprot.writeI32(struct._peakPointId);
      oprot.writeDouble(struct._peakPointValue);
      oprot.writeI64(struct._lastPeakPointValueTimestamp);
      oprot.writeDouble(struct._projectedPointValue);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMControlAreaTrigger struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._triggerNumber = iprot.readI32();
      struct.set_triggerNumberIsSet(true);
      struct._triggerType = iprot.readString();
      struct.set_triggerTypeIsSet(true);
      struct._pointId = iprot.readI32();
      struct.set_pointIdIsSet(true);
      struct._pointValue = iprot.readDouble();
      struct.set_pointValueIsSet(true);
      struct._lastPointValueTimestamp = iprot.readI64();
      struct.set_lastPointValueTimestampIsSet(true);
      struct._normalState = iprot.readI32();
      struct.set_normalStateIsSet(true);
      struct._threshold = iprot.readDouble();
      struct.set_thresholdIsSet(true);
      struct._projectionType = iprot.readString();
      struct.set_projectionTypeIsSet(true);
      struct._projectionPoints = iprot.readI32();
      struct.set_projectionPointsIsSet(true);
      struct._projectAheadDuration = iprot.readI32();
      struct.set_projectAheadDurationIsSet(true);
      struct._thresholdKickPercent = iprot.readI32();
      struct.set_thresholdKickPercentIsSet(true);
      struct._minRestoreOffset = iprot.readDouble();
      struct.set_minRestoreOffsetIsSet(true);
      struct._peakPointId = iprot.readI32();
      struct.set_peakPointIdIsSet(true);
      struct._peakPointValue = iprot.readDouble();
      struct.set_peakPointValueIsSet(true);
      struct._lastPeakPointValueTimestamp = iprot.readI64();
      struct.set_lastPeakPointValueTimestampIsSet(true);
      struct._projectedPointValue = iprot.readDouble();
      struct.set_projectedPointValueIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


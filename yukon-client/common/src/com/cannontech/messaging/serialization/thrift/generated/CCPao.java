/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CCPao implements org.apache.thrift.TBase<CCPao, CCPao._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CCPao");

  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _PAO_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoCategory", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _PAO_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoClass", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _PAO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField _PAO_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField _PAO_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoDescription", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField _DISABLE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_disableFlag", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CCPaoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CCPaoTupleSchemeFactory());
  }

  private int _paoId; // required
  private String _paoCategory; // required
  private String _paoClass; // required
  private String _paoName; // required
  private String _paoType; // required
  private String _paoDescription; // required
  private boolean _disableFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PAO_ID((short)1, "_paoId"),
    _PAO_CATEGORY((short)2, "_paoCategory"),
    _PAO_CLASS((short)3, "_paoClass"),
    _PAO_NAME((short)4, "_paoName"),
    _PAO_TYPE((short)5, "_paoType"),
    _PAO_DESCRIPTION((short)6, "_paoDescription"),
    _DISABLE_FLAG((short)7, "_disableFlag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PAO_ID
          return _PAO_ID;
        case 2: // _PAO_CATEGORY
          return _PAO_CATEGORY;
        case 3: // _PAO_CLASS
          return _PAO_CLASS;
        case 4: // _PAO_NAME
          return _PAO_NAME;
        case 5: // _PAO_TYPE
          return _PAO_TYPE;
        case 6: // _PAO_DESCRIPTION
          return _PAO_DESCRIPTION;
        case 7: // _DISABLE_FLAG
          return _DISABLE_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___DISABLEFLAG_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PAO_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("_paoCategory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_CLASS, new org.apache.thrift.meta_data.FieldMetaData("_paoClass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_NAME, new org.apache.thrift.meta_data.FieldMetaData("_paoName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_paoType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAO_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("_paoDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._DISABLE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_disableFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CCPao.class, metaDataMap);
  }

  public CCPao() {
  }

  public CCPao(
    int _paoId,
    String _paoCategory,
    String _paoClass,
    String _paoName,
    String _paoType,
    String _paoDescription,
    boolean _disableFlag)
  {
    this();
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._paoCategory = _paoCategory;
    this._paoClass = _paoClass;
    this._paoName = _paoName;
    this._paoType = _paoType;
    this._paoDescription = _paoDescription;
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CCPao(CCPao other) {
    __isset_bitfield = other.__isset_bitfield;
    this._paoId = other._paoId;
    if (other.isSet_paoCategory()) {
      this._paoCategory = other._paoCategory;
    }
    if (other.isSet_paoClass()) {
      this._paoClass = other._paoClass;
    }
    if (other.isSet_paoName()) {
      this._paoName = other._paoName;
    }
    if (other.isSet_paoType()) {
      this._paoType = other._paoType;
    }
    if (other.isSet_paoDescription()) {
      this._paoDescription = other._paoDescription;
    }
    this._disableFlag = other._disableFlag;
  }

  public CCPao deepCopy() {
    return new CCPao(this);
  }

  @Override
  public void clear() {
    set_paoIdIsSet(false);
    this._paoId = 0;
    this._paoCategory = null;
    this._paoClass = null;
    this._paoName = null;
    this._paoType = null;
    this._paoDescription = null;
    set_disableFlagIsSet(false);
    this._disableFlag = false;
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public String get_paoCategory() {
    return this._paoCategory;
  }

  public void set_paoCategory(String _paoCategory) {
    this._paoCategory = _paoCategory;
  }

  public void unset_paoCategory() {
    this._paoCategory = null;
  }

  /** Returns true if field _paoCategory is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoCategory() {
    return this._paoCategory != null;
  }

  public void set_paoCategoryIsSet(boolean value) {
    if (!value) {
      this._paoCategory = null;
    }
  }

  public String get_paoClass() {
    return this._paoClass;
  }

  public void set_paoClass(String _paoClass) {
    this._paoClass = _paoClass;
  }

  public void unset_paoClass() {
    this._paoClass = null;
  }

  /** Returns true if field _paoClass is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoClass() {
    return this._paoClass != null;
  }

  public void set_paoClassIsSet(boolean value) {
    if (!value) {
      this._paoClass = null;
    }
  }

  public String get_paoName() {
    return this._paoName;
  }

  public void set_paoName(String _paoName) {
    this._paoName = _paoName;
  }

  public void unset_paoName() {
    this._paoName = null;
  }

  /** Returns true if field _paoName is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoName() {
    return this._paoName != null;
  }

  public void set_paoNameIsSet(boolean value) {
    if (!value) {
      this._paoName = null;
    }
  }

  public String get_paoType() {
    return this._paoType;
  }

  public void set_paoType(String _paoType) {
    this._paoType = _paoType;
  }

  public void unset_paoType() {
    this._paoType = null;
  }

  /** Returns true if field _paoType is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoType() {
    return this._paoType != null;
  }

  public void set_paoTypeIsSet(boolean value) {
    if (!value) {
      this._paoType = null;
    }
  }

  public String get_paoDescription() {
    return this._paoDescription;
  }

  public void set_paoDescription(String _paoDescription) {
    this._paoDescription = _paoDescription;
  }

  public void unset_paoDescription() {
    this._paoDescription = null;
  }

  /** Returns true if field _paoDescription is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoDescription() {
    return this._paoDescription != null;
  }

  public void set_paoDescriptionIsSet(boolean value) {
    if (!value) {
      this._paoDescription = null;
    }
  }

  public boolean is_disableFlag() {
    return this._disableFlag;
  }

  public void set_disableFlag(boolean _disableFlag) {
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
  }

  public void unset_disableFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  /** Returns true if field _disableFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_disableFlag() {
    return EncodingUtils.testBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  public void set_disableFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((Integer)value);
      }
      break;

    case _PAO_CATEGORY:
      if (value == null) {
        unset_paoCategory();
      } else {
        set_paoCategory((String)value);
      }
      break;

    case _PAO_CLASS:
      if (value == null) {
        unset_paoClass();
      } else {
        set_paoClass((String)value);
      }
      break;

    case _PAO_NAME:
      if (value == null) {
        unset_paoName();
      } else {
        set_paoName((String)value);
      }
      break;

    case _PAO_TYPE:
      if (value == null) {
        unset_paoType();
      } else {
        set_paoType((String)value);
      }
      break;

    case _PAO_DESCRIPTION:
      if (value == null) {
        unset_paoDescription();
      } else {
        set_paoDescription((String)value);
      }
      break;

    case _DISABLE_FLAG:
      if (value == null) {
        unset_disableFlag();
      } else {
        set_disableFlag((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _PAO_ID:
      return Integer.valueOf(get_paoId());

    case _PAO_CATEGORY:
      return get_paoCategory();

    case _PAO_CLASS:
      return get_paoClass();

    case _PAO_NAME:
      return get_paoName();

    case _PAO_TYPE:
      return get_paoType();

    case _PAO_DESCRIPTION:
      return get_paoDescription();

    case _DISABLE_FLAG:
      return Boolean.valueOf(is_disableFlag());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _PAO_ID:
      return isSet_paoId();
    case _PAO_CATEGORY:
      return isSet_paoCategory();
    case _PAO_CLASS:
      return isSet_paoClass();
    case _PAO_NAME:
      return isSet_paoName();
    case _PAO_TYPE:
      return isSet_paoType();
    case _PAO_DESCRIPTION:
      return isSet_paoDescription();
    case _DISABLE_FLAG:
      return isSet_disableFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CCPao)
      return this.equals((CCPao)that);
    return false;
  }

  public boolean equals(CCPao that) {
    if (that == null)
      return false;

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__paoCategory = true && this.isSet_paoCategory();
    boolean that_present__paoCategory = true && that.isSet_paoCategory();
    if (this_present__paoCategory || that_present__paoCategory) {
      if (!(this_present__paoCategory && that_present__paoCategory))
        return false;
      if (!this._paoCategory.equals(that._paoCategory))
        return false;
    }

    boolean this_present__paoClass = true && this.isSet_paoClass();
    boolean that_present__paoClass = true && that.isSet_paoClass();
    if (this_present__paoClass || that_present__paoClass) {
      if (!(this_present__paoClass && that_present__paoClass))
        return false;
      if (!this._paoClass.equals(that._paoClass))
        return false;
    }

    boolean this_present__paoName = true && this.isSet_paoName();
    boolean that_present__paoName = true && that.isSet_paoName();
    if (this_present__paoName || that_present__paoName) {
      if (!(this_present__paoName && that_present__paoName))
        return false;
      if (!this._paoName.equals(that._paoName))
        return false;
    }

    boolean this_present__paoType = true && this.isSet_paoType();
    boolean that_present__paoType = true && that.isSet_paoType();
    if (this_present__paoType || that_present__paoType) {
      if (!(this_present__paoType && that_present__paoType))
        return false;
      if (!this._paoType.equals(that._paoType))
        return false;
    }

    boolean this_present__paoDescription = true && this.isSet_paoDescription();
    boolean that_present__paoDescription = true && that.isSet_paoDescription();
    if (this_present__paoDescription || that_present__paoDescription) {
      if (!(this_present__paoDescription && that_present__paoDescription))
        return false;
      if (!this._paoDescription.equals(that._paoDescription))
        return false;
    }

    boolean this_present__disableFlag = true;
    boolean that_present__disableFlag = true;
    if (this_present__disableFlag || that_present__disableFlag) {
      if (!(this_present__disableFlag && that_present__disableFlag))
        return false;
      if (this._disableFlag != that._disableFlag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CCPao other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CCPao typedOther = (CCPao)other;

    lastComparison = Boolean.valueOf(isSet_paoId()).compareTo(typedOther.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, typedOther._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_paoCategory()).compareTo(typedOther.isSet_paoCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoCategory, typedOther._paoCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_paoClass()).compareTo(typedOther.isSet_paoClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoClass, typedOther._paoClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_paoName()).compareTo(typedOther.isSet_paoName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoName, typedOther._paoName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_paoType()).compareTo(typedOther.isSet_paoType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoType, typedOther._paoType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_paoDescription()).compareTo(typedOther.isSet_paoDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoDescription, typedOther._paoDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_disableFlag()).compareTo(typedOther.isSet_disableFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_disableFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._disableFlag, typedOther._disableFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CCPao(");
    boolean first = true;

    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoCategory:");
    if (this._paoCategory == null) {
      sb.append("null");
    } else {
      sb.append(this._paoCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoClass:");
    if (this._paoClass == null) {
      sb.append("null");
    } else {
      sb.append(this._paoClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoName:");
    if (this._paoName == null) {
      sb.append("null");
    } else {
      sb.append(this._paoName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoType:");
    if (this._paoType == null) {
      sb.append("null");
    } else {
      sb.append(this._paoType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_paoDescription:");
    if (this._paoDescription == null) {
      sb.append("null");
    } else {
      sb.append(this._paoDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_disableFlag:");
    sb.append(this._disableFlag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_paoCategory()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoCategory' is unset! Struct:" + toString());
    }

    if (!isSet_paoClass()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoClass' is unset! Struct:" + toString());
    }

    if (!isSet_paoName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoName' is unset! Struct:" + toString());
    }

    if (!isSet_paoType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoType' is unset! Struct:" + toString());
    }

    if (!isSet_paoDescription()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoDescription' is unset! Struct:" + toString());
    }

    if (!isSet_disableFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_disableFlag' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CCPaoStandardSchemeFactory implements SchemeFactory {
    public CCPaoStandardScheme getScheme() {
      return new CCPaoStandardScheme();
    }
  }

  private static class CCPaoStandardScheme extends StandardScheme<CCPao> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CCPao struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _PAO_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoCategory = iprot.readString();
              struct.set_paoCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _PAO_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoClass = iprot.readString();
              struct.set_paoClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _PAO_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoName = iprot.readString();
              struct.set_paoNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _PAO_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoType = iprot.readString();
              struct.set_paoTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _PAO_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._paoDescription = iprot.readString();
              struct.set_paoDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _DISABLE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._disableFlag = iprot.readBool();
              struct.set_disableFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CCPao struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      if (struct._paoCategory != null) {
        oprot.writeFieldBegin(_PAO_CATEGORY_FIELD_DESC);
        oprot.writeString(struct._paoCategory);
        oprot.writeFieldEnd();
      }
      if (struct._paoClass != null) {
        oprot.writeFieldBegin(_PAO_CLASS_FIELD_DESC);
        oprot.writeString(struct._paoClass);
        oprot.writeFieldEnd();
      }
      if (struct._paoName != null) {
        oprot.writeFieldBegin(_PAO_NAME_FIELD_DESC);
        oprot.writeString(struct._paoName);
        oprot.writeFieldEnd();
      }
      if (struct._paoType != null) {
        oprot.writeFieldBegin(_PAO_TYPE_FIELD_DESC);
        oprot.writeString(struct._paoType);
        oprot.writeFieldEnd();
      }
      if (struct._paoDescription != null) {
        oprot.writeFieldBegin(_PAO_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct._paoDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_DISABLE_FLAG_FIELD_DESC);
      oprot.writeBool(struct._disableFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CCPaoTupleSchemeFactory implements SchemeFactory {
    public CCPaoTupleScheme getScheme() {
      return new CCPaoTupleScheme();
    }
  }

  private static class CCPaoTupleScheme extends TupleScheme<CCPao> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CCPao struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct._paoId);
      oprot.writeString(struct._paoCategory);
      oprot.writeString(struct._paoClass);
      oprot.writeString(struct._paoName);
      oprot.writeString(struct._paoType);
      oprot.writeString(struct._paoDescription);
      oprot.writeBool(struct._disableFlag);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CCPao struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._paoCategory = iprot.readString();
      struct.set_paoCategoryIsSet(true);
      struct._paoClass = iprot.readString();
      struct.set_paoClassIsSet(true);
      struct._paoName = iprot.readString();
      struct.set_paoNameIsSet(true);
      struct._paoType = iprot.readString();
      struct.set_paoTypeIsSet(true);
      struct._paoDescription = iprot.readString();
      struct.set_paoDescriptionIsSet(true);
      struct._disableFlag = iprot.readBool();
      struct.set_disableFlagIsSet(true);
    }
  }

}


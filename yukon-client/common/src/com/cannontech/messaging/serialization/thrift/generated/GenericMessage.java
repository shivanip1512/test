/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-05-31")
public class GenericMessage implements org.apache.thrift.TBase<GenericMessage, GenericMessage._Fields>, java.io.Serializable, Cloneable, Comparable<GenericMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GenericMessage");

  private static final org.apache.thrift.protocol.TField _MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_messageType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField _PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("_payload", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GenericMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GenericMessageTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String _messageType; // required
  private @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _payload; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _MESSAGE_TYPE((short)1, "_messageType"),
    _PAYLOAD((short)2, "_payload");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _MESSAGE_TYPE
          return _MESSAGE_TYPE;
        case 2: // _PAYLOAD
          return _PAYLOAD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_messageType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("_payload", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GenericMessage.class, metaDataMap);
  }

  public GenericMessage() {
  }

  public GenericMessage(
    java.lang.String _messageType,
    java.nio.ByteBuffer _payload)
  {
    this();
    this._messageType = _messageType;
    this._payload = org.apache.thrift.TBaseHelper.copyBinary(_payload);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GenericMessage(GenericMessage other) {
    if (other.isSet_messageType()) {
      this._messageType = other._messageType;
    }
    if (other.isSet_payload()) {
      this._payload = org.apache.thrift.TBaseHelper.copyBinary(other._payload);
    }
  }

  public GenericMessage deepCopy() {
    return new GenericMessage(this);
  }

  @Override
  public void clear() {
    this._messageType = null;
    this._payload = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_messageType() {
    return this._messageType;
  }

  public void set_messageType(@org.apache.thrift.annotation.Nullable java.lang.String _messageType) {
    this._messageType = _messageType;
  }

  public void unset_messageType() {
    this._messageType = null;
  }

  /** Returns true if field _messageType is set (has been assigned a value) and false otherwise */
  public boolean isSet_messageType() {
    return this._messageType != null;
  }

  public void set_messageTypeIsSet(boolean value) {
    if (!value) {
      this._messageType = null;
    }
  }

  public byte[] get_payload() {
    set_payload(org.apache.thrift.TBaseHelper.rightSize(_payload));
    return _payload == null ? null : _payload.array();
  }

  public java.nio.ByteBuffer bufferFor_payload() {
    return org.apache.thrift.TBaseHelper.copyBinary(_payload);
  }

  public void set_payload(byte[] _payload) {
    this._payload = _payload == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(_payload.clone());
  }

  public void set_payload(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _payload) {
    this._payload = org.apache.thrift.TBaseHelper.copyBinary(_payload);
  }

  public void unset_payload() {
    this._payload = null;
  }

  /** Returns true if field _payload is set (has been assigned a value) and false otherwise */
  public boolean isSet_payload() {
    return this._payload != null;
  }

  public void set_payloadIsSet(boolean value) {
    if (!value) {
      this._payload = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _MESSAGE_TYPE:
      if (value == null) {
        unset_messageType();
      } else {
        set_messageType((java.lang.String)value);
      }
      break;

    case _PAYLOAD:
      if (value == null) {
        unset_payload();
      } else {
        if (value instanceof byte[]) {
          set_payload((byte[])value);
        } else {
          set_payload((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _MESSAGE_TYPE:
      return get_messageType();

    case _PAYLOAD:
      return get_payload();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _MESSAGE_TYPE:
      return isSet_messageType();
    case _PAYLOAD:
      return isSet_payload();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof GenericMessage)
      return this.equals((GenericMessage)that);
    return false;
  }

  public boolean equals(GenericMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__messageType = true && this.isSet_messageType();
    boolean that_present__messageType = true && that.isSet_messageType();
    if (this_present__messageType || that_present__messageType) {
      if (!(this_present__messageType && that_present__messageType))
        return false;
      if (!this._messageType.equals(that._messageType))
        return false;
    }

    boolean this_present__payload = true && this.isSet_payload();
    boolean that_present__payload = true && that.isSet_payload();
    if (this_present__payload || that_present__payload) {
      if (!(this_present__payload && that_present__payload))
        return false;
      if (!this._payload.equals(that._payload))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_messageType()) ? 131071 : 524287);
    if (isSet_messageType())
      hashCode = hashCode * 8191 + _messageType.hashCode();

    hashCode = hashCode * 8191 + ((isSet_payload()) ? 131071 : 524287);
    if (isSet_payload())
      hashCode = hashCode * 8191 + _payload.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GenericMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSet_messageType(), other.isSet_messageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_messageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._messageType, other._messageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_payload(), other.isSet_payload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_payload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._payload, other._payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GenericMessage(");
    boolean first = true;

    sb.append("_messageType:");
    if (this._messageType == null) {
      sb.append("null");
    } else {
      sb.append(this._messageType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_payload:");
    if (this._payload == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this._payload, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_messageType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_messageType' is unset! Struct:" + toString());
    }

    if (!isSet_payload()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_payload' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GenericMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GenericMessageStandardScheme getScheme() {
      return new GenericMessageStandardScheme();
    }
  }

  private static class GenericMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<GenericMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GenericMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _MESSAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._messageType = iprot.readString();
              struct.set_messageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._payload = iprot.readBinary();
              struct.set_payloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GenericMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._messageType != null) {
        oprot.writeFieldBegin(_MESSAGE_TYPE_FIELD_DESC);
        oprot.writeString(struct._messageType);
        oprot.writeFieldEnd();
      }
      if (struct._payload != null) {
        oprot.writeFieldBegin(_PAYLOAD_FIELD_DESC);
        oprot.writeBinary(struct._payload);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GenericMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GenericMessageTupleScheme getScheme() {
      return new GenericMessageTupleScheme();
    }
  }

  private static class GenericMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<GenericMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GenericMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct._messageType);
      oprot.writeBinary(struct._payload);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GenericMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._messageType = iprot.readString();
      struct.set_messageTypeIsSet(true);
      struct._payload = iprot.readBinary();
      struct.set_payloadIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RfnSetChannelConfigRequest implements org.apache.thrift.TBase<RfnSetChannelConfigRequest, RfnSetChannelConfigRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RfnSetChannelConfigRequest");

  private static final org.apache.thrift.protocol.TField RFN_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("rfnIdentifier", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField REPORTING_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("reportingInterval", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECORDING_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("recordingInterval", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RfnSetChannelConfigRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RfnSetChannelConfigRequestTupleSchemeFactory());
  }

  private com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier rfnIdentifier; // required
  private int reportingInterval; // required
  private int recordingInterval; // required
  private com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader header; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RFN_IDENTIFIER((short)1, "rfnIdentifier"),
    REPORTING_INTERVAL((short)2, "reportingInterval"),
    RECORDING_INTERVAL((short)3, "recordingInterval"),
    HEADER((short)4, "header");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RFN_IDENTIFIER
          return RFN_IDENTIFIER;
        case 2: // REPORTING_INTERVAL
          return REPORTING_INTERVAL;
        case 3: // RECORDING_INTERVAL
          return RECORDING_INTERVAL;
        case 4: // HEADER
          return HEADER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPORTINGINTERVAL_ISSET_ID = 0;
  private static final int __RECORDINGINTERVAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HEADER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RFN_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("rfnIdentifier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier.class)));
    tmpMap.put(_Fields.REPORTING_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("reportingInterval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORDING_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("recordingInterval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RfnSetChannelConfigRequest.class, metaDataMap);
  }

  public RfnSetChannelConfigRequest() {
  }

  public RfnSetChannelConfigRequest(
    com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier rfnIdentifier,
    int reportingInterval,
    int recordingInterval)
  {
    this();
    this.rfnIdentifier = rfnIdentifier;
    this.reportingInterval = reportingInterval;
    setReportingIntervalIsSet(true);
    this.recordingInterval = recordingInterval;
    setRecordingIntervalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RfnSetChannelConfigRequest(RfnSetChannelConfigRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRfnIdentifier()) {
      this.rfnIdentifier = new com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier(other.rfnIdentifier);
    }
    this.reportingInterval = other.reportingInterval;
    this.recordingInterval = other.recordingInterval;
    if (other.isSetHeader()) {
      this.header = new com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader(other.header);
    }
  }

  public RfnSetChannelConfigRequest deepCopy() {
    return new RfnSetChannelConfigRequest(this);
  }

  @Override
  public void clear() {
    this.rfnIdentifier = null;
    setReportingIntervalIsSet(false);
    this.reportingInterval = 0;
    setRecordingIntervalIsSet(false);
    this.recordingInterval = 0;
    this.header = null;
  }

  public com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier getRfnIdentifier() {
    return this.rfnIdentifier;
  }

  public void setRfnIdentifier(com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier rfnIdentifier) {
    this.rfnIdentifier = rfnIdentifier;
  }

  public void unsetRfnIdentifier() {
    this.rfnIdentifier = null;
  }

  /** Returns true if field rfnIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetRfnIdentifier() {
    return this.rfnIdentifier != null;
  }

  public void setRfnIdentifierIsSet(boolean value) {
    if (!value) {
      this.rfnIdentifier = null;
    }
  }

  public int getReportingInterval() {
    return this.reportingInterval;
  }

  public void setReportingInterval(int reportingInterval) {
    this.reportingInterval = reportingInterval;
    setReportingIntervalIsSet(true);
  }

  public void unsetReportingInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTINGINTERVAL_ISSET_ID);
  }

  /** Returns true if field reportingInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetReportingInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORTINGINTERVAL_ISSET_ID);
  }

  public void setReportingIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTINGINTERVAL_ISSET_ID, value);
  }

  public int getRecordingInterval() {
    return this.recordingInterval;
  }

  public void setRecordingInterval(int recordingInterval) {
    this.recordingInterval = recordingInterval;
    setRecordingIntervalIsSet(true);
  }

  public void unsetRecordingInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDINGINTERVAL_ISSET_ID);
  }

  /** Returns true if field recordingInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordingInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDINGINTERVAL_ISSET_ID);
  }

  public void setRecordingIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDINGINTERVAL_ISSET_ID, value);
  }

  public com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader getHeader() {
    return this.header;
  }

  public void setHeader(com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader header) {
    this.header = header;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RFN_IDENTIFIER:
      if (value == null) {
        unsetRfnIdentifier();
      } else {
        setRfnIdentifier((com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier)value);
      }
      break;

    case REPORTING_INTERVAL:
      if (value == null) {
        unsetReportingInterval();
      } else {
        setReportingInterval((Integer)value);
      }
      break;

    case RECORDING_INTERVAL:
      if (value == null) {
        unsetRecordingInterval();
      } else {
        setRecordingInterval((Integer)value);
      }
      break;

    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RFN_IDENTIFIER:
      return getRfnIdentifier();

    case REPORTING_INTERVAL:
      return Integer.valueOf(getReportingInterval());

    case RECORDING_INTERVAL:
      return Integer.valueOf(getRecordingInterval());

    case HEADER:
      return getHeader();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RFN_IDENTIFIER:
      return isSetRfnIdentifier();
    case REPORTING_INTERVAL:
      return isSetReportingInterval();
    case RECORDING_INTERVAL:
      return isSetRecordingInterval();
    case HEADER:
      return isSetHeader();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RfnSetChannelConfigRequest)
      return this.equals((RfnSetChannelConfigRequest)that);
    return false;
  }

  public boolean equals(RfnSetChannelConfigRequest that) {
    if (that == null)
      return false;

    boolean this_present_rfnIdentifier = true && this.isSetRfnIdentifier();
    boolean that_present_rfnIdentifier = true && that.isSetRfnIdentifier();
    if (this_present_rfnIdentifier || that_present_rfnIdentifier) {
      if (!(this_present_rfnIdentifier && that_present_rfnIdentifier))
        return false;
      if (!this.rfnIdentifier.equals(that.rfnIdentifier))
        return false;
    }

    boolean this_present_reportingInterval = true;
    boolean that_present_reportingInterval = true;
    if (this_present_reportingInterval || that_present_reportingInterval) {
      if (!(this_present_reportingInterval && that_present_reportingInterval))
        return false;
      if (this.reportingInterval != that.reportingInterval)
        return false;
    }

    boolean this_present_recordingInterval = true;
    boolean that_present_recordingInterval = true;
    if (this_present_recordingInterval || that_present_recordingInterval) {
      if (!(this_present_recordingInterval && that_present_recordingInterval))
        return false;
      if (this.recordingInterval != that.recordingInterval)
        return false;
    }

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RfnSetChannelConfigRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RfnSetChannelConfigRequest typedOther = (RfnSetChannelConfigRequest)other;

    lastComparison = Boolean.valueOf(isSetRfnIdentifier()).compareTo(typedOther.isSetRfnIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRfnIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rfnIdentifier, typedOther.rfnIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportingInterval()).compareTo(typedOther.isSetReportingInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportingInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportingInterval, typedOther.reportingInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordingInterval()).compareTo(typedOther.isSetRecordingInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordingInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordingInterval, typedOther.recordingInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(typedOther.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, typedOther.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RfnSetChannelConfigRequest(");
    boolean first = true;

    sb.append("rfnIdentifier:");
    if (this.rfnIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.rfnIdentifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportingInterval:");
    sb.append(this.reportingInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordingInterval:");
    sb.append(this.recordingInterval);
    first = false;
    if (isSetHeader()) {
      if (!first) sb.append(", ");
      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetRfnIdentifier()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rfnIdentifier' is unset! Struct:" + toString());
    }

    if (!isSetReportingInterval()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reportingInterval' is unset! Struct:" + toString());
    }

    if (!isSetRecordingInterval()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recordingInterval' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (rfnIdentifier != null) {
      rfnIdentifier.validate();
    }
    if (header != null) {
      header.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RfnSetChannelConfigRequestStandardSchemeFactory implements SchemeFactory {
    public RfnSetChannelConfigRequestStandardScheme getScheme() {
      return new RfnSetChannelConfigRequestStandardScheme();
    }
  }

  private static class RfnSetChannelConfigRequestStandardScheme extends StandardScheme<RfnSetChannelConfigRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RfnSetChannelConfigRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RFN_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rfnIdentifier = new com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier();
              struct.rfnIdentifier.read(iprot);
              struct.setRfnIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPORTING_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportingInterval = iprot.readI32();
              struct.setReportingIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECORDING_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordingInterval = iprot.readI32();
              struct.setRecordingIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RfnSetChannelConfigRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rfnIdentifier != null) {
        oprot.writeFieldBegin(RFN_IDENTIFIER_FIELD_DESC);
        struct.rfnIdentifier.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPORTING_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.reportingInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORDING_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.recordingInterval);
      oprot.writeFieldEnd();
      if (struct.header != null) {
        if (struct.isSetHeader()) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RfnSetChannelConfigRequestTupleSchemeFactory implements SchemeFactory {
    public RfnSetChannelConfigRequestTupleScheme getScheme() {
      return new RfnSetChannelConfigRequestTupleScheme();
    }
  }

  private static class RfnSetChannelConfigRequestTupleScheme extends TupleScheme<RfnSetChannelConfigRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RfnSetChannelConfigRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.rfnIdentifier.write(oprot);
      oprot.writeI32(struct.reportingInterval);
      oprot.writeI32(struct.recordingInterval);
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RfnSetChannelConfigRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.rfnIdentifier = new com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier();
      struct.rfnIdentifier.read(iprot);
      struct.setRfnIdentifierIsSet(true);
      struct.reportingInterval = iprot.readI32();
      struct.setReportingIntervalIsSet(true);
      struct.recordingInterval = iprot.readI32();
      struct.setRecordingIntervalIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.header = new com.cannontech.messaging.serialization.thrift.generated.NetworkManagerRequestHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
    }
  }

}


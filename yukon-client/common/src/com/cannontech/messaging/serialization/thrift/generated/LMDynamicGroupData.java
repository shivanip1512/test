/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-27")
public class LMDynamicGroupData implements org.apache.thrift.TBase<LMDynamicGroupData, LMDynamicGroupData._Fields>, java.io.Serializable, Cloneable, Comparable<LMDynamicGroupData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMDynamicGroupData");

  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _DISABLE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_disableFlag", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField _GROUP_CONTROL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupControlState", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _CURRENT_HOURS_DAILY_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentHoursDaily", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _CURRENT_HOURS_MONTHLY_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentHoursMonthly", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField _CURRENT_HOURS_SEASONAL_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentHoursSeasonal", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField _CURRENT_HOURS_ANNUALLY_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentHoursAnnually", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField _LAST_CONTROL_SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastControlSent", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField _CONTROL_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlStartTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField _CONTROL_COMPLETE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlCompleteTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField _NEXT_CONTROL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_nextControlTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField _INTERNAL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_internalState", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField _DAILY_OPS_FIELD_DESC = new org.apache.thrift.protocol.TField("_dailyOps", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LMDynamicGroupDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LMDynamicGroupDataTupleSchemeFactory();

  private int _paoId; // required
  private boolean _disableFlag; // required
  private int _groupControlState; // required
  private int _currentHoursDaily; // required
  private int _currentHoursMonthly; // required
  private int _currentHoursSeasonal; // required
  private int _currentHoursAnnually; // required
  private long _lastControlSent; // required
  private long _controlStartTime; // required
  private long _controlCompleteTime; // required
  private long _nextControlTime; // required
  private int _internalState; // required
  private int _dailyOps; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PAO_ID((short)1, "_paoId"),
    _DISABLE_FLAG((short)2, "_disableFlag"),
    _GROUP_CONTROL_STATE((short)3, "_groupControlState"),
    _CURRENT_HOURS_DAILY((short)4, "_currentHoursDaily"),
    _CURRENT_HOURS_MONTHLY((short)5, "_currentHoursMonthly"),
    _CURRENT_HOURS_SEASONAL((short)6, "_currentHoursSeasonal"),
    _CURRENT_HOURS_ANNUALLY((short)7, "_currentHoursAnnually"),
    _LAST_CONTROL_SENT((short)8, "_lastControlSent"),
    _CONTROL_START_TIME((short)9, "_controlStartTime"),
    _CONTROL_COMPLETE_TIME((short)10, "_controlCompleteTime"),
    _NEXT_CONTROL_TIME((short)11, "_nextControlTime"),
    _INTERNAL_STATE((short)12, "_internalState"),
    _DAILY_OPS((short)13, "_dailyOps");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PAO_ID
          return _PAO_ID;
        case 2: // _DISABLE_FLAG
          return _DISABLE_FLAG;
        case 3: // _GROUP_CONTROL_STATE
          return _GROUP_CONTROL_STATE;
        case 4: // _CURRENT_HOURS_DAILY
          return _CURRENT_HOURS_DAILY;
        case 5: // _CURRENT_HOURS_MONTHLY
          return _CURRENT_HOURS_MONTHLY;
        case 6: // _CURRENT_HOURS_SEASONAL
          return _CURRENT_HOURS_SEASONAL;
        case 7: // _CURRENT_HOURS_ANNUALLY
          return _CURRENT_HOURS_ANNUALLY;
        case 8: // _LAST_CONTROL_SENT
          return _LAST_CONTROL_SENT;
        case 9: // _CONTROL_START_TIME
          return _CONTROL_START_TIME;
        case 10: // _CONTROL_COMPLETE_TIME
          return _CONTROL_COMPLETE_TIME;
        case 11: // _NEXT_CONTROL_TIME
          return _NEXT_CONTROL_TIME;
        case 12: // _INTERNAL_STATE
          return _INTERNAL_STATE;
        case 13: // _DAILY_OPS
          return _DAILY_OPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___DISABLEFLAG_ISSET_ID = 1;
  private static final int ___GROUPCONTROLSTATE_ISSET_ID = 2;
  private static final int ___CURRENTHOURSDAILY_ISSET_ID = 3;
  private static final int ___CURRENTHOURSMONTHLY_ISSET_ID = 4;
  private static final int ___CURRENTHOURSSEASONAL_ISSET_ID = 5;
  private static final int ___CURRENTHOURSANNUALLY_ISSET_ID = 6;
  private static final int ___LASTCONTROLSENT_ISSET_ID = 7;
  private static final int ___CONTROLSTARTTIME_ISSET_ID = 8;
  private static final int ___CONTROLCOMPLETETIME_ISSET_ID = 9;
  private static final int ___NEXTCONTROLTIME_ISSET_ID = 10;
  private static final int ___INTERNALSTATE_ISSET_ID = 11;
  private static final int ___DAILYOPS_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._DISABLE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_disableFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._GROUP_CONTROL_STATE, new org.apache.thrift.meta_data.FieldMetaData("_groupControlState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_HOURS_DAILY, new org.apache.thrift.meta_data.FieldMetaData("_currentHoursDaily", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_HOURS_MONTHLY, new org.apache.thrift.meta_data.FieldMetaData("_currentHoursMonthly", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_HOURS_SEASONAL, new org.apache.thrift.meta_data.FieldMetaData("_currentHoursSeasonal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_HOURS_ANNUALLY, new org.apache.thrift.meta_data.FieldMetaData("_currentHoursAnnually", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._LAST_CONTROL_SENT, new org.apache.thrift.meta_data.FieldMetaData("_lastControlSent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._CONTROL_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("_controlStartTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._CONTROL_COMPLETE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_controlCompleteTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._NEXT_CONTROL_TIME, new org.apache.thrift.meta_data.FieldMetaData("_nextControlTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._INTERNAL_STATE, new org.apache.thrift.meta_data.FieldMetaData("_internalState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._DAILY_OPS, new org.apache.thrift.meta_data.FieldMetaData("_dailyOps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMDynamicGroupData.class, metaDataMap);
  }

  public LMDynamicGroupData() {
  }

  public LMDynamicGroupData(
    int _paoId,
    boolean _disableFlag,
    int _groupControlState,
    int _currentHoursDaily,
    int _currentHoursMonthly,
    int _currentHoursSeasonal,
    int _currentHoursAnnually,
    long _lastControlSent,
    long _controlStartTime,
    long _controlCompleteTime,
    long _nextControlTime,
    int _internalState,
    int _dailyOps)
  {
    this();
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
    this._groupControlState = _groupControlState;
    set_groupControlStateIsSet(true);
    this._currentHoursDaily = _currentHoursDaily;
    set_currentHoursDailyIsSet(true);
    this._currentHoursMonthly = _currentHoursMonthly;
    set_currentHoursMonthlyIsSet(true);
    this._currentHoursSeasonal = _currentHoursSeasonal;
    set_currentHoursSeasonalIsSet(true);
    this._currentHoursAnnually = _currentHoursAnnually;
    set_currentHoursAnnuallyIsSet(true);
    this._lastControlSent = _lastControlSent;
    set_lastControlSentIsSet(true);
    this._controlStartTime = _controlStartTime;
    set_controlStartTimeIsSet(true);
    this._controlCompleteTime = _controlCompleteTime;
    set_controlCompleteTimeIsSet(true);
    this._nextControlTime = _nextControlTime;
    set_nextControlTimeIsSet(true);
    this._internalState = _internalState;
    set_internalStateIsSet(true);
    this._dailyOps = _dailyOps;
    set_dailyOpsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMDynamicGroupData(LMDynamicGroupData other) {
    __isset_bitfield = other.__isset_bitfield;
    this._paoId = other._paoId;
    this._disableFlag = other._disableFlag;
    this._groupControlState = other._groupControlState;
    this._currentHoursDaily = other._currentHoursDaily;
    this._currentHoursMonthly = other._currentHoursMonthly;
    this._currentHoursSeasonal = other._currentHoursSeasonal;
    this._currentHoursAnnually = other._currentHoursAnnually;
    this._lastControlSent = other._lastControlSent;
    this._controlStartTime = other._controlStartTime;
    this._controlCompleteTime = other._controlCompleteTime;
    this._nextControlTime = other._nextControlTime;
    this._internalState = other._internalState;
    this._dailyOps = other._dailyOps;
  }

  public LMDynamicGroupData deepCopy() {
    return new LMDynamicGroupData(this);
  }

  @Override
  public void clear() {
    set_paoIdIsSet(false);
    this._paoId = 0;
    set_disableFlagIsSet(false);
    this._disableFlag = false;
    set_groupControlStateIsSet(false);
    this._groupControlState = 0;
    set_currentHoursDailyIsSet(false);
    this._currentHoursDaily = 0;
    set_currentHoursMonthlyIsSet(false);
    this._currentHoursMonthly = 0;
    set_currentHoursSeasonalIsSet(false);
    this._currentHoursSeasonal = 0;
    set_currentHoursAnnuallyIsSet(false);
    this._currentHoursAnnually = 0;
    set_lastControlSentIsSet(false);
    this._lastControlSent = 0;
    set_controlStartTimeIsSet(false);
    this._controlStartTime = 0;
    set_controlCompleteTimeIsSet(false);
    this._controlCompleteTime = 0;
    set_nextControlTimeIsSet(false);
    this._nextControlTime = 0;
    set_internalStateIsSet(false);
    this._internalState = 0;
    set_dailyOpsIsSet(false);
    this._dailyOps = 0;
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public boolean is_disableFlag() {
    return this._disableFlag;
  }

  public void set_disableFlag(boolean _disableFlag) {
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
  }

  public void unset_disableFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  /** Returns true if field _disableFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_disableFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  public void set_disableFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID, value);
  }

  public int get_groupControlState() {
    return this._groupControlState;
  }

  public void set_groupControlState(int _groupControlState) {
    this._groupControlState = _groupControlState;
    set_groupControlStateIsSet(true);
  }

  public void unset_groupControlState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___GROUPCONTROLSTATE_ISSET_ID);
  }

  /** Returns true if field _groupControlState is set (has been assigned a value) and false otherwise */
  public boolean isSet_groupControlState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___GROUPCONTROLSTATE_ISSET_ID);
  }

  public void set_groupControlStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___GROUPCONTROLSTATE_ISSET_ID, value);
  }

  public int get_currentHoursDaily() {
    return this._currentHoursDaily;
  }

  public void set_currentHoursDaily(int _currentHoursDaily) {
    this._currentHoursDaily = _currentHoursDaily;
    set_currentHoursDailyIsSet(true);
  }

  public void unset_currentHoursDaily() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTHOURSDAILY_ISSET_ID);
  }

  /** Returns true if field _currentHoursDaily is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentHoursDaily() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTHOURSDAILY_ISSET_ID);
  }

  public void set_currentHoursDailyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTHOURSDAILY_ISSET_ID, value);
  }

  public int get_currentHoursMonthly() {
    return this._currentHoursMonthly;
  }

  public void set_currentHoursMonthly(int _currentHoursMonthly) {
    this._currentHoursMonthly = _currentHoursMonthly;
    set_currentHoursMonthlyIsSet(true);
  }

  public void unset_currentHoursMonthly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTHOURSMONTHLY_ISSET_ID);
  }

  /** Returns true if field _currentHoursMonthly is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentHoursMonthly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTHOURSMONTHLY_ISSET_ID);
  }

  public void set_currentHoursMonthlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTHOURSMONTHLY_ISSET_ID, value);
  }

  public int get_currentHoursSeasonal() {
    return this._currentHoursSeasonal;
  }

  public void set_currentHoursSeasonal(int _currentHoursSeasonal) {
    this._currentHoursSeasonal = _currentHoursSeasonal;
    set_currentHoursSeasonalIsSet(true);
  }

  public void unset_currentHoursSeasonal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTHOURSSEASONAL_ISSET_ID);
  }

  /** Returns true if field _currentHoursSeasonal is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentHoursSeasonal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTHOURSSEASONAL_ISSET_ID);
  }

  public void set_currentHoursSeasonalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTHOURSSEASONAL_ISSET_ID, value);
  }

  public int get_currentHoursAnnually() {
    return this._currentHoursAnnually;
  }

  public void set_currentHoursAnnually(int _currentHoursAnnually) {
    this._currentHoursAnnually = _currentHoursAnnually;
    set_currentHoursAnnuallyIsSet(true);
  }

  public void unset_currentHoursAnnually() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTHOURSANNUALLY_ISSET_ID);
  }

  /** Returns true if field _currentHoursAnnually is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentHoursAnnually() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTHOURSANNUALLY_ISSET_ID);
  }

  public void set_currentHoursAnnuallyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTHOURSANNUALLY_ISSET_ID, value);
  }

  public long get_lastControlSent() {
    return this._lastControlSent;
  }

  public void set_lastControlSent(long _lastControlSent) {
    this._lastControlSent = _lastControlSent;
    set_lastControlSentIsSet(true);
  }

  public void unset_lastControlSent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTCONTROLSENT_ISSET_ID);
  }

  /** Returns true if field _lastControlSent is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastControlSent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTCONTROLSENT_ISSET_ID);
  }

  public void set_lastControlSentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTCONTROLSENT_ISSET_ID, value);
  }

  public long get_controlStartTime() {
    return this._controlStartTime;
  }

  public void set_controlStartTime(long _controlStartTime) {
    this._controlStartTime = _controlStartTime;
    set_controlStartTimeIsSet(true);
  }

  public void unset_controlStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLSTARTTIME_ISSET_ID);
  }

  /** Returns true if field _controlStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLSTARTTIME_ISSET_ID);
  }

  public void set_controlStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLSTARTTIME_ISSET_ID, value);
  }

  public long get_controlCompleteTime() {
    return this._controlCompleteTime;
  }

  public void set_controlCompleteTime(long _controlCompleteTime) {
    this._controlCompleteTime = _controlCompleteTime;
    set_controlCompleteTimeIsSet(true);
  }

  public void unset_controlCompleteTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLCOMPLETETIME_ISSET_ID);
  }

  /** Returns true if field _controlCompleteTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlCompleteTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLCOMPLETETIME_ISSET_ID);
  }

  public void set_controlCompleteTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLCOMPLETETIME_ISSET_ID, value);
  }

  public long get_nextControlTime() {
    return this._nextControlTime;
  }

  public void set_nextControlTime(long _nextControlTime) {
    this._nextControlTime = _nextControlTime;
    set_nextControlTimeIsSet(true);
  }

  public void unset_nextControlTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___NEXTCONTROLTIME_ISSET_ID);
  }

  /** Returns true if field _nextControlTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_nextControlTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___NEXTCONTROLTIME_ISSET_ID);
  }

  public void set_nextControlTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___NEXTCONTROLTIME_ISSET_ID, value);
  }

  public int get_internalState() {
    return this._internalState;
  }

  public void set_internalState(int _internalState) {
    this._internalState = _internalState;
    set_internalStateIsSet(true);
  }

  public void unset_internalState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___INTERNALSTATE_ISSET_ID);
  }

  /** Returns true if field _internalState is set (has been assigned a value) and false otherwise */
  public boolean isSet_internalState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___INTERNALSTATE_ISSET_ID);
  }

  public void set_internalStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___INTERNALSTATE_ISSET_ID, value);
  }

  public int get_dailyOps() {
    return this._dailyOps;
  }

  public void set_dailyOps(int _dailyOps) {
    this._dailyOps = _dailyOps;
    set_dailyOpsIsSet(true);
  }

  public void unset_dailyOps() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DAILYOPS_ISSET_ID);
  }

  /** Returns true if field _dailyOps is set (has been assigned a value) and false otherwise */
  public boolean isSet_dailyOps() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DAILYOPS_ISSET_ID);
  }

  public void set_dailyOpsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DAILYOPS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((java.lang.Integer)value);
      }
      break;

    case _DISABLE_FLAG:
      if (value == null) {
        unset_disableFlag();
      } else {
        set_disableFlag((java.lang.Boolean)value);
      }
      break;

    case _GROUP_CONTROL_STATE:
      if (value == null) {
        unset_groupControlState();
      } else {
        set_groupControlState((java.lang.Integer)value);
      }
      break;

    case _CURRENT_HOURS_DAILY:
      if (value == null) {
        unset_currentHoursDaily();
      } else {
        set_currentHoursDaily((java.lang.Integer)value);
      }
      break;

    case _CURRENT_HOURS_MONTHLY:
      if (value == null) {
        unset_currentHoursMonthly();
      } else {
        set_currentHoursMonthly((java.lang.Integer)value);
      }
      break;

    case _CURRENT_HOURS_SEASONAL:
      if (value == null) {
        unset_currentHoursSeasonal();
      } else {
        set_currentHoursSeasonal((java.lang.Integer)value);
      }
      break;

    case _CURRENT_HOURS_ANNUALLY:
      if (value == null) {
        unset_currentHoursAnnually();
      } else {
        set_currentHoursAnnually((java.lang.Integer)value);
      }
      break;

    case _LAST_CONTROL_SENT:
      if (value == null) {
        unset_lastControlSent();
      } else {
        set_lastControlSent((java.lang.Long)value);
      }
      break;

    case _CONTROL_START_TIME:
      if (value == null) {
        unset_controlStartTime();
      } else {
        set_controlStartTime((java.lang.Long)value);
      }
      break;

    case _CONTROL_COMPLETE_TIME:
      if (value == null) {
        unset_controlCompleteTime();
      } else {
        set_controlCompleteTime((java.lang.Long)value);
      }
      break;

    case _NEXT_CONTROL_TIME:
      if (value == null) {
        unset_nextControlTime();
      } else {
        set_nextControlTime((java.lang.Long)value);
      }
      break;

    case _INTERNAL_STATE:
      if (value == null) {
        unset_internalState();
      } else {
        set_internalState((java.lang.Integer)value);
      }
      break;

    case _DAILY_OPS:
      if (value == null) {
        unset_dailyOps();
      } else {
        set_dailyOps((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _PAO_ID:
      return get_paoId();

    case _DISABLE_FLAG:
      return is_disableFlag();

    case _GROUP_CONTROL_STATE:
      return get_groupControlState();

    case _CURRENT_HOURS_DAILY:
      return get_currentHoursDaily();

    case _CURRENT_HOURS_MONTHLY:
      return get_currentHoursMonthly();

    case _CURRENT_HOURS_SEASONAL:
      return get_currentHoursSeasonal();

    case _CURRENT_HOURS_ANNUALLY:
      return get_currentHoursAnnually();

    case _LAST_CONTROL_SENT:
      return get_lastControlSent();

    case _CONTROL_START_TIME:
      return get_controlStartTime();

    case _CONTROL_COMPLETE_TIME:
      return get_controlCompleteTime();

    case _NEXT_CONTROL_TIME:
      return get_nextControlTime();

    case _INTERNAL_STATE:
      return get_internalState();

    case _DAILY_OPS:
      return get_dailyOps();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _PAO_ID:
      return isSet_paoId();
    case _DISABLE_FLAG:
      return isSet_disableFlag();
    case _GROUP_CONTROL_STATE:
      return isSet_groupControlState();
    case _CURRENT_HOURS_DAILY:
      return isSet_currentHoursDaily();
    case _CURRENT_HOURS_MONTHLY:
      return isSet_currentHoursMonthly();
    case _CURRENT_HOURS_SEASONAL:
      return isSet_currentHoursSeasonal();
    case _CURRENT_HOURS_ANNUALLY:
      return isSet_currentHoursAnnually();
    case _LAST_CONTROL_SENT:
      return isSet_lastControlSent();
    case _CONTROL_START_TIME:
      return isSet_controlStartTime();
    case _CONTROL_COMPLETE_TIME:
      return isSet_controlCompleteTime();
    case _NEXT_CONTROL_TIME:
      return isSet_nextControlTime();
    case _INTERNAL_STATE:
      return isSet_internalState();
    case _DAILY_OPS:
      return isSet_dailyOps();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LMDynamicGroupData)
      return this.equals((LMDynamicGroupData)that);
    return false;
  }

  public boolean equals(LMDynamicGroupData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__disableFlag = true;
    boolean that_present__disableFlag = true;
    if (this_present__disableFlag || that_present__disableFlag) {
      if (!(this_present__disableFlag && that_present__disableFlag))
        return false;
      if (this._disableFlag != that._disableFlag)
        return false;
    }

    boolean this_present__groupControlState = true;
    boolean that_present__groupControlState = true;
    if (this_present__groupControlState || that_present__groupControlState) {
      if (!(this_present__groupControlState && that_present__groupControlState))
        return false;
      if (this._groupControlState != that._groupControlState)
        return false;
    }

    boolean this_present__currentHoursDaily = true;
    boolean that_present__currentHoursDaily = true;
    if (this_present__currentHoursDaily || that_present__currentHoursDaily) {
      if (!(this_present__currentHoursDaily && that_present__currentHoursDaily))
        return false;
      if (this._currentHoursDaily != that._currentHoursDaily)
        return false;
    }

    boolean this_present__currentHoursMonthly = true;
    boolean that_present__currentHoursMonthly = true;
    if (this_present__currentHoursMonthly || that_present__currentHoursMonthly) {
      if (!(this_present__currentHoursMonthly && that_present__currentHoursMonthly))
        return false;
      if (this._currentHoursMonthly != that._currentHoursMonthly)
        return false;
    }

    boolean this_present__currentHoursSeasonal = true;
    boolean that_present__currentHoursSeasonal = true;
    if (this_present__currentHoursSeasonal || that_present__currentHoursSeasonal) {
      if (!(this_present__currentHoursSeasonal && that_present__currentHoursSeasonal))
        return false;
      if (this._currentHoursSeasonal != that._currentHoursSeasonal)
        return false;
    }

    boolean this_present__currentHoursAnnually = true;
    boolean that_present__currentHoursAnnually = true;
    if (this_present__currentHoursAnnually || that_present__currentHoursAnnually) {
      if (!(this_present__currentHoursAnnually && that_present__currentHoursAnnually))
        return false;
      if (this._currentHoursAnnually != that._currentHoursAnnually)
        return false;
    }

    boolean this_present__lastControlSent = true;
    boolean that_present__lastControlSent = true;
    if (this_present__lastControlSent || that_present__lastControlSent) {
      if (!(this_present__lastControlSent && that_present__lastControlSent))
        return false;
      if (this._lastControlSent != that._lastControlSent)
        return false;
    }

    boolean this_present__controlStartTime = true;
    boolean that_present__controlStartTime = true;
    if (this_present__controlStartTime || that_present__controlStartTime) {
      if (!(this_present__controlStartTime && that_present__controlStartTime))
        return false;
      if (this._controlStartTime != that._controlStartTime)
        return false;
    }

    boolean this_present__controlCompleteTime = true;
    boolean that_present__controlCompleteTime = true;
    if (this_present__controlCompleteTime || that_present__controlCompleteTime) {
      if (!(this_present__controlCompleteTime && that_present__controlCompleteTime))
        return false;
      if (this._controlCompleteTime != that._controlCompleteTime)
        return false;
    }

    boolean this_present__nextControlTime = true;
    boolean that_present__nextControlTime = true;
    if (this_present__nextControlTime || that_present__nextControlTime) {
      if (!(this_present__nextControlTime && that_present__nextControlTime))
        return false;
      if (this._nextControlTime != that._nextControlTime)
        return false;
    }

    boolean this_present__internalState = true;
    boolean that_present__internalState = true;
    if (this_present__internalState || that_present__internalState) {
      if (!(this_present__internalState && that_present__internalState))
        return false;
      if (this._internalState != that._internalState)
        return false;
    }

    boolean this_present__dailyOps = true;
    boolean that_present__dailyOps = true;
    if (this_present__dailyOps || that_present__dailyOps) {
      if (!(this_present__dailyOps && that_present__dailyOps))
        return false;
      if (this._dailyOps != that._dailyOps)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + _paoId;

    hashCode = hashCode * 8191 + ((_disableFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + _groupControlState;

    hashCode = hashCode * 8191 + _currentHoursDaily;

    hashCode = hashCode * 8191 + _currentHoursMonthly;

    hashCode = hashCode * 8191 + _currentHoursSeasonal;

    hashCode = hashCode * 8191 + _currentHoursAnnually;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastControlSent);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_controlStartTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_controlCompleteTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_nextControlTime);

    hashCode = hashCode * 8191 + _internalState;

    hashCode = hashCode * 8191 + _dailyOps;

    return hashCode;
  }

  @Override
  public int compareTo(LMDynamicGroupData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_paoId()).compareTo(other.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, other._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_disableFlag()).compareTo(other.isSet_disableFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_disableFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._disableFlag, other._disableFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_groupControlState()).compareTo(other.isSet_groupControlState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_groupControlState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupControlState, other._groupControlState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentHoursDaily()).compareTo(other.isSet_currentHoursDaily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentHoursDaily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentHoursDaily, other._currentHoursDaily);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentHoursMonthly()).compareTo(other.isSet_currentHoursMonthly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentHoursMonthly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentHoursMonthly, other._currentHoursMonthly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentHoursSeasonal()).compareTo(other.isSet_currentHoursSeasonal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentHoursSeasonal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentHoursSeasonal, other._currentHoursSeasonal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentHoursAnnually()).compareTo(other.isSet_currentHoursAnnually());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentHoursAnnually()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentHoursAnnually, other._currentHoursAnnually);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lastControlSent()).compareTo(other.isSet_lastControlSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastControlSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastControlSent, other._lastControlSent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlStartTime()).compareTo(other.isSet_controlStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlStartTime, other._controlStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlCompleteTime()).compareTo(other.isSet_controlCompleteTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlCompleteTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlCompleteTime, other._controlCompleteTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_nextControlTime()).compareTo(other.isSet_nextControlTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_nextControlTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nextControlTime, other._nextControlTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_internalState()).compareTo(other.isSet_internalState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_internalState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._internalState, other._internalState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_dailyOps()).compareTo(other.isSet_dailyOps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_dailyOps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._dailyOps, other._dailyOps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LMDynamicGroupData(");
    boolean first = true;

    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_disableFlag:");
    sb.append(this._disableFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_groupControlState:");
    sb.append(this._groupControlState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentHoursDaily:");
    sb.append(this._currentHoursDaily);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentHoursMonthly:");
    sb.append(this._currentHoursMonthly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentHoursSeasonal:");
    sb.append(this._currentHoursSeasonal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentHoursAnnually:");
    sb.append(this._currentHoursAnnually);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastControlSent:");
    sb.append(this._lastControlSent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlStartTime:");
    sb.append(this._controlStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlCompleteTime:");
    sb.append(this._controlCompleteTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_nextControlTime:");
    sb.append(this._nextControlTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_internalState:");
    sb.append(this._internalState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_dailyOps:");
    sb.append(this._dailyOps);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_disableFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_disableFlag' is unset! Struct:" + toString());
    }

    if (!isSet_groupControlState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_groupControlState' is unset! Struct:" + toString());
    }

    if (!isSet_currentHoursDaily()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentHoursDaily' is unset! Struct:" + toString());
    }

    if (!isSet_currentHoursMonthly()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentHoursMonthly' is unset! Struct:" + toString());
    }

    if (!isSet_currentHoursSeasonal()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentHoursSeasonal' is unset! Struct:" + toString());
    }

    if (!isSet_currentHoursAnnually()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentHoursAnnually' is unset! Struct:" + toString());
    }

    if (!isSet_lastControlSent()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastControlSent' is unset! Struct:" + toString());
    }

    if (!isSet_controlStartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlStartTime' is unset! Struct:" + toString());
    }

    if (!isSet_controlCompleteTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlCompleteTime' is unset! Struct:" + toString());
    }

    if (!isSet_nextControlTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_nextControlTime' is unset! Struct:" + toString());
    }

    if (!isSet_internalState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_internalState' is unset! Struct:" + toString());
    }

    if (!isSet_dailyOps()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_dailyOps' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMDynamicGroupDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMDynamicGroupDataStandardScheme getScheme() {
      return new LMDynamicGroupDataStandardScheme();
    }
  }

  private static class LMDynamicGroupDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<LMDynamicGroupData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMDynamicGroupData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _DISABLE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._disableFlag = iprot.readBool();
              struct.set_disableFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _GROUP_CONTROL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._groupControlState = iprot.readI32();
              struct.set_groupControlStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _CURRENT_HOURS_DAILY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentHoursDaily = iprot.readI32();
              struct.set_currentHoursDailyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _CURRENT_HOURS_MONTHLY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentHoursMonthly = iprot.readI32();
              struct.set_currentHoursMonthlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _CURRENT_HOURS_SEASONAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentHoursSeasonal = iprot.readI32();
              struct.set_currentHoursSeasonalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _CURRENT_HOURS_ANNUALLY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentHoursAnnually = iprot.readI32();
              struct.set_currentHoursAnnuallyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _LAST_CONTROL_SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastControlSent = iprot.readI64();
              struct.set_lastControlSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _CONTROL_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._controlStartTime = iprot.readI64();
              struct.set_controlStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _CONTROL_COMPLETE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._controlCompleteTime = iprot.readI64();
              struct.set_controlCompleteTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _NEXT_CONTROL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._nextControlTime = iprot.readI64();
              struct.set_nextControlTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _INTERNAL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._internalState = iprot.readI32();
              struct.set_internalStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _DAILY_OPS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._dailyOps = iprot.readI32();
              struct.set_dailyOpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMDynamicGroupData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DISABLE_FLAG_FIELD_DESC);
      oprot.writeBool(struct._disableFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_GROUP_CONTROL_STATE_FIELD_DESC);
      oprot.writeI32(struct._groupControlState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_HOURS_DAILY_FIELD_DESC);
      oprot.writeI32(struct._currentHoursDaily);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_HOURS_MONTHLY_FIELD_DESC);
      oprot.writeI32(struct._currentHoursMonthly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_HOURS_SEASONAL_FIELD_DESC);
      oprot.writeI32(struct._currentHoursSeasonal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_HOURS_ANNUALLY_FIELD_DESC);
      oprot.writeI32(struct._currentHoursAnnually);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_CONTROL_SENT_FIELD_DESC);
      oprot.writeI64(struct._lastControlSent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_START_TIME_FIELD_DESC);
      oprot.writeI64(struct._controlStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_COMPLETE_TIME_FIELD_DESC);
      oprot.writeI64(struct._controlCompleteTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NEXT_CONTROL_TIME_FIELD_DESC);
      oprot.writeI64(struct._nextControlTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_INTERNAL_STATE_FIELD_DESC);
      oprot.writeI32(struct._internalState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DAILY_OPS_FIELD_DESC);
      oprot.writeI32(struct._dailyOps);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMDynamicGroupDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMDynamicGroupDataTupleScheme getScheme() {
      return new LMDynamicGroupDataTupleScheme();
    }
  }

  private static class LMDynamicGroupDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<LMDynamicGroupData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMDynamicGroupData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct._paoId);
      oprot.writeBool(struct._disableFlag);
      oprot.writeI32(struct._groupControlState);
      oprot.writeI32(struct._currentHoursDaily);
      oprot.writeI32(struct._currentHoursMonthly);
      oprot.writeI32(struct._currentHoursSeasonal);
      oprot.writeI32(struct._currentHoursAnnually);
      oprot.writeI64(struct._lastControlSent);
      oprot.writeI64(struct._controlStartTime);
      oprot.writeI64(struct._controlCompleteTime);
      oprot.writeI64(struct._nextControlTime);
      oprot.writeI32(struct._internalState);
      oprot.writeI32(struct._dailyOps);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMDynamicGroupData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._disableFlag = iprot.readBool();
      struct.set_disableFlagIsSet(true);
      struct._groupControlState = iprot.readI32();
      struct.set_groupControlStateIsSet(true);
      struct._currentHoursDaily = iprot.readI32();
      struct.set_currentHoursDailyIsSet(true);
      struct._currentHoursMonthly = iprot.readI32();
      struct.set_currentHoursMonthlyIsSet(true);
      struct._currentHoursSeasonal = iprot.readI32();
      struct.set_currentHoursSeasonalIsSet(true);
      struct._currentHoursAnnually = iprot.readI32();
      struct.set_currentHoursAnnuallyIsSet(true);
      struct._lastControlSent = iprot.readI64();
      struct.set_lastControlSentIsSet(true);
      struct._controlStartTime = iprot.readI64();
      struct.set_controlStartTimeIsSet(true);
      struct._controlCompleteTime = iprot.readI64();
      struct.set_controlCompleteTimeIsSet(true);
      struct._nextControlTime = iprot.readI64();
      struct.set_nextControlTimeIsSet(true);
      struct._internalState = iprot.readI32();
      struct.set_internalStateIsSet(true);
      struct._dailyOps = iprot.readI32();
      struct.set_dailyOpsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


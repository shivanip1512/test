/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-27")
public class NetworkManagerRequestHeader implements org.apache.thrift.TBase<NetworkManagerRequestHeader, NetworkManagerRequestHeader._Fields>, java.io.Serializable, Cloneable, Comparable<NetworkManagerRequestHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NetworkManagerRequestHeader");

  private static final org.apache.thrift.protocol.TField CLIENT_GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientGuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField EXPIRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("expiration", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LIFETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lifetime", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NetworkManagerRequestHeaderStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NetworkManagerRequestHeaderTupleSchemeFactory();

  private java.lang.String clientGuid; // required
  private long sessionId; // required
  private long messageId; // required
  private long groupId; // optional
  private byte priority; // required
  private long expiration; // optional
  private NetworkManagerMessageLifetime lifetime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_GUID((short)1, "clientGuid"),
    SESSION_ID((short)2, "sessionId"),
    MESSAGE_ID((short)3, "messageId"),
    GROUP_ID((short)4, "groupId"),
    PRIORITY((short)5, "priority"),
    EXPIRATION((short)6, "expiration"),
    /**
     * 
     * @see NetworkManagerMessageLifetime
     */
    LIFETIME((short)7, "lifetime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_GUID
          return CLIENT_GUID;
        case 2: // SESSION_ID
          return SESSION_ID;
        case 3: // MESSAGE_ID
          return MESSAGE_ID;
        case 4: // GROUP_ID
          return GROUP_ID;
        case 5: // PRIORITY
          return PRIORITY;
        case 6: // EXPIRATION
          return EXPIRATION;
        case 7: // LIFETIME
          return LIFETIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private static final int __MESSAGEID_ISSET_ID = 1;
  private static final int __GROUPID_ISSET_ID = 2;
  private static final int __PRIORITY_ISSET_ID = 3;
  private static final int __EXPIRATION_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GROUP_ID,_Fields.EXPIRATION,_Fields.LIFETIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_GUID, new org.apache.thrift.meta_data.FieldMetaData("clientGuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.EXPIRATION, new org.apache.thrift.meta_data.FieldMetaData("expiration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIFETIME, new org.apache.thrift.meta_data.FieldMetaData("lifetime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NetworkManagerMessageLifetime.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NetworkManagerRequestHeader.class, metaDataMap);
  }

  public NetworkManagerRequestHeader() {
    this.lifetime = com.cannontech.messaging.serialization.thrift.generated.NetworkManagerMessageLifetime.SESSION;

  }

  public NetworkManagerRequestHeader(
    java.lang.String clientGuid,
    long sessionId,
    long messageId,
    byte priority)
  {
    this();
    this.clientGuid = clientGuid;
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.messageId = messageId;
    setMessageIdIsSet(true);
    this.priority = priority;
    setPriorityIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NetworkManagerRequestHeader(NetworkManagerRequestHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientGuid()) {
      this.clientGuid = other.clientGuid;
    }
    this.sessionId = other.sessionId;
    this.messageId = other.messageId;
    this.groupId = other.groupId;
    this.priority = other.priority;
    this.expiration = other.expiration;
    if (other.isSetLifetime()) {
      this.lifetime = other.lifetime;
    }
  }

  public NetworkManagerRequestHeader deepCopy() {
    return new NetworkManagerRequestHeader(this);
  }

  @Override
  public void clear() {
    this.clientGuid = null;
    setSessionIdIsSet(false);
    this.sessionId = 0;
    setMessageIdIsSet(false);
    this.messageId = 0;
    setGroupIdIsSet(false);
    this.groupId = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    setExpirationIsSet(false);
    this.expiration = 0;
    this.lifetime = com.cannontech.messaging.serialization.thrift.generated.NetworkManagerMessageLifetime.SESSION;

  }

  public java.lang.String getClientGuid() {
    return this.clientGuid;
  }

  public void setClientGuid(java.lang.String clientGuid) {
    this.clientGuid = clientGuid;
  }

  public void unsetClientGuid() {
    this.clientGuid = null;
  }

  /** Returns true if field clientGuid is set (has been assigned a value) and false otherwise */
  public boolean isSetClientGuid() {
    return this.clientGuid != null;
  }

  public void setClientGuidIsSet(boolean value) {
    if (!value) {
      this.clientGuid = null;
    }
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public void setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public long getMessageId() {
    return this.messageId;
  }

  public void setMessageId(long messageId) {
    this.messageId = messageId;
    setMessageIdIsSet(true);
  }

  public void unsetMessageId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  public void setMessageIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
  }

  public long getGroupId() {
    return this.groupId;
  }

  public void setGroupId(long groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
  }

  public void unsetGroupId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public byte getPriority() {
    return this.priority;
  }

  public void setPriority(byte priority) {
    this.priority = priority;
    setPriorityIsSet(true);
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public long getExpiration() {
    return this.expiration;
  }

  public void setExpiration(long expiration) {
    this.expiration = expiration;
    setExpirationIsSet(true);
  }

  public void unsetExpiration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRATION_ISSET_ID);
  }

  /** Returns true if field expiration is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRATION_ISSET_ID);
  }

  public void setExpirationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRATION_ISSET_ID, value);
  }

  /**
   * 
   * @see NetworkManagerMessageLifetime
   */
  public NetworkManagerMessageLifetime getLifetime() {
    return this.lifetime;
  }

  /**
   * 
   * @see NetworkManagerMessageLifetime
   */
  public void setLifetime(NetworkManagerMessageLifetime lifetime) {
    this.lifetime = lifetime;
  }

  public void unsetLifetime() {
    this.lifetime = null;
  }

  /** Returns true if field lifetime is set (has been assigned a value) and false otherwise */
  public boolean isSetLifetime() {
    return this.lifetime != null;
  }

  public void setLifetimeIsSet(boolean value) {
    if (!value) {
      this.lifetime = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CLIENT_GUID:
      if (value == null) {
        unsetClientGuid();
      } else {
        setClientGuid((java.lang.String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case MESSAGE_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        setMessageId((java.lang.Long)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((java.lang.Long)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((java.lang.Byte)value);
      }
      break;

    case EXPIRATION:
      if (value == null) {
        unsetExpiration();
      } else {
        setExpiration((java.lang.Long)value);
      }
      break;

    case LIFETIME:
      if (value == null) {
        unsetLifetime();
      } else {
        setLifetime((NetworkManagerMessageLifetime)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_GUID:
      return getClientGuid();

    case SESSION_ID:
      return getSessionId();

    case MESSAGE_ID:
      return getMessageId();

    case GROUP_ID:
      return getGroupId();

    case PRIORITY:
      return getPriority();

    case EXPIRATION:
      return getExpiration();

    case LIFETIME:
      return getLifetime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_GUID:
      return isSetClientGuid();
    case SESSION_ID:
      return isSetSessionId();
    case MESSAGE_ID:
      return isSetMessageId();
    case GROUP_ID:
      return isSetGroupId();
    case PRIORITY:
      return isSetPriority();
    case EXPIRATION:
      return isSetExpiration();
    case LIFETIME:
      return isSetLifetime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NetworkManagerRequestHeader)
      return this.equals((NetworkManagerRequestHeader)that);
    return false;
  }

  public boolean equals(NetworkManagerRequestHeader that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_clientGuid = true && this.isSetClientGuid();
    boolean that_present_clientGuid = true && that.isSetClientGuid();
    if (this_present_clientGuid || that_present_clientGuid) {
      if (!(this_present_clientGuid && that_present_clientGuid))
        return false;
      if (!this.clientGuid.equals(that.clientGuid))
        return false;
    }

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_messageId = true;
    boolean that_present_messageId = true;
    if (this_present_messageId || that_present_messageId) {
      if (!(this_present_messageId && that_present_messageId))
        return false;
      if (this.messageId != that.messageId)
        return false;
    }

    boolean this_present_groupId = true && this.isSetGroupId();
    boolean that_present_groupId = true && that.isSetGroupId();
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_expiration = true && this.isSetExpiration();
    boolean that_present_expiration = true && that.isSetExpiration();
    if (this_present_expiration || that_present_expiration) {
      if (!(this_present_expiration && that_present_expiration))
        return false;
      if (this.expiration != that.expiration)
        return false;
    }

    boolean this_present_lifetime = true && this.isSetLifetime();
    boolean that_present_lifetime = true && that.isSetLifetime();
    if (this_present_lifetime || that_present_lifetime) {
      if (!(this_present_lifetime && that_present_lifetime))
        return false;
      if (!this.lifetime.equals(that.lifetime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetClientGuid()) ? 131071 : 524287);
    if (isSetClientGuid())
      hashCode = hashCode * 8191 + clientGuid.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(messageId);

    hashCode = hashCode * 8191 + ((isSetGroupId()) ? 131071 : 524287);
    if (isSetGroupId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(groupId);

    hashCode = hashCode * 8191 + (int) (priority);

    hashCode = hashCode * 8191 + ((isSetExpiration()) ? 131071 : 524287);
    if (isSetExpiration())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expiration);

    hashCode = hashCode * 8191 + ((isSetLifetime()) ? 131071 : 524287);
    if (isSetLifetime())
      hashCode = hashCode * 8191 + lifetime.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(NetworkManagerRequestHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetClientGuid()).compareTo(other.isSetClientGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientGuid, other.clientGuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpiration()).compareTo(other.isSetExpiration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiration, other.expiration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLifetime()).compareTo(other.isSetLifetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLifetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lifetime, other.lifetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NetworkManagerRequestHeader(");
    boolean first = true;

    sb.append("clientGuid:");
    if (this.clientGuid == null) {
      sb.append("null");
    } else {
      sb.append(this.clientGuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageId:");
    sb.append(this.messageId);
    first = false;
    if (isSetGroupId()) {
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (isSetExpiration()) {
      if (!first) sb.append(", ");
      sb.append("expiration:");
      sb.append(this.expiration);
      first = false;
    }
    if (isSetLifetime()) {
      if (!first) sb.append(", ");
      sb.append("lifetime:");
      if (this.lifetime == null) {
        sb.append("null");
      } else {
        sb.append(this.lifetime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetClientGuid()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientGuid' is unset! Struct:" + toString());
    }

    if (!isSetSessionId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' is unset! Struct:" + toString());
    }

    if (!isSetMessageId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' is unset! Struct:" + toString());
    }

    if (!isSetPriority()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'priority' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NetworkManagerRequestHeaderStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NetworkManagerRequestHeaderStandardScheme getScheme() {
      return new NetworkManagerRequestHeaderStandardScheme();
    }
  }

  private static class NetworkManagerRequestHeaderStandardScheme extends org.apache.thrift.scheme.StandardScheme<NetworkManagerRequestHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NetworkManagerRequestHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientGuid = iprot.readString();
              struct.setClientGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.messageId = iprot.readI64();
              struct.setMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.groupId = iprot.readI64();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.priority = iprot.readByte();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPIRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expiration = iprot.readI64();
              struct.setExpirationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LIFETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lifetime = com.cannontech.messaging.serialization.thrift.generated.NetworkManagerMessageLifetime.findByValue(iprot.readI32());
              struct.setLifetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NetworkManagerRequestHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientGuid != null) {
        oprot.writeFieldBegin(CLIENT_GUID_FIELD_DESC);
        oprot.writeString(struct.clientGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(struct.messageId);
      oprot.writeFieldEnd();
      if (struct.isSetGroupId()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeByte(struct.priority);
      oprot.writeFieldEnd();
      if (struct.isSetExpiration()) {
        oprot.writeFieldBegin(EXPIRATION_FIELD_DESC);
        oprot.writeI64(struct.expiration);
        oprot.writeFieldEnd();
      }
      if (struct.lifetime != null) {
        if (struct.isSetLifetime()) {
          oprot.writeFieldBegin(LIFETIME_FIELD_DESC);
          oprot.writeI32(struct.lifetime.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NetworkManagerRequestHeaderTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NetworkManagerRequestHeaderTupleScheme getScheme() {
      return new NetworkManagerRequestHeaderTupleScheme();
    }
  }

  private static class NetworkManagerRequestHeaderTupleScheme extends org.apache.thrift.scheme.TupleScheme<NetworkManagerRequestHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NetworkManagerRequestHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.clientGuid);
      oprot.writeI64(struct.sessionId);
      oprot.writeI64(struct.messageId);
      oprot.writeByte(struct.priority);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGroupId()) {
        optionals.set(0);
      }
      if (struct.isSetExpiration()) {
        optionals.set(1);
      }
      if (struct.isSetLifetime()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGroupId()) {
        oprot.writeI64(struct.groupId);
      }
      if (struct.isSetExpiration()) {
        oprot.writeI64(struct.expiration);
      }
      if (struct.isSetLifetime()) {
        oprot.writeI32(struct.lifetime.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NetworkManagerRequestHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.clientGuid = iprot.readString();
      struct.setClientGuidIsSet(true);
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      struct.messageId = iprot.readI64();
      struct.setMessageIdIsSet(true);
      struct.priority = iprot.readByte();
      struct.setPriorityIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.groupId = iprot.readI64();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.expiration = iprot.readI64();
        struct.setExpirationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lifetime = com.cannontech.messaging.serialization.thrift.generated.NetworkManagerMessageLifetime.findByValue(iprot.readI32());
        struct.setLifetimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


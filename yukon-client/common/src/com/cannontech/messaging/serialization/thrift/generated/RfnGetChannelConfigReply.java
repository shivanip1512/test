/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-27")
public class RfnGetChannelConfigReply implements org.apache.thrift.TBase<RfnGetChannelConfigReply, RfnGetChannelConfigReply._Fields>, java.io.Serializable, Cloneable, Comparable<RfnGetChannelConfigReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RfnGetChannelConfigReply");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("channelInfo", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField RFN_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("rfnIdentifier", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RECORDING_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("recordingInterval", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REPORTING_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("reportingInterval", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("reply", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RfnGetChannelConfigReplyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RfnGetChannelConfigReplyTupleSchemeFactory();

  private long timestamp; // required
  private java.util.Set<ChannelInfo> channelInfo; // required
  private com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier rfnIdentifier; // required
  private int recordingInterval; // required
  private int reportingInterval; // required
  private GetChannelConfigReplyType reply; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    CHANNEL_INFO((short)2, "channelInfo"),
    RFN_IDENTIFIER((short)3, "rfnIdentifier"),
    RECORDING_INTERVAL((short)4, "recordingInterval"),
    REPORTING_INTERVAL((short)5, "reportingInterval"),
    /**
     * 
     * @see GetChannelConfigReplyType
     */
    REPLY((short)6, "reply");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // CHANNEL_INFO
          return CHANNEL_INFO;
        case 3: // RFN_IDENTIFIER
          return RFN_IDENTIFIER;
        case 4: // RECORDING_INTERVAL
          return RECORDING_INTERVAL;
        case 5: // REPORTING_INTERVAL
          return REPORTING_INTERVAL;
        case 6: // REPLY
          return REPLY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __RECORDINGINTERVAL_ISSET_ID = 1;
  private static final int __REPORTINGINTERVAL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.CHANNEL_INFO, new org.apache.thrift.meta_data.FieldMetaData("channelInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelInfo.class))));
    tmpMap.put(_Fields.RFN_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("rfnIdentifier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier.class)));
    tmpMap.put(_Fields.RECORDING_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("recordingInterval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPORTING_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("reportingInterval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLY, new org.apache.thrift.meta_data.FieldMetaData("reply", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GetChannelConfigReplyType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RfnGetChannelConfigReply.class, metaDataMap);
  }

  public RfnGetChannelConfigReply() {
  }

  public RfnGetChannelConfigReply(
    long timestamp,
    java.util.Set<ChannelInfo> channelInfo,
    com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier rfnIdentifier,
    int recordingInterval,
    int reportingInterval,
    GetChannelConfigReplyType reply)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.channelInfo = channelInfo;
    this.rfnIdentifier = rfnIdentifier;
    this.recordingInterval = recordingInterval;
    setRecordingIntervalIsSet(true);
    this.reportingInterval = reportingInterval;
    setReportingIntervalIsSet(true);
    this.reply = reply;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RfnGetChannelConfigReply(RfnGetChannelConfigReply other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetChannelInfo()) {
      java.util.Set<ChannelInfo> __this__channelInfo = new java.util.HashSet<ChannelInfo>(other.channelInfo.size());
      for (ChannelInfo other_element : other.channelInfo) {
        __this__channelInfo.add(new ChannelInfo(other_element));
      }
      this.channelInfo = __this__channelInfo;
    }
    if (other.isSetRfnIdentifier()) {
      this.rfnIdentifier = new com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier(other.rfnIdentifier);
    }
    this.recordingInterval = other.recordingInterval;
    this.reportingInterval = other.reportingInterval;
    if (other.isSetReply()) {
      this.reply = other.reply;
    }
  }

  public RfnGetChannelConfigReply deepCopy() {
    return new RfnGetChannelConfigReply(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.channelInfo = null;
    this.rfnIdentifier = null;
    setRecordingIntervalIsSet(false);
    this.recordingInterval = 0;
    setReportingIntervalIsSet(false);
    this.reportingInterval = 0;
    this.reply = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getChannelInfoSize() {
    return (this.channelInfo == null) ? 0 : this.channelInfo.size();
  }

  public java.util.Iterator<ChannelInfo> getChannelInfoIterator() {
    return (this.channelInfo == null) ? null : this.channelInfo.iterator();
  }

  public void addToChannelInfo(ChannelInfo elem) {
    if (this.channelInfo == null) {
      this.channelInfo = new java.util.HashSet<ChannelInfo>();
    }
    this.channelInfo.add(elem);
  }

  public java.util.Set<ChannelInfo> getChannelInfo() {
    return this.channelInfo;
  }

  public void setChannelInfo(java.util.Set<ChannelInfo> channelInfo) {
    this.channelInfo = channelInfo;
  }

  public void unsetChannelInfo() {
    this.channelInfo = null;
  }

  /** Returns true if field channelInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelInfo() {
    return this.channelInfo != null;
  }

  public void setChannelInfoIsSet(boolean value) {
    if (!value) {
      this.channelInfo = null;
    }
  }

  public com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier getRfnIdentifier() {
    return this.rfnIdentifier;
  }

  public void setRfnIdentifier(com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier rfnIdentifier) {
    this.rfnIdentifier = rfnIdentifier;
  }

  public void unsetRfnIdentifier() {
    this.rfnIdentifier = null;
  }

  /** Returns true if field rfnIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetRfnIdentifier() {
    return this.rfnIdentifier != null;
  }

  public void setRfnIdentifierIsSet(boolean value) {
    if (!value) {
      this.rfnIdentifier = null;
    }
  }

  public int getRecordingInterval() {
    return this.recordingInterval;
  }

  public void setRecordingInterval(int recordingInterval) {
    this.recordingInterval = recordingInterval;
    setRecordingIntervalIsSet(true);
  }

  public void unsetRecordingInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDINGINTERVAL_ISSET_ID);
  }

  /** Returns true if field recordingInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordingInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDINGINTERVAL_ISSET_ID);
  }

  public void setRecordingIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDINGINTERVAL_ISSET_ID, value);
  }

  public int getReportingInterval() {
    return this.reportingInterval;
  }

  public void setReportingInterval(int reportingInterval) {
    this.reportingInterval = reportingInterval;
    setReportingIntervalIsSet(true);
  }

  public void unsetReportingInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPORTINGINTERVAL_ISSET_ID);
  }

  /** Returns true if field reportingInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetReportingInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPORTINGINTERVAL_ISSET_ID);
  }

  public void setReportingIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPORTINGINTERVAL_ISSET_ID, value);
  }

  /**
   * 
   * @see GetChannelConfigReplyType
   */
  public GetChannelConfigReplyType getReply() {
    return this.reply;
  }

  /**
   * 
   * @see GetChannelConfigReplyType
   */
  public void setReply(GetChannelConfigReplyType reply) {
    this.reply = reply;
  }

  public void unsetReply() {
    this.reply = null;
  }

  /** Returns true if field reply is set (has been assigned a value) and false otherwise */
  public boolean isSetReply() {
    return this.reply != null;
  }

  public void setReplyIsSet(boolean value) {
    if (!value) {
      this.reply = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case CHANNEL_INFO:
      if (value == null) {
        unsetChannelInfo();
      } else {
        setChannelInfo((java.util.Set<ChannelInfo>)value);
      }
      break;

    case RFN_IDENTIFIER:
      if (value == null) {
        unsetRfnIdentifier();
      } else {
        setRfnIdentifier((com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier)value);
      }
      break;

    case RECORDING_INTERVAL:
      if (value == null) {
        unsetRecordingInterval();
      } else {
        setRecordingInterval((java.lang.Integer)value);
      }
      break;

    case REPORTING_INTERVAL:
      if (value == null) {
        unsetReportingInterval();
      } else {
        setReportingInterval((java.lang.Integer)value);
      }
      break;

    case REPLY:
      if (value == null) {
        unsetReply();
      } else {
        setReply((GetChannelConfigReplyType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case CHANNEL_INFO:
      return getChannelInfo();

    case RFN_IDENTIFIER:
      return getRfnIdentifier();

    case RECORDING_INTERVAL:
      return getRecordingInterval();

    case REPORTING_INTERVAL:
      return getReportingInterval();

    case REPLY:
      return getReply();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case CHANNEL_INFO:
      return isSetChannelInfo();
    case RFN_IDENTIFIER:
      return isSetRfnIdentifier();
    case RECORDING_INTERVAL:
      return isSetRecordingInterval();
    case REPORTING_INTERVAL:
      return isSetReportingInterval();
    case REPLY:
      return isSetReply();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RfnGetChannelConfigReply)
      return this.equals((RfnGetChannelConfigReply)that);
    return false;
  }

  public boolean equals(RfnGetChannelConfigReply that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_channelInfo = true && this.isSetChannelInfo();
    boolean that_present_channelInfo = true && that.isSetChannelInfo();
    if (this_present_channelInfo || that_present_channelInfo) {
      if (!(this_present_channelInfo && that_present_channelInfo))
        return false;
      if (!this.channelInfo.equals(that.channelInfo))
        return false;
    }

    boolean this_present_rfnIdentifier = true && this.isSetRfnIdentifier();
    boolean that_present_rfnIdentifier = true && that.isSetRfnIdentifier();
    if (this_present_rfnIdentifier || that_present_rfnIdentifier) {
      if (!(this_present_rfnIdentifier && that_present_rfnIdentifier))
        return false;
      if (!this.rfnIdentifier.equals(that.rfnIdentifier))
        return false;
    }

    boolean this_present_recordingInterval = true;
    boolean that_present_recordingInterval = true;
    if (this_present_recordingInterval || that_present_recordingInterval) {
      if (!(this_present_recordingInterval && that_present_recordingInterval))
        return false;
      if (this.recordingInterval != that.recordingInterval)
        return false;
    }

    boolean this_present_reportingInterval = true;
    boolean that_present_reportingInterval = true;
    if (this_present_reportingInterval || that_present_reportingInterval) {
      if (!(this_present_reportingInterval && that_present_reportingInterval))
        return false;
      if (this.reportingInterval != that.reportingInterval)
        return false;
    }

    boolean this_present_reply = true && this.isSetReply();
    boolean that_present_reply = true && that.isSetReply();
    if (this_present_reply || that_present_reply) {
      if (!(this_present_reply && that_present_reply))
        return false;
      if (!this.reply.equals(that.reply))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetChannelInfo()) ? 131071 : 524287);
    if (isSetChannelInfo())
      hashCode = hashCode * 8191 + channelInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetRfnIdentifier()) ? 131071 : 524287);
    if (isSetRfnIdentifier())
      hashCode = hashCode * 8191 + rfnIdentifier.hashCode();

    hashCode = hashCode * 8191 + recordingInterval;

    hashCode = hashCode * 8191 + reportingInterval;

    hashCode = hashCode * 8191 + ((isSetReply()) ? 131071 : 524287);
    if (isSetReply())
      hashCode = hashCode * 8191 + reply.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(RfnGetChannelConfigReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannelInfo()).compareTo(other.isSetChannelInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelInfo, other.channelInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRfnIdentifier()).compareTo(other.isSetRfnIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRfnIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rfnIdentifier, other.rfnIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecordingInterval()).compareTo(other.isSetRecordingInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordingInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordingInterval, other.recordingInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReportingInterval()).compareTo(other.isSetReportingInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportingInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportingInterval, other.reportingInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReply()).compareTo(other.isSetReply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply, other.reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RfnGetChannelConfigReply(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelInfo:");
    if (this.channelInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.channelInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rfnIdentifier:");
    if (this.rfnIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.rfnIdentifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordingInterval:");
    sb.append(this.recordingInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportingInterval:");
    sb.append(this.reportingInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reply:");
    if (this.reply == null) {
      sb.append("null");
    } else {
      sb.append(this.reply);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTimestamp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' is unset! Struct:" + toString());
    }

    if (!isSetChannelInfo()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelInfo' is unset! Struct:" + toString());
    }

    if (!isSetRfnIdentifier()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rfnIdentifier' is unset! Struct:" + toString());
    }

    if (!isSetRecordingInterval()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recordingInterval' is unset! Struct:" + toString());
    }

    if (!isSetReportingInterval()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reportingInterval' is unset! Struct:" + toString());
    }

    if (!isSetReply()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reply' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (rfnIdentifier != null) {
      rfnIdentifier.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RfnGetChannelConfigReplyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RfnGetChannelConfigReplyStandardScheme getScheme() {
      return new RfnGetChannelConfigReplyStandardScheme();
    }
  }

  private static class RfnGetChannelConfigReplyStandardScheme extends org.apache.thrift.scheme.StandardScheme<RfnGetChannelConfigReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RfnGetChannelConfigReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                struct.channelInfo = new java.util.HashSet<ChannelInfo>(2*_set8.size);
                ChannelInfo _elem9;
                for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                {
                  _elem9 = new ChannelInfo();
                  _elem9.read(iprot);
                  struct.channelInfo.add(_elem9);
                }
                iprot.readSetEnd();
              }
              struct.setChannelInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RFN_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rfnIdentifier = new com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier();
              struct.rfnIdentifier.read(iprot);
              struct.setRfnIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECORDING_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordingInterval = iprot.readI32();
              struct.setRecordingIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPORTING_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportingInterval = iprot.readI32();
              struct.setReportingIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reply = com.cannontech.messaging.serialization.thrift.generated.GetChannelConfigReplyType.findByValue(iprot.readI32());
              struct.setReplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RfnGetChannelConfigReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.channelInfo != null) {
        oprot.writeFieldBegin(CHANNEL_INFO_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.channelInfo.size()));
          for (ChannelInfo _iter11 : struct.channelInfo)
          {
            _iter11.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rfnIdentifier != null) {
        oprot.writeFieldBegin(RFN_IDENTIFIER_FIELD_DESC);
        struct.rfnIdentifier.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECORDING_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.recordingInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPORTING_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.reportingInterval);
      oprot.writeFieldEnd();
      if (struct.reply != null) {
        oprot.writeFieldBegin(REPLY_FIELD_DESC);
        oprot.writeI32(struct.reply.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RfnGetChannelConfigReplyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RfnGetChannelConfigReplyTupleScheme getScheme() {
      return new RfnGetChannelConfigReplyTupleScheme();
    }
  }

  private static class RfnGetChannelConfigReplyTupleScheme extends org.apache.thrift.scheme.TupleScheme<RfnGetChannelConfigReply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RfnGetChannelConfigReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.timestamp);
      {
        oprot.writeI32(struct.channelInfo.size());
        for (ChannelInfo _iter12 : struct.channelInfo)
        {
          _iter12.write(oprot);
        }
      }
      struct.rfnIdentifier.write(oprot);
      oprot.writeI32(struct.recordingInterval);
      oprot.writeI32(struct.reportingInterval);
      oprot.writeI32(struct.reply.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RfnGetChannelConfigReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.channelInfo = new java.util.HashSet<ChannelInfo>(2*_set13.size);
        ChannelInfo _elem14;
        for (int _i15 = 0; _i15 < _set13.size; ++_i15)
        {
          _elem14 = new ChannelInfo();
          _elem14.read(iprot);
          struct.channelInfo.add(_elem14);
        }
      }
      struct.setChannelInfoIsSet(true);
      struct.rfnIdentifier = new com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier();
      struct.rfnIdentifier.read(iprot);
      struct.setRfnIdentifierIsSet(true);
      struct.recordingInterval = iprot.readI32();
      struct.setRecordingIntervalIsSet(true);
      struct.reportingInterval = iprot.readI32();
      struct.setReportingIntervalIsSet(true);
      struct.reply = com.cannontech.messaging.serialization.thrift.generated.GetChannelConfigReplyType.findByValue(iprot.readI32());
      struct.setReplyIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


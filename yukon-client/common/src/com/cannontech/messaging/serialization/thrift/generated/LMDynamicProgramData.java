/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LMDynamicProgramData implements org.apache.thrift.TBase<LMDynamicProgramData, LMDynamicProgramData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMDynamicProgramData");

  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _DISABLE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_disableFlag", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField _CURRENT_GEAR_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentGearNumber", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _LAST_GROUP_CONTROLLED_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastGroupControlled", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _PROGRAM_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_programState", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField _REDUCTION_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("_reductionTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField _DIRECT_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_directStartTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField _DIRECT_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_directStopTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField _NOTIFY_ACTIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_notifyActiveTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField _NOTIFY_INACTIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_notifyInactiveTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField _STARTED_RAMPING_OUT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_startedRampingOutTime", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LMDynamicProgramDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LMDynamicProgramDataTupleSchemeFactory());
  }

  private int _paoId; // required
  private boolean _disableFlag; // required
  private int _currentGearNumber; // required
  private int _lastGroupControlled; // required
  private int _programState; // required
  private double _reductionTotal; // required
  private long _directStartTime; // required
  private long _directStopTime; // required
  private long _notifyActiveTime; // required
  private long _notifyInactiveTime; // required
  private long _startedRampingOutTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PAO_ID((short)1, "_paoId"),
    _DISABLE_FLAG((short)2, "_disableFlag"),
    _CURRENT_GEAR_NUMBER((short)3, "_currentGearNumber"),
    _LAST_GROUP_CONTROLLED((short)4, "_lastGroupControlled"),
    _PROGRAM_STATE((short)5, "_programState"),
    _REDUCTION_TOTAL((short)6, "_reductionTotal"),
    _DIRECT_START_TIME((short)7, "_directStartTime"),
    _DIRECT_STOP_TIME((short)8, "_directStopTime"),
    _NOTIFY_ACTIVE_TIME((short)9, "_notifyActiveTime"),
    _NOTIFY_INACTIVE_TIME((short)10, "_notifyInactiveTime"),
    _STARTED_RAMPING_OUT_TIME((short)11, "_startedRampingOutTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PAO_ID
          return _PAO_ID;
        case 2: // _DISABLE_FLAG
          return _DISABLE_FLAG;
        case 3: // _CURRENT_GEAR_NUMBER
          return _CURRENT_GEAR_NUMBER;
        case 4: // _LAST_GROUP_CONTROLLED
          return _LAST_GROUP_CONTROLLED;
        case 5: // _PROGRAM_STATE
          return _PROGRAM_STATE;
        case 6: // _REDUCTION_TOTAL
          return _REDUCTION_TOTAL;
        case 7: // _DIRECT_START_TIME
          return _DIRECT_START_TIME;
        case 8: // _DIRECT_STOP_TIME
          return _DIRECT_STOP_TIME;
        case 9: // _NOTIFY_ACTIVE_TIME
          return _NOTIFY_ACTIVE_TIME;
        case 10: // _NOTIFY_INACTIVE_TIME
          return _NOTIFY_INACTIVE_TIME;
        case 11: // _STARTED_RAMPING_OUT_TIME
          return _STARTED_RAMPING_OUT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___DISABLEFLAG_ISSET_ID = 1;
  private static final int ___CURRENTGEARNUMBER_ISSET_ID = 2;
  private static final int ___LASTGROUPCONTROLLED_ISSET_ID = 3;
  private static final int ___PROGRAMSTATE_ISSET_ID = 4;
  private static final int ___REDUCTIONTOTAL_ISSET_ID = 5;
  private static final int ___DIRECTSTARTTIME_ISSET_ID = 6;
  private static final int ___DIRECTSTOPTIME_ISSET_ID = 7;
  private static final int ___NOTIFYACTIVETIME_ISSET_ID = 8;
  private static final int ___NOTIFYINACTIVETIME_ISSET_ID = 9;
  private static final int ___STARTEDRAMPINGOUTTIME_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._DISABLE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_disableFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._CURRENT_GEAR_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("_currentGearNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._LAST_GROUP_CONTROLLED, new org.apache.thrift.meta_data.FieldMetaData("_lastGroupControlled", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PROGRAM_STATE, new org.apache.thrift.meta_data.FieldMetaData("_programState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._REDUCTION_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("_reductionTotal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._DIRECT_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("_directStartTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._DIRECT_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("_directStopTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._NOTIFY_ACTIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_notifyActiveTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._NOTIFY_INACTIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_notifyInactiveTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._STARTED_RAMPING_OUT_TIME, new org.apache.thrift.meta_data.FieldMetaData("_startedRampingOutTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMDynamicProgramData.class, metaDataMap);
  }

  public LMDynamicProgramData() {
  }

  public LMDynamicProgramData(
    int _paoId,
    boolean _disableFlag,
    int _currentGearNumber,
    int _lastGroupControlled,
    int _programState,
    double _reductionTotal,
    long _directStartTime,
    long _directStopTime,
    long _notifyActiveTime,
    long _notifyInactiveTime,
    long _startedRampingOutTime)
  {
    this();
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
    this._currentGearNumber = _currentGearNumber;
    set_currentGearNumberIsSet(true);
    this._lastGroupControlled = _lastGroupControlled;
    set_lastGroupControlledIsSet(true);
    this._programState = _programState;
    set_programStateIsSet(true);
    this._reductionTotal = _reductionTotal;
    set_reductionTotalIsSet(true);
    this._directStartTime = _directStartTime;
    set_directStartTimeIsSet(true);
    this._directStopTime = _directStopTime;
    set_directStopTimeIsSet(true);
    this._notifyActiveTime = _notifyActiveTime;
    set_notifyActiveTimeIsSet(true);
    this._notifyInactiveTime = _notifyInactiveTime;
    set_notifyInactiveTimeIsSet(true);
    this._startedRampingOutTime = _startedRampingOutTime;
    set_startedRampingOutTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMDynamicProgramData(LMDynamicProgramData other) {
    __isset_bitfield = other.__isset_bitfield;
    this._paoId = other._paoId;
    this._disableFlag = other._disableFlag;
    this._currentGearNumber = other._currentGearNumber;
    this._lastGroupControlled = other._lastGroupControlled;
    this._programState = other._programState;
    this._reductionTotal = other._reductionTotal;
    this._directStartTime = other._directStartTime;
    this._directStopTime = other._directStopTime;
    this._notifyActiveTime = other._notifyActiveTime;
    this._notifyInactiveTime = other._notifyInactiveTime;
    this._startedRampingOutTime = other._startedRampingOutTime;
  }

  public LMDynamicProgramData deepCopy() {
    return new LMDynamicProgramData(this);
  }

  @Override
  public void clear() {
    set_paoIdIsSet(false);
    this._paoId = 0;
    set_disableFlagIsSet(false);
    this._disableFlag = false;
    set_currentGearNumberIsSet(false);
    this._currentGearNumber = 0;
    set_lastGroupControlledIsSet(false);
    this._lastGroupControlled = 0;
    set_programStateIsSet(false);
    this._programState = 0;
    set_reductionTotalIsSet(false);
    this._reductionTotal = 0.0;
    set_directStartTimeIsSet(false);
    this._directStartTime = 0;
    set_directStopTimeIsSet(false);
    this._directStopTime = 0;
    set_notifyActiveTimeIsSet(false);
    this._notifyActiveTime = 0;
    set_notifyInactiveTimeIsSet(false);
    this._notifyInactiveTime = 0;
    set_startedRampingOutTimeIsSet(false);
    this._startedRampingOutTime = 0;
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public boolean is_disableFlag() {
    return this._disableFlag;
  }

  public void set_disableFlag(boolean _disableFlag) {
    this._disableFlag = _disableFlag;
    set_disableFlagIsSet(true);
  }

  public void unset_disableFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  /** Returns true if field _disableFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_disableFlag() {
    return EncodingUtils.testBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID);
  }

  public void set_disableFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___DISABLEFLAG_ISSET_ID, value);
  }

  public int get_currentGearNumber() {
    return this._currentGearNumber;
  }

  public void set_currentGearNumber(int _currentGearNumber) {
    this._currentGearNumber = _currentGearNumber;
    set_currentGearNumberIsSet(true);
  }

  public void unset_currentGearNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___CURRENTGEARNUMBER_ISSET_ID);
  }

  /** Returns true if field _currentGearNumber is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentGearNumber() {
    return EncodingUtils.testBit(__isset_bitfield, ___CURRENTGEARNUMBER_ISSET_ID);
  }

  public void set_currentGearNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___CURRENTGEARNUMBER_ISSET_ID, value);
  }

  public int get_lastGroupControlled() {
    return this._lastGroupControlled;
  }

  public void set_lastGroupControlled(int _lastGroupControlled) {
    this._lastGroupControlled = _lastGroupControlled;
    set_lastGroupControlledIsSet(true);
  }

  public void unset_lastGroupControlled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___LASTGROUPCONTROLLED_ISSET_ID);
  }

  /** Returns true if field _lastGroupControlled is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastGroupControlled() {
    return EncodingUtils.testBit(__isset_bitfield, ___LASTGROUPCONTROLLED_ISSET_ID);
  }

  public void set_lastGroupControlledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___LASTGROUPCONTROLLED_ISSET_ID, value);
  }

  public int get_programState() {
    return this._programState;
  }

  public void set_programState(int _programState) {
    this._programState = _programState;
    set_programStateIsSet(true);
  }

  public void unset_programState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___PROGRAMSTATE_ISSET_ID);
  }

  /** Returns true if field _programState is set (has been assigned a value) and false otherwise */
  public boolean isSet_programState() {
    return EncodingUtils.testBit(__isset_bitfield, ___PROGRAMSTATE_ISSET_ID);
  }

  public void set_programStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___PROGRAMSTATE_ISSET_ID, value);
  }

  public double get_reductionTotal() {
    return this._reductionTotal;
  }

  public void set_reductionTotal(double _reductionTotal) {
    this._reductionTotal = _reductionTotal;
    set_reductionTotalIsSet(true);
  }

  public void unset_reductionTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___REDUCTIONTOTAL_ISSET_ID);
  }

  /** Returns true if field _reductionTotal is set (has been assigned a value) and false otherwise */
  public boolean isSet_reductionTotal() {
    return EncodingUtils.testBit(__isset_bitfield, ___REDUCTIONTOTAL_ISSET_ID);
  }

  public void set_reductionTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___REDUCTIONTOTAL_ISSET_ID, value);
  }

  public long get_directStartTime() {
    return this._directStartTime;
  }

  public void set_directStartTime(long _directStartTime) {
    this._directStartTime = _directStartTime;
    set_directStartTimeIsSet(true);
  }

  public void unset_directStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___DIRECTSTARTTIME_ISSET_ID);
  }

  /** Returns true if field _directStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_directStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___DIRECTSTARTTIME_ISSET_ID);
  }

  public void set_directStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___DIRECTSTARTTIME_ISSET_ID, value);
  }

  public long get_directStopTime() {
    return this._directStopTime;
  }

  public void set_directStopTime(long _directStopTime) {
    this._directStopTime = _directStopTime;
    set_directStopTimeIsSet(true);
  }

  public void unset_directStopTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___DIRECTSTOPTIME_ISSET_ID);
  }

  /** Returns true if field _directStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_directStopTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___DIRECTSTOPTIME_ISSET_ID);
  }

  public void set_directStopTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___DIRECTSTOPTIME_ISSET_ID, value);
  }

  public long get_notifyActiveTime() {
    return this._notifyActiveTime;
  }

  public void set_notifyActiveTime(long _notifyActiveTime) {
    this._notifyActiveTime = _notifyActiveTime;
    set_notifyActiveTimeIsSet(true);
  }

  public void unset_notifyActiveTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___NOTIFYACTIVETIME_ISSET_ID);
  }

  /** Returns true if field _notifyActiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_notifyActiveTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___NOTIFYACTIVETIME_ISSET_ID);
  }

  public void set_notifyActiveTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___NOTIFYACTIVETIME_ISSET_ID, value);
  }

  public long get_notifyInactiveTime() {
    return this._notifyInactiveTime;
  }

  public void set_notifyInactiveTime(long _notifyInactiveTime) {
    this._notifyInactiveTime = _notifyInactiveTime;
    set_notifyInactiveTimeIsSet(true);
  }

  public void unset_notifyInactiveTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___NOTIFYINACTIVETIME_ISSET_ID);
  }

  /** Returns true if field _notifyInactiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_notifyInactiveTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___NOTIFYINACTIVETIME_ISSET_ID);
  }

  public void set_notifyInactiveTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___NOTIFYINACTIVETIME_ISSET_ID, value);
  }

  public long get_startedRampingOutTime() {
    return this._startedRampingOutTime;
  }

  public void set_startedRampingOutTime(long _startedRampingOutTime) {
    this._startedRampingOutTime = _startedRampingOutTime;
    set_startedRampingOutTimeIsSet(true);
  }

  public void unset_startedRampingOutTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___STARTEDRAMPINGOUTTIME_ISSET_ID);
  }

  /** Returns true if field _startedRampingOutTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_startedRampingOutTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___STARTEDRAMPINGOUTTIME_ISSET_ID);
  }

  public void set_startedRampingOutTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___STARTEDRAMPINGOUTTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((Integer)value);
      }
      break;

    case _DISABLE_FLAG:
      if (value == null) {
        unset_disableFlag();
      } else {
        set_disableFlag((Boolean)value);
      }
      break;

    case _CURRENT_GEAR_NUMBER:
      if (value == null) {
        unset_currentGearNumber();
      } else {
        set_currentGearNumber((Integer)value);
      }
      break;

    case _LAST_GROUP_CONTROLLED:
      if (value == null) {
        unset_lastGroupControlled();
      } else {
        set_lastGroupControlled((Integer)value);
      }
      break;

    case _PROGRAM_STATE:
      if (value == null) {
        unset_programState();
      } else {
        set_programState((Integer)value);
      }
      break;

    case _REDUCTION_TOTAL:
      if (value == null) {
        unset_reductionTotal();
      } else {
        set_reductionTotal((Double)value);
      }
      break;

    case _DIRECT_START_TIME:
      if (value == null) {
        unset_directStartTime();
      } else {
        set_directStartTime((Long)value);
      }
      break;

    case _DIRECT_STOP_TIME:
      if (value == null) {
        unset_directStopTime();
      } else {
        set_directStopTime((Long)value);
      }
      break;

    case _NOTIFY_ACTIVE_TIME:
      if (value == null) {
        unset_notifyActiveTime();
      } else {
        set_notifyActiveTime((Long)value);
      }
      break;

    case _NOTIFY_INACTIVE_TIME:
      if (value == null) {
        unset_notifyInactiveTime();
      } else {
        set_notifyInactiveTime((Long)value);
      }
      break;

    case _STARTED_RAMPING_OUT_TIME:
      if (value == null) {
        unset_startedRampingOutTime();
      } else {
        set_startedRampingOutTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _PAO_ID:
      return Integer.valueOf(get_paoId());

    case _DISABLE_FLAG:
      return Boolean.valueOf(is_disableFlag());

    case _CURRENT_GEAR_NUMBER:
      return Integer.valueOf(get_currentGearNumber());

    case _LAST_GROUP_CONTROLLED:
      return Integer.valueOf(get_lastGroupControlled());

    case _PROGRAM_STATE:
      return Integer.valueOf(get_programState());

    case _REDUCTION_TOTAL:
      return Double.valueOf(get_reductionTotal());

    case _DIRECT_START_TIME:
      return Long.valueOf(get_directStartTime());

    case _DIRECT_STOP_TIME:
      return Long.valueOf(get_directStopTime());

    case _NOTIFY_ACTIVE_TIME:
      return Long.valueOf(get_notifyActiveTime());

    case _NOTIFY_INACTIVE_TIME:
      return Long.valueOf(get_notifyInactiveTime());

    case _STARTED_RAMPING_OUT_TIME:
      return Long.valueOf(get_startedRampingOutTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _PAO_ID:
      return isSet_paoId();
    case _DISABLE_FLAG:
      return isSet_disableFlag();
    case _CURRENT_GEAR_NUMBER:
      return isSet_currentGearNumber();
    case _LAST_GROUP_CONTROLLED:
      return isSet_lastGroupControlled();
    case _PROGRAM_STATE:
      return isSet_programState();
    case _REDUCTION_TOTAL:
      return isSet_reductionTotal();
    case _DIRECT_START_TIME:
      return isSet_directStartTime();
    case _DIRECT_STOP_TIME:
      return isSet_directStopTime();
    case _NOTIFY_ACTIVE_TIME:
      return isSet_notifyActiveTime();
    case _NOTIFY_INACTIVE_TIME:
      return isSet_notifyInactiveTime();
    case _STARTED_RAMPING_OUT_TIME:
      return isSet_startedRampingOutTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LMDynamicProgramData)
      return this.equals((LMDynamicProgramData)that);
    return false;
  }

  public boolean equals(LMDynamicProgramData that) {
    if (that == null)
      return false;

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__disableFlag = true;
    boolean that_present__disableFlag = true;
    if (this_present__disableFlag || that_present__disableFlag) {
      if (!(this_present__disableFlag && that_present__disableFlag))
        return false;
      if (this._disableFlag != that._disableFlag)
        return false;
    }

    boolean this_present__currentGearNumber = true;
    boolean that_present__currentGearNumber = true;
    if (this_present__currentGearNumber || that_present__currentGearNumber) {
      if (!(this_present__currentGearNumber && that_present__currentGearNumber))
        return false;
      if (this._currentGearNumber != that._currentGearNumber)
        return false;
    }

    boolean this_present__lastGroupControlled = true;
    boolean that_present__lastGroupControlled = true;
    if (this_present__lastGroupControlled || that_present__lastGroupControlled) {
      if (!(this_present__lastGroupControlled && that_present__lastGroupControlled))
        return false;
      if (this._lastGroupControlled != that._lastGroupControlled)
        return false;
    }

    boolean this_present__programState = true;
    boolean that_present__programState = true;
    if (this_present__programState || that_present__programState) {
      if (!(this_present__programState && that_present__programState))
        return false;
      if (this._programState != that._programState)
        return false;
    }

    boolean this_present__reductionTotal = true;
    boolean that_present__reductionTotal = true;
    if (this_present__reductionTotal || that_present__reductionTotal) {
      if (!(this_present__reductionTotal && that_present__reductionTotal))
        return false;
      if (this._reductionTotal != that._reductionTotal)
        return false;
    }

    boolean this_present__directStartTime = true;
    boolean that_present__directStartTime = true;
    if (this_present__directStartTime || that_present__directStartTime) {
      if (!(this_present__directStartTime && that_present__directStartTime))
        return false;
      if (this._directStartTime != that._directStartTime)
        return false;
    }

    boolean this_present__directStopTime = true;
    boolean that_present__directStopTime = true;
    if (this_present__directStopTime || that_present__directStopTime) {
      if (!(this_present__directStopTime && that_present__directStopTime))
        return false;
      if (this._directStopTime != that._directStopTime)
        return false;
    }

    boolean this_present__notifyActiveTime = true;
    boolean that_present__notifyActiveTime = true;
    if (this_present__notifyActiveTime || that_present__notifyActiveTime) {
      if (!(this_present__notifyActiveTime && that_present__notifyActiveTime))
        return false;
      if (this._notifyActiveTime != that._notifyActiveTime)
        return false;
    }

    boolean this_present__notifyInactiveTime = true;
    boolean that_present__notifyInactiveTime = true;
    if (this_present__notifyInactiveTime || that_present__notifyInactiveTime) {
      if (!(this_present__notifyInactiveTime && that_present__notifyInactiveTime))
        return false;
      if (this._notifyInactiveTime != that._notifyInactiveTime)
        return false;
    }

    boolean this_present__startedRampingOutTime = true;
    boolean that_present__startedRampingOutTime = true;
    if (this_present__startedRampingOutTime || that_present__startedRampingOutTime) {
      if (!(this_present__startedRampingOutTime && that_present__startedRampingOutTime))
        return false;
      if (this._startedRampingOutTime != that._startedRampingOutTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LMDynamicProgramData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LMDynamicProgramData typedOther = (LMDynamicProgramData)other;

    lastComparison = Boolean.valueOf(isSet_paoId()).compareTo(typedOther.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, typedOther._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_disableFlag()).compareTo(typedOther.isSet_disableFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_disableFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._disableFlag, typedOther._disableFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_currentGearNumber()).compareTo(typedOther.isSet_currentGearNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentGearNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentGearNumber, typedOther._currentGearNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_lastGroupControlled()).compareTo(typedOther.isSet_lastGroupControlled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastGroupControlled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastGroupControlled, typedOther._lastGroupControlled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_programState()).compareTo(typedOther.isSet_programState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_programState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._programState, typedOther._programState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_reductionTotal()).compareTo(typedOther.isSet_reductionTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_reductionTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._reductionTotal, typedOther._reductionTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_directStartTime()).compareTo(typedOther.isSet_directStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_directStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._directStartTime, typedOther._directStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_directStopTime()).compareTo(typedOther.isSet_directStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_directStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._directStopTime, typedOther._directStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_notifyActiveTime()).compareTo(typedOther.isSet_notifyActiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_notifyActiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._notifyActiveTime, typedOther._notifyActiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_notifyInactiveTime()).compareTo(typedOther.isSet_notifyInactiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_notifyInactiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._notifyInactiveTime, typedOther._notifyInactiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_startedRampingOutTime()).compareTo(typedOther.isSet_startedRampingOutTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_startedRampingOutTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._startedRampingOutTime, typedOther._startedRampingOutTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LMDynamicProgramData(");
    boolean first = true;

    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_disableFlag:");
    sb.append(this._disableFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentGearNumber:");
    sb.append(this._currentGearNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastGroupControlled:");
    sb.append(this._lastGroupControlled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_programState:");
    sb.append(this._programState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_reductionTotal:");
    sb.append(this._reductionTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_directStartTime:");
    sb.append(this._directStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_directStopTime:");
    sb.append(this._directStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_notifyActiveTime:");
    sb.append(this._notifyActiveTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_notifyInactiveTime:");
    sb.append(this._notifyInactiveTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_startedRampingOutTime:");
    sb.append(this._startedRampingOutTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_disableFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_disableFlag' is unset! Struct:" + toString());
    }

    if (!isSet_currentGearNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentGearNumber' is unset! Struct:" + toString());
    }

    if (!isSet_lastGroupControlled()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastGroupControlled' is unset! Struct:" + toString());
    }

    if (!isSet_programState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_programState' is unset! Struct:" + toString());
    }

    if (!isSet_reductionTotal()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_reductionTotal' is unset! Struct:" + toString());
    }

    if (!isSet_directStartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_directStartTime' is unset! Struct:" + toString());
    }

    if (!isSet_directStopTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_directStopTime' is unset! Struct:" + toString());
    }

    if (!isSet_notifyActiveTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_notifyActiveTime' is unset! Struct:" + toString());
    }

    if (!isSet_notifyInactiveTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_notifyInactiveTime' is unset! Struct:" + toString());
    }

    if (!isSet_startedRampingOutTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_startedRampingOutTime' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMDynamicProgramDataStandardSchemeFactory implements SchemeFactory {
    public LMDynamicProgramDataStandardScheme getScheme() {
      return new LMDynamicProgramDataStandardScheme();
    }
  }

  private static class LMDynamicProgramDataStandardScheme extends StandardScheme<LMDynamicProgramData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMDynamicProgramData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _DISABLE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._disableFlag = iprot.readBool();
              struct.set_disableFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _CURRENT_GEAR_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentGearNumber = iprot.readI32();
              struct.set_currentGearNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _LAST_GROUP_CONTROLLED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._lastGroupControlled = iprot.readI32();
              struct.set_lastGroupControlledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _PROGRAM_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._programState = iprot.readI32();
              struct.set_programStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _REDUCTION_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._reductionTotal = iprot.readDouble();
              struct.set_reductionTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _DIRECT_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._directStartTime = iprot.readI64();
              struct.set_directStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _DIRECT_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._directStopTime = iprot.readI64();
              struct.set_directStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _NOTIFY_ACTIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._notifyActiveTime = iprot.readI64();
              struct.set_notifyActiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _NOTIFY_INACTIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._notifyInactiveTime = iprot.readI64();
              struct.set_notifyInactiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _STARTED_RAMPING_OUT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._startedRampingOutTime = iprot.readI64();
              struct.set_startedRampingOutTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMDynamicProgramData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DISABLE_FLAG_FIELD_DESC);
      oprot.writeBool(struct._disableFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_GEAR_NUMBER_FIELD_DESC);
      oprot.writeI32(struct._currentGearNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_GROUP_CONTROLLED_FIELD_DESC);
      oprot.writeI32(struct._lastGroupControlled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PROGRAM_STATE_FIELD_DESC);
      oprot.writeI32(struct._programState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_REDUCTION_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct._reductionTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DIRECT_START_TIME_FIELD_DESC);
      oprot.writeI64(struct._directStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DIRECT_STOP_TIME_FIELD_DESC);
      oprot.writeI64(struct._directStopTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NOTIFY_ACTIVE_TIME_FIELD_DESC);
      oprot.writeI64(struct._notifyActiveTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NOTIFY_INACTIVE_TIME_FIELD_DESC);
      oprot.writeI64(struct._notifyInactiveTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STARTED_RAMPING_OUT_TIME_FIELD_DESC);
      oprot.writeI64(struct._startedRampingOutTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMDynamicProgramDataTupleSchemeFactory implements SchemeFactory {
    public LMDynamicProgramDataTupleScheme getScheme() {
      return new LMDynamicProgramDataTupleScheme();
    }
  }

  private static class LMDynamicProgramDataTupleScheme extends TupleScheme<LMDynamicProgramData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMDynamicProgramData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct._paoId);
      oprot.writeBool(struct._disableFlag);
      oprot.writeI32(struct._currentGearNumber);
      oprot.writeI32(struct._lastGroupControlled);
      oprot.writeI32(struct._programState);
      oprot.writeDouble(struct._reductionTotal);
      oprot.writeI64(struct._directStartTime);
      oprot.writeI64(struct._directStopTime);
      oprot.writeI64(struct._notifyActiveTime);
      oprot.writeI64(struct._notifyInactiveTime);
      oprot.writeI64(struct._startedRampingOutTime);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMDynamicProgramData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._disableFlag = iprot.readBool();
      struct.set_disableFlagIsSet(true);
      struct._currentGearNumber = iprot.readI32();
      struct.set_currentGearNumberIsSet(true);
      struct._lastGroupControlled = iprot.readI32();
      struct.set_lastGroupControlledIsSet(true);
      struct._programState = iprot.readI32();
      struct.set_programStateIsSet(true);
      struct._reductionTotal = iprot.readDouble();
      struct.set_reductionTotalIsSet(true);
      struct._directStartTime = iprot.readI64();
      struct.set_directStartTimeIsSet(true);
      struct._directStopTime = iprot.readI64();
      struct.set_directStopTimeIsSet(true);
      struct._notifyActiveTime = iprot.readI64();
      struct.set_notifyActiveTimeIsSet(true);
      struct._notifyInactiveTime = iprot.readI64();
      struct.set_notifyInactiveTimeIsSet(true);
      struct._startedRampingOutTime = iprot.readI64();
      struct.set_startedRampingOutTimeIsSet(true);
    }
  }

}


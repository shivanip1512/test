/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-06-24")
public class LMEcobeePlusControlCommand implements org.apache.thrift.TBase<LMEcobeePlusControlCommand, LMEcobeePlusControlCommand._Fields>, java.io.Serializable, Cloneable, Comparable<LMEcobeePlusControlCommand> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMEcobeePlusControlCommand");

  private static final org.apache.thrift.protocol.TField _PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_programId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _CONTROL_START_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlStartDateTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField _CONTROL_END_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlEndDateTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField _TEMPERATURE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("_temperatureOption", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField _RANDOM_TIME_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("_randomTimeSeconds", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LMEcobeePlusControlCommandStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LMEcobeePlusControlCommandTupleSchemeFactory();

  private int _programId; // required
  private int _groupId; // required
  private long _controlStartDateTime; // required
  private long _controlEndDateTime; // required
  private @org.apache.thrift.annotation.Nullable LMEcobeeTemperatureTypes _temperatureOption; // required
  private int _randomTimeSeconds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PROGRAM_ID((short)1, "_programId"),
    _GROUP_ID((short)2, "_groupId"),
    _CONTROL_START_DATE_TIME((short)3, "_controlStartDateTime"),
    _CONTROL_END_DATE_TIME((short)4, "_controlEndDateTime"),
    /**
     * 
     * @see LMEcobeeTemperatureTypes
     */
    _TEMPERATURE_OPTION((short)5, "_temperatureOption"),
    _RANDOM_TIME_SECONDS((short)6, "_randomTimeSeconds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PROGRAM_ID
          return _PROGRAM_ID;
        case 2: // _GROUP_ID
          return _GROUP_ID;
        case 3: // _CONTROL_START_DATE_TIME
          return _CONTROL_START_DATE_TIME;
        case 4: // _CONTROL_END_DATE_TIME
          return _CONTROL_END_DATE_TIME;
        case 5: // _TEMPERATURE_OPTION
          return _TEMPERATURE_OPTION;
        case 6: // _RANDOM_TIME_SECONDS
          return _RANDOM_TIME_SECONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PROGRAMID_ISSET_ID = 0;
  private static final int ___GROUPID_ISSET_ID = 1;
  private static final int ___CONTROLSTARTDATETIME_ISSET_ID = 2;
  private static final int ___CONTROLENDDATETIME_ISSET_ID = 3;
  private static final int ___RANDOMTIMESECONDS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("_programId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("_groupId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONTROL_START_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_controlStartDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._CONTROL_END_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_controlEndDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._TEMPERATURE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("_temperatureOption", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LMEcobeeTemperatureTypes.class)));
    tmpMap.put(_Fields._RANDOM_TIME_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("_randomTimeSeconds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMEcobeePlusControlCommand.class, metaDataMap);
  }

  public LMEcobeePlusControlCommand() {
  }

  public LMEcobeePlusControlCommand(
    int _programId,
    int _groupId,
    long _controlStartDateTime,
    long _controlEndDateTime,
    LMEcobeeTemperatureTypes _temperatureOption,
    int _randomTimeSeconds)
  {
    this();
    this._programId = _programId;
    set_programIdIsSet(true);
    this._groupId = _groupId;
    set_groupIdIsSet(true);
    this._controlStartDateTime = _controlStartDateTime;
    set_controlStartDateTimeIsSet(true);
    this._controlEndDateTime = _controlEndDateTime;
    set_controlEndDateTimeIsSet(true);
    this._temperatureOption = _temperatureOption;
    this._randomTimeSeconds = _randomTimeSeconds;
    set_randomTimeSecondsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMEcobeePlusControlCommand(LMEcobeePlusControlCommand other) {
    __isset_bitfield = other.__isset_bitfield;
    this._programId = other._programId;
    this._groupId = other._groupId;
    this._controlStartDateTime = other._controlStartDateTime;
    this._controlEndDateTime = other._controlEndDateTime;
    if (other.isSet_temperatureOption()) {
      this._temperatureOption = other._temperatureOption;
    }
    this._randomTimeSeconds = other._randomTimeSeconds;
  }

  public LMEcobeePlusControlCommand deepCopy() {
    return new LMEcobeePlusControlCommand(this);
  }

  @Override
  public void clear() {
    set_programIdIsSet(false);
    this._programId = 0;
    set_groupIdIsSet(false);
    this._groupId = 0;
    set_controlStartDateTimeIsSet(false);
    this._controlStartDateTime = 0;
    set_controlEndDateTimeIsSet(false);
    this._controlEndDateTime = 0;
    this._temperatureOption = null;
    set_randomTimeSecondsIsSet(false);
    this._randomTimeSeconds = 0;
  }

  public int get_programId() {
    return this._programId;
  }

  public void set_programId(int _programId) {
    this._programId = _programId;
    set_programIdIsSet(true);
  }

  public void unset_programId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PROGRAMID_ISSET_ID);
  }

  /** Returns true if field _programId is set (has been assigned a value) and false otherwise */
  public boolean isSet_programId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PROGRAMID_ISSET_ID);
  }

  public void set_programIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PROGRAMID_ISSET_ID, value);
  }

  public int get_groupId() {
    return this._groupId;
  }

  public void set_groupId(int _groupId) {
    this._groupId = _groupId;
    set_groupIdIsSet(true);
  }

  public void unset_groupId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___GROUPID_ISSET_ID);
  }

  /** Returns true if field _groupId is set (has been assigned a value) and false otherwise */
  public boolean isSet_groupId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___GROUPID_ISSET_ID);
  }

  public void set_groupIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___GROUPID_ISSET_ID, value);
  }

  public long get_controlStartDateTime() {
    return this._controlStartDateTime;
  }

  public void set_controlStartDateTime(long _controlStartDateTime) {
    this._controlStartDateTime = _controlStartDateTime;
    set_controlStartDateTimeIsSet(true);
  }

  public void unset_controlStartDateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLSTARTDATETIME_ISSET_ID);
  }

  /** Returns true if field _controlStartDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlStartDateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLSTARTDATETIME_ISSET_ID);
  }

  public void set_controlStartDateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLSTARTDATETIME_ISSET_ID, value);
  }

  public long get_controlEndDateTime() {
    return this._controlEndDateTime;
  }

  public void set_controlEndDateTime(long _controlEndDateTime) {
    this._controlEndDateTime = _controlEndDateTime;
    set_controlEndDateTimeIsSet(true);
  }

  public void unset_controlEndDateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLENDDATETIME_ISSET_ID);
  }

  /** Returns true if field _controlEndDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlEndDateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLENDDATETIME_ISSET_ID);
  }

  public void set_controlEndDateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLENDDATETIME_ISSET_ID, value);
  }

  /**
   * 
   * @see LMEcobeeTemperatureTypes
   */
  @org.apache.thrift.annotation.Nullable
  public LMEcobeeTemperatureTypes get_temperatureOption() {
    return this._temperatureOption;
  }

  /**
   * 
   * @see LMEcobeeTemperatureTypes
   */
  public void set_temperatureOption(@org.apache.thrift.annotation.Nullable LMEcobeeTemperatureTypes _temperatureOption) {
    this._temperatureOption = _temperatureOption;
  }

  public void unset_temperatureOption() {
    this._temperatureOption = null;
  }

  /** Returns true if field _temperatureOption is set (has been assigned a value) and false otherwise */
  public boolean isSet_temperatureOption() {
    return this._temperatureOption != null;
  }

  public void set_temperatureOptionIsSet(boolean value) {
    if (!value) {
      this._temperatureOption = null;
    }
  }

  public int get_randomTimeSeconds() {
    return this._randomTimeSeconds;
  }

  public void set_randomTimeSeconds(int _randomTimeSeconds) {
    this._randomTimeSeconds = _randomTimeSeconds;
    set_randomTimeSecondsIsSet(true);
  }

  public void unset_randomTimeSeconds() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___RANDOMTIMESECONDS_ISSET_ID);
  }

  /** Returns true if field _randomTimeSeconds is set (has been assigned a value) and false otherwise */
  public boolean isSet_randomTimeSeconds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___RANDOMTIMESECONDS_ISSET_ID);
  }

  public void set_randomTimeSecondsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___RANDOMTIMESECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _PROGRAM_ID:
      if (value == null) {
        unset_programId();
      } else {
        set_programId((java.lang.Integer)value);
      }
      break;

    case _GROUP_ID:
      if (value == null) {
        unset_groupId();
      } else {
        set_groupId((java.lang.Integer)value);
      }
      break;

    case _CONTROL_START_DATE_TIME:
      if (value == null) {
        unset_controlStartDateTime();
      } else {
        set_controlStartDateTime((java.lang.Long)value);
      }
      break;

    case _CONTROL_END_DATE_TIME:
      if (value == null) {
        unset_controlEndDateTime();
      } else {
        set_controlEndDateTime((java.lang.Long)value);
      }
      break;

    case _TEMPERATURE_OPTION:
      if (value == null) {
        unset_temperatureOption();
      } else {
        set_temperatureOption((LMEcobeeTemperatureTypes)value);
      }
      break;

    case _RANDOM_TIME_SECONDS:
      if (value == null) {
        unset_randomTimeSeconds();
      } else {
        set_randomTimeSeconds((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _PROGRAM_ID:
      return get_programId();

    case _GROUP_ID:
      return get_groupId();

    case _CONTROL_START_DATE_TIME:
      return get_controlStartDateTime();

    case _CONTROL_END_DATE_TIME:
      return get_controlEndDateTime();

    case _TEMPERATURE_OPTION:
      return get_temperatureOption();

    case _RANDOM_TIME_SECONDS:
      return get_randomTimeSeconds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _PROGRAM_ID:
      return isSet_programId();
    case _GROUP_ID:
      return isSet_groupId();
    case _CONTROL_START_DATE_TIME:
      return isSet_controlStartDateTime();
    case _CONTROL_END_DATE_TIME:
      return isSet_controlEndDateTime();
    case _TEMPERATURE_OPTION:
      return isSet_temperatureOption();
    case _RANDOM_TIME_SECONDS:
      return isSet_randomTimeSeconds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LMEcobeePlusControlCommand)
      return this.equals((LMEcobeePlusControlCommand)that);
    return false;
  }

  public boolean equals(LMEcobeePlusControlCommand that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__programId = true;
    boolean that_present__programId = true;
    if (this_present__programId || that_present__programId) {
      if (!(this_present__programId && that_present__programId))
        return false;
      if (this._programId != that._programId)
        return false;
    }

    boolean this_present__groupId = true;
    boolean that_present__groupId = true;
    if (this_present__groupId || that_present__groupId) {
      if (!(this_present__groupId && that_present__groupId))
        return false;
      if (this._groupId != that._groupId)
        return false;
    }

    boolean this_present__controlStartDateTime = true;
    boolean that_present__controlStartDateTime = true;
    if (this_present__controlStartDateTime || that_present__controlStartDateTime) {
      if (!(this_present__controlStartDateTime && that_present__controlStartDateTime))
        return false;
      if (this._controlStartDateTime != that._controlStartDateTime)
        return false;
    }

    boolean this_present__controlEndDateTime = true;
    boolean that_present__controlEndDateTime = true;
    if (this_present__controlEndDateTime || that_present__controlEndDateTime) {
      if (!(this_present__controlEndDateTime && that_present__controlEndDateTime))
        return false;
      if (this._controlEndDateTime != that._controlEndDateTime)
        return false;
    }

    boolean this_present__temperatureOption = true && this.isSet_temperatureOption();
    boolean that_present__temperatureOption = true && that.isSet_temperatureOption();
    if (this_present__temperatureOption || that_present__temperatureOption) {
      if (!(this_present__temperatureOption && that_present__temperatureOption))
        return false;
      if (!this._temperatureOption.equals(that._temperatureOption))
        return false;
    }

    boolean this_present__randomTimeSeconds = true;
    boolean that_present__randomTimeSeconds = true;
    if (this_present__randomTimeSeconds || that_present__randomTimeSeconds) {
      if (!(this_present__randomTimeSeconds && that_present__randomTimeSeconds))
        return false;
      if (this._randomTimeSeconds != that._randomTimeSeconds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + _programId;

    hashCode = hashCode * 8191 + _groupId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_controlStartDateTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_controlEndDateTime);

    hashCode = hashCode * 8191 + ((isSet_temperatureOption()) ? 131071 : 524287);
    if (isSet_temperatureOption())
      hashCode = hashCode * 8191 + _temperatureOption.getValue();

    hashCode = hashCode * 8191 + _randomTimeSeconds;

    return hashCode;
  }

  @Override
  public int compareTo(LMEcobeePlusControlCommand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_programId()).compareTo(other.isSet_programId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_programId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._programId, other._programId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_groupId()).compareTo(other.isSet_groupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_groupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupId, other._groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlStartDateTime()).compareTo(other.isSet_controlStartDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlStartDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlStartDateTime, other._controlStartDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_controlEndDateTime()).compareTo(other.isSet_controlEndDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlEndDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlEndDateTime, other._controlEndDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_temperatureOption()).compareTo(other.isSet_temperatureOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_temperatureOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._temperatureOption, other._temperatureOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_randomTimeSeconds()).compareTo(other.isSet_randomTimeSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_randomTimeSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._randomTimeSeconds, other._randomTimeSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LMEcobeePlusControlCommand(");
    boolean first = true;

    sb.append("_programId:");
    sb.append(this._programId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_groupId:");
    sb.append(this._groupId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlStartDateTime:");
    sb.append(this._controlStartDateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlEndDateTime:");
    sb.append(this._controlEndDateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_temperatureOption:");
    if (this._temperatureOption == null) {
      sb.append("null");
    } else {
      sb.append(this._temperatureOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_randomTimeSeconds:");
    sb.append(this._randomTimeSeconds);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_programId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_programId' is unset! Struct:" + toString());
    }

    if (!isSet_groupId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_groupId' is unset! Struct:" + toString());
    }

    if (!isSet_controlStartDateTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlStartDateTime' is unset! Struct:" + toString());
    }

    if (!isSet_controlEndDateTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlEndDateTime' is unset! Struct:" + toString());
    }

    if (!isSet_temperatureOption()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_temperatureOption' is unset! Struct:" + toString());
    }

    if (!isSet_randomTimeSeconds()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_randomTimeSeconds' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMEcobeePlusControlCommandStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMEcobeePlusControlCommandStandardScheme getScheme() {
      return new LMEcobeePlusControlCommandStandardScheme();
    }
  }

  private static class LMEcobeePlusControlCommandStandardScheme extends org.apache.thrift.scheme.StandardScheme<LMEcobeePlusControlCommand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMEcobeePlusControlCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PROGRAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._programId = iprot.readI32();
              struct.set_programIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._groupId = iprot.readI32();
              struct.set_groupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _CONTROL_START_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._controlStartDateTime = iprot.readI64();
              struct.set_controlStartDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _CONTROL_END_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._controlEndDateTime = iprot.readI64();
              struct.set_controlEndDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _TEMPERATURE_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._temperatureOption = com.cannontech.messaging.serialization.thrift.generated.LMEcobeeTemperatureTypes.findByValue(iprot.readI32());
              struct.set_temperatureOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _RANDOM_TIME_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._randomTimeSeconds = iprot.readI32();
              struct.set_randomTimeSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMEcobeePlusControlCommand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PROGRAM_ID_FIELD_DESC);
      oprot.writeI32(struct._programId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct._groupId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_START_DATE_TIME_FIELD_DESC);
      oprot.writeI64(struct._controlStartDateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_END_DATE_TIME_FIELD_DESC);
      oprot.writeI64(struct._controlEndDateTime);
      oprot.writeFieldEnd();
      if (struct._temperatureOption != null) {
        oprot.writeFieldBegin(_TEMPERATURE_OPTION_FIELD_DESC);
        oprot.writeI32(struct._temperatureOption.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_RANDOM_TIME_SECONDS_FIELD_DESC);
      oprot.writeI32(struct._randomTimeSeconds);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMEcobeePlusControlCommandTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LMEcobeePlusControlCommandTupleScheme getScheme() {
      return new LMEcobeePlusControlCommandTupleScheme();
    }
  }

  private static class LMEcobeePlusControlCommandTupleScheme extends org.apache.thrift.scheme.TupleScheme<LMEcobeePlusControlCommand> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMEcobeePlusControlCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct._programId);
      oprot.writeI32(struct._groupId);
      oprot.writeI64(struct._controlStartDateTime);
      oprot.writeI64(struct._controlEndDateTime);
      oprot.writeI32(struct._temperatureOption.getValue());
      oprot.writeI32(struct._randomTimeSeconds);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMEcobeePlusControlCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._programId = iprot.readI32();
      struct.set_programIdIsSet(true);
      struct._groupId = iprot.readI32();
      struct.set_groupIdIsSet(true);
      struct._controlStartDateTime = iprot.readI64();
      struct.set_controlStartDateTimeIsSet(true);
      struct._controlEndDateTime = iprot.readI64();
      struct.set_controlEndDateTimeIsSet(true);
      struct._temperatureOption = com.cannontech.messaging.serialization.thrift.generated.LMEcobeeTemperatureTypes.findByValue(iprot.readI32());
      struct.set_temperatureOptionIsSet(true);
      struct._randomTimeSeconds = iprot.readI32();
      struct.set_randomTimeSecondsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


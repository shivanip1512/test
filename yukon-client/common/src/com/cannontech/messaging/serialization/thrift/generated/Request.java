/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_deviceId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _COMMAND_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("_commandString", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _ROUTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_routeId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField _MACRO_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("_macroOffset", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField _ATTEMPT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("_attemptNum", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField _GROUP_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupMessageId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField _USER_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_userMessageId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField _OPTIONS_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("_optionsField", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestTupleSchemeFactory());
  }

  private com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage; // required
  private int _deviceId; // required
  private String _commandString; // required
  private int _routeId; // required
  private int _macroOffset; // required
  private int _attemptNum; // required
  private int _groupMessageId; // required
  private int _userMessageId; // required
  private int _optionsField; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _DEVICE_ID((short)2, "_deviceId"),
    _COMMAND_STRING((short)3, "_commandString"),
    _ROUTE_ID((short)4, "_routeId"),
    _MACRO_OFFSET((short)5, "_macroOffset"),
    _ATTEMPT_NUM((short)6, "_attemptNum"),
    _GROUP_MESSAGE_ID((short)7, "_groupMessageId"),
    _USER_MESSAGE_ID((short)8, "_userMessageId"),
    _OPTIONS_FIELD((short)9, "_optionsField");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _DEVICE_ID
          return _DEVICE_ID;
        case 3: // _COMMAND_STRING
          return _COMMAND_STRING;
        case 4: // _ROUTE_ID
          return _ROUTE_ID;
        case 5: // _MACRO_OFFSET
          return _MACRO_OFFSET;
        case 6: // _ATTEMPT_NUM
          return _ATTEMPT_NUM;
        case 7: // _GROUP_MESSAGE_ID
          return _GROUP_MESSAGE_ID;
        case 8: // _USER_MESSAGE_ID
          return _USER_MESSAGE_ID;
        case 9: // _OPTIONS_FIELD
          return _OPTIONS_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___DEVICEID_ISSET_ID = 0;
  private static final int ___ROUTEID_ISSET_ID = 1;
  private static final int ___MACROOFFSET_ISSET_ID = 2;
  private static final int ___ATTEMPTNUM_ISSET_ID = 3;
  private static final int ___GROUPMESSAGEID_ISSET_ID = 4;
  private static final int ___USERMESSAGEID_ISSET_ID = 5;
  private static final int ___OPTIONSFIELD_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.Message.class)));
    tmpMap.put(_Fields._DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("_deviceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._COMMAND_STRING, new org.apache.thrift.meta_data.FieldMetaData("_commandString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._ROUTE_ID, new org.apache.thrift.meta_data.FieldMetaData("_routeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MACRO_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("_macroOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._ATTEMPT_NUM, new org.apache.thrift.meta_data.FieldMetaData("_attemptNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._GROUP_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("_groupMessageId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._USER_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("_userMessageId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._OPTIONS_FIELD, new org.apache.thrift.meta_data.FieldMetaData("_optionsField", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
  }

  public Request(
    com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage,
    int _deviceId,
    String _commandString,
    int _routeId,
    int _macroOffset,
    int _attemptNum,
    int _groupMessageId,
    int _userMessageId,
    int _optionsField)
  {
    this();
    this._baseMessage = _baseMessage;
    this._deviceId = _deviceId;
    set_deviceIdIsSet(true);
    this._commandString = _commandString;
    this._routeId = _routeId;
    set_routeIdIsSet(true);
    this._macroOffset = _macroOffset;
    set_macroOffsetIsSet(true);
    this._attemptNum = _attemptNum;
    set_attemptNumIsSet(true);
    this._groupMessageId = _groupMessageId;
    set_groupMessageIdIsSet(true);
    this._userMessageId = _userMessageId;
    set_userMessageIdIsSet(true);
    this._optionsField = _optionsField;
    set_optionsFieldIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message(other._baseMessage);
    }
    this._deviceId = other._deviceId;
    if (other.isSet_commandString()) {
      this._commandString = other._commandString;
    }
    this._routeId = other._routeId;
    this._macroOffset = other._macroOffset;
    this._attemptNum = other._attemptNum;
    this._groupMessageId = other._groupMessageId;
    this._userMessageId = other._userMessageId;
    this._optionsField = other._optionsField;
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_deviceIdIsSet(false);
    this._deviceId = 0;
    this._commandString = null;
    set_routeIdIsSet(false);
    this._routeId = 0;
    set_macroOffsetIsSet(false);
    this._macroOffset = 0;
    set_attemptNumIsSet(false);
    this._attemptNum = 0;
    set_groupMessageIdIsSet(false);
    this._groupMessageId = 0;
    set_userMessageIdIsSet(false);
    this._userMessageId = 0;
    set_optionsFieldIsSet(false);
    this._optionsField = 0;
  }

  public com.cannontech.messaging.serialization.thrift.generated.Message get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_deviceId() {
    return this._deviceId;
  }

  public void set_deviceId(int _deviceId) {
    this._deviceId = _deviceId;
    set_deviceIdIsSet(true);
  }

  public void unset_deviceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___DEVICEID_ISSET_ID);
  }

  /** Returns true if field _deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSet_deviceId() {
    return EncodingUtils.testBit(__isset_bitfield, ___DEVICEID_ISSET_ID);
  }

  public void set_deviceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___DEVICEID_ISSET_ID, value);
  }

  public String get_commandString() {
    return this._commandString;
  }

  public void set_commandString(String _commandString) {
    this._commandString = _commandString;
  }

  public void unset_commandString() {
    this._commandString = null;
  }

  /** Returns true if field _commandString is set (has been assigned a value) and false otherwise */
  public boolean isSet_commandString() {
    return this._commandString != null;
  }

  public void set_commandStringIsSet(boolean value) {
    if (!value) {
      this._commandString = null;
    }
  }

  public int get_routeId() {
    return this._routeId;
  }

  public void set_routeId(int _routeId) {
    this._routeId = _routeId;
    set_routeIdIsSet(true);
  }

  public void unset_routeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___ROUTEID_ISSET_ID);
  }

  /** Returns true if field _routeId is set (has been assigned a value) and false otherwise */
  public boolean isSet_routeId() {
    return EncodingUtils.testBit(__isset_bitfield, ___ROUTEID_ISSET_ID);
  }

  public void set_routeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___ROUTEID_ISSET_ID, value);
  }

  public int get_macroOffset() {
    return this._macroOffset;
  }

  public void set_macroOffset(int _macroOffset) {
    this._macroOffset = _macroOffset;
    set_macroOffsetIsSet(true);
  }

  public void unset_macroOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___MACROOFFSET_ISSET_ID);
  }

  /** Returns true if field _macroOffset is set (has been assigned a value) and false otherwise */
  public boolean isSet_macroOffset() {
    return EncodingUtils.testBit(__isset_bitfield, ___MACROOFFSET_ISSET_ID);
  }

  public void set_macroOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___MACROOFFSET_ISSET_ID, value);
  }

  public int get_attemptNum() {
    return this._attemptNum;
  }

  public void set_attemptNum(int _attemptNum) {
    this._attemptNum = _attemptNum;
    set_attemptNumIsSet(true);
  }

  public void unset_attemptNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___ATTEMPTNUM_ISSET_ID);
  }

  /** Returns true if field _attemptNum is set (has been assigned a value) and false otherwise */
  public boolean isSet_attemptNum() {
    return EncodingUtils.testBit(__isset_bitfield, ___ATTEMPTNUM_ISSET_ID);
  }

  public void set_attemptNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___ATTEMPTNUM_ISSET_ID, value);
  }

  public int get_groupMessageId() {
    return this._groupMessageId;
  }

  public void set_groupMessageId(int _groupMessageId) {
    this._groupMessageId = _groupMessageId;
    set_groupMessageIdIsSet(true);
  }

  public void unset_groupMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___GROUPMESSAGEID_ISSET_ID);
  }

  /** Returns true if field _groupMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSet_groupMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, ___GROUPMESSAGEID_ISSET_ID);
  }

  public void set_groupMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___GROUPMESSAGEID_ISSET_ID, value);
  }

  public int get_userMessageId() {
    return this._userMessageId;
  }

  public void set_userMessageId(int _userMessageId) {
    this._userMessageId = _userMessageId;
    set_userMessageIdIsSet(true);
  }

  public void unset_userMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___USERMESSAGEID_ISSET_ID);
  }

  /** Returns true if field _userMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSet_userMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, ___USERMESSAGEID_ISSET_ID);
  }

  public void set_userMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___USERMESSAGEID_ISSET_ID, value);
  }

  public int get_optionsField() {
    return this._optionsField;
  }

  public void set_optionsField(int _optionsField) {
    this._optionsField = _optionsField;
    set_optionsFieldIsSet(true);
  }

  public void unset_optionsField() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___OPTIONSFIELD_ISSET_ID);
  }

  /** Returns true if field _optionsField is set (has been assigned a value) and false otherwise */
  public boolean isSet_optionsField() {
    return EncodingUtils.testBit(__isset_bitfield, ___OPTIONSFIELD_ISSET_ID);
  }

  public void set_optionsFieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___OPTIONSFIELD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.Message)value);
      }
      break;

    case _DEVICE_ID:
      if (value == null) {
        unset_deviceId();
      } else {
        set_deviceId((Integer)value);
      }
      break;

    case _COMMAND_STRING:
      if (value == null) {
        unset_commandString();
      } else {
        set_commandString((String)value);
      }
      break;

    case _ROUTE_ID:
      if (value == null) {
        unset_routeId();
      } else {
        set_routeId((Integer)value);
      }
      break;

    case _MACRO_OFFSET:
      if (value == null) {
        unset_macroOffset();
      } else {
        set_macroOffset((Integer)value);
      }
      break;

    case _ATTEMPT_NUM:
      if (value == null) {
        unset_attemptNum();
      } else {
        set_attemptNum((Integer)value);
      }
      break;

    case _GROUP_MESSAGE_ID:
      if (value == null) {
        unset_groupMessageId();
      } else {
        set_groupMessageId((Integer)value);
      }
      break;

    case _USER_MESSAGE_ID:
      if (value == null) {
        unset_userMessageId();
      } else {
        set_userMessageId((Integer)value);
      }
      break;

    case _OPTIONS_FIELD:
      if (value == null) {
        unset_optionsField();
      } else {
        set_optionsField((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _DEVICE_ID:
      return Integer.valueOf(get_deviceId());

    case _COMMAND_STRING:
      return get_commandString();

    case _ROUTE_ID:
      return Integer.valueOf(get_routeId());

    case _MACRO_OFFSET:
      return Integer.valueOf(get_macroOffset());

    case _ATTEMPT_NUM:
      return Integer.valueOf(get_attemptNum());

    case _GROUP_MESSAGE_ID:
      return Integer.valueOf(get_groupMessageId());

    case _USER_MESSAGE_ID:
      return Integer.valueOf(get_userMessageId());

    case _OPTIONS_FIELD:
      return Integer.valueOf(get_optionsField());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _DEVICE_ID:
      return isSet_deviceId();
    case _COMMAND_STRING:
      return isSet_commandString();
    case _ROUTE_ID:
      return isSet_routeId();
    case _MACRO_OFFSET:
      return isSet_macroOffset();
    case _ATTEMPT_NUM:
      return isSet_attemptNum();
    case _GROUP_MESSAGE_ID:
      return isSet_groupMessageId();
    case _USER_MESSAGE_ID:
      return isSet_userMessageId();
    case _OPTIONS_FIELD:
      return isSet_optionsField();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__deviceId = true;
    boolean that_present__deviceId = true;
    if (this_present__deviceId || that_present__deviceId) {
      if (!(this_present__deviceId && that_present__deviceId))
        return false;
      if (this._deviceId != that._deviceId)
        return false;
    }

    boolean this_present__commandString = true && this.isSet_commandString();
    boolean that_present__commandString = true && that.isSet_commandString();
    if (this_present__commandString || that_present__commandString) {
      if (!(this_present__commandString && that_present__commandString))
        return false;
      if (!this._commandString.equals(that._commandString))
        return false;
    }

    boolean this_present__routeId = true;
    boolean that_present__routeId = true;
    if (this_present__routeId || that_present__routeId) {
      if (!(this_present__routeId && that_present__routeId))
        return false;
      if (this._routeId != that._routeId)
        return false;
    }

    boolean this_present__macroOffset = true;
    boolean that_present__macroOffset = true;
    if (this_present__macroOffset || that_present__macroOffset) {
      if (!(this_present__macroOffset && that_present__macroOffset))
        return false;
      if (this._macroOffset != that._macroOffset)
        return false;
    }

    boolean this_present__attemptNum = true;
    boolean that_present__attemptNum = true;
    if (this_present__attemptNum || that_present__attemptNum) {
      if (!(this_present__attemptNum && that_present__attemptNum))
        return false;
      if (this._attemptNum != that._attemptNum)
        return false;
    }

    boolean this_present__groupMessageId = true;
    boolean that_present__groupMessageId = true;
    if (this_present__groupMessageId || that_present__groupMessageId) {
      if (!(this_present__groupMessageId && that_present__groupMessageId))
        return false;
      if (this._groupMessageId != that._groupMessageId)
        return false;
    }

    boolean this_present__userMessageId = true;
    boolean that_present__userMessageId = true;
    if (this_present__userMessageId || that_present__userMessageId) {
      if (!(this_present__userMessageId && that_present__userMessageId))
        return false;
      if (this._userMessageId != that._userMessageId)
        return false;
    }

    boolean this_present__optionsField = true;
    boolean that_present__optionsField = true;
    if (this_present__optionsField || that_present__optionsField) {
      if (!(this_present__optionsField && that_present__optionsField))
        return false;
      if (this._optionsField != that._optionsField)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Request typedOther = (Request)other;

    lastComparison = Boolean.valueOf(isSet_baseMessage()).compareTo(typedOther.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, typedOther._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_deviceId()).compareTo(typedOther.isSet_deviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_deviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._deviceId, typedOther._deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_commandString()).compareTo(typedOther.isSet_commandString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_commandString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._commandString, typedOther._commandString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_routeId()).compareTo(typedOther.isSet_routeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_routeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._routeId, typedOther._routeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_macroOffset()).compareTo(typedOther.isSet_macroOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_macroOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._macroOffset, typedOther._macroOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_attemptNum()).compareTo(typedOther.isSet_attemptNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_attemptNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._attemptNum, typedOther._attemptNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_groupMessageId()).compareTo(typedOther.isSet_groupMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_groupMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupMessageId, typedOther._groupMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_userMessageId()).compareTo(typedOther.isSet_userMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_userMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._userMessageId, typedOther._userMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_optionsField()).compareTo(typedOther.isSet_optionsField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_optionsField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._optionsField, typedOther._optionsField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_deviceId:");
    sb.append(this._deviceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_commandString:");
    if (this._commandString == null) {
      sb.append("null");
    } else {
      sb.append(this._commandString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_routeId:");
    sb.append(this._routeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_macroOffset:");
    sb.append(this._macroOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_attemptNum:");
    sb.append(this._attemptNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_groupMessageId:");
    sb.append(this._groupMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_userMessageId:");
    sb.append(this._userMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_optionsField:");
    sb.append(this._optionsField);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_deviceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_deviceId' is unset! Struct:" + toString());
    }

    if (!isSet_commandString()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_commandString' is unset! Struct:" + toString());
    }

    if (!isSet_routeId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_routeId' is unset! Struct:" + toString());
    }

    if (!isSet_macroOffset()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_macroOffset' is unset! Struct:" + toString());
    }

    if (!isSet_attemptNum()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_attemptNum' is unset! Struct:" + toString());
    }

    if (!isSet_groupMessageId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_groupMessageId' is unset! Struct:" + toString());
    }

    if (!isSet_userMessageId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_userMessageId' is unset! Struct:" + toString());
    }

    if (!isSet_optionsField()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_optionsField' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._deviceId = iprot.readI32();
              struct.set_deviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _COMMAND_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._commandString = iprot.readString();
              struct.set_commandStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _ROUTE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._routeId = iprot.readI32();
              struct.set_routeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _MACRO_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._macroOffset = iprot.readI32();
              struct.set_macroOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _ATTEMPT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._attemptNum = iprot.readI32();
              struct.set_attemptNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _GROUP_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._groupMessageId = iprot.readI32();
              struct.set_groupMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _USER_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._userMessageId = iprot.readI32();
              struct.set_userMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _OPTIONS_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._optionsField = iprot.readI32();
              struct.set_optionsFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_DEVICE_ID_FIELD_DESC);
      oprot.writeI32(struct._deviceId);
      oprot.writeFieldEnd();
      if (struct._commandString != null) {
        oprot.writeFieldBegin(_COMMAND_STRING_FIELD_DESC);
        oprot.writeString(struct._commandString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_ROUTE_ID_FIELD_DESC);
      oprot.writeI32(struct._routeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MACRO_OFFSET_FIELD_DESC);
      oprot.writeI32(struct._macroOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ATTEMPT_NUM_FIELD_DESC);
      oprot.writeI32(struct._attemptNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_GROUP_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct._groupMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_USER_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct._userMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_OPTIONS_FIELD_FIELD_DESC);
      oprot.writeI32(struct._optionsField);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._deviceId);
      oprot.writeString(struct._commandString);
      oprot.writeI32(struct._routeId);
      oprot.writeI32(struct._macroOffset);
      oprot.writeI32(struct._attemptNum);
      oprot.writeI32(struct._groupMessageId);
      oprot.writeI32(struct._userMessageId);
      oprot.writeI32(struct._optionsField);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._deviceId = iprot.readI32();
      struct.set_deviceIdIsSet(true);
      struct._commandString = iprot.readString();
      struct.set_commandStringIsSet(true);
      struct._routeId = iprot.readI32();
      struct.set_routeIdIsSet(true);
      struct._macroOffset = iprot.readI32();
      struct.set_macroOffsetIsSet(true);
      struct._attemptNum = iprot.readI32();
      struct.set_attemptNumIsSet(true);
      struct._groupMessageId = iprot.readI32();
      struct.set_groupMessageIdIsSet(true);
      struct._userMessageId = iprot.readI32();
      struct.set_userMessageIdIsSet(true);
      struct._optionsField = iprot.readI32();
      struct.set_optionsFieldIsSet(true);
    }
  }

}


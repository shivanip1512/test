/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LMProgramControlWindow implements org.apache.thrift.TBase<LMProgramControlWindow, LMProgramControlWindow._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMProgramControlWindow");

  private static final org.apache.thrift.protocol.TField _PAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_paoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _WINDOW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("_windowNumber", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _AVAILABLE_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_availableStartTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _AVAILABLE_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_availableStopTime", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LMProgramControlWindowStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LMProgramControlWindowTupleSchemeFactory());
  }

  private int _paoId; // required
  private int _windowNumber; // required
  private int _availableStartTime; // required
  private int _availableStopTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _PAO_ID((short)1, "_paoId"),
    _WINDOW_NUMBER((short)2, "_windowNumber"),
    _AVAILABLE_START_TIME((short)3, "_availableStartTime"),
    _AVAILABLE_STOP_TIME((short)4, "_availableStopTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _PAO_ID
          return _PAO_ID;
        case 2: // _WINDOW_NUMBER
          return _WINDOW_NUMBER;
        case 3: // _AVAILABLE_START_TIME
          return _AVAILABLE_START_TIME;
        case 4: // _AVAILABLE_STOP_TIME
          return _AVAILABLE_STOP_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PAOID_ISSET_ID = 0;
  private static final int ___WINDOWNUMBER_ISSET_ID = 1;
  private static final int ___AVAILABLESTARTTIME_ISSET_ID = 2;
  private static final int ___AVAILABLESTOPTIME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._PAO_ID, new org.apache.thrift.meta_data.FieldMetaData("_paoId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._WINDOW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("_windowNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._AVAILABLE_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("_availableStartTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._AVAILABLE_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("_availableStopTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMProgramControlWindow.class, metaDataMap);
  }

  public LMProgramControlWindow() {
  }

  public LMProgramControlWindow(
    int _paoId,
    int _windowNumber,
    int _availableStartTime,
    int _availableStopTime)
  {
    this();
    this._paoId = _paoId;
    set_paoIdIsSet(true);
    this._windowNumber = _windowNumber;
    set_windowNumberIsSet(true);
    this._availableStartTime = _availableStartTime;
    set_availableStartTimeIsSet(true);
    this._availableStopTime = _availableStopTime;
    set_availableStopTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMProgramControlWindow(LMProgramControlWindow other) {
    __isset_bitfield = other.__isset_bitfield;
    this._paoId = other._paoId;
    this._windowNumber = other._windowNumber;
    this._availableStartTime = other._availableStartTime;
    this._availableStopTime = other._availableStopTime;
  }

  public LMProgramControlWindow deepCopy() {
    return new LMProgramControlWindow(this);
  }

  @Override
  public void clear() {
    set_paoIdIsSet(false);
    this._paoId = 0;
    set_windowNumberIsSet(false);
    this._windowNumber = 0;
    set_availableStartTimeIsSet(false);
    this._availableStartTime = 0;
    set_availableStopTimeIsSet(false);
    this._availableStopTime = 0;
  }

  public int get_paoId() {
    return this._paoId;
  }

  public void set_paoId(int _paoId) {
    this._paoId = _paoId;
    set_paoIdIsSet(true);
  }

  public void unset_paoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  /** Returns true if field _paoId is set (has been assigned a value) and false otherwise */
  public boolean isSet_paoId() {
    return EncodingUtils.testBit(__isset_bitfield, ___PAOID_ISSET_ID);
  }

  public void set_paoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___PAOID_ISSET_ID, value);
  }

  public int get_windowNumber() {
    return this._windowNumber;
  }

  public void set_windowNumber(int _windowNumber) {
    this._windowNumber = _windowNumber;
    set_windowNumberIsSet(true);
  }

  public void unset_windowNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___WINDOWNUMBER_ISSET_ID);
  }

  /** Returns true if field _windowNumber is set (has been assigned a value) and false otherwise */
  public boolean isSet_windowNumber() {
    return EncodingUtils.testBit(__isset_bitfield, ___WINDOWNUMBER_ISSET_ID);
  }

  public void set_windowNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___WINDOWNUMBER_ISSET_ID, value);
  }

  public int get_availableStartTime() {
    return this._availableStartTime;
  }

  public void set_availableStartTime(int _availableStartTime) {
    this._availableStartTime = _availableStartTime;
    set_availableStartTimeIsSet(true);
  }

  public void unset_availableStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___AVAILABLESTARTTIME_ISSET_ID);
  }

  /** Returns true if field _availableStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_availableStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___AVAILABLESTARTTIME_ISSET_ID);
  }

  public void set_availableStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___AVAILABLESTARTTIME_ISSET_ID, value);
  }

  public int get_availableStopTime() {
    return this._availableStopTime;
  }

  public void set_availableStopTime(int _availableStopTime) {
    this._availableStopTime = _availableStopTime;
    set_availableStopTimeIsSet(true);
  }

  public void unset_availableStopTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___AVAILABLESTOPTIME_ISSET_ID);
  }

  /** Returns true if field _availableStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_availableStopTime() {
    return EncodingUtils.testBit(__isset_bitfield, ___AVAILABLESTOPTIME_ISSET_ID);
  }

  public void set_availableStopTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___AVAILABLESTOPTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _PAO_ID:
      if (value == null) {
        unset_paoId();
      } else {
        set_paoId((Integer)value);
      }
      break;

    case _WINDOW_NUMBER:
      if (value == null) {
        unset_windowNumber();
      } else {
        set_windowNumber((Integer)value);
      }
      break;

    case _AVAILABLE_START_TIME:
      if (value == null) {
        unset_availableStartTime();
      } else {
        set_availableStartTime((Integer)value);
      }
      break;

    case _AVAILABLE_STOP_TIME:
      if (value == null) {
        unset_availableStopTime();
      } else {
        set_availableStopTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _PAO_ID:
      return Integer.valueOf(get_paoId());

    case _WINDOW_NUMBER:
      return Integer.valueOf(get_windowNumber());

    case _AVAILABLE_START_TIME:
      return Integer.valueOf(get_availableStartTime());

    case _AVAILABLE_STOP_TIME:
      return Integer.valueOf(get_availableStopTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _PAO_ID:
      return isSet_paoId();
    case _WINDOW_NUMBER:
      return isSet_windowNumber();
    case _AVAILABLE_START_TIME:
      return isSet_availableStartTime();
    case _AVAILABLE_STOP_TIME:
      return isSet_availableStopTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LMProgramControlWindow)
      return this.equals((LMProgramControlWindow)that);
    return false;
  }

  public boolean equals(LMProgramControlWindow that) {
    if (that == null)
      return false;

    boolean this_present__paoId = true;
    boolean that_present__paoId = true;
    if (this_present__paoId || that_present__paoId) {
      if (!(this_present__paoId && that_present__paoId))
        return false;
      if (this._paoId != that._paoId)
        return false;
    }

    boolean this_present__windowNumber = true;
    boolean that_present__windowNumber = true;
    if (this_present__windowNumber || that_present__windowNumber) {
      if (!(this_present__windowNumber && that_present__windowNumber))
        return false;
      if (this._windowNumber != that._windowNumber)
        return false;
    }

    boolean this_present__availableStartTime = true;
    boolean that_present__availableStartTime = true;
    if (this_present__availableStartTime || that_present__availableStartTime) {
      if (!(this_present__availableStartTime && that_present__availableStartTime))
        return false;
      if (this._availableStartTime != that._availableStartTime)
        return false;
    }

    boolean this_present__availableStopTime = true;
    boolean that_present__availableStopTime = true;
    if (this_present__availableStopTime || that_present__availableStopTime) {
      if (!(this_present__availableStopTime && that_present__availableStopTime))
        return false;
      if (this._availableStopTime != that._availableStopTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LMProgramControlWindow other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LMProgramControlWindow typedOther = (LMProgramControlWindow)other;

    lastComparison = Boolean.valueOf(isSet_paoId()).compareTo(typedOther.isSet_paoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_paoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._paoId, typedOther._paoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_windowNumber()).compareTo(typedOther.isSet_windowNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_windowNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._windowNumber, typedOther._windowNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_availableStartTime()).compareTo(typedOther.isSet_availableStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_availableStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._availableStartTime, typedOther._availableStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_availableStopTime()).compareTo(typedOther.isSet_availableStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_availableStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._availableStopTime, typedOther._availableStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LMProgramControlWindow(");
    boolean first = true;

    sb.append("_paoId:");
    sb.append(this._paoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_windowNumber:");
    sb.append(this._windowNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_availableStartTime:");
    sb.append(this._availableStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_availableStopTime:");
    sb.append(this._availableStopTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_paoId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_paoId' is unset! Struct:" + toString());
    }

    if (!isSet_windowNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_windowNumber' is unset! Struct:" + toString());
    }

    if (!isSet_availableStartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_availableStartTime' is unset! Struct:" + toString());
    }

    if (!isSet_availableStopTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_availableStopTime' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMProgramControlWindowStandardSchemeFactory implements SchemeFactory {
    public LMProgramControlWindowStandardScheme getScheme() {
      return new LMProgramControlWindowStandardScheme();
    }
  }

  private static class LMProgramControlWindowStandardScheme extends StandardScheme<LMProgramControlWindow> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMProgramControlWindow struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _PAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._paoId = iprot.readI32();
              struct.set_paoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _WINDOW_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._windowNumber = iprot.readI32();
              struct.set_windowNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _AVAILABLE_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._availableStartTime = iprot.readI32();
              struct.set_availableStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _AVAILABLE_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._availableStopTime = iprot.readI32();
              struct.set_availableStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMProgramControlWindow struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_PAO_ID_FIELD_DESC);
      oprot.writeI32(struct._paoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_WINDOW_NUMBER_FIELD_DESC);
      oprot.writeI32(struct._windowNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_AVAILABLE_START_TIME_FIELD_DESC);
      oprot.writeI32(struct._availableStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_AVAILABLE_STOP_TIME_FIELD_DESC);
      oprot.writeI32(struct._availableStopTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMProgramControlWindowTupleSchemeFactory implements SchemeFactory {
    public LMProgramControlWindowTupleScheme getScheme() {
      return new LMProgramControlWindowTupleScheme();
    }
  }

  private static class LMProgramControlWindowTupleScheme extends TupleScheme<LMProgramControlWindow> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMProgramControlWindow struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct._paoId);
      oprot.writeI32(struct._windowNumber);
      oprot.writeI32(struct._availableStartTime);
      oprot.writeI32(struct._availableStopTime);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMProgramControlWindow struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._paoId = iprot.readI32();
      struct.set_paoIdIsSet(true);
      struct._windowNumber = iprot.readI32();
      struct.set_windowNumberIsSet(true);
      struct._availableStartTime = iprot.readI32();
      struct.set_availableStartTimeIsSet(true);
      struct._availableStopTime = iprot.readI32();
      struct.set_availableStopTimeIsSet(true);
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GenericEmail implements org.apache.thrift.TBase<GenericEmail, GenericEmail._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GenericEmail");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _TO_FIELD_DESC = new org.apache.thrift.protocol.TField("_to", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("_from", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("_subject", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField _BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("_body", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GenericEmailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GenericEmailTupleSchemeFactory());
  }

  private com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage; // required
  private String _to; // required
  private String _from; // required
  private String _subject; // required
  private String _body; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _TO((short)2, "_to"),
    _FROM((short)3, "_from"),
    _SUBJECT((short)4, "_subject"),
    _BODY((short)5, "_body");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _TO
          return _TO;
        case 3: // _FROM
          return _FROM;
        case 4: // _SUBJECT
          return _SUBJECT;
        case 5: // _BODY
          return _BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.Message.class)));
    tmpMap.put(_Fields._TO, new org.apache.thrift.meta_data.FieldMetaData("_to", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._FROM, new org.apache.thrift.meta_data.FieldMetaData("_from", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("_subject", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._BODY, new org.apache.thrift.meta_data.FieldMetaData("_body", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GenericEmail.class, metaDataMap);
  }

  public GenericEmail() {
  }

  public GenericEmail(
    com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage,
    String _to,
    String _from,
    String _subject,
    String _body)
  {
    this();
    this._baseMessage = _baseMessage;
    this._to = _to;
    this._from = _from;
    this._subject = _subject;
    this._body = _body;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GenericEmail(GenericEmail other) {
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message(other._baseMessage);
    }
    if (other.isSet_to()) {
      this._to = other._to;
    }
    if (other.isSet_from()) {
      this._from = other._from;
    }
    if (other.isSet_subject()) {
      this._subject = other._subject;
    }
    if (other.isSet_body()) {
      this._body = other._body;
    }
  }

  public GenericEmail deepCopy() {
    return new GenericEmail(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    this._to = null;
    this._from = null;
    this._subject = null;
    this._body = null;
  }

  public com.cannontech.messaging.serialization.thrift.generated.Message get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public String get_to() {
    return this._to;
  }

  public void set_to(String _to) {
    this._to = _to;
  }

  public void unset_to() {
    this._to = null;
  }

  /** Returns true if field _to is set (has been assigned a value) and false otherwise */
  public boolean isSet_to() {
    return this._to != null;
  }

  public void set_toIsSet(boolean value) {
    if (!value) {
      this._to = null;
    }
  }

  public String get_from() {
    return this._from;
  }

  public void set_from(String _from) {
    this._from = _from;
  }

  public void unset_from() {
    this._from = null;
  }

  /** Returns true if field _from is set (has been assigned a value) and false otherwise */
  public boolean isSet_from() {
    return this._from != null;
  }

  public void set_fromIsSet(boolean value) {
    if (!value) {
      this._from = null;
    }
  }

  public String get_subject() {
    return this._subject;
  }

  public void set_subject(String _subject) {
    this._subject = _subject;
  }

  public void unset_subject() {
    this._subject = null;
  }

  /** Returns true if field _subject is set (has been assigned a value) and false otherwise */
  public boolean isSet_subject() {
    return this._subject != null;
  }

  public void set_subjectIsSet(boolean value) {
    if (!value) {
      this._subject = null;
    }
  }

  public String get_body() {
    return this._body;
  }

  public void set_body(String _body) {
    this._body = _body;
  }

  public void unset_body() {
    this._body = null;
  }

  /** Returns true if field _body is set (has been assigned a value) and false otherwise */
  public boolean isSet_body() {
    return this._body != null;
  }

  public void set_bodyIsSet(boolean value) {
    if (!value) {
      this._body = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.Message)value);
      }
      break;

    case _TO:
      if (value == null) {
        unset_to();
      } else {
        set_to((String)value);
      }
      break;

    case _FROM:
      if (value == null) {
        unset_from();
      } else {
        set_from((String)value);
      }
      break;

    case _SUBJECT:
      if (value == null) {
        unset_subject();
      } else {
        set_subject((String)value);
      }
      break;

    case _BODY:
      if (value == null) {
        unset_body();
      } else {
        set_body((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _TO:
      return get_to();

    case _FROM:
      return get_from();

    case _SUBJECT:
      return get_subject();

    case _BODY:
      return get_body();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _TO:
      return isSet_to();
    case _FROM:
      return isSet_from();
    case _SUBJECT:
      return isSet_subject();
    case _BODY:
      return isSet_body();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GenericEmail)
      return this.equals((GenericEmail)that);
    return false;
  }

  public boolean equals(GenericEmail that) {
    if (that == null)
      return false;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__to = true && this.isSet_to();
    boolean that_present__to = true && that.isSet_to();
    if (this_present__to || that_present__to) {
      if (!(this_present__to && that_present__to))
        return false;
      if (!this._to.equals(that._to))
        return false;
    }

    boolean this_present__from = true && this.isSet_from();
    boolean that_present__from = true && that.isSet_from();
    if (this_present__from || that_present__from) {
      if (!(this_present__from && that_present__from))
        return false;
      if (!this._from.equals(that._from))
        return false;
    }

    boolean this_present__subject = true && this.isSet_subject();
    boolean that_present__subject = true && that.isSet_subject();
    if (this_present__subject || that_present__subject) {
      if (!(this_present__subject && that_present__subject))
        return false;
      if (!this._subject.equals(that._subject))
        return false;
    }

    boolean this_present__body = true && this.isSet_body();
    boolean that_present__body = true && that.isSet_body();
    if (this_present__body || that_present__body) {
      if (!(this_present__body && that_present__body))
        return false;
      if (!this._body.equals(that._body))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GenericEmail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GenericEmail typedOther = (GenericEmail)other;

    lastComparison = Boolean.valueOf(isSet_baseMessage()).compareTo(typedOther.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, typedOther._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_to()).compareTo(typedOther.isSet_to());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_to()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._to, typedOther._to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_from()).compareTo(typedOther.isSet_from());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_from()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._from, typedOther._from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_subject()).compareTo(typedOther.isSet_subject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_subject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._subject, typedOther._subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_body()).compareTo(typedOther.isSet_body());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_body()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._body, typedOther._body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GenericEmail(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_to:");
    if (this._to == null) {
      sb.append("null");
    } else {
      sb.append(this._to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_from:");
    if (this._from == null) {
      sb.append("null");
    } else {
      sb.append(this._from);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_subject:");
    if (this._subject == null) {
      sb.append("null");
    } else {
      sb.append(this._subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_body:");
    if (this._body == null) {
      sb.append("null");
    } else {
      sb.append(this._body);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_to()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_to' is unset! Struct:" + toString());
    }

    if (!isSet_from()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_from' is unset! Struct:" + toString());
    }

    if (!isSet_subject()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_subject' is unset! Struct:" + toString());
    }

    if (!isSet_body()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_body' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GenericEmailStandardSchemeFactory implements SchemeFactory {
    public GenericEmailStandardScheme getScheme() {
      return new GenericEmailStandardScheme();
    }
  }

  private static class GenericEmailStandardScheme extends StandardScheme<GenericEmail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GenericEmail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._to = iprot.readString();
              struct.set_toIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._from = iprot.readString();
              struct.set_fromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._subject = iprot.readString();
              struct.set_subjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._body = iprot.readString();
              struct.set_bodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GenericEmail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct._to != null) {
        oprot.writeFieldBegin(_TO_FIELD_DESC);
        oprot.writeString(struct._to);
        oprot.writeFieldEnd();
      }
      if (struct._from != null) {
        oprot.writeFieldBegin(_FROM_FIELD_DESC);
        oprot.writeString(struct._from);
        oprot.writeFieldEnd();
      }
      if (struct._subject != null) {
        oprot.writeFieldBegin(_SUBJECT_FIELD_DESC);
        oprot.writeString(struct._subject);
        oprot.writeFieldEnd();
      }
      if (struct._body != null) {
        oprot.writeFieldBegin(_BODY_FIELD_DESC);
        oprot.writeString(struct._body);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GenericEmailTupleSchemeFactory implements SchemeFactory {
    public GenericEmailTupleScheme getScheme() {
      return new GenericEmailTupleScheme();
    }
  }

  private static class GenericEmailTupleScheme extends TupleScheme<GenericEmail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GenericEmail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeString(struct._to);
      oprot.writeString(struct._from);
      oprot.writeString(struct._subject);
      oprot.writeString(struct._body);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GenericEmail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._to = iprot.readString();
      struct.set_toIsSet(true);
      struct._from = iprot.readString();
      struct.set_fromIsSet(true);
      struct._subject = iprot.readString();
      struct.set_subjectIsSet(true);
      struct._body = iprot.readString();
      struct.set_bodyIsSet(true);
    }
  }

}


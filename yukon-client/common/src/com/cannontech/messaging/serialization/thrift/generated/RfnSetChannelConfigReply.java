/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RfnSetChannelConfigReply implements org.apache.thrift.TBase<RfnSetChannelConfigReply, RfnSetChannelConfigReply._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RfnSetChannelConfigReply");

  private static final org.apache.thrift.protocol.TField REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("reply", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RFN_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("rfnIdentifier", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RfnSetChannelConfigReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RfnSetChannelConfigReplyTupleSchemeFactory());
  }

  private SetChannelConfigReplyType reply; // required
  private com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier rfnIdentifier; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see SetChannelConfigReplyType
     */
    REPLY((short)1, "reply"),
    RFN_IDENTIFIER((short)2, "rfnIdentifier");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLY
          return REPLY;
        case 2: // RFN_IDENTIFIER
          return RFN_IDENTIFIER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLY, new org.apache.thrift.meta_data.FieldMetaData("reply", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SetChannelConfigReplyType.class)));
    tmpMap.put(_Fields.RFN_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("rfnIdentifier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RfnSetChannelConfigReply.class, metaDataMap);
  }

  public RfnSetChannelConfigReply() {
  }

  public RfnSetChannelConfigReply(
    SetChannelConfigReplyType reply,
    com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier rfnIdentifier)
  {
    this();
    this.reply = reply;
    this.rfnIdentifier = rfnIdentifier;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RfnSetChannelConfigReply(RfnSetChannelConfigReply other) {
    if (other.isSetReply()) {
      this.reply = other.reply;
    }
    if (other.isSetRfnIdentifier()) {
      this.rfnIdentifier = new com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier(other.rfnIdentifier);
    }
  }

  public RfnSetChannelConfigReply deepCopy() {
    return new RfnSetChannelConfigReply(this);
  }

  @Override
  public void clear() {
    this.reply = null;
    this.rfnIdentifier = null;
  }

  /**
   * 
   * @see SetChannelConfigReplyType
   */
  public SetChannelConfigReplyType getReply() {
    return this.reply;
  }

  /**
   * 
   * @see SetChannelConfigReplyType
   */
  public void setReply(SetChannelConfigReplyType reply) {
    this.reply = reply;
  }

  public void unsetReply() {
    this.reply = null;
  }

  /** Returns true if field reply is set (has been assigned a value) and false otherwise */
  public boolean isSetReply() {
    return this.reply != null;
  }

  public void setReplyIsSet(boolean value) {
    if (!value) {
      this.reply = null;
    }
  }

  public com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier getRfnIdentifier() {
    return this.rfnIdentifier;
  }

  public void setRfnIdentifier(com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier rfnIdentifier) {
    this.rfnIdentifier = rfnIdentifier;
  }

  public void unsetRfnIdentifier() {
    this.rfnIdentifier = null;
  }

  /** Returns true if field rfnIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetRfnIdentifier() {
    return this.rfnIdentifier != null;
  }

  public void setRfnIdentifierIsSet(boolean value) {
    if (!value) {
      this.rfnIdentifier = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPLY:
      if (value == null) {
        unsetReply();
      } else {
        setReply((SetChannelConfigReplyType)value);
      }
      break;

    case RFN_IDENTIFIER:
      if (value == null) {
        unsetRfnIdentifier();
      } else {
        setRfnIdentifier((com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLY:
      return getReply();

    case RFN_IDENTIFIER:
      return getRfnIdentifier();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPLY:
      return isSetReply();
    case RFN_IDENTIFIER:
      return isSetRfnIdentifier();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RfnSetChannelConfigReply)
      return this.equals((RfnSetChannelConfigReply)that);
    return false;
  }

  public boolean equals(RfnSetChannelConfigReply that) {
    if (that == null)
      return false;

    boolean this_present_reply = true && this.isSetReply();
    boolean that_present_reply = true && that.isSetReply();
    if (this_present_reply || that_present_reply) {
      if (!(this_present_reply && that_present_reply))
        return false;
      if (!this.reply.equals(that.reply))
        return false;
    }

    boolean this_present_rfnIdentifier = true && this.isSetRfnIdentifier();
    boolean that_present_rfnIdentifier = true && that.isSetRfnIdentifier();
    if (this_present_rfnIdentifier || that_present_rfnIdentifier) {
      if (!(this_present_rfnIdentifier && that_present_rfnIdentifier))
        return false;
      if (!this.rfnIdentifier.equals(that.rfnIdentifier))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RfnSetChannelConfigReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RfnSetChannelConfigReply typedOther = (RfnSetChannelConfigReply)other;

    lastComparison = Boolean.valueOf(isSetReply()).compareTo(typedOther.isSetReply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply, typedOther.reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRfnIdentifier()).compareTo(typedOther.isSetRfnIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRfnIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rfnIdentifier, typedOther.rfnIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RfnSetChannelConfigReply(");
    boolean first = true;

    sb.append("reply:");
    if (this.reply == null) {
      sb.append("null");
    } else {
      sb.append(this.reply);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rfnIdentifier:");
    if (this.rfnIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.rfnIdentifier);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetReply()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reply' is unset! Struct:" + toString());
    }

    if (!isSetRfnIdentifier()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rfnIdentifier' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (rfnIdentifier != null) {
      rfnIdentifier.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RfnSetChannelConfigReplyStandardSchemeFactory implements SchemeFactory {
    public RfnSetChannelConfigReplyStandardScheme getScheme() {
      return new RfnSetChannelConfigReplyStandardScheme();
    }
  }

  private static class RfnSetChannelConfigReplyStandardScheme extends StandardScheme<RfnSetChannelConfigReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RfnSetChannelConfigReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reply = SetChannelConfigReplyType.findByValue(iprot.readI32());
              struct.setReplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RFN_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rfnIdentifier = new com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier();
              struct.rfnIdentifier.read(iprot);
              struct.setRfnIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RfnSetChannelConfigReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reply != null) {
        oprot.writeFieldBegin(REPLY_FIELD_DESC);
        oprot.writeI32(struct.reply.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.rfnIdentifier != null) {
        oprot.writeFieldBegin(RFN_IDENTIFIER_FIELD_DESC);
        struct.rfnIdentifier.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RfnSetChannelConfigReplyTupleSchemeFactory implements SchemeFactory {
    public RfnSetChannelConfigReplyTupleScheme getScheme() {
      return new RfnSetChannelConfigReplyTupleScheme();
    }
  }

  private static class RfnSetChannelConfigReplyTupleScheme extends TupleScheme<RfnSetChannelConfigReply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RfnSetChannelConfigReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.reply.getValue());
      struct.rfnIdentifier.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RfnSetChannelConfigReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.reply = SetChannelConfigReplyType.findByValue(iprot.readI32());
      struct.setReplyIsSet(true);
      struct.rfnIdentifier = new com.cannontech.messaging.serialization.thrift.generated.RfnIdentifier();
      struct.rfnIdentifier.read(iprot);
      struct.setRfnIdentifierIsSet(true);
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-05-31")
public class CCCapBank implements org.apache.thrift.TBase<CCCapBank, CCCapBank._Fields>, java.io.Serializable, Cloneable, Comparable<CCCapBank> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CCCapBank");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_parentId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _MAX_DAILY_OPS_FIELD_DESC = new org.apache.thrift.protocol.TField("_maxDailyOps", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _MAX_OPS_DISABLE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_maxOpsDisableFlag", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField _ALARM_INHIBIT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_alarmInhibitFlag", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField _CONTROL_INHIBIT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlInhibitFlag", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField _OPERATIONAL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("_operationalState", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField _CONTROLLER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_controllerType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField _CONTROL_DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlDeviceId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField _BANK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("_bankSize", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField _TYPE_OF_SWITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("_typeOfSwitch", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField _SWITCH_MANUFACTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("_switchManufacture", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField _MAP_LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_mapLocationId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField _RECLOSE_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("_recloseDelay", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField _CONTROL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlOrder", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField _STATUS_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_statusPointId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField _CONTROL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlStatus", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField _OPERATION_ANALOG_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_operationAnalogPointId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField _TOTAL_OPERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("_totalOperations", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField _LAST_STATUS_CHANGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastStatusChangeTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField _TAGS_CONTROL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("_tagsControlStatus", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField _ORIGINAL_PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_originalParentId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField _CURRENT_DAILY_OPERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentDailyOperations", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField _IGNORE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_ignoreFlag", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField _IGNORE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("_ignoreReason", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField _OV_UV_DISABLED_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_ovUvDisabledFlag", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField _TRIP_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("_tripOrder", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField _CLOSE_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("_closeOrder", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField _CONTROL_DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlDeviceType", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField _S_BEFORE_VARS_FIELD_DESC = new org.apache.thrift.protocol.TField("_sBeforeVars", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField _S_AFTER_VARS_FIELD_DESC = new org.apache.thrift.protocol.TField("_sAfterVars", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField _S_PERCENT_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_sPercentChange", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField _MAX_DAILY_OPS_HIT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_maxDailyOpsHitFlag", org.apache.thrift.protocol.TType.BOOL, (short)33);
  private static final org.apache.thrift.protocol.TField _OV_UV_SITUATION_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_ovUvSituationFlag", org.apache.thrift.protocol.TType.BOOL, (short)34);
  private static final org.apache.thrift.protocol.TField _CONTROL_STATUS_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlStatusQuality", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField _LOCAL_CONTROL_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_localControlFlag", org.apache.thrift.protocol.TType.BOOL, (short)36);
  private static final org.apache.thrift.protocol.TField _PARTIAL_PHASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("_partialPhaseInfo", org.apache.thrift.protocol.TType.STRING, (short)37);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CCCapBankStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CCCapBankTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.CCPao _baseMessage; // required
  private int _parentId; // required
  private int _maxDailyOps; // required
  private boolean _maxOpsDisableFlag; // required
  private boolean _alarmInhibitFlag; // required
  private boolean _controlInhibitFlag; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _operationalState; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _controllerType; // required
  private int _controlDeviceId; // required
  private int _bankSize; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _typeOfSwitch; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _switchManufacture; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _mapLocationId; // required
  private int _recloseDelay; // required
  private double _controlOrder; // required
  private int _statusPointId; // required
  private int _controlStatus; // required
  private int _operationAnalogPointId; // required
  private int _totalOperations; // required
  private long _lastStatusChangeTime; // required
  private int _tagsControlStatus; // required
  private int _originalParentId; // required
  private int _currentDailyOperations; // required
  private boolean _ignoreFlag; // required
  private int _ignoreReason; // required
  private boolean _ovUvDisabledFlag; // required
  private double _tripOrder; // required
  private double _closeOrder; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _controlDeviceType; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _sBeforeVars; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _sAfterVars; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _sPercentChange; // required
  private boolean _maxDailyOpsHitFlag; // required
  private boolean _ovUvSituationFlag; // required
  private int _controlStatusQuality; // required
  private boolean _localControlFlag; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _partialPhaseInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _PARENT_ID((short)2, "_parentId"),
    _MAX_DAILY_OPS((short)3, "_maxDailyOps"),
    _MAX_OPS_DISABLE_FLAG((short)4, "_maxOpsDisableFlag"),
    _ALARM_INHIBIT_FLAG((short)5, "_alarmInhibitFlag"),
    _CONTROL_INHIBIT_FLAG((short)6, "_controlInhibitFlag"),
    _OPERATIONAL_STATE((short)7, "_operationalState"),
    _CONTROLLER_TYPE((short)8, "_controllerType"),
    _CONTROL_DEVICE_ID((short)9, "_controlDeviceId"),
    _BANK_SIZE((short)10, "_bankSize"),
    _TYPE_OF_SWITCH((short)11, "_typeOfSwitch"),
    _SWITCH_MANUFACTURE((short)12, "_switchManufacture"),
    _MAP_LOCATION_ID((short)13, "_mapLocationId"),
    _RECLOSE_DELAY((short)14, "_recloseDelay"),
    _CONTROL_ORDER((short)15, "_controlOrder"),
    _STATUS_POINT_ID((short)16, "_statusPointId"),
    _CONTROL_STATUS((short)17, "_controlStatus"),
    _OPERATION_ANALOG_POINT_ID((short)18, "_operationAnalogPointId"),
    _TOTAL_OPERATIONS((short)19, "_totalOperations"),
    _LAST_STATUS_CHANGE_TIME((short)20, "_lastStatusChangeTime"),
    _TAGS_CONTROL_STATUS((short)21, "_tagsControlStatus"),
    _ORIGINAL_PARENT_ID((short)22, "_originalParentId"),
    _CURRENT_DAILY_OPERATIONS((short)23, "_currentDailyOperations"),
    _IGNORE_FLAG((short)24, "_ignoreFlag"),
    _IGNORE_REASON((short)25, "_ignoreReason"),
    _OV_UV_DISABLED_FLAG((short)26, "_ovUvDisabledFlag"),
    _TRIP_ORDER((short)27, "_tripOrder"),
    _CLOSE_ORDER((short)28, "_closeOrder"),
    _CONTROL_DEVICE_TYPE((short)29, "_controlDeviceType"),
    _S_BEFORE_VARS((short)30, "_sBeforeVars"),
    _S_AFTER_VARS((short)31, "_sAfterVars"),
    _S_PERCENT_CHANGE((short)32, "_sPercentChange"),
    _MAX_DAILY_OPS_HIT_FLAG((short)33, "_maxDailyOpsHitFlag"),
    _OV_UV_SITUATION_FLAG((short)34, "_ovUvSituationFlag"),
    _CONTROL_STATUS_QUALITY((short)35, "_controlStatusQuality"),
    _LOCAL_CONTROL_FLAG((short)36, "_localControlFlag"),
    _PARTIAL_PHASE_INFO((short)37, "_partialPhaseInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _PARENT_ID
          return _PARENT_ID;
        case 3: // _MAX_DAILY_OPS
          return _MAX_DAILY_OPS;
        case 4: // _MAX_OPS_DISABLE_FLAG
          return _MAX_OPS_DISABLE_FLAG;
        case 5: // _ALARM_INHIBIT_FLAG
          return _ALARM_INHIBIT_FLAG;
        case 6: // _CONTROL_INHIBIT_FLAG
          return _CONTROL_INHIBIT_FLAG;
        case 7: // _OPERATIONAL_STATE
          return _OPERATIONAL_STATE;
        case 8: // _CONTROLLER_TYPE
          return _CONTROLLER_TYPE;
        case 9: // _CONTROL_DEVICE_ID
          return _CONTROL_DEVICE_ID;
        case 10: // _BANK_SIZE
          return _BANK_SIZE;
        case 11: // _TYPE_OF_SWITCH
          return _TYPE_OF_SWITCH;
        case 12: // _SWITCH_MANUFACTURE
          return _SWITCH_MANUFACTURE;
        case 13: // _MAP_LOCATION_ID
          return _MAP_LOCATION_ID;
        case 14: // _RECLOSE_DELAY
          return _RECLOSE_DELAY;
        case 15: // _CONTROL_ORDER
          return _CONTROL_ORDER;
        case 16: // _STATUS_POINT_ID
          return _STATUS_POINT_ID;
        case 17: // _CONTROL_STATUS
          return _CONTROL_STATUS;
        case 18: // _OPERATION_ANALOG_POINT_ID
          return _OPERATION_ANALOG_POINT_ID;
        case 19: // _TOTAL_OPERATIONS
          return _TOTAL_OPERATIONS;
        case 20: // _LAST_STATUS_CHANGE_TIME
          return _LAST_STATUS_CHANGE_TIME;
        case 21: // _TAGS_CONTROL_STATUS
          return _TAGS_CONTROL_STATUS;
        case 22: // _ORIGINAL_PARENT_ID
          return _ORIGINAL_PARENT_ID;
        case 23: // _CURRENT_DAILY_OPERATIONS
          return _CURRENT_DAILY_OPERATIONS;
        case 24: // _IGNORE_FLAG
          return _IGNORE_FLAG;
        case 25: // _IGNORE_REASON
          return _IGNORE_REASON;
        case 26: // _OV_UV_DISABLED_FLAG
          return _OV_UV_DISABLED_FLAG;
        case 27: // _TRIP_ORDER
          return _TRIP_ORDER;
        case 28: // _CLOSE_ORDER
          return _CLOSE_ORDER;
        case 29: // _CONTROL_DEVICE_TYPE
          return _CONTROL_DEVICE_TYPE;
        case 30: // _S_BEFORE_VARS
          return _S_BEFORE_VARS;
        case 31: // _S_AFTER_VARS
          return _S_AFTER_VARS;
        case 32: // _S_PERCENT_CHANGE
          return _S_PERCENT_CHANGE;
        case 33: // _MAX_DAILY_OPS_HIT_FLAG
          return _MAX_DAILY_OPS_HIT_FLAG;
        case 34: // _OV_UV_SITUATION_FLAG
          return _OV_UV_SITUATION_FLAG;
        case 35: // _CONTROL_STATUS_QUALITY
          return _CONTROL_STATUS_QUALITY;
        case 36: // _LOCAL_CONTROL_FLAG
          return _LOCAL_CONTROL_FLAG;
        case 37: // _PARTIAL_PHASE_INFO
          return _PARTIAL_PHASE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PARENTID_ISSET_ID = 0;
  private static final int ___MAXDAILYOPS_ISSET_ID = 1;
  private static final int ___MAXOPSDISABLEFLAG_ISSET_ID = 2;
  private static final int ___ALARMINHIBITFLAG_ISSET_ID = 3;
  private static final int ___CONTROLINHIBITFLAG_ISSET_ID = 4;
  private static final int ___CONTROLDEVICEID_ISSET_ID = 5;
  private static final int ___BANKSIZE_ISSET_ID = 6;
  private static final int ___RECLOSEDELAY_ISSET_ID = 7;
  private static final int ___CONTROLORDER_ISSET_ID = 8;
  private static final int ___STATUSPOINTID_ISSET_ID = 9;
  private static final int ___CONTROLSTATUS_ISSET_ID = 10;
  private static final int ___OPERATIONANALOGPOINTID_ISSET_ID = 11;
  private static final int ___TOTALOPERATIONS_ISSET_ID = 12;
  private static final int ___LASTSTATUSCHANGETIME_ISSET_ID = 13;
  private static final int ___TAGSCONTROLSTATUS_ISSET_ID = 14;
  private static final int ___ORIGINALPARENTID_ISSET_ID = 15;
  private static final int ___CURRENTDAILYOPERATIONS_ISSET_ID = 16;
  private static final int ___IGNOREFLAG_ISSET_ID = 17;
  private static final int ___IGNOREREASON_ISSET_ID = 18;
  private static final int ___OVUVDISABLEDFLAG_ISSET_ID = 19;
  private static final int ___TRIPORDER_ISSET_ID = 20;
  private static final int ___CLOSEORDER_ISSET_ID = 21;
  private static final int ___MAXDAILYOPSHITFLAG_ISSET_ID = 22;
  private static final int ___OVUVSITUATIONFLAG_ISSET_ID = 23;
  private static final int ___CONTROLSTATUSQUALITY_ISSET_ID = 24;
  private static final int ___LOCALCONTROLFLAG_ISSET_ID = 25;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.CCPao.class)));
    tmpMap.put(_Fields._PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("_parentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MAX_DAILY_OPS, new org.apache.thrift.meta_data.FieldMetaData("_maxDailyOps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._MAX_OPS_DISABLE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_maxOpsDisableFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._ALARM_INHIBIT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_alarmInhibitFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._CONTROL_INHIBIT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_controlInhibitFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._OPERATIONAL_STATE, new org.apache.thrift.meta_data.FieldMetaData("_operationalState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._CONTROLLER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_controllerType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._CONTROL_DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("_controlDeviceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._BANK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("_bankSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TYPE_OF_SWITCH, new org.apache.thrift.meta_data.FieldMetaData("_typeOfSwitch", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SWITCH_MANUFACTURE, new org.apache.thrift.meta_data.FieldMetaData("_switchManufacture", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._MAP_LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("_mapLocationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._RECLOSE_DELAY, new org.apache.thrift.meta_data.FieldMetaData("_recloseDelay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONTROL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("_controlOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._STATUS_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_statusPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONTROL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("_controlStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._OPERATION_ANALOG_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_operationAnalogPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TOTAL_OPERATIONS, new org.apache.thrift.meta_data.FieldMetaData("_totalOperations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._LAST_STATUS_CHANGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_lastStatusChangeTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._TAGS_CONTROL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("_tagsControlStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._ORIGINAL_PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("_originalParentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_DAILY_OPERATIONS, new org.apache.thrift.meta_data.FieldMetaData("_currentDailyOperations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._IGNORE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_ignoreFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._IGNORE_REASON, new org.apache.thrift.meta_data.FieldMetaData("_ignoreReason", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._OV_UV_DISABLED_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_ovUvDisabledFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._TRIP_ORDER, new org.apache.thrift.meta_data.FieldMetaData("_tripOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._CLOSE_ORDER, new org.apache.thrift.meta_data.FieldMetaData("_closeOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._CONTROL_DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("_controlDeviceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._S_BEFORE_VARS, new org.apache.thrift.meta_data.FieldMetaData("_sBeforeVars", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._S_AFTER_VARS, new org.apache.thrift.meta_data.FieldMetaData("_sAfterVars", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._S_PERCENT_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("_sPercentChange", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._MAX_DAILY_OPS_HIT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_maxDailyOpsHitFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._OV_UV_SITUATION_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_ovUvSituationFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._CONTROL_STATUS_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("_controlStatusQuality", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._LOCAL_CONTROL_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_localControlFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._PARTIAL_PHASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("_partialPhaseInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CCCapBank.class, metaDataMap);
  }

  public CCCapBank() {
  }

  public CCCapBank(
    com.cannontech.messaging.serialization.thrift.generated.CCPao _baseMessage,
    int _parentId,
    int _maxDailyOps,
    boolean _maxOpsDisableFlag,
    boolean _alarmInhibitFlag,
    boolean _controlInhibitFlag,
    java.lang.String _operationalState,
    java.lang.String _controllerType,
    int _controlDeviceId,
    int _bankSize,
    java.lang.String _typeOfSwitch,
    java.lang.String _switchManufacture,
    java.lang.String _mapLocationId,
    int _recloseDelay,
    double _controlOrder,
    int _statusPointId,
    int _controlStatus,
    int _operationAnalogPointId,
    int _totalOperations,
    long _lastStatusChangeTime,
    int _tagsControlStatus,
    int _originalParentId,
    int _currentDailyOperations,
    boolean _ignoreFlag,
    int _ignoreReason,
    boolean _ovUvDisabledFlag,
    double _tripOrder,
    double _closeOrder,
    java.lang.String _controlDeviceType,
    java.lang.String _sBeforeVars,
    java.lang.String _sAfterVars,
    java.lang.String _sPercentChange,
    boolean _maxDailyOpsHitFlag,
    boolean _ovUvSituationFlag,
    int _controlStatusQuality,
    boolean _localControlFlag,
    java.lang.String _partialPhaseInfo)
  {
    this();
    this._baseMessage = _baseMessage;
    this._parentId = _parentId;
    set_parentIdIsSet(true);
    this._maxDailyOps = _maxDailyOps;
    set_maxDailyOpsIsSet(true);
    this._maxOpsDisableFlag = _maxOpsDisableFlag;
    set_maxOpsDisableFlagIsSet(true);
    this._alarmInhibitFlag = _alarmInhibitFlag;
    set_alarmInhibitFlagIsSet(true);
    this._controlInhibitFlag = _controlInhibitFlag;
    set_controlInhibitFlagIsSet(true);
    this._operationalState = _operationalState;
    this._controllerType = _controllerType;
    this._controlDeviceId = _controlDeviceId;
    set_controlDeviceIdIsSet(true);
    this._bankSize = _bankSize;
    set_bankSizeIsSet(true);
    this._typeOfSwitch = _typeOfSwitch;
    this._switchManufacture = _switchManufacture;
    this._mapLocationId = _mapLocationId;
    this._recloseDelay = _recloseDelay;
    set_recloseDelayIsSet(true);
    this._controlOrder = _controlOrder;
    set_controlOrderIsSet(true);
    this._statusPointId = _statusPointId;
    set_statusPointIdIsSet(true);
    this._controlStatus = _controlStatus;
    set_controlStatusIsSet(true);
    this._operationAnalogPointId = _operationAnalogPointId;
    set_operationAnalogPointIdIsSet(true);
    this._totalOperations = _totalOperations;
    set_totalOperationsIsSet(true);
    this._lastStatusChangeTime = _lastStatusChangeTime;
    set_lastStatusChangeTimeIsSet(true);
    this._tagsControlStatus = _tagsControlStatus;
    set_tagsControlStatusIsSet(true);
    this._originalParentId = _originalParentId;
    set_originalParentIdIsSet(true);
    this._currentDailyOperations = _currentDailyOperations;
    set_currentDailyOperationsIsSet(true);
    this._ignoreFlag = _ignoreFlag;
    set_ignoreFlagIsSet(true);
    this._ignoreReason = _ignoreReason;
    set_ignoreReasonIsSet(true);
    this._ovUvDisabledFlag = _ovUvDisabledFlag;
    set_ovUvDisabledFlagIsSet(true);
    this._tripOrder = _tripOrder;
    set_tripOrderIsSet(true);
    this._closeOrder = _closeOrder;
    set_closeOrderIsSet(true);
    this._controlDeviceType = _controlDeviceType;
    this._sBeforeVars = _sBeforeVars;
    this._sAfterVars = _sAfterVars;
    this._sPercentChange = _sPercentChange;
    this._maxDailyOpsHitFlag = _maxDailyOpsHitFlag;
    set_maxDailyOpsHitFlagIsSet(true);
    this._ovUvSituationFlag = _ovUvSituationFlag;
    set_ovUvSituationFlagIsSet(true);
    this._controlStatusQuality = _controlStatusQuality;
    set_controlStatusQualityIsSet(true);
    this._localControlFlag = _localControlFlag;
    set_localControlFlagIsSet(true);
    this._partialPhaseInfo = _partialPhaseInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CCCapBank(CCCapBank other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.CCPao(other._baseMessage);
    }
    this._parentId = other._parentId;
    this._maxDailyOps = other._maxDailyOps;
    this._maxOpsDisableFlag = other._maxOpsDisableFlag;
    this._alarmInhibitFlag = other._alarmInhibitFlag;
    this._controlInhibitFlag = other._controlInhibitFlag;
    if (other.isSet_operationalState()) {
      this._operationalState = other._operationalState;
    }
    if (other.isSet_controllerType()) {
      this._controllerType = other._controllerType;
    }
    this._controlDeviceId = other._controlDeviceId;
    this._bankSize = other._bankSize;
    if (other.isSet_typeOfSwitch()) {
      this._typeOfSwitch = other._typeOfSwitch;
    }
    if (other.isSet_switchManufacture()) {
      this._switchManufacture = other._switchManufacture;
    }
    if (other.isSet_mapLocationId()) {
      this._mapLocationId = other._mapLocationId;
    }
    this._recloseDelay = other._recloseDelay;
    this._controlOrder = other._controlOrder;
    this._statusPointId = other._statusPointId;
    this._controlStatus = other._controlStatus;
    this._operationAnalogPointId = other._operationAnalogPointId;
    this._totalOperations = other._totalOperations;
    this._lastStatusChangeTime = other._lastStatusChangeTime;
    this._tagsControlStatus = other._tagsControlStatus;
    this._originalParentId = other._originalParentId;
    this._currentDailyOperations = other._currentDailyOperations;
    this._ignoreFlag = other._ignoreFlag;
    this._ignoreReason = other._ignoreReason;
    this._ovUvDisabledFlag = other._ovUvDisabledFlag;
    this._tripOrder = other._tripOrder;
    this._closeOrder = other._closeOrder;
    if (other.isSet_controlDeviceType()) {
      this._controlDeviceType = other._controlDeviceType;
    }
    if (other.isSet_sBeforeVars()) {
      this._sBeforeVars = other._sBeforeVars;
    }
    if (other.isSet_sAfterVars()) {
      this._sAfterVars = other._sAfterVars;
    }
    if (other.isSet_sPercentChange()) {
      this._sPercentChange = other._sPercentChange;
    }
    this._maxDailyOpsHitFlag = other._maxDailyOpsHitFlag;
    this._ovUvSituationFlag = other._ovUvSituationFlag;
    this._controlStatusQuality = other._controlStatusQuality;
    this._localControlFlag = other._localControlFlag;
    if (other.isSet_partialPhaseInfo()) {
      this._partialPhaseInfo = other._partialPhaseInfo;
    }
  }

  public CCCapBank deepCopy() {
    return new CCCapBank(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_parentIdIsSet(false);
    this._parentId = 0;
    set_maxDailyOpsIsSet(false);
    this._maxDailyOps = 0;
    set_maxOpsDisableFlagIsSet(false);
    this._maxOpsDisableFlag = false;
    set_alarmInhibitFlagIsSet(false);
    this._alarmInhibitFlag = false;
    set_controlInhibitFlagIsSet(false);
    this._controlInhibitFlag = false;
    this._operationalState = null;
    this._controllerType = null;
    set_controlDeviceIdIsSet(false);
    this._controlDeviceId = 0;
    set_bankSizeIsSet(false);
    this._bankSize = 0;
    this._typeOfSwitch = null;
    this._switchManufacture = null;
    this._mapLocationId = null;
    set_recloseDelayIsSet(false);
    this._recloseDelay = 0;
    set_controlOrderIsSet(false);
    this._controlOrder = 0.0;
    set_statusPointIdIsSet(false);
    this._statusPointId = 0;
    set_controlStatusIsSet(false);
    this._controlStatus = 0;
    set_operationAnalogPointIdIsSet(false);
    this._operationAnalogPointId = 0;
    set_totalOperationsIsSet(false);
    this._totalOperations = 0;
    set_lastStatusChangeTimeIsSet(false);
    this._lastStatusChangeTime = 0;
    set_tagsControlStatusIsSet(false);
    this._tagsControlStatus = 0;
    set_originalParentIdIsSet(false);
    this._originalParentId = 0;
    set_currentDailyOperationsIsSet(false);
    this._currentDailyOperations = 0;
    set_ignoreFlagIsSet(false);
    this._ignoreFlag = false;
    set_ignoreReasonIsSet(false);
    this._ignoreReason = 0;
    set_ovUvDisabledFlagIsSet(false);
    this._ovUvDisabledFlag = false;
    set_tripOrderIsSet(false);
    this._tripOrder = 0.0;
    set_closeOrderIsSet(false);
    this._closeOrder = 0.0;
    this._controlDeviceType = null;
    this._sBeforeVars = null;
    this._sAfterVars = null;
    this._sPercentChange = null;
    set_maxDailyOpsHitFlagIsSet(false);
    this._maxDailyOpsHitFlag = false;
    set_ovUvSituationFlagIsSet(false);
    this._ovUvSituationFlag = false;
    set_controlStatusQualityIsSet(false);
    this._controlStatusQuality = 0;
    set_localControlFlagIsSet(false);
    this._localControlFlag = false;
    this._partialPhaseInfo = null;
  }

  @org.apache.thrift.annotation.Nullable
  public com.cannontech.messaging.serialization.thrift.generated.CCPao get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(@org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.CCPao _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_parentId() {
    return this._parentId;
  }

  public void set_parentId(int _parentId) {
    this._parentId = _parentId;
    set_parentIdIsSet(true);
  }

  public void unset_parentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PARENTID_ISSET_ID);
  }

  /** Returns true if field _parentId is set (has been assigned a value) and false otherwise */
  public boolean isSet_parentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PARENTID_ISSET_ID);
  }

  public void set_parentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PARENTID_ISSET_ID, value);
  }

  public int get_maxDailyOps() {
    return this._maxDailyOps;
  }

  public void set_maxDailyOps(int _maxDailyOps) {
    this._maxDailyOps = _maxDailyOps;
    set_maxDailyOpsIsSet(true);
  }

  public void unset_maxDailyOps() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MAXDAILYOPS_ISSET_ID);
  }

  /** Returns true if field _maxDailyOps is set (has been assigned a value) and false otherwise */
  public boolean isSet_maxDailyOps() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MAXDAILYOPS_ISSET_ID);
  }

  public void set_maxDailyOpsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MAXDAILYOPS_ISSET_ID, value);
  }

  public boolean is_maxOpsDisableFlag() {
    return this._maxOpsDisableFlag;
  }

  public void set_maxOpsDisableFlag(boolean _maxOpsDisableFlag) {
    this._maxOpsDisableFlag = _maxOpsDisableFlag;
    set_maxOpsDisableFlagIsSet(true);
  }

  public void unset_maxOpsDisableFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MAXOPSDISABLEFLAG_ISSET_ID);
  }

  /** Returns true if field _maxOpsDisableFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_maxOpsDisableFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MAXOPSDISABLEFLAG_ISSET_ID);
  }

  public void set_maxOpsDisableFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MAXOPSDISABLEFLAG_ISSET_ID, value);
  }

  public boolean is_alarmInhibitFlag() {
    return this._alarmInhibitFlag;
  }

  public void set_alarmInhibitFlag(boolean _alarmInhibitFlag) {
    this._alarmInhibitFlag = _alarmInhibitFlag;
    set_alarmInhibitFlagIsSet(true);
  }

  public void unset_alarmInhibitFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ALARMINHIBITFLAG_ISSET_ID);
  }

  /** Returns true if field _alarmInhibitFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_alarmInhibitFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ALARMINHIBITFLAG_ISSET_ID);
  }

  public void set_alarmInhibitFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ALARMINHIBITFLAG_ISSET_ID, value);
  }

  public boolean is_controlInhibitFlag() {
    return this._controlInhibitFlag;
  }

  public void set_controlInhibitFlag(boolean _controlInhibitFlag) {
    this._controlInhibitFlag = _controlInhibitFlag;
    set_controlInhibitFlagIsSet(true);
  }

  public void unset_controlInhibitFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLINHIBITFLAG_ISSET_ID);
  }

  /** Returns true if field _controlInhibitFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlInhibitFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLINHIBITFLAG_ISSET_ID);
  }

  public void set_controlInhibitFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLINHIBITFLAG_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_operationalState() {
    return this._operationalState;
  }

  public void set_operationalState(@org.apache.thrift.annotation.Nullable java.lang.String _operationalState) {
    this._operationalState = _operationalState;
  }

  public void unset_operationalState() {
    this._operationalState = null;
  }

  /** Returns true if field _operationalState is set (has been assigned a value) and false otherwise */
  public boolean isSet_operationalState() {
    return this._operationalState != null;
  }

  public void set_operationalStateIsSet(boolean value) {
    if (!value) {
      this._operationalState = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_controllerType() {
    return this._controllerType;
  }

  public void set_controllerType(@org.apache.thrift.annotation.Nullable java.lang.String _controllerType) {
    this._controllerType = _controllerType;
  }

  public void unset_controllerType() {
    this._controllerType = null;
  }

  /** Returns true if field _controllerType is set (has been assigned a value) and false otherwise */
  public boolean isSet_controllerType() {
    return this._controllerType != null;
  }

  public void set_controllerTypeIsSet(boolean value) {
    if (!value) {
      this._controllerType = null;
    }
  }

  public int get_controlDeviceId() {
    return this._controlDeviceId;
  }

  public void set_controlDeviceId(int _controlDeviceId) {
    this._controlDeviceId = _controlDeviceId;
    set_controlDeviceIdIsSet(true);
  }

  public void unset_controlDeviceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLDEVICEID_ISSET_ID);
  }

  /** Returns true if field _controlDeviceId is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlDeviceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLDEVICEID_ISSET_ID);
  }

  public void set_controlDeviceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLDEVICEID_ISSET_ID, value);
  }

  public int get_bankSize() {
    return this._bankSize;
  }

  public void set_bankSize(int _bankSize) {
    this._bankSize = _bankSize;
    set_bankSizeIsSet(true);
  }

  public void unset_bankSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___BANKSIZE_ISSET_ID);
  }

  /** Returns true if field _bankSize is set (has been assigned a value) and false otherwise */
  public boolean isSet_bankSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___BANKSIZE_ISSET_ID);
  }

  public void set_bankSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___BANKSIZE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_typeOfSwitch() {
    return this._typeOfSwitch;
  }

  public void set_typeOfSwitch(@org.apache.thrift.annotation.Nullable java.lang.String _typeOfSwitch) {
    this._typeOfSwitch = _typeOfSwitch;
  }

  public void unset_typeOfSwitch() {
    this._typeOfSwitch = null;
  }

  /** Returns true if field _typeOfSwitch is set (has been assigned a value) and false otherwise */
  public boolean isSet_typeOfSwitch() {
    return this._typeOfSwitch != null;
  }

  public void set_typeOfSwitchIsSet(boolean value) {
    if (!value) {
      this._typeOfSwitch = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_switchManufacture() {
    return this._switchManufacture;
  }

  public void set_switchManufacture(@org.apache.thrift.annotation.Nullable java.lang.String _switchManufacture) {
    this._switchManufacture = _switchManufacture;
  }

  public void unset_switchManufacture() {
    this._switchManufacture = null;
  }

  /** Returns true if field _switchManufacture is set (has been assigned a value) and false otherwise */
  public boolean isSet_switchManufacture() {
    return this._switchManufacture != null;
  }

  public void set_switchManufactureIsSet(boolean value) {
    if (!value) {
      this._switchManufacture = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_mapLocationId() {
    return this._mapLocationId;
  }

  public void set_mapLocationId(@org.apache.thrift.annotation.Nullable java.lang.String _mapLocationId) {
    this._mapLocationId = _mapLocationId;
  }

  public void unset_mapLocationId() {
    this._mapLocationId = null;
  }

  /** Returns true if field _mapLocationId is set (has been assigned a value) and false otherwise */
  public boolean isSet_mapLocationId() {
    return this._mapLocationId != null;
  }

  public void set_mapLocationIdIsSet(boolean value) {
    if (!value) {
      this._mapLocationId = null;
    }
  }

  public int get_recloseDelay() {
    return this._recloseDelay;
  }

  public void set_recloseDelay(int _recloseDelay) {
    this._recloseDelay = _recloseDelay;
    set_recloseDelayIsSet(true);
  }

  public void unset_recloseDelay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___RECLOSEDELAY_ISSET_ID);
  }

  /** Returns true if field _recloseDelay is set (has been assigned a value) and false otherwise */
  public boolean isSet_recloseDelay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___RECLOSEDELAY_ISSET_ID);
  }

  public void set_recloseDelayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___RECLOSEDELAY_ISSET_ID, value);
  }

  public double get_controlOrder() {
    return this._controlOrder;
  }

  public void set_controlOrder(double _controlOrder) {
    this._controlOrder = _controlOrder;
    set_controlOrderIsSet(true);
  }

  public void unset_controlOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLORDER_ISSET_ID);
  }

  /** Returns true if field _controlOrder is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLORDER_ISSET_ID);
  }

  public void set_controlOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLORDER_ISSET_ID, value);
  }

  public int get_statusPointId() {
    return this._statusPointId;
  }

  public void set_statusPointId(int _statusPointId) {
    this._statusPointId = _statusPointId;
    set_statusPointIdIsSet(true);
  }

  public void unset_statusPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STATUSPOINTID_ISSET_ID);
  }

  /** Returns true if field _statusPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_statusPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STATUSPOINTID_ISSET_ID);
  }

  public void set_statusPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STATUSPOINTID_ISSET_ID, value);
  }

  public int get_controlStatus() {
    return this._controlStatus;
  }

  public void set_controlStatus(int _controlStatus) {
    this._controlStatus = _controlStatus;
    set_controlStatusIsSet(true);
  }

  public void unset_controlStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLSTATUS_ISSET_ID);
  }

  /** Returns true if field _controlStatus is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLSTATUS_ISSET_ID);
  }

  public void set_controlStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLSTATUS_ISSET_ID, value);
  }

  public int get_operationAnalogPointId() {
    return this._operationAnalogPointId;
  }

  public void set_operationAnalogPointId(int _operationAnalogPointId) {
    this._operationAnalogPointId = _operationAnalogPointId;
    set_operationAnalogPointIdIsSet(true);
  }

  public void unset_operationAnalogPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___OPERATIONANALOGPOINTID_ISSET_ID);
  }

  /** Returns true if field _operationAnalogPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_operationAnalogPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___OPERATIONANALOGPOINTID_ISSET_ID);
  }

  public void set_operationAnalogPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___OPERATIONANALOGPOINTID_ISSET_ID, value);
  }

  public int get_totalOperations() {
    return this._totalOperations;
  }

  public void set_totalOperations(int _totalOperations) {
    this._totalOperations = _totalOperations;
    set_totalOperationsIsSet(true);
  }

  public void unset_totalOperations() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TOTALOPERATIONS_ISSET_ID);
  }

  /** Returns true if field _totalOperations is set (has been assigned a value) and false otherwise */
  public boolean isSet_totalOperations() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TOTALOPERATIONS_ISSET_ID);
  }

  public void set_totalOperationsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TOTALOPERATIONS_ISSET_ID, value);
  }

  public long get_lastStatusChangeTime() {
    return this._lastStatusChangeTime;
  }

  public void set_lastStatusChangeTime(long _lastStatusChangeTime) {
    this._lastStatusChangeTime = _lastStatusChangeTime;
    set_lastStatusChangeTimeIsSet(true);
  }

  public void unset_lastStatusChangeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTSTATUSCHANGETIME_ISSET_ID);
  }

  /** Returns true if field _lastStatusChangeTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastStatusChangeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTSTATUSCHANGETIME_ISSET_ID);
  }

  public void set_lastStatusChangeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTSTATUSCHANGETIME_ISSET_ID, value);
  }

  public int get_tagsControlStatus() {
    return this._tagsControlStatus;
  }

  public void set_tagsControlStatus(int _tagsControlStatus) {
    this._tagsControlStatus = _tagsControlStatus;
    set_tagsControlStatusIsSet(true);
  }

  public void unset_tagsControlStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TAGSCONTROLSTATUS_ISSET_ID);
  }

  /** Returns true if field _tagsControlStatus is set (has been assigned a value) and false otherwise */
  public boolean isSet_tagsControlStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TAGSCONTROLSTATUS_ISSET_ID);
  }

  public void set_tagsControlStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TAGSCONTROLSTATUS_ISSET_ID, value);
  }

  public int get_originalParentId() {
    return this._originalParentId;
  }

  public void set_originalParentId(int _originalParentId) {
    this._originalParentId = _originalParentId;
    set_originalParentIdIsSet(true);
  }

  public void unset_originalParentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ORIGINALPARENTID_ISSET_ID);
  }

  /** Returns true if field _originalParentId is set (has been assigned a value) and false otherwise */
  public boolean isSet_originalParentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ORIGINALPARENTID_ISSET_ID);
  }

  public void set_originalParentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ORIGINALPARENTID_ISSET_ID, value);
  }

  public int get_currentDailyOperations() {
    return this._currentDailyOperations;
  }

  public void set_currentDailyOperations(int _currentDailyOperations) {
    this._currentDailyOperations = _currentDailyOperations;
    set_currentDailyOperationsIsSet(true);
  }

  public void unset_currentDailyOperations() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTDAILYOPERATIONS_ISSET_ID);
  }

  /** Returns true if field _currentDailyOperations is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentDailyOperations() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTDAILYOPERATIONS_ISSET_ID);
  }

  public void set_currentDailyOperationsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTDAILYOPERATIONS_ISSET_ID, value);
  }

  public boolean is_ignoreFlag() {
    return this._ignoreFlag;
  }

  public void set_ignoreFlag(boolean _ignoreFlag) {
    this._ignoreFlag = _ignoreFlag;
    set_ignoreFlagIsSet(true);
  }

  public void unset_ignoreFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___IGNOREFLAG_ISSET_ID);
  }

  /** Returns true if field _ignoreFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_ignoreFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___IGNOREFLAG_ISSET_ID);
  }

  public void set_ignoreFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___IGNOREFLAG_ISSET_ID, value);
  }

  public int get_ignoreReason() {
    return this._ignoreReason;
  }

  public void set_ignoreReason(int _ignoreReason) {
    this._ignoreReason = _ignoreReason;
    set_ignoreReasonIsSet(true);
  }

  public void unset_ignoreReason() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___IGNOREREASON_ISSET_ID);
  }

  /** Returns true if field _ignoreReason is set (has been assigned a value) and false otherwise */
  public boolean isSet_ignoreReason() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___IGNOREREASON_ISSET_ID);
  }

  public void set_ignoreReasonIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___IGNOREREASON_ISSET_ID, value);
  }

  public boolean is_ovUvDisabledFlag() {
    return this._ovUvDisabledFlag;
  }

  public void set_ovUvDisabledFlag(boolean _ovUvDisabledFlag) {
    this._ovUvDisabledFlag = _ovUvDisabledFlag;
    set_ovUvDisabledFlagIsSet(true);
  }

  public void unset_ovUvDisabledFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___OVUVDISABLEDFLAG_ISSET_ID);
  }

  /** Returns true if field _ovUvDisabledFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_ovUvDisabledFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___OVUVDISABLEDFLAG_ISSET_ID);
  }

  public void set_ovUvDisabledFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___OVUVDISABLEDFLAG_ISSET_ID, value);
  }

  public double get_tripOrder() {
    return this._tripOrder;
  }

  public void set_tripOrder(double _tripOrder) {
    this._tripOrder = _tripOrder;
    set_tripOrderIsSet(true);
  }

  public void unset_tripOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TRIPORDER_ISSET_ID);
  }

  /** Returns true if field _tripOrder is set (has been assigned a value) and false otherwise */
  public boolean isSet_tripOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TRIPORDER_ISSET_ID);
  }

  public void set_tripOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TRIPORDER_ISSET_ID, value);
  }

  public double get_closeOrder() {
    return this._closeOrder;
  }

  public void set_closeOrder(double _closeOrder) {
    this._closeOrder = _closeOrder;
    set_closeOrderIsSet(true);
  }

  public void unset_closeOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CLOSEORDER_ISSET_ID);
  }

  /** Returns true if field _closeOrder is set (has been assigned a value) and false otherwise */
  public boolean isSet_closeOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CLOSEORDER_ISSET_ID);
  }

  public void set_closeOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CLOSEORDER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_controlDeviceType() {
    return this._controlDeviceType;
  }

  public void set_controlDeviceType(@org.apache.thrift.annotation.Nullable java.lang.String _controlDeviceType) {
    this._controlDeviceType = _controlDeviceType;
  }

  public void unset_controlDeviceType() {
    this._controlDeviceType = null;
  }

  /** Returns true if field _controlDeviceType is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlDeviceType() {
    return this._controlDeviceType != null;
  }

  public void set_controlDeviceTypeIsSet(boolean value) {
    if (!value) {
      this._controlDeviceType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_sBeforeVars() {
    return this._sBeforeVars;
  }

  public void set_sBeforeVars(@org.apache.thrift.annotation.Nullable java.lang.String _sBeforeVars) {
    this._sBeforeVars = _sBeforeVars;
  }

  public void unset_sBeforeVars() {
    this._sBeforeVars = null;
  }

  /** Returns true if field _sBeforeVars is set (has been assigned a value) and false otherwise */
  public boolean isSet_sBeforeVars() {
    return this._sBeforeVars != null;
  }

  public void set_sBeforeVarsIsSet(boolean value) {
    if (!value) {
      this._sBeforeVars = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_sAfterVars() {
    return this._sAfterVars;
  }

  public void set_sAfterVars(@org.apache.thrift.annotation.Nullable java.lang.String _sAfterVars) {
    this._sAfterVars = _sAfterVars;
  }

  public void unset_sAfterVars() {
    this._sAfterVars = null;
  }

  /** Returns true if field _sAfterVars is set (has been assigned a value) and false otherwise */
  public boolean isSet_sAfterVars() {
    return this._sAfterVars != null;
  }

  public void set_sAfterVarsIsSet(boolean value) {
    if (!value) {
      this._sAfterVars = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_sPercentChange() {
    return this._sPercentChange;
  }

  public void set_sPercentChange(@org.apache.thrift.annotation.Nullable java.lang.String _sPercentChange) {
    this._sPercentChange = _sPercentChange;
  }

  public void unset_sPercentChange() {
    this._sPercentChange = null;
  }

  /** Returns true if field _sPercentChange is set (has been assigned a value) and false otherwise */
  public boolean isSet_sPercentChange() {
    return this._sPercentChange != null;
  }

  public void set_sPercentChangeIsSet(boolean value) {
    if (!value) {
      this._sPercentChange = null;
    }
  }

  public boolean is_maxDailyOpsHitFlag() {
    return this._maxDailyOpsHitFlag;
  }

  public void set_maxDailyOpsHitFlag(boolean _maxDailyOpsHitFlag) {
    this._maxDailyOpsHitFlag = _maxDailyOpsHitFlag;
    set_maxDailyOpsHitFlagIsSet(true);
  }

  public void unset_maxDailyOpsHitFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___MAXDAILYOPSHITFLAG_ISSET_ID);
  }

  /** Returns true if field _maxDailyOpsHitFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_maxDailyOpsHitFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___MAXDAILYOPSHITFLAG_ISSET_ID);
  }

  public void set_maxDailyOpsHitFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___MAXDAILYOPSHITFLAG_ISSET_ID, value);
  }

  public boolean is_ovUvSituationFlag() {
    return this._ovUvSituationFlag;
  }

  public void set_ovUvSituationFlag(boolean _ovUvSituationFlag) {
    this._ovUvSituationFlag = _ovUvSituationFlag;
    set_ovUvSituationFlagIsSet(true);
  }

  public void unset_ovUvSituationFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___OVUVSITUATIONFLAG_ISSET_ID);
  }

  /** Returns true if field _ovUvSituationFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_ovUvSituationFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___OVUVSITUATIONFLAG_ISSET_ID);
  }

  public void set_ovUvSituationFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___OVUVSITUATIONFLAG_ISSET_ID, value);
  }

  public int get_controlStatusQuality() {
    return this._controlStatusQuality;
  }

  public void set_controlStatusQuality(int _controlStatusQuality) {
    this._controlStatusQuality = _controlStatusQuality;
    set_controlStatusQualityIsSet(true);
  }

  public void unset_controlStatusQuality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CONTROLSTATUSQUALITY_ISSET_ID);
  }

  /** Returns true if field _controlStatusQuality is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlStatusQuality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CONTROLSTATUSQUALITY_ISSET_ID);
  }

  public void set_controlStatusQualityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CONTROLSTATUSQUALITY_ISSET_ID, value);
  }

  public boolean is_localControlFlag() {
    return this._localControlFlag;
  }

  public void set_localControlFlag(boolean _localControlFlag) {
    this._localControlFlag = _localControlFlag;
    set_localControlFlagIsSet(true);
  }

  public void unset_localControlFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LOCALCONTROLFLAG_ISSET_ID);
  }

  /** Returns true if field _localControlFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_localControlFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LOCALCONTROLFLAG_ISSET_ID);
  }

  public void set_localControlFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LOCALCONTROLFLAG_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_partialPhaseInfo() {
    return this._partialPhaseInfo;
  }

  public void set_partialPhaseInfo(@org.apache.thrift.annotation.Nullable java.lang.String _partialPhaseInfo) {
    this._partialPhaseInfo = _partialPhaseInfo;
  }

  public void unset_partialPhaseInfo() {
    this._partialPhaseInfo = null;
  }

  /** Returns true if field _partialPhaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSet_partialPhaseInfo() {
    return this._partialPhaseInfo != null;
  }

  public void set_partialPhaseInfoIsSet(boolean value) {
    if (!value) {
      this._partialPhaseInfo = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.CCPao)value);
      }
      break;

    case _PARENT_ID:
      if (value == null) {
        unset_parentId();
      } else {
        set_parentId((java.lang.Integer)value);
      }
      break;

    case _MAX_DAILY_OPS:
      if (value == null) {
        unset_maxDailyOps();
      } else {
        set_maxDailyOps((java.lang.Integer)value);
      }
      break;

    case _MAX_OPS_DISABLE_FLAG:
      if (value == null) {
        unset_maxOpsDisableFlag();
      } else {
        set_maxOpsDisableFlag((java.lang.Boolean)value);
      }
      break;

    case _ALARM_INHIBIT_FLAG:
      if (value == null) {
        unset_alarmInhibitFlag();
      } else {
        set_alarmInhibitFlag((java.lang.Boolean)value);
      }
      break;

    case _CONTROL_INHIBIT_FLAG:
      if (value == null) {
        unset_controlInhibitFlag();
      } else {
        set_controlInhibitFlag((java.lang.Boolean)value);
      }
      break;

    case _OPERATIONAL_STATE:
      if (value == null) {
        unset_operationalState();
      } else {
        set_operationalState((java.lang.String)value);
      }
      break;

    case _CONTROLLER_TYPE:
      if (value == null) {
        unset_controllerType();
      } else {
        set_controllerType((java.lang.String)value);
      }
      break;

    case _CONTROL_DEVICE_ID:
      if (value == null) {
        unset_controlDeviceId();
      } else {
        set_controlDeviceId((java.lang.Integer)value);
      }
      break;

    case _BANK_SIZE:
      if (value == null) {
        unset_bankSize();
      } else {
        set_bankSize((java.lang.Integer)value);
      }
      break;

    case _TYPE_OF_SWITCH:
      if (value == null) {
        unset_typeOfSwitch();
      } else {
        set_typeOfSwitch((java.lang.String)value);
      }
      break;

    case _SWITCH_MANUFACTURE:
      if (value == null) {
        unset_switchManufacture();
      } else {
        set_switchManufacture((java.lang.String)value);
      }
      break;

    case _MAP_LOCATION_ID:
      if (value == null) {
        unset_mapLocationId();
      } else {
        set_mapLocationId((java.lang.String)value);
      }
      break;

    case _RECLOSE_DELAY:
      if (value == null) {
        unset_recloseDelay();
      } else {
        set_recloseDelay((java.lang.Integer)value);
      }
      break;

    case _CONTROL_ORDER:
      if (value == null) {
        unset_controlOrder();
      } else {
        set_controlOrder((java.lang.Double)value);
      }
      break;

    case _STATUS_POINT_ID:
      if (value == null) {
        unset_statusPointId();
      } else {
        set_statusPointId((java.lang.Integer)value);
      }
      break;

    case _CONTROL_STATUS:
      if (value == null) {
        unset_controlStatus();
      } else {
        set_controlStatus((java.lang.Integer)value);
      }
      break;

    case _OPERATION_ANALOG_POINT_ID:
      if (value == null) {
        unset_operationAnalogPointId();
      } else {
        set_operationAnalogPointId((java.lang.Integer)value);
      }
      break;

    case _TOTAL_OPERATIONS:
      if (value == null) {
        unset_totalOperations();
      } else {
        set_totalOperations((java.lang.Integer)value);
      }
      break;

    case _LAST_STATUS_CHANGE_TIME:
      if (value == null) {
        unset_lastStatusChangeTime();
      } else {
        set_lastStatusChangeTime((java.lang.Long)value);
      }
      break;

    case _TAGS_CONTROL_STATUS:
      if (value == null) {
        unset_tagsControlStatus();
      } else {
        set_tagsControlStatus((java.lang.Integer)value);
      }
      break;

    case _ORIGINAL_PARENT_ID:
      if (value == null) {
        unset_originalParentId();
      } else {
        set_originalParentId((java.lang.Integer)value);
      }
      break;

    case _CURRENT_DAILY_OPERATIONS:
      if (value == null) {
        unset_currentDailyOperations();
      } else {
        set_currentDailyOperations((java.lang.Integer)value);
      }
      break;

    case _IGNORE_FLAG:
      if (value == null) {
        unset_ignoreFlag();
      } else {
        set_ignoreFlag((java.lang.Boolean)value);
      }
      break;

    case _IGNORE_REASON:
      if (value == null) {
        unset_ignoreReason();
      } else {
        set_ignoreReason((java.lang.Integer)value);
      }
      break;

    case _OV_UV_DISABLED_FLAG:
      if (value == null) {
        unset_ovUvDisabledFlag();
      } else {
        set_ovUvDisabledFlag((java.lang.Boolean)value);
      }
      break;

    case _TRIP_ORDER:
      if (value == null) {
        unset_tripOrder();
      } else {
        set_tripOrder((java.lang.Double)value);
      }
      break;

    case _CLOSE_ORDER:
      if (value == null) {
        unset_closeOrder();
      } else {
        set_closeOrder((java.lang.Double)value);
      }
      break;

    case _CONTROL_DEVICE_TYPE:
      if (value == null) {
        unset_controlDeviceType();
      } else {
        set_controlDeviceType((java.lang.String)value);
      }
      break;

    case _S_BEFORE_VARS:
      if (value == null) {
        unset_sBeforeVars();
      } else {
        set_sBeforeVars((java.lang.String)value);
      }
      break;

    case _S_AFTER_VARS:
      if (value == null) {
        unset_sAfterVars();
      } else {
        set_sAfterVars((java.lang.String)value);
      }
      break;

    case _S_PERCENT_CHANGE:
      if (value == null) {
        unset_sPercentChange();
      } else {
        set_sPercentChange((java.lang.String)value);
      }
      break;

    case _MAX_DAILY_OPS_HIT_FLAG:
      if (value == null) {
        unset_maxDailyOpsHitFlag();
      } else {
        set_maxDailyOpsHitFlag((java.lang.Boolean)value);
      }
      break;

    case _OV_UV_SITUATION_FLAG:
      if (value == null) {
        unset_ovUvSituationFlag();
      } else {
        set_ovUvSituationFlag((java.lang.Boolean)value);
      }
      break;

    case _CONTROL_STATUS_QUALITY:
      if (value == null) {
        unset_controlStatusQuality();
      } else {
        set_controlStatusQuality((java.lang.Integer)value);
      }
      break;

    case _LOCAL_CONTROL_FLAG:
      if (value == null) {
        unset_localControlFlag();
      } else {
        set_localControlFlag((java.lang.Boolean)value);
      }
      break;

    case _PARTIAL_PHASE_INFO:
      if (value == null) {
        unset_partialPhaseInfo();
      } else {
        set_partialPhaseInfo((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _PARENT_ID:
      return get_parentId();

    case _MAX_DAILY_OPS:
      return get_maxDailyOps();

    case _MAX_OPS_DISABLE_FLAG:
      return is_maxOpsDisableFlag();

    case _ALARM_INHIBIT_FLAG:
      return is_alarmInhibitFlag();

    case _CONTROL_INHIBIT_FLAG:
      return is_controlInhibitFlag();

    case _OPERATIONAL_STATE:
      return get_operationalState();

    case _CONTROLLER_TYPE:
      return get_controllerType();

    case _CONTROL_DEVICE_ID:
      return get_controlDeviceId();

    case _BANK_SIZE:
      return get_bankSize();

    case _TYPE_OF_SWITCH:
      return get_typeOfSwitch();

    case _SWITCH_MANUFACTURE:
      return get_switchManufacture();

    case _MAP_LOCATION_ID:
      return get_mapLocationId();

    case _RECLOSE_DELAY:
      return get_recloseDelay();

    case _CONTROL_ORDER:
      return get_controlOrder();

    case _STATUS_POINT_ID:
      return get_statusPointId();

    case _CONTROL_STATUS:
      return get_controlStatus();

    case _OPERATION_ANALOG_POINT_ID:
      return get_operationAnalogPointId();

    case _TOTAL_OPERATIONS:
      return get_totalOperations();

    case _LAST_STATUS_CHANGE_TIME:
      return get_lastStatusChangeTime();

    case _TAGS_CONTROL_STATUS:
      return get_tagsControlStatus();

    case _ORIGINAL_PARENT_ID:
      return get_originalParentId();

    case _CURRENT_DAILY_OPERATIONS:
      return get_currentDailyOperations();

    case _IGNORE_FLAG:
      return is_ignoreFlag();

    case _IGNORE_REASON:
      return get_ignoreReason();

    case _OV_UV_DISABLED_FLAG:
      return is_ovUvDisabledFlag();

    case _TRIP_ORDER:
      return get_tripOrder();

    case _CLOSE_ORDER:
      return get_closeOrder();

    case _CONTROL_DEVICE_TYPE:
      return get_controlDeviceType();

    case _S_BEFORE_VARS:
      return get_sBeforeVars();

    case _S_AFTER_VARS:
      return get_sAfterVars();

    case _S_PERCENT_CHANGE:
      return get_sPercentChange();

    case _MAX_DAILY_OPS_HIT_FLAG:
      return is_maxDailyOpsHitFlag();

    case _OV_UV_SITUATION_FLAG:
      return is_ovUvSituationFlag();

    case _CONTROL_STATUS_QUALITY:
      return get_controlStatusQuality();

    case _LOCAL_CONTROL_FLAG:
      return is_localControlFlag();

    case _PARTIAL_PHASE_INFO:
      return get_partialPhaseInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _PARENT_ID:
      return isSet_parentId();
    case _MAX_DAILY_OPS:
      return isSet_maxDailyOps();
    case _MAX_OPS_DISABLE_FLAG:
      return isSet_maxOpsDisableFlag();
    case _ALARM_INHIBIT_FLAG:
      return isSet_alarmInhibitFlag();
    case _CONTROL_INHIBIT_FLAG:
      return isSet_controlInhibitFlag();
    case _OPERATIONAL_STATE:
      return isSet_operationalState();
    case _CONTROLLER_TYPE:
      return isSet_controllerType();
    case _CONTROL_DEVICE_ID:
      return isSet_controlDeviceId();
    case _BANK_SIZE:
      return isSet_bankSize();
    case _TYPE_OF_SWITCH:
      return isSet_typeOfSwitch();
    case _SWITCH_MANUFACTURE:
      return isSet_switchManufacture();
    case _MAP_LOCATION_ID:
      return isSet_mapLocationId();
    case _RECLOSE_DELAY:
      return isSet_recloseDelay();
    case _CONTROL_ORDER:
      return isSet_controlOrder();
    case _STATUS_POINT_ID:
      return isSet_statusPointId();
    case _CONTROL_STATUS:
      return isSet_controlStatus();
    case _OPERATION_ANALOG_POINT_ID:
      return isSet_operationAnalogPointId();
    case _TOTAL_OPERATIONS:
      return isSet_totalOperations();
    case _LAST_STATUS_CHANGE_TIME:
      return isSet_lastStatusChangeTime();
    case _TAGS_CONTROL_STATUS:
      return isSet_tagsControlStatus();
    case _ORIGINAL_PARENT_ID:
      return isSet_originalParentId();
    case _CURRENT_DAILY_OPERATIONS:
      return isSet_currentDailyOperations();
    case _IGNORE_FLAG:
      return isSet_ignoreFlag();
    case _IGNORE_REASON:
      return isSet_ignoreReason();
    case _OV_UV_DISABLED_FLAG:
      return isSet_ovUvDisabledFlag();
    case _TRIP_ORDER:
      return isSet_tripOrder();
    case _CLOSE_ORDER:
      return isSet_closeOrder();
    case _CONTROL_DEVICE_TYPE:
      return isSet_controlDeviceType();
    case _S_BEFORE_VARS:
      return isSet_sBeforeVars();
    case _S_AFTER_VARS:
      return isSet_sAfterVars();
    case _S_PERCENT_CHANGE:
      return isSet_sPercentChange();
    case _MAX_DAILY_OPS_HIT_FLAG:
      return isSet_maxDailyOpsHitFlag();
    case _OV_UV_SITUATION_FLAG:
      return isSet_ovUvSituationFlag();
    case _CONTROL_STATUS_QUALITY:
      return isSet_controlStatusQuality();
    case _LOCAL_CONTROL_FLAG:
      return isSet_localControlFlag();
    case _PARTIAL_PHASE_INFO:
      return isSet_partialPhaseInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof CCCapBank)
      return this.equals((CCCapBank)that);
    return false;
  }

  public boolean equals(CCCapBank that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__parentId = true;
    boolean that_present__parentId = true;
    if (this_present__parentId || that_present__parentId) {
      if (!(this_present__parentId && that_present__parentId))
        return false;
      if (this._parentId != that._parentId)
        return false;
    }

    boolean this_present__maxDailyOps = true;
    boolean that_present__maxDailyOps = true;
    if (this_present__maxDailyOps || that_present__maxDailyOps) {
      if (!(this_present__maxDailyOps && that_present__maxDailyOps))
        return false;
      if (this._maxDailyOps != that._maxDailyOps)
        return false;
    }

    boolean this_present__maxOpsDisableFlag = true;
    boolean that_present__maxOpsDisableFlag = true;
    if (this_present__maxOpsDisableFlag || that_present__maxOpsDisableFlag) {
      if (!(this_present__maxOpsDisableFlag && that_present__maxOpsDisableFlag))
        return false;
      if (this._maxOpsDisableFlag != that._maxOpsDisableFlag)
        return false;
    }

    boolean this_present__alarmInhibitFlag = true;
    boolean that_present__alarmInhibitFlag = true;
    if (this_present__alarmInhibitFlag || that_present__alarmInhibitFlag) {
      if (!(this_present__alarmInhibitFlag && that_present__alarmInhibitFlag))
        return false;
      if (this._alarmInhibitFlag != that._alarmInhibitFlag)
        return false;
    }

    boolean this_present__controlInhibitFlag = true;
    boolean that_present__controlInhibitFlag = true;
    if (this_present__controlInhibitFlag || that_present__controlInhibitFlag) {
      if (!(this_present__controlInhibitFlag && that_present__controlInhibitFlag))
        return false;
      if (this._controlInhibitFlag != that._controlInhibitFlag)
        return false;
    }

    boolean this_present__operationalState = true && this.isSet_operationalState();
    boolean that_present__operationalState = true && that.isSet_operationalState();
    if (this_present__operationalState || that_present__operationalState) {
      if (!(this_present__operationalState && that_present__operationalState))
        return false;
      if (!this._operationalState.equals(that._operationalState))
        return false;
    }

    boolean this_present__controllerType = true && this.isSet_controllerType();
    boolean that_present__controllerType = true && that.isSet_controllerType();
    if (this_present__controllerType || that_present__controllerType) {
      if (!(this_present__controllerType && that_present__controllerType))
        return false;
      if (!this._controllerType.equals(that._controllerType))
        return false;
    }

    boolean this_present__controlDeviceId = true;
    boolean that_present__controlDeviceId = true;
    if (this_present__controlDeviceId || that_present__controlDeviceId) {
      if (!(this_present__controlDeviceId && that_present__controlDeviceId))
        return false;
      if (this._controlDeviceId != that._controlDeviceId)
        return false;
    }

    boolean this_present__bankSize = true;
    boolean that_present__bankSize = true;
    if (this_present__bankSize || that_present__bankSize) {
      if (!(this_present__bankSize && that_present__bankSize))
        return false;
      if (this._bankSize != that._bankSize)
        return false;
    }

    boolean this_present__typeOfSwitch = true && this.isSet_typeOfSwitch();
    boolean that_present__typeOfSwitch = true && that.isSet_typeOfSwitch();
    if (this_present__typeOfSwitch || that_present__typeOfSwitch) {
      if (!(this_present__typeOfSwitch && that_present__typeOfSwitch))
        return false;
      if (!this._typeOfSwitch.equals(that._typeOfSwitch))
        return false;
    }

    boolean this_present__switchManufacture = true && this.isSet_switchManufacture();
    boolean that_present__switchManufacture = true && that.isSet_switchManufacture();
    if (this_present__switchManufacture || that_present__switchManufacture) {
      if (!(this_present__switchManufacture && that_present__switchManufacture))
        return false;
      if (!this._switchManufacture.equals(that._switchManufacture))
        return false;
    }

    boolean this_present__mapLocationId = true && this.isSet_mapLocationId();
    boolean that_present__mapLocationId = true && that.isSet_mapLocationId();
    if (this_present__mapLocationId || that_present__mapLocationId) {
      if (!(this_present__mapLocationId && that_present__mapLocationId))
        return false;
      if (!this._mapLocationId.equals(that._mapLocationId))
        return false;
    }

    boolean this_present__recloseDelay = true;
    boolean that_present__recloseDelay = true;
    if (this_present__recloseDelay || that_present__recloseDelay) {
      if (!(this_present__recloseDelay && that_present__recloseDelay))
        return false;
      if (this._recloseDelay != that._recloseDelay)
        return false;
    }

    boolean this_present__controlOrder = true;
    boolean that_present__controlOrder = true;
    if (this_present__controlOrder || that_present__controlOrder) {
      if (!(this_present__controlOrder && that_present__controlOrder))
        return false;
      if (this._controlOrder != that._controlOrder)
        return false;
    }

    boolean this_present__statusPointId = true;
    boolean that_present__statusPointId = true;
    if (this_present__statusPointId || that_present__statusPointId) {
      if (!(this_present__statusPointId && that_present__statusPointId))
        return false;
      if (this._statusPointId != that._statusPointId)
        return false;
    }

    boolean this_present__controlStatus = true;
    boolean that_present__controlStatus = true;
    if (this_present__controlStatus || that_present__controlStatus) {
      if (!(this_present__controlStatus && that_present__controlStatus))
        return false;
      if (this._controlStatus != that._controlStatus)
        return false;
    }

    boolean this_present__operationAnalogPointId = true;
    boolean that_present__operationAnalogPointId = true;
    if (this_present__operationAnalogPointId || that_present__operationAnalogPointId) {
      if (!(this_present__operationAnalogPointId && that_present__operationAnalogPointId))
        return false;
      if (this._operationAnalogPointId != that._operationAnalogPointId)
        return false;
    }

    boolean this_present__totalOperations = true;
    boolean that_present__totalOperations = true;
    if (this_present__totalOperations || that_present__totalOperations) {
      if (!(this_present__totalOperations && that_present__totalOperations))
        return false;
      if (this._totalOperations != that._totalOperations)
        return false;
    }

    boolean this_present__lastStatusChangeTime = true;
    boolean that_present__lastStatusChangeTime = true;
    if (this_present__lastStatusChangeTime || that_present__lastStatusChangeTime) {
      if (!(this_present__lastStatusChangeTime && that_present__lastStatusChangeTime))
        return false;
      if (this._lastStatusChangeTime != that._lastStatusChangeTime)
        return false;
    }

    boolean this_present__tagsControlStatus = true;
    boolean that_present__tagsControlStatus = true;
    if (this_present__tagsControlStatus || that_present__tagsControlStatus) {
      if (!(this_present__tagsControlStatus && that_present__tagsControlStatus))
        return false;
      if (this._tagsControlStatus != that._tagsControlStatus)
        return false;
    }

    boolean this_present__originalParentId = true;
    boolean that_present__originalParentId = true;
    if (this_present__originalParentId || that_present__originalParentId) {
      if (!(this_present__originalParentId && that_present__originalParentId))
        return false;
      if (this._originalParentId != that._originalParentId)
        return false;
    }

    boolean this_present__currentDailyOperations = true;
    boolean that_present__currentDailyOperations = true;
    if (this_present__currentDailyOperations || that_present__currentDailyOperations) {
      if (!(this_present__currentDailyOperations && that_present__currentDailyOperations))
        return false;
      if (this._currentDailyOperations != that._currentDailyOperations)
        return false;
    }

    boolean this_present__ignoreFlag = true;
    boolean that_present__ignoreFlag = true;
    if (this_present__ignoreFlag || that_present__ignoreFlag) {
      if (!(this_present__ignoreFlag && that_present__ignoreFlag))
        return false;
      if (this._ignoreFlag != that._ignoreFlag)
        return false;
    }

    boolean this_present__ignoreReason = true;
    boolean that_present__ignoreReason = true;
    if (this_present__ignoreReason || that_present__ignoreReason) {
      if (!(this_present__ignoreReason && that_present__ignoreReason))
        return false;
      if (this._ignoreReason != that._ignoreReason)
        return false;
    }

    boolean this_present__ovUvDisabledFlag = true;
    boolean that_present__ovUvDisabledFlag = true;
    if (this_present__ovUvDisabledFlag || that_present__ovUvDisabledFlag) {
      if (!(this_present__ovUvDisabledFlag && that_present__ovUvDisabledFlag))
        return false;
      if (this._ovUvDisabledFlag != that._ovUvDisabledFlag)
        return false;
    }

    boolean this_present__tripOrder = true;
    boolean that_present__tripOrder = true;
    if (this_present__tripOrder || that_present__tripOrder) {
      if (!(this_present__tripOrder && that_present__tripOrder))
        return false;
      if (this._tripOrder != that._tripOrder)
        return false;
    }

    boolean this_present__closeOrder = true;
    boolean that_present__closeOrder = true;
    if (this_present__closeOrder || that_present__closeOrder) {
      if (!(this_present__closeOrder && that_present__closeOrder))
        return false;
      if (this._closeOrder != that._closeOrder)
        return false;
    }

    boolean this_present__controlDeviceType = true && this.isSet_controlDeviceType();
    boolean that_present__controlDeviceType = true && that.isSet_controlDeviceType();
    if (this_present__controlDeviceType || that_present__controlDeviceType) {
      if (!(this_present__controlDeviceType && that_present__controlDeviceType))
        return false;
      if (!this._controlDeviceType.equals(that._controlDeviceType))
        return false;
    }

    boolean this_present__sBeforeVars = true && this.isSet_sBeforeVars();
    boolean that_present__sBeforeVars = true && that.isSet_sBeforeVars();
    if (this_present__sBeforeVars || that_present__sBeforeVars) {
      if (!(this_present__sBeforeVars && that_present__sBeforeVars))
        return false;
      if (!this._sBeforeVars.equals(that._sBeforeVars))
        return false;
    }

    boolean this_present__sAfterVars = true && this.isSet_sAfterVars();
    boolean that_present__sAfterVars = true && that.isSet_sAfterVars();
    if (this_present__sAfterVars || that_present__sAfterVars) {
      if (!(this_present__sAfterVars && that_present__sAfterVars))
        return false;
      if (!this._sAfterVars.equals(that._sAfterVars))
        return false;
    }

    boolean this_present__sPercentChange = true && this.isSet_sPercentChange();
    boolean that_present__sPercentChange = true && that.isSet_sPercentChange();
    if (this_present__sPercentChange || that_present__sPercentChange) {
      if (!(this_present__sPercentChange && that_present__sPercentChange))
        return false;
      if (!this._sPercentChange.equals(that._sPercentChange))
        return false;
    }

    boolean this_present__maxDailyOpsHitFlag = true;
    boolean that_present__maxDailyOpsHitFlag = true;
    if (this_present__maxDailyOpsHitFlag || that_present__maxDailyOpsHitFlag) {
      if (!(this_present__maxDailyOpsHitFlag && that_present__maxDailyOpsHitFlag))
        return false;
      if (this._maxDailyOpsHitFlag != that._maxDailyOpsHitFlag)
        return false;
    }

    boolean this_present__ovUvSituationFlag = true;
    boolean that_present__ovUvSituationFlag = true;
    if (this_present__ovUvSituationFlag || that_present__ovUvSituationFlag) {
      if (!(this_present__ovUvSituationFlag && that_present__ovUvSituationFlag))
        return false;
      if (this._ovUvSituationFlag != that._ovUvSituationFlag)
        return false;
    }

    boolean this_present__controlStatusQuality = true;
    boolean that_present__controlStatusQuality = true;
    if (this_present__controlStatusQuality || that_present__controlStatusQuality) {
      if (!(this_present__controlStatusQuality && that_present__controlStatusQuality))
        return false;
      if (this._controlStatusQuality != that._controlStatusQuality)
        return false;
    }

    boolean this_present__localControlFlag = true;
    boolean that_present__localControlFlag = true;
    if (this_present__localControlFlag || that_present__localControlFlag) {
      if (!(this_present__localControlFlag && that_present__localControlFlag))
        return false;
      if (this._localControlFlag != that._localControlFlag)
        return false;
    }

    boolean this_present__partialPhaseInfo = true && this.isSet_partialPhaseInfo();
    boolean that_present__partialPhaseInfo = true && that.isSet_partialPhaseInfo();
    if (this_present__partialPhaseInfo || that_present__partialPhaseInfo) {
      if (!(this_present__partialPhaseInfo && that_present__partialPhaseInfo))
        return false;
      if (!this._partialPhaseInfo.equals(that._partialPhaseInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_baseMessage()) ? 131071 : 524287);
    if (isSet_baseMessage())
      hashCode = hashCode * 8191 + _baseMessage.hashCode();

    hashCode = hashCode * 8191 + _parentId;

    hashCode = hashCode * 8191 + _maxDailyOps;

    hashCode = hashCode * 8191 + ((_maxOpsDisableFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((_alarmInhibitFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((_controlInhibitFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSet_operationalState()) ? 131071 : 524287);
    if (isSet_operationalState())
      hashCode = hashCode * 8191 + _operationalState.hashCode();

    hashCode = hashCode * 8191 + ((isSet_controllerType()) ? 131071 : 524287);
    if (isSet_controllerType())
      hashCode = hashCode * 8191 + _controllerType.hashCode();

    hashCode = hashCode * 8191 + _controlDeviceId;

    hashCode = hashCode * 8191 + _bankSize;

    hashCode = hashCode * 8191 + ((isSet_typeOfSwitch()) ? 131071 : 524287);
    if (isSet_typeOfSwitch())
      hashCode = hashCode * 8191 + _typeOfSwitch.hashCode();

    hashCode = hashCode * 8191 + ((isSet_switchManufacture()) ? 131071 : 524287);
    if (isSet_switchManufacture())
      hashCode = hashCode * 8191 + _switchManufacture.hashCode();

    hashCode = hashCode * 8191 + ((isSet_mapLocationId()) ? 131071 : 524287);
    if (isSet_mapLocationId())
      hashCode = hashCode * 8191 + _mapLocationId.hashCode();

    hashCode = hashCode * 8191 + _recloseDelay;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_controlOrder);

    hashCode = hashCode * 8191 + _statusPointId;

    hashCode = hashCode * 8191 + _controlStatus;

    hashCode = hashCode * 8191 + _operationAnalogPointId;

    hashCode = hashCode * 8191 + _totalOperations;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastStatusChangeTime);

    hashCode = hashCode * 8191 + _tagsControlStatus;

    hashCode = hashCode * 8191 + _originalParentId;

    hashCode = hashCode * 8191 + _currentDailyOperations;

    hashCode = hashCode * 8191 + ((_ignoreFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + _ignoreReason;

    hashCode = hashCode * 8191 + ((_ovUvDisabledFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_tripOrder);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_closeOrder);

    hashCode = hashCode * 8191 + ((isSet_controlDeviceType()) ? 131071 : 524287);
    if (isSet_controlDeviceType())
      hashCode = hashCode * 8191 + _controlDeviceType.hashCode();

    hashCode = hashCode * 8191 + ((isSet_sBeforeVars()) ? 131071 : 524287);
    if (isSet_sBeforeVars())
      hashCode = hashCode * 8191 + _sBeforeVars.hashCode();

    hashCode = hashCode * 8191 + ((isSet_sAfterVars()) ? 131071 : 524287);
    if (isSet_sAfterVars())
      hashCode = hashCode * 8191 + _sAfterVars.hashCode();

    hashCode = hashCode * 8191 + ((isSet_sPercentChange()) ? 131071 : 524287);
    if (isSet_sPercentChange())
      hashCode = hashCode * 8191 + _sPercentChange.hashCode();

    hashCode = hashCode * 8191 + ((_maxDailyOpsHitFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((_ovUvSituationFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + _controlStatusQuality;

    hashCode = hashCode * 8191 + ((_localControlFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSet_partialPhaseInfo()) ? 131071 : 524287);
    if (isSet_partialPhaseInfo())
      hashCode = hashCode * 8191 + _partialPhaseInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CCCapBank other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSet_baseMessage(), other.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, other._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_parentId(), other.isSet_parentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_parentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._parentId, other._parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_maxDailyOps(), other.isSet_maxDailyOps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_maxDailyOps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._maxDailyOps, other._maxDailyOps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_maxOpsDisableFlag(), other.isSet_maxOpsDisableFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_maxOpsDisableFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._maxOpsDisableFlag, other._maxOpsDisableFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_alarmInhibitFlag(), other.isSet_alarmInhibitFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_alarmInhibitFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._alarmInhibitFlag, other._alarmInhibitFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_controlInhibitFlag(), other.isSet_controlInhibitFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlInhibitFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlInhibitFlag, other._controlInhibitFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_operationalState(), other.isSet_operationalState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_operationalState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._operationalState, other._operationalState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_controllerType(), other.isSet_controllerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controllerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controllerType, other._controllerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_controlDeviceId(), other.isSet_controlDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlDeviceId, other._controlDeviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_bankSize(), other.isSet_bankSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_bankSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._bankSize, other._bankSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_typeOfSwitch(), other.isSet_typeOfSwitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_typeOfSwitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._typeOfSwitch, other._typeOfSwitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_switchManufacture(), other.isSet_switchManufacture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_switchManufacture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._switchManufacture, other._switchManufacture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_mapLocationId(), other.isSet_mapLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_mapLocationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._mapLocationId, other._mapLocationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_recloseDelay(), other.isSet_recloseDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_recloseDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._recloseDelay, other._recloseDelay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_controlOrder(), other.isSet_controlOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlOrder, other._controlOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_statusPointId(), other.isSet_statusPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_statusPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._statusPointId, other._statusPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_controlStatus(), other.isSet_controlStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlStatus, other._controlStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_operationAnalogPointId(), other.isSet_operationAnalogPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_operationAnalogPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._operationAnalogPointId, other._operationAnalogPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_totalOperations(), other.isSet_totalOperations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_totalOperations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._totalOperations, other._totalOperations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_lastStatusChangeTime(), other.isSet_lastStatusChangeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastStatusChangeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastStatusChangeTime, other._lastStatusChangeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_tagsControlStatus(), other.isSet_tagsControlStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_tagsControlStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._tagsControlStatus, other._tagsControlStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_originalParentId(), other.isSet_originalParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_originalParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._originalParentId, other._originalParentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_currentDailyOperations(), other.isSet_currentDailyOperations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentDailyOperations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentDailyOperations, other._currentDailyOperations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_ignoreFlag(), other.isSet_ignoreFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_ignoreFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._ignoreFlag, other._ignoreFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_ignoreReason(), other.isSet_ignoreReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_ignoreReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._ignoreReason, other._ignoreReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_ovUvDisabledFlag(), other.isSet_ovUvDisabledFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_ovUvDisabledFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._ovUvDisabledFlag, other._ovUvDisabledFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_tripOrder(), other.isSet_tripOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_tripOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._tripOrder, other._tripOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_closeOrder(), other.isSet_closeOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_closeOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._closeOrder, other._closeOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_controlDeviceType(), other.isSet_controlDeviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlDeviceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlDeviceType, other._controlDeviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_sBeforeVars(), other.isSet_sBeforeVars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_sBeforeVars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sBeforeVars, other._sBeforeVars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_sAfterVars(), other.isSet_sAfterVars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_sAfterVars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sAfterVars, other._sAfterVars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_sPercentChange(), other.isSet_sPercentChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_sPercentChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sPercentChange, other._sPercentChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_maxDailyOpsHitFlag(), other.isSet_maxDailyOpsHitFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_maxDailyOpsHitFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._maxDailyOpsHitFlag, other._maxDailyOpsHitFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_ovUvSituationFlag(), other.isSet_ovUvSituationFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_ovUvSituationFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._ovUvSituationFlag, other._ovUvSituationFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_controlStatusQuality(), other.isSet_controlStatusQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlStatusQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlStatusQuality, other._controlStatusQuality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_localControlFlag(), other.isSet_localControlFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_localControlFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._localControlFlag, other._localControlFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSet_partialPhaseInfo(), other.isSet_partialPhaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_partialPhaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._partialPhaseInfo, other._partialPhaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CCCapBank(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_parentId:");
    sb.append(this._parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_maxDailyOps:");
    sb.append(this._maxDailyOps);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_maxOpsDisableFlag:");
    sb.append(this._maxOpsDisableFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_alarmInhibitFlag:");
    sb.append(this._alarmInhibitFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlInhibitFlag:");
    sb.append(this._controlInhibitFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_operationalState:");
    if (this._operationalState == null) {
      sb.append("null");
    } else {
      sb.append(this._operationalState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controllerType:");
    if (this._controllerType == null) {
      sb.append("null");
    } else {
      sb.append(this._controllerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlDeviceId:");
    sb.append(this._controlDeviceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_bankSize:");
    sb.append(this._bankSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_typeOfSwitch:");
    if (this._typeOfSwitch == null) {
      sb.append("null");
    } else {
      sb.append(this._typeOfSwitch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_switchManufacture:");
    if (this._switchManufacture == null) {
      sb.append("null");
    } else {
      sb.append(this._switchManufacture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_mapLocationId:");
    if (this._mapLocationId == null) {
      sb.append("null");
    } else {
      sb.append(this._mapLocationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_recloseDelay:");
    sb.append(this._recloseDelay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlOrder:");
    sb.append(this._controlOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_statusPointId:");
    sb.append(this._statusPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlStatus:");
    sb.append(this._controlStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_operationAnalogPointId:");
    sb.append(this._operationAnalogPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_totalOperations:");
    sb.append(this._totalOperations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastStatusChangeTime:");
    sb.append(this._lastStatusChangeTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_tagsControlStatus:");
    sb.append(this._tagsControlStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_originalParentId:");
    sb.append(this._originalParentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentDailyOperations:");
    sb.append(this._currentDailyOperations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_ignoreFlag:");
    sb.append(this._ignoreFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_ignoreReason:");
    sb.append(this._ignoreReason);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_ovUvDisabledFlag:");
    sb.append(this._ovUvDisabledFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_tripOrder:");
    sb.append(this._tripOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_closeOrder:");
    sb.append(this._closeOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlDeviceType:");
    if (this._controlDeviceType == null) {
      sb.append("null");
    } else {
      sb.append(this._controlDeviceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_sBeforeVars:");
    if (this._sBeforeVars == null) {
      sb.append("null");
    } else {
      sb.append(this._sBeforeVars);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_sAfterVars:");
    if (this._sAfterVars == null) {
      sb.append("null");
    } else {
      sb.append(this._sAfterVars);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_sPercentChange:");
    if (this._sPercentChange == null) {
      sb.append("null");
    } else {
      sb.append(this._sPercentChange);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_maxDailyOpsHitFlag:");
    sb.append(this._maxDailyOpsHitFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_ovUvSituationFlag:");
    sb.append(this._ovUvSituationFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlStatusQuality:");
    sb.append(this._controlStatusQuality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_localControlFlag:");
    sb.append(this._localControlFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_partialPhaseInfo:");
    if (this._partialPhaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this._partialPhaseInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_parentId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_parentId' is unset! Struct:" + toString());
    }

    if (!isSet_maxDailyOps()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_maxDailyOps' is unset! Struct:" + toString());
    }

    if (!isSet_maxOpsDisableFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_maxOpsDisableFlag' is unset! Struct:" + toString());
    }

    if (!isSet_alarmInhibitFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_alarmInhibitFlag' is unset! Struct:" + toString());
    }

    if (!isSet_controlInhibitFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlInhibitFlag' is unset! Struct:" + toString());
    }

    if (!isSet_operationalState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_operationalState' is unset! Struct:" + toString());
    }

    if (!isSet_controllerType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controllerType' is unset! Struct:" + toString());
    }

    if (!isSet_controlDeviceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlDeviceId' is unset! Struct:" + toString());
    }

    if (!isSet_bankSize()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_bankSize' is unset! Struct:" + toString());
    }

    if (!isSet_typeOfSwitch()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_typeOfSwitch' is unset! Struct:" + toString());
    }

    if (!isSet_switchManufacture()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_switchManufacture' is unset! Struct:" + toString());
    }

    if (!isSet_mapLocationId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_mapLocationId' is unset! Struct:" + toString());
    }

    if (!isSet_recloseDelay()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_recloseDelay' is unset! Struct:" + toString());
    }

    if (!isSet_controlOrder()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlOrder' is unset! Struct:" + toString());
    }

    if (!isSet_statusPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_statusPointId' is unset! Struct:" + toString());
    }

    if (!isSet_controlStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlStatus' is unset! Struct:" + toString());
    }

    if (!isSet_operationAnalogPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_operationAnalogPointId' is unset! Struct:" + toString());
    }

    if (!isSet_totalOperations()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_totalOperations' is unset! Struct:" + toString());
    }

    if (!isSet_lastStatusChangeTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastStatusChangeTime' is unset! Struct:" + toString());
    }

    if (!isSet_tagsControlStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_tagsControlStatus' is unset! Struct:" + toString());
    }

    if (!isSet_originalParentId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_originalParentId' is unset! Struct:" + toString());
    }

    if (!isSet_currentDailyOperations()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentDailyOperations' is unset! Struct:" + toString());
    }

    if (!isSet_ignoreFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_ignoreFlag' is unset! Struct:" + toString());
    }

    if (!isSet_ignoreReason()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_ignoreReason' is unset! Struct:" + toString());
    }

    if (!isSet_ovUvDisabledFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_ovUvDisabledFlag' is unset! Struct:" + toString());
    }

    if (!isSet_tripOrder()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_tripOrder' is unset! Struct:" + toString());
    }

    if (!isSet_closeOrder()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_closeOrder' is unset! Struct:" + toString());
    }

    if (!isSet_controlDeviceType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlDeviceType' is unset! Struct:" + toString());
    }

    if (!isSet_sBeforeVars()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_sBeforeVars' is unset! Struct:" + toString());
    }

    if (!isSet_sAfterVars()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_sAfterVars' is unset! Struct:" + toString());
    }

    if (!isSet_sPercentChange()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_sPercentChange' is unset! Struct:" + toString());
    }

    if (!isSet_maxDailyOpsHitFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_maxDailyOpsHitFlag' is unset! Struct:" + toString());
    }

    if (!isSet_ovUvSituationFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_ovUvSituationFlag' is unset! Struct:" + toString());
    }

    if (!isSet_controlStatusQuality()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlStatusQuality' is unset! Struct:" + toString());
    }

    if (!isSet_localControlFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_localControlFlag' is unset! Struct:" + toString());
    }

    if (!isSet_partialPhaseInfo()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_partialPhaseInfo' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CCCapBankStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CCCapBankStandardScheme getScheme() {
      return new CCCapBankStandardScheme();
    }
  }

  private static class CCCapBankStandardScheme extends org.apache.thrift.scheme.StandardScheme<CCCapBank> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CCCapBank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.CCPao();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._parentId = iprot.readI32();
              struct.set_parentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _MAX_DAILY_OPS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._maxDailyOps = iprot.readI32();
              struct.set_maxDailyOpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _MAX_OPS_DISABLE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._maxOpsDisableFlag = iprot.readBool();
              struct.set_maxOpsDisableFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _ALARM_INHIBIT_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._alarmInhibitFlag = iprot.readBool();
              struct.set_alarmInhibitFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _CONTROL_INHIBIT_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._controlInhibitFlag = iprot.readBool();
              struct.set_controlInhibitFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _OPERATIONAL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._operationalState = iprot.readString();
              struct.set_operationalStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _CONTROLLER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._controllerType = iprot.readString();
              struct.set_controllerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _CONTROL_DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._controlDeviceId = iprot.readI32();
              struct.set_controlDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _BANK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._bankSize = iprot.readI32();
              struct.set_bankSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _TYPE_OF_SWITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._typeOfSwitch = iprot.readString();
              struct.set_typeOfSwitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _SWITCH_MANUFACTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._switchManufacture = iprot.readString();
              struct.set_switchManufactureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _MAP_LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._mapLocationId = iprot.readString();
              struct.set_mapLocationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // _RECLOSE_DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._recloseDelay = iprot.readI32();
              struct.set_recloseDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // _CONTROL_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._controlOrder = iprot.readDouble();
              struct.set_controlOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _STATUS_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._statusPointId = iprot.readI32();
              struct.set_statusPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // _CONTROL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._controlStatus = iprot.readI32();
              struct.set_controlStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // _OPERATION_ANALOG_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._operationAnalogPointId = iprot.readI32();
              struct.set_operationAnalogPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // _TOTAL_OPERATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._totalOperations = iprot.readI32();
              struct.set_totalOperationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // _LAST_STATUS_CHANGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastStatusChangeTime = iprot.readI64();
              struct.set_lastStatusChangeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // _TAGS_CONTROL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._tagsControlStatus = iprot.readI32();
              struct.set_tagsControlStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // _ORIGINAL_PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._originalParentId = iprot.readI32();
              struct.set_originalParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // _CURRENT_DAILY_OPERATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentDailyOperations = iprot.readI32();
              struct.set_currentDailyOperationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // _IGNORE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._ignoreFlag = iprot.readBool();
              struct.set_ignoreFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // _IGNORE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._ignoreReason = iprot.readI32();
              struct.set_ignoreReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // _OV_UV_DISABLED_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._ovUvDisabledFlag = iprot.readBool();
              struct.set_ovUvDisabledFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // _TRIP_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._tripOrder = iprot.readDouble();
              struct.set_tripOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // _CLOSE_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._closeOrder = iprot.readDouble();
              struct.set_closeOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // _CONTROL_DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._controlDeviceType = iprot.readString();
              struct.set_controlDeviceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // _S_BEFORE_VARS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._sBeforeVars = iprot.readString();
              struct.set_sBeforeVarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // _S_AFTER_VARS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._sAfterVars = iprot.readString();
              struct.set_sAfterVarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // _S_PERCENT_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._sPercentChange = iprot.readString();
              struct.set_sPercentChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // _MAX_DAILY_OPS_HIT_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._maxDailyOpsHitFlag = iprot.readBool();
              struct.set_maxDailyOpsHitFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // _OV_UV_SITUATION_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._ovUvSituationFlag = iprot.readBool();
              struct.set_ovUvSituationFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // _CONTROL_STATUS_QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._controlStatusQuality = iprot.readI32();
              struct.set_controlStatusQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // _LOCAL_CONTROL_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._localControlFlag = iprot.readBool();
              struct.set_localControlFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // _PARTIAL_PHASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._partialPhaseInfo = iprot.readString();
              struct.set_partialPhaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CCCapBank struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct._parentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MAX_DAILY_OPS_FIELD_DESC);
      oprot.writeI32(struct._maxDailyOps);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_MAX_OPS_DISABLE_FLAG_FIELD_DESC);
      oprot.writeBool(struct._maxOpsDisableFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ALARM_INHIBIT_FLAG_FIELD_DESC);
      oprot.writeBool(struct._alarmInhibitFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_INHIBIT_FLAG_FIELD_DESC);
      oprot.writeBool(struct._controlInhibitFlag);
      oprot.writeFieldEnd();
      if (struct._operationalState != null) {
        oprot.writeFieldBegin(_OPERATIONAL_STATE_FIELD_DESC);
        oprot.writeString(struct._operationalState);
        oprot.writeFieldEnd();
      }
      if (struct._controllerType != null) {
        oprot.writeFieldBegin(_CONTROLLER_TYPE_FIELD_DESC);
        oprot.writeString(struct._controllerType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_CONTROL_DEVICE_ID_FIELD_DESC);
      oprot.writeI32(struct._controlDeviceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_BANK_SIZE_FIELD_DESC);
      oprot.writeI32(struct._bankSize);
      oprot.writeFieldEnd();
      if (struct._typeOfSwitch != null) {
        oprot.writeFieldBegin(_TYPE_OF_SWITCH_FIELD_DESC);
        oprot.writeString(struct._typeOfSwitch);
        oprot.writeFieldEnd();
      }
      if (struct._switchManufacture != null) {
        oprot.writeFieldBegin(_SWITCH_MANUFACTURE_FIELD_DESC);
        oprot.writeString(struct._switchManufacture);
        oprot.writeFieldEnd();
      }
      if (struct._mapLocationId != null) {
        oprot.writeFieldBegin(_MAP_LOCATION_ID_FIELD_DESC);
        oprot.writeString(struct._mapLocationId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_RECLOSE_DELAY_FIELD_DESC);
      oprot.writeI32(struct._recloseDelay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_ORDER_FIELD_DESC);
      oprot.writeDouble(struct._controlOrder);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STATUS_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._statusPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_STATUS_FIELD_DESC);
      oprot.writeI32(struct._controlStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_OPERATION_ANALOG_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._operationAnalogPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TOTAL_OPERATIONS_FIELD_DESC);
      oprot.writeI32(struct._totalOperations);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_STATUS_CHANGE_TIME_FIELD_DESC);
      oprot.writeI64(struct._lastStatusChangeTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TAGS_CONTROL_STATUS_FIELD_DESC);
      oprot.writeI32(struct._tagsControlStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ORIGINAL_PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct._originalParentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_DAILY_OPERATIONS_FIELD_DESC);
      oprot.writeI32(struct._currentDailyOperations);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_IGNORE_FLAG_FIELD_DESC);
      oprot.writeBool(struct._ignoreFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_IGNORE_REASON_FIELD_DESC);
      oprot.writeI32(struct._ignoreReason);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_OV_UV_DISABLED_FLAG_FIELD_DESC);
      oprot.writeBool(struct._ovUvDisabledFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TRIP_ORDER_FIELD_DESC);
      oprot.writeDouble(struct._tripOrder);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CLOSE_ORDER_FIELD_DESC);
      oprot.writeDouble(struct._closeOrder);
      oprot.writeFieldEnd();
      if (struct._controlDeviceType != null) {
        oprot.writeFieldBegin(_CONTROL_DEVICE_TYPE_FIELD_DESC);
        oprot.writeString(struct._controlDeviceType);
        oprot.writeFieldEnd();
      }
      if (struct._sBeforeVars != null) {
        oprot.writeFieldBegin(_S_BEFORE_VARS_FIELD_DESC);
        oprot.writeString(struct._sBeforeVars);
        oprot.writeFieldEnd();
      }
      if (struct._sAfterVars != null) {
        oprot.writeFieldBegin(_S_AFTER_VARS_FIELD_DESC);
        oprot.writeString(struct._sAfterVars);
        oprot.writeFieldEnd();
      }
      if (struct._sPercentChange != null) {
        oprot.writeFieldBegin(_S_PERCENT_CHANGE_FIELD_DESC);
        oprot.writeString(struct._sPercentChange);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_MAX_DAILY_OPS_HIT_FLAG_FIELD_DESC);
      oprot.writeBool(struct._maxDailyOpsHitFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_OV_UV_SITUATION_FLAG_FIELD_DESC);
      oprot.writeBool(struct._ovUvSituationFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CONTROL_STATUS_QUALITY_FIELD_DESC);
      oprot.writeI32(struct._controlStatusQuality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LOCAL_CONTROL_FLAG_FIELD_DESC);
      oprot.writeBool(struct._localControlFlag);
      oprot.writeFieldEnd();
      if (struct._partialPhaseInfo != null) {
        oprot.writeFieldBegin(_PARTIAL_PHASE_INFO_FIELD_DESC);
        oprot.writeString(struct._partialPhaseInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CCCapBankTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CCCapBankTupleScheme getScheme() {
      return new CCCapBankTupleScheme();
    }
  }

  private static class CCCapBankTupleScheme extends org.apache.thrift.scheme.TupleScheme<CCCapBank> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CCCapBank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._parentId);
      oprot.writeI32(struct._maxDailyOps);
      oprot.writeBool(struct._maxOpsDisableFlag);
      oprot.writeBool(struct._alarmInhibitFlag);
      oprot.writeBool(struct._controlInhibitFlag);
      oprot.writeString(struct._operationalState);
      oprot.writeString(struct._controllerType);
      oprot.writeI32(struct._controlDeviceId);
      oprot.writeI32(struct._bankSize);
      oprot.writeString(struct._typeOfSwitch);
      oprot.writeString(struct._switchManufacture);
      oprot.writeString(struct._mapLocationId);
      oprot.writeI32(struct._recloseDelay);
      oprot.writeDouble(struct._controlOrder);
      oprot.writeI32(struct._statusPointId);
      oprot.writeI32(struct._controlStatus);
      oprot.writeI32(struct._operationAnalogPointId);
      oprot.writeI32(struct._totalOperations);
      oprot.writeI64(struct._lastStatusChangeTime);
      oprot.writeI32(struct._tagsControlStatus);
      oprot.writeI32(struct._originalParentId);
      oprot.writeI32(struct._currentDailyOperations);
      oprot.writeBool(struct._ignoreFlag);
      oprot.writeI32(struct._ignoreReason);
      oprot.writeBool(struct._ovUvDisabledFlag);
      oprot.writeDouble(struct._tripOrder);
      oprot.writeDouble(struct._closeOrder);
      oprot.writeString(struct._controlDeviceType);
      oprot.writeString(struct._sBeforeVars);
      oprot.writeString(struct._sAfterVars);
      oprot.writeString(struct._sPercentChange);
      oprot.writeBool(struct._maxDailyOpsHitFlag);
      oprot.writeBool(struct._ovUvSituationFlag);
      oprot.writeI32(struct._controlStatusQuality);
      oprot.writeBool(struct._localControlFlag);
      oprot.writeString(struct._partialPhaseInfo);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CCCapBank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.CCPao();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._parentId = iprot.readI32();
      struct.set_parentIdIsSet(true);
      struct._maxDailyOps = iprot.readI32();
      struct.set_maxDailyOpsIsSet(true);
      struct._maxOpsDisableFlag = iprot.readBool();
      struct.set_maxOpsDisableFlagIsSet(true);
      struct._alarmInhibitFlag = iprot.readBool();
      struct.set_alarmInhibitFlagIsSet(true);
      struct._controlInhibitFlag = iprot.readBool();
      struct.set_controlInhibitFlagIsSet(true);
      struct._operationalState = iprot.readString();
      struct.set_operationalStateIsSet(true);
      struct._controllerType = iprot.readString();
      struct.set_controllerTypeIsSet(true);
      struct._controlDeviceId = iprot.readI32();
      struct.set_controlDeviceIdIsSet(true);
      struct._bankSize = iprot.readI32();
      struct.set_bankSizeIsSet(true);
      struct._typeOfSwitch = iprot.readString();
      struct.set_typeOfSwitchIsSet(true);
      struct._switchManufacture = iprot.readString();
      struct.set_switchManufactureIsSet(true);
      struct._mapLocationId = iprot.readString();
      struct.set_mapLocationIdIsSet(true);
      struct._recloseDelay = iprot.readI32();
      struct.set_recloseDelayIsSet(true);
      struct._controlOrder = iprot.readDouble();
      struct.set_controlOrderIsSet(true);
      struct._statusPointId = iprot.readI32();
      struct.set_statusPointIdIsSet(true);
      struct._controlStatus = iprot.readI32();
      struct.set_controlStatusIsSet(true);
      struct._operationAnalogPointId = iprot.readI32();
      struct.set_operationAnalogPointIdIsSet(true);
      struct._totalOperations = iprot.readI32();
      struct.set_totalOperationsIsSet(true);
      struct._lastStatusChangeTime = iprot.readI64();
      struct.set_lastStatusChangeTimeIsSet(true);
      struct._tagsControlStatus = iprot.readI32();
      struct.set_tagsControlStatusIsSet(true);
      struct._originalParentId = iprot.readI32();
      struct.set_originalParentIdIsSet(true);
      struct._currentDailyOperations = iprot.readI32();
      struct.set_currentDailyOperationsIsSet(true);
      struct._ignoreFlag = iprot.readBool();
      struct.set_ignoreFlagIsSet(true);
      struct._ignoreReason = iprot.readI32();
      struct.set_ignoreReasonIsSet(true);
      struct._ovUvDisabledFlag = iprot.readBool();
      struct.set_ovUvDisabledFlagIsSet(true);
      struct._tripOrder = iprot.readDouble();
      struct.set_tripOrderIsSet(true);
      struct._closeOrder = iprot.readDouble();
      struct.set_closeOrderIsSet(true);
      struct._controlDeviceType = iprot.readString();
      struct.set_controlDeviceTypeIsSet(true);
      struct._sBeforeVars = iprot.readString();
      struct.set_sBeforeVarsIsSet(true);
      struct._sAfterVars = iprot.readString();
      struct.set_sAfterVarsIsSet(true);
      struct._sPercentChange = iprot.readString();
      struct.set_sPercentChangeIsSet(true);
      struct._maxDailyOpsHitFlag = iprot.readBool();
      struct.set_maxDailyOpsHitFlagIsSet(true);
      struct._ovUvSituationFlag = iprot.readBool();
      struct.set_ovUvSituationFlagIsSet(true);
      struct._controlStatusQuality = iprot.readI32();
      struct.set_controlStatusQualityIsSet(true);
      struct._localControlFlag = iprot.readBool();
      struct.set_localControlFlagIsSet(true);
      struct._partialPhaseInfo = iprot.readString();
      struct.set_partialPhaseInfoIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-11")
public class ChannelData implements org.apache.thrift.TBase<ChannelData, ChannelData._Fields>, java.io.Serializable, Cloneable, Comparable<ChannelData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelData");

  private static final org.apache.thrift.protocol.TField CHANNEL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("channelNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField UNIT_OF_MEASURE_FIELD_DESC = new org.apache.thrift.protocol.TField("unitOfMeasure", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UNIT_OF_MEASURE_MODIFIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("unitOfMeasureModifiers", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChannelDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChannelDataTupleSchemeFactory();

  private int channelNumber; // required
  private @org.apache.thrift.annotation.Nullable ChannelDataStatus status; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String unitOfMeasure; // required
  private @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> unitOfMeasureModifiers; // required
  private double value; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANNEL_NUMBER((short)1, "channelNumber"),
    /**
     * 
     * @see ChannelDataStatus
     */
    STATUS((short)2, "status"),
    UNIT_OF_MEASURE((short)3, "unitOfMeasure"),
    UNIT_OF_MEASURE_MODIFIERS((short)4, "unitOfMeasureModifiers"),
    VALUE((short)5, "value");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANNEL_NUMBER
          return CHANNEL_NUMBER;
        case 2: // STATUS
          return STATUS;
        case 3: // UNIT_OF_MEASURE
          return UNIT_OF_MEASURE;
        case 4: // UNIT_OF_MEASURE_MODIFIERS
          return UNIT_OF_MEASURE_MODIFIERS;
        case 5: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHANNELNUMBER_ISSET_ID = 0;
  private static final int __VALUE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANNEL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("channelNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChannelDataStatus.class)));
    tmpMap.put(_Fields.UNIT_OF_MEASURE, new org.apache.thrift.meta_data.FieldMetaData("unitOfMeasure", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_OF_MEASURE_MODIFIERS, new org.apache.thrift.meta_data.FieldMetaData("unitOfMeasureModifiers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelData.class, metaDataMap);
  }

  public ChannelData() {
  }

  public ChannelData(
    int channelNumber,
    ChannelDataStatus status,
    java.lang.String unitOfMeasure,
    java.util.Set<java.lang.String> unitOfMeasureModifiers,
    double value)
  {
    this();
    this.channelNumber = channelNumber;
    setChannelNumberIsSet(true);
    this.status = status;
    this.unitOfMeasure = unitOfMeasure;
    this.unitOfMeasureModifiers = unitOfMeasureModifiers;
    this.value = value;
    setValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelData(ChannelData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.channelNumber = other.channelNumber;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetUnitOfMeasure()) {
      this.unitOfMeasure = other.unitOfMeasure;
    }
    if (other.isSetUnitOfMeasureModifiers()) {
      java.util.Set<java.lang.String> __this__unitOfMeasureModifiers = new java.util.HashSet<java.lang.String>(other.unitOfMeasureModifiers);
      this.unitOfMeasureModifiers = __this__unitOfMeasureModifiers;
    }
    this.value = other.value;
  }

  public ChannelData deepCopy() {
    return new ChannelData(this);
  }

  @Override
  public void clear() {
    setChannelNumberIsSet(false);
    this.channelNumber = 0;
    this.status = null;
    this.unitOfMeasure = null;
    this.unitOfMeasureModifiers = null;
    setValueIsSet(false);
    this.value = 0.0;
  }

  public int getChannelNumber() {
    return this.channelNumber;
  }

  public void setChannelNumber(int channelNumber) {
    this.channelNumber = channelNumber;
    setChannelNumberIsSet(true);
  }

  public void unsetChannelNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNELNUMBER_ISSET_ID);
  }

  /** Returns true if field channelNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNELNUMBER_ISSET_ID);
  }

  public void setChannelNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNELNUMBER_ISSET_ID, value);
  }

  /**
   * 
   * @see ChannelDataStatus
   */
  @org.apache.thrift.annotation.Nullable
  public ChannelDataStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see ChannelDataStatus
   */
  public void setStatus(@org.apache.thrift.annotation.Nullable ChannelDataStatus status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUnitOfMeasure() {
    return this.unitOfMeasure;
  }

  public void setUnitOfMeasure(@org.apache.thrift.annotation.Nullable java.lang.String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }

  public void unsetUnitOfMeasure() {
    this.unitOfMeasure = null;
  }

  /** Returns true if field unitOfMeasure is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitOfMeasure() {
    return this.unitOfMeasure != null;
  }

  public void setUnitOfMeasureIsSet(boolean value) {
    if (!value) {
      this.unitOfMeasure = null;
    }
  }

  public int getUnitOfMeasureModifiersSize() {
    return (this.unitOfMeasureModifiers == null) ? 0 : this.unitOfMeasureModifiers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getUnitOfMeasureModifiersIterator() {
    return (this.unitOfMeasureModifiers == null) ? null : this.unitOfMeasureModifiers.iterator();
  }

  public void addToUnitOfMeasureModifiers(java.lang.String elem) {
    if (this.unitOfMeasureModifiers == null) {
      this.unitOfMeasureModifiers = new java.util.HashSet<java.lang.String>();
    }
    this.unitOfMeasureModifiers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getUnitOfMeasureModifiers() {
    return this.unitOfMeasureModifiers;
  }

  public void setUnitOfMeasureModifiers(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> unitOfMeasureModifiers) {
    this.unitOfMeasureModifiers = unitOfMeasureModifiers;
  }

  public void unsetUnitOfMeasureModifiers() {
    this.unitOfMeasureModifiers = null;
  }

  /** Returns true if field unitOfMeasureModifiers is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitOfMeasureModifiers() {
    return this.unitOfMeasureModifiers != null;
  }

  public void setUnitOfMeasureModifiersIsSet(boolean value) {
    if (!value) {
      this.unitOfMeasureModifiers = null;
    }
  }

  public double getValue() {
    return this.value;
  }

  public void setValue(double value) {
    this.value = value;
    setValueIsSet(true);
  }

  public void unsetValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHANNEL_NUMBER:
      if (value == null) {
        unsetChannelNumber();
      } else {
        setChannelNumber((java.lang.Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((ChannelDataStatus)value);
      }
      break;

    case UNIT_OF_MEASURE:
      if (value == null) {
        unsetUnitOfMeasure();
      } else {
        setUnitOfMeasure((java.lang.String)value);
      }
      break;

    case UNIT_OF_MEASURE_MODIFIERS:
      if (value == null) {
        unsetUnitOfMeasureModifiers();
      } else {
        setUnitOfMeasureModifiers((java.util.Set<java.lang.String>)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANNEL_NUMBER:
      return getChannelNumber();

    case STATUS:
      return getStatus();

    case UNIT_OF_MEASURE:
      return getUnitOfMeasure();

    case UNIT_OF_MEASURE_MODIFIERS:
      return getUnitOfMeasureModifiers();

    case VALUE:
      return getValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHANNEL_NUMBER:
      return isSetChannelNumber();
    case STATUS:
      return isSetStatus();
    case UNIT_OF_MEASURE:
      return isSetUnitOfMeasure();
    case UNIT_OF_MEASURE_MODIFIERS:
      return isSetUnitOfMeasureModifiers();
    case VALUE:
      return isSetValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelData)
      return this.equals((ChannelData)that);
    return false;
  }

  public boolean equals(ChannelData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_channelNumber = true;
    boolean that_present_channelNumber = true;
    if (this_present_channelNumber || that_present_channelNumber) {
      if (!(this_present_channelNumber && that_present_channelNumber))
        return false;
      if (this.channelNumber != that.channelNumber)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_unitOfMeasure = true && this.isSetUnitOfMeasure();
    boolean that_present_unitOfMeasure = true && that.isSetUnitOfMeasure();
    if (this_present_unitOfMeasure || that_present_unitOfMeasure) {
      if (!(this_present_unitOfMeasure && that_present_unitOfMeasure))
        return false;
      if (!this.unitOfMeasure.equals(that.unitOfMeasure))
        return false;
    }

    boolean this_present_unitOfMeasureModifiers = true && this.isSetUnitOfMeasureModifiers();
    boolean that_present_unitOfMeasureModifiers = true && that.isSetUnitOfMeasureModifiers();
    if (this_present_unitOfMeasureModifiers || that_present_unitOfMeasureModifiers) {
      if (!(this_present_unitOfMeasureModifiers && that_present_unitOfMeasureModifiers))
        return false;
      if (!this.unitOfMeasureModifiers.equals(that.unitOfMeasureModifiers))
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + channelNumber;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.getValue();

    hashCode = hashCode * 8191 + ((isSetUnitOfMeasure()) ? 131071 : 524287);
    if (isSetUnitOfMeasure())
      hashCode = hashCode * 8191 + unitOfMeasure.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnitOfMeasureModifiers()) ? 131071 : 524287);
    if (isSetUnitOfMeasureModifiers())
      hashCode = hashCode * 8191 + unitOfMeasureModifiers.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(value);

    return hashCode;
  }

  @Override
  public int compareTo(ChannelData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetChannelNumber()).compareTo(other.isSetChannelNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelNumber, other.channelNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnitOfMeasure()).compareTo(other.isSetUnitOfMeasure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitOfMeasure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitOfMeasure, other.unitOfMeasure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnitOfMeasureModifiers()).compareTo(other.isSetUnitOfMeasureModifiers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitOfMeasureModifiers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitOfMeasureModifiers, other.unitOfMeasureModifiers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChannelData(");
    boolean first = true;

    sb.append("channelNumber:");
    sb.append(this.channelNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitOfMeasure:");
    if (this.unitOfMeasure == null) {
      sb.append("null");
    } else {
      sb.append(this.unitOfMeasure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitOfMeasureModifiers:");
    if (this.unitOfMeasureModifiers == null) {
      sb.append("null");
    } else {
      sb.append(this.unitOfMeasureModifiers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetChannelNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelNumber' is unset! Struct:" + toString());
    }

    if (!isSetStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' is unset! Struct:" + toString());
    }

    if (!isSetUnitOfMeasure()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unitOfMeasure' is unset! Struct:" + toString());
    }

    if (!isSetUnitOfMeasureModifiers()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unitOfMeasureModifiers' is unset! Struct:" + toString());
    }

    if (!isSetValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChannelDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelDataStandardScheme getScheme() {
      return new ChannelDataStandardScheme();
    }
  }

  private static class ChannelDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChannelData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANNEL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channelNumber = iprot.readI32();
              struct.setChannelNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.cannontech.messaging.serialization.thrift.generated.ChannelDataStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNIT_OF_MEASURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitOfMeasure = iprot.readString();
              struct.setUnitOfMeasureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNIT_OF_MEASURE_MODIFIERS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.unitOfMeasureModifiers = new java.util.HashSet<java.lang.String>(2*_set0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.unitOfMeasureModifiers.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setUnitOfMeasureModifiersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.value = iprot.readDouble();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHANNEL_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.channelNumber);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.unitOfMeasure != null) {
        oprot.writeFieldBegin(UNIT_OF_MEASURE_FIELD_DESC);
        oprot.writeString(struct.unitOfMeasure);
        oprot.writeFieldEnd();
      }
      if (struct.unitOfMeasureModifiers != null) {
        oprot.writeFieldBegin(UNIT_OF_MEASURE_MODIFIERS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.unitOfMeasureModifiers.size()));
          for (java.lang.String _iter3 : struct.unitOfMeasureModifiers)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeDouble(struct.value);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChannelDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelDataTupleScheme getScheme() {
      return new ChannelDataTupleScheme();
    }
  }

  private static class ChannelDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChannelData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChannelData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.channelNumber);
      oprot.writeI32(struct.status.getValue());
      oprot.writeString(struct.unitOfMeasure);
      {
        oprot.writeI32(struct.unitOfMeasureModifiers.size());
        for (java.lang.String _iter4 : struct.unitOfMeasureModifiers)
        {
          oprot.writeString(_iter4);
        }
      }
      oprot.writeDouble(struct.value);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChannelData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.channelNumber = iprot.readI32();
      struct.setChannelNumberIsSet(true);
      struct.status = com.cannontech.messaging.serialization.thrift.generated.ChannelDataStatus.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      struct.unitOfMeasure = iprot.readString();
      struct.setUnitOfMeasureIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.unitOfMeasureModifiers = new java.util.HashSet<java.lang.String>(2*_set5.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
        for (int _i7 = 0; _i7 < _set5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.unitOfMeasureModifiers.add(_elem6);
        }
      }
      struct.setUnitOfMeasureModifiersIsSet(true);
      struct.value = iprot.readDouble();
      struct.setValueIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


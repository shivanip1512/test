/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-24")
public class RequestCancel implements org.apache.thrift.TBase<RequestCancel, RequestCancel._Fields>, java.io.Serializable, Cloneable, Comparable<RequestCancel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestCancel");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField __REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_RequestId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField __REQUEST_ID_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("_RequestIdCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField __TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_Time", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField __USER_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_UserMessageId", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestCancelStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestCancelTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage; // required
  private int _RequestId; // required
  private int _RequestIdCount; // required
  private long _Time; // required
  private int _UserMessageId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    __REQUEST_ID((short)2, "_RequestId"),
    __REQUEST_ID_COUNT((short)3, "_RequestIdCount"),
    __TIME((short)4, "_Time"),
    __USER_MESSAGE_ID((short)5, "_UserMessageId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // __REQUEST_ID
          return __REQUEST_ID;
        case 3: // __REQUEST_ID_COUNT
          return __REQUEST_ID_COUNT;
        case 4: // __TIME
          return __TIME;
        case 5: // __USER_MESSAGE_ID
          return __USER_MESSAGE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___REQUESTID_ISSET_ID = 0;
  private static final int ___REQUESTIDCOUNT_ISSET_ID = 1;
  private static final int ___TIME_ISSET_ID = 2;
  private static final int ___USERMESSAGEID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.Message.class)));
    tmpMap.put(_Fields.__REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("_RequestId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.__REQUEST_ID_COUNT, new org.apache.thrift.meta_data.FieldMetaData("_RequestIdCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.__TIME, new org.apache.thrift.meta_data.FieldMetaData("_Time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.__USER_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("_UserMessageId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestCancel.class, metaDataMap);
  }

  public RequestCancel() {
  }

  public RequestCancel(
    com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage,
    int _RequestId,
    int _RequestIdCount,
    long _Time,
    int _UserMessageId)
  {
    this();
    this._baseMessage = _baseMessage;
    this._RequestId = _RequestId;
    set_RequestIdIsSet(true);
    this._RequestIdCount = _RequestIdCount;
    set_RequestIdCountIsSet(true);
    this._Time = _Time;
    set_TimeIsSet(true);
    this._UserMessageId = _UserMessageId;
    set_UserMessageIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestCancel(RequestCancel other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message(other._baseMessage);
    }
    this._RequestId = other._RequestId;
    this._RequestIdCount = other._RequestIdCount;
    this._Time = other._Time;
    this._UserMessageId = other._UserMessageId;
  }

  public RequestCancel deepCopy() {
    return new RequestCancel(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_RequestIdIsSet(false);
    this._RequestId = 0;
    set_RequestIdCountIsSet(false);
    this._RequestIdCount = 0;
    set_TimeIsSet(false);
    this._Time = 0;
    set_UserMessageIdIsSet(false);
    this._UserMessageId = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public com.cannontech.messaging.serialization.thrift.generated.Message get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(@org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.Message _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_RequestId() {
    return this._RequestId;
  }

  public void set_RequestId(int _RequestId) {
    this._RequestId = _RequestId;
    set_RequestIdIsSet(true);
  }

  public void unset_RequestId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___REQUESTID_ISSET_ID);
  }

  /** Returns true if field _RequestId is set (has been assigned a value) and false otherwise */
  public boolean isSet_RequestId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___REQUESTID_ISSET_ID);
  }

  public void set_RequestIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___REQUESTID_ISSET_ID, value);
  }

  public int get_RequestIdCount() {
    return this._RequestIdCount;
  }

  public void set_RequestIdCount(int _RequestIdCount) {
    this._RequestIdCount = _RequestIdCount;
    set_RequestIdCountIsSet(true);
  }

  public void unset_RequestIdCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___REQUESTIDCOUNT_ISSET_ID);
  }

  /** Returns true if field _RequestIdCount is set (has been assigned a value) and false otherwise */
  public boolean isSet_RequestIdCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___REQUESTIDCOUNT_ISSET_ID);
  }

  public void set_RequestIdCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___REQUESTIDCOUNT_ISSET_ID, value);
  }

  public long get_Time() {
    return this._Time;
  }

  public void set_Time(long _Time) {
    this._Time = _Time;
    set_TimeIsSet(true);
  }

  public void unset_Time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TIME_ISSET_ID);
  }

  /** Returns true if field _Time is set (has been assigned a value) and false otherwise */
  public boolean isSet_Time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TIME_ISSET_ID);
  }

  public void set_TimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TIME_ISSET_ID, value);
  }

  public int get_UserMessageId() {
    return this._UserMessageId;
  }

  public void set_UserMessageId(int _UserMessageId) {
    this._UserMessageId = _UserMessageId;
    set_UserMessageIdIsSet(true);
  }

  public void unset_UserMessageId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___USERMESSAGEID_ISSET_ID);
  }

  /** Returns true if field _UserMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSet_UserMessageId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___USERMESSAGEID_ISSET_ID);
  }

  public void set_UserMessageIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___USERMESSAGEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.Message)value);
      }
      break;

    case __REQUEST_ID:
      if (value == null) {
        unset_RequestId();
      } else {
        set_RequestId((java.lang.Integer)value);
      }
      break;

    case __REQUEST_ID_COUNT:
      if (value == null) {
        unset_RequestIdCount();
      } else {
        set_RequestIdCount((java.lang.Integer)value);
      }
      break;

    case __TIME:
      if (value == null) {
        unset_Time();
      } else {
        set_Time((java.lang.Long)value);
      }
      break;

    case __USER_MESSAGE_ID:
      if (value == null) {
        unset_UserMessageId();
      } else {
        set_UserMessageId((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case __REQUEST_ID:
      return get_RequestId();

    case __REQUEST_ID_COUNT:
      return get_RequestIdCount();

    case __TIME:
      return get_Time();

    case __USER_MESSAGE_ID:
      return get_UserMessageId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case __REQUEST_ID:
      return isSet_RequestId();
    case __REQUEST_ID_COUNT:
      return isSet_RequestIdCount();
    case __TIME:
      return isSet_Time();
    case __USER_MESSAGE_ID:
      return isSet_UserMessageId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestCancel)
      return this.equals((RequestCancel)that);
    return false;
  }

  public boolean equals(RequestCancel that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__RequestId = true;
    boolean that_present__RequestId = true;
    if (this_present__RequestId || that_present__RequestId) {
      if (!(this_present__RequestId && that_present__RequestId))
        return false;
      if (this._RequestId != that._RequestId)
        return false;
    }

    boolean this_present__RequestIdCount = true;
    boolean that_present__RequestIdCount = true;
    if (this_present__RequestIdCount || that_present__RequestIdCount) {
      if (!(this_present__RequestIdCount && that_present__RequestIdCount))
        return false;
      if (this._RequestIdCount != that._RequestIdCount)
        return false;
    }

    boolean this_present__Time = true;
    boolean that_present__Time = true;
    if (this_present__Time || that_present__Time) {
      if (!(this_present__Time && that_present__Time))
        return false;
      if (this._Time != that._Time)
        return false;
    }

    boolean this_present__UserMessageId = true;
    boolean that_present__UserMessageId = true;
    if (this_present__UserMessageId || that_present__UserMessageId) {
      if (!(this_present__UserMessageId && that_present__UserMessageId))
        return false;
      if (this._UserMessageId != that._UserMessageId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_baseMessage()) ? 131071 : 524287);
    if (isSet_baseMessage())
      hashCode = hashCode * 8191 + _baseMessage.hashCode();

    hashCode = hashCode * 8191 + _RequestId;

    hashCode = hashCode * 8191 + _RequestIdCount;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_Time);

    hashCode = hashCode * 8191 + _UserMessageId;

    return hashCode;
  }

  @Override
  public int compareTo(RequestCancel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_baseMessage()).compareTo(other.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, other._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_RequestId()).compareTo(other.isSet_RequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_RequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._RequestId, other._RequestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_RequestIdCount()).compareTo(other.isSet_RequestIdCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_RequestIdCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._RequestIdCount, other._RequestIdCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_Time()).compareTo(other.isSet_Time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_Time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._Time, other._Time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_UserMessageId()).compareTo(other.isSet_UserMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_UserMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._UserMessageId, other._UserMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestCancel(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_RequestId:");
    sb.append(this._RequestId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_RequestIdCount:");
    sb.append(this._RequestIdCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_Time:");
    sb.append(this._Time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_UserMessageId:");
    sb.append(this._UserMessageId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_RequestId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_RequestId' is unset! Struct:" + toString());
    }

    if (!isSet_RequestIdCount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_RequestIdCount' is unset! Struct:" + toString());
    }

    if (!isSet_Time()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_Time' is unset! Struct:" + toString());
    }

    if (!isSet_UserMessageId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_UserMessageId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestCancelStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestCancelStandardScheme getScheme() {
      return new RequestCancelStandardScheme();
    }
  }

  private static class RequestCancelStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestCancel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequestCancel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // __REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._RequestId = iprot.readI32();
              struct.set_RequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // __REQUEST_ID_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._RequestIdCount = iprot.readI32();
              struct.set_RequestIdCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // __TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._Time = iprot.readI64();
              struct.set_TimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // __USER_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._UserMessageId = iprot.readI32();
              struct.set_UserMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequestCancel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(__REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct._RequestId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(__REQUEST_ID_COUNT_FIELD_DESC);
      oprot.writeI32(struct._RequestIdCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(__TIME_FIELD_DESC);
      oprot.writeI64(struct._Time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(__USER_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct._UserMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestCancelTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestCancelTupleScheme getScheme() {
      return new RequestCancelTupleScheme();
    }
  }

  private static class RequestCancelTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestCancel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequestCancel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._RequestId);
      oprot.writeI32(struct._RequestIdCount);
      oprot.writeI64(struct._Time);
      oprot.writeI32(struct._UserMessageId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequestCancel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.Message();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._RequestId = iprot.readI32();
      struct.set_RequestIdIsSet(true);
      struct._RequestIdCount = iprot.readI32();
      struct.set_RequestIdCountIsSet(true);
      struct._Time = iprot.readI64();
      struct.set_TimeIsSet(true);
      struct._UserMessageId = iprot.readI32();
      struct.set_UserMessageIdIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-27")
public class CCState implements org.apache.thrift.TBase<CCState, CCState._Fields>, java.io.Serializable, Cloneable, Comparable<CCState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CCState");

  private static final org.apache.thrift.protocol.TField _TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("_text", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField _FOREGROUND_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("_foregroundColor", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _BACKGROUND_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("_backgroundColor", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CCStateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CCStateTupleSchemeFactory();

  private java.lang.String _text; // required
  private int _foregroundColor; // required
  private int _backgroundColor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _TEXT((short)1, "_text"),
    _FOREGROUND_COLOR((short)2, "_foregroundColor"),
    _BACKGROUND_COLOR((short)3, "_backgroundColor");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _TEXT
          return _TEXT;
        case 2: // _FOREGROUND_COLOR
          return _FOREGROUND_COLOR;
        case 3: // _BACKGROUND_COLOR
          return _BACKGROUND_COLOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___FOREGROUNDCOLOR_ISSET_ID = 0;
  private static final int ___BACKGROUNDCOLOR_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._TEXT, new org.apache.thrift.meta_data.FieldMetaData("_text", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._FOREGROUND_COLOR, new org.apache.thrift.meta_data.FieldMetaData("_foregroundColor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._BACKGROUND_COLOR, new org.apache.thrift.meta_data.FieldMetaData("_backgroundColor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CCState.class, metaDataMap);
  }

  public CCState() {
  }

  public CCState(
    java.lang.String _text,
    int _foregroundColor,
    int _backgroundColor)
  {
    this();
    this._text = _text;
    this._foregroundColor = _foregroundColor;
    set_foregroundColorIsSet(true);
    this._backgroundColor = _backgroundColor;
    set_backgroundColorIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CCState(CCState other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_text()) {
      this._text = other._text;
    }
    this._foregroundColor = other._foregroundColor;
    this._backgroundColor = other._backgroundColor;
  }

  public CCState deepCopy() {
    return new CCState(this);
  }

  @Override
  public void clear() {
    this._text = null;
    set_foregroundColorIsSet(false);
    this._foregroundColor = 0;
    set_backgroundColorIsSet(false);
    this._backgroundColor = 0;
  }

  public java.lang.String get_text() {
    return this._text;
  }

  public void set_text(java.lang.String _text) {
    this._text = _text;
  }

  public void unset_text() {
    this._text = null;
  }

  /** Returns true if field _text is set (has been assigned a value) and false otherwise */
  public boolean isSet_text() {
    return this._text != null;
  }

  public void set_textIsSet(boolean value) {
    if (!value) {
      this._text = null;
    }
  }

  public int get_foregroundColor() {
    return this._foregroundColor;
  }

  public void set_foregroundColor(int _foregroundColor) {
    this._foregroundColor = _foregroundColor;
    set_foregroundColorIsSet(true);
  }

  public void unset_foregroundColor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___FOREGROUNDCOLOR_ISSET_ID);
  }

  /** Returns true if field _foregroundColor is set (has been assigned a value) and false otherwise */
  public boolean isSet_foregroundColor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___FOREGROUNDCOLOR_ISSET_ID);
  }

  public void set_foregroundColorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___FOREGROUNDCOLOR_ISSET_ID, value);
  }

  public int get_backgroundColor() {
    return this._backgroundColor;
  }

  public void set_backgroundColor(int _backgroundColor) {
    this._backgroundColor = _backgroundColor;
    set_backgroundColorIsSet(true);
  }

  public void unset_backgroundColor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___BACKGROUNDCOLOR_ISSET_ID);
  }

  /** Returns true if field _backgroundColor is set (has been assigned a value) and false otherwise */
  public boolean isSet_backgroundColor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___BACKGROUNDCOLOR_ISSET_ID);
  }

  public void set_backgroundColorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___BACKGROUNDCOLOR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case _TEXT:
      if (value == null) {
        unset_text();
      } else {
        set_text((java.lang.String)value);
      }
      break;

    case _FOREGROUND_COLOR:
      if (value == null) {
        unset_foregroundColor();
      } else {
        set_foregroundColor((java.lang.Integer)value);
      }
      break;

    case _BACKGROUND_COLOR:
      if (value == null) {
        unset_backgroundColor();
      } else {
        set_backgroundColor((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _TEXT:
      return get_text();

    case _FOREGROUND_COLOR:
      return get_foregroundColor();

    case _BACKGROUND_COLOR:
      return get_backgroundColor();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _TEXT:
      return isSet_text();
    case _FOREGROUND_COLOR:
      return isSet_foregroundColor();
    case _BACKGROUND_COLOR:
      return isSet_backgroundColor();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CCState)
      return this.equals((CCState)that);
    return false;
  }

  public boolean equals(CCState that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__text = true && this.isSet_text();
    boolean that_present__text = true && that.isSet_text();
    if (this_present__text || that_present__text) {
      if (!(this_present__text && that_present__text))
        return false;
      if (!this._text.equals(that._text))
        return false;
    }

    boolean this_present__foregroundColor = true;
    boolean that_present__foregroundColor = true;
    if (this_present__foregroundColor || that_present__foregroundColor) {
      if (!(this_present__foregroundColor && that_present__foregroundColor))
        return false;
      if (this._foregroundColor != that._foregroundColor)
        return false;
    }

    boolean this_present__backgroundColor = true;
    boolean that_present__backgroundColor = true;
    if (this_present__backgroundColor || that_present__backgroundColor) {
      if (!(this_present__backgroundColor && that_present__backgroundColor))
        return false;
      if (this._backgroundColor != that._backgroundColor)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_text()) ? 131071 : 524287);
    if (isSet_text())
      hashCode = hashCode * 8191 + _text.hashCode();

    hashCode = hashCode * 8191 + _foregroundColor;

    hashCode = hashCode * 8191 + _backgroundColor;

    return hashCode;
  }

  @Override
  public int compareTo(CCState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_text()).compareTo(other.isSet_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._text, other._text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_foregroundColor()).compareTo(other.isSet_foregroundColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_foregroundColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._foregroundColor, other._foregroundColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_backgroundColor()).compareTo(other.isSet_backgroundColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_backgroundColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._backgroundColor, other._backgroundColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CCState(");
    boolean first = true;

    sb.append("_text:");
    if (this._text == null) {
      sb.append("null");
    } else {
      sb.append(this._text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_foregroundColor:");
    sb.append(this._foregroundColor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_backgroundColor:");
    sb.append(this._backgroundColor);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_text()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_text' is unset! Struct:" + toString());
    }

    if (!isSet_foregroundColor()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_foregroundColor' is unset! Struct:" + toString());
    }

    if (!isSet_backgroundColor()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_backgroundColor' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CCStateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CCStateStandardScheme getScheme() {
      return new CCStateStandardScheme();
    }
  }

  private static class CCStateStandardScheme extends org.apache.thrift.scheme.StandardScheme<CCState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CCState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._text = iprot.readString();
              struct.set_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _FOREGROUND_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._foregroundColor = iprot.readI32();
              struct.set_foregroundColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _BACKGROUND_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._backgroundColor = iprot.readI32();
              struct.set_backgroundColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CCState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._text != null) {
        oprot.writeFieldBegin(_TEXT_FIELD_DESC);
        oprot.writeString(struct._text);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_FOREGROUND_COLOR_FIELD_DESC);
      oprot.writeI32(struct._foregroundColor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_BACKGROUND_COLOR_FIELD_DESC);
      oprot.writeI32(struct._backgroundColor);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CCStateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CCStateTupleScheme getScheme() {
      return new CCStateTupleScheme();
    }
  }

  private static class CCStateTupleScheme extends org.apache.thrift.scheme.TupleScheme<CCState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CCState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct._text);
      oprot.writeI32(struct._foregroundColor);
      oprot.writeI32(struct._backgroundColor);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CCState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._text = iprot.readString();
      struct.set_textIsSet(true);
      struct._foregroundColor = iprot.readI32();
      struct.set_foregroundColorIsSet(true);
      struct._backgroundColor = iprot.readI32();
      struct.set_backgroundColorIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


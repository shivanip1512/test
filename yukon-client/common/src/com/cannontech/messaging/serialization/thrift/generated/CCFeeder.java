/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-12-16")
public class CCFeeder implements org.apache.thrift.TBase<CCFeeder, CCFeeder._Fields>, java.io.Serializable, Cloneable, Comparable<CCFeeder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CCFeeder");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_parentId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _STRATEGY_MAX_DAILY_OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_maxDailyOperation", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField _STRATEGY_MAX_OPERATION_DISABLE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_maxOperationDisableFlag", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField _CURRENT_VAR_LOAD_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentVarLoadPointId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField _CURRENT_VAR_LOAD_POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentVarLoadPointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField _CURRENT_WATT_LOAD_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentWattLoadPointId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField _CURRENT_WATT_LOAD_POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentWattLoadPointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField _MAP_LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_mapLocationId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField _DISPLAY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("_displayOrder", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField _NEW_POINT_DATA_RECEIVED_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_newPointDataReceivedFlag", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField _LAST_CURRENT_VAR_POINT_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastCurrentVarPointUpdateTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField _ESTIMATED_VAR_LOAD_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_estimatedVarLoadPointId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField _ESTIMATED_VAR_LOAD_POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_estimatedVarLoadPointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField _DAILY_OPERATIONS_ANALOG_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_dailyOperationsAnalogPointId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField _POWER_FACTOR_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_powerFactorPointId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField _ESTIMATED_POWER_FACTOR_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_estimatedPowerFactorPointId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField _CURRENT_DAILY_OPERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentDailyOperations", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField _RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_recentlyControlledFlag_or_performingVerificationFlag", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField _LAST_OPERATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("_lastOperationTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField _VAR_VALUE_BEFORE_CONTROL_FIELD_DESC = new org.apache.thrift.protocol.TField("_varValueBeforeControl", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField _POWER_FACTOR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_powerFactorValue", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField _ESTIMATED_POWER_FACTOR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_estimatedPowerFactorValue", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField _CURRENT_VAR_POINT_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentVarPointQuality", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField _WAIVE_CONTROL_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_waiveControlFlag", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField _STRATEGY_CONTROL_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_controlUnits", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField _DECIMAL_PLACES_FIELD_DESC = new org.apache.thrift.protocol.TField("_decimalPlaces", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField _PEAK_TIME_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_peakTimeFlag", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField _STRATEGY_PEAK_LAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_peakLag", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField _STRATEGY_OFF_PEAK_LAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_offPeakLag", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField _STRATEGY__PEAK_LEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_PeakLead", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField _STRATEGY__OFF_PEAK_LEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_OffPeakLead", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField _CURRENT_VOLT_LOAD_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentVoltLoadPointId", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField _CURRENT_VOLT_LOAD_POINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentVoltLoadPointValue", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField _CURRENT_WATT_POINT_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentWattPointQuality", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField _CURRENT_VOLT_POINT_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_currentVoltPointQuality", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField _TARGET_VAR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_targetVarValue", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField _SOLUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("_solution", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField _OV_UV_DISABLED_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_ovUvDisabledFlag", org.apache.thrift.protocol.TType.BOOL, (short)39);
  private static final org.apache.thrift.protocol.TField _STRATEGY_PEAK_PFSET_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_peakPFSetPoint", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField _STRATEGY_OFF_PEAK_PFSET_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_offPeakPFSetPoint", org.apache.thrift.protocol.TType.DOUBLE, (short)41);
  private static final org.apache.thrift.protocol.TField _STRATEGY_CONTROL_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("_strategy_controlMethod", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField _PHASE_AVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_phaseAValue", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField _PHASE_BVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_phaseBValue", org.apache.thrift.protocol.TType.DOUBLE, (short)44);
  private static final org.apache.thrift.protocol.TField _PHASE_CVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_phaseCValue", org.apache.thrift.protocol.TType.DOUBLE, (short)45);
  private static final org.apache.thrift.protocol.TField _LIKE_DAY_CONTROL_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("_likeDayControlFlag", org.apache.thrift.protocol.TType.BOOL, (short)46);
  private static final org.apache.thrift.protocol.TField _USE_PHASE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("_usePhaseData", org.apache.thrift.protocol.TType.BOOL, (short)47);
  private static final org.apache.thrift.protocol.TField _ORIGINAL_PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_originalParentId", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField _CC_CAPBANKS_FIELD_DESC = new org.apache.thrift.protocol.TField("_ccCapbanks", org.apache.thrift.protocol.TType.LIST, (short)49);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CCFeederStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CCFeederTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.CCPao _baseMessage; // required
  private int _parentId; // required
  private int _strategy_maxDailyOperation; // required
  private boolean _strategy_maxOperationDisableFlag; // required
  private int _currentVarLoadPointId; // required
  private double _currentVarLoadPointValue; // required
  private int _currentWattLoadPointId; // required
  private double _currentWattLoadPointValue; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _mapLocationId; // required
  private double _displayOrder; // required
  private boolean _newPointDataReceivedFlag; // required
  private long _lastCurrentVarPointUpdateTime; // required
  private int _estimatedVarLoadPointId; // required
  private double _estimatedVarLoadPointValue; // required
  private int _dailyOperationsAnalogPointId; // required
  private int _powerFactorPointId; // required
  private int _estimatedPowerFactorPointId; // required
  private int _currentDailyOperations; // required
  private boolean _recentlyControlledFlag_or_performingVerificationFlag; // required
  private long _lastOperationTime; // required
  private double _varValueBeforeControl; // required
  private double _powerFactorValue; // required
  private double _estimatedPowerFactorValue; // required
  private int _currentVarPointQuality; // required
  private boolean _waiveControlFlag; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _strategy_controlUnits; // required
  private int _decimalPlaces; // required
  private boolean _peakTimeFlag; // required
  private double _strategy_peakLag; // required
  private double _strategy_offPeakLag; // required
  private double _strategy_PeakLead; // required
  private double _strategy_OffPeakLead; // required
  private int _currentVoltLoadPointId; // required
  private double _currentVoltLoadPointValue; // required
  private int _currentWattPointQuality; // required
  private int _currentVoltPointQuality; // required
  private double _targetVarValue; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _solution; // required
  private boolean _ovUvDisabledFlag; // required
  private double _strategy_peakPFSetPoint; // required
  private double _strategy_offPeakPFSetPoint; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String _strategy_controlMethod; // required
  private double _phaseAValue; // required
  private double _phaseBValue; // required
  private double _phaseCValue; // required
  private boolean _likeDayControlFlag; // required
  private boolean _usePhaseData; // required
  private int _originalParentId; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<CCCapBank> _ccCapbanks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _PARENT_ID((short)2, "_parentId"),
    _STRATEGY_MAX_DAILY_OPERATION((short)3, "_strategy_maxDailyOperation"),
    _STRATEGY_MAX_OPERATION_DISABLE_FLAG((short)4, "_strategy_maxOperationDisableFlag"),
    _CURRENT_VAR_LOAD_POINT_ID((short)5, "_currentVarLoadPointId"),
    _CURRENT_VAR_LOAD_POINT_VALUE((short)6, "_currentVarLoadPointValue"),
    _CURRENT_WATT_LOAD_POINT_ID((short)7, "_currentWattLoadPointId"),
    _CURRENT_WATT_LOAD_POINT_VALUE((short)8, "_currentWattLoadPointValue"),
    _MAP_LOCATION_ID((short)9, "_mapLocationId"),
    _DISPLAY_ORDER((short)10, "_displayOrder"),
    _NEW_POINT_DATA_RECEIVED_FLAG((short)11, "_newPointDataReceivedFlag"),
    _LAST_CURRENT_VAR_POINT_UPDATE_TIME((short)12, "_lastCurrentVarPointUpdateTime"),
    _ESTIMATED_VAR_LOAD_POINT_ID((short)13, "_estimatedVarLoadPointId"),
    _ESTIMATED_VAR_LOAD_POINT_VALUE((short)14, "_estimatedVarLoadPointValue"),
    _DAILY_OPERATIONS_ANALOG_POINT_ID((short)15, "_dailyOperationsAnalogPointId"),
    _POWER_FACTOR_POINT_ID((short)16, "_powerFactorPointId"),
    _ESTIMATED_POWER_FACTOR_POINT_ID((short)17, "_estimatedPowerFactorPointId"),
    _CURRENT_DAILY_OPERATIONS((short)18, "_currentDailyOperations"),
    _RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG((short)19, "_recentlyControlledFlag_or_performingVerificationFlag"),
    _LAST_OPERATION_TIME((short)20, "_lastOperationTime"),
    _VAR_VALUE_BEFORE_CONTROL((short)21, "_varValueBeforeControl"),
    _POWER_FACTOR_VALUE((short)22, "_powerFactorValue"),
    _ESTIMATED_POWER_FACTOR_VALUE((short)23, "_estimatedPowerFactorValue"),
    _CURRENT_VAR_POINT_QUALITY((short)24, "_currentVarPointQuality"),
    _WAIVE_CONTROL_FLAG((short)25, "_waiveControlFlag"),
    _STRATEGY_CONTROL_UNITS((short)26, "_strategy_controlUnits"),
    _DECIMAL_PLACES((short)27, "_decimalPlaces"),
    _PEAK_TIME_FLAG((short)28, "_peakTimeFlag"),
    _STRATEGY_PEAK_LAG((short)29, "_strategy_peakLag"),
    _STRATEGY_OFF_PEAK_LAG((short)30, "_strategy_offPeakLag"),
    _STRATEGY__PEAK_LEAD((short)31, "_strategy_PeakLead"),
    _STRATEGY__OFF_PEAK_LEAD((short)32, "_strategy_OffPeakLead"),
    _CURRENT_VOLT_LOAD_POINT_ID((short)33, "_currentVoltLoadPointId"),
    _CURRENT_VOLT_LOAD_POINT_VALUE((short)34, "_currentVoltLoadPointValue"),
    _CURRENT_WATT_POINT_QUALITY((short)35, "_currentWattPointQuality"),
    _CURRENT_VOLT_POINT_QUALITY((short)36, "_currentVoltPointQuality"),
    _TARGET_VAR_VALUE((short)37, "_targetVarValue"),
    _SOLUTION((short)38, "_solution"),
    _OV_UV_DISABLED_FLAG((short)39, "_ovUvDisabledFlag"),
    _STRATEGY_PEAK_PFSET_POINT((short)40, "_strategy_peakPFSetPoint"),
    _STRATEGY_OFF_PEAK_PFSET_POINT((short)41, "_strategy_offPeakPFSetPoint"),
    _STRATEGY_CONTROL_METHOD((short)42, "_strategy_controlMethod"),
    _PHASE_AVALUE((short)43, "_phaseAValue"),
    _PHASE_BVALUE((short)44, "_phaseBValue"),
    _PHASE_CVALUE((short)45, "_phaseCValue"),
    _LIKE_DAY_CONTROL_FLAG((short)46, "_likeDayControlFlag"),
    _USE_PHASE_DATA((short)47, "_usePhaseData"),
    _ORIGINAL_PARENT_ID((short)48, "_originalParentId"),
    _CC_CAPBANKS((short)49, "_ccCapbanks");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _PARENT_ID
          return _PARENT_ID;
        case 3: // _STRATEGY_MAX_DAILY_OPERATION
          return _STRATEGY_MAX_DAILY_OPERATION;
        case 4: // _STRATEGY_MAX_OPERATION_DISABLE_FLAG
          return _STRATEGY_MAX_OPERATION_DISABLE_FLAG;
        case 5: // _CURRENT_VAR_LOAD_POINT_ID
          return _CURRENT_VAR_LOAD_POINT_ID;
        case 6: // _CURRENT_VAR_LOAD_POINT_VALUE
          return _CURRENT_VAR_LOAD_POINT_VALUE;
        case 7: // _CURRENT_WATT_LOAD_POINT_ID
          return _CURRENT_WATT_LOAD_POINT_ID;
        case 8: // _CURRENT_WATT_LOAD_POINT_VALUE
          return _CURRENT_WATT_LOAD_POINT_VALUE;
        case 9: // _MAP_LOCATION_ID
          return _MAP_LOCATION_ID;
        case 10: // _DISPLAY_ORDER
          return _DISPLAY_ORDER;
        case 11: // _NEW_POINT_DATA_RECEIVED_FLAG
          return _NEW_POINT_DATA_RECEIVED_FLAG;
        case 12: // _LAST_CURRENT_VAR_POINT_UPDATE_TIME
          return _LAST_CURRENT_VAR_POINT_UPDATE_TIME;
        case 13: // _ESTIMATED_VAR_LOAD_POINT_ID
          return _ESTIMATED_VAR_LOAD_POINT_ID;
        case 14: // _ESTIMATED_VAR_LOAD_POINT_VALUE
          return _ESTIMATED_VAR_LOAD_POINT_VALUE;
        case 15: // _DAILY_OPERATIONS_ANALOG_POINT_ID
          return _DAILY_OPERATIONS_ANALOG_POINT_ID;
        case 16: // _POWER_FACTOR_POINT_ID
          return _POWER_FACTOR_POINT_ID;
        case 17: // _ESTIMATED_POWER_FACTOR_POINT_ID
          return _ESTIMATED_POWER_FACTOR_POINT_ID;
        case 18: // _CURRENT_DAILY_OPERATIONS
          return _CURRENT_DAILY_OPERATIONS;
        case 19: // _RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG
          return _RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG;
        case 20: // _LAST_OPERATION_TIME
          return _LAST_OPERATION_TIME;
        case 21: // _VAR_VALUE_BEFORE_CONTROL
          return _VAR_VALUE_BEFORE_CONTROL;
        case 22: // _POWER_FACTOR_VALUE
          return _POWER_FACTOR_VALUE;
        case 23: // _ESTIMATED_POWER_FACTOR_VALUE
          return _ESTIMATED_POWER_FACTOR_VALUE;
        case 24: // _CURRENT_VAR_POINT_QUALITY
          return _CURRENT_VAR_POINT_QUALITY;
        case 25: // _WAIVE_CONTROL_FLAG
          return _WAIVE_CONTROL_FLAG;
        case 26: // _STRATEGY_CONTROL_UNITS
          return _STRATEGY_CONTROL_UNITS;
        case 27: // _DECIMAL_PLACES
          return _DECIMAL_PLACES;
        case 28: // _PEAK_TIME_FLAG
          return _PEAK_TIME_FLAG;
        case 29: // _STRATEGY_PEAK_LAG
          return _STRATEGY_PEAK_LAG;
        case 30: // _STRATEGY_OFF_PEAK_LAG
          return _STRATEGY_OFF_PEAK_LAG;
        case 31: // _STRATEGY__PEAK_LEAD
          return _STRATEGY__PEAK_LEAD;
        case 32: // _STRATEGY__OFF_PEAK_LEAD
          return _STRATEGY__OFF_PEAK_LEAD;
        case 33: // _CURRENT_VOLT_LOAD_POINT_ID
          return _CURRENT_VOLT_LOAD_POINT_ID;
        case 34: // _CURRENT_VOLT_LOAD_POINT_VALUE
          return _CURRENT_VOLT_LOAD_POINT_VALUE;
        case 35: // _CURRENT_WATT_POINT_QUALITY
          return _CURRENT_WATT_POINT_QUALITY;
        case 36: // _CURRENT_VOLT_POINT_QUALITY
          return _CURRENT_VOLT_POINT_QUALITY;
        case 37: // _TARGET_VAR_VALUE
          return _TARGET_VAR_VALUE;
        case 38: // _SOLUTION
          return _SOLUTION;
        case 39: // _OV_UV_DISABLED_FLAG
          return _OV_UV_DISABLED_FLAG;
        case 40: // _STRATEGY_PEAK_PFSET_POINT
          return _STRATEGY_PEAK_PFSET_POINT;
        case 41: // _STRATEGY_OFF_PEAK_PFSET_POINT
          return _STRATEGY_OFF_PEAK_PFSET_POINT;
        case 42: // _STRATEGY_CONTROL_METHOD
          return _STRATEGY_CONTROL_METHOD;
        case 43: // _PHASE_AVALUE
          return _PHASE_AVALUE;
        case 44: // _PHASE_BVALUE
          return _PHASE_BVALUE;
        case 45: // _PHASE_CVALUE
          return _PHASE_CVALUE;
        case 46: // _LIKE_DAY_CONTROL_FLAG
          return _LIKE_DAY_CONTROL_FLAG;
        case 47: // _USE_PHASE_DATA
          return _USE_PHASE_DATA;
        case 48: // _ORIGINAL_PARENT_ID
          return _ORIGINAL_PARENT_ID;
        case 49: // _CC_CAPBANKS
          return _CC_CAPBANKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___PARENTID_ISSET_ID = 0;
  private static final int ___STRATEGY_MAXDAILYOPERATION_ISSET_ID = 1;
  private static final int ___STRATEGY_MAXOPERATIONDISABLEFLAG_ISSET_ID = 2;
  private static final int ___CURRENTVARLOADPOINTID_ISSET_ID = 3;
  private static final int ___CURRENTVARLOADPOINTVALUE_ISSET_ID = 4;
  private static final int ___CURRENTWATTLOADPOINTID_ISSET_ID = 5;
  private static final int ___CURRENTWATTLOADPOINTVALUE_ISSET_ID = 6;
  private static final int ___DISPLAYORDER_ISSET_ID = 7;
  private static final int ___NEWPOINTDATARECEIVEDFLAG_ISSET_ID = 8;
  private static final int ___LASTCURRENTVARPOINTUPDATETIME_ISSET_ID = 9;
  private static final int ___ESTIMATEDVARLOADPOINTID_ISSET_ID = 10;
  private static final int ___ESTIMATEDVARLOADPOINTVALUE_ISSET_ID = 11;
  private static final int ___DAILYOPERATIONSANALOGPOINTID_ISSET_ID = 12;
  private static final int ___POWERFACTORPOINTID_ISSET_ID = 13;
  private static final int ___ESTIMATEDPOWERFACTORPOINTID_ISSET_ID = 14;
  private static final int ___CURRENTDAILYOPERATIONS_ISSET_ID = 15;
  private static final int ___RECENTLYCONTROLLEDFLAG_OR_PERFORMINGVERIFICATIONFLAG_ISSET_ID = 16;
  private static final int ___LASTOPERATIONTIME_ISSET_ID = 17;
  private static final int ___VARVALUEBEFORECONTROL_ISSET_ID = 18;
  private static final int ___POWERFACTORVALUE_ISSET_ID = 19;
  private static final int ___ESTIMATEDPOWERFACTORVALUE_ISSET_ID = 20;
  private static final int ___CURRENTVARPOINTQUALITY_ISSET_ID = 21;
  private static final int ___WAIVECONTROLFLAG_ISSET_ID = 22;
  private static final int ___DECIMALPLACES_ISSET_ID = 23;
  private static final int ___PEAKTIMEFLAG_ISSET_ID = 24;
  private static final int ___STRATEGY_PEAKLAG_ISSET_ID = 25;
  private static final int ___STRATEGY_OFFPEAKLAG_ISSET_ID = 26;
  private static final int ___STRATEGY_PEAKLEAD_ISSET_ID = 27;
  private static final int ___STRATEGY_OFFPEAKLEAD_ISSET_ID = 28;
  private static final int ___CURRENTVOLTLOADPOINTID_ISSET_ID = 29;
  private static final int ___CURRENTVOLTLOADPOINTVALUE_ISSET_ID = 30;
  private static final int ___CURRENTWATTPOINTQUALITY_ISSET_ID = 31;
  private static final int ___CURRENTVOLTPOINTQUALITY_ISSET_ID = 32;
  private static final int ___TARGETVARVALUE_ISSET_ID = 33;
  private static final int ___OVUVDISABLEDFLAG_ISSET_ID = 34;
  private static final int ___STRATEGY_PEAKPFSETPOINT_ISSET_ID = 35;
  private static final int ___STRATEGY_OFFPEAKPFSETPOINT_ISSET_ID = 36;
  private static final int ___PHASEAVALUE_ISSET_ID = 37;
  private static final int ___PHASEBVALUE_ISSET_ID = 38;
  private static final int ___PHASECVALUE_ISSET_ID = 39;
  private static final int ___LIKEDAYCONTROLFLAG_ISSET_ID = 40;
  private static final int ___USEPHASEDATA_ISSET_ID = 41;
  private static final int ___ORIGINALPARENTID_ISSET_ID = 42;
  private long __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.CCPao.class)));
    tmpMap.put(_Fields._PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("_parentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._STRATEGY_MAX_DAILY_OPERATION, new org.apache.thrift.meta_data.FieldMetaData("_strategy_maxDailyOperation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._STRATEGY_MAX_OPERATION_DISABLE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_strategy_maxOperationDisableFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._CURRENT_VAR_LOAD_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_currentVarLoadPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_VAR_LOAD_POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_currentVarLoadPointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._CURRENT_WATT_LOAD_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_currentWattLoadPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_WATT_LOAD_POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_currentWattLoadPointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._MAP_LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("_mapLocationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._DISPLAY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("_displayOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._NEW_POINT_DATA_RECEIVED_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_newPointDataReceivedFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._LAST_CURRENT_VAR_POINT_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("_lastCurrentVarPointUpdateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._ESTIMATED_VAR_LOAD_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_estimatedVarLoadPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._ESTIMATED_VAR_LOAD_POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_estimatedVarLoadPointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._DAILY_OPERATIONS_ANALOG_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_dailyOperationsAnalogPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._POWER_FACTOR_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_powerFactorPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._ESTIMATED_POWER_FACTOR_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_estimatedPowerFactorPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_DAILY_OPERATIONS, new org.apache.thrift.meta_data.FieldMetaData("_currentDailyOperations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_recentlyControlledFlag_or_performingVerificationFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._LAST_OPERATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("_lastOperationTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields._VAR_VALUE_BEFORE_CONTROL, new org.apache.thrift.meta_data.FieldMetaData("_varValueBeforeControl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._POWER_FACTOR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_powerFactorValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._ESTIMATED_POWER_FACTOR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_estimatedPowerFactorValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._CURRENT_VAR_POINT_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("_currentVarPointQuality", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._WAIVE_CONTROL_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_waiveControlFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._STRATEGY_CONTROL_UNITS, new org.apache.thrift.meta_data.FieldMetaData("_strategy_controlUnits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._DECIMAL_PLACES, new org.apache.thrift.meta_data.FieldMetaData("_decimalPlaces", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._PEAK_TIME_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_peakTimeFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._STRATEGY_PEAK_LAG, new org.apache.thrift.meta_data.FieldMetaData("_strategy_peakLag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._STRATEGY_OFF_PEAK_LAG, new org.apache.thrift.meta_data.FieldMetaData("_strategy_offPeakLag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._STRATEGY__PEAK_LEAD, new org.apache.thrift.meta_data.FieldMetaData("_strategy_PeakLead", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._STRATEGY__OFF_PEAK_LEAD, new org.apache.thrift.meta_data.FieldMetaData("_strategy_OffPeakLead", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._CURRENT_VOLT_LOAD_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("_currentVoltLoadPointId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_VOLT_LOAD_POINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_currentVoltLoadPointValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._CURRENT_WATT_POINT_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("_currentWattPointQuality", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CURRENT_VOLT_POINT_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("_currentVoltPointQuality", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._TARGET_VAR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("_targetVarValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._SOLUTION, new org.apache.thrift.meta_data.FieldMetaData("_solution", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._OV_UV_DISABLED_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_ovUvDisabledFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._STRATEGY_PEAK_PFSET_POINT, new org.apache.thrift.meta_data.FieldMetaData("_strategy_peakPFSetPoint", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._STRATEGY_OFF_PEAK_PFSET_POINT, new org.apache.thrift.meta_data.FieldMetaData("_strategy_offPeakPFSetPoint", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._STRATEGY_CONTROL_METHOD, new org.apache.thrift.meta_data.FieldMetaData("_strategy_controlMethod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PHASE_AVALUE, new org.apache.thrift.meta_data.FieldMetaData("_phaseAValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._PHASE_BVALUE, new org.apache.thrift.meta_data.FieldMetaData("_phaseBValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._PHASE_CVALUE, new org.apache.thrift.meta_data.FieldMetaData("_phaseCValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._LIKE_DAY_CONTROL_FLAG, new org.apache.thrift.meta_data.FieldMetaData("_likeDayControlFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._USE_PHASE_DATA, new org.apache.thrift.meta_data.FieldMetaData("_usePhaseData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._ORIGINAL_PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("_originalParentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CC_CAPBANKS, new org.apache.thrift.meta_data.FieldMetaData("_ccCapbanks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCCapBank.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CCFeeder.class, metaDataMap);
  }

  public CCFeeder() {
  }

  public CCFeeder(
    com.cannontech.messaging.serialization.thrift.generated.CCPao _baseMessage,
    int _parentId,
    int _strategy_maxDailyOperation,
    boolean _strategy_maxOperationDisableFlag,
    int _currentVarLoadPointId,
    double _currentVarLoadPointValue,
    int _currentWattLoadPointId,
    double _currentWattLoadPointValue,
    java.lang.String _mapLocationId,
    double _displayOrder,
    boolean _newPointDataReceivedFlag,
    long _lastCurrentVarPointUpdateTime,
    int _estimatedVarLoadPointId,
    double _estimatedVarLoadPointValue,
    int _dailyOperationsAnalogPointId,
    int _powerFactorPointId,
    int _estimatedPowerFactorPointId,
    int _currentDailyOperations,
    boolean _recentlyControlledFlag_or_performingVerificationFlag,
    long _lastOperationTime,
    double _varValueBeforeControl,
    double _powerFactorValue,
    double _estimatedPowerFactorValue,
    int _currentVarPointQuality,
    boolean _waiveControlFlag,
    java.lang.String _strategy_controlUnits,
    int _decimalPlaces,
    boolean _peakTimeFlag,
    double _strategy_peakLag,
    double _strategy_offPeakLag,
    double _strategy_PeakLead,
    double _strategy_OffPeakLead,
    int _currentVoltLoadPointId,
    double _currentVoltLoadPointValue,
    int _currentWattPointQuality,
    int _currentVoltPointQuality,
    double _targetVarValue,
    java.lang.String _solution,
    boolean _ovUvDisabledFlag,
    double _strategy_peakPFSetPoint,
    double _strategy_offPeakPFSetPoint,
    java.lang.String _strategy_controlMethod,
    double _phaseAValue,
    double _phaseBValue,
    double _phaseCValue,
    boolean _likeDayControlFlag,
    boolean _usePhaseData,
    int _originalParentId,
    java.util.List<CCCapBank> _ccCapbanks)
  {
    this();
    this._baseMessage = _baseMessage;
    this._parentId = _parentId;
    set_parentIdIsSet(true);
    this._strategy_maxDailyOperation = _strategy_maxDailyOperation;
    set_strategy_maxDailyOperationIsSet(true);
    this._strategy_maxOperationDisableFlag = _strategy_maxOperationDisableFlag;
    set_strategy_maxOperationDisableFlagIsSet(true);
    this._currentVarLoadPointId = _currentVarLoadPointId;
    set_currentVarLoadPointIdIsSet(true);
    this._currentVarLoadPointValue = _currentVarLoadPointValue;
    set_currentVarLoadPointValueIsSet(true);
    this._currentWattLoadPointId = _currentWattLoadPointId;
    set_currentWattLoadPointIdIsSet(true);
    this._currentWattLoadPointValue = _currentWattLoadPointValue;
    set_currentWattLoadPointValueIsSet(true);
    this._mapLocationId = _mapLocationId;
    this._displayOrder = _displayOrder;
    set_displayOrderIsSet(true);
    this._newPointDataReceivedFlag = _newPointDataReceivedFlag;
    set_newPointDataReceivedFlagIsSet(true);
    this._lastCurrentVarPointUpdateTime = _lastCurrentVarPointUpdateTime;
    set_lastCurrentVarPointUpdateTimeIsSet(true);
    this._estimatedVarLoadPointId = _estimatedVarLoadPointId;
    set_estimatedVarLoadPointIdIsSet(true);
    this._estimatedVarLoadPointValue = _estimatedVarLoadPointValue;
    set_estimatedVarLoadPointValueIsSet(true);
    this._dailyOperationsAnalogPointId = _dailyOperationsAnalogPointId;
    set_dailyOperationsAnalogPointIdIsSet(true);
    this._powerFactorPointId = _powerFactorPointId;
    set_powerFactorPointIdIsSet(true);
    this._estimatedPowerFactorPointId = _estimatedPowerFactorPointId;
    set_estimatedPowerFactorPointIdIsSet(true);
    this._currentDailyOperations = _currentDailyOperations;
    set_currentDailyOperationsIsSet(true);
    this._recentlyControlledFlag_or_performingVerificationFlag = _recentlyControlledFlag_or_performingVerificationFlag;
    set_recentlyControlledFlag_or_performingVerificationFlagIsSet(true);
    this._lastOperationTime = _lastOperationTime;
    set_lastOperationTimeIsSet(true);
    this._varValueBeforeControl = _varValueBeforeControl;
    set_varValueBeforeControlIsSet(true);
    this._powerFactorValue = _powerFactorValue;
    set_powerFactorValueIsSet(true);
    this._estimatedPowerFactorValue = _estimatedPowerFactorValue;
    set_estimatedPowerFactorValueIsSet(true);
    this._currentVarPointQuality = _currentVarPointQuality;
    set_currentVarPointQualityIsSet(true);
    this._waiveControlFlag = _waiveControlFlag;
    set_waiveControlFlagIsSet(true);
    this._strategy_controlUnits = _strategy_controlUnits;
    this._decimalPlaces = _decimalPlaces;
    set_decimalPlacesIsSet(true);
    this._peakTimeFlag = _peakTimeFlag;
    set_peakTimeFlagIsSet(true);
    this._strategy_peakLag = _strategy_peakLag;
    set_strategy_peakLagIsSet(true);
    this._strategy_offPeakLag = _strategy_offPeakLag;
    set_strategy_offPeakLagIsSet(true);
    this._strategy_PeakLead = _strategy_PeakLead;
    set_strategy_PeakLeadIsSet(true);
    this._strategy_OffPeakLead = _strategy_OffPeakLead;
    set_strategy_OffPeakLeadIsSet(true);
    this._currentVoltLoadPointId = _currentVoltLoadPointId;
    set_currentVoltLoadPointIdIsSet(true);
    this._currentVoltLoadPointValue = _currentVoltLoadPointValue;
    set_currentVoltLoadPointValueIsSet(true);
    this._currentWattPointQuality = _currentWattPointQuality;
    set_currentWattPointQualityIsSet(true);
    this._currentVoltPointQuality = _currentVoltPointQuality;
    set_currentVoltPointQualityIsSet(true);
    this._targetVarValue = _targetVarValue;
    set_targetVarValueIsSet(true);
    this._solution = _solution;
    this._ovUvDisabledFlag = _ovUvDisabledFlag;
    set_ovUvDisabledFlagIsSet(true);
    this._strategy_peakPFSetPoint = _strategy_peakPFSetPoint;
    set_strategy_peakPFSetPointIsSet(true);
    this._strategy_offPeakPFSetPoint = _strategy_offPeakPFSetPoint;
    set_strategy_offPeakPFSetPointIsSet(true);
    this._strategy_controlMethod = _strategy_controlMethod;
    this._phaseAValue = _phaseAValue;
    set_phaseAValueIsSet(true);
    this._phaseBValue = _phaseBValue;
    set_phaseBValueIsSet(true);
    this._phaseCValue = _phaseCValue;
    set_phaseCValueIsSet(true);
    this._likeDayControlFlag = _likeDayControlFlag;
    set_likeDayControlFlagIsSet(true);
    this._usePhaseData = _usePhaseData;
    set_usePhaseDataIsSet(true);
    this._originalParentId = _originalParentId;
    set_originalParentIdIsSet(true);
    this._ccCapbanks = _ccCapbanks;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CCFeeder(CCFeeder other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.CCPao(other._baseMessage);
    }
    this._parentId = other._parentId;
    this._strategy_maxDailyOperation = other._strategy_maxDailyOperation;
    this._strategy_maxOperationDisableFlag = other._strategy_maxOperationDisableFlag;
    this._currentVarLoadPointId = other._currentVarLoadPointId;
    this._currentVarLoadPointValue = other._currentVarLoadPointValue;
    this._currentWattLoadPointId = other._currentWattLoadPointId;
    this._currentWattLoadPointValue = other._currentWattLoadPointValue;
    if (other.isSet_mapLocationId()) {
      this._mapLocationId = other._mapLocationId;
    }
    this._displayOrder = other._displayOrder;
    this._newPointDataReceivedFlag = other._newPointDataReceivedFlag;
    this._lastCurrentVarPointUpdateTime = other._lastCurrentVarPointUpdateTime;
    this._estimatedVarLoadPointId = other._estimatedVarLoadPointId;
    this._estimatedVarLoadPointValue = other._estimatedVarLoadPointValue;
    this._dailyOperationsAnalogPointId = other._dailyOperationsAnalogPointId;
    this._powerFactorPointId = other._powerFactorPointId;
    this._estimatedPowerFactorPointId = other._estimatedPowerFactorPointId;
    this._currentDailyOperations = other._currentDailyOperations;
    this._recentlyControlledFlag_or_performingVerificationFlag = other._recentlyControlledFlag_or_performingVerificationFlag;
    this._lastOperationTime = other._lastOperationTime;
    this._varValueBeforeControl = other._varValueBeforeControl;
    this._powerFactorValue = other._powerFactorValue;
    this._estimatedPowerFactorValue = other._estimatedPowerFactorValue;
    this._currentVarPointQuality = other._currentVarPointQuality;
    this._waiveControlFlag = other._waiveControlFlag;
    if (other.isSet_strategy_controlUnits()) {
      this._strategy_controlUnits = other._strategy_controlUnits;
    }
    this._decimalPlaces = other._decimalPlaces;
    this._peakTimeFlag = other._peakTimeFlag;
    this._strategy_peakLag = other._strategy_peakLag;
    this._strategy_offPeakLag = other._strategy_offPeakLag;
    this._strategy_PeakLead = other._strategy_PeakLead;
    this._strategy_OffPeakLead = other._strategy_OffPeakLead;
    this._currentVoltLoadPointId = other._currentVoltLoadPointId;
    this._currentVoltLoadPointValue = other._currentVoltLoadPointValue;
    this._currentWattPointQuality = other._currentWattPointQuality;
    this._currentVoltPointQuality = other._currentVoltPointQuality;
    this._targetVarValue = other._targetVarValue;
    if (other.isSet_solution()) {
      this._solution = other._solution;
    }
    this._ovUvDisabledFlag = other._ovUvDisabledFlag;
    this._strategy_peakPFSetPoint = other._strategy_peakPFSetPoint;
    this._strategy_offPeakPFSetPoint = other._strategy_offPeakPFSetPoint;
    if (other.isSet_strategy_controlMethod()) {
      this._strategy_controlMethod = other._strategy_controlMethod;
    }
    this._phaseAValue = other._phaseAValue;
    this._phaseBValue = other._phaseBValue;
    this._phaseCValue = other._phaseCValue;
    this._likeDayControlFlag = other._likeDayControlFlag;
    this._usePhaseData = other._usePhaseData;
    this._originalParentId = other._originalParentId;
    if (other.isSet_ccCapbanks()) {
      java.util.List<CCCapBank> __this___ccCapbanks = new java.util.ArrayList<CCCapBank>(other._ccCapbanks.size());
      for (CCCapBank other_element : other._ccCapbanks) {
        __this___ccCapbanks.add(new CCCapBank(other_element));
      }
      this._ccCapbanks = __this___ccCapbanks;
    }
  }

  public CCFeeder deepCopy() {
    return new CCFeeder(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_parentIdIsSet(false);
    this._parentId = 0;
    set_strategy_maxDailyOperationIsSet(false);
    this._strategy_maxDailyOperation = 0;
    set_strategy_maxOperationDisableFlagIsSet(false);
    this._strategy_maxOperationDisableFlag = false;
    set_currentVarLoadPointIdIsSet(false);
    this._currentVarLoadPointId = 0;
    set_currentVarLoadPointValueIsSet(false);
    this._currentVarLoadPointValue = 0.0;
    set_currentWattLoadPointIdIsSet(false);
    this._currentWattLoadPointId = 0;
    set_currentWattLoadPointValueIsSet(false);
    this._currentWattLoadPointValue = 0.0;
    this._mapLocationId = null;
    set_displayOrderIsSet(false);
    this._displayOrder = 0.0;
    set_newPointDataReceivedFlagIsSet(false);
    this._newPointDataReceivedFlag = false;
    set_lastCurrentVarPointUpdateTimeIsSet(false);
    this._lastCurrentVarPointUpdateTime = 0;
    set_estimatedVarLoadPointIdIsSet(false);
    this._estimatedVarLoadPointId = 0;
    set_estimatedVarLoadPointValueIsSet(false);
    this._estimatedVarLoadPointValue = 0.0;
    set_dailyOperationsAnalogPointIdIsSet(false);
    this._dailyOperationsAnalogPointId = 0;
    set_powerFactorPointIdIsSet(false);
    this._powerFactorPointId = 0;
    set_estimatedPowerFactorPointIdIsSet(false);
    this._estimatedPowerFactorPointId = 0;
    set_currentDailyOperationsIsSet(false);
    this._currentDailyOperations = 0;
    set_recentlyControlledFlag_or_performingVerificationFlagIsSet(false);
    this._recentlyControlledFlag_or_performingVerificationFlag = false;
    set_lastOperationTimeIsSet(false);
    this._lastOperationTime = 0;
    set_varValueBeforeControlIsSet(false);
    this._varValueBeforeControl = 0.0;
    set_powerFactorValueIsSet(false);
    this._powerFactorValue = 0.0;
    set_estimatedPowerFactorValueIsSet(false);
    this._estimatedPowerFactorValue = 0.0;
    set_currentVarPointQualityIsSet(false);
    this._currentVarPointQuality = 0;
    set_waiveControlFlagIsSet(false);
    this._waiveControlFlag = false;
    this._strategy_controlUnits = null;
    set_decimalPlacesIsSet(false);
    this._decimalPlaces = 0;
    set_peakTimeFlagIsSet(false);
    this._peakTimeFlag = false;
    set_strategy_peakLagIsSet(false);
    this._strategy_peakLag = 0.0;
    set_strategy_offPeakLagIsSet(false);
    this._strategy_offPeakLag = 0.0;
    set_strategy_PeakLeadIsSet(false);
    this._strategy_PeakLead = 0.0;
    set_strategy_OffPeakLeadIsSet(false);
    this._strategy_OffPeakLead = 0.0;
    set_currentVoltLoadPointIdIsSet(false);
    this._currentVoltLoadPointId = 0;
    set_currentVoltLoadPointValueIsSet(false);
    this._currentVoltLoadPointValue = 0.0;
    set_currentWattPointQualityIsSet(false);
    this._currentWattPointQuality = 0;
    set_currentVoltPointQualityIsSet(false);
    this._currentVoltPointQuality = 0;
    set_targetVarValueIsSet(false);
    this._targetVarValue = 0.0;
    this._solution = null;
    set_ovUvDisabledFlagIsSet(false);
    this._ovUvDisabledFlag = false;
    set_strategy_peakPFSetPointIsSet(false);
    this._strategy_peakPFSetPoint = 0.0;
    set_strategy_offPeakPFSetPointIsSet(false);
    this._strategy_offPeakPFSetPoint = 0.0;
    this._strategy_controlMethod = null;
    set_phaseAValueIsSet(false);
    this._phaseAValue = 0.0;
    set_phaseBValueIsSet(false);
    this._phaseBValue = 0.0;
    set_phaseCValueIsSet(false);
    this._phaseCValue = 0.0;
    set_likeDayControlFlagIsSet(false);
    this._likeDayControlFlag = false;
    set_usePhaseDataIsSet(false);
    this._usePhaseData = false;
    set_originalParentIdIsSet(false);
    this._originalParentId = 0;
    this._ccCapbanks = null;
  }

  @org.apache.thrift.annotation.Nullable
  public com.cannontech.messaging.serialization.thrift.generated.CCPao get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(@org.apache.thrift.annotation.Nullable com.cannontech.messaging.serialization.thrift.generated.CCPao _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_parentId() {
    return this._parentId;
  }

  public void set_parentId(int _parentId) {
    this._parentId = _parentId;
    set_parentIdIsSet(true);
  }

  public void unset_parentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PARENTID_ISSET_ID);
  }

  /** Returns true if field _parentId is set (has been assigned a value) and false otherwise */
  public boolean isSet_parentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PARENTID_ISSET_ID);
  }

  public void set_parentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PARENTID_ISSET_ID, value);
  }

  public int get_strategy_maxDailyOperation() {
    return this._strategy_maxDailyOperation;
  }

  public void set_strategy_maxDailyOperation(int _strategy_maxDailyOperation) {
    this._strategy_maxDailyOperation = _strategy_maxDailyOperation;
    set_strategy_maxDailyOperationIsSet(true);
  }

  public void unset_strategy_maxDailyOperation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STRATEGY_MAXDAILYOPERATION_ISSET_ID);
  }

  /** Returns true if field _strategy_maxDailyOperation is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_maxDailyOperation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STRATEGY_MAXDAILYOPERATION_ISSET_ID);
  }

  public void set_strategy_maxDailyOperationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STRATEGY_MAXDAILYOPERATION_ISSET_ID, value);
  }

  public boolean is_strategy_maxOperationDisableFlag() {
    return this._strategy_maxOperationDisableFlag;
  }

  public void set_strategy_maxOperationDisableFlag(boolean _strategy_maxOperationDisableFlag) {
    this._strategy_maxOperationDisableFlag = _strategy_maxOperationDisableFlag;
    set_strategy_maxOperationDisableFlagIsSet(true);
  }

  public void unset_strategy_maxOperationDisableFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STRATEGY_MAXOPERATIONDISABLEFLAG_ISSET_ID);
  }

  /** Returns true if field _strategy_maxOperationDisableFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_maxOperationDisableFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STRATEGY_MAXOPERATIONDISABLEFLAG_ISSET_ID);
  }

  public void set_strategy_maxOperationDisableFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STRATEGY_MAXOPERATIONDISABLEFLAG_ISSET_ID, value);
  }

  public int get_currentVarLoadPointId() {
    return this._currentVarLoadPointId;
  }

  public void set_currentVarLoadPointId(int _currentVarLoadPointId) {
    this._currentVarLoadPointId = _currentVarLoadPointId;
    set_currentVarLoadPointIdIsSet(true);
  }

  public void unset_currentVarLoadPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTVARLOADPOINTID_ISSET_ID);
  }

  /** Returns true if field _currentVarLoadPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentVarLoadPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTVARLOADPOINTID_ISSET_ID);
  }

  public void set_currentVarLoadPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTVARLOADPOINTID_ISSET_ID, value);
  }

  public double get_currentVarLoadPointValue() {
    return this._currentVarLoadPointValue;
  }

  public void set_currentVarLoadPointValue(double _currentVarLoadPointValue) {
    this._currentVarLoadPointValue = _currentVarLoadPointValue;
    set_currentVarLoadPointValueIsSet(true);
  }

  public void unset_currentVarLoadPointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTVARLOADPOINTVALUE_ISSET_ID);
  }

  /** Returns true if field _currentVarLoadPointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentVarLoadPointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTVARLOADPOINTVALUE_ISSET_ID);
  }

  public void set_currentVarLoadPointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTVARLOADPOINTVALUE_ISSET_ID, value);
  }

  public int get_currentWattLoadPointId() {
    return this._currentWattLoadPointId;
  }

  public void set_currentWattLoadPointId(int _currentWattLoadPointId) {
    this._currentWattLoadPointId = _currentWattLoadPointId;
    set_currentWattLoadPointIdIsSet(true);
  }

  public void unset_currentWattLoadPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTWATTLOADPOINTID_ISSET_ID);
  }

  /** Returns true if field _currentWattLoadPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentWattLoadPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTWATTLOADPOINTID_ISSET_ID);
  }

  public void set_currentWattLoadPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTWATTLOADPOINTID_ISSET_ID, value);
  }

  public double get_currentWattLoadPointValue() {
    return this._currentWattLoadPointValue;
  }

  public void set_currentWattLoadPointValue(double _currentWattLoadPointValue) {
    this._currentWattLoadPointValue = _currentWattLoadPointValue;
    set_currentWattLoadPointValueIsSet(true);
  }

  public void unset_currentWattLoadPointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTWATTLOADPOINTVALUE_ISSET_ID);
  }

  /** Returns true if field _currentWattLoadPointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentWattLoadPointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTWATTLOADPOINTVALUE_ISSET_ID);
  }

  public void set_currentWattLoadPointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTWATTLOADPOINTVALUE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_mapLocationId() {
    return this._mapLocationId;
  }

  public void set_mapLocationId(@org.apache.thrift.annotation.Nullable java.lang.String _mapLocationId) {
    this._mapLocationId = _mapLocationId;
  }

  public void unset_mapLocationId() {
    this._mapLocationId = null;
  }

  /** Returns true if field _mapLocationId is set (has been assigned a value) and false otherwise */
  public boolean isSet_mapLocationId() {
    return this._mapLocationId != null;
  }

  public void set_mapLocationIdIsSet(boolean value) {
    if (!value) {
      this._mapLocationId = null;
    }
  }

  public double get_displayOrder() {
    return this._displayOrder;
  }

  public void set_displayOrder(double _displayOrder) {
    this._displayOrder = _displayOrder;
    set_displayOrderIsSet(true);
  }

  public void unset_displayOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DISPLAYORDER_ISSET_ID);
  }

  /** Returns true if field _displayOrder is set (has been assigned a value) and false otherwise */
  public boolean isSet_displayOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DISPLAYORDER_ISSET_ID);
  }

  public void set_displayOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DISPLAYORDER_ISSET_ID, value);
  }

  public boolean is_newPointDataReceivedFlag() {
    return this._newPointDataReceivedFlag;
  }

  public void set_newPointDataReceivedFlag(boolean _newPointDataReceivedFlag) {
    this._newPointDataReceivedFlag = _newPointDataReceivedFlag;
    set_newPointDataReceivedFlagIsSet(true);
  }

  public void unset_newPointDataReceivedFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___NEWPOINTDATARECEIVEDFLAG_ISSET_ID);
  }

  /** Returns true if field _newPointDataReceivedFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_newPointDataReceivedFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___NEWPOINTDATARECEIVEDFLAG_ISSET_ID);
  }

  public void set_newPointDataReceivedFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___NEWPOINTDATARECEIVEDFLAG_ISSET_ID, value);
  }

  public long get_lastCurrentVarPointUpdateTime() {
    return this._lastCurrentVarPointUpdateTime;
  }

  public void set_lastCurrentVarPointUpdateTime(long _lastCurrentVarPointUpdateTime) {
    this._lastCurrentVarPointUpdateTime = _lastCurrentVarPointUpdateTime;
    set_lastCurrentVarPointUpdateTimeIsSet(true);
  }

  public void unset_lastCurrentVarPointUpdateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTCURRENTVARPOINTUPDATETIME_ISSET_ID);
  }

  /** Returns true if field _lastCurrentVarPointUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastCurrentVarPointUpdateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTCURRENTVARPOINTUPDATETIME_ISSET_ID);
  }

  public void set_lastCurrentVarPointUpdateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTCURRENTVARPOINTUPDATETIME_ISSET_ID, value);
  }

  public int get_estimatedVarLoadPointId() {
    return this._estimatedVarLoadPointId;
  }

  public void set_estimatedVarLoadPointId(int _estimatedVarLoadPointId) {
    this._estimatedVarLoadPointId = _estimatedVarLoadPointId;
    set_estimatedVarLoadPointIdIsSet(true);
  }

  public void unset_estimatedVarLoadPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ESTIMATEDVARLOADPOINTID_ISSET_ID);
  }

  /** Returns true if field _estimatedVarLoadPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_estimatedVarLoadPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ESTIMATEDVARLOADPOINTID_ISSET_ID);
  }

  public void set_estimatedVarLoadPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ESTIMATEDVARLOADPOINTID_ISSET_ID, value);
  }

  public double get_estimatedVarLoadPointValue() {
    return this._estimatedVarLoadPointValue;
  }

  public void set_estimatedVarLoadPointValue(double _estimatedVarLoadPointValue) {
    this._estimatedVarLoadPointValue = _estimatedVarLoadPointValue;
    set_estimatedVarLoadPointValueIsSet(true);
  }

  public void unset_estimatedVarLoadPointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ESTIMATEDVARLOADPOINTVALUE_ISSET_ID);
  }

  /** Returns true if field _estimatedVarLoadPointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_estimatedVarLoadPointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ESTIMATEDVARLOADPOINTVALUE_ISSET_ID);
  }

  public void set_estimatedVarLoadPointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ESTIMATEDVARLOADPOINTVALUE_ISSET_ID, value);
  }

  public int get_dailyOperationsAnalogPointId() {
    return this._dailyOperationsAnalogPointId;
  }

  public void set_dailyOperationsAnalogPointId(int _dailyOperationsAnalogPointId) {
    this._dailyOperationsAnalogPointId = _dailyOperationsAnalogPointId;
    set_dailyOperationsAnalogPointIdIsSet(true);
  }

  public void unset_dailyOperationsAnalogPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DAILYOPERATIONSANALOGPOINTID_ISSET_ID);
  }

  /** Returns true if field _dailyOperationsAnalogPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_dailyOperationsAnalogPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DAILYOPERATIONSANALOGPOINTID_ISSET_ID);
  }

  public void set_dailyOperationsAnalogPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DAILYOPERATIONSANALOGPOINTID_ISSET_ID, value);
  }

  public int get_powerFactorPointId() {
    return this._powerFactorPointId;
  }

  public void set_powerFactorPointId(int _powerFactorPointId) {
    this._powerFactorPointId = _powerFactorPointId;
    set_powerFactorPointIdIsSet(true);
  }

  public void unset_powerFactorPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___POWERFACTORPOINTID_ISSET_ID);
  }

  /** Returns true if field _powerFactorPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_powerFactorPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___POWERFACTORPOINTID_ISSET_ID);
  }

  public void set_powerFactorPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___POWERFACTORPOINTID_ISSET_ID, value);
  }

  public int get_estimatedPowerFactorPointId() {
    return this._estimatedPowerFactorPointId;
  }

  public void set_estimatedPowerFactorPointId(int _estimatedPowerFactorPointId) {
    this._estimatedPowerFactorPointId = _estimatedPowerFactorPointId;
    set_estimatedPowerFactorPointIdIsSet(true);
  }

  public void unset_estimatedPowerFactorPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ESTIMATEDPOWERFACTORPOINTID_ISSET_ID);
  }

  /** Returns true if field _estimatedPowerFactorPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_estimatedPowerFactorPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ESTIMATEDPOWERFACTORPOINTID_ISSET_ID);
  }

  public void set_estimatedPowerFactorPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ESTIMATEDPOWERFACTORPOINTID_ISSET_ID, value);
  }

  public int get_currentDailyOperations() {
    return this._currentDailyOperations;
  }

  public void set_currentDailyOperations(int _currentDailyOperations) {
    this._currentDailyOperations = _currentDailyOperations;
    set_currentDailyOperationsIsSet(true);
  }

  public void unset_currentDailyOperations() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTDAILYOPERATIONS_ISSET_ID);
  }

  /** Returns true if field _currentDailyOperations is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentDailyOperations() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTDAILYOPERATIONS_ISSET_ID);
  }

  public void set_currentDailyOperationsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTDAILYOPERATIONS_ISSET_ID, value);
  }

  public boolean is_recentlyControlledFlag_or_performingVerificationFlag() {
    return this._recentlyControlledFlag_or_performingVerificationFlag;
  }

  public void set_recentlyControlledFlag_or_performingVerificationFlag(boolean _recentlyControlledFlag_or_performingVerificationFlag) {
    this._recentlyControlledFlag_or_performingVerificationFlag = _recentlyControlledFlag_or_performingVerificationFlag;
    set_recentlyControlledFlag_or_performingVerificationFlagIsSet(true);
  }

  public void unset_recentlyControlledFlag_or_performingVerificationFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___RECENTLYCONTROLLEDFLAG_OR_PERFORMINGVERIFICATIONFLAG_ISSET_ID);
  }

  /** Returns true if field _recentlyControlledFlag_or_performingVerificationFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_recentlyControlledFlag_or_performingVerificationFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___RECENTLYCONTROLLEDFLAG_OR_PERFORMINGVERIFICATIONFLAG_ISSET_ID);
  }

  public void set_recentlyControlledFlag_or_performingVerificationFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___RECENTLYCONTROLLEDFLAG_OR_PERFORMINGVERIFICATIONFLAG_ISSET_ID, value);
  }

  public long get_lastOperationTime() {
    return this._lastOperationTime;
  }

  public void set_lastOperationTime(long _lastOperationTime) {
    this._lastOperationTime = _lastOperationTime;
    set_lastOperationTimeIsSet(true);
  }

  public void unset_lastOperationTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LASTOPERATIONTIME_ISSET_ID);
  }

  /** Returns true if field _lastOperationTime is set (has been assigned a value) and false otherwise */
  public boolean isSet_lastOperationTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LASTOPERATIONTIME_ISSET_ID);
  }

  public void set_lastOperationTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LASTOPERATIONTIME_ISSET_ID, value);
  }

  public double get_varValueBeforeControl() {
    return this._varValueBeforeControl;
  }

  public void set_varValueBeforeControl(double _varValueBeforeControl) {
    this._varValueBeforeControl = _varValueBeforeControl;
    set_varValueBeforeControlIsSet(true);
  }

  public void unset_varValueBeforeControl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___VARVALUEBEFORECONTROL_ISSET_ID);
  }

  /** Returns true if field _varValueBeforeControl is set (has been assigned a value) and false otherwise */
  public boolean isSet_varValueBeforeControl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___VARVALUEBEFORECONTROL_ISSET_ID);
  }

  public void set_varValueBeforeControlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___VARVALUEBEFORECONTROL_ISSET_ID, value);
  }

  public double get_powerFactorValue() {
    return this._powerFactorValue;
  }

  public void set_powerFactorValue(double _powerFactorValue) {
    this._powerFactorValue = _powerFactorValue;
    set_powerFactorValueIsSet(true);
  }

  public void unset_powerFactorValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___POWERFACTORVALUE_ISSET_ID);
  }

  /** Returns true if field _powerFactorValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_powerFactorValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___POWERFACTORVALUE_ISSET_ID);
  }

  public void set_powerFactorValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___POWERFACTORVALUE_ISSET_ID, value);
  }

  public double get_estimatedPowerFactorValue() {
    return this._estimatedPowerFactorValue;
  }

  public void set_estimatedPowerFactorValue(double _estimatedPowerFactorValue) {
    this._estimatedPowerFactorValue = _estimatedPowerFactorValue;
    set_estimatedPowerFactorValueIsSet(true);
  }

  public void unset_estimatedPowerFactorValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ESTIMATEDPOWERFACTORVALUE_ISSET_ID);
  }

  /** Returns true if field _estimatedPowerFactorValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_estimatedPowerFactorValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ESTIMATEDPOWERFACTORVALUE_ISSET_ID);
  }

  public void set_estimatedPowerFactorValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ESTIMATEDPOWERFACTORVALUE_ISSET_ID, value);
  }

  public int get_currentVarPointQuality() {
    return this._currentVarPointQuality;
  }

  public void set_currentVarPointQuality(int _currentVarPointQuality) {
    this._currentVarPointQuality = _currentVarPointQuality;
    set_currentVarPointQualityIsSet(true);
  }

  public void unset_currentVarPointQuality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTVARPOINTQUALITY_ISSET_ID);
  }

  /** Returns true if field _currentVarPointQuality is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentVarPointQuality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTVARPOINTQUALITY_ISSET_ID);
  }

  public void set_currentVarPointQualityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTVARPOINTQUALITY_ISSET_ID, value);
  }

  public boolean is_waiveControlFlag() {
    return this._waiveControlFlag;
  }

  public void set_waiveControlFlag(boolean _waiveControlFlag) {
    this._waiveControlFlag = _waiveControlFlag;
    set_waiveControlFlagIsSet(true);
  }

  public void unset_waiveControlFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___WAIVECONTROLFLAG_ISSET_ID);
  }

  /** Returns true if field _waiveControlFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_waiveControlFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___WAIVECONTROLFLAG_ISSET_ID);
  }

  public void set_waiveControlFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___WAIVECONTROLFLAG_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_strategy_controlUnits() {
    return this._strategy_controlUnits;
  }

  public void set_strategy_controlUnits(@org.apache.thrift.annotation.Nullable java.lang.String _strategy_controlUnits) {
    this._strategy_controlUnits = _strategy_controlUnits;
  }

  public void unset_strategy_controlUnits() {
    this._strategy_controlUnits = null;
  }

  /** Returns true if field _strategy_controlUnits is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_controlUnits() {
    return this._strategy_controlUnits != null;
  }

  public void set_strategy_controlUnitsIsSet(boolean value) {
    if (!value) {
      this._strategy_controlUnits = null;
    }
  }

  public int get_decimalPlaces() {
    return this._decimalPlaces;
  }

  public void set_decimalPlaces(int _decimalPlaces) {
    this._decimalPlaces = _decimalPlaces;
    set_decimalPlacesIsSet(true);
  }

  public void unset_decimalPlaces() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DECIMALPLACES_ISSET_ID);
  }

  /** Returns true if field _decimalPlaces is set (has been assigned a value) and false otherwise */
  public boolean isSet_decimalPlaces() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DECIMALPLACES_ISSET_ID);
  }

  public void set_decimalPlacesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DECIMALPLACES_ISSET_ID, value);
  }

  public boolean is_peakTimeFlag() {
    return this._peakTimeFlag;
  }

  public void set_peakTimeFlag(boolean _peakTimeFlag) {
    this._peakTimeFlag = _peakTimeFlag;
    set_peakTimeFlagIsSet(true);
  }

  public void unset_peakTimeFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PEAKTIMEFLAG_ISSET_ID);
  }

  /** Returns true if field _peakTimeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_peakTimeFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PEAKTIMEFLAG_ISSET_ID);
  }

  public void set_peakTimeFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PEAKTIMEFLAG_ISSET_ID, value);
  }

  public double get_strategy_peakLag() {
    return this._strategy_peakLag;
  }

  public void set_strategy_peakLag(double _strategy_peakLag) {
    this._strategy_peakLag = _strategy_peakLag;
    set_strategy_peakLagIsSet(true);
  }

  public void unset_strategy_peakLag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STRATEGY_PEAKLAG_ISSET_ID);
  }

  /** Returns true if field _strategy_peakLag is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_peakLag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STRATEGY_PEAKLAG_ISSET_ID);
  }

  public void set_strategy_peakLagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STRATEGY_PEAKLAG_ISSET_ID, value);
  }

  public double get_strategy_offPeakLag() {
    return this._strategy_offPeakLag;
  }

  public void set_strategy_offPeakLag(double _strategy_offPeakLag) {
    this._strategy_offPeakLag = _strategy_offPeakLag;
    set_strategy_offPeakLagIsSet(true);
  }

  public void unset_strategy_offPeakLag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STRATEGY_OFFPEAKLAG_ISSET_ID);
  }

  /** Returns true if field _strategy_offPeakLag is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_offPeakLag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STRATEGY_OFFPEAKLAG_ISSET_ID);
  }

  public void set_strategy_offPeakLagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STRATEGY_OFFPEAKLAG_ISSET_ID, value);
  }

  public double get_strategy_PeakLead() {
    return this._strategy_PeakLead;
  }

  public void set_strategy_PeakLead(double _strategy_PeakLead) {
    this._strategy_PeakLead = _strategy_PeakLead;
    set_strategy_PeakLeadIsSet(true);
  }

  public void unset_strategy_PeakLead() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STRATEGY_PEAKLEAD_ISSET_ID);
  }

  /** Returns true if field _strategy_PeakLead is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_PeakLead() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STRATEGY_PEAKLEAD_ISSET_ID);
  }

  public void set_strategy_PeakLeadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STRATEGY_PEAKLEAD_ISSET_ID, value);
  }

  public double get_strategy_OffPeakLead() {
    return this._strategy_OffPeakLead;
  }

  public void set_strategy_OffPeakLead(double _strategy_OffPeakLead) {
    this._strategy_OffPeakLead = _strategy_OffPeakLead;
    set_strategy_OffPeakLeadIsSet(true);
  }

  public void unset_strategy_OffPeakLead() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STRATEGY_OFFPEAKLEAD_ISSET_ID);
  }

  /** Returns true if field _strategy_OffPeakLead is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_OffPeakLead() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STRATEGY_OFFPEAKLEAD_ISSET_ID);
  }

  public void set_strategy_OffPeakLeadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STRATEGY_OFFPEAKLEAD_ISSET_ID, value);
  }

  public int get_currentVoltLoadPointId() {
    return this._currentVoltLoadPointId;
  }

  public void set_currentVoltLoadPointId(int _currentVoltLoadPointId) {
    this._currentVoltLoadPointId = _currentVoltLoadPointId;
    set_currentVoltLoadPointIdIsSet(true);
  }

  public void unset_currentVoltLoadPointId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTVOLTLOADPOINTID_ISSET_ID);
  }

  /** Returns true if field _currentVoltLoadPointId is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentVoltLoadPointId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTVOLTLOADPOINTID_ISSET_ID);
  }

  public void set_currentVoltLoadPointIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTVOLTLOADPOINTID_ISSET_ID, value);
  }

  public double get_currentVoltLoadPointValue() {
    return this._currentVoltLoadPointValue;
  }

  public void set_currentVoltLoadPointValue(double _currentVoltLoadPointValue) {
    this._currentVoltLoadPointValue = _currentVoltLoadPointValue;
    set_currentVoltLoadPointValueIsSet(true);
  }

  public void unset_currentVoltLoadPointValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTVOLTLOADPOINTVALUE_ISSET_ID);
  }

  /** Returns true if field _currentVoltLoadPointValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentVoltLoadPointValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTVOLTLOADPOINTVALUE_ISSET_ID);
  }

  public void set_currentVoltLoadPointValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTVOLTLOADPOINTVALUE_ISSET_ID, value);
  }

  public int get_currentWattPointQuality() {
    return this._currentWattPointQuality;
  }

  public void set_currentWattPointQuality(int _currentWattPointQuality) {
    this._currentWattPointQuality = _currentWattPointQuality;
    set_currentWattPointQualityIsSet(true);
  }

  public void unset_currentWattPointQuality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTWATTPOINTQUALITY_ISSET_ID);
  }

  /** Returns true if field _currentWattPointQuality is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentWattPointQuality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTWATTPOINTQUALITY_ISSET_ID);
  }

  public void set_currentWattPointQualityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTWATTPOINTQUALITY_ISSET_ID, value);
  }

  public int get_currentVoltPointQuality() {
    return this._currentVoltPointQuality;
  }

  public void set_currentVoltPointQuality(int _currentVoltPointQuality) {
    this._currentVoltPointQuality = _currentVoltPointQuality;
    set_currentVoltPointQualityIsSet(true);
  }

  public void unset_currentVoltPointQuality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___CURRENTVOLTPOINTQUALITY_ISSET_ID);
  }

  /** Returns true if field _currentVoltPointQuality is set (has been assigned a value) and false otherwise */
  public boolean isSet_currentVoltPointQuality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___CURRENTVOLTPOINTQUALITY_ISSET_ID);
  }

  public void set_currentVoltPointQualityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___CURRENTVOLTPOINTQUALITY_ISSET_ID, value);
  }

  public double get_targetVarValue() {
    return this._targetVarValue;
  }

  public void set_targetVarValue(double _targetVarValue) {
    this._targetVarValue = _targetVarValue;
    set_targetVarValueIsSet(true);
  }

  public void unset_targetVarValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TARGETVARVALUE_ISSET_ID);
  }

  /** Returns true if field _targetVarValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_targetVarValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TARGETVARVALUE_ISSET_ID);
  }

  public void set_targetVarValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TARGETVARVALUE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_solution() {
    return this._solution;
  }

  public void set_solution(@org.apache.thrift.annotation.Nullable java.lang.String _solution) {
    this._solution = _solution;
  }

  public void unset_solution() {
    this._solution = null;
  }

  /** Returns true if field _solution is set (has been assigned a value) and false otherwise */
  public boolean isSet_solution() {
    return this._solution != null;
  }

  public void set_solutionIsSet(boolean value) {
    if (!value) {
      this._solution = null;
    }
  }

  public boolean is_ovUvDisabledFlag() {
    return this._ovUvDisabledFlag;
  }

  public void set_ovUvDisabledFlag(boolean _ovUvDisabledFlag) {
    this._ovUvDisabledFlag = _ovUvDisabledFlag;
    set_ovUvDisabledFlagIsSet(true);
  }

  public void unset_ovUvDisabledFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___OVUVDISABLEDFLAG_ISSET_ID);
  }

  /** Returns true if field _ovUvDisabledFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_ovUvDisabledFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___OVUVDISABLEDFLAG_ISSET_ID);
  }

  public void set_ovUvDisabledFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___OVUVDISABLEDFLAG_ISSET_ID, value);
  }

  public double get_strategy_peakPFSetPoint() {
    return this._strategy_peakPFSetPoint;
  }

  public void set_strategy_peakPFSetPoint(double _strategy_peakPFSetPoint) {
    this._strategy_peakPFSetPoint = _strategy_peakPFSetPoint;
    set_strategy_peakPFSetPointIsSet(true);
  }

  public void unset_strategy_peakPFSetPoint() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STRATEGY_PEAKPFSETPOINT_ISSET_ID);
  }

  /** Returns true if field _strategy_peakPFSetPoint is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_peakPFSetPoint() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STRATEGY_PEAKPFSETPOINT_ISSET_ID);
  }

  public void set_strategy_peakPFSetPointIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STRATEGY_PEAKPFSETPOINT_ISSET_ID, value);
  }

  public double get_strategy_offPeakPFSetPoint() {
    return this._strategy_offPeakPFSetPoint;
  }

  public void set_strategy_offPeakPFSetPoint(double _strategy_offPeakPFSetPoint) {
    this._strategy_offPeakPFSetPoint = _strategy_offPeakPFSetPoint;
    set_strategy_offPeakPFSetPointIsSet(true);
  }

  public void unset_strategy_offPeakPFSetPoint() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___STRATEGY_OFFPEAKPFSETPOINT_ISSET_ID);
  }

  /** Returns true if field _strategy_offPeakPFSetPoint is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_offPeakPFSetPoint() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___STRATEGY_OFFPEAKPFSETPOINT_ISSET_ID);
  }

  public void set_strategy_offPeakPFSetPointIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___STRATEGY_OFFPEAKPFSETPOINT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String get_strategy_controlMethod() {
    return this._strategy_controlMethod;
  }

  public void set_strategy_controlMethod(@org.apache.thrift.annotation.Nullable java.lang.String _strategy_controlMethod) {
    this._strategy_controlMethod = _strategy_controlMethod;
  }

  public void unset_strategy_controlMethod() {
    this._strategy_controlMethod = null;
  }

  /** Returns true if field _strategy_controlMethod is set (has been assigned a value) and false otherwise */
  public boolean isSet_strategy_controlMethod() {
    return this._strategy_controlMethod != null;
  }

  public void set_strategy_controlMethodIsSet(boolean value) {
    if (!value) {
      this._strategy_controlMethod = null;
    }
  }

  public double get_phaseAValue() {
    return this._phaseAValue;
  }

  public void set_phaseAValue(double _phaseAValue) {
    this._phaseAValue = _phaseAValue;
    set_phaseAValueIsSet(true);
  }

  public void unset_phaseAValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PHASEAVALUE_ISSET_ID);
  }

  /** Returns true if field _phaseAValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_phaseAValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PHASEAVALUE_ISSET_ID);
  }

  public void set_phaseAValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PHASEAVALUE_ISSET_ID, value);
  }

  public double get_phaseBValue() {
    return this._phaseBValue;
  }

  public void set_phaseBValue(double _phaseBValue) {
    this._phaseBValue = _phaseBValue;
    set_phaseBValueIsSet(true);
  }

  public void unset_phaseBValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PHASEBVALUE_ISSET_ID);
  }

  /** Returns true if field _phaseBValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_phaseBValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PHASEBVALUE_ISSET_ID);
  }

  public void set_phaseBValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PHASEBVALUE_ISSET_ID, value);
  }

  public double get_phaseCValue() {
    return this._phaseCValue;
  }

  public void set_phaseCValue(double _phaseCValue) {
    this._phaseCValue = _phaseCValue;
    set_phaseCValueIsSet(true);
  }

  public void unset_phaseCValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___PHASECVALUE_ISSET_ID);
  }

  /** Returns true if field _phaseCValue is set (has been assigned a value) and false otherwise */
  public boolean isSet_phaseCValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___PHASECVALUE_ISSET_ID);
  }

  public void set_phaseCValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___PHASECVALUE_ISSET_ID, value);
  }

  public boolean is_likeDayControlFlag() {
    return this._likeDayControlFlag;
  }

  public void set_likeDayControlFlag(boolean _likeDayControlFlag) {
    this._likeDayControlFlag = _likeDayControlFlag;
    set_likeDayControlFlagIsSet(true);
  }

  public void unset_likeDayControlFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___LIKEDAYCONTROLFLAG_ISSET_ID);
  }

  /** Returns true if field _likeDayControlFlag is set (has been assigned a value) and false otherwise */
  public boolean isSet_likeDayControlFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___LIKEDAYCONTROLFLAG_ISSET_ID);
  }

  public void set_likeDayControlFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___LIKEDAYCONTROLFLAG_ISSET_ID, value);
  }

  public boolean is_usePhaseData() {
    return this._usePhaseData;
  }

  public void set_usePhaseData(boolean _usePhaseData) {
    this._usePhaseData = _usePhaseData;
    set_usePhaseDataIsSet(true);
  }

  public void unset_usePhaseData() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___USEPHASEDATA_ISSET_ID);
  }

  /** Returns true if field _usePhaseData is set (has been assigned a value) and false otherwise */
  public boolean isSet_usePhaseData() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___USEPHASEDATA_ISSET_ID);
  }

  public void set_usePhaseDataIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___USEPHASEDATA_ISSET_ID, value);
  }

  public int get_originalParentId() {
    return this._originalParentId;
  }

  public void set_originalParentId(int _originalParentId) {
    this._originalParentId = _originalParentId;
    set_originalParentIdIsSet(true);
  }

  public void unset_originalParentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___ORIGINALPARENTID_ISSET_ID);
  }

  /** Returns true if field _originalParentId is set (has been assigned a value) and false otherwise */
  public boolean isSet_originalParentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___ORIGINALPARENTID_ISSET_ID);
  }

  public void set_originalParentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___ORIGINALPARENTID_ISSET_ID, value);
  }

  public int get_ccCapbanksSize() {
    return (this._ccCapbanks == null) ? 0 : this._ccCapbanks.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<CCCapBank> get_ccCapbanksIterator() {
    return (this._ccCapbanks == null) ? null : this._ccCapbanks.iterator();
  }

  public void addTo_ccCapbanks(CCCapBank elem) {
    if (this._ccCapbanks == null) {
      this._ccCapbanks = new java.util.ArrayList<CCCapBank>();
    }
    this._ccCapbanks.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<CCCapBank> get_ccCapbanks() {
    return this._ccCapbanks;
  }

  public void set_ccCapbanks(@org.apache.thrift.annotation.Nullable java.util.List<CCCapBank> _ccCapbanks) {
    this._ccCapbanks = _ccCapbanks;
  }

  public void unset_ccCapbanks() {
    this._ccCapbanks = null;
  }

  /** Returns true if field _ccCapbanks is set (has been assigned a value) and false otherwise */
  public boolean isSet_ccCapbanks() {
    return this._ccCapbanks != null;
  }

  public void set_ccCapbanksIsSet(boolean value) {
    if (!value) {
      this._ccCapbanks = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.CCPao)value);
      }
      break;

    case _PARENT_ID:
      if (value == null) {
        unset_parentId();
      } else {
        set_parentId((java.lang.Integer)value);
      }
      break;

    case _STRATEGY_MAX_DAILY_OPERATION:
      if (value == null) {
        unset_strategy_maxDailyOperation();
      } else {
        set_strategy_maxDailyOperation((java.lang.Integer)value);
      }
      break;

    case _STRATEGY_MAX_OPERATION_DISABLE_FLAG:
      if (value == null) {
        unset_strategy_maxOperationDisableFlag();
      } else {
        set_strategy_maxOperationDisableFlag((java.lang.Boolean)value);
      }
      break;

    case _CURRENT_VAR_LOAD_POINT_ID:
      if (value == null) {
        unset_currentVarLoadPointId();
      } else {
        set_currentVarLoadPointId((java.lang.Integer)value);
      }
      break;

    case _CURRENT_VAR_LOAD_POINT_VALUE:
      if (value == null) {
        unset_currentVarLoadPointValue();
      } else {
        set_currentVarLoadPointValue((java.lang.Double)value);
      }
      break;

    case _CURRENT_WATT_LOAD_POINT_ID:
      if (value == null) {
        unset_currentWattLoadPointId();
      } else {
        set_currentWattLoadPointId((java.lang.Integer)value);
      }
      break;

    case _CURRENT_WATT_LOAD_POINT_VALUE:
      if (value == null) {
        unset_currentWattLoadPointValue();
      } else {
        set_currentWattLoadPointValue((java.lang.Double)value);
      }
      break;

    case _MAP_LOCATION_ID:
      if (value == null) {
        unset_mapLocationId();
      } else {
        set_mapLocationId((java.lang.String)value);
      }
      break;

    case _DISPLAY_ORDER:
      if (value == null) {
        unset_displayOrder();
      } else {
        set_displayOrder((java.lang.Double)value);
      }
      break;

    case _NEW_POINT_DATA_RECEIVED_FLAG:
      if (value == null) {
        unset_newPointDataReceivedFlag();
      } else {
        set_newPointDataReceivedFlag((java.lang.Boolean)value);
      }
      break;

    case _LAST_CURRENT_VAR_POINT_UPDATE_TIME:
      if (value == null) {
        unset_lastCurrentVarPointUpdateTime();
      } else {
        set_lastCurrentVarPointUpdateTime((java.lang.Long)value);
      }
      break;

    case _ESTIMATED_VAR_LOAD_POINT_ID:
      if (value == null) {
        unset_estimatedVarLoadPointId();
      } else {
        set_estimatedVarLoadPointId((java.lang.Integer)value);
      }
      break;

    case _ESTIMATED_VAR_LOAD_POINT_VALUE:
      if (value == null) {
        unset_estimatedVarLoadPointValue();
      } else {
        set_estimatedVarLoadPointValue((java.lang.Double)value);
      }
      break;

    case _DAILY_OPERATIONS_ANALOG_POINT_ID:
      if (value == null) {
        unset_dailyOperationsAnalogPointId();
      } else {
        set_dailyOperationsAnalogPointId((java.lang.Integer)value);
      }
      break;

    case _POWER_FACTOR_POINT_ID:
      if (value == null) {
        unset_powerFactorPointId();
      } else {
        set_powerFactorPointId((java.lang.Integer)value);
      }
      break;

    case _ESTIMATED_POWER_FACTOR_POINT_ID:
      if (value == null) {
        unset_estimatedPowerFactorPointId();
      } else {
        set_estimatedPowerFactorPointId((java.lang.Integer)value);
      }
      break;

    case _CURRENT_DAILY_OPERATIONS:
      if (value == null) {
        unset_currentDailyOperations();
      } else {
        set_currentDailyOperations((java.lang.Integer)value);
      }
      break;

    case _RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG:
      if (value == null) {
        unset_recentlyControlledFlag_or_performingVerificationFlag();
      } else {
        set_recentlyControlledFlag_or_performingVerificationFlag((java.lang.Boolean)value);
      }
      break;

    case _LAST_OPERATION_TIME:
      if (value == null) {
        unset_lastOperationTime();
      } else {
        set_lastOperationTime((java.lang.Long)value);
      }
      break;

    case _VAR_VALUE_BEFORE_CONTROL:
      if (value == null) {
        unset_varValueBeforeControl();
      } else {
        set_varValueBeforeControl((java.lang.Double)value);
      }
      break;

    case _POWER_FACTOR_VALUE:
      if (value == null) {
        unset_powerFactorValue();
      } else {
        set_powerFactorValue((java.lang.Double)value);
      }
      break;

    case _ESTIMATED_POWER_FACTOR_VALUE:
      if (value == null) {
        unset_estimatedPowerFactorValue();
      } else {
        set_estimatedPowerFactorValue((java.lang.Double)value);
      }
      break;

    case _CURRENT_VAR_POINT_QUALITY:
      if (value == null) {
        unset_currentVarPointQuality();
      } else {
        set_currentVarPointQuality((java.lang.Integer)value);
      }
      break;

    case _WAIVE_CONTROL_FLAG:
      if (value == null) {
        unset_waiveControlFlag();
      } else {
        set_waiveControlFlag((java.lang.Boolean)value);
      }
      break;

    case _STRATEGY_CONTROL_UNITS:
      if (value == null) {
        unset_strategy_controlUnits();
      } else {
        set_strategy_controlUnits((java.lang.String)value);
      }
      break;

    case _DECIMAL_PLACES:
      if (value == null) {
        unset_decimalPlaces();
      } else {
        set_decimalPlaces((java.lang.Integer)value);
      }
      break;

    case _PEAK_TIME_FLAG:
      if (value == null) {
        unset_peakTimeFlag();
      } else {
        set_peakTimeFlag((java.lang.Boolean)value);
      }
      break;

    case _STRATEGY_PEAK_LAG:
      if (value == null) {
        unset_strategy_peakLag();
      } else {
        set_strategy_peakLag((java.lang.Double)value);
      }
      break;

    case _STRATEGY_OFF_PEAK_LAG:
      if (value == null) {
        unset_strategy_offPeakLag();
      } else {
        set_strategy_offPeakLag((java.lang.Double)value);
      }
      break;

    case _STRATEGY__PEAK_LEAD:
      if (value == null) {
        unset_strategy_PeakLead();
      } else {
        set_strategy_PeakLead((java.lang.Double)value);
      }
      break;

    case _STRATEGY__OFF_PEAK_LEAD:
      if (value == null) {
        unset_strategy_OffPeakLead();
      } else {
        set_strategy_OffPeakLead((java.lang.Double)value);
      }
      break;

    case _CURRENT_VOLT_LOAD_POINT_ID:
      if (value == null) {
        unset_currentVoltLoadPointId();
      } else {
        set_currentVoltLoadPointId((java.lang.Integer)value);
      }
      break;

    case _CURRENT_VOLT_LOAD_POINT_VALUE:
      if (value == null) {
        unset_currentVoltLoadPointValue();
      } else {
        set_currentVoltLoadPointValue((java.lang.Double)value);
      }
      break;

    case _CURRENT_WATT_POINT_QUALITY:
      if (value == null) {
        unset_currentWattPointQuality();
      } else {
        set_currentWattPointQuality((java.lang.Integer)value);
      }
      break;

    case _CURRENT_VOLT_POINT_QUALITY:
      if (value == null) {
        unset_currentVoltPointQuality();
      } else {
        set_currentVoltPointQuality((java.lang.Integer)value);
      }
      break;

    case _TARGET_VAR_VALUE:
      if (value == null) {
        unset_targetVarValue();
      } else {
        set_targetVarValue((java.lang.Double)value);
      }
      break;

    case _SOLUTION:
      if (value == null) {
        unset_solution();
      } else {
        set_solution((java.lang.String)value);
      }
      break;

    case _OV_UV_DISABLED_FLAG:
      if (value == null) {
        unset_ovUvDisabledFlag();
      } else {
        set_ovUvDisabledFlag((java.lang.Boolean)value);
      }
      break;

    case _STRATEGY_PEAK_PFSET_POINT:
      if (value == null) {
        unset_strategy_peakPFSetPoint();
      } else {
        set_strategy_peakPFSetPoint((java.lang.Double)value);
      }
      break;

    case _STRATEGY_OFF_PEAK_PFSET_POINT:
      if (value == null) {
        unset_strategy_offPeakPFSetPoint();
      } else {
        set_strategy_offPeakPFSetPoint((java.lang.Double)value);
      }
      break;

    case _STRATEGY_CONTROL_METHOD:
      if (value == null) {
        unset_strategy_controlMethod();
      } else {
        set_strategy_controlMethod((java.lang.String)value);
      }
      break;

    case _PHASE_AVALUE:
      if (value == null) {
        unset_phaseAValue();
      } else {
        set_phaseAValue((java.lang.Double)value);
      }
      break;

    case _PHASE_BVALUE:
      if (value == null) {
        unset_phaseBValue();
      } else {
        set_phaseBValue((java.lang.Double)value);
      }
      break;

    case _PHASE_CVALUE:
      if (value == null) {
        unset_phaseCValue();
      } else {
        set_phaseCValue((java.lang.Double)value);
      }
      break;

    case _LIKE_DAY_CONTROL_FLAG:
      if (value == null) {
        unset_likeDayControlFlag();
      } else {
        set_likeDayControlFlag((java.lang.Boolean)value);
      }
      break;

    case _USE_PHASE_DATA:
      if (value == null) {
        unset_usePhaseData();
      } else {
        set_usePhaseData((java.lang.Boolean)value);
      }
      break;

    case _ORIGINAL_PARENT_ID:
      if (value == null) {
        unset_originalParentId();
      } else {
        set_originalParentId((java.lang.Integer)value);
      }
      break;

    case _CC_CAPBANKS:
      if (value == null) {
        unset_ccCapbanks();
      } else {
        set_ccCapbanks((java.util.List<CCCapBank>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _PARENT_ID:
      return get_parentId();

    case _STRATEGY_MAX_DAILY_OPERATION:
      return get_strategy_maxDailyOperation();

    case _STRATEGY_MAX_OPERATION_DISABLE_FLAG:
      return is_strategy_maxOperationDisableFlag();

    case _CURRENT_VAR_LOAD_POINT_ID:
      return get_currentVarLoadPointId();

    case _CURRENT_VAR_LOAD_POINT_VALUE:
      return get_currentVarLoadPointValue();

    case _CURRENT_WATT_LOAD_POINT_ID:
      return get_currentWattLoadPointId();

    case _CURRENT_WATT_LOAD_POINT_VALUE:
      return get_currentWattLoadPointValue();

    case _MAP_LOCATION_ID:
      return get_mapLocationId();

    case _DISPLAY_ORDER:
      return get_displayOrder();

    case _NEW_POINT_DATA_RECEIVED_FLAG:
      return is_newPointDataReceivedFlag();

    case _LAST_CURRENT_VAR_POINT_UPDATE_TIME:
      return get_lastCurrentVarPointUpdateTime();

    case _ESTIMATED_VAR_LOAD_POINT_ID:
      return get_estimatedVarLoadPointId();

    case _ESTIMATED_VAR_LOAD_POINT_VALUE:
      return get_estimatedVarLoadPointValue();

    case _DAILY_OPERATIONS_ANALOG_POINT_ID:
      return get_dailyOperationsAnalogPointId();

    case _POWER_FACTOR_POINT_ID:
      return get_powerFactorPointId();

    case _ESTIMATED_POWER_FACTOR_POINT_ID:
      return get_estimatedPowerFactorPointId();

    case _CURRENT_DAILY_OPERATIONS:
      return get_currentDailyOperations();

    case _RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG:
      return is_recentlyControlledFlag_or_performingVerificationFlag();

    case _LAST_OPERATION_TIME:
      return get_lastOperationTime();

    case _VAR_VALUE_BEFORE_CONTROL:
      return get_varValueBeforeControl();

    case _POWER_FACTOR_VALUE:
      return get_powerFactorValue();

    case _ESTIMATED_POWER_FACTOR_VALUE:
      return get_estimatedPowerFactorValue();

    case _CURRENT_VAR_POINT_QUALITY:
      return get_currentVarPointQuality();

    case _WAIVE_CONTROL_FLAG:
      return is_waiveControlFlag();

    case _STRATEGY_CONTROL_UNITS:
      return get_strategy_controlUnits();

    case _DECIMAL_PLACES:
      return get_decimalPlaces();

    case _PEAK_TIME_FLAG:
      return is_peakTimeFlag();

    case _STRATEGY_PEAK_LAG:
      return get_strategy_peakLag();

    case _STRATEGY_OFF_PEAK_LAG:
      return get_strategy_offPeakLag();

    case _STRATEGY__PEAK_LEAD:
      return get_strategy_PeakLead();

    case _STRATEGY__OFF_PEAK_LEAD:
      return get_strategy_OffPeakLead();

    case _CURRENT_VOLT_LOAD_POINT_ID:
      return get_currentVoltLoadPointId();

    case _CURRENT_VOLT_LOAD_POINT_VALUE:
      return get_currentVoltLoadPointValue();

    case _CURRENT_WATT_POINT_QUALITY:
      return get_currentWattPointQuality();

    case _CURRENT_VOLT_POINT_QUALITY:
      return get_currentVoltPointQuality();

    case _TARGET_VAR_VALUE:
      return get_targetVarValue();

    case _SOLUTION:
      return get_solution();

    case _OV_UV_DISABLED_FLAG:
      return is_ovUvDisabledFlag();

    case _STRATEGY_PEAK_PFSET_POINT:
      return get_strategy_peakPFSetPoint();

    case _STRATEGY_OFF_PEAK_PFSET_POINT:
      return get_strategy_offPeakPFSetPoint();

    case _STRATEGY_CONTROL_METHOD:
      return get_strategy_controlMethod();

    case _PHASE_AVALUE:
      return get_phaseAValue();

    case _PHASE_BVALUE:
      return get_phaseBValue();

    case _PHASE_CVALUE:
      return get_phaseCValue();

    case _LIKE_DAY_CONTROL_FLAG:
      return is_likeDayControlFlag();

    case _USE_PHASE_DATA:
      return is_usePhaseData();

    case _ORIGINAL_PARENT_ID:
      return get_originalParentId();

    case _CC_CAPBANKS:
      return get_ccCapbanks();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _PARENT_ID:
      return isSet_parentId();
    case _STRATEGY_MAX_DAILY_OPERATION:
      return isSet_strategy_maxDailyOperation();
    case _STRATEGY_MAX_OPERATION_DISABLE_FLAG:
      return isSet_strategy_maxOperationDisableFlag();
    case _CURRENT_VAR_LOAD_POINT_ID:
      return isSet_currentVarLoadPointId();
    case _CURRENT_VAR_LOAD_POINT_VALUE:
      return isSet_currentVarLoadPointValue();
    case _CURRENT_WATT_LOAD_POINT_ID:
      return isSet_currentWattLoadPointId();
    case _CURRENT_WATT_LOAD_POINT_VALUE:
      return isSet_currentWattLoadPointValue();
    case _MAP_LOCATION_ID:
      return isSet_mapLocationId();
    case _DISPLAY_ORDER:
      return isSet_displayOrder();
    case _NEW_POINT_DATA_RECEIVED_FLAG:
      return isSet_newPointDataReceivedFlag();
    case _LAST_CURRENT_VAR_POINT_UPDATE_TIME:
      return isSet_lastCurrentVarPointUpdateTime();
    case _ESTIMATED_VAR_LOAD_POINT_ID:
      return isSet_estimatedVarLoadPointId();
    case _ESTIMATED_VAR_LOAD_POINT_VALUE:
      return isSet_estimatedVarLoadPointValue();
    case _DAILY_OPERATIONS_ANALOG_POINT_ID:
      return isSet_dailyOperationsAnalogPointId();
    case _POWER_FACTOR_POINT_ID:
      return isSet_powerFactorPointId();
    case _ESTIMATED_POWER_FACTOR_POINT_ID:
      return isSet_estimatedPowerFactorPointId();
    case _CURRENT_DAILY_OPERATIONS:
      return isSet_currentDailyOperations();
    case _RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG:
      return isSet_recentlyControlledFlag_or_performingVerificationFlag();
    case _LAST_OPERATION_TIME:
      return isSet_lastOperationTime();
    case _VAR_VALUE_BEFORE_CONTROL:
      return isSet_varValueBeforeControl();
    case _POWER_FACTOR_VALUE:
      return isSet_powerFactorValue();
    case _ESTIMATED_POWER_FACTOR_VALUE:
      return isSet_estimatedPowerFactorValue();
    case _CURRENT_VAR_POINT_QUALITY:
      return isSet_currentVarPointQuality();
    case _WAIVE_CONTROL_FLAG:
      return isSet_waiveControlFlag();
    case _STRATEGY_CONTROL_UNITS:
      return isSet_strategy_controlUnits();
    case _DECIMAL_PLACES:
      return isSet_decimalPlaces();
    case _PEAK_TIME_FLAG:
      return isSet_peakTimeFlag();
    case _STRATEGY_PEAK_LAG:
      return isSet_strategy_peakLag();
    case _STRATEGY_OFF_PEAK_LAG:
      return isSet_strategy_offPeakLag();
    case _STRATEGY__PEAK_LEAD:
      return isSet_strategy_PeakLead();
    case _STRATEGY__OFF_PEAK_LEAD:
      return isSet_strategy_OffPeakLead();
    case _CURRENT_VOLT_LOAD_POINT_ID:
      return isSet_currentVoltLoadPointId();
    case _CURRENT_VOLT_LOAD_POINT_VALUE:
      return isSet_currentVoltLoadPointValue();
    case _CURRENT_WATT_POINT_QUALITY:
      return isSet_currentWattPointQuality();
    case _CURRENT_VOLT_POINT_QUALITY:
      return isSet_currentVoltPointQuality();
    case _TARGET_VAR_VALUE:
      return isSet_targetVarValue();
    case _SOLUTION:
      return isSet_solution();
    case _OV_UV_DISABLED_FLAG:
      return isSet_ovUvDisabledFlag();
    case _STRATEGY_PEAK_PFSET_POINT:
      return isSet_strategy_peakPFSetPoint();
    case _STRATEGY_OFF_PEAK_PFSET_POINT:
      return isSet_strategy_offPeakPFSetPoint();
    case _STRATEGY_CONTROL_METHOD:
      return isSet_strategy_controlMethod();
    case _PHASE_AVALUE:
      return isSet_phaseAValue();
    case _PHASE_BVALUE:
      return isSet_phaseBValue();
    case _PHASE_CVALUE:
      return isSet_phaseCValue();
    case _LIKE_DAY_CONTROL_FLAG:
      return isSet_likeDayControlFlag();
    case _USE_PHASE_DATA:
      return isSet_usePhaseData();
    case _ORIGINAL_PARENT_ID:
      return isSet_originalParentId();
    case _CC_CAPBANKS:
      return isSet_ccCapbanks();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CCFeeder)
      return this.equals((CCFeeder)that);
    return false;
  }

  public boolean equals(CCFeeder that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__parentId = true;
    boolean that_present__parentId = true;
    if (this_present__parentId || that_present__parentId) {
      if (!(this_present__parentId && that_present__parentId))
        return false;
      if (this._parentId != that._parentId)
        return false;
    }

    boolean this_present__strategy_maxDailyOperation = true;
    boolean that_present__strategy_maxDailyOperation = true;
    if (this_present__strategy_maxDailyOperation || that_present__strategy_maxDailyOperation) {
      if (!(this_present__strategy_maxDailyOperation && that_present__strategy_maxDailyOperation))
        return false;
      if (this._strategy_maxDailyOperation != that._strategy_maxDailyOperation)
        return false;
    }

    boolean this_present__strategy_maxOperationDisableFlag = true;
    boolean that_present__strategy_maxOperationDisableFlag = true;
    if (this_present__strategy_maxOperationDisableFlag || that_present__strategy_maxOperationDisableFlag) {
      if (!(this_present__strategy_maxOperationDisableFlag && that_present__strategy_maxOperationDisableFlag))
        return false;
      if (this._strategy_maxOperationDisableFlag != that._strategy_maxOperationDisableFlag)
        return false;
    }

    boolean this_present__currentVarLoadPointId = true;
    boolean that_present__currentVarLoadPointId = true;
    if (this_present__currentVarLoadPointId || that_present__currentVarLoadPointId) {
      if (!(this_present__currentVarLoadPointId && that_present__currentVarLoadPointId))
        return false;
      if (this._currentVarLoadPointId != that._currentVarLoadPointId)
        return false;
    }

    boolean this_present__currentVarLoadPointValue = true;
    boolean that_present__currentVarLoadPointValue = true;
    if (this_present__currentVarLoadPointValue || that_present__currentVarLoadPointValue) {
      if (!(this_present__currentVarLoadPointValue && that_present__currentVarLoadPointValue))
        return false;
      if (this._currentVarLoadPointValue != that._currentVarLoadPointValue)
        return false;
    }

    boolean this_present__currentWattLoadPointId = true;
    boolean that_present__currentWattLoadPointId = true;
    if (this_present__currentWattLoadPointId || that_present__currentWattLoadPointId) {
      if (!(this_present__currentWattLoadPointId && that_present__currentWattLoadPointId))
        return false;
      if (this._currentWattLoadPointId != that._currentWattLoadPointId)
        return false;
    }

    boolean this_present__currentWattLoadPointValue = true;
    boolean that_present__currentWattLoadPointValue = true;
    if (this_present__currentWattLoadPointValue || that_present__currentWattLoadPointValue) {
      if (!(this_present__currentWattLoadPointValue && that_present__currentWattLoadPointValue))
        return false;
      if (this._currentWattLoadPointValue != that._currentWattLoadPointValue)
        return false;
    }

    boolean this_present__mapLocationId = true && this.isSet_mapLocationId();
    boolean that_present__mapLocationId = true && that.isSet_mapLocationId();
    if (this_present__mapLocationId || that_present__mapLocationId) {
      if (!(this_present__mapLocationId && that_present__mapLocationId))
        return false;
      if (!this._mapLocationId.equals(that._mapLocationId))
        return false;
    }

    boolean this_present__displayOrder = true;
    boolean that_present__displayOrder = true;
    if (this_present__displayOrder || that_present__displayOrder) {
      if (!(this_present__displayOrder && that_present__displayOrder))
        return false;
      if (this._displayOrder != that._displayOrder)
        return false;
    }

    boolean this_present__newPointDataReceivedFlag = true;
    boolean that_present__newPointDataReceivedFlag = true;
    if (this_present__newPointDataReceivedFlag || that_present__newPointDataReceivedFlag) {
      if (!(this_present__newPointDataReceivedFlag && that_present__newPointDataReceivedFlag))
        return false;
      if (this._newPointDataReceivedFlag != that._newPointDataReceivedFlag)
        return false;
    }

    boolean this_present__lastCurrentVarPointUpdateTime = true;
    boolean that_present__lastCurrentVarPointUpdateTime = true;
    if (this_present__lastCurrentVarPointUpdateTime || that_present__lastCurrentVarPointUpdateTime) {
      if (!(this_present__lastCurrentVarPointUpdateTime && that_present__lastCurrentVarPointUpdateTime))
        return false;
      if (this._lastCurrentVarPointUpdateTime != that._lastCurrentVarPointUpdateTime)
        return false;
    }

    boolean this_present__estimatedVarLoadPointId = true;
    boolean that_present__estimatedVarLoadPointId = true;
    if (this_present__estimatedVarLoadPointId || that_present__estimatedVarLoadPointId) {
      if (!(this_present__estimatedVarLoadPointId && that_present__estimatedVarLoadPointId))
        return false;
      if (this._estimatedVarLoadPointId != that._estimatedVarLoadPointId)
        return false;
    }

    boolean this_present__estimatedVarLoadPointValue = true;
    boolean that_present__estimatedVarLoadPointValue = true;
    if (this_present__estimatedVarLoadPointValue || that_present__estimatedVarLoadPointValue) {
      if (!(this_present__estimatedVarLoadPointValue && that_present__estimatedVarLoadPointValue))
        return false;
      if (this._estimatedVarLoadPointValue != that._estimatedVarLoadPointValue)
        return false;
    }

    boolean this_present__dailyOperationsAnalogPointId = true;
    boolean that_present__dailyOperationsAnalogPointId = true;
    if (this_present__dailyOperationsAnalogPointId || that_present__dailyOperationsAnalogPointId) {
      if (!(this_present__dailyOperationsAnalogPointId && that_present__dailyOperationsAnalogPointId))
        return false;
      if (this._dailyOperationsAnalogPointId != that._dailyOperationsAnalogPointId)
        return false;
    }

    boolean this_present__powerFactorPointId = true;
    boolean that_present__powerFactorPointId = true;
    if (this_present__powerFactorPointId || that_present__powerFactorPointId) {
      if (!(this_present__powerFactorPointId && that_present__powerFactorPointId))
        return false;
      if (this._powerFactorPointId != that._powerFactorPointId)
        return false;
    }

    boolean this_present__estimatedPowerFactorPointId = true;
    boolean that_present__estimatedPowerFactorPointId = true;
    if (this_present__estimatedPowerFactorPointId || that_present__estimatedPowerFactorPointId) {
      if (!(this_present__estimatedPowerFactorPointId && that_present__estimatedPowerFactorPointId))
        return false;
      if (this._estimatedPowerFactorPointId != that._estimatedPowerFactorPointId)
        return false;
    }

    boolean this_present__currentDailyOperations = true;
    boolean that_present__currentDailyOperations = true;
    if (this_present__currentDailyOperations || that_present__currentDailyOperations) {
      if (!(this_present__currentDailyOperations && that_present__currentDailyOperations))
        return false;
      if (this._currentDailyOperations != that._currentDailyOperations)
        return false;
    }

    boolean this_present__recentlyControlledFlag_or_performingVerificationFlag = true;
    boolean that_present__recentlyControlledFlag_or_performingVerificationFlag = true;
    if (this_present__recentlyControlledFlag_or_performingVerificationFlag || that_present__recentlyControlledFlag_or_performingVerificationFlag) {
      if (!(this_present__recentlyControlledFlag_or_performingVerificationFlag && that_present__recentlyControlledFlag_or_performingVerificationFlag))
        return false;
      if (this._recentlyControlledFlag_or_performingVerificationFlag != that._recentlyControlledFlag_or_performingVerificationFlag)
        return false;
    }

    boolean this_present__lastOperationTime = true;
    boolean that_present__lastOperationTime = true;
    if (this_present__lastOperationTime || that_present__lastOperationTime) {
      if (!(this_present__lastOperationTime && that_present__lastOperationTime))
        return false;
      if (this._lastOperationTime != that._lastOperationTime)
        return false;
    }

    boolean this_present__varValueBeforeControl = true;
    boolean that_present__varValueBeforeControl = true;
    if (this_present__varValueBeforeControl || that_present__varValueBeforeControl) {
      if (!(this_present__varValueBeforeControl && that_present__varValueBeforeControl))
        return false;
      if (this._varValueBeforeControl != that._varValueBeforeControl)
        return false;
    }

    boolean this_present__powerFactorValue = true;
    boolean that_present__powerFactorValue = true;
    if (this_present__powerFactorValue || that_present__powerFactorValue) {
      if (!(this_present__powerFactorValue && that_present__powerFactorValue))
        return false;
      if (this._powerFactorValue != that._powerFactorValue)
        return false;
    }

    boolean this_present__estimatedPowerFactorValue = true;
    boolean that_present__estimatedPowerFactorValue = true;
    if (this_present__estimatedPowerFactorValue || that_present__estimatedPowerFactorValue) {
      if (!(this_present__estimatedPowerFactorValue && that_present__estimatedPowerFactorValue))
        return false;
      if (this._estimatedPowerFactorValue != that._estimatedPowerFactorValue)
        return false;
    }

    boolean this_present__currentVarPointQuality = true;
    boolean that_present__currentVarPointQuality = true;
    if (this_present__currentVarPointQuality || that_present__currentVarPointQuality) {
      if (!(this_present__currentVarPointQuality && that_present__currentVarPointQuality))
        return false;
      if (this._currentVarPointQuality != that._currentVarPointQuality)
        return false;
    }

    boolean this_present__waiveControlFlag = true;
    boolean that_present__waiveControlFlag = true;
    if (this_present__waiveControlFlag || that_present__waiveControlFlag) {
      if (!(this_present__waiveControlFlag && that_present__waiveControlFlag))
        return false;
      if (this._waiveControlFlag != that._waiveControlFlag)
        return false;
    }

    boolean this_present__strategy_controlUnits = true && this.isSet_strategy_controlUnits();
    boolean that_present__strategy_controlUnits = true && that.isSet_strategy_controlUnits();
    if (this_present__strategy_controlUnits || that_present__strategy_controlUnits) {
      if (!(this_present__strategy_controlUnits && that_present__strategy_controlUnits))
        return false;
      if (!this._strategy_controlUnits.equals(that._strategy_controlUnits))
        return false;
    }

    boolean this_present__decimalPlaces = true;
    boolean that_present__decimalPlaces = true;
    if (this_present__decimalPlaces || that_present__decimalPlaces) {
      if (!(this_present__decimalPlaces && that_present__decimalPlaces))
        return false;
      if (this._decimalPlaces != that._decimalPlaces)
        return false;
    }

    boolean this_present__peakTimeFlag = true;
    boolean that_present__peakTimeFlag = true;
    if (this_present__peakTimeFlag || that_present__peakTimeFlag) {
      if (!(this_present__peakTimeFlag && that_present__peakTimeFlag))
        return false;
      if (this._peakTimeFlag != that._peakTimeFlag)
        return false;
    }

    boolean this_present__strategy_peakLag = true;
    boolean that_present__strategy_peakLag = true;
    if (this_present__strategy_peakLag || that_present__strategy_peakLag) {
      if (!(this_present__strategy_peakLag && that_present__strategy_peakLag))
        return false;
      if (this._strategy_peakLag != that._strategy_peakLag)
        return false;
    }

    boolean this_present__strategy_offPeakLag = true;
    boolean that_present__strategy_offPeakLag = true;
    if (this_present__strategy_offPeakLag || that_present__strategy_offPeakLag) {
      if (!(this_present__strategy_offPeakLag && that_present__strategy_offPeakLag))
        return false;
      if (this._strategy_offPeakLag != that._strategy_offPeakLag)
        return false;
    }

    boolean this_present__strategy_PeakLead = true;
    boolean that_present__strategy_PeakLead = true;
    if (this_present__strategy_PeakLead || that_present__strategy_PeakLead) {
      if (!(this_present__strategy_PeakLead && that_present__strategy_PeakLead))
        return false;
      if (this._strategy_PeakLead != that._strategy_PeakLead)
        return false;
    }

    boolean this_present__strategy_OffPeakLead = true;
    boolean that_present__strategy_OffPeakLead = true;
    if (this_present__strategy_OffPeakLead || that_present__strategy_OffPeakLead) {
      if (!(this_present__strategy_OffPeakLead && that_present__strategy_OffPeakLead))
        return false;
      if (this._strategy_OffPeakLead != that._strategy_OffPeakLead)
        return false;
    }

    boolean this_present__currentVoltLoadPointId = true;
    boolean that_present__currentVoltLoadPointId = true;
    if (this_present__currentVoltLoadPointId || that_present__currentVoltLoadPointId) {
      if (!(this_present__currentVoltLoadPointId && that_present__currentVoltLoadPointId))
        return false;
      if (this._currentVoltLoadPointId != that._currentVoltLoadPointId)
        return false;
    }

    boolean this_present__currentVoltLoadPointValue = true;
    boolean that_present__currentVoltLoadPointValue = true;
    if (this_present__currentVoltLoadPointValue || that_present__currentVoltLoadPointValue) {
      if (!(this_present__currentVoltLoadPointValue && that_present__currentVoltLoadPointValue))
        return false;
      if (this._currentVoltLoadPointValue != that._currentVoltLoadPointValue)
        return false;
    }

    boolean this_present__currentWattPointQuality = true;
    boolean that_present__currentWattPointQuality = true;
    if (this_present__currentWattPointQuality || that_present__currentWattPointQuality) {
      if (!(this_present__currentWattPointQuality && that_present__currentWattPointQuality))
        return false;
      if (this._currentWattPointQuality != that._currentWattPointQuality)
        return false;
    }

    boolean this_present__currentVoltPointQuality = true;
    boolean that_present__currentVoltPointQuality = true;
    if (this_present__currentVoltPointQuality || that_present__currentVoltPointQuality) {
      if (!(this_present__currentVoltPointQuality && that_present__currentVoltPointQuality))
        return false;
      if (this._currentVoltPointQuality != that._currentVoltPointQuality)
        return false;
    }

    boolean this_present__targetVarValue = true;
    boolean that_present__targetVarValue = true;
    if (this_present__targetVarValue || that_present__targetVarValue) {
      if (!(this_present__targetVarValue && that_present__targetVarValue))
        return false;
      if (this._targetVarValue != that._targetVarValue)
        return false;
    }

    boolean this_present__solution = true && this.isSet_solution();
    boolean that_present__solution = true && that.isSet_solution();
    if (this_present__solution || that_present__solution) {
      if (!(this_present__solution && that_present__solution))
        return false;
      if (!this._solution.equals(that._solution))
        return false;
    }

    boolean this_present__ovUvDisabledFlag = true;
    boolean that_present__ovUvDisabledFlag = true;
    if (this_present__ovUvDisabledFlag || that_present__ovUvDisabledFlag) {
      if (!(this_present__ovUvDisabledFlag && that_present__ovUvDisabledFlag))
        return false;
      if (this._ovUvDisabledFlag != that._ovUvDisabledFlag)
        return false;
    }

    boolean this_present__strategy_peakPFSetPoint = true;
    boolean that_present__strategy_peakPFSetPoint = true;
    if (this_present__strategy_peakPFSetPoint || that_present__strategy_peakPFSetPoint) {
      if (!(this_present__strategy_peakPFSetPoint && that_present__strategy_peakPFSetPoint))
        return false;
      if (this._strategy_peakPFSetPoint != that._strategy_peakPFSetPoint)
        return false;
    }

    boolean this_present__strategy_offPeakPFSetPoint = true;
    boolean that_present__strategy_offPeakPFSetPoint = true;
    if (this_present__strategy_offPeakPFSetPoint || that_present__strategy_offPeakPFSetPoint) {
      if (!(this_present__strategy_offPeakPFSetPoint && that_present__strategy_offPeakPFSetPoint))
        return false;
      if (this._strategy_offPeakPFSetPoint != that._strategy_offPeakPFSetPoint)
        return false;
    }

    boolean this_present__strategy_controlMethod = true && this.isSet_strategy_controlMethod();
    boolean that_present__strategy_controlMethod = true && that.isSet_strategy_controlMethod();
    if (this_present__strategy_controlMethod || that_present__strategy_controlMethod) {
      if (!(this_present__strategy_controlMethod && that_present__strategy_controlMethod))
        return false;
      if (!this._strategy_controlMethod.equals(that._strategy_controlMethod))
        return false;
    }

    boolean this_present__phaseAValue = true;
    boolean that_present__phaseAValue = true;
    if (this_present__phaseAValue || that_present__phaseAValue) {
      if (!(this_present__phaseAValue && that_present__phaseAValue))
        return false;
      if (this._phaseAValue != that._phaseAValue)
        return false;
    }

    boolean this_present__phaseBValue = true;
    boolean that_present__phaseBValue = true;
    if (this_present__phaseBValue || that_present__phaseBValue) {
      if (!(this_present__phaseBValue && that_present__phaseBValue))
        return false;
      if (this._phaseBValue != that._phaseBValue)
        return false;
    }

    boolean this_present__phaseCValue = true;
    boolean that_present__phaseCValue = true;
    if (this_present__phaseCValue || that_present__phaseCValue) {
      if (!(this_present__phaseCValue && that_present__phaseCValue))
        return false;
      if (this._phaseCValue != that._phaseCValue)
        return false;
    }

    boolean this_present__likeDayControlFlag = true;
    boolean that_present__likeDayControlFlag = true;
    if (this_present__likeDayControlFlag || that_present__likeDayControlFlag) {
      if (!(this_present__likeDayControlFlag && that_present__likeDayControlFlag))
        return false;
      if (this._likeDayControlFlag != that._likeDayControlFlag)
        return false;
    }

    boolean this_present__usePhaseData = true;
    boolean that_present__usePhaseData = true;
    if (this_present__usePhaseData || that_present__usePhaseData) {
      if (!(this_present__usePhaseData && that_present__usePhaseData))
        return false;
      if (this._usePhaseData != that._usePhaseData)
        return false;
    }

    boolean this_present__originalParentId = true;
    boolean that_present__originalParentId = true;
    if (this_present__originalParentId || that_present__originalParentId) {
      if (!(this_present__originalParentId && that_present__originalParentId))
        return false;
      if (this._originalParentId != that._originalParentId)
        return false;
    }

    boolean this_present__ccCapbanks = true && this.isSet_ccCapbanks();
    boolean that_present__ccCapbanks = true && that.isSet_ccCapbanks();
    if (this_present__ccCapbanks || that_present__ccCapbanks) {
      if (!(this_present__ccCapbanks && that_present__ccCapbanks))
        return false;
      if (!this._ccCapbanks.equals(that._ccCapbanks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_baseMessage()) ? 131071 : 524287);
    if (isSet_baseMessage())
      hashCode = hashCode * 8191 + _baseMessage.hashCode();

    hashCode = hashCode * 8191 + _parentId;

    hashCode = hashCode * 8191 + _strategy_maxDailyOperation;

    hashCode = hashCode * 8191 + ((_strategy_maxOperationDisableFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + _currentVarLoadPointId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_currentVarLoadPointValue);

    hashCode = hashCode * 8191 + _currentWattLoadPointId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_currentWattLoadPointValue);

    hashCode = hashCode * 8191 + ((isSet_mapLocationId()) ? 131071 : 524287);
    if (isSet_mapLocationId())
      hashCode = hashCode * 8191 + _mapLocationId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_displayOrder);

    hashCode = hashCode * 8191 + ((_newPointDataReceivedFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastCurrentVarPointUpdateTime);

    hashCode = hashCode * 8191 + _estimatedVarLoadPointId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_estimatedVarLoadPointValue);

    hashCode = hashCode * 8191 + _dailyOperationsAnalogPointId;

    hashCode = hashCode * 8191 + _powerFactorPointId;

    hashCode = hashCode * 8191 + _estimatedPowerFactorPointId;

    hashCode = hashCode * 8191 + _currentDailyOperations;

    hashCode = hashCode * 8191 + ((_recentlyControlledFlag_or_performingVerificationFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_lastOperationTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_varValueBeforeControl);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_powerFactorValue);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_estimatedPowerFactorValue);

    hashCode = hashCode * 8191 + _currentVarPointQuality;

    hashCode = hashCode * 8191 + ((_waiveControlFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSet_strategy_controlUnits()) ? 131071 : 524287);
    if (isSet_strategy_controlUnits())
      hashCode = hashCode * 8191 + _strategy_controlUnits.hashCode();

    hashCode = hashCode * 8191 + _decimalPlaces;

    hashCode = hashCode * 8191 + ((_peakTimeFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_strategy_peakLag);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_strategy_offPeakLag);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_strategy_PeakLead);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_strategy_OffPeakLead);

    hashCode = hashCode * 8191 + _currentVoltLoadPointId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_currentVoltLoadPointValue);

    hashCode = hashCode * 8191 + _currentWattPointQuality;

    hashCode = hashCode * 8191 + _currentVoltPointQuality;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_targetVarValue);

    hashCode = hashCode * 8191 + ((isSet_solution()) ? 131071 : 524287);
    if (isSet_solution())
      hashCode = hashCode * 8191 + _solution.hashCode();

    hashCode = hashCode * 8191 + ((_ovUvDisabledFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_strategy_peakPFSetPoint);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_strategy_offPeakPFSetPoint);

    hashCode = hashCode * 8191 + ((isSet_strategy_controlMethod()) ? 131071 : 524287);
    if (isSet_strategy_controlMethod())
      hashCode = hashCode * 8191 + _strategy_controlMethod.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_phaseAValue);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_phaseBValue);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_phaseCValue);

    hashCode = hashCode * 8191 + ((_likeDayControlFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((_usePhaseData) ? 131071 : 524287);

    hashCode = hashCode * 8191 + _originalParentId;

    hashCode = hashCode * 8191 + ((isSet_ccCapbanks()) ? 131071 : 524287);
    if (isSet_ccCapbanks())
      hashCode = hashCode * 8191 + _ccCapbanks.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CCFeeder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_baseMessage()).compareTo(other.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, other._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_parentId()).compareTo(other.isSet_parentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_parentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._parentId, other._parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_maxDailyOperation()).compareTo(other.isSet_strategy_maxDailyOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_maxDailyOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_maxDailyOperation, other._strategy_maxDailyOperation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_maxOperationDisableFlag()).compareTo(other.isSet_strategy_maxOperationDisableFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_maxOperationDisableFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_maxOperationDisableFlag, other._strategy_maxOperationDisableFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentVarLoadPointId()).compareTo(other.isSet_currentVarLoadPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentVarLoadPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentVarLoadPointId, other._currentVarLoadPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentVarLoadPointValue()).compareTo(other.isSet_currentVarLoadPointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentVarLoadPointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentVarLoadPointValue, other._currentVarLoadPointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentWattLoadPointId()).compareTo(other.isSet_currentWattLoadPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentWattLoadPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentWattLoadPointId, other._currentWattLoadPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentWattLoadPointValue()).compareTo(other.isSet_currentWattLoadPointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentWattLoadPointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentWattLoadPointValue, other._currentWattLoadPointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_mapLocationId()).compareTo(other.isSet_mapLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_mapLocationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._mapLocationId, other._mapLocationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_displayOrder()).compareTo(other.isSet_displayOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_displayOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._displayOrder, other._displayOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_newPointDataReceivedFlag()).compareTo(other.isSet_newPointDataReceivedFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_newPointDataReceivedFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._newPointDataReceivedFlag, other._newPointDataReceivedFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lastCurrentVarPointUpdateTime()).compareTo(other.isSet_lastCurrentVarPointUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastCurrentVarPointUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastCurrentVarPointUpdateTime, other._lastCurrentVarPointUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_estimatedVarLoadPointId()).compareTo(other.isSet_estimatedVarLoadPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_estimatedVarLoadPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._estimatedVarLoadPointId, other._estimatedVarLoadPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_estimatedVarLoadPointValue()).compareTo(other.isSet_estimatedVarLoadPointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_estimatedVarLoadPointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._estimatedVarLoadPointValue, other._estimatedVarLoadPointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_dailyOperationsAnalogPointId()).compareTo(other.isSet_dailyOperationsAnalogPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_dailyOperationsAnalogPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._dailyOperationsAnalogPointId, other._dailyOperationsAnalogPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_powerFactorPointId()).compareTo(other.isSet_powerFactorPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_powerFactorPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._powerFactorPointId, other._powerFactorPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_estimatedPowerFactorPointId()).compareTo(other.isSet_estimatedPowerFactorPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_estimatedPowerFactorPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._estimatedPowerFactorPointId, other._estimatedPowerFactorPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentDailyOperations()).compareTo(other.isSet_currentDailyOperations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentDailyOperations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentDailyOperations, other._currentDailyOperations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_recentlyControlledFlag_or_performingVerificationFlag()).compareTo(other.isSet_recentlyControlledFlag_or_performingVerificationFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_recentlyControlledFlag_or_performingVerificationFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._recentlyControlledFlag_or_performingVerificationFlag, other._recentlyControlledFlag_or_performingVerificationFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_lastOperationTime()).compareTo(other.isSet_lastOperationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_lastOperationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._lastOperationTime, other._lastOperationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_varValueBeforeControl()).compareTo(other.isSet_varValueBeforeControl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_varValueBeforeControl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._varValueBeforeControl, other._varValueBeforeControl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_powerFactorValue()).compareTo(other.isSet_powerFactorValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_powerFactorValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._powerFactorValue, other._powerFactorValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_estimatedPowerFactorValue()).compareTo(other.isSet_estimatedPowerFactorValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_estimatedPowerFactorValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._estimatedPowerFactorValue, other._estimatedPowerFactorValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentVarPointQuality()).compareTo(other.isSet_currentVarPointQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentVarPointQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentVarPointQuality, other._currentVarPointQuality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_waiveControlFlag()).compareTo(other.isSet_waiveControlFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_waiveControlFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._waiveControlFlag, other._waiveControlFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_controlUnits()).compareTo(other.isSet_strategy_controlUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_controlUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_controlUnits, other._strategy_controlUnits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_decimalPlaces()).compareTo(other.isSet_decimalPlaces());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_decimalPlaces()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._decimalPlaces, other._decimalPlaces);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_peakTimeFlag()).compareTo(other.isSet_peakTimeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_peakTimeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._peakTimeFlag, other._peakTimeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_peakLag()).compareTo(other.isSet_strategy_peakLag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_peakLag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_peakLag, other._strategy_peakLag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_offPeakLag()).compareTo(other.isSet_strategy_offPeakLag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_offPeakLag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_offPeakLag, other._strategy_offPeakLag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_PeakLead()).compareTo(other.isSet_strategy_PeakLead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_PeakLead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_PeakLead, other._strategy_PeakLead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_OffPeakLead()).compareTo(other.isSet_strategy_OffPeakLead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_OffPeakLead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_OffPeakLead, other._strategy_OffPeakLead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentVoltLoadPointId()).compareTo(other.isSet_currentVoltLoadPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentVoltLoadPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentVoltLoadPointId, other._currentVoltLoadPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentVoltLoadPointValue()).compareTo(other.isSet_currentVoltLoadPointValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentVoltLoadPointValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentVoltLoadPointValue, other._currentVoltLoadPointValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentWattPointQuality()).compareTo(other.isSet_currentWattPointQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentWattPointQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentWattPointQuality, other._currentWattPointQuality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_currentVoltPointQuality()).compareTo(other.isSet_currentVoltPointQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_currentVoltPointQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._currentVoltPointQuality, other._currentVoltPointQuality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_targetVarValue()).compareTo(other.isSet_targetVarValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_targetVarValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._targetVarValue, other._targetVarValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_solution()).compareTo(other.isSet_solution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_solution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._solution, other._solution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_ovUvDisabledFlag()).compareTo(other.isSet_ovUvDisabledFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_ovUvDisabledFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._ovUvDisabledFlag, other._ovUvDisabledFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_peakPFSetPoint()).compareTo(other.isSet_strategy_peakPFSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_peakPFSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_peakPFSetPoint, other._strategy_peakPFSetPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_offPeakPFSetPoint()).compareTo(other.isSet_strategy_offPeakPFSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_offPeakPFSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_offPeakPFSetPoint, other._strategy_offPeakPFSetPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_strategy_controlMethod()).compareTo(other.isSet_strategy_controlMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_strategy_controlMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._strategy_controlMethod, other._strategy_controlMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_phaseAValue()).compareTo(other.isSet_phaseAValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_phaseAValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._phaseAValue, other._phaseAValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_phaseBValue()).compareTo(other.isSet_phaseBValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_phaseBValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._phaseBValue, other._phaseBValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_phaseCValue()).compareTo(other.isSet_phaseCValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_phaseCValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._phaseCValue, other._phaseCValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_likeDayControlFlag()).compareTo(other.isSet_likeDayControlFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_likeDayControlFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._likeDayControlFlag, other._likeDayControlFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_usePhaseData()).compareTo(other.isSet_usePhaseData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_usePhaseData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._usePhaseData, other._usePhaseData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_originalParentId()).compareTo(other.isSet_originalParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_originalParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._originalParentId, other._originalParentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_ccCapbanks()).compareTo(other.isSet_ccCapbanks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_ccCapbanks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._ccCapbanks, other._ccCapbanks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CCFeeder(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_parentId:");
    sb.append(this._parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_maxDailyOperation:");
    sb.append(this._strategy_maxDailyOperation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_maxOperationDisableFlag:");
    sb.append(this._strategy_maxOperationDisableFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentVarLoadPointId:");
    sb.append(this._currentVarLoadPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentVarLoadPointValue:");
    sb.append(this._currentVarLoadPointValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentWattLoadPointId:");
    sb.append(this._currentWattLoadPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentWattLoadPointValue:");
    sb.append(this._currentWattLoadPointValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_mapLocationId:");
    if (this._mapLocationId == null) {
      sb.append("null");
    } else {
      sb.append(this._mapLocationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_displayOrder:");
    sb.append(this._displayOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_newPointDataReceivedFlag:");
    sb.append(this._newPointDataReceivedFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastCurrentVarPointUpdateTime:");
    sb.append(this._lastCurrentVarPointUpdateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_estimatedVarLoadPointId:");
    sb.append(this._estimatedVarLoadPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_estimatedVarLoadPointValue:");
    sb.append(this._estimatedVarLoadPointValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_dailyOperationsAnalogPointId:");
    sb.append(this._dailyOperationsAnalogPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_powerFactorPointId:");
    sb.append(this._powerFactorPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_estimatedPowerFactorPointId:");
    sb.append(this._estimatedPowerFactorPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentDailyOperations:");
    sb.append(this._currentDailyOperations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_recentlyControlledFlag_or_performingVerificationFlag:");
    sb.append(this._recentlyControlledFlag_or_performingVerificationFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_lastOperationTime:");
    sb.append(this._lastOperationTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_varValueBeforeControl:");
    sb.append(this._varValueBeforeControl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_powerFactorValue:");
    sb.append(this._powerFactorValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_estimatedPowerFactorValue:");
    sb.append(this._estimatedPowerFactorValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentVarPointQuality:");
    sb.append(this._currentVarPointQuality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_waiveControlFlag:");
    sb.append(this._waiveControlFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_controlUnits:");
    if (this._strategy_controlUnits == null) {
      sb.append("null");
    } else {
      sb.append(this._strategy_controlUnits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_decimalPlaces:");
    sb.append(this._decimalPlaces);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_peakTimeFlag:");
    sb.append(this._peakTimeFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_peakLag:");
    sb.append(this._strategy_peakLag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_offPeakLag:");
    sb.append(this._strategy_offPeakLag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_PeakLead:");
    sb.append(this._strategy_PeakLead);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_OffPeakLead:");
    sb.append(this._strategy_OffPeakLead);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentVoltLoadPointId:");
    sb.append(this._currentVoltLoadPointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentVoltLoadPointValue:");
    sb.append(this._currentVoltLoadPointValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentWattPointQuality:");
    sb.append(this._currentWattPointQuality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_currentVoltPointQuality:");
    sb.append(this._currentVoltPointQuality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_targetVarValue:");
    sb.append(this._targetVarValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_solution:");
    if (this._solution == null) {
      sb.append("null");
    } else {
      sb.append(this._solution);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_ovUvDisabledFlag:");
    sb.append(this._ovUvDisabledFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_peakPFSetPoint:");
    sb.append(this._strategy_peakPFSetPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_offPeakPFSetPoint:");
    sb.append(this._strategy_offPeakPFSetPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_strategy_controlMethod:");
    if (this._strategy_controlMethod == null) {
      sb.append("null");
    } else {
      sb.append(this._strategy_controlMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_phaseAValue:");
    sb.append(this._phaseAValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_phaseBValue:");
    sb.append(this._phaseBValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_phaseCValue:");
    sb.append(this._phaseCValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_likeDayControlFlag:");
    sb.append(this._likeDayControlFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_usePhaseData:");
    sb.append(this._usePhaseData);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_originalParentId:");
    sb.append(this._originalParentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_ccCapbanks:");
    if (this._ccCapbanks == null) {
      sb.append("null");
    } else {
      sb.append(this._ccCapbanks);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_parentId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_parentId' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_maxDailyOperation()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_maxDailyOperation' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_maxOperationDisableFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_maxOperationDisableFlag' is unset! Struct:" + toString());
    }

    if (!isSet_currentVarLoadPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentVarLoadPointId' is unset! Struct:" + toString());
    }

    if (!isSet_currentVarLoadPointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentVarLoadPointValue' is unset! Struct:" + toString());
    }

    if (!isSet_currentWattLoadPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentWattLoadPointId' is unset! Struct:" + toString());
    }

    if (!isSet_currentWattLoadPointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentWattLoadPointValue' is unset! Struct:" + toString());
    }

    if (!isSet_mapLocationId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_mapLocationId' is unset! Struct:" + toString());
    }

    if (!isSet_displayOrder()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_displayOrder' is unset! Struct:" + toString());
    }

    if (!isSet_newPointDataReceivedFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_newPointDataReceivedFlag' is unset! Struct:" + toString());
    }

    if (!isSet_lastCurrentVarPointUpdateTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastCurrentVarPointUpdateTime' is unset! Struct:" + toString());
    }

    if (!isSet_estimatedVarLoadPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_estimatedVarLoadPointId' is unset! Struct:" + toString());
    }

    if (!isSet_estimatedVarLoadPointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_estimatedVarLoadPointValue' is unset! Struct:" + toString());
    }

    if (!isSet_dailyOperationsAnalogPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_dailyOperationsAnalogPointId' is unset! Struct:" + toString());
    }

    if (!isSet_powerFactorPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_powerFactorPointId' is unset! Struct:" + toString());
    }

    if (!isSet_estimatedPowerFactorPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_estimatedPowerFactorPointId' is unset! Struct:" + toString());
    }

    if (!isSet_currentDailyOperations()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentDailyOperations' is unset! Struct:" + toString());
    }

    if (!isSet_recentlyControlledFlag_or_performingVerificationFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_recentlyControlledFlag_or_performingVerificationFlag' is unset! Struct:" + toString());
    }

    if (!isSet_lastOperationTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_lastOperationTime' is unset! Struct:" + toString());
    }

    if (!isSet_varValueBeforeControl()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_varValueBeforeControl' is unset! Struct:" + toString());
    }

    if (!isSet_powerFactorValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_powerFactorValue' is unset! Struct:" + toString());
    }

    if (!isSet_estimatedPowerFactorValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_estimatedPowerFactorValue' is unset! Struct:" + toString());
    }

    if (!isSet_currentVarPointQuality()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentVarPointQuality' is unset! Struct:" + toString());
    }

    if (!isSet_waiveControlFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_waiveControlFlag' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_controlUnits()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_controlUnits' is unset! Struct:" + toString());
    }

    if (!isSet_decimalPlaces()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_decimalPlaces' is unset! Struct:" + toString());
    }

    if (!isSet_peakTimeFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_peakTimeFlag' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_peakLag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_peakLag' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_offPeakLag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_offPeakLag' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_PeakLead()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_PeakLead' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_OffPeakLead()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_OffPeakLead' is unset! Struct:" + toString());
    }

    if (!isSet_currentVoltLoadPointId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentVoltLoadPointId' is unset! Struct:" + toString());
    }

    if (!isSet_currentVoltLoadPointValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentVoltLoadPointValue' is unset! Struct:" + toString());
    }

    if (!isSet_currentWattPointQuality()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentWattPointQuality' is unset! Struct:" + toString());
    }

    if (!isSet_currentVoltPointQuality()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_currentVoltPointQuality' is unset! Struct:" + toString());
    }

    if (!isSet_targetVarValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_targetVarValue' is unset! Struct:" + toString());
    }

    if (!isSet_solution()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_solution' is unset! Struct:" + toString());
    }

    if (!isSet_ovUvDisabledFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_ovUvDisabledFlag' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_peakPFSetPoint()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_peakPFSetPoint' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_offPeakPFSetPoint()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_offPeakPFSetPoint' is unset! Struct:" + toString());
    }

    if (!isSet_strategy_controlMethod()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_strategy_controlMethod' is unset! Struct:" + toString());
    }

    if (!isSet_phaseAValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_phaseAValue' is unset! Struct:" + toString());
    }

    if (!isSet_phaseBValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_phaseBValue' is unset! Struct:" + toString());
    }

    if (!isSet_phaseCValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_phaseCValue' is unset! Struct:" + toString());
    }

    if (!isSet_likeDayControlFlag()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_likeDayControlFlag' is unset! Struct:" + toString());
    }

    if (!isSet_usePhaseData()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_usePhaseData' is unset! Struct:" + toString());
    }

    if (!isSet_originalParentId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_originalParentId' is unset! Struct:" + toString());
    }

    if (!isSet_ccCapbanks()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_ccCapbanks' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CCFeederStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CCFeederStandardScheme getScheme() {
      return new CCFeederStandardScheme();
    }
  }

  private static class CCFeederStandardScheme extends org.apache.thrift.scheme.StandardScheme<CCFeeder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CCFeeder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.CCPao();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._parentId = iprot.readI32();
              struct.set_parentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _STRATEGY_MAX_DAILY_OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._strategy_maxDailyOperation = iprot.readI32();
              struct.set_strategy_maxDailyOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _STRATEGY_MAX_OPERATION_DISABLE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._strategy_maxOperationDisableFlag = iprot.readBool();
              struct.set_strategy_maxOperationDisableFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _CURRENT_VAR_LOAD_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentVarLoadPointId = iprot.readI32();
              struct.set_currentVarLoadPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _CURRENT_VAR_LOAD_POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._currentVarLoadPointValue = iprot.readDouble();
              struct.set_currentVarLoadPointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _CURRENT_WATT_LOAD_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentWattLoadPointId = iprot.readI32();
              struct.set_currentWattLoadPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _CURRENT_WATT_LOAD_POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._currentWattLoadPointValue = iprot.readDouble();
              struct.set_currentWattLoadPointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _MAP_LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._mapLocationId = iprot.readString();
              struct.set_mapLocationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _DISPLAY_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._displayOrder = iprot.readDouble();
              struct.set_displayOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _NEW_POINT_DATA_RECEIVED_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._newPointDataReceivedFlag = iprot.readBool();
              struct.set_newPointDataReceivedFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _LAST_CURRENT_VAR_POINT_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastCurrentVarPointUpdateTime = iprot.readI64();
              struct.set_lastCurrentVarPointUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _ESTIMATED_VAR_LOAD_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._estimatedVarLoadPointId = iprot.readI32();
              struct.set_estimatedVarLoadPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // _ESTIMATED_VAR_LOAD_POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._estimatedVarLoadPointValue = iprot.readDouble();
              struct.set_estimatedVarLoadPointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // _DAILY_OPERATIONS_ANALOG_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._dailyOperationsAnalogPointId = iprot.readI32();
              struct.set_dailyOperationsAnalogPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _POWER_FACTOR_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._powerFactorPointId = iprot.readI32();
              struct.set_powerFactorPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // _ESTIMATED_POWER_FACTOR_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._estimatedPowerFactorPointId = iprot.readI32();
              struct.set_estimatedPowerFactorPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // _CURRENT_DAILY_OPERATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentDailyOperations = iprot.readI32();
              struct.set_currentDailyOperationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // _RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._recentlyControlledFlag_or_performingVerificationFlag = iprot.readBool();
              struct.set_recentlyControlledFlag_or_performingVerificationFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // _LAST_OPERATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._lastOperationTime = iprot.readI64();
              struct.set_lastOperationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // _VAR_VALUE_BEFORE_CONTROL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._varValueBeforeControl = iprot.readDouble();
              struct.set_varValueBeforeControlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // _POWER_FACTOR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._powerFactorValue = iprot.readDouble();
              struct.set_powerFactorValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // _ESTIMATED_POWER_FACTOR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._estimatedPowerFactorValue = iprot.readDouble();
              struct.set_estimatedPowerFactorValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // _CURRENT_VAR_POINT_QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentVarPointQuality = iprot.readI32();
              struct.set_currentVarPointQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // _WAIVE_CONTROL_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._waiveControlFlag = iprot.readBool();
              struct.set_waiveControlFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // _STRATEGY_CONTROL_UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._strategy_controlUnits = iprot.readString();
              struct.set_strategy_controlUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // _DECIMAL_PLACES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._decimalPlaces = iprot.readI32();
              struct.set_decimalPlacesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // _PEAK_TIME_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._peakTimeFlag = iprot.readBool();
              struct.set_peakTimeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // _STRATEGY_PEAK_LAG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._strategy_peakLag = iprot.readDouble();
              struct.set_strategy_peakLagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // _STRATEGY_OFF_PEAK_LAG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._strategy_offPeakLag = iprot.readDouble();
              struct.set_strategy_offPeakLagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // _STRATEGY__PEAK_LEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._strategy_PeakLead = iprot.readDouble();
              struct.set_strategy_PeakLeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // _STRATEGY__OFF_PEAK_LEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._strategy_OffPeakLead = iprot.readDouble();
              struct.set_strategy_OffPeakLeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // _CURRENT_VOLT_LOAD_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentVoltLoadPointId = iprot.readI32();
              struct.set_currentVoltLoadPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // _CURRENT_VOLT_LOAD_POINT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._currentVoltLoadPointValue = iprot.readDouble();
              struct.set_currentVoltLoadPointValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // _CURRENT_WATT_POINT_QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentWattPointQuality = iprot.readI32();
              struct.set_currentWattPointQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // _CURRENT_VOLT_POINT_QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._currentVoltPointQuality = iprot.readI32();
              struct.set_currentVoltPointQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // _TARGET_VAR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._targetVarValue = iprot.readDouble();
              struct.set_targetVarValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // _SOLUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._solution = iprot.readString();
              struct.set_solutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // _OV_UV_DISABLED_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._ovUvDisabledFlag = iprot.readBool();
              struct.set_ovUvDisabledFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // _STRATEGY_PEAK_PFSET_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._strategy_peakPFSetPoint = iprot.readDouble();
              struct.set_strategy_peakPFSetPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // _STRATEGY_OFF_PEAK_PFSET_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._strategy_offPeakPFSetPoint = iprot.readDouble();
              struct.set_strategy_offPeakPFSetPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // _STRATEGY_CONTROL_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._strategy_controlMethod = iprot.readString();
              struct.set_strategy_controlMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // _PHASE_AVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._phaseAValue = iprot.readDouble();
              struct.set_phaseAValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // _PHASE_BVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._phaseBValue = iprot.readDouble();
              struct.set_phaseBValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // _PHASE_CVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._phaseCValue = iprot.readDouble();
              struct.set_phaseCValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // _LIKE_DAY_CONTROL_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._likeDayControlFlag = iprot.readBool();
              struct.set_likeDayControlFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // _USE_PHASE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._usePhaseData = iprot.readBool();
              struct.set_usePhaseDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // _ORIGINAL_PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._originalParentId = iprot.readI32();
              struct.set_originalParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // _CC_CAPBANKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._ccCapbanks = new java.util.ArrayList<CCCapBank>(_list0.size);
                @org.apache.thrift.annotation.Nullable CCCapBank _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new CCCapBank();
                  _elem1.read(iprot);
                  struct._ccCapbanks.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.set_ccCapbanksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CCFeeder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct._parentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STRATEGY_MAX_DAILY_OPERATION_FIELD_DESC);
      oprot.writeI32(struct._strategy_maxDailyOperation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STRATEGY_MAX_OPERATION_DISABLE_FLAG_FIELD_DESC);
      oprot.writeBool(struct._strategy_maxOperationDisableFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_VAR_LOAD_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._currentVarLoadPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_VAR_LOAD_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._currentVarLoadPointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_WATT_LOAD_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._currentWattLoadPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_WATT_LOAD_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._currentWattLoadPointValue);
      oprot.writeFieldEnd();
      if (struct._mapLocationId != null) {
        oprot.writeFieldBegin(_MAP_LOCATION_ID_FIELD_DESC);
        oprot.writeString(struct._mapLocationId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_DISPLAY_ORDER_FIELD_DESC);
      oprot.writeDouble(struct._displayOrder);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_NEW_POINT_DATA_RECEIVED_FLAG_FIELD_DESC);
      oprot.writeBool(struct._newPointDataReceivedFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_CURRENT_VAR_POINT_UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct._lastCurrentVarPointUpdateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ESTIMATED_VAR_LOAD_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._estimatedVarLoadPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ESTIMATED_VAR_LOAD_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._estimatedVarLoadPointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DAILY_OPERATIONS_ANALOG_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._dailyOperationsAnalogPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_POWER_FACTOR_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._powerFactorPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ESTIMATED_POWER_FACTOR_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._estimatedPowerFactorPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_DAILY_OPERATIONS_FIELD_DESC);
      oprot.writeI32(struct._currentDailyOperations);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_RECENTLY_CONTROLLED_FLAG_OR_PERFORMING_VERIFICATION_FLAG_FIELD_DESC);
      oprot.writeBool(struct._recentlyControlledFlag_or_performingVerificationFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LAST_OPERATION_TIME_FIELD_DESC);
      oprot.writeI64(struct._lastOperationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_VAR_VALUE_BEFORE_CONTROL_FIELD_DESC);
      oprot.writeDouble(struct._varValueBeforeControl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_POWER_FACTOR_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._powerFactorValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ESTIMATED_POWER_FACTOR_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._estimatedPowerFactorValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_VAR_POINT_QUALITY_FIELD_DESC);
      oprot.writeI32(struct._currentVarPointQuality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_WAIVE_CONTROL_FLAG_FIELD_DESC);
      oprot.writeBool(struct._waiveControlFlag);
      oprot.writeFieldEnd();
      if (struct._strategy_controlUnits != null) {
        oprot.writeFieldBegin(_STRATEGY_CONTROL_UNITS_FIELD_DESC);
        oprot.writeString(struct._strategy_controlUnits);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_DECIMAL_PLACES_FIELD_DESC);
      oprot.writeI32(struct._decimalPlaces);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PEAK_TIME_FLAG_FIELD_DESC);
      oprot.writeBool(struct._peakTimeFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STRATEGY_PEAK_LAG_FIELD_DESC);
      oprot.writeDouble(struct._strategy_peakLag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STRATEGY_OFF_PEAK_LAG_FIELD_DESC);
      oprot.writeDouble(struct._strategy_offPeakLag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STRATEGY__PEAK_LEAD_FIELD_DESC);
      oprot.writeDouble(struct._strategy_PeakLead);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STRATEGY__OFF_PEAK_LEAD_FIELD_DESC);
      oprot.writeDouble(struct._strategy_OffPeakLead);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_VOLT_LOAD_POINT_ID_FIELD_DESC);
      oprot.writeI32(struct._currentVoltLoadPointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_VOLT_LOAD_POINT_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._currentVoltLoadPointValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_WATT_POINT_QUALITY_FIELD_DESC);
      oprot.writeI32(struct._currentWattPointQuality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_CURRENT_VOLT_POINT_QUALITY_FIELD_DESC);
      oprot.writeI32(struct._currentVoltPointQuality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_TARGET_VAR_VALUE_FIELD_DESC);
      oprot.writeDouble(struct._targetVarValue);
      oprot.writeFieldEnd();
      if (struct._solution != null) {
        oprot.writeFieldBegin(_SOLUTION_FIELD_DESC);
        oprot.writeString(struct._solution);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_OV_UV_DISABLED_FLAG_FIELD_DESC);
      oprot.writeBool(struct._ovUvDisabledFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STRATEGY_PEAK_PFSET_POINT_FIELD_DESC);
      oprot.writeDouble(struct._strategy_peakPFSetPoint);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STRATEGY_OFF_PEAK_PFSET_POINT_FIELD_DESC);
      oprot.writeDouble(struct._strategy_offPeakPFSetPoint);
      oprot.writeFieldEnd();
      if (struct._strategy_controlMethod != null) {
        oprot.writeFieldBegin(_STRATEGY_CONTROL_METHOD_FIELD_DESC);
        oprot.writeString(struct._strategy_controlMethod);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_PHASE_AVALUE_FIELD_DESC);
      oprot.writeDouble(struct._phaseAValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PHASE_BVALUE_FIELD_DESC);
      oprot.writeDouble(struct._phaseBValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_PHASE_CVALUE_FIELD_DESC);
      oprot.writeDouble(struct._phaseCValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_LIKE_DAY_CONTROL_FLAG_FIELD_DESC);
      oprot.writeBool(struct._likeDayControlFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_USE_PHASE_DATA_FIELD_DESC);
      oprot.writeBool(struct._usePhaseData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_ORIGINAL_PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct._originalParentId);
      oprot.writeFieldEnd();
      if (struct._ccCapbanks != null) {
        oprot.writeFieldBegin(_CC_CAPBANKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct._ccCapbanks.size()));
          for (CCCapBank _iter3 : struct._ccCapbanks)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CCFeederTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CCFeederTupleScheme getScheme() {
      return new CCFeederTupleScheme();
    }
  }

  private static class CCFeederTupleScheme extends org.apache.thrift.scheme.TupleScheme<CCFeeder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CCFeeder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._parentId);
      oprot.writeI32(struct._strategy_maxDailyOperation);
      oprot.writeBool(struct._strategy_maxOperationDisableFlag);
      oprot.writeI32(struct._currentVarLoadPointId);
      oprot.writeDouble(struct._currentVarLoadPointValue);
      oprot.writeI32(struct._currentWattLoadPointId);
      oprot.writeDouble(struct._currentWattLoadPointValue);
      oprot.writeString(struct._mapLocationId);
      oprot.writeDouble(struct._displayOrder);
      oprot.writeBool(struct._newPointDataReceivedFlag);
      oprot.writeI64(struct._lastCurrentVarPointUpdateTime);
      oprot.writeI32(struct._estimatedVarLoadPointId);
      oprot.writeDouble(struct._estimatedVarLoadPointValue);
      oprot.writeI32(struct._dailyOperationsAnalogPointId);
      oprot.writeI32(struct._powerFactorPointId);
      oprot.writeI32(struct._estimatedPowerFactorPointId);
      oprot.writeI32(struct._currentDailyOperations);
      oprot.writeBool(struct._recentlyControlledFlag_or_performingVerificationFlag);
      oprot.writeI64(struct._lastOperationTime);
      oprot.writeDouble(struct._varValueBeforeControl);
      oprot.writeDouble(struct._powerFactorValue);
      oprot.writeDouble(struct._estimatedPowerFactorValue);
      oprot.writeI32(struct._currentVarPointQuality);
      oprot.writeBool(struct._waiveControlFlag);
      oprot.writeString(struct._strategy_controlUnits);
      oprot.writeI32(struct._decimalPlaces);
      oprot.writeBool(struct._peakTimeFlag);
      oprot.writeDouble(struct._strategy_peakLag);
      oprot.writeDouble(struct._strategy_offPeakLag);
      oprot.writeDouble(struct._strategy_PeakLead);
      oprot.writeDouble(struct._strategy_OffPeakLead);
      oprot.writeI32(struct._currentVoltLoadPointId);
      oprot.writeDouble(struct._currentVoltLoadPointValue);
      oprot.writeI32(struct._currentWattPointQuality);
      oprot.writeI32(struct._currentVoltPointQuality);
      oprot.writeDouble(struct._targetVarValue);
      oprot.writeString(struct._solution);
      oprot.writeBool(struct._ovUvDisabledFlag);
      oprot.writeDouble(struct._strategy_peakPFSetPoint);
      oprot.writeDouble(struct._strategy_offPeakPFSetPoint);
      oprot.writeString(struct._strategy_controlMethod);
      oprot.writeDouble(struct._phaseAValue);
      oprot.writeDouble(struct._phaseBValue);
      oprot.writeDouble(struct._phaseCValue);
      oprot.writeBool(struct._likeDayControlFlag);
      oprot.writeBool(struct._usePhaseData);
      oprot.writeI32(struct._originalParentId);
      {
        oprot.writeI32(struct._ccCapbanks.size());
        for (CCCapBank _iter4 : struct._ccCapbanks)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CCFeeder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.CCPao();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._parentId = iprot.readI32();
      struct.set_parentIdIsSet(true);
      struct._strategy_maxDailyOperation = iprot.readI32();
      struct.set_strategy_maxDailyOperationIsSet(true);
      struct._strategy_maxOperationDisableFlag = iprot.readBool();
      struct.set_strategy_maxOperationDisableFlagIsSet(true);
      struct._currentVarLoadPointId = iprot.readI32();
      struct.set_currentVarLoadPointIdIsSet(true);
      struct._currentVarLoadPointValue = iprot.readDouble();
      struct.set_currentVarLoadPointValueIsSet(true);
      struct._currentWattLoadPointId = iprot.readI32();
      struct.set_currentWattLoadPointIdIsSet(true);
      struct._currentWattLoadPointValue = iprot.readDouble();
      struct.set_currentWattLoadPointValueIsSet(true);
      struct._mapLocationId = iprot.readString();
      struct.set_mapLocationIdIsSet(true);
      struct._displayOrder = iprot.readDouble();
      struct.set_displayOrderIsSet(true);
      struct._newPointDataReceivedFlag = iprot.readBool();
      struct.set_newPointDataReceivedFlagIsSet(true);
      struct._lastCurrentVarPointUpdateTime = iprot.readI64();
      struct.set_lastCurrentVarPointUpdateTimeIsSet(true);
      struct._estimatedVarLoadPointId = iprot.readI32();
      struct.set_estimatedVarLoadPointIdIsSet(true);
      struct._estimatedVarLoadPointValue = iprot.readDouble();
      struct.set_estimatedVarLoadPointValueIsSet(true);
      struct._dailyOperationsAnalogPointId = iprot.readI32();
      struct.set_dailyOperationsAnalogPointIdIsSet(true);
      struct._powerFactorPointId = iprot.readI32();
      struct.set_powerFactorPointIdIsSet(true);
      struct._estimatedPowerFactorPointId = iprot.readI32();
      struct.set_estimatedPowerFactorPointIdIsSet(true);
      struct._currentDailyOperations = iprot.readI32();
      struct.set_currentDailyOperationsIsSet(true);
      struct._recentlyControlledFlag_or_performingVerificationFlag = iprot.readBool();
      struct.set_recentlyControlledFlag_or_performingVerificationFlagIsSet(true);
      struct._lastOperationTime = iprot.readI64();
      struct.set_lastOperationTimeIsSet(true);
      struct._varValueBeforeControl = iprot.readDouble();
      struct.set_varValueBeforeControlIsSet(true);
      struct._powerFactorValue = iprot.readDouble();
      struct.set_powerFactorValueIsSet(true);
      struct._estimatedPowerFactorValue = iprot.readDouble();
      struct.set_estimatedPowerFactorValueIsSet(true);
      struct._currentVarPointQuality = iprot.readI32();
      struct.set_currentVarPointQualityIsSet(true);
      struct._waiveControlFlag = iprot.readBool();
      struct.set_waiveControlFlagIsSet(true);
      struct._strategy_controlUnits = iprot.readString();
      struct.set_strategy_controlUnitsIsSet(true);
      struct._decimalPlaces = iprot.readI32();
      struct.set_decimalPlacesIsSet(true);
      struct._peakTimeFlag = iprot.readBool();
      struct.set_peakTimeFlagIsSet(true);
      struct._strategy_peakLag = iprot.readDouble();
      struct.set_strategy_peakLagIsSet(true);
      struct._strategy_offPeakLag = iprot.readDouble();
      struct.set_strategy_offPeakLagIsSet(true);
      struct._strategy_PeakLead = iprot.readDouble();
      struct.set_strategy_PeakLeadIsSet(true);
      struct._strategy_OffPeakLead = iprot.readDouble();
      struct.set_strategy_OffPeakLeadIsSet(true);
      struct._currentVoltLoadPointId = iprot.readI32();
      struct.set_currentVoltLoadPointIdIsSet(true);
      struct._currentVoltLoadPointValue = iprot.readDouble();
      struct.set_currentVoltLoadPointValueIsSet(true);
      struct._currentWattPointQuality = iprot.readI32();
      struct.set_currentWattPointQualityIsSet(true);
      struct._currentVoltPointQuality = iprot.readI32();
      struct.set_currentVoltPointQualityIsSet(true);
      struct._targetVarValue = iprot.readDouble();
      struct.set_targetVarValueIsSet(true);
      struct._solution = iprot.readString();
      struct.set_solutionIsSet(true);
      struct._ovUvDisabledFlag = iprot.readBool();
      struct.set_ovUvDisabledFlagIsSet(true);
      struct._strategy_peakPFSetPoint = iprot.readDouble();
      struct.set_strategy_peakPFSetPointIsSet(true);
      struct._strategy_offPeakPFSetPoint = iprot.readDouble();
      struct.set_strategy_offPeakPFSetPointIsSet(true);
      struct._strategy_controlMethod = iprot.readString();
      struct.set_strategy_controlMethodIsSet(true);
      struct._phaseAValue = iprot.readDouble();
      struct.set_phaseAValueIsSet(true);
      struct._phaseBValue = iprot.readDouble();
      struct.set_phaseBValueIsSet(true);
      struct._phaseCValue = iprot.readDouble();
      struct.set_phaseCValueIsSet(true);
      struct._likeDayControlFlag = iprot.readBool();
      struct.set_likeDayControlFlagIsSet(true);
      struct._usePhaseData = iprot.readBool();
      struct.set_usePhaseDataIsSet(true);
      struct._originalParentId = iprot.readI32();
      struct.set_originalParentIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct._ccCapbanks = new java.util.ArrayList<CCCapBank>(_list5.size);
        @org.apache.thrift.annotation.Nullable CCCapBank _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new CCCapBank();
          _elem6.read(iprot);
          struct._ccCapbanks.add(_elem6);
        }
      }
      struct.set_ccCapbanksIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


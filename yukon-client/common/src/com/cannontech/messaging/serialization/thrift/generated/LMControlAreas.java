/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LMControlAreas implements org.apache.thrift.TBase<LMControlAreas, LMControlAreas._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMControlAreas");

  private static final org.apache.thrift.protocol.TField _BASE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_baseMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField _MSG_INFO_BIT_MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("_msgInfoBitMask", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField _CONTROL_AREAS_FIELD_DESC = new org.apache.thrift.protocol.TField("_controlAreas", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LMControlAreasStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LMControlAreasTupleSchemeFactory());
  }

  private com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage; // required
  private int _msgInfoBitMask; // required
  private List<LMControlAreaItem> _controlAreas; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _BASE_MESSAGE((short)1, "_baseMessage"),
    _MSG_INFO_BIT_MASK((short)2, "_msgInfoBitMask"),
    _CONTROL_AREAS((short)3, "_controlAreas");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _BASE_MESSAGE
          return _BASE_MESSAGE;
        case 2: // _MSG_INFO_BIT_MASK
          return _MSG_INFO_BIT_MASK;
        case 3: // _CONTROL_AREAS
          return _CONTROL_AREAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___MSGINFOBITMASK_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._BASE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_baseMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cannontech.messaging.serialization.thrift.generated.LMMessage.class)));
    tmpMap.put(_Fields._MSG_INFO_BIT_MASK, new org.apache.thrift.meta_data.FieldMetaData("_msgInfoBitMask", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._CONTROL_AREAS, new org.apache.thrift.meta_data.FieldMetaData("_controlAreas", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LMControlAreaItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMControlAreas.class, metaDataMap);
  }

  public LMControlAreas() {
  }

  public LMControlAreas(
    com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage,
    int _msgInfoBitMask,
    List<LMControlAreaItem> _controlAreas)
  {
    this();
    this._baseMessage = _baseMessage;
    this._msgInfoBitMask = _msgInfoBitMask;
    set_msgInfoBitMaskIsSet(true);
    this._controlAreas = _controlAreas;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMControlAreas(LMControlAreas other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_baseMessage()) {
      this._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage(other._baseMessage);
    }
    this._msgInfoBitMask = other._msgInfoBitMask;
    if (other.isSet_controlAreas()) {
      List<LMControlAreaItem> __this___controlAreas = new ArrayList<LMControlAreaItem>();
      for (LMControlAreaItem other_element : other._controlAreas) {
        __this___controlAreas.add(new LMControlAreaItem(other_element));
      }
      this._controlAreas = __this___controlAreas;
    }
  }

  public LMControlAreas deepCopy() {
    return new LMControlAreas(this);
  }

  @Override
  public void clear() {
    this._baseMessage = null;
    set_msgInfoBitMaskIsSet(false);
    this._msgInfoBitMask = 0;
    this._controlAreas = null;
  }

  public com.cannontech.messaging.serialization.thrift.generated.LMMessage get_baseMessage() {
    return this._baseMessage;
  }

  public void set_baseMessage(com.cannontech.messaging.serialization.thrift.generated.LMMessage _baseMessage) {
    this._baseMessage = _baseMessage;
  }

  public void unset_baseMessage() {
    this._baseMessage = null;
  }

  /** Returns true if field _baseMessage is set (has been assigned a value) and false otherwise */
  public boolean isSet_baseMessage() {
    return this._baseMessage != null;
  }

  public void set_baseMessageIsSet(boolean value) {
    if (!value) {
      this._baseMessage = null;
    }
  }

  public int get_msgInfoBitMask() {
    return this._msgInfoBitMask;
  }

  public void set_msgInfoBitMask(int _msgInfoBitMask) {
    this._msgInfoBitMask = _msgInfoBitMask;
    set_msgInfoBitMaskIsSet(true);
  }

  public void unset_msgInfoBitMask() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___MSGINFOBITMASK_ISSET_ID);
  }

  /** Returns true if field _msgInfoBitMask is set (has been assigned a value) and false otherwise */
  public boolean isSet_msgInfoBitMask() {
    return EncodingUtils.testBit(__isset_bitfield, ___MSGINFOBITMASK_ISSET_ID);
  }

  public void set_msgInfoBitMaskIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___MSGINFOBITMASK_ISSET_ID, value);
  }

  public int get_controlAreasSize() {
    return (this._controlAreas == null) ? 0 : this._controlAreas.size();
  }

  public java.util.Iterator<LMControlAreaItem> get_controlAreasIterator() {
    return (this._controlAreas == null) ? null : this._controlAreas.iterator();
  }

  public void addTo_controlAreas(LMControlAreaItem elem) {
    if (this._controlAreas == null) {
      this._controlAreas = new ArrayList<LMControlAreaItem>();
    }
    this._controlAreas.add(elem);
  }

  public List<LMControlAreaItem> get_controlAreas() {
    return this._controlAreas;
  }

  public void set_controlAreas(List<LMControlAreaItem> _controlAreas) {
    this._controlAreas = _controlAreas;
  }

  public void unset_controlAreas() {
    this._controlAreas = null;
  }

  /** Returns true if field _controlAreas is set (has been assigned a value) and false otherwise */
  public boolean isSet_controlAreas() {
    return this._controlAreas != null;
  }

  public void set_controlAreasIsSet(boolean value) {
    if (!value) {
      this._controlAreas = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _BASE_MESSAGE:
      if (value == null) {
        unset_baseMessage();
      } else {
        set_baseMessage((com.cannontech.messaging.serialization.thrift.generated.LMMessage)value);
      }
      break;

    case _MSG_INFO_BIT_MASK:
      if (value == null) {
        unset_msgInfoBitMask();
      } else {
        set_msgInfoBitMask((Integer)value);
      }
      break;

    case _CONTROL_AREAS:
      if (value == null) {
        unset_controlAreas();
      } else {
        set_controlAreas((List<LMControlAreaItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _BASE_MESSAGE:
      return get_baseMessage();

    case _MSG_INFO_BIT_MASK:
      return Integer.valueOf(get_msgInfoBitMask());

    case _CONTROL_AREAS:
      return get_controlAreas();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _BASE_MESSAGE:
      return isSet_baseMessage();
    case _MSG_INFO_BIT_MASK:
      return isSet_msgInfoBitMask();
    case _CONTROL_AREAS:
      return isSet_controlAreas();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LMControlAreas)
      return this.equals((LMControlAreas)that);
    return false;
  }

  public boolean equals(LMControlAreas that) {
    if (that == null)
      return false;

    boolean this_present__baseMessage = true && this.isSet_baseMessage();
    boolean that_present__baseMessage = true && that.isSet_baseMessage();
    if (this_present__baseMessage || that_present__baseMessage) {
      if (!(this_present__baseMessage && that_present__baseMessage))
        return false;
      if (!this._baseMessage.equals(that._baseMessage))
        return false;
    }

    boolean this_present__msgInfoBitMask = true;
    boolean that_present__msgInfoBitMask = true;
    if (this_present__msgInfoBitMask || that_present__msgInfoBitMask) {
      if (!(this_present__msgInfoBitMask && that_present__msgInfoBitMask))
        return false;
      if (this._msgInfoBitMask != that._msgInfoBitMask)
        return false;
    }

    boolean this_present__controlAreas = true && this.isSet_controlAreas();
    boolean that_present__controlAreas = true && that.isSet_controlAreas();
    if (this_present__controlAreas || that_present__controlAreas) {
      if (!(this_present__controlAreas && that_present__controlAreas))
        return false;
      if (!this._controlAreas.equals(that._controlAreas))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LMControlAreas other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LMControlAreas typedOther = (LMControlAreas)other;

    lastComparison = Boolean.valueOf(isSet_baseMessage()).compareTo(typedOther.isSet_baseMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_baseMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._baseMessage, typedOther._baseMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_msgInfoBitMask()).compareTo(typedOther.isSet_msgInfoBitMask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_msgInfoBitMask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._msgInfoBitMask, typedOther._msgInfoBitMask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_controlAreas()).compareTo(typedOther.isSet_controlAreas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_controlAreas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._controlAreas, typedOther._controlAreas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LMControlAreas(");
    boolean first = true;

    sb.append("_baseMessage:");
    if (this._baseMessage == null) {
      sb.append("null");
    } else {
      sb.append(this._baseMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_msgInfoBitMask:");
    sb.append(this._msgInfoBitMask);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_controlAreas:");
    if (this._controlAreas == null) {
      sb.append("null");
    } else {
      sb.append(this._controlAreas);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_baseMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_baseMessage' is unset! Struct:" + toString());
    }

    if (!isSet_msgInfoBitMask()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_msgInfoBitMask' is unset! Struct:" + toString());
    }

    if (!isSet_controlAreas()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_controlAreas' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (_baseMessage != null) {
      _baseMessage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMControlAreasStandardSchemeFactory implements SchemeFactory {
    public LMControlAreasStandardScheme getScheme() {
      return new LMControlAreasStandardScheme();
    }
  }

  private static class LMControlAreasStandardScheme extends StandardScheme<LMControlAreas> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMControlAreas struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _BASE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage();
              struct._baseMessage.read(iprot);
              struct.set_baseMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _MSG_INFO_BIT_MASK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._msgInfoBitMask = iprot.readI32();
              struct.set_msgInfoBitMaskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _CONTROL_AREAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct._controlAreas = new ArrayList<LMControlAreaItem>(_list112.size);
                for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                {
                  LMControlAreaItem _elem114; // required
                  _elem114 = new LMControlAreaItem();
                  _elem114.read(iprot);
                  struct._controlAreas.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.set_controlAreasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMControlAreas struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._baseMessage != null) {
        oprot.writeFieldBegin(_BASE_MESSAGE_FIELD_DESC);
        struct._baseMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_MSG_INFO_BIT_MASK_FIELD_DESC);
      oprot.writeI32(struct._msgInfoBitMask);
      oprot.writeFieldEnd();
      if (struct._controlAreas != null) {
        oprot.writeFieldBegin(_CONTROL_AREAS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct._controlAreas.size()));
          for (LMControlAreaItem _iter115 : struct._controlAreas)
          {
            _iter115.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMControlAreasTupleSchemeFactory implements SchemeFactory {
    public LMControlAreasTupleScheme getScheme() {
      return new LMControlAreasTupleScheme();
    }
  }

  private static class LMControlAreasTupleScheme extends TupleScheme<LMControlAreas> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMControlAreas struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct._baseMessage.write(oprot);
      oprot.writeI32(struct._msgInfoBitMask);
      {
        oprot.writeI32(struct._controlAreas.size());
        for (LMControlAreaItem _iter116 : struct._controlAreas)
        {
          _iter116.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMControlAreas struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._baseMessage = new com.cannontech.messaging.serialization.thrift.generated.LMMessage();
      struct._baseMessage.read(iprot);
      struct.set_baseMessageIsSet(true);
      struct._msgInfoBitMask = iprot.readI32();
      struct.set_msgInfoBitMaskIsSet(true);
      {
        org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct._controlAreas = new ArrayList<LMControlAreaItem>(_list117.size);
        for (int _i118 = 0; _i118 < _list117.size; ++_i118)
        {
          LMControlAreaItem _elem119; // required
          _elem119 = new LMControlAreaItem();
          _elem119.read(iprot);
          struct._controlAreas.add(_elem119);
        }
      }
      struct.set_controlAreasIsSet(true);
    }
  }

}


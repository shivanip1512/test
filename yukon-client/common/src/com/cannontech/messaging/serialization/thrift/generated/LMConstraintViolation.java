/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cannontech.messaging.serialization.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LMConstraintViolation implements org.apache.thrift.TBase<LMConstraintViolation, LMConstraintViolation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LMConstraintViolation");

  private static final org.apache.thrift.protocol.TField _ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("_errorCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField _DOUBLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("_doubleParams", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField _INTEGER_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("_integerParams", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField _STRING_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("_stringParams", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField _DATETIME_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("_datetimeParams", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LMConstraintViolationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LMConstraintViolationTupleSchemeFactory());
  }

  private int _errorCode; // required
  private List<Double> _doubleParams; // required
  private List<Integer> _integerParams; // required
  private List<String> _stringParams; // required
  private List<Long> _datetimeParams; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ERROR_CODE((short)1, "_errorCode"),
    _DOUBLE_PARAMS((short)2, "_doubleParams"),
    _INTEGER_PARAMS((short)3, "_integerParams"),
    _STRING_PARAMS((short)4, "_stringParams"),
    _DATETIME_PARAMS((short)5, "_datetimeParams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ERROR_CODE
          return _ERROR_CODE;
        case 2: // _DOUBLE_PARAMS
          return _DOUBLE_PARAMS;
        case 3: // _INTEGER_PARAMS
          return _INTEGER_PARAMS;
        case 4: // _STRING_PARAMS
          return _STRING_PARAMS;
        case 5: // _DATETIME_PARAMS
          return _DATETIME_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___ERRORCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("_errorCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._DOUBLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("_doubleParams", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields._INTEGER_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("_integerParams", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields._STRING_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("_stringParams", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields._DATETIME_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("_datetimeParams", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "Timestamp"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LMConstraintViolation.class, metaDataMap);
  }

  public LMConstraintViolation() {
  }

  public LMConstraintViolation(
    int _errorCode,
    List<Double> _doubleParams,
    List<Integer> _integerParams,
    List<String> _stringParams,
    List<Long> _datetimeParams)
  {
    this();
    this._errorCode = _errorCode;
    set_errorCodeIsSet(true);
    this._doubleParams = _doubleParams;
    this._integerParams = _integerParams;
    this._stringParams = _stringParams;
    this._datetimeParams = _datetimeParams;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LMConstraintViolation(LMConstraintViolation other) {
    __isset_bitfield = other.__isset_bitfield;
    this._errorCode = other._errorCode;
    if (other.isSet_doubleParams()) {
      List<Double> __this___doubleParams = new ArrayList<Double>();
      for (Double other_element : other._doubleParams) {
        __this___doubleParams.add(other_element);
      }
      this._doubleParams = __this___doubleParams;
    }
    if (other.isSet_integerParams()) {
      List<Integer> __this___integerParams = new ArrayList<Integer>();
      for (Integer other_element : other._integerParams) {
        __this___integerParams.add(other_element);
      }
      this._integerParams = __this___integerParams;
    }
    if (other.isSet_stringParams()) {
      List<String> __this___stringParams = new ArrayList<String>();
      for (String other_element : other._stringParams) {
        __this___stringParams.add(other_element);
      }
      this._stringParams = __this___stringParams;
    }
    if (other.isSet_datetimeParams()) {
      List<Long> __this___datetimeParams = new ArrayList<Long>();
      for (Long other_element : other._datetimeParams) {
        __this___datetimeParams.add(other_element);
      }
      this._datetimeParams = __this___datetimeParams;
    }
  }

  public LMConstraintViolation deepCopy() {
    return new LMConstraintViolation(this);
  }

  @Override
  public void clear() {
    set_errorCodeIsSet(false);
    this._errorCode = 0;
    this._doubleParams = null;
    this._integerParams = null;
    this._stringParams = null;
    this._datetimeParams = null;
  }

  public int get_errorCode() {
    return this._errorCode;
  }

  public void set_errorCode(int _errorCode) {
    this._errorCode = _errorCode;
    set_errorCodeIsSet(true);
  }

  public void unset_errorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___ERRORCODE_ISSET_ID);
  }

  /** Returns true if field _errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSet_errorCode() {
    return EncodingUtils.testBit(__isset_bitfield, ___ERRORCODE_ISSET_ID);
  }

  public void set_errorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___ERRORCODE_ISSET_ID, value);
  }

  public int get_doubleParamsSize() {
    return (this._doubleParams == null) ? 0 : this._doubleParams.size();
  }

  public java.util.Iterator<Double> get_doubleParamsIterator() {
    return (this._doubleParams == null) ? null : this._doubleParams.iterator();
  }

  public void addTo_doubleParams(double elem) {
    if (this._doubleParams == null) {
      this._doubleParams = new ArrayList<Double>();
    }
    this._doubleParams.add(elem);
  }

  public List<Double> get_doubleParams() {
    return this._doubleParams;
  }

  public void set_doubleParams(List<Double> _doubleParams) {
    this._doubleParams = _doubleParams;
  }

  public void unset_doubleParams() {
    this._doubleParams = null;
  }

  /** Returns true if field _doubleParams is set (has been assigned a value) and false otherwise */
  public boolean isSet_doubleParams() {
    return this._doubleParams != null;
  }

  public void set_doubleParamsIsSet(boolean value) {
    if (!value) {
      this._doubleParams = null;
    }
  }

  public int get_integerParamsSize() {
    return (this._integerParams == null) ? 0 : this._integerParams.size();
  }

  public java.util.Iterator<Integer> get_integerParamsIterator() {
    return (this._integerParams == null) ? null : this._integerParams.iterator();
  }

  public void addTo_integerParams(int elem) {
    if (this._integerParams == null) {
      this._integerParams = new ArrayList<Integer>();
    }
    this._integerParams.add(elem);
  }

  public List<Integer> get_integerParams() {
    return this._integerParams;
  }

  public void set_integerParams(List<Integer> _integerParams) {
    this._integerParams = _integerParams;
  }

  public void unset_integerParams() {
    this._integerParams = null;
  }

  /** Returns true if field _integerParams is set (has been assigned a value) and false otherwise */
  public boolean isSet_integerParams() {
    return this._integerParams != null;
  }

  public void set_integerParamsIsSet(boolean value) {
    if (!value) {
      this._integerParams = null;
    }
  }

  public int get_stringParamsSize() {
    return (this._stringParams == null) ? 0 : this._stringParams.size();
  }

  public java.util.Iterator<String> get_stringParamsIterator() {
    return (this._stringParams == null) ? null : this._stringParams.iterator();
  }

  public void addTo_stringParams(String elem) {
    if (this._stringParams == null) {
      this._stringParams = new ArrayList<String>();
    }
    this._stringParams.add(elem);
  }

  public List<String> get_stringParams() {
    return this._stringParams;
  }

  public void set_stringParams(List<String> _stringParams) {
    this._stringParams = _stringParams;
  }

  public void unset_stringParams() {
    this._stringParams = null;
  }

  /** Returns true if field _stringParams is set (has been assigned a value) and false otherwise */
  public boolean isSet_stringParams() {
    return this._stringParams != null;
  }

  public void set_stringParamsIsSet(boolean value) {
    if (!value) {
      this._stringParams = null;
    }
  }

  public int get_datetimeParamsSize() {
    return (this._datetimeParams == null) ? 0 : this._datetimeParams.size();
  }

  public java.util.Iterator<Long> get_datetimeParamsIterator() {
    return (this._datetimeParams == null) ? null : this._datetimeParams.iterator();
  }

  public void addTo_datetimeParams(long elem) {
    if (this._datetimeParams == null) {
      this._datetimeParams = new ArrayList<Long>();
    }
    this._datetimeParams.add(elem);
  }

  public List<Long> get_datetimeParams() {
    return this._datetimeParams;
  }

  public void set_datetimeParams(List<Long> _datetimeParams) {
    this._datetimeParams = _datetimeParams;
  }

  public void unset_datetimeParams() {
    this._datetimeParams = null;
  }

  /** Returns true if field _datetimeParams is set (has been assigned a value) and false otherwise */
  public boolean isSet_datetimeParams() {
    return this._datetimeParams != null;
  }

  public void set_datetimeParamsIsSet(boolean value) {
    if (!value) {
      this._datetimeParams = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ERROR_CODE:
      if (value == null) {
        unset_errorCode();
      } else {
        set_errorCode((Integer)value);
      }
      break;

    case _DOUBLE_PARAMS:
      if (value == null) {
        unset_doubleParams();
      } else {
        set_doubleParams((List<Double>)value);
      }
      break;

    case _INTEGER_PARAMS:
      if (value == null) {
        unset_integerParams();
      } else {
        set_integerParams((List<Integer>)value);
      }
      break;

    case _STRING_PARAMS:
      if (value == null) {
        unset_stringParams();
      } else {
        set_stringParams((List<String>)value);
      }
      break;

    case _DATETIME_PARAMS:
      if (value == null) {
        unset_datetimeParams();
      } else {
        set_datetimeParams((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ERROR_CODE:
      return Integer.valueOf(get_errorCode());

    case _DOUBLE_PARAMS:
      return get_doubleParams();

    case _INTEGER_PARAMS:
      return get_integerParams();

    case _STRING_PARAMS:
      return get_stringParams();

    case _DATETIME_PARAMS:
      return get_datetimeParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ERROR_CODE:
      return isSet_errorCode();
    case _DOUBLE_PARAMS:
      return isSet_doubleParams();
    case _INTEGER_PARAMS:
      return isSet_integerParams();
    case _STRING_PARAMS:
      return isSet_stringParams();
    case _DATETIME_PARAMS:
      return isSet_datetimeParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LMConstraintViolation)
      return this.equals((LMConstraintViolation)that);
    return false;
  }

  public boolean equals(LMConstraintViolation that) {
    if (that == null)
      return false;

    boolean this_present__errorCode = true;
    boolean that_present__errorCode = true;
    if (this_present__errorCode || that_present__errorCode) {
      if (!(this_present__errorCode && that_present__errorCode))
        return false;
      if (this._errorCode != that._errorCode)
        return false;
    }

    boolean this_present__doubleParams = true && this.isSet_doubleParams();
    boolean that_present__doubleParams = true && that.isSet_doubleParams();
    if (this_present__doubleParams || that_present__doubleParams) {
      if (!(this_present__doubleParams && that_present__doubleParams))
        return false;
      if (!this._doubleParams.equals(that._doubleParams))
        return false;
    }

    boolean this_present__integerParams = true && this.isSet_integerParams();
    boolean that_present__integerParams = true && that.isSet_integerParams();
    if (this_present__integerParams || that_present__integerParams) {
      if (!(this_present__integerParams && that_present__integerParams))
        return false;
      if (!this._integerParams.equals(that._integerParams))
        return false;
    }

    boolean this_present__stringParams = true && this.isSet_stringParams();
    boolean that_present__stringParams = true && that.isSet_stringParams();
    if (this_present__stringParams || that_present__stringParams) {
      if (!(this_present__stringParams && that_present__stringParams))
        return false;
      if (!this._stringParams.equals(that._stringParams))
        return false;
    }

    boolean this_present__datetimeParams = true && this.isSet_datetimeParams();
    boolean that_present__datetimeParams = true && that.isSet_datetimeParams();
    if (this_present__datetimeParams || that_present__datetimeParams) {
      if (!(this_present__datetimeParams && that_present__datetimeParams))
        return false;
      if (!this._datetimeParams.equals(that._datetimeParams))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LMConstraintViolation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LMConstraintViolation typedOther = (LMConstraintViolation)other;

    lastComparison = Boolean.valueOf(isSet_errorCode()).compareTo(typedOther.isSet_errorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_errorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._errorCode, typedOther._errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_doubleParams()).compareTo(typedOther.isSet_doubleParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_doubleParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._doubleParams, typedOther._doubleParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_integerParams()).compareTo(typedOther.isSet_integerParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_integerParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._integerParams, typedOther._integerParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_stringParams()).compareTo(typedOther.isSet_stringParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_stringParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._stringParams, typedOther._stringParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_datetimeParams()).compareTo(typedOther.isSet_datetimeParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_datetimeParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._datetimeParams, typedOther._datetimeParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LMConstraintViolation(");
    boolean first = true;

    sb.append("_errorCode:");
    sb.append(this._errorCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_doubleParams:");
    if (this._doubleParams == null) {
      sb.append("null");
    } else {
      sb.append(this._doubleParams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_integerParams:");
    if (this._integerParams == null) {
      sb.append("null");
    } else {
      sb.append(this._integerParams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_stringParams:");
    if (this._stringParams == null) {
      sb.append("null");
    } else {
      sb.append(this._stringParams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_datetimeParams:");
    if (this._datetimeParams == null) {
      sb.append("null");
    } else {
      sb.append(this._datetimeParams);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSet_errorCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_errorCode' is unset! Struct:" + toString());
    }

    if (!isSet_doubleParams()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_doubleParams' is unset! Struct:" + toString());
    }

    if (!isSet_integerParams()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_integerParams' is unset! Struct:" + toString());
    }

    if (!isSet_stringParams()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_stringParams' is unset! Struct:" + toString());
    }

    if (!isSet_datetimeParams()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_datetimeParams' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LMConstraintViolationStandardSchemeFactory implements SchemeFactory {
    public LMConstraintViolationStandardScheme getScheme() {
      return new LMConstraintViolationStandardScheme();
    }
  }

  private static class LMConstraintViolationStandardScheme extends StandardScheme<LMConstraintViolation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LMConstraintViolation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._errorCode = iprot.readI32();
              struct.set_errorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _DOUBLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._doubleParams = new ArrayList<Double>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  double _elem2; // required
                  _elem2 = iprot.readDouble();
                  struct._doubleParams.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.set_doubleParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _INTEGER_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct._integerParams = new ArrayList<Integer>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  int _elem5; // required
                  _elem5 = iprot.readI32();
                  struct._integerParams.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.set_integerParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _STRING_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct._stringParams = new ArrayList<String>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  String _elem8; // required
                  _elem8 = iprot.readString();
                  struct._stringParams.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.set_stringParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _DATETIME_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct._datetimeParams = new ArrayList<Long>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  long _elem11; // required
                  _elem11 = iprot.readI64();
                  struct._datetimeParams.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.set_datetimeParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LMConstraintViolation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_ERROR_CODE_FIELD_DESC);
      oprot.writeI32(struct._errorCode);
      oprot.writeFieldEnd();
      if (struct._doubleParams != null) {
        oprot.writeFieldBegin(_DOUBLE_PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct._doubleParams.size()));
          for (double _iter12 : struct._doubleParams)
          {
            oprot.writeDouble(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct._integerParams != null) {
        oprot.writeFieldBegin(_INTEGER_PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct._integerParams.size()));
          for (int _iter13 : struct._integerParams)
          {
            oprot.writeI32(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct._stringParams != null) {
        oprot.writeFieldBegin(_STRING_PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct._stringParams.size()));
          for (String _iter14 : struct._stringParams)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct._datetimeParams != null) {
        oprot.writeFieldBegin(_DATETIME_PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct._datetimeParams.size()));
          for (long _iter15 : struct._datetimeParams)
          {
            oprot.writeI64(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LMConstraintViolationTupleSchemeFactory implements SchemeFactory {
    public LMConstraintViolationTupleScheme getScheme() {
      return new LMConstraintViolationTupleScheme();
    }
  }

  private static class LMConstraintViolationTupleScheme extends TupleScheme<LMConstraintViolation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LMConstraintViolation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct._errorCode);
      {
        oprot.writeI32(struct._doubleParams.size());
        for (double _iter16 : struct._doubleParams)
        {
          oprot.writeDouble(_iter16);
        }
      }
      {
        oprot.writeI32(struct._integerParams.size());
        for (int _iter17 : struct._integerParams)
        {
          oprot.writeI32(_iter17);
        }
      }
      {
        oprot.writeI32(struct._stringParams.size());
        for (String _iter18 : struct._stringParams)
        {
          oprot.writeString(_iter18);
        }
      }
      {
        oprot.writeI32(struct._datetimeParams.size());
        for (long _iter19 : struct._datetimeParams)
        {
          oprot.writeI64(_iter19);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LMConstraintViolation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._errorCode = iprot.readI32();
      struct.set_errorCodeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct._doubleParams = new ArrayList<Double>(_list20.size);
        for (int _i21 = 0; _i21 < _list20.size; ++_i21)
        {
          double _elem22; // required
          _elem22 = iprot.readDouble();
          struct._doubleParams.add(_elem22);
        }
      }
      struct.set_doubleParamsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct._integerParams = new ArrayList<Integer>(_list23.size);
        for (int _i24 = 0; _i24 < _list23.size; ++_i24)
        {
          int _elem25; // required
          _elem25 = iprot.readI32();
          struct._integerParams.add(_elem25);
        }
      }
      struct.set_integerParamsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct._stringParams = new ArrayList<String>(_list26.size);
        for (int _i27 = 0; _i27 < _list26.size; ++_i27)
        {
          String _elem28; // required
          _elem28 = iprot.readString();
          struct._stringParams.add(_elem28);
        }
      }
      struct.set_stringParamsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct._datetimeParams = new ArrayList<Long>(_list29.size);
        for (int _i30 = 0; _i30 < _list29.size; ++_i30)
        {
          long _elem31; // required
          _elem31 = iprot.readI64();
          struct._datetimeParams.add(_elem31);
        }
      }
      struct.set_datetimeParamsIsSet(true);
    }
  }

}


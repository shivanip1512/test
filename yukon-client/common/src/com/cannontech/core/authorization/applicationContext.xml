<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">


    <description>Yukon Authorization Services</description>
    
    
    <!-- Authorization Services -->
    <!-- Pao command authorization service - authorizes commands on paos -->	
	<bean id="paoCommandAuthorizationService" class="com.cannontech.core.authorization.service.impl.PaoCommandAuthorizationServiceImpl">
		<property name="authorizationService" ref="paoAuthorizationService" />
		<property name="converter" ref="permissionConverter" />
	</bean>

    <!-- LM command authorization service - authorizes commands on Load Management objects -->	
	<bean id="lmCommandAuthorizationService" class="com.cannontech.core.authorization.service.impl.LMCommandAuthorizationServiceImpl">
		<property name="authorizationService" ref="lmAuthorizationService" />
		<property name="converter" ref="permissionConverter" />
	</bean>


    
    <!-- Pao Permission Service -->
    <bean id="paoPermissionService" class="com.cannontech.core.authorization.service.impl.PaoPermissionServiceImpl">
	    <property name="groupDao" ref="yukonGroupDao" />
	    <property name="groupPaoPermissionDao" ref="groupPaoPermissionDao" />
	    <property name="userPaoPermissionDao" ref="userPaoPermissionDao" />
    </bean>
    
    <!-- Authorization Daos -->
    <bean id="userPaoPermissionDao" class="com.cannontech.core.authorization.dao.UserPaoPermissionDaoImpl" >
    	<property name="jdbcOps" ref="jdbcTemplate" />
    	<property name="nextValueHelper" ref="nextValueHelper" />
    </bean>
	
    <bean id="groupPaoPermissionDao" class="com.cannontech.core.authorization.dao.GroupPaoPermissionDaoImpl" >
    	<property name="jdbcOps" ref="jdbcTemplate" />
    	<property name="nextValueHelper" ref="nextValueHelper" />
    </bean>
    
  	<bean id="userEditorService" class="com.cannontech.core.authorization.service.impl.PaoPermissionEditorServiceImpl">
		<property name="paoDao" ref="paoDao" />
		<property name="permissionDao" ref="userPaoPermissionDao" />
	</bean>
    
	<bean id="groupEditorService" class="com.cannontech.core.authorization.service.impl.PaoPermissionEditorServiceImpl">
		<property name="paoDao" ref="paoDao" />
		<property name="permissionDao" ref="groupPaoPermissionDao" />
	</bean>
 
	
	<!-- Pao checkers -->
    <!-- Pao checker which matches LM paos -->
	<bean id="loadManagementPaoCheck" class="com.cannontech.core.authorization.support.pao.PaoCheckCategoryClass">
		<property name="paoCategoryClassList">
			<list>
				<!-- LM Pao -->
				<bean class="com.cannontech.core.authorization.support.pao.PaoCheckCategoryClass$PaoCategoryClass">
					<property name="category"><util:constant static-field="com.cannontech.database.data.pao.PAOGroups.CAT_LOADCONTROL" /></property>
					<property name="paoClass"><util:constant static-field="com.cannontech.database.data.pao.DeviceClasses.LOADMANAGEMENT" /></property>
				</bean>
				<!-- LM Group -->
				<bean class="com.cannontech.core.authorization.support.pao.PaoCheckCategoryClass$PaoCategoryClass">
					<property name="category"><util:constant static-field="com.cannontech.database.data.pao.PAOGroups.CAT_DEVICE" /></property>
					<property name="paoClass"><util:constant static-field="com.cannontech.database.data.pao.DeviceClasses.GROUP" /></property>
				</bean>
			</list>
		</property>
	</bean>
	
    <!-- Pao checker which matches cap control paos -->
	<bean id="capControlPaoCheck" class="com.cannontech.core.authorization.support.pao.PaoCheckCategoryClass">
		<property name="paoCategoryClassList">
			<list>
				<!-- Cap Control device -->
				<bean class="com.cannontech.core.authorization.support.pao.PaoCheckCategoryClass$PaoCategoryClass">
					<property name="category"><util:constant static-field="com.cannontech.database.data.pao.PAOGroups.CAT_DEVICE" /></property>
					<property name="paoClass"><util:constant static-field="com.cannontech.database.data.pao.PAOGroups.CAT_CAPCONTROL" /></property>
				</bean>
			</list>
		</property>
	</bean>
	
    <!-- Pao checker which matches all paos except cap control and lm paos -->
	<bean id="otherPaoCheck" class="com.cannontech.core.authorization.support.pao.PaoCheckDefault">
		<property name="excludeList">
			<list>
				<ref bean="capControlPaoCheck"/>
				<ref bean="loadManagementPaoCheck"/>
			</list>
		</property>
	</bean>
	
    <!-- String checker which matches LM strings -->
	<bean id="lmStringChecker" class="com.cannontech.core.authorization.support.string.StringChecker">
		<property name="checkStringList">
			<list>
				<value>lmdevice</value>
				<value>sa305</value>
				<value>sa205</value>
				<value>xcom</value>
				<value>vcom</value>
			</list>
		</property>
	</bean>

	<!-- Converter which converts command strings into permissions -->
	<bean id="permissionConverter" class="com.cannontech.core.authorization.support.CommandPermissionConverter">
		<property name="commandPermissionList">
			<list>
				<!-- Command string to permission mappings  -->
				<bean class="com.cannontech.core.authorization.support.CommandPermissionConverter$CommandPermissionMapping">
					<property name="commandString" value="get*connect" />
					<property name="permission" value="READ_DISCONNECT_COMMAND" />
				</bean>
				<bean class="com.cannontech.core.authorization.support.CommandPermissionConverter$CommandPermissionMapping">
					<property name="commandString" value="control*connect" />
					<property name="permission" value="WRITE_DISCONNECT_COMMAND" />
				</bean>
				<bean class="com.cannontech.core.authorization.support.CommandPermissionConverter$CommandPermissionMapping">
					<property name="commandString" value="get" />
					<property name="permission" value="READ_COMMAND" />
				</bean>
				<bean class="com.cannontech.core.authorization.support.CommandPermissionConverter$CommandPermissionMapping">
					<property name="commandString" value="put" />
					<property name="permission" value="WRITE_COMMAND" />
				</bean>
				<bean class="com.cannontech.core.authorization.support.CommandPermissionConverter$CommandPermissionMapping">
					<property name="commandString" value="control" />
					<property name="permission" value="CONTROL_COMMAND" />
				</bean>
			</list>
		</property>
	</bean>

	<!-- 
		Service which authorizes permissions for LM objects based on a role property.  This service is
		neccessary because some LM objects are not paos.  Contains a list of authorizations which map an 
		LM object permission with a role property.
	 -->
    <bean id="lmAuthorizationService" class="com.cannontech.core.authorization.service.impl.LMSerialTypeAuthorizationServiceImpl" >
        <property name="authorizationList">
        	<list>
        	
        		<!-- Config to check if a user has permission for a READ_COMMAND on a LM object based on 
        			their READ_LM_DEVICE role property -->
        		<bean class="com.cannontech.core.authorization.support.string.StringPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="lmStringChecker" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.READ_LM_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="READ_COMMAND"/>
			    </bean>
			    <!-- Config to check if a user has permission for a WRITE_COMMAND on a LM object based on 
			    	their WRITE_TO_LM_DEVICE role property -->
        		<bean class="com.cannontech.core.authorization.support.string.StringPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="lmStringChecker" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.WRITE_TO_LM_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="WRITE_COMMAND"/>
			    </bean>
			    <!-- Config to check if a user has permission for a CONTROL_COMMAND on a LM object based on 
			    	their CONTROL_LM_DEVICE role property -->
        		<bean class="com.cannontech.core.authorization.support.string.StringPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="lmStringChecker" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.CONTROL_LM_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="CONTROL_COMMAND"/>
			    </bean>
			    
			    
			    <!-- Catch all for unknown commands.  If a command is not known, the EXECUTE_UNKOWN_COMMAND
			         role property will be checked to determine command authorization  -->
			    <bean class="com.cannontech.core.authorization.support.string.StringPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="lmStringChecker" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.EXECUTE_UNKNOWN_COMMAND"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="OTHER_COMMAND"/>
			    </bean>
			    
			    
			    <!-- Catch all - checks a given role property to determine authorization -->
			    <bean class="com.cannontech.core.authorization.support.string.StringPermissionRoleAuthorization">
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.EXECUTE_MANUAL_COMMAND"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    </bean>
        	</list>
        </property>
    </bean>

	<!-- 
		Service which authorizes permissions for paos.  This service iterates through the 
		list of authorizations. If one of the authorizations returns authorized, the service
		returns authorized. If none of the authorizations returns authorized, the service
		returns unauthorized.
	 -->
    <bean id="paoAuthorizationService" class="com.cannontech.core.authorization.service.impl.PaoAuthorizationServiceImpl" >
        <property name="authorizationList">
        	<list>
        	
        		<!-- Permissions from the UserPaoPermission and GroupPaoPermission db tables -->
				<bean class="com.cannontech.core.authorization.support.pao.PaoPermissionAuthorization">
					<property name="paoPermissionService" ref="paoPermissionService" />
				</bean>

        		<!-- Load Management pao permissions -->
        		
			    <!-- Config to check if a user has permission for a READ_COMMAND on a load management pao
			    	 based on their READ_LM_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="loadManagementPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.READ_LM_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="READ_COMMAND"/>
			    </bean>
			    <!-- Config to check if a user has permission for a WRITE_COMMAND on a load management pao
			    	 based on their WRITE_TO_LM_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="loadManagementPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.WRITE_TO_LM_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="WRITE_COMMAND"/>
			    </bean>
			    <!-- Config to check if a user has permission for a CONTROL_COMMAND on a load management pao
			    	 based on their CONTROL_LM_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="loadManagementPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.CONTROL_LM_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="CONTROL_COMMAND"/>
			    </bean>

        		<!-- Cap Control pao permissions -->
        		
			    <!-- Config to check if a user has permission for a READ_COMMAND on a cap control pao
			    	 based on their READ_CAP_CONTROL_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="capControlPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.READ_CAP_CONTROL_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="READ_COMMAND"/>
			    </bean>
			    <!-- Config to check if a user has permission for a WRITE_COMMAND on a cap control pao
			    	 based on their WRITE_TO_CAP_CONTROL_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="capControlPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.WRITE_TO_CAP_CONTROL_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="WRITE_COMMAND"/>
			    </bean>
			    <!-- Config to check if a user has permission for a CONTROL_COMMAND on a cap control pao
			    	 based on their CONTROL_CAP_CONTROL_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="capControlPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.CONTROL_CAP_CONTROL_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="CONTROL_COMMAND"/>
			    </bean>
			    
			    <!-- Other pao permissions -->

			    <!-- Config to check if a user has permission for a READ_COMMAND on any pao
					 (not LM or cap control) based on their READ_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="otherPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.READ_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="READ_COMMAND"/>
			    </bean>
			    <!-- Config to check if a user has permission for a WRITE_COMMAND on any pao
			    	 (not LM or cap control) based on their WRITE_TO_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="otherPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.WRITE_TO_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="WRITE_COMMAND"/>
			    </bean>
			    <!-- Config to check if a user has permission for a READ_DISCONNECT_COMMAND on any pao
			    	 (not LM or cap control) based on their READ_DISCONNECT_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="otherPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.READ_DISCONNECT_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="READ_DISCONNECT_COMMAND"/>
			    </bean>
			    <!-- Config to check if a user has permission for a WRITE_DISCONNECT_COMMAND on any pao
			    	 (not LM or cap control) based on their WRITE_DISCONNECT_DEVICE role property -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker" ref="otherPaoCheck" />
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.WRITE_DISCONNECT_DEVICE"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="WRITE_DISCONNECT_COMMAND"/>
			    </bean>

			    <!-- Catch all for unknown commands.  If a command is not known, the EXECUTE_UNKNOWN_COMMAND
			         role property will be checked to determine command authorization  -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoPermissionRoleAuthorization">
			    	<property name="objectChecker">
			    		<bean class="com.cannontech.core.authorization.support.pao.PaoCheckDefault" />
			    	</property>
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.EXECUTE_UNKNOWN_COMMAND"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    	<property name="permission" value="OTHER_COMMAND"/>
			    </bean>
			    
			    
			    <!-- Catch all - checks a given role property to determine authorization -->
			    <bean class="com.cannontech.core.authorization.support.pao.PaoRoleAuthorization">
			    	<property name="roleChecker">
			    		<bean factory-bean="rolePropertyUserCheckerFactory" factory-method="createPropertyChecker">
			    			<constructor-arg>
			    				<util:constant static-field="com.cannontech.roles.application.CommanderRole.EXECUTE_MANUAL_COMMAND"/>
			    			</constructor-arg>
			    		</bean>
			    	</property>
			    </bean>
		    </list>
	    </property>
	</bean>
    
</beans>
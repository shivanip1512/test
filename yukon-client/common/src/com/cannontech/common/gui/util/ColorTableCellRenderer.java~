package com.cannontech.common.gui.util;

/**
 * Insert the type's description here.
 * Creation date: (11/6/00 1:07:17 PM)
 * @author: 
 */
public class ColorTableCellRenderer extends javax.swing.JPanel implements javax.swing.table.TableCellRenderer {
	private java.awt.Color iconColor = null;
	private String boxString = null;
/**
 * ColorTableCellRenderer constructor comment.
 */
public ColorTableCellRenderer() {
	super();
	setOpaque(true);
	setPreferredSize(new java.awt.Dimension(100, 18));
	setMinimumSize(new java.awt.Dimension(100, 18));
}
	/**
	 *  This method is sent to the renderer by the drawing table to
	 *  configure the renderer appropriately before drawing.  Return
	 *  the Component used for drawing.
	 *
	 * @param	table		the JTable that is asking the renderer to draw.
	 *				This parameter can be null.
	 * @param	value		the value of the cell to be rendered.  It is
	 *				up to the specific renderer to interpret
	 *				and draw the value.  eg. if value is the
	 *				String "true", it could be rendered as a
	 *				string or it could be rendered as a check
	 *				box that is checked.  null is a valid value.
	 * @param	isSelected	true is the cell is to be renderer with
	 *				selection highlighting
	 * @param	row	        the row index of the cell being drawn.  When
	 *				drawing the header the rowIndex is -1.
	 * @param	column	        the column index of the cell being drawn
	 */
public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
	boxString = value.toString();	
	iconColor = Colors.getColor(boxString);
	return this;
}
/**
 * Insert the method's description here.
 * Creation date: (1/19/00 2:29:21 PM)
 * @param g java.awt.Graphics
 */
public void paint(java.awt.Graphics g) {
	g.setColor(iconColor);
	g.fillRect(0,0,((int)(.5*getWidth())),(getHeight()));
	g.setColor(java.awt.Color.black);
	g.drawRect(0,0,(int)(.5*getWidth()),getHeight());
	g.drawString(boxString,((int)(.5*getWidth())+5),((int)(.5*getHeight() + .25*g.getFontMetrics().getHeight())));
}
}

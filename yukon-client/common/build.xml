<?xml version="1.0" ?>
<project name="yukon commons" default="all">
   
   <property file="../build/build.properties"/>

   <target name="all" depends="clean,build">
    </target>
   
   <target name="build">
       <mkdir dir="build"/>
   	   
   	   <mkdir dir="${yukon.exampleXml}"/>
   	   <copy file="src/com/cannontech/amr/rfn/service/pointmapping/rfnPointMapping.xml" tofile="${yukon.exampleXml}/rfnPointMapping_Example.xml"/>
   	   <copy file="src/com/cannontech/common/pao/definition/dao/paoDefinition.xml" tofile="${yukon.exampleXml}/deviceDefinition_Example.xml"/>
   	   
       <javac srcdir="src"
              destdir="build"
              target="${yukon.javac.target}" 
       	      source="${yukon.javac.source}"
              bootclasspath="${yukon.javac.bootclasspath}"
              debug="${yukon.javac.debug}">
          <classpath>
              <fileset dir="${yukon.lib}">
                <include name="**/*.jar"/>
              </fileset>
	      </classpath> 
     	</javac>

		<jar jarfile="${yukon.lib}/common.jar" basedir="build/" manifest="resource/manifest.mf">
            <manifest>
                <attribute name="Yukon-Version" value="${yukon.build.version}"/>
                <attribute name="Yukon-Details" value="${yukon.build.details}"/>
            	<attribute name="Permissions" value="all-permissions"/>
            	<attribute name="Hudson-Build-Details" value="BUILD_NUMBER=${env.BUILD_NUMBER},BUILD_TAG=${env.BUILD_TAG},JOB_NAME=${env.JOB_NAME},SVN_REVISION=${SVN_REVISION}"/>
            </manifest>      
		    <fileset dir="resource">
				<include name="**/*.gif"/>
		 		<include name="**/*.au"/>
			</fileset>
		    <fileset dir="src">
		    	<exclude name="**/*.java"/>
			</fileset>
       	</jar>
   	
        <jar destfile="${yukon.lib}/i18n-en_US.jar" basedir="i18n/en_us" includes="**/*.xml">
            <manifest>
                <attribute name="Yukon-Version" value="${yukon.build.version}"/>
                <attribute name="Yukon-Details" value="${yukon.build.details}"/>
            	<attribute name="Permissions" value="all-permissions"/>
            </manifest> 
        </jar>

   </target>

   <target name="clean">
       <delete dir="build"/>        
    </target>
    
	<!-- Target to generate the jaxb classes for the paoDefinition schema -->
    <target name="generateJaxbClasses">
        <!-- This task uses the JAXB2 Basics version of the xjc ant task
             because the Oracle version has classpath issues with plugins
             and we are using the JAXB 2 Default Value plugin-->
    	<taskdef name="xjc" classname="org.jvnet.jaxb2_commons.xjc.XJC2Task">
            <classpath>
                <fileset dir=".." includes="**/*.jar"/>
            </classpath>
        </taskdef>
    	<xjc schema="src/com/cannontech/common/pao/definition/dao/paoDefinition.xsd" package="com.cannontech.common.pao.definition.model.jaxb" destdir="src">
    	    <arg value="-extension"/>
    		<arg value="-Xdefault-value"/>
    		<!-- Everything in this "produces" dir should be overwritten on fresh build -->
    		<produces dir="src/com/cannontech/common/pao/definition/model/jaxb"/>
        </xjc>
    	<xjc schema="src/com/cannontech/common/device/config/configurationCategoryDefinition.xsd" package="com.cannontech.common.device.config.model.jaxb" destdir="src">
            <arg value="-extension"/>
            <arg value="-Xdefault-value"/>
            <!-- Everything in this "produces" dir should be overwritten on fresh build -->
            <produces dir="src/com/cannontech/common/device/config/model/jaxb"/>
        </xjc>
    </target>
	
    <!-- Run unit tests - will stop running if a failure or error occurs during a test -->
    <target name="runUnitTests" description="Run all unit tests, stop on failure" depends="compileUnitTests">
        <antcall target="executeTests">
            <param name="halt" value="yes"/>
            <param name="srcdir" value="test/unit"/>
            <param name="destdir" value="test/build/unit" />
        </antcall>
    </target>

    <!-- Run unit tests - will run all tests even if a failure or error occurs during a test -->
    <target name="runUnitTestsIgnoreFailures" description="Run all unit tests, do not stop on failure" depends="compileUnitTests">
        <antcall target="executeTests">
            <param name="halt" value="no"/>
            <param name="srcdir" value="test/unit"/>
            <param name="destdir" value="test/build/unit" />
        </antcall>
    </target>

    <!-- Compile unit tests - will compile all unit tests -->
    <target name="compileUnitTests">
        <antcall target="compileTests">
            <param name="srcdir" value="test/unit"/>
            <param name="destdir" value="test/build/unit" />
        </antcall>
    </target>


    <!-- Compile the test classes for testing. This target must be supplied a srcdir and a destdir property -->
    <target name="compileTests">
        <delete dir="${destdir}" />
        <mkdir dir="${destdir}" />
        <javac srcdir="${srcdir}"
               destdir="${destdir}"
               target="${yukon.javac.target}"
               source="${yukon.javac.source}"
               bootclasspath="${yukon.javac.bootclasspath}"
               debug="${yukon.javac.debug}">
            <classpath>
                <fileset dir="${yukon.lib}">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
        </javac>
        <copy file="${srcdir}//com/cannontech/common/config/master.cfg"
        	todir="${destdir}/com/cannontech/common/config"/>
    </target>

    <!-- Run tests. This target must be supplied a halt and destdir property -->
    <target name="executeTests" depends="compileUnitTests">

        <property name="test.results.dir" value="test/testResults"/>
        <!-- Clear out any old results -->
        <delete dir="${test.results.dir}" />
        <mkdir dir="${test.results.dir}" />

        <!-- Run all tests (currently looks for all classes whose name ends with 'Test') -->
        <junit printsummary="on" haltonerror="${halt}" haltonfailure="${halt}">
            <classpath id="junit.class.path">
                <pathelement location="${srcdir}"/>
                <pathelement location="${destdir}"/>
                <fileset dir="${yukon.lib}">
                    <include name="**/*.jar" />
                    <exclude name="**/WebContent/**" />
                </fileset>
            </classpath>
            <formatter type="xml" />
            <batchtest fork="yes" todir="${test.results.dir}">
                <fileset dir="${destdir}">
                    <include name="**/*Test.class" />
                </fileset>
            </batchtest>
        </junit>

        <!-- Create the html reports for test results -->
        <property name="test.results.dir" value="test/unitTestResults" />
        <junitreport todir="${test.results.dir}">
            <fileset dir="${test.results.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${test.results.dir}" />
        </junitreport>
    </target>

</project>
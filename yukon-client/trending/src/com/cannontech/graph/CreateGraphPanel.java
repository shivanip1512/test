package com.cannontech.graph;

/**
 * A panel to create and edit graphs.
 *
 * Creation date: (10/23/00 3:24:57 PM)
 * @author: 
 */
import com.cannontech.graph.gds.tablemodel.GDSTableModel;
 import com.cannontech.database.db.graph.GraphDataSeries;
 import com.cannontech.database.db.DBPersistent.*;
 import java.util.Vector;
public class CreateGraphPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.cannontech.common.gui.util.DataInputPanelListener, java.awt.event.ActionListener {
	public static final int OK = 1;
	public static final int CANCEL = 2;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private int buttonPushed = CANCEL;
	private com.cannontech.database.model.DeviceTree_CustomPointsModel graphPointsModel = null;
	private com.cannontech.database.model.DeviceTree_CustomPointsModel usagePointsModel = null;
	private Vector peakPointsVector;
	private GraphColors graphColors;
	private javax.swing.JButton ivjThresholdsButton = null;
	private com.cannontech.database.data.graph.GraphDefinition value;
	private javax.swing.JPanel ivjPointOptionsPanel = null;
	private javax.swing.JLabel ivjPeakPointLabel = null;
	private javax.swing.JComboBox ivjPeakPointComboBox = null;
	private javax.swing.JButton ivjAddGDSButton_Graph = null;
	private javax.swing.JPanel ivjAddRemoveButtonsPanel_Graph = null;
	private javax.swing.JSplitPane ivjCreateGraphSplitPane = null;
	private javax.swing.JLabel ivjNameLabel = null;
	private javax.swing.JPanel ivjNamePanel = null;
	private javax.swing.JTextField ivjNameTextField = null;
	private javax.swing.JButton ivjRemoveGDSButton_Graph = null;
	private javax.swing.JPanel ivjTopPanel = null;
	private javax.swing.JScrollPane ivjGraphGDSScrollPane = null;
	private javax.swing.JTable ivjGraphGDSTable = null;
	private AxisPanel ivjAxisPanel = null;
	private javax.swing.JPanel ivjBottomPanel = null;
	private javax.swing.JButton ivjCancelButton = null;
	private javax.swing.JButton ivjOkButton = null;
	private javax.swing.JPanel ivjOkCancelButtonsPanel = null;
	private javax.swing.JPanel ivjJPanel1 = null;
	private com.cannontech.common.gui.util.TreeViewPanel ivjTreeViewPanel = null;

class IvjEventHandler implements javax.swing.event.CaretListener {
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == CreateGraphPanel.this.getNameTextField()) 
				connEtoM1(e);
		};
	};
/**
 * CreateGraphPanel constructor comment.
 */
public CreateGraphPanel()
{
	super();
	initialize();
}
/**
 * Insert the method's description here.
 * Creation date: (4/24/2001 10:38:52 AM)
 * @param event java.awt.event.ActionListener
 */
public void actionPerformed(java.awt.event.ActionEvent event)
{
	
	if (event.getSource() == getRemoveGDSButton_Graph() )
	{
		removeGDS_ActionPerformed(getGraphGDSTable());
	}

	else if (event.getSource() == getAddGDSButton_Graph() )
	{
		addGDS_ActionPerformed(getTreeViewPanel().getSelectedNode());
	}
}
/**
 * Comment
 */
public void addGDS_ActionPerformed(javax.swing.tree.DefaultMutableTreeNode node)
{
	com.cannontech.database.data.lite.LitePoint pt = null;
	String deviceName = null;
	
	//Get the object selected in the tree.
	Object selected = node.getUserObject();

	if( selected instanceof com.cannontech.database.data.lite.LiteYukonPAObject )
	{	// The device and all points are added to the GDS, e loop through the children.
		java.util.Enumeration e = node.children();
		while( e.hasMoreElements() )
		{
			pt = (com.cannontech.database.data.lite.LitePoint) ((com.cannontech.database.model.DBTreeNode) e.nextElement()).getUserObject();
			deviceName = ((com.cannontech.database.data.lite.LiteYukonPAObject) selected).getPaoName();

			// Create the GDS to add in the tables (and peakComboBox maybe).
			GraphDataSeries gds = createGDS(pt, deviceName );
			
			GDSTableModel model = (GDSTableModel) getGraphGDSTable().getModel();

			model.addRow( gds );

		}	
	}
	else if( selected instanceof com.cannontech.database.data.lite.LitePoint )
	{	//A single point is added to the GDS
		
		pt = (com.cannontech.database.data.lite.LitePoint) selected;
		deviceName = ((com.cannontech.database.model.DBTreeNode) node.getParent()).getUserObject().toString();

		// Create the GDS to add in the tables (and peakComboBox maybe).
		GraphDataSeries gds = createGDS(pt, deviceName );

		GDSTableModel model = (GDSTableModel) getGraphGDSTable().getModel();

		model.addRow( gds );

	}
	else	//The tree label ("Devices") was selected...not acceptable.
		return;
}
/**
 * connEtoM1:  (GraphNameTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> CreateGraphPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (1/15/2002 9:40:15 AM)
 * @return com.cannontech.database.db.graph.GraphDataSeries
 * @param point com.cannontech.database.data.lite.LitePoint
 * @param deviceName java.lang.String
 */
public com.cannontech.database.db.graph.GraphDataSeries createGDS(com.cannontech.database.data.lite.LitePoint point, String deviceName)
{
	com.cannontech.database.db.graph.GraphDataSeries gds = new com.cannontech.database.db.graph.GraphDataSeries();
	
	gds.setDeviceName( deviceName );
	gds.setPointID(new Integer( point.getPointID() ));
	
	String gdsLabel = point.getPointName() + " / " + gds.getDeviceName();
	if (gdsLabel.length() > 40)
		gdsLabel = gdsLabel.substring(0, 39);
	gds.setLabel(gdsLabel);
	
	gds.setAxis(new Character('L') );
	gds.setColor( new Integer( getGraphColors().getNextLineColorID()) );

	// call to obtain the type from the database (pointUnit)
	String type = getPointTypeString(point);
	gds.setType(type);
	
	if( type.equalsIgnoreCase(com.cannontech.database.db.graph.GraphDataSeries.GRAPH_SERIES))
	{	//add to the peaks combo box if of type graph
		String label = gds.getLabel().toString() + " :: " + gds.getDeviceName().toString();
		getPeakPointComboBox().addItem(label);
		peakPointsVector.addElement(label);
	}
	
	return gds;
}
/**
 * Return the JButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getAddGDSButton_Graph() {
	if (ivjAddGDSButton_Graph == null) {
		try {
			ivjAddGDSButton_Graph = new javax.swing.JButton();
			ivjAddGDSButton_Graph.setName("AddGDSButton_Graph");
			ivjAddGDSButton_Graph.setToolTipText("Add Graph Points");
			ivjAddGDSButton_Graph.setText(">>");
			ivjAddGDSButton_Graph.setActionCommand("AddPointButton");
			ivjAddGDSButton_Graph.setFont(new java.awt.Font("Arial", 1, 14));
			ivjAddGDSButton_Graph.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddGDSButton_Graph;
}
/**
 * Return the JPanel4 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getAddRemoveButtonsPanel_Graph() {
	if (ivjAddRemoveButtonsPanel_Graph == null) {
		try {
			ivjAddRemoveButtonsPanel_Graph = new javax.swing.JPanel();
			ivjAddRemoveButtonsPanel_Graph.setName("AddRemoveButtonsPanel_Graph");
			ivjAddRemoveButtonsPanel_Graph.setPreferredSize(new java.awt.Dimension(35, 70));
			ivjAddRemoveButtonsPanel_Graph.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsAddGDSButton_Graph = new java.awt.GridBagConstraints();
			constraintsAddGDSButton_Graph.gridx = 0; constraintsAddGDSButton_Graph.gridy = 0;
			constraintsAddGDSButton_Graph.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsAddGDSButton_Graph.insets = new java.awt.Insets(4, 4, 4, 4);
			getAddRemoveButtonsPanel_Graph().add(getAddGDSButton_Graph(), constraintsAddGDSButton_Graph);

			java.awt.GridBagConstraints constraintsRemoveGDSButton_Graph = new java.awt.GridBagConstraints();
			constraintsRemoveGDSButton_Graph.gridx = 0; constraintsRemoveGDSButton_Graph.gridy = 1;
			constraintsRemoveGDSButton_Graph.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsRemoveGDSButton_Graph.insets = new java.awt.Insets(4, 4, 4, 4);
			getAddRemoveButtonsPanel_Graph().add(getRemoveGDSButton_Graph(), constraintsRemoveGDSButton_Graph);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddRemoveButtonsPanel_Graph;
}
/**
 * Return the AxisPanel1 property value.
 * @return com.cannontech.graph.AxisPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private AxisPanel getAxisPanel() {
	if (ivjAxisPanel == null) {
		try {
			ivjAxisPanel = new com.cannontech.graph.AxisPanel();
			ivjAxisPanel.setName("AxisPanel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAxisPanel;
}
/**
 * Return the JPanel61 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getBottomPanel() {
	if (ivjBottomPanel == null) {
		try {
			ivjBottomPanel = new javax.swing.JPanel();
			ivjBottomPanel.setName("BottomPanel");
			ivjBottomPanel.setLayout(new java.awt.BorderLayout());
			getBottomPanel().add(getOkCancelButtonsPanel(), "East");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBottomPanel;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G8EDF9DADGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DBD8DD8D5D536D4D4D4B411E9E34A94A5CDD42614D8D4D644339E4D339966BDEAEC229EFD794ADE3E995E9B678DB363CC87AE9896980AA6AAA4AAAA9A11BFD88CB1492FC2212290121AF0659E60423D77DC6EBD48D5945E5AFB1F356F615CF3AFE0B15F73F3F14EDE7BEF6D3557DAFB6F3577BED7D833A9A4ADB9E50DA0A427894A3F4F1385E16AF50270C16EDF16A0EE7101E803207A3799E0153030BA
	951EC990979693ED48927EB7AF9D42999551060A27238D6B60BDDB78F3DE61957062259E8162164F38E6126FFAB6B7E0BD6F52304512814F15GD9D0D78900DF85295F5F122360DBA13CD2F9A7101CA2880515A44D4B79B9AA7CFCA55DB2129F629750B4F7D8F215F8BB04C91AGF886D732349170DCC1293B3A2CD4C9F77A6690E1694FD625E4123AD465A32C29E2F9CB15E73EF09BE504C1F8E9574770ACEF6C6D7A32C33296F798EDB649A60B9D5D45DD8E233D3B2C2C5AA19AE5719089B49AED22C5882BA2B4
	A6EFCE277901C68817D4935C794D04AFCBA01C8A615CEA24731719658A9D13FBC304049929DE69F4D5B37A022B5DF406DCD31552D0C34A0F21FCA77962A1FE8D6098ADD9D624A52886E9897E08240D01F082C09247F7ECA2782C5AE8C3A1C0C5AD5278779DC8E36B60ECA169ECC94A87DEE8EC2DE53479553AE9CCF8E4DD5AFAAA9B8F9CA67DBB8F6292G1682649C0CB614823482EC24B2595D308B1E15E765EA49EA15EC15F6FB154564B8AC19C48B3C1715C10C02BBAEF6C88E13A0B039DB3E39C8079E847B41
	11B2C700356D0400F2B27378CF85D95E1512265336089732D37C15B2269EF437AD71A0615BA7DB885FA2611D64A33A45701594DFF2480DE7FDB5CCE50104AD90D7D807FCEEDD0934B424CE933276FC16722E8EADD323BFCED9D42768C61D1B964663EB0F929E9756C79BEAGCE8348G1381A26A11478FB56C9B0D4775A0678E1B515254FF56EEF448D57DE60BC9F4A83C7E3945972F7500650B9FF7BE461730FD6ABE0A1F33DF17AF71E19BD2E26B99BF96573B79426ADEEB75D6F77AD71E32311277E19655095C
	2FD89F9AB8FE83459729702CEF6F223AC5426590978240527F0A26CF7DDADB4EEB943F66EBEDB966CDD8CE814485G307E5DF60C583FA590CEEF08B664831482348248G818D5847FFE978F40CFA54286ADF167761439F42D3F4498EE33D4DA99BED9DE20B51E1B61E3508CEC1C97354E1425733A3724D277A5D81F59C92ED2243A81BA59B14EE340AA0CCCE166679432BC89AE2B8A13659EC9521822BDD40F2DFB81CCD744268143F311B40383AD33078D78E9319B8E7EC019221GF8DF58C07815C7EDEE983C4F
	EFC0DE9DBFCEF03907413E9DC63E349ED98D4F2FC138C5CBD9D90D390310E1F41CC7995D370548C99D244FB892ED0885100F023DEE0CB6CC85A8BF96EDD88490F89C785E84F62C89F577B72DA823B519F78BC5AF14684AA835114DCC5E6C4DDA99BDC46B1E8A78C80005GC9GB95FC0DDG2DGAE0029G11G8B3F41B1776A4D612A72896D5CD6B432F7528EB58D24CDDA3AC85B70FD1172CE5A28CDC75ACC5A2F4567B66A6B91010CA31EF10C760891349BD46F192AF4DA1B20AD6B83557BAA6539D6A79D1B77
	F8625F77C2B701B49D9C132F28A62223C9508FEBDAC046DAD046EEB9124FF42F4A6894D15B0EBAC0D1C413DB62D85A202304F6711CE813EBC43BE8B3410BD311759F9FDD615643CE096B48CFA81E5865EAD094A7474FB83A0A61218C35D6E37C7DB45EA84B8E7359FED9EC92E559EC6BF2671FC3E9F10EB079CE252D514D242D8D50C693004C5BDA5E182D522786C96A6D37B793CB2168E5911DFF84C07A109614578FB711B963FC9E4E27E1F7FC58C72DBE7A637B003B4E27A72C8E83176DD7E83B5E6761B7E9B8
	0153A0ED72C603AFF99CAB30BA823C56E178816AE0B27069B16FB27C59B1FD99AEBF26AF43D547FC4B68D74774E414459DBBC6F4D59A3029E43E659831779D124DA6D24563D984B6477FCDB3E90759E616CF18CDDD225CE43EA08A426E93C4F6CB6818128E6F39A7504E8FECC5BBDFF061CEA12A6D835D7962543B0BD364934C66851CF05BF9C6530963C417C40BE885C6D5CB7DB619613F23631502F79AA86E19130F103C05474DDD5DF2254B6C2C6C1725268E238538F25CE8B2CBD57D32AC590A4C32E8ADA6FF
	1AE498B52B3B0D36AE51D458E3BCE7ACB68E484534F30A6BA13E163C6D4C7F6413AF73354B17A2076FCA5A6A3565B7F82B600B1DADBB776C95D89BD21DF3E99B9A444E89EF0245E79D63ED41BEC5CF32052D0EA9348D15A653211AA605E2A39529E276E8949D1D12436AC9F2A50D76C534D1D5E8DB65485276FA1028AA0F906926714514E9CCD6C42BF4CE7C6149F40CACD7CB69E80416A01D0359B6CAA7AD7A88CC8F1B41BE9CB40B96D3D1878CDEF2B17D4B66FF14CAD731F3GBAD2A9361A447A2233536C906B
	ED76FEAC826A5E0FF5BFD0F72BC7BF6E797F51111FA10DD1CD53757A7107A373FBF664678A1D3D9D53A616175FB80DDD17CFA66767643A10FF84BF3F9F351FB3DA97FCB55D0327ED342A7F9FC23ACF61692BD6B325739F263E4ABC74775F1031B38C4654F9GF1A7F09E7A52F1920F73D0E532DDADD9ACEC58073806D6B226DF39E50DEA1CDEF20279A8CBA10E459B366A45CF66717E3A71E1BCBE2DC0AFFE9E0F3FE6C4FCECAB0BDF4969FBC8B73FBB7E55D1625F5B66BB7E33D1624F6A46E7FD0B743F3E4D9B7D
	2C9F1EED4AA273B3312FDF34F508E4A17035F89E577ECD2BB5F1ADC6CB3F5B2770C2931977DAD4EB88060FE9561FAF7D3C194C27FBF9797F5A3CDCA03E81D6A61B5F059BC919F607598ACBAE32A8D2FC4D55D6352F39G5AC77C52A6F83AGD85E77D71336E8653360A4491F130FFE68A0C89F8690231411FAD2D95F53F4DFF3DF70279CF716621C7027BE8DFDDC0733547EEA13F3076E3C12C004D2FE4CC92D6FEF5789D26EE240A71DC43DE878C63DBE2BF4BA258EB3F53DA83C7D73B76AB9A74389AD6F419354
	50A95743E45E057D333C0550CAFCB38ADA61717D9F7FDD7074B5551A4C32644065EF75GD579E629DAB209F5504555FCCA5EE2968708CED3FF7523DB10DF9927F04EFD69205AC7BE6F035C14773D70266694630969141BB776E77BD3D959E5DB316C50D3689FFF1C6362B92E3CGF1EBCE23ACB49E5273196A36D153B2D666ED5B304C86DE66EDE524CC3D7D058EDAC9F1D73F3938DFB693C715D1B6D21B285EE7F8002E2DC9D97E2751077F121D684ABC884781AC81E07E444AFC74A726FE97EDA87F8E75394E24
	56E7997041GD1G4C4E076593399D27DDD764E27E4E55CC0EB4669CE57E010FAA14FA974C1AA6249B8BF47795825FDA1E92771D626F7ECE352F9071073425G0A9FFF2FDAFF2292B6FA551F1AB32C0C56B3DA7DD977AD61278C7800B328BFD7342CD2694FF168D7D8B700E562EB5F9386E60314703E93E9E80384DC03BF39E5BCFE6F60B3683FECBEC97AA69C428BG9681AC8348EDC35A1EB9B12A9F3F5665430FFFE06BF868AAEFC33FC5543872B572FC15856349E76279EE5FB61EFCAE1E6FA18F1FFFE01B5B
	8F9952666913E4BE7943FDC4D7A25A18CFBE0D63DBA9BEC605E73A756FD467C8B89E62AA5A317EC37923519D5ABE1286166F1BD17345E872B1FD5BD6C846A4EACFD46AD9D676951F2031316F4EE1755817GE5259A238D05G65C6340143A634AD4DC614477BCE117283C99A00A800F8G61AC48A4C045D9144B6C56AFC615CBB6983049E53556BB234C757E73B421219D4A3573322556CC15BEB6CAE61B4CF5B177DBB27ECB8EF3175906384D9457A1B928D30879A4DF20E30C9F14994C4BBDFD523B8F2B63243E
	8F4BFCD25F07A51D746D079DB8694D474568EB590A740583B05C2FB8EEBE473596A0EEA1474D5D0638A59C779C9DA7040EE8431A8E447DD4A238D288B7F6203CB675D17B8761499CF70662E6C2B816637E436E4D27C8727912DBF914F8378E7C55EB9DFA7EF8B50C452F19C7533DA92F95F4FC03E4C9A3605AF1A8FF051226D6168E6F613A763B1DB97A3AC687E826E7819735FAC6783894A05D04FAF6A09975AC5F04E3F8F28631A72D9036838418106F7EA6DFF6A144B4123791A6146D08D35EE57B71D37A327D
	74A922E7CE295F51A1EA65B766D48E0FF36BAE711C915631B43F2479E52323CB74107F05B4BF0B73167F35D33E7D403FBDCDEC300B07FFC74367F97F0815ABF99D35B613E2A8587CFB89557FB46860EA81F1D62ADF33A173810E7B8D45350181798B47C9D4672EG5C6B4908DBC0F56EFED80CC8DCEE922C446ED80C6725FE2837C4A4697E40579CB150B789G69004F95595E88237B4181B2376DF4982D505CA63B58A1E4F5123CCFC81877A2248F8288870885C894F12E360E4E65D46B15A63B45CCE70CAC5E55
	C04A2E12E061EFE573C8A627C1FDEAB9ED6DE4747841F3B2GCBF334C7AB4BA44DCC080F6AC4D90E3A08323C3093E5F97190BDD3528565GD4F421AC57A4EBE539354BAD3F16AEEFE3F3BF558D3FAE6D586CC771133B34E3733B99B8B607C1DCC6B75A3F69A634FFF60E5B380F6022A09C570D7366CDB6BCD73398F079E66C27B70AB72A751FB8CC4A4A2AA462F7E8E01D4EF852E5CBD772371A11A7D3E819C1908E8308B263BA47359D57B9B3FFBACDE8705B2FFB96A821B9B7E521D9198F1B5DF358250F2CCBE3
	F53EAEE11D25BD503E9E02DBE5D74F7309BC9007D3B111EB9ADFBDA21E685E9CC19D5FBFA21E503BAECD9DFF4F08F84223DEA5BFEB5B3FEC4336AD7B17B041B2F72B57F3CE11BD2CCD714AB3713D0DC2517C2A9446776945DE66B8DC56998FE26838C56ADE530BFC7F65A05D4304308960E2AF4A6D35BDA83713F9DAABBDCF35G420BG1675225CBEF3D1AB37EBACEED9AD34F8135B5343243CF28B134FF7B93E1B621BD5F8A6F73F21FAC34296080B35200C1E2263C509B55AD0E7C55C8BA9A84B96AB52B918C1
	F073A09C47F157D0DC221579AB98AEB3C3BB4E12743E464EF92344FB0E655BBD6A78A146F0EEB7EC54EFE62AD142D9B6CF7A8C0A2C9994A800B425GDB95FC030D719F53E48BFB77915ABBA4CB3F55669442E99D7554BE6C848831A17F3659AE6FAC543E4B4CE799F7BEA6E7DD921127252AF6B23C1D6285490DE772B71D5B3D8C0833CB3886387B8C998762A01C8810EE871B88D081F05A0E738D57F73B05D1667F4D123D81A6A49655741835EF31F4F9E7441EFE976DCB44E3F78911573C1E6C4DC7E437B37988
	D21E81ABB6D2BCEBDFE9BBE9DF9444458388FD51069C00A2001ABEECDF54F7C52CFD447DD3A94B460EEE6ABD434691370F9BCD86F15636677BC83E56BEFD7D31G5ECF95B7398F4F0E55DE24BE6FBE6D1857C871737A34E35E2F86F14C0B053892874AEAE00F1637D39D6E7AE6BA3C592E5728AD0CF2E84F2E3DCD71318E6D59B52785FDCD8990D763C4BB95FF91EDD798471D9AC25B354009F41E25B6B18942D9F234E1370CF89B45937FD49D60AC9C3FF4085897120E2477A6A7243C714855C83D4B9CEED55EFD
	592E4BBDD341EC4E6FAEFA4E997D13F15E9584ED8B830885D8A4B3BF9D33FDCBD25076AD53E9BF6AF51AD2CFD6FF3421GE02D92AE6D575A3E6EF622D3E4AE5EE0BC8B33C40E4F4BD4705C21A0603EC1E406FA7C2F69E774F57763987BBA77A7DC845CA6011D43226BD27AAF7100A78EF4391F1CB937F711F726672FE5201E675EBFDD2879556B49E843BD7A3B1F71226E1CFB0E945377EC9AEBCB7B3E94F86E5D0D65068C287D07256FED766ABF74D34A1B2CBCCF17EFD4E444CA267F4A7BB9557B1D3609BAEB64
	164F47A6348EE677E61D713E0E1CFBC6FF9D797899FD9F4953E7FC2F6F1EBB637D1CCF6C9975B99FE637FF5ECD64EF817449E2000C819817GCA8650E61FE95BA2D01B2DE32FEBCDDDE49DCBCE3A4AD8FFE53B773656350FFEBE76D8BB59C3B9CB57DA24FC441FE8A77DA5CBF60AD4FCCFD45F68619B16D4411FEDA73AC0CE3490B433170B683C36915A55BD00B6744D8BE8C3AFF2DC7EA0BD8F8B61799CE721380590CE9CC05B79B5354929AE9867DC08EBE1B8A30CFB9C774A20AF79A2F93D45257A089BA9437F
	6B330E6FEBF7998FE65039FEA350E4F2A1DF36D810FF813C3DEFDA485EE2848F7FB78D477170F90BB7DAA346505E3171E31257BAFE0833FBECFCF96F920EAFC9AEB63EE41D077161BC7389371FA7E99CC379CA1A72731EEDEBD4F04C2EFEA8635841BC8C08AF7F1A68BBF5439C3593F70FF3E47C15C6120F1C5CC2BC73BB1C5B27672B8E03BA671DC75F4437B6F51AB80576548BA05397F09DBFB39967333B8157FD815771FB5AC72CA759BA7E1043EC2AB2F63105BC9B3F16A6631ABA64822E91372410B297C2B8
	91A0FD90473ABC8377698D0EF52CCBBC4046BAE30FA0F09FE327979FA39D16D9DD3F4D403ADA87D1B6970F70938681BEF45037CC32B170972754E3E0563477D3F0DE20CD9F2914B7FFD03B07B639174CC512G3F66A22C31G9A81CCG978102GC281A281E2819683AC83483A84B287D082D087F07A925A6D39DDE43D55E26C715CF1852452D154F8BB0CECAF005171A72A53F6A8A71017352C6BE39FE5B5BAA43B68104FB3ACBD19205861973B3D0F852FF40FBE963C51CD77584106B71F37AB7E4D373B69DEC5
	E727D364E3CEE2F7964755BB9BA52719A88A530FBF7711750C49FC4E8C83A1BD244A5624598E6C7F19504E58CB8477578B79BAFD06B06F12DADFBF9FA4F5F6C8B698FE7B25FEA713F9D6F663A04AFC4E907A982F9AA4F4C88EB370001DA3E0E9277334C5BC6D14DA0203259ED5E906FB63A3A2234CCB3EC751715F2E53731337C3B9B2AF6B319E4F3971AF39CFB2F00879D3C36199B94476AA98AF7EE671450B58A1B5AFB6FEC96690C7FB2BC9AFDA5881A9274A1F3F452A25135433884AC89AC2BB3377925A192C
	E11065E1348997AEA1FF7C0651FE04513411900E85D84C53CE9B42BE957C307D7FBAC41EB0EFD0F435A7CBBD8F0EBF7F7B64D5DEF43554CFB993616756D572E4F54D22BE8D52A741FEC8D774EAC2D79C0417G24DE0136724D74824167FDC8EE3ED959B75B704CC36E95D8F679BA6A6F023085407F8A3ED76B618F9E5B9899F519797EB86EFCEC4DFBAB357941D7E87DA8F7D0FC5895DABFCAE18A4AC3844465DC096D5DE2D057FF9170C1D77A36514ADAB7C30F6ED0A5EF24CE99EC0E738EDDFFAD38125147F029
	A241ADD2F04CEE165B08F4B1FBF4F74FB6410B3D04D973D7B0A49DBD5BA3F6484D46AE1EA72C573B2D1C5DBB3A2D0C6C551FB7BF596BB9EF7E27DE7DF973F33D6AF933F2D62C1748F0970C972DBC5D3FF15C379C371016C9F0A74CA6391B63DF25F491FC1DC8AAC47CA2CA57G4535AA3837D438EF955CEFFA097D02A6F7CB8E3EE755CB66141DE60B05057FC05318EDE07EB9BF16D19A4DF6230A6EE48B625CF43FE3A1FD4D57D3EC7842F3DB56B5823B63E0B6DA4C972859EE020436AEE6DBDE3FC07AFF2F406D
	60A02123DAA4F7C0F1EEB0A02A6DCD6E26FF77EAEF042B188C96DDB5525E30323B86896D1DC60B533D477A50A011B37509A237B73F382576F8F3FDF5E5C3DBD3E3C3FD3300F6EBC78E5A48762B5036B4EEA03AB6954261GB1D721CD7EE38F6AE08260F27C514ED67622CDEE7447B224DE12B6G42A1G117EE8FFDBA84F1BE0746966B41C64672FE2F97EB26ACFCD3F9A561FG25D7233E17DE3ABCBBF570B2738D0FBB9F33E339F45F2171EA2DFD5BC671272F565A37D9FC3C6B0638853C3DF78C296B5FFDCD34
	21669A5F760D591F99D2BEBCDBA12D8CB095A09CE0BEC0BCC0A2C07A35B81F3B516AEBBE47C5C8B5BBE4344D5927262DG4AAB3D56CDDB43355E7C201FE5133636DF2B5D432922F857355ABD1C185538079384F1CB2FC55E5C6A53075F9A602D7EF0BAF6DA8234FD73A8453B8234FDD3358E7B469F629687E07D414475257062EE55FBF14A447B298ECDE89DECDC7B1B41F32C7B52209E6B986E7DCC02EB388E569B5721AF401E093E006E6BF05EE35CCE782858CFBAACB0FC2EAB530D47E1C111634CBEA24711D0
	C69CC092C05675304681A887E884683E9E657889DB218FB9E61B4AEEA1E6FCAC4A514A107F752AFB3F57FB13217954C64E3CDEAB433194BF7FFA2D8C37ECC0990E07380A9BD0065E7158CB98DB7FE776DE269D9CF7BE562E5729BD8F3DC12BB3CBA8BE7C862D4E7477224E4C03387CC0ECEF1B47D9C27FC0953F833D71FB969D8FE686EA77EE9E257828C06D5ECD0504FBB7F190D7FAA31FAF8E891C979F2B5EA3AECD3C4EBEBF21F5B03DFBF888F55640F10F8F214E123D8A4587AD7970C1CB234FAF1F14746717
	73A54F7965F3127E7C729712677CB20E166B903BE0EE458E10B17C2FA5E2A3583A753051E66C22BEEB563E1F5135D7B074F1780DE8FFD61550B3A8900E6338207DE8131238BC1453B1276EC7518693007F0F90DFC771A1900E82C860781F2F46BE44BCD406FF747DFD15EEB9F91357E1905C7EDA6D7D7D6FA7A78F58109742CD58360757397561A955FB5D3A09578D63045641661EDBB249BAC18641E6BE4239C40414F38F57E6625EDF63CD5E777E705CC329F26EE12D02B75D6436FFCCDEF37A3C6B57263E5175
	2B30CFDF3F0A7BBC75EBDF1F3EFE7D2D4FD33F3ED44AF570831A8CDF5367DD3F2A699A418EED743F89F5A9FABD4ACF98171F1F51B1AE8E4209GD9C108FF1162CBA1FC9A400F63CFEF70B8B32343FBADA4EA5210FA3C4BD53FC79DE37179EB77C83C699E2B63ADF2C4CBF97F9F557BE06F446B4D64892D037575B9AB6E750486E17FA7F27B91437BB3025A732590CE3F99F1CFD1DCBE04ABB86E20640DE6126FF2E9DD2A4801B24F70DA47E8E726C633A3EEFB725ABE323EE73A843AF3B361CB52BEE2E35AEF4675
	EEE109273F75C0897ABF43EFE6FBC5B1700C3F191D47E076681E7DE80F166A70844FA0A024CF0AB664CEF21FC558BDC9FB962172F3621FEE6EF6084EEE49E2F2B22FAC0B7B4FBA3A27A49AFB693ED235E4BDABD5C9AE1E77CF6F2ED447AB079958F90541EC75F90572C92C8D26C9F8AF6A45356AF817929F42631F4D551EF7A0719113108F73ED480718C97A675154908FE992D5FCC83D454D8766EB084CC4DFC3964431F1E097D9EEA8EDBD196359DFFDB958DFF537307EEA0727FC8B5B57E5FBFBAF2D4FD75284
	5E62C9E748ADEA7F78F397082DEDF608A2B961B4F27F4EFE005C7522270E8F55B4B5F5B8A40B05244078F7F2093D2EB41958A5EC35F31DDDEFD67682D6ECD47B58A394DA1742B3FDB26E778D0C704367CFE6E99A60594E535CD828755513B4AE088F84E07C39031793BA1971E79EBCE38148BEAF5BBFF8D74A97BC7589E171E4B5FFBE213665E82FDAC69F7B180CA16A9D85A6BF7FADE9650F5419B4195FB3B66B45E7CCC17DDCD9C27ADE79BE1F285E375BBD78F6B21EF754521BBF05513BFB0A7B6C8ADBF7F415
	603A279D6226CEC19F596C92741145CEC19F57ABB4ED7A2D30BE82A83D9553AE5C0FB25AF82B5E3E27A0F85F778C6A9784348F9FB411B5344E3EA7E3A057090732C9B9C4A683EE4535FA17E523FEDEEE9DD85E4C8FC9DE32173504537F175CF4053E029FA36E77B6ECD3400F473B17BB679C89B13B7EC426FA7D9885E5457D587718417A65369CFE7E9C5267CFC53ADE4B61674A27E23FFC301E1EABA7E9G22F85A648D7CDC7ED4141F3FEDE0E3G1927A15F8DC3FB05B15EC7559881451F3A9177FB32EEC31A66
	533300F590EE87F05D467B29B6CF3F1F5426C3A9F73695772802F83957EC25F771A01CG10F49B367519C2CC1BB58D537E3A1052G61F6G57B4748B7F3395F99B843818E9D846877C4C3EB09D4B78BBBD8FDB8A61C6006E69484782090C1B35C627F2CE20500E674E7D2673BB46E664FF64F4BCC75BBEC072A5CEC79F10D5A667133C79004825E96631C7F93216DC1E9FE570B273C50CBB9F73F39C5BCF78169A2C753F1C24782CE02D7F65F5EE07F2A14EAF181FBF5A2F2EFF916013024732DF76C8365EFCAA63
	A74A5E44CF744BA8514157816EB400DD95476AD87DA1214D9F70D3F5724D84DC94C01CC73E14BCBD5A96AB6916E94A4A3A1D058B60D92A3CB7A84FF6F84AG8137EB6B785388DFF3B044075F6E1BEFEC1E9C176969C3FDA9D36DC3D57C7C9EFE483149538317196F0DF167E372F695350D73EF574AE1A045475E2E1543356BD18E63A12E628E1443659B54750782BE720E314861410D3E68DE20D386232F145A2804BB34F4D7D27C12BB34F47F0CFF87B88962CE07A05DE5CE2CBF8AF0F1A1A36BDB9C622D7EBFD1
	BB3BACC4FB76BB350060B36E541E7D8E5C0AE73FF3A14E6FCE3E46AE447A975D496ACA3A53DDE746DD5E6ABF32131417FF1756FF7AAD45175C25751FA694227F348E62E65E0575BF6F757B2F3E7B6D654B4C3766B26FE9BCC847192C995A7EFE0C62F3E7E87B3B1A5F53A804384099585ECF6CD8FF628CB7EFD3C359FB8EBC0BC2756E1EC71975682ED052B607FA76939B3FCC83E4BE619CB1C61DA01F6DD15E5BD56FEF15CC3CFFA1E57F447B97166E773411FF5C6F394F74921D27F6836FDC21680778F28D4179
	C3B818631A7B89AE9C428BB82EF4977AAB92B8AE0E7A45F75F9DED28399BF19F8D93DCAB046D9C37134EF17DA19C4CF1C19FE29DE19C37358D6B1847F1031FA1FD99BFC55C71FA2CA31F638A68F765CBA0DC43F157D1DCA3043BB96EB44DFB9142419C97CEF16190DE40F1AB689CBC8142099C77GBDFB19FACF3421609E44A573BBEF259CF765A6028B00F088477D154E9DA3A09C43F12BA46C37F78D58C79FCA58EFFB12D1062EDB6F1659C92A770D6BA7DEFECBA6348E651B499B108F59E9085B3281797013E4
	44FD3791F99DFF8F5A17AF2DEEFE9CD23D47FABD337C4371662D892D0335799879BC13D09486737DB0141B7BA84E8461C00ECB1511B7A1E1489B21004E6DF978BD9A4E38974313360EC6BF497B7DF8F47F28F5FC1FB3642C6D2F513556EEE8D7433D480FE917700ED7BB472D99C69E79F39EB46FA438B888AF6538B60A4B398FF47ABE443DD16861EB3F777B6FD9AD3DD76DF3FD47230E9F62FC3DFA7F8B56A1B6013FC7295E6B7F81F7034ECEE89D2C0FEB683A37957ACD3E8F7B7D5CAAEA0FA1BC1563DEDE0532
	904AF105F4FD3C94426977736F1D18B1EFAE471576E05E427BF17D1D18BDF2EF6CD9627ED57CF15F2CA17E9D2B51E53676DBD5E7262DF46CF5C1997E3C1C5EFE62C732BB44CE516190CD6CB340CAFAFFB6AEC35AF97723FF7768AE746FAE3EFF74FD37E510A6EB26FB5F2DE026564F7D769069AB51C6B653CCCA3DA943680758BD93695CBFCC5BE436E95AF418262D01F40DBCED4507A42DACC916E6331DDC59D36E5355DD90F85B9E2573010B10A7E0A6362D2C8D5B96B1D33FEDEABFFE8C2409D735ADD155B6D6
	C7A81DCBAC83FC7A83307E2438C1BA7617C038628124770B3C11FD19B8686E4B10BC7D3E0C24F38D8B14616265B86B096F741C68104D9DC68BE9B81E25E7F9EE2CC79FD1A84F734F755E7BBF01260F033489BCFDFEAEBD3BA9591433721F51F9CB462CE8C34EACCCB31F1E11C4BAAAAD66AE9B39F7464BFDB59969281B053C4F61F7B9DD3374F92F5EB78804B4A13318DF121EB11E25152B5BB6694B4B03F42E94856997F0FA575ABCE530081F61CE62B44A9BEB846F76C0AB7B6933C107E72B76F8E6FB5CB7F52E
	D37109B9G2B0C0EC649E26EB82F50F1959DFB49DD107259C86F53CEB2A96B169C668B508F1EB9114F2F503C643BAE97E7E39BB64A5806F93375772954ED0805B40BD4EDC872E8438DEB087C607E877BFAA55EE17A22C03D97119A4E76138B61D99E0EEDC9AA74AEFF2B6838588CE95B43F16F621F783D2D40F036F7918A4F48F036CF4D5A7871B036B1B6FC74EFA2AC02B4C9616EB6E6BC28ED23EBB35963717CB2AD5FD7ECA1F9B5DF5945A44A3E5B4DBB357B9A045E1C87F15F6335EDFA71C58FA21FCE593D73
	C926E3D085A90B273FF155C81B32739231A90CBF7F330A6B5A03236FD586C29A82E867C2BC78F3406C29BFADE63461B39F44FD3B06A1B78DC7FB1006A89D9A5E9D0506B8958D2CECE9D860745477933BE093877279B7FDEB4CE001488F27946E79FCDFD17E5E7DBB15FC6CE73E14FD2CDDE34947FC5BFE3B50371D7060F877C766A63B6BDCBF2CBE974E62F7985C710F2E9DFBDB3ECAF5674BE99BFBDBFA5B30ADB98F0DF77F4ACA2F6BA8FBD94B5D759F2A9FBB5DF35EF5673BB7F76C79DECCF767BBB6267AD85A
	507A4D4248F377CD64AFDE05F696D79DEDEEBEFA18376B0FAB5C757CF5635869AB4FF2673BB3F90BB65FC1B05E05DBCCE623C56A5AD2143F3BA8FF4F5E1D187E7749E3251175E1FD8A5F039CF39FE27B5AD6395F2FDC6D2679F7563173345AC66D0D23DF9C1F7C5C1D6D2EEF1A33C4505E07603BE22A8B9155470FB6B4D4D59EEF2BECEABBD2DBDBD3DB4372AFF56E75113F6E68717A13C70FB40FA861C8AD940BBCEC10791E27AE8FFD69F48CB15F0A6D6C9974F2FF158E0F2CAEE7816E17C5BD44776BF6506FFF
	C0B8EB8E0C13F350EE3E3D564D231BAEFD643DCF766DAF4A7FFC77CE74113E4D6FA8D4C0D92EB938AF37EF88EDF3789C2C5BC86FB9AC0630908163D28426BDBD0CBC599DB1DE39DAC94FA4AA5F255A09FB565D3C6C1C6D08DB9001ED5D1363EEEB6FAA9FEDC571D34A5F3A1A53B9D71FCED6FE73FAF779D6335A76AAF61DFF932BFBAE52F4658612072DA92F5E2576930710B4F347328FE2EFD3670B01BC71E34AF7A4C51DAF917224BEBC16FC47E4F53E9C48D3B426FCAE7A2D5A8AA5ED33AACFB73CDF54A9C359
	2F207B8FC18FEB7D77A7A8BE78E12D7FBEE1874AE69844E5BC423FB7F01977FE5E394CFC25C31737DF718255977BA35A763ECA71979F513637EB885B9BGF1CBF8FB0D436A7A9BA3238D264831745373BB09EF4325C99B288907681495214145C0B8BED2EFCFA4EFBB29A3D193177A6848F04E231EF594E9F09590EEFED42F0E42556A76F7C31A0BBA65F9663BFA44BD0CA04893BACABE66CB895E6539F7F167AE4F3D0BEB5BBC538536F92693D3BC537524F8266B16BD53D9E54FF4B751F1A1925A3260D1747F2C
	24F6B29142D90F716FC7D1DC8104ABB86E1E6D68A7EAFE0C7B9B8B854E336FD46FEF6C18F87F5BBB7F00BADED65D89D924FA378ECDFC5D57CCE89D2CCFDD43A8B7F3783E4425E1141B9BB96E37F4FCF5C13F87F1F9E821F2CD6EF985F35CA394978661799C3769E3020B05F082479D4EC3D9DA4AF1C74FD0DF5B63304EFE9CF18736E33DA60E8B590E755AB9AEF98756FB11634E6E40FA83B8EE76B92CB71863FE1C0775AEF1573B5AD31FEAD6FB6AD3F00F0E3E772853313940CF8B4818EFA55F6A93709C69935C
	FF118475E64D833D826886A0FB9AAC5F366DE46257A1DAACCD22721BAB35ECA14C56410CBF249E3FF91847311D14E9127AA1D9D5FFE7A7794996DC4B5F4053CF06746C9B38CFEEC7BA42GB78FA09EE099C06E93D86672DD7ABE4F3B49B635729ECFBE79223477673B483C4B28FC075CEAB55ACCBC5DBBF96EF41FFDBC525F57C0E5259C6A2DFB827DAD26BC6ECFF8E2FCF7B1884F831F507A93BA4F1005245568205FB3E7B479EDF237E3C63E7B7D594D6E773748928B79C8E5EBAA149D4A69FC769C52996705CE
	038FBA97BF2175B9E4104FC2A8637BFF9460790F25102E68C9BC6F7749A71F8BBE3E9DD15CE5F2964BC4DE2868151521930DFEB5D21913FE328DE54274A44E57CFED2373AA88C7GACF8125F575E6EF94F7C2E6D1E735CC5DC4E96BD095F4ADD3DC37B2D5C1B13555F3A2D99910F77605D7167C6442F70489FB6A2BECD15DFD9E7EFF74BDDE59E69D81D75F22583964C30DC5E837FCBF67276CC4943F9FB6ED3B8EF4FADF44B06EB173B6C996746D7769F4EE1594D3C6C69648A36B28E3CBD6A6FBB84BE25B77779
	632879BE5204D93E3D637ADD8882ECEE7A8BAAB3E1CFE9672C8BA9BE62A96D1C55388D672CD190D79005F30A3736DF5EDCFBDA1EBADFG14979CB516395E32F36AFC6110E77EA87958F76E233259BDE50B19DC06273F4E4C4BFCE11B3B7FDED53DF7ED1B78F9035F04564146388773BC473D0773BC47476C814FF4B9836AF46C370367D61C8662E77E171066F4889FF03D29279F6DC8B8372F4C707A8CC30A10DAAFACE7072B6B05D4F2132DDEC823975D6A8503AC59DD64872FD355606C93682C0D065EC32CAC24
	114BEEE5A3E2C749231FD696D6D51ACC796E0BB445454532300BFD0B4DE801D013A8679B7369CD19FCD94AF708F6C8AA5AA8D2B4764A427B6441921449C24AD1C0ADE7979B00952BBDDD9315BFFA69D7B35BEA562488A9400DEE11B5BFED00DC20278CA0AE0887A83999A3C27A8D4D98C78EE1549C5EC28EA1F304B1FC664E7DEFACF83545E99016578B6B49785FA4BA68E7D4C49379D1A665F7488F8AAB6C04B1E4BF82FA5CC99FE9CE793CC5EC9056F49EA73FF96614C5D3A5FE2045A98BEB69CF6DFDCA8E54FF
	DAE7F4F653616F0B86A155C6FEB1DDD84D22ADC6DB57276C6C779714EB491595343D99341D8EA11B52CBCAA96625E4BF7E41364DDFAD0AB488A9870577AC1251F49026B81223DED8A12384386C87D8C169D44C493449G45ED644DA70DADA6D3A8CEF42F6BA701190BB38F2640B86290BE25A94956CAB1CFE12A6EB6BA20AA51D1AF13DF00179C85BC6E0A0F646D4F9FDAF7BAC5C8D69AC9D83F5EE517994338C211A6979F842A65DF7F57F3F73DDC1E3884329C9452682FAAC145D96ED4C77A2DE7C547B5B32764
	3DBFB96186C2171D3007F6EA9E48E72751EA361C07179A6ADEC67C8A59E134B949CF9EC225791A96E394A73C781667F6CF3977CFA7A9616E2C323009F591E47D34CB142C1FD6F6F602096585C0FFC171F93CF81226D813E6356B6635DF3D704ED9102F9A41E05D3D1B7E5DC37F6EA5FF77D04C9E0A593397BAADD17079CF9B6FF211B6EFF7F1BD9921ABDEF4A9CD817ABE824BE3F94E03GDBBD5288A35210526BF99AEE2A483B87165CBFFECF9632083922FB074C64004224FC7925AC2C84BCC5A8D748B0FB0A9A
	E4A11BEDC3EACBA8AF87C34822C6AD04E257D10DEB2731F4F6CC319BBDD4A71520B751484DA4B9F9A970103B656C23D0AC99A9023C6C20411D74EF5165F5EF154B07617CE11AC0C25564CF6D8FC4F303971A591D361D436ABBEDC9D727F87D9E731298B687921E53FE0B7297B5F40D86785667701E4D261ACF846F5FB4EB329AAD9659E8692D341948774D2A4E4B227B1B44F1B524FCA726D1A2D95C4BB5046E9ED51E7F83D0CB87885171EAC52BAAGG4009GGD0CB818294G94G88G88G8EDF9DAD5171EA
	C52BAAGG4009GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG65AAGGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (10/24/00 3:37:40 PM)
 * @return int
 */
public int getButtonPushed() {
	return buttonPushed;
}
/**
 * Return the CancelButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCancelButton() {
	if (ivjCancelButton == null) {
		try {
			ivjCancelButton = new javax.swing.JButton();
			ivjCancelButton.setName("CancelButton");
			ivjCancelButton.setText("Cancel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCancelButton;
}
/**
 * Return the JSplitPane1 property value.
 * @return javax.swing.JSplitPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSplitPane getCreateGraphSplitPane() {
	if (ivjCreateGraphSplitPane == null) {
		try {
			ivjCreateGraphSplitPane = new javax.swing.JSplitPane(javax.swing.JSplitPane.VERTICAL_SPLIT);
			ivjCreateGraphSplitPane.setName("CreateGraphSplitPane");
			ivjCreateGraphSplitPane.setDividerSize(2);
			ivjCreateGraphSplitPane.setContinuousLayout(false);
			getCreateGraphSplitPane().add(getTopPanel(), "top");
			getCreateGraphSplitPane().add(getJPanel1(), "bottom");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCreateGraphSplitPane;
}
/**
 * Insert the method's description here.
 * Creation date: (10/26/00 12:02:12 PM)
 * @return com.cannontech.graph.GraphColors
 */
public GraphColors getGraphColors() 
{
	if( graphColors == null )
		graphColors = new GraphColors();
		
	return graphColors;
}
/**
 * Insert the method's description here.
 * Creation date: (10/31/00 3:07:24 PM)
 * @return com.cannontech.database.data.graph.GraphDefinition
 */
private com.cannontech.database.data.graph.GraphDefinition getGraphDefinitionValue()
{
	return value;
}
/**
 * Return the GraphPointsScrollPane property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getGraphGDSScrollPane() {
	if (ivjGraphGDSScrollPane == null) {
		try {
			ivjGraphGDSScrollPane = new javax.swing.JScrollPane();
			ivjGraphGDSScrollPane.setName("GraphGDSScrollPane");
			ivjGraphGDSScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
			ivjGraphGDSScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			getGraphGDSScrollPane().setViewportView(getGraphGDSTable());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphGDSScrollPane;
}
/**
 * Return the ScrollPaneTable property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTable getGraphGDSTable() {
	if (ivjGraphGDSTable == null) {
		try {
			ivjGraphGDSTable = new javax.swing.JTable();
			ivjGraphGDSTable.setName("GraphGDSTable");
			getGraphGDSScrollPane().setColumnHeaderView(ivjGraphGDSTable.getTableHeader());
			getGraphGDSScrollPane().getViewport().setBackingStoreEnabled(true);
			ivjGraphGDSTable.setModel(new com.cannontech.graph.gds.tablemodel.GDSTableModel());
			ivjGraphGDSTable.setCellSelectionEnabled(false);
			ivjGraphGDSTable.setDoubleBuffered(false);
			ivjGraphGDSTable.setBounds(0, 0, 200, 200);
			// user code begin {1}
			ivjGraphGDSTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
				
			//Color choices setup
			java.awt.Color[] colors = getGraphColors().getAvailableColors();
			String[] colorStrings = new String[colors.length];

			for( int i = 0 ; i < colors.length; i++ )
			{
				colorStrings[i] = com.cannontech.common.gui.util.Colors.getColorString(com.cannontech.common.gui.util.Colors.getColorID(colors[i]));
			}
			javax.swing.JComboBox colorComboBox = new javax.swing.JComboBox( colorStrings );
			colorComboBox.setRenderer( new com.cannontech.common.gui.util.ColorComboBoxCellRenderer() );
			javax.swing.DefaultCellEditor colorEditor = new javax.swing.DefaultCellEditor(colorComboBox);

			//Column inits.
			javax.swing.table.TableColumnModel colModel = ivjGraphGDSTable.getColumnModel();
			colModel.getColumn(GDSTableModel.DEVICE_NAME_COLUMN).setPreferredWidth(80);
			colModel.getColumn(GDSTableModel.POINT_NAME_COLUMN).setPreferredWidth(65);
			colModel.getColumn(GDSTableModel.LABEL_NAME_COLUMN).setPreferredWidth(140);
			colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN).setPreferredWidth(55);
			colModel.getColumn(GDSTableModel.AXIS_NAME_COLUMN).setPreferredWidth(12);
			colModel.getColumn(GDSTableModel.TYPE_NAME_COLUMN).setPreferredWidth(12);

			colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN).setCellEditor(colorEditor);

			javax.swing.table.TableColumn tblColumn = colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN);
			tblColumn.setCellRenderer( new com.cannontech.common.gui.util.ColorTableCellRenderer() );

			javax.swing.JComboBox axisComboBox = new javax.swing.JComboBox( new String[] { "Left", "Right" } );
			javax.swing.DefaultCellEditor axisEditor = new javax.swing.DefaultCellEditor(axisComboBox);
			colModel.getColumn(GDSTableModel.AXIS_NAME_COLUMN).setCellEditor(axisEditor);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphGDSTable;
}
private com.cannontech.database.model.DeviceTree_CustomPointsModel getGraphPointsModel()
{
	if( graphPointsModel == null)
	{
		graphPointsModel = new com.cannontech.database.model.DeviceTree_CustomPointsModel(true);
		graphPointsModel.setIncludeUOFMType(com.cannontech.database.data.lite.LitePoint.POINT_UOFM_GRAPH);
	}
	return graphPointsModel;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsTreeViewPanel = new java.awt.GridBagConstraints();
			constraintsTreeViewPanel.gridx = 0; constraintsTreeViewPanel.gridy = 0;
			constraintsTreeViewPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsTreeViewPanel.weighty = 1.0;
			constraintsTreeViewPanel.insets = new java.awt.Insets(5, 5, 5, 0);
			getJPanel1().add(getTreeViewPanel(), constraintsTreeViewPanel);

			java.awt.GridBagConstraints constraintsGraphGDSScrollPane = new java.awt.GridBagConstraints();
			constraintsGraphGDSScrollPane.gridx = 2; constraintsGraphGDSScrollPane.gridy = 0;
			constraintsGraphGDSScrollPane.fill = java.awt.GridBagConstraints.BOTH;
			constraintsGraphGDSScrollPane.weightx = 1.0;
			constraintsGraphGDSScrollPane.weighty = 1.0;
			constraintsGraphGDSScrollPane.insets = new java.awt.Insets(5, 0, 5, 5);
			getJPanel1().add(getGraphGDSScrollPane(), constraintsGraphGDSScrollPane);

			java.awt.GridBagConstraints constraintsAddRemoveButtonsPanel_Graph = new java.awt.GridBagConstraints();
			constraintsAddRemoveButtonsPanel_Graph.gridx = 1; constraintsAddRemoveButtonsPanel_Graph.gridy = 0;
			constraintsAddRemoveButtonsPanel_Graph.fill = java.awt.GridBagConstraints.BOTH;
			constraintsAddRemoveButtonsPanel_Graph.insets = new java.awt.Insets(5, 0, 5, 0);
			getJPanel1().add(getAddRemoveButtonsPanel_Graph(), constraintsAddRemoveButtonsPanel_Graph);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}
/**
 * Return the GraphNameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getNameLabel() {
	if (ivjNameLabel == null) {
		try {
			ivjNameLabel = new javax.swing.JLabel();
			ivjNameLabel.setName("NameLabel");
			ivjNameLabel.setText("Name:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameLabel;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getNamePanel() {
	if (ivjNamePanel == null) {
		try {
			ivjNamePanel = new javax.swing.JPanel();
			ivjNamePanel.setName("NamePanel");
			ivjNamePanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsNameLabel = new java.awt.GridBagConstraints();
			constraintsNameLabel.gridx = 0; constraintsNameLabel.gridy = 0;
			constraintsNameLabel.insets = new java.awt.Insets(4, 4, 4, 4);
			getNamePanel().add(getNameLabel(), constraintsNameLabel);

			java.awt.GridBagConstraints constraintsNameTextField = new java.awt.GridBagConstraints();
			constraintsNameTextField.gridx = 1; constraintsNameTextField.gridy = 0;
			constraintsNameTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsNameTextField.weightx = 1.0;
			constraintsNameTextField.insets = new java.awt.Insets(4, 4, 4, 4);
			getNamePanel().add(getNameTextField(), constraintsNameTextField);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNamePanel;
}
/**
 * Return the GraphNameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getNameTextField() {
	if (ivjNameTextField == null) {
		try {
			ivjNameTextField = new javax.swing.JTextField();
			ivjNameTextField.setName("NameTextField");
			ivjNameTextField.setColumns(20);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameTextField;
}
/**
 * Return the OkButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getOkButton() {
	if (ivjOkButton == null) {
		try {
			ivjOkButton = new javax.swing.JButton();
			ivjOkButton.setName("OkButton");
			ivjOkButton.setPreferredSize(new java.awt.Dimension(73, 25));
			ivjOkButton.setText("Ok");
			ivjOkButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOkButton;
}
/**
 * Return the JPanel71 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getOkCancelButtonsPanel() {
	if (ivjOkCancelButtonsPanel == null) {
		try {
			ivjOkCancelButtonsPanel = new javax.swing.JPanel();
			ivjOkCancelButtonsPanel.setName("OkCancelButtonsPanel");
			ivjOkCancelButtonsPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsOkButton = new java.awt.GridBagConstraints();
			constraintsOkButton.gridx = 2; constraintsOkButton.gridy = 1;
			constraintsOkButton.insets = new java.awt.Insets(10, 4, 10, 4);
			getOkCancelButtonsPanel().add(getOkButton(), constraintsOkButton);

			java.awt.GridBagConstraints constraintsCancelButton = new java.awt.GridBagConstraints();
			constraintsCancelButton.gridx = 3; constraintsCancelButton.gridy = 1;
			constraintsCancelButton.insets = new java.awt.Insets(10, 4, 10, 15);
			getOkCancelButtonsPanel().add(getCancelButton(), constraintsCancelButton);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOkCancelButtonsPanel;
}
/**
 * Return the PeakPointComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getPeakPointComboBox() {
	if (ivjPeakPointComboBox == null) {
		try {
			ivjPeakPointComboBox = new javax.swing.JComboBox();
			ivjPeakPointComboBox.setName("PeakPointComboBox");
			ivjPeakPointComboBox.setToolTipText("Optional...Set a Point to represent a Peak");
			ivjPeakPointComboBox.setPreferredSize(new java.awt.Dimension(173, 25));
			ivjPeakPointComboBox.setMaximumSize(new java.awt.Dimension(173, 25));
			ivjPeakPointComboBox.setMinimumSize(new java.awt.Dimension(173, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPeakPointComboBox;
}
/**
 * Return the PeakPointLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPeakPointLabel() {
	if (ivjPeakPointLabel == null) {
		try {
			ivjPeakPointLabel = new javax.swing.JLabel();
			ivjPeakPointLabel.setName("PeakPointLabel");
			ivjPeakPointLabel.setText("Peak Point:");
			ivjPeakPointLabel.setMaximumSize(new java.awt.Dimension(173, 25));
			ivjPeakPointLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
			ivjPeakPointLabel.setPreferredSize(new java.awt.Dimension(173, 25));
			ivjPeakPointLabel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjPeakPointLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
			ivjPeakPointLabel.setMinimumSize(new java.awt.Dimension(173, 25));
			ivjPeakPointLabel.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPeakPointLabel;
}
/**
 * Return the PointOptionsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getPointOptionsPanel() {
	if (ivjPointOptionsPanel == null) {
		try {
			ivjPointOptionsPanel = new javax.swing.JPanel();
			ivjPointOptionsPanel.setName("PointOptionsPanel");
			ivjPointOptionsPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsThresholdsButton = new java.awt.GridBagConstraints();
			constraintsThresholdsButton.gridx = 0; constraintsThresholdsButton.gridy = 0;
			constraintsThresholdsButton.weightx = 1.0;
			constraintsThresholdsButton.weighty = 1.0;
			constraintsThresholdsButton.insets = new java.awt.Insets(4, 4, 4, 4);
			getPointOptionsPanel().add(getThresholdsButton(), constraintsThresholdsButton);

			java.awt.GridBagConstraints constraintsPeakPointComboBox = new java.awt.GridBagConstraints();
			constraintsPeakPointComboBox.gridx = 0; constraintsPeakPointComboBox.gridy = 2;
			constraintsPeakPointComboBox.weighty = 1.0;
			constraintsPeakPointComboBox.insets = new java.awt.Insets(0, 4, 4, 4);
			getPointOptionsPanel().add(getPeakPointComboBox(), constraintsPeakPointComboBox);

			java.awt.GridBagConstraints constraintsPeakPointLabel = new java.awt.GridBagConstraints();
			constraintsPeakPointLabel.gridx = 0; constraintsPeakPointLabel.gridy = 1;
			constraintsPeakPointLabel.anchor = java.awt.GridBagConstraints.SOUTH;
			constraintsPeakPointLabel.insets = new java.awt.Insets(4, 4, 0, 4);
			getPointOptionsPanel().add(getPeakPointLabel(), constraintsPeakPointLabel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPointOptionsPanel;
}
/**
 * Obtains the point tag from the LitePoint.
 * returns default value of GRAPH_SERIES 
 * Creation date: (4/23/2001 8:23:06 AM)
 * @return java.lang.String
 * @param pt com.cannontech.database.data.lite.LitePoint
 */
public String getPointTypeString(com.cannontech.database.data.lite.LitePoint pt)
{
	if( pt.getTags() == com.cannontech.database.data.lite.LitePoint.POINT_UOFM_GRAPH)
		return com.cannontech.database.db.graph.GraphDataSeries.GRAPH_SERIES;

	else if (pt.getTags() == com.cannontech.database.data.lite.LitePoint.POINT_UOFM_USAGE)
		return com.cannontech.database.db.graph.GraphDataSeries.USAGE_SERIES;
	else
		return com.cannontech.database.db.graph.GraphDataSeries.GRAPH_SERIES;	//default
}
/**
 * Return the JButton2 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRemoveGDSButton_Graph() {
	if (ivjRemoveGDSButton_Graph == null) {
		try {
			ivjRemoveGDSButton_Graph = new javax.swing.JButton();
			ivjRemoveGDSButton_Graph.setName("RemoveGDSButton_Graph");
			ivjRemoveGDSButton_Graph.setToolTipText("Remove Graph Points");
			ivjRemoveGDSButton_Graph.setText("<<");
			ivjRemoveGDSButton_Graph.setActionCommand("RemovePointButton");
			ivjRemoveGDSButton_Graph.setFont(new java.awt.Font("Arial", 1, 14));
			ivjRemoveGDSButton_Graph.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRemoveGDSButton_Graph;
}
/**
 * Return the ThresholdsButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getThresholdsButton() {
	if (ivjThresholdsButton == null) {
		try {
			ivjThresholdsButton = new javax.swing.JButton();
			ivjThresholdsButton.setName("ThresholdsButton");
			ivjThresholdsButton.setText("Add Thresholds...");
			ivjThresholdsButton.setMaximumSize(new java.awt.Dimension(173, 25));
			ivjThresholdsButton.setPreferredSize(new java.awt.Dimension(173, 25));
			ivjThresholdsButton.setEnabled(false);
			ivjThresholdsButton.setMinimumSize(new java.awt.Dimension(173, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjThresholdsButton;
}
/**
 * Return the JPanel2 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getTopPanel() {
	if (ivjTopPanel == null) {
		try {
			ivjTopPanel = new javax.swing.JPanel();
			ivjTopPanel.setName("TopPanel");
			ivjTopPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsNamePanel = new java.awt.GridBagConstraints();
			constraintsNamePanel.gridx = 0; constraintsNamePanel.gridy = 0;
			constraintsNamePanel.gridwidth = 2;
			constraintsNamePanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsNamePanel.weightx = 1.0;
			constraintsNamePanel.weighty = 1.0;
			constraintsNamePanel.insets = new java.awt.Insets(4, 10, 4, 4);
			getTopPanel().add(getNamePanel(), constraintsNamePanel);

			java.awt.GridBagConstraints constraintsPointOptionsPanel = new java.awt.GridBagConstraints();
			constraintsPointOptionsPanel.gridx = 2; constraintsPointOptionsPanel.gridy = 1;
			constraintsPointOptionsPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsPointOptionsPanel.weighty = 1.0;
			constraintsPointOptionsPanel.insets = new java.awt.Insets(4, 10, 4, 4);
			getTopPanel().add(getPointOptionsPanel(), constraintsPointOptionsPanel);

			java.awt.GridBagConstraints constraintsAxisPanel = new java.awt.GridBagConstraints();
			constraintsAxisPanel.gridx = 1; constraintsAxisPanel.gridy = 1;
			constraintsAxisPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsAxisPanel.weightx = 1.0;
			constraintsAxisPanel.weighty = 1.0;
			constraintsAxisPanel.insets = new java.awt.Insets(4, 4, 4, 4);
			getTopPanel().add(getAxisPanel(), constraintsAxisPanel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTopPanel;
}
/**
 * Return the PointTreeViewModel property value.
 * @return com.cannontech.common.gui.util.TreeViewPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.cannontech.common.gui.util.TreeViewPanel getTreeViewPanel() {
	if (ivjTreeViewPanel == null) {
		try {
			ivjTreeViewPanel = new com.cannontech.common.gui.util.TreeViewPanel();
			ivjTreeViewPanel.setName("TreeViewPanel");
			// user code begin {1}
			ivjTreeViewPanel.setTreeModels( new com.cannontech.database.model.LiteBaseTreeModel[] { getGraphPointsModel(), getUsagePointsModel()} );
			ivjTreeViewPanel.getTree().setCellRenderer( new com.cannontech.common.gui.util.CtiTreeCellRenderer() );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTreeViewPanel;
}
private com.cannontech.database.model.DeviceTree_CustomPointsModel getUsagePointsModel()
{
	if( usagePointsModel == null)
	{
		usagePointsModel = new com.cannontech.database.model.DeviceTree_CustomPointsModel(true);
		usagePointsModel.setIncludeUOFMType(com.cannontech.database.data.lite.LitePoint.POINT_UOFM_USAGE);
	}
	return usagePointsModel;
}
/**
 * Build up a graphDefinition and return it.
 * Creation date: (10/24/00 2:36:02 PM)
 * @return java.lang.Object
 * @param o java.lang.Object
 */
public Object getValue(Object object)
{
	com.cannontech.database.data.graph.GraphDefinition gDef;
	com.cannontech.database.db.graph.GraphDefinition gDefInfo;

	if (getGraphDefinitionValue() != null)
	{
		gDef = getGraphDefinitionValue();
		gDefInfo = gDef.getGraphDefinition();
	}
	else
	{
		gDef = new com.cannontech.database.data.graph.GraphDefinition();
		gDefInfo = new com.cannontech.database.db.graph.GraphDefinition();
	}

	gDefInfo.setName(getNameTextField().getText().trim());

	if (!getAxisPanel().getLeftAutoScalingCheckBox().isSelected())
	{
		gDefInfo.setAutoScaleLeftAxis(new Character('N'));
	}
	else
	{
		gDefInfo.setAutoScaleLeftAxis(new Character('Y'));
	}

	try
	{
		gDefInfo.setLeftMin(new Double(getAxisPanel().getLeftMinTextField().getText()));
		gDefInfo.setLeftMax(new Double(getAxisPanel().getLeftMaxTextField().getText()));
	}
	catch (NumberFormatException nfe)
	{
		nfe.printStackTrace();
	}

	if (!getAxisPanel().getRightAutoScalingCheckBox().isSelected())
	{
		gDefInfo.setAutoScaleRightAxis(new Character('N'));
	}
	else
	{
		gDefInfo.setAutoScaleRightAxis(new Character('Y'));
	}

	try
	{

		gDefInfo.setRightMin(new Double(getAxisPanel().getRightMinTextField().getText()));
		gDefInfo.setRightMax(new Double(getAxisPanel().getRightMaxTextField().getText()));
	}
	catch (NumberFormatException nfe)
	{
		nfe.printStackTrace();
	}

	gDefInfo.setType("L");

	GDSTableModel model = (GDSTableModel) getGraphGDSTable().getModel();
		
	int point = getPeakPointComboBox().getSelectedIndex();
	if (point > 0)
	{
		//setup and add the peak point to the graphdataseries
		com.cannontech.database.db.graph.GraphDataSeries gds = new com.cannontech.database.db.graph.GraphDataSeries();
		gds.setType(com.cannontech.database.db.graph.GraphDataSeries.PEAK_SERIES);
		gds.setDeviceName(model.getRow(point - 1).getDeviceName());
		gds.setPointID(model.getRow(point - 1).getPointID());
		gds.setGraphDefinitionID(model.getRow(point - 1).getGraphDefinitionID());
		gds.setLabel(model.getRow(point - 1).getLabel());
		gds.setAxis(model.getRow(point  - 1).getAxis());
		gds.setColor(model.getRow(point - 1).getColor());
		model.addRow(gds);
	}
	
	//java.util.ArrayList dataSeries = new java.util.ArrayList(model.getRowCount() + usageModel.getRowCount());
	java.util.ArrayList dataSeries = new java.util.ArrayList(model.getRowCount());
	// Copy the graphdataseries into a temp array to loop through
	com.cannontech.database.db.graph.GraphDataSeries[] temp =
		model.getAllDataSeries();

	for( int i = 0; i < temp.length; i++ )
	{
		// add any graph (and peak) points to the graphdataseries (stored in temp array)
		temp[i].setGraphDefinitionID( gDefInfo.getGraphDefinitionID() );
		dataSeries.add( temp[i] );
	}

	gDef.setGraphDefinition(gDefInfo);
	gDef.setGraphDataSeries(dataSeries);

	return gDef;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getNameTextField().addCaretListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("CreateGraphPanel");
		setLayout(new java.awt.BorderLayout());
		setSize(651, 411);
		add(getCreateGraphSplitPane(), "Center");
		add(getBottomPanel(), "South");
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}


	//Setup peak combo box for default "no peak point"4
	peakPointsVector = new Vector();
	peakPointsVector.addElement("no peak point");
	getPeakPointComboBox().addItem(peakPointsVector.get(0));
//	getPeakPointComboBox().addActionListener(this);

	addDataInputPanelListener(this);

	//Add ActionListeners to the add/remove buttons.
	getAddGDSButton_Graph().addActionListener(this);
	getRemoveGDSButton_Graph().addActionListener(this);

	// user code end
}
/**
 * Insert the method's description here.
 * Creation date: (10/27/00 11:46:27 AM)
 * @param event com.cannontech.common.gui.util.DataInputPanelEvent
 */
public void inputUpdate(com.cannontech.common.gui.util.DataInputPanelEvent event) 
{
	ivjOkButton.setEnabled(isInputValid());
}
/**
 * Insert the method's description here.
 * Creation date: (10/27/00 12:24:35 PM)
 * @return boolean
 */
public boolean isInputValid() {
	return (getNameTextField().getText().length() > 0 );
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args)
{
	try
	{
		javax.swing.JFrame frame = new javax.swing.JFrame();
		CreateGraphPanel aCreateGraphPanel;
		aCreateGraphPanel = new CreateGraphPanel();
		//frame.setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage("GraphIcon.gif"));
		//frame.setTitle("Yukon Trending Reports Editor");
		frame.setContentPane(aCreateGraphPanel);
		frame.setSize(aCreateGraphPanel.getSize());
		
		frame.addWindowListener(new java.awt.event.WindowAdapter()
		{
			public void windowClosing(java.awt.event.WindowEvent e)
			{
				System.exit(0);
			};
		});
	
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	}
	catch (Throwable exception)
	{
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * Action Performed for the Remove Button on the Usage Tab.
 *  Removes objects from the usagedataseriesTable
 */
public void removeGDS_ActionPerformed(javax.swing.JTable table)
{
	int[] rowsToRemove = table.getSelectedRows();
	
	GDSTableModel model = (GDSTableModel) table.getModel();

	//Remove the point from the peakPoint options.
	//for loop is from largest to smallest index so we never hit an index already removed.
	for (int i = rowsToRemove.length - 1; i >= 0; i--)
	{
		
		//If point removed is peak point, set peakPointComboBox to "no peak point" (index 0)
		if ( (rowsToRemove[i] + 1 )== getPeakPointComboBox().getSelectedIndex())
			getPeakPointComboBox().setSelectedIndex(0);

		getPeakPointComboBox().removeItemAt((rowsToRemove[i] + 1 ));
	}

	model.removeRow(rowsToRemove);
	table.getSelectionModel().clearSelection();
}
/**
 * Insert the method's description here.
 * Creation date: (10/24/00 3:37:40 PM)
 * @param newButtonPushed int
 */
public void setButtonPushed(int newButtonPushed)
{
	buttonPushed = newButtonPushed;
}
/**
 * Insert the method's description here.
 * Creation date: (10/26/00 12:02:12 PM)
 * @param newGraphColors com.cannontech.graph.GraphColors
 */
public void setGraphColors(GraphColors newGraphColors)
{
	graphColors = newGraphColors;
}
/**
 * Insert the method's description here.
 * Creation date: (10/31/00 3:07:24 PM)
 * @param newValue com.cannontech.database.data.graph.GraphDefinition
 */
private void setGraphDefinitionValue(com.cannontech.database.data.graph.GraphDefinition newValue)
{
	value = newValue;
}
/**
 * Retreive the graph data series upon the init of the createGraphPanel
 * Creation date: (10/24/00 2:35:45 PM)
 * @param val java.lang.Object
 */
public void setValue(Object val) 
{
	com.cannontech.database.data.graph.GraphDefinition gDef = (com.cannontech.database.data.graph.GraphDefinition) val;
	setGraphDefinitionValue(gDef);

	//set Name with the GraphDefinition.Name	
	getNameTextField().setText( gDef.getGraphDefinition().getName() );

	//set AxisPanel, Left/Right AutoScaling  T/F  ----------------------
	if( gDef.getGraphDefinition().getAutoScaleLeftAxis().charValue() == 'N' ||
		gDef.getGraphDefinition().getAutoScaleLeftAxis().charValue() == 'n' )
	{
		getAxisPanel().getLeftAutoScalingCheckBox().setSelected(false);
	}
	else
	{
		getAxisPanel().getLeftAutoScalingCheckBox().setSelected(true);
	}

	if( gDef.getGraphDefinition().getAutoScaleRightAxis().charValue() == 'N' || 
		gDef.getGraphDefinition().getAutoScaleRightAxis().charValue() == 'n' )
	{
		getAxisPanel().getRightAutoScalingCheckBox().setSelected(false);
	}
	else
	{
		getAxisPanel().getRightAutoScalingCheckBox().setSelected(true);
	}

	//set AxisPanel, Left/Right Min/Max values from GraphDefinition  ----------------------	
	getAxisPanel().getLeftMinTextField().setText( gDef.getGraphDefinition().getLeftMin().toString() );
	getAxisPanel().getLeftMaxTextField().setText( gDef.getGraphDefinition().getLeftMax().toString() );

	getAxisPanel().getRightMinTextField().setText( gDef.getGraphDefinition().getRightMin().toString() );
	getAxisPanel().getRightMaxTextField().setText( gDef.getGraphDefinition().getRightMax().toString() );
	
	//Insert/Display all graphdataseries in their respective tables
	java.util.List gds = gDef.getGraphDataSeries();
	java.util.Iterator iter = gds.iterator();

	GDSTableModel model = (GDSTableModel) getGraphGDSTable().getModel();

	int selectedIndex = 0;
	int peakPointID = 0;
	while( iter.hasNext() )
	{
		com.cannontech.database.db.graph.GraphDataSeries elem = (com.cannontech.database.db.graph.GraphDataSeries) iter.next();		

		if( elem.getType().equalsIgnoreCase(com.cannontech.database.db.graph.GraphDataSeries.PEAK_SERIES) )
		{	
			// get the pointID value for the peak point ( need this ID to compare
			//	  it's location in the table to that in the combo box)
			peakPointID = elem.getPointID().intValue();
		}
		else
		{
			// Add elem types: Usage, Graph
			model.addRow(elem);
		
			// get a string to put in the peakPointComboBox to represent the graph items in the table
			String label = elem.getLabel().toString() + " :: " + elem.getDeviceName().toString();
			peakPointsVector.addElement(label);		
			getPeakPointComboBox().addItem(label);
			selectedIndex++;
		}
	}

	// Set the Selected Index for the peak point combo box:
	// get the peak point to be displayed the combo box by comparing the pointID's of the peak point and
	//    it's corresponding graph point.  Need to do this because usage points may disrupt the order.
	if( peakPointID > 0)
	{
		for( int i = 0; i < selectedIndex; i++)
		{
			com.cannontech.database.db.graph.GraphDataSeries peakGDS = (com.cannontech.database.db.graph.GraphDataSeries) model.rows.get(i);
			if( peakGDS.getPointID().intValue() == peakPointID)
			{
				getPeakPointComboBox().setSelectedIndex(i + 1);
				break;
			}
			
		}
	}

}
	/**
 * Insert the method's description here.
 * Creation date: (10/24/00 4:07:55 PM)
 * @return com.cannontech.database.data.graph.GraphDefinition
 */
public com.cannontech.database.data.graph.GraphDefinition showCreateGraphPanelDialog(java.awt.Frame parent)
{
	javax.swing.JDialog dialog = new javax.swing.JDialog(parent);
	dialog.setTitle("Yukon Trending Reports Editor");
	
	class DialogButtonListener implements java.awt.event.ActionListener
	{
		javax.swing.JDialog dialog;

		public DialogButtonListener(javax.swing.JDialog d)
		{
			dialog = d;
		}
		
		public void actionPerformed(java.awt.event.ActionEvent event )
		{
			if( event.getSource() == getOkButton() )
			{
				if ( ivjGraphGDSTable.getCellEditor() !=  null)
					ivjGraphGDSTable.getCellEditor().stopCellEditing();
	
				setButtonPushed(OK);
			}
			else if( event.getSource() == getCancelButton() )
				setButtonPushed(CANCEL);

			dialog.setVisible(false);
			dialog.dispose();
		}
	}
		
	java.awt.event.ActionListener listener = new DialogButtonListener(dialog);
		
	getOkButton().addActionListener(listener);
	getCancelButton().addActionListener(listener);
	
	dialog.setModal(true);	
	dialog.getContentPane().add(this);
	dialog.setSize(800, 511);
	dialog.show();

	getOkButton().removeActionListener(listener);
	getCancelButton().removeActionListener(listener);
		
	if( getButtonPushed() == this.OK )
		return (com.cannontech.database.data.graph.GraphDefinition) getValue(null);
	else
		return null;
}
}

package com.cannontech.graph;

/**
 * A panel to create and edit graphs.
 *
 * Creation date: (10/23/00 3:24:57 PM)
 * @author: 
 */
 import com.cannontech.graph.gds.tablemodel.*;
 import com.cannontech.database.db.graph.GraphDataSeries;
 import com.cannontech.database.db.DBPersistent.*;
 import java.util.Vector;
public class CreateGraphPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.cannontech.common.gui.util.DataInputPanelListener, java.awt.event.ActionListener, javax.swing.event.ChangeListener {
	public static final int OK = 1;
	public static final int CANCEL = 2;
	public static final int GRAPH_TAB= 0;
	public static final int USAGE_TAB = 1;
	public javax.swing.JTree treeViewPanel = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private int buttonPushed = CANCEL;
	//private javax.swing.JTable graphDataSeriesTable;
	//private javax.swing.JTable usageDataSeriesTable;
	private GraphColors graphColors;
	private javax.swing.JButton ivjThresholdsButton = null;
	private com.cannontech.database.data.graph.GraphDefinition value;

	private boolean showPoints = true;
	private javax.swing.JPanel ivjPointOptionsPanel = null;
	private javax.swing.JLabel ivjPeakPointLabel = null;
	private javax.swing.JComboBox ivjPeakPointComboBox = null;
	private Vector peakPointsVector;
	private com.cannontech.database.db.graph.GraphDataSeries[] peakPointsArray;
	private int peakPoint = 0;
	private javax.swing.JTabbedPane ivjBottomTabbedPane = null;
	private javax.swing.JButton ivjAddGDSButton_Graph = null;
	private javax.swing.JButton ivjAddGDSButton_Usage = null;
	private javax.swing.JPanel ivjAddRemoveButtonsPanel_Graph = null;
	private javax.swing.JPanel ivjAddRemoveButtonsPanel_Usage = null;
	private javax.swing.JSplitPane ivjCreateGraphSplitPane = null;
	private javax.swing.JPanel ivjDataPointsPanel_Graph = null;
	private javax.swing.JPanel ivjDataPointsPanel_Usage = null;
	private javax.swing.JLabel ivjNameLabel = null;
	private javax.swing.JPanel ivjNamePanel = null;
	private javax.swing.JTextField ivjNameTextField = null;
	private javax.swing.JButton ivjRemoveGDSButton_Graph = null;
	private javax.swing.JButton ivjRemoveGDSButton_Usage = null;
	private javax.swing.JPanel ivjTopPanel = null;
	private javax.swing.JScrollPane ivjTreeScrollPane_Graph = null;
	private javax.swing.JScrollPane ivjTreeScrollPane_Usage = null;
	private javax.swing.JTree ivjGraphPointsTree = null;
	private javax.swing.JTree ivjUsagePointsTree = null;
	private javax.swing.JPanel ivjGraphGDSPanel = null;
	private javax.swing.JScrollPane ivjGraphGDSScrollPane = null;
	private javax.swing.JTable ivjGraphGDSTable = null;
	private javax.swing.JPanel ivjUsageGDSPanel = null;
	private javax.swing.JScrollPane ivjUsageGDSScrollPane = null;
	private javax.swing.JTable ivjUsageGDSTable = null;
	private AxisPanel ivjAxisPanel = null;
	private javax.swing.JPanel ivjBottomPanel = null;
	private javax.swing.JButton ivjCancelButton = null;
	private javax.swing.JButton ivjOkButton = null;
	private javax.swing.JPanel ivjOkCancelButtonsPanel = null;

class IvjEventHandler implements javax.swing.event.CaretListener
{
		public void caretUpdate(javax.swing.event.CaretEvent e)
		{
			if (e.getSource() == CreateGraphPanel.this.getNameTextField()) 
				connEtoM1(e);
		};
	};
/**
 * CreateGraphPanel constructor comment.
 */
public CreateGraphPanel()
{
	super();
	initialize();
}
/**
 * Insert the method's description here.
 * Creation date: (4/24/2001 10:38:52 AM)
 * @param event java.awt.event.ActionListener
 */
public void actionPerformed(java.awt.event.ActionEvent event)
{
	
	if (event.getSource() == getPeakPointComboBox())
	{	//update the current peak point when a new item is selected in the combo box
		peakPoint = getPeakPointComboBox().getSelectedIndex();		
	}
	else if (event.getSource() == getAddGDSButton_Graph() )
	{
		addGDS_ActionPerformed(getGraphPointsTree());
	}
	else if (event.getSource() == getAddGDSButton_Usage() )
	{
		addGDS_ActionPerformed(getUsagePointsTree());
	}
	else if (event.getSource() == getRemoveGDSButton_Graph() )
	{
		removeGDS_ActionPerformed(getGraphGDSTable());
	}
	else if (event.getSource() == getRemoveGDSButton_Usage() )
	{
		removeGDS_ActionPerformed(getUsageGDSTable());
	}
}
/**
 * Comment
 */
public void addGDS_ActionPerformed(javax.swing.JTree tree)
{
	com.cannontech.database.data.lite.LitePoint pt = null;
	String deviceName = null;
	
	//Get the object selected in the tree.
	javax.swing.tree.TreePath path = tree.getSelectionPath();
	com.cannontech.database.model.DBTreeNode node = (com.cannontech.database.model.DBTreeNode) path.getLastPathComponent();
	Object selected = node.getUserObject();

	if( selected instanceof com.cannontech.database.data.lite.LiteYukonPAObject )
	{	// The device and all points are added to the GDS, e loop through the children.
		
		java.util.Enumeration e = node.children();
		while( e.hasMoreElements() )
		{
			pt = (com.cannontech.database.data.lite.LitePoint) ((com.cannontech.database.model.DBTreeNode) e.nextElement()).getUserObject();
			deviceName = ((com.cannontech.database.data.lite.LiteYukonPAObject) selected).getPaoName();

			// Create the GDS to add in the tables (and peakComboBox maybe).
			GraphDataSeries gds = createGDS(pt, deviceName );
			
			GDSTableModel model = null;	//Abstract TableModel
			if ( gds.getType() == GraphDataSeries.GRAPH_SERIES )	//GraphGDS created.
				model = (GraphGDSTableModel) getGraphGDSTable().getModel();
			else if (gds.getType().equalsIgnoreCase(GraphDataSeries.USAGE_SERIES ))	//UsageGDS created.
				model = (UsageGDSTableModel) getUsageGDSTable().getModel();

			model.addRow( gds );

		}	
	}
	else if( selected instanceof com.cannontech.database.data.lite.LitePoint )
	{	//A single point is added to the GDS
		
		pt = (com.cannontech.database.data.lite.LitePoint) selected;
		deviceName = ((com.cannontech.database.model.DBTreeNode) node.getParent()).getUserObject().toString();

		// Create the GDS to add in the tables (and peakComboBox maybe).
		GraphDataSeries gds = createGDS(pt, deviceName );

		GDSTableModel model = null;	//Abstract TableModel 
		if ( gds.getType() == GraphDataSeries.GRAPH_SERIES )	//GraphGDS created.
			model = (GraphGDSTableModel) getGraphGDSTable().getModel();
		else if (gds.getType().equalsIgnoreCase(GraphDataSeries.USAGE_SERIES ))	//UsageGDS created.
			model = (UsageGDSTableModel) getUsageGDSTable().getModel();

		model.addRow( gds );

	}
	else	//The tree label ("Devices") was selected...not acceptable.
		return;
}
/**
 * connEtoM1:  (GraphNameTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> CreateGraphPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (1/15/2002 9:40:15 AM)
 * @return com.cannontech.database.db.graph.GraphDataSeries
 * @param point com.cannontech.database.data.lite.LitePoint
 * @param deviceName java.lang.String
 */
public com.cannontech.database.db.graph.GraphDataSeries createGDS(com.cannontech.database.data.lite.LitePoint point, String deviceName)
{
	com.cannontech.database.db.graph.GraphDataSeries gds = new com.cannontech.database.db.graph.GraphDataSeries();
	
	gds.setDeviceName( deviceName );
	gds.setPointID(new Long( point.getPointID() ));
	
	String gdsLabel = point.getPointName() + " / " + gds.getDeviceName();
	if (gdsLabel.length() > 40)
		gdsLabel = gdsLabel.substring(0, 39);
	gds.setLabel(gdsLabel);
	
	gds.setAxis(new Character('L') );
	gds.setColor( new Integer( getGraphColors().getNextLineColorID()) );

	// call to obtain the type from the database (pointUnit)
	String type = getPointTypeString(point);
	gds.setType(type);
	
	if( type.equalsIgnoreCase(com.cannontech.database.db.graph.GraphDataSeries.GRAPH_SERIES))
	{	//add to the peaks combo box if of type graph
		String label = gds.getLabel().toString() + " :: " + gds.getDeviceName().toString();
		getPeakPointComboBox().addItem(label);
		peakPointsVector.addElement(label);
	}
	
	return gds;
}
/**
 * Return the JButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getAddGDSButton_Graph() {
	if (ivjAddGDSButton_Graph == null) {
		try {
			ivjAddGDSButton_Graph = new javax.swing.JButton();
			ivjAddGDSButton_Graph.setName("AddGDSButton_Graph");
			ivjAddGDSButton_Graph.setToolTipText("Add Graph Points");
			ivjAddGDSButton_Graph.setText(">>");
			ivjAddGDSButton_Graph.setActionCommand("AddPointButton");
			ivjAddGDSButton_Graph.setFont(new java.awt.Font("Arial", 1, 14));
			ivjAddGDSButton_Graph.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddGDSButton_Graph;
}
/**
 * Return the AddGDSButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getAddGDSButton_Usage() {
	if (ivjAddGDSButton_Usage == null) {
		try {
			ivjAddGDSButton_Usage = new javax.swing.JButton();
			ivjAddGDSButton_Usage.setName("AddGDSButton_Usage");
			ivjAddGDSButton_Usage.setToolTipText("Add Usage Points");
			ivjAddGDSButton_Usage.setText(">>");
			ivjAddGDSButton_Usage.setActionCommand("AddPointButton");
			ivjAddGDSButton_Usage.setFont(new java.awt.Font("Arial", 1, 14));
			ivjAddGDSButton_Usage.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddGDSButton_Usage;
}
/**
 * Return the JPanel4 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getAddRemoveButtonsPanel_Graph() {
	if (ivjAddRemoveButtonsPanel_Graph == null) {
		try {
			ivjAddRemoveButtonsPanel_Graph = new javax.swing.JPanel();
			ivjAddRemoveButtonsPanel_Graph.setName("AddRemoveButtonsPanel_Graph");
			ivjAddRemoveButtonsPanel_Graph.setPreferredSize(new java.awt.Dimension(35, 70));
			ivjAddRemoveButtonsPanel_Graph.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsAddGDSButton_Graph = new java.awt.GridBagConstraints();
			constraintsAddGDSButton_Graph.gridx = 0; constraintsAddGDSButton_Graph.gridy = 0;
			constraintsAddGDSButton_Graph.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsAddGDSButton_Graph.insets = new java.awt.Insets(4, 4, 4, 4);
			getAddRemoveButtonsPanel_Graph().add(getAddGDSButton_Graph(), constraintsAddGDSButton_Graph);

			java.awt.GridBagConstraints constraintsRemoveGDSButton_Graph = new java.awt.GridBagConstraints();
			constraintsRemoveGDSButton_Graph.gridx = 0; constraintsRemoveGDSButton_Graph.gridy = 1;
			constraintsRemoveGDSButton_Graph.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsRemoveGDSButton_Graph.insets = new java.awt.Insets(4, 4, 4, 4);
			getAddRemoveButtonsPanel_Graph().add(getRemoveGDSButton_Graph(), constraintsRemoveGDSButton_Graph);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddRemoveButtonsPanel_Graph;
}
/**
 * Return the JPanel41 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getAddRemoveButtonsPanel_Usage() {
	if (ivjAddRemoveButtonsPanel_Usage == null) {
		try {
			ivjAddRemoveButtonsPanel_Usage = new javax.swing.JPanel();
			ivjAddRemoveButtonsPanel_Usage.setName("AddRemoveButtonsPanel_Usage");
			ivjAddRemoveButtonsPanel_Usage.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsAddGDSButton_Usage = new java.awt.GridBagConstraints();
			constraintsAddGDSButton_Usage.gridx = 0; constraintsAddGDSButton_Usage.gridy = 0;
			constraintsAddGDSButton_Usage.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsAddGDSButton_Usage.insets = new java.awt.Insets(4, 4, 4, 4);
			getAddRemoveButtonsPanel_Usage().add(getAddGDSButton_Usage(), constraintsAddGDSButton_Usage);

			java.awt.GridBagConstraints constraintsRemoveGDSButton_Usage = new java.awt.GridBagConstraints();
			constraintsRemoveGDSButton_Usage.gridx = 0; constraintsRemoveGDSButton_Usage.gridy = 1;
			constraintsRemoveGDSButton_Usage.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsRemoveGDSButton_Usage.insets = new java.awt.Insets(4, 4, 4, 4);
			getAddRemoveButtonsPanel_Usage().add(getRemoveGDSButton_Usage(), constraintsRemoveGDSButton_Usage);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddRemoveButtonsPanel_Usage;
}
/**
 * Return the AxisPanel1 property value.
 * @return com.cannontech.graph.AxisPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private AxisPanel getAxisPanel() {
	if (ivjAxisPanel == null) {
		try {
			ivjAxisPanel = new com.cannontech.graph.AxisPanel();
			ivjAxisPanel.setName("AxisPanel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAxisPanel;
}
/**
 * Return the JPanel61 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getBottomPanel() {
	if (ivjBottomPanel == null) {
		try {
			ivjBottomPanel = new javax.swing.JPanel();
			ivjBottomPanel.setName("BottomPanel");
			ivjBottomPanel.setLayout(new java.awt.BorderLayout());
			getBottomPanel().add(getOkCancelButtonsPanel(), "East");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBottomPanel;
}
/**
 * Return the JTabbedPane1 property value.
 * @return javax.swing.JTabbedPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTabbedPane getBottomTabbedPane() {
	if (ivjBottomTabbedPane == null) {
		try {
			ivjBottomTabbedPane = new javax.swing.JTabbedPane();
			ivjBottomTabbedPane.setName("BottomTabbedPane");
			ivjBottomTabbedPane.setToolTipText("");
			ivjBottomTabbedPane.insertTab("Graph Points", null, getGraphGDSPanel(), null, 0);
			ivjBottomTabbedPane.insertTab("Usage Points", null, getUsageGDSPanel(), null, 1);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBottomTabbedPane;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GBBDA47ACGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155FD8FDCD4D576B86D5AFE5DDFECDF7BAE5B3AC53B7CB63735EFD636CB65963BD151E6C59B3514D454D2CB061B89DBD436517AE478A7020220D27E9B949495792FA2629F84941514E4C4D4D4C6E60451E1E61CF9A8AA55775CFB5F3973664D1B61CF51677B7563613DFB6E1FF36EB9671EFB5F39773D91F2D785A44FCD4C950439490274EF6BDCC168F8DC909E3A3273G62A67FF116C6107D4B874896A2
	66A641B598722AFCE2B5D9C212B18D5261102E3D942BD98A77B942BF1BBB26400D87BAD510977E0B5E9FF92733A99169245274A35A8C38AEG08GDC82C0531FE6817DE95ABC892F057482691E405CC4C10823E57A0F6549703ED2399038C6G78BDC24A3C27DDAE65D7C31A14E9012B6191D6F6G2E73A8F75757D4CB65BAEE7293421F7EA8A5135012350F90A9559502252B70CD8A9104C6F8F943C6385636DC685E59E56DAD6952DBACD60BE86C6AA969366BEDBDB5B575F623DEB46EA309963D45E896EC4104
	47DF9ECB237501C7C8A7D05C12F6A217C0388F85088EC6BE1F4F2C1578703B60A7845F7E8F0FFC6EFE1471E7F85449274FAD8FA666BEC65ADF161FA1551BG7911G0C172EFC64257DB164E55BD1D2F69C24A78284F33C50C67091100E83C8FB9CF95C318EF9EC3FF63B90F1767354059EF854BE4EF8EBFA5C49E3C76B34544F28ED7CC1C374BB8672A6828481C48188A133B4DA00E554A645448DF02DBBAB56DBFBFB2D16BA1BED0F59E07F42EAB01A613E2686F2A45C91E31755EE9084E6F7379FABD6618721BA
	44556688303E9D9350CEA69D39C55009D92949AAFD73FB716314E6290D4E90E75F26049039BDCDF56B8377249E99DB8C7FBA45A74870CCD74BA91E242B1EGD9BF01F2EEDF003CB4A75DA84415ADCFCDD561257F316C54C9FF1646461F1D3CB0997FB41948B88E7099CF4E5294G5482F4G8CBC09B27ED3E265E0B25E8FF6EE37684D2DFDE7EDFA3B38274FE4B6986D122C73733D49DA8DD83D52E157E3F219D8A957D1506F17294AA5E82210BA7EC9A60F49CFBA6542E877F8249D76243BEDAC60BA3C1B0E1568
	A7198EB59C7FA045474B70CC373BA81E2413264E5274G3072A29DDB21D3156DFCCD7111D3156D2434E1BBB3A12F6529D99A265F72D4627F82A19D869083A0BC8D638720962065E95471BCCD699047D10BCC3F2C6EE31AA5F0B5760BF67DFE0BC354DB3A0CEDFA3BC9FF56ECF488D219E7283FBF6BD2AF0C0E6FAE20314FE8B15A752249EA0156753DC6B0A687AB7332A61B14A10E93F2F526DEA390683589586E9B1A9C381A758E71284DG4E55D902654F20E365123E8DDA048660BE60E9A22F07284F35413D6F
	53A82B53E984978D6984AE97C352A2389E8463B61AEBEA9ACCDD048D3D7D8A5AE8D8BB31132CE7E6E94281460702DC1F85FF8D507917D91A2467E6E9A6816842C06E4F039FFB9E476E2CF63451064CDF8899AFFE2EEA2354C73E406C2D7A85250DC6D35A1D00778188G88860882907E8ABA86588D508960839070D71CF3D737CF1635CFF847FB42B33912FE48F9A0FDD272C57A06771324FB52C7E5B952E752FFA5BEDA25CD0470E75C73986FDF3A702E115DE74A4AA9FD02322D05327BEC693AD8259CDB773863
	67FB601BC0328A0E59D768BCB2C603C18F11G89FFC59B7BD512160D3DBDFA0791C75BE1BB8C942341E9F12C2CFFB2615DF849E8919B0CB62345GB78E4956EFCF1E679C07672CFC0C5CC97144AF5743C0F1F07C3D49598C8FED48C7B566BFC8737522E8B71D6D930D2DC6D1B4D93A1D759F213CB8DCDC3EC36A6BDF52C9DFF343E7E90A81EA43312FCDA9B9327154EC35DE6833690827104665B7F47D518265FB4251DEFFFF142C99FDF97A0FB46D4CEFBC5A6EC59F5F861CB4CF0F9A8D8D376D2BEDC912ED3174
	981A1E48F948E8734403B7FB9CAAB09A059EE9E83E839A4C863627FA3661BD296AB65C142AEE4307D23D5BE8DB2A1A0D323CD3F46DE63DEC11597C59D4626F3B2C960B118EBCDEC5E0EB7CD9BA528F1345A49EB3993A0DE22B692AD190E607935BFD1E4EA9E1F09F9D0EFE7E729A747385D7FFA6841C79A0C5ED3D587F1B5C545A97194FEBF951696799CFDDE9E4AC994D46DE90D43D354FA2B23C094ED7925E212138A7CEBC88D7ED5191D3F70FD857EFF25475095656AE3D9924F2C4EFB0D97774092255D2EC92
	0D3DA564CF2B8833E6FD0F5E52EDB4941D57DF521768AF0BA5D4B9A57BA13F115C2D57EE5A34D32BFCFCA936FBA7F2E63F327DE6CF84362FEFDBDFDEA130BEA4B96E27FDE8B61E9B75AE183D5298EE8FAA25F112A32C317F0C76214EE0585750AAF12C27A6D542AEADC67BB92B3D571D65BA1A6D0DE93D2C51B3F52E2DD53831A8EB0FB06964712544DB182D98FB2D170C5FBD1BF657F6151C8E46E89572F9AD47C27924CD9F0265218E7C43DE1351ECA86E0249CBAC21FF597A0FF259DF62388C0A141A2DA7395E
	78BCE7329B77DBECFD5884505E0C346FEE3A59CD0F657FBB943985F98CEE3DD5CD0F5F9D1B5FD211DBA5BEAFF45DB23A32BC6A50F70F1CCDAECF3F26006FC31E5F0E5B2D0C575083373A49748CA5753F43C8ABA5193E5EEB22FCFEEF43D7DA074E4DA0F3278D6654B1G7EAF62BA742DB4120F6BD0E931DDEFB51B59348FF939AF11B9FD5571DC59BC9D78A20BD18A10477283D473BBF8FE7E8935FC9B4F7F35EA7E981E3F6624BCFF7CCBACFF81676F70C9357A4E7CEB03647FF6107C3F8E12BFC7B5BF02736F53
	6109FF26079766E511751971E21F5152E5A48F82870DD77059FF5EA2C5DE1B5E5C670CA93CB10F2CFB4D32E788068FCFD7DFAF3D12CE565397F87B2F272788A4B6405AE46B3B49FA52264DEE6A05C7AE72D0A4451AEF4E17471AE7C2BFC8DC3AE05AACCDB5G2BBBFF91690B52BE2327117A7737E19C3A8552BDGE32731B6C226B1F914C510F2B1BC96DC4AF1F3A8AE967E7CB899E3DCDFE44963558D0ECC55B8A481B10235BFB6C2997B2B4BA46DCE847C14889C976D73654FE7F58E07354BC4C3AF12ECD3B364
	EBCE064B48C807AB8CC307389F96737D281FC59904D7921B1150120C6F5A38C3F00FB5B59ACC22550E0F3F7517691057D96B2D86E39328381EAF495BCC464BC4C7B4865DF69C65959A01EB6E2F764AE3647E8B93D367FB10CD524BCCA685AFBBE51356BAAD1535BD0D37EDF89963636DA790674FF1AFF3DC784BE88BAD7B54E2262AFDD4740C353925835B4CF8855BCCBDC362BD2A7B8BFD2612BE51C4A2D4FAD1CF1DA135BD561630BACD12FD43AB983BAFAEA4E3E4G52FEG13GD89C71F59EC78CA1E5DF41F1
	5CF3C5BE0E2BDE859F876083407CFB63B1E22F43746712BD042CDF446CC7614651566FDE39DB229BFA4F0DC2CCE73A6AFE02F9464C943FD7199E03DEF56AB36F6110440497D625C9717B8A793889081A6BF15CA4C532B672A21563E64DC2A24FAA40B7C5623879C9C636EC5C9C81FD427382F8A49C8BFBB3B54C77C86983194968FB84FC76BEF9FCB8716E0EC80CDBF6E6915D58A06D8BB081A088A0127376FC6620717B46FEAF717B48E171159009710AD3A706D3AF6BB52C777A306A9570FA5BBB06D32F1A57CB
	DE2D2C577C1AACA67A1AFBAC12456283689892DFE33178E40E3F0B62474A70ECECD5D0BCC97BC31E70BA520FEE9B0CEF436B2EBC30FA6F8DDAEF2C229E9BEF05C5E4AE22FEC4B6BCEBEA8E7005991B7362AB65F3DEG34958290831070BA7A3EDFDDC15F127BB734478732C97B4D106E817081708788860884902250AED7AD58BE28DD32C900ADAA6B15D199E90D7761A24203965AAD63EDDFDB10A99B0FADD613C564E331E8A119772DF6D337490238CD9457E53553E0900BC55A297F5F8DEDF670F6FB32BC472E
	2CD96A312B3EAC75585535AC6F71579FE6F90AEDB17E5E677C59G98CEBC0138B19C7781470D6738A39D081B44F14B69BC918C69F00E7BF88D414D06F4569BE82FF794D27F87E99D475DC7F1E6C80F63386AC2CF31C4D24F1B5DD68D126F9C83DFFA242196071743D06219ABE83937454502CACC10BC4A88784C386C58BC29CC23E87D221C0F35775767290FB5BABF33F176EA19F21C91B98682CCFD834759FFED46F19675864E61250708BF49FB936C9E2069CD147B04AB5E7CC2671B2E32955FC45B8E4E76EC5B
	CFE62B5B763359E41CB92CFD76AE2352FE433373F81EF36C120899919DAB739A2DAF6A6D5DC6B77B0F2675D91E277A6FE6FB0F7FFE32087860FE1E1EC353D738FE0CF58BB80DC60BC1F294EC5D7DE3BA3E12C1417582625269D83A97AA6F62389BA86E8CB810CFB9AE63A441DD87383F4FC51C090E393B60A1444A6D26F2B571BBE67D95EB9F500DFF1314BB309A6DE1AC2483G2682C43E4976C4985F77DDA6EB5AF3F6FDAFF43755E66C92427ECE6AE695E05DDAC837G58G4681CC7EBB2E55169A48FAC1761C
	52EAB31B6802116577B7133677D861013F171DD3E1F67A77C2391D66C5B3FEF643D587404AAC392C34E5D2468C79BE51E84BB965E84B6323511637D792DB8E03F48C0070965A724FB7ABEDB96FAD277D963F65E9EE3E1D0E0D5DEFA96766FBA8DE7716F2EE5EFC8867669E488BFD8B7D5F43D7507F15CDC75CD727884E8752FE53F15DECDF0D67E9A682AEEABA6AE9FA49B27978A701121A1ABDD692EFE8E6CAE7B2F9087ADED2BF6FED14C98CED338552BDGBEEF6373CD7FDAFC3E19F4470DC2314F32D435B3C0
	413A445471EFCB6B61371DEBD89BFF3E59D200B4E7C3FED98C41998A646BFCE28FA450D4C26C1A665F6C12CF465E6F85F97ED417FC426F52E4F97E3FDC72090CAEC875D95F1EA9443EA5BC63AFB45FBFCF35EF847AE3D81F7C256B94CDE5CA522DFF1164FEEB0907B58E37F5A603E5EB53A45A61B1A87702B2A2770C9970FC8FD0BB836D7650E534DB5D8CACDBF5051475057484002099E837F965CA3B8D1F61345518991E6C76DEBA8E92E6B07BCC657807A9BE779FCEBC333BBA0AA769E2489B778F3451FB68FC
	918F6934F790D73495ED39789D64734EC384B7GE9BF0E8B2438496F30B8053436BE241CE7C9F9EFF36740A0796EF3394E0D46F7B107F33FB113486005AB8DD2BACC05BF0DE4EB9A8922214CEC00B592BEE3A613BF1649917CCE915E3B2C663EDE0BC330D19AF7D17F309E20F3A64A2F5F6D99E3E8B27951886BBDB26CFA4C4E9EDAC34F9D4A7A49700FD3FC308C4F6CEF9677FB2110D776AEBE835C17CB6681BFC8CF86188A9085A04C1A25D9BE8B579BE3F24A04C1567FBA2B2D9996A4E65972D8324702111D8D
	FBB4957DCB60C3B78B63FF74D40A2758D059ACE9BF962F0915A9644A7A573004744F87727C810281A2GE682A445E27FC2F30AD97FC85827CE9475DDBDB4EA061DA3619EA71ACC622CEF5A3524DEDE2C7A78A9867CEED91EAE964F0C0D27FE2BA7D6B9675DCE7183314AB9EFC3994EF963A0AFBE96ED357532D2366DF1CEFA66B8CF3EEBA27505BEF14AB3EB3F2378F1F14AB3EBB5D7B05694GF9C97FC4BFD5DA0E3E2B07636E29C05F657BCF6473FE6A7B26C0BA8CA00E639F25F8921FCAFB8FFC5DFB085FD7C9
	7CCB1CD45E63B87012B778386B24B4D2856F3EEB24E7A9184F59DB6E3EE61C369957DDAD505F9E00F1G935EE3F1BA667BF6EDC55F97741EFB9FF1DCA7CBF44220CCB440E2A9BD7BBD256F6B69A4E30A2C451B75E7E1154871ABB2A5BC8FA88838DFB07D10FC7ECFFA1F71D774BE4E311A2BB8475682EE15404EDF919C7B97374B9D876B777749D9737FA00FEB52B8FFA3834779723B7ED3A81876D48A7AF0B7FD3F4FE411966FDCA3B9E57D5829C438D614E13B81176571433C74D40F71435DD2FBBA69DA3039D2
	BA3797CCD8116C65A959FD7C6A51BAE364344F4CB523C903793D07F2BDBFC7BE1A2B7E9C79E42EFA0C6459DC6F4FF7AF66FABE5F9319ABBF5F437C76DBAB097D7902CEA6820482C4814447234FBE3FF835C0FD360A3FEEB4F41367D8F242D5C47ADFAC715CD75D12414F451EDAC276CE4E52E7AD52BE623B1690FD09D69BC5CA3127A5C4C674508DABAA61ADCBE86C45F80E22193F5CCA5735D99F40587AGFDE8CDA97A50DA0EF3D0DC8F2447F05CA394B79E5213BFC05F794BB2028B01F484475D49F0700C974F
	F1E5E5A335AF523692977101DA5CF37F08E92879DD251FE6B2B8CF577AF99F427C71A14AE5C6BF4A2F65C36C6FBDD7481E62GCFCF21E9FF1E5EFD45932F244EF7B3260FFB2471DD1C59E3734B29F21CDF02BFE473CB84DCE7FE48E242C59F11B2CFD4E825B2C99F3977ADCF42B13F3AC4443903C59890DFFB100CF79A06B9ECA3619E07EB7E8F74249EB93105F896F708B825962B36814DB19FE1EC4232C4DE467FA3D6A6942ED19F61F37C1C4D381E1D8D383259789CDF5E6972BC491E637759CD06BD7AEE76A0
	4F662FFDDB70193AE7B6BEA376EDA1ED86C0FA8AC058EC1C6BECDBF12E0B19BD5439AEEE971B6B7A0928B146F84EC30C11CE4B0C560A43C8CB7BB15AE65AD579BA2F9D70660F3D5BA41B831FBBA91F8363FE714F94DC97A84B7BC86D79FE2C5CC3FBA01F2CC502819F89A07C8B56A8G45G8DG6DGE6G9F0071G1381C2GA2GE682A4GE4FD824F671F7035768A723C5526BF6F3E538AC8C9D154F95B75ECAF0071311C46372B219D9DEFABE765C6AFED35582DB623DD3C423074C40264075FDD69F9AE08DF
	B978DC7069CA3A378EBEDCF745A645B793D7513D0AF3679CC6BE67242E4A62387D0E962B43C4868A9B9F075612679903691289A6C2FAB815BD131EDB0B7A97211F63BFA138AFCB3502E7DD0F79C4BEDE7FDFA92159E53540745BE76DF3C8B6CF5B3E3D94EDBE6A930CB13ED4CA78305ACDA083F6FE00151D454B467332BFEBA4B8F85423C31A61667493FAAC8629531FBDEBB410CCB60EBFAD160F63228496AF574135A7815B3C6E327B9AF9BC0FCD7AA430386AF838CECAE0FB96CCA64295EFB289C9104BE459CE
	3216B8FC211EE8534C8EC8B9E4F17D99D714BE09500900B6E6A6203F393E9C7DCD5227B0AFFF0A3E6159F2141378A97A11CFE859C9108E810864E55F2DC05D46FF0A7DAF2CA4D7D8BFC8E376FC16FCBD9CF4655514EC8FE336785F2C0F6D7FF6DD8FB3DAD92789AD62BF467D9B79AA9489DFD3A19D85B07B5F68B35FCEAB903C3E8F495DB8EB7B0EA5F866A1EB8E36FD2018345D8469CE007EB9FC4FF64B4862A2B9A32C57BC6CFA6C59F786757D6366A863A96FD13C7F9CE5BC655A969EC7063C8CA1D66AEF5FD6
	B9FD9B6047G8C4E776A43EAFC0F176ACED2E9032DF5D6516730E0481F4BF1859497A161187FB49195CBFEA9C8DBA8F8701B30FABEGD3536133670DDD22CE5F4D6BBC1D6F59E7BE1FBF384FFCA5DFFD7D9C156F3EFEFEABDFFD7D7CCE3EFC7D4CF0F17944063BE15EE86765BE6038639C77AF5AA6419DB399449E0E97D627CB78A6A3A108781455042F4B9457AE61664BF047A5DC965D9702AE77D86DD8F771EA3236BCE7B21BD97AB3DA46E401E9004BE365EA4223492617713D06631CFC672FA13A664FD5EC9A
	437D71B53982FB474124B71B2ED2775D8A85AD5D4C37ECA9A57A2F90508FDACA899F75C6728EA82E91AE9B657EA6E165939E7DCD3CE4035A3931AA4F5F8F15925E4F694D8E67DEEBF29931B37949A2E7D43F242D7108EEFFFDDD73195616667DBA8157C89B53C8F0C06D4C831FDC8474F11BB771B8BF70447C5002929AEB02F498C08CG9B2F4117F13C8A09311AEAG56C6DABF7AEFDBA23631251F141D8869E00088G561F95D7882DD61829FAB88F79BC8E92476B4F9DA0750BB4311A5DG6D9A748DB7386DB5
	8C4D277DE20475DE98F6BD66732C9574AC2EA6D6618B7BA9FEC006E7321DDB01329D8BF9B3F9FF5F2B1053EFC90A5598123C7BC2662B428A35F06D0732FEGD3G42G228192G3212E3B5C5GD28CE30D37B5A0B7B7590A12713678341C3786E82FBD59491BB9591DCFA603DF50B954A7B9D6316F739B0A9FAF43B359EC94F15FE7B264652620EC6EDA62CDB77DA91E687F094E333EA9CA5DBCC97163D3143AE9A9665F8F003C34D4249F3BC560F6B2DBF6FF5D16510FED5DB22AB4589C683B55FDDE3CE92BFCDE
	E438ED74F94B8CF299GE038DF9E467841D840B13F24DFCB64A879DABA05B07C727ECCA79E2790490EEB5691BB0E00B662817252E2B5E5G8DG9DGB60031E9E8477FA8A872E247ECA35AE944CC0EB51B089CA724F99FD3C39A77AAEDB03B7A81752721E9310A3D0A1FD0FC148C4F6CAD378477AA62A12FFD9E5A5B1F5D76AA06E6AB61A32C1759BFB25F775F5477874DD30E2F5FD37C54F94A71D55B0F63AB9C722A53313FEB2FAA697B27BBE5BCB95D133C7B685C91122E14378F45C724AB651DBA00721E89F9
	AD7379BA14CC7B12AC3E165D27D60C7E78560EAA8DB6C667D5627856F05C02CA9C5FE4AF040D2BD78BBD2FDB5FAC9CFC5D7ACE217A3A751F056E6B568F8B55572D89056E6B5639EBC93BF6E3B72C595881B5A9E63016789376BC7C055E226F26B1F1563FE27ACC9788BA1EBA9FFDD5F6A7414D0434100138F1FA74DF8599E88F3F2273108869F1G13B97EAE0A8F0574CC000CCC44170B28C32CC36DB6635B7B9A271D9C60B4B402B33E2B7CAE4037331347167033943CEFA1454E71702C6C3E2DF8744706F5D4E9
	30F5EA4BE1727CA102E13398643BE4EA114ED55CFF98779687B25DF5A95FB724FB0952390A4592FEDC26537FB1FBEDDC67F9FCB52F9BFCFC9DDD27BE3ECE2EF39FDF1D6B54475739F56E636B02542E1D9FGE5780B6BBC0F2F8E7ABC618FFD8C4C44317478A6341FE0EEBFE3CB681803F45A82447D14628AA05D44F11F178CC557248DF9FA260ADEBC5BD36510E8A877CE063A5F40E8CCA647B2257BBF486E77740F7EF8B9B92AB4180EF7DC45BDA47382547B0357D06F6338BE2F8D90DC902443B86EC794978369
	3405084B9C7044F35802117B4FA0292E343E70C8E33033D803798F3C66887527C93C000DA10C4D1EB80D3152A2686FEE00FEGDFGF2060355AB6AF40F696E6A44FA9320AC59178A02EB18D40F79265F6A51B745ACF417931EF7C0C800B2D9D9317C5CC3C1D62C625CC35DD6921B5675580D0E9E2B5960E011DF16770FA63AFFE554DF20FBD875565E3356BD56FEDE77DF298B6479524189F6B662F5D1FEB622AC0B75219D2EAC7F3ED572FC33146F47734B76AA4FD6107C09104F64707292FE7EA34BDD8E9A8504
	C119E8199CE64B6440E29453791ED2D2F62C064D89E7496758243EBAB611BDG51EAB56BCCB6F294C4BA27F1BDF93496581E61AB1B34DE6C26B6BBD696EF5F58C8FCACBD313C2F2155F5DF70138612072FD43B6E8DBED1220C43137D6A96E85BG404A34AFD2ABB3G7963G182D1D3B0AE5A6E6B3DB8B06EBB8G596FE57B87FF39662DBFB3DD7A3349C264F778025CFE9E5AC856CD729D85265BA983CA5BA0B49332D177F7DB54723396E11C6A8727712CD58160BA966173675BF45F4C7BBB05BA13E8B66E1106
	2B247B27CFE32C5EEF914627CE1F21EBBEC8C7939C275D5D094FB239B9311A669C0C115D5B09B132B1B95846EB34EC90244381E6723291FAEEEB3931AAFB250260F92FF4A2DD0B317EAEEC7DCCD00D83B2E1737EAD6EA36D901B2A4DC5D9F51B17295765231C550DD9C56A925B8F48C57E3B7726C97CC5F0DC7AD2FE56E931DA1F3C6D7FBE330924184FFE47A546AFC2DBE397FB1F8F182DFD340979E132C642FEFFCA579BE46D653F98F552DDC3F4A2AC81BF82D03684799F37884BB6AD413275DF51BDAAC807G
	C4AEC19B3871AA5AC0BC600A17E29BAFDDC59BB0AC45B6122E513D91C8878204AE45B869BB57487A33D16F10765AE387706CF6B4EFAF5A02B2DD1E4757D52787FBE65765394A0B553BF950FAAB95E9D66F39C16B494186345933788BF47C0C49D34688DE2578F1F94A9801618C4A549F72044F303F3D1DA30BEDDC9BE13D40E157E37D7AD2CF78B7FC266C6F890A37FD266C6F5F399F99003CA85E5F5774AEB1574FE3B56D1F8FE5EFAC6A325ADA47AC55757150061F8AFEA26002G42E4F90C463B2B88EF51001F
	2DD2AFE3D92CC68BD035CCD94F3CD70D37A629DC47B25736ECD2FA8CDC47CB771324EBB0DC4381E25CE8ACDCAA17DB8264E7AD77AEB73606CDECF10F01263648E3202C7D44D2520782294DEA38B68F52BE01CE15B2A260464A707E4BF14C3CCAFD5364654A3856F40A8FD92E0CEB7556E0DCAB8272EAD7208D7DEC9161B5E0852391885729AB8667B5D225CC9C6012D6BA71F9AB11578729EFACDE296475B10A5F3DD2496B7E2F10D79DE9E3A5726A6796839C5AB87D75886B3DBA6CFA523E8E75634BD7A94777F5
	94DF34CAB93E532F61782E023C712B303F7183C8BFE115D32ED9DAF6DFG57EA2D1A7F1EE1D1633BD9AA5B29F5579DFB5FB3B807455E4DA63241C33FCE4A6DFCBADD7708D0F72C96790BB8A3F01AEF486E4F1F997D67589FFE8FB40E691DFD6A145D4F689CFD5A097A51FFCE0F573B7B330F756EFBBA09F4CF578F74BEC10B4F735D94B79952D3B96EBF290DC4C2FAB647AD3B044F7D997908EB4DA6388EC85BB86EB60A9B83E9FF0ECB52D29A101E4AF19734C8A31C63B2783B0AB19CF7F69F72D73D9AF1F71CC6
	9A4D9CF7A3DD1FF6C25A46F16FD35CG247DB86E94FD07F5A22427F25CFD94978969599C77E89D41E52C0955ACDF0338BF2EA738B2C837F0DC7686645940F13750F8FBA024C3B9AE0746DB23A09D4FF1EB17225ED2B528230DCBD1EF65F3793915D20C3F2595E05D6BA9AE9752C59C9737855FBBE96638735584E70334AF47CD4CC71E83B8EEBEFDFFB38452119C973B0D6062A01DD4083E620D9AFAAE9B52D59CB71362F4106E67B8C74DC86C1E3469ADBF2BD09E6B719D910D213E13A7453B96216C7D8BD1AEF9
	B95406A09D44F11F66D27DC2BA1E6386284E7356022C5672BD08C214FD93473D4F76C1A0BD06634286D076635722CC7F789541CD0074D40E1BCAF1B1104ED8073843DF913910B25F4637CC70D01F516821B43ECDCCCDAEEBF59ADFDF93787DFF486E332E0D3E5FDEBF2AB424B1C7F5D786FAEBDE07FA3F153EF75F89E99B47899DE8B3839C77A5FDCE8C05F414331C956B46F31C5E0AF505A2FC8E7D74B4BDC7CB22A2823EFBC4BF1FAEBDD7FF566F3ACF32364C1977F5BF098B746A7BCD3DFD3D327339B753F924
	85E8F4F0BAF71CA66B901B5DF84EE8379B8D6CD333D279C7288F9F8BE57D0AB03ED7F18963FB41C5036F4104C3191822D83E8713D0240CF31E4FA63AB4DA48460AC122FBDDB6BE2F272DC7BE8333E91FCC96C51FC2E95965D02E0817DD26D50F89EE23FB492C1E9F1D5BF4D027F3BD76ED8DFFEF57F73DFA5F64F15CGA893385E5937296BE531CB5A5E8DF4DE8C87FC94G43BDC7E51A3181E8EEC0FEFF3357D5179D15CEDD266FD35765EA5AF6833451425B9169F770AE996D2229CBEFA69D47F35B2C4E0D9DF8
	2EF60057195A61D97FEF507213206C94DEBE220E1E8F34DA24F35933689C9C8D79F13CCC787AEC999FF5E6D337053C63445B1D359E7950EEC45997EDC05937ECD4173DBCEEEC00B27D9BD9BC0B6479EED45A55FD156A7672941D7747C379899B115F8DCB5CED300E1F938E5B08F167EF2A1CFA71AFF55FDF78FDA946EE23B6327D0559F04DA80E55103DB5D666332DD826G7064FCF8ADDCDB24B2523972EA4FBA39052E95FA203C8890D8CCFEC767917E5D4000E27518FB0E30FA353ABCEA681AA2816A25EDC27A
	A9F42DA06A4F5220AC6B7B2FB7BB7B1EF91958BC798A9C5DDFE0472B5987C1F9995BAE723DB50C2337F6592DE6B3BBG49E261AB37ABE361247FD540C353A60C174F19AFAF5339094948972E811BD0A7E1DB1CFC1566386BE4EF8E36B1E59353C998DC23B7313DCED6AFF7317B1E4F4645D8AFE19353D3EE89781892F93D1FAE712C27C954FEF6C37966925453EF7937CD7ACBBC69A9FD2D3A1ED653F7ABFC215E78926C7B7BDB1DFDFFA0D3CDA7F42F021771DBCBF4027B976EBA7957D7CA1D103E06G3D089254
	4940C525CEC819B848CFAAC5392C7E4A33DC365379F4B914AD6265FFF752557F1D58C67A457C42528E748B3A52417755FA208C8174498325CA3F50E3F19F6B5FD8F03E99DB0A329DDB6364215F0ABC782B7010BA888F13E5BC30366F5A6E545B18534407D90C17357C9B378DA670166407C40A4A37D696EBABB62F176A3DDC6B2C17F5E9A875245FDB3A04716A2052616E81A46CF0529C1FADBFA74D72D76DF2667B2D9AFADF7655B96B4D3DB2743E6878376062D57B62ED0F667C9E01737D07FAA77DDB07210348
	86E73D1C3DC32FB72751D96FC847D06AC9EB030EFC41759CFAAB790B2F88BBCA769C56698EFF417BD5324FC967013A2173F72059D96F3E752B1575764204DF345AE0521B2D5D2B0B35E5455A720A757C2C7C06217248F4F8FC836A3038EC28BA447E75FE613C3F7510136734A5C317E97B926AEF6CFDC69693FC359477AD8D400FFF996E732CA943B5C0F8996E9B6D206F4EE41443DC84D0DB0EFBCFF5DBB12E28831CEFB93671632D68DBC24A310D87E95984D237A2D6D3DC01BE6729434E7E5C162F755C1F0A72
	AA68CFD959FAC6632DFC14E78334455E0D18FACA7E0DA3E1E3386AEF38C51C1A13B2D041FCDAC0056B3B910C2772AF1DBCC5EF9BBACFED5B1127708A7EEE428EAA3BCA109DC0EDA55F73EC74705E04FC0A12ECE7EB862E9DF515586E171974DCB924A7G84D522CEACB92857F040E5D421CE9E48C13DB6D4E19B87F2697B8110768318D405ED34AEC63D0610323C0DDB9723DE2BB6E39BCF5132E6C80F81705F0CFA6DB96214617505C317613305A843C05E568D2D4E361E9898FADB95DFE3DBB3B93F4F58893F85
	DBC097G3AAD5837400BA8E37396AC5BC34BCE00F490C0789664A76328131FF1A7D7FA668707202447268E4E4F96F59F405AAFEDF336FF33C5BE7F30F66E34E2BB85DB1127A347840147C0AE4963739DD04636F5A87BF647DD3EEFB8866A0C9FD23D539B6475A6C11D60A155FB23F4E47B47310356D35FBF3E476D1BF75EA0FCAB6EAF5DC77DDF4CD665FE4BC3949F3FD5395FD24F5FB5942AE3B506EA0CFF6D5BBA32FD2223A32CF763306B31FEED2C26E7672B157D2D227870EAE5FF7F486701A848EB58067D7D
	074BEF7DCD84FC5036213CCFD45CCE565BE1D0F6A6C0D68D2C1B81EA81F4B5787EC5E68BB9A46B697D8B769635727D0B135B15726829F172B3D0634E1B740E81756163EA147B0B77D37C049A657EE26D8E5CDF1C82F94B3723BCEAB3103E8F607C363B521B385D937DA7282F8F5A9E2B787E53F3949FAA43B37A47B2F18E08043C5D35C8DF4C9959F87B41207554475B430356134304DA9CEFFF22735214DA37F726A8BE24D6E9FFAD39E8FFE110D735837BFBFC714846CD77886B858C3B9E6B570EA574DD309D4A
	7E6E257889BB147DFD0E4F4F13A1AFF7A7767705C2B97DFE407B6E9C0A9F5E7A35126FGD93DC015B698FF3B9C54CF6CD40E0B83949F39D3B9AE1E3763380803BC5DAE647B8F97117E9440056EF22597354B937DC85ADE7CAE653818CE71C93B156342E247F1118BF97D3B117E97AE5FB70F84FC5C6E21486D9E2B3CDED2DD2CA62FEEA867BC3E39643EAFBA66127B3E286D0AFB393EAB6E657AB638173B3A413D5C93745B154540636EBA6C7B0332F78903E5777B3F07778A4FFE8FB44A2B1DFD2A115DBF3EF574
	E9C70EAA8D2653392BD17773129117329AF5FF77DCFC0FE2F33B6777BEEA5B87FF6F2331DD7D3D0F036D6E6FFD34342B3F775156CE7793DD3E27E55F4E77066BF0EFE8E6AD6E8D59381DCE5EC177BBA19D42F18FD3DCB4245376A0EE4F8E254CC3869913EA606F210E340EF023B1127DC6CFFB0C5299867A4CD78C7DEA5903F219C4F186C87BF2DCCAA65FB367B2F8A613BC6B0772740BB49D435327B28733CBD2775B597E25C1E9F86A7F50ED7F857ACC1BD19F2B515673F74548F6903EABA63BEF4B7D9E5E957B
	9EE854AFF17629D9F67F62625127BDEBD4E9C85F02ABF477E7338A511F7D011FBDB9C41F6D0BC16F3B6BF1ACBC7B8DBF73426D2151C1F063A0BD0563DAA8AE8252899CB74DBED85FC87D85D2DBA313DF5C20B4500F0CE4ECC867B3AE3A7B0D0FAF3A7B0D55F614153681E570261D7809E61E1EC953BDBCADD27EC97E685958CFA80DEF639B8617112143FD3D44FEC3C031DE323A17FB5AAAAF47E2B4111B5D4FADBCC1BE89A36D2B5D4A777DFC9B583E5A8438CE81A0E713587BAD1A9DDAAFFC07B5485FEF19331C
	4C27F586837BA1C5798732249DC9E90F211AB8C01D5DE8F48695D981362F756E8E655E9761A78AE845B7605E5718E2655E97A9135188BE379177324EE7105F73463DEFC6EB0F5E5EE2B51B3A2EC87BCD5753390B3C93D34D6BBD1EC11E77FB2CF653D52BC5F42F097BE7FF23F54926CBFFA34AEBC526B7F9CDE9144B6B06DC797BCD6C976DF07FAFE5013CFF210D6C2CD89CDC1376A21FB3F25C759BF3C2606D9B3FF65FCB9D789A5BDD3E17693C8A2ECDG64CC946BC374B75E7A5039D75E07729E4FBAE7BB1E2C
	5C41B4951D53822C3FBFF0A8F5CE7831812DB1FBD167FFBE2A54B9A9638F791377A26F5B6CC3177FEFAE4B5FA1F3157F8A07D27E643C58D42093399763510FEF676F38G2EF89F46EC6757E2BC5A308FE3365BEA69BBAE108E84885D07BA546EA03E6C18915FF1A95C09715EE8DE77D17ABBD24B1BE2B5D5G4DCDC8A72898632D06A6AC3B1D7EF634BF248381C21B100EFF86B9B0617A8DA52E8859C7146A0F9CEEEE5ED3F764CCDD6B19C30D0D8D0D8D2C7E079995DE6AB79DBE327F4461C3BA17968EB5C233A8
	6B1ACC79B72358DE4379EB9E3EE3C9D5417A38F38169A3FD67077771B759D49E7BC19EG4D7BD19F933EC6FD98G673F9F65B473EB54C778FEEC6373EF687E4701D8CD81C06D811453DC41D59F8FB9D0463A83D87716BE3A47816989GC187104E3F0F72FD96DE763ADECA67A0508128BD08E50FBA785E49C1AC5BF509368B6989GC187F1FEFB4AADBEB834B9EB5A886BE5550EACDEF4B7357170034AF85183949FF5D099AF5AD50B7A1A89F9AD4D585F8DBB11FEE0B39B2FD31B1DF3FBE43327384BE67AED1D38
	E6E55CE7B745A7FD210C7BBC49FF1FAD8F72863EC07A0F96A37D28AF5CE9452B60245F7220E3AF6D10B26E73870A4FBB240C7B5425E15C278872FC8FA17D7A8504FE5CA1C6A769306C5D9238AFBE6C097EE70B68FBA5071572DFCD714D0715723FAB9B655F8EF9C107117EFF3B455D06E6B7D3C6D86F1F432E477AF5A39D435A96E5FFFFCE7145AD4A7EEA3F417ED6C31EFF8B76779107123E7025D34639DFFA127782BADE0B3ED45A5BE794DF7B25525E827A505EDAA0AF70CB242F613F6B17F7441DD6318A0E51
	79007A165DC71476B60762DB0EA86D6DBFFA515EBAA1AF648852BFC17BDF544A6854363A52EBE975C4FF9A6D2721D5A97FA80A3735AA65EF3A445F67033C28D6247FFBFA16065D87496E9BEBC77F5971742852E0EB73BABA27B768E2B51DBAFE7EFD8D4617C40E3B4C4F3A0F5721EC365333E6A1100E66383D9417F6B4D6D3F494F14F3A7DAE9E2973ED790F56495F9F186EC6633BF89E42E7CBA603883A26E902FE990E7277B4D2D1AE7D3C3F772711F9FA82CFBFC25341BC3DAFED28FAA5ED0C4CF6BA07CCE364
	4F4DA7687AA78AF80C6772F8197E9EEDDEDB2C263A0D3F9B13C5F04D106E61B8FB96BF875F06F2D9C50E9DCA7C97496E6F4B9E7D31767477C0436F9BE71FEE135D2F7DE674E96F9AD59ACC27AFB9B03E9440755C5207FA8E61FA4E257BB6F1104EBA46F5CFF1D51056F15C9DFDC365995B9A3EDC9E99B28DB2CE069B33E6B2783C0D1E13867E469DC339EC69C539CC607D7D24177809B01ECE361074CC1E7EC92F125730E176F9F0F95C61C6633B0CAB313EDFF4205F48E8C7F93CA3225FA86338B2EEBB8D6D7C7D
	7ACB8267F53A6C5EFAE974475058D125A11DB95C6979CC74C5BAD77700AC44F6FCCFE0AD7F0D4D00F6769D18A9F08D85A0FBBCAC6EF0A3BDCB6609EEF43BBC6E501FCF9CEF1D41302F211585CC7040BE4BFF230D1CD7E6819537A25237037A57AA3F7FC2F809EF476F43686CEA79E94771B9B73658338C5268374A16C3592263583F54B4EF7D539D1777AFFE8D5953237C328370A46CA3719D17A6672B67B85BA37365FCDDDCC046FFAF79CDB881E3D6E3F9ACACG4ACD8190CEC0BF81485E912B973710345BE5B4
	1BDB0DE67643310D6CE0B96BD3FA9646G0ACFE01D9DD924CD03358F0A6D69BB8712B09AD086ED3C7CEEA84FFEEB7547D948078EF0BDGE381A682CCBD0136B207470DE2CEB0DB91CE822FGA42E4FE4595D67CD1645A765321CB14F4DD62497892473525DEA36026F9AB019FFF9C9E98B04175A13E8AB62B6357C1613A82772B64F36F2007ADD8314351D447EFD516B2DFF7EAE7D7B5BC2E2AB14DFB7DB59E2D15A8A599719FC92E5FD8B17F58860A2818ABAE0CD84C0768698FF39FD2847168E54633EBE2CE7G
	DCBF40F800A9G919DF8EEF1C90740F9FCEF0D173314151B0B35DB4B5663B34E2182FC46198DED151D42F84F4D7C37D7FBCEE13CA704168D0074940030D3A86F3B8ADD3FFBF3AFDD6F939D447076EE30A32E79B4727C27D3CE1E5FCA55FA66393C8A182E5CD2391E15ADC8F30F4DCD56115839DAEC0E68077130EE9E463BA61F46985C6485780C9983B86D99BCD79C1FD9ABF879ED0812EE0323C4A463158EFD72D3BB3228B87D09C8C6F3768214E37B9914635A05749C9C24A782841FC1B966E739FFCB3E5785A7
	49170F7588284BFE377635AC656F625EB4D77E3B368B33153F0BCB6ABB736BDC72673955F73864A74B6AB3B92E93510E32BAE3B5CD1D28F72B083C7AF4E27FEF23E527C0BA8CA026937BBF264F550E46DEC21B9174585EDD5B90E750239D3DF15AE9C79BFB3D59D1F5195C0E4E774A6D08355F4B3F4FB4D50FB6721883EDC4B88B6375AC5A48E34706E7A3AE11FB190D24F399594E220C2A290CA6C2BA98A062AC4AE8E31F3BBD74F21F91F7966D6156BE6F7670EC1FF7FB1853675D9E4AAFF9328736AE528D7B77
	CF2533CCA32CF76B306B3158CFB50D2996F5A9E3C2F594DF55250C89BD4D7D65EE481B5005EB504035E49D18E6F0DDFBAFD7244B8C6EEB7386852E9D52E6850E5198C777F4FD94F9FE0A74C4959AC18ADC982423D5E9944FA3F21C2D5286018C237ABBEC5942838BC6F6A6B6E450FA6AE7E2BF9D341E3A3EEF213ED7EBD46A7BF60AAFB6AA75DD3C1047E0A14F5F48751DB5B2BB5DA40E2C5E7691569307DD0F49A31B46FE05F3CAB9FDCE71996714F23A1D7B7FBC489BB8471FCF6973D154B9D75D47AB52E95D6E
	F635DC01AB03F4C3371A8DCD5EC6E834AB724C0A340F8A8DBF85EEA22403D4E95869371A42D45AA0902D02E775263A456A07B6AEDE9A341E7A38D8B8C2FDCF227A1B5D2D54777D941F54235477CE67FC8FF9E28F6A5B5EB7B2BB5DC9FEB2C73A5FA73B8FAB987DE7789923CAC30A0351B5F18448A92E87E399BB58773BD3E14E6738DFD2DC1A891E8DCC7CECE2914115C1FAB747451D42B8080E636ACF905C84C8CF61385F5911EE884765B810EE9847098E249B49F1AFBA10EE8C4775D5A35D840EFB6EB3245BFC
	1E73C2575A6D10B6F35CE369D8F75CF934170005CEDD5FA93B2FD8B87AFABF78BD50D85A676C13D6F6FF27B87A349F9BD59ACC2777DEC27B8A64FADEC6FF1BB69852E19C67C3F111101E4DF1339289AE69822C33AF70EFF09DC09BA93A603A77C46C2B1F63DE5806F447F0DCE58D529D47F1FEB5C8571F63BE28C13A93B9EEDCBD528D6238928B524DB0A36E4794178769E20ECB33E15D96B35A756FC4272E9F165DB7FC8FFABFB52AB458F3483BEB553F1333301374155DD76885DE7EFE7A7B83FA9A682A377676
	6AAD86DE6E68D9E73995C52E5F0829243ECF84397A1871FBAF2927711B8A134D437BAD87721C92E2D6FE57614489729C582B37F71BAC48538F3B1C7D3843603C8FB7BA6FBFBAC76E991F7F263EB28C5A0E64FC7AD6A31F993D03FF17C6492736D7796D87136CFB8AA76639479DAF4E43B8D1B154EDG9887B081006CB332D8524B69D8A68870E1GF1GD996F8EE346073346FCEA71D0A4B2E5F5738D7764D061FDF762C5397F6BB4BA5EBDCF53ACCC3E4558274BAACA82B70837C7BC91641F59AGE588202C82AD
	CAD9FDD06754D3DE3D73FEFB03737EF423D3FFAB697B934150CEA86769377548D302871EB4DEF84A32AAF93AEE2FD3A68196F77DBDE861E79D2DCCFFD5F0ED82A07BBDCCFF2BECD8269370A2009FC0A0C0389575A76EF75209BE15AF28FE0F214EEE521BD797EB4B61FF95B9CF4AE2895527B17E914F5B7B7981274CE637B85BB6D58F2F6DBFD6E35B45B6ECFB99FD3F1D2DA9FFB18F63AC86487737E11C252E1B9813DA1C45209775E7758EE30994E1E9B0DEB2F599C9486FCCFD1FC3347632982DAC567246BCFE
	364E0631160569741966A22C39GEAAFE22CE9CEBABFCBF79163AADB673B45D584F9DC44B45FFBDC6556794A384AEDAE794F4E7794D7E1727A014EA97F7B8E8CCF7E498731BF3E973D3DB77F1B234E7B396DCEFAE36A07C7AF229E6905DCC4FD379EF76A7BEF9654F78264D759D16E6B2C28A3339DF5F454CA5F6104F490C0B8AF5BE8635F8230230E82ED5EF5B45D66DDC7F9973D6B6840C56F312F9DAE5FD7AFF044EA2A9DC3F98F7231EAF93DE62853B924FA3F1AB732E74C3B872D277E0CB9FD50FACAE04F12
	BF2463CCF4A81FB1FDA95E4721FC46DC1C0E4F183E1097674035D552FCB9FD1D982B699107A227740372FA83D0E75C106A45544B6BCD00BAD306D46FAD556FBB8F2E1777872D272E17E26B487472949DDB2122D2AFAFD0FC0428544BC9AB6AA59A721A7AD0AF87ECF27A13G9F5CB71477F8F5275D5F8FB9FE5A7DBD12172B5D4B3DDEADAF477878B1F945D23A7FAF597D327451DFFBD70DAA8D6979EABE4A61B60E534EC7B95C44F179875D653576203BDC67543B17CBEAF0176BF3D627ACA3E477FA6B684B756A
	2852103E25EAF3176BB91BDC2EE40FB1C7D87E75CC1894A63DABA4BB6C42C2BE976E27BFF49DF52932C673775BB509C252FEA1053D683BDFC8A2EF6B6E9712694B3C7B85D838597AED50D8129C9C97052F09D4E9AA9D312210CCFE482D46A5B74919AB28D773D4FC81DD92E9779A75E21F5D6890056CBA03C16B7C3128121292D158F058C69675FAB324DA0D22D62FE535C42B56EE34C1D12305A20D7A8B22B01FDCD8019AD1D8C64A7759D85AC1EA502DD1ED1351EE94058C16E0192230C6C1876A51CDB22CADD5
	1263C4A171B090CDE1BFC1848AD8643E51D7F7634B53A61DE948CD9492C187BDC6A674644B6467EB2958497BD2F7D389ADF2C93949CB250C779A4220B5BC256CC2264B326A097F3FF9FA686BED8E0D1032DF780CBCBD359A6D74874F0D86722D46B6231D74F52FB04FC684C3CEB9001DB968A559A1DEB19B1B055CF3C70C977BC04BC6C39D7E14BAC8F0F1B321D4CAFEBD2934C96F68211B145B1B05A48B981AA8ACE259E63D253B147D2E7AF6AA3539F53BE9FF694EG701BC379A52D1470D6F29EDED818FFA0FA
	0AC6C85CAB241B2DFA43DEF8C0345A778B73C43431FE5BAE56D09A8D8A11C002861ADB463BCFBADBC2028A1C698B7D3779E646E46ECD9404FE3BD0CACB12075292DE42D05F233783A923FDBF009EC896703C6BD60AEB1F5D3734A3D118ABF51208FED53FCD842E6CFA0B631C555E8B9CE8959CE096EF286427CF157D6C4EFF1D208DB92B0A42AAA6B228DA5AED347616561DBBE73298F983A0BFE8FE85EF1E14A9D114D954FF536283AF4EB98B7AEE90B43DE5E574EFB97DDBC17E16D3CCB94514D7009063842F7F
	14797D546056084CC8386BA2EAAE598B1A92DFF97729DF3FDA9BB793FA37D7C83E24B77799C158D94ED2077AFA4F9A6DBF1A743395737D22EEA03A30911340F6D34E69FBCD66ABF053C0BF7657CF70157DFC1C380C958FE3E1AA40CBA3C811D676F3CA69B2CA69EED892E6CE873FC5C69177AA7294EF15BC302F41545C8B103A49A595A88AD944FD3AFA35441DBB414F821EA224D78C1109C4B908C28EBB8A25EC2136969CB34B9AC2A3148705139C818F0A96064383452E20BE22136612D9F5AE45663B8D76A4EE
	B01729EB264992D20A5C945264BA7AF74330ED1C54AAE68D92CE48CD392BC11E68D7F55CC9436B82C16B481F366F03E77D7FC11EFB7E8F72EC7540B37BAE667AEF2AA5F6BBEE7293A22E0FC941E7FF65FA325F07BD77787AB83F0B493E49769C5D73188A78E89F7C865B2AC472E3F92A5FE02BBBAB36766A4DE6D1EF3ED0E7B19CGD73C670AC8BEA7A3FD8BA6BC11346F40B2D226749B6009046F7332BA7F83D0CB878832FBA60936B8GG0443GGD0CB818294G94G88G88GBBDA47AC32FBA60936B8GG
	0443GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG70B8GGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (10/24/00 3:37:40 PM)
 * @return int
 */
public int getButtonPushed() {
	return buttonPushed;
}
/**
 * Return the CancelButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCancelButton() {
	if (ivjCancelButton == null) {
		try {
			ivjCancelButton = new javax.swing.JButton();
			ivjCancelButton.setName("CancelButton");
			ivjCancelButton.setText("Cancel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCancelButton;
}
/**
 * Return the JSplitPane1 property value.
 * @return javax.swing.JSplitPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSplitPane getCreateGraphSplitPane() {
	if (ivjCreateGraphSplitPane == null) {
		try {
			ivjCreateGraphSplitPane = new javax.swing.JSplitPane(javax.swing.JSplitPane.VERTICAL_SPLIT);
			ivjCreateGraphSplitPane.setName("CreateGraphSplitPane");
			ivjCreateGraphSplitPane.setDividerSize(2);
			ivjCreateGraphSplitPane.setContinuousLayout(false);
			getCreateGraphSplitPane().add(getTopPanel(), "top");
			getCreateGraphSplitPane().add(getBottomTabbedPane(), "bottom");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCreateGraphSplitPane;
}
/**
 * Return the JPanel5 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getDataPointsPanel_Graph() {
	if (ivjDataPointsPanel_Graph == null) {
		try {
			ivjDataPointsPanel_Graph = new javax.swing.JPanel();
			ivjDataPointsPanel_Graph.setName("DataPointsPanel_Graph");
			ivjDataPointsPanel_Graph.setLayout(new java.awt.BorderLayout());
			getDataPointsPanel_Graph().add(getAddRemoveButtonsPanel_Graph(), "East");
			getDataPointsPanel_Graph().add(getTreeScrollPane_Graph(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDataPointsPanel_Graph;
}
/**
 * Return the JPanel51 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getDataPointsPanel_Usage() {
	if (ivjDataPointsPanel_Usage == null) {
		try {
			ivjDataPointsPanel_Usage = new javax.swing.JPanel();
			ivjDataPointsPanel_Usage.setName("DataPointsPanel_Usage");
			ivjDataPointsPanel_Usage.setLayout(new java.awt.BorderLayout());
			getDataPointsPanel_Usage().add(getAddRemoveButtonsPanel_Usage(), "East");
			getDataPointsPanel_Usage().add(getTreeScrollPane_Usage(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDataPointsPanel_Usage;
}
/**
 * Insert the method's description here.
 * Creation date: (10/26/00 12:02:12 PM)
 * @return com.cannontech.graph.GraphColors
 */
public GraphColors getGraphColors() 
{
	if( graphColors == null )
		graphColors = new GraphColors();
		
	return graphColors;
}
/**
 * Insert the method's description here.
 * Creation date: (10/31/00 3:07:24 PM)
 * @return com.cannontech.database.data.graph.GraphDefinition
 */
private com.cannontech.database.data.graph.GraphDefinition getGraphDefinitionValue()
{
	return value;
}
/**
 * Return the JPanel3 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getGraphGDSPanel() {
	if (ivjGraphGDSPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitle("Data Points");
			ivjGraphGDSPanel = new javax.swing.JPanel();
			ivjGraphGDSPanel.setName("GraphGDSPanel");
			ivjGraphGDSPanel.setToolTipText("Set up Points to Graph Here");
			ivjGraphGDSPanel.setBorder(ivjLocalBorder1);
			ivjGraphGDSPanel.setLayout(new java.awt.BorderLayout());
			ivjGraphGDSPanel.setPreferredSize(new java.awt.Dimension(214, 200));
			ivjGraphGDSPanel.setMinimumSize(new java.awt.Dimension(214, 200));
			getGraphGDSPanel().add(getDataPointsPanel_Graph(), "West");
			getGraphGDSPanel().add(getGraphGDSScrollPane(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphGDSPanel;
}
/**
 * Return the GraphPointsScrollPane property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getGraphGDSScrollPane() {
	if (ivjGraphGDSScrollPane == null) {
		try {
			ivjGraphGDSScrollPane = new javax.swing.JScrollPane();
			ivjGraphGDSScrollPane.setName("GraphGDSScrollPane");
			ivjGraphGDSScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
			ivjGraphGDSScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			getGraphGDSScrollPane().setViewportView(getGraphGDSTable());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphGDSScrollPane;
}
/**
 * Return the ScrollPaneTable property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTable getGraphGDSTable() {
	if (ivjGraphGDSTable == null) {
		try {
			ivjGraphGDSTable = new javax.swing.JTable();
			ivjGraphGDSTable.setName("GraphGDSTable");
			getGraphGDSScrollPane().setColumnHeaderView(ivjGraphGDSTable.getTableHeader());
			getGraphGDSScrollPane().getViewport().setBackingStoreEnabled(true);
			ivjGraphGDSTable.setModel(new com.cannontech.graph.gds.tablemodel.GraphGDSTableModel());
			ivjGraphGDSTable.setCellSelectionEnabled(false);
			ivjGraphGDSTable.setDoubleBuffered(false);
			ivjGraphGDSTable.setBounds(0, 0, 200, 200);
			// user code begin {1}
			ivjGraphGDSTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
				
			//Color choices setup
			java.awt.Color[] colors = getGraphColors().getAvailableColors();
			String[] colorStrings = new String[colors.length];

			for( int i = 0 ; i < colors.length; i++ )
			{
				colorStrings[i] = com.cannontech.common.gui.util.Colors.getColorString(com.cannontech.common.gui.util.Colors.getColorID(colors[i]));
			}
			javax.swing.JComboBox colorComboBox = new javax.swing.JComboBox( colorStrings );
			colorComboBox.setRenderer( new com.cannontech.common.gui.util.ColorComboBoxCellRenderer() );
			javax.swing.DefaultCellEditor colorEditor = new javax.swing.DefaultCellEditor(colorComboBox);

			//Column inits.
			javax.swing.table.TableColumnModel colModel = ivjGraphGDSTable.getColumnModel();
			colModel.getColumn(GDSTableModel.DEVICE_NAME_COLUMN).setPreferredWidth(80);
			colModel.getColumn(GDSTableModel.POINT_NAME_COLUMN).setPreferredWidth(65);
			colModel.getColumn(GDSTableModel.LABEL_NAME_COLUMN).setPreferredWidth(140);
			colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN).setPreferredWidth(55);
			colModel.getColumn(GDSTableModel.AXIS_NAME_COLUMN).setPreferredWidth(12);
			colModel.getColumn(GDSTableModel.TYPE_NAME_COLUMN).setPreferredWidth(12);

			colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN).setCellEditor(colorEditor);

			javax.swing.table.TableColumn tblColumn = colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN);
			tblColumn.setCellRenderer( new com.cannontech.common.gui.util.ColorTableCellRenderer() );

			javax.swing.JComboBox axisComboBox = new javax.swing.JComboBox( new String[] { "Left", "Right" } );
			javax.swing.DefaultCellEditor axisEditor = new javax.swing.DefaultCellEditor(axisComboBox);
			colModel.getColumn(GDSTableModel.AXIS_NAME_COLUMN).setCellEditor(axisEditor);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphGDSTable;
}
/**
 * Return the JTree1 property value.
 * @return javax.swing.JTree
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTree getGraphPointsTree() {
	if (ivjGraphPointsTree == null) {
		try {
			ivjGraphPointsTree = new javax.swing.JTree();
			ivjGraphPointsTree.setName("GraphPointsTree");
			ivjGraphPointsTree.setModel(new com.cannontech.database.model.DeviceTree_CustomPointsModel());
			ivjGraphPointsTree.setBounds(0, 0, 78, 72);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphPointsTree;
}
/**
 * Return the GraphNameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getNameLabel() {
	if (ivjNameLabel == null) {
		try {
			ivjNameLabel = new javax.swing.JLabel();
			ivjNameLabel.setName("NameLabel");
			ivjNameLabel.setText("Name:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameLabel;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getNamePanel() {
	if (ivjNamePanel == null) {
		try {
			ivjNamePanel = new javax.swing.JPanel();
			ivjNamePanel.setName("NamePanel");
			ivjNamePanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsNameLabel = new java.awt.GridBagConstraints();
			constraintsNameLabel.gridx = 0; constraintsNameLabel.gridy = 0;
			constraintsNameLabel.insets = new java.awt.Insets(4, 4, 4, 4);
			getNamePanel().add(getNameLabel(), constraintsNameLabel);

			java.awt.GridBagConstraints constraintsNameTextField = new java.awt.GridBagConstraints();
			constraintsNameTextField.gridx = 1; constraintsNameTextField.gridy = 0;
			constraintsNameTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsNameTextField.weightx = 1.0;
			constraintsNameTextField.insets = new java.awt.Insets(4, 4, 4, 4);
			getNamePanel().add(getNameTextField(), constraintsNameTextField);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNamePanel;
}
/**
 * Return the GraphNameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getNameTextField() {
	if (ivjNameTextField == null) {
		try {
			ivjNameTextField = new javax.swing.JTextField();
			ivjNameTextField.setName("NameTextField");
			ivjNameTextField.setColumns(20);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameTextField;
}
/**
 * Return the OkButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getOkButton() {
	if (ivjOkButton == null) {
		try {
			ivjOkButton = new javax.swing.JButton();
			ivjOkButton.setName("OkButton");
			ivjOkButton.setPreferredSize(new java.awt.Dimension(73, 25));
			ivjOkButton.setText("Ok");
			ivjOkButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOkButton;
}
/**
 * Return the JPanel71 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getOkCancelButtonsPanel() {
	if (ivjOkCancelButtonsPanel == null) {
		try {
			ivjOkCancelButtonsPanel = new javax.swing.JPanel();
			ivjOkCancelButtonsPanel.setName("OkCancelButtonsPanel");
			ivjOkCancelButtonsPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsOkButton = new java.awt.GridBagConstraints();
			constraintsOkButton.gridx = 2; constraintsOkButton.gridy = 1;
			constraintsOkButton.insets = new java.awt.Insets(10, 4, 10, 4);
			getOkCancelButtonsPanel().add(getOkButton(), constraintsOkButton);

			java.awt.GridBagConstraints constraintsCancelButton = new java.awt.GridBagConstraints();
			constraintsCancelButton.gridx = 3; constraintsCancelButton.gridy = 1;
			constraintsCancelButton.insets = new java.awt.Insets(10, 4, 10, 15);
			getOkCancelButtonsPanel().add(getCancelButton(), constraintsCancelButton);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOkCancelButtonsPanel;
}
/**
 * Return the PeakPointComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getPeakPointComboBox() {
	if (ivjPeakPointComboBox == null) {
		try {
			ivjPeakPointComboBox = new javax.swing.JComboBox();
			ivjPeakPointComboBox.setName("PeakPointComboBox");
			ivjPeakPointComboBox.setToolTipText("Optional...Set a Point to represent a Peak");
			ivjPeakPointComboBox.setPreferredSize(new java.awt.Dimension(173, 25));
			ivjPeakPointComboBox.setMaximumSize(new java.awt.Dimension(173, 25));
			ivjPeakPointComboBox.setMinimumSize(new java.awt.Dimension(173, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPeakPointComboBox;
}
/**
 * Return the PeakPointLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPeakPointLabel() {
	if (ivjPeakPointLabel == null) {
		try {
			ivjPeakPointLabel = new javax.swing.JLabel();
			ivjPeakPointLabel.setName("PeakPointLabel");
			ivjPeakPointLabel.setText("Peak Point:");
			ivjPeakPointLabel.setMaximumSize(new java.awt.Dimension(173, 25));
			ivjPeakPointLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
			ivjPeakPointLabel.setPreferredSize(new java.awt.Dimension(173, 25));
			ivjPeakPointLabel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjPeakPointLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
			ivjPeakPointLabel.setMinimumSize(new java.awt.Dimension(173, 25));
			ivjPeakPointLabel.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPeakPointLabel;
}
/**
 * Return the PointOptionsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getPointOptionsPanel() {
	if (ivjPointOptionsPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitle("Point Features");
			ivjPointOptionsPanel = new javax.swing.JPanel();
			ivjPointOptionsPanel.setName("PointOptionsPanel");
			ivjPointOptionsPanel.setBorder(ivjLocalBorder);
			ivjPointOptionsPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsThresholdsButton = new java.awt.GridBagConstraints();
			constraintsThresholdsButton.gridx = 0; constraintsThresholdsButton.gridy = 0;
			constraintsThresholdsButton.weightx = 1.0;
			constraintsThresholdsButton.weighty = 1.0;
			constraintsThresholdsButton.insets = new java.awt.Insets(4, 4, 4, 4);
			getPointOptionsPanel().add(getThresholdsButton(), constraintsThresholdsButton);

			java.awt.GridBagConstraints constraintsPeakPointComboBox = new java.awt.GridBagConstraints();
			constraintsPeakPointComboBox.gridx = 0; constraintsPeakPointComboBox.gridy = 2;
			constraintsPeakPointComboBox.weighty = 1.0;
			constraintsPeakPointComboBox.insets = new java.awt.Insets(0, 4, 4, 4);
			getPointOptionsPanel().add(getPeakPointComboBox(), constraintsPeakPointComboBox);

			java.awt.GridBagConstraints constraintsPeakPointLabel = new java.awt.GridBagConstraints();
			constraintsPeakPointLabel.gridx = 0; constraintsPeakPointLabel.gridy = 1;
			constraintsPeakPointLabel.anchor = java.awt.GridBagConstraints.SOUTH;
			constraintsPeakPointLabel.insets = new java.awt.Insets(4, 4, 0, 4);
			getPointOptionsPanel().add(getPeakPointLabel(), constraintsPeakPointLabel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPointOptionsPanel;
}
/**
 * Obtains the point tag from the LitePoint.
 * returns default value of GRAPH_SERIES 
 * Creation date: (4/23/2001 8:23:06 AM)
 * @return java.lang.String
 * @param pt com.cannontech.database.data.lite.LitePoint
 */
public String getPointTypeString(com.cannontech.database.data.lite.LitePoint pt)
{
	if( pt.getTags() == com.cannontech.database.data.lite.LitePoint.POINT_UOFM_GRAPH)
		return com.cannontech.database.db.graph.GraphDataSeries.GRAPH_SERIES;

	else if (pt.getTags() == com.cannontech.database.data.lite.LitePoint.POINT_UOFM_USAGE)
		return com.cannontech.database.db.graph.GraphDataSeries.USAGE_SERIES;
	else
		return com.cannontech.database.db.graph.GraphDataSeries.GRAPH_SERIES;	//default
}
/**
 * Return the JButton2 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRemoveGDSButton_Graph() {
	if (ivjRemoveGDSButton_Graph == null) {
		try {
			ivjRemoveGDSButton_Graph = new javax.swing.JButton();
			ivjRemoveGDSButton_Graph.setName("RemoveGDSButton_Graph");
			ivjRemoveGDSButton_Graph.setToolTipText("Remove Graph Points");
			ivjRemoveGDSButton_Graph.setText("<<");
			ivjRemoveGDSButton_Graph.setActionCommand("RemovePointButton");
			ivjRemoveGDSButton_Graph.setFont(new java.awt.Font("Arial", 1, 14));
			ivjRemoveGDSButton_Graph.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRemoveGDSButton_Graph;
}
/**
 * Return the RemoveGDSButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRemoveGDSButton_Usage() {
	if (ivjRemoveGDSButton_Usage == null) {
		try {
			ivjRemoveGDSButton_Usage = new javax.swing.JButton();
			ivjRemoveGDSButton_Usage.setName("RemoveGDSButton_Usage");
			ivjRemoveGDSButton_Usage.setToolTipText("Remove Usage Points");
			ivjRemoveGDSButton_Usage.setText("<<");
			ivjRemoveGDSButton_Usage.setActionCommand("RemovePointButton");
			ivjRemoveGDSButton_Usage.setFont(new java.awt.Font("Arial", 1, 14));
			ivjRemoveGDSButton_Usage.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRemoveGDSButton_Usage;
}
/**
 * Return the ThresholdsButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getThresholdsButton() {
	if (ivjThresholdsButton == null) {
		try {
			ivjThresholdsButton = new javax.swing.JButton();
			ivjThresholdsButton.setName("ThresholdsButton");
			ivjThresholdsButton.setText("Add Thresholds...");
			ivjThresholdsButton.setMaximumSize(new java.awt.Dimension(173, 25));
			ivjThresholdsButton.setPreferredSize(new java.awt.Dimension(173, 25));
			ivjThresholdsButton.setEnabled(false);
			ivjThresholdsButton.setMinimumSize(new java.awt.Dimension(173, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjThresholdsButton;
}
/**
 * Return the JPanel2 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getTopPanel() {
	if (ivjTopPanel == null) {
		try {
			ivjTopPanel = new javax.swing.JPanel();
			ivjTopPanel.setName("TopPanel");
			ivjTopPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsNamePanel = new java.awt.GridBagConstraints();
			constraintsNamePanel.gridx = 0; constraintsNamePanel.gridy = 0;
			constraintsNamePanel.gridwidth = 2;
			constraintsNamePanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsNamePanel.weightx = 1.0;
			constraintsNamePanel.weighty = 1.0;
			constraintsNamePanel.insets = new java.awt.Insets(4, 10, 4, 4);
			getTopPanel().add(getNamePanel(), constraintsNamePanel);

			java.awt.GridBagConstraints constraintsPointOptionsPanel = new java.awt.GridBagConstraints();
			constraintsPointOptionsPanel.gridx = 2; constraintsPointOptionsPanel.gridy = 1;
			constraintsPointOptionsPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsPointOptionsPanel.weighty = 1.0;
			constraintsPointOptionsPanel.insets = new java.awt.Insets(4, 10, 4, 4);
			getTopPanel().add(getPointOptionsPanel(), constraintsPointOptionsPanel);

			java.awt.GridBagConstraints constraintsAxisPanel = new java.awt.GridBagConstraints();
			constraintsAxisPanel.gridx = 1; constraintsAxisPanel.gridy = 1;
			constraintsAxisPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsAxisPanel.weightx = 1.0;
			constraintsAxisPanel.weighty = 1.0;
			constraintsAxisPanel.insets = new java.awt.Insets(4, 4, 4, 4);
			getTopPanel().add(getAxisPanel(), constraintsAxisPanel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTopPanel;
}
/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getTreeScrollPane_Graph() {
	if (ivjTreeScrollPane_Graph == null) {
		try {
			ivjTreeScrollPane_Graph = new javax.swing.JScrollPane();
			ivjTreeScrollPane_Graph.setName("TreeScrollPane_Graph");
			ivjTreeScrollPane_Graph.setPreferredSize(new java.awt.Dimension(145, 363));
			getTreeScrollPane_Graph().setViewportView(getGraphPointsTree());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTreeScrollPane_Graph;
}
/**
 * Return the JScrollPane11 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getTreeScrollPane_Usage() {
	if (ivjTreeScrollPane_Usage == null) {
		try {
			ivjTreeScrollPane_Usage = new javax.swing.JScrollPane();
			ivjTreeScrollPane_Usage.setName("TreeScrollPane_Usage");
			ivjTreeScrollPane_Usage.setPreferredSize(new java.awt.Dimension(180, 363));
			getTreeScrollPane_Usage().setViewportView(getUsagePointsTree());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTreeScrollPane_Usage;
}
/**
 * Insert the method's description here.
 * Creation date: (5/17/2001 10:57:58 AM)
 * @return javax.swing.JButton
 */
public javax.swing.JTree getTreeViewPanel()
{
	if (treeViewPanel == null)
	{
		try
		{
			treeViewPanel = new javax.swing.JTree();
		}
		catch (java.lang.Throwable ivjExc) 
		{
			System.out.println(" Throwable Exception in getTreeViewPanel()");
			ivjExc.printStackTrace();
		}
	}
	return treeViewPanel;
}
/**
 * Return the JPanelUsage property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getUsageGDSPanel() {
	if (ivjUsageGDSPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder2;
			ivjLocalBorder2 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder2.setTitle("Data Points");
			ivjUsageGDSPanel = new javax.swing.JPanel();
			ivjUsageGDSPanel.setName("UsageGDSPanel");
			ivjUsageGDSPanel.setToolTipText("Optional...Set up Usage Points Here");
			ivjUsageGDSPanel.setBorder(ivjLocalBorder2);
			ivjUsageGDSPanel.setLayout(new java.awt.BorderLayout());
			ivjUsageGDSPanel.setPreferredSize(new java.awt.Dimension(214, 200));
			ivjUsageGDSPanel.setMinimumSize(new java.awt.Dimension(214, 200));
			getUsageGDSPanel().add(getDataPointsPanel_Usage(), "West");
			getUsageGDSPanel().add(getUsageGDSScrollPane(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUsageGDSPanel;
}
/**
 * Return the UsagePointsScrollPane property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getUsageGDSScrollPane() {
	if (ivjUsageGDSScrollPane == null) {
		try {
			ivjUsageGDSScrollPane = new javax.swing.JScrollPane();
			ivjUsageGDSScrollPane.setName("UsageGDSScrollPane");
			ivjUsageGDSScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
			ivjUsageGDSScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			getUsageGDSScrollPane().setViewportView(getUsageGDSTable());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUsageGDSScrollPane;
}
/**
 * Return the UsagePointsTable property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTable getUsageGDSTable() {
	if (ivjUsageGDSTable == null) {
		try {
			ivjUsageGDSTable = new javax.swing.JTable();
			ivjUsageGDSTable.setName("UsageGDSTable");
			getUsageGDSScrollPane().setColumnHeaderView(ivjUsageGDSTable.getTableHeader());
			getUsageGDSScrollPane().getViewport().setBackingStoreEnabled(true);
			ivjUsageGDSTable.setModel(new com.cannontech.graph.gds.tablemodel.UsageGDSTableModel());
			ivjUsageGDSTable.setCellSelectionEnabled(false);
			ivjUsageGDSTable.setBounds(0, 0, 200, 200);
			// user code begin {1}
			ivjUsageGDSTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

			javax.swing.table.TableColumnModel colModel = ivjUsageGDSTable.getColumnModel();
			colModel.getColumn(GDSTableModel.DEVICE_NAME_COLUMN).setPreferredWidth(125);
			colModel.getColumn(GDSTableModel.POINT_NAME_COLUMN).setPreferredWidth(95);
			colModel.getColumn(GDSTableModel.LABEL_NAME_COLUMN).setPreferredWidth(140);

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUsageGDSTable;
}
/**
 * Return the DeviceTree1 property value.
 * @return javax.swing.JTree
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTree getUsagePointsTree() {
	if (ivjUsagePointsTree == null) {
		try {
			ivjUsagePointsTree = new javax.swing.JTree();
			ivjUsagePointsTree.setName("UsagePointsTree");
			ivjUsagePointsTree.setModel(new com.cannontech.database.model.DeviceTree_CustomPointsModel());
			ivjUsagePointsTree.setBounds(0, 0, 78, 72);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUsagePointsTree;
}
/**
 * Build up a graphDefinition and return it.
 * Creation date: (10/24/00 2:36:02 PM)
 * @return java.lang.Object
 * @param o java.lang.Object
 */
public Object getValue(Object o)
{
	int point = getPeakPointComboBox().getSelectedIndex();

	com.cannontech.database.data.graph.GraphDefinition gDef;
	com.cannontech.database.db.graph.GraphDefinition gDefInfo;

	if (getGraphDefinitionValue() != null)
	{
		gDef = getGraphDefinitionValue();
		gDefInfo = gDef.getGraphDefinition();
	}
	else
	{
		gDef = new com.cannontech.database.data.graph.GraphDefinition();
		gDefInfo = new com.cannontech.database.db.graph.GraphDefinition();
	}

	gDefInfo.setName(getNameTextField().getText().trim());

	if (!getAxisPanel().getLeftAutoScalingCheckBox().isSelected())
	{
		gDefInfo.setAutoScaleLeftAxis(new Character('N'));
	}
	else
	{
		gDefInfo.setAutoScaleLeftAxis(new Character('Y'));
	}

	try
	{
		gDefInfo.setLeftMin(new Double(getAxisPanel().getLeftMinTextField().getText()));
		gDefInfo.setLeftMax(new Double(getAxisPanel().getLeftMaxTextField().getText()));
	}
	catch (NumberFormatException nfe)
	{
		nfe.printStackTrace();
	}

	if (!getAxisPanel().getRightAutoScalingCheckBox().isSelected())
	{
		gDefInfo.setAutoScaleRightAxis(new Character('N'));
	}
	else
	{
		gDefInfo.setAutoScaleRightAxis(new Character('Y'));
	}

	try
	{

		gDefInfo.setRightMin(new Double(getAxisPanel().getRightMinTextField().getText()));
		gDefInfo.setRightMax(new Double(getAxisPanel().getRightMaxTextField().getText()));
	}
	catch (NumberFormatException nfe)
	{
		nfe.printStackTrace();
	}

	gDefInfo.setType("L");

	GraphGDSTableModel model = 
		(GraphGDSTableModel) getGraphGDSTable().getModel();
	UsageGDSTableModel usageModel = 
		(UsageGDSTableModel) getUsageGDSTable().getModel();

		
	while (!model.excludedRows.isEmpty())
	{
		// get rid of all "peak" entries in graphdataseries.  We can only have one peak!
		com.cannontech.database.db.graph.GraphDataSeries gds =
				(com.cannontech.database.db.graph.GraphDataSeries) model.excludedRows.get(0);
		if(gds.getType().equalsIgnoreCase( com.cannontech.database.db.graph.GraphDataSeries.PEAK_SERIES))
		{
			model.excludedRows.remove(gds);
		}
	}

	
	if (point > 0)
	{
		//setup and add the peak point to the graphdataseries
		com.cannontech.database.db.graph.GraphDataSeries gds = new com.cannontech.database.db.graph.GraphDataSeries();
		gds.setType(com.cannontech.database.db.graph.GraphDataSeries.PEAK_SERIES);
		gds.setDeviceName(model.getRow(point - 1).getDeviceName());
		gds.setPointID(model.getRow(point - 1).getPointID());
		gds.setGraphDefinitionID(model.getRow(point - 1).getGraphDefinitionID());
		gds.setLabel(model.getRow(point - 1).getLabel());
		gds.setAxis(model.getRow(point  - 1).getAxis());
		gds.setColor(model.getRow(point - 1).getColor());
		model.addRow(gds);
	}
	
	java.util.ArrayList dataSeries = new java.util.ArrayList(model.getRowCount() + usageModel.getRowCount());

	// Copy the graphdataseries into a temp array to loop through
	com.cannontech.database.db.graph.GraphDataSeries[] temp =
		model.getAllDataSeries();

	for( int i = 0; i < temp.length; i++ )
	{
		// add any graph (and peak) points to the graphdataseries (stored in temp array)
		temp[i].setGraphDefinitionID( gDefInfo.getGraphDefinitionID() );
		dataSeries.add( temp[i] );
	}
	
	// Copy the usagedataseries into a temp array to loop through
	temp = usageModel.getAllDataSeries();

	for( int i = 0; i < temp.length; i++ )
	{
		// add any usage points to the graphdataseries (stored in temp array)
		temp[i].setGraphDefinitionID( gDefInfo.getGraphDefinitionID() );
		dataSeries.add( temp[i] );
	}
		
	gDef.setGraphDefinition(gDefInfo);
	gDef.setGraphDataSeries(dataSeries);

	return gDef;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getNameTextField().addCaretListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("CreateGraphPanel");
		setLayout(new java.awt.BorderLayout());
		setSize(651, 411);
		add(getCreateGraphSplitPane(), "Center");
		add(getBottomPanel(), "South");
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}

	//Setup peak combo box for default "no peak point"4
	peakPointsVector = new Vector();
	peakPointsVector.addElement("no peak point");
	getPeakPointComboBox().addItem(peakPointsVector.get(0));
	getPeakPointComboBox().addActionListener(this);


	//Update Graph and Usage Device/Point Trees.
	((com.cannontech.database.model.DeviceTree_CustomPointsModel) getGraphPointsTree().getModel()).update(com.cannontech.database.data.lite.LitePoint.POINT_UOFM_GRAPH);
	getGraphPointsTree().setCellRenderer( new com.cannontech.common.gui.util.CtiTreeCellRenderer() );
	
	((com.cannontech.database.model.DeviceTree_CustomPointsModel) getUsagePointsTree().getModel()).update(com.cannontech.database.data.lite.LitePoint.POINT_UOFM_USAGE);
	getUsagePointsTree().setCellRenderer( new com.cannontech.common.gui.util.CtiTreeCellRenderer() );

	setTreeViewPanel(getGraphPointsTree());


	addDataInputPanelListener(this);

	getBottomTabbedPane().addChangeListener(this);
	
	//Add ActionListeners to the add/remove buttons.
	getAddGDSButton_Graph().addActionListener(this);
	getAddGDSButton_Usage().addActionListener(this);
	getRemoveGDSButton_Graph().addActionListener(this);
	getRemoveGDSButton_Usage().addActionListener(this);

	// user code end
}
/**
 * Insert the method's description here.
 * Creation date: (10/27/00 11:46:27 AM)
 * @param event com.cannontech.common.gui.util.DataInputPanelEvent
 */
public void inputUpdate(com.cannontech.common.gui.util.DataInputPanelEvent event) 
{
	ivjOkButton.setEnabled(isInputValid());
}
/**
 * Insert the method's description here.
 * Creation date: (10/27/00 12:24:35 PM)
 * @return boolean
 */
public boolean isInputValid() {
	return (getNameTextField().getText().length() > 0 );
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args)
{
	try
	{
		javax.swing.JFrame frame = new javax.swing.JFrame();
		CreateGraphPanel aCreateGraphPanel;
		aCreateGraphPanel = new CreateGraphPanel();
		//frame.setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage("GraphIcon.gif"));
		//frame.setTitle("Yukon Trending Reports Editor");
		frame.setContentPane(aCreateGraphPanel);
		frame.setSize(aCreateGraphPanel.getSize());
		
		frame.addWindowListener(new java.awt.event.WindowAdapter()
		{
			public void windowClosing(java.awt.event.WindowEvent e)
			{
				System.exit(0);
			};
		});
	
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	}
	catch (Throwable exception)
	{
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * Action Performed for the Remove Button on the Usage Tab.
 *  Removes objects from the usagedataseriesTable
 */
public void removeGDS_ActionPerformed(javax.swing.JTable table)
{
	int[] rowsToRemove = table.getSelectedRows();
	
	GDSTableModel model = null;
	if (table.getModel() instanceof GraphGDSTableModel )
	{
		model = (GraphGDSTableModel) table.getModel();

		//Remove the point from the peakPoint options.
		//for loop is from largest to smallest index so we never hit an index already removed.
		for (int i = rowsToRemove.length - 1; i >= 0; i--)
		{
			
			//If point removed is peak point, set peakPointComboBox to "no peak point" (index 0)
			if ( (rowsToRemove[i] + 1 )== getPeakPointComboBox().getSelectedIndex())
				getPeakPointComboBox().setSelectedIndex(0);

			getPeakPointComboBox().removeItemAt((rowsToRemove[i] + 1 ));
		}
	}
	else if (table.getModel() instanceof UsageGDSTableModel )
	{
		model = (UsageGDSTableModel )table.getModel();
	}
	else	//...not acceptable
		return;

	model.removeRow(rowsToRemove);
	table.getSelectionModel().clearSelection();
}
/**
 * Insert the method's description here.
 * Creation date: (10/24/00 3:37:40 PM)
 * @param newButtonPushed int
 */
public void setButtonPushed(int newButtonPushed)
{
	buttonPushed = newButtonPushed;
}
/**
 * Insert the method's description here.
 * Creation date: (10/26/00 12:02:12 PM)
 * @param newGraphColors com.cannontech.graph.GraphColors
 */
public void setGraphColors(GraphColors newGraphColors)
{
	graphColors = newGraphColors;
}
/**
 * Insert the method's description here.
 * Creation date: (10/31/00 3:07:24 PM)
 * @param newValue com.cannontech.database.data.graph.GraphDefinition
 */
private void setGraphDefinitionValue(com.cannontech.database.data.graph.GraphDefinition newValue)
{
	value = newValue;
}
/**
 * Insert the method's description here.
 * Creation date: (6/18/2001 3:39:09 PM)
 * @param tree javax.swing.JTree
 */
public void setTreeViewPanel(javax.swing.JTree tree)
{
	treeViewPanel = tree;
}
/**
 * Retreive the graph data series upon the init of the createGraphPanel
 * Creation date: (10/24/00 2:35:45 PM)
 * @param val java.lang.Object
 */
public void setValue(Object val) 
{
	com.cannontech.database.data.graph.GraphDefinition gDef = (com.cannontech.database.data.graph.GraphDefinition) val;
	setGraphDefinitionValue(gDef);

	//set Name with the GraphDefinition.Name	
	getNameTextField().setText( gDef.getGraphDefinition().getName() );

	//set AxisPanel, Left/Right AutoScaling  T/F  ----------------------
	if( gDef.getGraphDefinition().getAutoScaleLeftAxis().charValue() == 'N' ||
		gDef.getGraphDefinition().getAutoScaleLeftAxis().charValue() == 'n' )
	{
		getAxisPanel().getLeftAutoScalingCheckBox().setSelected(false);
	}
	else
	{
		getAxisPanel().getLeftAutoScalingCheckBox().setSelected(true);
	}

	if( gDef.getGraphDefinition().getAutoScaleRightAxis().charValue() == 'N' || 
		gDef.getGraphDefinition().getAutoScaleRightAxis().charValue() == 'n' )
	{
		getAxisPanel().getRightAutoScalingCheckBox().setSelected(false);
	}
	else
	{
		getAxisPanel().getRightAutoScalingCheckBox().setSelected(true);
	}

	//set AxisPanel, Left/Right Min/Max values from GraphDefinition  ----------------------	
	getAxisPanel().getLeftMinTextField().setText( gDef.getGraphDefinition().getLeftMin().toString() );
	getAxisPanel().getLeftMaxTextField().setText( gDef.getGraphDefinition().getLeftMax().toString() );

	getAxisPanel().getRightMinTextField().setText( gDef.getGraphDefinition().getRightMin().toString() );
	getAxisPanel().getRightMaxTextField().setText( gDef.getGraphDefinition().getRightMax().toString() );
	
	//Insert/Display all graphdataseries in their respective tables
	java.util.List gds = gDef.getGraphDataSeries();
	java.util.Iterator iter = gds.iterator();

	GraphGDSTableModel model = (GraphGDSTableModel) getGraphGDSTable().getModel();
	UsageGDSTableModel usageModel = (UsageGDSTableModel) getUsageGDSTable().getModel();

	int selectedIndex = 0;
	while( iter.hasNext() )
	{
		com.cannontech.database.db.graph.GraphDataSeries elem = 
						(com.cannontech.database.db.graph.GraphDataSeries) iter.next();		
		//model.addRow(elem);

		// Belongs to the Graph Series Table
		if( elem.getType().equalsIgnoreCase(com.cannontech.database.db.graph.GraphDataSeries.GRAPH_SERIES))
		{
			model.addRow(elem);
			
			// get a string to put in the peakPointComboBox to represent the graph items in the table
			String label = elem.getLabel().toString() + " :: " + elem.getDeviceName().toString();
			peakPointsVector.addElement(label);		
			getPeakPointComboBox().addItem(label);
			selectedIndex++;
		}
		//Belongs to the Usage Series Table
		else if( elem.getType().equalsIgnoreCase(com.cannontech.database.db.graph.GraphDataSeries.USAGE_SERIES) )
		{
			elem.setGraphDataSeriesID(null);
			usageModel.addRow(elem);			
		}
		//Belongs in the Peak Point ComboBox, just getting it here, will set it up in a bit.
		else if( elem.getType().equalsIgnoreCase(com.cannontech.database.db.graph.GraphDataSeries.PEAK_SERIES) )
		{	
			// get the pointID value for the peak point ( need this ID to compare
			//	  it's location in the table to that in the combo box)
			peakPoint = elem.getPointID().intValue();
		}

	}

	// Set the Selected Index for the peak point combo box:
	// get the peak point to be displayed the combo box by comparing the pointID's of the peak point and
	//    it's corresponding graph point.  Need to do this because usage points may disrupt the order.
	if( peakPoint > 0)
	{
		for( int i = 0; i < selectedIndex; i++)
		{
			com.cannontech.database.db.graph.GraphDataSeries peakGDS = (com.cannontech.database.db.graph.GraphDataSeries) model.rows.get(i);
			if( peakGDS.getPointID().intValue() == peakPoint)
			{
				getPeakPointComboBox().setSelectedIndex(i + 1);
				break;
			}
			
		}
	}

}

	/**
 * Insert the method's description here.
 * Creation date: (10/24/00 4:07:55 PM)
 * @return com.cannontech.database.data.graph.GraphDefinition
 */
public com.cannontech.database.data.graph.GraphDefinition showCreateGraphPanelDialog(java.awt.Frame parent)
{
	javax.swing.JDialog dialog = new javax.swing.JDialog(parent);
	dialog.setTitle("Yukon Trending Reports Editor");
	
	class DialogButtonListener implements java.awt.event.ActionListener
	{
		javax.swing.JDialog dialog;

		public DialogButtonListener(javax.swing.JDialog d)
		{
			dialog = d;
		}
		
		public void actionPerformed(java.awt.event.ActionEvent event )
		{
			if( event.getSource() == getOkButton() )
			{
				if ( ivjGraphGDSTable.getCellEditor() !=  null)
					ivjGraphGDSTable.getCellEditor().stopCellEditing();
				if ( ivjUsageGDSTable.getCellEditor() !=  null)
					ivjUsageGDSTable.getCellEditor().stopCellEditing();
	
				setButtonPushed(OK);
			}
			else if( event.getSource() == getCancelButton() )
				setButtonPushed(CANCEL);

			dialog.setVisible(false);
			dialog.dispose();
		}
	}
		
	java.awt.event.ActionListener listener = new DialogButtonListener(dialog);
		
	getOkButton().addActionListener(listener);
	getCancelButton().addActionListener(listener);
	
	dialog.setModal(true);	
	dialog.getContentPane().add(this);
	dialog.setSize(800, 511);
	dialog.show();

	getOkButton().removeActionListener(listener);
	getCancelButton().removeActionListener(listener);
		
	if( getButtonPushed() == this.OK )
		return (com.cannontech.database.data.graph.GraphDefinition) getValue(null);
	else
		return null;
}
/**
 * Insert the method's description here.
 * Creation date: (6/18/2001 3:27:51 PM)
 * @param event javax.swing.event.ChangeEvent
 */
public void stateChanged(javax.swing.event.ChangeEvent event)
{
	if( getBottomTabbedPane().getModel().getSelectedIndex() == GRAPH_TAB )
	{
		setTreeViewPanel(getGraphPointsTree());
	}
	
	else if( getBottomTabbedPane().getModel().getSelectedIndex() == USAGE_TAB)
	{
		setTreeViewPanel(getUsagePointsTree());
	}

}
}

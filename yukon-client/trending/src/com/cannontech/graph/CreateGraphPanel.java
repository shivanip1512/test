package com.cannontech.graph;

/**
 * A panel to create and edit graphs.
 *
 * Creation date: (10/23/00 3:24:57 PM)
 * @author: 
 */
import java.util.Vector;

import com.cannontech.common.editor.PropertyPanelEvent;
import com.cannontech.database.db.graph.GraphDataSeries;
import com.cannontech.graph.gds.tablemodel.GDSTableModel;
public class CreateGraphPanel extends com.cannontech.common.gui.util.DataInputPanel implements com.cannontech.common.gui.util.DataInputPanelListener, java.awt.event.ActionListener {
	public static final int OK = 1;
	public static final int CANCEL = 2;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private int buttonPushed = CANCEL;
	private com.cannontech.database.model.DeviceTree_CustomPointsModel graphPointsModel = null;
	private com.cannontech.database.model.DeviceTree_CustomPointsModel usagePointsModel = null;
	private GraphColors graphColors;
	private javax.swing.JButton ivjThresholdsButton = null;
	private com.cannontech.database.data.graph.GraphDefinition value;
	private javax.swing.JPanel ivjPointOptionsPanel = null;
	private javax.swing.JButton ivjAddGDSButton_Graph = null;
	private javax.swing.JPanel ivjAddRemoveButtonsPanel_Graph = null;
	private javax.swing.JSplitPane ivjCreateGraphSplitPane = null;
	private javax.swing.JLabel ivjNameLabel = null;
	private javax.swing.JPanel ivjNamePanel = null;
	private javax.swing.JTextField ivjNameTextField = null;
	private javax.swing.JButton ivjRemoveGDSButton_Graph = null;
	private javax.swing.JPanel ivjTopPanel = null;
	private javax.swing.JScrollPane ivjGraphGDSScrollPane = null;
	private javax.swing.JTable ivjGraphGDSTable = null;
	private AxisPanel ivjAxisPanel = null;
	private javax.swing.JPanel ivjBottomPanel = null;
	private javax.swing.JButton ivjCancelButton = null;
	private javax.swing.JButton ivjOkButton = null;
	private javax.swing.JPanel ivjOkCancelButtonsPanel = null;
	private javax.swing.JPanel ivjJPanel1 = null;
	private com.cannontech.common.gui.util.TreeViewPanel ivjTreeViewPanel = null;
	private javax.swing.JComboBox ivjPrimaryPointComboBox = null;
	private javax.swing.JLabel ivjPrimaryPointLabel = null;


	class IvjEventHandler implements javax.swing.event.CaretListener
	{		
		public void caretUpdate(javax.swing.event.CaretEvent e)
		{
			if (e.getSource() == CreateGraphPanel.this.getNameTextField()) 
				connEtoM1(e);
		};
	};
/**
 * CreateGraphPanel constructor comment.
 */
public CreateGraphPanel()
{
	super();
	initialize();
}
/**
 * Insert the method's description here.
 * Creation date: (4/24/2001 10:38:52 AM)
 * @param event java.awt.event.ActionListener
 */
public void actionPerformed(java.awt.event.ActionEvent event)
{
	if (event.getSource() == getRemoveGDSButton_Graph() )
	{
		removeGDS_ActionPerformed(getGraphGDSTable());
	}

	else if (event.getSource() == getAddGDSButton_Graph() )
	{
		addGDS_ActionPerformed(getTreeViewPanel().getSelectedNode());
	}
}
/**
 * Comment
 */
public void addGDS_ActionPerformed(javax.swing.tree.DefaultMutableTreeNode node)
{
	if( node == null)
		return;
	com.cannontech.database.data.lite.LitePoint pt = null;
	String deviceName = null;
	
	//Get the DEVICE Object selected in the tree.
	Object tempNode = node;
	while (tempNode instanceof javax.swing.tree.DefaultMutableTreeNode &&
			((javax.swing.tree.DefaultMutableTreeNode)tempNode).getParent() !=((javax.swing.tree.DefaultMutableTreeNode)tempNode).getRoot())	//root node is instance of TreeNode
	{
		tempNode = ((javax.swing.tree.DefaultMutableTreeNode)tempNode).getParent();
	}
	deviceName = ((com.cannontech.database.data.lite.LiteYukonPAObject)((javax.swing.tree.DefaultMutableTreeNode)tempNode).getUserObject()).getPaoName();
	
	if( node.getUserObject() instanceof com.cannontech.database.data.lite.LitePoint)	//  The selected node is one point
	{
		pt = (com.cannontech.database.data.lite.LitePoint) node.getUserObject();

		// Create the GDS to add in the tables.
		GraphDataSeries gds = createGDS(pt, deviceName );
		GDSTableModel model = (GDSTableModel) getGraphGDSTable().getModel();
		model.addRow( gds );
	}
	else if( node instanceof javax.swing.tree.DefaultMutableTreeNode )	// The device and all points are added to the GDS, e loop through the children.
	{	
		java.util.Enumeration e = node.children();
		elementLoad(deviceName, e);
	}
	else	//The tree label ("Devices") was selected...not acceptable.
		return;
}
/**
 * connEtoM1:  (GraphNameTextField.caret.caretUpdate(javax.swing.event.CaretEvent) --> CreateGraphPanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (1/15/2002 9:40:15 AM)
 * @return com.cannontech.database.db.graph.GraphDataSeries
 * @param point com.cannontech.database.data.lite.LitePoint
 * @param deviceName java.lang.String
 */
public com.cannontech.database.db.graph.GraphDataSeries createGDS(com.cannontech.database.data.lite.LitePoint point, String deviceName)
{
	com.cannontech.database.db.graph.GraphDataSeries gds = new com.cannontech.database.db.graph.GraphDataSeries();
	
	gds.setDeviceName( deviceName );
	gds.setPointID(new Integer( point.getPointID() ));
	
	String gdsLabel = point.getPointName() + " / " + gds.getDeviceName();
	if (gdsLabel.length() > 40)
		gdsLabel = gdsLabel.substring(0, 39);
	gds.setLabel(gdsLabel);
	
	gds.setAxis(new Character('L') );
	gds.setColor( new Integer( getGraphColors().getNextLineColorID()) );

	// call to obtain the type from the database (pointUnit)
	String type = getPointTypeString(point);
	gds.setType(new Integer(GraphDataSeries.getTypeInt(type)));

	gds.setMultiplier(new Double(1.0));
	
	//ADD GDS TO THE PRIMARY POINT COMBO BOX.
	getPrimaryPointComboBox().addItem(gds.getLabel().toString());
	
	return gds;
}
private void elementLoad(String devName, java.util.Enumeration e)
{
	com.cannontech.database.data.lite.LitePoint pt = null;
	while( e.hasMoreElements() )
	{
		Object nextElem = e.nextElement();
		if( nextElem instanceof com.cannontech.database.model.DummyTreeNode)
		{
			java.util.Enumeration e2 = ((com.cannontech.database.model.DummyTreeNode)nextElem).children();
			while (e2.hasMoreElements())
			{
				pt = (com.cannontech.database.data.lite.LitePoint) ((com.cannontech.database.model.DBTreeNode) e2.nextElement()).getUserObject();

				GraphDataSeries gds = createGDS(pt, devName);
				GDSTableModel tModel = (GDSTableModel) getGraphGDSTable().getModel();
				tModel.addRow(gds);
			}
		}
		else 
		{
			pt = (com.cannontech.database.data.lite.LitePoint)((com.cannontech.database.model.DBTreeNode)nextElem).getUserObject();

			// Create the GDS to add in the tables.
			GraphDataSeries gds = createGDS(pt, devName );
			GDSTableModel model = (GDSTableModel) getGraphGDSTable().getModel();
			model.addRow( gds );
		}
	}	
}
/**
 * Return the JButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getAddGDSButton_Graph() {
	if (ivjAddGDSButton_Graph == null) {
		try {
			ivjAddGDSButton_Graph = new javax.swing.JButton();
			ivjAddGDSButton_Graph.setName("AddGDSButton_Graph");
			ivjAddGDSButton_Graph.setToolTipText("Add Graph Points");
			ivjAddGDSButton_Graph.setText(">>");
			ivjAddGDSButton_Graph.setActionCommand("AddPointButton");
			ivjAddGDSButton_Graph.setFont(new java.awt.Font("Arial", 1, 14));
			ivjAddGDSButton_Graph.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddGDSButton_Graph;
}
/**
 * Return the JPanel4 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getAddRemoveButtonsPanel_Graph() {
	if (ivjAddRemoveButtonsPanel_Graph == null) {
		try {
			ivjAddRemoveButtonsPanel_Graph = new javax.swing.JPanel();
			ivjAddRemoveButtonsPanel_Graph.setName("AddRemoveButtonsPanel_Graph");
			ivjAddRemoveButtonsPanel_Graph.setPreferredSize(new java.awt.Dimension(35, 70));
			ivjAddRemoveButtonsPanel_Graph.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsAddGDSButton_Graph = new java.awt.GridBagConstraints();
			constraintsAddGDSButton_Graph.gridx = 0; constraintsAddGDSButton_Graph.gridy = 0;
			constraintsAddGDSButton_Graph.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsAddGDSButton_Graph.insets = new java.awt.Insets(4, 4, 4, 4);
			getAddRemoveButtonsPanel_Graph().add(getAddGDSButton_Graph(), constraintsAddGDSButton_Graph);

			java.awt.GridBagConstraints constraintsRemoveGDSButton_Graph = new java.awt.GridBagConstraints();
			constraintsRemoveGDSButton_Graph.gridx = 0; constraintsRemoveGDSButton_Graph.gridy = 1;
			constraintsRemoveGDSButton_Graph.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsRemoveGDSButton_Graph.insets = new java.awt.Insets(4, 4, 4, 4);
			getAddRemoveButtonsPanel_Graph().add(getRemoveGDSButton_Graph(), constraintsRemoveGDSButton_Graph);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddRemoveButtonsPanel_Graph;
}
/**
 * Return the AxisPanel1 property value.
 * @return com.cannontech.graph.AxisPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private AxisPanel getAxisPanel() {
	if (ivjAxisPanel == null) {
		try {
			ivjAxisPanel = new com.cannontech.graph.AxisPanel();
			ivjAxisPanel.setName("AxisPanel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAxisPanel;
}
/**
 * Return the JPanel61 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getBottomPanel() {
	if (ivjBottomPanel == null) {
		try {
			ivjBottomPanel = new javax.swing.JPanel();
			ivjBottomPanel.setName("BottomPanel");
			ivjBottomPanel.setLayout(new java.awt.BorderLayout());
			getBottomPanel().add(getOkCancelButtonsPanel(), "East");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBottomPanel;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G0CCDA3AEGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8BF8D3471530336B36E44BEEC96BE45D04E4E9CB7B530D1352BF642BB7655F1256595246C9692E135046ED5D8DCD69D71A3A5F328D4D52646287B2EF83861BE0C09083A698D9FE853FG4B16DFA0303005F040893E362EAD01AC89699ACC62A47F1919FBC6D7D78F5BA44E37FC9C5FBBE74E4C1CB9F3664C4C1919AB21E05F1C5CB5D9850230A6D7D07E9DDFA388736F94047F74FC7F8C62BA843BCE
	D07D5B8F30D56891F360598BF17ABB6D3AFC61FAC39E045D901EFB07DDD7886F5B059B8DE5F740CB14F2F2A06EA7DF0A2B0FDD0EBE9F4B5151707D260D705C8C6083DC82C006C04AFF54D4246013A13CD9F9A730A6CB90E62CA1B4CFBB0AD47812B50C2E8F1EBE0032ACC23344D42C44AF819C21D98E30DA21ADG1AF5143B4F5457AAF4FDF74D91D67E38AAEB93A9CB15BF021C4552A6AACF3D70DDAA08EC61E7EF9E05E723755A7049C16F08E1D074F83C9ED99AF49A067D224FD9DF5F6217C4D9EAA7812B6811
	5CC2DEB661F125A30F26879EA14F840AF3CBC4AE96F8F7G0CE7A31FBF5D54287011F0ED0E107135C3D179DC1A4D78DB1D9D64531D3CA1BBA907647F97AAF7122E9142B2G6345540C3CE466A0AFDF98A0342539F6DD93C0EFAE626D03846F03708C00B9394863094348E36F7B5F92D68D583336C461B1B9177116119B64F1695903B93B28EEA4EDA56DDB3C964A8530810C81A482A4836C26BAB91C7FA6BCCD83F20BF7E4446BB179FC4DEE077F2C57A139613D3E9EE294DC37B46875BB8401695DDF9CE59178C1
	D832B6D46788303ADD94D0CF123A3FA14832A5ABB7C25D96BCD31335CC49E3555AE05D2CBAA2B77D9011DB913C13F424EFB1FCB545A728702C2D7CD497C8B89562E664211CFBB7A3AF161CFB057C0A5EACDD84DE923FFFB64B3CCE699B6B023CB099FFF6BB11718C404F85D8881086309220E0BD4A785B79D593493893745C6F915DBD2383BE51AFB70F3A5C8E492F487AB5D3ACD9C78216EED373D453B1394C2BD237D17AA397A34AA5FDDEE316F1BD13C7477A20DCD859EDD14BF62E8F570D4D3C8D33E91F98DF
	4F5AB01B63B7D17CCC951E356D5D34EF1170EC0893B658F50C7E47145E31C11BCF9A454B9B3479748DE2BE7190379C0035EF498EE27FAC9B6DBAA7C09CC0A2C0B2C09A40720D58462B734BA7590F2C2A76E5E99F5D3A931E52186C97BBBD81D9748CCAF6516F92875CD2C0D0E87EF5AB116BC0C83A9F507EBD88E534CB9E49AF4AAE2F87F297C7A4D026G23C95D3A155090438931B6570884850C78844CB7ED6BF6F83A4500FC4167G639A24E07169DB09CE5C906D10A3E4G6F351B083C72A5E26772603DE493
	4A6A7CCE029B07F042A6144B45ED5B60F98614DBF257571BDD03048D51FF8BF57450905113F9C06F5EEC57993700DC8146736D3AD5G33375AF566EDF65D8A00446DE0478A306F3E540BBAEA5E74F5216C99FBC49D25B63200695B12822D0E565332D7813EE807DDD78B508BB0861088108C3094E095C051CE085F09E36E18B4DF15BF619D5F894F64C96A2166A1EDCB384E133A61BB29A335B55B4369C81DD7EC8B470F67C76EC78408ACA35B047F9342FB366AFD130ACEEB9334F9EDD13DEFD51EBBA25031F9CF
	B8FEC3943E8964C640B17D7ADEA169233D508EB2C042CE5431AFEE53333E57AC86A46CEDDDFE68A812A328F10C768B5B896F528D49A31BA51F64F140CBC05175FB362F8B7643A1AF6FA333A91E58659668A8810E7F6A762D8C8FF928FBB5467FB30D97E5596F9A9815259EC916DD1E61E07A7FCBF98904187C00D257470BC8DD13200EA9GE93C2E8D855BD57D496275DE9B75590825D07A65BBF47E319C6805C25457F503E44ED842435BE9B898FF5FC0EF0C7678B890ACF3413415114DF5FB892D57869E7EB98D
	B7F19E8686237190CB9FA78B2C0C772316117D891441F44030A33A8E576C082C438DBBA26B30E9C7EC9D6D5C91C9C7D91CF587692B5E1B9E154EDF58C16C7D20576311E84763C984B647FF49C66A617238640BAE4730A477385E1384E1D6A1515D43F4CCF1427BF8A15A791BEF201DAFF96FAB4222AB9591670B09DF37E62595B21B373CB0E86799CF761D24AFC9EEE9848455629D75488C5FC747AB859F482638A7AEFD0724AD6DF68DBBE55318ABE09A153DBD03229B2452ADBADC5E66D1D976FA4ADC32B4E2A0
	FFFAE498B5DB1C22E7D8F214DE95EF08867126EC200DE3680478D672F6C4FF6C58C93DF679D2660FDD4815CEED7E16E885B49C319F292894D89DF2820F52BAD82421E92F02BBE699D32DC11552CF368BEF786F26F5B0B99C6D669E05E3112A1401BD2C12FF486B9F89E759C423E3B1AD2AB23DE28A4D2DB20CC5D5FE0449A00F4FE65D4BF4C59A715E10BEF9B67D2179EAB91D0851EA64737D6D9E4AA74D7A9CCC8FEDE09F5ADC125BD1B6880317EC20FF597C0FF2B9E6885C0406D432EDA13131789CF27925CE0F
	EF94330032EB306C07BA6E89EB470A7F9D8D7996723828673EC86D78493179B19B723842673541FB27D716978262706D3349651950B167531067476376B863B57574FDE1B23DC20B7A5F2124D50ACCFFB96222FCFEEA5DD719072E5CC5464E3CA23B2E98203A886721CBF712F81C07AA136D962F5B4D06FD08CBAAA2E37A68D001EA1C3694B19FE5A2BCD97C1FA3462F6471B707A345676D4278D591630BF97CAD27BA5E380B45EF667CFD5D99A9FDB07E2793447FF50278A32E587197A2467BB87F4F3A22714F5A
	610942FCB2BF132E0FCA1EC109AC844EC837F06DDF38CD93E7975D23C11FC2DAA119773AD5EB88067FE1D1647952D3C5E4BEFD0D677F53223582718D30BC597CEE3EC8727479DDA33064A20BA24557ACB72BFD4D71D08F6217CE0167D2G16F643B6D2972DFE463FCE52EFF0209FBA936873GD77ABA4B43713A323E27F4A7A5743F16F35C850A7BA3CCA89FDD0BBE2E3379EAFF35A35099F1DEC920E0B74B3FF4375677F7E4B7493783703D3B31DF1C5925DE1F1982816F200B3ADE94593E32CBBD67E43857F62D
	07A7F443005C891379B1EC1F5C57892F44B723209599BFF87404906EEBEAF538E42F9F173FADB7E91737F9DB3C8E29831A3805CF496DAE69A6695354871DB40472F26F46B97787EDEA9F7942ADA733B6C4114DDCC5A6A9AA59941CBB184372BEB60CF9679423FF7CE10EEB6438F2A76264E25485EBFBA41FE944BAEAEA46721C6942BC13F81EDF2EA7F9C65ADF9824059806C7DD06D159C59CD522ACD21B285EE778A5DDDB133C1695238FFFFD9B69AB45FB40B682D8G18BF315A017EC48760E66F417E7C32CD5D
	1F53G3F9AC03F572EE3F67EBE87515BA95AF5C5AFD20EECE3FA24B16728738F6DEDD24ACDFD78DEA1CFEC0B382FB073F725D955FB95FF775EE03B7ABE7ADCD6BC0062472FD4771FC599A722761F39CA9E49FB357DE7439EA24FB440AF5F0B7DA76E752D2A7E538D6D8A6B8630CCFC6D3BBB1B59A0A5DC39BB97ED1000EB70EF8FCD456F3DFAAF7AAFBB761236495FE757158118817AG4677A1EF7F32FBC2BFFE6BD88CBFFE6570D4781A3D8F7D960FCCA95DFC1E2E5AB915F4A9BC5DDD2E2924DB4A533D906673
	DF31AF6807947461BEC966137F10762182BD734967F27C1D94DF2A42333E15CF71A45C88F1F374D8FEFD4CBDA982B97BC3F9E069BAA6CCD72AC9477A5B41D2B2A6D1FB226A1E75752779840D0DFD7FEED30FFDCD101783E086406C7DE8838D975036AC580F7A7840BE127F8AC2F3GEC84C0A3C0BF40B8401C8328173A62068975128D86ECF25922754EA8F33DBF6B898F0BA05FA5BC6F41E26297467EE8753ABC3200FDB1FF8F997F3DFE57304B03389D94B76875D3279073C9AE26E3CC8664391A67EB5D9B5D07
	F5F1EFE49F56BBFBA37B308677467643DE5B9B4D4745786B9CC67E725F306B986E479CD742F1E71C082B6538F9AE44D9B86E95BACE74C3D86638674C8417886179EF203E4637D17B8761159C77850A5BD8E25799CB903733AD1ACF11240B2537E99344877BC0F954B2A2796355B0993F669ECA77DBF9079041B7C816B4822E9D2FBB56A9B42D3277EC856FEB7FF524A8F2DF2383B46BE77FF2DE5B4F089CEDG4E926CE7BEBB763338929C433FF8095813E488AF81D84E65DEF5A116DD908E064A3660A06A763CFD
	51F57BDB7BA26B76237BC8BF8BF8C77D0312D6FF976EAB62F1413ECBBCE7C4F40C6697B43DAC7A0725B07DDFC6533338E8697F30AF369F78FF7444860F7170EBB4FC0B370FE45A4C4BE875B894C341665F3F227DBF979A38C5C0DCBF6DDF5F024427B86E5794F7858C48DFB9EE007639BBG77429A44FD0F763987E1B16265FA333505589D37F84BBB8A65A69CA4F425AD288F2590EE82F0820C9FE4FBA30C6FEF5FA4F35BA13FB882556D71C903026F90C97B1299532683FDA6498F70C6G6BA11C2B95BA48FCC1
	35DE697139DDF446486247ACA46FE6AFAC7CC758BC12696963EDEABDCDBE4478490067CAGC6F3542055E5C23371B00C8307D1177FF49EF53976B06A72AE9BBDD3826199GF38E23AE0F5A353A1CFCB8283F2907230D4DEBAF137CB28EEB47662D943F7230F6ECCE3C04E3F3DE29DD67AEC57BF77A825A3FA59CD7CF4FC8690F405C79884E1B2DADF82E2683F0F1C7301DDEB46CD677FF62B0292FEF76923F0305B5BA13C9E2CB1E12BE79884A645FE81E19904EFB936477A62EF3468E61BAA7699B778A16380B91
	4F82E558CEE6553E294C075F8C4EE1D34E62BA2720954BCC0478A5EF92DCF32BFA1ECF7401B81C8CC42FE93C9C92CF7A5EA302BA7E9BA171045F42DCF57C5210F8A223EBCAFAD637A78FE25DD6BFB9CFF0BF5A9A751CD351D1D627C665599137DB302C7BEC96137BFD06A8F39C2E6BCC86FF216396A9DBBE0AF24FBACF77B0A11C8210FE9475F65000FA3B1253F69A89EDD9994C3B817A4AD0EF7FFCDE2B37F2D9D0D7E714C5535B3F277DE0F69953CF9D47FF1962972870CC6F76D1BC8927C21C71986A68CCBADE
	A4C0F89E472D6DC5DDCEBD06FCEE3CCCF0458650E583628AA94EEAE07E8A06FB6012F61CA57431464E6289624347726F041571C90C615CEE98088C448BE6A56C0B40DF3622EB598A4483CDA2409B8ABE4940640FB45B05738D0477C12FFBF4449390724BC999CEEA9F0E90F5AEC77959DBEE6FAC1463B6535DBF65F4CC4F924DC41FEC6541FAB27CD7A83EDF05E77A174A6D1E9B621614639A605B8748B8D0ED04F18740899087B087E02191679B717B0D428473FF1B57E7018909DBB5BDE6755B55FAFBE7449E57
	21FDD97058D705644F66C67591ADB1B27D48D41E999F6E26F8D6BFF389291F3E8256B6G7DGE3GB38166D6E07DD27717317A91770FC91645C1A7751EE165085BA708A603B82B5B2BEDA4DDF2C5647E138A788CD55C4A8ABCBBF6035A2D3CCA6D18F7874597D7EA473C3C73B86699A1AE2192F555E9504AF6D5E5303C0DD551EC577F2336D0DF25BD3B76C30AB7D6E94F2EF59951575484F1F32B50CEED6AC65B15D74D6DD98F5A2E32EA6473CB547675C25887B00B637F096209FFEA9E60D2B97E200D5817D98A
	FDB4BD690D91B7F13FBBC94B508931ED576D1E29E0B62724BBFC4E78289D67DD1940FFDE8D0C85G669A6627E336EFCFAF5A3E3E1A70BAE23F4ED54A7181CDBC408EA51CD82335FD4EFE522748DC5CA28E40AC116377ECD2705C21A0603EC167E57578BFD761EFF18D0E31DF647E04F4406D9358B9AC02E37FB2CF0563E08D7396B9F3BECE0EE1AB7D7C579B311F97BFF81FE0FEAEB78BEDF8D8FB3F45E4B16F2D609CE97625C3B92CAE9FB5E441335208794E3929769F562EEF096ABF4CD072DB29BC97FCFB3722
	A38F10E640F3ED2A77FFEF192E33C6C17D7C7D3416416C5EE387222FA39FBF90F99D79438311FDA4CF9D083D3EFB66C074F3BE69875467FC185DFE2D0C68DF59F13B2E83408D908710F09CED7655B78E8854E6C730572D0EE1320EA5A7DDE5AC7FECC9743A5ACAA6BE9F7BCE8959C39920EBAD12BF778D151076123DBE0AE4B8E7891191BDFC43C8953C27045E591006A81A594B9D6D84B79F6A3578B85A50A2AB5A50F40EBBCFF1F935F6DDC9AD626E2738DA88DBEB51F60E53B51B8342E39C77B90603B55ECC0E
	5BFCBE16FE113451629CB162C2F578F04CB2BE2E5DE5B278084E756783CFA9DCAE2F16237C16737A7E40C876968B6AB07C948DD7737085E3B4DEC91ACF26CFFB221671C91C5DE363CBC3B70EAF3DF5ECFC7141B33E0E79049755911A2F7568951A59916AB6DF41B13B3AD3463103F998905FF80674F76A06697291F7CFA0B47EEFC4120E1C5CC2BC73BB5C5D9049D71DD7EF57955723EFE2DB151A263A1E51B860B9D60F6B78DF58F1BEBB8BF00B6BF19DDF519F321EE46B78F63F4B51AC8E3305BC9B3F8EDE44B5
	355000EB441E0BA44FDA88DB811C8DB8561D6B65BE3D06490EF5192758D877C503A0F09F63D0949FA39D16D9D9F117312C6486544DFF8C7193E682BE27B136CE32B170A71755E3E07E3D4732F0DE2025AFD272ABE9546E21BDD1CE863EDE404BG09G7381D2G5281B281F2CE58F5C5GC6008E00BEG9FC0BCC08240BC0005A750EEBFFE142C376C6255709DD7C0AA8DC50D37DFE4FB810C0F2395C4AECBA01F95BC2FE3E5C7E364E575FBFD12DF3E453074E402E207F547220F851B0FCDBC96949E23FB6CE043
	ED37FC0AFF3378985D2B989A8AC8FC4C59FFAC1F63BA83D6EF40C5BA8A6B9FE56DE4BD63F05DF041C0C88F2932B529399D5BFF63C91069C93AFFED55C7E8B30462136A7E6A3412B2873D9E98FEC73D23812673AC6FBB2C2873E3A751473840CA78707ADDA083F60E005126F25A191C76EE6A0702259E6D528C7762DE22234CCBDE217471070FC77213AF02FC52F8DE77984267468FF11F640A134C1F1AF38AF46B945B2BE03258E10CA58B63A935ACF61FA4F3082EEBAD24955D6C00D4C0654FFF5528651314E306
	BCFACF211D996CC6BB63835C3CD3E8939E6CC679E41CC27B71B3CADB548479GF4B4A16D13BD58267DCDD87FEC9BBD0F6075A9FD75EA3EFA9E1CFE2BB0EBEB143E1A58241C09E88A76D572E4E5BDC5FD9A24CDD6B7A1DF5F34903E2ACDF61D8540E1C2DB795B3C92A166FDC8EE3ED95E272B704C433889737E1F37283F8B4229G4BCCFC2FB64C9FBC39B172CF37196E4D0B3767C779A135792BCDDABF4A920A4FEB567AD15E3E087AD0GF1E34DD85F1EDEF57969004FEC0EED23D93A4FDC0E44F7CE8BCBDB5492
	1E871B63BCCC57DFE5AD0CBF06FB04624C8A0E594D11CA22DD4C9EBDEBB8A8C43117B0EBBE8DC3D25740D5E9D0360943BC4D4F4A235B4A0C7209ED656F4AA34F1B7FD89EBEEFDED99EF95E7CCA39FA5E2C6C8F15939D9E067122175365989177B6472DB32ED3F097DD8E594971DB0C6B95FC07C48A647B4BC64257CD0A6BD5F02F2BF0EFAB38FDC6E23F204ACE2F9F531650B965104B6DE661D2CA637200796772B8C6F9F479C4955F159C97645BD8C15A1A2F27587025449D2FA890589D871768F63DC74DF68F90
	FA0619EDA93012762F94508EDA2C040F96095C81453941CDC9EDEF0A772D09EAEF7A959D1C5992EAEFD85E09D6427B10688E8477D8DF3092BDD31FA88AFA738D7656EEDBE70B49F22547EA693489E837DEBC0EB6F2D18B5A16AD75242F2D02F03E592EABB523CDFE4600FD3089F0E3E63433FB4A51A64FB7E39EE74A896DF2888B2DB01634227DE5B26F01514749F9F82B82F9B036E27A1DD5A43D9342F1G092D585FDD5D37E727EE5EE63A79D3CE476C58599E427F7CD62DFD33D37C42D62DFD7B959F6F96C3DC
	D99B56F7C90F3A7CD9001F5B965B3EB17B13D62507E7B25026812C8248EF07B5ACC0A3009540590E7339FF2D08B51F63AA241A9DAA7E1886B5EF7110DFE2FB10372476E8FE50BDE7C9DD9735EB77F00ED07C52F66D9E4E37AC38071389F1368E14CDD7D52C36C96E08D63E77B849AF35C35BB6E3943F34C35BB6EB0EE35BAC03380ECE3E163DA8F0BDF9D675FE6562747B294626358CB62EDD6D8D9F6B3C3D6A310E61E65335D39248E5E1A77A82567421AFE0F1A74EFB44C3C40E0A7D24438243970FED8A62F1D8
	D07478E48D51632253F6DDB5C0AF008FA09EE0B640FC004527D10FDF2AAC0D2147ECD3B928440A3F6F38D607161DD65D7BBD9DCD077E165A480DE734BA7C850AAFB92355619D7528430D90B7678C6A5073E1FB8913EB7F5F5DE63A836537E74F3EC76DF90EC55BE796D3FC3EC55BE74E17E31FA90638B88B563721A2CC5E96153CAD51647DF7F4BC58F8D63BF7F3B7456B4FEA77EE0A2BF06F269A62924F7279E20F40E55127FA7FCD77747759D727358C566FFE5B03FDB61B63D674E01FA5FB952C2F7C2AAA7A7C
	72452A096717FF2C0ABC3F7C6F2A707965ABD5116717C2F5787CB2371A646B1706E1EE458E10B17C06EAE2A3583A752C689107294F1A556FF7F46D359A5AB87F9C5A9FE3A3BD038261EA0E7B568934C93D67D09F5E20E34EBC8827GAC6378F20A4F6902B193405C0578C7AD580673947A4934CD4AA469D899CF73B2708E74E452CEF496A0D4CF062AD0968EDE375163417E70216ADDF7FC7A7B06FEDA4BE0F34FC7AE13F5028C0A4DFC04AF3EC56A48767E0A7AF06FEFC1D7743DBFBC7710281CFB58216097F785
	6D1FF23F3AA6FA7F3256CC5C3F5E2E095C3F2E540477AFC7CD647EF535A63CFFF915FC7D7C00A6430F56C46FDFD93574BCAB54F1F9977625BB6AD0FFB6DAD1FF6E24E3DCAD04EDGB2475FCD7133A13C88E099476F2E5736B9C9BBD1DB5AB4B4F214B44AD97930B2A66373577625E8FD10157184395A01FDD775FE31FC7A7B0DEFDA4BE0ED5DDD01FBBDF967317DD3AB79F90373581E3328CD6905301B636E2338F8884F653883D551F8A669EE1757DEA52DB24F08DA46E46DE4B4BB9234A7C2A3D95F333EA488CB
	4E933994B6929B13F29E573B6D0D617E56F79B517FD9504D760A4A6059544D4EE3B0FB74EFA7509E75F6074B844FA0A03801A62EBBF896A121DBFB9641F41C7827EDCE3F94F0FA5D0EG734A3238F3EF913F06D5395BC73616DA3CA3835EE66F186257583FD5930F679958190501336AB38BF314FAAC6E463BD1478C6A78F4A5BE27876373C46D198792DF54033278208AE5D1569379CC1A9A1A00465693140533A7A88B66EF686CC3FF038CF1ECAC20DBB60A2CF65506371931965BAC290735D98ABC1776303DDD
	363F17D827D7E8B2A37019E3D37B48FF749E3137B63FA411D3CE21FBF83ED3643E97BDF95CEE6E699974FB5DEEC201712F95931BEDF2B858C5EC35031DDDF1D6768396572B7D6CC5B646EBAFBC5DB65C7393C3767C62951A7970CC61B4FF5B217557931AF4084F84E072F93F82E972AEB0796861D9CD208E7790DE28548B61FD8A41F2C1AD1FE39E52C6DD5754FA7A58D1B20E28F795187EBCD52555BFD2E65F85542F9EDD24F85F856C234708CBCE714F1D1054FBF74677B7E56119C7AD3F718A3F89970267D758
	5A63330D3876C90138559750CF76F4A37A492A6D6867DACDE95D900E8718EDC75A17CF70FBC376C8FB1F0290FD6F7371BAC1C09B3125072C23A36CFDB28172BE716533A49F2213AB6C38DE9FF66F0E1C964D031256C14F82107DAC6BC5647F14182770B703639E2E42BA2D38B8557D5CE5747B194C361F6BD32FA1CBFAE1CC6A0DBDEE30F6692D45F631GFDFCAF72B527965BE5E1AF364B5314F6A504B73E8DEB003711F6D19D562171ED541FD5F5EC9CA0F3B514FB76071542A46F24EA0CGABC7E860F7E75FC6
	1E9E2E24672EA11C82107EB6EF2756BD115BC9EDBA301D2BF01FEAA54FF71C1ED1AD3B846B9C003ECBD8576FF6A02DFC89E94F53BBFAC990CE81C83F043E612FD520ECD7822E6CB266717B8A142D63B23F4BC06BB19B428BGD2AF239C05AAB2F6360A81652CC0CEB51EBDDF46737BBB9D4A3F388F4F525E55C052597A508F74C0ADB923944D8FC4AECEB32FBD6A534C465B73255CFB1B697EE34A69182F43F7027A447B34BE18DB94AF77E9FDB0D9A730CD62A0EED99F4E3FD61FD0175F718E3479BB1359B3FB60
	EC24B915CFC99B9FA50F448878A440AD82C8D345A97EFD6A57DA8E78559152653F8BFD912076DDEDBA339809B70BC2577F2EE64D2004E740F33672BEDFF92640F3A9400A30B29E8971B78BD7E06EF0A5365C58DCD96A8B7723DE6DD37BD1D97E6F565E1EBE39EFB35D57271C0E69DBF39D3D3FFBC52B07E7A83E7A0AD68F53385DED023839D7D08F1F28D3171F57EF579577CFC68FF39BE271ED0C1087636FG75891A7B35FC9F25F8EB3F166F851548F79F44AD6AC73ECBB85FA5A2682298DA1EC50CD6FEA63533
	7D22767C77AB946F9335673F7F26854FFF47C15CB2914BDF540165F78CA877178602E57A8622157F84355D7183DA9F6A920ACF9C507AD0AF727B58C99017BF0865FFB34C07BBB9FD7B4EED264B1CF2BA652E90EDBFF9D05B5E77D0FC5C20363D7771761E89F1193C3E6B2A31FC1BA3A8DB2772BE8E4FD90ED019ABF7FEF511781E2B50A6BB425B090DDFF7B71079C4A0E40C3AC1BE8D223CFF24FA4FBBB17DBE067D53DA8633075BCF065B48221361FBCD0B68BCB595E4176EC0DF4441F3745B189096A444EDB9C3
	F08590B6F25CD77879DEB3478DD29FD9820467F15CC394379042E99C97C767384BA1AC8CA16E3786ACE3A3477DAC974B50F35CE3A27267633885C3D8C6BC478DD13AC4884F6338A7A9EE8104D3B96E876C5EBD0405E1449552BB368590B6F2DCA5CDEB06300D631E23675C1C901E41F1C7BB1067599C371C2EBFD6C0B84709386FD01FCF91044BB86E47D558EEE49247F0BF2942F62BD8433F45D0975459732A771F57CE3F7E7E573416416A1CDE07F2581E0B38DF57219C6EDF0338628614F513936DCBE9D5D09E
	952A7747AA27DFB67FB12DE530BAB7D0B94C027AAE60FA13C0F10BA11C49F1AFF11FF20E0B5F93ED21F3FB9E964CA46C636199935E57A0E9BF1E0C3EB2E1999F679C3952AFE99FCCGDE673B389DBA05773CD2B86E30091F3167B2F8125E512D3DEA5775DEC55C3394B78E61599C77CE5837A0C81A0F5B463DD755FE579BE1E5FC92E76C51E74B4A7892BDDB475EE72B5E8FFE8A7D65642750DF74F45D3B90643A74AA367B81FA46EA8504D7F35C6778FD0B3CEB08FBF9AD7541C3584DF15F50E15AB80E5365E15A
	1957F07D7D5C59507D311729DFCC39F7F00E78F7C644B1574868086A5C340D0E3D691047F21E4F21B3440F6473CBC3125FAFB9582700957AD3ECDCF6437868C67FEE32957D3B967744FBEF7DC0A33B03FBEFB35CDADF77FBF40FCC72108DB507D26EDDB56807C8F0A31FA9B534CEAE0F26CE6914F69E50AD60347FE8A03432576B3639FC645A1EF227EEA7794C0512AE1F36C78624D9416B16190BF5AB9A09DCB735AF3F8CE81AC602F5330D846B464AF8010E697D00F783B05CAF68FCA09142F3C7105F8F445036
	2CEB8A3665FF0A115B72951A779248A31D6773F37A9D479B12DFF68D0AEED2F1BCCF4F522C9CC29FD11E875398062337FFBB1D2754822D1953F7D2DE073C9E653C7C954A078F6247B94DCB6DDBD5FC185C2EE18F39FB46734D633E2AA48F4A3E3983E51F6E09ACFB753EC1A65064F819DF124495F935FA755A09487AD2C86729A5C0EF74A23FCFD7066B60EFAA51275767C59E2B9A4CC2F4FB2055FDB7240B732A76F942F86C2EABD44909B9G1BC53F556BF68D5ED278982163AC398FB207737BE09D7125B93DFE
	57FB508E61A9D14EBF24E90952E770BA6456E39D743E48FBD56ABAD483CD07AFD807BE1F368E1FAFA07A037B9F6C8B16F80F29422C5E0BF07A581E72CCF84E71F1DD69082EFF3ACE42FFB2502678F06F6259D37CEE300F6DDD64DD376B0A2F333DEAD64713A62CE37575093F0B5081B4FD5703F574DD5756F1ECBF5963897FBAAD467F5ACE52EA3E340BA44A3EDBDE3BF6DF0370BBFE9D77BD1639A2454F3A0EF2BADE9DDDCED6BA864D855A791C3E2EBC542678CD4426B079BCD04E7BDA8479E877ABB301A673FA
	504E65783572592C8B6FBF87F5E843737D38EFF7F7F310073DF948C309BF726FE4446221D645834BBB19FC56C861A7678C318B9E69261EFF57576C828BC4FEBC253462F8D5193E326608126EF9F3B05DBD564924E33E6D5FD95137ED76CFF5FF645556E01973EA54E743D93C549E0C4FB7CC3EAEB3BA02691E4E1DFCDD762F453A0CC72CCB2C7D2B87BB854E770B270365FFF3E872FC2F3384537D3EFF72694A4E8653A5CF2ABCC63BE1F83F90FA763E077C456B5081C3F3174D56F516572B6BDC301C436264797B
	1CAD186E4976835AF4EDE03CCB8FB8DC225BBBFC20CCEFAC53D7D49EC17AFD9D13651135E120036FC1CE3A8D31FE7FFCA1787E14BD48F3D26564E53A3A125A9B7F28B4B57D493C98ACAF3E2EDA505E09603BE22ACB91AD5DDD96CB33297B0A29674A3956D6F32B19257FE5DDE50C749DDD5D1D173A4E59C2F2B8578A59723B8D75FC4FF34AFDFABB391622584E2B6FC73943CA07C7D6164B0C7BE5A5815CEBDB52CEFC1AFD901681E68650EE3EF5A9A8232F1E5A9B3DCD2AEA4A74470DC750C77A6AA974114E053C
	528338AF5756043639C0463265A6C2EB013083E0DCC6DA2F89E512A0CFD52F5E3EACF07DBC550EFB5629BC6F5DD791E79C453A0E77856BDAD89E232E28FECA7EBFA967FC0EC66613657FCF6F8473EF5429EDAF4B27AB8F73C965BCFD7FDD12062DA9DF322A7D44B9B76C3A229B135987B934D61D2E8C52B4CDAA5DD807BA1D8D52B8A7152E21DE1DEE9C524C1AD4BA0F19241B2B50A62B522442FBC604BC181F5E5CC17760EFE87D77E7A9DE3829755FBF5B0E3A399162FCB7516F1153F4FB7B8E5BEEB35D19A927
	E375DACE7BCB5ACDEDFD7FC47199E175FD2F896B3B82622CE3D8DFB964F78597GFE7158E45A495CCEFC9B699A5ACCCDB867D6F8DEC59ADC99041BEEC55A9351DFA5E558B4F1CECDF8BCC29933B4383990CE0ED8C6DA489D07D420490810DFF8BADB1EBA5DCAC813775EE476F7F34F076FDD2CBF9F3EF7F1E2EDB8DD735AF03AAFF40453A5F40453F5570753DD2C8F277B8C9D970A21AE4677507F13C37D03B6884B9CF71E62E6C0F8AE475D5F06FE226477D03FCE53B921F21FC2751E5EBE7D7E377F7E944AF829
	A9D82717D56FF1CD53DF761727358C56261FB7215EBC4277A5E619D0EF7E1E630668781A8E6D3E126B43D394C76EFA896FA34EC0F5F3A304CBB96E9E0A2B06301963DE7620AE75F25C0B6FD3DF9B0497F2DC73D5ACF7B147FD6DAA161B46F1B957305C8C0E132EE139ABB84E4F77DC04F1FEBF2D814B35F25C6F4B437BD3E6F9F8FF3A1697CE674BD353313940ECB39973C748777A84BCC77A8877DF74C139B2C0B2C0AAG5953D03E1F50C6566D03125B5DA3A93F3B524A9642EC9DDC5306F32DE563184659C672
	F4F8C7012CF9F4E8087CEC8B2E656F60742BC8B974BB388B7837EAB7FEE05769811AG7A8162BE60BE447648BE4F5FDCA1FD023D970B822FEFAB753B084A3748C7C6C40F03531D9A8852BD54916A6F7B815515B9D0EE528768EF596C657E048F26F69F0348BC73832DBF612F6F13BD759151CF3FE94EF8DAB4982C478B0E607B5A21607B11E1724E787C872ADB2BA16F3C8F114FBB397F2E764309FD0CDABEAD9FEAFD8E96625ED14677674DF87E239768E6FD08677D0E9DA317F322FEBF42B06C8898E422AFD475
	6A6B5109C63F9C294CC95F605F36DD7CA1BF5B57CA67D59F417C934078916A0125AD7C2EF9E2DB78BC7767DC4FBABE426F65067A28C85A3B56283FF7DB9F920FF76103716E1078F5E1699F88094FD525D77C5E5702FA77FB8FD97FC6D8AF1B7C30E00665F2857C2FBE426BF34A0B7376380FF05E5E678E6AC632A71877D0435472FE2C8173CE66F9BFCFBE77260C833FB6CFB4074C7CA8525C670F93265B2B89ABFB50D37EDE28F226086A4C46B86D1C75E90AAF0A534ED9AF36621C358462E644611C62D7ED37B7
	57B6FB5569D6C0FE429D13196BFDAF648CD98124A91DA09D7B567D226D6C2E325BC5AE4453DFE866F9BE599AEC3FB4557BBB2D53BFEF38B12DE530B16E32B7FC5C6B77060F0F4FB60453BD5F2026E33F9F7C563BDEE0BE698FC2EE40AFEC617D2613FE38A363C6D5FD768BDF4B4E92F2BA05356CF0F52710C3EE33F58A397432DB2710ADFBFDE364C72FF3549038AEFCC824CFC36B91AB8B396442DBFDC86C84E9A2534A42D61343218FDE26B1988C32D04F3E47A63AA1245C1551534BB2FA592B9F908312FE90C2
	03AEF293D0F46B594FEB69077CE041E5E1F3C80AFAD9486A3AA68BEB59DD87104E36F0EF05699FFE76DC5295F3C116108582F2CACCA239B7493DFAAA93322173902D414610D0643AEF1CC28AE1429451C2FEE1D308FDFC62ABB5AF267E529E489656F68A3B481420C772532F2BC88E72DBCD4A4F1337896BFCC4B0E40B8214A0C09F39817916DB328885C35D642750823264B061F7DB823230037E82DFB9B9E3DF5EA1861CF4C4EC3088B99E72C36A42B6966D96BD43656CB8F883155A9AD3932DAF9D8A015F6D14
	DF120B0167327D3BDB8E6EBF3DACB9DB48EA93563B3D22238DE6BDDEFF2730CEC62598731DE299655DA41ACFE6D259105DEEDEFDD2D98319D5F1262F0D5DBFF35372CDEDD902B066974AA9A559EDB1F08AC70BD374C3D1123FD3A6BF8C6F75177038BB764A071EEAAF6C4B9256A815A4225FB5661301AB3F688910DFA6848E749A8EB00AE7E478520F0CF7FF7315CBB423E0D2D95847C486C94B07A56FC839E9E8882CA04FG6487596F6159939A0306E65B58DDBBCEBF735AG3437D9489EB19A695F8A7A37127C
	2D20188A0A292884A1E68AB17FE9634728426D111912F03BC21A595086ADA57F7C8FBF7A6A730D19AB20F6EDC2AE6D05A06C7CA05539511181497F59243B77ECC84878BCE98B9FD1894CF76D10B862F25F0297B375320F917C31B15ECFC27ACA143E142BGFD8F4172D81E328D600DB09AA10406645E49E93875A26FE1D8F2ADF93DAC64938BC637931949018E13F572A498A240D304F22B8C13E729C19636331DC9ED8E0D0DE09BD9540419D0ECA16DF17DB416CE18A9F6F7D857496162E71F032241D2C2C5DE76
	5160FE7A37E44A9AC3D29DE29992CE484B515066ED9F0BE1B8A7DD8502B611BFAD1F864F6722702C5CF3BB72117A1E5B2A4F14C47DCE3363CEB6AF9A3BD37B0D4A538374ECAA60175C09F7EF6E950F89513FF556B3A23A5DB07ADDB3F99C643BE74D37E4A9782D622E8112FFGE914C865373E87885FD7D5E97EBFD0CB8788A0B9488E01AAGG5809GGD0CB818294G94G88G88G0CCDA3AEA0B9488E01AAGG5809GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB85
	86GGGG81G81GBAGGG3BAAGGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (10/24/00 3:37:40 PM)
 * @return int
 */
public int getButtonPushed() {
	return buttonPushed;
}
/**
 * Return the CancelButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCancelButton() {
	if (ivjCancelButton == null) {
		try {
			ivjCancelButton = new javax.swing.JButton();
			ivjCancelButton.setName("CancelButton");
			ivjCancelButton.setText("Cancel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCancelButton;
}
/**
 * Return the JSplitPane1 property value.
 * @return javax.swing.JSplitPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSplitPane getCreateGraphSplitPane() {
	if (ivjCreateGraphSplitPane == null) {
		try {
			ivjCreateGraphSplitPane = new javax.swing.JSplitPane(javax.swing.JSplitPane.VERTICAL_SPLIT);
			ivjCreateGraphSplitPane.setName("CreateGraphSplitPane");
			ivjCreateGraphSplitPane.setDividerSize(2);
			ivjCreateGraphSplitPane.setContinuousLayout(false);
			getCreateGraphSplitPane().add(getTopPanel(), "top");
			getCreateGraphSplitPane().add(getJPanel1(), "bottom");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCreateGraphSplitPane;
}
/**
 * Insert the method's description here.
 * Creation date: (10/26/00 12:02:12 PM)
 * @return com.cannontech.graph.GraphColors
 */
public GraphColors getGraphColors() 
{
	if( graphColors == null )
		graphColors = new GraphColors();
		
	return graphColors;
}
/**
 * Insert the method's description here.
 * Creation date: (10/31/00 3:07:24 PM)
 * @return com.cannontech.database.data.graph.GraphDefinition
 */
private com.cannontech.database.data.graph.GraphDefinition getGraphDefinitionValue()
{
	return value;
}
/**
 * Return the GraphPointsScrollPane property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getGraphGDSScrollPane() {
	if (ivjGraphGDSScrollPane == null) {
		try {
			ivjGraphGDSScrollPane = new javax.swing.JScrollPane();
			ivjGraphGDSScrollPane.setName("GraphGDSScrollPane");
			ivjGraphGDSScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
			ivjGraphGDSScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			getGraphGDSScrollPane().setViewportView(getGraphGDSTable());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphGDSScrollPane;
}
/**
 * Return the ScrollPaneTable property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTable getGraphGDSTable() {
	if (ivjGraphGDSTable == null) {
		try {
			ivjGraphGDSTable = new javax.swing.JTable();
			ivjGraphGDSTable.setName("GraphGDSTable");
			getGraphGDSScrollPane().setColumnHeaderView(ivjGraphGDSTable.getTableHeader());
			ivjGraphGDSTable.setModel(new com.cannontech.graph.gds.tablemodel.GDSTableModel());
			ivjGraphGDSTable.setCellSelectionEnabled(false);
			ivjGraphGDSTable.setDoubleBuffered(false);
			ivjGraphGDSTable.setBounds(0, 0, 200, 200);
			// user code begin {1}
			ivjGraphGDSTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

			//Column inits.
			javax.swing.table.TableColumnModel colModel = ivjGraphGDSTable.getColumnModel();
			colModel.getColumn(GDSTableModel.DEVICE_NAME_COLUMN).setPreferredWidth(80);
			colModel.getColumn(GDSTableModel.POINT_NAME_COLUMN).setPreferredWidth(65);
			colModel.getColumn(GDSTableModel.LABEL_NAME_COLUMN).setPreferredWidth(122);
			colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN).setPreferredWidth(40);
			colModel.getColumn(GDSTableModel.AXIS_NAME_COLUMN).setPreferredWidth(8);
			colModel.getColumn(GDSTableModel.TYPE_NAME_COLUMN).setPreferredWidth(55);
			colModel.getColumn(GDSTableModel.MULT_NAME_COLUMN).setPreferredWidth(40);			
//			colModel.getColumn(GDSTableModel.SETUP_NAME_COLUMN).setPreferredWidth(10);

			//Color choices setup
			java.awt.Color[] colors = getGraphColors().getAvailableColors();
			String[] colorStrings = new String[colors.length];

/*			int red = 0;
			int green = 0;
			int blue = 0;			
			Vector colorVector = new Vector();
			for( red = 0; red < 256; red+=64)
			{
				for ( green = 0; green< 256; green+=64)
				{
					for ( blue = 0; blue< 256; blue+=64)
					{
						java.awt.Color tempColor = new java.awt.Color(red, green, blue);
						colorVector.add(tempColor);
						System.out.println(tempColor.toString() + "  SIZE = " + colorVector.size());
					}
					blue = 255;
					java.awt.Color tempColor = new java.awt.Color(red, green, blue);
					colorVector.add(tempColor);
					System.out.println("1" + tempColor.toString() + "  SIZE = " + colorVector.size());					
				}
				green = 255;
				java.awt.Color tempColor = new java.awt.Color(red, green, blue);
				colorVector.add(tempColor);
				System.out.println("1" + tempColor.toString() + "  SIZE = " + colorVector.size());					
				
			}
			red = 255;
			java.awt.Color tempColor = new java.awt.Color(red, green, blue);
			colorVector.add(tempColor);
			System.out.println("3" + tempColor.toString() + "  SIZE = " + colorVector.size());					
			
			java.awt.Color[] colors = new java.awt.Color[colorVector.size()];
			colorVector.toArray(colors);
			*/
			for( int i = 0 ; i < colors.length; i++ )
			{
				colorStrings[i] = com.cannontech.common.gui.util.Colors.getColorString(com.cannontech.common.gui.util.Colors.getColorID(colors[i]));
			}
			javax.swing.JComboBox colorComboBox = new javax.swing.JComboBox( colorStrings );
			colorComboBox.setRenderer(new com.cannontech.common.gui.util.ColorComboBoxCellRenderer() );
			javax.swing.DefaultCellEditor colorEditor = new javax.swing.DefaultCellEditor(colorComboBox);

//			javax.swing.JColorChooser colorChooser = new javax.swing.JColorChooser(java.awt.Color.BLUE);
//			javax.swing.JComboBox testBox = new javax.swing.JComboBox(new javax.swing.JColorChooser[] {colorChooser.get});
//			colorChooser.showDialog(testBox, "COLOR", java.awt.Color.BLUE);
//			javax.swing.DefaultCellEditor colorEditor = new javax.swing.DefaultCellEditor(testBox);
//			colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN).setCellEditor(colorEditor);

			colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN).setCellEditor(colorEditor);
			javax.swing.table.TableColumn tblColumn = colModel.getColumn(GDSTableModel.COLOR_NAME_COLUMN);
			tblColumn.setCellRenderer( new com.cannontech.common.gui.util.ColorTableCellRenderer() );

			javax.swing.JComboBox axisComboBox = new javax.swing.JComboBox( new String[] { "Left", "Right" } );
			javax.swing.DefaultCellEditor axisEditor = new javax.swing.DefaultCellEditor(axisComboBox);
			colModel.getColumn(GDSTableModel.AXIS_NAME_COLUMN).setCellEditor(axisEditor);
			
			String [] typeStrings = new String [] {
				GraphDataSeries.BASIC_GRAPH_TYPE_STRING,
				GraphDataSeries.USAGE_TYPE_STRING,
				GraphDataSeries.YESTERDAY_GRAPH_TYPE_STRING,
				GraphDataSeries.PEAK_GRAPH_TYPE_STRING,
				GraphDataSeries.USAGE_GRAPH_TYPE_STRING
			};
			javax.swing.JComboBox typeComboBox = new javax.swing.JComboBox(typeStrings);
			javax.swing.DefaultCellEditor typeEditor = new javax.swing.DefaultCellEditor(typeComboBox);
			colModel.getColumn(GDSTableModel.TYPE_NAME_COLUMN).setCellEditor(typeEditor);

			//A checkBox is used here instead of a button, but you are REALLY putting a button in here.
			/*
			com.cannontech.graph.gds.tablemodel.GDSTableButtonEditor setupEditor = new com.cannontech.graph.gds.tablemodel.GDSTableButtonEditor(new javax.swing.JCheckBox());
			colModel.getColumn(GDSTableModel.SETUP_NAME_COLUMN).setCellRenderer(new com.cannontech.common.gui.util.ButtonRenderer());
			colModel.getColumn(GDSTableModel.SETUP_NAME_COLUMN).setCellEditor(setupEditor);
*/
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphGDSTable;
}
private com.cannontech.database.model.DeviceTree_CustomPointsModel getGraphPointsModel()
{
	if( graphPointsModel == null)
	{
		graphPointsModel = new com.cannontech.database.model.DeviceTree_CustomPointsModel(true);
		graphPointsModel.setIncludeUOFMType(com.cannontech.database.data.lite.LitePoint.POINT_UOFM_GRAPH);
	}
	return graphPointsModel;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsTreeViewPanel = new java.awt.GridBagConstraints();
			constraintsTreeViewPanel.gridx = 0; constraintsTreeViewPanel.gridy = 0;
			constraintsTreeViewPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsTreeViewPanel.weighty = 1.0;
			constraintsTreeViewPanel.insets = new java.awt.Insets(5, 5, 5, 0);
			getJPanel1().add(getTreeViewPanel(), constraintsTreeViewPanel);

			java.awt.GridBagConstraints constraintsGraphGDSScrollPane = new java.awt.GridBagConstraints();
			constraintsGraphGDSScrollPane.gridx = 2; constraintsGraphGDSScrollPane.gridy = 0;
			constraintsGraphGDSScrollPane.fill = java.awt.GridBagConstraints.BOTH;
			constraintsGraphGDSScrollPane.weightx = 1.0;
			constraintsGraphGDSScrollPane.weighty = 1.0;
			constraintsGraphGDSScrollPane.insets = new java.awt.Insets(5, 0, 5, 5);
			getJPanel1().add(getGraphGDSScrollPane(), constraintsGraphGDSScrollPane);

			java.awt.GridBagConstraints constraintsAddRemoveButtonsPanel_Graph = new java.awt.GridBagConstraints();
			constraintsAddRemoveButtonsPanel_Graph.gridx = 1; constraintsAddRemoveButtonsPanel_Graph.gridy = 0;
			constraintsAddRemoveButtonsPanel_Graph.fill = java.awt.GridBagConstraints.BOTH;
			constraintsAddRemoveButtonsPanel_Graph.insets = new java.awt.Insets(5, 0, 5, 0);
			getJPanel1().add(getAddRemoveButtonsPanel_Graph(), constraintsAddRemoveButtonsPanel_Graph);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}
/**
 * Return the GraphNameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getNameLabel() {
	if (ivjNameLabel == null) {
		try {
			ivjNameLabel = new javax.swing.JLabel();
			ivjNameLabel.setName("NameLabel");
			ivjNameLabel.setText("Name:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameLabel;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getNamePanel() {
	if (ivjNamePanel == null) {
		try {
			ivjNamePanel = new javax.swing.JPanel();
			ivjNamePanel.setName("NamePanel");
			ivjNamePanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsNameLabel = new java.awt.GridBagConstraints();
			constraintsNameLabel.gridx = 0; constraintsNameLabel.gridy = 0;
			constraintsNameLabel.insets = new java.awt.Insets(4, 4, 4, 4);
			getNamePanel().add(getNameLabel(), constraintsNameLabel);

			java.awt.GridBagConstraints constraintsNameTextField = new java.awt.GridBagConstraints();
			constraintsNameTextField.gridx = 1; constraintsNameTextField.gridy = 0;
			constraintsNameTextField.anchor = java.awt.GridBagConstraints.WEST;
			constraintsNameTextField.weightx = 1.0;
			constraintsNameTextField.insets = new java.awt.Insets(4, 4, 4, 4);
			getNamePanel().add(getNameTextField(), constraintsNameTextField);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNamePanel;
}
/**
 * Return the GraphNameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getNameTextField() {
	if (ivjNameTextField == null) {
		try {
			ivjNameTextField = new javax.swing.JTextField();
			ivjNameTextField.setName("NameTextField");
			ivjNameTextField.setColumns(20);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameTextField;
}
/**
 * Return the OkButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getOkButton() {
	if (ivjOkButton == null) {
		try {
			ivjOkButton = new javax.swing.JButton();
			ivjOkButton.setName("OkButton");
			ivjOkButton.setPreferredSize(new java.awt.Dimension(73, 25));
			ivjOkButton.setText("Ok");
			ivjOkButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOkButton;
}
/**
 * Return the JPanel71 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getOkCancelButtonsPanel() {
	if (ivjOkCancelButtonsPanel == null) {
		try {
			ivjOkCancelButtonsPanel = new javax.swing.JPanel();
			ivjOkCancelButtonsPanel.setName("OkCancelButtonsPanel");
			ivjOkCancelButtonsPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsOkButton = new java.awt.GridBagConstraints();
			constraintsOkButton.gridx = 2; constraintsOkButton.gridy = 1;
			constraintsOkButton.insets = new java.awt.Insets(10, 4, 10, 4);
			getOkCancelButtonsPanel().add(getOkButton(), constraintsOkButton);

			java.awt.GridBagConstraints constraintsCancelButton = new java.awt.GridBagConstraints();
			constraintsCancelButton.gridx = 3; constraintsCancelButton.gridy = 1;
			constraintsCancelButton.insets = new java.awt.Insets(10, 4, 10, 15);
			getOkCancelButtonsPanel().add(getCancelButton(), constraintsCancelButton);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOkCancelButtonsPanel;
}
/**
 * Return the PointOptionsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getPointOptionsPanel() {
	if (ivjPointOptionsPanel == null) {
		try {
			ivjPointOptionsPanel = new javax.swing.JPanel();
			ivjPointOptionsPanel.setName("PointOptionsPanel");
			ivjPointOptionsPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsThresholdsButton = new java.awt.GridBagConstraints();
			constraintsThresholdsButton.gridx = 0; constraintsThresholdsButton.gridy = 0;
			constraintsThresholdsButton.weightx = 1.0;
			constraintsThresholdsButton.weighty = 1.0;
			constraintsThresholdsButton.insets = new java.awt.Insets(4, 4, 4, 4);
			getPointOptionsPanel().add(getThresholdsButton(), constraintsThresholdsButton);

			java.awt.GridBagConstraints constraintsPrimaryPointComboBox = new java.awt.GridBagConstraints();
			constraintsPrimaryPointComboBox.gridx = 0; constraintsPrimaryPointComboBox.gridy = 2;
			constraintsPrimaryPointComboBox.weighty = 1.0;
			constraintsPrimaryPointComboBox.insets = new java.awt.Insets(0, 4, 4, 4);
			getPointOptionsPanel().add(getPrimaryPointComboBox(), constraintsPrimaryPointComboBox);

			java.awt.GridBagConstraints constraintsPrimaryPointLabel = new java.awt.GridBagConstraints();
			constraintsPrimaryPointLabel.gridx = 0; constraintsPrimaryPointLabel.gridy = 1;
			constraintsPrimaryPointLabel.anchor = java.awt.GridBagConstraints.SOUTH;
			constraintsPrimaryPointLabel.insets = new java.awt.Insets(4, 4, 0, 4);
			getPointOptionsPanel().add(getPrimaryPointLabel(), constraintsPrimaryPointLabel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPointOptionsPanel;
}
/**
 * Obtains the point tag from the LitePoint.
 * returns default value of GRAPH_SERIES 
 * Creation date: (4/23/2001 8:23:06 AM)
 * @return java.lang.String
 * @param pt com.cannontech.database.data.lite.LitePoint
 */
public String getPointTypeString(com.cannontech.database.data.lite.LitePoint pt)
{
	if( pt.getTags() == com.cannontech.database.data.lite.LitePoint.POINT_UOFM_GRAPH)
		return com.cannontech.database.db.graph.GraphDataSeries.BASIC_GRAPH_TYPE_STRING;

	else if (pt.getTags() == com.cannontech.database.data.lite.LitePoint.POINT_UOFM_USAGE)
		return com.cannontech.database.db.graph.GraphDataSeries.USAGE_TYPE_STRING;
	else
		return com.cannontech.database.db.graph.GraphDataSeries.BASIC_GRAPH_TYPE_STRING;	//default
}
/**
 * Return the PrimaryPointComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getPrimaryPointComboBox() {
	if (ivjPrimaryPointComboBox == null) {
		try {
			ivjPrimaryPointComboBox = new javax.swing.JComboBox();
			ivjPrimaryPointComboBox.setName("PrimaryPointComboBox");
			ivjPrimaryPointComboBox.setToolTipText("Optional...Primary Point to base coincidental values from.");
			ivjPrimaryPointComboBox.setPreferredSize(new java.awt.Dimension(173, 25));
			ivjPrimaryPointComboBox.setMaximumSize(new java.awt.Dimension(173, 25));
			ivjPrimaryPointComboBox.setMinimumSize(new java.awt.Dimension(173, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPrimaryPointComboBox;
}
/**
 * Return the PrimaryPointLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPrimaryPointLabel() {
	if (ivjPrimaryPointLabel == null) {
		try {
			ivjPrimaryPointLabel = new javax.swing.JLabel();
			ivjPrimaryPointLabel.setName("PrimaryPointLabel");
			ivjPrimaryPointLabel.setText("Primary Point:");
			ivjPrimaryPointLabel.setMaximumSize(new java.awt.Dimension(173, 25));
			ivjPrimaryPointLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
			ivjPrimaryPointLabel.setPreferredSize(new java.awt.Dimension(173, 25));
			ivjPrimaryPointLabel.setFont(new java.awt.Font("dialog", 0, 12));
			ivjPrimaryPointLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
			ivjPrimaryPointLabel.setMinimumSize(new java.awt.Dimension(173, 25));
			ivjPrimaryPointLabel.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPrimaryPointLabel;
}
/**
 * Return the JButton2 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRemoveGDSButton_Graph() {
	if (ivjRemoveGDSButton_Graph == null) {
		try {
			ivjRemoveGDSButton_Graph = new javax.swing.JButton();
			ivjRemoveGDSButton_Graph.setName("RemoveGDSButton_Graph");
			ivjRemoveGDSButton_Graph.setToolTipText("Remove Graph Points");
			ivjRemoveGDSButton_Graph.setText("<<");
			ivjRemoveGDSButton_Graph.setActionCommand("RemovePointButton");
			ivjRemoveGDSButton_Graph.setFont(new java.awt.Font("Arial", 1, 14));
			ivjRemoveGDSButton_Graph.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRemoveGDSButton_Graph;
}
/**
 * Return the ThresholdsButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getThresholdsButton() {
	if (ivjThresholdsButton == null) {
		try {
			ivjThresholdsButton = new javax.swing.JButton();
			ivjThresholdsButton.setName("ThresholdsButton");
			ivjThresholdsButton.setText("Add Thresholds...");
			ivjThresholdsButton.setMaximumSize(new java.awt.Dimension(173, 25));
			ivjThresholdsButton.setPreferredSize(new java.awt.Dimension(173, 25));
			ivjThresholdsButton.setEnabled(false);
			ivjThresholdsButton.setMinimumSize(new java.awt.Dimension(173, 25));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjThresholdsButton;
}
/**
 * Return the JPanel2 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getTopPanel() {
	if (ivjTopPanel == null) {
		try {
			ivjTopPanel = new javax.swing.JPanel();
			ivjTopPanel.setName("TopPanel");
			ivjTopPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsNamePanel = new java.awt.GridBagConstraints();
			constraintsNamePanel.gridx = 0; constraintsNamePanel.gridy = 0;
			constraintsNamePanel.gridwidth = 2;
			constraintsNamePanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsNamePanel.weightx = 1.0;
			constraintsNamePanel.weighty = 1.0;
			constraintsNamePanel.insets = new java.awt.Insets(4, 10, 4, 4);
			getTopPanel().add(getNamePanel(), constraintsNamePanel);

			java.awt.GridBagConstraints constraintsPointOptionsPanel = new java.awt.GridBagConstraints();
			constraintsPointOptionsPanel.gridx = 2; constraintsPointOptionsPanel.gridy = 1;
			constraintsPointOptionsPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsPointOptionsPanel.weighty = 1.0;
			constraintsPointOptionsPanel.insets = new java.awt.Insets(4, 10, 4, 4);
			getTopPanel().add(getPointOptionsPanel(), constraintsPointOptionsPanel);

			java.awt.GridBagConstraints constraintsAxisPanel = new java.awt.GridBagConstraints();
			constraintsAxisPanel.gridx = 1; constraintsAxisPanel.gridy = 1;
			constraintsAxisPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsAxisPanel.weightx = 1.0;
			constraintsAxisPanel.weighty = 1.0;
			constraintsAxisPanel.insets = new java.awt.Insets(4, 4, 4, 4);
			getTopPanel().add(getAxisPanel(), constraintsAxisPanel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTopPanel;
}
/**
 * Return the PointTreeViewModel property value.
 * @return com.cannontech.common.gui.util.TreeViewPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.cannontech.common.gui.util.TreeViewPanel getTreeViewPanel() {
	if (ivjTreeViewPanel == null) {
		try {
			ivjTreeViewPanel = new com.cannontech.common.gui.util.TreeViewPanel();
			ivjTreeViewPanel.setName("TreeViewPanel");
			// user code begin {1}
			ivjTreeViewPanel.setTreeModels( new com.cannontech.database.model.LiteBaseTreeModel[] { getGraphPointsModel(), getUsagePointsModel()} );
			ivjTreeViewPanel.getTree().setCellRenderer( new com.cannontech.common.gui.util.CtiTreeCellRenderer() );
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTreeViewPanel;
}
private com.cannontech.database.model.DeviceTree_CustomPointsModel getUsagePointsModel()
{
	if( usagePointsModel == null)
	{
		usagePointsModel = new com.cannontech.database.model.DeviceTree_CustomPointsModel(true);
		usagePointsModel.setIncludeUOFMType(com.cannontech.database.data.lite.LitePoint.POINT_UOFM_USAGE);
	}
	return usagePointsModel;
}
/**
 * Build up a graphDefinition and return it.
 * Creation date: (10/24/00 2:36:02 PM)
 * @return java.lang.Object
 * @param o java.lang.Object
 */
public Object getValue(Object object)
{
	com.cannontech.database.data.graph.GraphDefinition gDef;
	com.cannontech.database.db.graph.GraphDefinition gDefInfo;

	if (getGraphDefinitionValue() != null)
	{
		gDef = getGraphDefinitionValue();
		gDefInfo = gDef.getGraphDefinition();
	}
	else
	{
		gDef = new com.cannontech.database.data.graph.GraphDefinition();
		gDefInfo = new com.cannontech.database.db.graph.GraphDefinition();
	}

	gDefInfo.setName(getNameTextField().getText().trim());

	if (!getAxisPanel().getLeftAutoScalingCheckBox().isSelected())
	{
		gDefInfo.setAutoScaleLeftAxis(new Character('N'));
	}
	else
	{
		gDefInfo.setAutoScaleLeftAxis(new Character('Y'));
	}

	try
	{
		gDefInfo.setLeftMin(new Double(getAxisPanel().getLeftMinTextField().getText()));
		gDefInfo.setLeftMax(new Double(getAxisPanel().getLeftMaxTextField().getText()));
	}
	catch (NumberFormatException nfe)
	{
		nfe.printStackTrace();
	}

	if (!getAxisPanel().getRightAutoScalingCheckBox().isSelected())
	{
		gDefInfo.setAutoScaleRightAxis(new Character('N'));
	}
	else
	{
		gDefInfo.setAutoScaleRightAxis(new Character('Y'));
	}

	try
	{

		gDefInfo.setRightMin(new Double(getAxisPanel().getRightMinTextField().getText()));
		gDefInfo.setRightMax(new Double(getAxisPanel().getRightMaxTextField().getText()));
	}
	catch (NumberFormatException nfe)
	{
		nfe.printStackTrace();
	}

	gDefInfo.setType("L");

	GDSTableModel model = (GDSTableModel) getGraphGDSTable().getModel();
		
	for ( int i = 1; i < getPrimaryPointComboBox().getItemCount(); i++)
	{
		int type = model.getRow(i - 1).getType().intValue();
		if (getPrimaryPointComboBox().getSelectedIndex() == i)	//PRIMARY POINT FOUND
		{
			type |= GraphDataSeries.PRIMARY_TYPE;
		}
		else
		{
			//check to make sure it's there if we are going to remove it
			if( (type & GraphDataSeries.PRIMARY_TYPE) != 0)
			{
				type ^= GraphDataSeries.PRIMARY_TYPE;
			}
		}
		model.getRow(i-1).setType(new Integer(type));
	}
	
	java.util.ArrayList dataSeries = new java.util.ArrayList(model.getRowCount());

	// Copy the graphdataseries into a temp array to loop through
	com.cannontech.database.db.graph.GraphDataSeries[] modelGDSArray = model.getAllDataSeries();

	for( int i = 0; i < modelGDSArray.length; i++ )
	{
		//ADD ALL POINTS IN TABLE TO GDEF.GRAPHDATASERIES.
		modelGDSArray[i].setGraphDefinitionID( gDefInfo.getGraphDefinitionID() );
		dataSeries.add( modelGDSArray[i] );
	}

	gDef.setGraphDefinition(gDefInfo);
	gDef.setGraphDataSeries(dataSeries);

	return gDef;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getNameTextField().addCaretListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("CreateGraphPanel");
		setLayout(new java.awt.BorderLayout());
		setSize(651, 411);
		add(getCreateGraphSplitPane(), "Center");
		add(getBottomPanel(), "South");
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}


	//Setup primaryComboBox for default "no primary point"
	getPrimaryPointComboBox().addItem("no primary point");

	addDataInputPanelListener(this);

	//Add ActionListeners to the add/remove buttons.
	getAddGDSButton_Graph().addActionListener(this);
	getRemoveGDSButton_Graph().addActionListener(this);

	// user code end
}
/**
 * Insert the method's description here.
 * Creation date: (10/27/00 11:46:27 AM)
 * @param event PropertyPanelEvent
 */
public void inputUpdate(PropertyPanelEvent event) 
{
	ivjOkButton.setEnabled(isInputValid());
}
/**
 * Insert the method's description here.
 * Creation date: (10/27/00 12:24:35 PM)
 * @return boolean
 */
public boolean isInputValid() {
	return (getNameTextField().getText().length() > 0 );
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args)
{
	try
	{
		javax.swing.JFrame frame = new javax.swing.JFrame();
		CreateGraphPanel aCreateGraphPanel;
		aCreateGraphPanel = new CreateGraphPanel();
		//frame.setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage("GraphIcon.gif"));
		//frame.setTitle("Yukon Trending Reports Editor");
		frame.setContentPane(aCreateGraphPanel);
		frame.setSize(aCreateGraphPanel.getSize());
		
		frame.addWindowListener(new java.awt.event.WindowAdapter()
		{
			public void windowClosing(java.awt.event.WindowEvent e)
			{
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	}
	catch (Throwable exception)
	{
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * Action Performed for the Remove Button on the Usage Tab.
 *  Removes objects from the usagedataseriesTable
 */
public void removeGDS_ActionPerformed(javax.swing.JTable table)
{
	int[] rowsToRemove = table.getSelectedRows();
	
	//REMOVE GDS FROM PRIMARY POINT COMBO BOX.
	//FOR LOOP IS REVERSED INDEX ORDER, SO WE NEVER HIT AN INDEX ALREADY REMOVED.
	for (int i = rowsToRemove.length - 1; i >= 0; i--)
	{		
		//IF GDS REMOVED IS PRIMARY POINT, SET PRIMARY POINT COMBO BOX TO INDEX 0 ("no primary point").
		if ( (rowsToRemove[i] + 1 )== getPrimaryPointComboBox().getSelectedIndex())
			getPrimaryPointComboBox().setSelectedIndex(0);

		getPrimaryPointComboBox().removeItemAt((rowsToRemove[i] + 1 ));
	}

	GDSTableModel model = (GDSTableModel) table.getModel();
	model.removeRow(rowsToRemove);
	
	table.getSelectionModel().clearSelection();
}
/**
 * Insert the method's description here.
 * Creation date: (10/24/00 3:37:40 PM)
 * @param newButtonPushed int
 */
public void setButtonPushed(int newButtonPushed)
{
	buttonPushed = newButtonPushed;
}
/**
 * Insert the method's description here.
 * Creation date: (10/26/00 12:02:12 PM)
 * @param newGraphColors com.cannontech.graph.GraphColors
 */
public void setGraphColors(GraphColors newGraphColors)
{
	graphColors = newGraphColors;
}
/**
 * Insert the method's description here.
 * Creation date: (10/31/00 3:07:24 PM)
 * @param newValue com.cannontech.database.data.graph.GraphDefinition
 */
private void setGraphDefinitionValue(com.cannontech.database.data.graph.GraphDefinition newValue)
{
	value = newValue;
}
/**
 * Retreive the graph data series upon the init of the createGraphPanel
 * Creation date: (10/24/00 2:35:45 PM)
 * @param val java.lang.Object
 */
public void setValue(Object val) 
{
	if( val == null)
		return;
		
	com.cannontech.database.data.graph.GraphDefinition gDef = (com.cannontech.database.data.graph.GraphDefinition) val;
	setGraphDefinitionValue(gDef);

	//SET GRAPH NAME
	getNameTextField().setText( gDef.getGraphDefinition().getName() );

	//SET LEFT/RIGHT (AUTO)SCALE
	if( gDef.getGraphDefinition().getAutoScaleLeftAxis().charValue() == 'N' ||
		gDef.getGraphDefinition().getAutoScaleLeftAxis().charValue() == 'n' )
	{
		getAxisPanel().getLeftAutoScalingCheckBox().setSelected(false);
	}
	else
	{
		getAxisPanel().getLeftAutoScalingCheckBox().setSelected(true);
	}

	if( gDef.getGraphDefinition().getAutoScaleRightAxis().charValue() == 'N' || 
		gDef.getGraphDefinition().getAutoScaleRightAxis().charValue() == 'n' )
	{
		getAxisPanel().getRightAutoScalingCheckBox().setSelected(false);
	}
	else
	{
		getAxisPanel().getRightAutoScalingCheckBox().setSelected(true);
	}

	//SET LEFT/RIGHT MIN/MAX VALUES
	getAxisPanel().getLeftMinTextField().setText( gDef.getGraphDefinition().getLeftMin().toString() );
	getAxisPanel().getLeftMaxTextField().setText( gDef.getGraphDefinition().getLeftMax().toString() );

	getAxisPanel().getRightMinTextField().setText( gDef.getGraphDefinition().getRightMin().toString() );
	getAxisPanel().getRightMaxTextField().setText( gDef.getGraphDefinition().getRightMax().toString() );
	
	//INSERT ALL GDS INTO TABLE
	java.util.List gds = gDef.getGraphDataSeries();
	java.util.Iterator iter = gds.iterator();

	//ADD ALL SERIES TO TABLE.
	GDSTableModel model = (GDSTableModel) getGraphGDSTable().getModel();
	int currentRowIndex = 0;
	while( iter.hasNext() )
	{
		com.cannontech.database.db.graph.GraphDataSeries elem = (com.cannontech.database.db.graph.GraphDataSeries) iter.next();
		model.addRow(elem);
	
		// ADD TABLE ELEMENTS TO PRIMARY POINT COMBOBOX
		getPrimaryPointComboBox().addItem(elem.getLabel().toString());
		if(GraphDataSeries.isPrimaryType( elem.getType().intValue()))
		{	
			//SELECT THE PRIMARY POINT IN THE COMBO BOX.
			getPrimaryPointComboBox().setSelectedIndex(currentRowIndex + 1);
		}
		currentRowIndex++;
	}
}
	/**
 * Insert the method's description here.
 * Creation date: (10/24/00 4:07:55 PM)
 * @return com.cannontech.database.data.graph.GraphDefinition
 */
public com.cannontech.database.data.graph.GraphDefinition showCreateGraphPanelDialog(java.awt.Frame parent)
{
	javax.swing.JDialog dialog = new javax.swing.JDialog(parent);
	dialog.setTitle("Yukon Trending Reports Editor");
	
	class DialogButtonListener implements java.awt.event.ActionListener
	{
		javax.swing.JDialog dialog;

		public DialogButtonListener(javax.swing.JDialog d)
		{
			dialog = d;
		}
		
		public void actionPerformed(java.awt.event.ActionEvent event )
		{
			if( event.getSource() == getOkButton() )
			{
				if ( ivjGraphGDSTable.getCellEditor() !=  null)
					ivjGraphGDSTable.getCellEditor().stopCellEditing();
	
				setButtonPushed(OK);
			}
			else if( event.getSource() == getCancelButton() )
				setButtonPushed(CANCEL);

			dialog.setVisible(false);
			dialog.dispose();
		}
	}
		
	java.awt.event.ActionListener listener = new DialogButtonListener(dialog);
		
	getOkButton().addActionListener(listener);
	getCancelButton().addActionListener(listener);
		
	dialog.setModal(true);	
	dialog.getContentPane().add(this);
	dialog.setSize(parent.getWidth() - 50, 500);
	dialog.show();

	getOkButton().removeActionListener(listener);
	getCancelButton().removeActionListener(listener);
		
	if( getButtonPushed() == this.OK )
		return (com.cannontech.database.data.graph.GraphDefinition) getValue(null);
	else
		return null;
}
}

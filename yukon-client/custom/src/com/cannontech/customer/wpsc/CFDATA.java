package com.cannontech.customer.wpsc;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

import org.apache.commons.lang.StringUtils;

import com.cannontech.clientutils.CTILogger;
import com.cannontech.common.pao.PaoCategory;
import com.cannontech.common.pao.PaoClass;
import com.cannontech.common.pao.YukonPao;
import com.cannontech.common.util.FileInterface;
import com.cannontech.common.util.LogWriter;
import com.cannontech.core.dao.PaoDao;
import com.cannontech.message.porter.message.Request;
import com.cannontech.spring.YukonSpringHook;
import com.cannontech.yukon.IServerConnection;
import com.cannontech.yukon.conns.ConnPool;

/**
 * Custom file interface that reads lines from a file (probably a .rcv extension) 
 * Input is of the format: Address,Division,District,R1,R2,R3,???
 * File is generated by some third party system, read-in by Yukon, translated into control strings and written to porter.
 * Basically, this is performing individual switch commands as submitted by some third party.
 */
public class CFDATA extends FileInterface {

	// Confirmed 254 is NOT a program address used by WPS.
	private int defaultXcomProgramAddr = 254;		// must be a number between 1-254 that is NOT a valid programming assignment.
    private YukonPao vComRoute;
    private YukonPao xComRoute;

    public CFDATA(String dirToWatch, String fileExt, String vComRouteName, String xComRouteName, int xComProgAddr) {
        super(dirToWatch, fileExt);
        PaoDao paoDao = YukonSpringHook.getBean(PaoDao.class);
        if (StringUtils.isNotBlank(vComRouteName)) {
        	vComRoute = paoDao.findYukonPao(vComRouteName, PaoCategory.ROUTE, PaoClass.ROUTE);
        	if (vComRoute != null) {
        		CTILogger.info("Using non-default versacom route: " + vComRouteName);
        	}
        }
        if (StringUtils.isNotBlank(xComRouteName)) {
        	xComRoute = paoDao.findYukonPao(xComRouteName, PaoCategory.ROUTE, PaoClass.ROUTE);
        	if (xComRoute != null) {
        		CTILogger.info("Using non-default expressCom route: " + xComRouteName);
        	}
        }
        defaultXcomProgramAddr = xComProgAddr; 
    }

    /**
     * Line format as documented by WPS: Code,Switch,Utility Address,Division,District,R1,R2,R3,???
     * Example:
     *   04,502938,222,1,010,3,0,0,3
     * Code (aka Functions) as documented by WPS: 
     *   1 - program relays for the first time 
     *   2/3 - re-program relays on an existing switch 
     *   4 -turn switch on 
     *   5 - turn switch off
     *   spid geo substation program splinter
     *   find out which expresscom parameters go with this.
     * @return String - command string
     * @param line String - line from file
     */
    private String decodeLine(String line) {

        StringBuffer buf = new StringBuffer("putconfig ");

        try {

            boolean isExpresscom = false;
            StringTokenizer tok = new StringTokenizer(line, " ");

            // DLC Func
            int func = Integer.parseInt(tok.nextToken());

            String serialNumberStr = tok.nextToken();
            if (serialNumberStr.startsWith("4")) { // "4000 "series switches at WPS are all expressCom
                isExpresscom = true;
                buf.append("xcom ");
            } else { // "5000" series switches, or assume everything else, is versacom
                buf.append("versacom ");
            }
            // SerialNumber
            buf.append("serial ").append(Integer.parseInt(serialNumberStr));

            if (func == 4) { // turn switch on
                buf.append(" service in");
                return buf.toString();
            } else if (func == 5) { // turn switch off
                buf.append(" service out");
                return buf.toString();
            }

            if (isExpresscom) { //expresscom addressing
                buf.append(buildExpressComAddressingString(tok));
            } else {    //assume versacom addressing
                boolean includeUtility = (func != 2);
                buf.append(buildVersacomAddressingString(tok, includeUtility));
            }
        } catch (Exception e) {
            return null;
        }

        return buf.toString();
    }
    
    private String buildVersacomAddressingString(StringTokenizer tok, Boolean includeUtility) {
        StringBuffer buf = new StringBuffer();
        
        // Utility ID
        if (includeUtility) {
            int utilityId = Integer.parseInt(tok.nextToken());
            buf.append(" utility ");
            buf.append(utilityId);
        }

        // Division Code
        int division = Integer.parseInt(tok.nextToken());
        buf.append(" aux ");
        buf.append(division);

        // Operating District - section
        int district = Integer.parseInt(tok.nextToken());
        buf.append(" section ");
        buf.append(district);

        int classID = 0;
        // Class #1
        int relay = Integer.parseInt(tok.nextToken());
        if (relay > 0)
            classID |= (1 << (relay - 1));

        // Class #2
        relay = Integer.parseInt(tok.nextToken());
        if (relay > 0)
            classID |= (1 << (relay - 1));

        // Class #3
        relay = Integer.parseInt(tok.nextToken());
        if (relay > 0)
            classID |= (1 << (relay - 1));

        if (classID > 65535) // Can only allow 16bits here
            return null;

        int temp = 0;
        for (int i = 0; i < 16; i++)
            temp |= (((classID >> i) & 0x0001) << (15 - i));

        classID = temp;

        buf.append(" class 0x" + Long.toHexString(classID));

        int divID = 0;
        // DLC Division
        int dlcDivision = Integer.parseInt(tok.nextToken());
        if (dlcDivision > 0)
            divID |= (1 << (dlcDivision - 1));

        if (divID > 65535)
            return null;

        temp = 0;
        for (int i = 0; i < 16; i++)
            temp |= (((divID >> i) & 0x0001) << (15 - i));

        divID = temp;

        buf.append(" division 0x" + Long.toHexString(divID));
        return buf.toString();
    }
    
    private String buildExpressComAddressingString(StringTokenizer tok) {
        StringBuffer buf = new StringBuffer();
        
        // example message from Jason Henry @ WPS for expressCom message he sends out
        // putconfig xcom serial 400400 assign p 3, 0, 0 load 1, 2, 3
        tok.nextToken();    //ignore utility address
        tok.nextToken();    //ignore division
        tok.nextToken();    //ignore district

        // if relay is 0, need to change to a non-zero value that is NOT a valid program value (see getProgramAddress).
        int relay = Integer.valueOf(tok.nextToken());   //relay 1
        buf.append(" target assign p ").append(getProgramAddress(relay));
        
        relay = Integer.valueOf(tok.nextToken());       //relay 2
        buf.append(", ").append(getProgramAddress(relay));
        
        relay = Integer.valueOf(tok.nextToken());   //relay 3
        buf.append(", ").append(getProgramAddress(relay));
        
        buf.append(" load 1, 2, 3");
        
        tok.nextToken();    //ignore whatever this last value is
        return buf.toString();
    }
    
    /**
     * Returns modified program address. 
     * If a < 1 or > 254 is provided, then convert to default value.
     * Else return original value.
     */
    
    private int getProgramAddress(int programAddr) {
    	if (programAddr <= 0 || programAddr > 254) {
    		return defaultXcomProgramAddr;
    	}
    	return programAddr;
    }

    @Override
    protected void handleFile(InputStream in) {
        try {
            IServerConnection porterConn = ConnPool.getInstance().getDefPorterConn();
            int countSent = 0;
            BufferedReader rdr = new BufferedReader(new InputStreamReader(in));

            String str;
            int routeId = 0;	//default Request routeId
            
            CTILogger.info("Begin Processing CFDATA file...");
            WPSCMain.logMessage("Begin Processing CFDATA Files", LogWriter.INFO);
            while ((str = rdr.readLine()) != null) {
                String decoded = decodeLine(str);
                if (StringUtils.containsIgnoreCase("xcom ", decoded)) {
                	routeId = xComRoute.getPaoIdentifier().getPaoId();
                } else { 
                	routeId = vComRoute.getPaoIdentifier().getPaoId();
                }

                if (decoded != null) {
                    CTILogger.info("CFDATA: " + decoded);
                    WPSCMain.logMessage(" ** CFDATA:  " + decoded, LogWriter.DEBUG);
                    Request req = new Request(0, decoded, 1L);
                    req.setRouteID(routeId);
                    porterConn.write(req);
                    countSent++;
                    Thread.sleep(500);
                }
            }
            CTILogger.info("...Done processing CFDATA file");
            WPSCMain.logMessage("Done Processing CFDATA Files  *  " + countSent + "  *  read and wrote to Porter", LogWriter.INFO);

        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e2) {
            e2.printStackTrace();
        }
    }
}

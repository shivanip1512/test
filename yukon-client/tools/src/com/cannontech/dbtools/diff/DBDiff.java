package com.cannontech.dbtools.diff;
/**
 * DBDiff is a utility program that reads in two files in the format
 * generated by DBDescription and displays the difference in tables
 * and columns.  The reporting of the differences is sent to
 * standard out.
 * Creation date: (7/17/00 4:09:10 PM)
 * @author: Aaron Lauinger
 * @see DBDescription
 */
public class DBDiff {
/**
 * DBDiff constructor comment.
 */
private DBDiff() {
	super();
}
/**
 * Insert the method's description here.
 * Creation date: (7/17/00 4:09:28 PM)
 * @param args java.lang.String[]
 */
public static void main(String[] args) 
{
	if( args.length != 2 )
	{
		System.out.println("DBDiff infile1 infile2");
		System.out.println("DBDiff takes two input files which are generated with DBDescription.");
		System.out.println("It will report the differences in the database structure.");
		return;
	}

	String in1 = args[0];
	String in2 = args[1];

	java.io.InputStream inStrm1 = null;
	java.io.InputStream inStrm2 = null;
	try
	{
		inStrm1 = new java.io.BufferedInputStream( new java.io.FileInputStream(in1) );
		inStrm2 = new java.io.BufferedInputStream( new java.io.FileInputStream(in2) );
	}
	catch( java.io.FileNotFoundException fne )
	{
		fne.printStackTrace(System.err);
	}

	try
	{
		java.util.Hashtable db1 = new java.util.Hashtable();
		java.util.Hashtable db2 = new java.util.Hashtable();
		
		java.util.Properties props1 = new java.util.Properties();
		props1.load(inStrm1);

		java.util.Enumeration propNames = props1.propertyNames();
		while (propNames.hasMoreElements())
		{
			String tableName = (String) propNames.nextElement();
		 	java.util.List columns = parseLine( props1.getProperty(tableName) );
		 	db1.put( tableName, columns);
	  	}
		
		java.util.Properties props2 = new java.util.Properties();
		props2.load(inStrm2);
		propNames = props2.propertyNames();
		while (propNames.hasMoreElements())
		{
			String tableName = (String) propNames.nextElement();
			java.util.List columns = parseLine( props2.getProperty(tableName) );
		 	db2.put( tableName, columns);
	  	}
		
		reportDifferences(in1, db1, in2, db2);	
		 
	}
	catch( java.io.IOException ioe )
	{
		ioe.printStackTrace(System.err);
	}
	finally
	{
		try
		{
			if( inStrm1 != null )
				inStrm1.close();
		} catch( java.io.IOException ioe ) { /*too bad*/ }
		try
		{
			if( inStrm2 != null )
				inStrm2.close();
		} catch( java.io.IOException ioe ) { /*too bad*/ }
		
	}	
	
	
	
}
/**
 * Insert the method's description here.
 * Creation date: (7/17/00 4:31:57 PM)
 * @return java.lang.String[]
 * @param line java.lang.String
 */
private static java.util.List parseLine(String line) {
	java.util.StringTokenizer tok = new java.util.StringTokenizer(line);
	java.util.ArrayList list = new java.util.ArrayList();
	
	while( tok.hasMoreElements() )
	{
		list.add( tok.nextElement() );	
	}

	return list;
}
/**
 * Insert the method's description here.
 * Creation date: (7/17/00 4:36:22 PM)
 * @param h1 java.util.Hashtable
 * @param h2 java.util.Hashtable
 */
private static void reportDifferences(String inName1, java.util.Hashtable h1, String inName2, java.util.Hashtable h2)
{
	java.util.ArrayList tablesIn1ButNot2 = new java.util.ArrayList();
	java.util.ArrayList tablesIn2ButNot1 = new java.util.ArrayList();

	java.util.Hashtable columnsIn1ButNot2 = new java.util.Hashtable();
	java.util.Hashtable columnsIn2ButNot1 = new java.util.Hashtable();
	
	java.util.Enumeration keys1 = h1.keys();
	while( keys1.hasMoreElements() )
	{
		Object key = keys1.nextElement();
		if( !h2.containsKey(key) )
		{
			tablesIn1ButNot2.add(key);
		}
		else
		{
			//Check to see if all the columns exist
			java.util.List l1 = (java.util.List) h1.get(key);
			java.util.List l2 = (java.util.List) h2.get(key);
			java.util.ArrayList columns1 = new java.util.ArrayList();
			
			java.util.Iterator iter = l1.iterator();
			Object column;
			while( iter.hasNext() )
			{
				column = iter.next();
				if( !l2.contains(column) )
				{
					//column is in 1 but not 2
					columns1.add(column);	
				}		
			}

			if( columns1.size() > 0 )
			{
				columnsIn1ButNot2.put(key,columns1);
			}

			java.util.ArrayList columns2 = new java.util.ArrayList();
			iter = l2.iterator();
			while( iter.hasNext() )
			{
				column = iter.next();
				if( !l1.contains(column) )
				{
					//column is in 2 but not 1
					columns2.add(column);
				}
			}

			if( columns2.size() > 0 )
			{
				columnsIn2ButNot1.put(key,columns2);
			}
		}
	}

	java.util.Enumeration keys2 = h2.keys();
	while( keys2.hasMoreElements() )
	{
		Object key = keys2.nextElement();
		if( !h1.containsKey(key) )
		{
			tablesIn2ButNot1.add(key);
		}
	
	}

	System.out.println("Tables in " + inName1 + " not in " + inName2 + ":");
	java.util.Iterator iter = tablesIn1ButNot2.iterator();
	while( iter.hasNext() )
		System.out.println("   " + iter.next());

	System.out.println("\nTables in " + inName2+ " not in " + inName1 + ":");
	iter = tablesIn2ButNot1.iterator();
	while( iter.hasNext() )
		System.out.println("   " + iter.next());


	System.out.println("\nColumns in " + inName1 + " not in " + inName2 + ":");
	java.util.Enumeration tableEnum = columnsIn1ButNot2.keys();
	Object table;
	while( tableEnum.hasMoreElements() )
	{
		table = tableEnum.nextElement();
		System.out.println("\nTable:  " + table);
		java.util.List l = (java.util.List) columnsIn1ButNot2.get(table);
		iter = l.iterator();
		while( iter.hasNext() )
			System.out.println("   " + iter.next());
	}

	System.out.println("\nColumns in " + inName2 + " not in " + inName1 + ":");
	tableEnum = columnsIn2ButNot1.keys();
	while( tableEnum.hasMoreElements() )
	{
		table = tableEnum.nextElement();
		System.out.println("\nTable:  " + table);
		java.util.List l = (java.util.List) columnsIn2ButNot1.get(table);
		iter = l.iterator();
		while( iter.hasNext() )
			System.out.println("   " + iter.next());
	}
		
}
}

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="cti" uri="http://cannontech.com/tags/cti"%>
<%@ taglib prefix="tags" tagdir="/WEB-INF/tags"%>
<%@ taglib prefix="i" tagdir="/WEB-INF/tags/i18n"%>


<h1>I am the king of the wastelands</h1>
    <button id='examp1' title="button uno">
        <img id="img1" src="https://my.t-mobile.com/assets/styles/decoration/green_check_icon.png"/>
    </button>

<br>

<!-- f-tooltip must precede f-has-tooltip in the markup -->
<div id='ttt' style="display:none;" class="f-tooltip">
  <table>
    <tr><td>this is an</td></tr>
    <tr><td>html table</td></tr>
  </table>
</div>
    <button id='examp2' href='#' title="button dos" class="f-has-tooltip">
        <img id="img2" src="https://my.t-mobile.com/assets/styles/decoration/green_check_icon.png" />
    </button>

<br />
<div style='clear left; clear right;'>
    <div style='height: 5px; width: 10px; border: 5px dashed #000; border-bottom-color: #000; border-bottom-style: solid; border-top: none; border-left-color: transparent; border-right-color: transparent;'>
    </div>
</div>

<script type="text/javascript">
// this week's hotness: the "Sandbox" JavaScript module pattern
//
/*
var fakeYukon = fakeYukon || {};
jQuery( function () {
        Yukon.modules = {};
        Yukon.modules.dom = function (box) {
            box.getElement = function () { console.log('getElement called'); };
            box.getStyle = function () { console.log('getStyle called'); };
            box.foo = "bar";
        };
        Yukon.modules.event = function (box) {
        // access to the Sandbox prototype if needed:
        // box.constructor.prototype.m = "mmm";
            box.attachEvent = function () { console.log('attachEvent called'); };
            box.detachEvent = function () { console.log('detachEvent called'); };
        };
        Yukon.modules.ajax = function (box) {
            box.makeRequest = function () { console.log('makeRequest called'); };
            box.getResponse = function () { console.log('getResponse called'); };
        };
        function Sandbox() {
            // turning arguments into an array
            var args = Array.prototype.slice.call(arguments),
                // the last argument is the callback
                callback = args.pop(),
                // modules can be passed as an array or as individual parameters
                modules = (args[0] && typeof args[0] === "string") ? args : args[0],
                i;
            // make sure the function is called
            // as a constructor
            if (!(this instanceof Sandbox)) {
                console.log('this is not an instance of Sandbox. What\'s going on? Really?');
                return new Sandbox(modules, callback);
            }
            // add properties to 'this' as needed:
            this.a = 1;
            this.b = 2;
            // now add modules to the core 'this' object
            // no modules or "*" both mean "use all modules"
            if (!modules || modules === '*') {
                modules = [];
                for (i in Yukon.modules) {
                        if (Yukon.modules.hasOwnProperty(i)) {
                            modules.push(i);
                        }
                }
            }
            // initialize the required modules
            for (i = 0; i < modules.length; i += 1) {
                Yukon.modules[modules[i]](this);
            }
            // call the callback
            callback(this);
        }
        // any prototype properties as needed
        Sandbox.prototype = {
            name: "My Application",
            version: "1.0",
            getName: function () {
                return this.name;
            }
        };
        var mybox = Sandbox('ajax','event','dom', function(myappbox) {
            console.log('i should have some box:');
            console.dir(myappbox);
            myappbox.getElement();
            myappbox.getResponse();
            myappbox.detachEvent();
            myappbox.attachEvent();
            myappbox.makeRequest();
            myappbox.getResponse();
        });
        console.log("mybox dump:");
        console.dir(mybox);
        // add some new modules
        Yukon.modules.ui = function (box) {
            var uiState = false;
            box.getUiState = function () {
                return uiState;
            };
            box.setUiState = function (newUiState) {
                uiState = newUiState;
                return uiState;
            };
        };
        var anotherSandbox = Sandbox('ui', function (appbox) {
            var uiState;
            console.log('added to sandbox');
            console.dir(appbox);
            uiState = appbox.getUiState();
            console.log('got uiState=' + uiState);
            uiState = appbox.setUiState(true);
            console.log('set uiState=' + uiState);
        });
        console.log('anotherSandbox dump:');
        console.dir(anotherSandbox);
        console.log('merging mybox and anotherSandbox into a separate object...');
        var superObject = jQuery.extend({}, mybox, anotherSandbox);
        console.log('done! dumping');
        console.dir(superObject);
        superObject.attachEvent();
        console.log('superObject.getUiState=' + superObject.getUiState());
        fakeYukon = superObject;
});
*/
</script>
<script type="text/javascript">
/* serious, and unsuccessful, hacking
jQuery(document).tooltip({
  items: '*',
  content: function() {
    var element = jQuery(this), tip, toolTipped;
    toolTipped = element.closest('.f-has-tooltip');
    if ( toolTipped.length ) {
      tip = toolTipped.nextAll('.f-tooltip').first();
      console.log("returning tip.html()");
      return tip.html();
    } else {
      var title = element.attr('title') || '',
          closest = jQuery(element.closest('[title]')[0]);
      if (title === '' && closest.length > 0) {
        console.log('doing closest: length=' + closest.length + ' title="' + closest.attr('title') + '"');
        console.dir(closest);
        title = jQuery(element.closest('[title]')[0]).attr('title');
      } else {
        console.log('title="' + title + '" did not do closest');
        console.dir(element.closest('[title]'));
      }
      console.log("returning something else, title: " + title);
      console.log('"' + jQuery('<a>').text(title).html() + '"');
        return jQuery('<a>').text(title).html();
    }
  }
});
*/
</script>

<script type="text/javascript">
/* the following can't work, since there is no server-side picker code set up for it
jQuery(function() {
    try {
        console.log("javascript object creation test begin");
        // globally-accessible functions
        Yukon.protoPicker.prototype.dumpVars = function () {
            console.log("pickerType=" + this.pickerType + " pickerId=" + this.pickerId);
        };

        // some uses of the above mechanisms
        var stock = new Picker('Okey-Doke', 'Forget it', 'userStockPicker', 'yomama', 'stock', '', null);
        var horse = new Picker('Alright', 'No way', 'userHorsePicker', 'bite me', 'horse', '', null);
        console.log("stock picker: stock instanceof Picker: " + (stock instanceof Picker));
        console.dir(stock);
        console.log("horse picker: horse instanceof Picker: " + (horse instanceof Picker));
        console.dir(horse);
        stock.show(true);
        stock.dumpVars();
        horse.dumpVars();
        stock.multiSelectMode = false;
        console.log("stock.multiSelectMode=" + stock.multiSelectMode
            + " horse.multiSelectMode=" + horse.multiSelectMode);
        // This method, init, does secondary initialization which needs to happen after
        // the HTML elements in the tag file have been fully created.
        Yukon.ui.aux.callAfterMainWindowLoad(stock.init.bind(stock, true));
        Yukon.ui.aux.callAfterMainWindowLoad(horse.init.bind(horse, true));
        //console.log("calling stock.resetSearchFields...");
        // should, and does, cause an exception, because the method
        // is not available to Picker, but private to protoPicker
        // stock.resetSearchFields();
        console.log("stock.getInSearch()=" + stock.getInSearch());
        console.log("horse.getInSearch()=" + horse.getInSearch());
        stock.setInSearch(true);
        console.log("stock.getInSearch()=" + stock.getInSearch());
        console.log("horse.getInSearch()=" + horse.getInSearch());
        horse.setInSearch(true);
        stock.setInSearch(false);
        console.log("stock.getInSearch()=" + stock.getInSearch());
        console.log("horse.getInSearch()=" + horse.getInSearch());
    } catch(testingex) {
        console.log("testing exception: '" + testingex + "'");
    }
});
*/
</script>

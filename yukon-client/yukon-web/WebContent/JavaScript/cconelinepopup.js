var ALL_POPUP_TYPES = {
	//types that are generated by the server
	//so the server knows about them
	subCommand: "SubCommand",
	feederCommand: "FeederCommand",
	capCommand: "CapCommand",
	subTag: "SubTag",
	feederTag: "FeederTag",
	capTag: "CapTag",
	capInfo: "CapInfo",	
	//types that are not known on the server
	//because they are the children 
	childCapMaint: "CapBankMaint",
	childCapDBChange:"CapDBChange",
	cbcPointTimestamp: "CapPtTmstmp",
    varChangePopup: "varChangePopup",
    bankMoveBack: "MoveBankBack",
    bankMove: "TempMoveBank",
    legend: "legend"
};

function resetCapOpCount(element, cmdId) {
    if (!element.checked) return;
    
    var newOpcntVal = prompt("What is the new value for Op Count?", "0");
    if (newOpcntVal == null) {
        element.checked = false;
        return;
    }
        
    var params = {};
    params['optParams'] = newOpcntVal;
    submitOnelineCommand(cmdId, params);
    return;
}

function submitToCapControlCommandController(url, params) {
    new Ajax.Request(url, {
        method: 'POST',
        onSuccess: function(transport) {
            display_status("Command sent successfully", "green");    
        },
        onFailure: function(transport) {
            display_status("Command submission failed", "red");
        },
        onException: function(transport) {
            display_status("Command submission failed", "red");
        },
        parameters:params
    });
}
	
function submitOnelineManualCommand(rawStateId) {
    var params = {};
    params['paoId'] = $('paoId').value;
    params['controlType'] = $('controlType').value;
    params['rawStateId'] = rawStateId;
    
    var url = $('manualUrl').value;
    submitToCapControlCommandController(url, params);
    closePopupWindow();        
}

function submitOnelineCommand(cmdId, params) {
    if (params == null) params = {};
    params['paoId'] = $('paoId').value;
    params['controlType'] = $('controlType').value;
    params['cmdId'] = cmdId;
    
    var url = $('url').value;
    submitToCapControlCommandController(url, params);
    closePopupWindow();        
}

function submitTagMenu(isCapBank) {

    var disableChange = $("disableCheckBox").checked != eval($("disableCheckBox_orig").value);
    var disableOVUVChange = $("disableOVUVCheckBox").checked != eval($("disableOVUVCheckBox_orig").value);
    var operationalStateChange = false;

    if (isCapBank) {
        var index = $("operationalStateValue").selectedIndex;
        var state = $("operationalStateValue").options[index].value;
        var origState = $('operationalStateValue_orig').value;
        operationalStateChange = state != origState;
    }
    
	if (!(disableChange || disableOVUVChange || operationalStateChange)) {
	    alert("No Change Was Made.");
        return false;	
    }    
        
    params = {};
	params['paoId'] = $('paoId').value;
	params['controlType'] = $('controlType').value;
		
	params['disableValue'] = $('disableCheckBox').checked;
	params['disableOVUVValue'] = $('disableOVUVCheckBox').checked;
    if (isCapBank) params['operationalStateValue'] = $('operationalStateValue').options[$('operationalStateValue').selectedIndex].value;
        
	params['disableChange'] = disableChange;
	params['disableOVUVChange'] = disableOVUVChange;
	params['operationalStateChange'] = operationalStateChange;
		
    params['disableReason'] = $('disableReason').value;
    params['disableOVUVReason'] = $('disableOVUVReason').value;
    if (isCapBank) params['operationalStateReason'] = $('operationalStateReason').value;
        
    var confirmMessage = '';
    if (disableChange) confirmMessage += 'Enable/Disable State Change\n';
    if (disableOVUVChange) confirmMessage += 'Enable/Disable OV/UV Change\n';
    if (isCapBank && operationalStateChange) confirmMessage += 'Operational State Change';
        
    if (!confirm(confirmMessage)) return false;
        
    var url = $('url').value;
    submitToCapControlCommandController(url, params);
    closePopupWindow();  
}

function toggleReason(element, reasonElementId) {
	if (element.tagName == 'INPUT') {
		if(element.checked) {
            $(reasonElementId).show();
			var textareaArray = $(reasonElementId).getElementsBySelector('TEXTAREA');
            textareaArray.invoke('enable');
	    } else {
            $(reasonElementId).hide();
        }
	}
	
    if(element.tagName == 'SELECT') {
        var textareaArray = $(reasonElementId).getElementsBySelector('TEXTAREA');
        textareaArray.invoke('enable');
	}
}
	
function openPopupWin(elem, compositeIdType) {
	currentPopup = new PopupWindow("controlrequest");
	currentPopup.offsetX = x;
	currentPopup.offsetY = y;
    
	currentPopup.autoHide();
	
	type = compositeIdType.split("_")[0];
	id = compositeIdType.split("_")[1];
	
    var menuName;
    
    if (type == ALL_POPUP_TYPES.subCommand) {
		menuName = 'subMenu';
	}
	else if (type == ALL_POPUP_TYPES.feederCommand) {
		menuName = 'feederMenu';
	}
	else if (type == ALL_POPUP_TYPES.capCommand) {
        menuName = 'capBankMenu';
	}
	else if (type == ALL_POPUP_TYPES.subTag) {
        menuName = 'subTagMenu';
	}
	else if (type == ALL_POPUP_TYPES.feederTag) {
        menuName = 'feederTagMenu';
	}
	else if (type == ALL_POPUP_TYPES.capTag) {
        menuName = 'capTagMenu';
	}
	else if (type == ALL_POPUP_TYPES.capInfo) {
        menuName = 'capInfoMenu';
	}
	else if (type == ALL_POPUP_TYPES.childCapMaint) {
        menuName = 'capBankMaint';
	}
	else if (type == ALL_POPUP_TYPES.childCapDBChange) {
        menuName = 'capBankDBChange';
	}
	else if (type == ALL_POPUP_TYPES.cbcPointTimestamp) {
        showPointTimestamps(id);
		return;
	}
	else if (type == ALL_POPUP_TYPES.varChangePopup) {
        menuName ='varChangePopup';
    }
    else if (type == ALL_POPUP_TYPES.bankMoveBack) {
    	menuName ='moveBankBackPopup';
    }
    else if (type == ALL_POPUP_TYPES.bankMove) {
    	menuName ='moveBankPopup';
    }
    else if (type == ALL_POPUP_TYPES.legend) {
        var legendUrl = '/spring/capcontrol/oneline/legend';
        new Ajax.Request(legendUrl, {
            method: 'get',
            onSuccess: function(transport) {
                currentPopup.offsetX = window.innerWidth/2;
                currentPopup.offsetY = 0;
                
                var html = transport.responseText;
                showPopup(html);
            }
        });
        return;
    }

    var url = '/spring/capcontrol/oneline/popupmenu?menu=' + menuName + '&id=' + id + '&returnUrl=' + window.location;
    getFromURL(url);
}

function getFromURL(url) {
    new Ajax.Request(url, {
        method: 'POST',
        onSuccess: function(transport) {
            var html = transport.responseText;
            showPopup(html);
        }
    });    
}

function showPopup(html) {
	currentPopup.populate(html);
	//over-ride this function since we
	//need to adjust table headers
	currentPopup.PopupWindow_showPopup = function () {
			PopupWindow_showPopup("popupanchor");
	}
	currentPopup.showPopup("popupanchor");
	window.parent.currentPopup = currentPopup;
	window.parent.document.getElementById("controlrequest").style.borderStyle = "solid";
	window.parent.document.getElementById("controlrequest").style.borderColor = "gray";
	window.parent.document.getElementById("controlrequest").style.borderWidth = "thin";
	window.parent.document.getElementById("controlrequest").style.backgroundColor = "black";
}

function closePopupWindow() {
	if (window.parent.currentPopup) {
        window.parent.currentPopup.hidePopup();
    }
}

function showPointTimestamps (cbcID) {
	
	var pointDataUrl = '/spring/capcontrol/oneline/popupmenu';
	var params = { 'menu' : 'pointTimestamp', 'cbcID': cbcID, 'oneline' : 'true' };
	new Ajax.Request (pointDataUrl, {
        method: 'POST', 
        parameters: params, 
	    onSuccess: function (transport) {
            var html = transport.responseText;  
		    showPopup(html);
		}
	});
}

//over-ridden function from PopupWindow.js
function PopupWindow_showPopup (anchorname) {
	this.anchorname = anchorname;
	this.getXYPosition(anchorname);
	this.x += this.offsetX;
	this.y += this.offsetY;
	if (!this.populated && (this.contents != "")) {
		this.populated = true;
		this.refresh();
		
		}
	if (this.divName != null) {
		// Show the DIV object
		if (this.use_gebi) {
			window.parent.document.getElementById(this.divName).style.left = this.x + "px";
			window.parent.document.getElementById(this.divName).style.top = this.y + "px";
			window.parent.document.getElementById(this.divName).style.visibility = "visible";
			}
		else if (this.use_css) {
			document.all[this.divName].style.left = this.x;
			document.all[this.divName].style.top = this.y;
			document.all[this.divName].style.visibility = "visible";
			
			
			}
		else if (this.use_layers) {
			document.layers[this.divName].left = this.x;
			document.layers[this.divName].top = this.y;
			document.layers[this.divName].visibility = "visible";
			}
		}
	else {
		if (this.popupWindow == null || this.popupWindow.closed) {
			// If the popup window will go off-screen, move it so it doesn't
			if (this.x<0) { this.x=0; }
			if (this.y<0) { this.y=0; }
			if (screen && screen.availHeight) {
				if ((this.y + this.height) > screen.availHeight) {
					this.y = screen.availHeight - this.height;
					}
				}
			if (screen && screen.availWidth) {
				if ((this.x + this.width) > screen.availWidth) {
					this.x = screen.availWidth - this.width;
					}
				}
			var avoidAboutBlank = window.opera || ( document.layers && !navigator.mimeTypes['*'] ) || navigator.vendor == 'KDE' || ( document.childNodes && !document.all && !navigator.taintEnabled );
			this.popupWindow = window.open(avoidAboutBlank?"":"about:blank","window_"+anchorname,this.windowProperties+",width="+this.width+",height="+this.height+",screenX="+this.x+",left="+this.x+",screenY="+this.y+",top="+this.y+"");
			}
		this.refresh();
		}
}


package com.cannontech.web.jws;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

import com.cannontech.util.NaturalOrderComparator;
import com.google.common.collect.ImmutableList;

public class JwsJnlpTest {
    private NaturalOrderComparator order = new NaturalOrderComparator();

    /**
     * It is uber important that this test not fail. There are two ways to organize JwsJnlp list of jars.
     * One is to alphabetize and another is to not alphabetize. We must be sure to alphabetize.
     * Without alphabetization, earthquakes are 52.7% more likely in virtually all Minnesota counties.
     * 
     * The first effective use of alphabetical order as a catalogizing device among scholars may have been 
     * in ancient Alexandria. The standard order of the basic modern Latin alphabet is:
     * 
     *     A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z. This ordering is subject to change.
     */
    @Test
    public void test_jarsAlphabetized() {
        for (JwsJnlp jnlp : JwsJnlp.values()) {
            String lastJarName = null;
            for (String jarName : jnlp.getAppJars()) {
                if (lastJarName != null && order.compare(jarName.toLowerCase(), lastJarName.toLowerCase()) < 0) {
                    Assert.fail(jnlp + " is not alphabetized! " + jarName + " should be before " + lastJarName);
                }
                lastJarName = jarName;
            }
        }
    }
    
    /**
     * These are jars generated by the Yukon build, and can be safely ignored when checking that jars referenced in
     * JwsJnlp.java exist in third-party.
     */
    private static final List<String> yukonJarNames = ImmutableList.of(
        "cbc.jar",
        "graph.jar",
        "macs.jar",
        "billing.jar",
        "common.jar",
        "i18n-en_US.jar",
        "yukon-help.jar",
        "yukon-shared.jar",
        "yukonappserver.jar"
    );
    
    @Test
    public void test_thirdPartyJarsExist() {
        Path thirdPartyPath = Paths.get("").toAbsolutePath().getParent().resolve("third-party");
        System.out.println("Third party path: " + thirdPartyPath.toString());
        
        for (JwsJnlp jnlp : JwsJnlp.values()) {
            for (String jarName : jnlp.getAppJars()) {
                if (!yukonJarNames.contains(jarName)) {
                    Path jarFile = thirdPartyPath.resolve(jarName);
                    Assert.assertTrue("Jar " + jarName + " referenced in JwsJnlp.java does not exist in third-party.", jarFile.toFile().exists());
                }
            }
        }
    }
}

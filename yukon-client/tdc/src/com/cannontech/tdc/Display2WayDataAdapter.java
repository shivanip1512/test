package com.cannontech.tdc;

/**
 * This class was generated by a SmartGuide.
 * 
 */
import java.util.Vector;
import java.sql.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.event.TableModelEvent;
import com.cannontech.database.*;
import com.cannontech.message.dispatch.message.*;
import com.cannontech.tdc.logbox.MessageBoxFrame;
import com.cannontech.tdc.roweditor.ObservedPointDataChange;
import com.cannontech.clientutils.CommonUtils;
import com.cannontech.tdc.utils.TDCDefines;
import com.cannontech.clientutils.commonutils.ModifiedDate;
import com.cannontech.tdc.utils.DataBaseInteraction;
import com.cannontech.common.gui.util.Colors;
import com.cannontech.clientutils.tags.TagUtils;
import com.cannontech.tdc.alarms.gui.AlarmingRow;
import com.cannontech.tdc.alarms.gui.AlarmingRowVector;
import com.cannontech.tdc.data.Display;

public class Display2WayDataAdapter extends AbstractTableModel implements com.cannontech.tdc.alarms.gui.AlarmTableModel, com.cannontech.common.gui.util.SortableTableModel
{
	private boolean playSound = true;
	private com.cannontech.tdc.alarms.gui.RowBlinker currenBlinkingAlarms = null;
	

	private boolean exceededMaxMsg = true;

	public static final int DEFAULT_FOREGROUNDCOLOR = Colors.WHITE_ID; // white as of 3-23-2000
	public static final int DEFAULT_BACKGROUNDCOLOR = Colors.BLACK_ID;  // black as of 3-23-2000
	public static final int DEFAULT_DISABLEDCOLOR = Colors.GRAY_ID;  // gray as of 8-31-2000
	public static final int DEFAULT_ALARMCOLOR = Colors.RED_ID;  // red as of 1-12-2001

	// Column type names
	public static final String COLUMN_TYPE_POINTVALUE = "PointValue";
	public static final String COLUMN_TYPE_POINTQUALITY = "PointQuality";
	public static final String COLUMN_TYPE_POINTTIMESTAMP = "PointTimeStamp";
	public static final String COLUMN_TYPE_DEVICENAME = "DeviceName";	
	public static final String COLUMN_TYPE_POINTNAME = "PointName";
	public static final String COLUMN_TYPE_UOFM = "UofM";
	public static final String COLUMN_TYPE_DEVICEID = "DeviceID";
	public static final String COLUMN_TYPE_TAGS = "Tags";
	
	private ObservableRow dataRow = null;
		
	//public Integer[] columnWidth = null;		
	private Vector columnNames = new Vector();	
	private Vector	columnTypeName = new Vector();

	/* BEGIN -Data for each row */
	private Vector pointValues = null;  // row specific characteristics
	private Vector rows = new Vector(); // values the row contains
	private AlarmingRowVector alarmedRows = null;
	/* END -data for each row */
	
	private Vector pointLimbo = null;
	private Vector blankPoints = null;
	
	//Default colors for alarms 
		/* Events	  2
			Priority1  1
			Priority2  4
			Priority3  0
			Priority4  7
			Priority5  8
			Priority6  5
			Priority7  3
			Priority8  2
			Priority9  6
			Priority10 9
		*/
	private int[] alarmColors = null;

	private long currentDisplayNumber = Display.UNKNOWN_DISPLAY_NUMBER;
	private ResultSetMetaData metaData = null;
	
	private class BlankLine
	{
		private int location = 0;
		
		public BlankLine( int loc )
		{
			location = loc;	
		}

		public int getLocation()
		{
			return location;
		}

	};
/**
 * This method was created in VisualAge.
 */
public Display2WayDataAdapter() 
{
	super();
}
/**
 * This method add a Blank row to the table
 */
// ONLY ADDS ROWS INTO EXISTING ROW SPOTS
public void addBlankRow( int location ) 
{
	if( location < 0 )
		return;

	checkRowExceedance();
		
	Vector newRow = new Vector( getColumnCount() );
	
	for( int i = 0; i < getColumnCount(); i++ )
		newRow.addElement("");

//	if( getAlarmingRowVector().areRowsAboveAlarming( location ) )
//		incrementAlarmedRowsPosition( )
		
	if( location >= getRowCount() )
		rows.addElement( newRow );
	else
		rows.insertElementAt( newRow, location );

	createDummyPointValue( TDCDefines.ROW_BREAK_ID,
					new java.util.Date().getTime(),
					"DUMMY",
					"DUMMY",
					0,		
					location );

	//fireTableRowsInserted( location, location ); // Tell the listeners a new row has arrived.	
}
/**
 * Insert the method's description here.
 * Creation date: (5/26/00 10:46:37 AM)
 * Version: <version>
 */
private boolean addBlankRowIfNeeded() 
{
	if( getRowCount() % (getRowCount() <= TDCDefines.ROW_BREAK_COUNT ? TDCDefines.ROW_BREAK_COUNT : TDCDefines.ROW_BREAK_COUNT+1) == 0 )
	{
		addBlankRow( 0 );
		return true;
	}
	else
		return false;
}
/**
 * Insert the method's description here.
 * Creation date: (3/22/00 1:56:48 PM)
 * @param point com.cannontech.message.dispatch.message.Signal
 */
private int addColumnDefinedRow( Signal signal )
{
	synchronized( getAlarmingRowVector() )
	{		
		int columnCount = getColumnCount();
		
		int rowsAdded = 0;
		
		if( columnCount != 0 )
		{
			createRowForEventViewer( signal );

			// put a psuedo value in row location 0
			createPsuedoPointValue( signal );
			rowsAdded++;
				
			if( addBlankRowIfNeeded() )
				rowsAdded++;

			//fireTableRowsInserted( 0, rowsAdded-1 );
		}

		return rowsAdded;
		
	} // end of SYNCH
}
/**
 * This method was created in VisualAge.
 */
private String buildRowQuery() 
{
	// Init our Rows in their correct order
	String query = new String
		("select d.pointid, d.pointtype, d.pointname, d.devicename, d.pointstate, d.devicetype, " +
		 " d.devicecurrentstate, d.deviceid " +
		 " from display2waydata_view d, display2waydata y " +
		 " where y.displaynum = ? " +
		 " and d.pointid = y.pointid " +
		 " and d.pointid > " + TDCDefines.ROW_BREAK_ID +
		 " order by y.ordering");		
	Object[] objs = new Object[1];
	objs[0] = new Long( currentDisplayNumber );
	Object[][] pointData = DataBaseInteraction.queryResults( query, objs );


	// Get all the blank rows in our table
	query = "select ordering from display2waydata " + 
			  " where displaynum = ? " +
			  " and pointid = ? " +
			  " order by ordering";
	objs = new Object[2];
	objs[0] = new Long( currentDisplayNumber );
	objs[1] = new Long( TDCDefines.ROW_BREAK_ID );
	Object[][] blankLines = DataBaseInteraction.queryResults( query, objs );			  

	// Get the decimal places for all non status points
	query = new String
		("select pointid, decimalplaces from pointunit order by pointid");
	Object[][] decimalPlaces = DataBaseInteraction.queryResults( query, null );

	
	StringBuffer colString = new StringBuffer();
	
	int cnt;
	for( cnt = 0; cnt < getColumnCount(); cnt++ )
	{
		if ( cnt > 0 )
			colString.append(",");
							
		colString.append( "v." + getColumnTypeName( cnt ).toString() );
	}


	if ( pointData != null && pointData.length > 0 ) // is there any points?
	{		
		Vector realPoints = new Vector();
		
		if( blankPoints == null )		
			blankPoints = new Vector();

		// insert regular points
		for( int i = 0; i < pointData.length; i++ )
		{
			int ptID = Integer.parseInt(pointData[i][0].toString());

			realPoints.addElement( new PointValues(
													 ptID,
												    pointData[i][1].toString(),
												    pointData[i][2].toString(),
												    pointData[i][3].toString(),
												    pointData[i][4].toString(),
												    pointData[i][5].toString(),
												    pointData[i][6].toString(),
												    Integer.parseInt(pointData[i][7].toString())
												    ) );
			
			// add the decimal places here to each point that is present in the pointunit table
			PointValues pvalue = ((PointValues)realPoints.elementAt(i));
			
			for( int j = 0; j < decimalPlaces.length; j++ )
			{
				long decPlacesPointID = Long.parseLong( decimalPlaces[j][0].toString() );
				if( pvalue.getPointData().getId() == decPlacesPointID )
				{
					pvalue.setDecimalPlaces( new Integer(decimalPlaces[j][1].toString()) );
					break;
				}
			}

		}

		
		// insert blank points
		if( blankLines != null )
		{
			for( int i = 0; i < blankLines.length; i++ )
			{
				int loc = Integer.parseInt( blankLines[i][0].toString() ) - 1;
				blankPoints.addElement( new BlankLine( loc ) );
			}
		}
		
		pointValues = new Vector( realPoints.size() );
		
		createPointValues( realPoints );
			
		return createSqlString( colString.toString() );

	}
	
	return "";
}
/**
 * Insert the method's description here.
 * Creation date: (9/15/00 1:38:02 PM)
 * @param existingPoints java.util.Vector
 */
private void checkForLimboPoints(Vector existingPoints) 
{
	String query = "select pointid from display2waydata where displaynum = ? order by pointid";
	Object[] objs = new Object[1];
	objs[0] = new Long( currentDisplayNumber );
	Object[][] displayPoints = DataBaseInteraction.queryResults( query, objs );

	for( int i = 0; i < displayPoints.length; i++ )
	{
		boolean pointFound = false;

		for( int j = 0; j < existingPoints.size(); j++ )
		{
			PointValues point = ((PointValues)existingPoints.elementAt(j));

			if( String.valueOf(point.getPointData().getId()).equalsIgnoreCase(displayPoints[i][0].toString()) ||
				displayPoints[i][0].toString().equalsIgnoreCase( String.valueOf(TDCDefines.ROW_BREAK_ID) ) )
			{				
				pointFound = true;
				break;
			}			
		}

		if( pointFound == false )
		{
			if( !getPointLimbo().contains( displayPoints[i][0].toString() ) )
				getPointLimbo().addElement( displayPoints[i][0].toString() );
		}
		
	}
		

}
/**
 * Insert the method's description here.
 * Creation date: (4/20/00 10:09:54 AM)
 * Version: <version>
 */
private void checkRowExceedance() 
{
	if( getRowCount() >= TDCDefines.MAX_ROWS )
	{
		// remove the bottom row
		removeRow( getRowCount() - 1, false );
		
		if( exceededMaxMsg ) // for the message to only print once
		{
			exceededMaxMsg = false;
			TDCMainFrame.messageLog.addMessage("The maximum row count(" + TDCDefines.MAX_ROWS +") has been exceeded", MessageBoxFrame.ERROR_MSG );
		}
	}	
}
/**
 * Insert the method's description here.
 * Creation date: (4/20/00 11:38:04 AM)
 * Version: <version>
 */
public void clearSystemViewerDisplay( boolean forceRepaint )
{
	// FOR NOW, ONLY CLEAR THE EVENT VIEWER AND HISTORICAL VIEWERS
	if( getCurrentDisplayNumber() == Display.EVENT_VIEWER_DISPLAY_NUMBER ||
		getCurrentDisplayNumber() == Display.HISTORY_EVENT_VIEWER_DISPLAY_NUMBER ||
		getCurrentDisplayNumber() == Display.RAW_POINT_HISTORY_VIEWER_DISPLAY_NUMBER )
	{
		// remove all alarms if any exists
		synchronized ( getAlarmingRowVector() )
		{
			getAlarmingRowVector().removeAllElements();
			currenBlinkingAlarms = null;
		}

		// remove the nonviewable and viewable data 
		synchronized( pointValues )
		{
			pointValues.removeAllElements();
			rows.removeAllElements();
		}	

		if( forceRepaint )
			forcePaintTableDataChanged();
	}
}
/**
 * Insert the method's description here.
 * Creation date: (4/12/00 2:23:47 PM)
 * Version: <version>
 * @param id long
 */
/*createDummyPointValue( Long.parseLong(rowData[i][6].toString()),
				((Timestamp)rowData[i][0]).getTime(), //TimeStamp
				CommonUtils.createString( rowData[i][1] ), //DeviceName
				CommonUtils.createString( rowData[i][2] ), //PointName
				Integer.parseInt(rowData[i][7].toString()) //SOE_Tag
				0 );
*/
private void createDummyPointValue( long id, long timeStamp, String deviceName, String pointName, int soe_tag, int location ) 
{
	if( location >= getRowCount() )
		return;  // cant add it off the chart
		
	final String[] WHITE_COLOR = {"2"};
	final String[] DUMMY_TEXT = {"DUMMY"};
	final String[] RAW_TEXT = {"1"};
	final String[] DUMMY_BG_COLOR = { String.valueOf( DEFAULT_BACKGROUNDCOLOR )};

	// create our storage
	PointValues pointValue = new PointValues( 
				(int)id,
				com.cannontech.database.data.point.PointTypes.INVALID_POINT,
				pointName,
				WHITE_COLOR, DUMMY_TEXT, RAW_TEXT, DUMMY_BG_COLOR, 1 );  // not really a point

	
	if( location >= getRowCount() ) //Add the new value
		pointValues.addElement( pointValue );
	else  // insert the new value
		pointValues.insertElementAt( pointValue, location );
	
	pointValue.setStates(	
			RAW_TEXT[0],  // initital
			RAW_TEXT[0],  // normal 
			RAW_TEXT[0] );  // alarm

	pointValue.getPointData().setTime( new java.util.Date(timeStamp) );
	pointValue.setDeviceName( deviceName );
	pointValue.getPointData().setSOE_Tag( soe_tag );
	
}/**
 * Insert the method's description here.
 * Creation date: (4/13/00 5:04:56 PM)
 * Version: <version>
 * @return java.util.Vector
 */
/**
 * Insert the method's description here.
 * Creation date: (2/2/00 4:40:07 PM)
 * @return java.lang.Object[]
 */
private void createPointValues( Vector realPoints )
{
	String query = "select distinct point.pointid, state.foregroundcolor, state.text, state.rawstate,state.backgroundcolor " +
			" from state, point, display2waydata " +
			" where state.stategroupid = point.stategroupid and state.rawstate >= 0 " +
			" and point.pointid in " +
			" (select pointid from display2waydata where displaynum = ?) " +
			" order by point.pointid, state.rawstate";
	Object[] objs = new Object[1];
	objs[0] = new Long( currentDisplayNumber );
	Object[][] pointStatment = DataBaseInteraction.queryResults( query, objs );

	
	// make new buffers to hold the points state data
	String[] colorBuffer = new String[ pointStatment.length ];
	String[] messageBuffer = new String[ pointStatment.length ];
	String[] rawStateBuffer = new String[ pointStatment.length ];
	String[] bgColorBuffer = new String[ pointStatment.length ];

	int rowIndex = 0;

	checkForLimboPoints( realPoints );
	
	for( int j = 0; j < realPoints.size(); j++ )
	{		
		PointValues point = ((PointValues)realPoints.elementAt( j ));

		boolean pointFound = false;
		int rawStateIndex = 0;
		
		for( rowIndex = 0; rowIndex < pointStatment.length; rowIndex++ )
		{
			if( String.valueOf(point.getPointData().getId()).equalsIgnoreCase( pointStatment[rowIndex][0].toString() ) )
			{
				pointFound = true;
				
				colorBuffer[ rawStateIndex ] = pointStatment[rowIndex][1].toString();
				messageBuffer[ rawStateIndex ] = pointStatment[rowIndex][2].toString();
				rawStateBuffer[ rawStateIndex ] = pointStatment[rowIndex][3].toString();
				bgColorBuffer[ rawStateIndex++ ] = pointStatment[rowIndex][4].toString();

			}
			else if( pointFound ) // get out of the loop now if we found the point
				break;
		}

		if( pointFound ) // get out of the loop now if we found the point
		{
			pointValues.addElement( new PointValues( point, colorBuffer, messageBuffer,
				rawStateBuffer, bgColorBuffer, rawStateIndex ) );
		}
	}

}
/**
 * Insert the method's description here.
 * Creation date: (4/12/00 2:23:47 PM)
 * Version: <version>
 * @param signal Signal
 */
private void createPsuedoPointValue( Signal signal )
{
	int location = 0;
		
	final String[] WHITE_COLOR = {"2"};
	final String[] DUMMY_TEXT = {"DUMMY"};
	final String[] RAW_TEXT = {"1"};
	final String[] DUMMY_BG_COLOR = { String.valueOf( DEFAULT_BACKGROUNDCOLOR )};

	pointValues.insertElementAt(
		new PointValues( signal, com.cannontech.database.data.point.PointTypes.INVALID_POINT, "BLANK",
			WHITE_COLOR, DUMMY_TEXT, RAW_TEXT, DUMMY_BG_COLOR, 1 ), location );  // not really a point
	
	((PointValues)pointValues.elementAt( location )).setStates(	
			RAW_TEXT[0],  // initital
			RAW_TEXT[0],  // normal 
			RAW_TEXT[0] );  // alarm	
}
/**
 * Insert the method's description here.
 * Creation date: (4/13/00 5:04:56 PM)
 * Version: <version>
 * @return java.util.Vector
 */
private void createRowForEventViewer( Signal signal )
{
	// how many columns need to be filled in below
	final int COLUMN_COUNT = 6;
	Vector newRow = new Vector( COLUMN_COUNT );
			
	for( int i = 0; i < COLUMN_COUNT; i++ )
		newRow.addElement( "" );  // put these into the vector just as dummy values
	
	String query = "select pointtimestamp, devicename, pointname, pointvalue, deviceid, pointquality " + 
		" from display2waydata_view " + 
		" where pointid = ?";

	Object[] objs = new Object[1];
	objs[0] = new Long( signal.getId() );
	Object[][] whoData = DataBaseInteraction.queryResults( query, objs );

	if( whoData.length != 1 )  // if you dont have a single point
	{
		Object[][] temp = {{signal.getTimeStamp(), "UNKNOWN PT ID : " + signal.getId(), "UNKNOWN PT ID : " + signal.getId()}};
		whoData = temp;
	}

	//set all the date for this row
	setRowForEventViewer( newRow, signal, whoData[0][1].toString(), whoData[0][2].toString() );

	// add the new row to the top of the table	
	if( getRowCount() == 0 )
		rows.addElement( newRow );			
	else
	{
		checkRowExceedance();
		rows.insertElementAt( newRow, 0 );
	}
	
}
/**
 * Insert the method's description here.
 * Creation date: (3/24/00 1:24:13 PM)
 * @param sql java.lang.String
 */
public int createRowsForHistoricalView(java.util.Date date, int page) 
{
	
	String rowQuery = "select s.datetime, y.PAOName, p.pointname, s.description, s.action, " +
					  " s.username, s.pointid, s.soe_tag " +
					  " from systemlog s, YukonPAObject y, point p " +
					  " where s.pointid=p.pointid and y.PAObjectID=p.PAObjectID " +
					  " and s.datetime >= ? " +
					  " and s.datetime < ? " +					  
		 			  " order by s.datetime desc, s.soe_tag desc";
   
   java.util.GregorianCalendar lowerCal = new java.util.GregorianCalendar();
   lowerCal.setTime( date );
   lowerCal.set( lowerCal.HOUR_OF_DAY, 0 );
   lowerCal.set( lowerCal.MINUTE, 0 );
   lowerCal.set( lowerCal.SECOND, 0 );
   
   java.util.GregorianCalendar upperCal = new java.util.GregorianCalendar();
   upperCal.setTime( date );
   upperCal.set( upperCal.HOUR_OF_DAY, 23 );
   upperCal.set( upperCal.MINUTE, 59 );
   upperCal.set( upperCal.SECOND, 59 );
   upperCal.set( upperCal.MILLISECOND, 999 );


   Object[] objs = new Object[2];
	objs[0] = lowerCal.getTime();
   objs[1] = upperCal.getTime();
	Object[][] rowData = DataBaseInteraction.queryResults( rowQuery, objs );


	if( rowData == null )
		return -1;

/********* Page checking and processing starts here *******/
	int maxDataRows = TDCDefines.MAX_ROWS - (TDCDefines.MAX_ROWS / TDCDefines.ROW_BREAK_COUNT);
	int rowCount = rowData.length;
	int pageCount = 1;
	
	if( rowCount > maxDataRows )
	{
		pageCount = rowCount / maxDataRows;

		if( (rowCount - (pageCount * maxDataRows)) > 0 )
			pageCount++;
	}

	if( page > pageCount )
		page = 1;
	else if( page < 1 )
		page = pageCount;

	int firstValue = (page - 1) * maxDataRows; // what row we should start at to get the data
	int endingValueIndex = (rowData.length > (firstValue + maxDataRows)) ? 
						   (firstValue + maxDataRows) - 1 : rowData.length - 1;
/********* Page checking and processing ends here *******/


	java.util.Date prevDate = null;
	java.util.GregorianCalendar currentCalendar = null;
	java.util.GregorianCalendar prevCalendar = null;
	
	for( int i = endingValueIndex; i >= firstValue; i-- )
	{
		Vector newRow = new Vector( getColumnCount() );
		for( int j = 0; j < getColumnCount(); j++ )
			newRow.addElement( "" );  // put these into the vector just as place holder values

		// set TimeStamp
		if( columnTypeName.contains(COLUMN_TYPE_POINTTIMESTAMP) ) // format of ORACLE: "2000-06-09 16:34:34.0"
			newRow.setElementAt( new ModifiedDate( ((Timestamp)rowData[i][0]).getTime() ), columnTypeName.indexOf(COLUMN_TYPE_POINTTIMESTAMP) );
			
		// set DeviceName
		if( columnTypeName.contains(COLUMN_TYPE_DEVICENAME) )
			newRow.setElementAt( CommonUtils.createString( rowData[i][1] ), columnTypeName.indexOf(COLUMN_TYPE_DEVICENAME) );
			
		// set PointName
		if( columnTypeName.contains(COLUMN_TYPE_POINTNAME) )
			newRow.setElementAt( CommonUtils.createString( rowData[i][2] ), columnTypeName.indexOf(COLUMN_TYPE_POINTNAME) );
			
		// set Description
		if( columnTypeName.contains(COLUMN_TYPE_UOFM) )
			newRow.setElementAt( CommonUtils.createString( rowData[i][3] ), columnTypeName.indexOf(COLUMN_TYPE_UOFM));

		// set Action
		if( columnTypeName.contains(COLUMN_TYPE_POINTQUALITY) )
			newRow.setElementAt( CommonUtils.createString( rowData[i][4] ), columnTypeName.indexOf(COLUMN_TYPE_POINTQUALITY));
	
		// set User Name
		if( columnTypeName.contains(COLUMN_TYPE_DEVICEID) )
			newRow.setElementAt( CommonUtils.createString( rowData[i][5] ), columnTypeName.indexOf(COLUMN_TYPE_DEVICEID) );

		checkRowExceedance();

		// we must add rows like this to accomodate the blank rows that automatically
		//   get added in	
		if( getRowCount() > 0 )
			rows.insertElementAt( newRow, 0 );
		else
			rows.addElement( newRow );
			
		// put a holder value for the model in row location i
		if( rowData[i].length >= 7 && rowData[i][6] != null )
			createDummyPointValue( Long.parseLong(rowData[i][6].toString()),
							((Timestamp)rowData[i][0]).getTime(), //TimeStamp
							CommonUtils.createString( rowData[i][1] ), //DeviceName
							CommonUtils.createString( rowData[i][2] ), //PointName
							Integer.parseInt(rowData[i][7].toString()), //SOE_Tag
							0 );

		addBlankRowIfNeeded();
		
		prevDate = ((java.util.Date)rowData[i][0]);
	}
	
	forcePaintTableDataChanged(); // is actually fireTableDataChanged();
	
	return pageCount;
}
	/**
 * Insert the method's description here.
 * Creation date: (3/24/00 1:24:13 PM)
 * @param sql java.lang.String
 */
public int createRowsForRawPointHistoryView(java.util.Date date, int page) 
{
	String rowQuery = "select r.timestamp, y.PAOName, p.pointname, r.value, r.quality, " +
					  " r.pointid " +  // this extra pointid column needs to be here
					  " from rawpointhistory r, YukonPAObject y, point p " +
					  " where r.pointid=p.pointid and y.PAObjectID=p.PAObjectID " +
					  " and r.timestamp >= ? " +
					  " and r.timestamp < ? " +
		 			  " order by r.changeid desc";
	Object[] objs = new Object[2];
	Date tmpDate = new Date( date.getTime() - 86399999 ); // One day in millesconds minus 1.999 seconds
	objs[0] = tmpDate;	
	objs[1] = date;
	Object[][] rowData = DataBaseInteraction.queryResults( rowQuery, objs );

	if( rowData == null )
		return -1;

/********* Page checking and processing starts here *******/
	int maxDataRows = TDCDefines.MAX_ROWS - (TDCDefines.MAX_ROWS / TDCDefines.ROW_BREAK_COUNT);
	int rowCount = rowData.length;
	int pageCount = 1;
	
	if( rowCount > maxDataRows )
	{
		pageCount = rowCount / maxDataRows;

		if( (rowCount - (pageCount * maxDataRows)) > 0 )
			pageCount++;
	}

	if( page > pageCount )
		page = 1;
	else if( page < 1 )
		page = pageCount;

	int firstValue = (page - 1) * maxDataRows; // what row we should start at to get the data
	int endingValueIndex = (rowData.length > (firstValue + maxDataRows)) ? 
						   (firstValue + maxDataRows) - 1 : rowData.length - 1;

/********* Page checking and processing ends here *******/
	
	java.util.Date prevDate = null;
	java.util.GregorianCalendar currentCalendar = null;
	java.util.GregorianCalendar prevCalendar = null;
	
	for( int i = endingValueIndex; i >= firstValue; i-- )
	{
		Vector newRow = new Vector( getColumnCount() );
		for( int j = 0; j < getColumnCount(); j++ )
			newRow.addElement( "" );  // put these into the vector just as place holder values

		// set TimeStamp
		if( columnTypeName.contains(COLUMN_TYPE_POINTTIMESTAMP) ) // format of ORACLE: "2000-06-09 16:34:34.0"
		{
			newRow.setElementAt( new ModifiedDate( ((Timestamp)rowData[i][0]).getTime() ), columnTypeName.indexOf(COLUMN_TYPE_POINTTIMESTAMP) );
		}
			
		// set DeviceName
		if( columnTypeName.contains(COLUMN_TYPE_DEVICENAME) )
			newRow.setElementAt( CommonUtils.createString( rowData[i][1] ), columnTypeName.indexOf(COLUMN_TYPE_DEVICENAME) );
			
		// set PointName
		if( columnTypeName.contains(COLUMN_TYPE_POINTNAME) )
			newRow.setElementAt( CommonUtils.createString( rowData[i][2] ), columnTypeName.indexOf(COLUMN_TYPE_POINTNAME) );
			
		// set Value
		if( columnTypeName.contains(COLUMN_TYPE_POINTVALUE) )
			newRow.setElementAt( CommonUtils.createString( rowData[i][3] ), columnTypeName.indexOf(COLUMN_TYPE_POINTVALUE));

		// set Quality
		if( columnTypeName.contains(COLUMN_TYPE_POINTQUALITY) )
			newRow.setElementAt( 
						com.cannontech.database.data.point.PointQualities.getQuality(
						Integer.parseInt(CommonUtils.createString(rowData[i][4]))), 
						columnTypeName.indexOf(COLUMN_TYPE_POINTQUALITY));
	

		checkRowExceedance();

		// we must add rows like this to accomodate the blank rows what automatically
		//   get added in	
		if( getRowCount() > 0 )
			rows.insertElementAt( newRow, 0 );
		else
			rows.addElement( newRow );
			
		// put a holder value for the model in row location i
		if( rowData[i].length >= 7 && rowData[i][6] != null )
			createDummyPointValue( 
					Long.parseLong( rowData[i][6].toString() ),
					new java.util.Date().getTime(),
					"DUMMY",
					"DUMMY",
					0,		
				 	0 );

		addBlankRowIfNeeded();
		
		prevDate = ((java.util.Date)rowData[i][0]);
	}
	
	forcePaintTableDataChanged(); // is actually fireTableDataChanged();
	
	return pageCount;
}
/**
 * This method was created in VisualAge.
 */
private String createSqlString( String colString ) 
{	
	if ( pointValues.size() > 0 )
	{
		StringBuffer pString = new StringBuffer("select " + colString + 
			 " from display2waydata_view v, display2waydata t " + 
			 " where t.displaynum = " + currentDisplayNumber +
			 " and ((v.pointid = ");
	
		for ( int i = (pointValues.size() - 1); i >= 0; i--)
		{
			String id = String.valueOf( ((PointValues)pointValues.elementAt(i)).getPointData().getId() );
			
			pString.append( id + " and t.pointid = " + id +")" );

			if ( i > 0 )
				pString.append(" or (v.pointid = ");
		}
	
		return pString.toString() + ") order by t.ordering" ;
	}
	else
		return "";
	
}
/**
 * Insert the method's description here.
 * Creation date: (4/13/00 12:15:31 PM)
 * Version: <version>
 * @param inc int
 */
private void decrementAlarmedRowsPosition(int decValue, int rowNumber) 
{
	if( getAlarmingRowVector().size() > 0 )
	{
		synchronized( getAlarmingRowVector() )
		{
			for( int i = 0; i < getAlarmingRowVector().size(); i++ )
			{
				AlarmingRow alRow = ((AlarmingRow)getAlarmingRowVector().elementAt(i));
				if( alRow.getRowNumber() > rowNumber )
					alRow.subtractOffset( decValue );
			}
		}
	}			
}
/**
 * Insert the method's description here.
 * Creation date: (4/5/00 1:31:25 PM)
 * Version: <version>
 */
private void deleteRowFromDataBase( long pointid )
{
	// NOTE: IF THE SELECTED ROW IS A BLANK ROW, ALL BLANK ROWS GET
	// 		 DELETED AFTER THIS CALL
	
	String query = "delete from display2waydata where displaynum = ? " +
		 	" and pointid = ?";


	Object[] objs = new Object[2];
	objs[0] = new Long(currentDisplayNumber);
	objs[1] = new Long(pointid);
	DataBaseInteraction.updateDataBase( query, objs );	
}
/**
 * Insert the method's description here.
 * Creation date: (6/13/00 4:24:23 PM)
 * @return java.lang.Object
 * @param column int
 */
private Object determineColumnObject( int column, Vector row ) 
{
	if( row.elementAt(column) instanceof Number ) // includes INTS and FLOATS
		return (Number)row.elementAt(column);
	else if( row.elementAt(column) instanceof ModifiedDate )
		return (ModifiedDate)row.elementAt(column);
	else // just return as type object
		return row.elementAt(column);
}
protected void finalize() throws Throwable 
{	
	super.finalize();
}
/**
 * Insert the method's description here.
 * Creation date: (5/23/00 2:18:04 PM)
 * Version: <version>
 * @param value boolean
 */
public void forcePaintTableDataChanged() 
{
	fireTableDataChanged();	
}
/**
 * Insert the method's description here.
 * Creation date: (5/23/00 2:18:04 PM)
 * Version: <version>
 * @param value boolean
 */
public void forcePaintTableRowDeleted( int rowLocation )
{	
	fireTableRowsDeleted( rowLocation, rowLocation );
}
/**
 * Insert the method's description here.
 * Creation date: (5/23/00 2:18:04 PM)
 * Version: <version>
 * @param value boolean
 */
public void forcePaintTableRowUpdated( int minLocation, int maxLocation )
{
	fireTableRowsUpdated( minLocation, maxLocation );

}
/**
 * Insert the method's description here.
 * Creation date: (11/10/00 11:20:46 AM)
 * @return int[]
 */
public int getAlarmColor(int colorIndex) 
{
	if( colorIndex < 0 || colorIndex >= alarmColors.length )
		return DEFAULT_ALARMCOLOR;  // use this for the default alarm color
	else
		return alarmColors[colorIndex];
}
/**
 * Insert the method's description here.
 * Creation date: (7/26/00 10:59:14 AM)
 * @return com.cannontech.tdc.AlarmingRowVector
 */
public com.cannontech.tdc.alarms.gui.AlarmingRowVector getAlarmingRowVector() 
{
	if( alarmedRows == null )
	{
		alarmedRows = new com.cannontech.tdc.alarms.gui.AlarmingRowVector();
	}
	
	return alarmedRows;
}
/**
 * Insert the method's description here.
 * Creation date: (3/7/00 2:40:18 PM)
 */
public Long[] getAllPointIDs() 
{	
	if( pointValues != null && pointValues.size() > 0 )
	{
		int tmp = 0;
		java.util.ArrayList list = new java.util.ArrayList( pointValues.size() );
		
		for( int i = 0; i < pointValues.size(); i++ )
		{
			tmp = (int)((PointValues)pointValues.elementAt(i)).getPointData().getId();

			// only add real point ID's
			if( tmp != TDCDefines.ROW_BREAK_ID )
			{
				list.add( new Long(tmp) );
			}
			
		}

		Long[] val = new Long[list.size()];
		System.arraycopy( list.toArray(), 0, val, 0, list.size() );
		return val;
	}
	else
		return null;
}
// Data methods

public int getBlankRowCount() 
{
	int count = 0;
	
	for( int i = 0; i < getRowCount(); i++ )
	{
		if( ((Vector)rows.elementAt( i )).elementAt( 0 ).equals("") )
			count++;
	}
	
	return count;
}
// Data methods
// getBlankRows returns and array of locations where
// a blank row is in order of appearance
public Object[] getBlankRows() 
{
	
	Vector blank = new Vector( 20 );
	
	for( int i = 0; i < getRowCount(); i++ )
	{
		if( ((Vector)rows.elementAt( i )).elementAt( 0 ).equals("") )
			blank.addElement( new Integer( i ) );
	}

	Object[] realBlanks = new Object[ blank.size() ];
	blank.copyInto( realBlanks );

	blank = null;
	
	return realBlanks;
}
/**
 * This method was created in VisualAge.
 * @return java.awt.Color
 * @param row int
 * @param col int
 */
public java.awt.Color getCellBackgroundColor(int row, int col) 
{

	java.awt.Color color = Colors.getColor( DEFAULT_BACKGROUNDCOLOR );

	if( row < 0 || row >= getRowCount() )
		return color;
		
	try
	{
		color = Colors.getColor( ((PointValues)pointValues.elementAt( row )).getCurrentBackgroundColor() );
	}
	catch( ArrayIndexOutOfBoundsException e )
	{
		//do nothing here
	}
	
	
	return color;
}
	/**
 * Insert the method's description here.
 * Creation date: (2/14/00 4:55:03 PM)
 * @return java.lang.String
 */
public String getCellData( int rowPosition, int colPosition ) 
{
	if( getRowCount() <= 0 || rowPosition >= getRowCount() || colPosition >= getColumnCount() ||
		rowPosition < 0 || colPosition < 0 )
	{
		com.cannontech.clientutils.CTILogger.info(this.getClass().toString() + ".getCellData( int, int ) recieved a bad position");
		return "";
	}
	else
 		return ((Vector)rows.elementAt( rowPosition )).elementAt( colPosition ).toString();
}
/**
 * This method was created in VisualAge.
 * @return java.awt.Color
 * @param row int
 * @param col int
 */
public java.awt.Color getCellForegroundColor(int rowNumber, int col) 
{
	if( pointValues == null || rowNumber < 0 || rowNumber >= getRowCount() )
		return Colors.getColor( DEFAULT_FOREGROUNDCOLOR );

	int colorINT = 0;
	
	try
	{		
		colorINT = ((PointValues)pointValues.elementAt( rowNumber )).getCurrentForegroundColor();
	}
	catch( ArrayIndexOutOfBoundsException e )  // no defined color, use default
	{
		colorINT = DEFAULT_FOREGROUNDCOLOR;
	}
		
	return Colors.getColor( colorINT );
}
/**
 * Insert the method's description here.
 * Creation date: (2/3/00 3:15:32 PM)
 * @param int loc
 */
private Object getCellValueObject( PointData point, int loc )
{
	java.text.DecimalFormat doubleToLong = 
				new java.text.DecimalFormat();

	doubleToLong.setParseIntegerOnly( true );
	String buffer = new String();
	PointValues pt = null;

	try
	{
		pt = ((PointValues)pointValues.elementAt( loc ));
	}
	catch(ArrayIndexOutOfBoundsException ex )
	{
		com.cannontech.clientutils.CTILogger.info("***** ArrayIndexOutOfBoundsException in " + this.getClass() + " of getCellValueObject(PointData, int) exception = " + ex.getMessage() + " /r/n" );
	}
	
	switch( point.getType() )
	{				
		case com.cannontech.database.data.point.PointTypes.STATUS_POINT:
			if( point.getValue() % 1 == 0 )  // make sure we have a whole number
			{
				long value = new Long( doubleToLong.format(point.getValue()) ).longValue();
				buffer = pt.getText( value );
				pt.setCurrentRowColor( value );
			}
			else
				return "INVALID FLOAT FOR A STATUS : " + point.getValue();
			
			return buffer;

		case com.cannontech.database.data.point.PointTypes.PULSE_ACCUMULATOR_POINT:
		case com.cannontech.database.data.point.PointTypes.DEMAND_ACCUMULATOR_POINT:
		case com.cannontech.database.data.point.PointTypes.CALCULATED_POINT:		
		case com.cannontech.database.data.point.PointTypes.ANALOG_POINT:
		{
			String returnVal = new String();
				
			try
			{
				returnVal = CommonUtils.formatDecimalPlaces( point.getValue() ,pt.getDecimalPlaces().intValue() );
			}
			catch( NullPointerException ex )
			{
				com.cannontech.clientutils.CTILogger.info("*** Point '" + pt.getPointName() + "' of type " + com.cannontech.database.data.point.PointTypes.getType( pt.getPointData().getType() ) + " does not have an entry in the POINTUNIT table. ***");
			}
			
			//doubleToLong.applyPattern(pattern);
			
			//return Double.valueOf( doubleToLong.format(point.getValue()) );
			// By not returning a Double object, the column class becomes a String and thus
			// when sorting the column, we sort on a text basis not numeric!!!!
			return returnVal;//doubleToLong.format(point.getValue());
		}

		case com.cannontech.database.data.point.PointTypes.INVALID_POINT:
		default:
			return "INVALID";
	}
	
}
public Class getColumnClass(int column)
{
	return String.class;

}
public int getColumnCount() {
	return columnNames.size();
}
//////////////////////////////////////////////////////////////////////////
//
//             Implementation of the TableModel Interface
//
//////////////////////////////////////////////////////////////////////////

// MetaData

public String getColumnName(int column) 
{
	/*if( modifiedColumnNames.length > column &&
		modifiedColumnNames[column] != null )
		return modifiedColumnNames[column];
	else*/
	if (columnNames.elementAt(column) != null) 
	{
		return columnNames.elementAt(column).toString();
	} 
	else 
	{
		return "";
	}
	
}
/**
 * This method was created in VisualAge.
 * @return java.lang.String
 */
public String getColumnTypeName( int index ) 
{
	if( index < 0 || index >= columnTypeName.size() )
		return null;
		
	return columnTypeName.elementAt( index ).toString();
}
/**
 * Insert the method's description here.
 * Creation date: (1/20/00 4:47:45 PM)
 * @param val int
 */
public long getCurrentDisplayNumber() 
{
	return currentDisplayNumber;	
}
/**
 * Insert the method's description here.
 * Creation date: (3/10/00 6:00:44 PM)
 * @return com.cannontech.tdc.ObservableVector
 */
public ObservableRow getObservedRow() 
{
	return dataRow;
}
/**
 * Insert the method's description here.
 * Creation date: (3/20/00 5:32:27 PM)
 * @return java.lang.Object
 * @param location int
 */
public Object getPointDynamicValue(int location) 
{
	if ( columnTypeName.contains(COLUMN_TYPE_POINTVALUE) )
	{
		Vector rowData = (Vector)rows.elementAt( location );
			
		return rowData.elementAt( columnTypeName.indexOf(COLUMN_TYPE_POINTVALUE) );
	}
	else
		return null;

}
/**
 * Insert the method's description here.
 * Creation date: (3/7/00 2:40:18 PM)
 * @return boolean
 * @param ptID java.lang.String
 */
public long getPointID( int rowNumber ) 
{
	if( pointValues != null && pointValues.size() > 0 && rowNumber < pointValues.size() && 
		 rowNumber >= 0 && rowNumber < getRowCount() )
	{
		return new Long( ((PointValues)pointValues.elementAt( rowNumber )).getPointData().getId() ).longValue();
	}
	else
		return -1;
}
/**
 * Insert the method's description here.
 * Creation date: (9/14/00 4:36:10 PM)
 * @return java.util.Vector
 */
private java.util.Vector getPointLimbo() 
{
	if( pointLimbo == null )
		pointLimbo = new Vector();
		
	return pointLimbo;
}
/**
 * Insert the method's description here.
 * Creation date: (2/24/00 10:17:07 AM)
 * @return java.lang.String[]
 */
public Object[] getPointsInLimbo() 
{
	if( pointLimbo != null )
	{
		return pointLimbo.toArray();
	}
	else
		return null;
}
/**
 * Insert the method's description here.
 * Creation date: (3/7/00 2:40:18 PM)
 * @return boolean
 * @param ptID java.lang.String
 */
public String getPointType( int loc ) 
{
	if( pointValues != null && pointValues.size() > 0 && loc >= 0 && loc < getRowCount() )
		return com.cannontech.database.data.point.PointTypes.getType( ((PointValues)pointValues.elementAt( loc )).getPointData().getType());
	else
		return "";
}
/**
 * Insert the method's description here.
 * Creation date: (3/7/00 2:40:18 PM)
 * @return boolean
 * @param ptID java.lang.String
 */
public PointValues getPointValue( int loc ) 
{
	if( pointValues != null && pointValues.size() > 0 && loc >= 0 && loc < getRowCount() )
		return ((PointValues)pointValues.elementAt( loc ));
	else
		return null;
}
/**
 * Insert the method's description here.
 * Creation date: (2/3/00 2:36:38 PM)
 * @return int
 * @param i int
 */
public int getRowBackgroundColor( int rowNumber ) 
{
	int colorINT = -1;

	if( pointValues == null || rowNumber < 0 || rowNumber >= getRowCount() )
		return DEFAULT_BACKGROUNDCOLOR;
		
	try
	{
		colorINT = ((PointValues)pointValues.elementAt( rowNumber )).getCurrentBackgroundColor();
	}
	catch( ArrayIndexOutOfBoundsException e )
	{
		colorINT = DEFAULT_BACKGROUNDCOLOR;
	}
	
	
	return colorINT;
}
// Data methods

public int getRowCount() {
	return rows.size();
}
/**
 * Insert the method's description here.
 * Creation date: (2/3/00 2:36:38 PM)
 * @return int
 * @param i int
 */
public int getRowForegroundColor( int rowNumber ) 
{
	int colorINT = -1;

	if( pointValues == null || rowNumber < 0 || rowNumber >= getRowCount() )
		return DEFAULT_FOREGROUNDCOLOR;

	try
	{		
		colorINT = ((PointValues)pointValues.elementAt( rowNumber )).getCurrentForegroundColor();
	}
	catch( ArrayIndexOutOfBoundsException e )  // no defined color, use default
	{
		colorINT = DEFAULT_FOREGROUNDCOLOR;
	}
		
	return colorINT;
}
/**
 * This method was created in VisualAge.
 */
public int getRowNumber( final long pointid ) 
{
	if( pointValues != null )
	{
		for ( int i = 0; i < pointValues.size(); i++ )
		{
			
			Long value = new Long( ((PointValues)pointValues.elementAt( i )).getPointData().getId() );
				
			if ( value.longValue() == pointid )
			{
				return ( i );
			}
			
		}
	}
	
	return ( -1 );	
	
}
// DO NOT CALL THIS METHOD DIRECTLY
public Object getValueAt(int aRow, int aColumn)
{
	try
	{
		Vector row = (Vector) rows.elementAt(aRow);
		return determineColumnObject( aColumn, row );
	}
	catch( ArrayIndexOutOfBoundsException ex )
	{
		com.cannontech.clientutils.CTILogger.info(getClass().toString() + ".getValueAt("+aColumn+","+aRow+") threw ArrayIndexOutOfBounds, no major problem");
		
		// we need to return a new Object to make the renderer happy
		return new Object();
	}
}
/**
 * Insert the method's description here.
 * Creation date: (7/27/00 12:14:50 PM)
 * @param point com.cannontech.message.dispatch.message.Signal
 */
private void handleAlarm(Signal signal) 
{
	// check if we have an alarm (1100)
	if( TagUtils.isAnyAlarm(signal.getTags()) )
	{
		//find out what type of alarm signal this is  (1100)
		if( TagUtils.isAlarm(signal.getTags()) )  // we need to flash
		{
			if( currentDisplayNumber == Display.EVENT_VIEWER_DISPLAY_NUMBER )
				addColumnDefinedRow( signal );
			else if( isAlarmDisplay() )
				insertAlarmDisplayAlarmedRow( signal );
			else if( currentDisplayNumber != Display.EVENT_VIEWER_DISPLAY_NUMBER )
				setRowAlarmed( signal );
		}
		else if( TagUtils.isAlarmAcked(signal.getTags()) )
		{	// we need to only show the row (0100),
			// check if we need to stop the flashing of the alarm
			if( isAlarmDisplay() )
				insertAlarmDisplayAlarmedRow( signal );
			else if( currentDisplayNumber != Display.EVENT_VIEWER_DISPLAY_NUMBER )
				setRowUnAlarmed( signal );
		}
			
	}
	else  // clear the alarm row from the display
	{
		if( isAlarmDisplay() )
		{			
			if( isPointAlarmed(signal.getId()) )
				removeRow( getRowNumber(signal.getId()), false );
		}
		else if( currentDisplayNumber >= Display.PRECANNED_USER_DISPLAY_NUMBER )
			setRowUnAlarmed( signal ); // if we have a user display, just make sure the row is not flashing
	}
	
}
/**
 * Insert the method's description here.
 * Creation date: (7/27/00 12:14:50 PM)
 * @param point com.cannontech.message.dispatch.message.Signal
 */
private void handleDisablity( Signal point )
{
	if( (point.getTags() & Signal.MASK_ANY_DISABLE) != 0 )  // check if we have an disablement
	{
		//check for a point having its service disabled
		if( TagUtils.isPointOutOfService(point.getTags()) )
		{
			//getPointValue( getRowNumber(point.getId()) ).
		}
		
		//check for a point having its alarming disabled		
		if( (point.getTags() & Signal.MASK_ANY_ALARM_DISABLE) != 0 )
		{

			
		}
		
		//check for a point having its control disabled(Status points only)		
		if( (point.getTags() & Signal.MASK_ANY_CONTROL_DISABLE) != 0 )
		{
			
		}
			
	}
	else  // clear any disablements we may have set for this point
	{
		
	}
	
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	
	TDCMainFrame.messageLog.addMessage(exception.toString() + " in : " + this.getClass(), MessageBoxFrame.ERROR_MSG );
}
/**
 * Insert the method's description here.
 * Creation date: (4/13/00 12:15:31 PM)
 * Version: <version>
 * @param inc int
 */
private void incrementAlarmedRowsPosition(int inc) 
{
	if( getAlarmingRowVector().size() > 0 )
	{
		synchronized( getAlarmingRowVector() )
		{
			for( int i = 0; i < getAlarmingRowVector().size(); i++ )
			{
				//if( !isRowSelectedBlank( ((AlarmingRow)alarmedRows.elementAt(i)).getRowNumber() + inc ) )
					((AlarmingRow)getAlarmingRowVector().elementAt(i)).addOffset( inc );
			}
		}
	}			
}
/**
 * Insert the method's description here.
 * Creation date: (4/7/00 1:27:58 PM)
 * Version: <version>
 */
private void initAlarmColors() 
{
	String query = "select stategroupid, rawstate, text, foregroundcolor, backgroundcolor " +
				   " from state where stategroupid = ? and rawstate >= 0" +
				   " order by rawstate";

	Object[] objs = new Object[1];
	objs[0] = new Integer( com.cannontech.database.db.state.StateGroupUtils.STATEGROUP_ALARM );
	Object[][] alarmStates = DataBaseInteraction.queryResults( query, objs );

	alarmColors = new int[ alarmStates.length + 1 ];
	alarmColors[0] = DEFAULT_BACKGROUNDCOLOR;  // for now, just store a common BG color for all rows

	for( int i = 1; i < alarmColors.length; i++ )
	{
		alarmColors[i] = Integer.parseInt( alarmStates[ i - 1 ][3].toString() );
	}
}
/**
 * This method was created in VisualAge.
 */
private void initColumns() 
{	
	if ( currentDisplayNumber <= Display.UNKNOWN_DISPLAY_NUMBER )
	 	return;

	synchronized( getAlarmingRowVector() )
	{
		currenBlinkingAlarms = null;
		getAlarmingRowVector().removeAllElements();
	}
	
	rows.removeAllElements();
	columnNames.removeAllElements();
	columnTypeName.removeAllElements();
	//columnWidth = null;
	
	if( pointValues != null )
		pointValues.removeAllElements();

	if( blankPoints != null )
		blankPoints.removeAllElements();
		
	String query = new String
		("select displaycolumns.title, columntype.name, displaycolumns.width " +
		 "from displaycolumns, columntype " +
		 "where displaycolumns.displaynum = ? " +
		 " and columntype.typenum = displaycolumns.typenum "+
		 " order by displaycolumns.ordering");
	Object[] objs = new Object[1];
	objs[0] = new Long(currentDisplayNumber);
	Object[][] values = DataBaseInteraction.queryResults( query, objs );

	
	columnNames = new Vector( values.length );
	columnTypeName = new Vector( values.length );
	//columnWidth = new Integer[ values.length ];
	initDataStructures();	
		
	// Get the column names and save them
	for(int column = 0; column < values.length; column++) 
	{
		columnNames.addElement( values[column][0] );
		columnTypeName.addElement( values[column][1] );
		//columnWidth[ column ] = new Integer( values[column][2].toString() );
	}


	fireTableStructureChanged(); // Tell the listeners a new table has arrived.
}
/**
 * Insert the method's description here.
 * Creation date: (3/10/00 11:03:26 AM)
 */
private void initDataStructures() 
{
	if ( columnNames == null )
		columnNames = new Vector( 15 );

	if ( columnTypeName == null )
		columnTypeName = new Vector( 20 );
	
	if ( pointValues == null )
		pointValues = new Vector( 60 );

	if ( blankPoints == null )
		blankPoints = new Vector( 15 );
			
	if ( rows == null )
		rows = new Vector( 60 );

	if ( columnNames == null )
		columnNames = new Vector( 15 );
}
/**
 * Insert the method's description here.
 * Creation date: (4/12/00 1:06:13 PM)
 * Version: <version>
 * @param point java.lang.Object
 */
private void insertAlarmDisplayAlarmedRow( Signal signal )
{
	if( signal.getId() < 0 || signal.getAlarmStateID() < Signal.EVENT_SIGNAL )
		return;

	long alarmPage = 0;
	if( signal.getAlarmStateID() > Signal.EVENT_SIGNAL && signal.getAlarmStateID() <= Signal.MAX_DISPLAYABLE_ALARM_SIGNAL )
		alarmPage = Display.GLOBAL_ALARM_DISPLAY + (signal.getAlarmStateID() - Signal.EVENT_SIGNAL);
	else if( signal.getAlarmStateID() == Signal.EVENT_SIGNAL ) //if we have a Signal.EVENT_SIGNAL, then we want every display possibly handle this Signal
		alarmPage = currentDisplayNumber;

	// all alarms display	
	if( (currentDisplayNumber == Display.GLOBAL_ALARM_DISPLAY || alarmPage == currentDisplayNumber) 
		&& isValidAlarm(signal.getAlarmStateID()) )
	{
		synchronized( getAlarmingRowVector() )
		{
			if( isPointAlarmed(signal.getId()) )
			{
				try
				{
					int rNum = getRowNumber(signal.getId());
					
					if( signal.getAlarmStateID() > Signal.EVENT_SIGNAL )
						getAlarmingRowVector().getAlarmingRow(rNum).setAlarmColor(
								getAlarmColor((int)signal.getAlarmStateID()) );
				
					getAlarmingRowVector().getAlarmingRow(rNum).setSignal( signal );
					getPointValue(rNum).getPointData().setTime( signal.getTimeStamp() );

					setRowForEventViewer( 
						(Vector)rows.get(rNum),
						signal, 
						null, 
						null );

				}
				catch(NullPointerException ex )
				{ 
					com.cannontech.clientutils.CTILogger.info("**** NullPointer found in insertAlarmDisplayAlarmedRow() method : " + ex.getMessage() );
				}
			}
			else
			{
				// if the point isn't alarming and its an EVENT_SIGNAL, we do not want to add it.
				// This means that some other app besides Dispatch has ACKED or CLEARED an existing alarm.
				// If we didnt do this, all AKED alarms would show up on every display!!!
				if( signal.getAlarmStateID() != Signal.EVENT_SIGNAL )
				{
					Integer rowLocation = new Integer( getRowNumber( signal.getId() ) );

					if( !pointExists(signal.getId()) )  // if the point does not already exist on the table
						incrementAlarmedRowsPosition( addColumnDefinedRow( signal ) );
					
					if( isRowSelectedBlank( 0 ) )
						setRowAlarmed( signal );
					else
						setRowAlarmed( signal );						
				}
			}
		}
	}
}
/**
 * This method was created in VisualAge.
 */
private void insertBlankLines() 
{
	for( int i = 0; i < blankPoints.size(); i++ )
		addBlankRow( ((BlankLine)blankPoints.elementAt(i)).getLocation() );
}
private void insertRowByTimeStamp( Vector newRow, int soe_Tag )
{
	if( !(columnTypeName.contains(COLUMN_TYPE_POINTTIMESTAMP)) )
		return;  // no TimeStamp row found, get outa here!

	checkRowExceedance();
	
	if( getRowCount() == 0 )
	{		
		rows.addElement( newRow );
	}
	else
	{
		try
		{
// CHECK TO SEE IF THE TIMES ARE ACCURATE OUT TO THE MILLI!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			long newRowTime = ((ModifiedDate) newRow.elementAt(columnTypeName.indexOf(COLUMN_TYPE_POINTTIMESTAMP))).getTime();
			long oldRowTime = ((ModifiedDate) ((Vector)rows.elementAt(0)).elementAt( columnTypeName.indexOf(COLUMN_TYPE_POINTTIMESTAMP) )).getTime();
			
			for( int i = 0; i < getRowCount(); i++ )
			{
				if( newRowTime < oldRowTime )
				{
					oldRowTime = ((ModifiedDate) ((Vector)rows.elementAt(i)).elementAt( columnTypeName.indexOf(COLUMN_TYPE_POINTTIMESTAMP) )).getTime();
				}
				else
				{

				}
			}
		}
		catch( ArrayIndexOutOfBoundsException ex )
		{
			com.cannontech.clientutils.CTILogger.info("insertRowByTimeStamp() called with a invalid row number of 0");
		}

		// we are in order, so insert the row at the top
		//if( inorder )
			rows.insertElementAt( newRow, 0 );
		//else		
			//we are out of order, find the correct place for this row
	}
	
}
/**
 * Insert the method's description here.
 * Creation date: (4/12/00 12:56:16 PM)
 * Version: <version>
 * @return boolean
 */
public boolean isAlarmDisplay() 
{
	return ( getCurrentDisplayNumber() >= Display.GLOBAL_ALARM_DISPLAY &&
			 getCurrentDisplayNumber() <= Display.LAST_ALARM_DISPLAY );
}
/**
 * Insert the method's description here.
 * Creation date: (8/9/00 3:35:39 PM)
 * @return boolean
 * @param signal com.cannontech.message.dispatch.message.Signal
 */
private boolean isAlarmUnAcked(int tag) 
{
	return ( (tag & Signal.TAG_UNACKNOWLEDGED_ALARM) == Signal.TAG_UNACKNOWLEDGED_ALARM );
}
public boolean isCellEditable(int row, int column) {

	// make every cell non-editable
	return false;

}
/**
 * Insert the method's description here.
 * Creation date: (4/12/00 12:56:16 PM)
 * Version: <version>
 * @return boolean
 */
public boolean isHistoricalDisplay() 
{
	return ( currentDisplayNumber == Display.HISTORY_EVENT_VIEWER_DISPLAY_NUMBER ||
			 currentDisplayNumber == Display.RAW_POINT_HISTORY_VIEWER_DISPLAY_NUMBER );
}
/**
 * Insert the method's description here.
 * Creation date: (3/7/00 2:40:18 PM)
 * @return boolean
 * @param ptID java.lang.String
 */
public boolean isPlayingSound()
{
	return playSound;
}
/**
 * Insert the method's description here.
 * Creation date: (3/30/00 9:29:03 AM)
 * Version: <version>
 * @return boolean
 * @param rowNumber int
 */
public boolean isPointAlarmed( long pointID )
{
	return getAlarmingRowVector().contains( pointID );
}
/**
 * Insert the method's description here.
 * Creation date: (3/30/00 9:29:03 AM)
 * Version: <version>
 * @return boolean
 * @param rowNumber int
 */
public boolean isRowAcked( int rowNumber )
{
	if( isRowInAalarmVector(rowNumber) )
	{
		return isAlarmUnAcked( getAlarmingRowVector().getAlarmingRow(rowNumber).getSignal().getTags() ); // we need to only show the row
	}
	else
		return false;
}
/**
 * Insert the method's description here.
 * Creation date: (3/30/00 9:29:03 AM)
 * Version: <version>
 * @return boolean
 * @param rowNumber int
 */
public boolean isRowAlarmUnCleared( int rowNumber )
{	
	if( getPointValue(rowNumber).getPointData() != null )
	{
		long tags = getPointValue(rowNumber).getPointData().getTags();
		
		// see if we have an alarm AND it has been ACKED
		if( ((tags & Signal.MASK_ANY_ALARM) != 0) &&
			   com.cannontech.clientutils.tags.TagUtils.isAlarmAcked( (int)tags) )
		{
				return true;
		}
	}
	
	return false;
}
/**
 * Insert the method's description here.
 * Creation date: (3/30/00 9:29:03 AM)
 * Version: <version>
 * @return boolean
 * @param rowNumber int
 */
public boolean isRowInAalarmVector( int rowNumber )
{
	return getAlarmingRowVector().contains( new Integer( rowNumber ) );
}
/**
 * This method add a Blank row to the table
 */
 
public boolean isRowSelectedBlank( int location )
{
	if( rows.size() > 0 && location >= 0 )
	{
		if( getPointID( location ) == TDCDefines.ROW_BREAK_ID )
			return true;
		else
			return false;			
	}
	else
		return false;
}
/**
 * Insert the method's description here.
 * Creation date: (4/14/00 11:38:27 AM)
 * Version: <version>
 * @return boolean
 * @param classification long
 */
private boolean isValidAlarm(long alarmState) 
{
	return (alarmState >= Signal.EVENT_SIGNAL && alarmState <= Signal.ALARM_SIGNAL );
}
/**
 * Insert the method's description here.
 * Creation date: (5/26/00 10:04:07 AM)
 * Version: <version>
 * @return java.util.GregorianCalendar
 * @param date java.util.Date
 */
private java.util.GregorianCalendar makeCalendar(java.util.Date date) 
{
	java.util.GregorianCalendar calendar = new java.util.GregorianCalendar();
	calendar.setTime( date );

/*	int day = calendar.get( calendar.DAY_OF_MONTH );	
	String month = CommonUtils.format3CharMonth( calendar.get( calendar.MONTH ) );
	int year = calendar.get( calendar.YEAR );
	int hour = calendar.get( calendar.HOUR );
*/
	return calendar;
}
/**
 * This method creates the table
 */
 
public synchronized void makeTable ( )
{
	initColumns();
	initAlarmColors();

	String query = new String();

	if ( !(query = buildRowQuery()).equals("") )
	{
		Object[][] values = DataBaseInteraction.queryResults( query, null );

		for( int i = 0; i < values.length; i++ ) 
		{
			Vector newRow = new Vector();
	
			for (int j = 0; j < getColumnCount(); j++) 
			{
				if ( values[i][j] == null )
					newRow.addElement("");
				else if ( values[i][j].toString().equals("**DYNAMIC**") )
					newRow.addElement("   -----");					
				else
  					newRow.addElement( values[i][j] );   					
			}
				
			rows.addElement(newRow);
		}
	}
		
	// insert blanklines here
	if( blankPoints != null && blankPoints.size() > 0 )
		insertBlankLines();

	forcePaintTableDataChanged(); // refresh the table model
	
	TDCMainFrame.messageLog.addMessage("Table reinited", MessageBoxFrame.INFORMATION_MSG );
	exceededMaxMsg = true;	
}
/**
 * Insert the method's description here.
 * Creation date: (7/27/00 2:51:57 PM)
 * @return boolean
 * @param pointID long
 */
private boolean pointExists(long pointID) 
{
	return ( getRowNumber( pointID ) == -1 ? false : true );
}
/**
 * Insert the method's description here.
 * Creation date: (3/7/00 2:40:18 PM)
 * @return boolean
 * @param ptID java.lang.String
 */
public boolean pointExists(String ptID) 
{
	Long value = null;
	
	try
	{
		value = new Long(ptID);
	}
	catch( Exception e ) // NumberFormatException of NullPointerException will be the most common caught
	{
		return false;
	}
	
	return pointExists( value.longValue() );
}
/**
 * Insert the method's description here.
 * Creation date: (4/20/00 2:33:19 PM)
 * Version: <version>
 */
public synchronized void processDBChangeMessage( DBChangeMsg msg ) 
{

	if( getCurrentDisplayNumber() == Display.EVENT_VIEWER_DISPLAY_NUMBER ||
		 getCurrentDisplayNumber() == Display.HISTORY_EVENT_VIEWER_DISPLAY_NUMBER )
	{
		return;  // do nothing
	}

	switch( msg.getDatabase() )
	{
		case DBChangeMsg.CHANGE_STATE_GROUP_DB:
		case DBChangeMsg.CHANGE_PAO_DB:
		case DBChangeMsg.CHANGE_POINT_DB:	
		case DBChangeMsg.CHANGE_ALARM_CATEGORY_DB:
		//case DBChangeMsg.CHANGE_ALL_DB:
			makeTable(); // just recreate the table
			break;
		
		default:
		TDCMainFrame.messageLog.addMessage("Unhandled DBChangeMessage received and ignored = " + msg.toString(), MessageBoxFrame.INFORMATION_MSG );
	}
}
/**
 * This method was created in VisualAge.
 */
public synchronized void processPointDataReceived( PointData point )
{
	// make sure we have a PointData and the display is a user defined one
	if ( point == null || pointValues == null || pointValues.size() < 1 || 
		 currentDisplayNumber < Display.PRECANNED_USER_DISPLAY_NUMBER )
		return;

	int rowLocation = -1;
	if ( (rowLocation = getRowNumber(point.getId())) >= 0)
	{				
		setCorrectRowValue( point, point.getPointDataTimeStamp(), rowLocation );			
	}	
}
/**
 * This method was created in VisualAge.

 ONLY SIGNALS SHOULD BE ALLOWED IN HERE
 */

public synchronized void processSignalReceived( Signal signal )
{
	// make sure we have a point and we are not looking at historical data
	if ( signal == null || currentDisplayNumber == Display.HISTORY_EVENT_VIEWER_DISPLAY_NUMBER )
		return;

	int location = getRowNumber(signal.getId());

	// this is just in case the user has the edit RowEditor box open when
	// this signal is received and the point is on the display
	if ( dataRow == null && location >= 0 )
		dataRow = new ObservableRow( (Vector)rows.elementAt( location ), location );

	if( location >= 0 )
		dataRow.setSignal( signal );

	if( getCurrentDisplayNumber() == Display.EVENT_VIEWER_DISPLAY_NUMBER )
	{
		addColumnDefinedRow( signal );
		
		// set all fields that overlap in the PointData() and Signal() data structures
		if(getPointValue( getRowNumber(signal.getId()) ) != null )
			getPointValue( getRowNumber(signal.getId()) ).getPointData().setTags( signal.getTags() );
	}
	else
	{

com.cannontech.clientutils.CTILogger.info("*****   " + new ModifiedDate(signal.getTimeStamp().getTime()) );
		handleDisablity( signal );
		handleAlarm( signal );
		
		// set all fields that overlap in the PointData() and Signal() data structures
		if(getPointValue( getRowNumber(signal.getId())) != null )
		{
			getPointValue( getRowNumber(signal.getId())).getPointData().setTags( signal.getTags() );
			//getPointValue( getRowNumber(signal.getId())).getPointData().setTimeStamp( signal.getTimeStamp() );
			
			//update the tables view of the data
			int rowNum = getRowNumber(signal.getId());
			setCorrectRowValue(  
					getPointValue(rowNum).getPointData(),
					signal.getTimeStamp(),
					rowNum );
		}
		
	}

	
}
/**
 * Insert the method's description here.
 * Creation date: (4/5/00 1:16:57 PM)
 * Version: <version>
 * @param rowNumber int
 */
public void removeAllRows() 
{
	rows.removeAllElements();
	
	forcePaintTableDataChanged();
}
/**
 * Insert the method's description here.
 * Creation date: (4/5/00 1:16:57 PM)
 * Version: <version>
 * @param rowNumber int
 */
public void removeRow(int rowNumber, boolean deleteFromDataBase ) 
{
	if( pointValues == null || rowNumber < 0 || rowNumber >= getRowCount() )
		return;

	setRowUnAlarmed( new Integer( rowNumber ) );

	// just in case the rows below this one are alarming
	if( getAlarmingRowVector().areRowNumbersGreaterAlarming( rowNumber ) )
		decrementAlarmedRowsPosition( 1, rowNumber );

	
	if( deleteFromDataBase )
		deleteRowFromDataBase( getPointID( rowNumber ) );
	
	pointValues.removeElementAt( rowNumber );
	rows.removeElementAt( rowNumber );


	forcePaintTableRowDeleted( rowNumber );
}
/**
 * This method was created in VisualAge.
 */
public void reset() 
{
	
	if ( columnNames != null )
		columnNames.removeAllElements();

	if ( columnTypeName != null )
		columnTypeName.removeAllElements();
	
	if ( pointValues != null )
		pointValues.removeAllElements();

	if ( blankPoints != null )
		blankPoints.removeAllElements();
			
	if ( rows != null )
		rows.removeAllElements();

	if ( columnNames != null )
		columnNames.removeAllElements();

	if ( pointLimbo != null )
		pointLimbo.removeAllElements();
		
	getAlarmingRowVector().removeAllElements();

	currentDisplayNumber = Display.UNKNOWN_DISPLAY_NUMBER;

	forcePaintTableDataChanged();
}
/**
 * Insert the method's description here.
 * Creation date: (4/14/00 11:33:17 AM)
 * Version: <version>
 * @param shouldPlay boolean
 */
public void rowDataSwap( int i, int j )
{
	Object tmp = null;

	// swap the pointValues
	tmp = pointValues.elementAt(i);
	pointValues.setElementAt( pointValues.elementAt(j), i );
	pointValues.setElementAt( tmp, j );
	
	// handles alarmed rows
	if( isRowInAalarmVector(i) || isRowInAalarmVector(j) )
	{
		synchronized( getAlarmingRowVector() )
		{
			if( isRowInAalarmVector(i) && isRowInAalarmVector(j) )
			{
				int iRow = getAlarmingRowVector().getAlarmingRowLocation( i );
				int jRow = getAlarmingRowVector().getAlarmingRowLocation( j );

				tmp = getAlarmingRowVector().getAlarmingRow(i);
				getAlarmingRowVector().setElementAt( getAlarmingRowVector().elementAt(jRow), iRow );
				getAlarmingRowVector().setElementAt( (AlarmingRow)tmp, jRow );
			}
			else if( isRowInAalarmVector(i) )
			{
				// set row i unalarmed and set row j to alarmed
				tmp = getAlarmingRowVector().getAlarmingRow(i);
				((AlarmingRow)tmp).setRowNumber( j );
				
				// just in case the background color is alarmed and should not be
				((PointValues)pointValues.elementAt( i )).setCurrentBackgroundColor(
					  ((PointValues)pointValues.elementAt( i )).getOriginalBackgroundColor() );
			}
			else if( isRowInAalarmVector(j) )
			{
				// set row j unalarmed and set row i to alarmed				
				tmp = getAlarmingRowVector().getAlarmingRow(j);
				((AlarmingRow)tmp).setRowNumber( i );

				// just in case the background color is alarmed and should not be
				((PointValues)pointValues.elementAt( j )).setCurrentBackgroundColor(
					  ((PointValues)pointValues.elementAt( j )).getOriginalBackgroundColor() );						
			}						
		}
	}

	tmp = rows.elementAt(i);
	rows.setElementAt( rows.elementAt(j), i );
	rows.setElementAt( tmp, j );
}
/**
 * Insert the method's description here.
 * Creation date: (1/12/2001 1:06:00 PM)
 * @return boolean
 * @param rowNumber int
 * @param color int
 */
public boolean setBGRowColor(int rowNumber, int color) 
{
	synchronized( pointValues )
	{	
			
		try
		{
			((PointValues)pointValues.elementAt(rowNumber)).setCurrentBackgroundColor( color );

			return true;
		}
		catch( ArrayIndexOutOfBoundsException ex )
		{
			/* This happens when the user switches displays, no big deal */
			return false;
		}
	} // end synch pointValues
}
/**
 * This method was created in VisualAge.
 * @param Point com.cannontech.message.dispatch.message.SinglePointChange
 */
private void setCorrectRowValue( PointData point, java.util.Date timeStamp, int location ) 
{
	
	if ( rows.size() > 0 )   // make sure there are some rows
	{
		
		if ( dataRow == null )
			dataRow = new ObservableRow( (Vector)rows.elementAt( location ), location );
		else
			dataRow.setRow( (Vector)rows.elementAt( location ) );
			
		if ( columnTypeName.contains(COLUMN_TYPE_POINTVALUE) )
		{
			Object message = getCellValueObject( point, location );
			dataRow.setElementAt( message, 
					columnTypeName.indexOf(COLUMN_TYPE_POINTVALUE), 
					ObservedPointDataChange.POINT_VALUE_TYPE, point.getId(), 
					isRowInAalarmVector( location ),
					(int)point.getTags() );
		}

		if ( columnTypeName.contains(COLUMN_TYPE_POINTQUALITY) )
		{
 			dataRow.setElementAt(
		 			com.cannontech.database.data.point.PointQualities.getQualityAbreviation( (int)point.getQuality() )
		 				+ (TagUtils.isAnyAlarm((int)point.getTags()) ? "-(ALM)" : ""),
		 			columnTypeName.indexOf(COLUMN_TYPE_POINTQUALITY), 
		 			ObservedPointDataChange.POINT_QUALITY_TYPE, point.getId(), 
		 			isRowInAalarmVector( location ),
					(int)point.getTags() );
		}
	
		if ( columnTypeName.contains(COLUMN_TYPE_TAGS) )
		{
 			dataRow.setElementAt(
		 			 TagUtils.getTagString( (int)point.getTags() ),
//		 				+ (AlarmUtils.isAnyAlarm((int)point.getTags()) ? "-(ALM)" : ""),
		 			columnTypeName.indexOf(COLUMN_TYPE_TAGS), 
		 			ObservedPointDataChange.POINT_TAG_TYPE, point.getId(),
		 			isRowInAalarmVector( location ),
					(int)point.getTags() );
		}

		if ( columnTypeName.contains(COLUMN_TYPE_POINTTIMESTAMP) )
		{					
			dataRow.setElementAt( 
					new ModifiedDate( timeStamp.toString() ), 
					columnTypeName.indexOf(COLUMN_TYPE_POINTTIMESTAMP), 
					ObservedPointDataChange.POINT_TIMESTAMP_TYPE, point.getId(), 
					isRowInAalarmVector( location ),
					(int)point.getTags() );
		}

		
		// More Dyanmic cell changes should follow

			
		// changes the current rows pointData values  -- Very Important
		try
		{
			((PointValues)pointValues.elementAt( location )).setPointData( point );
		}
		catch(ArrayIndexOutOfBoundsException ex )
		{
			com.cannontech.clientutils.CTILogger.info("***** ArrayIndexOutOfBoundsException in " + this.getClass() + " of setCorrectRowValue() exception = " + ex.getMessage() + " /r/n" );
		}
		
	}

}
/**
 * Insert the method's description here.
 * Creation date: (1/20/00 4:47:45 PM)
 * @param val int
 */
public void setCurrentDisplayNumber(long val) 
{
	currentDisplayNumber = val;	
}
/**
 * Insert the method's description here.
 * Creation date: (2/24/00 10:59:27 AM)
 * @param points java.lang.Object[]
 */
public void setLimboPointsValue(Object[] points) 
{
	if( points == null )
	{
		pointLimbo = null; //.removeAllElements();
		return;
	}
	else
	{
		if( pointLimbo != null )
		{
			pointLimbo.removeAllElements();
			
			for( int i = 0; i < points.length; i++ )
				pointLimbo.addElement( points[i] );
		}
		
	}
	
}
/**
 * Insert the method's description here.
 * Creation date: (3/10/00 6:00:44 PM)
 * @return com.cannontech.tdc.ObservableVector
 */
public void setObservedRow( int location ) 
{
	if( location >= 0 && location < getRowCount() )
		dataRow = new ObservableRow( (Vector)rows.elementAt( location ), location );
}
/**
 * Insert the method's description here.
 * Creation date: (3/29/00 2:23:38 PM)
 * Version: <version>
 */
public void setRowAlarmed( Signal signal ) 
{
	//do not process EVENT_SIGNAL messages
	if( signal.getAlarmStateID() <= Signal.EVENT_SIGNAL )
		return;

		
	Integer rowLocation = new Integer( getRowNumber( signal.getId() ) );

	// see if the point is in our display
	if( rowLocation.intValue() >= 0 )
	{
		synchronized( getAlarmingRowVector() )
		{
			if( !getAlarmingRowVector().contains( rowLocation ) )
				getAlarmingRowVector().addElement( new AlarmingRow(
						rowLocation.intValue(), 
						getAlarmColor((int)signal.getAlarmStateID()), 
						getRowBackgroundColor(rowLocation.intValue()),
						signal) );
			else
			{
				getAlarmingRowVector().getAlarmingRow(rowLocation.intValue()).setAlarmColor( 
						getAlarmColor((int)signal.getAlarmStateID()) );
				
				getAlarmingRowVector().getAlarmingRow(rowLocation.intValue()).setSignal( signal );
			}
			
		}
		
		if( currenBlinkingAlarms == null )
			currenBlinkingAlarms = new com.cannontech.tdc.alarms.gui.RowBlinker( this, getAlarmingRowVector() );
	}		
}
/**
 * Insert the method's description here.
 * Creation date: (4/13/00 5:04:56 PM)
 * Version: <version>
 * @return java.util.Vector
 */
private void setRowForEventViewer( Vector aRow, Signal signal, String deviceName, String pointName )
{
	if( signal == null || aRow == null )
		return;


	// set DeviceName
	if( deviceName != null && columnTypeName.contains(COLUMN_TYPE_DEVICENAME) )
		aRow.setElementAt( CommonUtils.createString( deviceName ), columnTypeName.indexOf(COLUMN_TYPE_DEVICENAME) );

	// set PointName		
	if( pointName != null && columnTypeName.contains(COLUMN_TYPE_POINTNAME) )
		aRow.setElementAt( CommonUtils.createString( pointName ), columnTypeName.indexOf(COLUMN_TYPE_POINTNAME) );

	// set Message/Description
	if( columnTypeName.contains(COLUMN_TYPE_UOFM) )
		aRow.setElementAt( CommonUtils.createString( signal.getDescription() ), columnTypeName.indexOf(COLUMN_TYPE_UOFM) );

	// set Action
	if( columnTypeName.contains(COLUMN_TYPE_POINTQUALITY) )
		aRow.setElementAt( CommonUtils.createString( signal.getAction() ), columnTypeName.indexOf(COLUMN_TYPE_POINTQUALITY));

	// set TimeStamp
	if( columnTypeName.contains(COLUMN_TYPE_POINTTIMESTAMP) )
		aRow.setElementAt( new ModifiedDate( signal.getTimeStamp().toString() ), columnTypeName.indexOf(COLUMN_TYPE_POINTTIMESTAMP) );

	// set User Name
	if( columnTypeName.contains(COLUMN_TYPE_DEVICEID) )
		aRow.setElementAt( CommonUtils.createString( signal.getUserName() ), columnTypeName.indexOf(COLUMN_TYPE_DEVICEID) );

}
/**
 * Insert the method's description here.
 * Creation date: (3/29/00 2:23:38 PM)
 * Version: <version>
 */
public void setRowUnAlarmed( long pointid ) 
{
	Integer row = new Integer( getRowNumber( pointid ) );

	// make sure our display has the point in it && we have some alarms
	if( row.intValue() >= 0 )
	{
		synchronized ( getAlarmingRowVector() )
		{
			if( getAlarmingRowVector().contains( row ) )	
				getAlarmingRowVector().removeElement( row );
			else
				return;

			if( getAlarmingRowVector().size() == 0 )
				currenBlinkingAlarms = null;
		}
	}

}
/**
 * Insert the method's description here.
 * Creation date: (3/29/00 2:23:38 PM)
 * Version: <version>
 */
public void setRowUnAlarmed( Signal signal ) 
{
	Integer rowNumber = new Integer( getRowNumber( signal.getId() ) );
	
	// make sure our display has the point in it
	if( rowNumber.intValue() >= 0 )
	{
		synchronized ( getAlarmingRowVector() )
		{
			if( getAlarmingRowVector().contains( rowNumber ) )	
				getAlarmingRowVector().removeElement( rowNumber );
			else
				return;

			if( getAlarmingRowVector().size() == 0 )
				currenBlinkingAlarms = null;
		}
	}

}
/**
 * Insert the method's description here.
 * Creation date: (3/29/00 2:23:38 PM)
 * Version: <version>
 */
public void setRowUnAlarmed( Integer rowNumber ) 
{
	// make sure our display has the point in it
	if( rowNumber.intValue() >= 0 )
	{
		synchronized ( getAlarmingRowVector() )
		{
			if( getAlarmingRowVector().contains( rowNumber ) )	
				getAlarmingRowVector().removeElement( rowNumber );
			else
				return;

			if( getAlarmingRowVector().size() == 0 )
				currenBlinkingAlarms = null;
		}
	}

}
/**
 * Insert the method's description here.
 * Creation date: (4/14/00 11:33:17 AM)
 * Version: <version>
 * @param shouldPlay boolean
 */
public void setSound(boolean shouldPlay) 
{
	playSound = shouldPlay;	
}
/**
 * Insert the method's description here.
 * Creation date: (7/28/00 1:46:45 PM)
 * @return java.lang.Object
 * @param o java.lang.Object
 */
private Object substituteObject(Object o) 
{
	if( o == null )
		return null;
	else if( o instanceof Character )
	{
		return o.toString();
	}
	else if( o instanceof java.util.GregorianCalendar )
	{
		java.sql.Timestamp ts = new Timestamp(((java.util.GregorianCalendar)o).getTime().getTime());
		return ts;
	}
	else if( o instanceof java.util.Date )
	{
		Timestamp ts = new Timestamp( ((java.util.Date)o).getTime() );
		return ts;
	}
	else
		return o;
}
/**
 * Insert the method's description here.
 * Creation date: (4/14/00 11:38:27 AM)
 * Version: <version>
 * @return boolean
 * @param classification long
 */
public void swapColumnTypes(int fromIndx, int toIndx) 
{
	if( fromIndx < 0 || toIndx < 0 || fromIndx >= columnTypeName.size() || toIndx >= columnTypeName.size() )
		return;

com.cannontech.clientutils.CTILogger.info("swapping " + columnTypeName.elementAt(fromIndx) + " with " + columnTypeName.elementAt(toIndx) );

	String tmp = columnTypeName.elementAt(fromIndx).toString();
	columnTypeName.setElementAt( columnTypeName.elementAt(toIndx), fromIndx );
	columnTypeName.setElementAt( tmp, toIndx );
}
}

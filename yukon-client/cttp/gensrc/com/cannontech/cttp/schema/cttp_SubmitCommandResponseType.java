/**
 * cttp_SubmitCommandResponseType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.*;

public class cttp_SubmitCommandResponseType extends com.altova.xml.Node {
	public cttp_SubmitCommandResponseType() {
		super();
	}

	public cttp_SubmitCommandResponseType(cttp_SubmitCommandResponseType node) {
		super(node);
	}

	public cttp_SubmitCommandResponseType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_SubmitCommandResponseType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "cttp-CommandResponse");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-CommandResponse", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_CommandResponseType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-Failure");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-Failure", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_FailureType(tmpNode).adjustPrefix();
		}
	}

	public int getcttp_CommandResponseMinCount() {
		return 1;
	}

	public int getcttp_CommandResponseMaxCount() {
		return 1;
	}

	public int getcttp_CommandResponseCount() {
		return getDomChildCount(Element, null, "cttp-CommandResponse");
	}

	public boolean hascttp_CommandResponse() {
		return hasDomChild(Element, null, "cttp-CommandResponse");
	}

	public cttp_CommandResponseType getcttp_CommandResponseAt(int index) throws Exception {
		return new cttp_CommandResponseType(getDomChildAt(Element, null, "cttp-CommandResponse", index));
	}

	public cttp_CommandResponseType getcttp_CommandResponse() throws Exception {
		return getcttp_CommandResponseAt(0);
	}

	public void removecttp_CommandResponseAt(int index) {
		removeDomChildAt(Element, null, "cttp-CommandResponse", index);
	}

	public void removecttp_CommandResponse() {
		while (hascttp_CommandResponse())
			removecttp_CommandResponseAt(0);
	}

	public void addcttp_CommandResponse(cttp_CommandResponseType value) {
		appendDomElement(null, "cttp-CommandResponse", value);
	}

	public void insertcttp_CommandResponseAt(cttp_CommandResponseType value, int index) {
		insertDomElementAt(null, "cttp-CommandResponse", index, value);
	}

	public void replacecttp_CommandResponseAt(cttp_CommandResponseType value, int index) {
		replaceDomElementAt(null, "cttp-CommandResponse", index, value);
	}

	public int getcttp_FailureMinCount() {
		return 1;
	}

	public int getcttp_FailureMaxCount() {
		return 1;
	}

	public int getcttp_FailureCount() {
		return getDomChildCount(Element, null, "cttp-Failure");
	}

	public boolean hascttp_Failure() {
		return hasDomChild(Element, null, "cttp-Failure");
	}

	public cttp_FailureType getcttp_FailureAt(int index) throws Exception {
		return new cttp_FailureType(getDomChildAt(Element, null, "cttp-Failure", index));
	}

	public cttp_FailureType getcttp_Failure() throws Exception {
		return getcttp_FailureAt(0);
	}

	public void removecttp_FailureAt(int index) {
		removeDomChildAt(Element, null, "cttp-Failure", index);
	}

	public void removecttp_Failure() {
		while (hascttp_Failure())
			removecttp_FailureAt(0);
	}

	public void addcttp_Failure(cttp_FailureType value) {
		appendDomElement(null, "cttp-Failure", value);
	}

	public void insertcttp_FailureAt(cttp_FailureType value, int index) {
		insertDomElementAt(null, "cttp-Failure", index, value);
	}

	public void replacecttp_FailureAt(cttp_FailureType value, int index) {
		replaceDomElementAt(null, "cttp-Failure", index, value);
	}
}

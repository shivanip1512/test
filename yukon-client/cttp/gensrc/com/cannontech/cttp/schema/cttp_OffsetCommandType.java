/**
 * cttp_OffsetCommandType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.SchemaString;

public class cttp_OffsetCommandType extends com.altova.xml.Node {
	public cttp_OffsetCommandType() {
		super();
	}

	public cttp_OffsetCommandType(cttp_OffsetCommandType node) {
		super(node);
	}

	public cttp_OffsetCommandType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_OffsetCommandType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "offsetDegreesF");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "offsetDegreesF", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "offsetDuration");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "offsetDuration", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "offsetOverrideable");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "offsetOverrideable", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getoffsetDegreesFMinCount() {
		return 1;
	}

	public int getoffsetDegreesFMaxCount() {
		return 1;
	}

	public int getoffsetDegreesFCount() {
		return getDomChildCount(Attribute, null, "offsetDegreesF");
	}

	public boolean hasoffsetDegreesF() {
		return hasDomChild(Attribute, null, "offsetDegreesF");
	}

	public SchemaString getoffsetDegreesFAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "offsetDegreesF", index)));
	}

	public SchemaString getoffsetDegreesF() throws Exception {
		return getoffsetDegreesFAt(0);
	}

	public void removeoffsetDegreesFAt(int index) {
		removeDomChildAt(Attribute, null, "offsetDegreesF", index);
	}

	public void removeoffsetDegreesF() {
		while (hasoffsetDegreesF())
			removeoffsetDegreesFAt(0);
	}

	public void addoffsetDegreesF(SchemaString value) {
		setDomChild(Attribute, null, "offsetDegreesF", value.toString());
	}

	public void addoffsetDegreesF(String value) throws Exception {
		addoffsetDegreesF(new SchemaString(value));
	}

	public void insertoffsetDegreesFAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "offsetDegreesF", index, value.toString());
	}

	public void insertoffsetDegreesFAt(String value, int index) throws Exception {
		insertoffsetDegreesFAt(new SchemaString(value), index);
	}

	public void replaceoffsetDegreesFAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "offsetDegreesF", index, value.toString());
	}

	public void replaceoffsetDegreesFAt(String value, int index) throws Exception {
		replaceoffsetDegreesFAt(new SchemaString(value), index);
	}

	public int getoffsetDurationMinCount() {
		return 1;
	}

	public int getoffsetDurationMaxCount() {
		return 1;
	}

	public int getoffsetDurationCount() {
		return getDomChildCount(Attribute, null, "offsetDuration");
	}

	public boolean hasoffsetDuration() {
		return hasDomChild(Attribute, null, "offsetDuration");
	}

	public SchemaString getoffsetDurationAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "offsetDuration", index)));
	}

	public SchemaString getoffsetDuration() throws Exception {
		return getoffsetDurationAt(0);
	}

	public void removeoffsetDurationAt(int index) {
		removeDomChildAt(Attribute, null, "offsetDuration", index);
	}

	public void removeoffsetDuration() {
		while (hasoffsetDuration())
			removeoffsetDurationAt(0);
	}

	public void addoffsetDuration(SchemaString value) {
		setDomChild(Attribute, null, "offsetDuration", value.toString());
	}

	public void addoffsetDuration(String value) throws Exception {
		addoffsetDuration(new SchemaString(value));
	}

	public void insertoffsetDurationAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "offsetDuration", index, value.toString());
	}

	public void insertoffsetDurationAt(String value, int index) throws Exception {
		insertoffsetDurationAt(new SchemaString(value), index);
	}

	public void replaceoffsetDurationAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "offsetDuration", index, value.toString());
	}

	public void replaceoffsetDurationAt(String value, int index) throws Exception {
		replaceoffsetDurationAt(new SchemaString(value), index);
	}

	public int getoffsetOverrideableMinCount() {
		return 1;
	}

	public int getoffsetOverrideableMaxCount() {
		return 1;
	}

	public int getoffsetOverrideableCount() {
		return getDomChildCount(Attribute, null, "offsetOverrideable");
	}

	public boolean hasoffsetOverrideable() {
		return hasDomChild(Attribute, null, "offsetOverrideable");
	}

	public SchemaString getoffsetOverrideableAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "offsetOverrideable", index)));
	}

	public SchemaString getoffsetOverrideable() throws Exception {
		return getoffsetOverrideableAt(0);
	}

	public void removeoffsetOverrideableAt(int index) {
		removeDomChildAt(Attribute, null, "offsetOverrideable", index);
	}

	public void removeoffsetOverrideable() {
		while (hasoffsetOverrideable())
			removeoffsetOverrideableAt(0);
	}

	public void addoffsetOverrideable(SchemaString value) {
		setDomChild(Attribute, null, "offsetOverrideable", value.toString());
	}

	public void addoffsetOverrideable(String value) throws Exception {
		addoffsetOverrideable(new SchemaString(value));
	}

	public void insertoffsetOverrideableAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "offsetOverrideable", index, value.toString());
	}

	public void insertoffsetOverrideableAt(String value, int index) throws Exception {
		insertoffsetOverrideableAt(new SchemaString(value), index);
	}

	public void replaceoffsetOverrideableAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "offsetOverrideable", index, value.toString());
	}

	public void replaceoffsetOverrideableAt(String value, int index) throws Exception {
		replaceoffsetOverrideableAt(new SchemaString(value), index);
	}
}

/**
 * cttp_OriginatorType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.SchemaString;

public class cttp_OriginatorType extends com.altova.xml.Node {
	public cttp_OriginatorType() {
		super();
	}

	public cttp_OriginatorType(cttp_OriginatorType node) {
		super(node);
	}

	public cttp_OriginatorType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_OriginatorType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "userID");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "userID", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "userName");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "userName", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getuserIDMinCount() {
		return 1;
	}

	public int getuserIDMaxCount() {
		return 1;
	}

	public int getuserIDCount() {
		return getDomChildCount(Attribute, null, "userID");
	}

	public boolean hasuserID() {
		return hasDomChild(Attribute, null, "userID");
	}

	public SchemaString getuserIDAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "userID", index)));
	}

	public SchemaString getuserID() throws Exception {
		return getuserIDAt(0);
	}

	public void removeuserIDAt(int index) {
		removeDomChildAt(Attribute, null, "userID", index);
	}

	public void removeuserID() {
		while (hasuserID())
			removeuserIDAt(0);
	}

	public void adduserID(SchemaString value) {
		setDomChild(Attribute, null, "userID", value.toString());
	}

	public void adduserID(String value) throws Exception {
		adduserID(new SchemaString(value));
	}

	public void insertuserIDAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "userID", index, value.toString());
	}

	public void insertuserIDAt(String value, int index) throws Exception {
		insertuserIDAt(new SchemaString(value), index);
	}

	public void replaceuserIDAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "userID", index, value.toString());
	}

	public void replaceuserIDAt(String value, int index) throws Exception {
		replaceuserIDAt(new SchemaString(value), index);
	}

	public int getuserNameMinCount() {
		return 1;
	}

	public int getuserNameMaxCount() {
		return 1;
	}

	public int getuserNameCount() {
		return getDomChildCount(Attribute, null, "userName");
	}

	public boolean hasuserName() {
		return hasDomChild(Attribute, null, "userName");
	}

	public SchemaString getuserNameAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "userName", index)));
	}

	public SchemaString getuserName() throws Exception {
		return getuserNameAt(0);
	}

	public void removeuserNameAt(int index) {
		removeDomChildAt(Attribute, null, "userName", index);
	}

	public void removeuserName() {
		while (hasuserName())
			removeuserNameAt(0);
	}

	public void adduserName(SchemaString value) {
		setDomChild(Attribute, null, "userName", value.toString());
	}

	public void adduserName(String value) throws Exception {
		adduserName(new SchemaString(value));
	}

	public void insertuserNameAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "userName", index, value.toString());
	}

	public void insertuserNameAt(String value, int index) throws Exception {
		insertuserNameAt(new SchemaString(value), index);
	}

	public void replaceuserNameAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "userName", index, value.toString());
	}

	public void replaceuserNameAt(String value, int index) throws Exception {
		replaceuserNameAt(new SchemaString(value), index);
	}
}

/**
 * cttp_FailureType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.SchemaString;

public class cttp_FailureType extends com.altova.xml.Node {
	public cttp_FailureType() {
		super();
	}

	public cttp_FailureType(cttp_FailureType node) {
		super(node);
	}

	public cttp_FailureType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_FailureType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "errorCode");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "errorCode", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "errorText");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "errorText", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int geterrorCodeMinCount() {
		return 1;
	}

	public int geterrorCodeMaxCount() {
		return 1;
	}

	public int geterrorCodeCount() {
		return getDomChildCount(Attribute, null, "errorCode");
	}

	public boolean haserrorCode() {
		return hasDomChild(Attribute, null, "errorCode");
	}

	public SchemaString geterrorCodeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "errorCode", index)));
	}

	public SchemaString geterrorCode() throws Exception {
		return geterrorCodeAt(0);
	}

	public void removeerrorCodeAt(int index) {
		removeDomChildAt(Attribute, null, "errorCode", index);
	}

	public void removeerrorCode() {
		while (haserrorCode())
			removeerrorCodeAt(0);
	}

	public void adderrorCode(SchemaString value) {
		setDomChild(Attribute, null, "errorCode", value.toString());
	}

	public void adderrorCode(String value) throws Exception {
		adderrorCode(new SchemaString(value));
	}

	public void inserterrorCodeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "errorCode", index, value.toString());
	}

	public void inserterrorCodeAt(String value, int index) throws Exception {
		inserterrorCodeAt(new SchemaString(value), index);
	}

	public void replaceerrorCodeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "errorCode", index, value.toString());
	}

	public void replaceerrorCodeAt(String value, int index) throws Exception {
		replaceerrorCodeAt(new SchemaString(value), index);
	}

	public int geterrorTextMinCount() {
		return 0;
	}

	public int geterrorTextMaxCount() {
		return 1;
	}

	public int geterrorTextCount() {
		return getDomChildCount(Attribute, null, "errorText");
	}

	public boolean haserrorText() {
		return hasDomChild(Attribute, null, "errorText");
	}

	public SchemaString geterrorTextAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "errorText", index)));
	}

	public SchemaString geterrorText() throws Exception {
		return geterrorTextAt(0);
	}

	public void removeerrorTextAt(int index) {
		removeDomChildAt(Attribute, null, "errorText", index);
	}

	public void removeerrorText() {
		while (haserrorText())
			removeerrorTextAt(0);
	}

	public void adderrorText(SchemaString value) {
		setDomChild(Attribute, null, "errorText", value.toString());
	}

	public void adderrorText(String value) throws Exception {
		adderrorText(new SchemaString(value));
	}

	public void inserterrorTextAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "errorText", index, value.toString());
	}

	public void inserterrorTextAt(String value, int index) throws Exception {
		inserterrorTextAt(new SchemaString(value), index);
	}

	public void replaceerrorTextAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "errorText", index, value.toString());
	}

	public void replaceerrorTextAt(String value, int index) throws Exception {
		replaceerrorTextAt(new SchemaString(value), index);
	}
}

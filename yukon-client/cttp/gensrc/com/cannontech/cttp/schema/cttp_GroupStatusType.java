/**
 * cttp_GroupStatusType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.SchemaString;

public class cttp_GroupStatusType extends com.altova.xml.Node {
	public cttp_GroupStatusType() {
		super();
	}

	public cttp_GroupStatusType(cttp_GroupStatusType node) {
		super(node);
	}

	public cttp_GroupStatusType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_GroupStatusType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "cttp-GroupStatusGroupDetail");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-GroupStatusGroupDetail", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_GroupStatusGroupDetailType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Attribute, null, "groupsTotal");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "groupsTotal", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "statsTotal");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "statsTotal", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "groupsWithOffset");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "groupsWithOffset", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "statsWithOffset");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "statsWithOffset", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getcttp_GroupStatusGroupDetailMinCount() {
		return 1;
	}

	public int getcttp_GroupStatusGroupDetailMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getcttp_GroupStatusGroupDetailCount() {
		return getDomChildCount(Element, null, "cttp-GroupStatusGroupDetail");
	}

	public boolean hascttp_GroupStatusGroupDetail() {
		return hasDomChild(Element, null, "cttp-GroupStatusGroupDetail");
	}

	public cttp_GroupStatusGroupDetailType getcttp_GroupStatusGroupDetailAt(int index) throws Exception {
		return new cttp_GroupStatusGroupDetailType(getDomChildAt(Element, null, "cttp-GroupStatusGroupDetail", index));
	}

	public cttp_GroupStatusGroupDetailType getcttp_GroupStatusGroupDetail() throws Exception {
		return getcttp_GroupStatusGroupDetailAt(0);
	}

	public void removecttp_GroupStatusGroupDetailAt(int index) {
		removeDomChildAt(Element, null, "cttp-GroupStatusGroupDetail", index);
	}

	public void removecttp_GroupStatusGroupDetail() {
		while (hascttp_GroupStatusGroupDetail())
			removecttp_GroupStatusGroupDetailAt(0);
	}

	public void addcttp_GroupStatusGroupDetail(cttp_GroupStatusGroupDetailType value) {
		appendDomElement(null, "cttp-GroupStatusGroupDetail", value);
	}

	public void insertcttp_GroupStatusGroupDetailAt(cttp_GroupStatusGroupDetailType value, int index) {
		insertDomElementAt(null, "cttp-GroupStatusGroupDetail", index, value);
	}

	public void replacecttp_GroupStatusGroupDetailAt(cttp_GroupStatusGroupDetailType value, int index) {
		replaceDomElementAt(null, "cttp-GroupStatusGroupDetail", index, value);
	}

	public int getgroupsTotalMinCount() {
		return 1;
	}

	public int getgroupsTotalMaxCount() {
		return 1;
	}

	public int getgroupsTotalCount() {
		return getDomChildCount(Attribute, null, "groupsTotal");
	}

	public boolean hasgroupsTotal() {
		return hasDomChild(Attribute, null, "groupsTotal");
	}

	public SchemaString getgroupsTotalAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "groupsTotal", index)));
	}

	public SchemaString getgroupsTotal() throws Exception {
		return getgroupsTotalAt(0);
	}

	public void removegroupsTotalAt(int index) {
		removeDomChildAt(Attribute, null, "groupsTotal", index);
	}

	public void removegroupsTotal() {
		while (hasgroupsTotal())
			removegroupsTotalAt(0);
	}

	public void addgroupsTotal(SchemaString value) {
		setDomChild(Attribute, null, "groupsTotal", value.toString());
	}

	public void addgroupsTotal(String value) throws Exception {
		addgroupsTotal(new SchemaString(value));
	}

	public void insertgroupsTotalAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "groupsTotal", index, value.toString());
	}

	public void insertgroupsTotalAt(String value, int index) throws Exception {
		insertgroupsTotalAt(new SchemaString(value), index);
	}

	public void replacegroupsTotalAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "groupsTotal", index, value.toString());
	}

	public void replacegroupsTotalAt(String value, int index) throws Exception {
		replacegroupsTotalAt(new SchemaString(value), index);
	}

	public int getstatsTotalMinCount() {
		return 1;
	}

	public int getstatsTotalMaxCount() {
		return 1;
	}

	public int getstatsTotalCount() {
		return getDomChildCount(Attribute, null, "statsTotal");
	}

	public boolean hasstatsTotal() {
		return hasDomChild(Attribute, null, "statsTotal");
	}

	public SchemaString getstatsTotalAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "statsTotal", index)));
	}

	public SchemaString getstatsTotal() throws Exception {
		return getstatsTotalAt(0);
	}

	public void removestatsTotalAt(int index) {
		removeDomChildAt(Attribute, null, "statsTotal", index);
	}

	public void removestatsTotal() {
		while (hasstatsTotal())
			removestatsTotalAt(0);
	}

	public void addstatsTotal(SchemaString value) {
		setDomChild(Attribute, null, "statsTotal", value.toString());
	}

	public void addstatsTotal(String value) throws Exception {
		addstatsTotal(new SchemaString(value));
	}

	public void insertstatsTotalAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "statsTotal", index, value.toString());
	}

	public void insertstatsTotalAt(String value, int index) throws Exception {
		insertstatsTotalAt(new SchemaString(value), index);
	}

	public void replacestatsTotalAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "statsTotal", index, value.toString());
	}

	public void replacestatsTotalAt(String value, int index) throws Exception {
		replacestatsTotalAt(new SchemaString(value), index);
	}

	public int getgroupsWithOffsetMinCount() {
		return 1;
	}

	public int getgroupsWithOffsetMaxCount() {
		return 1;
	}

	public int getgroupsWithOffsetCount() {
		return getDomChildCount(Attribute, null, "groupsWithOffset");
	}

	public boolean hasgroupsWithOffset() {
		return hasDomChild(Attribute, null, "groupsWithOffset");
	}

	public SchemaString getgroupsWithOffsetAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "groupsWithOffset", index)));
	}

	public SchemaString getgroupsWithOffset() throws Exception {
		return getgroupsWithOffsetAt(0);
	}

	public void removegroupsWithOffsetAt(int index) {
		removeDomChildAt(Attribute, null, "groupsWithOffset", index);
	}

	public void removegroupsWithOffset() {
		while (hasgroupsWithOffset())
			removegroupsWithOffsetAt(0);
	}

	public void addgroupsWithOffset(SchemaString value) {
		setDomChild(Attribute, null, "groupsWithOffset", value.toString());
	}

	public void addgroupsWithOffset(String value) throws Exception {
		addgroupsWithOffset(new SchemaString(value));
	}

	public void insertgroupsWithOffsetAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "groupsWithOffset", index, value.toString());
	}

	public void insertgroupsWithOffsetAt(String value, int index) throws Exception {
		insertgroupsWithOffsetAt(new SchemaString(value), index);
	}

	public void replacegroupsWithOffsetAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "groupsWithOffset", index, value.toString());
	}

	public void replacegroupsWithOffsetAt(String value, int index) throws Exception {
		replacegroupsWithOffsetAt(new SchemaString(value), index);
	}

	public int getstatsWithOffsetMinCount() {
		return 1;
	}

	public int getstatsWithOffsetMaxCount() {
		return 1;
	}

	public int getstatsWithOffsetCount() {
		return getDomChildCount(Attribute, null, "statsWithOffset");
	}

	public boolean hasstatsWithOffset() {
		return hasDomChild(Attribute, null, "statsWithOffset");
	}

	public SchemaString getstatsWithOffsetAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "statsWithOffset", index)));
	}

	public SchemaString getstatsWithOffset() throws Exception {
		return getstatsWithOffsetAt(0);
	}

	public void removestatsWithOffsetAt(int index) {
		removeDomChildAt(Attribute, null, "statsWithOffset", index);
	}

	public void removestatsWithOffset() {
		while (hasstatsWithOffset())
			removestatsWithOffsetAt(0);
	}

	public void addstatsWithOffset(SchemaString value) {
		setDomChild(Attribute, null, "statsWithOffset", value.toString());
	}

	public void addstatsWithOffset(String value) throws Exception {
		addstatsWithOffset(new SchemaString(value));
	}

	public void insertstatsWithOffsetAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "statsWithOffset", index, value.toString());
	}

	public void insertstatsWithOffsetAt(String value, int index) throws Exception {
		insertstatsWithOffsetAt(new SchemaString(value), index);
	}

	public void replacestatsWithOffsetAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "statsWithOffset", index, value.toString());
	}

	public void replacestatsWithOffsetAt(String value, int index) throws Exception {
		replacestatsWithOffsetAt(new SchemaString(value), index);
	}
}

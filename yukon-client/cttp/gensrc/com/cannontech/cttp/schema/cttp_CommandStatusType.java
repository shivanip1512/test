/**
 * cttp_CommandStatusType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.SchemaString;

public class cttp_CommandStatusType extends com.altova.xml.Node {
	public cttp_CommandStatusType() {
		super();
	}

	public cttp_CommandStatusType(cttp_CommandStatusType node) {
		super(node);
	}

	public cttp_CommandStatusType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_CommandStatusType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "cttp-CommandStatusGroupDetail");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-CommandStatusGroupDetail", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_CommandStatusGroupDetailType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Attribute, null, "submitCommandTime");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "submitCommandTime", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "statusUpdateTime");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "statusUpdateTime", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "groupsTotal");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "groupsTotal", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "groupsQueued");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "groupsQueued", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "groupsSent");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "groupsSent", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "groupsFailed");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "groupsFailed", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getcttp_CommandStatusGroupDetailMinCount() {
		return 1;
	}

	public int getcttp_CommandStatusGroupDetailMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getcttp_CommandStatusGroupDetailCount() {
		return getDomChildCount(Element, null, "cttp-CommandStatusGroupDetail");
	}

	public boolean hascttp_CommandStatusGroupDetail() {
		return hasDomChild(Element, null, "cttp-CommandStatusGroupDetail");
	}

	public cttp_CommandStatusGroupDetailType getcttp_CommandStatusGroupDetailAt(int index) throws Exception {
		return new cttp_CommandStatusGroupDetailType(getDomChildAt(Element, null, "cttp-CommandStatusGroupDetail", index));
	}

	public cttp_CommandStatusGroupDetailType getcttp_CommandStatusGroupDetail() throws Exception {
		return getcttp_CommandStatusGroupDetailAt(0);
	}

	public void removecttp_CommandStatusGroupDetailAt(int index) {
		removeDomChildAt(Element, null, "cttp-CommandStatusGroupDetail", index);
	}

	public void removecttp_CommandStatusGroupDetail() {
		while (hascttp_CommandStatusGroupDetail())
			removecttp_CommandStatusGroupDetailAt(0);
	}

	public void addcttp_CommandStatusGroupDetail(cttp_CommandStatusGroupDetailType value) {
		appendDomElement(null, "cttp-CommandStatusGroupDetail", value);
	}

	public void insertcttp_CommandStatusGroupDetailAt(cttp_CommandStatusGroupDetailType value, int index) {
		insertDomElementAt(null, "cttp-CommandStatusGroupDetail", index, value);
	}

	public void replacecttp_CommandStatusGroupDetailAt(cttp_CommandStatusGroupDetailType value, int index) {
		replaceDomElementAt(null, "cttp-CommandStatusGroupDetail", index, value);
	}

	public int getsubmitCommandTimeMinCount() {
		return 1;
	}

	public int getsubmitCommandTimeMaxCount() {
		return 1;
	}

	public int getsubmitCommandTimeCount() {
		return getDomChildCount(Attribute, null, "submitCommandTime");
	}

	public boolean hassubmitCommandTime() {
		return hasDomChild(Attribute, null, "submitCommandTime");
	}

	public SchemaString getsubmitCommandTimeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "submitCommandTime", index)));
	}

	public SchemaString getsubmitCommandTime() throws Exception {
		return getsubmitCommandTimeAt(0);
	}

	public void removesubmitCommandTimeAt(int index) {
		removeDomChildAt(Attribute, null, "submitCommandTime", index);
	}

	public void removesubmitCommandTime() {
		while (hassubmitCommandTime())
			removesubmitCommandTimeAt(0);
	}

	public void addsubmitCommandTime(SchemaString value) {
		setDomChild(Attribute, null, "submitCommandTime", value.toString());
	}

	public void addsubmitCommandTime(String value) throws Exception {
		addsubmitCommandTime(new SchemaString(value));
	}

	public void insertsubmitCommandTimeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "submitCommandTime", index, value.toString());
	}

	public void insertsubmitCommandTimeAt(String value, int index) throws Exception {
		insertsubmitCommandTimeAt(new SchemaString(value), index);
	}

	public void replacesubmitCommandTimeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "submitCommandTime", index, value.toString());
	}

	public void replacesubmitCommandTimeAt(String value, int index) throws Exception {
		replacesubmitCommandTimeAt(new SchemaString(value), index);
	}

	public int getstatusUpdateTimeMinCount() {
		return 1;
	}

	public int getstatusUpdateTimeMaxCount() {
		return 1;
	}

	public int getstatusUpdateTimeCount() {
		return getDomChildCount(Attribute, null, "statusUpdateTime");
	}

	public boolean hasstatusUpdateTime() {
		return hasDomChild(Attribute, null, "statusUpdateTime");
	}

	public SchemaString getstatusUpdateTimeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "statusUpdateTime", index)));
	}

	public SchemaString getstatusUpdateTime() throws Exception {
		return getstatusUpdateTimeAt(0);
	}

	public void removestatusUpdateTimeAt(int index) {
		removeDomChildAt(Attribute, null, "statusUpdateTime", index);
	}

	public void removestatusUpdateTime() {
		while (hasstatusUpdateTime())
			removestatusUpdateTimeAt(0);
	}

	public void addstatusUpdateTime(SchemaString value) {
		setDomChild(Attribute, null, "statusUpdateTime", value.toString());
	}

	public void addstatusUpdateTime(String value) throws Exception {
		addstatusUpdateTime(new SchemaString(value));
	}

	public void insertstatusUpdateTimeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "statusUpdateTime", index, value.toString());
	}

	public void insertstatusUpdateTimeAt(String value, int index) throws Exception {
		insertstatusUpdateTimeAt(new SchemaString(value), index);
	}

	public void replacestatusUpdateTimeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "statusUpdateTime", index, value.toString());
	}

	public void replacestatusUpdateTimeAt(String value, int index) throws Exception {
		replacestatusUpdateTimeAt(new SchemaString(value), index);
	}

	public int getgroupsTotalMinCount() {
		return 1;
	}

	public int getgroupsTotalMaxCount() {
		return 1;
	}

	public int getgroupsTotalCount() {
		return getDomChildCount(Attribute, null, "groupsTotal");
	}

	public boolean hasgroupsTotal() {
		return hasDomChild(Attribute, null, "groupsTotal");
	}

	public SchemaString getgroupsTotalAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "groupsTotal", index)));
	}

	public SchemaString getgroupsTotal() throws Exception {
		return getgroupsTotalAt(0);
	}

	public void removegroupsTotalAt(int index) {
		removeDomChildAt(Attribute, null, "groupsTotal", index);
	}

	public void removegroupsTotal() {
		while (hasgroupsTotal())
			removegroupsTotalAt(0);
	}

	public void addgroupsTotal(SchemaString value) {
		setDomChild(Attribute, null, "groupsTotal", value.toString());
	}

	public void addgroupsTotal(String value) throws Exception {
		addgroupsTotal(new SchemaString(value));
	}

	public void insertgroupsTotalAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "groupsTotal", index, value.toString());
	}

	public void insertgroupsTotalAt(String value, int index) throws Exception {
		insertgroupsTotalAt(new SchemaString(value), index);
	}

	public void replacegroupsTotalAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "groupsTotal", index, value.toString());
	}

	public void replacegroupsTotalAt(String value, int index) throws Exception {
		replacegroupsTotalAt(new SchemaString(value), index);
	}

	public int getgroupsQueuedMinCount() {
		return 1;
	}

	public int getgroupsQueuedMaxCount() {
		return 1;
	}

	public int getgroupsQueuedCount() {
		return getDomChildCount(Attribute, null, "groupsQueued");
	}

	public boolean hasgroupsQueued() {
		return hasDomChild(Attribute, null, "groupsQueued");
	}

	public SchemaString getgroupsQueuedAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "groupsQueued", index)));
	}

	public SchemaString getgroupsQueued() throws Exception {
		return getgroupsQueuedAt(0);
	}

	public void removegroupsQueuedAt(int index) {
		removeDomChildAt(Attribute, null, "groupsQueued", index);
	}

	public void removegroupsQueued() {
		while (hasgroupsQueued())
			removegroupsQueuedAt(0);
	}

	public void addgroupsQueued(SchemaString value) {
		setDomChild(Attribute, null, "groupsQueued", value.toString());
	}

	public void addgroupsQueued(String value) throws Exception {
		addgroupsQueued(new SchemaString(value));
	}

	public void insertgroupsQueuedAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "groupsQueued", index, value.toString());
	}

	public void insertgroupsQueuedAt(String value, int index) throws Exception {
		insertgroupsQueuedAt(new SchemaString(value), index);
	}

	public void replacegroupsQueuedAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "groupsQueued", index, value.toString());
	}

	public void replacegroupsQueuedAt(String value, int index) throws Exception {
		replacegroupsQueuedAt(new SchemaString(value), index);
	}

	public int getgroupsSentMinCount() {
		return 1;
	}

	public int getgroupsSentMaxCount() {
		return 1;
	}

	public int getgroupsSentCount() {
		return getDomChildCount(Attribute, null, "groupsSent");
	}

	public boolean hasgroupsSent() {
		return hasDomChild(Attribute, null, "groupsSent");
	}

	public SchemaString getgroupsSentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "groupsSent", index)));
	}

	public SchemaString getgroupsSent() throws Exception {
		return getgroupsSentAt(0);
	}

	public void removegroupsSentAt(int index) {
		removeDomChildAt(Attribute, null, "groupsSent", index);
	}

	public void removegroupsSent() {
		while (hasgroupsSent())
			removegroupsSentAt(0);
	}

	public void addgroupsSent(SchemaString value) {
		setDomChild(Attribute, null, "groupsSent", value.toString());
	}

	public void addgroupsSent(String value) throws Exception {
		addgroupsSent(new SchemaString(value));
	}

	public void insertgroupsSentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "groupsSent", index, value.toString());
	}

	public void insertgroupsSentAt(String value, int index) throws Exception {
		insertgroupsSentAt(new SchemaString(value), index);
	}

	public void replacegroupsSentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "groupsSent", index, value.toString());
	}

	public void replacegroupsSentAt(String value, int index) throws Exception {
		replacegroupsSentAt(new SchemaString(value), index);
	}

	public int getgroupsFailedMinCount() {
		return 1;
	}

	public int getgroupsFailedMaxCount() {
		return 1;
	}

	public int getgroupsFailedCount() {
		return getDomChildCount(Attribute, null, "groupsFailed");
	}

	public boolean hasgroupsFailed() {
		return hasDomChild(Attribute, null, "groupsFailed");
	}

	public SchemaString getgroupsFailedAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "groupsFailed", index)));
	}

	public SchemaString getgroupsFailed() throws Exception {
		return getgroupsFailedAt(0);
	}

	public void removegroupsFailedAt(int index) {
		removeDomChildAt(Attribute, null, "groupsFailed", index);
	}

	public void removegroupsFailed() {
		while (hasgroupsFailed())
			removegroupsFailedAt(0);
	}

	public void addgroupsFailed(SchemaString value) {
		setDomChild(Attribute, null, "groupsFailed", value.toString());
	}

	public void addgroupsFailed(String value) throws Exception {
		addgroupsFailed(new SchemaString(value));
	}

	public void insertgroupsFailedAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "groupsFailed", index, value.toString());
	}

	public void insertgroupsFailedAt(String value, int index) throws Exception {
		insertgroupsFailedAt(new SchemaString(value), index);
	}

	public void replacegroupsFailedAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "groupsFailed", index, value.toString());
	}

	public void replacegroupsFailedAt(String value, int index) throws Exception {
		replacegroupsFailedAt(new SchemaString(value), index);
	}
}

/**
 * cttp_UserLoginType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.*;

public class cttp_UserLoginType extends com.altova.xml.Node {
	public cttp_UserLoginType() {
		super();
	}

	public cttp_UserLoginType(cttp_UserLoginType node) {
		super(node);
	}

	public cttp_UserLoginType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_UserLoginType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "userID");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "userID", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "utilityID");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "utilityID", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "userPassword");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "userPassword", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getuserIDMinCount() {
		return 1;
	}

	public int getuserIDMaxCount() {
		return 1;
	}

	public int getuserIDCount() {
		return getDomChildCount(Attribute, null, "userID");
	}

	public boolean hasuserID() {
		return hasDomChild(Attribute, null, "userID");
	}

	public SchemaString getuserIDAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "userID", index)));
	}

	public SchemaString getuserID() throws Exception {
		return getuserIDAt(0);
	}

	public void removeuserIDAt(int index) {
		removeDomChildAt(Attribute, null, "userID", index);
	}

	public void removeuserID() {
		while (hasuserID())
			removeuserIDAt(0);
	}

	public void adduserID(SchemaString value) {
		setDomChild(Attribute, null, "userID", value.toString());
	}

	public void adduserID(String value) throws Exception {
		adduserID(new SchemaString(value));
	}

	public void insertuserIDAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "userID", index, value.toString());
	}

	public void insertuserIDAt(String value, int index) throws Exception {
		insertuserIDAt(new SchemaString(value), index);
	}

	public void replaceuserIDAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "userID", index, value.toString());
	}

	public void replaceuserIDAt(String value, int index) throws Exception {
		replaceuserIDAt(new SchemaString(value), index);
	}

	public int getutilityIDMinCount() {
		return 1;
	}

	public int getutilityIDMaxCount() {
		return 1;
	}

	public int getutilityIDCount() {
		return getDomChildCount(Attribute, null, "utilityID");
	}

	public boolean hasutilityID() {
		return hasDomChild(Attribute, null, "utilityID");
	}

	public SchemaString getutilityIDAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "utilityID", index)));
	}

	public SchemaString getutilityID() throws Exception {
		return getutilityIDAt(0);
	}

	public void removeutilityIDAt(int index) {
		removeDomChildAt(Attribute, null, "utilityID", index);
	}

	public void removeutilityID() {
		while (hasutilityID())
			removeutilityIDAt(0);
	}

	public void addutilityID(SchemaString value) {
		setDomChild(Attribute, null, "utilityID", value.toString());
	}

	public void addutilityID(String value) throws Exception {
		addutilityID(new SchemaString(value));
	}

	public void insertutilityIDAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "utilityID", index, value.toString());
	}

	public void insertutilityIDAt(String value, int index) throws Exception {
		insertutilityIDAt(new SchemaString(value), index);
	}

	public void replaceutilityIDAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "utilityID", index, value.toString());
	}

	public void replaceutilityIDAt(String value, int index) throws Exception {
		replaceutilityIDAt(new SchemaString(value), index);
	}

	public int getuserPasswordMinCount() {
		return 1;
	}

	public int getuserPasswordMaxCount() {
		return 1;
	}

	public int getuserPasswordCount() {
		return getDomChildCount(Attribute, null, "userPassword");
	}

	public boolean hasuserPassword() {
		return hasDomChild(Attribute, null, "userPassword");
	}

	public SchemaString getuserPasswordAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "userPassword", index)));
	}

	public SchemaString getuserPassword() throws Exception {
		return getuserPasswordAt(0);
	}

	public void removeuserPasswordAt(int index) {
		removeDomChildAt(Attribute, null, "userPassword", index);
	}

	public void removeuserPassword() {
		while (hasuserPassword())
			removeuserPasswordAt(0);
	}

	public void adduserPassword(SchemaString value) {
		setDomChild(Attribute, null, "userPassword", value.toString());
	}

	public void adduserPassword(String value) throws Exception {
		adduserPassword(new SchemaString(value));
	}

	public void insertuserPasswordAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "userPassword", index, value.toString());
	}

	public void insertuserPasswordAt(String value, int index) throws Exception {
		insertuserPasswordAt(new SchemaString(value), index);
	}

	public void replaceuserPasswordAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "userPassword", index, value.toString());
	}

	public void replaceuserPasswordAt(String value, int index) throws Exception {
		replaceuserPasswordAt(new SchemaString(value), index);
	}
}

/**
 * cttp_GroupStatusRequestType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.SchemaString;

public class cttp_GroupStatusRequestType extends com.altova.xml.Node {
	public cttp_GroupStatusRequestType() {
		super();
	}

	public cttp_GroupStatusRequestType(cttp_GroupStatusRequestType node) {
		super(node);
	}

	public cttp_GroupStatusRequestType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_GroupStatusRequestType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "cttp-TargetGroup");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-TargetGroup", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_TargetGroupType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-AllGroups");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-AllGroups", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getcttp_TargetGroupMinCount() {
		return 1;
	}

	public int getcttp_TargetGroupMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getcttp_TargetGroupCount() {
		return getDomChildCount(Element, null, "cttp-TargetGroup");
	}

	public boolean hascttp_TargetGroup() {
		return hasDomChild(Element, null, "cttp-TargetGroup");
	}

	public cttp_TargetGroupType getcttp_TargetGroupAt(int index) throws Exception {
		return new cttp_TargetGroupType(getDomChildAt(Element, null, "cttp-TargetGroup", index));
	}

	public cttp_TargetGroupType getcttp_TargetGroup() throws Exception {
		return getcttp_TargetGroupAt(0);
	}

	public void removecttp_TargetGroupAt(int index) {
		removeDomChildAt(Element, null, "cttp-TargetGroup", index);
	}

	public void removecttp_TargetGroup() {
		while (hascttp_TargetGroup())
			removecttp_TargetGroupAt(0);
	}

	public void addcttp_TargetGroup(cttp_TargetGroupType value) {
		appendDomElement(null, "cttp-TargetGroup", value);
	}

	public void insertcttp_TargetGroupAt(cttp_TargetGroupType value, int index) {
		insertDomElementAt(null, "cttp-TargetGroup", index, value);
	}

	public void replacecttp_TargetGroupAt(cttp_TargetGroupType value, int index) {
		replaceDomElementAt(null, "cttp-TargetGroup", index, value);
	}

	public int getcttp_AllGroupsMinCount() {
		return 1;
	}

	public int getcttp_AllGroupsMaxCount() {
		return 1;
	}

	public int getcttp_AllGroupsCount() {
		return getDomChildCount(Element, null, "cttp-AllGroups");
	}

	public boolean hascttp_AllGroups() {
		return hasDomChild(Element, null, "cttp-AllGroups");
	}

	public SchemaString getcttp_AllGroupsAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Element, null, "cttp-AllGroups", index)));
	}

	public SchemaString getcttp_AllGroups() throws Exception {
		return getcttp_AllGroupsAt(0);
	}

	public void removecttp_AllGroupsAt(int index) {
		removeDomChildAt(Element, null, "cttp-AllGroups", index);
	}

	public void removecttp_AllGroups() {
		while (hascttp_AllGroups())
			removecttp_AllGroupsAt(0);
	}

	public void addcttp_AllGroups(SchemaString value) {
		setDomChild(Element, null, "cttp-AllGroups", value.toString());
	}

	public void addcttp_AllGroups(String value) throws Exception {
		addcttp_AllGroups(new SchemaString(value));
	}

	public void insertcttp_AllGroupsAt(SchemaString value, int index) {
		insertDomChildAt(Element, null, "cttp-AllGroups", index, value.toString());
	}

	public void insertcttp_AllGroupsAt(String value, int index) throws Exception {
		insertcttp_AllGroupsAt(new SchemaString(value), index);
	}

	public void replacecttp_AllGroupsAt(SchemaString value, int index) {
		replaceDomChildAt(Element, null, "cttp-AllGroups", index, value.toString());
	}

	public void replacecttp_AllGroupsAt(String value, int index) throws Exception {
		replacecttp_AllGroupsAt(new SchemaString(value), index);
	}
}

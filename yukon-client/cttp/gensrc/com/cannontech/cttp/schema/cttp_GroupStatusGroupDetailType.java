/**
 * cttp_GroupStatusGroupDetailType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.SchemaString;

public class cttp_GroupStatusGroupDetailType extends com.altova.xml.Node {
	public cttp_GroupStatusGroupDetailType() {
		super();
	}

	public cttp_GroupStatusGroupDetailType(cttp_GroupStatusGroupDetailType node) {
		super(node);
	}

	public cttp_GroupStatusGroupDetailType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_GroupStatusGroupDetailType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "groupID");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "groupID", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "groupName");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "groupName", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "statsInGroup");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "statsInGroup", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "commandInEffect");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "commandInEffect", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "commandTrackingCode");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "commandTrackingCode", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "commandExpireTime");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "commandExpireTime", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getgroupIDMinCount() {
		return 1;
	}

	public int getgroupIDMaxCount() {
		return 1;
	}

	public int getgroupIDCount() {
		return getDomChildCount(Attribute, null, "groupID");
	}

	public boolean hasgroupID() {
		return hasDomChild(Attribute, null, "groupID");
	}

	public SchemaString getgroupIDAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "groupID", index)));
	}

	public SchemaString getgroupID() throws Exception {
		return getgroupIDAt(0);
	}

	public void removegroupIDAt(int index) {
		removeDomChildAt(Attribute, null, "groupID", index);
	}

	public void removegroupID() {
		while (hasgroupID())
			removegroupIDAt(0);
	}

	public void addgroupID(SchemaString value) {
		setDomChild(Attribute, null, "groupID", value.toString());
	}

	public void addgroupID(String value) throws Exception {
		addgroupID(new SchemaString(value));
	}

	public void insertgroupIDAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "groupID", index, value.toString());
	}

	public void insertgroupIDAt(String value, int index) throws Exception {
		insertgroupIDAt(new SchemaString(value), index);
	}

	public void replacegroupIDAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "groupID", index, value.toString());
	}

	public void replacegroupIDAt(String value, int index) throws Exception {
		replacegroupIDAt(new SchemaString(value), index);
	}

	public int getgroupNameMinCount() {
		return 1;
	}

	public int getgroupNameMaxCount() {
		return 1;
	}

	public int getgroupNameCount() {
		return getDomChildCount(Attribute, null, "groupName");
	}

	public boolean hasgroupName() {
		return hasDomChild(Attribute, null, "groupName");
	}

	public SchemaString getgroupNameAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "groupName", index)));
	}

	public SchemaString getgroupName() throws Exception {
		return getgroupNameAt(0);
	}

	public void removegroupNameAt(int index) {
		removeDomChildAt(Attribute, null, "groupName", index);
	}

	public void removegroupName() {
		while (hasgroupName())
			removegroupNameAt(0);
	}

	public void addgroupName(SchemaString value) {
		setDomChild(Attribute, null, "groupName", value.toString());
	}

	public void addgroupName(String value) throws Exception {
		addgroupName(new SchemaString(value));
	}

	public void insertgroupNameAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "groupName", index, value.toString());
	}

	public void insertgroupNameAt(String value, int index) throws Exception {
		insertgroupNameAt(new SchemaString(value), index);
	}

	public void replacegroupNameAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "groupName", index, value.toString());
	}

	public void replacegroupNameAt(String value, int index) throws Exception {
		replacegroupNameAt(new SchemaString(value), index);
	}

	public int getstatsInGroupMinCount() {
		return 1;
	}

	public int getstatsInGroupMaxCount() {
		return 1;
	}

	public int getstatsInGroupCount() {
		return getDomChildCount(Attribute, null, "statsInGroup");
	}

	public boolean hasstatsInGroup() {
		return hasDomChild(Attribute, null, "statsInGroup");
	}

	public SchemaString getstatsInGroupAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "statsInGroup", index)));
	}

	public SchemaString getstatsInGroup() throws Exception {
		return getstatsInGroupAt(0);
	}

	public void removestatsInGroupAt(int index) {
		removeDomChildAt(Attribute, null, "statsInGroup", index);
	}

	public void removestatsInGroup() {
		while (hasstatsInGroup())
			removestatsInGroupAt(0);
	}

	public void addstatsInGroup(SchemaString value) {
		setDomChild(Attribute, null, "statsInGroup", value.toString());
	}

	public void addstatsInGroup(String value) throws Exception {
		addstatsInGroup(new SchemaString(value));
	}

	public void insertstatsInGroupAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "statsInGroup", index, value.toString());
	}

	public void insertstatsInGroupAt(String value, int index) throws Exception {
		insertstatsInGroupAt(new SchemaString(value), index);
	}

	public void replacestatsInGroupAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "statsInGroup", index, value.toString());
	}

	public void replacestatsInGroupAt(String value, int index) throws Exception {
		replacestatsInGroupAt(new SchemaString(value), index);
	}

	public int getcommandInEffectMinCount() {
		return 1;
	}

	public int getcommandInEffectMaxCount() {
		return 1;
	}

	public int getcommandInEffectCount() {
		return getDomChildCount(Attribute, null, "commandInEffect");
	}

	public boolean hascommandInEffect() {
		return hasDomChild(Attribute, null, "commandInEffect");
	}

	public SchemaString getcommandInEffectAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "commandInEffect", index)));
	}

	public SchemaString getcommandInEffect() throws Exception {
		return getcommandInEffectAt(0);
	}

	public void removecommandInEffectAt(int index) {
		removeDomChildAt(Attribute, null, "commandInEffect", index);
	}

	public void removecommandInEffect() {
		while (hascommandInEffect())
			removecommandInEffectAt(0);
	}

	public void addcommandInEffect(SchemaString value) {
		setDomChild(Attribute, null, "commandInEffect", value.toString());
	}

	public void addcommandInEffect(String value) throws Exception {
		addcommandInEffect(new SchemaString(value));
	}

	public void insertcommandInEffectAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "commandInEffect", index, value.toString());
	}

	public void insertcommandInEffectAt(String value, int index) throws Exception {
		insertcommandInEffectAt(new SchemaString(value), index);
	}

	public void replacecommandInEffectAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "commandInEffect", index, value.toString());
	}

	public void replacecommandInEffectAt(String value, int index) throws Exception {
		replacecommandInEffectAt(new SchemaString(value), index);
	}

	public int getcommandTrackingCodeMinCount() {
		return 0;
	}

	public int getcommandTrackingCodeMaxCount() {
		return 1;
	}

	public int getcommandTrackingCodeCount() {
		return getDomChildCount(Attribute, null, "commandTrackingCode");
	}

	public boolean hascommandTrackingCode() {
		return hasDomChild(Attribute, null, "commandTrackingCode");
	}

	public SchemaString getcommandTrackingCodeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "commandTrackingCode", index)));
	}

	public SchemaString getcommandTrackingCode() throws Exception {
		return getcommandTrackingCodeAt(0);
	}

	public void removecommandTrackingCodeAt(int index) {
		removeDomChildAt(Attribute, null, "commandTrackingCode", index);
	}

	public void removecommandTrackingCode() {
		while (hascommandTrackingCode())
			removecommandTrackingCodeAt(0);
	}

	public void addcommandTrackingCode(SchemaString value) {
		setDomChild(Attribute, null, "commandTrackingCode", value.toString());
	}

	public void addcommandTrackingCode(String value) throws Exception {
		addcommandTrackingCode(new SchemaString(value));
	}

	public void insertcommandTrackingCodeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "commandTrackingCode", index, value.toString());
	}

	public void insertcommandTrackingCodeAt(String value, int index) throws Exception {
		insertcommandTrackingCodeAt(new SchemaString(value), index);
	}

	public void replacecommandTrackingCodeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "commandTrackingCode", index, value.toString());
	}

	public void replacecommandTrackingCodeAt(String value, int index) throws Exception {
		replacecommandTrackingCodeAt(new SchemaString(value), index);
	}

	public int getcommandExpireTimeMinCount() {
		return 0;
	}

	public int getcommandExpireTimeMaxCount() {
		return 1;
	}

	public int getcommandExpireTimeCount() {
		return getDomChildCount(Attribute, null, "commandExpireTime");
	}

	public boolean hascommandExpireTime() {
		return hasDomChild(Attribute, null, "commandExpireTime");
	}

	public SchemaString getcommandExpireTimeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "commandExpireTime", index)));
	}

	public SchemaString getcommandExpireTime() throws Exception {
		return getcommandExpireTimeAt(0);
	}

	public void removecommandExpireTimeAt(int index) {
		removeDomChildAt(Attribute, null, "commandExpireTime", index);
	}

	public void removecommandExpireTime() {
		while (hascommandExpireTime())
			removecommandExpireTimeAt(0);
	}

	public void addcommandExpireTime(SchemaString value) {
		setDomChild(Attribute, null, "commandExpireTime", value.toString());
	}

	public void addcommandExpireTime(String value) throws Exception {
		addcommandExpireTime(new SchemaString(value));
	}

	public void insertcommandExpireTimeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "commandExpireTime", index, value.toString());
	}

	public void insertcommandExpireTimeAt(String value, int index) throws Exception {
		insertcommandExpireTimeAt(new SchemaString(value), index);
	}

	public void replacecommandExpireTimeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "commandExpireTime", index, value.toString());
	}

	public void replacecommandExpireTimeAt(String value, int index) throws Exception {
		replacecommandExpireTimeAt(new SchemaString(value), index);
	}
}

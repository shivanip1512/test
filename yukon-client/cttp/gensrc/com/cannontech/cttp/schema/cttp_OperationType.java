/**
 * cttp_OperationType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.cannontech.cttp.schema;

import com.altova.xml.types.*;

public class cttp_OperationType extends com.altova.xml.Node {
	public cttp_OperationType() {
		super();
	}

	public cttp_OperationType(cttp_OperationType node) {
		super(node);
	}

	public cttp_OperationType(org.w3c.dom.Node node) {
		super(node);
	}

	public cttp_OperationType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "cttp-UserLogin");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-UserLogin", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_UserLoginType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-CommandStatusRequest");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-CommandStatusRequest", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_CommandStatusRequestType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-GroupStatusRequest");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-GroupStatusRequest", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_GroupStatusRequestType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-ServerStatusRequest");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-ServerStatusRequest", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Element, null, "cttp-SubmitCommandRequest");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-SubmitCommandRequest", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_SubmitCommandRequestType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-CommandStatusResponse");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-CommandStatusResponse", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_CommandStatusResponseType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-GroupStatusResponse");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-GroupStatusResponse", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_GroupStatusResponseType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-ServerStatusResponse");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-ServerStatusResponse", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_ServerStatusResponseType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-SubmitCommandResponse");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-SubmitCommandResponse", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_SubmitCommandResponseType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "cttp-Failure");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "cttp-Failure", i);
			internalAdjustPrefix(tmpNode, false);
			new cttp_FailureType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Attribute, null, "cttpVersion");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "cttpVersion", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getcttp_UserLoginMinCount() {
		return 1;
	}

	public int getcttp_UserLoginMaxCount() {
		return 1;
	}

	public int getcttp_UserLoginCount() {
		return getDomChildCount(Element, null, "cttp-UserLogin");
	}

	public boolean hascttp_UserLogin() {
		return hasDomChild(Element, null, "cttp-UserLogin");
	}

	public cttp_UserLoginType getcttp_UserLoginAt(int index) throws Exception {
		return new cttp_UserLoginType(getDomChildAt(Element, null, "cttp-UserLogin", index));
	}

	public cttp_UserLoginType getcttp_UserLogin() throws Exception {
		return getcttp_UserLoginAt(0);
	}

	public void removecttp_UserLoginAt(int index) {
		removeDomChildAt(Element, null, "cttp-UserLogin", index);
	}

	public void removecttp_UserLogin() {
		while (hascttp_UserLogin())
			removecttp_UserLoginAt(0);
	}

	public void addcttp_UserLogin(cttp_UserLoginType value) {
		appendDomElement(null, "cttp-UserLogin", value);
	}

	public void insertcttp_UserLoginAt(cttp_UserLoginType value, int index) {
		insertDomElementAt(null, "cttp-UserLogin", index, value);
	}

	public void replacecttp_UserLoginAt(cttp_UserLoginType value, int index) {
		replaceDomElementAt(null, "cttp-UserLogin", index, value);
	}

	public int getcttp_CommandStatusRequestMinCount() {
		return 1;
	}

	public int getcttp_CommandStatusRequestMaxCount() {
		return 1;
	}

	public int getcttp_CommandStatusRequestCount() {
		return getDomChildCount(Element, null, "cttp-CommandStatusRequest");
	}

	public boolean hascttp_CommandStatusRequest() {
		return hasDomChild(Element, null, "cttp-CommandStatusRequest");
	}

	public cttp_CommandStatusRequestType getcttp_CommandStatusRequestAt(int index) throws Exception {
		return new cttp_CommandStatusRequestType(getDomChildAt(Element, null, "cttp-CommandStatusRequest", index));
	}

	public cttp_CommandStatusRequestType getcttp_CommandStatusRequest() throws Exception {
		return getcttp_CommandStatusRequestAt(0);
	}

	public void removecttp_CommandStatusRequestAt(int index) {
		removeDomChildAt(Element, null, "cttp-CommandStatusRequest", index);
	}

	public void removecttp_CommandStatusRequest() {
		while (hascttp_CommandStatusRequest())
			removecttp_CommandStatusRequestAt(0);
	}

	public void addcttp_CommandStatusRequest(cttp_CommandStatusRequestType value) {
		appendDomElement(null, "cttp-CommandStatusRequest", value);
	}

	public void insertcttp_CommandStatusRequestAt(cttp_CommandStatusRequestType value, int index) {
		insertDomElementAt(null, "cttp-CommandStatusRequest", index, value);
	}

	public void replacecttp_CommandStatusRequestAt(cttp_CommandStatusRequestType value, int index) {
		replaceDomElementAt(null, "cttp-CommandStatusRequest", index, value);
	}

	public int getcttp_GroupStatusRequestMinCount() {
		return 1;
	}

	public int getcttp_GroupStatusRequestMaxCount() {
		return 1;
	}

	public int getcttp_GroupStatusRequestCount() {
		return getDomChildCount(Element, null, "cttp-GroupStatusRequest");
	}

	public boolean hascttp_GroupStatusRequest() {
		return hasDomChild(Element, null, "cttp-GroupStatusRequest");
	}

	public cttp_GroupStatusRequestType getcttp_GroupStatusRequestAt(int index) throws Exception {
		return new cttp_GroupStatusRequestType(getDomChildAt(Element, null, "cttp-GroupStatusRequest", index));
	}

	public cttp_GroupStatusRequestType getcttp_GroupStatusRequest() throws Exception {
		return getcttp_GroupStatusRequestAt(0);
	}

	public void removecttp_GroupStatusRequestAt(int index) {
		removeDomChildAt(Element, null, "cttp-GroupStatusRequest", index);
	}

	public void removecttp_GroupStatusRequest() {
		while (hascttp_GroupStatusRequest())
			removecttp_GroupStatusRequestAt(0);
	}

	public void addcttp_GroupStatusRequest(cttp_GroupStatusRequestType value) {
		appendDomElement(null, "cttp-GroupStatusRequest", value);
	}

	public void insertcttp_GroupStatusRequestAt(cttp_GroupStatusRequestType value, int index) {
		insertDomElementAt(null, "cttp-GroupStatusRequest", index, value);
	}

	public void replacecttp_GroupStatusRequestAt(cttp_GroupStatusRequestType value, int index) {
		replaceDomElementAt(null, "cttp-GroupStatusRequest", index, value);
	}

	public int getcttp_ServerStatusRequestMinCount() {
		return 1;
	}

	public int getcttp_ServerStatusRequestMaxCount() {
		return 1;
	}

	public int getcttp_ServerStatusRequestCount() {
		return getDomChildCount(Element, null, "cttp-ServerStatusRequest");
	}

	public boolean hascttp_ServerStatusRequest() {
		return hasDomChild(Element, null, "cttp-ServerStatusRequest");
	}

	public SchemaString getcttp_ServerStatusRequestAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Element, null, "cttp-ServerStatusRequest", index)));
	}

	public SchemaString getcttp_ServerStatusRequest() throws Exception {
		return getcttp_ServerStatusRequestAt(0);
	}

	public void removecttp_ServerStatusRequestAt(int index) {
		removeDomChildAt(Element, null, "cttp-ServerStatusRequest", index);
	}

	public void removecttp_ServerStatusRequest() {
		while (hascttp_ServerStatusRequest())
			removecttp_ServerStatusRequestAt(0);
	}

	public void addcttp_ServerStatusRequest(SchemaString value) {
		setDomChild(Element, null, "cttp-ServerStatusRequest", value.toString());
	}

	public void addcttp_ServerStatusRequest(String value) throws Exception {
		addcttp_ServerStatusRequest(new SchemaString(value));
	}

	public void insertcttp_ServerStatusRequestAt(SchemaString value, int index) {
		insertDomChildAt(Element, null, "cttp-ServerStatusRequest", index, value.toString());
	}

	public void insertcttp_ServerStatusRequestAt(String value, int index) throws Exception {
		insertcttp_ServerStatusRequestAt(new SchemaString(value), index);
	}

	public void replacecttp_ServerStatusRequestAt(SchemaString value, int index) {
		replaceDomChildAt(Element, null, "cttp-ServerStatusRequest", index, value.toString());
	}

	public void replacecttp_ServerStatusRequestAt(String value, int index) throws Exception {
		replacecttp_ServerStatusRequestAt(new SchemaString(value), index);
	}

	public int getcttp_SubmitCommandRequestMinCount() {
		return 1;
	}

	public int getcttp_SubmitCommandRequestMaxCount() {
		return 1;
	}

	public int getcttp_SubmitCommandRequestCount() {
		return getDomChildCount(Element, null, "cttp-SubmitCommandRequest");
	}

	public boolean hascttp_SubmitCommandRequest() {
		return hasDomChild(Element, null, "cttp-SubmitCommandRequest");
	}

	public cttp_SubmitCommandRequestType getcttp_SubmitCommandRequestAt(int index) throws Exception {
		return new cttp_SubmitCommandRequestType(getDomChildAt(Element, null, "cttp-SubmitCommandRequest", index));
	}

	public cttp_SubmitCommandRequestType getcttp_SubmitCommandRequest() throws Exception {
		return getcttp_SubmitCommandRequestAt(0);
	}

	public void removecttp_SubmitCommandRequestAt(int index) {
		removeDomChildAt(Element, null, "cttp-SubmitCommandRequest", index);
	}

	public void removecttp_SubmitCommandRequest() {
		while (hascttp_SubmitCommandRequest())
			removecttp_SubmitCommandRequestAt(0);
	}

	public void addcttp_SubmitCommandRequest(cttp_SubmitCommandRequestType value) {
		appendDomElement(null, "cttp-SubmitCommandRequest", value);
	}

	public void insertcttp_SubmitCommandRequestAt(cttp_SubmitCommandRequestType value, int index) {
		insertDomElementAt(null, "cttp-SubmitCommandRequest", index, value);
	}

	public void replacecttp_SubmitCommandRequestAt(cttp_SubmitCommandRequestType value, int index) {
		replaceDomElementAt(null, "cttp-SubmitCommandRequest", index, value);
	}

	public int getcttp_CommandStatusResponseMinCount() {
		return 1;
	}

	public int getcttp_CommandStatusResponseMaxCount() {
		return 1;
	}

	public int getcttp_CommandStatusResponseCount() {
		return getDomChildCount(Element, null, "cttp-CommandStatusResponse");
	}

	public boolean hascttp_CommandStatusResponse() {
		return hasDomChild(Element, null, "cttp-CommandStatusResponse");
	}

	public cttp_CommandStatusResponseType getcttp_CommandStatusResponseAt(int index) throws Exception {
		return new cttp_CommandStatusResponseType(getDomChildAt(Element, null, "cttp-CommandStatusResponse", index));
	}

	public cttp_CommandStatusResponseType getcttp_CommandStatusResponse() throws Exception {
		return getcttp_CommandStatusResponseAt(0);
	}

	public void removecttp_CommandStatusResponseAt(int index) {
		removeDomChildAt(Element, null, "cttp-CommandStatusResponse", index);
	}

	public void removecttp_CommandStatusResponse() {
		while (hascttp_CommandStatusResponse())
			removecttp_CommandStatusResponseAt(0);
	}

	public void addcttp_CommandStatusResponse(cttp_CommandStatusResponseType value) {
		appendDomElement(null, "cttp-CommandStatusResponse", value);
	}

	public void insertcttp_CommandStatusResponseAt(cttp_CommandStatusResponseType value, int index) {
		insertDomElementAt(null, "cttp-CommandStatusResponse", index, value);
	}

	public void replacecttp_CommandStatusResponseAt(cttp_CommandStatusResponseType value, int index) {
		replaceDomElementAt(null, "cttp-CommandStatusResponse", index, value);
	}

	public int getcttp_GroupStatusResponseMinCount() {
		return 1;
	}

	public int getcttp_GroupStatusResponseMaxCount() {
		return 1;
	}

	public int getcttp_GroupStatusResponseCount() {
		return getDomChildCount(Element, null, "cttp-GroupStatusResponse");
	}

	public boolean hascttp_GroupStatusResponse() {
		return hasDomChild(Element, null, "cttp-GroupStatusResponse");
	}

	public cttp_GroupStatusResponseType getcttp_GroupStatusResponseAt(int index) throws Exception {
		return new cttp_GroupStatusResponseType(getDomChildAt(Element, null, "cttp-GroupStatusResponse", index));
	}

	public cttp_GroupStatusResponseType getcttp_GroupStatusResponse() throws Exception {
		return getcttp_GroupStatusResponseAt(0);
	}

	public void removecttp_GroupStatusResponseAt(int index) {
		removeDomChildAt(Element, null, "cttp-GroupStatusResponse", index);
	}

	public void removecttp_GroupStatusResponse() {
		while (hascttp_GroupStatusResponse())
			removecttp_GroupStatusResponseAt(0);
	}

	public void addcttp_GroupStatusResponse(cttp_GroupStatusResponseType value) {
		appendDomElement(null, "cttp-GroupStatusResponse", value);
	}

	public void insertcttp_GroupStatusResponseAt(cttp_GroupStatusResponseType value, int index) {
		insertDomElementAt(null, "cttp-GroupStatusResponse", index, value);
	}

	public void replacecttp_GroupStatusResponseAt(cttp_GroupStatusResponseType value, int index) {
		replaceDomElementAt(null, "cttp-GroupStatusResponse", index, value);
	}

	public int getcttp_ServerStatusResponseMinCount() {
		return 1;
	}

	public int getcttp_ServerStatusResponseMaxCount() {
		return 1;
	}

	public int getcttp_ServerStatusResponseCount() {
		return getDomChildCount(Element, null, "cttp-ServerStatusResponse");
	}

	public boolean hascttp_ServerStatusResponse() {
		return hasDomChild(Element, null, "cttp-ServerStatusResponse");
	}

	public cttp_ServerStatusResponseType getcttp_ServerStatusResponseAt(int index) throws Exception {
		return new cttp_ServerStatusResponseType(getDomChildAt(Element, null, "cttp-ServerStatusResponse", index));
	}

	public cttp_ServerStatusResponseType getcttp_ServerStatusResponse() throws Exception {
		return getcttp_ServerStatusResponseAt(0);
	}

	public void removecttp_ServerStatusResponseAt(int index) {
		removeDomChildAt(Element, null, "cttp-ServerStatusResponse", index);
	}

	public void removecttp_ServerStatusResponse() {
		while (hascttp_ServerStatusResponse())
			removecttp_ServerStatusResponseAt(0);
	}

	public void addcttp_ServerStatusResponse(cttp_ServerStatusResponseType value) {
		appendDomElement(null, "cttp-ServerStatusResponse", value);
	}

	public void insertcttp_ServerStatusResponseAt(cttp_ServerStatusResponseType value, int index) {
		insertDomElementAt(null, "cttp-ServerStatusResponse", index, value);
	}

	public void replacecttp_ServerStatusResponseAt(cttp_ServerStatusResponseType value, int index) {
		replaceDomElementAt(null, "cttp-ServerStatusResponse", index, value);
	}

	public int getcttp_SubmitCommandResponseMinCount() {
		return 1;
	}

	public int getcttp_SubmitCommandResponseMaxCount() {
		return 1;
	}

	public int getcttp_SubmitCommandResponseCount() {
		return getDomChildCount(Element, null, "cttp-SubmitCommandResponse");
	}

	public boolean hascttp_SubmitCommandResponse() {
		return hasDomChild(Element, null, "cttp-SubmitCommandResponse");
	}

	public cttp_SubmitCommandResponseType getcttp_SubmitCommandResponseAt(int index) throws Exception {
		return new cttp_SubmitCommandResponseType(getDomChildAt(Element, null, "cttp-SubmitCommandResponse", index));
	}

	public cttp_SubmitCommandResponseType getcttp_SubmitCommandResponse() throws Exception {
		return getcttp_SubmitCommandResponseAt(0);
	}

	public void removecttp_SubmitCommandResponseAt(int index) {
		removeDomChildAt(Element, null, "cttp-SubmitCommandResponse", index);
	}

	public void removecttp_SubmitCommandResponse() {
		while (hascttp_SubmitCommandResponse())
			removecttp_SubmitCommandResponseAt(0);
	}

	public void addcttp_SubmitCommandResponse(cttp_SubmitCommandResponseType value) {
		appendDomElement(null, "cttp-SubmitCommandResponse", value);
	}

	public void insertcttp_SubmitCommandResponseAt(cttp_SubmitCommandResponseType value, int index) {
		insertDomElementAt(null, "cttp-SubmitCommandResponse", index, value);
	}

	public void replacecttp_SubmitCommandResponseAt(cttp_SubmitCommandResponseType value, int index) {
		replaceDomElementAt(null, "cttp-SubmitCommandResponse", index, value);
	}

	public int getcttp_FailureMinCount() {
		return 1;
	}

	public int getcttp_FailureMaxCount() {
		return 1;
	}

	public int getcttp_FailureCount() {
		return getDomChildCount(Element, null, "cttp-Failure");
	}

	public boolean hascttp_Failure() {
		return hasDomChild(Element, null, "cttp-Failure");
	}

	public cttp_FailureType getcttp_FailureAt(int index) throws Exception {
		return new cttp_FailureType(getDomChildAt(Element, null, "cttp-Failure", index));
	}

	public cttp_FailureType getcttp_Failure() throws Exception {
		return getcttp_FailureAt(0);
	}

	public void removecttp_FailureAt(int index) {
		removeDomChildAt(Element, null, "cttp-Failure", index);
	}

	public void removecttp_Failure() {
		while (hascttp_Failure())
			removecttp_FailureAt(0);
	}

	public void addcttp_Failure(cttp_FailureType value) {
		appendDomElement(null, "cttp-Failure", value);
	}

	public void insertcttp_FailureAt(cttp_FailureType value, int index) {
		insertDomElementAt(null, "cttp-Failure", index, value);
	}

	public void replacecttp_FailureAt(cttp_FailureType value, int index) {
		replaceDomElementAt(null, "cttp-Failure", index, value);
	}

	public int getcttpVersionMinCount() {
		return 1;
	}

	public int getcttpVersionMaxCount() {
		return 1;
	}

	public int getcttpVersionCount() {
		return getDomChildCount(Attribute, null, "cttpVersion");
	}

	public boolean hascttpVersion() {
		return hasDomChild(Attribute, null, "cttpVersion");
	}

	public SchemaString getcttpVersionAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "cttpVersion", index)));
	}

	public SchemaString getcttpVersion() throws Exception {
		return getcttpVersionAt(0);
	}

	public void removecttpVersionAt(int index) {
		removeDomChildAt(Attribute, null, "cttpVersion", index);
	}

	public void removecttpVersion() {
		while (hascttpVersion())
			removecttpVersionAt(0);
	}

	public void addcttpVersion(SchemaString value) {
		setDomChild(Attribute, null, "cttpVersion", value.toString());
	}

	public void addcttpVersion(String value) throws Exception {
		addcttpVersion(new SchemaString(value));
	}

	public void insertcttpVersionAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "cttpVersion", index, value.toString());
	}

	public void insertcttpVersionAt(String value, int index) throws Exception {
		insertcttpVersionAt(new SchemaString(value), index);
	}

	public void replacecttpVersionAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "cttpVersion", index, value.toString());
	}

	public void replacecttpVersionAt(String value, int index) throws Exception {
		replacecttpVersionAt(new SchemaString(value), index);
	}
}

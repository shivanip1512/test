package com.cannontech.macs.schedule.wizard;
/**
 * This type was created in VisualAge.
 */
import com.cannontech.common.util.StringUtils;
import com.cannontech.message.macs.message.Schedule;

public class ScheduleBasePanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, java.awt.event.KeyListener, javax.swing.event.CaretListener 
{
	private java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");
	private boolean editMode = false;
	private javax.swing.JLabel ivjJLabelCategory = null;
	private javax.swing.JLabel ivjJLabelName = null;
	private javax.swing.JLabel ivjJLabelType = null;
	private javax.swing.JTextField ivjJTextFieldScheduleName = null;
	private javax.swing.JLabel ivjJLabelStartTimePolicy = null;
	private javax.swing.JLabel ivjJLabelFormat = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldDuration = null;
	private javax.swing.JLabel ivjJLabelAbsoluteStopTime = null;
	private javax.swing.JLabel ivjJLabelMinutes = null;
	private javax.swing.JPanel ivjJPanelStartPolicy = null;
	private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser ivjJCheckBoxDayChooser = null;
	private javax.swing.JPanel ivjJPanelStopInternalPanel = null;
	private javax.swing.JComboBox ivjJComboBoxType = null;
	private javax.swing.JComboBox ivjJComboBoxCategory = null;
	private javax.swing.JLabel ivjJLabel1to31 = null;
	private javax.swing.JCheckBox ivjJCheckBoxEveryYear = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldTimeEntryStart = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldTimeAbsoluteStopTime = null;
	private javax.swing.JComboBox ivjJComboBoxHoliday = null;
	private javax.swing.JLabel ivjJLabelHoliday = null;
	private javax.swing.JComboBox ivjJComboBoxStopPolicy = null;
	private javax.swing.JLabel ivjJLabelStopPolicy = null;
	private javax.swing.JPanel ivjJPanelStops = null;
	private javax.swing.JLabel ivjJLabelABSFormat = null;
	private javax.swing.JComboBox ivjJComboBoxStartPolicy = null;
	private javax.swing.JLabel ivjJLabelStartTypePolicy = null;
	private javax.swing.JPanel ivjJPanelStarts = null;
	private javax.swing.JTextField ivjJTextFieldDayOfMonth = null;
	private javax.swing.JPanel ivjJPanelDayOfMonth = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboBox = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public ScheduleBasePanel() {
	super();
	initialize();
}


/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public ScheduleBasePanel( boolean onlyEditMode )
{
	super();

	editMode = onlyEditMode;
	initialize();
}


/**
 * This method was created in VisualAge.
 * @param event java.awt.event.ActionEvent
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJCheckBoxEveryYear()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxType()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxHoliday()) 
		connEtoC6(e);
	if (e.getSource() == getJComboBoxStopPolicy()) 
		connEtoC8(e);
	if (e.getSource() == getJComboBoxStartPolicy()) 
		connEtoC9(e);
	if (e.getSource() == getJCheckBoxDayChooser()) 
		connEtoC7();
	if (e.getSource() == getDateComboBox()) 
		connEtoC11(e);
	// user code begin {2}

	if( e.getSource() == getJComboBoxCategory() )
		this.fireInputUpdate();

	// user code end
}

/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldScheduleName()) 
		connEtoC3(e);
	if (e.getSource() == getJTextFieldDayOfMonth()) 
		connEtoC10(e);
	if (e.getSource() == getJTextFieldTimeEntryStart()) 
		connEtoC1(e);
	if (e.getSource() == getJTextFieldTimeAbsoluteStopTime()) 
		connEtoC2(e);
	// user code begin {2}

	// user code end
}

/**
 * connEtoC1:  (JTextFieldStartTime.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JTextFieldDayOfMonth.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC11:  (DateComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (JTextFieldAbsoluteStopTime.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  (JTextFieldScheduleName.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JCheckBoxEveryYear.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jCheckBoxEveryYear_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxEveryYear_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (JComboBoxType.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jComboBoxType_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxType_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (JComboBoxHoliday.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JCheckBoxDayChooser.action. --> ScheduleBasePanel.fireInputUpdate()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7() {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (JComboBoxStopPolicy.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jComboBoxStopPolicy_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxStopPolicy_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (JComboBoxStartPolicy.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jComboBoxStartPolicy_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxStartPolicy_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G0C0090ADGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8DDCD4D57ABFDB3A6B6E3A7B230DB6AD5DE835FED434D15946163BD9EB1BA6156D5ACFABF7232232160A0A4A0A72726600003CABA6AA3E0609880A0A08898AA80AB5A8AA94EE8C4CA023434CB48C8A0975FF4E4BF36E1D4B1D01E1233FFCBE8F771E6FB94FB94FF94EF35E4F39A3E52D720F0F0E49122468F8097F6D0C162472A0C9B257ED3800D8022FDEA7A97ED68325CB2DB9F1704C81BF4B5EFA
	DD1AF4D5FB82388B40ED5CD22FDB8A6F1952B56D8557410B1BF46240EF7BE54B8EF9CE674CA2CCC7C75D91A71361399828883086A0FF20B4A921B10763BD60DE4C5F89C547C8D27395A4CCF3DD0E828F63610A402F8A6860EFC818350D395CFFA2E0130162G4F798D8F8B4FC4AA5D4832D29E2E798AFFA97261B5B1A9A4ADC57CC83E1CF792FF66C9B7D3C544CA1B776D05E7397E6C694F5AEC1D05ED862B55E6F51A5ABA8ACDC6335366A8F4583A1D26323293A6C71781C2D49A0D8ED3D71759FA3A1A7A6B8DD6
	13C5DAF7A5117B323A849A27A405C3BAC194FB3F0E682A835EFD0046DC0932BF1ED24EE573BB6BAF05CE48F6ABFB6415CC669CBFD976E9C52F47CF73A37157B5A6F33EC6F07B8231FC0DBB335BCD3EBA8DEDDD05DDED9DA6E33745D4F85E7C2D41E1ACABBB4601FD06AE13B2CFFE0D1827642BB0CF3BF612B42B405D8C649438D4CA7051601E88B479AA4C6B1ECFB02F0D97EE1322260745263A496B2C2BD89E232E1273DA3E767578E5546E5EC9A236D37ADBC897488E6487B489E89650F2EA6F37AF7A941E152D
	4E7D364ECE1B3552EE5FE7B1BA0E580CA68B3C1715018F470E1A5AEC8E23A4B11B7ED9DD0106BCC8613FF535E7C2ACEFA7A534414023B7CA61BDAF4446EB64ED52936BE2242BD99CD9D74BF98B3E1A686DB71F933D1540BB615B834470BFD1BCCA0133B2170EA4F3374F98287B57201E9B9723ACF5F157C8E94587E2F49A320CF920BC26F19C1341BECE160569F8E68A5171B8400301E6824D83CA982F57650FC79DFF30E85BC0BA2E85DBF3D88D16E35D2DF60343392F5BECB11A9CDC57C79BBD69DA0B98DF0B57
	FCCCAF815B14E5B4774E9ACD3D4C8D5894D3B51E6923F93C2C971676D837E9770D6FEF9B0BC5995ECA6B0A6FF8D60631823F1B627E8A1C156DDE0A93F79078E57D8E4A01061FC46BD64F6FD87825A21EE9948FD260AC1E0594A76EF960B771BA3D0E152FB515342DAD7EFADD9F109FD0A0D08850BC20A8FFAC631A24AD032CC7FAC579B25E85C9CB60E96AF1BA8C3556AE27415AE6BAE1F0188D2D96D3174443A4A4933D363A7025A4935BEB03B48E182CA60741E936D9A1F6C327890C290B05D9121CCE42B8CC54
	37415CE90284BA6D92463BB2B9931E96C31773385DE8F01A64904CFFC3B23109F386521EC384242EDCCF7475BB5AF66742FB6975282BEB5388668B6E006BD1AF57A7E74073B0983749D2D6D6E5EEA3E2989C3DE823E3BE6F0167E4881F77FB3DEE84D06E84E89F01CAA66AF5D300AAEE00A7D0450D70842A78DFF8829D8C007A8654F813DE978A54F133DE9781643CC52F0B841A9888F570D6088B28618F9096E85DED5076810D8A02BAFABB36832FB5223DD7255CA095BCD12DE96F04C65C4EECF75C6DEAFB3F0F
	66E3AA60E1C0F1F7C0DAC0D5C0C62091C0930126820581455D897EC0D5C0C62091C093012682058145CD82FF20AAA0A350882009C0D3014200626E82FF20AAA063DDB84ED8F8A49404A63AC1F9096E147293BD60BB5177CC6EA63AD6671568F6207602149551B33AC93961BB51BD51B1A9D3D28624DC143C244C041CB73272A465228CC36C42D37A24BC3DE95F10089DA95D4426A2957291BB5264535013E6389B18BDFAA353ACD5DE9AEF5266E7E57D93DA564B95F83AAA5CB645BB69E3377377940DB8D78DC2BE
	D2D7B6AB5CC90AF752766D61329583EDD4712ED53CE7832DG5A2D8A93BBC07ABB07D04E04162A5C242D5A24F0FF6206AFF510711376F33D17B26DD239D73B89475A55448C52B70D00FA6E8FB465AEECDB67A667C9344FA103D06CE53EF0C087E1B24AADAD8B7BE48A490F691C496A2CB259CDD6A33CF471B6BEB40514AD6FFF5AED92768DAFD21C0CC776C38751A5707014F406C39C4A5E8C7DA3293F4169F418DBE1B2F04C64F44278DF660F2232F4398CF53AF8DE13B2C9DE67C09EA30024BFE2DEC7AEA6FA46
	FE244EE6BB5BEDEFA0BDA46F0F026838BB8B42977C915B43BBF712F918DE387FCC5D32FF754E46A15A1412C87C6E6B69FFFE10B45C558D1646BD25E42C954F5D244C12387D26F37BA4BACC617614AD789E25FCF610FF8C509420F9C0E9F7C31F8E5482B48AA888E88E10940CFACBAE8DD24820CEB7C515F6364216156D550FCDCC765DAE32472A644FD465815B0EEC29FF7B7AE3922B83BD296E6B7077295AF5F8E42AF69D7EE52A67BAFAE52AD69DE5FE5724921D594EDB95F57E3AD4B24EEB33D92DA65A708896
	094D2FDFEBA079B0DB4D4E13E663E913731879DB93541DE0D2F76F22E349FCF8AF8F46B1597935B8A6DB776D7552142F73E2346609E3EE589B63974C6ADFC030BCA6E3B27927113644E4B1F50222765B3A2DCE065FC847299C6F0A25584EAF0E935EFC2AA53EE8C1677585ED36CE3B4D8AA18B73B6EF7EAC4F6342C6C13B59E12A355A3B79E8BAFF63090DDB391DE5CA634D0DB40DAA73B9B399CC7F2049ECE3E9441BFFC153B8460A01339F331B21E09C85678C16EED3A17D3F3F43E0BDEDB26613550E33165305
	E75AC84E8B3B1DE68B8BD0F8E87F89722CA67636F1E8C295EF453C571AC7D2390EC37CE6E7EFED557FB711360972C85F5443F465843F838EDB377DF318BBB5C0A52AB11BAC4602B668611C0574BF67BFE3B8E768A96CBA8F499452FAD8381F78AA64215150888710230849F04F716FE499BE6F6EECB5B9FEA04D8CDA12E254C7E912D3A10BD29545432B0B2DAC7D1BBFF3177E5661CD1F571D31F16E525FB63C691730749F5F65AE7D1261CDFFBBCBFF154DDD7A5B07B77D9DAC7D960B3B74F78CEF7ABBD97A563A
	DE1AFE0D4DE1BA8D3CD663FE1B456658EF6BEC356D33759497181D264EC2720FC60A151288D2E8B86F64D254027FD004A8956D520D799E6558BA3CF26C92F254183E75A44736611523388865E8DE62D10E12E116C3340F7B32BD4A31FD186590FD695ED39E6558B14CF2ECC3B91ACE327E73102827152DDDB68B99CEBAEDF63212B824EA5BEFEBC5DB9BCC063B97F629E4C0F652008CDF7ADB398EBA37DD4F525F5FE1EABB8B5A07089C3DCDA6032340C0C7E0056C21B7B95AED0E4E7E45D0C93DBDA6FF26DF5CDF
	D72AA22DF39F6BEE524109BABDFF49B9153EC8B9D5DB1D0EDEA8FC07F398CBCC584D4D15FD9AB27C7836F3C753553C6CF84DE968351BFE48E2D3C46BED0915F0DDC99B6C2EB29E34D94CC6C36F8FA7267B71C0FB7DC1D75B2EB2746E6F30593ACC4238879FA76F630B96CEF04D8FA9EEBD64296D874C52197E11FB2B7F1DDC7F098DB7286505DAB20C820B583D15D89EBF9CD8790D2AFEC141FD51FE44E6F5F68CDF2D12478D53BABA59BC17F4BEBCE343EA2FE42840578FBF4BA2F37EE941FA5DDC2048E0DCBFDC
	13CE7CF17D10AF12C237E9E173E470EB7C93D90BC879A2CB313E107CA7F6DEE331705FB5003FE9G7FAB86707F33263FBFBC197FE7FAAD7FC9427FBECD7FE9423F22DE4BFF2E703FDF53BFC2786FBB2A659FF78F7A7FD553BFC778D79D5372AF907E8FEA7AD7887F1A86AD7F86617F1026FF0770BFF8DC4B3FCF78CF577477957E07CEE879CF947EB3B47D0305FF5DC94F656F2B699FA278539B357CC3057FEFB47DA305FFE61316FF423D686F27691FAB7C333F5472AF927E738FEB79D7897F5EBAAD7FC6617F3E
	263FC578DFB822656FF3AF5673540CB4F8F6193E69B6D95BCCE403603029977742B3B2D4FEF44DC46C312F4CA0EB3F96455E824353B335579117E6127D0433A27E65198BA532D74E62E46B1EC18692275DE16EB4B8FA49E689BF5775D02372DC179F48CF4E004D0267BCA0560E7E6DB0D9236DFF528842CFA6F1A46E42F3DF9238F300CAA733F81C1319CD31F0A1A2DCA838671330FFE6619A7F2C8C67DB066182G1F82944A43657DC5992EE1B7066BG5C87487FAFDA6966140BF441FFBED04EFDBC5D7B146166
	0AF08100CF39CF8E976A924EF78F06AB1A22579D846A182215EED32DB88F877E130166EA064BBD0461F26E879B86EA38DFAB5C93A2DC87787BG79EB069BF398434D857FC8202C87DC43B5BCC04BC31CFB5BA23067A9568D86F4F99C1E43B91226BC2FD7B15E213986CE57419FE07187BE20BE1F5415CD628D81FC6E83D8C72E4AD46E25D5F6F5595A4C74F88837772AAC657AB843EA339641937A5EAEE72D55E86A41BA73C59611151C9F61B0377BDBB6117DE075F998B635442D4A7D67E9C75FE05BEFB31A8EC2
	355BAF368FCE18CD67A55443459A65593F49291BE3125C68A10267BF6D2F329EE62DF9BD1E1D4D0B7C82752E87FF06F56B919BA530F784B6C5E0676B911BAF307982AB1A0AD86FD144BA84763E407C85F66198E2F38496A5303487913B580058C101FDA4B09F01FDFF9C31E001C9A7900B9058CF84167FB744E2CEA256A2300784B6C6E08745594619821BAE30040790BB5404D80540E6882CC7E0FFB80CD8104036083AB1CFE0C1824B1B06D87191449A85F60740FC2761394E31E5E46E2BF52E330D9AE66169EE
	B3DDC7AFAB03612A018EAC1567B90B295CA42EE953705C6661E6529FC853211D82AA82E2E748366ECA66E18F8266B39D7B2CCFCFA97B2C6069EC0FBAF4BA3673E3F711F6404B01B92FE7D3B7E630FA299A93E35D79FDE685CFB7648F57C8655FAF0E51BACBBAAAB5A7A6F2BA2BB3398F4BF547B94B9E539102E7E75F96796B00B07E8FE37E525214791B8338B4834AE486662F390C6C01F9BF814036E45261CAF87E572BA0921E757BD399662394E4344F40FC5C69B2368918414AE92648C75E6E7FAE9FE53AF21A
	0F21AF8BB079AF6EC67943C0365C90147FAFF1EA799B402FA784658F9B327CAC5D4AF2CCF7B444B9D5247B798EF53AD160177788269BD07E5F692D7444BE255E06BC2947FC446F41FC14000C16C7B09F2D2B3574B77191ECCBCE6D5B6FAA47D0676AE807C20EE0C8A3C248B1562AEEAF729F556B6A9EC5FDEE289DCAFB41523C2C9653EC017846BC0AE9DE7935B24D190F323CE7BD06E93E7CDF24D9FD88534C0778DA00589838E127F28CBC66B156EE0441F33EC8B77010CE369D9E5FC7A23E3419B08E1C09F958
	152E4E038F78CD1C09F1198E8FBD8F779F96E58571C508B46B2B15E966BF4E725071B82619DFB7D45B67676537AA4700D3C28B5C0E817B9EE76D366F636AB1604925248F8B84FC4A63B886FCB80B4CADF08CF894C6DD866BE918710833A659C4FE185BF0F7DFB6C9174EEDA4DCEB714BA1F91F85F1C6GA57C9D6ABCD0455FB10D58A5831EFB2F6E71F06E7D3DAF3CB93F5E72F7BC1F742D5E9BBE27607B40AB3ED1022F2F5E9B3EF1026FC32F7802845FF7C73D611BAA7896F845B7C770799C7306AFDC70C5B7F8
	43A77D8379AE730AAFCB70459E7706AFDF700D700A2FDC70451F7006CFAF78FE6A951FD17069CEFA4357A378C23C629BAD780EF8F5FF44DF70BD6A955FA44177C513B7FC53845FCC2F78668A3EBB8FFB4397A178CABC5EFDD2D35CAC643B4BAB3E9C41376308B7FC85026FEE2F78AA64747A6933E116FC4635E3D67F732E6CEE4D53F4DE54B70B5D2DC997F8B8458394B86BD36BA9CE5C33402F6589CC3FF417BA7D70A7DC53CC78BFD7B7632B6947D728560D0A0F0D6B566713F59BBAC7D48C854A4A647D93B697
	B41CCA60E9D57D9F5EF9F9E599616D83779820A020902088206459B0B71C0DFD6151A5DA6BA12EFD213B459079FCB56F2706281F44B2B55FCA15DBBFDBCBBF1F1DD82E2D9F1C1171B54D69471463390E59EC8CB99A1E7E33F10EFE001E3DA4E31B6059D85E777513EBF079F9E4407CC4E866673445DDFE78481E4F7DDF79D22CED4CC1D9AF5FBDB4D92F684727364D0AB92EFCCC276DDB55BAA5F352C688EB1903BAFDBB8E57A8C688B98F148FCD4E637D7854BA1D2CA9E75B85ADB9E7C158F9C24E11BBD01F5213
	A8E7521E2149392C9F1FDA4E52A7DD79188CE3D70BB5C0A143FDC3146111FEFC6AB29D7524162E9233543AA2F386FF88BB69C95455CCAB4A99A2649CD5BBB4B9FF5B0FCFADE75CD3DA75E4EF8119FB8CEA6DCC63B8894B4743DFE3BEF21F42FC9CBEB434FCB47563D36723C1B39F7EA51F8DA29F56B6F2CE4A35E1138FBC207D0C5EC972C377091E427540D329249F1B886E49C033C4BE637A0DAF86174F0CFEFC6AFC06BF25E5D746B435DD11F5183827753A1C27512E6C69E24D7AE9147321A14A794400F2F6BC
	2DD59E179FAA9E2CDDA90F90C8D886232A313D73F99A7B61CF1793AC985C531E46BE7736A5649E874EF175B633151CAFE5FE4DCB49DE1D4DE10692C74CC031B61B03DEECE058389C77F7AEA664E85F3938A9C77B4E45EDB91E6FCD5D1D636ECE863B6314C677A566C07EA20198F605409266A216D10FD82E402E94D81140320EA2D6A5302B8456A830A5479033886CEA017988AC2781B1BF010D95D80040BEBE0E58E401DDAB3019824BBD01D81840468BEC3E40D61EC4AC791F08BDAF30BC01999B91AB91588B82
	BBA83076A6441A857612406C82FB78B0E2A384F6388E31B1828B91D820400E9CC1EC0A409E9558ACB99CCDF79E38238416739541727E2557157E8B6B70334DF9249DG378F509820C9C0A1C07300921E516B721F4130EF5230E43F388EB08B5068E758FEAF992F85BE435A8D9676E4330F227EE2DC641D44CF52D356EFB565BFB3709DD89F9EC788FF0E5108132F6B384802F73448FB22B4707D51415C5F0A674FA4C53A6AB0ABE8DA531724523A5C55E56A2283F732FB447DDEF2E6CB9AF7214801D4894FC859F6
	A572B055CE5B7EEDA20F6D2730CD8D5150DDA8E011AA1C5F39DC663E1D7AE019F6BB957DB151E1172D5B51E6D237C5899F6788BFF9A6C24E8C13EC70F391145FE9F01CB675EB4BF2A8BF73F3473F7AE3F76D9D535156B2250ECAA46CBF5E5AC86256983F530DBB56C7C4B760DCADA1947B6931BBC8BFDD816EC6A0FBA85AF8DD9A6AFC94E063C219FE0378F3EAE87FF2E0723D63A25FF6D1062FFF69E95EBD47EDFC776CD64637C3427E6EF7DB93383D070B3C24513DB87D33FADD87104F3318177763C85AE31E55
	2EF7019AB8CB7B3BF2E55A25A26DEBAFE05AD31E45342F5ACE52DE771CDED78E54709C267D0B9D1E72EDF94EDD5A7B76A8535EA574783B551E6273F19B5FBBFB96A962A30783D9DEAA3350A67C1E433CBC57C97292826EB020A81117A72C1E524EFA5EDD5A7755AA73D2AC727258571E624BF79B5FE50714716D9471DD319363AB87DEBD10D191C78F3C0FD6454956E29E27E3D57F6759DACC34401F22F82082E7EBB4ED29783D24E0704B8D43FD0D5D0715F2ED9576B2AECD0C4D42D0477E749BAD41601E89B4AF
	8CF55C1D6EC9A7528B6EF47251E11772ADC61D7C2A9A634B52604D5740D8BB34E5B949DF0FF0EF236EDE895B9BD3A5894B5A32EA2B118FA459391DCF68786BD6900C6CD1B3AC00E226B8C95AAB300DF47CF58A68E49CE2B7D36CF1204D825BC447DF1FC4AB4385D22CBEC699EEB39DFF3D6B926E8F947BF934B25C965A8E124D9BD916A00ABD680295537157F198G1B85F60740EE91583693087DDBE0138436A59A316DF47C759E68A5BA963177A93682525D92035885BA7E9A89720E943CD194DB8F588141FB11
	0E036A819BAB527D08E2AFG36DB70BECB47E41500550AB4DA69786BA2E00F44381E373A853097C4FC46A348FB2F086F850A5D8A58DB51E8FF46A6B2CF3098FAED5DE08781AF50FCB4615C2B9C5C8DC0FDC03E5C66189D5DFE1E0CAB5A9D06CE682E0E59CDED520897E999FD053C9190BE8E30F5C0D5C04697313EAD4BA65F88523E6502F2DD3411FAF1284E50EA32A871CF76AD9678FE18D01D36116F6F703D64EFE49EF2A08171B987C91B6FF2B3C254BF7BB952EF335ED63189AE7C2F581E2E641513647E0BD2
	16AA78EDF67C7895BBF74376D5CF75AA77D5C3DEE46BC991AF623EEBC63516FF5CCB681F5B2C651FA37C5BDA354EFA943C04E36C0BF42D37825C4D821B3399475DF6015DDECC30A9601E7312788E0F583F8AFF09153FB4CFEEFB326675EF07D89B1CC25B497CF92C8DCE9478476C7BF18A1C354D5751718CF137005F54F9A8D39BED0373DF067E79E54482A82687F70B402C9602B941BDC2E0CD8E4C232F40960A79C6684B184789DB155F35A8FA856C7595B9DF0D2F389F77DBD4FEBE6076FBC52B2F7227E31C00
	D7547B8937D3FC56AB6A7D04A53BF0BFC17AB774FF7FC6795363097CB961B0778DC72CA79E73D49E0EF9723F204C53E8407D43E539A605EB67E91A86BE973008F02DBCA552B20BFB15492E93F8B645F395B84B5335F42CC55CA560B766D5147F7A9DA8FF14406EDA0DD85DEB18271AAC3445F12F71F16DEB32DCD3DFF3E70BA72C74BBAC2FB1F96285EE20F83882E7F24E6B447391526B50EE3D0EB205DBD126E982FB71EB44F2A204FD52F5358EF00F90D8E6AA414600BBD0E03F9236BDD3E03353B03EB0013DC1
	75D37286385FC0DD4CA6D3A4BED688D53C1BD3FF08EF3438A33E277DA324F1FD1AFABC557206DC3E4EB75C15F5967D765D28B7D819A689FC8D458394B8AB6B9BE9FBC45D60D770A66AFCF43AE8BB84B6319A4BABD4E0AFD7E33848B7716C6404A69CE7D63D85FD67DBF8662A3845E5EF0E1C16A9ABBB60B09B7799CE57519E180DBB7FCD478204FF52DBB86EDC76A535D5F047C54258B5923FAD5233814F93875EF80DD467D32379AD5150064DB1A5117CEEC624FC26C63F964F939F7F8A5374837F10C802DD7E15
	32DFA17D5D48D836AE4A7C6FF271A7ED95D9B3107DDFF271A772D63B70AFF36957080EB6F2FE1637996BB1EFD1B382A44BDDA5EE3F131A75B64BD3A9FF5A0F2E15C63C7BFABC1FE3373B19E35311827F56E9AF4E276CEF637AF2EDB5E28182BB560CD828402EE945F9C24EBBB84671BBC5E435BBCC6DA60743E4E41F0811C63DC3425FCA7BE3BD3CB783C96F926C754DD59E6AC42C0AC200AF94E8ADCFB7925E5B2219EE783D35E2E253B0B8B3F7F6F75254D95A21340FBF88E9B63C0BB63C020E21FD40BDCEE0DF
	EFA2D89038278AAC24GEDFD5E3B588EE56EA4F7D4CA6743D884288748EFBE7A65D1BFF297015C53A0677E48BD8266F7438EF59BC278156E52796E7BDDA4BF0DB0BDA27D3F74CBA3DE6A2F570152C85440F4C24F9353685A3B5D708DB9CC46F4BCBA8D6BD260FC34077B52487D1AF61B554942BCC143CC817F9091E6240504F14230B8EABE79967335EBE8B52076E1F78CE49FD87604C29576C1700A7774BA72DD3C8F97ACD84062DB7155C071699471553D67EAEFAD601E8DF1113819EDBC38957BB74BFBE2CD3E
	0CE03E601EA8301F6CA658B4921F40FE1AC130C8F0473D0FD8709E512F8A2C1C5E7F68G374F7BD846B76E4AA3F6G6EE02019C011C0E99FC0DB8ED485E47CC01CA121E1C701BB6083F617E65A876C4E8F5933A4F7F5660930393BFC38AEC8FCA48E350EE672B4C9BAA4FDEF7A38AA0D7852B4B0A64BDEA1CB22243D762B636512B2C81BD61256378113B4B0FE86B41E78B9EDB6CB0359CEE6F09233550F5749367ABF711EECABC542B9A4BF0F9065EADB3960BE406D16157B83F45DAE9F7072A83485879D0B3500
	5BA930B7EC5486419DA430372389B61524A1B036CFC27BEC013DCC47E7D59FC21B7CA15AC0AA9D475A416D8B94A8706594A7F74026FE484E6572B14BF62DF191619DECD958F958C08D9E7EFDBC4DB4546D1AA70AD5442776E365973C43D379A94B0ED09848BA9FA81B7BA5FF24577D0C179F0BAFE4352778301D41FD0F1C0FDC6D21G5C93DC6C61D4960E43CABF42727BFD9676D7F5824BDDA266389FE199B5D33B19C2529058E90A11BBF8738576DAA76A1904D54B9C2A01F9C37C8C249553502A335E142996B1
	5D475ABC699E57C731ACF39648E5C97082F0DF67D2169FFEBD10EDA01178CA973816E59D38CFC94AF14AFDBB5D0F136650F9D4A3709897E09FB9F7AB69EFDBED8E3AC143562B4AD3F14D49974285G4D850AD8406EC132386E95FDF202D44F47DC2F258DC6B71817DC60AB82DA4B5DD570CE569C1F07FE10491630D3FB4C15C7732107704DC03CFFCBC3FB9DA5302D99E82F0100B19B7938140C1123401D9BDD2FAB85B2820D0AC67FFC6ABF915CD30148FD4EB0F8464520FFE03FEFF692FEFC4FD53C8FC423F8D8
	A2CBA9FFE7E9BC58AF8D6518499BBB46FE87479F329DCFC84732DA9753DFE634DFE1F790065871FA34BBF00F6465494A6411EA34074698348729865330E824212EABBE90C6E95BFE60463A4274F213D7E7F9E5FD5EBDC43E882F79585C785FF4EE698F723B6E23C4D2BCD00133796D2AAF45BE8A7865465673F3AB9F2EA37550875C6300A68105G0583A5445573F3ACB317136FDBF8BCBB5AE03357194E19AC0AE3A5ACFFDFFEB5345FG38DF077348C9777CDE8A7EE9E4343BBB3739F12C5C4B79B321FEAD45D9
	7EFCB7107CD940EF94D0A050D420B9C091A2FFB93985ACFF64FAF02553E9E86B20B70FB1F364B2308C1305F31637313D4A3C45453374F37833A03E3FBDB23E4F2B15FC95BCDC83FFF63865EBECD6727571F03E7CB951AD5FF52D1E4AA09878C2D43CECFC581ECFCA0235130FECA6F3912B69FC1E38B4D4E586F5106F086697EFAFAA485BDA3C11171D7FF9651D2152C5DB5D5E998A6569C672675C4B5752EF01137B6189927EC56C6D0F210CEB484F0770F41FCDC61B493D65DA29EAF6E4B44E25546996ACE46975
	71A7D9D709EB0F08E7F10E5EA4673B22F7B079E6E1CB9A5C770BC768FCFD9224B7850805BF37297FBE4E2FB6E13F988E6148BECE1C2EDE1723E3F232B66F7902414C83F1DED1843CD5BA398FEC047777207FCB91F9B4F7905DEA9DBAE47E4E668C253F387FAA76084F12B583361FA2FF690779E5EF20FB870AE3F48C1F10C6EC225DE069B20932BCD6A46B3D5532C62D779A08B5FF0D51EC3058CE2FA948835597EF9577549E7BCAE9F3E9576446E07B27560F116B522E134B1E25FFAF59AE5734BF667FAF324D4C
	4B69ADF1AEFAA244B399E8BED0F2820B1365E1D3D97F725DD706FC6B92D8791643D36F42B7E6B79D1398FAD4E312A0BA8F6F00304E84342171992EEB94F7527108BF7887A6E09F79581E016C854771046682DFC402ECAFF109753AAB79F80925F9ACDBFB4CF4164E7553A0FCEEA24AF7ED9D991732D5BB3AD7C74E672A766B0EB813C5189A1B235360E478BF686F87397BD29C8B13D516A2F8792749C43CABDA28DD2A3EDC467CFC25E449E58F11FF073926A5CB492358DE64E5FACA1D1FDE3B1C9F3637777AAE75
	5E9FB957F690F4427C979E5772EF967EB775E9795BE57F83DA7EA3405F3D6D561448F56B498B7D476391627C7C18C4E64FC1701C1A28344B1FDB7B5B333F957966A6B2FB0E04E74222FAFA060F0F316D5A761CE727E3E788DB30886DA5B946FD9B3ABE064EADA02CF1915AF6D463C0361D2430EDDF601B38C8366DE0F83F884F73E2BEA025E95BF68E9D7BCF0570B3052C6F54E43A5A8A5E8B677A4A48CAD3588AFAB23F7D2712A4659EF497371D1ED4F55992BDC6AD52AEDB777D22159C55715016DDC11ACB1E37
	1FE66138BAAD29DE474AF50638A330AE0937D370548311B5E1267BEDCB3C1927F6GEFDFD23DD85F740577CF6039C0685EF78B2DFB9ADF0DE37E1FFE15A474D96C34EDAB66BA3BB7CB2DB3A26338A4CF75A1E417E77D3CDEA66BB223DC2EBB89299E46835BCAF695646D580EF7360D746C92618B82D966813139CEFC9E19632877B68AD905ACAB2BF61233957BF87564671A82D3310C72126B797E92BBB35588EEBB5028E4344B3F3B742D03339B4CF7779EB95FE3BE1373DDB128FCB35BF9D65C8370CFE636938C
	4F90A0326E46EC27B6E320FA2BDC1388835E79C0595C1D1CD22FFB956C668DE1BB8B3EE5F511FC3C1C99CFB77BC1AAAE7F395ED4E1BB157B0E31EE067B3D35F625246EE754DF83C5BDCC78F6099C0F1BB07FD8A777C9C74CD688C14E1472F3A525CADB4DC9E1BA29CB4136BDB2CDED4B443FC5780F5E29656F947E86CD7FD1604F6CE8D6BA6EFB0DCB71D4BF6E5DAB17FDD835521E78F7E9EAB01ED99E63F927023858BC640DAF657777956F6B3F9C7E3D694F06B58DB60FDC385E7D996814755AE720B357EB5F55
	D8365E736FE32CDE6F7E77B17257ABFF9F034D037FD6C96CA2F9B1345FC0F5C0ADC04E45B8877E63FAB25EA63F9257FF7EDBEDBCCD4EE013DF06F3E27AE3B7384F2B7F0601FFCF6E268D645CD72B4D6934F51278459D158D243C20C2D110E113B6909DB94C27BB1CACA8476F59C06C4DE2EA27B07F9D9E3AA76C8B7972DF0CEBF4239651399738278A6C55C538EEB7D3E026EA644DCBC5EC49AAFA0E835CD5823B308AF975823351BDE6FFF08789ACA2070E9940BDCBE047170933CC827BE3ABE2C5E908A5507D93
	9FF07B2561DA4D737B8896G6E29E9D8EE376413496A8943197EDFB883D06F3059CD8EE7AFC369578639BD2C2AA26DEF9844A325C35BGD48E24876AG6A8372851A88B499E89650BC20A820348C508FD08950418C146374279BBD48418FCCD0A3F29858BDA856BEFCD0AD37B38D1B72A477FD4CF668E30A0BF6EDE4FD6BDD1BF0BD2B99E4704B40766D43CD58CF06E4E0BF3929001EF94A04F989D0C966E047D258066DA7DBDBDCEF91741D65796A22756E728C35669064610B56B326B6E7036134046BF04B3761
	18208E64981109E302BFAFA2135FC15DC9EBB0BBADA6B6BCE0F93E79EBEC0BA7E7E21E3B68D934C8F0A7E701EE00D87AE74AD0EF6500B933D0EFF714097D6FAC0CA314068D83F794D0D6B6BC29BE7435F219DD4870D0E6A55BF79664EDAD5A361171859E167982778CE6FEDF32515B714BE3F512302DB70F48693DD5BA98B919AEB61461F91102EC544F1E63089985965A0758B899BB00582CEC54F9CE9F16F97292E8C716E05816BEAC373EA528734769B936C9608E818ADB02F1CC33E239C581D6329463C833E1
	39D916E29C1F5968FDD0F0CF861A35944BAD7B8BD99F2FC4FB2AEBA5C479255BF939156AE53E279A874367DD19FDD5AF17594DC76534FA368FA6AD26075BD2D16F61CB455AC816F25C427478D6966AF1DDCE3D2EB9877538BBDB1C254AC1BD1A33695D8CF00781C565F85BEEBCF20C38D87CEF0A3B9FD94BF01F67CC6AC0EB63F54BDC57E599DF4F00FC6A3B680C6F76817954447694BE273FE35531CC3D57F012624EE56A3D06D0F1E743877C4216218DA726A3FE70E39877FE0C3A2FCFC75D87FF0C3A7F1E060D
	GF742F268EF16FB2B7B4F494FE9717943F7BBB6C80A36D57183C66DE438CF6EDB0BE9831617DFE98237435265A86726F4F15ECCE0FF5DA94E1B89EC0C40C217E3D9BF69F257A4A737DED7106BF99F0F716D28F159ABG1E068178D85F74E8257B71599315830F4F7ED5C972E002F195D960E2587315745CD4FBFB17C90C8367D526892C36CBEF6BB213C9972BFF8F753A2ECD7E130E4DBAC0FEE7AE56516B96391E1F7A6684ADC6BAC70CCB7266FC1D7A7C54C4C823D2D26E9F7E1A0E6F02G1FAC525F3C4AB5FD
	3F13F27A3FD9B518B92A3B7443F36B451EBCCB6B274D2E7A98C7470C73A1DC5C8A14C7374CD51E3B9BE5F9AC4B3CB97F251627845228151467829EE975A6FF95ABDC77CE9B40BD41657C622A8B4CE64CCEE2CAAC0FBBAEE0BDEAD901E345F974BE08185B30E1A93727577711F98A791DBE9887183F25D378E39050FA1A5F0D2AF2EF57E5D5835B757EAA6DF9C7EDD57FF94767D55A730E06AA653C03E1CDD5C4A727E11C5BA8427DC7E0CD82EB23F1926C2459686C9038194AC57003A612A062B6AA57F90AB5F24C
	29401AB856DBC56AA6E43943A63E9D70DD9535B73345425C1751B0E6ABD4D5210F1FD1994DF603C26E5182EB12309D3AF753507637278F11AF26E0E8FD55F5F42CEFDF216E2B82A85E37C25DD79597E01FB48A7C42D7E0FB3DFA5B507A66F39E6FD93A6F1BEF23FC7A1503BB5BE104F0ACDFAF51F1FE4FCAF5FEA3A8BEE225BA3F3D3BB03F3E6097399273EB6F77AD23411553F7C3643B5BEBBE162F867A6D5946D56A7C1E2238F115BA3FAF0A790E9D7CE62D427CEEF2C93FB40F693D0EBFDB725C6D256FF379D6
	1F13079B451F635C723D5027648B62612672679C77FC8714FC61BC1C341ABD33D63B63DB59B7B47BAD9810CF5BFECD14AFDFC39EADAADF0D76DBCD67B57A556A727C1C624D2B5565B93B934B33837CC2D6E3F9BE6A713E34FBBB1CBBC43EEC5B506C778EBAB7ABDA234E6F3D94AFDF234EEF15CD0C1941AFF08D66F7124BD8BEEDAD537BBA7EACDD6B4EAE5E4B9ADAFEF559C3632B701A0F69631FF46ED537D62D2797A95E38D62DA7DBB66A4988FE5356221E5EF549EF41BA26178A7EECD857DFCF6C9B9AD3B249
	9A3E59EAB1DBCD640BF887CCD6112786B264656F27946FAF7E88F72C967C88E924FA3C976F1EEF459079CEF84D47EC61ADBAC76CD8273611A80ABB5729EDE42418FF7A00DF58BA341131251E52BF385EDDDDAAF2113B19073373678837FC53F6AA794670F0017CB945AD5FF8973ED9BC5CBC7E0C5260636B50F45E1A3621DE77BF82FB1BE27900ED9458119A8CA71F5BBEDA0361685A931D1384FD852FFC4C5F37E8306BF80CF7FE33A462E978DA0EE751AA6F62B95FA247730FD6B91E309C6F627900AC4DFA5887
	5EE11663BEF2014E4D9C5DA6D69EB7106260E57387457B4E02612F237AE1CD03157D5F683AF29514FD73865C1738155EF33403FB44862CBF2F6E12737E0E627D7BDD432F07B1BFC29ADF6E16735426F88FAF9B7E3463F78FFFB96FAB433DABDFD14EEB62F06FEA2240AE0F43FD2AA001B59DC7DE699344D608FD2FAC01FD17033CF9820B226B5FF6F07B882C181E89728377C4017D56AE5215F969BA3B14DF2FCB4BC76CF67A8D3EF560AE915812DC642D90D89FCD57975C8182EB6AA458E4F04F4CC73BBEEC154B
	3AC1717E4F4E61AF77F7FE04B402EDF21E6ED73C9F328DFF5AED431A86AB5399F4CFE0AE14E738A8671B68BDB2E9A3584DC64496B7210D64EE4432FFBEDB56C738623DBBFB78F5736BE1CD0367196EF7D8A03FFDC28F8B691E38AF387D85F6D66C13878A5D3C17AE6BA3A6C3FE7FE57A706BE6623026414F9014E21E23049E8E5071D25D275097FE0A58A45697025BC7E0AF6CC25E5182FBE6A7724E9518CFB172C6886C59E2112E1C86635D8469EEC26CA26385370F401E933C23B7611E32011E3D66EB29F43911
	6139BDA9B20E4B0DFC0C734F2F497A2413ECB113F11304EB67EF533140DC08FB5EA6DC2B1E5A940FE1A59CCFB51D11844FD95A2F6494546B5695609EE45FD9624F561F2F097BEF56579B8A18BD4A6B7B17513E2885F00BC86FBA0B1C5ED5B91E52CB9CA03DF1856C9C4607624CD966C557757C0D9769798C88B729GF5F4506E3A1E7FC027AC4F2DF6CF72A48DA0CF98CFC3A14FC115BC8709BC91C497C21EE94BDD65315BE4F9B6678EE63FA55E0DBC851B6BF51912F2BF604ABEEDDB3A05763F25903EEAB34AE5
	6F6CEFCBD7121F1E66F1BD176A1A377934EDF7823F0F08E3CA23EB5E7E780D1C3775CD5E6CA54D7F5075CEE590241168123775592E72307D634990EE1A10E705EAEF6B8D07AC4FE50B3C79B600DA1E791B6BD55F86F828541BFB11F1052EF76DF240BD9D1E1F087C7DA75DB5FFCE5A7E2D03F0C505183F99CD2E794BF24A79DBDDB6187B436A7C2D67F2369432F342A4FFAC7D845AA6DBG6FA9443A3D33DBCEEFFE71C079F7179E49FFC0213AFCE76CF44D7F33349D1E846126087C7B953B667F4BF332BC6FF914
	876FC345EB48C37008C239EDE3F1BF5DA357056B1B3C1B636E3CA073AE09730E774BBEC9487066F7F2BC69031AE7EF957150A194FF7FF90C9C4FFA3BF77184464A71ECDEA847F343F26F72C53B8A7E7EFD129C4F11CE6F62F9ABC5669D5F689DAF7D04AFFF7FC53A9C4F7B095E6964D6BA86F33F06B1B3D3CE27FE091CCE40206CC8CE4739D40EE766B2B99EE73117BA7BD80E67748AB91EEF86950FAC4FAF48D604341472FE1871BEE8B370D5A95EA9AD22B754724895B527144F2F7D64F571AF9666F5F7190CF9
	CEDB1E29274D52EDB46535C19A8E1B254BA1E574BFE7D4796BA7E787FEDD1595A34554CA8BBB68E029D60ABFCFC6D3BD24FFA2067DDB60CD953C35F403B5745C36325867A74446C8F14048B61CEB25B832EB8C7C8E96CF2C53E62731109AC1CEE71181DBE657B752F7944138D3DC747160755BDF8C7957092ED8E9E12D340CB4D147CC8E3ADBEEB2122FC01FB0B90864B5D2221DFCA914DCE201043B68A33E4B59EBB155C9D96DC7494FD0F7B9CD46CA5C076FF2CA5974F7833710F306DB8E9A3ABA68C67E6EBAA9
	4EEA68B4B9258C66EDB1D8CFEFE11B723B29745115955460087492481BC965A531940AD8B26FCDDD3F7AD0D8F02C94D3A3AD32588C469AC31B53662815921D9D8ED3D7074DE26C316FE591A51CA7D6CCEF6EC0F44BC576C9E68B49B9FDA174591E7123D3662554003AFA9C52969A12344805A204F1FF074181C9199C35C086C8F21D707B49CA6706C78EACED0E1122F9A6096A93FB6CCE26B0D12EA44B05B5A0357329D7277F7E697208F0E0291162698F52C142E9F2284F3BBBDBCD0E1F86DE35A249AF7417C4AE
	BBD18FAD54942734305D50E9367442CB9535EA44931D8E03350B7CB09FA41A274AB1FA89418B2F1CDEF455CD6FFFC98517D91D52AAD6C4403A653449563925323D5DECB50988203CA07A95A2FA9226D095A623670A6CC3CFACE8857B2A12E2BB0B0A687FE27AFFAB79DFCC11E20A94EF05C20B10BC7E297DFBFAC81E1774502C13AEB40E57008EDA60CA145409D70062859A43A309F5899B43091C780C93A88E23763B0415B8CA5FDDD2433FB8D183ABA168A991A69A7DBD04416BE6D42AFE31C78B14F042DCA07A
	34CB989C2048E1E6C0186954C5878415ADB41E45C276247ED506402954B31D84A7AFD9425E08EBA975DCC67F678E2D740A6452A3031884CE719AF293571F40552061C20D7567F78D031AAFF6A949C5DC9364DAC40CD30AA79F1DAD032A04DFFC0577F8F2FC2D6C5253DFE50F0B15C25A516464EB5625A769C157FA0A126AAEBDC93F10A5DD58CFD2E50BC20FE3BB25E4FA01B70FDD4BF4CAC94CC9EEF201616872BBBA4ABABBB7BA2584BE02GB01DDC754AA3A645394AA89BE09809D608047C623C4DF95B0AB7AA
	E3DD448232449273BB59BD310D171ED6DBFBAEBD19BADCEDB216FB46ABA4E5F2A58FD6520AE1125466EA13347DA7D2DCFA121E13A55521BE25CB321EDFF41594CBBF765213F444A5D8F7FE615AF393F908C546DDFA96F905EB9F09E3A8397F47D141A5DA23464A72AF6672139FD5093F74EC42DF16B48535CC643B74F47A3F2EB6C1CA1E5CCEDA045F0159783D72BBB073C7E63A7D76D050DEFE86F32F7C9D98F6472F095E5114AA6AF53995F8E67D261C4D127B3BFE47BA8D960B53E0B9DBE9B512FBFF7BFA591D
	EFFE8EFC999D24E2986E497CCC7437114EA8F87E9FD0CB8788B6FB7D6DA3B1GGE430GGD0CB818294G94G88G88G0C0090ADB6FB7D6DA3B1GGE430GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGDDB1GGGG
**end of data**/
}

/**
 * Return the DateComboBox property value.
 * @return com.cannontech.common.gui.util.DateComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.DateComboBox getDateComboBox() {
	if (ivjDateComboBox == null) {
		try {
			ivjDateComboBox = new com.cannontech.common.gui.util.DateComboBox();
			ivjDateComboBox.setName("DateComboBox");
			ivjDateComboBox.setOpaque(false);
			// user code begin {1}

			getDateComboBox().setDateFormat( dateFormatter );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDateComboBox;
}

/**
 * Insert the method's description here.
 * Creation date: (3/13/2001 11:17:17 AM)
 * @return java.text.SimpleDateFormat
 */
public java.text.SimpleDateFormat getDateFormatter() 
{
	return dateFormatter;
}


/**
 * Return the JCheckBoxDayChooser property value.
 * @return com.cannontech.common.gui.util.JCheckBoxDayChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser getJCheckBoxDayChooser() {
	if (ivjJCheckBoxDayChooser == null) {
		try {
			ivjJCheckBoxDayChooser = new com.cannontech.common.gui.unchanging.JCheckBoxDayChooser();
			ivjJCheckBoxDayChooser.setName("JCheckBoxDayChooser");
			ivjJCheckBoxDayChooser.setPreferredSize(new java.awt.Dimension(349, 65));
			ivjJCheckBoxDayChooser.setBorder(new javax.swing.border.EtchedBorder());
			ivjJCheckBoxDayChooser.setOpaque(false);
			ivjJCheckBoxDayChooser.setMinimumSize(new java.awt.Dimension(349, 65));
			// user code begin {1}

			//ivjJCheckBoxDayChooser.setHolidayVisible( false );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDayChooser;
}

/**
 * Return the JCheckBoxEveryYear property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxEveryYear() {
	if (ivjJCheckBoxEveryYear == null) {
		try {
			ivjJCheckBoxEveryYear = new javax.swing.JCheckBox();
			ivjJCheckBoxEveryYear.setName("JCheckBoxEveryYear");
			ivjJCheckBoxEveryYear.setOpaque(false);
			ivjJCheckBoxEveryYear.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxEveryYear.setText("Every Year");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxEveryYear;
}

/**
 * Return the JComboBox1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxCategory() {
	if (ivjJComboBoxCategory == null) {
		try {
			ivjJComboBoxCategory = new javax.swing.JComboBox();
			ivjJComboBoxCategory.setName("JComboBoxCategory");
			ivjJComboBoxCategory.setEditable(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxCategory;
}


/**
 * Return the JComboBoxHoliday property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHoliday() {
	if (ivjJComboBoxHoliday == null) {
		try {
			ivjJComboBoxHoliday = new javax.swing.JComboBox();
			ivjJComboBoxHoliday.setName("JComboBoxHoliday");
			ivjJComboBoxHoliday.setToolTipText("Holiday schedule used to exclude control");
			// user code begin {1}

			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List holidaySch = cache.getAllHolidaySchedules();
				for( int i = 0; i < holidaySch.size(); i++ )
					ivjJComboBoxHoliday.addItem( holidaySch.get(i) );
			}
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHoliday;
}


/**
 * Return the JComboBoxStartPolicy property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxStartPolicy() {
	if (ivjJComboBoxStartPolicy == null) {
		try {
			ivjJComboBoxStartPolicy = new javax.swing.JComboBox();
			ivjJComboBoxStartPolicy.setName("JComboBoxStartPolicy");
			// user code begin {1}

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.MANUAL_START ) );

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.DATETIME_START ) );

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.DAYOFMONTH_START ) );

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.WEEKDAY_START ) );
				
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxStartPolicy;
}


/**
 * Return the JComboBoxStopPolicy property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxStopPolicy() {
	if (ivjJComboBoxStopPolicy == null) {
		try {
			ivjJComboBoxStopPolicy = new javax.swing.JComboBox();
			ivjJComboBoxStopPolicy.setName("JComboBoxStopPolicy");
			// user code begin {1}

			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.MANUAL_STOP ) );

			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.ABSOLUTETIME_STOP ) );

			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.DURATION_STOP ) );
				
			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.UNTILCOMPLETE_STOP ) );

			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxStopPolicy;
}


/**
 * Return the JComboBox1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxType() {
	if (ivjJComboBoxType == null) {
		try {
			ivjJComboBoxType = new javax.swing.JComboBox();
			ivjJComboBoxType.setName("JComboBoxType");
			// user code begin {1}

			getJComboBoxType().addItem( com.cannontech.message.macs.message.Schedule.SIMPLE_TYPE );
			getJComboBoxType().addItem( com.cannontech.message.macs.message.Schedule.SCRIPT_TYPE );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxType;
}


/**
 * Return the JCSpinFieldDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldDuration() {
	if (ivjJCSpinFieldDuration == null) {
		try {
			ivjJCSpinFieldDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldDuration.setName("JCSpinFieldDuration");
			// user code begin {1}

			ivjJCSpinFieldDuration.setDataProperties(new com.klg.jclass.field.DataProperties(
								new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(1), new Integer(Integer.MAX_VALUE), null, true, null,
								new Integer(1)/*Increment*/, "#,##0.###;-#,##0.###", false, false, false, null, new Integer(60)/*Default*/), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(1)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			ivjJCSpinFieldDuration.setValue( new Integer(60) ); // Default value
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldDuration;
}


/**
 * Return the JLabel1to31 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabel1to31() {
	if (ivjJLabel1to31 == null) {
		try {
			ivjJLabel1to31 = new javax.swing.JLabel();
			ivjJLabel1to31.setName("JLabel1to31");
			ivjJLabel1to31.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabel1to31.setText("(1 - 31)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel1to31;
}


/**
 * Return the JLabelFormat1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelABSFormat() {
	if (ivjJLabelABSFormat == null) {
		try {
			ivjJLabelABSFormat = new javax.swing.JLabel();
			ivjJLabelABSFormat.setName("JLabelABSFormat");
			ivjJLabelABSFormat.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelABSFormat.setText("(hh:mm)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelABSFormat;
}


/**
 * Return the JLabelAbsoluteStopTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelAbsoluteStopTime() {
	if (ivjJLabelAbsoluteStopTime == null) {
		try {
			ivjJLabelAbsoluteStopTime = new javax.swing.JLabel();
			ivjJLabelAbsoluteStopTime.setName("JLabelAbsoluteStopTime");
			ivjJLabelAbsoluteStopTime.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelAbsoluteStopTime.setText("Stop Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelAbsoluteStopTime;
}


/**
 * Return the StateNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCategory() {
	if (ivjJLabelCategory == null) {
		try {
			ivjJLabelCategory = new javax.swing.JLabel();
			ivjJLabelCategory.setName("JLabelCategory");
			ivjJLabelCategory.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelCategory.setText("Category:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCategory;
}


/**
 * Return the JLabelFormat property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelFormat() {
	if (ivjJLabelFormat == null) {
		try {
			ivjJLabelFormat = new javax.swing.JLabel();
			ivjJLabelFormat.setName("JLabelFormat");
			ivjJLabelFormat.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelFormat.setText("(hh:mm)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelFormat;
}


/**
 * Return the JLabelHoliday property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHoliday() {
	if (ivjJLabelHoliday == null) {
		try {
			ivjJLabelHoliday = new javax.swing.JLabel();
			ivjJLabelHoliday.setName("JLabelHoliday");
			ivjJLabelHoliday.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHoliday.setText("Holiday:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHoliday;
}


/**
 * Return the JLabelMinutes property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutes() {
	if (ivjJLabelMinutes == null) {
		try {
			ivjJLabelMinutes = new javax.swing.JLabel();
			ivjJLabelMinutes.setName("JLabelMinutes");
			ivjJLabelMinutes.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutes.setText("(minutes)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutes;
}


/**
 * Return the StateGroupNameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelName() {
	if (ivjJLabelName == null) {
		try {
			ivjJLabelName = new javax.swing.JLabel();
			ivjJLabelName.setName("JLabelName");
			ivjJLabelName.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelName.setText("Name:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelName;
}


/**
 * Return the JLabelStartTimePolicy property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStartTimePolicy() {
	if (ivjJLabelStartTimePolicy == null) {
		try {
			ivjJLabelStartTimePolicy = new javax.swing.JLabel();
			ivjJLabelStartTimePolicy.setName("JLabelStartTimePolicy");
			ivjJLabelStartTimePolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStartTimePolicy.setText("Start Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStartTimePolicy;
}


/**
 * Return the JLabelStartTypePolicy property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStartTypePolicy() {
	if (ivjJLabelStartTypePolicy == null) {
		try {
			ivjJLabelStartTypePolicy = new javax.swing.JLabel();
			ivjJLabelStartTypePolicy.setName("JLabelStartTypePolicy");
			ivjJLabelStartTypePolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStartTypePolicy.setText("Stop Type Policy:");
			// user code begin {1}
         
         ivjJLabelStartTypePolicy.setText("Start Type Policy:");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStartTypePolicy;
}


/**
 * Return the JLabelStopPolicy property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStopPolicy() {
	if (ivjJLabelStopPolicy == null) {
		try {
			ivjJLabelStopPolicy = new javax.swing.JLabel();
			ivjJLabelStopPolicy.setName("JLabelStopPolicy");
			ivjJLabelStopPolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStopPolicy.setText("Stop Type Policy:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStopPolicy;
}


/**
 * Return the JLabelType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelType() {
	if (ivjJLabelType == null) {
		try {
			ivjJLabelType = new javax.swing.JLabel();
			ivjJLabelType.setName("JLabelType");
			ivjJLabelType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelType.setText("Type:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelType;
}


/**
 * Return the JPanelDayOfMonth property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelDayOfMonth() {
	if (ivjJPanelDayOfMonth == null) {
		try {
			ivjJPanelDayOfMonth = new javax.swing.JPanel();
			ivjJPanelDayOfMonth.setName("JPanelDayOfMonth");
			ivjJPanelDayOfMonth.setOpaque(false);
			ivjJPanelDayOfMonth.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJTextFieldDayOfMonth = new java.awt.GridBagConstraints();
			constraintsJTextFieldDayOfMonth.gridx = 0; constraintsJTextFieldDayOfMonth.gridy = 0;
			constraintsJTextFieldDayOfMonth.weightx = 1.0;
			constraintsJTextFieldDayOfMonth.ipadx = 79;
			constraintsJTextFieldDayOfMonth.insets = new java.awt.Insets(0, 1, 0, 4);
			getJPanelDayOfMonth().add(getJTextFieldDayOfMonth(), constraintsJTextFieldDayOfMonth);

			java.awt.GridBagConstraints constraintsJLabel1to31 = new java.awt.GridBagConstraints();
			constraintsJLabel1to31.gridx = 1; constraintsJLabel1to31.gridy = 0;
			constraintsJLabel1to31.ipadx = 15;
			constraintsJLabel1to31.ipady = -2;
			constraintsJLabel1to31.insets = new java.awt.Insets(3, 4, 3, 0);
			getJPanelDayOfMonth().add(getJLabel1to31(), constraintsJLabel1to31);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelDayOfMonth;
}

/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStartPolicy() {
	if (ivjJPanelStartPolicy == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("dialog", 0, 14));
			ivjLocalBorder.setTitle("Start Policy");
			ivjJPanelStartPolicy = new javax.swing.JPanel();
			ivjJPanelStartPolicy.setName("JPanelStartPolicy");
			ivjJPanelStartPolicy.setBorder(ivjLocalBorder);
			ivjJPanelStartPolicy.setLayout(new java.awt.GridBagLayout());
			ivjJPanelStartPolicy.setMaximumSize(new java.awt.Dimension(457, 203));
			ivjJPanelStartPolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJPanelStartPolicy.setMinimumSize(new java.awt.Dimension(457, 203));

			java.awt.GridBagConstraints constraintsJLabelStartTimePolicy = new java.awt.GridBagConstraints();
			constraintsJLabelStartTimePolicy.gridx = 1; constraintsJLabelStartTimePolicy.gridy = 2;
			constraintsJLabelStartTimePolicy.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelStartTimePolicy.ipadx = 3;
			constraintsJLabelStartTimePolicy.insets = new java.awt.Insets(5, 3, 4, 0);
			getJPanelStartPolicy().add(getJLabelStartTimePolicy(), constraintsJLabelStartTimePolicy);

			java.awt.GridBagConstraints constraintsJLabelFormat = new java.awt.GridBagConstraints();
			constraintsJLabelFormat.gridx = 4; constraintsJLabelFormat.gridy = 2;
			constraintsJLabelFormat.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelFormat.ipadx = 12;
			constraintsJLabelFormat.ipady = -2;
			constraintsJLabelFormat.insets = new java.awt.Insets(8, 1, 6, 2);
			getJPanelStartPolicy().add(getJLabelFormat(), constraintsJLabelFormat);

			java.awt.GridBagConstraints constraintsJTextFieldTimeEntryStart = new java.awt.GridBagConstraints();
			constraintsJTextFieldTimeEntryStart.gridx = 2; constraintsJTextFieldTimeEntryStart.gridy = 2;
			constraintsJTextFieldTimeEntryStart.gridwidth = 2;
			constraintsJTextFieldTimeEntryStart.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTimeEntryStart.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldTimeEntryStart.weightx = 1.0;
			constraintsJTextFieldTimeEntryStart.ipadx = 46;
			constraintsJTextFieldTimeEntryStart.insets = new java.awt.Insets(4, 0, 4, 0);
			getJPanelStartPolicy().add(getJTextFieldTimeEntryStart(), constraintsJTextFieldTimeEntryStart);

			java.awt.GridBagConstraints constraintsJLabelHoliday = new java.awt.GridBagConstraints();
			constraintsJLabelHoliday.gridx = 5; constraintsJLabelHoliday.gridy = 2;
			constraintsJLabelHoliday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelHoliday.ipadx = 1;
			constraintsJLabelHoliday.ipady = -2;
			constraintsJLabelHoliday.insets = new java.awt.Insets(7, 0, 7, 5);
			getJPanelStartPolicy().add(getJLabelHoliday(), constraintsJLabelHoliday);

			java.awt.GridBagConstraints constraintsJComboBoxHoliday = new java.awt.GridBagConstraints();
			constraintsJComboBoxHoliday.gridx = 6; constraintsJComboBoxHoliday.gridy = 2;
			constraintsJComboBoxHoliday.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxHoliday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxHoliday.weightx = 1.0;
			constraintsJComboBoxHoliday.ipadx = 35;
			constraintsJComboBoxHoliday.insets = new java.awt.Insets(3, 0, 2, 3);
			getJPanelStartPolicy().add(getJComboBoxHoliday(), constraintsJComboBoxHoliday);

			java.awt.GridBagConstraints constraintsJPanelStarts = new java.awt.GridBagConstraints();
			constraintsJPanelStarts.gridx = 1; constraintsJPanelStarts.gridy = 3;
			constraintsJPanelStarts.gridwidth = 6;
			constraintsJPanelStarts.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelStarts.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJPanelStarts.weightx = 1.0;
			constraintsJPanelStarts.weighty = 1.0;
			constraintsJPanelStarts.ipadx = -4;
			constraintsJPanelStarts.ipady = 6;
			constraintsJPanelStarts.insets = new java.awt.Insets(2, 3, 4, 3);
			getJPanelStartPolicy().add(getJPanelStarts(), constraintsJPanelStarts);

			java.awt.GridBagConstraints constraintsJComboBoxStartPolicy = new java.awt.GridBagConstraints();
			constraintsJComboBoxStartPolicy.gridx = 3; constraintsJComboBoxStartPolicy.gridy = 1;
			constraintsJComboBoxStartPolicy.gridwidth = 4;
			constraintsJComboBoxStartPolicy.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxStartPolicy.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxStartPolicy.weightx = 1.0;
			constraintsJComboBoxStartPolicy.ipadx = 81;
			constraintsJComboBoxStartPolicy.insets = new java.awt.Insets(3, 1, 3, 67);
			getJPanelStartPolicy().add(getJComboBoxStartPolicy(), constraintsJComboBoxStartPolicy);

			java.awt.GridBagConstraints constraintsJLabelStartTypePolicy = new java.awt.GridBagConstraints();
			constraintsJLabelStartTypePolicy.gridx = 1; constraintsJLabelStartTypePolicy.gridy = 1;
			constraintsJLabelStartTypePolicy.gridwidth = 2;
			constraintsJLabelStartTypePolicy.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelStartTypePolicy.ipadx = 9;
			constraintsJLabelStartTypePolicy.insets = new java.awt.Insets(3, 3, 7, 0);
			getJPanelStartPolicy().add(getJLabelStartTypePolicy(), constraintsJLabelStartTypePolicy);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStartPolicy;
}

/**
 * Return the JPanelStarts property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStarts() {
	if (ivjJPanelStarts == null) {
		try {
			ivjJPanelStarts = new javax.swing.JPanel();
			ivjJPanelStarts.setName("JPanelStarts");
			ivjJPanelStarts.setPreferredSize(new java.awt.Dimension(359, 109));
			ivjJPanelStarts.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxDayChooser = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDayChooser.gridx = 0; constraintsJCheckBoxDayChooser.gridy = 0;
			constraintsJCheckBoxDayChooser.gridwidth = 2;
			constraintsJCheckBoxDayChooser.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJCheckBoxDayChooser.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxDayChooser.weightx = 1.0;
			constraintsJCheckBoxDayChooser.weighty = 1.0;
			constraintsJCheckBoxDayChooser.ipadx = 31;
			constraintsJCheckBoxDayChooser.ipady = -15;
			constraintsJCheckBoxDayChooser.insets = new java.awt.Insets(4, 0, 1, 4);
			getJPanelStarts().add(getJCheckBoxDayChooser(), constraintsJCheckBoxDayChooser);

			java.awt.GridBagConstraints constraintsJCheckBoxEveryYear = new java.awt.GridBagConstraints();
			constraintsJCheckBoxEveryYear.gridx = 1; constraintsJCheckBoxEveryYear.gridy = 0;
			constraintsJCheckBoxEveryYear.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxEveryYear.ipadx = 15;
			constraintsJCheckBoxEveryYear.ipady = -2;
			constraintsJCheckBoxEveryYear.insets = new java.awt.Insets(3, 2, 4, 104);
			getJPanelStarts().add(getJCheckBoxEveryYear(), constraintsJCheckBoxEveryYear);

			java.awt.GridBagConstraints constraintsJPanelDayOfMonth = new java.awt.GridBagConstraints();
			constraintsJPanelDayOfMonth.gridx = 0; constraintsJPanelDayOfMonth.gridy = 0;
			constraintsJPanelDayOfMonth.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJPanelDayOfMonth.weightx = 1.0;
			constraintsJPanelDayOfMonth.weighty = 1.0;
			constraintsJPanelDayOfMonth.ipadx = 19;
			constraintsJPanelDayOfMonth.ipady = -1;
			constraintsJPanelDayOfMonth.insets = new java.awt.Insets(3, 0, 1, 49);
			getJPanelStarts().add(getJPanelDayOfMonth(), constraintsJPanelDayOfMonth);

			java.awt.GridBagConstraints constraintsDateComboBox = new java.awt.GridBagConstraints();
			constraintsDateComboBox.gridx = 0; constraintsDateComboBox.gridy = 0;
			constraintsDateComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsDateComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsDateComboBox.weightx = 1.0;
			constraintsDateComboBox.ipadx = 79;
			constraintsDateComboBox.insets = new java.awt.Insets(2, 0, 4, 1);
			getJPanelStarts().add(getDateComboBox(), constraintsDateComboBox);
			// user code begin {1}

			getJPanelStarts().setPreferredSize(
					new java.awt.Dimension(200, 110) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStarts;
}

/**
 * Return the JPanelStartInternalPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStopInternalPanel() {
	if (ivjJPanelStopInternalPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("dialog", 0, 14));
			ivjLocalBorder1.setTitle("Stop Policy");
			ivjJPanelStopInternalPanel = new javax.swing.JPanel();
			ivjJPanelStopInternalPanel.setName("JPanelStopInternalPanel");
			ivjJPanelStopInternalPanel.setBorder(ivjLocalBorder1);
			ivjJPanelStopInternalPanel.setLayout(new java.awt.GridBagLayout());
			ivjJPanelStopInternalPanel.setMaximumSize(new java.awt.Dimension(340, 185));
			ivjJPanelStopInternalPanel.setPreferredSize(new java.awt.Dimension(340, 185));
			ivjJPanelStopInternalPanel.setMinimumSize(new java.awt.Dimension(340, 185));

			java.awt.GridBagConstraints constraintsJComboBoxStopPolicy = new java.awt.GridBagConstraints();
			constraintsJComboBoxStopPolicy.gridx = 2; constraintsJComboBoxStopPolicy.gridy = 1;
			constraintsJComboBoxStopPolicy.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxStopPolicy.weightx = 1.0;
			constraintsJComboBoxStopPolicy.ipadx = 67;
			constraintsJComboBoxStopPolicy.insets = new java.awt.Insets(4, 2, 2, 77);
			getJPanelStopInternalPanel().add(getJComboBoxStopPolicy(), constraintsJComboBoxStopPolicy);

			java.awt.GridBagConstraints constraintsJLabelStopPolicy = new java.awt.GridBagConstraints();
			constraintsJLabelStopPolicy.gridx = 1; constraintsJLabelStopPolicy.gridy = 1;
			constraintsJLabelStopPolicy.ipadx = 4;
			constraintsJLabelStopPolicy.insets = new java.awt.Insets(4, 14, 5, 2);
			getJPanelStopInternalPanel().add(getJLabelStopPolicy(), constraintsJLabelStopPolicy);

			java.awt.GridBagConstraints constraintsJPanelStops = new java.awt.GridBagConstraints();
			constraintsJPanelStops.gridx = 1; constraintsJPanelStops.gridy = 2;
			constraintsJPanelStops.gridwidth = 2;
			constraintsJPanelStops.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelStops.weightx = 1.0;
			constraintsJPanelStops.weighty = 1.0;
			constraintsJPanelStops.ipadx = -10;
			constraintsJPanelStops.ipady = -8;
			constraintsJPanelStops.insets = new java.awt.Insets(2, 14, 10, 115);
			getJPanelStopInternalPanel().add(getJPanelStops(), constraintsJPanelStops);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStopInternalPanel;
}

/**
 * Return the JPanelStops property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStops() {
	if (ivjJPanelStops == null) {
		try {
			ivjJPanelStops = new javax.swing.JPanel();
			ivjJPanelStops.setName("JPanelStops");
			ivjJPanelStops.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCSpinFieldDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldDuration.gridx = 0; constraintsJCSpinFieldDuration.gridy = 0;
			constraintsJCSpinFieldDuration.gridwidth = 2;
			constraintsJCSpinFieldDuration.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJCSpinFieldDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldDuration.weightx = 1.0;
			constraintsJCSpinFieldDuration.ipadx = 100;
			constraintsJCSpinFieldDuration.ipady = 19;
			constraintsJCSpinFieldDuration.insets = new java.awt.Insets(8, 0, 1, 2);
			getJPanelStops().add(getJCSpinFieldDuration(), constraintsJCSpinFieldDuration);

			java.awt.GridBagConstraints constraintsJLabelABSFormat = new java.awt.GridBagConstraints();
			constraintsJLabelABSFormat.gridx = 3; constraintsJLabelABSFormat.gridy = 1;
			constraintsJLabelABSFormat.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelABSFormat.ipadx = 17;
			constraintsJLabelABSFormat.ipady = -2;
			constraintsJLabelABSFormat.insets = new java.awt.Insets(5, 4, 14, 54);
			getJPanelStops().add(getJLabelABSFormat(), constraintsJLabelABSFormat);

			java.awt.GridBagConstraints constraintsJTextFieldTimeAbsoluteStopTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldTimeAbsoluteStopTime.gridx = 1; constraintsJTextFieldTimeAbsoluteStopTime.gridy = 1;
			constraintsJTextFieldTimeAbsoluteStopTime.gridwidth = 2;
			constraintsJTextFieldTimeAbsoluteStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTimeAbsoluteStopTime.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldTimeAbsoluteStopTime.weightx = 1.0;
			constraintsJTextFieldTimeAbsoluteStopTime.ipadx = 66;
			constraintsJTextFieldTimeAbsoluteStopTime.insets = new java.awt.Insets(2, 3, 11, 4);
			getJPanelStops().add(getJTextFieldTimeAbsoluteStopTime(), constraintsJTextFieldTimeAbsoluteStopTime);

			java.awt.GridBagConstraints constraintsJLabelAbsoluteStopTime = new java.awt.GridBagConstraints();
			constraintsJLabelAbsoluteStopTime.gridx = 0; constraintsJLabelAbsoluteStopTime.gridy = 1;
			constraintsJLabelAbsoluteStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJLabelAbsoluteStopTime.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelAbsoluteStopTime.ipadx = 4;
			constraintsJLabelAbsoluteStopTime.insets = new java.awt.Insets(1, 0, 13, 3);
			getJPanelStops().add(getJLabelAbsoluteStopTime(), constraintsJLabelAbsoluteStopTime);

			java.awt.GridBagConstraints constraintsJLabelMinutes = new java.awt.GridBagConstraints();
			constraintsJLabelMinutes.gridx = 2; constraintsJLabelMinutes.gridy = 0;
			constraintsJLabelMinutes.gridwidth = 2;
			constraintsJLabelMinutes.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutes.ipadx = 3;
			constraintsJLabelMinutes.insets = new java.awt.Insets(10, 2, 3, 80);
			getJPanelStops().add(getJLabelMinutes(), constraintsJLabelMinutes);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStops;
}

/**
 * Return the JTextFieldDayOfMonth property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldDayOfMonth() {
	if (ivjJTextFieldDayOfMonth == null) {
		try {
			ivjJTextFieldDayOfMonth = new javax.swing.JTextField();
			ivjJTextFieldDayOfMonth.setName("JTextFieldDayOfMonth");
			// user code begin {1}

			ivjJTextFieldDayOfMonth.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(1, 31) );
			ivjJTextFieldDayOfMonth.setText("1");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDayOfMonth;
}


/**
 * Return the StateGroupNameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldScheduleName() {
	if (ivjJTextFieldScheduleName == null) {
		try {
			ivjJTextFieldScheduleName = new javax.swing.JTextField();
			ivjJTextFieldScheduleName.setName("JTextFieldScheduleName");
			ivjJTextFieldScheduleName.setPreferredSize(new java.awt.Dimension(150, 21));
			ivjJTextFieldScheduleName.setMinimumSize(new java.awt.Dimension(150, 21));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldScheduleName;
}


/**
 * Return the JTextFieldAbsoluteStopTime property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldTimeAbsoluteStopTime() {
	if (ivjJTextFieldTimeAbsoluteStopTime == null) {
		try {
			ivjJTextFieldTimeAbsoluteStopTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldTimeAbsoluteStopTime.setName("JTextFieldTimeAbsoluteStopTime");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTimeAbsoluteStopTime;
}


/**
 * Return the JTextFieldTimeEntryStart property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldTimeEntryStart() {
	if (ivjJTextFieldTimeEntryStart == null) {
		try {
			ivjJTextFieldTimeEntryStart = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldTimeEntryStart.setName("JTextFieldTimeEntryStart");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTimeEntryStart;
}


/**
 * Insert the method's description here.
 * Creation date: (2/15/2001 12:49:41 PM)
 * @return java.lang.String
 */
public String getScheduleType() 
{
	return getJComboBoxType().getSelectedItem().toString();
}


/**
 * Insert the method's description here.
 * Creation date: (2/16/2001 3:10:18 PM)
 * @return java.lang.String
 */
public String getSelectedStartPolicy() 
{
	return com.cannontech.common.util.StringUtils.removeChars( 
		' ', 
		getJComboBoxStartPolicy().getSelectedItem().toString() );
}


/**
 * Insert the method's description here.
 * Creation date: (2/16/2001 3:10:18 PM)
 * @return java.lang.String
 */
public String getSelectedStopPolicy() 
{
	return com.cannontech.common.util.StringUtils.removeChars( 
		' ', 
		getJComboBoxStopPolicy().getSelectedItem().toString() );
}


/**
 * getValue method comment.
 */
public Object getValue(Object val) 
{
	Schedule sch = null;
	if( val == null )
		sch = new Schedule();
	else
		sch = (Schedule)val;

	// ID must be set by server!!	
	sch.setScheduleName( getJTextFieldScheduleName().getText() );
	sch.setCategoryName( getJComboBoxCategory().getSelectedItem().toString() );
	sch.setType( getJComboBoxType().getSelectedItem().toString() );
	sch.setStartPolicy( getSelectedStartPolicy() );
	sch.setStopPolicy( getSelectedStopPolicy() );

	if( getJComboBoxHoliday().getSelectedItem() != null )
		sch.setHolidayScheduleId( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getSelectedItem()).getHolidayScheduleID() );
	else
		sch.setHolidayScheduleId( 0 );

 	if( getJTextFieldTimeEntryStart().isEnabled() && getJTextFieldTimeEntryStart().getText() != null )
		sch.setStartTime( getJTextFieldTimeEntryStart().getTimeText() + ":00" );  // needs the seconds appended for the database:  HH:mm:ss
	

	java.util.GregorianCalendar tempCal = new java.util.GregorianCalendar();

	// Process the start attributes here	
	if( getSelectedStartPolicy().equalsIgnoreCase(Schedule.DATETIME_START) )
	{
		tempCal.setTime( getDateComboBox().getSelectedDate() );
			
		//getJCPopUpFieldDate().getModel().getSelectedItem().toString() );
		//java.util.Date d = new java.util.Date(date);	
		//tempCal.setTime( d );

		sch.setStartDay( tempCal.get(java.util.GregorianCalendar.DAY_OF_MONTH) );
		sch.setStartMonth( tempCal.get(java.util.GregorianCalendar.MONTH) + 1 );

		if( getJCheckBoxEveryYear().isSelected() )
			sch.setStartYear( 0 );
		else
			sch.setStartYear( tempCal.get(java.util.GregorianCalendar.YEAR) );
	} 
	else if( getSelectedStartPolicy().equalsIgnoreCase(Schedule.DAYOFMONTH_START) )
	{
		sch.setStartDay( Integer.parseInt(getJTextFieldDayOfMonth().getText()) );

		java.util.Date d = new java.util.Date();
		tempCal.setTime( d );

		sch.setStartMonth( tempCal.get(java.util.GregorianCalendar.MONTH) + 1 );
		sch.setStartYear( tempCal.get(java.util.GregorianCalendar.YEAR) );
	}
	else if( getSelectedStartPolicy().equalsIgnoreCase(Schedule.WEEKDAY_START) )
	{
		sch.setValidWeekDays( getJCheckBoxDayChooser().getSelectedDays8Chars() );
	}


	// Process the stop attributes here
	if( getSelectedStopPolicy().equalsIgnoreCase( Schedule.ABSOLUTETIME_STOP ) )
	{
 		if( getJTextFieldTimeAbsoluteStopTime().isEnabled() && getJTextFieldTimeAbsoluteStopTime().getText() != null )	 	
			sch.setStopTime( getJTextFieldTimeAbsoluteStopTime().getTimeText() + ":00" );
	}
	else if( getSelectedStopPolicy().equalsIgnoreCase( Schedule.DURATION_STOP ) )
	{
		//we entered minutes, lets make it seconds for the server
		sch.setDuration( ((Number)getJCSpinFieldDuration().getValue()).intValue() * 60 );
	}
	
	
	return sch;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJComboBoxCategory().getEditor().getEditorComponent().addKeyListener(this);
	getJComboBoxCategory().addActionListener(this);
	
	// user code end
	getJTextFieldScheduleName().addCaretListener(this);
	getJCheckBoxEveryYear().addActionListener(this);
	getJComboBoxType().addActionListener(this);
	getJComboBoxHoliday().addActionListener(this);
	getJComboBoxStopPolicy().addActionListener(this);
	getJComboBoxStartPolicy().addActionListener(this);
	getJTextFieldDayOfMonth().addCaretListener(this);
	getJTextFieldTimeEntryStart().addCaretListener(this);
	getJCheckBoxDayChooser().addActionListener(this);
	getJTextFieldTimeAbsoluteStopTime().addCaretListener(this);
	getDateComboBox().addActionListener(this);
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("ScheduleBasePanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(418, 450);

		java.awt.GridBagConstraints constraintsJTextFieldScheduleName = new java.awt.GridBagConstraints();
		constraintsJTextFieldScheduleName.gridx = 1; constraintsJTextFieldScheduleName.gridy = 1;
		constraintsJTextFieldScheduleName.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldScheduleName.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJTextFieldScheduleName.weightx = 1.0;
		constraintsJTextFieldScheduleName.ipadx = 177;
		constraintsJTextFieldScheduleName.insets = new java.awt.Insets(19, 79, 2, 12);
		add(getJTextFieldScheduleName(), constraintsJTextFieldScheduleName);

		java.awt.GridBagConstraints constraintsJLabelName = new java.awt.GridBagConstraints();
		constraintsJLabelName.gridx = 1; constraintsJLabelName.gridy = 1;
		constraintsJLabelName.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelName.ipadx = 32;
		constraintsJLabelName.insets = new java.awt.Insets(20, 8, 3, 338);
		add(getJLabelName(), constraintsJLabelName);

		java.awt.GridBagConstraints constraintsJLabelCategory = new java.awt.GridBagConstraints();
		constraintsJLabelCategory.gridx = 1; constraintsJLabelCategory.gridy = 2;
		constraintsJLabelCategory.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelCategory.ipadx = 10;
		constraintsJLabelCategory.insets = new java.awt.Insets(7, 8, 4, 338);
		add(getJLabelCategory(), constraintsJLabelCategory);

		java.awt.GridBagConstraints constraintsJLabelType = new java.awt.GridBagConstraints();
		constraintsJLabelType.gridx = 1; constraintsJLabelType.gridy = 3;
		constraintsJLabelType.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelType.ipadx = 36;
		constraintsJLabelType.insets = new java.awt.Insets(7, 8, 6, 338);
		add(getJLabelType(), constraintsJLabelType);

		java.awt.GridBagConstraints constraintsJComboBoxType = new java.awt.GridBagConstraints();
		constraintsJComboBoxType.gridx = 1; constraintsJComboBoxType.gridy = 3;
		constraintsJComboBoxType.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxType.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJComboBoxType.weightx = 1.0;
		constraintsJComboBoxType.ipadx = -21;
		constraintsJComboBoxType.insets = new java.awt.Insets(5, 79, 4, 234);
		add(getJComboBoxType(), constraintsJComboBoxType);

		java.awt.GridBagConstraints constraintsJPanelStartPolicy = new java.awt.GridBagConstraints();
		constraintsJPanelStartPolicy.gridx = 1; constraintsJPanelStartPolicy.gridy = 4;
		constraintsJPanelStartPolicy.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelStartPolicy.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelStartPolicy.weightx = 1.0;
		constraintsJPanelStartPolicy.weighty = 1.0;
		constraintsJPanelStartPolicy.ipadx = -55;
		constraintsJPanelStartPolicy.ipady = 1;
		constraintsJPanelStartPolicy.insets = new java.awt.Insets(5, 8, 5, 8);
		add(getJPanelStartPolicy(), constraintsJPanelStartPolicy);

		java.awt.GridBagConstraints constraintsJComboBoxCategory = new java.awt.GridBagConstraints();
		constraintsJComboBoxCategory.gridx = 1; constraintsJComboBoxCategory.gridy = 2;
		constraintsJComboBoxCategory.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxCategory.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJComboBoxCategory.weightx = 1.0;
		constraintsJComboBoxCategory.ipadx = 209;
		constraintsJComboBoxCategory.insets = new java.awt.Insets(3, 79, 4, 12);
		add(getJComboBoxCategory(), constraintsJComboBoxCategory);

		java.awt.GridBagConstraints constraintsJPanelStopInternalPanel = new java.awt.GridBagConstraints();
		constraintsJPanelStopInternalPanel.gridx = 1; constraintsJPanelStopInternalPanel.gridy = 5;
		constraintsJPanelStopInternalPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelStopInternalPanel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelStopInternalPanel.weightx = 1.0;
		constraintsJPanelStopInternalPanel.weighty = 1.0;
		constraintsJPanelStopInternalPanel.ipadx = 62;
		constraintsJPanelStopInternalPanel.ipady = -69;
		constraintsJPanelStopInternalPanel.insets = new java.awt.Insets(5, 8, 11, 8);
		add(getJPanelStopInternalPanel(), constraintsJPanelStopInternalPanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}


	// set everything disabled
	setStopFieldVisible();
	setStartFieldVisible();
	jComboBoxType_ActionPerformed( null );

	getJComboBoxType().setEnabled( !editMode );

	// user code end
}

/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	Integer startSecs = null, stopSecs = null;

	try
	{		
		java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("HH:mm");
		df.setLenient( false );

		if( getJTextFieldTimeEntryStart().isVisible() )
		{
			startSecs = getJTextFieldTimeEntryStart().getTimeTotalSeconds();
			if( !getJTextFieldTimeEntryStart().isValidText() )
			{
				setErrorString("The Start Time text field does not contain a valid time");
				return false;
			}
		}
		
		if( getJTextFieldTimeAbsoluteStopTime().isVisible() )
		{
			stopSecs = getJTextFieldTimeAbsoluteStopTime().getTimeTotalSeconds();
			if( !getJTextFieldTimeAbsoluteStopTime().isValidText() )
			{
				setErrorString("The Absolute Stop Time text field does not contain a valid time");
				return false;
			}
		}	
	}
	catch(Exception ex)
	{
		setErrorString("An Exception occured while trying to decipher the Absolute Stop Time text field or the Start Time text field");
		return false;
	}

	if( getJTextFieldScheduleName().getText() == null 
		 || getJTextFieldScheduleName().getText().length() <= 0 )
	{
		setErrorString("The Schedule Name text field must be filled in");
		return false;
	}

	// synch our editor component of the JComboBox and the JCombobox itself
	getJComboBoxCategory().setSelectedItem( getJComboBoxCategory().getEditor().getItem() );
	
	if( getJComboBoxCategory().getSelectedItem() == null 
		 || getJComboBoxCategory().getSelectedItem().toString().length() <= 0 )
	{
		setErrorString("The Category text field must be filled in");
		return false;
	}

	if( startSecs != null && stopSecs != null )
	{
		if( stopSecs.intValue() <= startSecs.intValue() )
		{
			setErrorString("The start time text field must be greater than the stop time text field");
			return false;
		}		
	}
	
	try
	{
		if( getJTextFieldDayOfMonth().isVisible() )
		{		
			if( getJTextFieldDayOfMonth().getText() == null 
				 || getJTextFieldDayOfMonth().getText().length() <= 0
				 || Integer.parseInt(getJTextFieldDayOfMonth().getText()) <= 0 )
			{
				setErrorString("The day of month text field must have a value");
				return false;
			}
		}
	}
	catch( NumberFormatException nf )
	{
		setErrorString("The day of month text field must be a number");
		return false;
	}
		
	return true;
}


/**
 * Comment
 */
public void jCheckBoxEveryYear_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
   java.util.GregorianCalendar currCal = new java.util.GregorianCalendar();
   currCal.setTime( new java.util.Date() );

   java.util.GregorianCalendar selCal = new java.util.GregorianCalendar();
   selCal.setTime( getDateComboBox().getSelectedDate() );

	if( getJCheckBoxEveryYear().isSelected() )
	{
		dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd");
	}
	else
	{
		dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");

      selCal.set( selCal.YEAR, currCal.get(currCal.YEAR) );
	}

   getDateComboBox().setDateFormat( dateFormatter );
   getDateComboBox().setSelectedDate( selCal.getTime() );
   
   
	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxStartPolicy_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	setStartFieldVisible();
	fireInputUpdate();
	
	return;
}


/**
 * Comment
 */
public void jComboBoxStopPolicy_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	setStopFieldVisible();
	fireInputUpdate();

	return;
}


/**
 * Comment
 */
public void jComboBoxType_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	boolean val;

	//Simple schedules can not have the UNTIL_COMPLETE stop policy	
	if( val = getJComboBoxType().getSelectedItem().equals(
				com.cannontech.message.macs.message.Schedule.SIMPLE_TYPE ) )
	{
		//release the hate!
		if( getSelectedStopPolicy().equalsIgnoreCase(Schedule.UNTILCOMPLETE_STOP) )
			getJComboBoxStopPolicy().setSelectedIndex(0);

		getJComboBoxStopPolicy().removeItem( StringUtils.addCharBetweenWords(
				' ', Schedule.UNTILCOMPLETE_STOP) );
	}
	else
	{
		//be sure the UNTIL_COMPLETE stop policy is in the stop policy combo box!
		for( int i = 0; i < getJComboBoxStopPolicy().getItemCount(); i++ )
			if( StringUtils.removeChars(
				  ' ', getJComboBoxStopPolicy().getItemAt(i).toString()).equalsIgnoreCase(
				  Schedule.UNTILCOMPLETE_STOP) )
			{
				val = true;
				break;
			}

		if( !val )
			getJComboBoxStopPolicy().addItem( StringUtils.addCharBetweenWords(
				' ', Schedule.UNTILCOMPLETE_STOP) );
	}


	return;
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */

public void keyPressed(java.awt.event.KeyEvent e) 
{
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
public void keyReleased(java.awt.event.KeyEvent e) 
{
	fireInputUpdate();
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
public void keyTyped(java.awt.event.KeyEvent e) 
{
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());

		javax.swing.JFrame frame = new javax.swing.JFrame();
		ScheduleBasePanel aScheduleBasePanel;
		aScheduleBasePanel = new ScheduleBasePanel();
		frame.setContentPane(aScheduleBasePanel);
		frame.setSize(aScheduleBasePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}


/**
 * Insert the method's description here.
 * Creation date: (3/8/2001 2:20:06 PM)
 * @param enum java.util.Enumeration
 */
private void setEditableJComboBox(final java.util.Enumeration enum) 
{
	if( enum != null )
	{		
		javax.swing.SwingUtilities.invokeLater( new Runnable()
		{
			public void run()
			{
				while( enum.hasMoreElements() )
					getJComboBoxCategory().addItem( enum.nextElement().toString() );
			}
				
		});			
		
	}
		
}


/**
 * Insert the method's description here.
 * Creation date: (2/15/2001 11:52:07 AM)
 * @param button javax.swing.JRadioButton
 */
private void setStartFieldVisible()
{
	getDateComboBox().setVisible(
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DATETIME_START) );
	getJCheckBoxEveryYear().setVisible(
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DATETIME_START) );

		
	getJTextFieldDayOfMonth().setVisible( 
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DAYOFMONTH_START) );
	getJLabel1to31().setVisible( 
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DAYOFMONTH_START) );

		
	getJCheckBoxDayChooser().setVisible( 
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.WEEKDAY_START) );

	getJTextFieldTimeEntryStart().setEnabled( 
		!getSelectedStartPolicy().equalsIgnoreCase(Schedule.MANUAL_START) );

}


/**
 * Insert the method's description here.
 * Creation date: (2/15/2001 11:52:07 AM)
 * @param button javax.swing.JRadioButton
 */
private void setStopFieldVisible()
{
	//absolute GUI widgets
	getJTextFieldTimeAbsoluteStopTime().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.ABSOLUTETIME_STOP) );
	getJLabelAbsoluteStopTime().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.ABSOLUTETIME_STOP) );
	getJLabelABSFormat().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.ABSOLUTETIME_STOP) );
	

	//duration GUI widgets
	getJCSpinFieldDuration().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.DURATION_STOP) );
	getJLabelMinutes().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.DURATION_STOP) );
}


/**
 * setValue method comment.
 */
public void setValue(Object val) 
{
	Schedule sched = (Schedule)val;	
	java.util.GregorianCalendar cal = new java.util.GregorianCalendar();

	setEditableJComboBox( sched.getNonPersistantData().getCategories() );
	
	getJTextFieldScheduleName().setText( sched.getScheduleName() );
	getJComboBoxCategory().setSelectedItem( sched.getCategoryName() );
	getJComboBoxType().setSelectedItem( sched.getType() );
	getJCSpinFieldDuration().setValue( new Integer(sched.getDuration()) );

	for( int i = 0; i < getJComboBoxHoliday().getItemCount(); i++ )
		if( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getItemAt(i)).getHolidayScheduleID()
			 == sched.getHolidayScheduleId() )
		{
			getJComboBoxHoliday().setSelectedIndex(i);
			break;
		}

	if( sched.getStartTime().length() > 5 )
		getJTextFieldTimeEntryStart().setText( sched.getStartTime().substring(0, 5) );
	else
		getJTextFieldTimeEntryStart().setText( sched.getStartTime() );
		
	// Process the start policies and set the viewable area in the
	// startPolicyScrollPane to the selected radioButton
	getJComboBoxStartPolicy().setSelectedItem( StringUtils.addCharBetweenWords(
		' ', sched.getStartPolicy() ) );
	
	if( sched.getStartPolicy().equalsIgnoreCase( Schedule.DATETIME_START ) )
	{
		/*----- SUPER HACK!!! */
		cal.setTime( new java.util.Date() );
		/*----- END SUPER HACK */
		
		cal.set( java.util.GregorianCalendar.DAY_OF_MONTH,	sched.getStartDay() );
		cal.set( java.util.GregorianCalendar.MONTH, (sched.getStartMonth()-1) );

		/*----- SUPER HACK */
		if( sched.getStartYear() == 0 )
		{
			getJCheckBoxEveryYear().doClick();
			// just set the year to the current year
			cal.set( java.util.GregorianCalendar.YEAR, cal.get(java.util.GregorianCalendar.YEAR) );
		}
		else if( sched.getStartYear() <= 2000 )
			cal.set( java.util.GregorianCalendar.YEAR, cal.get(java.util.GregorianCalendar.YEAR) );
		else
			cal.set( java.util.GregorianCalendar.YEAR, sched.getStartYear() );
		/*----- END SUPER HACK */
		
		getDateComboBox().setSelectedDate( cal.getTime() );
	}
	else if( sched.getStartPolicy().equalsIgnoreCase( Schedule.DAYOFMONTH_START ) )
	{		
		cal.setTime( sched.getNextRunTime() );
		getJTextFieldDayOfMonth().setText( new Integer(cal.get(java.util.GregorianCalendar.DAY_OF_MONTH) ).toString() );
	}
	else if( sched.getStartPolicy().equalsIgnoreCase( Schedule.WEEKDAY_START ) )
	{
		//HOLIDAY is set in here too!!!
		getJCheckBoxDayChooser().setSelectedCheckBoxes( sched.getValidWeekDays() );		
	}

	
	// Process the stop policies and set the viewable area in the
	// stopPolicyScrollPane to the selected radioButton
	getJComboBoxStopPolicy().setSelectedItem( StringUtils.addCharBetweenWords(
		' ', sched.getStopPolicy() ) );
	
	if( sched.getStopPolicy().equalsIgnoreCase( Schedule.ABSOLUTETIME_STOP ) )
	{
		if( sched.getStopTime().length() > 5 )
			getJTextFieldTimeAbsoluteStopTime().setText( sched.getStopTime().substring(0, 5) );
		else
			getJTextFieldTimeAbsoluteStopTime().setText( sched.getStopTime() );
	}
	else if( sched.getStopPolicy().equalsIgnoreCase( Schedule.DURATION_STOP ) )
	{
		// since the server gives us seconds, lets make it into minutes
		getJCSpinFieldDuration().setValue( new Integer(sched.getDuration() / 60) );
	}

}
}
package com.cannontech.macs.schedule.wizard;

/**
 * This type was created in VisualAge.
 */
import com.klg.jclass.field.validate.JCDateValidator;
import com.klg.jclass.util.value.DateValueModel;
import com.cannontech.message.macs.message.Schedule;
import com.cannontech.common.util.StringUtils;

public class ScheduleBasePanel extends com.cannontech.common.gui.util.DataInputPanel implements com.klg.jclass.util.value.JCValueListener, java.awt.event.ActionListener, java.awt.event.KeyListener, javax.swing.event.CaretListener {
	private java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");
	private boolean editMode = false;
	private javax.swing.JLabel ivjJLabelCategory = null;
	private javax.swing.JLabel ivjJLabelName = null;
	private javax.swing.JLabel ivjJLabelType = null;
	private javax.swing.JTextField ivjJTextFieldScheduleName = null;
	private javax.swing.JLabel ivjJLabelStartTimePolicy = null;
	private com.klg.jclass.field.JCPopupField ivjJCPopUpFieldDate = null;
	private javax.swing.JLabel ivjJLabelFormat = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldDuration = null;
	private javax.swing.JLabel ivjJLabelAbsoluteStopTime = null;
	private javax.swing.JLabel ivjJLabelMinutes = null;
	private javax.swing.JPanel ivjJPanelStartPolicy = null;
	private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser ivjJCheckBoxDayChooser = null;
	private javax.swing.JPanel ivjJPanelStopInternalPanel = null;
	private javax.swing.JComboBox ivjJComboBoxType = null;
	private javax.swing.JComboBox ivjJComboBoxCategory = null;
	private javax.swing.JLabel ivjJLabel1to31 = null;
	private javax.swing.JCheckBox ivjJCheckBoxEveryYear = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldTimeEntryStart = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldTimeAbsoluteStopTime = null;
	private javax.swing.JComboBox ivjJComboBoxHoliday = null;
	private javax.swing.JLabel ivjJLabelHoliday = null;
	private javax.swing.JComboBox ivjJComboBoxStopPolicy = null;
	private javax.swing.JLabel ivjJLabelStopPolicy = null;
	private javax.swing.JPanel ivjJPanelStops = null;
	private javax.swing.JLabel ivjJLabelABSFormat = null;
	private javax.swing.JComboBox ivjJComboBoxStartPolicy = null;
	private javax.swing.JLabel ivjJLabelStartTypePolicy = null;
	private javax.swing.JPanel ivjJPanelStarts = null;
	private javax.swing.JTextField ivjJTextFieldDayOfMonth = null;
	private javax.swing.JPanel ivjJPanelDayOfMonth = null;
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public ScheduleBasePanel() {
	super();
	initialize();
}
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public ScheduleBasePanel( boolean onlyEditMode )
{
	super();

	editMode = onlyEditMode;
	initialize();
}
/**
 * This method was created in VisualAge.
 * @param event java.awt.event.ActionEvent
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJCheckBoxEveryYear()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxType()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxHoliday()) 
		connEtoC6(e);
	if (e.getSource() == getJCheckBoxDayChooser()) 
		connEtoC7();
	if (e.getSource() == getJComboBoxStopPolicy()) 
		connEtoC8(e);
	if (e.getSource() == getJComboBoxStartPolicy()) 
		connEtoC9(e);
	// user code begin {2}

	if( e.getSource() == getJComboBoxCategory() )
		this.fireInputUpdate();

	// user code end
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldScheduleName()) 
		connEtoC3(e);
	if (e.getSource() == getJTextFieldTimeEntryStart()) 
		connEtoC1(e);
	if (e.getSource() == getJTextFieldTimeAbsoluteStopTime()) 
		connEtoC2(e);
	if (e.getSource() == getJTextFieldDayOfMonth()) 
		connEtoC10(e);
	// user code begin {2}

	// user code end
}
/**
 * connEtoC1:  (JTextFieldStartTime.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JTextFieldDayOfMonth.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JTextFieldAbsoluteStopTime.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JTextFieldScheduleName.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JCheckBoxEveryYear.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jCheckBoxEveryYear_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxEveryYear_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JComboBoxType.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jComboBoxType_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxType_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (JComboBoxHoliday.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JCheckBoxDayChooser.action. --> ScheduleBasePanel.fireInputUpdate()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7() {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (JComboBoxStopPolicy.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jComboBoxStopPolicy_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxStopPolicy_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC9:  (JComboBoxStartPolicy.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jComboBoxStartPolicy_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxStartPolicy_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GB3CB4DACGGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8BDCD4573537EDC9C29B6FAD3DB529C9ECCB93134F1B58DB5B58FE5C56FE1FCDCD2B2DE9CDEBFE3129CDC8B4890DA4B109CDC9EA1A834C70C6D1D1D1C0718D0A884A5B9788AAA8AAAAA2A6989918830C8CB3131903000F642E7DD87B1C19B9B3B0B464465FEFF9E67F77DEFB2D3D765A6FFD8ED27A46D0E3F4CC3AA4C59BA57E2FACDA129C8FCB52274A757B916BFEB6CB4413FF1B00D6C8334E9860
	B9C06202330DE952140D89909E8B616E01EC63DA783DCA7A7146B977408F9FF2A6C15C1B177FF6423F1C7FF79C654453F0644E94F8AE838A81ECAA61F9AE8B649BF6E5F0FC9EE04B78EFC251B112B40D2679E1CA06862FFD0E258B0167C420C961A44D46DDD9BC5EG61ACA0B350C0B8CF8B4FC42A5DED1565BCDD6BB7C225A53FD99113CAE4E972C7DA4CF9531FE74F9C699EEA08D8E977114370BC505853F528435EDB50E132596CB6C56E68AE104D96456EACF05A7B94393232D9F63ACC10225AECF64AAE1745
	56F51446B71AEC32D58AFA1E687DF4CA824DD3129AC8788502DD48A0361A8961F0202867D177A7D38FF05D467504CA618F98FC6A5E748253F96085D577601AA0C36E8212FF5D2E944E9786710B01D839A6DC5D6F23DC3D268ED7012B23DBB677D96502FE4BF51353DCD9F91E83C7CCAED9DB2610DDD8A66B82ACD3E7AC11B991425300668AFC3701601190B6AC04FADB08E5BD38834B5AF26387D2D4FBF14CF29FE5ADDE484A583AD0AD6B5212A043BA6AF7A76A096F0C0738E9C0F30016G253F18E5AC864A247E
	EE2C5B894F6AF625465E5BEB37D5BB9CC72CE667A93BD936426F4ACA086158B939436EB4CB9273699756666B68035470223BBF93E2E53BA8218FCEBE771024A8BBE30CBAE51B7A542A18B61E077222DA367417085D1EDFC76CB68EF042C76A0D61716B895E72120A33BA7F107A94894F03382991E86716E528CB0361DEA92D28B4A6DEC717710F6D0A89F90569B06995D597E6632DA7090D67823E98A8E1D116B187288A28ED915A78CC5D3E21ECDC8F3E6634192C677B5A9DA627F2244FE2B54BCEEE6B533B7C59
	DA0F98DFEB40FC4CAE1376E96BE87E23A53AF619BFE9FD4C4DC54C9E639629F6E1326F72A9FB6AA2EF5FD8A66A70995AD6E6AEE2F598AB7005941F2741D95DDAA9CE4291905790897ECD53BFC55B5614C816FE3548A702628BB5B84BE79F45C9B86355AC638CA0D63F0FB5103E5571DA16F1AC50C420E9C073012200D2DE47BA3E37EE4FB05BD12326FE996F797AB57014879427295E66D2CC368E39596434185A2D32CB62E9DA6B09DD5B5D78CC34FDF7000C6332CDF61A940B5D86391BFAE5F0A697CBF335FE85
	C96314E9EC1325D786813D8E8973F5562F02275564D2AEB84CA6C5D6D330786B7544A72E19C8FF8E99406F5657093D5ED9CB7A39FC78DD77BA5A6A75D3848B05F018304B5F6AD74273A4B837EC2D2C2C35F490B5CC4EC174511757A9701C8D698B97E7994781653F11E51C8ED47BA674D9C00DEF419328F189BC019A7F86CF201637E10CG6A7EBB34BD2001A898D75F49B28681995E05F68ED47E8F488B483C945282953F17E5DC88B47E1F58873C56023EDE1B7A20147FD4312E2F934AF81F79ED617B1E3E1E3A
	1E14218570812071C0E1C073002200B224ECE3B9D08B50G50F820B020F9C0D1C09951908F5482B4GB49EA88CE89ED094D0C68C448335G8DG0D878A831A8744641BB266C4733E6A1F7AED0B145FDF3BA7B6A7CFE2AB4FB8D2AF7EF8096D3D5A783B2CAEC91D11FAA175C96CCE624AF5E40C04088F8CA79D7111627754345DBA7A7AA262E3441FB05C48E592FF25BE73A673ABAF5D5E9C1E8C097B2A60FB0B7B78DBB8F71CA76AF63F0FBC768DA1A311BF0BF4620CC370EE5141F6CB2C6D123EF29BD0B2D0850F
	5B739954AB214CE1265B88D42689EF8AC0C6B6D01EA63C0EBFE379134CAFCBF478168FB37F9DC03BB4E1524F2E25F54AE42D10AE1FA1E3CE9434637458ECE3B1906BB38BCF64C8F4ACA113CB9CBD4EB82163174DEA8F4A526EBEC974112F49B625D6F648B6B37CF0713E3B78A429FBBE2EF45AA56C73ABA9CE6699B550713B84DEF5F28543A18F6DA80571F5B45E24A8CECBBBCC724F4B0A8273FA153F116A62F21B4238F8D92FB41232B6C0994DC00AA86B1FCE923B607850E0377774B91A484847471949F4BE9D
	8C69C3E3313F8B0FA56B2B99A27C8A8D2B714E58164F4087C97EFAB813F167E7A2A356874EE47C5910AB31B69A4FEDCCECC96AAE197B67F26ECF2B844FEB14E7A1681EE2G1F82EA858A821A8CB497E8A950D6E336314108762AB004EAE423BCDFF2346DE5386D7433A0262B59CD57D82E2F1E1E2BB56992B97F6725AB736D598D3E5B669F9B745B661F9A745B66F38D7E5B5E4B8DFAED0F453D56C0ECE46F37E95A72DB8DE4DE56E13759E45A218896092D07DFEBA2653058AC4AC50B39CBD64EDB2E4B12B441C8
	76CD52B2C81BD460F7B0901BC775EF41F954566B5F1326DFD92E3B2E9B7FE0C1CC3811352BA57CC966D1CC27A527C89FA1DB65DEB0D40D3D4F26B07CDDBA2F6438AB16E2E5E7AE905EDCEAA53E49C057617930FCF758ED1032A0E7776EC3B9FEB7A272BBADCE395E666863335F5C3C663C3D5C2FD6C95F3634D0993516EB96B2797DCC456CE3B20C162FD19967D9B5F076738E8BD40CB37F1A495AA797507FEB3ACD36AE591CCBF6A7FA2CDD85D7BBC8498B7A940B15A5A8B8D153CC1EC7093F650DCC29223DD876
	FA4BEDD42F8B103FC5992C2F7DDFD3E91F280F953B86182D9408BB6E3477B9CE43DA27899A51B10BECB567F740482594507FB97FD553B553C0012B9F449450F6D8D0C3E2B57A50ECE806C368D148F4786905CFD49DCE7775364B4E4F48B2435624886DD11E2CE8F4511A22E8F4ED311749FF7810AF79FBC7D7BEEFBB7798FC495FB73A720B197CA7ABFC49AF9EDD79A5CC7EC63BAF79A523AB3F1449EF337A12DFBA3A724B18FCDB43A015FF4C6E143B0057E62E31DB6D4E9AFBEF3B7D08FD20A85F22483D8564BF
	1AA9B6CA22C80129DF61DA54C37CC814A8977D52C339FE7558BB3AFAD488BD0E49577D6931EFF475A8AAC4BDDA57785523F81475907D631155FE75A899E5BD44D8FA7832DFBDCAC7D90FFD2847250BEC7CBCA15AE9F53B4BEEA553C9456EA0BBFFA3EA36DEC7A17A56E0BA7C5FB817078E48CEBA1051133F175B20F75F77187C1AEE3923872C8F99B987AF49A6E73E094E408A5823D1F6F65A1D3D5E55D0CD237D0A3F6A157715EA0FCC9BFC673A1F8CF022CDC72D3966E1AFD2CFC7ED0AF390AA5F290CE20D893F
	F9387A260E8E1F3F6F7C685237F85D711653B46810BF4BEA53E49BE80D95F3DBC95B9D6EBA56592D9633E97033D35377FC2073EC1D3BEF571A86EB3A6DF617AC1CFB78F972B13EB06E817772106AEE04B2F5FC06C53A6A1DF92076AF6376CFECFA50D3DFE8A523283048BDD00D557943718D9FFB34AF2838B31D276CB625FB74DA9519B7303D397FB8CB565D69F15946DC202AB85C1B3BF61A44635E9C5F0004214B4A562A90B7B10E6C87FC30BEDD3346EF81ECAA3F4F4062EF9FA27EC7C344BFBBC4FCD226DEFC
	A4BCD97C1D3A71D2BC4627E46945270B78FF530D4F95714B3275628F08782F6B46B70A78348DFA71E6917F8D5D7881913FF223DE7CD8917FCD5D78D0911F1E2397BFD5445F259BBFD3442F592497BFDF44FFCBB7FE31084F582C97EFC84078FBF463557AFFDCB7BEC3709F5B22971FAF62FF2D9BDFA5626B366A45B70978D93A715DA27E44B63D781BA27E373A71A1A23EE13BDE7CC4917F04EEFCD88236630EB3E970F4499F7749368E19EC2E1F148771FC784CCA0FB83AAFA14E1D1DE7485E2AD533AF4FF039D1
	FF2F2E27116C4577087C6D0DF192B9BFE6F9323D45A9A6122743E969B5B98749C1833F6B744BDD5A3BCE33C1FFF2AF4A1018ED4CGE2FD652F689904776D9BC91A11C8EC11EB443BD005902E836ACEE479CCCCE47B0DAC5DA211AEAD897ABD203AA416AEB8C91B6E87F118EE9E600B0152127572F346E33A8608B783856926ABC940F453C9BCD094CFD71E22CD770EC8B7867071C0E1A9FA797DBC9153C5C1FCDAEA3631B8D5AF5D35A4CCD78771EDC0E3F83A69295AF4154942AE4B40AE4B54F4F54B3469DE9369
	4683BE85E84EB2F739A94BC93A9D99F89FEA0F408ED1ECBF7C57E340BBA7275234F7534C2E9D3A7B47049A17337C4D4B557DE3B60E7D7A9C49B78870F14B51777F5A28BDDF2AF6396C9D96FA95027B7178335A3DE506FD7BEC92BCE148F4A975B633BC00ED610133C4D7F2D702435C1F9F59F5D0723E7B4116E5F8FCD753CF4767A6FB0D5DAC57C1F32A91DB6F4D9639DFC2BB5CBA263D67B6EDF9D6CC328FBBCC62651F2931433812A0833B07D61D09F6CFC883DF2458E3822B92D8CD96E283821BA130A982BB1A
	0DD80440FEA5301C95089D5F00D80B40E68AACC4E0759B911BA9305F88CCDA0958499C444A85B6DBE08E011D5A0458A4017DCEE06182BB3399310CD508AD95D82340EEEDC1ACD8E07F9458F401FD3A9531A801C95B90ABCCC76CCB826B96D84CF644C2857695014D9318E187E2E92B3379FD4578AB64FE155EFD452EBE8B5DE82E2C2CB5A9A6BA6923DDA44BEBF7FE82775BBA480B5DC3BC3E077465E3A0BC9EE88A903B93F5561842534E84CCDA03634D76C26DF8D33E061D4D362D41BEBA4CC85AFA0093D75E16
	E6642DE4ED4FE33A0A6D637ED5D5DC6E6C7F3AD7BA7069FB51FAF7A303174747A8EBD83B1830C6ED9F0DC18F24C6DE3A0D5F85CD0F4372C5C01A1C3522FCE5EE63A960E3C85CDAAC5F0DB8F2C69478E2827B0B29A72B6179AF6F92C8F8F7ED1EA8C7986838D814A336C7DB0E5C8C988B0146E6E0B98E470F241E184C7B62D1E6A864B7AF83E58E16FA4ACCDB87E352BA149913B0F2199FA5204CBA48EF4CBA1479085B7CBCEC9D7347F0A1737104FF2D3EAA638F507A9A7976G53FFF3A26A3F84F44BDF0F7ABFE5
	74541F5413F9BD6A7F5544116A4F643EA4648EC01ED30058FC6BE219F63E95311E79F9FEA62C81B3D1762924F8D5B64F6F3BC918DF8B248B4944F2FCA753339CB3A1AED26495177C2F55C3F97391EDBD0CF833G6D52110C651032320D65D9D80E31F9FA756148423E7772119AF7BDC63A874075D81B02FA84010CE9C20F34551E7D6C92084B48C6FBFE12B21236446FE16F554E372607E77A1CEF65E7337E33AA5BF33E75C89399CBDA81F7E463FCEB43B9B2BF477956B9186118ECDD30EA90F7A24E915DE1FD40
	43F34E9139F4FDA061FEC44485D26EA048B394A88CE88E50E2A1636279A16FD39F9D70F31F7AD8E6A0772253B660BD19DF874437D57055E58542D7AE78E6854457A078CEE4874257A678FE9B901FA2789AB6844297AC781E8808EF0260BB3DB1903EA9026F7781714D90FC0DB901704D93FCCF864497A9784EED8A04CF5A08FCFF8C08AFDD70B5ED8E04AFD770C5EF89046F00607BF2C0FC0D02AFF6EBA0FCE6419794905F0060B3EE8B04EF2C603BBDA03ED041973FBD903E2902AFB8A03E1902AFF1C7A0FC7385
	5F5EFCCF3E459B553B12069C6FFB136C5D0B2769BAA3836223A5F6CF0F3F13C171DA8D4E4645D39427F7D2A1EEE98E4A3FE874149F3C49DD66C40FB063133D788ABCED634147467BED39E42F032E35B4C3EBE5253ADF4F56D6178B93382CF048070DE507AE925E0C4DB08786EAG6A869A8BB489E876E69C539EBA2F370760BE26795AC0D06F6932F22E0F9B19FDF23D78B6F804A3B76B5967D0F3263EFDF005437777ECED5A7926E18B1BD76542734096DC6BDEAEC39BB6ED417AFEF60465097462732C6F31DB74
	4A33B33BC89AEAED2DF39EAB61BB1BADE51E65A46B1109708C93652C6C41B57D9CD14E6F450F2C1CBF706273ACE742D6F7BE266786AFBD49FCBD875296EFC5BD27140AF7B437221E6604116969746273742F202DFA7551E57565DFFC864E5F3DFCC16CDBCD903A66A60ECC57D2AFBECF1B4E755015691092077BAB11C20748916A706E10BAEC5D26E72F5737177973DFDB8739E0625EC25513E2DE0E2F53F6C8568A873661BE51DFB2C9FF2CC0F8AC5044EDD83E8713C6D63EC73D78BC7DE15AB6BD3F1D922F573E
	66C25A08ED6837CF093DCEE9BB6AE9C99E191E7DDEFC1EFA16EF577305DF6609FDC521C3F64A48F458654567698B415B75EC35DB713495D96307C25A295B451E6DEA54F376F69C37BEE9A118E1C736B1FD870ED131CD640EBD2E6D9A6D969B397F476226B411F39E3B53820E05580FA956E1F7520B678CDBFC41771D783FDF503F937F5E857DBB71314D7E5FD7C9EE76F5E71E3DDBF2197A48D6A8DF9590431E95D813402EE4A156AD30F0015D9418A99B3190013DA03009826B5800D81840968AEC3640640D0805
	8B6CA501AD91D8D78EE2893908C588ACCBE016CD08958A6C9501558A2CE7B3E2AD824B580218D5E07788EC0C4056EFC5EC1C406E9358A401E5EDC3EC1A403EAD30B9825B309D3105827B2E4022841633833114BC446A69DEF78E040B8516DEC0309688BB7230CD7EE5CF8EBC47C1B88CE88ED0A410E1A70C05C0D5C0EDBBB16DEBB4ADB9D78C82ECA2500C1D6C9C0F4CE5966EE4E3A8CBFBFE4F98CD5B433C48EF12BF1127ED2F1E543653FFBC21B01E0701271D2313A753651A1BAE782E8C791DA879FE8F89E945
	9071B87610E732C62EE71AECAAEB561A65345D3ADC320BCEEA49C1850FFBD9D9AD693C17C2AE87CAF8DF665F69BBA7A44DD145DE33CF14313D907BC843AEEFBBE4G166F0173775AAE7A6E134EDC546F13AEDCA4B6F4597B1C9D32E73F53FAB1C3442933F4F2FF1394031F1FD3FE45646C123D7AADAB65E7F13E787BAE7A6A5B180D4E46E9EDD4AC615C602DBC12374EDCCAF3C674D09B4E412BF66158BF21140C7D83908E811A348BFD3C3DCCBBAECD67761D4B1F91BA754074DB9D2F550F4C377977B3683C0378
	50D2A1FBDAB911DD1C8F6BA7A0F3BE4ABE5C63EF7DFAB35F176CF9EE32778A594DE5B8F78B49C7590BF2687788A09C8E94A5E47F38541F6C345D3EE45F172015DDA2FC77E53FFBFDDBFD66F7A5D11BDF2948EF85DD7B146B7091EA70195F16A4EDFEE5A23FF1221E5B00D771608F0670848F0C2D6D4FE6516FB06CE6EB7BE801FFC071E99A1C2D7997E46277D9E6C2DCFE816EF54FF7532BDC54D9C4BC29B35216C28A304EDE245F81D9826114BD59462DFB304E1E713BFFFBE00FAF1B04A6EBE5D7881B4C4C7317
	DF234F7C1AD212343EDF08E5119574BF739EAC4B25F4D21689901E8AB4DB1425E135BF598BF5E433FE63ABAD443683A2FC878D8FCA58BF4855A4AD6BFB0E5A4CFC12476EEDA8F4EE74FDA884B93FE4585FA8A69BA46930402E513951E5200B86447ECE31A701F68BEC004E0DF6C4EB533DC33133B15AF457695C686FEE697EC1312FC6EB535D24F32355C62DAE6FD16CF1B76C93BAB73AG13D30B405E9758A3829B338931C5820B5E0C581EE8443ECC31F740AE5131086D21F323FBC0B7FB8CE2D3A8F69BE03789
	5EA2BAB75A8658F1417BA30A1D856C9EA1F79F1D9B3D8858FE41BBF59B26FBC7E0A5F4EEF48B30A7045C1FD06C9140DE9479155179D2B5E0BF0BC63FEC4BA773F52BE9505E87F5EEAEA4697A73F17D90C5FC9230F22006C266DF4CE7FE58CF7A6BCE2729970612738E39C32AAAA23C3B8A10F7B2241F8E948EA4C1DCCE91366BF52B4937CF745F86C03DEE59C9FBB951E0EA172DDAFC4711E5822FB1A9F2171DEC4230386D9F2BBC6440D6747DF5242FF03BC1AE5A25639A99D359C828B95493715FA8D92165D5C5
	72782454359AFE3B83BF6A43EE2871B3BD37336A60A236F61DDCA46EFA5A7562270B7897F76B454F95718F8E6A1D05C794617CF7106ED1AE05F046DEB11FB6601CB8DFE03FABA658CD880F5B0BFD4EA3ED5867CC5A4B6AFF5ADE351F1933573B4FE1FDFDDA997D664EDE5657A78ABC1B6252BE95E7E3407DF42EC142D990B7E61F501D0E4F8BA13CC4E05FDAC93004E2A8CFB1E2CBD7E2F93696236EF7394DD39440030BD5FDA7406FA9C0B3B49853312102FEF72858F34F7AB2458DA51EFB560F15631EF5A144CD
	ABC11D1AFBD0273AD2546943B24FBEFCFC29AAFFF229AFFBDE59C4E4CCAFE53213855ECB71F08D4EF4FA034EE1C8D8AA0379D3996AB43B94F51AA930FFE6A116D10ED8AE5D536A06709801FDBD8E530D9558A334FE66C3B8CAE0F75371A125825AFC85E2E95948DBAB30A04ABB8E4213AB44BEBF59BA67E3ED1B6677DFB3BF0BEFAF78A2A6A3A6EB74E53C9A2F15B19D4ABD37C22D73088A7D395BD29DBC2D92FC3DD2EF7EF5094E274AAB19CF448BDC26F82386E73E32084E1DC8389B62E6D7E27D3C1109F5D638
	9F316772909B339F6B6C2A626953F3762BFAAD5C6F4B271F20731C287DCC9F234067D1BC65000AB3BD2F24631D099C088BBAA076D6D623CE9187709E5BF773F1CED9FE90567D87719EC7D11B5B398E3926D1D9F95CE9B19FB1F5B550D1104D4BDE267B8804FF52C11C172D5ECD5B9A042388F6883F03B0309D6FEFCEFE68DE29E1CC096EF78A431B32E2F28FB1DBB49CD26FD52415627D4D3385A8B39862279FA2FD7B27855A3E1D0CB9374532FDC0967FC337F8528711B5359A3F40AD1E68FB540DFF759EEDBC31
	D19E67E7E57B6DB6AC5B525FCE122CBF5E62739B0C8907D9197279B36D71751261765B8CFC8D5A69E38DCAC7EB3EA71905EBD073E1F10F540E5884016DA8C0EC2E40668F62BCBA258A6799A105C4D707D36E141DCE594CBEE7A15D2CA2657ECFBAA656426FC620A5947B092156CF7B0D75206940B397E88B179B813FBB2219ED187C970BC97F8B93A4CBEFDFAF154EE43FC747598355B0AED4238FBFC6575F8A04C384B611760F93A19CA630AD95686B732B317D2DA9A3F77D730F409C8D289BA8788846ED21F164
	0E7844A36C4EBB39CF4462A615EA7BA2645516B97F08FEFFB4942972FF61A6833FB363E957114840BDAC2867B2727EC1275D26B07BBEC46DB683F418F384FD613FD612B48ACCB9259A180FCACFDFA15E4D6AFD55AAFF750EBAE33D4F65753E0D3703DA480FFC136A3D775FFF1FFF3F288C473F469A2C37EF46507A05F03040A4B1871BAC309B9F51399A0453EB914BABA1D8AE042BEA45FD110A9CF8B6C1F8GA884E8AA509C20C8A043D1989B0EE25A8E1A368E425DC7597B8C41C7597B8564DC005C771FA4524E
	AC9F434BCD72A3F9F85AA3044BA4F2087CC06A4C20135F9C1DBC18AE0B04AE09127EFEE4BC2F1F549178115EB73D12F5B066A33DBDC37988923D5FFED47591024D07F0977797D627CE5136A30EE2BDBFD30E7E10F28C6BC3266FD135C278A650F82099C091A25EC5638D47212E0E33F7D0EA4973B8467FBD47F3CEC37871774DE3432F3F881E36156B2156D35AA6CF9909123BED06AB836D9FAB297D84337F0252C06C9FF45C5D7E63A1FC9B37BF4BEFF576D0FD3D364DCFBC6E5E5707C178E9E86FEADFFFB80E68
	2E586D56A60B032CECA5564FB41BA4A17321B8FFB2D3B57A931A61D106F99036CB5A716531B25F635B1F593A89F8969F47BE7017E5E42D5FEEF7520DE736567F7F1938DE4F2A4BB69683F5835D2CE36F95B13DF78CE9AB2D6D47816F24BA26B789CF035F44B6FF81FB717D50B27DF171D12A73CCC8BF378E5B44728402C975509F56A316C03FA1DD8E6186017525924C8161E0012D5FC93089908E9318CD4CE9E78B4CCE57C4D9A7207CA7305DDC21F365BA88F78385893C076264DD2A89A758BDF7063F31DEEF6D
	C0F8076B7BF5BCED108E8F1311243B868A24FD45EA72536F67923206EAE75AB95034934CC7D77338B9903EC352363337737C6507ED8C477279A75CFDFEB1043FA7E97B4DAFA958EFAEBD017577259BD827B9A7453D48F46A8F908E91583394A36F2DCD92181C0EB6A5E9BD758B514182A1A66393A1C3EF0C8A247E740859797A6AC0662EB3CF3A575B7C13EA5F426FF7F85D779BDED99F9DA1DFE440FCEC2D78B2DD13C51C74BCEBD8CC71A5A7BD4F9AB2F7633AD0EA00F132816FBED43413FEF0A6049782AD85CA
	BF857D81D063A93C8B11F229D09A623EDE135D51A0DF132D1A2B892CFC4D85A37BAE77AF62F17DB5752777CBE137AF087675EE2079946FBF78F352AF57D31C15EFF687A95FD4081B833484A865B43497207253D83E26CB792CFC64B546EAC5B1F5F453B7A431F06425C595A61B3E7CDC426D9C2B61B4135F461F4AE9DF7D5993F6ADDFB0CFB701BF2778644BF733658C1EEE9EFFC67A64FBFE50DF9DC8E7204E4F387332B17CEBE4D865E36EB883196B5B647E9C7116C72D854CC13E9518DBD4D2181F3337885F37
	886D573EEFD11E3449677B9639DC6E817E3C7976FA7A1DDB729EAB9D7F683F45073DB154719819DEF2394F27204FE4BDF21FD47B740268ADBE64AADC5E0CB36AFEC4DD7A9D86166714EE355CEFE58E275CAC6D1F5AFC4FCB5E246B5C25A0AF219167A5BFAB73BE0378033827D85C484EA09A6059564856AC2C4F2B2C984E9C8E57868340BB36D11D1704B62AFD83534352CDEC2BF7BF0E1F2FB7265178C63B630203FF33C311D91C523AD24BAB5E6F433C3F5CC3F96931007A258F36FF9F62F6BEB01917B19C1E2C
	9E4E752A75F0674A4D1E75F08CF24A5DEC36182C762E4D79B9D095C5FB735097FE7F215687536ECD0E41B2FB0DA30D4C8724332AAFB079BF359118554BB3EA3DC03A8620A02071E759DD98266343B15E75790B98641BF2165567CCF84E6732D8FD2E9DF27F8567890416GEF42B9B6A7A761AC78FD9F1FE3B2BD7E63A37DF96643F40D1D8B690B4F214ED5A5B42DE940A36D863AA6EB03F4D611763E86B2EE321DABFAE6C42E83FB1C9B1DD2D2C41AE3F6E72FC9E1789F13099DFCFD590925C92FCC953C7CD3C2A2
	5F6CB666036EDF9A627BA0D20A64F616453F1BFA2CADDD4B23B966E2713BAEFB16E7502116077968FD951EE7D0243E471F43B3285AABFA7113C57C3A1BFA7153C57C1563FA71F34F313D954FFE107965DF6C2ADF5EA77CB2629C73AF69BC746767357E75C6F9A06B18FC602DBA4F66C8A45C843FDF857FFAC32CE35E3F4E7A8B72B1D0569D7431BF48406B6A5A60F2E1576AA367199BE0FF3AE503179FF8FEDD8B6B7C016BEB54FCFC247963D655E7CED9EC1042A56AEE125B37D85A4E33F54B3873E87B85E51E36
	A77113C4FC1C5779A5091FA662FFF3DDAFFE4EF9FFF5F714FC7EC8F70CE3713D0A7F7810BE9A243F9FA51FCB437E515FB8352F38A2BF2734845FADFEB9937F0E48C250B52B894F880CB9E40C705C2BAEE08B674A4A238AB92FBE4217517C9E471EAC5C3BEFEA4273024B743E4BD888CF841A5624EF8F5FE50C6CD74B38FCD0AD6374E115111F09A7F82F798FA6E0DB195B447A70C8F8CA9758BDC64637B1453B8FAF95FF17AA6382EBE305702C3D405A98639B1B2A5F0FCE246B73D6C85BFD81E5946D74BDCFB8C1
	576E63A0ED68859C6FEF4B9C2A7DA6CB6A78B09B7842AF2863439278FD8B1E7D227D5EDE2ABFBEFC076E87C84DB0C7EEC6DD5FBE465A3A57FB483C5CAB5353A4358F45C896D7F31948D16F8838709BDA251E6D06583F3C59DF3BF1DE775FAE6E3AC1C22C3E9E9677409B1AD9FD1961B9504C4EG18CD475F88E45D98823C931B55B9D4D833679CAA041EA769FD550C456F7CB0D95829C8316FAB6236B8635507909DE77835C59879C4A11E2B6ED6FF3F2D793DE977681F69D60E2A8C36B6BB526E7B3EEAFD3B7EFD
	55B36D7AF768AF347B7F2E7C65F65F5F15B737EB3FAB4F56164137C85D4DA3FE8514F1B15B188FD4F5915715EF3613B9AB79EBC85EEB4A2366AEF2DF167C85A48565BF55613B2C73BB067E3BC9AFF610FBC06DF6C53177127C91DFC4572B50GA9485FCD68A0B6F2DA3A3A95161463EFF790FF334A1D9466674C340FEF05F2D9AF625E539FF289B68642A182AB93E764938436500E3C11823B0D1EC1CAAD607FAD62EEFEA172E6892C061EF7DAA1FCD3E04B683B9AA1908E95182BC51CA789ACEA903125823BC06F
	CFB6DC027554A55C7FF87093FABE856110CBD8EF3F17495FB2E9B6DD757E3A91000DCE3BC3F6AA038C25DF90637E707C2724CF1982794C86DA8C14708114872898288E28954881948C948AB495E8A650FC20C8A069C3183BFD08FA5C591567C78FFEF8CF1D48E9E26F27307E6167F41B0775BB771465C83E474C9298B30B8AAB72583C605DB25CA34A859D5ABE44B366A365B8460F7F9047F8873D7BB3874291C0D2EB20E3FCF88C8931F907C55EA1E95E6152FCC43E13F4256455ADD8FA763125A71FF77CDA3C7F
	16510AF579EFA4487D786E5EED3EEC872D6F845862CC7BD539C3E9B2118D84D67E18F21C97B5C21E412DB8AFFAB9BBCF9A6A9D49A60BE215BD66C6A74A71ECFEFAAB5AADBC1A5E7DA0614B59465C4BF8EF632FB1E87BAA4086AE236D0BE25176D3AEE39ED7685F010B0030749174BB9F85EA7BD78D12701534B855D7B6147871156212327C1C3D057B72985F3EF8156F3B654361E36579C3855EE1A87C884BF8638AE25D82EB3C09D828406EBE0E583C0F50EE3F94BE1BF6855A5895CC1BACFCF64C9534DB852D5F
	B0884F810A3892285DCC892A4FFED23AFDA81F954BA374076744B73A24B654F3FDB91629DCE08745FD90074022EFA0B6298D7770DF9D729B9D61EDFA6F577DE3C8BE4FF77E98DFF1C05F68A04476241F246B0125ED1EFB554FD0BC416439D75D1105F51A8EF183A62CEBB9815B67FC40525B51B65FCF40F656500EF5FD01FE6FA6884293002636E39E9F25E05E3381B3F4E09E8F25203F9C6840BC6652348A044782CD6C40FD2920C45577176F74637B7B0A4926D4F989EFB37FA7C9656B489C8EDFE07E799BFA6D
	11377194D5564C754311456C700DD27433E99DE833166BE833A500651B51E6215751E6E6B35A6CF7B46D8488CF851AED8E340D259137616D65766B284BC2B30E09A137FC4F113EF5EB68B9D268AD12278CF39B3259433087EF5177B9BBBBDD32180BBDFCABCDE0752EC63B4BC2B6B818BD2FE7395F3B89216DB5CB86FB4938EE7AEB2E7B3D1BFDC4ED3E9FF35A6F5920675A836F5D60DEF68B4828663F197CD48711EF865CA164CFA8F417EFCAD365C7978DE7BF48177CD0196D8D29EB1F8F8A5C6D612073364910
	AECC68332D45DD1F20952ABEDFEB8964CE0227BE91A023DE521E3DAE3F9EC87916486EF79C92BA330D8F385DE73346B31F31A84415D8993F920FFDF9FAA77A66431F107C457A02CD8D39BF7D709332D6A0FFE34AE232DA2E536D3273105056457FF668273E7DFA6927C37B35D1521F7BA7CB5EF37FB4C9FF6E3FC6524E7D9916C9ED5285F34D9611AEC7E01784360D66C9300B963352AD70DDD4AF025749C4A062C5D42FFE0A35F02CD403DD6258FE0934CDA8F237DD3CD7DDA5D1FF33D82DACDCCB53D8EC50D405
	BD6A290E9607C92377E901DD12F0CC134AC7F6EE3BEC04FC47836663FF93184EDD36F6FA0E212FD23C3053F38C3DD60EFD7681088B6D44B943EC3FE338214B5799E24210FA6B4FB5568C4927BF57B8C379B2F4745123FCC8476C51C46751D5DD1EF63ACC7106AECFBB3D940DF6EA0138E9DDE82757E3C6D63F6F0D102FB4F6E4FE71C73A96486976AC6FFC0A67F7FB16D70E957743A1EEC2B71677698A2DFC49426C1E4E1F3996DFFEB1660A166FGCF57481FE61FFC97EEEA7986F83A317C996A136F3E63DA3E29
	BC5DCC7E1C6F13EF16577BA7432B1727C74817B642F67EFD5AEE97DBBC6B73A794DFEA712C4F43221DA7DC4DB6DA2FE2FDAE747BFD34B9D7FD59E9231B5E8BF93AA87ECC697145F7442DDF4961690A79334EA7DF5C8DADDFABCF67604FA09DBE766E7C74D5E48F5DE233DAECF28D7B2B60EA1DE95E1F89577C36FC8E6F39FC79F310516375EDA1CF526F0B870764536F0BFFC479466B54059ECD6E413EF896DD03CD6F717465BFD0FCF60F27AFFF180C3EBC8F628ED845B7183C3E87B3BCBBB9C74877C840FC2CDC
	F529C47FD02BE7F94FD2FC3255333C4F0835E89844E575E2F96FF6FB5FFECCAF337BB87E1C546B2BADFDF4FDE465350E106F41007918BD0E5C206F4377FA5A69A445E776FA5AE92ED8FF4E0538F29B5A69CEB77993EC7C7E94FF4E30F95B092DBDAE1329B81F5B7FAAF7B877CA0A7310F78CD97A705F268CB51F4142407289DA2766931E2966935392D8BE4BC8F76867DC2CE8031A773D71F48D666C13197DDEA1D7E4F8DD3E2579FD33FC747B303BC6D5865B6FDFA05E6F1CE743B300CE3A5F16EB4FB6D659916B
	0EA6D893043B6D68DB9F44287668507C0E0C9EFD5B98E3C6DF461FE255B23D20795D73197C2DEF7F3203C6D5862B5357AA706CC89175FCC78C1E9D858BACA286FDE41C403EF585F9978A6C672B11B7CAE09B56A02F410118156EDBB7C158AC3059F46FF6G424182AB3AA9648A6CC7F4FFFBA1041788AC057AF0424759460C0F917BD87875560F51DF9F55345FE91A5FC7BF07367C516750167F31894B2C88BB145236BC8342F38566B8C4308888C7896C29C3221E1C08DD4AC25EA6016D6CC55EEE015D59AB648A
	AC1B56678C884F95589AFA5E988161A8015D90E7108697E23368DEF593042D827BCB92BDCB0570B81778FEF332DA0773B43FCD4923DF1F57BF879927D355B2DD547C8ECF99FD596F0C2A8CD6275F277B6821D01FD3C4BDFFF2107A8D04678AEC41C17411F0D177F5B7D4FB1C557CFE667A685B662DD115414AFCBF5D57AFD4E08CD6508E1B6979FF93044D823BC35C89F0A8F8EF67DD3F6F69F86E95CFD75C5F2B198B610B12F6EF77D6B95937D44869AD19E7C93827FE976DDB42A1FD2402FB581FC69BB1AD2994
	BA3FEAA2D3AF4E3336121E8374E59BF37B702C28BF0744B35D5F0F99493EBB3EEF5B52477CC35D771FCE47A9B3608EA16F5ECD2A3C12B57E64A58EA1AF340F6D093FA76E0DFD65267BBE7FBDF48C1B8C69427A50C68BEE386F737FFC332ACF5DCDFF7AA48F21CF8417216AB36B383BBE4F5171F3893145B554E7CB163BBE61DBD4FD020774A5ED1DF86AD3F80D5D8FD04F9DD6EE8EA43F83575CFD339142336039C3786629F27772F5D01FEC05F45D22FCF79CF2AF5F32EDEA79A28F7DAB75BF7E1ADA7FCC7E1769
	18B99170A957505F0A362B726E6F9D29FF93BC7C9A7B2E045AB60BEF38177F849DF7A3A1DD14A87F6EC17772B76DD075797660F05E4173D53F397DEAFBE3324293747B0AA8BA2697C37A2AFE54EBC912F7DF511FAB093CE6143A176D99BADEB8007F2648632E036EE57B6EEE35EC6F9E9C4999A21E5BCD6E773475FFDFF7576777340F8E03F4B304BE959EE70ACF94287AFC27B01077A7BD75D982B2D2392F79DE4B5EA81404AD976CD5ED599ACDBABD1DB5F33593964D30E4AE42A5B363BDDC22725E0889EC3D5D
	DB2A6AB02BDC4D67072B077BFE8A3F63DC216653FFC04DE77A0D4072F970201ACFF4151A0F1495D839DEA4A677330F30CA336F21E876BD4C078253D7DE2F66B3BBCB4DE7C3EFE07A3E1E2D66531C236613B49818BE031B54FC1E5A226673E4D2E0BEF5E03B4A6BBC98D8D92E6CD0F578D51E1A4F1AE16DA929E5796BCE423B1672BEF8622B4B211D3FAA9995A9093E1515C3DE4BD224DC7E6ACC0E0BFFFDAE274FA51BF394FB0EBC50E16DB34BB99DA043E9373A1C52CA6F7BA2557F7E2727A7DF29CD0F11E26A25
	38EEFAD6DBAF997B49216FG79F36044CF6E865E6502371E9E4C06DF5BD7993B6001589849G0C6C203ADEB21053E660F732FCE2953B0366C2F6DC4EG110D3FD52E0F25CFA802F9273A5963716F153CB47B59E6D72C94D7AF2DA3DD58F959C9CF59E572221A29D9F6924D0FC9098E7205C7F2619D843B684368D2862DF203145EF90E7CD9D817A21B2B717C5E25C82B695F345AC32E786D29B3393A6985007D8D1241E66A1595E9A50B361AECDDFB58E17EFE2AFDF4B5ED09D4FB8974DDC575A5399408DCD67DEC
	7936CDA7960645CAB14724A42B5DE4BEE66AD06C4EFAA9D169F64A2EEE3B55BC60B84CB2CA68A7AD125E72076CB2C571C9E18B481DF321F44F40374726C6249E83F38DB825BDB4A569318BC48AF3CD37498922E4E7BD1089C4EE95F1DF5A20ECFF62785A5698A91A971218BEF14021C8F11D26DE0BF590FE54D26F2315122A0036CE134DC57E8498E816632199C68981855F1CD5F857FF3E7B81952032AA52C6E6CAE05D53A55BFB77D4F7F6DAEC3248G6C8A59E70B6CC91A820FB4AB873E317A44D36F37039F54
	CA313D0505747FA27A7FDE72FF91C50AA8D234970C3BD8727B4FB3FEG4BCC1DC778B8297E02E3D0034AB32F4E3A7F4F8796C7C2690EC9C67A073E20925254D4277BFA5BE5676D136F4ACE9E97FEA729A387F11581126F8A16BD99E2491589B2BC1FA73EA450B80DAA8601622B9F64F70CC08D3C7D3C82E4F4C3E3B8450AD6D58DC2AE0BB451DC0251CF9A4C63141BA6311C73241BA6924F137E9679758258A5526472B2270BB4862EC182A723607CADF04E5289215D48F443A5B4A0E97E9B52B4690450FA5EB25C
	534470D21091BBD6110C64331C15607878CDCC78EDA41749AAA9871DB2D637D10EE522BC495E8D19404BC5F3A22115B4E9BA7DFFED404EC93856D15ECCA21E06AB865CEA87E4C71FA3F67E62E9DAB560662528E97C97CF53632A26F1DE1AEA5B9E3D2C2AC8A97455529C76E214A2A533A0F907919CA7BE373B3B3237B7CF119278388C608A7232D48EF1A94E6516B00945B27E445CDE7652E39E4D99A2D00EDEA68939C5B93BF376956589DD93F9C969E2C0575651BEECEDF037B5F60DF16C7A96339961991DCA78
	F0600B6798E6AF47207F0C9ACD19DEA97FDB1AD671F04F001B836057A6633FF81ABA5DB5A5DA46C8DF48EEE1503D7631E12983A18E2CC47F04AF1E253F246ACFECC91EE429EB7C62D9BAD855B41527A303DB74974F26DFF79FFEC94DB782A57DAB9DAD8935127FBE9A9D6B5E7D856CD9A728F6B4F2FD08AD8DDF3C9AFF403D46F182CCFE339EA16FD36DF7C922EE0B7179ED1C5AE0F6FF25A5D87DAE89FB4FEDFAA3FDC79C70A941F877BC2D11EC8E7AFA5F6DFC2F49EAD5CC561EEA1B193C7BF6E410FDA70171BE
	5EC8A74D1806C7723FE15CC8743E2A61799FD0CB87880C7A069F10AFGG182AGGD0CB818294G94G88G88GB3CB4DAC0C7A069F10AFGG182AGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG4AAFGGGG
**end of data**/
}
/**
 * Insert the method's description here.
 * Creation date: (3/13/2001 11:17:17 AM)
 * @return java.text.SimpleDateFormat
 */
public java.text.SimpleDateFormat getDateFormatter() 
{
	return dateFormatter;
}
/**
 * Return the JCheckBoxDayChooser property value.
 * @return com.cannontech.common.gui.util.JCheckBoxDayChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser getJCheckBoxDayChooser() {
	if (ivjJCheckBoxDayChooser == null) {
		try {
			ivjJCheckBoxDayChooser = new com.cannontech.common.gui.unchanging.JCheckBoxDayChooser();
			ivjJCheckBoxDayChooser.setName("JCheckBoxDayChooser");
			ivjJCheckBoxDayChooser.setPreferredSize(new java.awt.Dimension(349, 65));
			ivjJCheckBoxDayChooser.setBorder(new javax.swing.border.EtchedBorder());
			ivjJCheckBoxDayChooser.setMinimumSize(new java.awt.Dimension(349, 65));
			// user code begin {1}

			//ivjJCheckBoxDayChooser.setHolidayVisible( false );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDayChooser;
}
/**
 * Return the JCheckBoxEveryYear property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxEveryYear() {
	if (ivjJCheckBoxEveryYear == null) {
		try {
			ivjJCheckBoxEveryYear = new javax.swing.JCheckBox();
			ivjJCheckBoxEveryYear.setName("JCheckBoxEveryYear");
			ivjJCheckBoxEveryYear.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxEveryYear.setText("Every Year");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxEveryYear;
}
/**
 * Return the JComboBox1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxCategory() {
	if (ivjJComboBoxCategory == null) {
		try {
			ivjJComboBoxCategory = new javax.swing.JComboBox();
			ivjJComboBoxCategory.setName("JComboBoxCategory");
			ivjJComboBoxCategory.setEditable(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxCategory;
}
/**
 * Return the JComboBoxHoliday property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHoliday() {
	if (ivjJComboBoxHoliday == null) {
		try {
			ivjJComboBoxHoliday = new javax.swing.JComboBox();
			ivjJComboBoxHoliday.setName("JComboBoxHoliday");
			ivjJComboBoxHoliday.setToolTipText("Holiday schedule used to exclude control");
			// user code begin {1}

			com.cannontech.database.cache.DefaultDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				java.util.List holidaySch = cache.getAllHolidaySchedules();
				for( int i = 0; i < holidaySch.size(); i++ )
					ivjJComboBoxHoliday.addItem( holidaySch.get(i) );
			}
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHoliday;
}
/**
 * Return the JComboBoxStartPolicy property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxStartPolicy() {
	if (ivjJComboBoxStartPolicy == null) {
		try {
			ivjJComboBoxStartPolicy = new javax.swing.JComboBox();
			ivjJComboBoxStartPolicy.setName("JComboBoxStartPolicy");
			// user code begin {1}

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.MANUAL_START ) );

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.DATETIME_START ) );

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.DAYOFMONTH_START ) );

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.WEEKDAY_START ) );
				
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxStartPolicy;
}
/**
 * Return the JComboBoxStopPolicy property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxStopPolicy() {
	if (ivjJComboBoxStopPolicy == null) {
		try {
			ivjJComboBoxStopPolicy = new javax.swing.JComboBox();
			ivjJComboBoxStopPolicy.setName("JComboBoxStopPolicy");
			// user code begin {1}

			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.MANUAL_STOP ) );

			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.ABSOLUTETIME_STOP ) );

			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.DURATION_STOP ) );
				
			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.UNTILCOMPLETE_STOP ) );

			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxStopPolicy;
}
/**
 * Return the JComboBox1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxType() {
	if (ivjJComboBoxType == null) {
		try {
			ivjJComboBoxType = new javax.swing.JComboBox();
			ivjJComboBoxType.setName("JComboBoxType");
			// user code begin {1}

			getJComboBoxType().addItem( com.cannontech.message.macs.message.Schedule.SIMPLE_TYPE );
			getJComboBoxType().addItem( com.cannontech.message.macs.message.Schedule.SCRIPT_TYPE );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxType;
}
/**
 * Return the JCPopUpFieldDate property value.
 * @return com.klg.jclass.field.JCPopupField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCPopupField getJCPopUpFieldDate() {
	if (ivjJCPopUpFieldDate == null) {
		try {
			ivjJCPopUpFieldDate = new com.klg.jclass.field.JCPopupField();
			ivjJCPopUpFieldDate.setName("JCPopUpFieldDate");
			// user code begin {1}

			JCDateValidator dv = new JCDateValidator();
			dv.setAllowNull(false);
			dv.setDefaultDetail(JCDateValidator.LONG);
			dv.setCasePolicy(JCDateValidator.UPPERCASE);
			dv.setMin( new java.util.Date() ); // right now is the minimum for the stat

			// create the invalidinfo and set its properties
			getJCPopUpFieldDate().getInvalidInfo().setInvalidPolicy(com.klg.jclass.field.JCInvalidInfo.RESTORE_PREVIOUS);
			getJCPopUpFieldDate().setValueModel( new DateValueModel( new java.util.Date() ) );
			getJCPopUpFieldDate().setValidator( dv );
			

			getJCPopUpFieldDate().setSelectedItem( getDateFormatter().format(new java.util.Date()) );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCPopUpFieldDate;
}
/**
 * Return the JCSpinFieldDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldDuration() {
	if (ivjJCSpinFieldDuration == null) {
		try {
			ivjJCSpinFieldDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldDuration.setName("JCSpinFieldDuration");
			// user code begin {1}

			ivjJCSpinFieldDuration.setDataProperties(new com.klg.jclass.field.DataProperties(
								new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(1), new Integer(Integer.MAX_VALUE), null, true, null,
								new Integer(1)/*Increment*/, "#,##0.###;-#,##0.###", false, false, false, null, new Integer(60)/*Default*/), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(1)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			ivjJCSpinFieldDuration.setValue( new Integer(60) ); // Default value
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldDuration;
}
/**
 * Return the JLabel1to31 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabel1to31() {
	if (ivjJLabel1to31 == null) {
		try {
			ivjJLabel1to31 = new javax.swing.JLabel();
			ivjJLabel1to31.setName("JLabel1to31");
			ivjJLabel1to31.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabel1to31.setText("(1 - 31)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel1to31;
}
/**
 * Return the JLabelFormat1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelABSFormat() {
	if (ivjJLabelABSFormat == null) {
		try {
			ivjJLabelABSFormat = new javax.swing.JLabel();
			ivjJLabelABSFormat.setName("JLabelABSFormat");
			ivjJLabelABSFormat.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelABSFormat.setText("(hh:mm)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelABSFormat;
}
/**
 * Return the JLabelAbsoluteStopTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelAbsoluteStopTime() {
	if (ivjJLabelAbsoluteStopTime == null) {
		try {
			ivjJLabelAbsoluteStopTime = new javax.swing.JLabel();
			ivjJLabelAbsoluteStopTime.setName("JLabelAbsoluteStopTime");
			ivjJLabelAbsoluteStopTime.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelAbsoluteStopTime.setText("Stop Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelAbsoluteStopTime;
}
/**
 * Return the StateNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCategory() {
	if (ivjJLabelCategory == null) {
		try {
			ivjJLabelCategory = new javax.swing.JLabel();
			ivjJLabelCategory.setName("JLabelCategory");
			ivjJLabelCategory.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelCategory.setText("Category:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCategory;
}
/**
 * Return the JLabelFormat property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelFormat() {
	if (ivjJLabelFormat == null) {
		try {
			ivjJLabelFormat = new javax.swing.JLabel();
			ivjJLabelFormat.setName("JLabelFormat");
			ivjJLabelFormat.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelFormat.setText("(hh:mm)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelFormat;
}
/**
 * Return the JLabelHoliday property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHoliday() {
	if (ivjJLabelHoliday == null) {
		try {
			ivjJLabelHoliday = new javax.swing.JLabel();
			ivjJLabelHoliday.setName("JLabelHoliday");
			ivjJLabelHoliday.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHoliday.setText("Holiday:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHoliday;
}
/**
 * Return the JLabelMinutes property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutes() {
	if (ivjJLabelMinutes == null) {
		try {
			ivjJLabelMinutes = new javax.swing.JLabel();
			ivjJLabelMinutes.setName("JLabelMinutes");
			ivjJLabelMinutes.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutes.setText("(minutes)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutes;
}
/**
 * Return the StateGroupNameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelName() {
	if (ivjJLabelName == null) {
		try {
			ivjJLabelName = new javax.swing.JLabel();
			ivjJLabelName.setName("JLabelName");
			ivjJLabelName.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelName.setText("Name:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelName;
}
/**
 * Return the JLabelStartTimePolicy property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStartTimePolicy() {
	if (ivjJLabelStartTimePolicy == null) {
		try {
			ivjJLabelStartTimePolicy = new javax.swing.JLabel();
			ivjJLabelStartTimePolicy.setName("JLabelStartTimePolicy");
			ivjJLabelStartTimePolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStartTimePolicy.setText("Start Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStartTimePolicy;
}
/**
 * Return the JLabelStartTypePolicy property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStartTypePolicy() {
	if (ivjJLabelStartTypePolicy == null) {
		try {
			ivjJLabelStartTypePolicy = new javax.swing.JLabel();
			ivjJLabelStartTypePolicy.setName("JLabelStartTypePolicy");
			ivjJLabelStartTypePolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStartTypePolicy.setText("Stop Type Policy:");
			// user code begin {1}
         
         ivjJLabelStartTypePolicy.setText("Start Type Policy:");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStartTypePolicy;
}
/**
 * Return the JLabelStopPolicy property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStopPolicy() {
	if (ivjJLabelStopPolicy == null) {
		try {
			ivjJLabelStopPolicy = new javax.swing.JLabel();
			ivjJLabelStopPolicy.setName("JLabelStopPolicy");
			ivjJLabelStopPolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStopPolicy.setText("Stop Type Policy:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStopPolicy;
}
/**
 * Return the JLabelType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelType() {
	if (ivjJLabelType == null) {
		try {
			ivjJLabelType = new javax.swing.JLabel();
			ivjJLabelType.setName("JLabelType");
			ivjJLabelType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelType.setText("Type:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelType;
}
/**
 * Return the JPanelDayOfMonth property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelDayOfMonth() {
	if (ivjJPanelDayOfMonth == null) {
		try {
			ivjJPanelDayOfMonth = new javax.swing.JPanel();
			ivjJPanelDayOfMonth.setName("JPanelDayOfMonth");
			ivjJPanelDayOfMonth.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJTextFieldDayOfMonth = new java.awt.GridBagConstraints();
			constraintsJTextFieldDayOfMonth.gridx = 1; constraintsJTextFieldDayOfMonth.gridy = 1;
			constraintsJTextFieldDayOfMonth.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldDayOfMonth.weightx = 1.0;
			constraintsJTextFieldDayOfMonth.ipadx = 55;
			constraintsJTextFieldDayOfMonth.insets = new java.awt.Insets(0, 1, 0, 4);
			getJPanelDayOfMonth().add(getJTextFieldDayOfMonth(), constraintsJTextFieldDayOfMonth);

			java.awt.GridBagConstraints constraintsJLabel1to31 = new java.awt.GridBagConstraints();
			constraintsJLabel1to31.gridx = 2; constraintsJLabel1to31.gridy = 1;
			constraintsJLabel1to31.ipadx = 6;
			constraintsJLabel1to31.ipady = -2;
			constraintsJLabel1to31.insets = new java.awt.Insets(3, 4, 3, 0);
			getJPanelDayOfMonth().add(getJLabel1to31(), constraintsJLabel1to31);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelDayOfMonth;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStartPolicy() {
	if (ivjJPanelStartPolicy == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder.setTitle("Start Policy");
			ivjJPanelStartPolicy = new javax.swing.JPanel();
			ivjJPanelStartPolicy.setName("JPanelStartPolicy");
			ivjJPanelStartPolicy.setBorder(ivjLocalBorder);
			ivjJPanelStartPolicy.setLayout(new java.awt.GridBagLayout());
			ivjJPanelStartPolicy.setMinimumSize(new java.awt.Dimension(457, 203));
			ivjJPanelStartPolicy.setMaximumSize(new java.awt.Dimension(457, 203));

			java.awt.GridBagConstraints constraintsJLabelStartTimePolicy = new java.awt.GridBagConstraints();
			constraintsJLabelStartTimePolicy.gridx = 1; constraintsJLabelStartTimePolicy.gridy = 2;
			constraintsJLabelStartTimePolicy.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelStartTimePolicy.ipadx = 3;
			constraintsJLabelStartTimePolicy.insets = new java.awt.Insets(5, 8, 6, 0);
			getJPanelStartPolicy().add(getJLabelStartTimePolicy(), constraintsJLabelStartTimePolicy);

			java.awt.GridBagConstraints constraintsJLabelFormat = new java.awt.GridBagConstraints();
			constraintsJLabelFormat.gridx = 4; constraintsJLabelFormat.gridy = 2;
			constraintsJLabelFormat.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelFormat.ipadx = 17;
			constraintsJLabelFormat.ipady = -2;
			constraintsJLabelFormat.insets = new java.awt.Insets(7, 1, 9, 5);
			getJPanelStartPolicy().add(getJLabelFormat(), constraintsJLabelFormat);

			java.awt.GridBagConstraints constraintsJTextFieldTimeEntryStart = new java.awt.GridBagConstraints();
			constraintsJTextFieldTimeEntryStart.gridx = 2; constraintsJTextFieldTimeEntryStart.gridy = 2;
			constraintsJTextFieldTimeEntryStart.gridwidth = 2;
			constraintsJTextFieldTimeEntryStart.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTimeEntryStart.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldTimeEntryStart.weightx = 1.0;
			constraintsJTextFieldTimeEntryStart.ipadx = 51;
			constraintsJTextFieldTimeEntryStart.insets = new java.awt.Insets(4, 0, 6, 0);
			getJPanelStartPolicy().add(getJTextFieldTimeEntryStart(), constraintsJTextFieldTimeEntryStart);

			java.awt.GridBagConstraints constraintsJLabelHoliday = new java.awt.GridBagConstraints();
			constraintsJLabelHoliday.gridx = 5; constraintsJLabelHoliday.gridy = 2;
			constraintsJLabelHoliday.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelHoliday.ipadx = 1;
			constraintsJLabelHoliday.ipady = -2;
			constraintsJLabelHoliday.insets = new java.awt.Insets(7, 5, 9, 2);
			getJPanelStartPolicy().add(getJLabelHoliday(), constraintsJLabelHoliday);

			java.awt.GridBagConstraints constraintsJComboBoxHoliday = new java.awt.GridBagConstraints();
			constraintsJComboBoxHoliday.gridx = 6; constraintsJComboBoxHoliday.gridy = 2;
			constraintsJComboBoxHoliday.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxHoliday.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxHoliday.weightx = 1.0;
			constraintsJComboBoxHoliday.ipadx = 55;
			constraintsJComboBoxHoliday.insets = new java.awt.Insets(3, 2, 4, 2);
			getJPanelStartPolicy().add(getJComboBoxHoliday(), constraintsJComboBoxHoliday);

			java.awt.GridBagConstraints constraintsJPanelStarts = new java.awt.GridBagConstraints();
			constraintsJPanelStarts.gridx = 1; constraintsJPanelStarts.gridy = 3;
			constraintsJPanelStarts.gridwidth = 6;
			constraintsJPanelStarts.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelStarts.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJPanelStarts.weightx = 1.0;
			constraintsJPanelStarts.weighty = 1.0;
			constraintsJPanelStarts.insets = new java.awt.Insets(0, 10, 40, 20);
			getJPanelStartPolicy().add(getJPanelStarts(), constraintsJPanelStarts);

			java.awt.GridBagConstraints constraintsJComboBoxStartPolicy = new java.awt.GridBagConstraints();
			constraintsJComboBoxStartPolicy.gridx = 3; constraintsJComboBoxStartPolicy.gridy = 1;
			constraintsJComboBoxStartPolicy.gridwidth = 4;
			constraintsJComboBoxStartPolicy.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxStartPolicy.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJComboBoxStartPolicy.weightx = 1.0;
			constraintsJComboBoxStartPolicy.ipadx = 80;
			constraintsJComboBoxStartPolicy.insets = new java.awt.Insets(2, 0, 3, 75);
			getJPanelStartPolicy().add(getJComboBoxStartPolicy(), constraintsJComboBoxStartPolicy);

			java.awt.GridBagConstraints constraintsJLabelStartTypePolicy = new java.awt.GridBagConstraints();
			constraintsJLabelStartTypePolicy.gridx = 1; constraintsJLabelStartTypePolicy.gridy = 1;
			constraintsJLabelStartTypePolicy.gridwidth = 2;
			constraintsJLabelStartTypePolicy.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelStartTypePolicy.ipadx = 2;
			constraintsJLabelStartTypePolicy.insets = new java.awt.Insets(2, 9, 6, 0);
			getJPanelStartPolicy().add(getJLabelStartTypePolicy(), constraintsJLabelStartTypePolicy);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStartPolicy;
}
/**
 * Return the JPanelStarts property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStarts() {
	if (ivjJPanelStarts == null) {
		try {
			ivjJPanelStarts = new javax.swing.JPanel();
			ivjJPanelStarts.setName("JPanelStarts");
			ivjJPanelStarts.setPreferredSize(new java.awt.Dimension(359, 109));
			ivjJPanelStarts.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxDayChooser = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDayChooser.gridx = 1; constraintsJCheckBoxDayChooser.gridy = 2;
			constraintsJCheckBoxDayChooser.gridwidth = 2;
			constraintsJCheckBoxDayChooser.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJCheckBoxDayChooser.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCheckBoxDayChooser.weightx = 1.0;
			constraintsJCheckBoxDayChooser.weighty = 1.0;
			constraintsJCheckBoxDayChooser.ipadx = 5;
			constraintsJCheckBoxDayChooser.ipady = -18;
			constraintsJCheckBoxDayChooser.insets = new java.awt.Insets(3, 0, 1, 5);
			getJPanelStarts().add(getJCheckBoxDayChooser(), constraintsJCheckBoxDayChooser);

			java.awt.GridBagConstraints constraintsJCPopUpFieldDate = new java.awt.GridBagConstraints();
			constraintsJCPopUpFieldDate.gridx = 1; constraintsJCPopUpFieldDate.gridy = 3;
			constraintsJCPopUpFieldDate.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJCPopUpFieldDate.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCPopUpFieldDate.weightx = 1.0;
			constraintsJCPopUpFieldDate.ipadx = 43;
			constraintsJCPopUpFieldDate.insets = new java.awt.Insets(1, 0, 9, 9);
			getJPanelStarts().add(getJCPopUpFieldDate(), constraintsJCPopUpFieldDate);

			java.awt.GridBagConstraints constraintsJCheckBoxEveryYear = new java.awt.GridBagConstraints();
			constraintsJCheckBoxEveryYear.gridx = 2; constraintsJCheckBoxEveryYear.gridy = 3;
			constraintsJCheckBoxEveryYear.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCheckBoxEveryYear.ipadx = 15;
			constraintsJCheckBoxEveryYear.ipady = -2;
			constraintsJCheckBoxEveryYear.insets = new java.awt.Insets(1, 9, 10, 83);
			getJPanelStarts().add(getJCheckBoxEveryYear(), constraintsJCheckBoxEveryYear);

			java.awt.GridBagConstraints constraintsJPanelDayOfMonth = new java.awt.GridBagConstraints();
			constraintsJPanelDayOfMonth.gridx = 1; constraintsJPanelDayOfMonth.gridy = 1;
			constraintsJPanelDayOfMonth.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelDayOfMonth.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJPanelDayOfMonth.weightx = 1.0;
			constraintsJPanelDayOfMonth.weighty = 1.0;
			constraintsJPanelDayOfMonth.insets = new java.awt.Insets(3, 0, 2, 57);
			getJPanelStarts().add(getJPanelDayOfMonth(), constraintsJPanelDayOfMonth);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStarts;
}
/**
 * Return the JPanelStartInternalPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStopInternalPanel() {
	if (ivjJPanelStopInternalPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("Arial", 1, 14));
			ivjLocalBorder1.setTitle("Stop Policy");
			ivjJPanelStopInternalPanel = new javax.swing.JPanel();
			ivjJPanelStopInternalPanel.setName("JPanelStopInternalPanel");
			ivjJPanelStopInternalPanel.setBorder(ivjLocalBorder1);
			ivjJPanelStopInternalPanel.setLayout(new java.awt.GridBagLayout());
			ivjJPanelStopInternalPanel.setMaximumSize(new java.awt.Dimension(340, 185));
			ivjJPanelStopInternalPanel.setPreferredSize(new java.awt.Dimension(340, 185));
			ivjJPanelStopInternalPanel.setMinimumSize(new java.awt.Dimension(340, 185));

			java.awt.GridBagConstraints constraintsJComboBoxStopPolicy = new java.awt.GridBagConstraints();
			constraintsJComboBoxStopPolicy.gridx = 2; constraintsJComboBoxStopPolicy.gridy = 1;
			constraintsJComboBoxStopPolicy.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxStopPolicy.weightx = 1.0;
			constraintsJComboBoxStopPolicy.ipadx = 67;
			constraintsJComboBoxStopPolicy.insets = new java.awt.Insets(4, 2, 2, 77);
			getJPanelStopInternalPanel().add(getJComboBoxStopPolicy(), constraintsJComboBoxStopPolicy);

			java.awt.GridBagConstraints constraintsJLabelStopPolicy = new java.awt.GridBagConstraints();
			constraintsJLabelStopPolicy.gridx = 1; constraintsJLabelStopPolicy.gridy = 1;
			constraintsJLabelStopPolicy.ipadx = 4;
			constraintsJLabelStopPolicy.insets = new java.awt.Insets(4, 14, 5, 2);
			getJPanelStopInternalPanel().add(getJLabelStopPolicy(), constraintsJLabelStopPolicy);

			java.awt.GridBagConstraints constraintsJPanelStops = new java.awt.GridBagConstraints();
			constraintsJPanelStops.gridx = 1; constraintsJPanelStops.gridy = 2;
			constraintsJPanelStops.gridwidth = 2;
			constraintsJPanelStops.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelStops.weightx = 1.0;
			constraintsJPanelStops.weighty = 1.0;
			constraintsJPanelStops.ipadx = -10;
			constraintsJPanelStops.ipady = -8;
			constraintsJPanelStops.insets = new java.awt.Insets(2, 14, 10, 115);
			getJPanelStopInternalPanel().add(getJPanelStops(), constraintsJPanelStops);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStopInternalPanel;
}
/**
 * Return the JPanelStops property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStops() {
	if (ivjJPanelStops == null) {
		try {
			ivjJPanelStops = new javax.swing.JPanel();
			ivjJPanelStops.setName("JPanelStops");
			ivjJPanelStops.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCSpinFieldDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldDuration.gridx = 1; constraintsJCSpinFieldDuration.gridy = 1;
			constraintsJCSpinFieldDuration.gridwidth = 2;
			constraintsJCSpinFieldDuration.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJCSpinFieldDuration.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJCSpinFieldDuration.weightx = 1.0;
			constraintsJCSpinFieldDuration.ipadx = 100;
			constraintsJCSpinFieldDuration.ipady = 19;
			constraintsJCSpinFieldDuration.insets = new java.awt.Insets(8, 0, 1, 2);
			getJPanelStops().add(getJCSpinFieldDuration(), constraintsJCSpinFieldDuration);

			java.awt.GridBagConstraints constraintsJLabelABSFormat = new java.awt.GridBagConstraints();
			constraintsJLabelABSFormat.gridx = 4; constraintsJLabelABSFormat.gridy = 2;
			constraintsJLabelABSFormat.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelABSFormat.ipadx = 17;
			constraintsJLabelABSFormat.ipady = -2;
			constraintsJLabelABSFormat.insets = new java.awt.Insets(5, 4, 14, 54);
			getJPanelStops().add(getJLabelABSFormat(), constraintsJLabelABSFormat);

			java.awt.GridBagConstraints constraintsJTextFieldTimeAbsoluteStopTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldTimeAbsoluteStopTime.gridx = 2; constraintsJTextFieldTimeAbsoluteStopTime.gridy = 2;
			constraintsJTextFieldTimeAbsoluteStopTime.gridwidth = 2;
			constraintsJTextFieldTimeAbsoluteStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTimeAbsoluteStopTime.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJTextFieldTimeAbsoluteStopTime.weightx = 1.0;
			constraintsJTextFieldTimeAbsoluteStopTime.ipadx = 66;
			constraintsJTextFieldTimeAbsoluteStopTime.insets = new java.awt.Insets(2, 3, 11, 4);
			getJPanelStops().add(getJTextFieldTimeAbsoluteStopTime(), constraintsJTextFieldTimeAbsoluteStopTime);

			java.awt.GridBagConstraints constraintsJLabelAbsoluteStopTime = new java.awt.GridBagConstraints();
			constraintsJLabelAbsoluteStopTime.gridx = 1; constraintsJLabelAbsoluteStopTime.gridy = 2;
			constraintsJLabelAbsoluteStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJLabelAbsoluteStopTime.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelAbsoluteStopTime.ipadx = 4;
			constraintsJLabelAbsoluteStopTime.insets = new java.awt.Insets(1, 0, 13, 3);
			getJPanelStops().add(getJLabelAbsoluteStopTime(), constraintsJLabelAbsoluteStopTime);

			java.awt.GridBagConstraints constraintsJLabelMinutes = new java.awt.GridBagConstraints();
			constraintsJLabelMinutes.gridx = 3; constraintsJLabelMinutes.gridy = 1;
			constraintsJLabelMinutes.gridwidth = 2;
			constraintsJLabelMinutes.anchor = java.awt.GridBagConstraints.NORTHWEST;
			constraintsJLabelMinutes.ipadx = 3;
			constraintsJLabelMinutes.insets = new java.awt.Insets(10, 2, 3, 80);
			getJPanelStops().add(getJLabelMinutes(), constraintsJLabelMinutes);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStops;
}
/**
 * Return the JTextFieldDayOfMonth property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldDayOfMonth() {
	if (ivjJTextFieldDayOfMonth == null) {
		try {
			ivjJTextFieldDayOfMonth = new javax.swing.JTextField();
			ivjJTextFieldDayOfMonth.setName("JTextFieldDayOfMonth");
			// user code begin {1}

			ivjJTextFieldDayOfMonth.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(1, 31) );
			ivjJTextFieldDayOfMonth.setText("1");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDayOfMonth;
}
/**
 * Return the StateGroupNameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldScheduleName() {
	if (ivjJTextFieldScheduleName == null) {
		try {
			ivjJTextFieldScheduleName = new javax.swing.JTextField();
			ivjJTextFieldScheduleName.setName("JTextFieldScheduleName");
			ivjJTextFieldScheduleName.setPreferredSize(new java.awt.Dimension(150, 21));
			ivjJTextFieldScheduleName.setMinimumSize(new java.awt.Dimension(150, 21));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldScheduleName;
}
/**
 * Return the JTextFieldAbsoluteStopTime property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldTimeAbsoluteStopTime() {
	if (ivjJTextFieldTimeAbsoluteStopTime == null) {
		try {
			ivjJTextFieldTimeAbsoluteStopTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldTimeAbsoluteStopTime.setName("JTextFieldTimeAbsoluteStopTime");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTimeAbsoluteStopTime;
}
/**
 * Return the JTextFieldTimeEntryStart property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldTimeEntryStart() {
	if (ivjJTextFieldTimeEntryStart == null) {
		try {
			ivjJTextFieldTimeEntryStart = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldTimeEntryStart.setName("JTextFieldTimeEntryStart");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTimeEntryStart;
}
/**
 * Insert the method's description here.
 * Creation date: (2/15/2001 12:49:41 PM)
 * @return java.lang.String
 */
public String getScheduleType() 
{
	return getJComboBoxType().getSelectedItem().toString();
}
/**
 * Insert the method's description here.
 * Creation date: (2/16/2001 3:10:18 PM)
 * @return java.lang.String
 */
public String getSelectedStartPolicy() 
{
	return com.cannontech.common.util.StringUtils.removeChars( 
		' ', 
		getJComboBoxStartPolicy().getSelectedItem().toString() );
}
/**
 * Insert the method's description here.
 * Creation date: (2/16/2001 3:10:18 PM)
 * @return java.lang.String
 */
public String getSelectedStopPolicy() 
{
	return com.cannontech.common.util.StringUtils.removeChars( 
		' ', 
		getJComboBoxStopPolicy().getSelectedItem().toString() );
}
/**
 * getValue method comment.
 */
public Object getValue(Object val) 
{
	Schedule sch = null;
	if( val == null )
		sch = new Schedule();
	else
		sch = (Schedule)val;

	// ID must be set by server!!	
	sch.setScheduleName( getJTextFieldScheduleName().getText() );
	sch.setCategoryName( getJComboBoxCategory().getSelectedItem().toString() );
	sch.setType( getJComboBoxType().getSelectedItem().toString() );
	sch.setStartPolicy( getSelectedStartPolicy() );
	sch.setStopPolicy( getSelectedStopPolicy() );

	if( getJComboBoxHoliday().getSelectedItem() != null )
		sch.setHolidayScheduleId( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getSelectedItem()).getHolidayScheduleID() );
	else
		sch.setHolidayScheduleId( 0 );

 	if( getJTextFieldTimeEntryStart().isEnabled() && getJTextFieldTimeEntryStart().getText() != null )
		sch.setStartTime( getJTextFieldTimeEntryStart().getTimeText() + ":00" );  // needs the seconds appended for the database:  HH:mm:ss
	

	java.util.GregorianCalendar tempCal = new java.util.GregorianCalendar();

	// Process the start attributes here	
	if( getSelectedStartPolicy().equalsIgnoreCase(Schedule.DATETIME_START) )
	{
		if( getJCPopUpFieldDate().getValue() instanceof java.util.GregorianCalendar )
			tempCal = (java.util.GregorianCalendar)getJCPopUpFieldDate().getValue();
		else
			tempCal.setTime( (java.util.Date)getJCPopUpFieldDate().getValue() );
			
		//getJCPopUpFieldDate().getModel().getSelectedItem().toString() );
		//java.util.Date d = new java.util.Date(date);	
		//tempCal.setTime( d );

		sch.setStartDay( tempCal.get(java.util.GregorianCalendar.DAY_OF_MONTH) );
		sch.setStartMonth( tempCal.get(java.util.GregorianCalendar.MONTH) + 1 );

		if( getJCheckBoxEveryYear().isSelected() )
			sch.setStartYear( 0 );
		else
			sch.setStartYear( tempCal.get(java.util.GregorianCalendar.YEAR) );
	} 
	else if( getSelectedStartPolicy().equalsIgnoreCase(Schedule.DAYOFMONTH_START) )
	{
		sch.setStartDay( Integer.parseInt(getJTextFieldDayOfMonth().getText()) );

		java.util.Date d = new java.util.Date();
		tempCal.setTime( d );

		sch.setStartMonth( tempCal.get(java.util.GregorianCalendar.MONTH) + 1 );
		sch.setStartYear( tempCal.get(java.util.GregorianCalendar.YEAR) );
	}
	else if( getSelectedStartPolicy().equalsIgnoreCase(Schedule.WEEKDAY_START) )
	{
		sch.setValidWeekDays( getJCheckBoxDayChooser().getSelectedDays8Chars() );
	}


	// Process the stop attributes here
	if( getSelectedStopPolicy().equalsIgnoreCase( Schedule.ABSOLUTETIME_STOP ) )
	{
 		if( getJTextFieldTimeAbsoluteStopTime().isEnabled() && getJTextFieldTimeAbsoluteStopTime().getText() != null )	 	
			sch.setStopTime( getJTextFieldTimeAbsoluteStopTime().getTimeText() + ":00" );
	}
	else if( getSelectedStopPolicy().equalsIgnoreCase( Schedule.DURATION_STOP ) )
	{
		//we entered minutes, lets make it seconds for the server
		sch.setDuration( ((Number)getJCSpinFieldDuration().getValue()).intValue() * 60 );
	}
	
	
	return sch;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJComboBoxCategory().getEditor().getEditorComponent().addKeyListener(this);
	getJComboBoxCategory().addActionListener(this);
	getJCPopUpFieldDate().addValueListener(this);
	
	// user code end
	getJTextFieldScheduleName().addCaretListener(this);
	getJCheckBoxEveryYear().addActionListener(this);
	getJTextFieldTimeEntryStart().addCaretListener(this);
	getJTextFieldTimeAbsoluteStopTime().addCaretListener(this);
	getJComboBoxType().addActionListener(this);
	getJComboBoxHoliday().addActionListener(this);
	getJCheckBoxDayChooser().addActionListener(this);
	getJComboBoxStopPolicy().addActionListener(this);
	getJComboBoxStartPolicy().addActionListener(this);
	getJTextFieldDayOfMonth().addCaretListener(this);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("ScheduleBasePanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(418, 450);

		java.awt.GridBagConstraints constraintsJTextFieldScheduleName = new java.awt.GridBagConstraints();
		constraintsJTextFieldScheduleName.gridx = 1; constraintsJTextFieldScheduleName.gridy = 1;
		constraintsJTextFieldScheduleName.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJTextFieldScheduleName.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJTextFieldScheduleName.weightx = 1.0;
		constraintsJTextFieldScheduleName.ipadx = 177;
		constraintsJTextFieldScheduleName.insets = new java.awt.Insets(19, 79, 2, 12);
		add(getJTextFieldScheduleName(), constraintsJTextFieldScheduleName);

		java.awt.GridBagConstraints constraintsJLabelName = new java.awt.GridBagConstraints();
		constraintsJLabelName.gridx = 1; constraintsJLabelName.gridy = 1;
		constraintsJLabelName.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelName.ipadx = 32;
		constraintsJLabelName.insets = new java.awt.Insets(20, 8, 3, 338);
		add(getJLabelName(), constraintsJLabelName);

		java.awt.GridBagConstraints constraintsJLabelCategory = new java.awt.GridBagConstraints();
		constraintsJLabelCategory.gridx = 1; constraintsJLabelCategory.gridy = 2;
		constraintsJLabelCategory.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelCategory.ipadx = 10;
		constraintsJLabelCategory.insets = new java.awt.Insets(7, 8, 4, 338);
		add(getJLabelCategory(), constraintsJLabelCategory);

		java.awt.GridBagConstraints constraintsJLabelType = new java.awt.GridBagConstraints();
		constraintsJLabelType.gridx = 1; constraintsJLabelType.gridy = 3;
		constraintsJLabelType.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJLabelType.ipadx = 36;
		constraintsJLabelType.insets = new java.awt.Insets(7, 8, 6, 338);
		add(getJLabelType(), constraintsJLabelType);

		java.awt.GridBagConstraints constraintsJComboBoxType = new java.awt.GridBagConstraints();
		constraintsJComboBoxType.gridx = 1; constraintsJComboBoxType.gridy = 3;
		constraintsJComboBoxType.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxType.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJComboBoxType.weightx = 1.0;
		constraintsJComboBoxType.ipadx = -21;
		constraintsJComboBoxType.insets = new java.awt.Insets(5, 79, 4, 234);
		add(getJComboBoxType(), constraintsJComboBoxType);

		java.awt.GridBagConstraints constraintsJPanelStartPolicy = new java.awt.GridBagConstraints();
		constraintsJPanelStartPolicy.gridx = 1; constraintsJPanelStartPolicy.gridy = 4;
		constraintsJPanelStartPolicy.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelStartPolicy.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelStartPolicy.weightx = 1.0;
		constraintsJPanelStartPolicy.weighty = 1.0;
		constraintsJPanelStartPolicy.ipadx = -51;
		constraintsJPanelStartPolicy.ipady = 1;
		constraintsJPanelStartPolicy.insets = new java.awt.Insets(5, 8, 5, 8);
		add(getJPanelStartPolicy(), constraintsJPanelStartPolicy);

		java.awt.GridBagConstraints constraintsJComboBoxCategory = new java.awt.GridBagConstraints();
		constraintsJComboBoxCategory.gridx = 1; constraintsJComboBoxCategory.gridy = 2;
		constraintsJComboBoxCategory.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJComboBoxCategory.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJComboBoxCategory.weightx = 1.0;
		constraintsJComboBoxCategory.ipadx = 209;
		constraintsJComboBoxCategory.insets = new java.awt.Insets(3, 79, 4, 12);
		add(getJComboBoxCategory(), constraintsJComboBoxCategory);

		java.awt.GridBagConstraints constraintsJPanelStopInternalPanel = new java.awt.GridBagConstraints();
		constraintsJPanelStopInternalPanel.gridx = 1; constraintsJPanelStopInternalPanel.gridy = 5;
		constraintsJPanelStopInternalPanel.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJPanelStopInternalPanel.anchor = java.awt.GridBagConstraints.WEST;
		constraintsJPanelStopInternalPanel.weightx = 1.0;
		constraintsJPanelStopInternalPanel.weighty = 1.0;
		constraintsJPanelStopInternalPanel.ipadx = 62;
		constraintsJPanelStopInternalPanel.ipady = -69;
		constraintsJPanelStopInternalPanel.insets = new java.awt.Insets(5, 8, 11, 8);
		add(getJPanelStopInternalPanel(), constraintsJPanelStopInternalPanel);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}


	// set everything disabled
	setStopFieldVisible();
	setStartFieldVisible();
	jComboBoxType_ActionPerformed( null );

	getJComboBoxType().setEnabled( !editMode );

	// user code end
}
/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	Integer startSecs = null, stopSecs = null;

	try
	{		
		java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("HH:mm");
		df.setLenient( false );

		if( getJTextFieldTimeEntryStart().isVisible() )
		{
			startSecs = getJTextFieldTimeEntryStart().getTimeTotalSeconds();
			if( !getJTextFieldTimeEntryStart().isValidText() )
			{
				setErrorString("The Start Time text field does not contain a valid time");
				return false;
			}
		}
		
		if( getJTextFieldTimeAbsoluteStopTime().isVisible() )
		{
			stopSecs = getJTextFieldTimeAbsoluteStopTime().getTimeTotalSeconds();
			if( !getJTextFieldTimeAbsoluteStopTime().isValidText() )
			{
				setErrorString("The Absolute Stop Time text field does not contain a valid time");
				return false;
			}
		}	
	}
	catch(Exception ex)
	{
		setErrorString("An Exception occured while trying to decipher the Absolute Stop Time text field or the Start Time text field");
		return false;
	}

	if( getJTextFieldScheduleName().getText() == null 
		 || getJTextFieldScheduleName().getText().length() <= 0 )
	{
		setErrorString("The Schedule Name text field must be filled in");
		return false;
	}

	// synch our editor component of the JComboBox and the JCombobox itself
	getJComboBoxCategory().setSelectedItem( getJComboBoxCategory().getEditor().getItem() );
	
	if( getJComboBoxCategory().getSelectedItem() == null 
		 || getJComboBoxCategory().getSelectedItem().toString().length() <= 0 )
	{
		setErrorString("The Category text field must be filled in");
		return false;
	}

	if( startSecs != null && stopSecs != null )
	{
		if( stopSecs.intValue() <= startSecs.intValue() )
		{
			setErrorString("The start time text field must be greater than the stop time text field");
			return false;
		}		
	}
	
	try
	{
		if( getJTextFieldDayOfMonth().isVisible() )
		{		
			if( getJTextFieldDayOfMonth().getText() == null 
				 || getJTextFieldDayOfMonth().getText().length() <= 0
				 || Integer.parseInt(getJTextFieldDayOfMonth().getText()) <= 0 )
			{
				setErrorString("The day of month text field must have a value");
				return false;
			}
		}
	}
	catch( NumberFormatException nf )
	{
		setErrorString("The day of month text field must be a number");
		return false;
	}
		
	return true;
}
/**
 * Comment
 */
public void jCheckBoxEveryYear_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	java.util.Date date = null;
	if( getJCPopUpFieldDate().getValue() instanceof java.util.Date )
		date = (java.util.Date)getJCPopUpFieldDate().getValue();
	else
		date = ((java.util.GregorianCalendar)getJCPopUpFieldDate().getValue()).getTime();
		
	if( getJCheckBoxEveryYear().isSelected() )
	{
		dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd");
		getJCPopUpFieldDate().setSelectedItem( getDateFormatter().format(date) );
	}
	else
	{
		dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");
		getJCPopUpFieldDate().setSelectedItem( getDateFormatter().format(date) );
	}

	fireInputUpdate();
	
	return;
}
/**
 * Comment
 */
public void jComboBoxStartPolicy_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	setStartFieldVisible();
	fireInputUpdate();
	
	return;
}
/**
 * Comment
 */
public void jComboBoxStopPolicy_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	setStopFieldVisible();
	fireInputUpdate();

	return;
}
/**
 * Comment
 */
public void jComboBoxType_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	boolean val;

	//Simple schedules can not have the UNTIL_COMPLETE stop policy	
	if( val = getJComboBoxType().getSelectedItem().equals(
				com.cannontech.message.macs.message.Schedule.SIMPLE_TYPE ) )
	{
		//release the hate!
		if( getSelectedStopPolicy().equalsIgnoreCase(Schedule.UNTILCOMPLETE_STOP) )
			getJComboBoxStopPolicy().setSelectedIndex(0);

		getJComboBoxStopPolicy().removeItem( StringUtils.addCharBetweenWords(
				' ', Schedule.UNTILCOMPLETE_STOP) );
	}
	else
	{
		//be sure the UNTIL_COMPLETE stop policy is in the stop policy combo box!
		for( int i = 0; i < getJComboBoxStopPolicy().getItemCount(); i++ )
			if( StringUtils.removeChars(
				  ' ', getJComboBoxStopPolicy().getItemAt(i).toString()).equalsIgnoreCase(
				  Schedule.UNTILCOMPLETE_STOP) )
			{
				val = true;
				break;
			}

		if( !val )
			getJComboBoxStopPolicy().addItem( StringUtils.addCharBetweenWords(
				' ', Schedule.UNTILCOMPLETE_STOP) );
	}


	return;
}
/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */

public void keyPressed(java.awt.event.KeyEvent e) 
{
}
/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
public void keyReleased(java.awt.event.KeyEvent e) 
{
	fireInputUpdate();
}
/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
public void keyTyped(java.awt.event.KeyEvent e) 
{
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());

		javax.swing.JFrame frame = new javax.swing.JFrame();
		ScheduleBasePanel aScheduleBasePanel;
		aScheduleBasePanel = new ScheduleBasePanel();
		frame.setContentPane(aScheduleBasePanel);
		frame.setSize(aScheduleBasePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (3/8/2001 2:20:06 PM)
 * @param enum java.util.Enumeration
 */
private void setEditableJComboBox(final java.util.Enumeration enum) 
{
	if( enum != null )
	{		
		javax.swing.SwingUtilities.invokeLater( new Runnable()
		{
			public void run()
			{
				while( enum.hasMoreElements() )
					getJComboBoxCategory().addItem( enum.nextElement().toString() );
			}
				
		});			
		
	}
		
}
/**
 * Insert the method's description here.
 * Creation date: (2/15/2001 11:52:07 AM)
 * @param button javax.swing.JRadioButton
 */
private void setStartFieldVisible()
{
	getJCPopUpFieldDate().setVisible(
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DATETIME_START) );
	getJCheckBoxEveryYear().setVisible(
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DATETIME_START) );

		
	getJTextFieldDayOfMonth().setVisible( 
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DAYOFMONTH_START) );
	getJLabel1to31().setVisible( 
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DAYOFMONTH_START) );

		
	getJCheckBoxDayChooser().setVisible( 
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.WEEKDAY_START) );

	getJTextFieldTimeEntryStart().setEnabled( 
		!getSelectedStartPolicy().equalsIgnoreCase(Schedule.MANUAL_START) );
}
/**
 * Insert the method's description here.
 * Creation date: (2/15/2001 11:52:07 AM)
 * @param button javax.swing.JRadioButton
 */
private void setStopFieldVisible()
{
	//absolute GUI widgets
	getJTextFieldTimeAbsoluteStopTime().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.ABSOLUTETIME_STOP) );
	getJLabelAbsoluteStopTime().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.ABSOLUTETIME_STOP) );
	getJLabelABSFormat().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.ABSOLUTETIME_STOP) );
	

	//duration GUI widgets
	getJCSpinFieldDuration().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.DURATION_STOP) );
	getJLabelMinutes().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.DURATION_STOP) );
}
/**
 * setValue method comment.
 */
public void setValue(Object val) 
{
	Schedule sched = (Schedule)val;	
	java.util.GregorianCalendar cal = new java.util.GregorianCalendar();

	setEditableJComboBox( sched.getNonPersistantData().getCategories() );
	
	getJTextFieldScheduleName().setText( sched.getScheduleName() );
	getJComboBoxCategory().setSelectedItem( sched.getCategoryName() );
	getJComboBoxType().setSelectedItem( sched.getType() );
	getJCSpinFieldDuration().setValue( new Integer(sched.getDuration()) );

	for( int i = 0; i < getJComboBoxHoliday().getItemCount(); i++ )
		if( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getItemAt(i)).getHolidayScheduleID()
			 == sched.getHolidayScheduleId() )
		{
			getJComboBoxHoliday().setSelectedIndex(i);
			break;
		}

	if( sched.getStartTime().length() > 5 )
		getJTextFieldTimeEntryStart().setText( sched.getStartTime().substring(0, 5) );
	else
		getJTextFieldTimeEntryStart().setText( sched.getStartTime() );
		
	// Process the start policies and set the viewable area in the
	// startPolicyScrollPane to the selected radioButton
	getJComboBoxStartPolicy().setSelectedItem( StringUtils.addCharBetweenWords(
		' ', sched.getStartPolicy() ) );
	
	if( sched.getStartPolicy().equalsIgnoreCase( Schedule.DATETIME_START ) )
	{
		/*----- SUPER HACK!!! */
		cal.setTime( new java.util.Date() );
		/*----- END SUPER HACK */
		
		cal.set( java.util.GregorianCalendar.DAY_OF_MONTH,	sched.getStartDay() );
		cal.set( java.util.GregorianCalendar.MONTH, (sched.getStartMonth()-1) );

		/*----- SUPER HACK */
		if( sched.getStartYear() == 0 )
		{
			getJCheckBoxEveryYear().doClick();
			// just set the year to the current year
			cal.set( java.util.GregorianCalendar.YEAR, cal.get(java.util.GregorianCalendar.YEAR) );
		}
		else if( sched.getStartYear() <= 2000 )
			cal.set( java.util.GregorianCalendar.YEAR, cal.get(java.util.GregorianCalendar.YEAR) );
		else
			cal.set( java.util.GregorianCalendar.YEAR, sched.getStartYear() );
		/*----- END SUPER HACK */
		
		getJCPopUpFieldDate().setValue( cal.getTime() );
		getJCPopUpFieldDate().setSelectedItem( getDateFormatter().format(cal.getTime()) );
	}
	else if( sched.getStartPolicy().equalsIgnoreCase( Schedule.DAYOFMONTH_START ) )
	{		
		cal.setTime( sched.getNextRunTime() );
		getJTextFieldDayOfMonth().setText( new Integer(cal.get(java.util.GregorianCalendar.DAY_OF_MONTH) ).toString() );
	}
	else if( sched.getStartPolicy().equalsIgnoreCase( Schedule.WEEKDAY_START ) )
	{
		//HOLIDAY is set in here too!!!
		getJCheckBoxDayChooser().setSelectedCheckBoxes( sched.getValidWeekDays() );		
	}

	
	// Process the stop policies and set the viewable area in the
	// stopPolicyScrollPane to the selected radioButton
	getJComboBoxStopPolicy().setSelectedItem( StringUtils.addCharBetweenWords(
		' ', sched.getStopPolicy() ) );
	
	if( sched.getStopPolicy().equalsIgnoreCase( Schedule.ABSOLUTETIME_STOP ) )
	{
		if( sched.getStopTime().length() > 5 )
			getJTextFieldTimeAbsoluteStopTime().setText( sched.getStopTime().substring(0, 5) );
		else
			getJTextFieldTimeAbsoluteStopTime().setText( sched.getStopTime() );
	}
	else if( sched.getStopPolicy().equalsIgnoreCase( Schedule.DURATION_STOP ) )
	{
		// since the server gives us seconds, lets make it into minutes
		getJCSpinFieldDuration().setValue( new Integer(sched.getDuration() / 60) );
	}

}
/**
 * Insert the method's description here.
 * Creation date: (3/13/2001 1:25:55 PM)
 * @param event com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanged(com.klg.jclass.util.value.JCValueEvent event) 
{
	javax.swing.SwingUtilities.invokeLater( new Runnable()
	{
		public void run()
		{
			if( getJCPopUpFieldDate().getValue() instanceof java.util.GregorianCalendar )
			{
				// format the new date
				getJCPopUpFieldDate().setSelectedItem( getDateFormatter().format(
					((java.util.GregorianCalendar)getJCPopUpFieldDate().getValue()).getTime() ) );
			}
			
		}			
	});			

	fireInputUpdate();
}
/**
 * Insert the method's description here.
 * Creation date: (3/13/2001 1:26:30 PM)
 * @param event com.klg.jclass.util.value.JCValueEvent
 */
public void valueChanging(com.klg.jclass.util.value.JCValueEvent event) {}
}

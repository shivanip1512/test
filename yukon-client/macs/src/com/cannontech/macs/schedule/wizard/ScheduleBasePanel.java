package com.cannontech.macs.schedule.wizard;

/**
 * This type was created in VisualAge.
 */
import java.util.Calendar;
import java.util.List;

import com.cannontech.common.pao.PaoUtils;
import com.cannontech.common.util.StringUtils;
import com.cannontech.database.data.schedule.script.ScriptTemplateTypes;
import com.cannontech.message.macs.message.Schedule;
import com.cannontech.yukon.IDatabaseCache;
import com.cannontech.yukon.IMACSConnection;
import com.cannontech.yukon.conns.ConnPool;

public class ScheduleBasePanel extends com.cannontech.common.gui.util.DataInputPanel implements java.awt.event.ActionListener, java.awt.event.KeyListener, javax.swing.event.CaretListener {
	private java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");
	private boolean editMode = false;
	private int scheduleId = 0;
	private javax.swing.JLabel ivjJLabelCategory = null;
	private javax.swing.JLabel ivjJLabelName = null;
	private javax.swing.JLabel ivjJLabelType = null;
	private javax.swing.JTextField ivjJTextFieldScheduleName = null;
	private javax.swing.JLabel ivjJLabelStartTimePolicy = null;
	private javax.swing.JLabel ivjJLabelFormat = null;
	private com.klg.jclass.field.JCSpinField ivjJCSpinFieldDuration = null;
	private javax.swing.JLabel ivjJLabelAbsoluteStopTime = null;
	private javax.swing.JLabel ivjJLabelMinutes = null;
	private javax.swing.JPanel ivjJPanelStartPolicy = null;
	private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser ivjJCheckBoxDayChooser = null;
	private javax.swing.JPanel ivjJPanelStopInternalPanel = null;
	private javax.swing.JComboBox ivjJComboBoxType = null;
	private javax.swing.JComboBox ivjJComboBoxCategory = null;
	private javax.swing.JLabel ivjJLabel1to31 = null;
	private javax.swing.JCheckBox ivjJCheckBoxEveryYear = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldTimeEntryStart = null;
	private com.cannontech.common.gui.util.JTextFieldTimeEntry ivjJTextFieldTimeAbsoluteStopTime = null;
	private javax.swing.JComboBox ivjJComboBoxHoliday = null;
	private javax.swing.JLabel ivjJLabelHoliday = null;
	private javax.swing.JComboBox ivjJComboBoxStopPolicy = null;
	private javax.swing.JLabel ivjJLabelStopPolicy = null;
	private javax.swing.JLabel ivjJLabelABSFormat = null;
	private javax.swing.JComboBox ivjJComboBoxStartPolicy = null;
	private javax.swing.JLabel ivjJLabelStartTypePolicy = null;
	private javax.swing.JPanel ivjJPanelStarts = null;
	private javax.swing.JTextField ivjJTextFieldDayOfMonth = null;
	private javax.swing.JPanel ivjJPanelDayOfMonth = null;
	private com.cannontech.common.gui.util.DateComboBox ivjDateComboBox = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JPanel ivjJPanel1 = null;
	private javax.swing.JComboBox ivjTemplateComboBox = null;
	private javax.swing.JLabel ivjTemplateLabel = null;
	private javax.swing.JPanel ivjJPanelStops = null;

class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.CaretListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == ScheduleBasePanel.this.getJCheckBoxEveryYear()) 
				connEtoC4(e);
			if (e.getSource() == ScheduleBasePanel.this.getJComboBoxType()) 
				connEtoC5(e);
			if (e.getSource() == ScheduleBasePanel.this.getJComboBoxHoliday()) 
				connEtoC6(e);
			if (e.getSource() == ScheduleBasePanel.this.getJComboBoxStopPolicy()) 
				connEtoC8(e);
			if (e.getSource() == ScheduleBasePanel.this.getJComboBoxStartPolicy()) 
				connEtoC9(e);
			if (e.getSource() == ScheduleBasePanel.this.getJCheckBoxDayChooser()) 
				connEtoC7();
			if (e.getSource() == ScheduleBasePanel.this.getDateComboBox()) 
				connEtoC11(e);
		};
		public void caretUpdate(javax.swing.event.CaretEvent e) {
			if (e.getSource() == ScheduleBasePanel.this.getJTextFieldScheduleName()) 
				connEtoC3(e);
			if (e.getSource() == ScheduleBasePanel.this.getJTextFieldDayOfMonth()) 
				connEtoC10(e);
			if (e.getSource() == ScheduleBasePanel.this.getJTextFieldTimeEntryStart()) 
				connEtoC1(e);
			if (e.getSource() == ScheduleBasePanel.this.getJTextFieldTimeAbsoluteStopTime()) 
				connEtoC2(e);
		};
	};
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public ScheduleBasePanel() {
	super();
	initialize();
}
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public ScheduleBasePanel( boolean onlyEditMode )
{
	super();

	editMode = onlyEditMode;
	initialize();
}

public IMACSConnection getIMACSConnection() 
{
    return (IMACSConnection)ConnPool.getInstance().getDefMacsConn();
}
/**
 * This method was created in VisualAge.
 * @param event java.awt.event.ActionEvent
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJCheckBoxEveryYear()) 
		connEtoC4(e);
	if (e.getSource() == getJComboBoxType()) 
		connEtoC5(e);
	if (e.getSource() == getJComboBoxHoliday()) 
		connEtoC6(e);
	if (e.getSource() == getJComboBoxStopPolicy()) 
		connEtoC8(e);
	if (e.getSource() == getJComboBoxStartPolicy()) 
		connEtoC9(e);
	if (e.getSource() == getJCheckBoxDayChooser()) 
		connEtoC7();
	if (e.getSource() == getDateComboBox()) 
		connEtoC11(e);
	// user code begin {2}

	if( e.getSource() == getJComboBoxCategory() )
		this.fireInputUpdate();

	// user code end
}
/**
 * Method to handle events for the CaretListener interface.
 * @param e javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void caretUpdate(javax.swing.event.CaretEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getJTextFieldScheduleName()) 
		connEtoC3(e);
	if (e.getSource() == getJTextFieldDayOfMonth()) 
		connEtoC10(e);
	if (e.getSource() == getJTextFieldTimeEntryStart()) 
		connEtoC1(e);
	if (e.getSource() == getJTextFieldTimeAbsoluteStopTime()) 
		connEtoC2(e);
	// user code begin {2}

	// user code end
}
/**
 * connEtoC1:  (JTextFieldStartTime.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC10:  (JTextFieldDayOfMonth.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC11:  (DateComboBox.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (JTextFieldAbsoluteStopTime.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (JTextFieldScheduleName.caret.caretUpdate(javax.swing.event.CaretEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 javax.swing.event.CaretEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(javax.swing.event.CaretEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (JCheckBoxEveryYear.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jCheckBoxEveryYear_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jCheckBoxEveryYear_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (JComboBoxType.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jComboBoxType_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxType_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (JComboBoxHoliday.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.fireInputUpdate()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC7:  (JCheckBoxDayChooser.action. --> ScheduleBasePanel.fireInputUpdate()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7() {
	try {
		// user code begin {1}
		// user code end
		this.fireInputUpdate();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC8:  (JComboBoxStopPolicy.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jComboBoxStopPolicy_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxStopPolicy_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC9:  (JComboBoxStartPolicy.action.actionPerformed(java.awt.event.ActionEvent) --> ScheduleBasePanel.jComboBoxStartPolicy_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jComboBoxStartPolicy_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G8FDA02B1GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155DD81DC14C55A2722727A280F6E6C0E4AAEAA6B680B6E38726E38320EBA3A306C32CBAF3F220EAEABAACACA6A282CDEE09114C5D191C841B6C505C284C5C3A483C1C4C5C1599494AFD7F60555E5F7DD96DD8B73FBE666FD66FD775DF79716222F7377FBFCF77E4FBCB34FBC734C3CB3734E8CC26EC72169A92939021012AE087FBECB91846DBD0210B8557E94E21981DA0DA07B77B150C26142F28296G
	2F36B6DB13A3FC38B39342E5909E7CB4DB138F3F978B674EB65E86BF3C64D388BC7B172197784E672ED44CA70306FBDA35701C8FD481189EA894A8C7B85FDAA062AE884F97FF93CAC995042E8BC89C631E8299BEC30CD7813CC620668BC91CEBDA8BC57EF840A682E9GAF38D00C8B4F39D43B0BEB2A45F8DDD7068AC98F6527E6133CE469A3850B32934427CE381E9AA2CDD83B6D8BF856361D6C595AED6BAB6FB6D82DB62B53545DDBEEB21A1DB6C73943B660B455549CB0B97A8D90235EE8F4187A7B4D561E6D
	145FE6301AACC271C5C46F4B76E452B485A181720920D86ADEE22BDE789DG94F2916A7ED8F62D285B581321C25CCD733C6A1EF4915339A0D052BD3EFDE6EACCA0C97F4F34AE08DC87040301D839461D586225DCFD066E7E727E6EDE13F140E2AABFE37E5A60B05654340B40B6C33FC9DE262CB6AC1376E2ACD3FDB549339142DDC0CE0EE7EEA6F890044783CD3C984B7A799AACEB47B73F91120F5524AE70D256299733B24E3ED8AA2B50B4B375C36AF7CD9A62BB5517C03EC0F62031C093002682AD237E1E1276
	89BC6B0FB99BECFDFDB6EB3D5D3E4DE2F46C3199CD9678DDD3839C915BEF6A36B90C0240FC7A3F771429680314F0093BBF93E2E5BBA8208F066F3FC5F0BAABD253D54AB6E15A07294225AC0D5CCB2532C5DE4A7C1D582D8AFE93394F0198FE9F45E74BF0D667195427C8B8E00CD6E3398C6D5CB19FF5E951DCA364D45626E6286892F2FFE5EAC79053419EA46942EC2C1BC3ECBC8E70C820A9C071C01917EBB5A517230DF727ED984A46BB41579CD60325FD60185D60F0EE9BB0DB0CA607E86BC92D3EEC2DC6CC6E
	893F6518DD42B6486BA8764EAD2AF6098D5325B6DE4E6C51F539E49716F7CE1B373C87AF77740D793C8EFFC75BCA70652C8E53B87EA70A074AF0D637BBA8CE4291404B3D826A01461FC85B166B8A96BF1F27B3056291B21C25B31F62A49C8F3C717F2D55307A3DB703742DC703619D81B496A89CE8B2D0BC506CE02C631F272D9BE6BBEA1355AF13ED5564415364F2BA8CBB2D7DCE03355BF44060B09B0ED9CC7D029827033ECB0E39499D216D3B9B7258E1321A9C862759E605548DFDA6F026FE966738E6A10963
	B0D12E5E5CE7028C7A6C8226EB55AC062745506F7C52EEB4B8CDD28C46BFCD5B4AE983694FA18152D62EA4763A05765D05703B7ACA3455AB19848B06F05815E81757B50B60399B1C5BE42929E9B4F793B58C0E336823212DAEF8CE04783A1FEAB501C005BF037E9128EA2CD69385D4F795BC016AFE8ECF203ADF409328B9845A9BD04755DACD9CD06FB5DACDA21073DA2DA689E87CB808F31DD6938D647CA534476BC1AF2032D0F837GE55E007D40EB9D686F0D59B78BE553EAD47D1DD0608D4CF7475D20747787
	E9B922811F812439D12BA986EA84B28285820D870A861A8124398978C00DC0C620C02071C051C0B300B463018F5488E4848A849A8F948DB483C8F3B370019A010CB763B8E37E5EB8D01A588675A536136BCF6C013F093D09AD48EFE2EBE5D909ED076AAFC8DD911BE218549B7EC69B13BAA5F5C16AC5AECB6A0C6B79F3D61FA5573B47A1FE61AB7F686B0656D10D089F4943442712E47A91BFD215D33113EA3C2B18BF7A239371D1F93863EAF5F9D657BF21F53DCC06AFD444DBA77BCD5E311B455F59AAE9FEB48C
	7DC8DB79CC964E127DA6E3274FC55D568215AAE4D74AFEAF81AA825A280813B6C47E15A328E7C2790AB0692BBE150557F811DBB04C74C97F394ACF1DB6A8429FFB09477A554EF9645D94886DBC94A86AE66CDB4B52F582FD6710C1A83EE5DA9D7002B099251E1645AD1DC34AE3BAED32BA9BCDF6135588BF7A45BE3EE28E29DB717DF35CA6603BE1934549F82481DE907D9C2F1D33106110067CED067CC64AB7B81D8E73B1188C341B1CCE987FCB72ADD417FE3721CE3FD85643D9242C53210C09C042ADD856E9F3
	081D71BD52E2331D9C306B499BD2FC9F2D21636EDC08DFF68B7607F7D713F9D89B8FBFC04392FFCFF54788FDCACEA4FD6F6D74787712073736417238FFB399EB250BE1D2E7D9227FAE947D1358B0DB7427A5DC6E6FD44E8E7A07GC5814583657C8A5E69C0C70146GC5GCD87924250EE391BA3E4BAA8734DD6643DC4664B727E6A07A626FB031B6EE98A7D97AB4A00FD47924133FF7DA1093501188C6FED78518C75B6BCADC33D8DBF15613B0DBE172156C6996F658CE2B35B992B2C4D4F4CA0633CEE1B55EA22
	9D8F9791587C7AB5BDA90759EAF69EB49BFBCC4EF67357A6E8BBE1246D5EC34712A5703BB68C47E4E7D662182C786B9B04282F16284E93C3EE2ECA9D9B465ADFD818B4A6E3BAA5E6123E44E4B17501219AEC83D6A7435F2263D4916FCF2358E72DDF925992EAA5F151024E6B4B3AEDFDF61B95E2166B562E5D2A733930D1F65C6CB06D345A874451F4C969015275221FAD962EB3F750BC9A4D274DE4B07D3DE633016511EE3E0C66514E2AC194EF371B21E29CE5278D1681D3B97D3F2157E06DB199CB48EA47C9CB
	CF7909EED2727281275942A2146FEAB8C01E5B093F150ECC294A75D8761D660B29DEDFC27AE667591D0D7FEFAAED60753170D397331593F8BB9C36817BDE18BB692191B519CD96E3D9B73C611C6574FFD17E04613441D55EFF8632A9276D303C01F0E57A50E4E802C368D141F4386B4BEFA59D768E749DB3B93EA74B8CDB13CA34C7F516D3260B5C941523EB0B75AC7F7F596AAD7F75231B3F58F62E56F84BFF436866DF4572FFEC33377C2BC6B77F0DAC7F0FEC5E725FB83A79EFE2799F35F84BFF5368667F994B
	5F5AF216665FE4F318FAC056EAEC30D9EC0E86DB5FB15BB61B2B324C6CB47515137FE82258A809A26506B3CED10B1D409F0992553CDF3A2544279E6BC7D70F4DDC0FA653573E7458B03AFAD4D6209EDDF9BE75289AE5BDF87F38ED09CFBDB60E329E7CDD7A45911FFAEC9AE5BDB6209E1D87597BF397EF2775477AED96B21CF45A6CE4A5F1C44D5663530A3AB5188EF7FC542F508145C987B2FA792F97ED30FA678DAC7F06DED377C930BEA464B85BE9B2B84A8CF484D64E9EEDA647F11B234F339A6AA95BE776A7
	BC527E2ADE11E80B77D43710979CEF5395DD3F9075953DC5FF56EE7ABED515A56B2F16D5220EFFAE313B6B58EC33180D06335F1F1A5E5F014F365D641EB7F165B6483F7BFB4C7E04E7627E5A6AB351D64DB9B7AB7505895BA8AA4CD377D7E3697DB6216114224DB69A4E369E5FE333BAFBC72F45CA6F352D16530A7CC9DF355D6AF41C25659B45DE0B771D2BF21B5D7B8DB0C1C32F4D56EF629D4770139547CFF91F8F2A146B076F137F303F0F4DF3494BC7F41CD1ED3BE428A02E9FDE21A5F37E18B02DA696A8A9
	8C578F9DF3899F578F45C5D2F8EDDA58BC99F89D37123508A5ED393275856D2DEC3F46FC4E2F9F025FB7847F6AA1788F2872C3614978CD7B547893B87FC1D5FE8C67B76FD76347F27EA4D5FEA2676FEAD763EB7E87798F2B728BB83FC52F46AF637CC7D479F51C3F77CBB53E1E739FD56577F2FE5B81B57EA067BF264A8F667C7D87557863B97FF1D5FEA4676BBBFC57FF00AAFFB217CF69D46347F17E052A7CA44ECFBB24464F3C8D79012A7CC24ECFBF2C462F607CCBD4790D1C1F5125466F607CB12AFC8B674F
	BD22468F388D5B79D773F26059EFBAB5E032F61B4887025D263378ADFC5EA2850F2E1970EF6C56F9E46D57A27B3640F0C3167ABAE2CF96791EF01227FFB2EB0EC03E1533B4593AE7040124E9F7187B8C0E3364E309382FEBEB1BFCDF57D8501F6C811B8A4FF8A0560F7EE5B7D923755CE9847143C99A8BEBF05F17G6182206AF0160EB31C79940B7764F60C978761E49277F6962F63F6F93CDFB6E13CB04023006244F83ADF4B639D5B0171FA818FG8A7D35DA3E2B1BF93E40CF86AA780D186FEF6471DE667142
	G0F7A0D94AF4EAD5EAFF7E23C0A882D269928B7C2ADDF43AE3E9F8E789301E2D563956F46F8853F859F86527FD6AD5E53BCDEAF708300C2D5630536E03CD860A781655E619ECFFF8709B7156FFBDB4731D7A8F6A7B8542B9A5C0733A7C73EDF4F583FD6F58D1C2E035F41528F3FC339BF694F59A45D4900475E01ED6479AC7937347A7EFEDB3719EE8F917DFD2CD63EBE4E302B357360896F5EFE67CE2B516442B6F33D1668CA760F0830687737FDCA3E87AB77433029A5FE2AECB8C3DF74FADB034DE8EA06E657
	40BF9F9CB01B4E88E807F3CD723DFF93972CC84D72E207C4317CB9F7CAF628ED1A194A76664D66FB735A004F30F37B909B433177B9964531737B91CB6618500ED8458444AE60D8AF47D2750805F26CA20ECD671866CB44F2FE0758459CEB66581C830885F06CD20EC5F2AC73A0E2099C7B8947CAFE0F583C8E440EF26C8F9C8B61D8F5A7E2D3B876C70EE57E81311AC30855F16CEE0E39B8D6FB9831880E5D4331F80EED6DC2CC9709581FB85641313AA30885C7623E4E2BEB485CD7EDDFE7B7F54C721E81B3DDC7
	2F2901612A018EAC657BB943284F1034E2A2F15F6654F672BE907E887D94D085905BC3D6D3239563B6839670C7FCE74DF0FBA7C6829E8724398B7B799BEAC8BF606730DCECE751250BD83BD40C09316D5C3838CE4CF7722F2F91EA4F27296EA59D33A0BB3560AE56E66A6E125ACE75568BD2DB00D879521A30FCC190A77AAEAC5F20D6DE3E5900975F8D7D735DD83E93CD649B187F93G6CCBA66C2E0767F7DE8591F02F5F033C9CDD2063583B319CB7B4484BB179EED6CFC93C9C65BB3EDBB9EAB2EAE9B9C63EC4
	42747F2F9D28FF66C4989BCFC47D738EA975F781EF5CC4547F0D916B4F72EDED46FCA3A04DF81E6F49FCE53E3AFBE04CF78F667B7B666FE6376A835B64F69B71228916E371CEACC7876898FC8F9F5B172A59AF669E6CCB0EECEBF057E324EBA16807DC0FD848A377DE5463AF054A7E2285F876FB399F6E9AC9FF41723CEC9766998869CD64F9262D176719F4AFABFB751FB04F573FC31EFBF6E31EAD10DEA0909B835F59A19F83CF7C936BB7B223E03E910579CE581DA1790E185E1C96CC2F8A62D922308C4F56AB
	4BB09EF8B1BC2D3E161117E1924FB396524B3D8F734C2D156759F29FABC350FD18E7451E117A3E38DFFE3DFC8C9895773157B1E068FD62190D7B14E340DFADA06F30A9004F388F4700CB33495C8247007BE154E53076400C076FB549A67A435CC68CCF4EA67952390D00EBADB3F2C85913A14D5C7BE18E8F5488E43C9F73E81FBF643E776DAE9F7B5ED3767933FFBD70FE5C1FF421DFF2A1DCAEED3FBFF261DCAE50AF39A8AE175E6E0F5CD4AEF709DFF271DCAEC36F0F5CECAEB746AF391CBF235C5CAF7D11AB66
	F21779A5D74D65328E78A3574265027C12BB4A65328F7AA36764F2D778A5B7064BAD6870C7EE9C171B6817DC84177B3C539F39E8AEF72FDFF253395C97077C11CB60F2D1FE498951A8D7FF589F39DCAEF73FDFF2A5DC2E214B9F39DAAE976D17DC9B175BFE449FB9A3173B5D636C0EABDA5A639A946D395F151D2DE95653B3BA516CECCD864775940F14616C1D7AA41DC711709460D5BD00795755A8738FF940BD4F890AB0135B6BA1D72E74B5059C9B572DAAA16BB6F40EA89B8A5454C85FD14433181D7271CA62
	83EC2FF16EDF341A123F609CF4991D1792FD6A7E0267E2EA961174DD909E8B948E948314G1479A02471A03EAFEF1C2F36E6627E3E7436E0A26D41967B5E261159B05FC3EE39A25C72201A8D379ED826EEC31C35096B1E7F9414B6A463CCA32469FA90EDF8A7DDFFA2631F608751A79E99E1F91E9A32BCB12A656931F8AB0FB87A97578726B7601AC39C57754A9DA35375FA8FB9257F9644384BB11BDE2ED7734B8A085B9803B65DF38857B13AE2D04FAF1BC726E737071C5226E3D5757C6782B5BD43A1EE945773
	46FC3EAE46757CF0674874DC63A12754B3E7123B1C38C6D64A5748A6F17F9B218ECFF948A96B7468A4B5DB0D5F23349519D738A0EE50A43455FB052867F82EE7702E116979CB8FB9251E3113545A4997E5E4FEB22C75B5154F6D62FA61FAACC792AFC77B6E11154360A127ACC759C3EA65882D5ABA0CF2D83B49DEAA770ECD7AF00F7E73CA873E839A9F42B543C9749B52A004478205BF046554360C2C1CCBBD6414650CFEC84D2F8EF7A87D0A2C5544C25C4407502F8A3671B55D07D14FC7C7286753C36AD97730
	DAFDDC342BF238FEA55FE6A0E09D6C2E457E2E63E1FC8FFF3D181ECF05F06843784E7DE0BEB96B017360B61B59CA7620B2DE788272BD4F66B0C30DA376DB0AF55B9C7470834392F23C1F4B181523FEAE636D9C75F3999F6478BEDB1531505B398DF68E2A00FE3B080072CD86E258559C0B6358527D08A5F16CDA0EE5CEC62C309D31C20EDD47318A0EAD57A35648316BB95641B15D1708D9B8F6834782B83662GE2E3B9F6934742B8D6FC9031099C3B19E3D3B8363A8331999CFB1CE3499C53F7A226FD8431E99C
	53F16C40A1442AB87684471AB956F19831AE0E7DAF476C9CBB5405D8A0471E62D888473A0EA0964E31E87A0DA28A42D3B9F6832D4BE488677C955B70DEBA8E2F02309E484571C394A763B0529710B5EF0647357BBA3BC6643D716424D7442B9243AC0F37FD6611B10C74314F1007713CDC917DBDA9EF81EDD37D7D26FEBA00A6DFFAC45E0B4EA5024A39A532F9D4403DDAE7EA660AF136BBED8D9BF89FB52B34C0D09DA3528FC82C9F9A57097DD050DF71DD706437445E51900E85CA6275206373BC6D231E365581
	D625404573160B3C77BF3B972977BF7B9611FE2F5FB66068B6A97B180EC5851CA74DB048FEE1E296F1CF8415F79A9CBDA60FBE2A174AB31EB779D30B3C75E34C66F5CDF21BD789582FDFF08A5F2D4D0F22BD138F92FB86C0B804E00F22BDA335E84F9840E2C55BA50ACF4D94CF9B333CB5BB64F9EF643E7AF4032F79F4015774E25C525B444B72G6D9F099D4B26E0D992587D97908E830A1A02E559CF57B8262B64C1A841EB5EC14D723C2BF95ECBF3C85E64BB3A709866FDC79E495B8861C120310FE15E3F4A77
	D56E70473C655D36D31E77E6EE47ABCAFD259765B5BD4D2EF932744826BFD61658BD6893D3F9D996941232E87F86E39A205A3FE1D9D20BFC652D7F1B373C9F5CA5AFCBA5AF4B976BFD25576BB53D4BF64B537B0C271748576A86C1B6D8A1BFDEA5BD364672B95D779879B73646124271A60AC74BF0367672E8965E03B485F8D50F63770A069639DE6B393F7C2C837B31104751464FADA1E9CC01F0BC10B095EDDC344DE7BB196A4DA6F3763855EFA55A242D9653ABD3112DD341D89FF3FEB1A91F0B07AF22613382
	765F26FA921775D35B2DC6F1704776632C23E3265BC1B1726D19E19194B3E984618B0ED552776C9120039A446E2058E3C0EBB936010E1956244863CD20583ED4F93C0D34CF7817DB3C5FD36CA7A972F81F51B15312F439AE1194FB408D5BCC47CCDF4220554C313BB8F69B47369CC46C950ECD64583A9444BE27FE70B658A5A58D3117A9D684792ECBC56CA4FD6F6D83FD2F6669A5D06CF9403670747A6818699CE00FF05957A8F69BE04FF3D99B9DB35583F6B717CD24584500DD4C31D3DD98EFA7CF6F8D0A2D82
	EC8757391F0E23EE87ECD68A7A5FD3EDE4ECEFB11C358D009FC4CD2532FC1F1E9E42962031C0E1D3595A8573235F1EA17D68F107218FDEE16DF6D337B0EE9A2D0F7DA81B8961C220DA20AE2041E9585E6C2749FB100D98E49F14F91B18171DAF635B6CF8D1945B2342629C4B4A60F1AA45B6F303479A7C0CE9D2BBC91E662D9FB9F11E761BFFE77D45C20EFFC371EA994E7A11B8BA16A1E1A370927F0E634F4F284D871F00F7729308FDF59E4724619CFB157A44EC8867CE675F37CE216EA553191E3553A5FD5B26
	FB535D52C15FDF53190EF3B9FE166281B21C697EBE9DB71070B860897F0BBABDCA579F0D90F6F1AC176E238B0270B80EBD30160E45A19C4531CF4A310C13B9165400D86113D846077472F12F857000A7079ECF0F05B8E10AF893A1BCC50131F28F52BB2DE6BC292C4B4BA91E731432AE5F28463A2C85DE4CD3283F1936C7FDAC78FFACE2D38EE119DC31D8260FF264E50A81BCB6F668B2A52A4451BC2D5594BC2DD6265579C4473227155F9856D33C71E965B70648BC7C4650853C2827D17FFB73D17F62E7783C31
	94B167B3D826E779BDF7514FB0FD26BFA36915700CB7DF3C080EBF04FFB0FD52B9FE8545F3E5B853F3C9A16EAFA881DE50BFD0278F0BD027C40E9DD80FD8DD9CE2991D6833419C5BC73171900E6458433C5EE26378F7A92AAA7B5DA27BBDAD6B7B383B449B31BCDE7B81728871787ED9762C6C6E29E73D5561C16ABB7AE7D9DDE5F15CC4F1278CE7F578929D8F1170D860A5BF0BB62F5A06B66F7AA7E2BD35D8DF619C8B2F45F8D17F44BD05CB7761B8AD67B92D2679B9FC67D49EF57BE6C5F61154546CF0180D5B
	8CBDAD748D4646ED476818054887BC076336E01AE6A40427G45BF07F7EE38D663BE5B70DB2E91DA8236285E319927DF11AA4CE0B6AB1EA16DB5C9580E7BEC1F590FF99E85FE488C02E95D4E05107716AD0D2D85B27ED6B7BE6903487CDC625B5D78C45F6DEE72B73A71090DCAC5F9D63607D7E159E6BF9CA6D8FED76A757E50B831CC1A6745767E5725C25742E7D2D99DC552B6D58B3C3667793B6EB06FB71E47B6E5BF2F03E7B404E3010497206F872A855283590102DE4038975038E1AF30BD7CB1700C874AFC
	116D41AF01E7730B987705EF83E43A12B471B7C9BB7679115D07A627E8B18D3D1836A0BED1E729DD4DBDAF57E52E6CF7166039A6B39242F59C3C338C570370FEA10C33D8585BC562589D2663A60743E4E4574B8821AF5236C647A23D705B89D496CF3053679BC57999AF2A4FC730FF26FB3EA10E9664160818AEDE1ACF09F353C3244CB0GB4778D74515CD95E05343FF5C27C00F83EFECA57B042A19C43312F68DCA09642099CFBC60FFE157B92563F23031CEFB1C2B890E8BCD094671D27BCF20E011C71A0FB86
	4999844653F4A87BD9A2AF8F9BDF9A5AF722D4620C677997F96461EDDD4E974DD541B2381D17F752B5F93B6194590846EC1C2C457EE67ACBB82E7EB41B1C4DB9EE33BAD91CFABAFECBGFEB20F93CB26D3025364F2163CCC6EF1FEFCA9F1F7669F75650DBEF4C47FC89349827281C0AB45B20FFDD9728F16DED6A326977A323A3F254B521B70323B3F454852E33E112047F77B5417799A72A07597A27B8ADFEBBEC7308A9266D8949D239E05301DE33DBA7435C00EBDC95F9DD3A11C708A5FDB37D9C70C14G63A6
	20DA2023C003C0A1C091C0D392B06E4FE85CA488673E4A4E61D43D4A4E8B11EF19641C0F7ED50C1BDC9DA05A6228180652C635E21EA49FC1056F0BA2D4628F2AE0CC17E51BD11739027A3DDF99E23DE48F53276524F62FE0168A46FCB40076ABCE1B4D22B75B4987D401796A7EC249D7DFBC644BD733E4FEC54889B69F732A642B63DED57AD6BDDD9B8CA3F576AA7A42E34B88968761A40E359521EF953C06D87C9E7423B20E7DE9BF7A5160EBD85FE5F43C9E8C618820499C2F26B8B9ABB663B536FFD75CD31627
	B6CEA4324335FB3098F7320A0CF8DF32EA9E7E3C4752E469A9F92C2E26657B532FE8E602ED0172C5BD4AE6AA7B1509253E5243FBEC670A69D54FF42F7B16194A3ACF5E0363520E19D8FF1F6F45F71305E3FFE845FA8E1E09F574933A9FA18E42C2A2E2E3A9C64E6A95F0ECD9A15A1944D56ACCE47DE9CF6AF5D94573D0EB1F5FF5EC42ECDFD1644B7672718135FDA22BCB6C53DB9215F55937FEA85F103FA7BA925D6B52A2CB0F3D73B6F662FB5115086F3CB4321CA79C33B968879B364675B55F579684714683CD
	87CAC8E4E7A219EE7F745947E03E281B66F5A86B6B2C2CA4DC763A524FFE5301BED57DBA7AD4A91F1BF63D0E3EF2A40F0C6B43A1BC99A89EA8778D10F98379A7A9DF8FE1679B6CEC66D8F8CE607C19CB14ED1A4863EF1266F06B3CDA148B977510FCAD53235F100FE17C71B5FC8F2489D29F426C3FFB9B5AFF6A9B5E472B68A371EF387B5A6CB7143E91DC0B3E11B98B6B784F3518C761AC4FBC147EDC81F19AE7C97E57B1CB4AC37C1E6957BEFC491E65A3146B71DB0E4D670F6D276B0633145FCECED25CBECB79
	6D6467FCCEBE883C38D9383FE4E391E9C70DC9B0A682F2818583C5GCDCE427DA61939642E8A1FFBBC75B6FB0B693449A25B7E414A771CDF678C508F85613E8C1C7BCE386BC6A1721217D23C1D1F0DCB9267FCEF0AF33EC716D21C15AFE6B9A9DF8570DA006CC0E3004681CDF8934B5716DB464AC70E7A56BB1D066EDEFA0A988BC78E76CAB0D9ACE77D52231D1EEB6FAF70FEA966CD36769E874F24B7599E856633FB8F234FEA5F9A5AE7F590276AAD29DDB43F251C471D3311EFD03BDA8C47CC96368900619FAE
	A1F7742B5FB205F156EC1B4FE59B8CCED30F0D5CF34FF8D7EE246B7C38CFC9E263BDD22724FC4941C04427B7E74B6598CB641D1CC7F8FAD31F5D8249D1D14E6B7AF70E0C07626C4C529F4F4B57CA74EFB1FB3A5E62F7B4ECD76387F17E2E05EA67A4C3B97F73DEB579891CBF6DD3B5FE8C671BF729259F8BFCB6763DD2A770F26A4F133B4B2D26B3BAFE182A518C2EC56ED7AD295CD8D126DBDFD9AA360350B37233D4557356F8BDCB15A87A1266DF6C59A8AC933F037E6ABCFE872D855EC7823BB3B8D340FF09DF
	F8E202B8E65F33C260ED72D9AD3649425B2E959A1FF8A9E52597DD1C228E517F12565A42ABDC29AC4DBF2C14EC71F263F0ECA11E2BBB65FD3D64913ABEB19B724BCC46F14369F64F76F9F9BB364F2AE456BEDB60F9B4194D6FD87BFCD3BF5438C1BE0FF201ECD0B2FB27507372494A76E96EDDCC5B036766CB46F7F6AD127379D9E1143F70A4E9976CDB19F46B9463ADD9CD3FA1485A8B43975033EF478D16FE932F4B4E92496EFFDC3BC2E977A6C835E40551EC3058FAD614694074156B79193EC78F4B7DB0671A
	0529D8C625FD4213D91DC7A6CBF52F66DF5EFDEEB2D98695FD373691FDB7A1D95DF7194CCC72A70144BAAEBA02F5DC7CB64C7701DCC0C1EF33FD7B2C7C2786BDFDE34CA04A0DFF1B7946C4F8CEF113CBBC675D8767FECB740A0778C9EFE37CA74A5D57F4DE256B983AF740575EC1FFBB2F9B4A5F64F361AE10333FA33D8F825FD17A5B6B7B5457756652B9EDB0449F778E6AF7ED8BC907756174DBAE59672C781E3B472965F11AEC0EBE0313610FE791FBF93B110C45492D4966326215F8BC5D2223542F95B766B1
	DE3020955C3EB10BF7DEB79D4D154B48BEBF0BEBE8C7146501378FAF0FF85F53E6E5DFCE4FCC3F03FD7915DB5478311CBF68D263A7F23E25C60D2FF9575F3E179E3993ED551163B987FAF3897AEB413B4C4FAB605978AE5B9349646217F97A79874BD02E6BDD6667CEF80E9165182F1C256BA42100053F0BFE7A411E61740B682753C1AE61DD49CF05594A71FCBC75C7AD608533D15F371A963B57AF1E1B976D30A8B7C7D63F489477819D4992647B8E7A457AFE6FEBE5FD50337E337D2D0F7364A836CA3F05FD50
	0DE418AC166D633DB8D76900FC185D0F6FC53BDBE6B33B8742B3E4B6DB77E6B67EEB2BBF737388100D1EAD4DE7264FD67685416BE8FBD139351071BFB91C456DD96934ED2894ED56760D52E6C447992AB60B934B7FC025EF7B442F177C3925D37EFEE2F3149BBB35A2BF997229F88F3F9B266B485FAAD16ED9ADE70D2126E63B130CEB3709CDC3FCEF3C4C5791FA5F43EF08850768D9BF88C782CDF94F5F7A1FC92E63905B50F4FEA6A17EBDD617427BB04FFF1F2D7F313A2C636B8FE56F2B0F7365EBA3F590C77F
	3E347E507B3E32AEBF781A358DF259BA2B4C81768734C47E69338BF8DD56EFEBE7DD35481B35F239206C2B1537ACE2BEB7FD1DA72563A54E6345D23F3E47EC0598E49FAC731D50BC396FB8C51B043D4F476A1DCA5FA27C091CFF17C77FCC78D3B8BF46E32CCE78B35E4733A0035BF04C107C3E2FB1437E8E499FFFD5AB77C716CE92BF0FD17141F0FD85539E68A4A1B6876E5DAF7DBEA57BBDEE5F686FA3785D286641664FDB0B3C6F655EDE243E17FBF7117AD912FDC53E7F46C7E711773F71F134C87EB7BE587C
	FFBB3DDF26976AAF90A88CE8A250148FF06E7FDA919987133FF467B96F5FEE6CA1FB4949DF37F3E27E0FAD77DE56694B077E1BF84FAEA7F366E3B6275356C752C77C4565243E2011D1D0BC23331C5848E16E69F53228A27E46F262EF9653F18A0BFF8B70902E6FA4C0590A05EC31AD30B39F846F820C750301B46ED8880783C57338678F233F4782661F3FCFBFAC887C0C41F1AFE78CE8EF4172CABC0F7B1FF3D3B07F2D5B91EB6158858BD127C00EB9FBB15EC40EE94B90CB62D8682ECCC1DC4BCD4D96573BAE26
	5F550D908EGE2767C3B0E7CED2D8306931EB73E8158663059CD8E67D906525B97453695FEDE3E36958A69CDG7255DE188E8B68BBBE86624EG4ACC4B5668002A00DA000E82B90146G0582C582CD860A83CA8252E832B585C0E59A547F27ABCAFD68AFEE30210E6CB03033E22C4EDEE993843EA6512E933C4E43B7EC5C8C13410A4D254C57FE570E3ED687BA38B4E86F775A5157A2B468EB1F52F3BA71909652C16FF4FF7DEABE6DAF195D6E263FD9192FABD9652D4C50F2F7C199DA0F1DB0F5BB75069E817B42
	7AC6F9FDD500AE0D693E6B0B15775DA3B8AE69007841C04C4F6F19D7A18C733C1F5E6C3418589005592A615F6857B169E82BDFFDC3B7324D81BB81D5G317CA386515E4D00854CC1FBA78F223DA367E09A2B4F113809904E4CG3F82E2F6DC26176A7AF7653E6A3AFAA35475460D25CC6E4C81C96E2D6543D9B328AAD59F83FA2F63EB8E8A5CA7E3E46F64C72BFD6839E953E7CCCF713E429AEC7F5599E81F18AD0859B9F6278B31B00E5D44E563B25066C5F9D8678519591A36CC0CEB4A43FA9B1309B6DF3E0C44
	0D0270F42044CCCCE3CDA156DB665CECCD5DDCCC43D6483FF14D45B42E23F1A3A09C8394B7976B6D15CE499ECF6F71E10F751BB601BDAAABCA7DECDF07A55BD7F6C9F9DD1567B32F75ACAFD61E2AEF50FE4920B7132F5E6BB93E3FE2AF5A23E2DE3626F79E5A636FFC2E94BA8F6D2121FF97F9BA049301B2337C6DB77464F803B80E7B65F254CF8769303EA0EC487BDEBA325C7B86A6777BA16514677545EFFAFE5DAFC308FD4F89226FEAA768627E1D67AA0A8748F0E66365FC9C90843C44AC74C52193F13DB6DB
	9324C55BB773F9D23496EDFF1A461D8D615CECF84FE4E35CD37CBE0646ECFF6B633F7EAD88B8BE78F653EAC156EF4A7EB854F1B2B5A167547994876B7009BCFC178FF2FD36F6E23DCE60586B1B91CB605887FC3CD0BC9F6B7F823773BEDD005B677BFE9708E7BFEB65F201A093B2049CFBDF6DB964FD5C28BFB474387188353D8946FBE4C10BE1478E51FDE5470F771B78783467D08E47F67637597A4DE40248F44F756B4EA1294CABC6A8F758EFB9665B4954074367ABFDBE65B05D83BCDF697317F11F0F86DE49
	822C63C037BB0F02G8FDDB01CBAFE53EDDCB7C11409911F31AAE908FB52374B659245F81A9C76AC4871A6F749C2DFF6AA83393A9C353E68EC2FDCCEAF4669951F03DE73DBD8A6178B96630D971F11DE65EE7638EFC3CE13D56418CFDE56C5FE73B99D9BC20B3CAB695D6964EFAC4298427CB5DD4EE80708569E363F624FF41E9017436A1CE1B16CCC0E0831F4D636FAEFDF1F348E5D3EB6342A4F4BB637FA4E4B36362A4F4B9ADB6573B2066DECA5FDDE8F0C41BBF83C3D9C6B64D8BBCD13E0874DC6E7AF47BB29
	DE84EFB6118C917F0A6AF506E29DA2E614E11DA2E6EEA5FD84943957466FFE303652EF92E60BC57CBB93B40E598ADD863747992A2359EE1069BD4831CE6E93F77BF52F1F64CB13C6A8176A573DFED21FF2BD1D0764AED476A9E19457ADD476A915FA6CD34A00978CA45E0D5068690FC79A657E4874CC79774846978B0614D39FDFB4D33924053E7BB7244CC5B02F2465DFC66796050B14F6A926F849A225DDEE7F866DD2853C10C558577EFEF0E47599BDC239777C16E3653A064E0FE6FB1477A60AE7AED616376C
	9C16B797F82E45D85E8C37FB5BE297B33BA70ACF98B8F969C39F59A217AB906315094FBA2FF211AE373EDE0C57ABBE873D4A05396999AC469BAFBEA33D4A2D4C9B197FD68EA9276E3FA7285CE495FD54A8AE977D7727F46E15142B2C4FEBA9AEACD156E771B22CCFAD706CCB30BE57960E4C8F370CD04E69379CAB5742A2227F54A54A72AE25F81CC7F9EF62F35084603565E1F9B7FF63B646499347B862B3B64F1BDF0C5DBB32725EB8C239277C16E376F05179E3E21E52CE97D0FCF61E52CE73DA79DCBDBFDBE3
	49C7BB5D34DC1E7F14FCE6179962B3B95F53CE6C0E162845647B0859EAB1DBCD6466439DA6ABAF53CF8F897C7735325F4507C67FFB4067BFC09EF37C1E6B0A7313914A6D99615C7AE5BA4F5596A8FDE496458B8A14BEB248675045409BD300BEF25AED1E13G387061F0669931BE7B4ADC15B444F906DBF9CB44F83562334D2B5CDB1B65F2C6B11ECBFC86F91553185D563945F89344E70C0A9C9B9705EC433152FFF36C3AEDB8D6AA65D84E671EE32AA51FFB0E295E1735150C43526F609F4027EF9D55BC443B4C
	8EFB5AA174305C8E8C53527515D830FB4207B8AE0DBBC357DC16E6EBF216A2365D05FB538BB9F6E8BB4ADAB87690DDA78D00F0B0475671F33D63B8F65DC24492B8764F9EFA36F4993CDB16A196CC57DB0C90F6F26C7EA6020D01F08847D66E407446F32C04FE47C902302690315D749CDC8104CBB896110D32D59C1B380B1F87AB44B5FA835D9FA74EAF69540A61052EEC894729954EF37512EF7DDA767BB37D687BD95B2866A11E5B245F9E26020D92386D5651B5DC21A8DB13DB047D5A4703D259BF117D3E731B
	513743649FA00F50F3D219EE157DDEFFEE74735EBD2AF908779B56E0BB5495E1BDCFE843F6D845318F77E13B2963580CADA89B4C315AF5A8BB1EE3572DC359880EBDCA7B9DE1B974C54B918B24F7D794C3380AE3AF717BAC6AB876A72AF3B004C3B9B6F99341A6C0B81AE3151F216C940EDDC05708F59FE5EB2ABFC26C162584EB0170510F502FC316C9F5FD036C77A74BC63F5E9BFE00BC720B24B269E43FEFAD9C7D3C6F9F55BC44B31C342F32C0FD8E72FA0EE1FBDBA19C4A31356D68A3613C6E3FED156CF129
	6CF7CE6B685B26F4D473E0E53E0BFE6B1A8D65556A508E59F4EF3C8E42959CF31CC25B546A50B60932BDCBEF4BFEDF58B97A3639F6D473E0E53E7C1067786A2707BC47D7337250B6C15CDE07683726D888A7F0AC0F0EDF040F211F7B9831EF78182610E359B5A8EB615864D5A89B4031352BF93E9CDBE6263290CE60D84AG15DD81792EC06C78G4FF785FE03DDA9386FBD5FCC470D96603BF81CFF1DF13FCF6057DF1124597E45AE976EDF8CDB61B946D76EC5A5E77F8961191009AB32957BFDAF22E34F984027
	727C1F5D621E7FBA0314FF93BF5B27D9291EFF1A0F7C8BD6CA793374A6AC44740AD552D31ED52D06B8727B8CDAE469B15D5F6EE15F644CCE72A90115B127973FD3F62C44B2EE2CF12F07BF52B83D40F772B88F37395BE17FB1498EB5BBD06F71DE6CA05FF72D34C324075EDF14396B73A59DF3C7C33CA9DC1FE3596E7A8CF4CB7ABC180D7A88456A7AE448ECA957076E77AAD6564B633BB0BD1DCAFAA49DBC8BCE282A583DDE1A0B1565BB7DEF925FC9365C107DA95C7F2E2063DEBD44BFDA0C65EC7AA69D638A38
	8FA244A8F0195DECBC82714795631E0C3BCD12ADAA7679F3F6E3B22401671F89AF2ED859C632693CAB8170E41E5FCB47257CA62C9B6A6C3C2F7CCAD6317C5E7B60038FD879DFF0397B42ECBAF62B02F8F52B50C657663B7B42153D12BEC201AFFD668E210F5DC31F3FAB5ACA82357FA0449B4375F9EE133BBE934C12BE4D1F79F366FB0C6CDE895AD6D6A9FDA9A4CF5D17A268BBA29A62CF61FA5D335453171EB8A17034FA3EF1AF5BB9B667DA8D7E3C9A537847FE77323DF3D2AADBE33BBFE783EAA1CD3C070160
	ED2B15E5FBEC393BBEAF5231C397446B657A941FF2572728CF5267A7277C3997A2C454874FAA042FD676837378BD93112B07FE5FCCD6249767D13ED31D6E653B143E4393A0DEB2AF5F5A9D6E652B33CA657B698EDF65CBD768D332C652076035EB14EDFB937565E64075EB30EDF75BE4753B9A738BDCB3F479C356A86C39C6D97E75E67772B75331C4A4440BDE0365AF98F0AF7FA5F6C91FF3837E54EF12C21F4C92C99F16760EFE29ADCCBDB35C3D04EC8F4F65AE5CFB14DB0236BBC11A231876DFCECBE95F3B45
	3F344F70FD7EADBC6D17481FF296794FCBFB10CB5477BDB1190567A49D5674D23BBA86CC0C17FCDE627D3E49BF7DCE6E407CA7F27D1625C8E53FB0CDCA7B0BEC7F52CE4E463413F85AB7EB2432EBF6A33F2C54D759E352A5FD340512BEAB3F992EBECCB6E839A49B56B6727D26185EEFBE12FE672D10522ED8B75C732FCCF673CAA91D2BD6C96938727DCB671EB5D2BAAFFEA225933549BFBB4DAB1352B9D5AE25F34DD27F52F924C2121D387F3B5BBB31D27A7D5BAAA96D14D3433513F79F1B3AD1724BAD796817
	C6D53FC49D7E35C97A5D3ED952E75E0E6F2E4F699AA96D3F554A6AF215FFEDF0E0B516E51C4F323C33DD7AFD20D94A6FCD67F7AF4B591DA4A4FE1FF45BEBB095F40AAF9D4E772CC1373D1133C1A6671361483D6C367F2D98E42A07A5E7F77B5BE3ADA0F3F4D8F26FE54B651CA0B3E6D8F2F35D7ECE53B810099816DC1D5B5FA20886196943127BFA355BF7C510A1D7847A12E3EB81373ABC57B9FE6D72DC6778D92DE73C10DA4FF8A90BBC634DD964996F529D1E7102F6F8464B1D6F996F43791E71F43BBD632D5A
	6D996FE03EE73C2EFC4FF8D72E760C77735572F8E42C3CD848AD3D83A6B6612F8A69CEE19E3D0DC1C72EE3F08AA56291F5DD3FF8130AEE205FE454B9EDBA132B5BB2E0B4693A215DB9EC16FE073048F35FFC7D957F7BC478D70D3929C26ACEE1CEAF7D6834D3C8BFC33ECA3948380BCCE9FF8E328B386CCE3AA9AF6E74061A3467EECACB95B4A048B6A96E94B4E427A148BBD8BAE9CE1B1D262211D37FA961DBA1D516F636DB9F71408D9BDF187C4C017EB4E14ECE61C3B2D4ECB7B968CECC13117C451983A68751
	3CC918EBA7FFE900DCA6G997753C7FA3F732C4554A2649E5FEFBAB5E06AF71A0C753847335FA9AC21FFCFFC9DB97F322E59505FCB97C93634889A2B214F649496B13645E06DD947B6FCEE215A27545789649F5D3E837AAE267A12D44AF9AA0B6FDE306A63DDB3A2530454A6E11E45E6B0B6993A1DB647CEE12E3357E16A6F35D90CAE7B97AC21CC7AE5145EA88849AD6345A705ADA767E13952A7DD5785E547E7B70139DC8EE19D0DC9C64665BC0631215760002CCC0E1DC08648321873AED86EDC7D480E7C2ED4
	A1C5ACA4B17DDC175DA94CB9EE68B3DB4E420FC65AA353CA49F602368E03351F7CE1ED50CC27508CD9BC03721FCD2A386A56F78E518CA4D1277091B3A5082E6BB1597A56559FBFEE361AF882E0D7C83E08A7CF6214AB62ACF2DD39E457348F0E019FB48AE9FD9595747FCA7A7FFA72FFA5C5AAA9D2399E0C1BA8787C27643B304C54F9380F136AAFEF029AF4BE796A249B1F2ACDCC0052B58969740FF6C3A564C831768E749DB3B9AE893F2AA8EBEC5CFF11BA3293D7F111F49732645DBC1FFB3FF7B4D506260DA8
	059F96CD1121A93CE5430CBC254707A409F3AD44390006B2E89BBBCAABE5BEEDE3844D72ECAC84DE40DD160496512839747FFC3F9D00C8FDC8E517116CE9385C65D636CC11D264FA27DE4BC3B0B7CF19B7048409B3479F6BBA05F4F2A1D68DB4C73C618AFE2713E39684436B28603716DEA822E3D7CEB805AC96A427620119D1525BDB5357D76A94B2453784008B4931F99DC9CA142A21E200E1A2EAB1B2CBAAF5EBF59BAACB65294EE391D9E6F3CB7A58197B529FDF1D6E725596FFD41A6E733F5778D1695F799F
	E369237F61166EF57D78F4328EDD7BCCAF6D7F1726F5E2F8C052F40ECC534C9F1F2603122699B2CDB3FEFC35FF51FFCC5B3F6CC758F6027FE35A4EAFC65AF37EC8743F7EBF46CFEF790F71095BBDB59558135D55D8FADEFED7E3724519DE6F8C8D28E56BC9E345A7392B115D35F1166E6B1B82F8C2AD5EB3B229FC2D607D4E0D76BE034562B4D8CE56DB0D647E0DEDE7591DD0CC765BF5A47DFE0CA3B2996F62F5C46F93B2197F83D0CB878873E7591EC6B3GGB43DGGD0CB818294G94G88G88G8FDA02B1
	73E7591EC6B3GGB43DGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG00B3GGGG
**end of data**/
}
/**
 * Return the DateComboBox property value.
 * @return com.cannontech.common.gui.util.DateComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.DateComboBox getDateComboBox() {
	if (ivjDateComboBox == null) {
		try {
			ivjDateComboBox = new com.cannontech.common.gui.util.DateComboBox();
			ivjDateComboBox.setName("DateComboBox");
			ivjDateComboBox.setOpaque(false);
			// user code begin {1}

			getDateComboBox().setDateFormat( dateFormatter );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDateComboBox;
}
/**
 * Insert the method's description here.
 * Creation date: (3/13/2001 11:17:17 AM)
 * @return java.text.SimpleDateFormat
 */
public java.text.SimpleDateFormat getDateFormatter() 
{
	return dateFormatter;
}
/**
 * Return the JCheckBoxDayChooser property value.
 * @return com.cannontech.common.gui.util.JCheckBoxDayChooser
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.unchanging.JCheckBoxDayChooser getJCheckBoxDayChooser() {
	if (ivjJCheckBoxDayChooser == null) {
		try {
			ivjJCheckBoxDayChooser = new com.cannontech.common.gui.unchanging.JCheckBoxDayChooser();
			ivjJCheckBoxDayChooser.setName("JCheckBoxDayChooser");
			ivjJCheckBoxDayChooser.setOpaque(false);
			ivjJCheckBoxDayChooser.setBorder(new javax.swing.border.EtchedBorder());
			// user code begin {1}

			//ivjJCheckBoxDayChooser.setHolidayVisible( false );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxDayChooser;
}
/**
 * Return the JCheckBoxEveryYear property value.
 * @return javax.swing.JCheckBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBox getJCheckBoxEveryYear() {
	if (ivjJCheckBoxEveryYear == null) {
		try {
			ivjJCheckBoxEveryYear = new javax.swing.JCheckBox();
			ivjJCheckBoxEveryYear.setName("JCheckBoxEveryYear");
			ivjJCheckBoxEveryYear.setOpaque(false);
			ivjJCheckBoxEveryYear.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJCheckBoxEveryYear.setText("Every Year");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCheckBoxEveryYear;
}
/**
 * Return the JComboBox1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxCategory() {
	if (ivjJComboBoxCategory == null) {
		try {
			ivjJComboBoxCategory = new javax.swing.JComboBox();
			ivjJComboBoxCategory.setName("JComboBoxCategory");
			ivjJComboBoxCategory.setEditable(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxCategory;
}
/**
 * Return the JComboBoxHoliday property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxHoliday() {
	if (ivjJComboBoxHoliday == null) {
		try {
			ivjJComboBoxHoliday = new javax.swing.JComboBox();
			ivjJComboBoxHoliday.setName("JComboBoxHoliday");
			ivjJComboBoxHoliday.setToolTipText("Holiday schedule used to exclude control");
			// user code begin {1}

			IDatabaseCache cache = com.cannontech.database.cache.DefaultDatabaseCache.getInstance();
			synchronized( cache )
			{
				List holidaySch = cache.getAllHolidaySchedules();
				for( int i = 0; i < holidaySch.size(); i++ )
					ivjJComboBoxHoliday.addItem( holidaySch.get(i) );
			}
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxHoliday;
}
/**
 * Return the JComboBoxStartPolicy property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxStartPolicy() {
	if (ivjJComboBoxStartPolicy == null) {
		try {
			ivjJComboBoxStartPolicy = new javax.swing.JComboBox();
			ivjJComboBoxStartPolicy.setName("JComboBoxStartPolicy");
			// user code begin {1}

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.MANUAL_START ) );

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.DATETIME_START ) );

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.DAYOFMONTH_START ) );

			ivjJComboBoxStartPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.WEEKDAY_START ) );
				
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxStartPolicy;
}
/**
 * Return the JComboBoxStopPolicy property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxStopPolicy() {
	if (ivjJComboBoxStopPolicy == null) {
		try {
			ivjJComboBoxStopPolicy = new javax.swing.JComboBox();
			ivjJComboBoxStopPolicy.setName("JComboBoxStopPolicy");
			// user code begin {1}

			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.MANUAL_STOP ) );

			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.ABSOLUTETIME_STOP ) );

			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.DURATION_STOP ) );
				
			ivjJComboBoxStopPolicy.addItem( 
					StringUtils.addCharBetweenWords( ' ', Schedule.UNTILCOMPLETE_STOP ) );

			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxStopPolicy;
}
/**
 * Return the JComboBox1 property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getJComboBoxType() {
	if (ivjJComboBoxType == null) {
		try {
			ivjJComboBoxType = new javax.swing.JComboBox();
			ivjJComboBoxType.setName("JComboBoxType");
			// user code begin {1}

			getJComboBoxType().addItem( Schedule.SIMPLE_TYPE );
			getJComboBoxType().addItem( Schedule.SCRIPT_TYPE );
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJComboBoxType;
}
/**
 * Return the JCSpinFieldDuration property value.
 * @return com.klg.jclass.field.JCSpinField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.klg.jclass.field.JCSpinField getJCSpinFieldDuration() {
	if (ivjJCSpinFieldDuration == null) {
		try {
			ivjJCSpinFieldDuration = new com.klg.jclass.field.JCSpinField();
			ivjJCSpinFieldDuration.setName("JCSpinFieldDuration");
			// user code begin {1}

			ivjJCSpinFieldDuration.setDataProperties(new com.klg.jclass.field.DataProperties(
								new com.klg.jclass.field.validate.JCIntegerValidator(null, new Integer(1), new Integer(Integer.MAX_VALUE), null, true, null,
								new Integer(1)/*Increment*/, "#,##0.###;-#,##0.###", false, false, false, null, new Integer(60)/*Default*/), new com.klg.jclass.util.value.MutableValueModel(java.lang.Integer.class, new Integer(1)), new com.klg.jclass.field.JCInvalidInfo(true, 2, new java.awt.Color(0, 0, 0, 255), new java.awt.Color(255, 255, 255, 255))));
			
			ivjJCSpinFieldDuration.setValue( new Integer(60) ); // Default value
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJCSpinFieldDuration;
}
/**
 * Return the JLabel1to31 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabel1to31() {
	if (ivjJLabel1to31 == null) {
		try {
			ivjJLabel1to31 = new javax.swing.JLabel();
			ivjJLabel1to31.setName("JLabel1to31");
			ivjJLabel1to31.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabel1to31.setText("(1 - 31)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel1to31;
}
/**
 * Return the JLabelFormat1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelABSFormat() {
	if (ivjJLabelABSFormat == null) {
		try {
			ivjJLabelABSFormat = new javax.swing.JLabel();
			ivjJLabelABSFormat.setName("JLabelABSFormat");
			ivjJLabelABSFormat.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelABSFormat.setText("(hh:mm)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelABSFormat;
}
/**
 * Return the JLabelAbsoluteStopTime property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelAbsoluteStopTime() {
	if (ivjJLabelAbsoluteStopTime == null) {
		try {
			ivjJLabelAbsoluteStopTime = new javax.swing.JLabel();
			ivjJLabelAbsoluteStopTime.setName("JLabelAbsoluteStopTime");
			ivjJLabelAbsoluteStopTime.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelAbsoluteStopTime.setText("Stop Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelAbsoluteStopTime;
}
/**
 * Return the StateNumberLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelCategory() {
	if (ivjJLabelCategory == null) {
		try {
			ivjJLabelCategory = new javax.swing.JLabel();
			ivjJLabelCategory.setName("JLabelCategory");
			ivjJLabelCategory.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelCategory.setText("Category:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelCategory;
}
/**
 * Return the JLabelFormat property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelFormat() {
	if (ivjJLabelFormat == null) {
		try {
			ivjJLabelFormat = new javax.swing.JLabel();
			ivjJLabelFormat.setName("JLabelFormat");
			ivjJLabelFormat.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelFormat.setText("(hh:mm)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelFormat;
}
/**
 * Return the JLabelHoliday property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelHoliday() {
	if (ivjJLabelHoliday == null) {
		try {
			ivjJLabelHoliday = new javax.swing.JLabel();
			ivjJLabelHoliday.setName("JLabelHoliday");
			ivjJLabelHoliday.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelHoliday.setText("Holiday:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelHoliday;
}
/**
 * Return the JLabelMinutes property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelMinutes() {
	if (ivjJLabelMinutes == null) {
		try {
			ivjJLabelMinutes = new javax.swing.JLabel();
			ivjJLabelMinutes.setName("JLabelMinutes");
			ivjJLabelMinutes.setFont(new java.awt.Font("dialog", 0, 12));
			ivjJLabelMinutes.setText("(minutes)");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelMinutes;
}
/**
 * Return the StateGroupNameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelName() {
	if (ivjJLabelName == null) {
		try {
			ivjJLabelName = new javax.swing.JLabel();
			ivjJLabelName.setName("JLabelName");
			ivjJLabelName.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelName.setText("Name:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelName;
}
/**
 * Return the JLabelStartTimePolicy property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStartTimePolicy() {
	if (ivjJLabelStartTimePolicy == null) {
		try {
			ivjJLabelStartTimePolicy = new javax.swing.JLabel();
			ivjJLabelStartTimePolicy.setName("JLabelStartTimePolicy");
			ivjJLabelStartTimePolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStartTimePolicy.setText("Start Time:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStartTimePolicy;
}
/**
 * Return the JLabelStartTypePolicy property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStartTypePolicy() {
	if (ivjJLabelStartTypePolicy == null) {
		try {
			ivjJLabelStartTypePolicy = new javax.swing.JLabel();
			ivjJLabelStartTypePolicy.setName("JLabelStartTypePolicy");
			ivjJLabelStartTypePolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStartTypePolicy.setText("Stop Type Policy:");
			// user code begin {1}
         
         ivjJLabelStartTypePolicy.setText("Start Type Policy:");
         
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStartTypePolicy;
}
/**
 * Return the JLabelStopPolicy property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelStopPolicy() {
	if (ivjJLabelStopPolicy == null) {
		try {
			ivjJLabelStopPolicy = new javax.swing.JLabel();
			ivjJLabelStopPolicy.setName("JLabelStopPolicy");
			ivjJLabelStopPolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelStopPolicy.setText("Stop Type Policy:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelStopPolicy;
}
/**
 * Return the JLabelType property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabelType() {
	if (ivjJLabelType == null) {
		try {
			ivjJLabelType = new javax.swing.JLabel();
			ivjJLabelType.setName("JLabelType");
			ivjJLabelType.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJLabelType.setText("Type:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabelType;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJLabelName = new java.awt.GridBagConstraints();
			constraintsJLabelName.gridx = 0; constraintsJLabelName.gridy = 0;
			constraintsJLabelName.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelName.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanel1().add(getJLabelName(), constraintsJLabelName);

			java.awt.GridBagConstraints constraintsJTextFieldScheduleName = new java.awt.GridBagConstraints();
			constraintsJTextFieldScheduleName.gridx = 1; constraintsJTextFieldScheduleName.gridy = 0;
			constraintsJTextFieldScheduleName.gridwidth = 2;
			constraintsJTextFieldScheduleName.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldScheduleName.weightx = 1.0;
			constraintsJTextFieldScheduleName.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanel1().add(getJTextFieldScheduleName(), constraintsJTextFieldScheduleName);

			java.awt.GridBagConstraints constraintsJLabelCategory = new java.awt.GridBagConstraints();
			constraintsJLabelCategory.gridx = 0; constraintsJLabelCategory.gridy = 1;
			constraintsJLabelCategory.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelCategory.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanel1().add(getJLabelCategory(), constraintsJLabelCategory);

			java.awt.GridBagConstraints constraintsJComboBoxCategory = new java.awt.GridBagConstraints();
			constraintsJComboBoxCategory.gridx = 1; constraintsJComboBoxCategory.gridy = 1;
			constraintsJComboBoxCategory.gridwidth = 2;
			constraintsJComboBoxCategory.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxCategory.weightx = 1.0;
			constraintsJComboBoxCategory.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanel1().add(getJComboBoxCategory(), constraintsJComboBoxCategory);

			java.awt.GridBagConstraints constraintsJLabelType = new java.awt.GridBagConstraints();
			constraintsJLabelType.gridx = 0; constraintsJLabelType.gridy = 2;
			constraintsJLabelType.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelType.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanel1().add(getJLabelType(), constraintsJLabelType);

			java.awt.GridBagConstraints constraintsJComboBoxType = new java.awt.GridBagConstraints();
			constraintsJComboBoxType.gridx = 1; constraintsJComboBoxType.gridy = 2;
			constraintsJComboBoxType.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxType.weightx = 1.0;
			constraintsJComboBoxType.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanel1().add(getJComboBoxType(), constraintsJComboBoxType);

			java.awt.GridBagConstraints constraintsTemplateLabel = new java.awt.GridBagConstraints();
			constraintsTemplateLabel.gridx = 0; constraintsTemplateLabel.gridy = 3;
constraintsTemplateLabel.gridheight = 2;
			constraintsTemplateLabel.fill = java.awt.GridBagConstraints.VERTICAL;
			constraintsTemplateLabel.anchor = java.awt.GridBagConstraints.WEST;
			constraintsTemplateLabel.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanel1().add(getTemplateLabel(), constraintsTemplateLabel);

			java.awt.GridBagConstraints constraintsTemplateComboBox = new java.awt.GridBagConstraints();
			constraintsTemplateComboBox.gridx = 1; constraintsTemplateComboBox.gridy = 4;
			constraintsTemplateComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsTemplateComboBox.weightx = 1.0;
			constraintsTemplateComboBox.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanel1().add(getTemplateComboBox(), constraintsTemplateComboBox);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}
/**
 * Return the JPanelDayOfMonth property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelDayOfMonth() {
	if (ivjJPanelDayOfMonth == null) {
		try {
			ivjJPanelDayOfMonth = new javax.swing.JPanel();
			ivjJPanelDayOfMonth.setName("JPanelDayOfMonth");
			ivjJPanelDayOfMonth.setOpaque(false);
			ivjJPanelDayOfMonth.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJTextFieldDayOfMonth = new java.awt.GridBagConstraints();
			constraintsJTextFieldDayOfMonth.gridx = 0; constraintsJTextFieldDayOfMonth.gridy = 0;
			constraintsJTextFieldDayOfMonth.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldDayOfMonth.weightx = 0.5;
			constraintsJTextFieldDayOfMonth.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelDayOfMonth().add(getJTextFieldDayOfMonth(), constraintsJTextFieldDayOfMonth);

			java.awt.GridBagConstraints constraintsJLabel1to31 = new java.awt.GridBagConstraints();
			constraintsJLabel1to31.gridx = 1; constraintsJLabel1to31.gridy = 0;
			constraintsJLabel1to31.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJLabel1to31.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabel1to31.weightx = 1.0;
			constraintsJLabel1to31.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelDayOfMonth().add(getJLabel1to31(), constraintsJLabel1to31);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelDayOfMonth;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStartPolicy() {
	if (ivjJPanelStartPolicy == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder;
			ivjLocalBorder = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder.setTitleFont(new java.awt.Font("dialog", 0, 14));
			ivjLocalBorder.setTitle("Start Policy");
			ivjJPanelStartPolicy = new javax.swing.JPanel();
			ivjJPanelStartPolicy.setName("JPanelStartPolicy");
			ivjJPanelStartPolicy.setBorder(ivjLocalBorder);
			ivjJPanelStartPolicy.setLayout(new java.awt.GridBagLayout());
			ivjJPanelStartPolicy.setPreferredSize(new java.awt.Dimension(385, 155));
			ivjJPanelStartPolicy.setFont(new java.awt.Font("dialog", 0, 14));
			ivjJPanelStartPolicy.setMinimumSize(new java.awt.Dimension(667, 155));

			java.awt.GridBagConstraints constraintsJLabelStartTimePolicy = new java.awt.GridBagConstraints();
			constraintsJLabelStartTimePolicy.gridx = 0; constraintsJLabelStartTimePolicy.gridy = 1;
			constraintsJLabelStartTimePolicy.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelStartTimePolicy.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStartPolicy().add(getJLabelStartTimePolicy(), constraintsJLabelStartTimePolicy);

			java.awt.GridBagConstraints constraintsJLabelFormat = new java.awt.GridBagConstraints();
			constraintsJLabelFormat.gridx = 3; constraintsJLabelFormat.gridy = 1;
			constraintsJLabelFormat.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelFormat.ipady = -2;
			constraintsJLabelFormat.insets = new java.awt.Insets(8, 4, 6, 4);
			getJPanelStartPolicy().add(getJLabelFormat(), constraintsJLabelFormat);

			java.awt.GridBagConstraints constraintsJTextFieldTimeEntryStart = new java.awt.GridBagConstraints();
			constraintsJTextFieldTimeEntryStart.gridx = 1; constraintsJTextFieldTimeEntryStart.gridy = 1;
			constraintsJTextFieldTimeEntryStart.gridwidth = 2;
			constraintsJTextFieldTimeEntryStart.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTimeEntryStart.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJTextFieldTimeEntryStart.weightx = 1.0;
			constraintsJTextFieldTimeEntryStart.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStartPolicy().add(getJTextFieldTimeEntryStart(), constraintsJTextFieldTimeEntryStart);

			java.awt.GridBagConstraints constraintsJLabelHoliday = new java.awt.GridBagConstraints();
			constraintsJLabelHoliday.gridx = 4; constraintsJLabelHoliday.gridy = 1;
			constraintsJLabelHoliday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelHoliday.ipady = -2;
			constraintsJLabelHoliday.insets = new java.awt.Insets(7, 4, 7, 4);
			getJPanelStartPolicy().add(getJLabelHoliday(), constraintsJLabelHoliday);

			java.awt.GridBagConstraints constraintsJComboBoxHoliday = new java.awt.GridBagConstraints();
			constraintsJComboBoxHoliday.gridx = 5; constraintsJComboBoxHoliday.gridy = 1;
			constraintsJComboBoxHoliday.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxHoliday.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxHoliday.weightx = 1.0;
			constraintsJComboBoxHoliday.insets = new java.awt.Insets(3, 4, 2, 4);
			getJPanelStartPolicy().add(getJComboBoxHoliday(), constraintsJComboBoxHoliday);

			java.awt.GridBagConstraints constraintsJPanelStarts = new java.awt.GridBagConstraints();
			constraintsJPanelStarts.gridx = 0; constraintsJPanelStarts.gridy = 2;
			constraintsJPanelStarts.gridwidth = 6;
			constraintsJPanelStarts.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelStarts.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJPanelStarts.weightx = 1.0;
			constraintsJPanelStarts.weighty = 1.0;
			constraintsJPanelStarts.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStartPolicy().add(getJPanelStarts(), constraintsJPanelStarts);

			java.awt.GridBagConstraints constraintsJComboBoxStartPolicy = new java.awt.GridBagConstraints();
			constraintsJComboBoxStartPolicy.gridx = 3; constraintsJComboBoxStartPolicy.gridy = 0;
			constraintsJComboBoxStartPolicy.gridwidth = 4;
			constraintsJComboBoxStartPolicy.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxStartPolicy.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJComboBoxStartPolicy.weightx = 1.0;
			constraintsJComboBoxStartPolicy.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStartPolicy().add(getJComboBoxStartPolicy(), constraintsJComboBoxStartPolicy);

			java.awt.GridBagConstraints constraintsJLabelStartTypePolicy = new java.awt.GridBagConstraints();
			constraintsJLabelStartTypePolicy.gridx = 0; constraintsJLabelStartTypePolicy.gridy = 0;
			constraintsJLabelStartTypePolicy.gridwidth = 2;
			constraintsJLabelStartTypePolicy.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelStartTypePolicy.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStartPolicy().add(getJLabelStartTypePolicy(), constraintsJLabelStartTypePolicy);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStartPolicy;
}
/**
 * Return the JPanelStarts property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStarts() {
	if (ivjJPanelStarts == null) {
		try {
			ivjJPanelStarts = new javax.swing.JPanel();
			ivjJPanelStarts.setName("JPanelStarts");
			ivjJPanelStarts.setPreferredSize(new java.awt.Dimension(359, 109));
			ivjJPanelStarts.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCheckBoxDayChooser = new java.awt.GridBagConstraints();
			constraintsJCheckBoxDayChooser.gridx = 0; constraintsJCheckBoxDayChooser.gridy = 0;
			constraintsJCheckBoxDayChooser.gridwidth = 2;
			constraintsJCheckBoxDayChooser.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJCheckBoxDayChooser.weightx = 1.0;
			constraintsJCheckBoxDayChooser.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStarts().add(getJCheckBoxDayChooser(), constraintsJCheckBoxDayChooser);

			java.awt.GridBagConstraints constraintsJCheckBoxEveryYear = new java.awt.GridBagConstraints();
			constraintsJCheckBoxEveryYear.gridx = 1; constraintsJCheckBoxEveryYear.gridy = 0;
			constraintsJCheckBoxEveryYear.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJCheckBoxEveryYear.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCheckBoxEveryYear.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStarts().add(getJCheckBoxEveryYear(), constraintsJCheckBoxEveryYear);

			java.awt.GridBagConstraints constraintsJPanelDayOfMonth = new java.awt.GridBagConstraints();
			constraintsJPanelDayOfMonth.gridx = 0; constraintsJPanelDayOfMonth.gridy = 0;
			constraintsJPanelDayOfMonth.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJPanelDayOfMonth.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJPanelDayOfMonth.weightx = 1.0;
			constraintsJPanelDayOfMonth.weighty = 1.0;
			constraintsJPanelDayOfMonth.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStarts().add(getJPanelDayOfMonth(), constraintsJPanelDayOfMonth);

			java.awt.GridBagConstraints constraintsDateComboBox = new java.awt.GridBagConstraints();
			constraintsDateComboBox.gridx = 0; constraintsDateComboBox.gridy = 0;
			constraintsDateComboBox.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsDateComboBox.anchor = java.awt.GridBagConstraints.WEST;
			constraintsDateComboBox.weightx = 1.0;
			constraintsDateComboBox.weighty = 1.0;
			constraintsDateComboBox.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStarts().add(getDateComboBox(), constraintsDateComboBox);
			// user code begin {1}

			getJPanelStarts().setPreferredSize(
					new java.awt.Dimension(200, 110) );

			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStarts;
}
/**
 * Return the JPanelStartInternalPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStopInternalPanel() {
	if (ivjJPanelStopInternalPanel == null) {
		try {
			com.cannontech.common.gui.util.TitleBorder ivjLocalBorder1;
			ivjLocalBorder1 = new com.cannontech.common.gui.util.TitleBorder();
			ivjLocalBorder1.setTitleFont(new java.awt.Font("dialog", 0, 14));
			ivjLocalBorder1.setTitle("Stop Policy");
			ivjJPanelStopInternalPanel = new javax.swing.JPanel();
			ivjJPanelStopInternalPanel.setName("JPanelStopInternalPanel");
			ivjJPanelStopInternalPanel.setBorder(ivjLocalBorder1);
			ivjJPanelStopInternalPanel.setLayout(new java.awt.GridBagLayout());
			ivjJPanelStopInternalPanel.setPreferredSize(new java.awt.Dimension(266, 110));
			ivjJPanelStopInternalPanel.setMinimumSize(new java.awt.Dimension(262, 110));

			java.awt.GridBagConstraints constraintsJComboBoxStopPolicy = new java.awt.GridBagConstraints();
			constraintsJComboBoxStopPolicy.gridx = 1; constraintsJComboBoxStopPolicy.gridy = 0;
			constraintsJComboBoxStopPolicy.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJComboBoxStopPolicy.anchor = java.awt.GridBagConstraints.NORTH;
			constraintsJComboBoxStopPolicy.weightx = 1.0;
			constraintsJComboBoxStopPolicy.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStopInternalPanel().add(getJComboBoxStopPolicy(), constraintsJComboBoxStopPolicy);

			java.awt.GridBagConstraints constraintsJLabelStopPolicy = new java.awt.GridBagConstraints();
			constraintsJLabelStopPolicy.gridx = 0; constraintsJLabelStopPolicy.gridy = 0;
			constraintsJLabelStopPolicy.anchor = java.awt.GridBagConstraints.NORTH;
			constraintsJLabelStopPolicy.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStopInternalPanel().add(getJLabelStopPolicy(), constraintsJLabelStopPolicy);

			java.awt.GridBagConstraints constraintsJPanelStops = new java.awt.GridBagConstraints();
			constraintsJPanelStops.gridx = 0; constraintsJPanelStops.gridy = 1;
			constraintsJPanelStops.gridwidth = 2;
			constraintsJPanelStops.fill = java.awt.GridBagConstraints.BOTH;
			constraintsJPanelStops.weightx = 1.0;
			constraintsJPanelStops.weighty = 1.0;
			constraintsJPanelStops.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStopInternalPanel().add(getJPanelStops(), constraintsJPanelStops);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStopInternalPanel;
}
/**
 * Return the JPanelStops property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelStops() {
	if (ivjJPanelStops == null) {
		try {
			ivjJPanelStops = new javax.swing.JPanel();
			ivjJPanelStops.setName("JPanelStops");
			ivjJPanelStops.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsJCSpinFieldDuration = new java.awt.GridBagConstraints();
			constraintsJCSpinFieldDuration.gridx = 0; constraintsJCSpinFieldDuration.gridy = 0;
			constraintsJCSpinFieldDuration.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJCSpinFieldDuration.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJCSpinFieldDuration.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStops().add(getJCSpinFieldDuration(), constraintsJCSpinFieldDuration);

			java.awt.GridBagConstraints constraintsJLabelABSFormat = new java.awt.GridBagConstraints();
			constraintsJLabelABSFormat.gridx = 2; constraintsJLabelABSFormat.gridy = 0;
			constraintsJLabelABSFormat.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelABSFormat.weightx = 1.0;
			constraintsJLabelABSFormat.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStops().add(getJLabelABSFormat(), constraintsJLabelABSFormat);

			java.awt.GridBagConstraints constraintsJTextFieldTimeAbsoluteStopTime = new java.awt.GridBagConstraints();
			constraintsJTextFieldTimeAbsoluteStopTime.gridx = 1; constraintsJTextFieldTimeAbsoluteStopTime.gridy = 0;
			constraintsJTextFieldTimeAbsoluteStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextFieldTimeAbsoluteStopTime.weightx = 1.0;
			constraintsJTextFieldTimeAbsoluteStopTime.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStops().add(getJTextFieldTimeAbsoluteStopTime(), constraintsJTextFieldTimeAbsoluteStopTime);

			java.awt.GridBagConstraints constraintsJLabelAbsoluteStopTime = new java.awt.GridBagConstraints();
			constraintsJLabelAbsoluteStopTime.gridx = 0; constraintsJLabelAbsoluteStopTime.gridy = 0;
			constraintsJLabelAbsoluteStopTime.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJLabelAbsoluteStopTime.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelAbsoluteStopTime.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelStops().add(getJLabelAbsoluteStopTime(), constraintsJLabelAbsoluteStopTime);

			java.awt.GridBagConstraints constraintsJLabelMinutes = new java.awt.GridBagConstraints();
			constraintsJLabelMinutes.gridx = 1; constraintsJLabelMinutes.gridy = 0;
			constraintsJLabelMinutes.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJLabelMinutes.anchor = java.awt.GridBagConstraints.WEST;
			constraintsJLabelMinutes.weightx = 1.0;
			constraintsJLabelMinutes.insets = new java.awt.Insets(4, 4, 4, 0);
			getJPanelStops().add(getJLabelMinutes(), constraintsJLabelMinutes);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelStops;
}
/**
 * Return the JTextFieldDayOfMonth property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getJTextFieldDayOfMonth() {
	if (ivjJTextFieldDayOfMonth == null) {
		try {
			ivjJTextFieldDayOfMonth = new javax.swing.JTextField();
			ivjJTextFieldDayOfMonth.setName("JTextFieldDayOfMonth");
			// user code begin {1}

			ivjJTextFieldDayOfMonth.setDocument( new com.cannontech.common.gui.unchanging.LongRangeDocument(1, 31) );
			ivjJTextFieldDayOfMonth.setText("1");
			
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldDayOfMonth;
}
/**
 * Return the StateGroupNameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JTextField getJTextFieldScheduleName() {
	if (ivjJTextFieldScheduleName == null) {
		try {
			ivjJTextFieldScheduleName = new javax.swing.JTextField();
			ivjJTextFieldScheduleName.setName("JTextFieldScheduleName");
			ivjJTextFieldScheduleName.setPreferredSize(new java.awt.Dimension(150, 21));
			ivjJTextFieldScheduleName.setMinimumSize(new java.awt.Dimension(150, 21));
			// user code begin {1}
			ivjJTextFieldScheduleName.addKeyListener(this);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldScheduleName;
}
/**
 * Return the JTextFieldAbsoluteStopTime property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldTimeAbsoluteStopTime() {
	if (ivjJTextFieldTimeAbsoluteStopTime == null) {
		try {
			ivjJTextFieldTimeAbsoluteStopTime = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldTimeAbsoluteStopTime.setName("JTextFieldTimeAbsoluteStopTime");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTimeAbsoluteStopTime;
}
/**
 * Return the JTextFieldTimeEntryStart property value.
 * @return com.cannontech.common.gui.util.JTextFieldTimeEntry
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private com.cannontech.common.gui.util.JTextFieldTimeEntry getJTextFieldTimeEntryStart() {
	if (ivjJTextFieldTimeEntryStart == null) {
		try {
			ivjJTextFieldTimeEntryStart = new com.cannontech.common.gui.util.JTextFieldTimeEntry();
			ivjJTextFieldTimeEntryStart.setName("JTextFieldTimeEntryStart");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJTextFieldTimeEntryStart;
}
/**
 * Insert the method's description here.
 * Creation date: (2/15/2001 12:49:41 PM)
 * @return java.lang.String
 */
public String getScheduleType() 
{
	return getJComboBoxType().getSelectedItem().toString();
}

/**
 * Insert the method's description here.
 * Creation date: (2/16/2001 3:10:18 PM)
 * @return java.lang.String
 */
public String getSelectedStartPolicy() 
{
	return com.cannontech.common.util.StringUtils.removeChars( 
		' ', 
		getJComboBoxStartPolicy().getSelectedItem().toString() );
}
/**
 * Insert the method's description here.
 * Creation date: (2/16/2001 3:10:18 PM)
 * @return java.lang.String
 */
public String getSelectedStopPolicy() 
{
	return com.cannontech.common.util.StringUtils.removeChars( 
		' ', 
		getJComboBoxStopPolicy().getSelectedItem().toString() );
}
/**
 * Return the TemplateComboBox property value.
 * @return javax.swing.JComboBox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JComboBox getTemplateComboBox() {
	if (ivjTemplateComboBox == null) {
		try {
			ivjTemplateComboBox = new javax.swing.JComboBox();
			ivjTemplateComboBox.setName("TemplateComboBox");
			// user code begin {1}
			for (int i = 0; i < ScriptTemplateTypes.getAllScriptTemplates().length; i++)
				ivjTemplateComboBox.addItem(ScriptTemplateTypes.getAllScriptTemplates()[i]);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTemplateComboBox;
}
/**
 * Return the TemplateLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTemplateLabel() {
	if (ivjTemplateLabel == null) {
		try {
			ivjTemplateLabel = new javax.swing.JLabel();
			ivjTemplateLabel.setName("TemplateLabel");
			ivjTemplateLabel.setFont(new java.awt.Font("dialog", 0, 14));
			ivjTemplateLabel.setText("Template:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTemplateLabel;
}
/**
 * Return the template type (SCriptTemplate.class values)
 * @return
 */
public int getTemplateType() 
{
	return ScriptTemplateTypes.getScriptTemplateFromString(getTemplateComboBox().getSelectedItem().toString());
}

/**
 * getValue method comment.
 */
public Object getValue(Object val) 
{
	Schedule sch = null;
	if( val == null )
		sch = new Schedule();
	else
		sch = (Schedule)val;

	// ID must be set by server!!	
	sch.setScheduleName( getJTextFieldScheduleName().getText().trim() );
	sch.setCategoryName( getJComboBoxCategory().getSelectedItem().toString() );
	sch.setType( getJComboBoxType().getSelectedItem().toString() );
	sch.setTemplateType(ScriptTemplateTypes.getScriptTemplateFromString((String)getTemplateComboBox().getSelectedItem()));
	
	sch.setStartPolicy( getSelectedStartPolicy() );
	sch.setStopPolicy( getSelectedStopPolicy() );

	if( getJComboBoxHoliday().getSelectedItem() != null )
		sch.setHolidayScheduleId( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getSelectedItem()).getHolidayScheduleID() );
	else
		sch.setHolidayScheduleId( 0 );

 	if( getJTextFieldTimeEntryStart().isEnabled() && getJTextFieldTimeEntryStart().getText() != null )
		sch.setStartTime( getJTextFieldTimeEntryStart().getTimeText() + ":00" );  // needs the seconds appended for the database:  HH:mm:ss
	

	java.util.GregorianCalendar tempCal = new java.util.GregorianCalendar();

	// Process the start attributes here	
	if( getSelectedStartPolicy().equalsIgnoreCase(Schedule.DATETIME_START) )
	{
		tempCal.setTime( getDateComboBox().getSelectedDate() );
			
		//getJCPopUpFieldDate().getModel().getSelectedItem().toString() );
		//java.util.Date d = new java.util.Date(date);	
		//tempCal.setTime( d );

		sch.setStartDay( tempCal.get(java.util.GregorianCalendar.DAY_OF_MONTH) );
		sch.setStartMonth( tempCal.get(java.util.GregorianCalendar.MONTH) + 1 );

		if( getJCheckBoxEveryYear().isSelected() )
			sch.setStartYear( 0 );
		else
			sch.setStartYear( tempCal.get(java.util.GregorianCalendar.YEAR) );
	} 
	else if( getSelectedStartPolicy().equalsIgnoreCase(Schedule.DAYOFMONTH_START) )
	{
		sch.setStartDay( Integer.parseInt(getJTextFieldDayOfMonth().getText()) );

		java.util.Date d = new java.util.Date();
		tempCal.setTime( d );

		sch.setStartMonth( tempCal.get(java.util.GregorianCalendar.MONTH) + 1 );
		sch.setStartYear( tempCal.get(java.util.GregorianCalendar.YEAR) );
	}
	else if( getSelectedStartPolicy().equalsIgnoreCase(Schedule.WEEKDAY_START) )
	{
		sch.setValidWeekDays( getJCheckBoxDayChooser().getSelectedDays8Chars() );
	}


	// Process the stop attributes here
	if( getSelectedStopPolicy().equalsIgnoreCase( Schedule.ABSOLUTETIME_STOP ) )
	{
 		if( getJTextFieldTimeAbsoluteStopTime().isEnabled() && getJTextFieldTimeAbsoluteStopTime().getText() != null )	 	
			sch.setStopTime( getJTextFieldTimeAbsoluteStopTime().getTimeText() + ":00" );
	}
	else if( getSelectedStopPolicy().equalsIgnoreCase( Schedule.DURATION_STOP ) )
	{
		//we entered minutes, lets make it seconds for the server
		sch.setDuration( ((Number)getJCSpinFieldDuration().getValue()).intValue() * 60 );
	}
	
	
	return sch;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	com.cannontech.clientutils.CTILogger.info("--------- UNCAUGHT EXCEPTION ---------");
	com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}

	getJComboBoxCategory().getEditor().getEditorComponent().addKeyListener(this);
	getJComboBoxCategory().addActionListener(this);
	
	// user code end
	getJTextFieldScheduleName().addCaretListener(ivjEventHandler);
	getJCheckBoxEveryYear().addActionListener(ivjEventHandler);
	getJComboBoxType().addActionListener(ivjEventHandler);
	getJComboBoxHoliday().addActionListener(ivjEventHandler);
	getJComboBoxStopPolicy().addActionListener(ivjEventHandler);
	getJComboBoxStartPolicy().addActionListener(ivjEventHandler);
	getJTextFieldDayOfMonth().addCaretListener(ivjEventHandler);
	getJTextFieldTimeEntryStart().addCaretListener(ivjEventHandler);
	getJCheckBoxDayChooser().addActionListener(ivjEventHandler);
	getJTextFieldTimeAbsoluteStopTime().addCaretListener(ivjEventHandler);
	getDateComboBox().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("ScheduleBasePanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(418, 439);

		java.awt.GridBagConstraints constraintsJPanelStartPolicy = new java.awt.GridBagConstraints();
		constraintsJPanelStartPolicy.gridx = 0; constraintsJPanelStartPolicy.gridy = 1;
		constraintsJPanelStartPolicy.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJPanelStartPolicy.weightx = 1.0;
		constraintsJPanelStartPolicy.weighty = 1.0;
		constraintsJPanelStartPolicy.insets = new java.awt.Insets(1, 8, 1, 8);
		add(getJPanelStartPolicy(), constraintsJPanelStartPolicy);

		java.awt.GridBagConstraints constraintsJPanelStopInternalPanel = new java.awt.GridBagConstraints();
		constraintsJPanelStopInternalPanel.gridx = 0; constraintsJPanelStopInternalPanel.gridy = 2;
		constraintsJPanelStopInternalPanel.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJPanelStopInternalPanel.weightx = 1.0;
		constraintsJPanelStopInternalPanel.weighty = 1.0;
		constraintsJPanelStopInternalPanel.insets = new java.awt.Insets(1, 8, 1, 8);
		add(getJPanelStopInternalPanel(), constraintsJPanelStopInternalPanel);

		java.awt.GridBagConstraints constraintsJPanel1 = new java.awt.GridBagConstraints();
		constraintsJPanel1.gridx = 0; constraintsJPanel1.gridy = 0;
		constraintsJPanel1.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsJPanel1.weightx = 1.0;
		constraintsJPanel1.weighty = 1.0;
		constraintsJPanel1.insets = new java.awt.Insets(1, 4, 1, 4);
		add(getJPanel1(), constraintsJPanel1);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}


	// set everything disabled
	setStopFieldVisible();
	setStartFieldVisible();
	jComboBoxType_ActionPerformed( null );

	getJComboBoxType().setEnabled( !editMode );
	//Never enabled, either we are in edit mode, or "simple" is the default type on create
	setScriptOnlyFieldsEnabled(false);
	// user code end
}
/**
 * This method was created in VisualAge.
 * @return boolean
 */
public boolean isInputValid() 
{
	Integer startSecs = null, stopSecs = null;
	try
	{		
		java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("HH:mm");
		df.setLenient( false );

		if( getJTextFieldTimeEntryStart().isVisible() )
		{
			startSecs = getJTextFieldTimeEntryStart().getTimeTotalSeconds();
			if( !getJTextFieldTimeEntryStart().isValidText() )
			{
				setErrorString("The Start Time text field does not contain a valid time");
				return false;
			}
		}
		
		if( getJTextFieldTimeAbsoluteStopTime().isVisible() )
		{
			stopSecs = getJTextFieldTimeAbsoluteStopTime().getTimeTotalSeconds();
			if( !getJTextFieldTimeAbsoluteStopTime().isValidText() )
			{
				setErrorString("The Absolute Stop Time text field does not contain a valid time");
				return false;
			}
		}	
	}
	catch(Exception ex)
	{
		setErrorString("An Exception occurred while trying to decipher the Absolute Stop Time text field or the Start Time text field");
		return false;
	}
	
	String scheduleName = getJTextFieldScheduleName().getText().trim();
    if( org.apache.commons.lang.StringUtils.isBlank(scheduleName) )
	{
		setErrorString("The Schedule Name text field must be filled in");
		return false;
    } else if (!PaoUtils.isValidPaoName(scheduleName)) {
	    setErrorString("The Schedule Name cannot contain invalid schedule name charaters.");
        return false;
	}
    if (getIMACSConnection().isScheduleNameExists(scheduleName, scheduleId)) {
        setErrorString("The Schedule Name already exists.");
        return false;
    }

	if( getJComboBoxCategory().getEditor().getItem() == null
		 || getJComboBoxCategory().getEditor().getItem().toString().length() <= 0 )
	{
		setErrorString("The Category text field must be filled in");
		return false;
	}

	if( startSecs != null && stopSecs != null )
	{
		if( stopSecs.intValue() <= startSecs.intValue() )
		{
			setErrorString("The start time text field must be greater than the stop time text field");
			return false;
		}		
	}
		
	try
	{
		if( getJTextFieldDayOfMonth().isVisible() )
		{		
			if( getJTextFieldDayOfMonth().getText() == null 
				 || getJTextFieldDayOfMonth().getText().length() <= 0
				 || Integer.parseInt(getJTextFieldDayOfMonth().getText()) <= 0 )
			{
				setErrorString("The day of month text field must have a value");
				return false;
			}
		}
	}
	catch( NumberFormatException nf )
	{
		setErrorString("The day of month text field must be a number");
		return false;
	}
	
/*	
	IDatabaseCache cache = DefaultDatabaseCache.getInstance();
	synchronized( cache )
	{
		List paos = cache.getAllYukonPAObjects();
		LiteYukonPAObject pao = null;
		
		for( int i = 0; i < paos.size(); i++ )
		{
			pao = (LiteYukonPAObject)paos.get(i);

			if( pao.getCategory() != PAOGroups.CAT_SCHEDULE )
				continue;
			
			if( getJTextFieldScheduleName().getText().equalsIgnoreCase(pao.getPaoName()) )
			{
				setErrorString("A schedule already exists with that name, choose another name");
				return false;
			}

		}

	}
*/

	return true;
}

/**
 * Comment
 */
public void jCheckBoxEveryYear_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
   java.util.GregorianCalendar currCal = new java.util.GregorianCalendar();
   currCal.setTime( new java.util.Date() );

   java.util.GregorianCalendar selCal = new java.util.GregorianCalendar();
   selCal.setTime( getDateComboBox().getSelectedDate() );

	if( getJCheckBoxEveryYear().isSelected() )
	{
		dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd");
	}
	else
	{
		dateFormatter = new java.text.SimpleDateFormat("MMMMMMMM dd, yyyy");

      selCal.set( Calendar.YEAR, currCal.get(Calendar.YEAR) );
	}

   getDateComboBox().setDateFormat( dateFormatter );
   getDateComboBox().setSelectedDate( selCal.getTime() );
   
   
	fireInputUpdate();

	return;
}
/**
 * Comment
 */
public void jComboBoxStartPolicy_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	setStartFieldVisible();
	fireInputUpdate();
	
	return;
}
/**
 * Comment
 */
public void jComboBoxStopPolicy_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{

	setStopFieldVisible();
	fireInputUpdate();

	return;
}
/**
 * Comment
 */
public void jComboBoxType_ActionPerformed(java.awt.event.ActionEvent actionEvent) 
{
	boolean val = getJComboBoxType().getSelectedItem().equals( Schedule.SIMPLE_TYPE );

	//Simple schedules can not have the UNTIL_COMPLETE stop policy	
	if( val )
	{
		//release the hate!
		if( getSelectedStopPolicy().equalsIgnoreCase(Schedule.UNTILCOMPLETE_STOP) )
			getJComboBoxStopPolicy().setSelectedIndex(0);

		getJComboBoxStopPolicy().removeItem( StringUtils.addCharBetweenWords(' ', Schedule.UNTILCOMPLETE_STOP) );
		
		//Disable the Script specific fields.
		setScriptOnlyFieldsEnabled(false);		
	}
	else	//Schedule.SCRIPT_TYPE
	{
		//be sure the UNTIL_COMPLETE stop policy is in the stop policy combo box!
		for( int i = 0; i < getJComboBoxStopPolicy().getItemCount(); i++ )
			if( StringUtils.removeChars(' ', getJComboBoxStopPolicy().getItemAt(i).toString()).equalsIgnoreCase(Schedule.UNTILCOMPLETE_STOP) )
			{
				val = true;
				break;
			}

		if( !val )
			getJComboBoxStopPolicy().addItem( StringUtils.addCharBetweenWords(' ', Schedule.UNTILCOMPLETE_STOP) );
			
		setScriptOnlyFieldsEnabled(true);
	}

	fireInputUpdate();
	return;
}
/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */

public void keyPressed(java.awt.event.KeyEvent e) 
{
}
/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
public void keyReleased(java.awt.event.KeyEvent e) 
{
	fireInputUpdate();
}
/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
public void keyTyped(java.awt.event.KeyEvent e) 
{
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());

		javax.swing.JFrame frame = new javax.swing.JFrame();
		ScheduleBasePanel aScheduleBasePanel;
		aScheduleBasePanel = new ScheduleBasePanel();
		frame.setContentPane(aScheduleBasePanel);
		frame.setSize(aScheduleBasePanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of com.cannontech.common.gui.util.DataInputPanel");
		com.cannontech.clientutils.CTILogger.error( exception.getMessage(), exception );;
	}
}
/**
 * Insert the method's description here.
 * Creation date: (3/8/2001 2:20:06 PM)
 * @param items java.util.Enumeration
 */
private void setEditableJComboBox(final java.util.Enumeration items) 
{
	if( items != null )
	{		
		javax.swing.SwingUtilities.invokeLater( new Runnable()
		{
			public void run()
			{
				while( items.hasMoreElements() )
					getJComboBoxCategory().addItem( items.nextElement().toString() );
			}
				
		});			
		
	}
		
}
/**
 * @param b
 */
private void setScriptOnlyFieldsEnabled(boolean value)
{
    boolean editValue = value && (!editMode);
	getTemplateComboBox().setEnabled(editValue);
}
/**
 * Insert the method's description here.
 * Creation date: (2/15/2001 11:52:07 AM)
 * @param button javax.swing.JRadioButton
 */
private void setStartFieldVisible()
{
	getDateComboBox().setVisible(
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DATETIME_START) );
	getJCheckBoxEveryYear().setVisible(
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DATETIME_START) );

		
	getJTextFieldDayOfMonth().setVisible( 
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DAYOFMONTH_START) );
	getJLabel1to31().setVisible( 
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.DAYOFMONTH_START) );

		
	getJCheckBoxDayChooser().setVisible( 
		getSelectedStartPolicy().equalsIgnoreCase(Schedule.WEEKDAY_START) );

	getJTextFieldTimeEntryStart().setEnabled( 
		!getSelectedStartPolicy().equalsIgnoreCase(Schedule.MANUAL_START) );

}
/**
 * Insert the method's description here.
 * Creation date: (2/15/2001 11:52:07 AM)
 * @param button javax.swing.JRadioButton
 */
private void setStopFieldVisible()
{
	//absolute GUI widgets
	getJTextFieldTimeAbsoluteStopTime().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.ABSOLUTETIME_STOP) );
	getJLabelAbsoluteStopTime().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.ABSOLUTETIME_STOP) );
	getJLabelABSFormat().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.ABSOLUTETIME_STOP) );
	

	//duration GUI widgets
	getJCSpinFieldDuration().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.DURATION_STOP) );
	getJLabelMinutes().setVisible(
		getSelectedStopPolicy().equalsIgnoreCase(Schedule.DURATION_STOP) );
}
/**
 * setValue method comment.
 */
public void setValue(Object val) 
{
	Schedule sched = (Schedule)val;
	this.scheduleId = sched.getId();

	setEditableJComboBox( sched.getNonPersistantData().getCategories() );
	
	getJTextFieldScheduleName().setText( sched.getScheduleName() );
	getJComboBoxCategory().setSelectedItem( sched.getCategoryName() );
	getJComboBoxType().setSelectedItem( sched.getType() );
	getTemplateComboBox().setSelectedItem( ScriptTemplateTypes.getScriptTemplateFromID(sched.getTemplateType()));
	getJCSpinFieldDuration().setValue( new Integer(sched.getDuration()) );

	for( int i = 0; i < getJComboBoxHoliday().getItemCount(); i++ )
		if( ((com.cannontech.database.data.lite.LiteHolidaySchedule)getJComboBoxHoliday().getItemAt(i)).getHolidayScheduleID()
			 == sched.getHolidayScheduleId() )
		{
			getJComboBoxHoliday().setSelectedIndex(i);
			break;
		}

	if( sched.getStartTime().length() > 5 )
		getJTextFieldTimeEntryStart().setText( sched.getStartTime().substring(0, 5) );
	else
		getJTextFieldTimeEntryStart().setText( sched.getStartTime() );
		
	// Process the start policies and set the viewable area in the
	// startPolicyScrollPane to the selected radioButton
	getJComboBoxStartPolicy().setSelectedItem( StringUtils.addCharBetweenWords(
		' ', sched.getStartPolicy() ) );
	
	if( sched.getStartPolicy().equalsIgnoreCase( Schedule.DATETIME_START ) )
	{
		/*----- SUPER HACK!!! */
		java.util.GregorianCalendar cal = new java.util.GregorianCalendar();
		cal.setTime( new java.util.Date() );
		/*----- END SUPER HACK */
		
		cal.set( java.util.GregorianCalendar.DAY_OF_MONTH,	sched.getStartDay() );
		cal.set( java.util.GregorianCalendar.MONTH, (sched.getStartMonth()-1) );

		/*----- SUPER HACK */
		if( sched.getStartYear() == 0 )
		{
			getJCheckBoxEveryYear().doClick();
			// just set the year to the current year
			cal.set( java.util.GregorianCalendar.YEAR, cal.get(java.util.GregorianCalendar.YEAR) );
		}
		else if( sched.getStartYear() <= 2000 )
			cal.set( java.util.GregorianCalendar.YEAR, cal.get(java.util.GregorianCalendar.YEAR) );
		else
			cal.set( java.util.GregorianCalendar.YEAR, sched.getStartYear() );
		/*----- END SUPER HACK */
		
		getDateComboBox().setSelectedDate( cal.getTime() );
	}
	else if( sched.getStartPolicy().equalsIgnoreCase( Schedule.DAYOFMONTH_START ) )
	{		
		//cal.setTime( sched.getNextRunTime() );		
		getJTextFieldDayOfMonth().setText( 
				new Integer(sched.getStartDay()).toString() );
	}
	else if( sched.getStartPolicy().equalsIgnoreCase( Schedule.WEEKDAY_START ) )
	{
		//HOLIDAY is set in here too!!!
		getJCheckBoxDayChooser().setSelectedCheckBoxes( sched.getValidWeekDays() );		
	}

	
	// Process the stop policies and set the viewable area in the
	// stopPolicyScrollPane to the selected radioButton
	getJComboBoxStopPolicy().setSelectedItem( StringUtils.addCharBetweenWords(
		' ', sched.getStopPolicy() ) );
	
	if( sched.getStopPolicy().equalsIgnoreCase( Schedule.ABSOLUTETIME_STOP ) )
	{
		if( sched.getStopTime().length() > 5 )
			getJTextFieldTimeAbsoluteStopTime().setText( sched.getStopTime().substring(0, 5) );
		else
			getJTextFieldTimeAbsoluteStopTime().setText( sched.getStopTime() );
	}
	else if( sched.getStopPolicy().equalsIgnoreCase( Schedule.DURATION_STOP ) )
	{
		// since the server gives us seconds, lets make it into minutes
		getJCSpinFieldDuration().setValue( new Integer(sched.getDuration() / 60) );
	}
}
}

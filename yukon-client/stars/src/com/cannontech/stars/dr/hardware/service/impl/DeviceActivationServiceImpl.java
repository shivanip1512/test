package com.cannontech.stars.dr.hardware.service.impl;

import java.util.Date;

import org.apache.commons.lang.Validate;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataRetrievalFailureException;

import com.cannontech.common.constants.YukonListEntryTypes;
import com.cannontech.database.data.lite.LiteYukonUser;
import com.cannontech.database.data.lite.stars.LiteStarsEnergyCompany;
import com.cannontech.stars.core.service.StarsCacheService;
import com.cannontech.stars.dr.account.dao.CustomerAccountDao;
import com.cannontech.stars.dr.account.model.CustomerAccount;
import com.cannontech.stars.dr.event.dao.LMCustomerEventBaseDao;
import com.cannontech.stars.dr.event.model.LMCustomerEventBase;
import com.cannontech.stars.dr.hardware.dao.InventoryBaseDao;
import com.cannontech.stars.dr.hardware.dao.LMHardwareBaseDao;
import com.cannontech.stars.dr.hardware.model.InventoryBase;
import com.cannontech.stars.dr.hardware.model.LMHardwareBase;
import com.cannontech.stars.dr.hardware.service.DeviceActivationService;

public class DeviceActivationServiceImpl implements DeviceActivationService {
    private CustomerAccountDao customerAccountDao;
    private InventoryBaseDao inventoryBaseDao;
    private LMHardwareBaseDao hardwareBaseDao;
    private LMCustomerEventBaseDao customerEventBaseDao;
    private StarsCacheService cacheService;
    
    @SuppressWarnings("unused")
    public boolean isValidActivation(String accountNumber, String serialNumber,
    		LiteYukonUser user) {
        Validate.notNull(accountNumber, "AccountNumber cannot be null");
        Validate.notNull(serialNumber, "SerialNumber cannot be null");
        
        try {
            CustomerAccount account = customerAccountDao.getByAccountNumber(accountNumber, user);
            LMHardwareBase hardware = hardwareBaseDao.getBySerialNumber(serialNumber);
            InventoryBase inventoryBase = inventoryBaseDao.getById(hardware.getInventoryId());
            return true;
        } catch (DataRetrievalFailureException e) {
            return false;
        }
    }
    
    public boolean activate(LiteStarsEnergyCompany energyCompany, String accountNumber, 
    		String serialNumber, LiteYukonUser user) {
        Validate.notNull(energyCompany, "EnergyCompany cannot be null");
        Validate.notNull(accountNumber, "AccountNumber cannot be null");
        Validate.notNull(serialNumber, "SerialNumber cannot be null");
        
        try {
            CustomerAccount account = customerAccountDao.getByAccountNumber(accountNumber, user);
            LMHardwareBase hardware = hardwareBaseDao.getBySerialNumber(serialNumber);
        
            InventoryBase inventoryBase = inventoryBaseDao.getById(hardware.getInventoryId());
            inventoryBase.setAccountId(account.getAccountId());
        
            boolean updateResult = inventoryBaseDao.update(inventoryBase);
            if (!updateResult) return false;
            
            int eventTypeId = energyCompany.getYukonListEntry( YukonListEntryTypes.YUK_DEF_ID_CUST_EVENT_LMHARDWARE ).getEntryID();
            int installActID = energyCompany.getYukonListEntry( YukonListEntryTypes.YUK_DEF_ID_CUST_ACT_INSTALL ).getEntryID();
            
            LMCustomerEventBase eventBase = new LMCustomerEventBase();
            eventBase.setActionId(installActID);
            eventBase.setEventTypeId(eventTypeId);
            eventBase.setEventDateTime(new Date());
            eventBase.setAuthorizedBy("");
            eventBase.setNotes("Install Event generated by onsite installer");
            customerEventBaseDao.addHardwareEvent(eventBase, energyCompany.getEnergyCompanyID(), inventoryBase.getInventoryId());
            
            cacheService.updateInventoryCache(energyCompany, inventoryBase, account, eventBase);

            return updateResult;
        } catch (DataAccessException e) {
            return false;
        }
    }

    public void setCustomerAccountDao(CustomerAccountDao customerAccountDao) {
        this.customerAccountDao = customerAccountDao;
    }

    public void setInventoryBaseDao(InventoryBaseDao inventoryBaseDao) {
        this.inventoryBaseDao = inventoryBaseDao;
    }

    public void setHardwareBaseDao(LMHardwareBaseDao hardwareBaseDao) {
        this.hardwareBaseDao = hardwareBaseDao;
    }

    public void setCustomerEventBaseDao(LMCustomerEventBaseDao customerEventBaseDao) {
        this.customerEventBaseDao = customerEventBaseDao;
    }
    
    public void setCacheService(StarsCacheService cacheService) {
        this.cacheService = cacheService;
    }
    
}
